
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 ff f8 00 00       	call   c000f91f <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 d3 88 02 00       	call   c00288f8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 4c 95 02 c0       	mov    ebx,0xc002954c
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 58 95 02 c0    	cmp    ebx,0xc0029558
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 98 d9 02 c0       	mov    eax,0xc002d998
c0000049:	3d 98 d9 02 c0       	cmp    eax,0xc002d998
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 98 d9 02 c0       	push   0xc002d998
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 98 d9 02 c0       	mov    eax,0xc002d998
c0000075:	2d 98 d9 02 c0       	sub    eax,0xc002d998
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 98 d9 02 c0       	push   0xc002d998
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c8 df 02 c0 00 	cmp    BYTE PTR ds:0xc002dfc8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 60 95 02 c0       	mov    ebx,0xc0029560
c00000bb:	81 eb 5c 95 02 c0    	sub    ebx,0xc002955c
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 5c 95 02 c0       	mov    esi,0xc002955c
c00000ca:	a1 cc df 02 c0       	mov    eax,ds:0xc002dfcc
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 cc df 02 c0       	mov    ds:0xc002dfcc,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 cc df 02 c0       	mov    eax,ds:0xc002dfcc
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 98 d9 02 c0       	push   0xc002d998
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c8 df 02 c0 01 	mov    BYTE PTR ds:0xc002dfc8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 d0 df 02 c0       	push   0xc002dfd0
c000012c:	68 98 d9 02 c0       	push   0xc002d998
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 d9 d2 01 00       	call   c001d67c <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 6c 22 01 00       	call   c0012627 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 b7 d2 01 00       	call   c001d67c <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 5f d7 01 00       	call   c001db43 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 84 dd 01 00       	call   c001e171 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 10 e4 02 c0 	lgdtd  ds:0xc002e410
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 d5 3f 01 00       	call   c00145b7 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 15 e1 00 00       	jmp    c000e760 <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 e8 df 02 c0       	mov    ds:0xc002dfe8,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 e8 df 02 c0    	mov    DWORD PTR ds:0xc002dfe8,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d e8 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002dfe8
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 80 95 02 c0 02 	test   BYTE PTR [edx-0x3ffd6a80],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 80 95 02 c0 01 	test   BYTE PTR [edx-0x3ffd6a80],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 80 95 02 c0 08 	test   BYTE PTR [edx-0x3ffd6a80],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 80 95 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6a80],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 80 95 02 c0 01 	test   BYTE PTR [edx-0x3ffd6a80],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 00 e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e000
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 00 e0 02 c0    	mov    DWORD PTR ds:0xc002e000,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 04 e0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1ffc]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 04 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1ffc],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 00 e0 02 c0    	mov    DWORD PTR ds:0xc002e000,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 2c e0 02 c0    	cmp    DWORD PTR ds:0xc002e02c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 3c e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e03c
c0000e38:	c7 42 0c 34 e0 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e034
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 3c e0 02 c0    	mov    DWORD PTR ds:0xc002e03c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 2c e0 02 c0    	mov    DWORD PTR ds:0xc002e02c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 00 e0 02 c0 02 	test   BYTE PTR ds:0xc002e000,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 00 e0 02 c0       	mov    eax,0xc002e000
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 9f e7 00 00       	call   c000f6b8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 e1 e6 00 00       	call   c000f6b8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 cb e6 00 00       	call   c000f6b8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 a7 e6 00 00       	call   c000f6b8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 00 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e000
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 00 e0 02 c0       	mov    eax,0xc002e000
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 04 e0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1ffc]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 04 e0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1ffc],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 34 e0 02 c0 	lea    edx,[eax*8-0x3ffd1fcc]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 00 e0 02 c0       	mov    eax,0xc002e000
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 40 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e040
c00011ba:	81 fb 34 e0 02 c0    	cmp    ebx,0xc002e034
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 34 e0 02 c0       	cmp    eax,0xc002e034
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 30 e0 02 c0    	cmp    DWORD PTR ds:0xc002e030,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 3c e0 02 c0       	mov    ds:0xc002e03c,eax
c00011f6:	a3 40 e0 02 c0       	mov    ds:0xc002e040,eax
c00011fb:	a3 30 e0 02 c0       	mov    ds:0xc002e030,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 34 e0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e034
c0001209:	c7 40 0c 34 e0 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e034
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 40 e0 02 c0       	mov    ds:0xc002e040,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 34 e0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e034
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 f8 df 02 c0 	lea    ebp,[edx*4-0x3ffd2008]
c000125a:	8b 14 95 00 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2000]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 00 e0 02 c0 	lea    ecx,[edx*4-0x3ffd2000]
c0001275:	8b 14 95 00 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2000]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 34 e3 02 c0 	or     DWORD PTR [edi*4-0x3ffd1ccc],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 34 e0 02 c0 	lea    eax,[eax*8-0x3ffd1fcc]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 3c e0 02 c0    	mov    DWORD PTR ds:0xc002e03c,ecx
c000132f:	89 0d 40 e0 02 c0    	mov    DWORD PTR ds:0xc002e040,ecx
c0001335:	c7 41 08 34 e0 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e034
c000133c:	c7 41 0c 34 e0 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e034
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 2c e0 02 c0 	lea    edx,[ecx*8-0x3ffd1fd4]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 34 e3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1ccc]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 34 e3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1ccc]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 2c e0 02 c0 	lea    edx,[eax*4-0x3ffd1fd4]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 34 e3 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1ccc],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 3c e0 02 c0    	mov    DWORD PTR ds:0xc002e03c,edi
c0001402:	89 3d 40 e0 02 c0    	mov    DWORD PTR ds:0xc002e040,edi
c0001408:	c7 47 08 34 e0 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e034
c000140f:	c7 47 0c 34 e0 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e034
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 30 e0 02 c0    	mov    DWORD PTR ds:0xc002e030,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 2c e0 02 c0       	mov    eax,ds:0xc002e02c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 2c e0 02 c0    	mov    DWORD PTR ds:0xc002e02c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 00 e0 02 c0       	mov    edx,0xc002e000
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 00 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e000,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 00 e0 02 c0       	mov    eax,0xc002e000
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 54 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e354
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 54 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e354,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 54 e3 02 c0    	mov    DWORD PTR ds:0xc002e354,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 2c e0 02 c0    	cmp    DWORD PTR ds:0xc002e02c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 2c e0 02 c0    	mov    DWORD PTR ds:0xc002e02c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 00 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e000,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 00 e0 02 c0       	mov    eax,0xc002e000
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 5c e3 02 c0    	push   DWORD PTR ds:0xc002e35c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 00 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e000,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 00 e0 02 c0       	mov    eax,0xc002e000
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 5c e3 02 c0       	mov    eax,ds:0xc002e35c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 00 e0 02 c0       	mov    eax,0xc002e000
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 2c e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e02c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 00 e0 02 c0       	mov    eax,0xc002e000
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 2c e0 02 c0       	mov    eax,ds:0xc002e02c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 04 e0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1ffc]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 34 e0 02 c0       	mov    eax,0xc002e034
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 2c e3 02 c0       	cmp    eax,0xc002e32c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 50 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e350
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 64 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e364
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 74 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e374
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 00 e0 02 c0       	mov    eax,0xc002e000
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 84 96 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd697c]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 00 e0 02 c0       	mov    eax,ds:0xc002e000
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 00 e0 02 c0       	mov    ds:0xc002e000,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 44 e3 02 c0    	mov    DWORD PTR ds:0xc002e344,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 48 e3 02 c0    	mov    DWORD PTR ds:0xc002e348,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 4c e3 02 c0    	mov    DWORD PTR ds:0xc002e34c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 54 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e354,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 a0 fa 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0560]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 76 f0 01 00       	jmp    c0020c68 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 a0 fa 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0560]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 a7 f0 01 00       	jmp    c0020caf <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 a0 fa 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd0560]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 cf f0 01 00       	jmp    c0020cf6 <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 4a 4d 02 00       	call   c0026c54 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 a0 97 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6860]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 a0 97 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6860]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba a0 96 02 c0       	mov    edx,0xc00296a0
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba c0 97 02 c0       	mov    edx,0xc00297c0
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba a8 c8 02 c0       	mov    edx,0xc002c8a8
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba cc 97 02 c0       	mov    edx,0xc00297cc
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba b0 97 02 c0       	mov    edx,0xc00297b0
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 a0 e3 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1c60]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 80 e3 02 c0    	mov    ax,ds:0xc002e380
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 80 e3 02 c0    	mov    ds:0xc002e380,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 47 3b 02 00       	call   c0026c54 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 6b 50 00 00       	call   c0008690 <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 fd 4f 00 00       	call   c00086a6 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 d2 97 02 c0       	mov    eax,0xc00297d2
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 7e 48 00 00       	call   c00086bd <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad 20 97 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd68e0]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 db 97 02 c0       	mov    eax,0xc00297db
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 54 48 00 00       	call   c00087b9 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 a0 97 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6860]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 30 47 00 00       	call   c00087b9 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 17 47 00 00       	call   c00087b9 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 44 46 00 00       	call   c00087b9 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 31 46 00 00       	call   c00087b9 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 12 25 02 00       	call   c0026c54 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba b0 97 02 c0       	mov    edx,0xc00297b0
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba a0 96 02 c0       	mov    edx,0xc00296a0
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba b0 96 02 c0       	mov    edx,0xc00296b0
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 7c 3a 00 00       	call   c000874d <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 a0 e3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1c60]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 a0 e3 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1c60],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 d9 36 00 00       	call   c0008690 <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 2a 33 00 00       	call   c00086a6 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 26 2d 00 00       	call   c0008690 <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 65 2c 00 00       	call   c00086a6 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 d9 0e 02 00       	call   c0026c54 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 bf 0e 02 00       	call   c0026c54 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 c1 26 00 00       	call   c0008690 <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 38 26 00 00       	call   c00086a6 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 a4 25 00 00       	call   c0008690 <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 66 25 00 00       	call   c00086a6 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 11 25 00 00       	call   c0008690 <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 d5 24 00 00       	call   c00086a6 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 b6 21 00 00       	call   c0008690 <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 93 20 00 00       	call   c00086a6 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 2e 20 00 00       	call   c0008690 <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 c5 1f 00 00       	call   c00086a6 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 f9 1d 00 00       	call   c0008690 <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 76 1b 00 00       	call   c00086a6 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 11 1b 00 00       	call   c0008690 <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 94 1a 00 00       	call   c00086a6 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 38 1a 00 00       	call   c0008690 <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 b5 19 00 00       	call   c00086a6 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 39 19 00 00       	call   c000874d <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 f7 96 02 c0       	mov    eax,0xc00296f7
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 cd 17 00 00       	call   c00087b9 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 c4 16 00 00       	call   c00086bd <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 f0 96 02 c0       	mov    eax,0xc00296f0
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_expand>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 3c             	sub    esp,0x3c
c0007160:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007164:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007168:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000716c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007170:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007174:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007178:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000717c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007180:	89 d8                	mov    eax,ebx
c0007182:	e8 a3 b1 ff ff       	call   c000232a <validate>
c0007187:	89 c5                	mov    ebp,eax
c0007189:	85 c0                	test   eax,eax
c000718b:	0f 85 f4 01 00 00    	jne    c0007385 <f_expand+0x22c>
c0007191:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007195:	85 ed                	test   ebp,ebp
c0007197:	0f 85 e8 01 00 00    	jne    c0007385 <f_expand+0x22c>
c000719d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00071a1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00071a5:	75 0a                	jne    c00071b1 <f_expand+0x58>
c00071a7:	bd 07 00 00 00       	mov    ebp,0x7
c00071ac:	e9 d4 01 00 00       	jmp    c0007385 <f_expand+0x22c>
c00071b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00071b4:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00071b7:	75 ee                	jne    c00071a7 <f_expand+0x4e>
c00071b9:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00071bd:	74 e8                	je     c00071a7 <f_expand+0x4e>
c00071bf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00071c3:	8a 0e                	mov    cl,BYTE PTR [esi]
c00071c5:	80 f9 04             	cmp    cl,0x4
c00071c8:	74 07                	je     c00071d1 <f_expand+0x78>
c00071ca:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00071cf:	77 d6                	ja     c00071a7 <f_expand+0x4e>
c00071d1:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00071d5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00071d9:	c1 e0 09             	shl    eax,0x9
c00071dc:	8d 50 ff             	lea    edx,[eax-0x1]
c00071df:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c00071e3:	0f 95 c2             	setne  dl
c00071e6:	0f b6 d2             	movzx  edx,dl
c00071e9:	89 d7                	mov    edi,edx
c00071eb:	31 d2                	xor    edx,edx
c00071ed:	52                   	push   edx
c00071ee:	50                   	push   eax
c00071ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00071f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00071f7:	e8 58 fa 01 00       	call   c0026c54 <__udivdi3>
c00071fc:	83 c4 10             	add    esp,0x10
c00071ff:	01 f8                	add    eax,edi
c0007201:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007205:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0007208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000720c:	83 ff 01             	cmp    edi,0x1
c000720f:	76 05                	jbe    c0007216 <f_expand+0xbd>
c0007211:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007214:	77 05                	ja     c000721b <f_expand+0xc2>
c0007216:	bf 02 00 00 00       	mov    edi,0x2
c000721b:	80 f9 04             	cmp    cl,0x4
c000721e:	75 19                	jne    c0007239 <f_expand+0xe0>
c0007220:	89 f0                	mov    eax,esi
c0007222:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007226:	89 fa                	mov    edx,edi
c0007228:	e8 f3 b9 ff ff       	call   c0002c20 <find_bitmap>
c000722d:	89 c6                	mov    esi,eax
c000722f:	85 c0                	test   eax,eax
c0007231:	0f 84 70 ff ff ff    	je     c00071a7 <f_expand+0x4e>
c0007237:	eb 7f                	jmp    c00072b8 <f_expand+0x15f>
c0007239:	89 fe                	mov    esi,edi
c000723b:	89 f9                	mov    ecx,edi
c000723d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007245:	89 ca                	mov    edx,ecx
c0007247:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000724b:	89 d8                	mov    eax,ebx
c000724d:	e8 3b bd ff ff       	call   c0002f8d <get_fat>
c0007252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007256:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000725a:	41                   	inc    ecx
c000725b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000725f:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007262:	77 05                	ja     c0007269 <f_expand+0x110>
c0007264:	b9 02 00 00 00       	mov    ecx,0x2
c0007269:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c000726e:	74 3e                	je     c00072ae <f_expand+0x155>
c0007270:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0007275:	75 0a                	jne    c0007281 <f_expand+0x128>
c0007277:	bd 01 00 00 00       	mov    ebp,0x1
c000727c:	e9 04 01 00 00       	jmp    c0007385 <f_expand+0x22c>
c0007281:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007286:	75 13                	jne    c000729b <f_expand+0x142>
c0007288:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000728c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007290:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c0007294:	75 0f                	jne    c00072a5 <f_expand+0x14c>
c0007296:	e9 ce 00 00 00       	jmp    c0007369 <f_expand+0x210>
c000729b:	89 ce                	mov    esi,ecx
c000729d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072a5:	39 f9                	cmp    ecx,edi
c00072a7:	75 9c                	jne    c0007245 <f_expand+0xec>
c00072a9:	e9 f9 fe ff ff       	jmp    c00071a7 <f_expand+0x4e>
c00072ae:	bd 02 00 00 00       	mov    ebp,0x2
c00072b3:	e9 cd 00 00 00       	jmp    c0007385 <f_expand+0x22c>
c00072b8:	83 f8 ff             	cmp    eax,0xffffffff
c00072bb:	74 ba                	je     c0007277 <f_expand+0x11e>
c00072bd:	8d 7e ff             	lea    edi,[esi-0x1]
c00072c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00072c4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00072c8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072cd:	74 51                	je     c0007320 <f_expand+0x1c7>
c00072cf:	83 ec 0c             	sub    esp,0xc
c00072d2:	89 f2                	mov    edx,esi
c00072d4:	6a 01                	push   0x1
c00072d6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00072da:	e8 f4 b9 ff ff       	call   c0002cd3 <change_bitmap>
c00072df:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00072e3:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c00072e7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00072eb:	83 c4 10             	add    esp,0x10
c00072ee:	85 c0                	test   eax,eax
c00072f0:	74 2e                	je     c0007320 <f_expand+0x1c7>
c00072f2:	eb 71                	jmp    c0007365 <f_expand+0x20c>
c00072f4:	83 c9 ff             	or     ecx,0xffffffff
c00072f7:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00072fc:	74 03                	je     c0007301 <f_expand+0x1a8>
c00072fe:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007301:	89 fa                	mov    edx,edi
c0007303:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007307:	e8 7c ba ff ff       	call   c0002d88 <put_fat>
c000730c:	85 c0                	test   eax,eax
c000730e:	75 55                	jne    c0007365 <f_expand+0x20c>
c0007310:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007314:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0007318:	47                   	inc    edi
c0007319:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000731e:	75 d4                	jne    c00072f4 <f_expand+0x19b>
c0007320:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007324:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007328:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000732d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007330:	74 53                	je     c0007385 <f_expand+0x22c>
c0007332:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007335:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0007339:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c000733d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007341:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007345:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0007348:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000734b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000734e:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007351:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007354:	39 ca                	cmp    edx,ecx
c0007356:	77 2d                	ja     c0007385 <f_expand+0x22c>
c0007358:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c000735c:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007360:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007363:	eb 20                	jmp    c0007385 <f_expand+0x22c>
c0007365:	89 c5                	mov    ebp,eax
c0007367:	eb 1c                	jmp    c0007385 <f_expand+0x22c>
c0007369:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000736e:	74 0c                	je     c000737c <f_expand+0x223>
c0007370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007374:	89 f7                	mov    edi,esi
c0007376:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000737a:	eb 9d                	jmp    c0007319 <f_expand+0x1c0>
c000737c:	8d 46 ff             	lea    eax,[esi-0x1]
c000737f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007383:	eb 9b                	jmp    c0007320 <f_expand+0x1c7>
c0007385:	83 c4 3c             	add    esp,0x3c
c0007388:	89 e8                	mov    eax,ebp
c000738a:	5b                   	pop    ebx
c000738b:	5e                   	pop    esi
c000738c:	5f                   	pop    edi
c000738d:	5d                   	pop    ebp
c000738e:	c3                   	ret    

c000738f <f_forward>:
c000738f:	55                   	push   ebp
c0007390:	57                   	push   edi
c0007391:	56                   	push   esi
c0007392:	53                   	push   ebx
c0007393:	83 ec 2c             	sub    esp,0x2c
c0007396:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000739a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000739e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00073a4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00073a8:	89 d8                	mov    eax,ebx
c00073aa:	e8 7b af ff ff       	call   c000232a <validate>
c00073af:	89 c5                	mov    ebp,eax
c00073b1:	85 c0                	test   eax,eax
c00073b3:	0f 85 aa 01 00 00    	jne    c0007563 <f_forward+0x1d4>
c00073b9:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00073bd:	85 ed                	test   ebp,ebp
c00073bf:	0f 85 9e 01 00 00    	jne    c0007563 <f_forward+0x1d4>
c00073c5:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00073c9:	0f 84 8f 01 00 00    	je     c000755e <f_forward+0x1cf>
c00073cf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00073d2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00073d5:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00073d8:	bf 00 00 00 00       	mov    edi,0x0
c00073dd:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00073e0:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00073e4:	89 d1                	mov    ecx,edx
c00073e6:	19 f9                	sbb    ecx,edi
c00073e8:	0f 83 cf 00 00 00    	jae    c00074bd <f_forward+0x12e>
c00073ee:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00073f2:	e9 c6 00 00 00       	jmp    c00074bd <f_forward+0x12e>
c00073f7:	50                   	push   eax
c00073f8:	50                   	push   eax
c00073f9:	6a 00                	push   0x0
c00073fb:	6a 00                	push   0x0
c00073fd:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007401:	83 c4 10             	add    esp,0x10
c0007404:	85 c0                	test   eax,eax
c0007406:	0f 84 57 01 00 00    	je     c0007563 <f_forward+0x1d4>
c000740c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000740f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007416:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000741a:	89 d7                	mov    edi,edx
c000741c:	8d 4e ff             	lea    ecx,[esi-0x1]
c000741f:	89 c6                	mov    esi,eax
c0007421:	0f ac fe 09          	shrd   esi,edi,0x9
c0007425:	21 ce                	and    esi,ecx
c0007427:	89 c1                	mov    ecx,eax
c0007429:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000742f:	0f 84 98 00 00 00    	je     c00074cd <f_forward+0x13e>
c0007435:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007439:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000743c:	89 c8                	mov    eax,ecx
c000743e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007442:	e8 79 aa ff ff       	call   c0001ec0 <clst2sect>
c0007447:	89 d7                	mov    edi,edx
c0007449:	09 c7                	or     edi,eax
c000744b:	0f 84 9e 00 00 00    	je     c00074ef <f_forward+0x160>
c0007451:	31 ff                	xor    edi,edi
c0007453:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007456:	01 c6                	add    esi,eax
c0007458:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000745c:	11 d7                	adc    edi,edx
c000745e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007461:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007464:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007468:	39 fa                	cmp    edx,edi
c000746a:	0f 85 a2 00 00 00    	jne    c0007512 <f_forward+0x183>
c0007470:	39 f0                	cmp    eax,esi
c0007472:	0f 85 9a 00 00 00    	jne    c0007512 <f_forward+0x183>
c0007478:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000747b:	ba 00 02 00 00       	mov    edx,0x200
c0007480:	25 ff 01 00 00       	and    eax,0x1ff
c0007485:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007489:	29 c2                	sub    edx,eax
c000748b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000748e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007491:	39 d1                	cmp    ecx,edx
c0007493:	76 02                	jbe    c0007497 <f_forward+0x108>
c0007495:	89 d1                	mov    ecx,edx
c0007497:	8d 73 50             	lea    esi,[ebx+0x50]
c000749a:	52                   	push   edx
c000749b:	01 c6                	add    esi,eax
c000749d:	52                   	push   edx
c000749e:	51                   	push   ecx
c000749f:	56                   	push   esi
c00074a0:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00074a4:	83 c4 10             	add    esp,0x10
c00074a7:	85 c0                	test   eax,eax
c00074a9:	74 44                	je     c00074ef <f_forward+0x160>
c00074ab:	31 ff                	xor    edi,edi
c00074ad:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00074b0:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00074b3:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00074b7:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00074bb:	01 07                	add    DWORD PTR [edi],eax
c00074bd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00074c2:	0f 85 2f ff ff ff    	jne    c00073f7 <f_forward+0x68>
c00074c8:	e9 96 00 00 00       	jmp    c0007563 <f_forward+0x1d4>
c00074cd:	85 f6                	test   esi,esi
c00074cf:	0f 85 60 ff ff ff    	jne    c0007435 <f_forward+0xa6>
c00074d5:	89 d7                	mov    edi,edx
c00074d7:	09 c7                	or     edi,eax
c00074d9:	75 05                	jne    c00074e0 <f_forward+0x151>
c00074db:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00074de:	eb 0a                	jmp    c00074ea <f_forward+0x15b>
c00074e0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00074e3:	89 d8                	mov    eax,ebx
c00074e5:	e8 a3 ba ff ff       	call   c0002f8d <get_fat>
c00074ea:	83 f8 01             	cmp    eax,0x1
c00074ed:	77 0b                	ja     c00074fa <f_forward+0x16b>
c00074ef:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00074f3:	bd 02 00 00 00       	mov    ebp,0x2
c00074f8:	eb 69                	jmp    c0007563 <f_forward+0x1d4>
c00074fa:	83 f8 ff             	cmp    eax,0xffffffff
c00074fd:	75 0b                	jne    c000750a <f_forward+0x17b>
c00074ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007503:	bd 01 00 00 00       	mov    ebp,0x1
c0007508:	eb 59                	jmp    c0007563 <f_forward+0x1d4>
c000750a:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000750d:	e9 23 ff ff ff       	jmp    c0007435 <f_forward+0xa6>
c0007512:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007516:	79 20                	jns    c0007538 <f_forward+0x1a9>
c0007518:	83 ec 0c             	sub    esp,0xc
c000751b:	6a 01                	push   0x1
c000751d:	52                   	push   edx
c000751e:	50                   	push   eax
c000751f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007523:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007527:	50                   	push   eax
c0007528:	e8 c5 a6 ff ff       	call   c0001bf2 <disk_write>
c000752d:	83 c4 20             	add    esp,0x20
c0007530:	85 c0                	test   eax,eax
c0007532:	75 cb                	jne    c00074ff <f_forward+0x170>
c0007534:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007538:	83 ec 0c             	sub    esp,0xc
c000753b:	6a 01                	push   0x1
c000753d:	57                   	push   edi
c000753e:	56                   	push   esi
c000753f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007543:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007547:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000754b:	50                   	push   eax
c000754c:	e8 8b a6 ff ff       	call   c0001bdc <disk_read>
c0007551:	83 c4 20             	add    esp,0x20
c0007554:	85 c0                	test   eax,eax
c0007556:	0f 84 1c ff ff ff    	je     c0007478 <f_forward+0xe9>
c000755c:	eb a1                	jmp    c00074ff <f_forward+0x170>
c000755e:	bd 07 00 00 00       	mov    ebp,0x7
c0007563:	83 c4 2c             	add    esp,0x2c
c0007566:	89 e8                	mov    eax,ebp
c0007568:	5b                   	pop    ebx
c0007569:	5e                   	pop    esi
c000756a:	5f                   	pop    edi
c000756b:	5d                   	pop    ebp
c000756c:	c3                   	ret    

c000756d <f_mkfs>:
c000756d:	55                   	push   ebp
c000756e:	57                   	push   edi
c000756f:	56                   	push   esi
c0007570:	53                   	push   ebx
c0007571:	bb 0b 00 00 00       	mov    ebx,0xb
c0007576:	81 ec 9c 00 00 00    	sub    esp,0x9c
c000757c:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007583:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000758a:	e8 7a ac ff ff       	call   c0002209 <get_ldnumber>
c000758f:	85 c0                	test   eax,eax
c0007591:	0f 88 ec 10 00 00    	js     c0008683 <f_mkfs+0x1116>
c0007597:	8b 14 85 a0 e3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1c60]
c000759e:	85 d2                	test   edx,edx
c00075a0:	74 03                	je     c00075a5 <f_mkfs+0x38>
c00075a2:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00075a5:	85 f6                	test   esi,esi
c00075a7:	75 05                	jne    c00075ae <f_mkfs+0x41>
c00075a9:	be e0 96 02 c0       	mov    esi,0xc00296e0
c00075ae:	83 ec 0c             	sub    esp,0xc
c00075b1:	0f b6 c0             	movzx  eax,al
c00075b4:	bb 03 00 00 00       	mov    ebx,0x3
c00075b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00075bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075c1:	e8 13 a6 ff ff       	call   c0001bd9 <disk_initialize>
c00075c6:	83 c4 10             	add    esp,0x10
c00075c9:	a8 01                	test   al,0x1
c00075cb:	0f 85 b2 10 00 00    	jne    c0008683 <f_mkfs+0x1116>
c00075d1:	bb 0a 00 00 00       	mov    ebx,0xa
c00075d6:	a8 04                	test   al,0x4
c00075d8:	0f 85 a5 10 00 00    	jne    c0008683 <f_mkfs+0x1116>
c00075de:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00075e1:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00075e5:	85 c0                	test   eax,eax
c00075e7:	75 20                	jne    c0007609 <f_mkfs+0x9c>
c00075e9:	51                   	push   ecx
c00075ea:	8d 44 24 78          	lea    eax,[esp+0x78]
c00075ee:	50                   	push   eax
c00075ef:	6a 03                	push   0x3
c00075f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f5:	e8 0e a6 ff ff       	call   c0001c08 <disk_ioctl>
c00075fa:	83 c4 10             	add    esp,0x10
c00075fd:	85 c0                	test   eax,eax
c00075ff:	74 08                	je     c0007609 <f_mkfs+0x9c>
c0007601:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007609:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000760d:	8d 42 ff             	lea    eax,[edx-0x1]
c0007610:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007615:	77 04                	ja     c000761b <f_mkfs+0xae>
c0007617:	85 c2                	test   edx,eax
c0007619:	74 08                	je     c0007623 <f_mkfs+0xb6>
c000761b:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007623:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007626:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000762a:	48                   	dec    eax
c000762b:	3c 01                	cmp    al,0x1
c000762d:	76 05                	jbe    c0007634 <f_mkfs+0xc7>
c000762f:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007634:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007637:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000763b:	48                   	dec    eax
c000763c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007641:	77 07                	ja     c000764a <f_mkfs+0xdd>
c0007643:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007648:	74 08                	je     c0007652 <f_mkfs+0xe5>
c000764a:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007652:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007655:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000765b:	77 07                	ja     c0007664 <f_mkfs+0xf7>
c000765d:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007660:	85 d8                	test   eax,ebx
c0007662:	74 02                	je     c0007666 <f_mkfs+0xf9>
c0007664:	31 db                	xor    ebx,ebx
c0007666:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007671:	77 0a                	ja     c000767d <f_mkfs+0x110>
c0007673:	bb 11 00 00 00       	mov    ebx,0x11
c0007678:	e9 06 10 00 00       	jmp    c0008683 <f_mkfs+0x1116>
c000767d:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007684:	8b 36                	mov    esi,DWORD PTR [esi]
c0007686:	85 ed                	test   ebp,ebp
c0007688:	75 1e                	jne    c00076a8 <f_mkfs+0x13b>
c000768a:	83 ec 0c             	sub    esp,0xc
c000768d:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007694:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007699:	50                   	push   eax
c000769a:	e8 f1 0f 00 00       	call   c0008690 <ff_memalloc>
c000769f:	83 c4 10             	add    esp,0x10
c00076a2:	89 c5                	mov    ebp,eax
c00076a4:	85 c0                	test   eax,eax
c00076a6:	74 cb                	je     c0007673 <f_mkfs+0x106>
c00076a8:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00076b0:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00076b8:	52                   	push   edx
c00076b9:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00076bd:	50                   	push   eax
c00076be:	6a 01                	push   0x1
c00076c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00076c4:	e8 3f a5 ff ff       	call   c0001c08 <disk_ioctl>
c00076c9:	83 c4 10             	add    esp,0x10
c00076cc:	85 c0                	test   eax,eax
c00076ce:	0f 85 4a 0f 00 00    	jne    c000861e <f_mkfs+0x10b1>
c00076d4:	89 f1                	mov    ecx,esi
c00076d6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00076de:	83 e1 0f             	and    ecx,0xf
c00076e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00076e9:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00076ed:	83 e6 08             	and    esi,0x8
c00076f0:	75 56                	jne    c0007748 <f_mkfs+0x1db>
c00076f2:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00076f6:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00076fa:	83 ff 00             	cmp    edi,0x0
c00076fd:	76 20                	jbe    c000771f <f_mkfs+0x1b2>
c00076ff:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007704:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000770c:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007712:	83 d7 ff             	adc    edi,0xffffffff
c0007715:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007719:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000771d:	eb 21                	jmp    c0007740 <f_mkfs+0x1d3>
c000771f:	ba 3f 00 00 00       	mov    edx,0x3f
c0007724:	39 f2                	cmp    edx,esi
c0007726:	19 f8                	sbb    eax,edi
c0007728:	73 1e                	jae    c0007748 <f_mkfs+0x1db>
c000772a:	83 c6 c1             	add    esi,0xffffffc1
c000772d:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007735:	83 d7 ff             	adc    edi,0xffffffff
c0007738:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000773c:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007740:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007748:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000774c:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007750:	89 04 24             	mov    DWORD PTR [esp],eax
c0007753:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007757:	31 c0                	xor    eax,eax
c0007759:	ba 7f 00 00 00       	mov    edx,0x7f
c000775e:	89 c7                	mov    edi,eax
c0007760:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007763:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007767:	0f 83 c5 0a 00 00    	jae    c0008232 <f_mkfs+0xcc5>
c000776d:	89 df                	mov    edi,ebx
c000776f:	c1 ef 09             	shr    edi,0x9
c0007772:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007776:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000777d:	c1 ef 09             	shr    edi,0x9
c0007780:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007785:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007789:	74 29                	je     c00077b4 <f_mkfs+0x247>
c000778b:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007791:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007796:	0f 97 c2             	seta   dl
c0007799:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c000779c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00077a0:	0f 92 c0             	setb   al
c00077a3:	08 c2                	or     dl,al
c00077a5:	75 5b                	jne    c0007802 <f_mkfs+0x295>
c00077a7:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00077ab:	83 e0 07             	and    eax,0x7
c00077ae:	3c 04                	cmp    al,0x4
c00077b0:	74 50                	je     c0007802 <f_mkfs+0x295>
c00077b2:	eb 1b                	jmp    c00077cf <f_mkfs+0x262>
c00077b4:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00077b9:	0f 87 73 0a 00 00    	ja     c0008232 <f_mkfs+0xcc5>
c00077bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00077c5:	76 08                	jbe    c00077cf <f_mkfs+0x262>
c00077c7:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00077cf:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00077d3:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00077d7:	83 e0 01             	and    eax,0x1
c00077da:	80 e1 02             	and    cl,0x2
c00077dd:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00077e1:	74 0d                	je     c00077f0 <f_mkfs+0x283>
c00077e3:	84 c0                	test   al,al
c00077e5:	0f 84 53 09 00 00    	je     c000813e <f_mkfs+0xbd1>
c00077eb:	e9 12 08 00 00       	jmp    c0008002 <f_mkfs+0xa95>
c00077f0:	bb 13 00 00 00       	mov    ebx,0x13
c00077f5:	84 c0                	test   al,al
c00077f7:	0f 85 05 08 00 00    	jne    c0008002 <f_mkfs+0xa95>
c00077fd:	e9 39 0e 00 00       	jmp    c000863b <f_mkfs+0x10ce>
c0007802:	31 c0                	xor    eax,eax
c0007804:	ba ff 0f 00 00       	mov    edx,0xfff
c0007809:	89 c7                	mov    edi,eax
c000780b:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000780e:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007812:	0f 83 1a 0a 00 00    	jae    c0008232 <f_mkfs+0xcc5>
c0007818:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000781e:	77 39                	ja     c0007859 <f_mkfs+0x2ec>
c0007820:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007825:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000782d:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007830:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007834:	73 08                	jae    c000783e <f_mkfs+0x2d1>
c0007836:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000783e:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007843:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007846:	b8 00 00 00 00       	mov    eax,0x0
c000784b:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000784f:	73 08                	jae    c0007859 <f_mkfs+0x2ec>
c0007851:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000785d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007861:	83 c0 20             	add    eax,0x20
c0007864:	83 d2 00             	adc    edx,0x0
c0007867:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000786b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000786f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007873:	31 d2                	xor    edx,edx
c0007875:	31 ff                	xor    edi,edi
c0007877:	52                   	push   edx
c0007878:	89 fb                	mov    ebx,edi
c000787a:	50                   	push   eax
c000787b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000787f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007883:	e8 cc f3 01 00       	call   c0026c54 <__udivdi3>
c0007888:	83 c4 10             	add    esp,0x10
c000788b:	c1 e0 02             	shl    eax,0x2
c000788e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007892:	05 07 02 00 00       	add    eax,0x207
c0007897:	89 f1                	mov    ecx,esi
c0007899:	c1 e8 09             	shr    eax,0x9
c000789c:	83 c1 ff             	add    ecx,0xffffffff
c000789f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00078a3:	83 d3 ff             	adc    ebx,0xffffffff
c00078a6:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00078aa:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00078ae:	31 d2                	xor    edx,edx
c00078b0:	01 c8                	add    eax,ecx
c00078b2:	11 da                	adc    edx,ebx
c00078b4:	89 c1                	mov    ecx,eax
c00078b6:	f7 de                	neg    esi
c00078b8:	89 d0                	mov    eax,edx
c00078ba:	83 d7 00             	adc    edi,0x0
c00078bd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00078c1:	f7 df                	neg    edi
c00078c3:	21 f1                	and    ecx,esi
c00078c5:	21 f8                	and    eax,edi
c00078c7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00078cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00078cf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00078d3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00078d7:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00078db:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00078de:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00078e2:	0f ac d0 01          	shrd   eax,edx,0x1
c00078e6:	89 df                	mov    edi,ebx
c00078e8:	d1 ea                	shr    edx,1
c00078ea:	39 c1                	cmp    ecx,eax
c00078ec:	19 d7                	sbb    edi,edx
c00078ee:	0f 83 3e 09 00 00    	jae    c0008232 <f_mkfs+0xcc5>
c00078f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00078f8:	31 d2                	xor    edx,edx
c00078fa:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00078fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007902:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007906:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007909:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000790d:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007911:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007915:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007919:	83 f8 0f             	cmp    eax,0xf
c000791c:	0f 86 10 09 00 00    	jbe    c0008232 <f_mkfs+0xcc5>
c0007922:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000792a:	0f 87 02 09 00 00    	ja     c0008232 <f_mkfs+0xcc5>
c0007930:	31 d2                	xor    edx,edx
c0007932:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007936:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000793e:	83 c0 07             	add    eax,0x7
c0007941:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007949:	c1 e8 03             	shr    eax,0x3
c000794c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007953:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007957:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000795b:	c1 e0 09             	shl    eax,0x9
c000795e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007962:	48                   	dec    eax
c0007963:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007967:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000796b:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000796f:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007973:	31 d2                	xor    edx,edx
c0007975:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007979:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007980:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007984:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007989:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000798d:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007991:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007995:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007999:	31 ff                	xor    edi,edi
c000799b:	31 f6                	xor    esi,esi
c000799d:	31 db                	xor    ebx,ebx
c000799f:	85 ff                	test   edi,edi
c00079a1:	74 05                	je     c00079a8 <f_mkfs+0x43b>
c00079a3:	4f                   	dec    edi
c00079a4:	74 44                	je     c00079ea <f_mkfs+0x47d>
c00079a6:	eb 4f                	jmp    c00079f7 <f_mkfs+0x48a>
c00079a8:	83 ec 0c             	sub    esp,0xc
c00079ab:	0f b7 c3             	movzx  eax,bx
c00079ae:	50                   	push   eax
c00079af:	e8 05 0e 00 00       	call   c00087b9 <ff_wtoupper>
c00079b4:	83 c4 10             	add    esp,0x10
c00079b7:	89 c1                	mov    ecx,eax
c00079b9:	8d 53 01             	lea    edx,[ebx+0x1]
c00079bc:	66 39 c3             	cmp    bx,ax
c00079bf:	75 3e                	jne    c00079ff <f_mkfs+0x492>
c00079c1:	be 01 00 00 00       	mov    esi,0x1
c00079c6:	89 df                	mov    edi,ebx
c00079c8:	66 01 f7             	add    di,si
c00079cb:	75 07                	jne    c00079d4 <f_mkfs+0x467>
c00079cd:	83 fe 7f             	cmp    esi,0x7f
c00079d0:	77 31                	ja     c0007a03 <f_mkfs+0x496>
c00079d2:	eb 16                	jmp    c00079ea <f_mkfs+0x47d>
c00079d4:	83 ec 0c             	sub    esp,0xc
c00079d7:	0f b7 ff             	movzx  edi,di
c00079da:	57                   	push   edi
c00079db:	e8 d9 0d 00 00       	call   c00087b9 <ff_wtoupper>
c00079e0:	83 c4 10             	add    esp,0x10
c00079e3:	39 c7                	cmp    edi,eax
c00079e5:	75 e6                	jne    c00079cd <f_mkfs+0x460>
c00079e7:	46                   	inc    esi
c00079e8:	eb dc                	jmp    c00079c6 <f_mkfs+0x459>
c00079ea:	31 c0                	xor    eax,eax
c00079ec:	89 d9                	mov    ecx,ebx
c00079ee:	4e                   	dec    esi
c00079ef:	0f 95 c0             	setne  al
c00079f2:	43                   	inc    ebx
c00079f3:	89 c7                	mov    edi,eax
c00079f5:	eb 14                	jmp    c0007a0b <f_mkfs+0x49e>
c00079f7:	89 f1                	mov    ecx,esi
c00079f9:	01 f3                	add    ebx,esi
c00079fb:	31 ff                	xor    edi,edi
c00079fd:	eb 0c                	jmp    c0007a0b <f_mkfs+0x49e>
c00079ff:	89 d3                	mov    ebx,edx
c0007a01:	eb 08                	jmp    c0007a0b <f_mkfs+0x49e>
c0007a03:	bf 02 00 00 00       	mov    edi,0x2
c0007a08:	83 c9 ff             	or     ecx,0xffffffff
c0007a0b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a12:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007a16:	0f b6 c1             	movzx  eax,cl
c0007a19:	e8 04 a7 ff ff       	call   c0002122 <xsum32>
c0007a1e:	66 c1 e9 08          	shr    cx,0x8
c0007a22:	89 c2                	mov    edx,eax
c0007a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a27:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007a2b:	0f b7 c1             	movzx  eax,cx
c0007a2e:	e8 ef a6 ff ff       	call   c0002122 <xsum32>
c0007a33:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007a38:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007a3c:	66 85 db             	test   bx,bx
c0007a3f:	74 1f                	je     c0007a60 <f_mkfs+0x4f3>
c0007a41:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a44:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007a4b:	83 c0 02             	add    eax,0x2
c0007a4e:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007a54:	39 c2                	cmp    edx,eax
c0007a56:	74 08                	je     c0007a60 <f_mkfs+0x4f3>
c0007a58:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a5b:	e9 3f ff ff ff       	jmp    c000799f <f_mkfs+0x432>
c0007a60:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a63:	83 ec 0c             	sub    esp,0xc
c0007a66:	05 01 02 00 00       	add    eax,0x201
c0007a6b:	c1 e8 09             	shr    eax,0x9
c0007a6e:	50                   	push   eax
c0007a6f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007a73:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007a77:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007a7b:	55                   	push   ebp
c0007a7c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a80:	e8 6d a1 ff ff       	call   c0001bf2 <disk_write>
c0007a85:	83 c4 20             	add    esp,0x20
c0007a88:	85 c0                	test   eax,eax
c0007a8a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007a8d:	0f 85 8b 0b 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007a93:	89 d0                	mov    eax,edx
c0007a95:	31 d2                	xor    edx,edx
c0007a97:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007a9b:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007a9f:	66 85 db             	test   bx,bx
c0007aa2:	74 04                	je     c0007aa8 <f_mkfs+0x53b>
c0007aa4:	31 c0                	xor    eax,eax
c0007aa6:	eb b0                	jmp    c0007a58 <f_mkfs+0x4eb>
c0007aa8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007aac:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007ab0:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007ab4:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007aba:	31 d2                	xor    edx,edx
c0007abc:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007ac7:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007acb:	c1 eb 09             	shr    ebx,0x9
c0007ace:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007ad5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007ad9:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007add:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007ae1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007ae5:	8d 70 01             	lea    esi,[eax+0x1]
c0007ae8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007aec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007af0:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007af7:	31 d2                	xor    edx,edx
c0007af9:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007afe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b01:	89 c1                	mov    ecx,eax
c0007b03:	89 e8                	mov    eax,ebp
c0007b05:	e8 b1 a1 ff ff       	call   c0001cbb <mem_set>
c0007b0a:	31 c0                	xor    eax,eax
c0007b0c:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007b0f:	76 10                	jbe    c0007b21 <f_mkfs+0x5b4>
c0007b11:	83 fe 07             	cmp    esi,0x7
c0007b14:	76 0b                	jbe    c0007b21 <f_mkfs+0x5b4>
c0007b16:	40                   	inc    eax
c0007b17:	83 ee 08             	sub    esi,0x8
c0007b1a:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007b1f:	eb eb                	jmp    c0007b0c <f_mkfs+0x59f>
c0007b21:	b2 01                	mov    dl,0x1
c0007b23:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007b27:	85 f6                	test   esi,esi
c0007b29:	74 0c                	je     c0007b37 <f_mkfs+0x5ca>
c0007b2b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007b2e:	76 07                	jbe    c0007b37 <f_mkfs+0x5ca>
c0007b30:	08 11                	or     BYTE PTR [ecx],dl
c0007b32:	4e                   	dec    esi
c0007b33:	d1 e2                	shl    edx,1
c0007b35:	eb f0                	jmp    c0007b27 <f_mkfs+0x5ba>
c0007b37:	89 df                	mov    edi,ebx
c0007b39:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007b3d:	76 04                	jbe    c0007b43 <f_mkfs+0x5d6>
c0007b3f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007b43:	83 ec 0c             	sub    esp,0xc
c0007b46:	57                   	push   edi
c0007b47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007b4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007b4f:	55                   	push   ebp
c0007b50:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b54:	e8 99 a0 ff ff       	call   c0001bf2 <disk_write>
c0007b59:	83 c4 20             	add    esp,0x20
c0007b5c:	85 c0                	test   eax,eax
c0007b5e:	0f 85 ba 0a 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007b64:	31 d2                	xor    edx,edx
c0007b66:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007b6a:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007b6e:	29 fb                	sub    ebx,edi
c0007b70:	0f 85 7a ff ff ff    	jne    c0007af0 <f_mkfs+0x583>
c0007b76:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007b7a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007b82:	31 f6                	xor    esi,esi
c0007b84:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007b88:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b8b:	31 d2                	xor    edx,edx
c0007b8d:	89 e8                	mov    eax,ebp
c0007b8f:	e8 27 a1 ff ff       	call   c0001cbb <mem_set>
c0007b94:	31 c9                	xor    ecx,ecx
c0007b96:	85 db                	test   ebx,ebx
c0007b98:	75 40                	jne    c0007bda <f_mkfs+0x66d>
c0007b9a:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007b9f:	89 e8                	mov    eax,ebp
c0007ba1:	bb 02 00 00 00       	mov    ebx,0x2
c0007ba6:	e8 f2 a0 ff ff       	call   c0001c9d <st_dword>
c0007bab:	8d 45 04             	lea    eax,[ebp+0x4]
c0007bae:	83 ca ff             	or     edx,0xffffffff
c0007bb1:	e8 e7 a0 ff ff       	call   c0001c9d <st_dword>
c0007bb6:	b9 08 00 00 00       	mov    ecx,0x8
c0007bbb:	eb 1d                	jmp    c0007bda <f_mkfs+0x66d>
c0007bbd:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007bc0:	76 3b                	jbe    c0007bfd <f_mkfs+0x690>
c0007bc2:	43                   	inc    ebx
c0007bc3:	83 fe 01             	cmp    esi,0x1
c0007bc6:	89 da                	mov    edx,ebx
c0007bc8:	77 03                	ja     c0007bcd <f_mkfs+0x660>
c0007bca:	83 ca ff             	or     edx,0xffffffff
c0007bcd:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007bd1:	4e                   	dec    esi
c0007bd2:	e8 c6 a0 ff ff       	call   c0001c9d <st_dword>
c0007bd7:	83 c1 04             	add    ecx,0x4
c0007bda:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bde:	85 f6                	test   esi,esi
c0007be0:	75 db                	jne    c0007bbd <f_mkfs+0x650>
c0007be2:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007be7:	77 14                	ja     c0007bfd <f_mkfs+0x690>
c0007be9:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007bed:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007bf4:	85 f6                	test   esi,esi
c0007bf6:	74 05                	je     c0007bfd <f_mkfs+0x690>
c0007bf8:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007bfb:	77 dd                	ja     c0007bda <f_mkfs+0x66d>
c0007bfd:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007c01:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007c05:	39 cf                	cmp    edi,ecx
c0007c07:	76 02                	jbe    c0007c0b <f_mkfs+0x69e>
c0007c09:	89 cf                	mov    edi,ecx
c0007c0b:	83 ec 0c             	sub    esp,0xc
c0007c0e:	57                   	push   edi
c0007c0f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007c13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007c17:	55                   	push   ebp
c0007c18:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c1c:	e8 d1 9f ff ff       	call   c0001bf2 <disk_write>
c0007c21:	83 c4 20             	add    esp,0x20
c0007c24:	85 c0                	test   eax,eax
c0007c26:	0f 85 f2 09 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007c2c:	31 d2                	xor    edx,edx
c0007c2e:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007c32:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007c36:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007c3a:	0f 85 48 ff ff ff    	jne    c0007b88 <f_mkfs+0x61b>
c0007c40:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c43:	31 d2                	xor    edx,edx
c0007c45:	89 e8                	mov    eax,ebp
c0007c47:	31 ff                	xor    edi,edi
c0007c49:	e8 6d a0 ff ff       	call   c0001cbb <mem_set>
c0007c4e:	8d 45 34             	lea    eax,[ebp+0x34]
c0007c51:	ba 02 00 00 00       	mov    edx,0x2
c0007c56:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007c5a:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007c5e:	e8 3a a0 ff ff       	call   c0001c9d <st_dword>
c0007c63:	8d 45 38             	lea    eax,[ebp+0x38]
c0007c66:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007c6a:	e8 2e a0 ff ff       	call   c0001c9d <st_dword>
c0007c6f:	8d 45 44             	lea    eax,[ebp+0x44]
c0007c72:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007c76:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007c7a:	e8 1e a0 ff ff       	call   c0001c9d <st_dword>
c0007c7f:	8d 45 54             	lea    eax,[ebp+0x54]
c0007c82:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007c86:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c8a:	83 c2 02             	add    edx,0x2
c0007c8d:	e8 0b a0 ff ff       	call   c0001c9d <st_dword>
c0007c92:	8d 45 58             	lea    eax,[ebp+0x58]
c0007c95:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007c99:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007c9d:	e8 fb 9f ff ff       	call   c0001c9d <st_dword>
c0007ca2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ca6:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007cab:	89 c6                	mov    esi,eax
c0007cad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cb1:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007cb5:	89 04 24             	mov    DWORD PTR [esp],eax
c0007cb8:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007cbc:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007cbf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007cc3:	39 cb                	cmp    ebx,ecx
c0007cc5:	76 02                	jbe    c0007cc9 <f_mkfs+0x75c>
c0007cc7:	89 cb                	mov    ebx,ecx
c0007cc9:	83 ec 0c             	sub    esp,0xc
c0007ccc:	53                   	push   ebx
c0007ccd:	57                   	push   edi
c0007cce:	56                   	push   esi
c0007ccf:	55                   	push   ebp
c0007cd0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cd4:	e8 19 9f ff ff       	call   c0001bf2 <disk_write>
c0007cd9:	83 c4 20             	add    esp,0x20
c0007cdc:	85 c0                	test   eax,eax
c0007cde:	0f 85 3a 09 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007ce4:	31 d2                	xor    edx,edx
c0007ce6:	b9 00 02 00 00       	mov    ecx,0x200
c0007ceb:	89 e8                	mov    eax,ebp
c0007ced:	e8 c9 9f ff ff       	call   c0001cbb <mem_set>
c0007cf2:	31 d2                	xor    edx,edx
c0007cf4:	01 de                	add    esi,ebx
c0007cf6:	11 d7                	adc    edi,edx
c0007cf8:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007cfb:	75 bf                	jne    c0007cbc <f_mkfs+0x74f>
c0007cfd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007d01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007d05:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007d0d:	b9 00 02 00 00       	mov    ecx,0x200
c0007d12:	31 d2                	xor    edx,edx
c0007d14:	89 e8                	mov    eax,ebp
c0007d16:	e8 a0 9f ff ff       	call   c0001cbb <mem_set>
c0007d1b:	b9 0b 00 00 00       	mov    ecx,0xb
c0007d20:	ba c0 97 02 c0       	mov    edx,0xc00297c0
c0007d25:	89 e8                	mov    eax,ebp
c0007d27:	e8 7a 9f ff ff       	call   c0001ca6 <mem_cpy>
c0007d2c:	8d 45 40             	lea    eax,[ebp+0x40]
c0007d2f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007d33:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007d37:	e8 64 9f ff ff       	call   c0001ca0 <st_qword>
c0007d3c:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007d40:	8d 45 48             	lea    eax,[ebp+0x48]
c0007d43:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007d47:	e8 54 9f ff ff       	call   c0001ca0 <st_qword>
c0007d4c:	8d 45 50             	lea    eax,[ebp+0x50]
c0007d4f:	ba 20 00 00 00       	mov    edx,0x20
c0007d54:	e8 44 9f ff ff       	call   c0001c9d <st_dword>
c0007d59:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007d5d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007d61:	e8 37 9f ff ff       	call   c0001c9d <st_dword>
c0007d66:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007d6a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007d6e:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007d72:	e8 26 9f ff ff       	call   c0001c9d <st_dword>
c0007d77:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007d7a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007d7e:	e8 1a 9f ff ff       	call   c0001c9d <st_dword>
c0007d83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007d87:	8d 50 02             	lea    edx,[eax+0x2]
c0007d8a:	8d 45 60             	lea    eax,[ebp+0x60]
c0007d8d:	e8 0b 9f ff ff       	call   c0001c9d <st_dword>
c0007d92:	8d 45 64             	lea    eax,[ebp+0x64]
c0007d95:	ba 00 00 21 50       	mov    edx,0x50210000
c0007d9a:	e8 fe 9e ff ff       	call   c0001c9d <st_dword>
c0007d9f:	8d 45 68             	lea    eax,[ebp+0x68]
c0007da2:	ba 00 01 00 00       	mov    edx,0x100
c0007da7:	e8 ed 9e ff ff       	call   c0001c99 <st_word>
c0007dac:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007db0:	b8 0a 00 00 00       	mov    eax,0xa
c0007db5:	48                   	dec    eax
c0007db6:	74 05                	je     c0007dbd <f_mkfs+0x850>
c0007db8:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007dbb:	eb f8                	jmp    c0007db5 <f_mkfs+0x848>
c0007dbd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc1:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007dc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dc9:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007dcd:	74 05                	je     c0007dd4 <f_mkfs+0x867>
c0007dcf:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007dd2:	eb f5                	jmp    c0007dc9 <f_mkfs+0x85c>
c0007dd4:	8d 45 78             	lea    eax,[ebp+0x78]
c0007dd7:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ddc:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007de2:	31 db                	xor    ebx,ebx
c0007de4:	e8 b0 9e ff ff       	call   c0001c99 <st_word>
c0007de9:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007def:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007df4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007df7:	e8 9d 9e ff ff       	call   c0001c99 <st_word>
c0007dfc:	31 c9                	xor    ecx,ecx
c0007dfe:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007e01:	83 f8 01             	cmp    eax,0x1
c0007e04:	76 13                	jbe    c0007e19 <f_mkfs+0x8ac>
c0007e06:	83 f9 70             	cmp    ecx,0x70
c0007e09:	74 0e                	je     c0007e19 <f_mkfs+0x8ac>
c0007e0b:	89 da                	mov    edx,ebx
c0007e0d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007e12:	e8 0b a3 ff ff       	call   c0002122 <xsum32>
c0007e17:	89 c3                	mov    ebx,eax
c0007e19:	41                   	inc    ecx
c0007e1a:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e20:	75 dc                	jne    c0007dfe <f_mkfs+0x891>
c0007e22:	89 f0                	mov    eax,esi
c0007e24:	89 fa                	mov    edx,edi
c0007e26:	83 c0 01             	add    eax,0x1
c0007e29:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e2d:	83 d2 00             	adc    edx,0x0
c0007e30:	83 ec 0c             	sub    esp,0xc
c0007e33:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007e37:	6a 01                	push   0x1
c0007e39:	57                   	push   edi
c0007e3a:	56                   	push   esi
c0007e3b:	55                   	push   ebp
c0007e3c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e40:	e8 ad 9d ff ff       	call   c0001bf2 <disk_write>
c0007e45:	83 c4 20             	add    esp,0x20
c0007e48:	85 c0                	test   eax,eax
c0007e4a:	0f 85 ce 07 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	b9 00 02 00 00       	mov    ecx,0x200
c0007e57:	89 e8                	mov    eax,ebp
c0007e59:	e8 5d 9e ff ff       	call   c0001cbb <mem_set>
c0007e5e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007e63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e66:	e8 2e 9e ff ff       	call   c0001c99 <st_word>
c0007e6b:	89 f0                	mov    eax,esi
c0007e6d:	89 fa                	mov    edx,edi
c0007e6f:	83 c0 09             	add    eax,0x9
c0007e72:	83 d2 00             	adc    edx,0x0
c0007e75:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e78:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007e7c:	31 c9                	xor    ecx,ecx
c0007e7e:	41                   	inc    ecx
c0007e7f:	89 da                	mov    edx,ebx
c0007e81:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e86:	e8 97 a2 ff ff       	call   c0002122 <xsum32>
c0007e8b:	89 c3                	mov    ebx,eax
c0007e8d:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e93:	75 e9                	jne    c0007e7e <f_mkfs+0x911>
c0007e95:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e99:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ea4:	83 d2 00             	adc    edx,0x0
c0007ea7:	83 ec 0c             	sub    esp,0xc
c0007eaa:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007eae:	6a 01                	push   0x1
c0007eb0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007eb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007eb8:	55                   	push   ebp
c0007eb9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ebd:	e8 30 9d ff ff       	call   c0001bf2 <disk_write>
c0007ec2:	83 c4 20             	add    esp,0x20
c0007ec5:	85 c0                	test   eax,eax
c0007ec7:	0f 85 51 07 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007ecd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ed1:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ed5:	75 09                	jne    c0007ee0 <f_mkfs+0x973>
c0007ed7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007eda:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ede:	74 12                	je     c0007ef2 <f_mkfs+0x985>
c0007ee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ee4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ee8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007eec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007ef0:	eb 8a                	jmp    c0007e7c <f_mkfs+0x90f>
c0007ef2:	31 d2                	xor    edx,edx
c0007ef4:	b9 00 02 00 00       	mov    ecx,0x200
c0007ef9:	89 e8                	mov    eax,ebp
c0007efb:	e8 bb 9d ff ff       	call   c0001cbb <mem_set>
c0007f00:	83 c6 0b             	add    esi,0xb
c0007f03:	83 d7 00             	adc    edi,0x0
c0007f06:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007f0a:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007f0e:	31 c9                	xor    ecx,ecx
c0007f10:	41                   	inc    ecx
c0007f11:	89 da                	mov    edx,ebx
c0007f13:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007f18:	e8 05 a2 ff ff       	call   c0002122 <xsum32>
c0007f1d:	89 c3                	mov    ebx,eax
c0007f1f:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007f25:	75 e9                	jne    c0007f10 <f_mkfs+0x9a3>
c0007f27:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007f2a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007f2e:	83 c6 01             	add    esi,0x1
c0007f31:	83 d7 00             	adc    edi,0x0
c0007f34:	83 ec 0c             	sub    esp,0xc
c0007f37:	6a 01                	push   0x1
c0007f39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007f3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007f41:	55                   	push   ebp
c0007f42:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f46:	e8 a7 9c ff ff       	call   c0001bf2 <disk_write>
c0007f4b:	83 c4 20             	add    esp,0x20
c0007f4e:	85 c0                	test   eax,eax
c0007f50:	0f 85 c8 06 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007f56:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007f5a:	75 06                	jne    c0007f62 <f_mkfs+0x9f5>
c0007f5c:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007f60:	74 09                	je     c0007f6b <f_mkfs+0x9fe>
c0007f62:	89 34 24             	mov    DWORD PTR [esp],esi
c0007f65:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007f69:	eb a3                	jmp    c0007f0e <f_mkfs+0x9a1>
c0007f6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007f6f:	89 da                	mov    edx,ebx
c0007f71:	01 e8                	add    eax,ebp
c0007f73:	e8 25 9d ff ff       	call   c0001c9d <st_dword>
c0007f78:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007f7d:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007f85:	75 e4                	jne    c0007f6b <f_mkfs+0x9fe>
c0007f87:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007f8a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007f8e:	83 c6 02             	add    esi,0x2
c0007f91:	83 d7 00             	adc    edi,0x0
c0007f94:	83 ec 0c             	sub    esp,0xc
c0007f97:	6a 01                	push   0x1
c0007f99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007f9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007fa1:	55                   	push   ebp
c0007fa2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fa6:	e8 47 9c ff ff       	call   c0001bf2 <disk_write>
c0007fab:	83 c4 20             	add    esp,0x20
c0007fae:	85 c0                	test   eax,eax
c0007fb0:	0f 85 68 06 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0007fb6:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007fbb:	74 0d                	je     c0007fca <f_mkfs+0xa5d>
c0007fbd:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007fc5:	e9 43 fd ff ff       	jmp    c0007d0d <f_mkfs+0x7a0>
c0007fca:	b1 07                	mov    cl,0x7
c0007fcc:	e9 e3 05 00 00       	jmp    c00085b4 <f_mkfs+0x1047>
c0007fd1:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007fd6:	0f 85 4f 02 00 00    	jne    c000822b <f_mkfs+0xcbe>
c0007fdc:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007fe1:	0f 86 22 02 00 00    	jbe    c0008209 <f_mkfs+0xc9c>
c0007fe7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fec:	0f 85 81 06 00 00    	jne    c0008673 <f_mkfs+0x1106>
c0007ff2:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ff5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007ff9:	83 f8 40             	cmp    eax,0x40
c0007ffc:	0f 87 51 06 00 00    	ja     c0008653 <f_mkfs+0x10e6>
c0008002:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008006:	85 ff                	test   edi,edi
c0008008:	75 1c                	jne    c0008026 <f_mkfs+0xab9>
c000800a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000800d:	ba c0 96 02 c0       	mov    edx,0xc00296c0
c0008012:	c1 e9 0c             	shr    ecx,0xc
c0008015:	bf 01 00 00 00       	mov    edi,0x1
c000801a:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000801d:	66 85 c0             	test   ax,ax
c0008020:	0f 85 95 01 00 00    	jne    c00081bb <f_mkfs+0xc4e>
c0008026:	31 d2                	xor    edx,edx
c0008028:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000802b:	f7 f7                	div    edi
c000802d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008032:	0f 86 95 01 00 00    	jbe    c00081cd <f_mkfs+0xc60>
c0008038:	83 c0 02             	add    eax,0x2
c000803b:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0008040:	01 c0                	add    eax,eax
c0008042:	05 ff 01 00 00       	add    eax,0x1ff
c0008047:	be 01 00 00 00       	mov    esi,0x1
c000804c:	c1 e8 09             	shr    eax,0x9
c000804f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0008053:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008057:	c1 e0 05             	shl    eax,0x5
c000805a:	c1 e8 09             	shr    eax,0x9
c000805d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0008061:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0008066:	31 d2                	xor    edx,edx
c0008068:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000806c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0008070:	89 f0                	mov    eax,esi
c0008072:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0008076:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c000807a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000807e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0008082:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008086:	31 d2                	xor    edx,edx
c0008088:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c000808d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0008091:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0008095:	31 db                	xor    ebx,ebx
c0008097:	01 c8                	add    eax,ecx
c0008099:	11 da                	adc    edx,ebx
c000809b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000809f:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c00080a3:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c00080a7:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00080ab:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c00080af:	f7 da                	neg    edx
c00080b1:	21 d1                	and    ecx,edx
c00080b3:	29 d9                	sub    ecx,ebx
c00080b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080ba:	0f 85 20 01 00 00    	jne    c00081e0 <f_mkfs+0xc73>
c00080c0:	31 db                	xor    ebx,ebx
c00080c2:	01 ce                	add    esi,ecx
c00080c4:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c00080c8:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c00080cc:	31 d2                	xor    edx,edx
c00080ce:	89 f8                	mov    eax,edi
c00080d0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00080d4:	c1 e0 04             	shl    eax,0x4
c00080d7:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00080db:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00080df:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c00080e3:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c00080e7:	39 04 24             	cmp    DWORD PTR [esp],eax
c00080ea:	19 d3                	sbb    ebx,edx
c00080ec:	0f 82 40 01 00 00    	jb     c0008232 <f_mkfs+0xcc5>
c00080f2:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00080f5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080f9:	89 c8                	mov    eax,ecx
c00080fb:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008100:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008104:	29 f0                	sub    eax,esi
c0008106:	29 d0                	sub    eax,edx
c0008108:	31 d2                	xor    edx,edx
c000810a:	f7 f7                	div    edi
c000810c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008111:	89 c3                	mov    ebx,eax
c0008113:	0f 85 b8 fe ff ff    	jne    c0007fd1 <f_mkfs+0xa64>
c0008119:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000811e:	0f 87 1d 01 00 00    	ja     c0008241 <f_mkfs+0xcd4>
c0008124:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008129:	0f 85 03 01 00 00    	jne    c0008232 <f_mkfs+0xcc5>
c000812f:	83 ff 01             	cmp    edi,0x1
c0008132:	0f 86 fa 00 00 00    	jbe    c0008232 <f_mkfs+0xcc5>
c0008138:	d1 ef                	shr    edi,1
c000813a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000813e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008142:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008145:	85 db                	test   ebx,ebx
c0008147:	75 2d                	jne    c0008176 <f_mkfs+0xc09>
c0008149:	89 cb                	mov    ebx,ecx
c000814b:	ba d0 96 02 c0       	mov    edx,0xc00296d0
c0008150:	c1 eb 11             	shr    ebx,0x11
c0008153:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000815b:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000815e:	66 85 c0             	test   ax,ax
c0008161:	74 11                	je     c0008174 <f_mkfs+0xc07>
c0008163:	83 c2 02             	add    edx,0x2
c0008166:	39 d8                	cmp    eax,ebx
c0008168:	77 0a                	ja     c0008174 <f_mkfs+0xc07>
c000816a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000816e:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0008172:	eb e7                	jmp    c000815b <f_mkfs+0xbee>
c0008174:	31 db                	xor    ebx,ebx
c0008176:	31 d2                	xor    edx,edx
c0008178:	89 c8                	mov    eax,ecx
c000817a:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c000817e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0008185:	2d f6 ff 00 00       	sub    eax,0xfff6
c000818a:	c1 ea 09             	shr    edx,0x9
c000818d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0008192:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0008196:	0f 87 96 00 00 00    	ja     c0008232 <f_mkfs+0xcc5>
c000819c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00081a0:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00081a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00081ac:	be 20 00 00 00       	mov    esi,0x20
c00081b1:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00081b6:	e9 a6 fe ff ff       	jmp    c0008061 <f_mkfs+0xaf4>
c00081bb:	83 c2 02             	add    edx,0x2
c00081be:	39 c8                	cmp    eax,ecx
c00081c0:	0f 87 60 fe ff ff    	ja     c0008026 <f_mkfs+0xab9>
c00081c6:	01 ff                	add    edi,edi
c00081c8:	e9 4d fe ff ff       	jmp    c000801a <f_mkfs+0xaad>
c00081cd:	8d 04 40             	lea    eax,[eax+eax*2]
c00081d0:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c00081d5:	40                   	inc    eax
c00081d6:	d1 e8                	shr    eax,1
c00081d8:	83 c0 03             	add    eax,0x3
c00081db:	e9 62 fe ff ff       	jmp    c0008042 <f_mkfs+0xad5>
c00081e0:	31 d2                	xor    edx,edx
c00081e2:	89 c8                	mov    eax,ecx
c00081e4:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c00081e8:	85 d2                	test   edx,edx
c00081ea:	74 0c                	je     c00081f8 <f_mkfs+0xc8b>
c00081ec:	49                   	dec    ecx
c00081ed:	46                   	inc    esi
c00081ee:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c00081f3:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c00081f8:	89 c8                	mov    eax,ecx
c00081fa:	31 d2                	xor    edx,edx
c00081fc:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008200:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008204:	e9 c3 fe ff ff       	jmp    c00080cc <f_mkfs+0xb5f>
c0008209:	3d f5 0f 00 00       	cmp    eax,0xff5
c000820e:	77 31                	ja     c0008241 <f_mkfs+0xcd4>
c0008210:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008215:	75 1b                	jne    c0008232 <f_mkfs+0xcc5>
c0008217:	8d 04 3f             	lea    eax,[edi+edi*1]
c000821a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000821e:	3d 80 00 00 00       	cmp    eax,0x80
c0008223:	0f 86 d9 fd ff ff    	jbe    c0008002 <f_mkfs+0xa95>
c0008229:	eb 07                	jmp    c0008232 <f_mkfs+0xcc5>
c000822b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008230:	76 0a                	jbe    c000823c <f_mkfs+0xccf>
c0008232:	bb 0e 00 00 00       	mov    ebx,0xe
c0008237:	e9 ff 03 00 00       	jmp    c000863b <f_mkfs+0x10ce>
c000823c:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008241:	31 d2                	xor    edx,edx
c0008243:	b9 00 02 00 00       	mov    ecx,0x200
c0008248:	89 e8                	mov    eax,ebp
c000824a:	e8 6c 9a ff ff       	call   c0001cbb <mem_set>
c000824f:	b9 0b 00 00 00       	mov    ecx,0xb
c0008254:	ba e2 97 02 c0       	mov    edx,0xc00297e2
c0008259:	89 e8                	mov    eax,ebp
c000825b:	e8 46 9a ff ff       	call   c0001ca6 <mem_cpy>
c0008260:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008263:	ba 00 02 00 00       	mov    edx,0x200
c0008268:	e8 2c 9a ff ff       	call   c0001c99 <st_word>
c000826d:	89 f8                	mov    eax,edi
c000826f:	0f b7 d6             	movzx  edx,si
c0008272:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008275:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008278:	e8 1c 9a ff ff       	call   c0001c99 <st_word>
c000827d:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008281:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008286:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008289:	75 08                	jne    c0008293 <f_mkfs+0xd26>
c000828b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008293:	8d 45 11             	lea    eax,[ebp+0x11]
c0008296:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000829a:	e8 fa 99 ff ff       	call   c0001c99 <st_word>
c000829f:	b8 ff ff 00 00       	mov    eax,0xffff
c00082a4:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00082a8:	39 d0                	cmp    eax,edx
c00082aa:	b8 00 00 00 00       	mov    eax,0x0
c00082af:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00082b3:	72 0a                	jb     c00082bf <f_mkfs+0xd52>
c00082b5:	8d 45 13             	lea    eax,[ebp+0x13]
c00082b8:	e8 dc 99 ff ff       	call   c0001c99 <st_word>
c00082bd:	eb 08                	jmp    c00082c7 <f_mkfs+0xd5a>
c00082bf:	8d 45 20             	lea    eax,[ebp+0x20]
c00082c2:	e8 d6 99 ff ff       	call   c0001c9d <st_dword>
c00082c7:	8d 45 18             	lea    eax,[ebp+0x18]
c00082ca:	ba 3f 00 00 00       	mov    edx,0x3f
c00082cf:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00082d3:	e8 c1 99 ff ff       	call   c0001c99 <st_word>
c00082d8:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00082db:	ba ff 00 00 00       	mov    edx,0xff
c00082e0:	e8 b4 99 ff ff       	call   c0001c99 <st_word>
c00082e5:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00082e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00082ec:	e8 ac 99 ff ff       	call   c0001c9d <st_dword>
c00082f1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f6:	75 57                	jne    c000834f <f_mkfs+0xde2>
c00082f8:	8d 45 43             	lea    eax,[ebp+0x43]
c00082fb:	ba 00 00 21 50       	mov    edx,0x50210000
c0008300:	e8 98 99 ff ff       	call   c0001c9d <st_dword>
c0008305:	8d 45 24             	lea    eax,[ebp+0x24]
c0008308:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000830c:	e8 8c 99 ff ff       	call   c0001c9d <st_dword>
c0008311:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008314:	ba 02 00 00 00       	mov    edx,0x2
c0008319:	e8 7f 99 ff ff       	call   c0001c9d <st_dword>
c000831e:	8d 45 30             	lea    eax,[ebp+0x30]
c0008321:	ba 01 00 00 00       	mov    edx,0x1
c0008326:	e8 6e 99 ff ff       	call   c0001c99 <st_word>
c000832b:	8d 45 32             	lea    eax,[ebp+0x32]
c000832e:	ba 06 00 00 00       	mov    edx,0x6
c0008333:	e8 61 99 ff ff       	call   c0001c99 <st_word>
c0008338:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c000833c:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008340:	8d 45 47             	lea    eax,[ebp+0x47]
c0008343:	b9 13 00 00 00       	mov    ecx,0x13
c0008348:	ba ee 97 02 c0       	mov    edx,0xc00297ee
c000834d:	eb 2f                	jmp    c000837e <f_mkfs+0xe11>
c000834f:	8d 45 27             	lea    eax,[ebp+0x27]
c0008352:	ba 00 00 21 50       	mov    edx,0x50210000
c0008357:	e8 41 99 ff ff       	call   c0001c9d <st_dword>
c000835c:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008361:	8d 45 16             	lea    eax,[ebp+0x16]
c0008364:	e8 30 99 ff ff       	call   c0001c99 <st_word>
c0008369:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c000836d:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008371:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008374:	b9 13 00 00 00       	mov    ecx,0x13
c0008379:	ba 02 98 02 c0       	mov    edx,0xc0029802
c000837e:	e8 23 99 ff ff       	call   c0001ca6 <mem_cpy>
c0008383:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008389:	ba 55 aa 00 00       	mov    edx,0xaa55
c000838e:	89 f0                	mov    eax,esi
c0008390:	e8 04 99 ff ff       	call   c0001c99 <st_word>
c0008395:	83 ec 0c             	sub    esp,0xc
c0008398:	6a 01                	push   0x1
c000839a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000839e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00083a2:	55                   	push   ebp
c00083a3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a7:	e8 46 98 ff ff       	call   c0001bf2 <disk_write>
c00083ac:	83 c4 20             	add    esp,0x20
c00083af:	85 c0                	test   eax,eax
c00083b1:	0f 85 67 02 00 00    	jne    c000861e <f_mkfs+0x10b1>
c00083b7:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083bc:	0f 85 b7 00 00 00    	jne    c0008479 <f_mkfs+0xf0c>
c00083c2:	83 ec 0c             	sub    esp,0xc
c00083c5:	6a 01                	push   0x1
c00083c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083cb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00083cf:	83 c0 06             	add    eax,0x6
c00083d2:	83 d2 00             	adc    edx,0x0
c00083d5:	52                   	push   edx
c00083d6:	50                   	push   eax
c00083d7:	55                   	push   ebp
c00083d8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083dc:	e8 11 98 ff ff       	call   c0001bf2 <disk_write>
c00083e1:	83 c4 20             	add    esp,0x20
c00083e4:	b9 00 02 00 00       	mov    ecx,0x200
c00083e9:	31 d2                	xor    edx,edx
c00083eb:	89 e8                	mov    eax,ebp
c00083ed:	e8 c9 98 ff ff       	call   c0001cbb <mem_set>
c00083f2:	ba 52 52 61 41       	mov    edx,0x41615252
c00083f7:	89 e8                	mov    eax,ebp
c00083f9:	e8 9f 98 ff ff       	call   c0001c9d <st_dword>
c00083fe:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008404:	ba 72 72 41 61       	mov    edx,0x61417272
c0008409:	e8 8f 98 ff ff       	call   c0001c9d <st_dword>
c000840e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008411:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008417:	e8 81 98 ff ff       	call   c0001c9d <st_dword>
c000841c:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008422:	ba 02 00 00 00       	mov    edx,0x2
c0008427:	e8 71 98 ff ff       	call   c0001c9d <st_dword>
c000842c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008431:	89 f0                	mov    eax,esi
c0008433:	e8 61 98 ff ff       	call   c0001c99 <st_word>
c0008438:	83 ec 0c             	sub    esp,0xc
c000843b:	6a 01                	push   0x1
c000843d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008441:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008445:	83 c0 07             	add    eax,0x7
c0008448:	83 d2 00             	adc    edx,0x0
c000844b:	52                   	push   edx
c000844c:	50                   	push   eax
c000844d:	55                   	push   ebp
c000844e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008452:	e8 9b 97 ff ff       	call   c0001bf2 <disk_write>
c0008457:	83 c4 14             	add    esp,0x14
c000845a:	6a 01                	push   0x1
c000845c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008460:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008464:	83 c0 01             	add    eax,0x1
c0008467:	83 d2 00             	adc    edx,0x0
c000846a:	52                   	push   edx
c000846b:	50                   	push   eax
c000846c:	55                   	push   ebp
c000846d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008471:	e8 7c 97 ff ff       	call   c0001bf2 <disk_write>
c0008476:	83 c4 20             	add    esp,0x20
c0008479:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008480:	31 d2                	xor    edx,edx
c0008482:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008488:	31 db                	xor    ebx,ebx
c000848a:	89 e8                	mov    eax,ebp
c000848c:	e8 2a 98 ff ff       	call   c0001cbb <mem_set>
c0008491:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008496:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000849d:	0f 94 c3             	sete   bl
c00084a0:	4b                   	dec    ebx
c00084a1:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00084a7:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00084ad:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084b2:	75 21                	jne    c00084d5 <f_mkfs+0xf68>
c00084b4:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00084b9:	89 e8                	mov    eax,ebp
c00084bb:	e8 dd 97 ff ff       	call   c0001c9d <st_dword>
c00084c0:	8d 45 04             	lea    eax,[ebp+0x4]
c00084c3:	83 ca ff             	or     edx,0xffffffff
c00084c6:	e8 d2 97 ff ff       	call   c0001c9d <st_dword>
c00084cb:	8d 45 08             	lea    eax,[ebp+0x8]
c00084ce:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00084d3:	eb 04                	jmp    c00084d9 <f_mkfs+0xf6c>
c00084d5:	89 da                	mov    edx,ebx
c00084d7:	89 e8                	mov    eax,ebp
c00084d9:	e8 bf 97 ff ff       	call   c0001c9d <st_dword>
c00084de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00084e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00084e6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00084ea:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00084ee:	39 ce                	cmp    esi,ecx
c00084f0:	76 02                	jbe    c00084f4 <f_mkfs+0xf87>
c00084f2:	89 ce                	mov    esi,ecx
c00084f4:	83 ec 0c             	sub    esp,0xc
c00084f7:	56                   	push   esi
c00084f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00084fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008500:	55                   	push   ebp
c0008501:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008505:	e8 e8 96 ff ff       	call   c0001bf2 <disk_write>
c000850a:	83 c4 20             	add    esp,0x20
c000850d:	85 c0                	test   eax,eax
c000850f:	0f 85 09 01 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0008515:	31 d2                	xor    edx,edx
c0008517:	b9 00 02 00 00       	mov    ecx,0x200
c000851c:	89 e8                	mov    eax,ebp
c000851e:	e8 98 97 ff ff       	call   c0001cbb <mem_set>
c0008523:	31 d2                	xor    edx,edx
c0008525:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008529:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000852d:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008531:	75 b3                	jne    c00084e6 <f_mkfs+0xf79>
c0008533:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008536:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000853d:	40                   	inc    eax
c000853e:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008542:	0f 87 65 ff ff ff    	ja     c00084ad <f_mkfs+0xf40>
c0008548:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000854d:	74 04                	je     c0008553 <f_mkfs+0xfe6>
c000854f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008553:	89 fb                	mov    ebx,edi
c0008555:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008559:	76 04                	jbe    c000855f <f_mkfs+0xff2>
c000855b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000855f:	83 ec 0c             	sub    esp,0xc
c0008562:	53                   	push   ebx
c0008563:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008567:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000856b:	55                   	push   ebp
c000856c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008570:	e8 7d 96 ff ff       	call   c0001bf2 <disk_write>
c0008575:	83 c4 20             	add    esp,0x20
c0008578:	85 c0                	test   eax,eax
c000857a:	0f 85 9e 00 00 00    	jne    c000861e <f_mkfs+0x10b1>
c0008580:	31 d2                	xor    edx,edx
c0008582:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008586:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000858a:	29 df                	sub    edi,ebx
c000858c:	75 c5                	jne    c0008553 <f_mkfs+0xfe6>
c000858e:	b1 0c                	mov    cl,0xc
c0008590:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008595:	74 1d                	je     c00085b4 <f_mkfs+0x1047>
c0008597:	b8 ff ff 00 00       	mov    eax,0xffff
c000859c:	b1 06                	mov    cl,0x6
c000859e:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00085a2:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00085a6:	72 0c                	jb     c00085b4 <f_mkfs+0x1047>
c00085a8:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00085ad:	0f 94 c1             	sete   cl
c00085b0:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00085b4:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00085b9:	75 4c                	jne    c0008607 <f_mkfs+0x109a>
c00085bb:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00085bf:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00085c3:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00085ca:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00085d1:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00085dc:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00085e7:	0f b6 c9             	movzx  ecx,cl
c00085ea:	83 ec 0c             	sub    esp,0xc
c00085ed:	55                   	push   ebp
c00085ee:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00085f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085f9:	e8 f9 bf ff ff       	call   c00045f7 <create_partition>
c00085fe:	83 c4 10             	add    esp,0x10
c0008601:	89 c3                	mov    ebx,eax
c0008603:	85 c0                	test   eax,eax
c0008605:	75 34                	jne    c000863b <f_mkfs+0x10ce>
c0008607:	31 db                	xor    ebx,ebx
c0008609:	50                   	push   eax
c000860a:	6a 00                	push   0x0
c000860c:	6a 00                	push   0x0
c000860e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008612:	e8 f1 95 ff ff       	call   c0001c08 <disk_ioctl>
c0008617:	83 c4 10             	add    esp,0x10
c000861a:	85 c0                	test   eax,eax
c000861c:	74 1d                	je     c000863b <f_mkfs+0x10ce>
c000861e:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008626:	75 0c                	jne    c0008634 <f_mkfs+0x10c7>
c0008628:	83 ec 0c             	sub    esp,0xc
c000862b:	55                   	push   ebp
c000862c:	e8 75 00 00 00       	call   c00086a6 <ff_memfree>
c0008631:	83 c4 10             	add    esp,0x10
c0008634:	bb 01 00 00 00       	mov    ebx,0x1
c0008639:	eb 48                	jmp    c0008683 <f_mkfs+0x1116>
c000863b:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008643:	75 3e                	jne    c0008683 <f_mkfs+0x1116>
c0008645:	83 ec 0c             	sub    esp,0xc
c0008648:	55                   	push   ebp
c0008649:	e8 58 00 00 00       	call   c00086a6 <ff_memfree>
c000864e:	83 c4 10             	add    esp,0x10
c0008651:	eb 30                	jmp    c0008683 <f_mkfs+0x1116>
c0008653:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008658:	0f 85 eb fa ff ff    	jne    c0008149 <f_mkfs+0xbdc>
c000865e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008662:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008668:	0f 86 b8 f9 ff ff    	jbe    c0008026 <f_mkfs+0xab9>
c000866e:	e9 bf fb ff ff       	jmp    c0008232 <f_mkfs+0xcc5>
c0008673:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008678:	0f 85 c0 fa ff ff    	jne    c000813e <f_mkfs+0xbd1>
c000867e:	e9 af fb ff ff       	jmp    c0008232 <f_mkfs+0xcc5>
c0008683:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008689:	89 d8                	mov    eax,ebx
c000868b:	5b                   	pop    ebx
c000868c:	5e                   	pop    esi
c000868d:	5f                   	pop    edi
c000868e:	5d                   	pop    ebp
c000868f:	c3                   	ret    

c0008690 <ff_memalloc>:
c0008690:	83 ec 0c             	sub    esp,0xc
c0008693:	83 ec 0c             	sub    esp,0xc
c0008696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000869a:	e8 ba 71 00 00       	call   c000f859 <malloc>
c000869f:	83 c4 10             	add    esp,0x10
c00086a2:	83 c4 0c             	add    esp,0xc
c00086a5:	c3                   	ret    

c00086a6 <ff_memfree>:
c00086a6:	83 ec 0c             	sub    esp,0xc
c00086a9:	83 ec 0c             	sub    esp,0xc
c00086ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00086b0:	e8 b4 71 00 00       	call   c000f869 <free>
c00086b5:	83 c4 10             	add    esp,0x10
c00086b8:	90                   	nop
c00086b9:	83 c4 0c             	add    esp,0xc
c00086bc:	c3                   	ret    

c00086bd <ff_uni2oem>:
c00086bd:	83 ec 14             	sub    esp,0x14
c00086c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00086c4:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086c8:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00086cf:	c7 44 24 0c 20 9b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029b20
c00086d7:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00086dc:	77 0b                	ja     c00086e9 <ff_uni2oem+0x2c>
c00086de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00086e2:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00086e7:	eb 5b                	jmp    c0008744 <ff_uni2oem+0x87>
c00086e9:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00086f1:	77 51                	ja     c0008744 <ff_uni2oem+0x87>
c00086f3:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086f9:	75 49                	jne    c0008744 <ff_uni2oem+0x87>
c00086fb:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008702:	eb 0b                	jmp    c000870f <ff_uni2oem+0x52>
c0008704:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008709:	40                   	inc    eax
c000870a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000870f:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008715:	77 1b                	ja     c0008732 <ff_uni2oem+0x75>
c0008717:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000871c:	01 c0                	add    eax,eax
c000871e:	89 c2                	mov    edx,eax
c0008720:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008724:	01 d0                	add    eax,edx
c0008726:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008729:	0f b7 c0             	movzx  eax,ax
c000872c:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008730:	75 d2                	jne    c0008704 <ff_uni2oem+0x47>
c0008732:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008737:	83 e8 80             	sub    eax,0xffffff80
c000873a:	25 ff 00 00 00       	and    eax,0xff
c000873f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008744:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008749:	83 c4 14             	add    esp,0x14
c000874c:	c3                   	ret    

c000874d <ff_oem2uni>:
c000874d:	83 ec 18             	sub    esp,0x18
c0008750:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008754:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008758:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000875d:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008761:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008768:	c7 44 24 10 20 9b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029b20
c0008770:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008776:	77 0b                	ja     c0008783 <ff_oem2uni+0x36>
c0008778:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000877c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008781:	eb 2d                	jmp    c00087b0 <ff_oem2uni+0x63>
c0008783:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008789:	75 25                	jne    c00087b0 <ff_oem2uni+0x63>
c000878b:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008792:	77 1c                	ja     c00087b0 <ff_oem2uni+0x63>
c0008794:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008799:	05 80 ff ff 7f       	add    eax,0x7fffff80
c000879e:	01 c0                	add    eax,eax
c00087a0:	89 c2                	mov    edx,eax
c00087a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00087a6:	01 d0                	add    eax,edx
c00087a8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087ab:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00087b0:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00087b5:	83 c4 18             	add    esp,0x18
c00087b8:	c3                   	ret    

c00087b9 <ff_wtoupper>:
c00087b9:	83 ec 10             	sub    esp,0x10
c00087bc:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00087c4:	0f 87 3e 01 00 00    	ja     c0008908 <ff_wtoupper+0x14f>
c00087ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087ce:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087d3:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00087da:	77 07                	ja     c00087e3 <ff_wtoupper+0x2a>
c00087dc:	b8 20 99 02 c0       	mov    eax,0xc0029920
c00087e1:	eb 05                	jmp    c00087e8 <ff_wtoupper+0x2f>
c00087e3:	b8 60 98 02 c0       	mov    eax,0xc0029860
c00087e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087f0:	8d 50 02             	lea    edx,[eax+0x2]
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087fa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00087ff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008805:	0f 84 f4 00 00 00    	je     c00088ff <ff_wtoupper+0x146>
c000880b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008810:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008815:	0f 82 e4 00 00 00    	jb     c00088ff <ff_wtoupper+0x146>
c000881b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000881f:	8d 50 02             	lea    edx,[eax+0x2]
c0008822:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008826:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008829:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000882e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008833:	66 c1 e8 08          	shr    ax,0x8
c0008837:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000883c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008843:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008848:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000884d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008852:	01 ca                	add    edx,ecx
c0008854:	39 d0                	cmp    eax,edx
c0008856:	0f 8d 86 00 00 00    	jge    c00088e2 <ff_wtoupper+0x129>
c000885c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008861:	83 f8 08             	cmp    eax,0x8
c0008864:	0f 87 94 00 00 00    	ja     c00088fe <ff_wtoupper+0x145>
c000886a:	8b 04 85 20 98 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd67e0]
c0008871:	ff e0                	jmp    eax
c0008873:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008878:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000887d:	29 c2                	sub    edx,eax
c000887f:	89 d0                	mov    eax,edx
c0008881:	01 c0                	add    eax,eax
c0008883:	89 c2                	mov    edx,eax
c0008885:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008889:	01 d0                	add    eax,edx
c000888b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000888e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008893:	eb 4b                	jmp    c00088e0 <ff_wtoupper+0x127>
c0008895:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000889a:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000889e:	83 e0 01             	and    eax,0x1
c00088a1:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00088a6:	eb 38                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088a8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00088ae:	eb 30                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088b0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00088b6:	eb 28                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088b8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00088be:	eb 20                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088c0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00088c6:	eb 18                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088c8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00088ce:	eb 10                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088d0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00088d6:	eb 08                	jmp    c00088e0 <ff_wtoupper+0x127>
c00088d8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00088df:	90                   	nop
c00088e0:	eb 1c                	jmp    c00088fe <ff_wtoupper+0x145>
c00088e2:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00088e8:	0f 85 fe fe ff ff    	jne    c00087ec <ff_wtoupper+0x33>
c00088ee:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00088f3:	01 c0                	add    eax,eax
c00088f5:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00088f9:	e9 ee fe ff ff       	jmp    c00087ec <ff_wtoupper+0x33>
c00088fe:	90                   	nop
c00088ff:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008904:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008908:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000890c:	83 c4 10             	add    esp,0x10
c000890f:	c3                   	ret    

c0008910 <psrc_set_converter>:
c0008910:	56                   	push   esi
c0008911:	89 d6                	mov    esi,edx
c0008913:	53                   	push   ebx
c0008914:	89 c3                	mov    ebx,eax
c0008916:	83 ec 0c             	sub    esp,0xc
c0008919:	52                   	push   edx
c000891a:	50                   	push   eax
c000891b:	e8 6f 55 00 00       	call   c000de8f <sinc_set_converter>
c0008920:	83 c4 10             	add    esp,0x10
c0008923:	85 c0                	test   eax,eax
c0008925:	74 25                	je     c000894c <psrc_set_converter+0x3c>
c0008927:	50                   	push   eax
c0008928:	50                   	push   eax
c0008929:	56                   	push   esi
c000892a:	53                   	push   ebx
c000892b:	e8 17 5d 00 00       	call   c000e647 <zoh_set_converter>
c0008930:	83 c4 10             	add    esp,0x10
c0008933:	85 c0                	test   eax,eax
c0008935:	74 15                	je     c000894c <psrc_set_converter+0x3c>
c0008937:	51                   	push   ecx
c0008938:	51                   	push   ecx
c0008939:	56                   	push   esi
c000893a:	53                   	push   ebx
c000893b:	e8 0f 11 00 00       	call   c0009a4f <linear_set_converter>
c0008940:	83 c4 10             	add    esp,0x10
c0008943:	ba 0a 00 00 00       	mov    edx,0xa
c0008948:	85 c0                	test   eax,eax
c000894a:	75 02                	jne    c000894e <psrc_set_converter+0x3e>
c000894c:	31 d2                	xor    edx,edx
c000894e:	89 d0                	mov    eax,edx
c0008950:	5a                   	pop    edx
c0008951:	5b                   	pop    ebx
c0008952:	5e                   	pop    esi
c0008953:	c3                   	ret    

c0008954 <src_delete>:
c0008954:	53                   	push   ebx
c0008955:	83 ec 08             	sub    esp,0x8
c0008958:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000895c:	85 db                	test   ebx,ebx
c000895e:	74 29                	je     c0008989 <src_delete+0x35>
c0008960:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008963:	85 c0                	test   eax,eax
c0008965:	74 0c                	je     c0008973 <src_delete+0x1f>
c0008967:	83 ec 0c             	sub    esp,0xc
c000896a:	50                   	push   eax
c000896b:	e8 f9 6e 00 00       	call   c000f869 <free>
c0008970:	83 c4 10             	add    esp,0x10
c0008973:	50                   	push   eax
c0008974:	6a 3c                	push   0x3c
c0008976:	6a 00                	push   0x0
c0008978:	53                   	push   ebx
c0008979:	e8 d2 7d ff ff       	call   c0000750 <memset>
c000897e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008981:	e8 e3 6e 00 00       	call   c000f869 <free>
c0008986:	83 c4 10             	add    esp,0x10
c0008989:	31 c0                	xor    eax,eax
c000898b:	83 c4 08             	add    esp,0x8
c000898e:	5b                   	pop    ebx
c000898f:	c3                   	ret    

c0008990 <src_process>:
c0008990:	55                   	push   ebp
c0008991:	57                   	push   edi
c0008992:	56                   	push   esi
c0008993:	53                   	push   ebx
c0008994:	83 ec 1c             	sub    esp,0x1c
c0008997:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000899b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000899f:	85 ed                	test   ebp,ebp
c00089a1:	0f 84 6f 01 00 00    	je     c0008b16 <src_process+0x186>
c00089a7:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00089ab:	0f 84 6c 01 00 00    	je     c0008b1d <src_process+0x18d>
c00089b1:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00089b5:	0f 84 62 01 00 00    	je     c0008b1d <src_process+0x18d>
c00089bb:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00089c2:	0f 85 5c 01 00 00    	jne    c0008b24 <src_process+0x194>
c00089c8:	85 db                	test   ebx,ebx
c00089ca:	0f 84 5b 01 00 00    	je     c0008b2b <src_process+0x19b>
c00089d0:	8b 33                	mov    esi,DWORD PTR [ebx]
c00089d2:	85 f6                	test   esi,esi
c00089d4:	0f 84 58 01 00 00    	je     c0008b32 <src_process+0x1a2>
c00089da:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00089dd:	85 ff                	test   edi,edi
c00089df:	0f 84 4d 01 00 00    	je     c0008b32 <src_process+0x1a2>
c00089e5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00089e8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00089eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00089f3:	68 00 00 70 3f       	push   0x3f700000
c00089f8:	6a 00                	push   0x0
c00089fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00089fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a02:	e8 20 fd 01 00       	call   c0028727 <__ltdf2>
c0008a07:	83 c4 10             	add    esp,0x10
c0008a0a:	85 c0                	test   eax,eax
c0008a0c:	0f 88 27 01 00 00    	js     c0008b39 <src_process+0x1a9>
c0008a12:	68 00 00 70 40       	push   0x40700000
c0008a17:	6a 00                	push   0x0
c0008a19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008a21:	e8 e3 fc 01 00       	call   c0028709 <__gtdf2>
c0008a26:	83 c4 10             	add    esp,0x10
c0008a29:	85 c0                	test   eax,eax
c0008a2b:	0f 8f 08 01 00 00    	jg     c0008b39 <src_process+0x1a9>
c0008a31:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008a35:	79 07                	jns    c0008a3e <src_process+0xae>
c0008a37:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008a3e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008a41:	85 c0                	test   eax,eax
c0008a43:	79 50                	jns    c0008a95 <src_process+0x105>
c0008a45:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008a4c:	39 fe                	cmp    esi,edi
c0008a4e:	72 37                	jb     c0008a87 <src_process+0xf7>
c0008a50:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008a57:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008a5e:	68 00 00 70 3f       	push   0x3f700000
c0008a63:	6a 00                	push   0x0
c0008a65:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008a68:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008a6b:	e8 b7 fc 01 00       	call   c0028727 <__ltdf2>
c0008a70:	83 c4 10             	add    esp,0x10
c0008a73:	85 c0                	test   eax,eax
c0008a75:	79 37                	jns    c0008aae <src_process+0x11e>
c0008a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008a7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008a7f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008a82:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008a85:	eb 27                	jmp    c0008aae <src_process+0x11e>
c0008a87:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008a8a:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008a8e:	8d 04 86             	lea    eax,[esi+eax*4]
c0008a91:	39 c7                	cmp    edi,eax
c0008a93:	eb 0d                	jmp    c0008aa2 <src_process+0x112>
c0008a95:	39 fe                	cmp    esi,edi
c0008a97:	72 ee                	jb     c0008a87 <src_process+0xf7>
c0008a99:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008a9d:	8d 04 87             	lea    eax,[edi+eax*4]
c0008aa0:	39 c6                	cmp    esi,eax
c0008aa2:	73 ac                	jae    c0008a50 <src_process+0xc0>
c0008aa4:	b8 10 00 00 00       	mov    eax,0x10
c0008aa9:	e9 90 00 00 00       	jmp    c0008b3e <src_process+0x1ae>
c0008aae:	83 ec 10             	sub    esp,0x10
c0008ab1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008ab4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008ab7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008aba:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008abd:	e8 6a f3 01 00       	call   c0027e2c <__subdf3>
c0008ac2:	83 c4 18             	add    esp,0x18
c0008ac5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ac9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008acd:	52                   	push   edx
c0008ace:	50                   	push   eax
c0008acf:	e8 ec fd 01 00       	call   c00288c0 <fabs>
c0008ad4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ad8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008adc:	83 c4 10             	add    esp,0x10
c0008adf:	68 af 03 d2 3c       	push   0x3cd203af
c0008ae4:	68 16 56 e7 9e       	push   0x9ee75616
c0008ae9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008aed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008af1:	e8 31 fc 01 00       	call   c0028727 <__ltdf2>
c0008af6:	83 c4 10             	add    esp,0x10
c0008af9:	85 c0                	test   eax,eax
c0008afb:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008aff:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008b03:	79 05                	jns    c0008b0a <src_process+0x17a>
c0008b05:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c0008b08:	eb 03                	jmp    c0008b0d <src_process+0x17d>
c0008b0a:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008b0d:	83 c4 1c             	add    esp,0x1c
c0008b10:	5b                   	pop    ebx
c0008b11:	5e                   	pop    esi
c0008b12:	5f                   	pop    edi
c0008b13:	5d                   	pop    ebp
c0008b14:	ff e0                	jmp    eax
c0008b16:	b8 02 00 00 00       	mov    eax,0x2
c0008b1b:	eb 21                	jmp    c0008b3e <src_process+0x1ae>
c0008b1d:	b8 07 00 00 00       	mov    eax,0x7
c0008b22:	eb 1a                	jmp    c0008b3e <src_process+0x1ae>
c0008b24:	b8 12 00 00 00       	mov    eax,0x12
c0008b29:	eb 13                	jmp    c0008b3e <src_process+0x1ae>
c0008b2b:	b8 03 00 00 00       	mov    eax,0x3
c0008b30:	eb 0c                	jmp    c0008b3e <src_process+0x1ae>
c0008b32:	b8 04 00 00 00       	mov    eax,0x4
c0008b37:	eb 05                	jmp    c0008b3e <src_process+0x1ae>
c0008b39:	b8 06 00 00 00       	mov    eax,0x6
c0008b3e:	83 c4 1c             	add    esp,0x1c
c0008b41:	5b                   	pop    ebx
c0008b42:	5e                   	pop    esi
c0008b43:	5f                   	pop    edi
c0008b44:	5d                   	pop    ebp
c0008b45:	c3                   	ret    

c0008b46 <src_callback_read>:
c0008b46:	55                   	push   ebp
c0008b47:	57                   	push   edi
c0008b48:	56                   	push   esi
c0008b49:	53                   	push   ebx
c0008b4a:	83 ec 3c             	sub    esp,0x3c
c0008b4d:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008b51:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008b55:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008b59:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008b5d:	85 ed                	test   ebp,ebp
c0008b5f:	0f 8e 52 01 00 00    	jle    c0008cb7 <src_callback_read+0x171>
c0008b65:	85 db                	test   ebx,ebx
c0008b67:	0f 84 4a 01 00 00    	je     c0008cb7 <src_callback_read+0x171>
c0008b6d:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008b74:	74 0c                	je     c0008b82 <src_callback_read+0x3c>
c0008b76:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008b7d:	e9 35 01 00 00       	jmp    c0008cb7 <src_callback_read+0x171>
c0008b82:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008b86:	75 0c                	jne    c0008b94 <src_callback_read+0x4e>
c0008b88:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008b8f:	e9 23 01 00 00       	jmp    c0008cb7 <src_callback_read+0x171>
c0008b94:	51                   	push   ecx
c0008b95:	6a 24                	push   0x24
c0008b97:	6a 00                	push   0x0
c0008b99:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008b9d:	50                   	push   eax
c0008b9e:	e8 ad 7b ff ff       	call   c0000750 <memset>
c0008ba3:	83 c4 10             	add    esp,0x10
c0008ba6:	68 00 00 70 3f       	push   0x3f700000
c0008bab:	6a 00                	push   0x0
c0008bad:	57                   	push   edi
c0008bae:	56                   	push   esi
c0008baf:	e8 73 fb 01 00       	call   c0028727 <__ltdf2>
c0008bb4:	83 c4 10             	add    esp,0x10
c0008bb7:	85 c0                	test   eax,eax
c0008bb9:	78 3e                	js     c0008bf9 <src_callback_read+0xb3>
c0008bbb:	68 00 00 70 40       	push   0x40700000
c0008bc0:	6a 00                	push   0x0
c0008bc2:	57                   	push   edi
c0008bc3:	56                   	push   esi
c0008bc4:	e8 40 fb 01 00       	call   c0028709 <__gtdf2>
c0008bc9:	83 c4 10             	add    esp,0x10
c0008bcc:	85 c0                	test   eax,eax
c0008bce:	7f 29                	jg     c0008bf9 <src_callback_read+0xb3>
c0008bd0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0008bd4:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0008bd8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bdc:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008be0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008be3:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0008be7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008beb:	31 f6                	xor    esi,esi
c0008bed:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0008bf0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008bf4:	e9 97 00 00 00       	jmp    c0008c90 <src_callback_read+0x14a>
c0008bf9:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008c00:	e9 b2 00 00 00       	jmp    c0008cb7 <src_callback_read+0x171>
c0008c05:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008c09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c0d:	52                   	push   edx
c0008c0e:	52                   	push   edx
c0008c0f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008c13:	50                   	push   eax
c0008c14:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008c17:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008c1a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008c1e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008c22:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008c26:	83 c4 10             	add    esp,0x10
c0008c29:	85 c0                	test   eax,eax
c0008c2b:	75 08                	jne    c0008c35 <src_callback_read+0xef>
c0008c2d:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008c35:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008c3c:	50                   	push   eax
c0008c3d:	50                   	push   eax
c0008c3e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008c42:	50                   	push   eax
c0008c43:	53                   	push   ebx
c0008c44:	e8 47 fd ff ff       	call   c0008990 <src_process>
c0008c49:	83 c4 10             	add    esp,0x10
c0008c4c:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c53:	85 c0                	test   eax,eax
c0008c55:	75 49                	jne    c0008ca0 <src_callback_read+0x15a>
c0008c57:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008c5b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008c5e:	89 f9                	mov    ecx,edi
c0008c60:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008c64:	0f af ca             	imul   ecx,edx
c0008c67:	c1 e1 02             	shl    ecx,0x2
c0008c6a:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008c6e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008c72:	0f af d1             	imul   edx,ecx
c0008c75:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008c79:	c1 e2 02             	shl    edx,0x2
c0008c7c:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008c80:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008c83:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008c88:	74 12                	je     c0008c9c <src_callback_read+0x156>
c0008c8a:	39 d5                	cmp    ebp,edx
c0008c8c:	7e 14                	jle    c0008ca2 <src_callback_read+0x15c>
c0008c8e:	89 d6                	mov    esi,edx
c0008c90:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008c95:	75 9e                	jne    c0008c35 <src_callback_read+0xef>
c0008c97:	e9 69 ff ff ff       	jmp    c0008c05 <src_callback_read+0xbf>
c0008c9c:	85 c9                	test   ecx,ecx
c0008c9e:	75 ea                	jne    c0008c8a <src_callback_read+0x144>
c0008ca0:	89 f2                	mov    edx,esi
c0008ca2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008ca6:	85 c0                	test   eax,eax
c0008ca8:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008cab:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008caf:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008cb2:	74 05                	je     c0008cb9 <src_callback_read+0x173>
c0008cb4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008cb7:	31 d2                	xor    edx,edx
c0008cb9:	83 c4 3c             	add    esp,0x3c
c0008cbc:	89 d0                	mov    eax,edx
c0008cbe:	5b                   	pop    ebx
c0008cbf:	5e                   	pop    esi
c0008cc0:	5f                   	pop    edi
c0008cc1:	5d                   	pop    ebp
c0008cc2:	c3                   	ret    

c0008cc3 <src_set_ratio>:
c0008cc3:	57                   	push   edi
c0008cc4:	ba 02 00 00 00       	mov    edx,0x2
c0008cc9:	56                   	push   esi
c0008cca:	53                   	push   ebx
c0008ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ccf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008cd3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008cd7:	85 db                	test   ebx,ebx
c0008cd9:	74 4c                	je     c0008d27 <src_set_ratio+0x64>
c0008cdb:	ba 07 00 00 00       	mov    edx,0x7
c0008ce0:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ce4:	74 41                	je     c0008d27 <src_set_ratio+0x64>
c0008ce6:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008cea:	74 3b                	je     c0008d27 <src_set_ratio+0x64>
c0008cec:	68 00 00 70 3f       	push   0x3f700000
c0008cf1:	6a 00                	push   0x0
c0008cf3:	57                   	push   edi
c0008cf4:	56                   	push   esi
c0008cf5:	e8 2d fa 01 00       	call   c0028727 <__ltdf2>
c0008cfa:	83 c4 10             	add    esp,0x10
c0008cfd:	ba 06 00 00 00       	mov    edx,0x6
c0008d02:	85 c0                	test   eax,eax
c0008d04:	78 21                	js     c0008d27 <src_set_ratio+0x64>
c0008d06:	68 00 00 70 40       	push   0x40700000
c0008d0b:	6a 00                	push   0x0
c0008d0d:	57                   	push   edi
c0008d0e:	56                   	push   esi
c0008d0f:	e8 f5 f9 01 00       	call   c0028709 <__gtdf2>
c0008d14:	83 c4 10             	add    esp,0x10
c0008d17:	ba 06 00 00 00       	mov    edx,0x6
c0008d1c:	85 c0                	test   eax,eax
c0008d1e:	7f 07                	jg     c0008d27 <src_set_ratio+0x64>
c0008d20:	89 33                	mov    DWORD PTR [ebx],esi
c0008d22:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008d25:	31 d2                	xor    edx,edx
c0008d27:	5b                   	pop    ebx
c0008d28:	89 d0                	mov    eax,edx
c0008d2a:	5e                   	pop    esi
c0008d2b:	5f                   	pop    edi
c0008d2c:	c3                   	ret    

c0008d2d <src_get_channels>:
c0008d2d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d31:	b8 02 00 00 00       	mov    eax,0x2
c0008d36:	85 d2                	test   edx,edx
c0008d38:	74 14                	je     c0008d4e <src_get_channels+0x21>
c0008d3a:	b8 07 00 00 00       	mov    eax,0x7
c0008d3f:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008d43:	74 09                	je     c0008d4e <src_get_channels+0x21>
c0008d45:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008d49:	74 03                	je     c0008d4e <src_get_channels+0x21>
c0008d4b:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008d4e:	c3                   	ret    

c0008d4f <src_reset>:
c0008d4f:	53                   	push   ebx
c0008d50:	b8 02 00 00 00       	mov    eax,0x2
c0008d55:	83 ec 08             	sub    esp,0x8
c0008d58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008d5c:	85 db                	test   ebx,ebx
c0008d5e:	74 36                	je     c0008d96 <src_reset+0x47>
c0008d60:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008d63:	85 c0                	test   eax,eax
c0008d65:	74 09                	je     c0008d70 <src_reset+0x21>
c0008d67:	83 ec 0c             	sub    esp,0xc
c0008d6a:	53                   	push   ebx
c0008d6b:	ff d0                	call   eax
c0008d6d:	83 c4 10             	add    esp,0x10
c0008d70:	31 c0                	xor    eax,eax
c0008d72:	31 d2                	xor    edx,edx
c0008d74:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008d77:	89 03                	mov    DWORD PTR [ebx],eax
c0008d79:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008d7c:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008d7f:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008d86:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008d8d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008d94:	31 c0                	xor    eax,eax
c0008d96:	83 c4 08             	add    esp,0x8
c0008d99:	5b                   	pop    ebx
c0008d9a:	c3                   	ret    

c0008d9b <src_new>:
c0008d9b:	57                   	push   edi
c0008d9c:	56                   	push   esi
c0008d9d:	53                   	push   ebx
c0008d9e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008da2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008da6:	85 f6                	test   esi,esi
c0008da8:	74 73                	je     c0008e1d <src_new+0x82>
c0008daa:	85 ff                	test   edi,edi
c0008dac:	7f 08                	jg     c0008db6 <src_new+0x1b>
c0008dae:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008db4:	eb 1e                	jmp    c0008dd4 <src_new+0x39>
c0008db6:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008dbc:	50                   	push   eax
c0008dbd:	50                   	push   eax
c0008dbe:	6a 3c                	push   0x3c
c0008dc0:	6a 01                	push   0x1
c0008dc2:	e8 c2 6a 00 00       	call   c000f889 <calloc>
c0008dc7:	83 c4 10             	add    esp,0x10
c0008dca:	89 c3                	mov    ebx,eax
c0008dcc:	85 c0                	test   eax,eax
c0008dce:	75 10                	jne    c0008de0 <src_new+0x45>
c0008dd0:	85 f6                	test   esi,esi
c0008dd2:	75 04                	jne    c0008dd8 <src_new+0x3d>
c0008dd4:	31 db                	xor    ebx,ebx
c0008dd6:	eb 4b                	jmp    c0008e23 <src_new+0x88>
c0008dd8:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008dde:	eb 43                	jmp    c0008e23 <src_new+0x88>
c0008de0:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008de3:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008dea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008dee:	e8 1d fb ff ff       	call   c0008910 <psrc_set_converter>
c0008df3:	85 c0                	test   eax,eax
c0008df5:	74 18                	je     c0008e0f <src_new+0x74>
c0008df7:	85 f6                	test   esi,esi
c0008df9:	74 06                	je     c0008e01 <src_new+0x66>
c0008dfb:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008e01:	83 ec 0c             	sub    esp,0xc
c0008e04:	53                   	push   ebx
c0008e05:	31 db                	xor    ebx,ebx
c0008e07:	e8 5d 6a 00 00       	call   c000f869 <free>
c0008e0c:	83 c4 10             	add    esp,0x10
c0008e0f:	83 ec 0c             	sub    esp,0xc
c0008e12:	53                   	push   ebx
c0008e13:	e8 37 ff ff ff       	call   c0008d4f <src_reset>
c0008e18:	83 c4 10             	add    esp,0x10
c0008e1b:	eb 06                	jmp    c0008e23 <src_new+0x88>
c0008e1d:	85 ff                	test   edi,edi
c0008e1f:	7f 9b                	jg     c0008dbc <src_new+0x21>
c0008e21:	eb b1                	jmp    c0008dd4 <src_new+0x39>
c0008e23:	89 d8                	mov    eax,ebx
c0008e25:	5b                   	pop    ebx
c0008e26:	5e                   	pop    esi
c0008e27:	5f                   	pop    edi
c0008e28:	c3                   	ret    

c0008e29 <src_callback_new>:
c0008e29:	56                   	push   esi
c0008e2a:	53                   	push   ebx
c0008e2b:	53                   	push   ebx
c0008e2c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008e30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008e34:	85 f6                	test   esi,esi
c0008e36:	75 0e                	jne    c0008e46 <src_callback_new+0x1d>
c0008e38:	31 db                	xor    ebx,ebx
c0008e3a:	85 c0                	test   eax,eax
c0008e3c:	74 47                	je     c0008e85 <src_callback_new+0x5c>
c0008e3e:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008e44:	eb 3f                	jmp    c0008e85 <src_callback_new+0x5c>
c0008e46:	85 c0                	test   eax,eax
c0008e48:	74 06                	je     c0008e50 <src_callback_new+0x27>
c0008e4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008e50:	51                   	push   ecx
c0008e51:	50                   	push   eax
c0008e52:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008e56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008e5a:	e8 3c ff ff ff       	call   c0008d9b <src_new>
c0008e5f:	83 c4 10             	add    esp,0x10
c0008e62:	89 c3                	mov    ebx,eax
c0008e64:	85 c0                	test   eax,eax
c0008e66:	74 1d                	je     c0008e85 <src_callback_new+0x5c>
c0008e68:	83 ec 0c             	sub    esp,0xc
c0008e6b:	50                   	push   eax
c0008e6c:	e8 de fe ff ff       	call   c0008d4f <src_reset>
c0008e71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e75:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008e7c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008e7f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008e82:	83 c4 10             	add    esp,0x10
c0008e85:	89 d8                	mov    eax,ebx
c0008e87:	5a                   	pop    edx
c0008e88:	5b                   	pop    ebx
c0008e89:	5e                   	pop    esi
c0008e8a:	c3                   	ret    

c0008e8b <src_get_name>:
c0008e8b:	53                   	push   ebx
c0008e8c:	83 ec 14             	sub    esp,0x14
c0008e8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008e93:	53                   	push   ebx
c0008e94:	e8 d0 4f 00 00       	call   c000de69 <sinc_get_name>
c0008e99:	83 c4 10             	add    esp,0x10
c0008e9c:	85 c0                	test   eax,eax
c0008e9e:	75 1d                	jne    c0008ebd <src_get_name+0x32>
c0008ea0:	83 ec 0c             	sub    esp,0xc
c0008ea3:	53                   	push   ebx
c0008ea4:	e8 80 57 00 00       	call   c000e629 <zoh_get_name>
c0008ea9:	83 c4 10             	add    esp,0x10
c0008eac:	85 c0                	test   eax,eax
c0008eae:	75 0d                	jne    c0008ebd <src_get_name+0x32>
c0008eb0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008eb4:	83 c4 08             	add    esp,0x8
c0008eb7:	5b                   	pop    ebx
c0008eb8:	e9 74 0b 00 00       	jmp    c0009a31 <linear_get_name>
c0008ebd:	83 c4 08             	add    esp,0x8
c0008ec0:	5b                   	pop    ebx
c0008ec1:	c3                   	ret    

c0008ec2 <src_get_description>:
c0008ec2:	53                   	push   ebx
c0008ec3:	83 ec 14             	sub    esp,0x14
c0008ec6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008eca:	53                   	push   ebx
c0008ecb:	e8 ac 4f 00 00       	call   c000de7c <sinc_get_description>
c0008ed0:	83 c4 10             	add    esp,0x10
c0008ed3:	85 c0                	test   eax,eax
c0008ed5:	75 1d                	jne    c0008ef4 <src_get_description+0x32>
c0008ed7:	83 ec 0c             	sub    esp,0xc
c0008eda:	53                   	push   ebx
c0008edb:	e8 58 57 00 00       	call   c000e638 <zoh_get_description>
c0008ee0:	83 c4 10             	add    esp,0x10
c0008ee3:	85 c0                	test   eax,eax
c0008ee5:	75 0d                	jne    c0008ef4 <src_get_description+0x32>
c0008ee7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008eeb:	83 c4 08             	add    esp,0x8
c0008eee:	5b                   	pop    ebx
c0008eef:	e9 4c 0b 00 00       	jmp    c0009a40 <linear_get_description>
c0008ef4:	83 c4 08             	add    esp,0x8
c0008ef7:	5b                   	pop    ebx
c0008ef8:	c3                   	ret    

c0008ef9 <src_get_version>:
c0008ef9:	b8 20 9c 02 c0       	mov    eax,0xc0029c20
c0008efe:	c3                   	ret    

c0008eff <src_is_valid_ratio>:
c0008eff:	83 ec 1c             	sub    esp,0x1c
c0008f02:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f0a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	68 00 00 70 3f       	push   0x3f700000
c0008f17:	6a 00                	push   0x0
c0008f19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	e8 01 f8 01 00       	call   c0028727 <__ltdf2>
c0008f26:	83 c4 10             	add    esp,0x10
c0008f29:	31 d2                	xor    edx,edx
c0008f2b:	85 c0                	test   eax,eax
c0008f2d:	78 1e                	js     c0008f4d <src_is_valid_ratio+0x4e>
c0008f2f:	68 00 00 70 40       	push   0x40700000
c0008f34:	6a 00                	push   0x0
c0008f36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3e:	e8 c6 f7 01 00       	call   c0028709 <__gtdf2>
c0008f43:	31 d2                	xor    edx,edx
c0008f45:	83 c4 10             	add    esp,0x10
c0008f48:	85 c0                	test   eax,eax
c0008f4a:	0f 9e c2             	setle  dl
c0008f4d:	89 d0                	mov    eax,edx
c0008f4f:	83 c4 1c             	add    esp,0x1c
c0008f52:	c3                   	ret    

c0008f53 <src_error>:
c0008f53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008f57:	31 c0                	xor    eax,eax
c0008f59:	85 d2                	test   edx,edx
c0008f5b:	74 03                	je     c0008f60 <src_error+0xd>
c0008f5d:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008f60:	c3                   	ret    

c0008f61 <src_strerror>:
c0008f61:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008f65:	31 c0                	xor    eax,eax
c0008f67:	83 fa 17             	cmp    edx,0x17
c0008f6a:	77 07                	ja     c0008f73 <src_strerror+0x12>
c0008f6c:	8b 04 95 80 a0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5f80]
c0008f73:	c3                   	ret    

c0008f74 <src_simple>:
c0008f74:	56                   	push   esi
c0008f75:	53                   	push   ebx
c0008f76:	83 ec 18             	sub    esp,0x18
c0008f79:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f7d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008f81:	50                   	push   eax
c0008f82:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008f86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008f8a:	e8 0c fe ff ff       	call   c0008d9b <src_new>
c0008f8f:	83 c4 10             	add    esp,0x10
c0008f92:	85 c0                	test   eax,eax
c0008f94:	75 06                	jne    c0008f9c <src_simple+0x28>
c0008f96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008f9a:	eb 25                	jmp    c0008fc1 <src_simple+0x4d>
c0008f9c:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008fa3:	89 c3                	mov    ebx,eax
c0008fa5:	50                   	push   eax
c0008fa6:	50                   	push   eax
c0008fa7:	56                   	push   esi
c0008fa8:	53                   	push   ebx
c0008fa9:	e8 e2 f9 ff ff       	call   c0008990 <src_process>
c0008fae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008fb1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fb5:	e8 9a f9 ff ff       	call   c0008954 <src_delete>
c0008fba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fbe:	83 c4 10             	add    esp,0x10
c0008fc1:	83 c4 14             	add    esp,0x14
c0008fc4:	5b                   	pop    ebx
c0008fc5:	5e                   	pop    esi
c0008fc6:	c3                   	ret    

c0008fc7 <src_short_to_float_array>:
c0008fc7:	53                   	push   ebx
c0008fc8:	83 ec 18             	sub    esp,0x18
c0008fcb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008fcf:	85 db                	test   ebx,ebx
c0008fd1:	74 54                	je     c0009027 <src_short_to_float_array+0x60>
c0008fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fd7:	4b                   	dec    ebx
c0008fd8:	83 ec 0c             	sub    esp,0xc
c0008fdb:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008fdf:	50                   	push   eax
c0008fe0:	e8 d6 f4 01 00       	call   c00284bb <__floatsidf>
c0008fe5:	83 c4 10             	add    esp,0x10
c0008fe8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ff0:	68 00 00 00 3f       	push   0x3f000000
c0008ff5:	6a 00                	push   0x0
c0008ff7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ffb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fff:	e8 54 ee 01 00       	call   c0027e58 <__muldf3>
c0009004:	59                   	pop    ecx
c0009005:	59                   	pop    ecx
c0009006:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000900a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000900e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009012:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009016:	e8 10 f7 01 00       	call   c002872b <__truncdfsf2>
c000901b:	83 c4 10             	add    esp,0x10
c000901e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009022:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0009025:	eb a8                	jmp    c0008fcf <src_short_to_float_array+0x8>
c0009027:	83 c4 18             	add    esp,0x18
c000902a:	5b                   	pop    ebx
c000902b:	c3                   	ret    

c000902c <src_float_to_short_array>:
c000902c:	56                   	push   esi
c000902d:	53                   	push   ebx
c000902e:	83 ec 14             	sub    esp,0x14
c0009031:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009035:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0009039:	85 db                	test   ebx,ebx
c000903b:	0f 84 a4 00 00 00    	je     c00090e5 <src_float_to_short_array+0xb9>
c0009041:	83 ec 0c             	sub    esp,0xc
c0009044:	4b                   	dec    ebx
c0009045:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009049:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c000904c:	e8 fe f7 01 00       	call   c002884f <__extendsfdf2>
c0009051:	83 c4 10             	add    esp,0x10
c0009054:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009058:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000905c:	68 00 00 e0 41       	push   0x41e00000
c0009061:	6a 00                	push   0x0
c0009063:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009067:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000906b:	e8 e8 ed 01 00       	call   c0027e58 <__muldf3>
c0009070:	83 c4 10             	add    esp,0x10
c0009073:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009077:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000907b:	68 ff ff df 41       	push   0x41dfffff
c0009080:	68 00 00 c0 ff       	push   0xffc00000
c0009085:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009089:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000908d:	e8 93 f6 01 00       	call   c0028725 <__gedf2>
c0009092:	83 c4 10             	add    esp,0x10
c0009095:	85 c0                	test   eax,eax
c0009097:	78 08                	js     c00090a1 <src_float_to_short_array+0x75>
c0009099:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c000909f:	eb 98                	jmp    c0009039 <src_float_to_short_array+0xd>
c00090a1:	68 00 00 e0 c1       	push   0xc1e00000
c00090a6:	6a 00                	push   0x0
c00090a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b0:	e8 74 f6 01 00       	call   c0028729 <__ledf2>
c00090b5:	83 c4 10             	add    esp,0x10
c00090b8:	85 c0                	test   eax,eax
c00090ba:	7f 0b                	jg     c00090c7 <src_float_to_short_array+0x9b>
c00090bc:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c00090c2:	e9 72 ff ff ff       	jmp    c0009039 <src_float_to_short_array+0xd>
c00090c7:	50                   	push   eax
c00090c8:	50                   	push   eax
c00090c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090d1:	e8 0a f8 01 00       	call   c00288e0 <lrint>
c00090d6:	83 c4 10             	add    esp,0x10
c00090d9:	c1 f8 10             	sar    eax,0x10
c00090dc:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c00090e0:	e9 54 ff ff ff       	jmp    c0009039 <src_float_to_short_array+0xd>
c00090e5:	83 c4 14             	add    esp,0x14
c00090e8:	5b                   	pop    ebx
c00090e9:	5e                   	pop    esi
c00090ea:	c3                   	ret    

c00090eb <src_int_to_float_array>:
c00090eb:	53                   	push   ebx
c00090ec:	83 ec 18             	sub    esp,0x18
c00090ef:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00090f3:	85 db                	test   ebx,ebx
c00090f5:	74 52                	je     c0009149 <src_int_to_float_array+0x5e>
c00090f7:	83 ec 0c             	sub    esp,0xc
c00090fa:	4b                   	dec    ebx
c00090fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00090ff:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0009102:	e8 b4 f3 01 00       	call   c00284bb <__floatsidf>
c0009107:	83 c4 10             	add    esp,0x10
c000910a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000910e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009112:	68 00 00 00 3e       	push   0x3e000000
c0009117:	6a 00                	push   0x0
c0009119:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000911d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009121:	e8 32 ed 01 00       	call   c0027e58 <__muldf3>
c0009126:	59                   	pop    ecx
c0009127:	59                   	pop    ecx
c0009128:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000912c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009138:	e8 ee f5 01 00       	call   c002872b <__truncdfsf2>
c000913d:	83 c4 10             	add    esp,0x10
c0009140:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009144:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0009147:	eb aa                	jmp    c00090f3 <src_int_to_float_array+0x8>
c0009149:	83 c4 18             	add    esp,0x18
c000914c:	5b                   	pop    ebx
c000914d:	c3                   	ret    

c000914e <src_float_to_int_array>:
c000914e:	56                   	push   esi
c000914f:	53                   	push   ebx
c0009150:	83 ec 14             	sub    esp,0x14
c0009153:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009157:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000915b:	85 db                	test   ebx,ebx
c000915d:	0f 84 a2 00 00 00    	je     c0009205 <src_float_to_int_array+0xb7>
c0009163:	83 ec 0c             	sub    esp,0xc
c0009166:	4b                   	dec    ebx
c0009167:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000916b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c000916e:	e8 dc f6 01 00       	call   c002884f <__extendsfdf2>
c0009173:	83 c4 10             	add    esp,0x10
c0009176:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000917a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000917e:	68 00 00 e0 41       	push   0x41e00000
c0009183:	6a 00                	push   0x0
c0009185:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009189:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000918d:	e8 c6 ec 01 00       	call   c0027e58 <__muldf3>
c0009192:	83 c4 10             	add    esp,0x10
c0009195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000919d:	68 ff ff df 41       	push   0x41dfffff
c00091a2:	68 00 00 c0 ff       	push   0xffc00000
c00091a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091af:	e8 71 f5 01 00       	call   c0028725 <__gedf2>
c00091b4:	83 c4 10             	add    esp,0x10
c00091b7:	85 c0                	test   eax,eax
c00091b9:	78 09                	js     c00091c4 <src_float_to_int_array+0x76>
c00091bb:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c00091c2:	eb 97                	jmp    c000915b <src_float_to_int_array+0xd>
c00091c4:	68 00 00 e0 c1       	push   0xc1e00000
c00091c9:	6a 00                	push   0x0
c00091cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091d3:	e8 51 f5 01 00       	call   c0028729 <__ledf2>
c00091d8:	83 c4 10             	add    esp,0x10
c00091db:	85 c0                	test   eax,eax
c00091dd:	7f 0c                	jg     c00091eb <src_float_to_int_array+0x9d>
c00091df:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c00091e6:	e9 70 ff ff ff       	jmp    c000915b <src_float_to_int_array+0xd>
c00091eb:	50                   	push   eax
c00091ec:	50                   	push   eax
c00091ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f5:	e8 e6 f6 01 00       	call   c00288e0 <lrint>
c00091fa:	83 c4 10             	add    esp,0x10
c00091fd:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009200:	e9 56 ff ff ff       	jmp    c000915b <src_float_to_int_array+0xd>
c0009205:	83 c4 14             	add    esp,0x14
c0009208:	5b                   	pop    ebx
c0009209:	5e                   	pop    esi
c000920a:	c3                   	ret    

c000920b <linear_vari_process>:
c000920b:	55                   	push   ebp
c000920c:	31 d2                	xor    edx,edx
c000920e:	57                   	push   edi
c000920f:	56                   	push   esi
c0009210:	53                   	push   ebx
c0009211:	83 ec 3c             	sub    esp,0x3c
c0009214:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0009218:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000921c:	0f 8e d3 07 00 00    	jle    c00099f5 <linear_vari_process+0x7ea>
c0009222:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009226:	ba 05 00 00 00       	mov    edx,0x5
c000922b:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000922e:	85 db                	test   ebx,ebx
c0009230:	0f 84 bf 07 00 00    	je     c00099f5 <linear_vari_process+0x7ea>
c0009236:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009239:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000923d:	74 19                	je     c0009258 <linear_vari_process+0x4d>
c000923f:	31 d2                	xor    edx,edx
c0009241:	39 c2                	cmp    edx,eax
c0009243:	7d 0c                	jge    c0009251 <linear_vari_process+0x46>
c0009245:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009247:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000924a:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000924e:	42                   	inc    edx
c000924f:	eb f0                	jmp    c0009241 <linear_vari_process+0x36>
c0009251:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009258:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000925b:	0f af d0             	imul   edx,eax
c000925e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009261:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009265:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000926c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000926f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009276:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000927a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000927d:	8b 00                	mov    eax,DWORD PTR [eax]
c000927f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009283:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009287:	68 00 00 70 3f       	push   0x3f700000
c000928c:	6a 00                	push   0x0
c000928e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009296:	e8 8c f4 01 00       	call   c0028727 <__ltdf2>
c000929b:	83 c4 10             	add    esp,0x10
c000929e:	ba 16 00 00 00       	mov    edx,0x16
c00092a3:	85 c0                	test   eax,eax
c00092a5:	0f 88 4a 07 00 00    	js     c00099f5 <linear_vari_process+0x7ea>
c00092ab:	68 00 00 70 40       	push   0x40700000
c00092b0:	6a 00                	push   0x0
c00092b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092ba:	e8 4a f4 01 00       	call   c0028709 <__gtdf2>
c00092bf:	83 c4 10             	add    esp,0x10
c00092c2:	ba 16 00 00 00       	mov    edx,0x16
c00092c7:	85 c0                	test   eax,eax
c00092c9:	0f 8f 26 07 00 00    	jg     c00099f5 <linear_vari_process+0x7ea>
c00092cf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00092d3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00092d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00092d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00092dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00092e1:	68 00 00 f0 3f       	push   0x3ff00000
c00092e6:	6a 00                	push   0x0
c00092e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092f0:	e8 32 f4 01 00       	call   c0028727 <__ltdf2>
c00092f5:	83 c4 10             	add    esp,0x10
c00092f8:	85 c0                	test   eax,eax
c00092fa:	0f 89 89 02 00 00    	jns    c0009589 <linear_vari_process+0x37e>
c0009300:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009303:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0009306:	0f 8d 7d 02 00 00    	jge    c0009589 <linear_vari_process+0x37e>
c000930c:	83 ec 0c             	sub    esp,0xc
c000930f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009312:	e8 a4 f1 01 00       	call   c00284bb <__floatsidf>
c0009317:	83 c4 10             	add    esp,0x10
c000931a:	89 04 24             	mov    DWORD PTR [esp],eax
c000931d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009321:	68 00 00 f0 3f       	push   0x3ff00000
c0009326:	6a 00                	push   0x0
c0009328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000932c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009330:	e8 a6 e4 01 00       	call   c00277db <__adddf3>
c0009335:	83 c4 10             	add    esp,0x10
c0009338:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000933c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009340:	52                   	push   edx
c0009341:	50                   	push   eax
c0009342:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000934a:	e8 09 eb 01 00       	call   c0027e58 <__muldf3>
c000934f:	5d                   	pop    ebp
c0009350:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009354:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009358:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000935b:	e8 5b f1 01 00       	call   c00284bb <__floatsidf>
c0009360:	83 c4 10             	add    esp,0x10
c0009363:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009367:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000936b:	52                   	push   edx
c000936c:	50                   	push   eax
c000936d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009371:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009375:	e8 61 e4 01 00       	call   c00277db <__adddf3>
c000937a:	59                   	pop    ecx
c000937b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000937f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009383:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009386:	e8 30 f1 01 00       	call   c00284bb <__floatsidf>
c000938b:	83 c4 10             	add    esp,0x10
c000938e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009392:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009396:	52                   	push   edx
c0009397:	50                   	push   eax
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093a0:	e8 80 f3 01 00       	call   c0028725 <__gedf2>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	85 c0                	test   eax,eax
c00093aa:	0f 89 d9 01 00 00    	jns    c0009589 <linear_vari_process+0x37e>
c00093b0:	85 ff                	test   edi,edi
c00093b2:	0f 8e f4 00 00 00    	jle    c00094ac <linear_vari_process+0x2a1>
c00093b8:	83 ec 10             	sub    esp,0x10
c00093bb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00093be:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00093c1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00093c5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00093c8:	ff 30                	push   DWORD PTR [eax]
c00093ca:	e8 5d ea 01 00       	call   c0027e2c <__subdf3>
c00093cf:	83 c4 18             	add    esp,0x18
c00093d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093da:	52                   	push   edx
c00093db:	50                   	push   eax
c00093dc:	e8 df f4 01 00       	call   c00288c0 <fabs>
c00093e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00093f1:	68 23 42 92 0c       	push   0xc924223
c00093f6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093fe:	e8 06 f3 01 00       	call   c0028709 <__gtdf2>
c0009403:	83 c4 10             	add    esp,0x10
c0009406:	85 c0                	test   eax,eax
c0009408:	0f 8e 9e 00 00 00    	jle    c00094ac <linear_vari_process+0x2a1>
c000940e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009412:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009415:	8b 00                	mov    eax,DWORD PTR [eax]
c0009417:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000941b:	89 04 24             	mov    DWORD PTR [esp],eax
c000941e:	52                   	push   edx
c000941f:	50                   	push   eax
c0009420:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009423:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009426:	e8 01 ea 01 00       	call   c0027e2c <__subdf3>
c000942b:	59                   	pop    ecx
c000942c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009430:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009434:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009437:	e8 7f f0 01 00       	call   c00284bb <__floatsidf>
c000943c:	83 c4 10             	add    esp,0x10
c000943f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009443:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009447:	52                   	push   edx
c0009448:	50                   	push   eax
c0009449:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009451:	e8 02 ea 01 00       	call   c0027e58 <__muldf3>
c0009456:	5f                   	pop    edi
c0009457:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000945b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000945f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009462:	e8 54 f0 01 00       	call   c00284bb <__floatsidf>
c0009467:	83 c4 10             	add    esp,0x10
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	52                   	push   edx
c0009473:	50                   	push   eax
c0009474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009478:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947c:	e8 bb ec 01 00       	call   c002813c <__divdf3>
c0009481:	83 c4 10             	add    esp,0x10
c0009484:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009488:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000948c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009490:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000949c:	e8 3a e3 01 00       	call   c00277db <__adddf3>
c00094a1:	83 c4 10             	add    esp,0x10
c00094a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ac:	31 ff                	xor    edi,edi
c00094ae:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00094b1:	0f 8e 9d 00 00 00    	jle    c0009554 <linear_vari_process+0x349>
c00094b7:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00094ba:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00094be:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00094c1:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00094c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00094c8:	8b 06                	mov    eax,DWORD PTR [esi]
c00094ca:	52                   	push   edx
c00094cb:	52                   	push   edx
c00094cc:	55                   	push   ebp
c00094cd:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00094d0:	47                   	inc    edi
c00094d1:	e8 9a dc 01 00       	call   c0027170 <__subsf3>
c00094d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00094d9:	e8 71 f3 01 00       	call   c002884f <__extendsfdf2>
c00094de:	83 c4 10             	add    esp,0x10
c00094e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094e5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094f9:	e8 5a e9 01 00       	call   c0027e58 <__muldf3>
c00094fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009501:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009505:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009509:	e8 41 f3 01 00       	call   c002884f <__extendsfdf2>
c000950e:	83 c4 10             	add    esp,0x10
c0009511:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009515:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009519:	52                   	push   edx
c000951a:	50                   	push   eax
c000951b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000951f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009523:	e8 b3 e2 01 00       	call   c00277db <__adddf3>
c0009528:	59                   	pop    ecx
c0009529:	5d                   	pop    ebp
c000952a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000952e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009532:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009536:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000953a:	e8 ec f1 01 00       	call   c002872b <__truncdfsf2>
c000953f:	83 c4 10             	add    esp,0x10
c0009542:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009545:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009549:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000954c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000954f:	e9 5a ff ff ff       	jmp    c00094ae <linear_vari_process+0x2a3>
c0009554:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009558:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000955c:	68 00 00 f0 3f       	push   0x3ff00000
c0009561:	6a 00                	push   0x0
c0009563:	e8 d4 eb 01 00       	call   c002813c <__divdf3>
c0009568:	83 c4 10             	add    esp,0x10
c000956b:	89 04 24             	mov    DWORD PTR [esp],eax
c000956e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009578:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000957c:	e8 5a e2 01 00       	call   c00277db <__adddf3>
c0009581:	83 c4 10             	add    esp,0x10
c0009584:	e9 50 fd ff ff       	jmp    c00092d9 <linear_vari_process+0xce>
c0009589:	50                   	push   eax
c000958a:	50                   	push   eax
c000958b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000958f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009593:	e8 48 f3 01 00       	call   c00288e0 <lrint>
c0009598:	83 ec 0c             	sub    esp,0xc
c000959b:	50                   	push   eax
c000959c:	e8 1a ef 01 00       	call   c00284bb <__floatsidf>
c00095a1:	83 c4 10             	add    esp,0x10
c00095a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095ac:	52                   	push   edx
c00095ad:	50                   	push   eax
c00095ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095b6:	e8 71 e8 01 00       	call   c0027e2c <__subdf3>
c00095bb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00095bf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00095c3:	83 c4 20             	add    esp,0x20
c00095c6:	6a 00                	push   0x0
c00095c8:	6a 00                	push   0x0
c00095ca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095d2:	e8 50 f1 01 00       	call   c0028727 <__ltdf2>
c00095d7:	83 c4 10             	add    esp,0x10
c00095da:	85 c0                	test   eax,eax
c00095dc:	79 1e                	jns    c00095fc <linear_vari_process+0x3f1>
c00095de:	68 00 00 f0 3f       	push   0x3ff00000
c00095e3:	6a 00                	push   0x0
c00095e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095ed:	e8 e9 e1 01 00       	call   c00277db <__adddf3>
c00095f2:	83 c4 10             	add    esp,0x10
c00095f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00095f8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00095fc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00095ff:	83 ec 10             	sub    esp,0x10
c0009602:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000960a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000960e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009612:	e8 15 e8 01 00       	call   c0027e2c <__subdf3>
c0009617:	83 c4 18             	add    esp,0x18
c000961a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000961e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009622:	52                   	push   edx
c0009623:	50                   	push   eax
c0009624:	e8 b7 f2 01 00       	call   c00288e0 <lrint>
c0009629:	83 c4 10             	add    esp,0x10
c000962c:	0f af f8             	imul   edi,eax
c000962f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009632:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009635:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009638:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000963b:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000963e:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009642:	0f 8d 13 03 00 00    	jge    c000995b <linear_vari_process+0x750>
c0009648:	83 ec 0c             	sub    esp,0xc
c000964b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000964e:	e8 68 ee 01 00       	call   c00284bb <__floatsidf>
c0009653:	83 c4 10             	add    esp,0x10
c0009656:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000965a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000965e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009662:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000966a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000966e:	e8 e5 e7 01 00       	call   c0027e58 <__muldf3>
c0009673:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000967a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000967e:	e8 38 ee 01 00       	call   c00284bb <__floatsidf>
c0009683:	83 c4 10             	add    esp,0x10
c0009686:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000968a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000968e:	52                   	push   edx
c000968f:	50                   	push   eax
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	e8 3e e1 01 00       	call   c00277db <__adddf3>
c000969d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00096a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00096a4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00096a8:	e8 0e ee 01 00       	call   c00284bb <__floatsidf>
c00096ad:	83 c4 10             	add    esp,0x10
c00096b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00096b4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00096b8:	52                   	push   edx
c00096b9:	50                   	push   eax
c00096ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c2:	e8 60 f0 01 00       	call   c0028727 <__ltdf2>
c00096c7:	83 c4 10             	add    esp,0x10
c00096ca:	85 c0                	test   eax,eax
c00096cc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096d0:	0f 89 85 02 00 00    	jns    c000995b <linear_vari_process+0x750>
c00096d6:	85 c9                	test   ecx,ecx
c00096d8:	0f 8e f5 00 00 00    	jle    c00097d3 <linear_vari_process+0x5c8>
c00096de:	83 ec 10             	sub    esp,0x10
c00096e1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00096e4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00096e7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00096eb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00096ee:	ff 30                	push   DWORD PTR [eax]
c00096f0:	e8 37 e7 01 00       	call   c0027e2c <__subdf3>
c00096f5:	83 c4 18             	add    esp,0x18
c00096f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096fc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009700:	52                   	push   edx
c0009701:	50                   	push   eax
c0009702:	e8 b9 f1 01 00       	call   c00288c0 <fabs>
c0009707:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000970b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000970f:	83 c4 10             	add    esp,0x10
c0009712:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009717:	68 23 42 92 0c       	push   0xc924223
c000971c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009720:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009724:	e8 e0 ef 01 00       	call   c0028709 <__gtdf2>
c0009729:	83 c4 10             	add    esp,0x10
c000972c:	85 c0                	test   eax,eax
c000972e:	0f 8e 9f 00 00 00    	jle    c00097d3 <linear_vari_process+0x5c8>
c0009734:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009738:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000973b:	8b 00                	mov    eax,DWORD PTR [eax]
c000973d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009741:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000974a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000974d:	e8 da e6 01 00       	call   c0027e2c <__subdf3>
c0009752:	5f                   	pop    edi
c0009753:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009757:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000975b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000975e:	e8 58 ed 01 00       	call   c00284bb <__floatsidf>
c0009763:	83 c4 10             	add    esp,0x10
c0009766:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000976a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000976e:	52                   	push   edx
c000976f:	50                   	push   eax
c0009770:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009778:	e8 db e6 01 00       	call   c0027e58 <__muldf3>
c000977d:	5d                   	pop    ebp
c000977e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009782:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009786:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009789:	e8 2d ed 01 00       	call   c00284bb <__floatsidf>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009795:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009799:	52                   	push   edx
c000979a:	50                   	push   eax
c000979b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000979f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097a3:	e8 94 e9 01 00       	call   c002813c <__divdf3>
c00097a8:	83 c4 10             	add    esp,0x10
c00097ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00097af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00097b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00097b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00097bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097c3:	e8 13 e0 01 00       	call   c00277db <__adddf3>
c00097c8:	83 c4 10             	add    esp,0x10
c00097cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00097cf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00097d3:	31 ff                	xor    edi,edi
c00097d5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00097d8:	39 f8                	cmp    eax,edi
c00097da:	0f 8e ac 00 00 00    	jle    c000988c <linear_vari_process+0x681>
c00097e0:	8b 16                	mov    edx,DWORD PTR [esi]
c00097e2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00097e5:	29 c1                	sub    ecx,eax
c00097e7:	89 c8                	mov    eax,ecx
c00097e9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00097ec:	01 f8                	add    eax,edi
c00097ee:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00097f2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00097f5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097fc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097ff:	51                   	push   ecx
c0009800:	01 f8                	add    eax,edi
c0009802:	51                   	push   ecx
c0009803:	47                   	inc    edi
c0009804:	55                   	push   ebp
c0009805:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c0009808:	e8 63 d9 01 00       	call   c0027170 <__subsf3>
c000980d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009810:	e8 3a f0 01 00       	call   c002884f <__extendsfdf2>
c0009815:	83 c4 10             	add    esp,0x10
c0009818:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000981c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009820:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009824:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009828:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000982c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009830:	e8 23 e6 01 00       	call   c0027e58 <__muldf3>
c0009835:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009838:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000983c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009840:	e8 0a f0 01 00       	call   c002884f <__extendsfdf2>
c0009845:	83 c4 10             	add    esp,0x10
c0009848:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000984c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009850:	52                   	push   edx
c0009851:	50                   	push   eax
c0009852:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009856:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000985a:	e8 7c df 01 00       	call   c00277db <__adddf3>
c000985f:	5d                   	pop    ebp
c0009860:	59                   	pop    ecx
c0009861:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009865:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009869:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000986d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009871:	e8 b5 ee 01 00       	call   c002872b <__truncdfsf2>
c0009876:	83 c4 10             	add    esp,0x10
c0009879:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000987d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009881:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009884:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009887:	e9 49 ff ff ff       	jmp    c00097d5 <linear_vari_process+0x5ca>
c000988c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009890:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009894:	68 00 00 f0 3f       	push   0x3ff00000
c0009899:	6a 00                	push   0x0
c000989b:	e8 9c e8 01 00       	call   c002813c <__divdf3>
c00098a0:	83 c4 10             	add    esp,0x10
c00098a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ab:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00098af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00098b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098bb:	e8 1b df 01 00       	call   c00277db <__adddf3>
c00098c0:	59                   	pop    ecx
c00098c1:	5f                   	pop    edi
c00098c2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00098c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00098ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d2:	e8 09 f0 01 00       	call   c00288e0 <lrint>
c00098d7:	83 ec 0c             	sub    esp,0xc
c00098da:	50                   	push   eax
c00098db:	e8 db eb 01 00       	call   c00284bb <__floatsidf>
c00098e0:	83 c4 10             	add    esp,0x10
c00098e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00098e7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00098eb:	52                   	push   edx
c00098ec:	50                   	push   eax
c00098ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098f5:	e8 32 e5 01 00       	call   c0027e2c <__subdf3>
c00098fa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098fe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009902:	83 c4 20             	add    esp,0x20
c0009905:	6a 00                	push   0x0
c0009907:	6a 00                	push   0x0
c0009909:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000990d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009911:	e8 11 ee 01 00       	call   c0028727 <__ltdf2>
c0009916:	83 c4 10             	add    esp,0x10
c0009919:	85 c0                	test   eax,eax
c000991b:	79 1e                	jns    c000993b <linear_vari_process+0x730>
c000991d:	68 00 00 f0 3f       	push   0x3ff00000
c0009922:	6a 00                	push   0x0
c0009924:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009928:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000992c:	e8 aa de 01 00       	call   c00277db <__adddf3>
c0009931:	83 c4 10             	add    esp,0x10
c0009934:	89 04 24             	mov    DWORD PTR [esp],eax
c0009937:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000993b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000993e:	83 ec 10             	sub    esp,0x10
c0009941:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009945:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009949:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000994d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009951:	e8 d6 e4 01 00       	call   c0027e2c <__subdf3>
c0009956:	e9 bc fc ff ff       	jmp    c0009617 <linear_vari_process+0x40c>
c000995b:	39 fd                	cmp    ebp,edi
c000995d:	7d 38                	jge    c0009997 <linear_vari_process+0x78c>
c000995f:	83 ec 0c             	sub    esp,0xc
c0009962:	89 f8                	mov    eax,edi
c0009964:	29 e8                	sub    eax,ebp
c0009966:	99                   	cdq    
c0009967:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000996a:	50                   	push   eax
c000996b:	e8 4b eb 01 00       	call   c00284bb <__floatsidf>
c0009970:	83 c4 10             	add    esp,0x10
c0009973:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009977:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000997b:	52                   	push   edx
c000997c:	50                   	push   eax
c000997d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009981:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009985:	e8 51 de 01 00       	call   c00277db <__adddf3>
c000998a:	83 c4 10             	add    esp,0x10
c000998d:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009990:	89 04 24             	mov    DWORD PTR [esp],eax
c0009993:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009997:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000999b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000999e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00099a2:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00099a5:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00099a8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00099ab:	85 c0                	test   eax,eax
c00099ad:	7f 29                	jg     c00099d8 <linear_vari_process+0x7cd>
c00099af:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00099b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00099bb:	89 01                	mov    DWORD PTR [ecx],eax
c00099bd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00099c0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00099c3:	99                   	cdq    
c00099c4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00099c7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00099ca:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00099cd:	99                   	cdq    
c00099ce:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00099d1:	31 d2                	xor    edx,edx
c00099d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00099d6:	eb 1d                	jmp    c00099f5 <linear_vari_process+0x7ea>
c00099d8:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00099db:	31 d2                	xor    edx,edx
c00099dd:	29 c8                	sub    eax,ecx
c00099df:	c1 e0 02             	shl    eax,0x2
c00099e2:	39 d1                	cmp    ecx,edx
c00099e4:	7e c9                	jle    c00099af <linear_vari_process+0x7a4>
c00099e6:	8b 3e                	mov    edi,DWORD PTR [esi]
c00099e8:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00099eb:	83 c0 04             	add    eax,0x4
c00099ee:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00099f2:	42                   	inc    edx
c00099f3:	eb ed                	jmp    c00099e2 <linear_vari_process+0x7d7>
c00099f5:	83 c4 3c             	add    esp,0x3c
c00099f8:	89 d0                	mov    eax,edx
c00099fa:	5b                   	pop    ebx
c00099fb:	5e                   	pop    esi
c00099fc:	5f                   	pop    edi
c00099fd:	5d                   	pop    ebp
c00099fe:	c3                   	ret    

c00099ff <linear_reset>:
c00099ff:	83 ec 0c             	sub    esp,0xc
c0009a02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009a06:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0009a09:	85 c0                	test   eax,eax
c0009a0b:	74 20                	je     c0009a2d <linear_reset+0x2e>
c0009a0d:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009a10:	83 c0 1c             	add    eax,0x1c
c0009a13:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0009a16:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009a1d:	c1 e2 02             	shl    edx,0x2
c0009a20:	51                   	push   ecx
c0009a21:	52                   	push   edx
c0009a22:	6a 00                	push   0x0
c0009a24:	50                   	push   eax
c0009a25:	e8 26 6d ff ff       	call   c0000750 <memset>
c0009a2a:	83 c4 10             	add    esp,0x10
c0009a2d:	83 c4 0c             	add    esp,0xc
c0009a30:	c3                   	ret    

c0009a31 <linear_get_name>:
c0009a31:	31 c0                	xor    eax,eax
c0009a33:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009a38:	75 05                	jne    c0009a3f <linear_get_name+0xe>
c0009a3a:	b8 e0 a0 02 c0       	mov    eax,0xc002a0e0
c0009a3f:	c3                   	ret    

c0009a40 <linear_get_description>:
c0009a40:	31 c0                	xor    eax,eax
c0009a42:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009a47:	75 05                	jne    c0009a4e <linear_get_description+0xe>
c0009a49:	b8 f4 a0 02 c0       	mov    eax,0xc002a0f4
c0009a4e:	c3                   	ret    

c0009a4f <linear_set_converter>:
c0009a4f:	53                   	push   ebx
c0009a50:	b8 0a 00 00 00       	mov    eax,0xa
c0009a55:	83 ec 08             	sub    esp,0x8
c0009a58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009a5c:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009a61:	75 6e                	jne    c0009ad1 <linear_set_converter+0x82>
c0009a63:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009a66:	85 c0                	test   eax,eax
c0009a68:	74 13                	je     c0009a7d <linear_set_converter+0x2e>
c0009a6a:	83 ec 0c             	sub    esp,0xc
c0009a6d:	50                   	push   eax
c0009a6e:	e8 f6 5d 00 00       	call   c000f869 <free>
c0009a73:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009a7a:	83 c4 10             	add    esp,0x10
c0009a7d:	50                   	push   eax
c0009a7e:	50                   	push   eax
c0009a7f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009a82:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009a89:	50                   	push   eax
c0009a8a:	6a 01                	push   0x1
c0009a8c:	e8 f8 5d 00 00       	call   c000f889 <calloc>
c0009a91:	83 c4 10             	add    esp,0x10
c0009a94:	89 c2                	mov    edx,eax
c0009a96:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009a99:	85 d2                	test   edx,edx
c0009a9b:	b8 01 00 00 00       	mov    eax,0x1
c0009aa0:	74 2f                	je     c0009ad1 <linear_set_converter+0x82>
c0009aa2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009aa5:	83 ec 0c             	sub    esp,0xc
c0009aa8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009aab:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009ab1:	c7 43 24 0b 92 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000920b
c0009ab8:	c7 43 20 0b 92 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000920b
c0009abf:	c7 43 28 ff 99 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00099ff
c0009ac6:	53                   	push   ebx
c0009ac7:	e8 33 ff ff ff       	call   c00099ff <linear_reset>
c0009acc:	83 c4 10             	add    esp,0x10
c0009acf:	31 c0                	xor    eax,eax
c0009ad1:	83 c4 08             	add    esp,0x8
c0009ad4:	5b                   	pop    ebx
c0009ad5:	c3                   	ret    

c0009ad6 <int_to_fp>:
c0009ad6:	c1 e0 0c             	shl    eax,0xc
c0009ad9:	c3                   	ret    

c0009ada <fp_to_int>:
c0009ada:	c1 f8 0c             	sar    eax,0xc
c0009add:	c3                   	ret    

c0009ade <fp_fraction_part>:
c0009ade:	25 ff 0f 00 00       	and    eax,0xfff
c0009ae3:	c3                   	ret    

c0009ae4 <fp_to_double>:
c0009ae4:	83 ec 1c             	sub    esp,0x1c
c0009ae7:	e8 f2 ff ff ff       	call   c0009ade <fp_fraction_part>
c0009aec:	83 ec 0c             	sub    esp,0xc
c0009aef:	50                   	push   eax
c0009af0:	e8 c6 e9 01 00       	call   c00284bb <__floatsidf>
c0009af5:	83 c4 10             	add    esp,0x10
c0009af8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009afc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009b00:	68 00 00 30 3f       	push   0x3f300000
c0009b05:	6a 00                	push   0x0
c0009b07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b0f:	e8 44 e3 01 00       	call   c0027e58 <__muldf3>
c0009b14:	83 c4 2c             	add    esp,0x2c
c0009b17:	c3                   	ret    

c0009b18 <calc_output_single>:
c0009b18:	55                   	push   ebp
c0009b19:	57                   	push   edi
c0009b1a:	56                   	push   esi
c0009b1b:	89 c6                	mov    esi,eax
c0009b1d:	53                   	push   ebx
c0009b1e:	89 d3                	mov    ebx,edx
c0009b20:	83 ec 4c             	sub    esp,0x4c
c0009b23:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009b27:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009b2a:	e8 a7 ff ff ff       	call   c0009ad6 <int_to_fp>
c0009b2f:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009b32:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b36:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009b3a:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009b3e:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009b41:	99                   	cdq    
c0009b42:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009b4a:	f7 fb                	idiv   ebx
c0009b4c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009b54:	89 da                	mov    edx,ebx
c0009b56:	0f af d0             	imul   edx,eax
c0009b59:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009b61:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009b65:	29 c2                	sub    edx,eax
c0009b67:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b6e:	83 c5 04             	add    ebp,0x4
c0009b71:	e8 6e ff ff ff       	call   c0009ae4 <fp_to_double>
c0009b76:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009b7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b82:	e8 53 ff ff ff       	call   c0009ada <fp_to_int>
c0009b87:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009b8a:	52                   	push   edx
c0009b8b:	52                   	push   edx
c0009b8c:	51                   	push   ecx
c0009b8d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009b91:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009b95:	e8 d6 d5 01 00       	call   c0027170 <__subsf3>
c0009b9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b9d:	e8 ad ec 01 00       	call   c002884f <__extendsfdf2>
c0009ba2:	83 c4 10             	add    esp,0x10
c0009ba5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009ba9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009bad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009bb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009bb5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bb9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bbd:	e8 96 e2 01 00       	call   c0027e58 <__muldf3>
c0009bc2:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009bc6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bca:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009bcd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bd1:	e8 79 ec 01 00       	call   c002884f <__extendsfdf2>
c0009bd6:	83 c4 10             	add    esp,0x10
c0009bd9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009bdd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009be1:	52                   	push   edx
c0009be2:	50                   	push   eax
c0009be3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009be7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009beb:	e8 eb db 01 00       	call   c00277db <__adddf3>
c0009bf0:	59                   	pop    ecx
c0009bf1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009bf5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009bf9:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009bff:	e8 4b ec 01 00       	call   c002884f <__extendsfdf2>
c0009c04:	83 c4 10             	add    esp,0x10
c0009c07:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c0b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c0f:	52                   	push   edx
c0009c10:	50                   	push   eax
c0009c11:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c19:	e8 3a e2 01 00       	call   c0027e58 <__muldf3>
c0009c1e:	83 c4 10             	add    esp,0x10
c0009c21:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c25:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c29:	52                   	push   edx
c0009c2a:	50                   	push   eax
c0009c2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c33:	e8 a3 db 01 00       	call   c00277db <__adddf3>
c0009c38:	83 c4 10             	add    esp,0x10
c0009c3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c43:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009c47:	0f 89 1d ff ff ff    	jns    c0009b6a <calc_output_single+0x52>
c0009c4d:	89 d9                	mov    ecx,ebx
c0009c4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009c53:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009c57:	89 dd                	mov    ebp,ebx
c0009c59:	29 c8                	sub    eax,ecx
c0009c5b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009c63:	99                   	cdq    
c0009c64:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c6c:	f7 fb                	idiv   ebx
c0009c6e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009c72:	0f af e8             	imul   ebp,eax
c0009c75:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009c79:	01 cd                	add    ebp,ecx
c0009c7b:	8d 34 86             	lea    esi,[esi+eax*4]
c0009c7e:	89 e8                	mov    eax,ebp
c0009c80:	83 ee 04             	sub    esi,0x4
c0009c83:	e8 5c fe ff ff       	call   c0009ae4 <fp_to_double>
c0009c88:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009c90:	89 e8                	mov    eax,ebp
c0009c92:	29 dd                	sub    ebp,ebx
c0009c94:	e8 41 fe ff ff       	call   c0009ada <fp_to_int>
c0009c99:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009c9c:	52                   	push   edx
c0009c9d:	52                   	push   edx
c0009c9e:	51                   	push   ecx
c0009c9f:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009ca3:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009ca7:	e8 c4 d4 01 00       	call   c0027170 <__subsf3>
c0009cac:	89 04 24             	mov    DWORD PTR [esp],eax
c0009caf:	e8 9b eb 01 00       	call   c002884f <__extendsfdf2>
c0009cb4:	83 c4 10             	add    esp,0x10
c0009cb7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cbb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ccb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ccf:	e8 84 e1 01 00       	call   c0027e58 <__muldf3>
c0009cd4:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009cd8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cdc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009cdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ce3:	e8 67 eb 01 00       	call   c002884f <__extendsfdf2>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf3:	52                   	push   edx
c0009cf4:	50                   	push   eax
c0009cf5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009cf9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009cfd:	e8 d9 da 01 00       	call   c00277db <__adddf3>
c0009d02:	59                   	pop    ecx
c0009d03:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009d07:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009d0b:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009d11:	e8 39 eb 01 00       	call   c002884f <__extendsfdf2>
c0009d16:	83 c4 10             	add    esp,0x10
c0009d19:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d1d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d21:	52                   	push   edx
c0009d22:	50                   	push   eax
c0009d23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009d27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009d2b:	e8 28 e1 01 00       	call   c0027e58 <__muldf3>
c0009d30:	83 c4 10             	add    esp,0x10
c0009d33:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d37:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d3b:	52                   	push   edx
c0009d3c:	50                   	push   eax
c0009d3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d45:	e8 91 da 01 00       	call   c00277db <__adddf3>
c0009d4a:	83 c4 10             	add    esp,0x10
c0009d4d:	85 ed                	test   ebp,ebp
c0009d4f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d53:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d57:	0f 8f 21 ff ff ff    	jg     c0009c7e <calc_output_single+0x166>
c0009d5d:	52                   	push   edx
c0009d5e:	50                   	push   eax
c0009d5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d67:	e8 6f da 01 00       	call   c00277db <__adddf3>
c0009d6c:	83 c4 5c             	add    esp,0x5c
c0009d6f:	5b                   	pop    ebx
c0009d70:	5e                   	pop    esi
c0009d71:	5f                   	pop    edi
c0009d72:	5d                   	pop    ebp
c0009d73:	c3                   	ret    

c0009d74 <calc_output_stereo>:
c0009d74:	55                   	push   ebp
c0009d75:	89 cd                	mov    ebp,ecx
c0009d77:	57                   	push   edi
c0009d78:	56                   	push   esi
c0009d79:	53                   	push   ebx
c0009d7a:	89 c3                	mov    ebx,eax
c0009d7c:	83 ec 6c             	sub    esp,0x6c
c0009d7f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d83:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009d8a:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009d91:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d95:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d99:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009d9c:	e8 35 fd ff ff       	call   c0009ad6 <int_to_fp>
c0009da1:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009da9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dad:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009db5:	29 c8                	sub    eax,ecx
c0009db7:	99                   	cdq    
c0009db8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009dbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009dc0:	0f af d0             	imul   edx,eax
c0009dc3:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009dc6:	31 d2                	xor    edx,edx
c0009dc8:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009dcc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009dd0:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009dd3:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009dd7:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009dda:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009dde:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009de2:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009de5:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009dea:	29 c1                	sub    ecx,eax
c0009dec:	31 c0                	xor    eax,eax
c0009dee:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009df1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009df5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009df9:	83 c7 08             	add    edi,0x8
c0009dfc:	e8 e3 fc ff ff       	call   c0009ae4 <fp_to_double>
c0009e01:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009e05:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009e09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e0d:	e8 c8 fc ff ff       	call   c0009ada <fp_to_int>
c0009e12:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009e15:	52                   	push   edx
c0009e16:	52                   	push   edx
c0009e17:	51                   	push   ecx
c0009e18:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009e1c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009e20:	e8 4b d3 01 00       	call   c0027170 <__subsf3>
c0009e25:	89 04 24             	mov    DWORD PTR [esp],eax
c0009e28:	e8 22 ea 01 00       	call   c002884f <__extendsfdf2>
c0009e2d:	83 c4 10             	add    esp,0x10
c0009e30:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009e34:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009e38:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009e3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009e40:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009e44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009e48:	e8 0b e0 01 00       	call   c0027e58 <__muldf3>
c0009e4d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009e51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009e55:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e58:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009e5c:	e8 ee e9 01 00       	call   c002884f <__extendsfdf2>
c0009e61:	83 c4 10             	add    esp,0x10
c0009e64:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009e68:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009e6c:	52                   	push   edx
c0009e6d:	50                   	push   eax
c0009e6e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009e72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009e76:	e8 60 d9 01 00       	call   c00277db <__adddf3>
c0009e7b:	59                   	pop    ecx
c0009e7c:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009e80:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009e84:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009e8a:	e8 c0 e9 01 00       	call   c002884f <__extendsfdf2>
c0009e8f:	83 c4 10             	add    esp,0x10
c0009e92:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009e96:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009e9a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009e9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ea2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ea6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009eaa:	e8 a9 df 01 00       	call   c0027e58 <__muldf3>
c0009eaf:	83 c4 10             	add    esp,0x10
c0009eb2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009eb6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009eba:	52                   	push   edx
c0009ebb:	50                   	push   eax
c0009ebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec4:	e8 12 d9 01 00       	call   c00277db <__adddf3>
c0009ec9:	59                   	pop    ecx
c0009eca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ece:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009ed2:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ed8:	e8 72 e9 01 00       	call   c002884f <__extendsfdf2>
c0009edd:	83 c4 10             	add    esp,0x10
c0009ee0:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ee4:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ee8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009eec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ef0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ef4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ef8:	e8 5b df 01 00       	call   c0027e58 <__muldf3>
c0009efd:	83 c4 10             	add    esp,0x10
c0009f00:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009f04:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009f08:	52                   	push   edx
c0009f09:	50                   	push   eax
c0009f0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f12:	e8 c4 d8 01 00       	call   c00277db <__adddf3>
c0009f17:	83 c4 10             	add    esp,0x10
c0009f1a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f1e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009f22:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009f26:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009f2a:	0f 89 c5 fe ff ff    	jns    c0009df5 <calc_output_stereo+0x81>
c0009f30:	29 e9                	sub    ecx,ebp
c0009f32:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009f3a:	29 c8                	sub    eax,ecx
c0009f3c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009f44:	99                   	cdq    
c0009f45:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f49:	31 d2                	xor    edx,edx
c0009f4b:	0f af f8             	imul   edi,eax
c0009f4e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f52:	40                   	inc    eax
c0009f53:	01 cf                	add    edi,ecx
c0009f55:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009f5a:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009f5e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009f66:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009f69:	31 c0                	xor    eax,eax
c0009f6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f6f:	89 f8                	mov    eax,edi
c0009f71:	83 eb 08             	sub    ebx,0x8
c0009f74:	e8 6b fb ff ff       	call   c0009ae4 <fp_to_double>
c0009f79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f81:	89 f8                	mov    eax,edi
c0009f83:	e8 52 fb ff ff       	call   c0009ada <fp_to_int>
c0009f88:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009f8b:	52                   	push   edx
c0009f8c:	52                   	push   edx
c0009f8d:	55                   	push   ebp
c0009f8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009f92:	e8 d9 d1 01 00       	call   c0027170 <__subsf3>
c0009f97:	89 04 24             	mov    DWORD PTR [esp],eax
c0009f9a:	e8 b0 e8 01 00       	call   c002884f <__extendsfdf2>
c0009f9f:	83 c4 10             	add    esp,0x10
c0009fa2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fa6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009faa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009fae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009fb2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009fb6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009fba:	e8 99 de 01 00       	call   c0027e58 <__muldf3>
c0009fbf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009fc2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009fc6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009fca:	e8 80 e8 01 00       	call   c002884f <__extendsfdf2>
c0009fcf:	83 c4 10             	add    esp,0x10
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	52                   	push   edx
c0009fdb:	50                   	push   eax
c0009fdc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009fe0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009fe4:	e8 f2 d7 01 00       	call   c00277db <__adddf3>
c0009fe9:	59                   	pop    ecx
c0009fea:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009fee:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009ff2:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009ff8:	e8 52 e8 01 00       	call   c002884f <__extendsfdf2>
c0009ffd:	83 c4 10             	add    esp,0x10
c000a000:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a004:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a008:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a00c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a010:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a014:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a018:	e8 3b de 01 00       	call   c0027e58 <__muldf3>
c000a01d:	83 c4 10             	add    esp,0x10
c000a020:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a024:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a028:	52                   	push   edx
c000a029:	50                   	push   eax
c000a02a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a02e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a032:	e8 a4 d7 01 00       	call   c00277db <__adddf3>
c000a037:	5d                   	pop    ebp
c000a038:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a03c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a040:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a046:	e8 04 e8 01 00       	call   c002884f <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a052:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a056:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a05a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a05e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a062:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a066:	e8 ed dd 01 00       	call   c0027e58 <__muldf3>
c000a06b:	83 c4 10             	add    esp,0x10
c000a06e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a072:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a076:	52                   	push   edx
c000a077:	50                   	push   eax
c000a078:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a07c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a080:	e8 56 d7 01 00       	call   c00277db <__adddf3>
c000a085:	83 c4 10             	add    esp,0x10
c000a088:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c000a08c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a090:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a094:	85 ff                	test   edi,edi
c000a096:	0f 8f d3 fe ff ff    	jg     c0009f6f <calc_output_stereo+0x1fb>
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ac:	e8 2a d7 01 00       	call   c00277db <__adddf3>
c000a0b1:	83 c4 10             	add    esp,0x10
c000a0b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a0b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a0bc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0cc:	e8 87 dd 01 00       	call   c0027e58 <__muldf3>
c000a0d1:	59                   	pop    ecx
c000a0d2:	5b                   	pop    ebx
c000a0d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a0d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a0db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a0e3:	e8 43 e6 01 00       	call   c002872b <__truncdfsf2>
c000a0e8:	83 c4 10             	add    esp,0x10
c000a0eb:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c000a0f2:	89 03                	mov    DWORD PTR [ebx],eax
c000a0f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a100:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a104:	e8 d2 d6 01 00       	call   c00277db <__adddf3>
c000a109:	83 c4 10             	add    esp,0x10
c000a10c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a110:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a114:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a118:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a11c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a120:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a124:	e8 2f dd 01 00       	call   c0027e58 <__muldf3>
c000a129:	5e                   	pop    esi
c000a12a:	5f                   	pop    edi
c000a12b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a12f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a133:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a137:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a13b:	e8 eb e5 01 00       	call   c002872b <__truncdfsf2>
c000a140:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c000a147:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a14a:	83 c4 7c             	add    esp,0x7c
c000a14d:	5b                   	pop    ebx
c000a14e:	5e                   	pop    esi
c000a14f:	5f                   	pop    edi
c000a150:	5d                   	pop    ebp
c000a151:	c3                   	ret    

c000a152 <calc_output_quad>:
c000a152:	55                   	push   ebp
c000a153:	57                   	push   edi
c000a154:	56                   	push   esi
c000a155:	89 c6                	mov    esi,eax
c000a157:	53                   	push   ebx
c000a158:	83 ec 7c             	sub    esp,0x7c
c000a15b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a15f:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000a163:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000a16a:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000a171:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a175:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a179:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000a17c:	e8 55 f9 ff ff       	call   c0009ad6 <int_to_fp>
c000a181:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000a184:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000a187:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a18b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a18f:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a193:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000a197:	99                   	cdq    
c000a198:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000a19c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1a0:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c000a1a3:	31 d2                	xor    edx,edx
c000a1a5:	0f af d8             	imul   ebx,eax
c000a1a8:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000a1b0:	0f af c7             	imul   eax,edi
c000a1b3:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c000a1b7:	29 c1                	sub    ecx,eax
c000a1b9:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000a1c1:	31 c0                	xor    eax,eax
c000a1c3:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c000a1c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a1ca:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a1ce:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a1d2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a1d6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a1da:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a1de:	89 d8                	mov    eax,ebx
c000a1e0:	83 c7 10             	add    edi,0x10
c000a1e3:	e8 fc f8 ff ff       	call   c0009ae4 <fp_to_double>
c000a1e8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1f0:	89 d8                	mov    eax,ebx
c000a1f2:	e8 e3 f8 ff ff       	call   c0009ada <fp_to_int>
c000a1f7:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c000a1fb:	52                   	push   edx
c000a1fc:	52                   	push   edx
c000a1fd:	51                   	push   ecx
c000a1fe:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a202:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a206:	e8 65 cf 01 00       	call   c0027170 <__subsf3>
c000a20b:	89 04 24             	mov    DWORD PTR [esp],eax
c000a20e:	e8 3c e6 01 00       	call   c002884f <__extendsfdf2>
c000a213:	83 c4 10             	add    esp,0x10
c000a216:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a21a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a21e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a226:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a22a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a22e:	e8 25 dc 01 00       	call   c0027e58 <__muldf3>
c000a233:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a237:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a23b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a23e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a242:	e8 08 e6 01 00       	call   c002884f <__extendsfdf2>
c000a247:	83 c4 10             	add    esp,0x10
c000a24a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a24e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a252:	52                   	push   edx
c000a253:	50                   	push   eax
c000a254:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a258:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a25c:	e8 7a d5 01 00       	call   c00277db <__adddf3>
c000a261:	59                   	pop    ecx
c000a262:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a266:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a26a:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a270:	e8 da e5 01 00       	call   c002884f <__extendsfdf2>
c000a275:	83 c4 10             	add    esp,0x10
c000a278:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a27c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a288:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a28c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a290:	e8 c3 db 01 00       	call   c0027e58 <__muldf3>
c000a295:	83 c4 10             	add    esp,0x10
c000a298:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a0:	52                   	push   edx
c000a2a1:	50                   	push   eax
c000a2a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a2a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a2aa:	e8 2c d5 01 00       	call   c00277db <__adddf3>
c000a2af:	59                   	pop    ecx
c000a2b0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a2b4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a2b8:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a2be:	e8 8c e5 01 00       	call   c002884f <__extendsfdf2>
c000a2c3:	83 c4 10             	add    esp,0x10
c000a2c6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ca:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2de:	e8 75 db 01 00       	call   c0027e58 <__muldf3>
c000a2e3:	83 c4 10             	add    esp,0x10
c000a2e6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ea:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ee:	52                   	push   edx
c000a2ef:	50                   	push   eax
c000a2f0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a2f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a2f8:	e8 de d4 01 00       	call   c00277db <__adddf3>
c000a2fd:	59                   	pop    ecx
c000a2fe:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a302:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a306:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a30c:	e8 3e e5 01 00       	call   c002884f <__extendsfdf2>
c000a311:	83 c4 10             	add    esp,0x10
c000a314:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a318:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a31c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a320:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a324:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a328:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a32c:	e8 27 db 01 00       	call   c0027e58 <__muldf3>
c000a331:	83 c4 10             	add    esp,0x10
c000a334:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a338:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33c:	52                   	push   edx
c000a33d:	50                   	push   eax
c000a33e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a342:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a346:	e8 90 d4 01 00       	call   c00277db <__adddf3>
c000a34b:	59                   	pop    ecx
c000a34c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a350:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a354:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a35a:	e8 f0 e4 01 00       	call   c002884f <__extendsfdf2>
c000a35f:	83 c4 10             	add    esp,0x10
c000a362:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a366:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a36a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a36e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a372:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a376:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a37a:	e8 d9 da 01 00       	call   c0027e58 <__muldf3>
c000a37f:	83 c4 10             	add    esp,0x10
c000a382:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a386:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a38a:	52                   	push   edx
c000a38b:	50                   	push   eax
c000a38c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a390:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a394:	e8 42 d4 01 00       	call   c00277db <__adddf3>
c000a399:	83 c4 10             	add    esp,0x10
c000a39c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a3a0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a3a4:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3a8:	0f 89 30 fe ff ff    	jns    c000a1de <calc_output_quad+0x8c>
c000a3ae:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a3b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a3b6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a3ba:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a3be:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a3c6:	29 c8                	sub    eax,ecx
c000a3c8:	99                   	cdq    
c000a3c9:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a3cd:	31 d2                	xor    edx,edx
c000a3cf:	0f af d8             	imul   ebx,eax
c000a3d2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a3d6:	40                   	inc    eax
c000a3d7:	01 cb                	add    ebx,ecx
c000a3d9:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a3de:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a3e2:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a3e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a3ea:	8d 34 86             	lea    esi,[esi+eax*4]
c000a3ed:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a3f5:	31 c0                	xor    eax,eax
c000a3f7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a3fb:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a3ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a403:	89 d8                	mov    eax,ebx
c000a405:	83 ee 10             	sub    esi,0x10
c000a408:	e8 d7 f6 ff ff       	call   c0009ae4 <fp_to_double>
c000a40d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a411:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a415:	89 d8                	mov    eax,ebx
c000a417:	e8 be f6 ff ff       	call   c0009ada <fp_to_int>
c000a41c:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a420:	52                   	push   edx
c000a421:	52                   	push   edx
c000a422:	57                   	push   edi
c000a423:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a427:	e8 44 cd 01 00       	call   c0027170 <__subsf3>
c000a42c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a42f:	e8 1b e4 01 00       	call   c002884f <__extendsfdf2>
c000a434:	83 c4 10             	add    esp,0x10
c000a437:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a43b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a43f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a443:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a447:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a44b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a44f:	e8 04 da 01 00       	call   c0027e58 <__muldf3>
c000a454:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a457:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a45b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a45f:	e8 eb e3 01 00       	call   c002884f <__extendsfdf2>
c000a464:	83 c4 10             	add    esp,0x10
c000a467:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a46b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a46f:	52                   	push   edx
c000a470:	50                   	push   eax
c000a471:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a475:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a479:	e8 5d d3 01 00       	call   c00277db <__adddf3>
c000a47e:	59                   	pop    ecx
c000a47f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a483:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a487:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a48d:	e8 bd e3 01 00       	call   c002884f <__extendsfdf2>
c000a492:	83 c4 10             	add    esp,0x10
c000a495:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a499:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a49d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4a5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4ad:	e8 a6 d9 01 00       	call   c0027e58 <__muldf3>
c000a4b2:	83 c4 10             	add    esp,0x10
c000a4b5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4b9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4bd:	52                   	push   edx
c000a4be:	50                   	push   eax
c000a4bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a4c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a4c7:	e8 0f d3 01 00       	call   c00277db <__adddf3>
c000a4cc:	5f                   	pop    edi
c000a4cd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a4d1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a4d5:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a4db:	e8 6f e3 01 00       	call   c002884f <__extendsfdf2>
c000a4e0:	83 c4 10             	add    esp,0x10
c000a4e3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4e7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4fb:	e8 58 d9 01 00       	call   c0027e58 <__muldf3>
c000a500:	83 c4 10             	add    esp,0x10
c000a503:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a507:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a50b:	52                   	push   edx
c000a50c:	50                   	push   eax
c000a50d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a511:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a515:	e8 c1 d2 01 00       	call   c00277db <__adddf3>
c000a51a:	59                   	pop    ecx
c000a51b:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a51f:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a523:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a529:	e8 21 e3 01 00       	call   c002884f <__extendsfdf2>
c000a52e:	83 c4 10             	add    esp,0x10
c000a531:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a535:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a539:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a53d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a541:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a545:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a549:	e8 0a d9 01 00       	call   c0027e58 <__muldf3>
c000a54e:	83 c4 10             	add    esp,0x10
c000a551:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a555:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a559:	52                   	push   edx
c000a55a:	50                   	push   eax
c000a55b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a55f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a563:	e8 73 d2 01 00       	call   c00277db <__adddf3>
c000a568:	5f                   	pop    edi
c000a569:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a56d:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a571:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a577:	e8 d3 e2 01 00       	call   c002884f <__extendsfdf2>
c000a57c:	83 c4 10             	add    esp,0x10
c000a57f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a583:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a58b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a58f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a593:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a597:	e8 bc d8 01 00       	call   c0027e58 <__muldf3>
c000a59c:	83 c4 10             	add    esp,0x10
c000a59f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5a3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a7:	52                   	push   edx
c000a5a8:	50                   	push   eax
c000a5a9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a5ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a5b1:	e8 25 d2 01 00       	call   c00277db <__adddf3>
c000a5b6:	83 c4 10             	add    esp,0x10
c000a5b9:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a5bd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a5c1:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a5c5:	85 db                	test   ebx,ebx
c000a5c7:	0f 8f 36 fe ff ff    	jg     c000a403 <calc_output_quad+0x2b1>
c000a5cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a5dd:	e8 f9 d1 01 00       	call   c00277db <__adddf3>
c000a5e2:	83 c4 10             	add    esp,0x10
c000a5e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a5e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a5ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5fd:	e8 56 d8 01 00       	call   c0027e58 <__muldf3>
c000a602:	59                   	pop    ecx
c000a603:	5b                   	pop    ebx
c000a604:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a608:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a60c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a610:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a614:	e8 12 e1 01 00       	call   c002872b <__truncdfsf2>
c000a619:	83 c4 10             	add    esp,0x10
c000a61c:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a623:	89 06                	mov    DWORD PTR [esi],eax
c000a625:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a629:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a62d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a631:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a635:	e8 a1 d1 01 00       	call   c00277db <__adddf3>
c000a63a:	83 c4 10             	add    esp,0x10
c000a63d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a641:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a655:	e8 fe d7 01 00       	call   c0027e58 <__muldf3>
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a660:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a664:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a668:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a66c:	e8 ba e0 01 00       	call   c002872b <__truncdfsf2>
c000a671:	83 c4 10             	add    esp,0x10
c000a674:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a67b:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a67e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a682:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a686:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a68a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a68e:	e8 48 d1 01 00       	call   c00277db <__adddf3>
c000a693:	83 c4 10             	add    esp,0x10
c000a696:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a69a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a69e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ae:	e8 a5 d7 01 00       	call   c0027e58 <__muldf3>
c000a6b3:	5d                   	pop    ebp
c000a6b4:	59                   	pop    ecx
c000a6b5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a6b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a6bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6c5:	e8 61 e0 01 00       	call   c002872b <__truncdfsf2>
c000a6ca:	83 c4 10             	add    esp,0x10
c000a6cd:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a6d4:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a6d7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6e7:	e8 ef d0 01 00       	call   c00277db <__adddf3>
c000a6ec:	83 c4 10             	add    esp,0x10
c000a6ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a6f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a707:	e8 4c d7 01 00       	call   c0027e58 <__muldf3>
c000a70c:	5b                   	pop    ebx
c000a70d:	5e                   	pop    esi
c000a70e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a712:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a716:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a71a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a71e:	e8 08 e0 01 00       	call   c002872b <__truncdfsf2>
c000a723:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a72a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a72d:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a733:	5b                   	pop    ebx
c000a734:	5e                   	pop    esi
c000a735:	5f                   	pop    edi
c000a736:	5d                   	pop    ebp
c000a737:	c3                   	ret    

c000a738 <calc_output_hex>:
c000a738:	55                   	push   ebp
c000a739:	89 cd                	mov    ebp,ecx
c000a73b:	57                   	push   edi
c000a73c:	56                   	push   esi
c000a73d:	53                   	push   ebx
c000a73e:	89 c3                	mov    ebx,eax
c000a740:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a746:	89 14 24             	mov    DWORD PTR [esp],edx
c000a749:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a750:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a757:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a75b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a75f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a762:	e8 6f f3 ff ff       	call   c0009ad6 <int_to_fp>
c000a767:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a76a:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a76e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a771:	29 c8                	sub    eax,ecx
c000a773:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a777:	99                   	cdq    
c000a778:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a780:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a783:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a78b:	0f af f8             	imul   edi,eax
c000a78e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a791:	01 cf                	add    edi,ecx
c000a793:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a797:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a79a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a79e:	0f af c2             	imul   eax,edx
c000a7a1:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a7a5:	29 c1                	sub    ecx,eax
c000a7a7:	31 d2                	xor    edx,edx
c000a7a9:	31 c0                	xor    eax,eax
c000a7ab:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a7ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a7b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a7b6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a7ba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a7be:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a7c2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a7c6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a7ca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a7ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a7d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a7d6:	89 f8                	mov    eax,edi
c000a7d8:	e8 07 f3 ff ff       	call   c0009ae4 <fp_to_double>
c000a7dd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7e5:	89 f8                	mov    eax,edi
c000a7e7:	e8 ee f2 ff ff       	call   c0009ada <fp_to_int>
c000a7ec:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a7f0:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a7f3:	52                   	push   edx
c000a7f4:	52                   	push   edx
c000a7f5:	51                   	push   ecx
c000a7f6:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a7fa:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a801:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a805:	e8 66 c9 01 00       	call   c0027170 <__subsf3>
c000a80a:	89 04 24             	mov    DWORD PTR [esp],eax
c000a80d:	e8 3d e0 01 00       	call   c002884f <__extendsfdf2>
c000a812:	83 c4 10             	add    esp,0x10
c000a815:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a819:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a81d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a825:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a829:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a82d:	e8 26 d6 01 00       	call   c0027e58 <__muldf3>
c000a832:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a836:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a83a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a83d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a841:	e8 09 e0 01 00       	call   c002884f <__extendsfdf2>
c000a846:	83 c4 10             	add    esp,0x10
c000a849:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a84d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a851:	52                   	push   edx
c000a852:	50                   	push   eax
c000a853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a857:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a85b:	e8 7b cf 01 00       	call   c00277db <__adddf3>
c000a860:	59                   	pop    ecx
c000a861:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a865:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a869:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a86f:	e8 db df 01 00       	call   c002884f <__extendsfdf2>
c000a874:	83 c4 10             	add    esp,0x10
c000a877:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a87b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a87f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a883:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a887:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a88b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a88f:	e8 c4 d5 01 00       	call   c0027e58 <__muldf3>
c000a894:	83 c4 10             	add    esp,0x10
c000a897:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a89b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a89f:	52                   	push   edx
c000a8a0:	50                   	push   eax
c000a8a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8a9:	e8 2d cf 01 00       	call   c00277db <__adddf3>
c000a8ae:	59                   	pop    ecx
c000a8af:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a8b3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a8b7:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a8bd:	e8 8d df 01 00       	call   c002884f <__extendsfdf2>
c000a8c2:	83 c4 10             	add    esp,0x10
c000a8c5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a8c9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8d5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a8d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a8dd:	e8 76 d5 01 00       	call   c0027e58 <__muldf3>
c000a8e2:	83 c4 10             	add    esp,0x10
c000a8e5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a8e9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a8ed:	52                   	push   edx
c000a8ee:	50                   	push   eax
c000a8ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a8f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a8f7:	e8 df ce 01 00       	call   c00277db <__adddf3>
c000a8fc:	59                   	pop    ecx
c000a8fd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a901:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a905:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a90b:	e8 3f df 01 00       	call   c002884f <__extendsfdf2>
c000a910:	83 c4 10             	add    esp,0x10
c000a913:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a917:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a91b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a923:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a927:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a92b:	e8 28 d5 01 00       	call   c0027e58 <__muldf3>
c000a930:	83 c4 10             	add    esp,0x10
c000a933:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a937:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a93b:	52                   	push   edx
c000a93c:	50                   	push   eax
c000a93d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a941:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a945:	e8 91 ce 01 00       	call   c00277db <__adddf3>
c000a94a:	59                   	pop    ecx
c000a94b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a94f:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a953:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a959:	e8 f1 de 01 00       	call   c002884f <__extendsfdf2>
c000a95e:	83 c4 10             	add    esp,0x10
c000a961:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a965:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a969:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a971:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a975:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a979:	e8 da d4 01 00       	call   c0027e58 <__muldf3>
c000a97e:	83 c4 10             	add    esp,0x10
c000a981:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a985:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a989:	52                   	push   edx
c000a98a:	50                   	push   eax
c000a98b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a98f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a993:	e8 43 ce 01 00       	call   c00277db <__adddf3>
c000a998:	59                   	pop    ecx
c000a999:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a99d:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a9a1:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a9a7:	e8 a3 de 01 00       	call   c002884f <__extendsfdf2>
c000a9ac:	83 c4 10             	add    esp,0x10
c000a9af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a9b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a9b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9bf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9c7:	e8 8c d4 01 00       	call   c0027e58 <__muldf3>
c000a9cc:	83 c4 10             	add    esp,0x10
c000a9cf:	83 c6 18             	add    esi,0x18
c000a9d2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a9d6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a9da:	52                   	push   edx
c000a9db:	50                   	push   eax
c000a9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a9e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a9e4:	e8 f2 cd 01 00       	call   c00277db <__adddf3>
c000a9e9:	59                   	pop    ecx
c000a9ea:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a9ee:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a9f2:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a9f8:	e8 52 de 01 00       	call   c002884f <__extendsfdf2>
c000a9fd:	83 c4 10             	add    esp,0x10
c000aa00:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000aa04:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000aa08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa18:	e8 3b d4 01 00       	call   c0027e58 <__muldf3>
c000aa1d:	83 c4 10             	add    esp,0x10
c000aa20:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aa24:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aa28:	52                   	push   edx
c000aa29:	50                   	push   eax
c000aa2a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa2e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa32:	e8 a4 cd 01 00       	call   c00277db <__adddf3>
c000aa37:	83 c4 10             	add    esp,0x10
c000aa3a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000aa3e:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000aa42:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000aa45:	0f 89 8b fd ff ff    	jns    c000a7d6 <calc_output_hex+0x9e>
c000aa4b:	31 f6                	xor    esi,esi
c000aa4d:	31 ff                	xor    edi,edi
c000aa4f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000aa53:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000aa56:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000aa5a:	29 e9                	sub    ecx,ebp
c000aa5c:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000aa60:	29 c8                	sub    eax,ecx
c000aa62:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000aa65:	99                   	cdq    
c000aa66:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000aa6a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000aa6d:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000aa71:	0f af e8             	imul   ebp,eax
c000aa74:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000aa78:	40                   	inc    eax
c000aa79:	01 cd                	add    ebp,ecx
c000aa7b:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000aa80:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000aa84:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000aa88:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000aa8c:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000aa8f:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000aa93:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000aa97:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000aa9b:	89 e8                	mov    eax,ebp
c000aa9d:	e8 42 f0 ff ff       	call   c0009ae4 <fp_to_double>
c000aaa2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaa6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaaa:	89 e8                	mov    eax,ebp
c000aaac:	e8 29 f0 ff ff       	call   c0009ada <fp_to_int>
c000aab1:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000aab5:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000aab8:	52                   	push   edx
c000aab9:	52                   	push   edx
c000aaba:	51                   	push   ecx
c000aabb:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000aac2:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000aac9:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000aacd:	e8 9e c6 01 00       	call   c0027170 <__subsf3>
c000aad2:	89 04 24             	mov    DWORD PTR [esp],eax
c000aad5:	e8 75 dd 01 00       	call   c002884f <__extendsfdf2>
c000aada:	83 c4 10             	add    esp,0x10
c000aadd:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aae1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aae5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aae9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaed:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaf1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaf5:	e8 5e d3 01 00       	call   c0027e58 <__muldf3>
c000aafa:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000ab01:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ab05:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000ab08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ab0c:	e8 3e dd 01 00       	call   c002884f <__extendsfdf2>
c000ab11:	83 c4 10             	add    esp,0x10
c000ab14:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab18:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab1c:	52                   	push   edx
c000ab1d:	50                   	push   eax
c000ab1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab26:	e8 b0 cc 01 00       	call   c00277db <__adddf3>
c000ab2b:	59                   	pop    ecx
c000ab2c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ab30:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab34:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000ab3a:	e8 10 dd 01 00       	call   c002884f <__extendsfdf2>
c000ab3f:	83 c4 10             	add    esp,0x10
c000ab42:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab46:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab52:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ab56:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ab5a:	e8 f9 d2 01 00       	call   c0027e58 <__muldf3>
c000ab5f:	83 c4 10             	add    esp,0x10
c000ab62:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab66:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab6a:	52                   	push   edx
c000ab6b:	50                   	push   eax
c000ab6c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ab70:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ab74:	e8 62 cc 01 00       	call   c00277db <__adddf3>
c000ab79:	59                   	pop    ecx
c000ab7a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ab7e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ab82:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000ab88:	e8 c2 dc 01 00       	call   c002884f <__extendsfdf2>
c000ab8d:	83 c4 10             	add    esp,0x10
c000ab90:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ab94:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ab98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aba0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aba4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aba8:	e8 ab d2 01 00       	call   c0027e58 <__muldf3>
c000abad:	83 c4 10             	add    esp,0x10
c000abb0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000abb4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000abb8:	52                   	push   edx
c000abb9:	50                   	push   eax
c000abba:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000abbe:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000abc2:	e8 14 cc 01 00       	call   c00277db <__adddf3>
c000abc7:	59                   	pop    ecx
c000abc8:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000abcc:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000abd0:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000abd6:	e8 74 dc 01 00       	call   c002884f <__extendsfdf2>
c000abdb:	83 c4 10             	add    esp,0x10
c000abde:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000abe2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000abe6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abee:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000abf2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000abf6:	e8 5d d2 01 00       	call   c0027e58 <__muldf3>
c000abfb:	83 c4 10             	add    esp,0x10
c000abfe:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac02:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac06:	52                   	push   edx
c000ac07:	50                   	push   eax
c000ac08:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ac0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ac10:	e8 c6 cb 01 00       	call   c00277db <__adddf3>
c000ac15:	59                   	pop    ecx
c000ac16:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000ac1a:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000ac1e:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000ac24:	e8 26 dc 01 00       	call   c002884f <__extendsfdf2>
c000ac29:	83 c4 10             	add    esp,0x10
c000ac2c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac30:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac3c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac44:	e8 0f d2 01 00       	call   c0027e58 <__muldf3>
c000ac49:	83 c4 10             	add    esp,0x10
c000ac4c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac50:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac54:	52                   	push   edx
c000ac55:	50                   	push   eax
c000ac56:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ac5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ac5e:	e8 78 cb 01 00       	call   c00277db <__adddf3>
c000ac63:	59                   	pop    ecx
c000ac64:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000ac68:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000ac6c:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000ac72:	e8 d8 db 01 00       	call   c002884f <__extendsfdf2>
c000ac77:	83 c4 10             	add    esp,0x10
c000ac7a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000ac7e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000ac82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac8a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ac92:	e8 c1 d1 01 00       	call   c0027e58 <__muldf3>
c000ac97:	83 c4 10             	add    esp,0x10
c000ac9a:	83 eb 18             	sub    ebx,0x18
c000ac9d:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aca1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aca5:	52                   	push   edx
c000aca6:	50                   	push   eax
c000aca7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000acab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000acaf:	e8 27 cb 01 00       	call   c00277db <__adddf3>
c000acb4:	59                   	pop    ecx
c000acb5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000acb9:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000acbd:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000acc3:	e8 87 db 01 00       	call   c002884f <__extendsfdf2>
c000acc8:	83 c4 10             	add    esp,0x10
c000accb:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000accf:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000acd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acdb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000acdf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ace3:	e8 70 d1 01 00       	call   c0027e58 <__muldf3>
c000ace8:	83 c4 10             	add    esp,0x10
c000aceb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acef:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000acf3:	52                   	push   edx
c000acf4:	50                   	push   eax
c000acf5:	57                   	push   edi
c000acf6:	56                   	push   esi
c000acf7:	e8 df ca 01 00       	call   c00277db <__adddf3>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	89 c6                	mov    esi,eax
c000ad01:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ad04:	89 d7                	mov    edi,edx
c000ad06:	85 ed                	test   ebp,ebp
c000ad08:	0f 8f 8d fd ff ff    	jg     c000aa9b <calc_output_hex+0x363>
c000ad0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ad1e:	e8 b8 ca 01 00       	call   c00277db <__adddf3>
c000ad23:	83 c4 10             	add    esp,0x10
c000ad26:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad29:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ad2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad3d:	e8 16 d1 01 00       	call   c0027e58 <__muldf3>
c000ad42:	59                   	pop    ecx
c000ad43:	5b                   	pop    ebx
c000ad44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad54:	e8 d2 d9 01 00       	call   c002872b <__truncdfsf2>
c000ad59:	83 c4 10             	add    esp,0x10
c000ad5c:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ad63:	89 03                	mov    DWORD PTR [ebx],eax
c000ad65:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ad69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ad6d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ad71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ad75:	e8 61 ca 01 00       	call   c00277db <__adddf3>
c000ad7a:	83 c4 10             	add    esp,0x10
c000ad7d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad80:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ad84:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad94:	e8 bf d0 01 00       	call   c0027e58 <__muldf3>
c000ad99:	5d                   	pop    ebp
c000ad9a:	59                   	pop    ecx
c000ad9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ada3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ada7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adab:	e8 7b d9 01 00       	call   c002872b <__truncdfsf2>
c000adb0:	83 c4 10             	add    esp,0x10
c000adb3:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000adba:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000adbd:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000adc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000adc5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adcd:	e8 09 ca 01 00       	call   c00277db <__adddf3>
c000add2:	83 c4 10             	add    esp,0x10
c000add5:	89 04 24             	mov    DWORD PTR [esp],eax
c000add8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000addc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ade0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ade4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ade8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adec:	e8 67 d0 01 00       	call   c0027e58 <__muldf3>
c000adf1:	5b                   	pop    ebx
c000adf2:	5d                   	pop    ebp
c000adf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000adf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000adfb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae03:	e8 23 d9 01 00       	call   c002872b <__truncdfsf2>
c000ae08:	83 c4 10             	add    esp,0x10
c000ae0b:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ae12:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ae15:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ae19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ae1d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ae21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ae25:	e8 b1 c9 01 00       	call   c00277db <__adddf3>
c000ae2a:	83 c4 10             	add    esp,0x10
c000ae2d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae30:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ae34:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae44:	e8 0f d0 01 00       	call   c0027e58 <__muldf3>
c000ae49:	59                   	pop    ecx
c000ae4a:	5b                   	pop    ebx
c000ae4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ae4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ae53:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae5b:	e8 cb d8 01 00       	call   c002872b <__truncdfsf2>
c000ae60:	83 c4 10             	add    esp,0x10
c000ae63:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ae6a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ae6d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae7d:	e8 59 c9 01 00       	call   c00277db <__adddf3>
c000ae82:	83 c4 10             	add    esp,0x10
c000ae85:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae88:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ae8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae9c:	e8 b7 cf 01 00       	call   c0027e58 <__muldf3>
c000aea1:	5d                   	pop    ebp
c000aea2:	59                   	pop    ecx
c000aea3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aea7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aeab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeb3:	e8 73 d8 01 00       	call   c002872b <__truncdfsf2>
c000aeb8:	83 c4 10             	add    esp,0x10
c000aebb:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aec2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aec5:	57                   	push   edi
c000aec6:	56                   	push   esi
c000aec7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aecb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aecf:	e8 07 c9 01 00       	call   c00277db <__adddf3>
c000aed4:	83 c4 10             	add    esp,0x10
c000aed7:	89 04 24             	mov    DWORD PTR [esp],eax
c000aeda:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aede:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aeee:	e8 65 cf 01 00       	call   c0027e58 <__muldf3>
c000aef3:	5b                   	pop    ebx
c000aef4:	5e                   	pop    esi
c000aef5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aef9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aefd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000af01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000af05:	e8 21 d8 01 00       	call   c002872b <__truncdfsf2>
c000af0a:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000af11:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000af14:	81 c4 9c 00 00 00    	add    esp,0x9c
c000af1a:	5b                   	pop    ebx
c000af1b:	5e                   	pop    esi
c000af1c:	5f                   	pop    edi
c000af1d:	5d                   	pop    ebp
c000af1e:	c3                   	ret    

c000af1f <sinc_reset>:
c000af1f:	56                   	push   esi
c000af20:	53                   	push   ebx
c000af21:	51                   	push   ecx
c000af22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af26:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000af29:	85 db                	test   ebx,ebx
c000af2b:	74 59                	je     c000af86 <sinc_reset+0x67>
c000af2d:	31 d2                	xor    edx,edx
c000af2f:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000af36:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000af39:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000af3c:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000af43:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000af4a:	31 c0                	xor    eax,eax
c000af4c:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000af52:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000af55:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000af58:	52                   	push   edx
c000af59:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000af5c:	c1 e0 02             	shl    eax,0x2
c000af5f:	50                   	push   eax
c000af60:	6a 00                	push   0x0
c000af62:	56                   	push   esi
c000af63:	e8 e8 57 ff ff       	call   c0000750 <memset>
c000af68:	83 c4 0c             	add    esp,0xc
c000af6b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000af6e:	c1 e0 02             	shl    eax,0x2
c000af71:	50                   	push   eax
c000af72:	68 aa 00 00 00       	push   0xaa
c000af77:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000af7a:	8d 04 86             	lea    eax,[esi+eax*4]
c000af7d:	50                   	push   eax
c000af7e:	e8 cd 57 ff ff       	call   c0000750 <memset>
c000af83:	83 c4 10             	add    esp,0x10
c000af86:	58                   	pop    eax
c000af87:	5b                   	pop    ebx
c000af88:	5e                   	pop    esi
c000af89:	c3                   	ret    

c000af8a <calc_output_multi>:
c000af8a:	55                   	push   ebp
c000af8b:	57                   	push   edi
c000af8c:	56                   	push   esi
c000af8d:	89 c6                	mov    esi,eax
c000af8f:	53                   	push   ebx
c000af90:	83 ec 4c             	sub    esp,0x4c
c000af93:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000af97:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000af9b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000af9f:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000afa3:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000afa7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000afab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000afaf:	8d 46 44             	lea    eax,[esi+0x44]
c000afb2:	89 04 24             	mov    DWORD PTR [esp],eax
c000afb5:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000afbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000afbf:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000afc2:	e8 0f eb ff ff       	call   c0009ad6 <int_to_fp>
c000afc7:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000afca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000afce:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000afd2:	99                   	cdq    
c000afd3:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000afd7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000afdb:	0f af d0             	imul   edx,eax
c000afde:	0f af c3             	imul   eax,ebx
c000afe1:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000afe5:	29 c1                	sub    ecx,eax
c000afe7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000afeb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000afef:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000aff6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000affa:	57                   	push   edi
c000affb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afff:	6a 00                	push   0x0
c000b001:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b005:	e8 46 57 ff ff       	call   c0000750 <memset>
c000b00a:	83 c4 10             	add    esp,0x10
c000b00d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b011:	89 df                	mov    edi,ebx
c000b013:	e8 cc ea ff ff       	call   c0009ae4 <fp_to_double>
c000b018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b01c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b020:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b024:	e8 b1 ea ff ff       	call   c0009ada <fp_to_int>
c000b029:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b02c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b02f:	51                   	push   ecx
c000b030:	51                   	push   ecx
c000b031:	55                   	push   ebp
c000b032:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b036:	e8 35 c1 01 00       	call   c0027170 <__subsf3>
c000b03b:	89 04 24             	mov    DWORD PTR [esp],eax
c000b03e:	e8 0c d8 01 00       	call   c002884f <__extendsfdf2>
c000b043:	83 c4 10             	add    esp,0x10
c000b046:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b04a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b04e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b052:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b056:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b05a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b05e:	e8 f5 cd 01 00       	call   c0027e58 <__muldf3>
c000b063:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b066:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b06a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b06e:	e8 dc d7 01 00       	call   c002884f <__extendsfdf2>
c000b073:	83 c4 10             	add    esp,0x10
c000b076:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b07a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07e:	52                   	push   edx
c000b07f:	50                   	push   eax
c000b080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b088:	e8 4e c7 01 00       	call   c00277db <__adddf3>
c000b08d:	83 c4 10             	add    esp,0x10
c000b090:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b094:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b098:	89 f8                	mov    eax,edi
c000b09a:	b9 08 00 00 00       	mov    ecx,0x8
c000b09f:	99                   	cdq    
c000b0a0:	f7 f9                	idiv   ecx
c000b0a2:	4a                   	dec    edx
c000b0a3:	83 fa 06             	cmp    edx,0x6
c000b0a6:	77 07                	ja     c000b0af <calc_output_multi+0x125>
c000b0a8:	ff 24 95 24 a1 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5edc]
c000b0af:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b2:	4f                   	dec    edi
c000b0b3:	83 ec 0c             	sub    esp,0xc
c000b0b6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0bd:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0c8:	e8 82 d7 01 00       	call   c002884f <__extendsfdf2>
c000b0cd:	83 c4 10             	add    esp,0x10
c000b0d0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	e8 6b cd 01 00       	call   c0027e58 <__muldf3>
c000b0ed:	83 c4 10             	add    esp,0x10
c000b0f0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0f8:	52                   	push   edx
c000b0f9:	50                   	push   eax
c000b0fa:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0fd:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b100:	e8 d6 c6 01 00       	call   c00277db <__adddf3>
c000b105:	83 c4 10             	add    esp,0x10
c000b108:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b10e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b111:	4f                   	dec    edi
c000b112:	83 ec 0c             	sub    esp,0xc
c000b115:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b118:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b11c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b123:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b127:	e8 23 d7 01 00       	call   c002884f <__extendsfdf2>
c000b12c:	83 c4 10             	add    esp,0x10
c000b12f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b133:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b137:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	e8 0c cd 01 00       	call   c0027e58 <__muldf3>
c000b14c:	83 c4 10             	add    esp,0x10
c000b14f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b153:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b157:	52                   	push   edx
c000b158:	50                   	push   eax
c000b159:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b15c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b15f:	e8 77 c6 01 00       	call   c00277db <__adddf3>
c000b164:	83 c4 10             	add    esp,0x10
c000b167:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b16d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b170:	4f                   	dec    edi
c000b171:	83 ec 0c             	sub    esp,0xc
c000b174:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b177:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b17b:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b182:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b186:	e8 c4 d6 01 00       	call   c002884f <__extendsfdf2>
c000b18b:	83 c4 10             	add    esp,0x10
c000b18e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b192:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b196:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b1a2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b1a6:	e8 ad cc 01 00       	call   c0027e58 <__muldf3>
c000b1ab:	83 c4 10             	add    esp,0x10
c000b1ae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b1b2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b1b6:	52                   	push   edx
c000b1b7:	50                   	push   eax
c000b1b8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1bb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1be:	e8 18 c6 01 00       	call   c00277db <__adddf3>
c000b1c3:	83 c4 10             	add    esp,0x10
c000b1c6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1c9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1cc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b1cf:	4f                   	dec    edi
c000b1d0:	83 ec 0c             	sub    esp,0xc
c000b1d3:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1da:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1e1:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1e5:	e8 65 d6 01 00       	call   c002884f <__extendsfdf2>
c000b1ea:	83 c4 10             	add    esp,0x10
c000b1ed:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b1f1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b1f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1fd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b201:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b205:	e8 4e cc 01 00       	call   c0027e58 <__muldf3>
c000b20a:	83 c4 10             	add    esp,0x10
c000b20d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b211:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b215:	52                   	push   edx
c000b216:	50                   	push   eax
c000b217:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b21a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b21d:	e8 b9 c5 01 00       	call   c00277db <__adddf3>
c000b222:	83 c4 10             	add    esp,0x10
c000b225:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b228:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b22b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b22e:	4f                   	dec    edi
c000b22f:	83 ec 0c             	sub    esp,0xc
c000b232:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b235:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b239:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b240:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b244:	e8 06 d6 01 00       	call   c002884f <__extendsfdf2>
c000b249:	83 c4 10             	add    esp,0x10
c000b24c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b250:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b258:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b25c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b260:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b264:	e8 ef cb 01 00       	call   c0027e58 <__muldf3>
c000b269:	83 c4 10             	add    esp,0x10
c000b26c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b270:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b274:	52                   	push   edx
c000b275:	50                   	push   eax
c000b276:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b279:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b27c:	e8 5a c5 01 00       	call   c00277db <__adddf3>
c000b281:	83 c4 10             	add    esp,0x10
c000b284:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b287:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b28a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b28d:	4f                   	dec    edi
c000b28e:	83 ec 0c             	sub    esp,0xc
c000b291:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b294:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b298:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b29f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2a3:	e8 a7 d5 01 00       	call   c002884f <__extendsfdf2>
c000b2a8:	83 c4 10             	add    esp,0x10
c000b2ab:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b2af:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b2b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b2bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b2c3:	e8 90 cb 01 00       	call   c0027e58 <__muldf3>
c000b2c8:	83 c4 10             	add    esp,0x10
c000b2cb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b2cf:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b2d3:	52                   	push   edx
c000b2d4:	50                   	push   eax
c000b2d5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2d8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2db:	e8 fb c4 01 00       	call   c00277db <__adddf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2e6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2e9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b2ec:	4f                   	dec    edi
c000b2ed:	83 ec 0c             	sub    esp,0xc
c000b2f0:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2f7:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2fe:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b302:	e8 48 d5 01 00       	call   c002884f <__extendsfdf2>
c000b307:	83 c4 10             	add    esp,0x10
c000b30a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b30e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b312:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b316:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b31a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b31e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b322:	e8 31 cb 01 00       	call   c0027e58 <__muldf3>
c000b327:	83 c4 10             	add    esp,0x10
c000b32a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b32e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b332:	52                   	push   edx
c000b333:	50                   	push   eax
c000b334:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b337:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b33a:	e8 9c c4 01 00       	call   c00277db <__adddf3>
c000b33f:	83 c4 10             	add    esp,0x10
c000b342:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b345:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b348:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b34b:	4f                   	dec    edi
c000b34c:	83 ec 0c             	sub    esp,0xc
c000b34f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b352:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b356:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b35d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b361:	e8 e9 d4 01 00       	call   c002884f <__extendsfdf2>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b36d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b371:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b375:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b379:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b37d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b381:	e8 d2 ca 01 00       	call   c0027e58 <__muldf3>
c000b386:	83 c4 10             	add    esp,0x10
c000b389:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b38d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b391:	52                   	push   edx
c000b392:	50                   	push   eax
c000b393:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b396:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b399:	e8 3d c4 01 00       	call   c00277db <__adddf3>
c000b39e:	83 c4 10             	add    esp,0x10
c000b3a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3a7:	85 ff                	test   edi,edi
c000b3a9:	0f 8f e9 fc ff ff    	jg     c000b098 <calc_output_multi+0x10e>
c000b3af:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b3b3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b3b7:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b3bb:	0f 89 4c fc ff ff    	jns    c000b00d <calc_output_multi+0x83>
c000b3c1:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b3c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b3c9:	29 c8                	sub    eax,ecx
c000b3cb:	99                   	cdq    
c000b3cc:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b3d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b3d4:	0f af d0             	imul   edx,eax
c000b3d7:	40                   	inc    eax
c000b3d8:	01 d1                	add    ecx,edx
c000b3da:	0f af c3             	imul   eax,ebx
c000b3dd:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b3e1:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b3e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3e8:	55                   	push   ebp
c000b3e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3ed:	6a 00                	push   0x0
c000b3ef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b3f3:	e8 58 53 ff ff       	call   c0000750 <memset>
c000b3f8:	83 c4 10             	add    esp,0x10
c000b3fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b3ff:	e8 e0 e6 ff ff       	call   c0009ae4 <fp_to_double>
c000b404:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b40c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b410:	e8 c5 e6 ff ff       	call   c0009ada <fp_to_int>
c000b415:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b418:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b41b:	57                   	push   edi
c000b41c:	57                   	push   edi
c000b41d:	89 df                	mov    edi,ebx
c000b41f:	55                   	push   ebp
c000b420:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b424:	e8 47 bd 01 00       	call   c0027170 <__subsf3>
c000b429:	89 04 24             	mov    DWORD PTR [esp],eax
c000b42c:	e8 1e d4 01 00       	call   c002884f <__extendsfdf2>
c000b431:	83 c4 10             	add    esp,0x10
c000b434:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b438:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b43c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b444:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b44c:	e8 07 ca 01 00       	call   c0027e58 <__muldf3>
c000b451:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b454:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b458:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b45c:	e8 ee d3 01 00       	call   c002884f <__extendsfdf2>
c000b461:	83 c4 10             	add    esp,0x10
c000b464:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b468:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46c:	52                   	push   edx
c000b46d:	50                   	push   eax
c000b46e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b476:	e8 60 c3 01 00       	call   c00277db <__adddf3>
c000b47b:	83 c4 10             	add    esp,0x10
c000b47e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b482:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b486:	89 f8                	mov    eax,edi
c000b488:	b9 08 00 00 00       	mov    ecx,0x8
c000b48d:	99                   	cdq    
c000b48e:	f7 f9                	idiv   ecx
c000b490:	4a                   	dec    edx
c000b491:	83 fa 06             	cmp    edx,0x6
c000b494:	77 07                	ja     c000b49d <calc_output_multi+0x513>
c000b496:	ff 24 95 40 a1 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5ec0]
c000b49d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4a1:	4f                   	dec    edi
c000b4a2:	83 ec 0c             	sub    esp,0xc
c000b4a5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4ac:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4b3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4b7:	e8 93 d3 01 00       	call   c002884f <__extendsfdf2>
c000b4bc:	83 c4 10             	add    esp,0x10
c000b4bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4d7:	e8 7c c9 01 00       	call   c0027e58 <__muldf3>
c000b4dc:	83 c4 10             	add    esp,0x10
c000b4df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4e7:	52                   	push   edx
c000b4e8:	50                   	push   eax
c000b4e9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4ec:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4ef:	e8 e7 c2 01 00       	call   c00277db <__adddf3>
c000b4f4:	83 c4 10             	add    esp,0x10
c000b4f7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4fa:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b501:	4f                   	dec    edi
c000b502:	83 ec 0c             	sub    esp,0xc
c000b505:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b508:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b50c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b513:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b517:	e8 33 d3 01 00       	call   c002884f <__extendsfdf2>
c000b51c:	83 c4 10             	add    esp,0x10
c000b51f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b523:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b527:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b533:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b537:	e8 1c c9 01 00       	call   c0027e58 <__muldf3>
c000b53c:	83 c4 10             	add    esp,0x10
c000b53f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b543:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b547:	52                   	push   edx
c000b548:	50                   	push   eax
c000b549:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b54c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b54f:	e8 87 c2 01 00       	call   c00277db <__adddf3>
c000b554:	83 c4 10             	add    esp,0x10
c000b557:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b55a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b55d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b561:	4f                   	dec    edi
c000b562:	83 ec 0c             	sub    esp,0xc
c000b565:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b568:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b56c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b573:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b577:	e8 d3 d2 01 00       	call   c002884f <__extendsfdf2>
c000b57c:	83 c4 10             	add    esp,0x10
c000b57f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b583:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b587:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b593:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b597:	e8 bc c8 01 00       	call   c0027e58 <__muldf3>
c000b59c:	83 c4 10             	add    esp,0x10
c000b59f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b5a7:	52                   	push   edx
c000b5a8:	50                   	push   eax
c000b5a9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b5ac:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b5af:	e8 27 c2 01 00       	call   c00277db <__adddf3>
c000b5b4:	83 c4 10             	add    esp,0x10
c000b5b7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b5ba:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5c1:	4f                   	dec    edi
c000b5c2:	83 ec 0c             	sub    esp,0xc
c000b5c5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b5c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b5cc:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b5d3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b5d7:	e8 73 d2 01 00       	call   c002884f <__extendsfdf2>
c000b5dc:	83 c4 10             	add    esp,0x10
c000b5df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b5f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b5f7:	e8 5c c8 01 00       	call   c0027e58 <__muldf3>
c000b5fc:	83 c4 10             	add    esp,0x10
c000b5ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b603:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b607:	52                   	push   edx
c000b608:	50                   	push   eax
c000b609:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b60c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b60f:	e8 c7 c1 01 00       	call   c00277db <__adddf3>
c000b614:	83 c4 10             	add    esp,0x10
c000b617:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b61a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b61d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b621:	4f                   	dec    edi
c000b622:	83 ec 0c             	sub    esp,0xc
c000b625:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b628:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b62c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b633:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b637:	e8 13 d2 01 00       	call   c002884f <__extendsfdf2>
c000b63c:	83 c4 10             	add    esp,0x10
c000b63f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b643:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b647:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b653:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b657:	e8 fc c7 01 00       	call   c0027e58 <__muldf3>
c000b65c:	83 c4 10             	add    esp,0x10
c000b65f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b663:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b667:	52                   	push   edx
c000b668:	50                   	push   eax
c000b669:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b66c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b66f:	e8 67 c1 01 00       	call   c00277db <__adddf3>
c000b674:	83 c4 10             	add    esp,0x10
c000b677:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b67a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b67d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b681:	4f                   	dec    edi
c000b682:	83 ec 0c             	sub    esp,0xc
c000b685:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b688:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b68c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b693:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b697:	e8 b3 d1 01 00       	call   c002884f <__extendsfdf2>
c000b69c:	83 c4 10             	add    esp,0x10
c000b69f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b6a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b6a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6b7:	e8 9c c7 01 00       	call   c0027e58 <__muldf3>
c000b6bc:	83 c4 10             	add    esp,0x10
c000b6bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b6c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b6c7:	52                   	push   edx
c000b6c8:	50                   	push   eax
c000b6c9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b6cc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b6cf:	e8 07 c1 01 00       	call   c00277db <__adddf3>
c000b6d4:	83 c4 10             	add    esp,0x10
c000b6d7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b6da:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b6dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6e1:	4f                   	dec    edi
c000b6e2:	83 ec 0c             	sub    esp,0xc
c000b6e5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b6e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b6ec:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b6f3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b6f7:	e8 53 d1 01 00       	call   c002884f <__extendsfdf2>
c000b6fc:	83 c4 10             	add    esp,0x10
c000b6ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b703:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b707:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b70b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b70f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b713:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b717:	e8 3c c7 01 00       	call   c0027e58 <__muldf3>
c000b71c:	83 c4 10             	add    esp,0x10
c000b71f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b723:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b727:	52                   	push   edx
c000b728:	50                   	push   eax
c000b729:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b72c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b72f:	e8 a7 c0 01 00       	call   c00277db <__adddf3>
c000b734:	83 c4 10             	add    esp,0x10
c000b737:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b73a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b73d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b741:	4f                   	dec    edi
c000b742:	83 ec 0c             	sub    esp,0xc
c000b745:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b748:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b74c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b753:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b757:	e8 f3 d0 01 00       	call   c002884f <__extendsfdf2>
c000b75c:	83 c4 10             	add    esp,0x10
c000b75f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b763:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b767:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b76b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b76f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b773:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b777:	e8 dc c6 01 00       	call   c0027e58 <__muldf3>
c000b77c:	83 c4 10             	add    esp,0x10
c000b77f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b783:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b787:	52                   	push   edx
c000b788:	50                   	push   eax
c000b789:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b78c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b78f:	e8 47 c0 01 00       	call   c00277db <__adddf3>
c000b794:	83 c4 10             	add    esp,0x10
c000b797:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b79a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b79d:	85 ff                	test   edi,edi
c000b79f:	0f 8f e1 fc ff ff    	jg     c000b486 <calc_output_multi+0x4fc>
c000b7a5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b7a9:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b7ad:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b7b1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b7b6:	0f 8f 3f fc ff ff    	jg     c000b3fb <calc_output_multi+0x471>
c000b7bc:	be 08 00 00 00       	mov    esi,0x8
c000b7c1:	89 d8                	mov    eax,ebx
c000b7c3:	99                   	cdq    
c000b7c4:	f7 fe                	idiv   esi
c000b7c6:	4a                   	dec    edx
c000b7c7:	83 fa 06             	cmp    edx,0x6
c000b7ca:	77 07                	ja     c000b7d3 <calc_output_multi+0x849>
c000b7cc:	ff 24 95 5c a1 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5ea4]
c000b7d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7d7:	4b                   	dec    ebx
c000b7d8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7dc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7e3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7e7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7ea:	e8 ec bf 01 00       	call   c00277db <__adddf3>
c000b7ef:	83 c4 10             	add    esp,0x10
c000b7f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b806:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b80a:	e8 49 c6 01 00       	call   c0027e58 <__muldf3>
c000b80f:	5d                   	pop    ebp
c000b810:	59                   	pop    ecx
c000b811:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b815:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b819:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b81d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b821:	e8 05 cf 01 00       	call   c002872b <__truncdfsf2>
c000b826:	83 c4 10             	add    esp,0x10
c000b829:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b82d:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b830:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b834:	4b                   	dec    ebx
c000b835:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b839:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b840:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b844:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b847:	e8 8f bf 01 00       	call   c00277db <__adddf3>
c000b84c:	83 c4 10             	add    esp,0x10
c000b84f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b853:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b857:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b85b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b85f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b863:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b867:	e8 ec c5 01 00       	call   c0027e58 <__muldf3>
c000b86c:	59                   	pop    ecx
c000b86d:	5f                   	pop    edi
c000b86e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b872:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b876:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b87a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b87e:	e8 a8 ce 01 00       	call   c002872b <__truncdfsf2>
c000b883:	83 c4 10             	add    esp,0x10
c000b886:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b88a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b88d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b891:	4b                   	dec    ebx
c000b892:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b896:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b899:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b89d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b8a1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b8a4:	e8 32 bf 01 00       	call   c00277db <__adddf3>
c000b8a9:	83 c4 10             	add    esp,0x10
c000b8ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8c4:	e8 8f c5 01 00       	call   c0027e58 <__muldf3>
c000b8c9:	5f                   	pop    edi
c000b8ca:	5d                   	pop    ebp
c000b8cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8cf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8db:	e8 4b ce 01 00       	call   c002872b <__truncdfsf2>
c000b8e0:	83 c4 10             	add    esp,0x10
c000b8e3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b8e7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b8ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8ee:	4b                   	dec    ebx
c000b8ef:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b8f3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b8f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b8fa:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b8fe:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b901:	e8 d5 be 01 00       	call   c00277db <__adddf3>
c000b906:	83 c4 10             	add    esp,0x10
c000b909:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b90d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b911:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b915:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b91d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b921:	e8 32 c5 01 00       	call   c0027e58 <__muldf3>
c000b926:	5d                   	pop    ebp
c000b927:	59                   	pop    ecx
c000b928:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b92c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b930:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b934:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b938:	e8 ee cd 01 00       	call   c002872b <__truncdfsf2>
c000b93d:	83 c4 10             	add    esp,0x10
c000b940:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b944:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b947:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b94b:	4b                   	dec    ebx
c000b94c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b950:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b953:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b957:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b95b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b95e:	e8 78 be 01 00       	call   c00277db <__adddf3>
c000b963:	83 c4 10             	add    esp,0x10
c000b966:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b96a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b96e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b976:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97e:	e8 d5 c4 01 00       	call   c0027e58 <__muldf3>
c000b983:	59                   	pop    ecx
c000b984:	5f                   	pop    edi
c000b985:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b989:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b98d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b991:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b995:	e8 91 cd 01 00       	call   c002872b <__truncdfsf2>
c000b99a:	83 c4 10             	add    esp,0x10
c000b99d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b9a1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b9a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9a8:	4b                   	dec    ebx
c000b9a9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b9ad:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b9b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9b4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b9b8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b9bb:	e8 1b be 01 00       	call   c00277db <__adddf3>
c000b9c0:	83 c4 10             	add    esp,0x10
c000b9c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b9c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b9cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9db:	e8 78 c4 01 00       	call   c0027e58 <__muldf3>
c000b9e0:	5f                   	pop    edi
c000b9e1:	5d                   	pop    ebp
c000b9e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b9e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9f2:	e8 34 cd 01 00       	call   c002872b <__truncdfsf2>
c000b9f7:	83 c4 10             	add    esp,0x10
c000b9fa:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b9fe:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000ba01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba05:	4b                   	dec    ebx
c000ba06:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba0a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba11:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba15:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba18:	e8 be bd 01 00       	call   c00277db <__adddf3>
c000ba1d:	83 c4 10             	add    esp,0x10
c000ba20:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba24:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba38:	e8 1b c4 01 00       	call   c0027e58 <__muldf3>
c000ba3d:	5d                   	pop    ebp
c000ba3e:	59                   	pop    ecx
c000ba3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba43:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba4f:	e8 d7 cc 01 00       	call   c002872b <__truncdfsf2>
c000ba54:	83 c4 10             	add    esp,0x10
c000ba57:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000ba5b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000ba5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba62:	4b                   	dec    ebx
c000ba63:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba67:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba6e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000ba72:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ba75:	e8 61 bd 01 00       	call   c00277db <__adddf3>
c000ba7a:	83 c4 10             	add    esp,0x10
c000ba7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba81:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba95:	e8 be c3 01 00       	call   c0027e58 <__muldf3>
c000ba9a:	59                   	pop    ecx
c000ba9b:	5f                   	pop    edi
c000ba9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000baa0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000baa4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baa8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baac:	e8 7a cc 01 00       	call   c002872b <__truncdfsf2>
c000bab1:	83 c4 10             	add    esp,0x10
c000bab4:	85 db                	test   ebx,ebx
c000bab6:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000baba:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000babd:	0f 8f fe fc ff ff    	jg     c000b7c1 <calc_output_multi+0x837>
c000bac3:	83 c4 4c             	add    esp,0x4c
c000bac6:	5b                   	pop    ebx
c000bac7:	5e                   	pop    esi
c000bac8:	5f                   	pop    edi
c000bac9:	5d                   	pop    ebp
c000baca:	c3                   	ret    

c000bacb <double_to_fp>:
c000bacb:	83 ec 0c             	sub    esp,0xc
c000bace:	68 00 00 b0 40       	push   0x40b00000
c000bad3:	6a 00                	push   0x0
c000bad5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000badd:	e8 76 c3 01 00       	call   c0027e58 <__muldf3>
c000bae2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bae6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000baea:	83 c4 1c             	add    esp,0x1c
c000baed:	e9 ee cd 01 00       	jmp    c00288e0 <lrint>

c000baf2 <prepare_data>:
c000baf2:	55                   	push   ebp
c000baf3:	57                   	push   edi
c000baf4:	56                   	push   esi
c000baf5:	53                   	push   ebx
c000baf6:	83 ec 1c             	sub    esp,0x1c
c000baf9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000bafd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000bb01:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000bb05:	0f 89 57 01 00 00    	jns    c000bc62 <prepare_data+0x170>
c000bb0b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000bb0e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000bb11:	85 d2                	test   edx,edx
c000bb13:	75 0d                	jne    c000bb22 <prepare_data+0x30>
c000bb15:	8d 14 36             	lea    edx,[esi+esi*1]
c000bb18:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000bb1b:	29 d0                	sub    eax,edx
c000bb1d:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000bb20:	eb 44                	jmp    c000bb66 <prepare_data+0x74>
c000bb22:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000bb25:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000bb28:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000bb2b:	39 c1                	cmp    ecx,eax
c000bb2d:	7d 04                	jge    c000bb33 <prepare_data+0x41>
c000bb2f:	29 d0                	sub    eax,edx
c000bb31:	eb 2d                	jmp    c000bb60 <prepare_data+0x6e>
c000bb33:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000bb39:	29 d7                	sub    edi,edx
c000bb3b:	01 f7                	add    edi,esi
c000bb3d:	51                   	push   ecx
c000bb3e:	29 f2                	sub    edx,esi
c000bb40:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000bb47:	8d 14 90             	lea    edx,[eax+edx*4]
c000bb4a:	51                   	push   ecx
c000bb4b:	52                   	push   edx
c000bb4c:	50                   	push   eax
c000bb4d:	e8 36 4b ff ff       	call   c0000688 <memmove>
c000bb52:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000bb55:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000bb58:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000bb5b:	29 f0                	sub    eax,esi
c000bb5d:	83 c4 10             	add    esp,0x10
c000bb60:	29 f0                	sub    eax,esi
c000bb62:	79 02                	jns    c000bb66 <prepare_data+0x74>
c000bb64:	31 c0                	xor    eax,eax
c000bb66:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000bb69:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000bb6c:	29 ef                	sub    edi,ebp
c000bb6e:	39 c7                	cmp    edi,eax
c000bb70:	7e 02                	jle    c000bb74 <prepare_data+0x82>
c000bb72:	89 c7                	mov    edi,eax
c000bb74:	89 f8                	mov    eax,edi
c000bb76:	99                   	cdq    
c000bb77:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb7a:	b8 15 00 00 00       	mov    eax,0x15
c000bb7f:	29 d7                	sub    edi,edx
c000bb81:	0f 88 dd 00 00 00    	js     c000bc64 <prepare_data+0x172>
c000bb87:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000bb8a:	8d 14 39             	lea    edx,[ecx+edi*1]
c000bb8d:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000bb90:	0f 8f ce 00 00 00    	jg     c000bc64 <prepare_data+0x172>
c000bb96:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000bb9c:	50                   	push   eax
c000bb9d:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000bba4:	50                   	push   eax
c000bba5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bba9:	8b 00                	mov    eax,DWORD PTR [eax]
c000bbab:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000bbae:	50                   	push   eax
c000bbaf:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bbb2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bbb6:	50                   	push   eax
c000bbb7:	e8 8a 4a ff ff       	call   c0000646 <memcpy>
c000bbbc:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000bbbf:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000bbc2:	01 fd                	add    ebp,edi
c000bbc4:	01 f9                	add    ecx,edi
c000bbc6:	83 c4 10             	add    esp,0x10
c000bbc9:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000bbcc:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000bbcf:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000bbd2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bbd6:	0f 85 86 00 00 00    	jne    c000bc62 <prepare_data+0x170>
c000bbdc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000bbdf:	89 e8                	mov    eax,ebp
c000bbe1:	8d 3c 36             	lea    edi,[esi+esi*1]
c000bbe4:	29 c8                	sub    eax,ecx
c000bbe6:	39 f8                	cmp    eax,edi
c000bbe8:	7d 78                	jge    c000bc62 <prepare_data+0x170>
c000bbea:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bbee:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000bbf2:	74 6e                	je     c000bc62 <prepare_data+0x170>
c000bbf4:	8d 7e 04             	lea    edi,[esi+0x4]
c000bbf7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000bbfb:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000bbfe:	29 ef                	sub    edi,ebp
c000bc00:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000bc04:	7c 29                	jl     c000bc2f <prepare_data+0x13d>
c000bc06:	8d 3c 30             	lea    edi,[eax+esi*1]
c000bc09:	29 f1                	sub    ecx,esi
c000bc0b:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000bc12:	55                   	push   ebp
c000bc13:	50                   	push   eax
c000bc14:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bc17:	50                   	push   eax
c000bc18:	52                   	push   edx
c000bc19:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc1d:	e8 66 4a ff ff       	call   c0000688 <memmove>
c000bc22:	83 c4 10             	add    esp,0x10
c000bc25:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000bc28:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000bc2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bc2f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bc32:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bc35:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000bc38:	83 c6 05             	add    esi,0x5
c000bc3b:	78 07                	js     c000bc44 <prepare_data+0x152>
c000bc3d:	8d 3c 30             	lea    edi,[eax+esi*1]
c000bc40:	39 cf                	cmp    edi,ecx
c000bc42:	7e 04                	jle    c000bc48 <prepare_data+0x156>
c000bc44:	89 ce                	mov    esi,ecx
c000bc46:	29 c6                	sub    esi,eax
c000bc48:	8d 04 82             	lea    eax,[edx+eax*4]
c000bc4b:	51                   	push   ecx
c000bc4c:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000bc53:	51                   	push   ecx
c000bc54:	6a 00                	push   0x0
c000bc56:	50                   	push   eax
c000bc57:	e8 f4 4a ff ff       	call   c0000750 <memset>
c000bc5c:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000bc5f:	83 c4 10             	add    esp,0x10
c000bc62:	31 c0                	xor    eax,eax
c000bc64:	83 c4 1c             	add    esp,0x1c
c000bc67:	5b                   	pop    ebx
c000bc68:	5e                   	pop    esi
c000bc69:	5f                   	pop    edi
c000bc6a:	5d                   	pop    ebp
c000bc6b:	c3                   	ret    

c000bc6c <sinc_multichan_vari_process>:
c000bc6c:	55                   	push   ebp
c000bc6d:	ba 05 00 00 00       	mov    edx,0x5
c000bc72:	57                   	push   edi
c000bc73:	56                   	push   esi
c000bc74:	53                   	push   ebx
c000bc75:	83 ec 4c             	sub    esp,0x4c
c000bc78:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000bc7c:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000bc80:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000bc83:	85 db                	test   ebx,ebx
c000bc85:	0f 84 9b 06 00 00    	je     c000c326 <sinc_multichan_vari_process+0x6ba>
c000bc8b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000bc8e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc91:	0f af c5             	imul   eax,ebp
c000bc94:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bc97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bc9a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bca1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bca8:	0f af c5             	imul   eax,ebp
c000bcab:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bcae:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bcb1:	8b 06                	mov    eax,DWORD PTR [esi]
c000bcb3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bcb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcbb:	68 00 00 70 3f       	push   0x3f700000
c000bcc0:	6a 00                	push   0x0
c000bcc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcca:	e8 58 ca 01 00       	call   c0028727 <__ltdf2>
c000bccf:	83 c4 10             	add    esp,0x10
c000bcd2:	ba 16 00 00 00       	mov    edx,0x16
c000bcd7:	85 c0                	test   eax,eax
c000bcd9:	0f 88 47 06 00 00    	js     c000c326 <sinc_multichan_vari_process+0x6ba>
c000bcdf:	68 00 00 70 40       	push   0x40700000
c000bce4:	6a 00                	push   0x0
c000bce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcee:	e8 16 ca 01 00       	call   c0028709 <__gtdf2>
c000bcf3:	83 c4 10             	add    esp,0x10
c000bcf6:	ba 16 00 00 00       	mov    edx,0x16
c000bcfb:	85 c0                	test   eax,eax
c000bcfd:	0f 8f 23 06 00 00    	jg     c000c326 <sinc_multichan_vari_process+0x6ba>
c000bd03:	83 ec 0c             	sub    esp,0xc
c000bd06:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bd09:	e8 ad c7 01 00       	call   c00284bb <__floatsidf>
c000bd0e:	83 c4 10             	add    esp,0x10
c000bd11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd19:	68 00 00 00 40       	push   0x40000000
c000bd1e:	6a 00                	push   0x0
c000bd20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd28:	e8 ae ba 01 00       	call   c00277db <__adddf3>
c000bd2d:	59                   	pop    ecx
c000bd2e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bd32:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bd36:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd39:	e8 7d c7 01 00       	call   c00284bb <__floatsidf>
c000bd3e:	83 c4 10             	add    esp,0x10
c000bd41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd45:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd49:	52                   	push   edx
c000bd4a:	50                   	push   eax
c000bd4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd53:	e8 e4 c3 01 00       	call   c002813c <__divdf3>
c000bd58:	83 c4 10             	add    esp,0x10
c000bd5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd63:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bd66:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bd69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd81:	e8 83 c9 01 00       	call   c0028709 <__gtdf2>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	85 c0                	test   eax,eax
c000bd8b:	7e 2d                	jle    c000bdba <sinc_multichan_vari_process+0x14e>
c000bd8d:	68 00 00 f0 3f       	push   0x3ff00000
c000bd92:	6a 00                	push   0x0
c000bd94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd9c:	e8 86 c9 01 00       	call   c0028727 <__ltdf2>
c000bda1:	83 c4 10             	add    esp,0x10
c000bda4:	85 c0                	test   eax,eax
c000bda6:	79 4d                	jns    c000bdf5 <sinc_multichan_vari_process+0x189>
c000bda8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bdb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bdb4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bdb8:	eb 1b                	jmp    c000bdd5 <sinc_multichan_vari_process+0x169>
c000bdba:	68 00 00 f0 3f       	push   0x3ff00000
c000bdbf:	6a 00                	push   0x0
c000bdc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bdc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bdc9:	e8 59 c9 01 00       	call   c0028727 <__ltdf2>
c000bdce:	83 c4 10             	add    esp,0x10
c000bdd1:	85 c0                	test   eax,eax
c000bdd3:	79 20                	jns    c000bdf5 <sinc_multichan_vari_process+0x189>
c000bdd5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bddd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bde1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bde5:	e8 52 c3 01 00       	call   c002813c <__divdf3>
c000bdea:	83 c4 10             	add    esp,0x10
c000bded:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bdf1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bdf5:	50                   	push   eax
c000bdf6:	50                   	push   eax
c000bdf7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdff:	e8 dc ca 01 00       	call   c00288e0 <lrint>
c000be04:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000be07:	40                   	inc    eax
c000be08:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be0c:	0f af c5             	imul   eax,ebp
c000be0f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000be13:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000be16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1a:	58                   	pop    eax
c000be1b:	5a                   	pop    edx
c000be1c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be24:	e8 b7 ca 01 00       	call   c00288e0 <lrint>
c000be29:	83 ec 0c             	sub    esp,0xc
c000be2c:	50                   	push   eax
c000be2d:	e8 89 c6 01 00       	call   c00284bb <__floatsidf>
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be39:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be3d:	52                   	push   edx
c000be3e:	50                   	push   eax
c000be3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be47:	e8 e0 bf 01 00       	call   c0027e2c <__subdf3>
c000be4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be54:	83 c4 20             	add    esp,0x20
c000be57:	6a 00                	push   0x0
c000be59:	6a 00                	push   0x0
c000be5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be63:	e8 bf c8 01 00       	call   c0028727 <__ltdf2>
c000be68:	83 c4 10             	add    esp,0x10
c000be6b:	85 c0                	test   eax,eax
c000be6d:	79 1f                	jns    c000be8e <sinc_multichan_vari_process+0x222>
c000be6f:	68 00 00 f0 3f       	push   0x3ff00000
c000be74:	6a 00                	push   0x0
c000be76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7e:	e8 58 b9 01 00       	call   c00277db <__adddf3>
c000be83:	83 c4 10             	add    esp,0x10
c000be86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be8e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000be91:	83 ec 10             	sub    esp,0x10
c000be94:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be98:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000be9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bea3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bea7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000beab:	e8 7c bf 01 00       	call   c0027e2c <__subdf3>
c000beb0:	83 c4 18             	add    esp,0x18
c000beb3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000beb7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bebb:	52                   	push   edx
c000bebc:	50                   	push   eax
c000bebd:	e8 1e ca 01 00       	call   c00288e0 <lrint>
c000bec2:	0f af e8             	imul   ebp,eax
c000bec5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bec9:	01 e8                	add    eax,ebp
c000becb:	99                   	cdq    
c000becc:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000becf:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bed2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bed6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000beda:	68 00 00 f0 3f       	push   0x3ff00000
c000bedf:	6a 00                	push   0x0
c000bee1:	e8 56 c2 01 00       	call   c002813c <__divdf3>
c000bee6:	83 c4 10             	add    esp,0x10
c000bee9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bef6:	68 23 42 92 0c       	push   0xc924223
c000befb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000beff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf03:	e8 d3 b8 01 00       	call   c00277db <__adddf3>
c000bf08:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bf0c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bf10:	83 c4 20             	add    esp,0x20
c000bf13:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bf1b:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bf23:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bf26:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bf29:	7d 50                	jge    c000bf7b <sinc_multichan_vari_process+0x30f>
c000bf2b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bf2e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bf31:	01 c8                	add    eax,ecx
c000bf33:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bf36:	99                   	cdq    
c000bf37:	f7 f9                	idiv   ecx
c000bf39:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bf3d:	7d 0c                	jge    c000bf4b <sinc_multichan_vari_process+0x2df>
c000bf3f:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bf42:	85 ed                	test   ebp,ebp
c000bf44:	79 6b                	jns    c000bfb1 <sinc_multichan_vari_process+0x345>
c000bf46:	e9 e6 00 00 00       	jmp    c000c031 <sinc_multichan_vari_process+0x3c5>
c000bf4b:	50                   	push   eax
c000bf4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bf50:	57                   	push   edi
c000bf51:	53                   	push   ebx
c000bf52:	e8 9b fb ff ff       	call   c000baf2 <prepare_data>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	89 c2                	mov    edx,eax
c000bf5c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bf5f:	85 c0                	test   eax,eax
c000bf61:	0f 85 bf 03 00 00    	jne    c000c326 <sinc_multichan_vari_process+0x6ba>
c000bf67:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bf6a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bf6d:	01 c8                	add    eax,ecx
c000bf6f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bf72:	99                   	cdq    
c000bf73:	f7 f9                	idiv   ecx
c000bf75:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bf79:	7c c4                	jl     c000bf3f <sinc_multichan_vari_process+0x2d3>
c000bf7b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bf83:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bf86:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bf89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf8d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bf91:	89 06                	mov    DWORD PTR [esi],eax
c000bf93:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bf96:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bf99:	99                   	cdq    
c000bf9a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bf9d:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bfa0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bfa3:	99                   	cdq    
c000bfa4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bfa7:	31 d2                	xor    edx,edx
c000bfa9:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bfac:	e9 75 03 00 00       	jmp    c000c326 <sinc_multichan_vari_process+0x6ba>
c000bfb1:	83 ec 0c             	sub    esp,0xc
c000bfb4:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bfb7:	e8 ff c4 01 00       	call   c00284bb <__floatsidf>
c000bfbc:	83 c4 10             	add    esp,0x10
c000bfbf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bfc3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bfc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfd7:	e8 ff b7 01 00       	call   c00277db <__adddf3>
c000bfdc:	83 c4 10             	add    esp,0x10
c000bfdf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bfe3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bfe7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bff3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bff7:	e8 df b7 01 00       	call   c00277db <__adddf3>
c000bffc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bfff:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c003:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c007:	e8 af c4 01 00       	call   c00284bb <__floatsidf>
c000c00c:	83 c4 10             	add    esp,0x10
c000c00f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c013:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c017:	52                   	push   edx
c000c018:	50                   	push   eax
c000c019:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c01d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c021:	e8 ff c6 01 00       	call   c0028725 <__gedf2>
c000c026:	83 c4 10             	add    esp,0x10
c000c029:	85 c0                	test   eax,eax
c000c02b:	0f 89 4a ff ff ff    	jns    c000bf7b <sinc_multichan_vari_process+0x30f>
c000c031:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c035:	0f 8e ed 00 00 00    	jle    c000c128 <sinc_multichan_vari_process+0x4bc>
c000c03b:	83 ec 10             	sub    esp,0x10
c000c03e:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000c041:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000c044:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000c047:	ff 36                	push   DWORD PTR [esi]
c000c049:	e8 de bd 01 00       	call   c0027e2c <__subdf3>
c000c04e:	83 c4 18             	add    esp,0x18
c000c051:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c055:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c059:	52                   	push   edx
c000c05a:	50                   	push   eax
c000c05b:	e8 60 c8 01 00       	call   c00288c0 <fabs>
c000c060:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c064:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c068:	83 c4 10             	add    esp,0x10
c000c06b:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c070:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c075:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c079:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c07d:	e8 87 c6 01 00       	call   c0028709 <__gtdf2>
c000c082:	83 c4 10             	add    esp,0x10
c000c085:	85 c0                	test   eax,eax
c000c087:	0f 8e 9b 00 00 00    	jle    c000c128 <sinc_multichan_vari_process+0x4bc>
c000c08d:	8b 06                	mov    eax,DWORD PTR [esi]
c000c08f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000c092:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c096:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c09a:	52                   	push   edx
c000c09b:	50                   	push   eax
c000c09c:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000c09f:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000c0a2:	e8 85 bd 01 00       	call   c0027e2c <__subdf3>
c000c0a7:	59                   	pop    ecx
c000c0a8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0ac:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c0b0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c0b3:	e8 03 c4 01 00       	call   c00284bb <__floatsidf>
c000c0b8:	83 c4 10             	add    esp,0x10
c000c0bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0c3:	52                   	push   edx
c000c0c4:	50                   	push   eax
c000c0c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0cd:	e8 86 bd 01 00       	call   c0027e58 <__muldf3>
c000c0d2:	5d                   	pop    ebp
c000c0d3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0d7:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c0db:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c0de:	e8 d8 c3 01 00       	call   c00284bb <__floatsidf>
c000c0e3:	83 c4 10             	add    esp,0x10
c000c0e6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0ee:	52                   	push   edx
c000c0ef:	50                   	push   eax
c000c0f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c0f8:	e8 3f c0 01 00       	call   c002813c <__divdf3>
c000c0fd:	83 c4 10             	add    esp,0x10
c000c100:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c104:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c108:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c10c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c110:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c114:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c118:	e8 be b6 01 00       	call   c00277db <__adddf3>
c000c11d:	83 c4 10             	add    esp,0x10
c000c120:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c124:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c128:	83 ec 0c             	sub    esp,0xc
c000c12b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c12e:	e8 88 c3 01 00       	call   c00284bb <__floatsidf>
c000c133:	83 c4 10             	add    esp,0x10
c000c136:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c13a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c13e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c14a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c14e:	e8 d4 c5 01 00       	call   c0028727 <__ltdf2>
c000c153:	83 c4 10             	add    esp,0x10
c000c156:	85 c0                	test   eax,eax
c000c158:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c15c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c160:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c164:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c168:	78 10                	js     c000c17a <sinc_multichan_vari_process+0x50e>
c000c16a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c16e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c172:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c176:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c17a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c17e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c182:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c186:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c18a:	e8 c9 bc 01 00       	call   c0027e58 <__muldf3>
c000c18f:	59                   	pop    ecx
c000c190:	5d                   	pop    ebp
c000c191:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c195:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c199:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c19d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c1a1:	e8 25 f9 ff ff       	call   c000bacb <double_to_fp>
c000c1a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1aa:	89 c5                	mov    ebp,eax
c000c1ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1b0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1b8:	e8 9b bc 01 00       	call   c0027e58 <__muldf3>
c000c1bd:	83 c4 18             	add    esp,0x18
c000c1c0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c1c4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c1c8:	52                   	push   edx
c000c1c9:	50                   	push   eax
c000c1ca:	e8 fc f8 ff ff       	call   c000bacb <double_to_fp>
c000c1cf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c1d2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c1d6:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c1d9:	8d 04 90             	lea    eax,[eax+edx*4]
c000c1dc:	50                   	push   eax
c000c1dd:	50                   	push   eax
c000c1de:	50                   	push   eax
c000c1df:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1e2:	e8 d4 c2 01 00       	call   c00284bb <__floatsidf>
c000c1e7:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c1eb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000c1ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c1ff:	e8 38 bf 01 00       	call   c002813c <__divdf3>
c000c204:	83 c4 1c             	add    esp,0x1c
c000c207:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c20b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c20f:	52                   	push   edx
c000c210:	89 ea                	mov    edx,ebp
c000c212:	50                   	push   eax
c000c213:	89 d8                	mov    eax,ebx
c000c215:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c218:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c21c:	e8 69 ed ff ff       	call   c000af8a <calc_output_multi>
c000c221:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c224:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c227:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c22b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c22f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c233:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c237:	e8 00 bf 01 00       	call   c002813c <__divdf3>
c000c23c:	83 c4 10             	add    esp,0x10
c000c23f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c243:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c253:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c257:	e8 7f b5 01 00       	call   c00277db <__adddf3>
c000c25c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c260:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c264:	83 c4 28             	add    esp,0x28
c000c267:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26f:	e8 6c c6 01 00       	call   c00288e0 <lrint>
c000c274:	83 ec 0c             	sub    esp,0xc
c000c277:	50                   	push   eax
c000c278:	e8 3e c2 01 00       	call   c00284bb <__floatsidf>
c000c27d:	83 c4 10             	add    esp,0x10
c000c280:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c284:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c288:	52                   	push   edx
c000c289:	50                   	push   eax
c000c28a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c28e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c292:	e8 95 bb 01 00       	call   c0027e2c <__subdf3>
c000c297:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c29b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29f:	83 c4 20             	add    esp,0x20
c000c2a2:	6a 00                	push   0x0
c000c2a4:	6a 00                	push   0x0
c000c2a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ae:	e8 74 c4 01 00       	call   c0028727 <__ltdf2>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	85 c0                	test   eax,eax
c000c2b8:	79 20                	jns    c000c2da <sinc_multichan_vari_process+0x66e>
c000c2ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ca:	e8 0c b5 01 00       	call   c00277db <__adddf3>
c000c2cf:	83 c4 10             	add    esp,0x10
c000c2d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c2d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c2da:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c2dd:	83 ec 10             	sub    esp,0x10
c000c2e0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c2e4:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c2e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c2f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c2f7:	e8 30 bb 01 00       	call   c0027e2c <__subdf3>
c000c2fc:	83 c4 18             	add    esp,0x18
c000c2ff:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c303:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c307:	52                   	push   edx
c000c308:	50                   	push   eax
c000c309:	e8 d2 c5 01 00       	call   c00288e0 <lrint>
c000c30e:	0f af e8             	imul   ebp,eax
c000c311:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c315:	83 c4 10             	add    esp,0x10
c000c318:	01 e8                	add    eax,ebp
c000c31a:	99                   	cdq    
c000c31b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c31e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c321:	e9 fd fb ff ff       	jmp    c000bf23 <sinc_multichan_vari_process+0x2b7>
c000c326:	83 c4 4c             	add    esp,0x4c
c000c329:	89 d0                	mov    eax,edx
c000c32b:	5b                   	pop    ebx
c000c32c:	5e                   	pop    esi
c000c32d:	5f                   	pop    edi
c000c32e:	5d                   	pop    ebp
c000c32f:	c3                   	ret    

c000c330 <sinc_hex_vari_process>:
c000c330:	55                   	push   ebp
c000c331:	ba 05 00 00 00       	mov    edx,0x5
c000c336:	57                   	push   edi
c000c337:	56                   	push   esi
c000c338:	53                   	push   ebx
c000c339:	83 ec 4c             	sub    esp,0x4c
c000c33c:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c340:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c344:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c347:	85 db                	test   ebx,ebx
c000c349:	0f 84 9c 06 00 00    	je     c000c9eb <sinc_hex_vari_process+0x6bb>
c000c34f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c352:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c355:	0f af c7             	imul   eax,edi
c000c358:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c35b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c35e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c365:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c36c:	0f af c7             	imul   eax,edi
c000c36f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c372:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c375:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c378:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c37c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c380:	68 00 00 70 3f       	push   0x3f700000
c000c385:	6a 00                	push   0x0
c000c387:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c38f:	e8 93 c3 01 00       	call   c0028727 <__ltdf2>
c000c394:	83 c4 10             	add    esp,0x10
c000c397:	ba 16 00 00 00       	mov    edx,0x16
c000c39c:	85 c0                	test   eax,eax
c000c39e:	0f 88 47 06 00 00    	js     c000c9eb <sinc_hex_vari_process+0x6bb>
c000c3a4:	68 00 00 70 40       	push   0x40700000
c000c3a9:	6a 00                	push   0x0
c000c3ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3b3:	e8 51 c3 01 00       	call   c0028709 <__gtdf2>
c000c3b8:	83 c4 10             	add    esp,0x10
c000c3bb:	ba 16 00 00 00       	mov    edx,0x16
c000c3c0:	85 c0                	test   eax,eax
c000c3c2:	0f 8f 23 06 00 00    	jg     c000c9eb <sinc_hex_vari_process+0x6bb>
c000c3c8:	83 ec 0c             	sub    esp,0xc
c000c3cb:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c3ce:	e8 e8 c0 01 00       	call   c00284bb <__floatsidf>
c000c3d3:	83 c4 10             	add    esp,0x10
c000c3d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c3da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c3de:	68 00 00 00 40       	push   0x40000000
c000c3e3:	6a 00                	push   0x0
c000c3e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3ed:	e8 e9 b3 01 00       	call   c00277db <__adddf3>
c000c3f2:	59                   	pop    ecx
c000c3f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c3f7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c3fb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3fe:	e8 b8 c0 01 00       	call   c00284bb <__floatsidf>
c000c403:	83 c4 10             	add    esp,0x10
c000c406:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c40a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c40e:	52                   	push   edx
c000c40f:	50                   	push   eax
c000c410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c418:	e8 1f bd 01 00       	call   c002813c <__divdf3>
c000c41d:	83 c4 10             	add    esp,0x10
c000c420:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c424:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c428:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c42b:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c42e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c432:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c436:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c43a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c43e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c442:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c446:	e8 be c2 01 00       	call   c0028709 <__gtdf2>
c000c44b:	83 c4 10             	add    esp,0x10
c000c44e:	85 c0                	test   eax,eax
c000c450:	7e 2d                	jle    c000c47f <sinc_hex_vari_process+0x14f>
c000c452:	68 00 00 f0 3f       	push   0x3ff00000
c000c457:	6a 00                	push   0x0
c000c459:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c45d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c461:	e8 c1 c2 01 00       	call   c0028727 <__ltdf2>
c000c466:	83 c4 10             	add    esp,0x10
c000c469:	85 c0                	test   eax,eax
c000c46b:	79 4d                	jns    c000c4ba <sinc_hex_vari_process+0x18a>
c000c46d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c471:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c475:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c479:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c47d:	eb 1b                	jmp    c000c49a <sinc_hex_vari_process+0x16a>
c000c47f:	68 00 00 f0 3f       	push   0x3ff00000
c000c484:	6a 00                	push   0x0
c000c486:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c48a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c48e:	e8 94 c2 01 00       	call   c0028727 <__ltdf2>
c000c493:	83 c4 10             	add    esp,0x10
c000c496:	85 c0                	test   eax,eax
c000c498:	79 20                	jns    c000c4ba <sinc_hex_vari_process+0x18a>
c000c49a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c49e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c4a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4aa:	e8 8d bc 01 00       	call   c002813c <__divdf3>
c000c4af:	83 c4 10             	add    esp,0x10
c000c4b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4b6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c4ba:	50                   	push   eax
c000c4bb:	50                   	push   eax
c000c4bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4c4:	e8 17 c4 01 00       	call   c00288e0 <lrint>
c000c4c9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c4cc:	40                   	inc    eax
c000c4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4d1:	0f af c7             	imul   eax,edi
c000c4d4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c4d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4df:	58                   	pop    eax
c000c4e0:	5a                   	pop    edx
c000c4e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4e9:	e8 f2 c3 01 00       	call   c00288e0 <lrint>
c000c4ee:	83 ec 0c             	sub    esp,0xc
c000c4f1:	50                   	push   eax
c000c4f2:	e8 c4 bf 01 00       	call   c00284bb <__floatsidf>
c000c4f7:	83 c4 10             	add    esp,0x10
c000c4fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4fe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c502:	52                   	push   edx
c000c503:	50                   	push   eax
c000c504:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c508:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c50c:	e8 1b b9 01 00       	call   c0027e2c <__subdf3>
c000c511:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c515:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c519:	83 c4 20             	add    esp,0x20
c000c51c:	6a 00                	push   0x0
c000c51e:	6a 00                	push   0x0
c000c520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c528:	e8 fa c1 01 00       	call   c0028727 <__ltdf2>
c000c52d:	83 c4 10             	add    esp,0x10
c000c530:	85 c0                	test   eax,eax
c000c532:	79 1f                	jns    c000c553 <sinc_hex_vari_process+0x223>
c000c534:	68 00 00 f0 3f       	push   0x3ff00000
c000c539:	6a 00                	push   0x0
c000c53b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c53f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c543:	e8 93 b2 01 00       	call   c00277db <__adddf3>
c000c548:	83 c4 10             	add    esp,0x10
c000c54b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c54f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c553:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c556:	83 ec 10             	sub    esp,0x10
c000c559:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c55d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c568:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c56c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c570:	e8 b7 b8 01 00       	call   c0027e2c <__subdf3>
c000c575:	83 c4 18             	add    esp,0x18
c000c578:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c57c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	e8 59 c3 01 00       	call   c00288e0 <lrint>
c000c587:	0f af f8             	imul   edi,eax
c000c58a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c58e:	01 f8                	add    eax,edi
c000c590:	99                   	cdq    
c000c591:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c594:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c597:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c59b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c59f:	68 00 00 f0 3f       	push   0x3ff00000
c000c5a4:	6a 00                	push   0x0
c000c5a6:	e8 91 bb 01 00       	call   c002813c <__divdf3>
c000c5ab:	83 c4 10             	add    esp,0x10
c000c5ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c5bb:	68 23 42 92 0c       	push   0xc924223
c000c5c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c5c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c5c8:	e8 0e b2 01 00       	call   c00277db <__adddf3>
c000c5cd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c5d1:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c5d5:	83 c4 20             	add    esp,0x20
c000c5d8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c5e0:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c5e8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c5eb:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c5ee:	7d 50                	jge    c000c640 <sinc_hex_vari_process+0x310>
c000c5f0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c5f3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c5f6:	01 c8                	add    eax,ecx
c000c5f8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c5fb:	99                   	cdq    
c000c5fc:	f7 f9                	idiv   ecx
c000c5fe:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c602:	7d 0c                	jge    c000c610 <sinc_hex_vari_process+0x2e0>
c000c604:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c607:	85 ff                	test   edi,edi
c000c609:	79 6c                	jns    c000c677 <sinc_hex_vari_process+0x347>
c000c60b:	e9 e7 00 00 00       	jmp    c000c6f7 <sinc_hex_vari_process+0x3c7>
c000c610:	50                   	push   eax
c000c611:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c615:	56                   	push   esi
c000c616:	53                   	push   ebx
c000c617:	e8 d6 f4 ff ff       	call   c000baf2 <prepare_data>
c000c61c:	83 c4 10             	add    esp,0x10
c000c61f:	89 c2                	mov    edx,eax
c000c621:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c624:	85 c0                	test   eax,eax
c000c626:	0f 85 bf 03 00 00    	jne    c000c9eb <sinc_hex_vari_process+0x6bb>
c000c62c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c62f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c632:	01 c8                	add    eax,ecx
c000c634:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c637:	99                   	cdq    
c000c638:	f7 f9                	idiv   ecx
c000c63a:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c63e:	7c c4                	jl     c000c604 <sinc_hex_vari_process+0x2d4>
c000c640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c644:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c648:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c64b:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c652:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c656:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c659:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c65c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c65f:	99                   	cdq    
c000c660:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c663:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c666:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c669:	99                   	cdq    
c000c66a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c66d:	31 d2                	xor    edx,edx
c000c66f:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c672:	e9 74 03 00 00       	jmp    c000c9eb <sinc_hex_vari_process+0x6bb>
c000c677:	83 ec 0c             	sub    esp,0xc
c000c67a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c67d:	e8 39 be 01 00       	call   c00284bb <__floatsidf>
c000c682:	83 c4 10             	add    esp,0x10
c000c685:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c689:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c68d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c691:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c695:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c699:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c69d:	e8 39 b1 01 00       	call   c00277db <__adddf3>
c000c6a2:	83 c4 10             	add    esp,0x10
c000c6a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c6a9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c6ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6bd:	e8 19 b1 01 00       	call   c00277db <__adddf3>
c000c6c2:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c6c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6c9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6cd:	e8 e9 bd 01 00       	call   c00284bb <__floatsidf>
c000c6d2:	83 c4 10             	add    esp,0x10
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	50                   	push   eax
c000c6df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6e7:	e8 39 c0 01 00       	call   c0028725 <__gedf2>
c000c6ec:	83 c4 10             	add    esp,0x10
c000c6ef:	85 c0                	test   eax,eax
c000c6f1:	0f 89 49 ff ff ff    	jns    c000c640 <sinc_hex_vari_process+0x310>
c000c6f7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c6fb:	0f 8e ef 00 00 00    	jle    c000c7f0 <sinc_hex_vari_process+0x4c0>
c000c701:	83 ec 10             	sub    esp,0x10
c000c704:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c707:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c70a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c70d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c710:	e8 17 b7 01 00       	call   c0027e2c <__subdf3>
c000c715:	83 c4 18             	add    esp,0x18
c000c718:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c71c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c720:	52                   	push   edx
c000c721:	50                   	push   eax
c000c722:	e8 99 c1 01 00       	call   c00288c0 <fabs>
c000c727:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c72b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c72f:	83 c4 10             	add    esp,0x10
c000c732:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c737:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c73c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c740:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c744:	e8 c0 bf 01 00       	call   c0028709 <__gtdf2>
c000c749:	83 c4 10             	add    esp,0x10
c000c74c:	85 c0                	test   eax,eax
c000c74e:	0f 8e 9c 00 00 00    	jle    c000c7f0 <sinc_hex_vari_process+0x4c0>
c000c754:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c757:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c75a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c75e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c762:	52                   	push   edx
c000c763:	50                   	push   eax
c000c764:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c767:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c76a:	e8 bd b6 01 00       	call   c0027e2c <__subdf3>
c000c76f:	59                   	pop    ecx
c000c770:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c774:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c778:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c77b:	e8 3b bd 01 00       	call   c00284bb <__floatsidf>
c000c780:	83 c4 10             	add    esp,0x10
c000c783:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c787:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c78b:	52                   	push   edx
c000c78c:	50                   	push   eax
c000c78d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c791:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c795:	e8 be b6 01 00       	call   c0027e58 <__muldf3>
c000c79a:	5f                   	pop    edi
c000c79b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c79f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c7a3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c7a6:	e8 10 bd 01 00       	call   c00284bb <__floatsidf>
c000c7ab:	83 c4 10             	add    esp,0x10
c000c7ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7b6:	52                   	push   edx
c000c7b7:	50                   	push   eax
c000c7b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7c0:	e8 77 b9 01 00       	call   c002813c <__divdf3>
c000c7c5:	83 c4 10             	add    esp,0x10
c000c7c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c7cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c7d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7e0:	e8 f6 af 01 00       	call   c00277db <__adddf3>
c000c7e5:	83 c4 10             	add    esp,0x10
c000c7e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c7ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c7f0:	83 ec 0c             	sub    esp,0xc
c000c7f3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c7f6:	e8 c0 bc 01 00       	call   c00284bb <__floatsidf>
c000c7fb:	83 c4 10             	add    esp,0x10
c000c7fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c802:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c80a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c80e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c816:	e8 0c bf 01 00       	call   c0028727 <__ltdf2>
c000c81b:	83 c4 10             	add    esp,0x10
c000c81e:	85 c0                	test   eax,eax
c000c820:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c824:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c828:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c82c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c830:	78 10                	js     c000c842 <sinc_hex_vari_process+0x512>
c000c832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c836:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c83a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c83e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c842:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c846:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c84a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c84e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c852:	e8 01 b6 01 00       	call   c0027e58 <__muldf3>
c000c857:	59                   	pop    ecx
c000c858:	5f                   	pop    edi
c000c859:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c85d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c861:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c865:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c869:	e8 5d f2 ff ff       	call   c000bacb <double_to_fp>
c000c86e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c872:	89 c7                	mov    edi,eax
c000c874:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c878:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c87c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c880:	e8 d3 b5 01 00       	call   c0027e58 <__muldf3>
c000c885:	83 c4 18             	add    esp,0x18
c000c888:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c88c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c890:	52                   	push   edx
c000c891:	50                   	push   eax
c000c892:	e8 34 f2 ff ff       	call   c000bacb <double_to_fp>
c000c897:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c89a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c89e:	83 c4 0c             	add    esp,0xc
c000c8a1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c8a4:	8d 04 90             	lea    eax,[eax+edx*4]
c000c8a7:	50                   	push   eax
c000c8a8:	50                   	push   eax
c000c8a9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8ac:	e8 0a bc 01 00       	call   c00284bb <__floatsidf>
c000c8b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c8b5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c8b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c9:	e8 6e b8 01 00       	call   c002813c <__divdf3>
c000c8ce:	83 c4 18             	add    esp,0x18
c000c8d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c8d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c8d9:	52                   	push   edx
c000c8da:	89 fa                	mov    edx,edi
c000c8dc:	50                   	push   eax
c000c8dd:	89 d8                	mov    eax,ebx
c000c8df:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c8e3:	e8 50 de ff ff       	call   c000a738 <calc_output_hex>
c000c8e8:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c8ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c8f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c8fc:	e8 3b b8 01 00       	call   c002813c <__divdf3>
c000c901:	83 c4 10             	add    esp,0x10
c000c904:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c908:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c90c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c914:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c918:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c91c:	e8 ba ae 01 00       	call   c00277db <__adddf3>
c000c921:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c925:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c929:	83 c4 18             	add    esp,0x18
c000c92c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c930:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c934:	e8 a7 bf 01 00       	call   c00288e0 <lrint>
c000c939:	83 ec 0c             	sub    esp,0xc
c000c93c:	50                   	push   eax
c000c93d:	e8 79 bb 01 00       	call   c00284bb <__floatsidf>
c000c942:	83 c4 10             	add    esp,0x10
c000c945:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c949:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c94d:	52                   	push   edx
c000c94e:	50                   	push   eax
c000c94f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c953:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c957:	e8 d0 b4 01 00       	call   c0027e2c <__subdf3>
c000c95c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c960:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c964:	83 c4 20             	add    esp,0x20
c000c967:	6a 00                	push   0x0
c000c969:	6a 00                	push   0x0
c000c96b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c96f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c973:	e8 af bd 01 00       	call   c0028727 <__ltdf2>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	85 c0                	test   eax,eax
c000c97d:	79 20                	jns    c000c99f <sinc_hex_vari_process+0x66f>
c000c97f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c983:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c987:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c98b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c98f:	e8 47 ae 01 00       	call   c00277db <__adddf3>
c000c994:	83 c4 10             	add    esp,0x10
c000c997:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c99b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c99f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9a2:	83 ec 10             	sub    esp,0x10
c000c9a5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c9a9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9b4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9bc:	e8 6b b4 01 00       	call   c0027e2c <__subdf3>
c000c9c1:	83 c4 18             	add    esp,0x18
c000c9c4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9cc:	52                   	push   edx
c000c9cd:	50                   	push   eax
c000c9ce:	e8 0d bf 01 00       	call   c00288e0 <lrint>
c000c9d3:	0f af f8             	imul   edi,eax
c000c9d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c9da:	83 c4 10             	add    esp,0x10
c000c9dd:	01 f8                	add    eax,edi
c000c9df:	99                   	cdq    
c000c9e0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c9e3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c9e6:	e9 fd fb ff ff       	jmp    c000c5e8 <sinc_hex_vari_process+0x2b8>
c000c9eb:	83 c4 4c             	add    esp,0x4c
c000c9ee:	89 d0                	mov    eax,edx
c000c9f0:	5b                   	pop    ebx
c000c9f1:	5e                   	pop    esi
c000c9f2:	5f                   	pop    edi
c000c9f3:	5d                   	pop    ebp
c000c9f4:	c3                   	ret    

c000c9f5 <sinc_quad_vari_process>:
c000c9f5:	55                   	push   ebp
c000c9f6:	ba 05 00 00 00       	mov    edx,0x5
c000c9fb:	57                   	push   edi
c000c9fc:	56                   	push   esi
c000c9fd:	53                   	push   ebx
c000c9fe:	83 ec 4c             	sub    esp,0x4c
c000ca01:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ca05:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ca09:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ca0c:	85 db                	test   ebx,ebx
c000ca0e:	0f 84 9c 06 00 00    	je     c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ca14:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000ca17:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca1a:	0f af c7             	imul   eax,edi
c000ca1d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ca20:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ca23:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ca2a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ca31:	0f af c7             	imul   eax,edi
c000ca34:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ca37:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ca3a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ca3d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca41:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca45:	68 00 00 70 3f       	push   0x3f700000
c000ca4a:	6a 00                	push   0x0
c000ca4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca54:	e8 ce bc 01 00       	call   c0028727 <__ltdf2>
c000ca59:	83 c4 10             	add    esp,0x10
c000ca5c:	ba 16 00 00 00       	mov    edx,0x16
c000ca61:	85 c0                	test   eax,eax
c000ca63:	0f 88 47 06 00 00    	js     c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ca69:	68 00 00 70 40       	push   0x40700000
c000ca6e:	6a 00                	push   0x0
c000ca70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca78:	e8 8c bc 01 00       	call   c0028709 <__gtdf2>
c000ca7d:	83 c4 10             	add    esp,0x10
c000ca80:	ba 16 00 00 00       	mov    edx,0x16
c000ca85:	85 c0                	test   eax,eax
c000ca87:	0f 8f 23 06 00 00    	jg     c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ca8d:	83 ec 0c             	sub    esp,0xc
c000ca90:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ca93:	e8 23 ba 01 00       	call   c00284bb <__floatsidf>
c000ca98:	83 c4 10             	add    esp,0x10
c000ca9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000caa3:	68 00 00 00 40       	push   0x40000000
c000caa8:	6a 00                	push   0x0
c000caaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000caae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cab2:	e8 24 ad 01 00       	call   c00277db <__adddf3>
c000cab7:	59                   	pop    ecx
c000cab8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cabc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cac0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cac3:	e8 f3 b9 01 00       	call   c00284bb <__floatsidf>
c000cac8:	83 c4 10             	add    esp,0x10
c000cacb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cacf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cad3:	52                   	push   edx
c000cad4:	50                   	push   eax
c000cad5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cad9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cadd:	e8 5a b6 01 00       	call   c002813c <__divdf3>
c000cae2:	83 c4 10             	add    esp,0x10
c000cae5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cae9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000caed:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000caf0:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000caf3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000caf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cafb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000caff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb0b:	e8 f9 bb 01 00       	call   c0028709 <__gtdf2>
c000cb10:	83 c4 10             	add    esp,0x10
c000cb13:	85 c0                	test   eax,eax
c000cb15:	7e 2d                	jle    c000cb44 <sinc_quad_vari_process+0x14f>
c000cb17:	68 00 00 f0 3f       	push   0x3ff00000
c000cb1c:	6a 00                	push   0x0
c000cb1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb26:	e8 fc bb 01 00       	call   c0028727 <__ltdf2>
c000cb2b:	83 c4 10             	add    esp,0x10
c000cb2e:	85 c0                	test   eax,eax
c000cb30:	79 4d                	jns    c000cb7f <sinc_quad_vari_process+0x18a>
c000cb32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb36:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cb42:	eb 1b                	jmp    c000cb5f <sinc_quad_vari_process+0x16a>
c000cb44:	68 00 00 f0 3f       	push   0x3ff00000
c000cb49:	6a 00                	push   0x0
c000cb4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb53:	e8 cf bb 01 00       	call   c0028727 <__ltdf2>
c000cb58:	83 c4 10             	add    esp,0x10
c000cb5b:	85 c0                	test   eax,eax
c000cb5d:	79 20                	jns    c000cb7f <sinc_quad_vari_process+0x18a>
c000cb5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6f:	e8 c8 b5 01 00       	call   c002813c <__divdf3>
c000cb74:	83 c4 10             	add    esp,0x10
c000cb77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cb7b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cb7f:	50                   	push   eax
c000cb80:	50                   	push   eax
c000cb81:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb85:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb89:	e8 52 bd 01 00       	call   c00288e0 <lrint>
c000cb8e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000cb91:	40                   	inc    eax
c000cb92:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb96:	0f af c7             	imul   eax,edi
c000cb99:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000cb9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cba0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba4:	58                   	pop    eax
c000cba5:	5a                   	pop    edx
c000cba6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbaa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbae:	e8 2d bd 01 00       	call   c00288e0 <lrint>
c000cbb3:	83 ec 0c             	sub    esp,0xc
c000cbb6:	50                   	push   eax
c000cbb7:	e8 ff b8 01 00       	call   c00284bb <__floatsidf>
c000cbbc:	83 c4 10             	add    esp,0x10
c000cbbf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbc3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbc7:	52                   	push   edx
c000cbc8:	50                   	push   eax
c000cbc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbcd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbd1:	e8 56 b2 01 00       	call   c0027e2c <__subdf3>
c000cbd6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbda:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbde:	83 c4 20             	add    esp,0x20
c000cbe1:	6a 00                	push   0x0
c000cbe3:	6a 00                	push   0x0
c000cbe5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbe9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbed:	e8 35 bb 01 00       	call   c0028727 <__ltdf2>
c000cbf2:	83 c4 10             	add    esp,0x10
c000cbf5:	85 c0                	test   eax,eax
c000cbf7:	79 1f                	jns    c000cc18 <sinc_quad_vari_process+0x223>
c000cbf9:	68 00 00 f0 3f       	push   0x3ff00000
c000cbfe:	6a 00                	push   0x0
c000cc00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc08:	e8 ce ab 01 00       	call   c00277db <__adddf3>
c000cc0d:	83 c4 10             	add    esp,0x10
c000cc10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc18:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc1b:	83 ec 10             	sub    esp,0x10
c000cc1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cc22:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc2d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc35:	e8 f2 b1 01 00       	call   c0027e2c <__subdf3>
c000cc3a:	83 c4 18             	add    esp,0x18
c000cc3d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	e8 94 bc 01 00       	call   c00288e0 <lrint>
c000cc4c:	0f af f8             	imul   edi,eax
c000cc4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cc53:	01 f8                	add    eax,edi
c000cc55:	99                   	cdq    
c000cc56:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc59:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc5c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc64:	68 00 00 f0 3f       	push   0x3ff00000
c000cc69:	6a 00                	push   0x0
c000cc6b:	e8 cc b4 01 00       	call   c002813c <__divdf3>
c000cc70:	83 c4 10             	add    esp,0x10
c000cc73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc77:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cc80:	68 23 42 92 0c       	push   0xc924223
c000cc85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc8d:	e8 49 ab 01 00       	call   c00277db <__adddf3>
c000cc92:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cc96:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cc9a:	83 c4 20             	add    esp,0x20
c000cc9d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cca5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ccad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ccb0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ccb3:	7d 50                	jge    c000cd05 <sinc_quad_vari_process+0x310>
c000ccb5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ccb8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ccbb:	01 c8                	add    eax,ecx
c000ccbd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ccc0:	99                   	cdq    
c000ccc1:	f7 f9                	idiv   ecx
c000ccc3:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ccc7:	7d 0c                	jge    c000ccd5 <sinc_quad_vari_process+0x2e0>
c000ccc9:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cccc:	85 ff                	test   edi,edi
c000ccce:	79 6c                	jns    c000cd3c <sinc_quad_vari_process+0x347>
c000ccd0:	e9 e7 00 00 00       	jmp    c000cdbc <sinc_quad_vari_process+0x3c7>
c000ccd5:	50                   	push   eax
c000ccd6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ccda:	56                   	push   esi
c000ccdb:	53                   	push   ebx
c000ccdc:	e8 11 ee ff ff       	call   c000baf2 <prepare_data>
c000cce1:	83 c4 10             	add    esp,0x10
c000cce4:	89 c2                	mov    edx,eax
c000cce6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cce9:	85 c0                	test   eax,eax
c000cceb:	0f 85 bf 03 00 00    	jne    c000d0b0 <sinc_quad_vari_process+0x6bb>
c000ccf1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ccf4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ccf7:	01 c8                	add    eax,ecx
c000ccf9:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ccfc:	99                   	cdq    
c000ccfd:	f7 f9                	idiv   ecx
c000ccff:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cd03:	7c c4                	jl     c000ccc9 <sinc_quad_vari_process+0x2d4>
c000cd05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd09:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cd0d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cd10:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd17:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cd1b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cd1e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cd21:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cd24:	99                   	cdq    
c000cd25:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd28:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cd2b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cd2e:	99                   	cdq    
c000cd2f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd32:	31 d2                	xor    edx,edx
c000cd34:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cd37:	e9 74 03 00 00       	jmp    c000d0b0 <sinc_quad_vari_process+0x6bb>
c000cd3c:	83 ec 0c             	sub    esp,0xc
c000cd3f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cd42:	e8 74 b7 01 00       	call   c00284bb <__floatsidf>
c000cd47:	83 c4 10             	add    esp,0x10
c000cd4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd4e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cd56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cd5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd62:	e8 74 aa 01 00       	call   c00277db <__adddf3>
c000cd67:	83 c4 10             	add    esp,0x10
c000cd6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd72:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd82:	e8 54 aa 01 00       	call   c00277db <__adddf3>
c000cd87:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cd8a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd8e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd92:	e8 24 b7 01 00       	call   c00284bb <__floatsidf>
c000cd97:	83 c4 10             	add    esp,0x10
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	50                   	push   eax
c000cda4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cda8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdac:	e8 74 b9 01 00       	call   c0028725 <__gedf2>
c000cdb1:	83 c4 10             	add    esp,0x10
c000cdb4:	85 c0                	test   eax,eax
c000cdb6:	0f 89 49 ff ff ff    	jns    c000cd05 <sinc_quad_vari_process+0x310>
c000cdbc:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cdc0:	0f 8e ef 00 00 00    	jle    c000ceb5 <sinc_quad_vari_process+0x4c0>
c000cdc6:	83 ec 10             	sub    esp,0x10
c000cdc9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cdcc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cdcf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cdd2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cdd5:	e8 52 b0 01 00       	call   c0027e2c <__subdf3>
c000cdda:	83 c4 18             	add    esp,0x18
c000cddd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cde1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cde5:	52                   	push   edx
c000cde6:	50                   	push   eax
c000cde7:	e8 d4 ba 01 00       	call   c00288c0 <fabs>
c000cdec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdf0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdf4:	83 c4 10             	add    esp,0x10
c000cdf7:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cdfc:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000ce01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce09:	e8 fb b8 01 00       	call   c0028709 <__gtdf2>
c000ce0e:	83 c4 10             	add    esp,0x10
c000ce11:	85 c0                	test   eax,eax
c000ce13:	0f 8e 9c 00 00 00    	jle    c000ceb5 <sinc_quad_vari_process+0x4c0>
c000ce19:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce1c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ce1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce23:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ce27:	52                   	push   edx
c000ce28:	50                   	push   eax
c000ce29:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ce2c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ce2f:	e8 f8 af 01 00       	call   c0027e2c <__subdf3>
c000ce34:	59                   	pop    ecx
c000ce35:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ce39:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ce3d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ce40:	e8 76 b6 01 00       	call   c00284bb <__floatsidf>
c000ce45:	83 c4 10             	add    esp,0x10
c000ce48:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce4c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce50:	52                   	push   edx
c000ce51:	50                   	push   eax
c000ce52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce5a:	e8 f9 af 01 00       	call   c0027e58 <__muldf3>
c000ce5f:	5f                   	pop    edi
c000ce60:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ce64:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ce68:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ce6b:	e8 4b b6 01 00       	call   c00284bb <__floatsidf>
c000ce70:	83 c4 10             	add    esp,0x10
c000ce73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce77:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce7b:	52                   	push   edx
c000ce7c:	50                   	push   eax
c000ce7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce85:	e8 b2 b2 01 00       	call   c002813c <__divdf3>
c000ce8a:	83 c4 10             	add    esp,0x10
c000ce8d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ce91:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ce95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cea1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cea5:	e8 31 a9 01 00       	call   c00277db <__adddf3>
c000ceaa:	83 c4 10             	add    esp,0x10
c000cead:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ceb1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ceb5:	83 ec 0c             	sub    esp,0xc
c000ceb8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cebb:	e8 fb b5 01 00       	call   c00284bb <__floatsidf>
c000cec0:	83 c4 10             	add    esp,0x10
c000cec3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cec7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cecb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cecf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedb:	e8 47 b8 01 00       	call   c0028727 <__ltdf2>
c000cee0:	83 c4 10             	add    esp,0x10
c000cee3:	85 c0                	test   eax,eax
c000cee5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cee9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ceed:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000cef1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cef5:	78 10                	js     c000cf07 <sinc_quad_vari_process+0x512>
c000cef7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cefb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ceff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cf03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cf07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf0f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf17:	e8 3c af 01 00       	call   c0027e58 <__muldf3>
c000cf1c:	59                   	pop    ecx
c000cf1d:	5f                   	pop    edi
c000cf1e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf2e:	e8 98 eb ff ff       	call   c000bacb <double_to_fp>
c000cf33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf37:	89 c7                	mov    edi,eax
c000cf39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf3d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf45:	e8 0e af 01 00       	call   c0027e58 <__muldf3>
c000cf4a:	83 c4 18             	add    esp,0x18
c000cf4d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cf51:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cf55:	52                   	push   edx
c000cf56:	50                   	push   eax
c000cf57:	e8 6f eb ff ff       	call   c000bacb <double_to_fp>
c000cf5c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cf5f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cf63:	83 c4 0c             	add    esp,0xc
c000cf66:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cf69:	8d 04 90             	lea    eax,[eax+edx*4]
c000cf6c:	50                   	push   eax
c000cf6d:	50                   	push   eax
c000cf6e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf71:	e8 45 b5 01 00       	call   c00284bb <__floatsidf>
c000cf76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cf7a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cf7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf8e:	e8 a9 b1 01 00       	call   c002813c <__divdf3>
c000cf93:	83 c4 18             	add    esp,0x18
c000cf96:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf9e:	52                   	push   edx
c000cf9f:	89 fa                	mov    edx,edi
c000cfa1:	50                   	push   eax
c000cfa2:	89 d8                	mov    eax,ebx
c000cfa4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cfa8:	e8 a5 d1 ff ff       	call   c000a152 <calc_output_quad>
c000cfad:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cfb1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cfb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cfb9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfc1:	e8 76 b1 01 00       	call   c002813c <__divdf3>
c000cfc6:	83 c4 10             	add    esp,0x10
c000cfc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cfcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cfd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfd9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfdd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfe1:	e8 f5 a7 01 00       	call   c00277db <__adddf3>
c000cfe6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cfea:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cfee:	83 c4 18             	add    esp,0x18
c000cff1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff9:	e8 e2 b8 01 00       	call   c00288e0 <lrint>
c000cffe:	83 ec 0c             	sub    esp,0xc
c000d001:	50                   	push   eax
c000d002:	e8 b4 b4 01 00       	call   c00284bb <__floatsidf>
c000d007:	83 c4 10             	add    esp,0x10
c000d00a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d012:	52                   	push   edx
c000d013:	50                   	push   eax
c000d014:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d018:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d01c:	e8 0b ae 01 00       	call   c0027e2c <__subdf3>
c000d021:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d025:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d029:	83 c4 20             	add    esp,0x20
c000d02c:	6a 00                	push   0x0
c000d02e:	6a 00                	push   0x0
c000d030:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d034:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d038:	e8 ea b6 01 00       	call   c0028727 <__ltdf2>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	85 c0                	test   eax,eax
c000d042:	79 20                	jns    c000d064 <sinc_quad_vari_process+0x66f>
c000d044:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d04c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d050:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d054:	e8 82 a7 01 00       	call   c00277db <__adddf3>
c000d059:	83 c4 10             	add    esp,0x10
c000d05c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d060:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d064:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d067:	83 ec 10             	sub    esp,0x10
c000d06a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d06e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d071:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d075:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d079:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d07d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d081:	e8 a6 ad 01 00       	call   c0027e2c <__subdf3>
c000d086:	83 c4 18             	add    esp,0x18
c000d089:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d08d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d091:	52                   	push   edx
c000d092:	50                   	push   eax
c000d093:	e8 48 b8 01 00       	call   c00288e0 <lrint>
c000d098:	0f af f8             	imul   edi,eax
c000d09b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d09f:	83 c4 10             	add    esp,0x10
c000d0a2:	01 f8                	add    eax,edi
c000d0a4:	99                   	cdq    
c000d0a5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0a8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0ab:	e9 fd fb ff ff       	jmp    c000ccad <sinc_quad_vari_process+0x2b8>
c000d0b0:	83 c4 4c             	add    esp,0x4c
c000d0b3:	89 d0                	mov    eax,edx
c000d0b5:	5b                   	pop    ebx
c000d0b6:	5e                   	pop    esi
c000d0b7:	5f                   	pop    edi
c000d0b8:	5d                   	pop    ebp
c000d0b9:	c3                   	ret    

c000d0ba <sinc_stereo_vari_process>:
c000d0ba:	55                   	push   ebp
c000d0bb:	ba 05 00 00 00       	mov    edx,0x5
c000d0c0:	57                   	push   edi
c000d0c1:	56                   	push   esi
c000d0c2:	53                   	push   ebx
c000d0c3:	83 ec 4c             	sub    esp,0x4c
c000d0c6:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000d0ca:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d0ce:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000d0d1:	85 db                	test   ebx,ebx
c000d0d3:	0f 84 9c 06 00 00    	je     c000d775 <sinc_stereo_vari_process+0x6bb>
c000d0d9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d0dc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0df:	0f af c7             	imul   eax,edi
c000d0e2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d0e5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d0e8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d0ef:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d0f6:	0f af c7             	imul   eax,edi
c000d0f9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d0fc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d0ff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d102:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d106:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d10a:	68 00 00 70 3f       	push   0x3f700000
c000d10f:	6a 00                	push   0x0
c000d111:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d115:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d119:	e8 09 b6 01 00       	call   c0028727 <__ltdf2>
c000d11e:	83 c4 10             	add    esp,0x10
c000d121:	ba 16 00 00 00       	mov    edx,0x16
c000d126:	85 c0                	test   eax,eax
c000d128:	0f 88 47 06 00 00    	js     c000d775 <sinc_stereo_vari_process+0x6bb>
c000d12e:	68 00 00 70 40       	push   0x40700000
c000d133:	6a 00                	push   0x0
c000d135:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d139:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d13d:	e8 c7 b5 01 00       	call   c0028709 <__gtdf2>
c000d142:	83 c4 10             	add    esp,0x10
c000d145:	ba 16 00 00 00       	mov    edx,0x16
c000d14a:	85 c0                	test   eax,eax
c000d14c:	0f 8f 23 06 00 00    	jg     c000d775 <sinc_stereo_vari_process+0x6bb>
c000d152:	83 ec 0c             	sub    esp,0xc
c000d155:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d158:	e8 5e b3 01 00       	call   c00284bb <__floatsidf>
c000d15d:	83 c4 10             	add    esp,0x10
c000d160:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d164:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d168:	68 00 00 00 40       	push   0x40000000
c000d16d:	6a 00                	push   0x0
c000d16f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d173:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d177:	e8 5f a6 01 00       	call   c00277db <__adddf3>
c000d17c:	59                   	pop    ecx
c000d17d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d181:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d185:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d188:	e8 2e b3 01 00       	call   c00284bb <__floatsidf>
c000d18d:	83 c4 10             	add    esp,0x10
c000d190:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d194:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d198:	52                   	push   edx
c000d199:	50                   	push   eax
c000d19a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d19e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1a2:	e8 95 af 01 00       	call   c002813c <__divdf3>
c000d1a7:	83 c4 10             	add    esp,0x10
c000d1aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d1ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d1b2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d1b5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d1b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d1bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d1c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1d0:	e8 34 b5 01 00       	call   c0028709 <__gtdf2>
c000d1d5:	83 c4 10             	add    esp,0x10
c000d1d8:	85 c0                	test   eax,eax
c000d1da:	7e 2d                	jle    c000d209 <sinc_stereo_vari_process+0x14f>
c000d1dc:	68 00 00 f0 3f       	push   0x3ff00000
c000d1e1:	6a 00                	push   0x0
c000d1e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1eb:	e8 37 b5 01 00       	call   c0028727 <__ltdf2>
c000d1f0:	83 c4 10             	add    esp,0x10
c000d1f3:	85 c0                	test   eax,eax
c000d1f5:	79 4d                	jns    c000d244 <sinc_stereo_vari_process+0x18a>
c000d1f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d203:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d207:	eb 1b                	jmp    c000d224 <sinc_stereo_vari_process+0x16a>
c000d209:	68 00 00 f0 3f       	push   0x3ff00000
c000d20e:	6a 00                	push   0x0
c000d210:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d218:	e8 0a b5 01 00       	call   c0028727 <__ltdf2>
c000d21d:	83 c4 10             	add    esp,0x10
c000d220:	85 c0                	test   eax,eax
c000d222:	79 20                	jns    c000d244 <sinc_stereo_vari_process+0x18a>
c000d224:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d228:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d22c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d230:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d234:	e8 03 af 01 00       	call   c002813c <__divdf3>
c000d239:	83 c4 10             	add    esp,0x10
c000d23c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d240:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d244:	50                   	push   eax
c000d245:	50                   	push   eax
c000d246:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d24a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d24e:	e8 8d b6 01 00       	call   c00288e0 <lrint>
c000d253:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d256:	40                   	inc    eax
c000d257:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d25b:	0f af c7             	imul   eax,edi
c000d25e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d262:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d265:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d269:	58                   	pop    eax
c000d26a:	5a                   	pop    edx
c000d26b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d26f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d273:	e8 68 b6 01 00       	call   c00288e0 <lrint>
c000d278:	83 ec 0c             	sub    esp,0xc
c000d27b:	50                   	push   eax
c000d27c:	e8 3a b2 01 00       	call   c00284bb <__floatsidf>
c000d281:	83 c4 10             	add    esp,0x10
c000d284:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d288:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d28c:	52                   	push   edx
c000d28d:	50                   	push   eax
c000d28e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d292:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d296:	e8 91 ab 01 00       	call   c0027e2c <__subdf3>
c000d29b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d29f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2a3:	83 c4 20             	add    esp,0x20
c000d2a6:	6a 00                	push   0x0
c000d2a8:	6a 00                	push   0x0
c000d2aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2b2:	e8 70 b4 01 00       	call   c0028727 <__ltdf2>
c000d2b7:	83 c4 10             	add    esp,0x10
c000d2ba:	85 c0                	test   eax,eax
c000d2bc:	79 1f                	jns    c000d2dd <sinc_stereo_vari_process+0x223>
c000d2be:	68 00 00 f0 3f       	push   0x3ff00000
c000d2c3:	6a 00                	push   0x0
c000d2c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2cd:	e8 09 a5 01 00       	call   c00277db <__adddf3>
c000d2d2:	83 c4 10             	add    esp,0x10
c000d2d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2dd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d2e0:	83 ec 10             	sub    esp,0x10
c000d2e3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2fa:	e8 2d ab 01 00       	call   c0027e2c <__subdf3>
c000d2ff:	83 c4 18             	add    esp,0x18
c000d302:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d306:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	e8 cf b5 01 00       	call   c00288e0 <lrint>
c000d311:	0f af f8             	imul   edi,eax
c000d314:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d318:	01 f8                	add    eax,edi
c000d31a:	99                   	cdq    
c000d31b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d31e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d321:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d325:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d329:	68 00 00 f0 3f       	push   0x3ff00000
c000d32e:	6a 00                	push   0x0
c000d330:	e8 07 ae 01 00       	call   c002813c <__divdf3>
c000d335:	83 c4 10             	add    esp,0x10
c000d338:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d33c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d340:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d345:	68 23 42 92 0c       	push   0xc924223
c000d34a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d34e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d352:	e8 84 a4 01 00       	call   c00277db <__adddf3>
c000d357:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d35b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d35f:	83 c4 20             	add    esp,0x20
c000d362:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d36a:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d372:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d375:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d378:	7d 50                	jge    c000d3ca <sinc_stereo_vari_process+0x310>
c000d37a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d37d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d380:	01 c8                	add    eax,ecx
c000d382:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d385:	99                   	cdq    
c000d386:	f7 f9                	idiv   ecx
c000d388:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d38c:	7d 0c                	jge    c000d39a <sinc_stereo_vari_process+0x2e0>
c000d38e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d391:	85 ff                	test   edi,edi
c000d393:	79 6c                	jns    c000d401 <sinc_stereo_vari_process+0x347>
c000d395:	e9 e7 00 00 00       	jmp    c000d481 <sinc_stereo_vari_process+0x3c7>
c000d39a:	50                   	push   eax
c000d39b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d39f:	56                   	push   esi
c000d3a0:	53                   	push   ebx
c000d3a1:	e8 4c e7 ff ff       	call   c000baf2 <prepare_data>
c000d3a6:	83 c4 10             	add    esp,0x10
c000d3a9:	89 c2                	mov    edx,eax
c000d3ab:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d3ae:	85 c0                	test   eax,eax
c000d3b0:	0f 85 bf 03 00 00    	jne    c000d775 <sinc_stereo_vari_process+0x6bb>
c000d3b6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d3b9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d3bc:	01 c8                	add    eax,ecx
c000d3be:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d3c1:	99                   	cdq    
c000d3c2:	f7 f9                	idiv   ecx
c000d3c4:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d3c8:	7c c4                	jl     c000d38e <sinc_stereo_vari_process+0x2d4>
c000d3ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d3ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d3d2:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d3d5:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d3d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d3e0:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d3e3:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d3e6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d3e9:	99                   	cdq    
c000d3ea:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d3ed:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d3f0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d3f3:	99                   	cdq    
c000d3f4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d3f7:	31 d2                	xor    edx,edx
c000d3f9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d3fc:	e9 74 03 00 00       	jmp    c000d775 <sinc_stereo_vari_process+0x6bb>
c000d401:	83 ec 0c             	sub    esp,0xc
c000d404:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d407:	e8 af b0 01 00       	call   c00284bb <__floatsidf>
c000d40c:	83 c4 10             	add    esp,0x10
c000d40f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d413:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d417:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d41b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d41f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d423:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d427:	e8 af a3 01 00       	call   c00277db <__adddf3>
c000d42c:	83 c4 10             	add    esp,0x10
c000d42f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d433:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d437:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d43b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d43f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d443:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d447:	e8 8f a3 01 00       	call   c00277db <__adddf3>
c000d44c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d44f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d453:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d457:	e8 5f b0 01 00       	call   c00284bb <__floatsidf>
c000d45c:	83 c4 10             	add    esp,0x10
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	50                   	push   eax
c000d469:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d46d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d471:	e8 af b2 01 00       	call   c0028725 <__gedf2>
c000d476:	83 c4 10             	add    esp,0x10
c000d479:	85 c0                	test   eax,eax
c000d47b:	0f 89 49 ff ff ff    	jns    c000d3ca <sinc_stereo_vari_process+0x310>
c000d481:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d485:	0f 8e ef 00 00 00    	jle    c000d57a <sinc_stereo_vari_process+0x4c0>
c000d48b:	83 ec 10             	sub    esp,0x10
c000d48e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d491:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d494:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d497:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d49a:	e8 8d a9 01 00       	call   c0027e2c <__subdf3>
c000d49f:	83 c4 18             	add    esp,0x18
c000d4a2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4aa:	52                   	push   edx
c000d4ab:	50                   	push   eax
c000d4ac:	e8 0f b4 01 00       	call   c00288c0 <fabs>
c000d4b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d4b5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d4b9:	83 c4 10             	add    esp,0x10
c000d4bc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d4c1:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d4c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4ce:	e8 36 b2 01 00       	call   c0028709 <__gtdf2>
c000d4d3:	83 c4 10             	add    esp,0x10
c000d4d6:	85 c0                	test   eax,eax
c000d4d8:	0f 8e 9c 00 00 00    	jle    c000d57a <sinc_stereo_vari_process+0x4c0>
c000d4de:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d4e1:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d4e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d4e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d4ec:	52                   	push   edx
c000d4ed:	50                   	push   eax
c000d4ee:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d4f1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d4f4:	e8 33 a9 01 00       	call   c0027e2c <__subdf3>
c000d4f9:	59                   	pop    ecx
c000d4fa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d4fe:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d502:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d505:	e8 b1 af 01 00       	call   c00284bb <__floatsidf>
c000d50a:	83 c4 10             	add    esp,0x10
c000d50d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d511:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d515:	52                   	push   edx
c000d516:	50                   	push   eax
c000d517:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d51b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d51f:	e8 34 a9 01 00       	call   c0027e58 <__muldf3>
c000d524:	5f                   	pop    edi
c000d525:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d529:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d52d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d530:	e8 86 af 01 00       	call   c00284bb <__floatsidf>
c000d535:	83 c4 10             	add    esp,0x10
c000d538:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d53c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d540:	52                   	push   edx
c000d541:	50                   	push   eax
c000d542:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d546:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d54a:	e8 ed ab 01 00       	call   c002813c <__divdf3>
c000d54f:	83 c4 10             	add    esp,0x10
c000d552:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d556:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d55a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d55e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d562:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d566:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d56a:	e8 6c a2 01 00       	call   c00277db <__adddf3>
c000d56f:	83 c4 10             	add    esp,0x10
c000d572:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d576:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d57a:	83 ec 0c             	sub    esp,0xc
c000d57d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d580:	e8 36 af 01 00       	call   c00284bb <__floatsidf>
c000d585:	83 c4 10             	add    esp,0x10
c000d588:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d58c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d594:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d59c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a0:	e8 82 b1 01 00       	call   c0028727 <__ltdf2>
c000d5a5:	83 c4 10             	add    esp,0x10
c000d5a8:	85 c0                	test   eax,eax
c000d5aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5ae:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d5b2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d5b6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d5ba:	78 10                	js     c000d5cc <sinc_stereo_vari_process+0x512>
c000d5bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d5c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d5c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d5c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d5cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5dc:	e8 77 a8 01 00       	call   c0027e58 <__muldf3>
c000d5e1:	59                   	pop    ecx
c000d5e2:	5f                   	pop    edi
c000d5e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d5ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d5f3:	e8 d3 e4 ff ff       	call   c000bacb <double_to_fp>
c000d5f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5fc:	89 c7                	mov    edi,eax
c000d5fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d602:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d606:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d60a:	e8 49 a8 01 00       	call   c0027e58 <__muldf3>
c000d60f:	83 c4 18             	add    esp,0x18
c000d612:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d616:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d61a:	52                   	push   edx
c000d61b:	50                   	push   eax
c000d61c:	e8 aa e4 ff ff       	call   c000bacb <double_to_fp>
c000d621:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d624:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d628:	83 c4 0c             	add    esp,0xc
c000d62b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d62e:	8d 04 90             	lea    eax,[eax+edx*4]
c000d631:	50                   	push   eax
c000d632:	50                   	push   eax
c000d633:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d636:	e8 80 ae 01 00       	call   c00284bb <__floatsidf>
c000d63b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d63f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d643:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d647:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d64b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d64f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d653:	e8 e4 aa 01 00       	call   c002813c <__divdf3>
c000d658:	83 c4 18             	add    esp,0x18
c000d65b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d65f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d663:	52                   	push   edx
c000d664:	89 fa                	mov    edx,edi
c000d666:	50                   	push   eax
c000d667:	89 d8                	mov    eax,ebx
c000d669:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d66d:	e8 02 c7 ff ff       	call   c0009d74 <calc_output_stereo>
c000d672:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d676:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d67a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d67e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d682:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d686:	e8 b1 aa 01 00       	call   c002813c <__divdf3>
c000d68b:	83 c4 10             	add    esp,0x10
c000d68e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d692:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d69a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d69e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6a6:	e8 30 a1 01 00       	call   c00277db <__adddf3>
c000d6ab:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d6af:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d6b3:	83 c4 18             	add    esp,0x18
c000d6b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d6ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d6be:	e8 1d b2 01 00       	call   c00288e0 <lrint>
c000d6c3:	83 ec 0c             	sub    esp,0xc
c000d6c6:	50                   	push   eax
c000d6c7:	e8 ef ad 01 00       	call   c00284bb <__floatsidf>
c000d6cc:	83 c4 10             	add    esp,0x10
c000d6cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d7:	52                   	push   edx
c000d6d8:	50                   	push   eax
c000d6d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6e1:	e8 46 a7 01 00       	call   c0027e2c <__subdf3>
c000d6e6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6ee:	83 c4 20             	add    esp,0x20
c000d6f1:	6a 00                	push   0x0
c000d6f3:	6a 00                	push   0x0
c000d6f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6fd:	e8 25 b0 01 00       	call   c0028727 <__ltdf2>
c000d702:	83 c4 10             	add    esp,0x10
c000d705:	85 c0                	test   eax,eax
c000d707:	79 20                	jns    c000d729 <sinc_stereo_vari_process+0x66f>
c000d709:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d70d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d711:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d715:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d719:	e8 bd a0 01 00       	call   c00277db <__adddf3>
c000d71e:	83 c4 10             	add    esp,0x10
c000d721:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d725:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d729:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d72c:	83 ec 10             	sub    esp,0x10
c000d72f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d733:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d736:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d73a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d73e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d742:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d746:	e8 e1 a6 01 00       	call   c0027e2c <__subdf3>
c000d74b:	83 c4 18             	add    esp,0x18
c000d74e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d752:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d756:	52                   	push   edx
c000d757:	50                   	push   eax
c000d758:	e8 83 b1 01 00       	call   c00288e0 <lrint>
c000d75d:	0f af f8             	imul   edi,eax
c000d760:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d764:	83 c4 10             	add    esp,0x10
c000d767:	01 f8                	add    eax,edi
c000d769:	99                   	cdq    
c000d76a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d76d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d770:	e9 fd fb ff ff       	jmp    c000d372 <sinc_stereo_vari_process+0x2b8>
c000d775:	83 c4 4c             	add    esp,0x4c
c000d778:	89 d0                	mov    eax,edx
c000d77a:	5b                   	pop    ebx
c000d77b:	5e                   	pop    esi
c000d77c:	5f                   	pop    edi
c000d77d:	5d                   	pop    ebp
c000d77e:	c3                   	ret    

c000d77f <sinc_mono_vari_process>:
c000d77f:	55                   	push   ebp
c000d780:	ba 05 00 00 00       	mov    edx,0x5
c000d785:	57                   	push   edi
c000d786:	56                   	push   esi
c000d787:	53                   	push   ebx
c000d788:	83 ec 4c             	sub    esp,0x4c
c000d78b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d78f:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d793:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d796:	85 db                	test   ebx,ebx
c000d798:	0f 84 c1 06 00 00    	je     c000de5f <sinc_mono_vari_process+0x6e0>
c000d79e:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d7a1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7a4:	0f af c7             	imul   eax,edi
c000d7a7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d7aa:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d7ad:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d7b4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d7bb:	0f af c7             	imul   eax,edi
c000d7be:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d7c1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d7c5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d7c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7ca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7d2:	68 00 00 70 3f       	push   0x3f700000
c000d7d7:	6a 00                	push   0x0
c000d7d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7e1:	e8 41 af 01 00       	call   c0028727 <__ltdf2>
c000d7e6:	83 c4 10             	add    esp,0x10
c000d7e9:	ba 16 00 00 00       	mov    edx,0x16
c000d7ee:	85 c0                	test   eax,eax
c000d7f0:	0f 88 69 06 00 00    	js     c000de5f <sinc_mono_vari_process+0x6e0>
c000d7f6:	68 00 00 70 40       	push   0x40700000
c000d7fb:	6a 00                	push   0x0
c000d7fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d801:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d805:	e8 ff ae 01 00       	call   c0028709 <__gtdf2>
c000d80a:	83 c4 10             	add    esp,0x10
c000d80d:	ba 16 00 00 00       	mov    edx,0x16
c000d812:	85 c0                	test   eax,eax
c000d814:	0f 8f 45 06 00 00    	jg     c000de5f <sinc_mono_vari_process+0x6e0>
c000d81a:	83 ec 0c             	sub    esp,0xc
c000d81d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d820:	e8 96 ac 01 00       	call   c00284bb <__floatsidf>
c000d825:	83 c4 10             	add    esp,0x10
c000d828:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d82c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d830:	68 00 00 00 40       	push   0x40000000
c000d835:	6a 00                	push   0x0
c000d837:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d83b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d83f:	e8 97 9f 01 00       	call   c00277db <__adddf3>
c000d844:	59                   	pop    ecx
c000d845:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d849:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d84d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d850:	e8 66 ac 01 00       	call   c00284bb <__floatsidf>
c000d855:	83 c4 10             	add    esp,0x10
c000d858:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d85c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d860:	52                   	push   edx
c000d861:	50                   	push   eax
c000d862:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d866:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d86a:	e8 cd a8 01 00       	call   c002813c <__divdf3>
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d876:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d87a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d87d:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d880:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d884:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d888:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d88c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d890:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d894:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d898:	e8 6c ae 01 00       	call   c0028709 <__gtdf2>
c000d89d:	83 c4 10             	add    esp,0x10
c000d8a0:	85 c0                	test   eax,eax
c000d8a2:	7e 2d                	jle    c000d8d1 <sinc_mono_vari_process+0x152>
c000d8a4:	68 00 00 f0 3f       	push   0x3ff00000
c000d8a9:	6a 00                	push   0x0
c000d8ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8b3:	e8 6f ae 01 00       	call   c0028727 <__ltdf2>
c000d8b8:	83 c4 10             	add    esp,0x10
c000d8bb:	85 c0                	test   eax,eax
c000d8bd:	79 4d                	jns    c000d90c <sinc_mono_vari_process+0x18d>
c000d8bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d8cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d8cf:	eb 1b                	jmp    c000d8ec <sinc_mono_vari_process+0x16d>
c000d8d1:	68 00 00 f0 3f       	push   0x3ff00000
c000d8d6:	6a 00                	push   0x0
c000d8d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8e0:	e8 42 ae 01 00       	call   c0028727 <__ltdf2>
c000d8e5:	83 c4 10             	add    esp,0x10
c000d8e8:	85 c0                	test   eax,eax
c000d8ea:	79 20                	jns    c000d90c <sinc_mono_vari_process+0x18d>
c000d8ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8fc:	e8 3b a8 01 00       	call   c002813c <__divdf3>
c000d901:	83 c4 10             	add    esp,0x10
c000d904:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d908:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d90c:	50                   	push   eax
c000d90d:	50                   	push   eax
c000d90e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d912:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d916:	e8 c5 af 01 00       	call   c00288e0 <lrint>
c000d91b:	40                   	inc    eax
c000d91c:	0f af c7             	imul   eax,edi
c000d91f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d923:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d927:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d92a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d92d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d931:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d935:	58                   	pop    eax
c000d936:	5a                   	pop    edx
c000d937:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d93b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d93f:	e8 9c af 01 00       	call   c00288e0 <lrint>
c000d944:	83 ec 0c             	sub    esp,0xc
c000d947:	50                   	push   eax
c000d948:	e8 6e ab 01 00       	call   c00284bb <__floatsidf>
c000d94d:	83 c4 10             	add    esp,0x10
c000d950:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d954:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d958:	52                   	push   edx
c000d959:	50                   	push   eax
c000d95a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d962:	e8 c5 a4 01 00       	call   c0027e2c <__subdf3>
c000d967:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d96b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d96f:	83 c4 20             	add    esp,0x20
c000d972:	6a 00                	push   0x0
c000d974:	6a 00                	push   0x0
c000d976:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d97a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d97e:	e8 a4 ad 01 00       	call   c0028727 <__ltdf2>
c000d983:	83 c4 10             	add    esp,0x10
c000d986:	85 c0                	test   eax,eax
c000d988:	79 1f                	jns    c000d9a9 <sinc_mono_vari_process+0x22a>
c000d98a:	68 00 00 f0 3f       	push   0x3ff00000
c000d98f:	6a 00                	push   0x0
c000d991:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d995:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d999:	e8 3d 9e 01 00       	call   c00277db <__adddf3>
c000d99e:	83 c4 10             	add    esp,0x10
c000d9a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9a9:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d9ac:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d9af:	83 ec 10             	sub    esp,0x10
c000d9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9c2:	e8 65 a4 01 00       	call   c0027e2c <__subdf3>
c000d9c7:	83 c4 18             	add    esp,0x18
c000d9ca:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d9ce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d9d2:	52                   	push   edx
c000d9d3:	50                   	push   eax
c000d9d4:	e8 07 af 01 00       	call   c00288e0 <lrint>
c000d9d9:	0f af f8             	imul   edi,eax
c000d9dc:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d9df:	31 ff                	xor    edi,edi
c000d9e1:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d9e6:	99                   	cdq    
c000d9e7:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d9ea:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d9ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d9f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d9f5:	55                   	push   ebp
c000d9f6:	57                   	push   edi
c000d9f7:	e8 40 a7 01 00       	call   c002813c <__divdf3>
c000d9fc:	83 c4 10             	add    esp,0x10
c000d9ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da03:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da07:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000da0c:	68 23 42 92 0c       	push   0xc924223
c000da11:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da19:	e8 bd 9d 01 00       	call   c00277db <__adddf3>
c000da1e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000da22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000da26:	83 c4 20             	add    esp,0x20
c000da29:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000da2d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000da31:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000da34:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000da37:	7d 54                	jge    c000da8d <sinc_mono_vari_process+0x30e>
c000da39:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000da3c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000da3f:	01 c8                	add    eax,ecx
c000da41:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000da44:	99                   	cdq    
c000da45:	f7 f9                	idiv   ecx
c000da47:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000da4b:	7d 0c                	jge    c000da59 <sinc_mono_vari_process+0x2da>
c000da4d:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000da50:	85 ff                	test   edi,edi
c000da52:	79 73                	jns    c000dac7 <sinc_mono_vari_process+0x348>
c000da54:	e9 ee 00 00 00       	jmp    c000db47 <sinc_mono_vari_process+0x3c8>
c000da59:	50                   	push   eax
c000da5a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000da5e:	56                   	push   esi
c000da5f:	53                   	push   ebx
c000da60:	e8 8d e0 ff ff       	call   c000baf2 <prepare_data>
c000da65:	89 c2                	mov    edx,eax
c000da67:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000da6b:	83 c4 10             	add    esp,0x10
c000da6e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000da71:	85 d2                	test   edx,edx
c000da73:	0f 85 e6 03 00 00    	jne    c000de5f <sinc_mono_vari_process+0x6e0>
c000da79:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000da7c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000da7f:	01 c8                	add    eax,ecx
c000da81:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000da84:	99                   	cdq    
c000da85:	f7 f9                	idiv   ecx
c000da87:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000da8b:	7c c0                	jl     c000da4d <sinc_mono_vari_process+0x2ce>
c000da8d:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000da91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000da95:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000da99:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000da9c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000da9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daa3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000daa7:	89 01                	mov    DWORD PTR [ecx],eax
c000daa9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000daac:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000daaf:	99                   	cdq    
c000dab0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000dab3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000dab6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000dab9:	99                   	cdq    
c000daba:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000dabd:	31 d2                	xor    edx,edx
c000dabf:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000dac2:	e9 98 03 00 00       	jmp    c000de5f <sinc_mono_vari_process+0x6e0>
c000dac7:	83 ec 0c             	sub    esp,0xc
c000daca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000dacd:	e8 e9 a9 01 00       	call   c00284bb <__floatsidf>
c000dad2:	83 c4 10             	add    esp,0x10
c000dad5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dad9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dadd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dae1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dae5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dae9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000daed:	e8 e9 9c 01 00       	call   c00277db <__adddf3>
c000daf2:	83 c4 10             	add    esp,0x10
c000daf5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000daf9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dafd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000db01:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000db05:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db0d:	e8 c9 9c 01 00       	call   c00277db <__adddf3>
c000db12:	89 3c 24             	mov    DWORD PTR [esp],edi
c000db15:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db19:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db1d:	e8 99 a9 01 00       	call   c00284bb <__floatsidf>
c000db22:	83 c4 10             	add    esp,0x10
c000db25:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000db29:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000db2d:	52                   	push   edx
c000db2e:	50                   	push   eax
c000db2f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db37:	e8 cd ab 01 00       	call   c0028709 <__gtdf2>
c000db3c:	83 c4 10             	add    esp,0x10
c000db3f:	85 c0                	test   eax,eax
c000db41:	0f 8f 46 ff ff ff    	jg     c000da8d <sinc_mono_vari_process+0x30e>
c000db47:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000db4b:	0f 8e f5 00 00 00    	jle    c000dc46 <sinc_mono_vari_process+0x4c7>
c000db51:	83 ec 10             	sub    esp,0x10
c000db54:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000db57:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000db5a:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000db5e:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000db61:	ff 30                	push   DWORD PTR [eax]
c000db63:	e8 c4 a2 01 00       	call   c0027e2c <__subdf3>
c000db68:	83 c4 18             	add    esp,0x18
c000db6b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000db6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000db73:	52                   	push   edx
c000db74:	50                   	push   eax
c000db75:	e8 46 ad 01 00       	call   c00288c0 <fabs>
c000db7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db82:	83 c4 10             	add    esp,0x10
c000db85:	68 df 7c db 3d       	push   0x3ddb7cdf
c000db8a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000db8f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db93:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db97:	e8 6d ab 01 00       	call   c0028709 <__gtdf2>
c000db9c:	83 c4 10             	add    esp,0x10
c000db9f:	85 c0                	test   eax,eax
c000dba1:	0f 8e 9f 00 00 00    	jle    c000dc46 <sinc_mono_vari_process+0x4c7>
c000dba7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000dbab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dbae:	8b 00                	mov    eax,DWORD PTR [eax]
c000dbb0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dbb4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbb8:	52                   	push   edx
c000dbb9:	50                   	push   eax
c000dbba:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dbbd:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dbc0:	e8 67 a2 01 00       	call   c0027e2c <__subdf3>
c000dbc5:	5f                   	pop    edi
c000dbc6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000dbca:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000dbce:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dbd1:	e8 e5 a8 01 00       	call   c00284bb <__floatsidf>
c000dbd6:	83 c4 10             	add    esp,0x10
c000dbd9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dbdd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dbe1:	52                   	push   edx
c000dbe2:	50                   	push   eax
c000dbe3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbe7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbeb:	e8 68 a2 01 00       	call   c0027e58 <__muldf3>
c000dbf0:	5d                   	pop    ebp
c000dbf1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000dbf5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000dbf9:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dbfc:	e8 ba a8 01 00       	call   c00284bb <__floatsidf>
c000dc01:	83 c4 10             	add    esp,0x10
c000dc04:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc08:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc0c:	52                   	push   edx
c000dc0d:	50                   	push   eax
c000dc0e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc16:	e8 21 a5 01 00       	call   c002813c <__divdf3>
c000dc1b:	83 c4 10             	add    esp,0x10
c000dc1e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dc22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dc26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc2e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dc36:	e8 a0 9b 01 00       	call   c00277db <__adddf3>
c000dc3b:	83 c4 10             	add    esp,0x10
c000dc3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc42:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dc46:	83 ec 0c             	sub    esp,0xc
c000dc49:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dc4c:	e8 6a a8 01 00       	call   c00284bb <__floatsidf>
c000dc51:	83 c4 10             	add    esp,0x10
c000dc54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc6c:	e8 b6 aa 01 00       	call   c0028727 <__ltdf2>
c000dc71:	83 c4 10             	add    esp,0x10
c000dc74:	85 c0                	test   eax,eax
c000dc76:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000dc7a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000dc7e:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000dc82:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000dc86:	78 10                	js     c000dc98 <sinc_mono_vari_process+0x519>
c000dc88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dc8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dc90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dc94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dc98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dc9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dca0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dca4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dca8:	e8 ab a1 01 00       	call   c0027e58 <__muldf3>
c000dcad:	59                   	pop    ecx
c000dcae:	5f                   	pop    edi
c000dcaf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dcb3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dcb7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dcbb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dcbf:	e8 07 de ff ff       	call   c000bacb <double_to_fp>
c000dcc4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dcc8:	89 c7                	mov    edi,eax
c000dcca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dcce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dcd2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dcd6:	e8 7d a1 01 00       	call   c0027e58 <__muldf3>
c000dcdb:	83 c4 18             	add    esp,0x18
c000dcde:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dce2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dce6:	52                   	push   edx
c000dce7:	50                   	push   eax
c000dce8:	e8 de dd ff ff       	call   c000bacb <double_to_fp>
c000dced:	83 ec 0c             	sub    esp,0xc
c000dcf0:	89 c5                	mov    ebp,eax
c000dcf2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dcf5:	e8 c1 a7 01 00       	call   c00284bb <__floatsidf>
c000dcfa:	83 c4 10             	add    esp,0x10
c000dcfd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd01:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dd05:	52                   	push   edx
c000dd06:	50                   	push   eax
c000dd07:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd0f:	e8 28 a4 01 00       	call   c002813c <__divdf3>
c000dd14:	83 c4 10             	add    esp,0x10
c000dd17:	89 e9                	mov    ecx,ebp
c000dd19:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd1d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dd21:	89 d8                	mov    eax,ebx
c000dd23:	89 fa                	mov    edx,edi
c000dd25:	e8 ee bd ff ff       	call   c0009b18 <calc_output_single>
c000dd2a:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dd2d:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dd30:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dd34:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dd38:	52                   	push   edx
c000dd39:	50                   	push   eax
c000dd3a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dd3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dd42:	e8 11 a1 01 00       	call   c0027e58 <__muldf3>
c000dd47:	59                   	pop    ecx
c000dd48:	59                   	pop    ecx
c000dd49:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dd4d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd51:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd59:	e8 cd a9 01 00       	call   c002872b <__truncdfsf2>
c000dd5e:	83 c4 10             	add    esp,0x10
c000dd61:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000dd64:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000dd67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dd6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dd6f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dd73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dd77:	e8 c0 a3 01 00       	call   c002813c <__divdf3>
c000dd7c:	83 c4 10             	add    esp,0x10
c000dd7f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dd83:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dd87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd97:	e8 3f 9a 01 00       	call   c00277db <__adddf3>
c000dd9c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dda0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dda4:	83 c4 18             	add    esp,0x18
c000dda7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ddab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ddaf:	e8 2c ab 01 00       	call   c00288e0 <lrint>
c000ddb4:	83 ec 0c             	sub    esp,0xc
c000ddb7:	50                   	push   eax
c000ddb8:	e8 fe a6 01 00       	call   c00284bb <__floatsidf>
c000ddbd:	83 c4 10             	add    esp,0x10
c000ddc0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ddc4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ddc8:	52                   	push   edx
c000ddc9:	50                   	push   eax
c000ddca:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ddce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ddd2:	e8 55 a0 01 00       	call   c0027e2c <__subdf3>
c000ddd7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dddb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dddf:	83 c4 20             	add    esp,0x20
c000dde2:	6a 00                	push   0x0
c000dde4:	6a 00                	push   0x0
c000dde6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddee:	e8 34 a9 01 00       	call   c0028727 <__ltdf2>
c000ddf3:	83 c4 10             	add    esp,0x10
c000ddf6:	85 c0                	test   eax,eax
c000ddf8:	79 20                	jns    c000de1a <sinc_mono_vari_process+0x69b>
c000ddfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de0a:	e8 cc 99 01 00       	call   c00277db <__adddf3>
c000de0f:	83 c4 10             	add    esp,0x10
c000de12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de16:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000de1a:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000de1d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000de20:	83 ec 10             	sub    esp,0x10
c000de23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de33:	e8 f4 9f 01 00       	call   c0027e2c <__subdf3>
c000de38:	83 c4 18             	add    esp,0x18
c000de3b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000de3f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de43:	52                   	push   edx
c000de44:	50                   	push   eax
c000de45:	e8 96 aa 01 00       	call   c00288e0 <lrint>
c000de4a:	83 c4 10             	add    esp,0x10
c000de4d:	0f af f8             	imul   edi,eax
c000de50:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000de53:	99                   	cdq    
c000de54:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000de57:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000de5a:	e9 d2 fb ff ff       	jmp    c000da31 <sinc_mono_vari_process+0x2b2>
c000de5f:	83 c4 4c             	add    esp,0x4c
c000de62:	89 d0                	mov    eax,edx
c000de64:	5b                   	pop    ebx
c000de65:	5e                   	pop    esi
c000de66:	5f                   	pop    edi
c000de67:	5d                   	pop    ebp
c000de68:	c3                   	ret    

c000de69 <sinc_get_name>:
c000de69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000de6d:	31 c0                	xor    eax,eax
c000de6f:	83 fa 02             	cmp    edx,0x2
c000de72:	77 07                	ja     c000de7b <sinc_get_name+0x12>
c000de74:	8b 04 95 84 a1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5e7c]
c000de7b:	c3                   	ret    

c000de7c <sinc_get_description>:
c000de7c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000de80:	31 c0                	xor    eax,eax
c000de82:	83 fa 02             	cmp    edx,0x2
c000de85:	77 07                	ja     c000de8e <sinc_get_description+0x12>
c000de87:	8b 04 95 78 a1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5e88]
c000de8e:	c3                   	ret    

c000de8f <sinc_set_converter>:
c000de8f:	53                   	push   ebx
c000de90:	81 ec 58 08 00 00    	sub    esp,0x858
c000de96:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000de9d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dea0:	85 c0                	test   eax,eax
c000dea2:	74 13                	je     c000deb7 <sinc_set_converter+0x28>
c000dea4:	83 ec 0c             	sub    esp,0xc
c000dea7:	50                   	push   eax
c000dea8:	e8 bc 19 00 00       	call   c000f869 <free>
c000dead:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000deb4:	83 c4 10             	add    esp,0x10
c000deb7:	50                   	push   eax
c000deb8:	68 44 08 00 00       	push   0x844
c000debd:	6a 00                	push   0x0
c000debf:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dec3:	50                   	push   eax
c000dec4:	e8 87 28 ff ff       	call   c0000750 <memset>
c000dec9:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000decc:	83 c4 10             	add    esp,0x10
c000decf:	b8 0b 00 00 00       	mov    eax,0xb
c000ded4:	81 fa 80 00 00 00    	cmp    edx,0x80
c000deda:	7f 6e                	jg     c000df4a <sinc_set_converter+0xbb>
c000dedc:	83 fa 01             	cmp    edx,0x1
c000dedf:	75 10                	jne    c000def1 <sinc_set_converter+0x62>
c000dee1:	c7 43 24 7f d7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d77f
c000dee8:	c7 43 20 7f d7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d77f
c000deef:	eb 4d                	jmp    c000df3e <sinc_set_converter+0xaf>
c000def1:	83 fa 02             	cmp    edx,0x2
c000def4:	75 10                	jne    c000df06 <sinc_set_converter+0x77>
c000def6:	c7 43 24 ba d0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d0ba
c000defd:	c7 43 20 ba d0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d0ba
c000df04:	eb 38                	jmp    c000df3e <sinc_set_converter+0xaf>
c000df06:	83 fa 04             	cmp    edx,0x4
c000df09:	75 10                	jne    c000df1b <sinc_set_converter+0x8c>
c000df0b:	c7 43 24 f5 c9 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c9f5
c000df12:	c7 43 20 f5 c9 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c9f5
c000df19:	eb 23                	jmp    c000df3e <sinc_set_converter+0xaf>
c000df1b:	83 fa 06             	cmp    edx,0x6
c000df1e:	75 10                	jne    c000df30 <sinc_set_converter+0xa1>
c000df20:	c7 43 24 30 c3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c330
c000df27:	c7 43 20 30 c3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c330
c000df2e:	eb 0e                	jmp    c000df3e <sinc_set_converter+0xaf>
c000df30:	c7 43 24 6c bc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bc6c
c000df37:	c7 43 20 6c bc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bc6c
c000df3e:	c7 43 28 1f af 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000af1f
c000df45:	b8 0a 00 00 00       	mov    eax,0xa
c000df4a:	81 c4 58 08 00 00    	add    esp,0x858
c000df50:	5b                   	pop    ebx
c000df51:	c3                   	ret    

c000df52 <zoh_vari_process>:
c000df52:	55                   	push   ebp
c000df53:	31 d2                	xor    edx,edx
c000df55:	57                   	push   edi
c000df56:	56                   	push   esi
c000df57:	53                   	push   ebx
c000df58:	83 ec 3c             	sub    esp,0x3c
c000df5b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000df5f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000df63:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000df67:	0f 8e 80 06 00 00    	jle    c000e5ed <zoh_vari_process+0x69b>
c000df6d:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000df70:	ba 05 00 00 00       	mov    edx,0x5
c000df75:	85 db                	test   ebx,ebx
c000df77:	0f 84 70 06 00 00    	je     c000e5ed <zoh_vari_process+0x69b>
c000df7d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000df80:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000df84:	74 19                	je     c000df9f <zoh_vari_process+0x4d>
c000df86:	31 d2                	xor    edx,edx
c000df88:	39 c2                	cmp    edx,eax
c000df8a:	7d 0c                	jge    c000df98 <zoh_vari_process+0x46>
c000df8c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000df8e:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000df91:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000df95:	42                   	inc    edx
c000df96:	eb f0                	jmp    c000df88 <zoh_vari_process+0x36>
c000df98:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000df9f:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dfa2:	0f af d0             	imul   edx,eax
c000dfa5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dfa8:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dfac:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dfb3:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dfb6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dfbd:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dfc0:	8b 07                	mov    eax,DWORD PTR [edi]
c000dfc2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	68 00 00 70 3f       	push   0x3f700000
c000dfcf:	6a 00                	push   0x0
c000dfd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfd9:	e8 49 a7 01 00       	call   c0028727 <__ltdf2>
c000dfde:	83 c4 10             	add    esp,0x10
c000dfe1:	ba 16 00 00 00       	mov    edx,0x16
c000dfe6:	85 c0                	test   eax,eax
c000dfe8:	0f 88 ff 05 00 00    	js     c000e5ed <zoh_vari_process+0x69b>
c000dfee:	68 00 00 70 40       	push   0x40700000
c000dff3:	6a 00                	push   0x0
c000dff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dffd:	e8 07 a7 01 00       	call   c0028709 <__gtdf2>
c000e002:	83 c4 10             	add    esp,0x10
c000e005:	ba 16 00 00 00       	mov    edx,0x16
c000e00a:	85 c0                	test   eax,eax
c000e00c:	0f 8f db 05 00 00    	jg     c000e5ed <zoh_vari_process+0x69b>
c000e012:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e015:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000e018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e01c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e020:	68 00 00 f0 3f       	push   0x3ff00000
c000e025:	6a 00                	push   0x0
c000e027:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02f:	e8 f3 a6 01 00       	call   c0028727 <__ltdf2>
c000e034:	83 c4 10             	add    esp,0x10
c000e037:	85 c0                	test   eax,eax
c000e039:	0f 89 da 01 00 00    	jns    c000e219 <zoh_vari_process+0x2c7>
c000e03f:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000e042:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000e045:	0f 8d ce 01 00 00    	jge    c000e219 <zoh_vari_process+0x2c7>
c000e04b:	83 ec 0c             	sub    esp,0xc
c000e04e:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e051:	e8 65 a4 01 00       	call   c00284bb <__floatsidf>
c000e056:	83 c4 10             	add    esp,0x10
c000e059:	89 04 24             	mov    DWORD PTR [esp],eax
c000e05c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e068:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e06c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e070:	e8 e3 9d 01 00       	call   c0027e58 <__muldf3>
c000e075:	59                   	pop    ecx
c000e076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e07a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e07e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000e081:	e8 35 a4 01 00       	call   c00284bb <__floatsidf>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e08d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e091:	52                   	push   edx
c000e092:	50                   	push   eax
c000e093:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e097:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e09b:	e8 3b 97 01 00       	call   c00277db <__adddf3>
c000e0a0:	59                   	pop    ecx
c000e0a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e0a5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e0a9:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000e0ac:	e8 0a a4 01 00       	call   c00284bb <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	52                   	push   edx
c000e0bd:	50                   	push   eax
c000e0be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c6:	e8 5a a6 01 00       	call   c0028725 <__gedf2>
c000e0cb:	83 c4 10             	add    esp,0x10
c000e0ce:	85 c0                	test   eax,eax
c000e0d0:	0f 89 43 01 00 00    	jns    c000e219 <zoh_vari_process+0x2c7>
c000e0d6:	85 ed                	test   ebp,ebp
c000e0d8:	0f 8e ec 00 00 00    	jle    c000e1ca <zoh_vari_process+0x278>
c000e0de:	83 ec 10             	sub    esp,0x10
c000e0e1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e0e4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e0e7:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e0ea:	ff 37                	push   DWORD PTR [edi]
c000e0ec:	e8 3b 9d 01 00       	call   c0027e2c <__subdf3>
c000e0f1:	83 c4 18             	add    esp,0x18
c000e0f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e0f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e0fc:	52                   	push   edx
c000e0fd:	50                   	push   eax
c000e0fe:	e8 bd a7 01 00       	call   c00288c0 <fabs>
c000e103:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e107:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e10b:	83 c4 10             	add    esp,0x10
c000e10e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e113:	68 23 42 92 0c       	push   0xc924223
c000e118:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e11c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e120:	e8 e4 a5 01 00       	call   c0028709 <__gtdf2>
c000e125:	83 c4 10             	add    esp,0x10
c000e128:	85 c0                	test   eax,eax
c000e12a:	0f 8e 9a 00 00 00    	jle    c000e1ca <zoh_vari_process+0x278>
c000e130:	8b 07                	mov    eax,DWORD PTR [edi]
c000e132:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e135:	89 04 24             	mov    DWORD PTR [esp],eax
c000e138:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e13c:	52                   	push   edx
c000e13d:	50                   	push   eax
c000e13e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e141:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e144:	e8 e3 9c 01 00       	call   c0027e2c <__subdf3>
c000e149:	59                   	pop    ecx
c000e14a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e14e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e152:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e155:	e8 61 a3 01 00       	call   c00284bb <__floatsidf>
c000e15a:	83 c4 10             	add    esp,0x10
c000e15d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e161:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e165:	52                   	push   edx
c000e166:	50                   	push   eax
c000e167:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e16b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e16f:	e8 e4 9c 01 00       	call   c0027e58 <__muldf3>
c000e174:	5d                   	pop    ebp
c000e175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e179:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e17d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e180:	e8 36 a3 01 00       	call   c00284bb <__floatsidf>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e18c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e190:	52                   	push   edx
c000e191:	50                   	push   eax
c000e192:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e196:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e19a:	e8 9d 9f 01 00       	call   c002813c <__divdf3>
c000e19f:	83 c4 10             	add    esp,0x10
c000e1a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e1ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e1b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e1b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e1ba:	e8 1c 96 01 00       	call   c00277db <__adddf3>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1ca:	31 c0                	xor    eax,eax
c000e1cc:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000e1cf:	7e 13                	jle    c000e1e4 <zoh_vari_process+0x292>
c000e1d1:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000e1d5:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e1d8:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000e1db:	40                   	inc    eax
c000e1dc:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000e1df:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e1e2:	eb e8                	jmp    c000e1cc <zoh_vari_process+0x27a>
c000e1e4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e1e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e1ec:	68 00 00 f0 3f       	push   0x3ff00000
c000e1f1:	6a 00                	push   0x0
c000e1f3:	e8 44 9f 01 00       	call   c002813c <__divdf3>
c000e1f8:	83 c4 10             	add    esp,0x10
c000e1fb:	89 04 24             	mov    DWORD PTR [esp],eax
c000e1fe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e202:	52                   	push   edx
c000e203:	50                   	push   eax
c000e204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e208:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20c:	e8 ca 95 01 00       	call   c00277db <__adddf3>
c000e211:	83 c4 10             	add    esp,0x10
c000e214:	e9 ff fd ff ff       	jmp    c000e018 <zoh_vari_process+0xc6>
c000e219:	55                   	push   ebp
c000e21a:	55                   	push   ebp
c000e21b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e223:	e8 b8 a6 01 00       	call   c00288e0 <lrint>
c000e228:	83 ec 0c             	sub    esp,0xc
c000e22b:	50                   	push   eax
c000e22c:	e8 8a a2 01 00       	call   c00284bb <__floatsidf>
c000e231:	83 c4 10             	add    esp,0x10
c000e234:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e238:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e23c:	52                   	push   edx
c000e23d:	50                   	push   eax
c000e23e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e242:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e246:	e8 e1 9b 01 00       	call   c0027e2c <__subdf3>
c000e24b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e24f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e253:	83 c4 20             	add    esp,0x20
c000e256:	6a 00                	push   0x0
c000e258:	6a 00                	push   0x0
c000e25a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e25e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e262:	e8 c0 a4 01 00       	call   c0028727 <__ltdf2>
c000e267:	83 c4 10             	add    esp,0x10
c000e26a:	85 c0                	test   eax,eax
c000e26c:	79 1e                	jns    c000e28c <zoh_vari_process+0x33a>
c000e26e:	68 00 00 f0 3f       	push   0x3ff00000
c000e273:	6a 00                	push   0x0
c000e275:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e279:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e27d:	e8 59 95 01 00       	call   c00277db <__adddf3>
c000e282:	83 c4 10             	add    esp,0x10
c000e285:	89 04 24             	mov    DWORD PTR [esp],eax
c000e288:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e28c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e28f:	83 ec 10             	sub    esp,0x10
c000e292:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e296:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e29a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e29e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2a2:	e8 85 9b 01 00       	call   c0027e2c <__subdf3>
c000e2a7:	83 c4 18             	add    esp,0x18
c000e2aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2b2:	52                   	push   edx
c000e2b3:	50                   	push   eax
c000e2b4:	e8 27 a6 01 00       	call   c00288e0 <lrint>
c000e2b9:	83 c4 10             	add    esp,0x10
c000e2bc:	0f af e8             	imul   ebp,eax
c000e2bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e2c2:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e2c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e2c9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e2cc:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e2cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2d3:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e2d6:	0f 8d 7a 02 00 00    	jge    c000e556 <zoh_vari_process+0x604>
c000e2dc:	83 ec 0c             	sub    esp,0xc
c000e2df:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e2e2:	e8 d4 a1 01 00       	call   c00284bb <__floatsidf>
c000e2e7:	83 c4 10             	add    esp,0x10
c000e2ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2f2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e2fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e302:	e8 51 9b 01 00       	call   c0027e58 <__muldf3>
c000e307:	59                   	pop    ecx
c000e308:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e30c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e310:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e314:	e8 a2 a1 01 00       	call   c00284bb <__floatsidf>
c000e319:	83 c4 10             	add    esp,0x10
c000e31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e324:	52                   	push   edx
c000e325:	50                   	push   eax
c000e326:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e32a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e32e:	e8 a8 94 01 00       	call   c00277db <__adddf3>
c000e333:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e336:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e33a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e33e:	e8 78 a1 01 00       	call   c00284bb <__floatsidf>
c000e343:	83 c4 10             	add    esp,0x10
c000e346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e34a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e34e:	52                   	push   edx
c000e34f:	50                   	push   eax
c000e350:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e354:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e358:	e8 cc a3 01 00       	call   c0028729 <__ledf2>
c000e35d:	83 c4 10             	add    esp,0x10
c000e360:	85 c0                	test   eax,eax
c000e362:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e366:	0f 8f ea 01 00 00    	jg     c000e556 <zoh_vari_process+0x604>
c000e36c:	85 c9                	test   ecx,ecx
c000e36e:	0f 8e ed 00 00 00    	jle    c000e461 <zoh_vari_process+0x50f>
c000e374:	83 ec 10             	sub    esp,0x10
c000e377:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e37a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e37d:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e380:	ff 37                	push   DWORD PTR [edi]
c000e382:	e8 a5 9a 01 00       	call   c0027e2c <__subdf3>
c000e387:	83 c4 18             	add    esp,0x18
c000e38a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e38e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e392:	52                   	push   edx
c000e393:	50                   	push   eax
c000e394:	e8 27 a5 01 00       	call   c00288c0 <fabs>
c000e399:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e39d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e3a1:	83 c4 10             	add    esp,0x10
c000e3a4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e3a9:	68 23 42 92 0c       	push   0xc924223
c000e3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3b6:	e8 4e a3 01 00       	call   c0028709 <__gtdf2>
c000e3bb:	83 c4 10             	add    esp,0x10
c000e3be:	85 c0                	test   eax,eax
c000e3c0:	0f 8e 9b 00 00 00    	jle    c000e461 <zoh_vari_process+0x50f>
c000e3c6:	8b 07                	mov    eax,DWORD PTR [edi]
c000e3c8:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e3cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e3cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e3d3:	52                   	push   edx
c000e3d4:	50                   	push   eax
c000e3d5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e3d8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e3db:	e8 4c 9a 01 00       	call   c0027e2c <__subdf3>
c000e3e0:	5d                   	pop    ebp
c000e3e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e3e5:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e3e9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e3ec:	e8 ca a0 01 00       	call   c00284bb <__floatsidf>
c000e3f1:	83 c4 10             	add    esp,0x10
c000e3f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e3f8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e3fc:	52                   	push   edx
c000e3fd:	50                   	push   eax
c000e3fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e406:	e8 4d 9a 01 00       	call   c0027e58 <__muldf3>
c000e40b:	59                   	pop    ecx
c000e40c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e410:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e414:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e417:	e8 9f a0 01 00       	call   c00284bb <__floatsidf>
c000e41c:	83 c4 10             	add    esp,0x10
c000e41f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e423:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e427:	52                   	push   edx
c000e428:	50                   	push   eax
c000e429:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e42d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e431:	e8 06 9d 01 00       	call   c002813c <__divdf3>
c000e436:	83 c4 10             	add    esp,0x10
c000e439:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e43d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e441:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e445:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e449:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e44d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e451:	e8 85 93 01 00       	call   c00277db <__adddf3>
c000e456:	83 c4 10             	add    esp,0x10
c000e459:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e45d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e461:	31 d2                	xor    edx,edx
c000e463:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e466:	39 d0                	cmp    eax,edx
c000e468:	7e 1d                	jle    c000e487 <zoh_vari_process+0x535>
c000e46a:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e46d:	29 c1                	sub    ecx,eax
c000e46f:	89 c8                	mov    eax,ecx
c000e471:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e473:	01 d0                	add    eax,edx
c000e475:	42                   	inc    edx
c000e476:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e479:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e47c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e47f:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e482:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e485:	eb dc                	jmp    c000e463 <zoh_vari_process+0x511>
c000e487:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e48b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e48f:	68 00 00 f0 3f       	push   0x3ff00000
c000e494:	6a 00                	push   0x0
c000e496:	e8 a1 9c 01 00       	call   c002813c <__divdf3>
c000e49b:	83 c4 10             	add    esp,0x10
c000e49e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e4a2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e4a6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e4aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e4ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4b6:	e8 20 93 01 00       	call   c00277db <__adddf3>
c000e4bb:	5d                   	pop    ebp
c000e4bc:	59                   	pop    ecx
c000e4bd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e4c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e4c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4cd:	e8 0e a4 01 00       	call   c00288e0 <lrint>
c000e4d2:	83 ec 0c             	sub    esp,0xc
c000e4d5:	50                   	push   eax
c000e4d6:	e8 e0 9f 01 00       	call   c00284bb <__floatsidf>
c000e4db:	83 c4 10             	add    esp,0x10
c000e4de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e4e2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e4e6:	52                   	push   edx
c000e4e7:	50                   	push   eax
c000e4e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e4ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e4f0:	e8 37 99 01 00       	call   c0027e2c <__subdf3>
c000e4f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e4f9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e4fd:	83 c4 20             	add    esp,0x20
c000e500:	6a 00                	push   0x0
c000e502:	6a 00                	push   0x0
c000e504:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e508:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e50c:	e8 16 a2 01 00       	call   c0028727 <__ltdf2>
c000e511:	83 c4 10             	add    esp,0x10
c000e514:	85 c0                	test   eax,eax
c000e516:	79 1e                	jns    c000e536 <zoh_vari_process+0x5e4>
c000e518:	68 00 00 f0 3f       	push   0x3ff00000
c000e51d:	6a 00                	push   0x0
c000e51f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e523:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e527:	e8 af 92 01 00       	call   c00277db <__adddf3>
c000e52c:	83 c4 10             	add    esp,0x10
c000e52f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e532:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e536:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e539:	83 ec 10             	sub    esp,0x10
c000e53c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e540:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e548:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e54c:	e8 db 98 01 00       	call   c0027e2c <__subdf3>
c000e551:	e9 51 fd ff ff       	jmp    c000e2a7 <zoh_vari_process+0x355>
c000e556:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e55a:	7d 3a                	jge    c000e596 <zoh_vari_process+0x644>
c000e55c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e560:	83 ec 0c             	sub    esp,0xc
c000e563:	29 e8                	sub    eax,ebp
c000e565:	99                   	cdq    
c000e566:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e569:	50                   	push   eax
c000e56a:	e8 4c 9f 01 00       	call   c00284bb <__floatsidf>
c000e56f:	83 c4 10             	add    esp,0x10
c000e572:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e576:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e57a:	52                   	push   edx
c000e57b:	50                   	push   eax
c000e57c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e580:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e584:	e8 52 92 01 00       	call   c00277db <__adddf3>
c000e589:	83 c4 10             	add    esp,0x10
c000e58c:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e58f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e592:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e596:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e599:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e59d:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e5a0:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e5a3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e5a6:	85 c0                	test   eax,eax
c000e5a8:	7f 25                	jg     c000e5cf <zoh_vari_process+0x67d>
c000e5aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e5ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e5b2:	89 07                	mov    DWORD PTR [edi],eax
c000e5b4:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e5b7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e5ba:	99                   	cdq    
c000e5bb:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e5be:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e5c1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e5c4:	99                   	cdq    
c000e5c5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e5c8:	31 d2                	xor    edx,edx
c000e5ca:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e5cd:	eb 1e                	jmp    c000e5ed <zoh_vari_process+0x69b>
c000e5cf:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e5d2:	31 d2                	xor    edx,edx
c000e5d4:	29 c8                	sub    eax,ecx
c000e5d6:	c1 e0 02             	shl    eax,0x2
c000e5d9:	39 d1                	cmp    ecx,edx
c000e5db:	7e cd                	jle    c000e5aa <zoh_vari_process+0x658>
c000e5dd:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e5df:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e5e3:	83 c0 04             	add    eax,0x4
c000e5e6:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e5ea:	42                   	inc    edx
c000e5eb:	eb ec                	jmp    c000e5d9 <zoh_vari_process+0x687>
c000e5ed:	83 c4 3c             	add    esp,0x3c
c000e5f0:	89 d0                	mov    eax,edx
c000e5f2:	5b                   	pop    ebx
c000e5f3:	5e                   	pop    esi
c000e5f4:	5f                   	pop    edi
c000e5f5:	5d                   	pop    ebp
c000e5f6:	c3                   	ret    

c000e5f7 <zoh_reset>:
c000e5f7:	83 ec 0c             	sub    esp,0xc
c000e5fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e5fe:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e601:	85 c0                	test   eax,eax
c000e603:	74 20                	je     c000e625 <zoh_reset+0x2e>
c000e605:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e608:	83 c0 1c             	add    eax,0x1c
c000e60b:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e60e:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e615:	c1 e2 02             	shl    edx,0x2
c000e618:	51                   	push   ecx
c000e619:	52                   	push   edx
c000e61a:	6a 00                	push   0x0
c000e61c:	50                   	push   eax
c000e61d:	e8 2e 21 ff ff       	call   c0000750 <memset>
c000e622:	83 c4 10             	add    esp,0x10
c000e625:	83 c4 0c             	add    esp,0xc
c000e628:	c3                   	ret    

c000e629 <zoh_get_name>:
c000e629:	31 c0                	xor    eax,eax
c000e62b:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e630:	75 05                	jne    c000e637 <zoh_get_name+0xe>
c000e632:	b8 9e a2 02 c0       	mov    eax,0xc002a29e
c000e637:	c3                   	ret    

c000e638 <zoh_get_description>:
c000e638:	31 c0                	xor    eax,eax
c000e63a:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e63f:	75 05                	jne    c000e646 <zoh_get_description+0xe>
c000e641:	b8 af a2 02 c0       	mov    eax,0xc002a2af
c000e646:	c3                   	ret    

c000e647 <zoh_set_converter>:
c000e647:	53                   	push   ebx
c000e648:	b8 0a 00 00 00       	mov    eax,0xa
c000e64d:	83 ec 08             	sub    esp,0x8
c000e650:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e654:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e659:	75 6e                	jne    c000e6c9 <zoh_set_converter+0x82>
c000e65b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e65e:	85 c0                	test   eax,eax
c000e660:	74 13                	je     c000e675 <zoh_set_converter+0x2e>
c000e662:	83 ec 0c             	sub    esp,0xc
c000e665:	50                   	push   eax
c000e666:	e8 fe 11 00 00       	call   c000f869 <free>
c000e66b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e672:	83 c4 10             	add    esp,0x10
c000e675:	50                   	push   eax
c000e676:	50                   	push   eax
c000e677:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e67a:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e681:	50                   	push   eax
c000e682:	6a 01                	push   0x1
c000e684:	e8 00 12 00 00       	call   c000f889 <calloc>
c000e689:	83 c4 10             	add    esp,0x10
c000e68c:	89 c2                	mov    edx,eax
c000e68e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e691:	85 d2                	test   edx,edx
c000e693:	b8 01 00 00 00       	mov    eax,0x1
c000e698:	74 2f                	je     c000e6c9 <zoh_set_converter+0x82>
c000e69a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e69d:	83 ec 0c             	sub    esp,0xc
c000e6a0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e6a3:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e6a9:	c7 43 24 52 df 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000df52
c000e6b0:	c7 43 20 52 df 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000df52
c000e6b7:	c7 43 28 f7 e5 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e5f7
c000e6be:	53                   	push   ebx
c000e6bf:	e8 33 ff ff ff       	call   c000e5f7 <zoh_reset>
c000e6c4:	83 c4 10             	add    esp,0x10
c000e6c7:	31 c0                	xor    eax,eax
c000e6c9:	83 c4 08             	add    esp,0x8
c000e6cc:	5b                   	pop    ebx
c000e6cd:	c3                   	ret    

c000e6ce <CPU::current()>:
c000e6ce:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c000e6d3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e6d9:	c3                   	ret    

c000e6da <operator new(unsigned long)>:
c000e6da:	e9 7a 11 00 00       	jmp    c000f859 <malloc>

c000e6df <operator delete(void*)>:
c000e6df:	e9 95 11 00 00       	jmp    c000f879 <rfree>

c000e6e4 <disableIRQs()>:
c000e6e4:	fa                   	cli    
c000e6e5:	ff 05 08 f9 02 c0    	inc    DWORD PTR ds:0xc002f908
c000e6eb:	c3                   	ret    

c000e6ec <enableIRQs()>:
c000e6ec:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c000e6f1:	48                   	dec    eax
c000e6f2:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c000e6f7:	75 01                	jne    c000e6fa <enableIRQs()+0xe>
c000e6f9:	fb                   	sti    
c000e6fa:	c3                   	ret    

c000e6fb <lockScheduler()>:
c000e6fb:	fa                   	cli    
c000e6fc:	ff 05 08 f9 02 c0    	inc    DWORD PTR ds:0xc002f908
c000e702:	c3                   	ret    

c000e703 <unlockScheduler()>:
c000e703:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c000e708:	48                   	dec    eax
c000e709:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c000e70e:	75 01                	jne    c000e711 <unlockScheduler()+0xe>
c000e710:	fb                   	sti    
c000e711:	c3                   	ret    

c000e712 <lockStuff()>:
c000e712:	fa                   	cli    
c000e713:	ff 05 08 f9 02 c0    	inc    DWORD PTR ds:0xc002f908
c000e719:	ff 05 04 f9 02 c0    	inc    DWORD PTR ds:0xc002f904
c000e71f:	c3                   	ret    

c000e720 <unlockStuff()>:
c000e720:	83 ec 0c             	sub    esp,0xc
c000e723:	a1 04 f9 02 c0       	mov    eax,ds:0xc002f904
c000e728:	48                   	dec    eax
c000e729:	a3 04 f9 02 c0       	mov    ds:0xc002f904,eax
c000e72e:	75 18                	jne    c000e748 <unlockStuff()+0x28>
c000e730:	83 3d 00 f9 02 c0 00 	cmp    DWORD PTR ds:0xc002f900,0x0
c000e737:	74 0f                	je     c000e748 <unlockStuff()+0x28>
c000e739:	c7 05 00 f9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f900,0x0
c000e743:	e8 69 f6 00 00       	call   c001ddb1 <schedule()>
c000e748:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c000e74d:	48                   	dec    eax
c000e74e:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c000e753:	75 01                	jne    c000e756 <unlockStuff()+0x36>
c000e755:	fb                   	sti    
c000e756:	83 c4 0c             	add    esp,0xc
c000e759:	c3                   	ret    

c000e75a <Virt::getAKernelVAS()>:
c000e75a:	a1 70 e5 02 c0       	mov    eax,ds:0xc002e570
c000e75f:	c3                   	ret    

c000e760 <__not_memcpy>:
c000e760:	57                   	push   edi
c000e761:	56                   	push   esi
c000e762:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e76a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e76e:	89 c7                	mov    edi,eax
c000e770:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e772:	5e                   	pop    esi
c000e773:	5f                   	pop    edi
c000e774:	c3                   	ret    

c000e775 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e775:	83 ec 0c             	sub    esp,0xc
c000e778:	83 ec 08             	sub    esp,0x8
c000e77b:	68 e6 a2 02 c0       	push   0xc002a2e6
c000e780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e784:	e8 0f 21 ff ff       	call   c0000898 <strcmp>
c000e789:	83 c4 10             	add    esp,0x10
c000e78c:	85 c0                	test   eax,eax
c000e78e:	0f 94 c0             	sete   al
c000e791:	84 c0                	test   al,al
c000e793:	74 0a                	je     c000e79f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e795:	b8 08 e4 02 c0       	mov    eax,0xc002e408
c000e79a:	e9 e3 00 00 00       	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e79f:	83 ec 08             	sub    esp,0x8
c000e7a2:	68 ef a2 02 c0       	push   0xc002a2ef
c000e7a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7ab:	e8 e8 20 ff ff       	call   c0000898 <strcmp>
c000e7b0:	83 c4 10             	add    esp,0x10
c000e7b3:	85 c0                	test   eax,eax
c000e7b5:	0f 94 c0             	sete   al
c000e7b8:	84 c0                	test   al,al
c000e7ba:	74 0a                	je     c000e7c6 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e7bc:	b8 54 6c 02 c0       	mov    eax,0xc0026c54
c000e7c1:	e9 bc 00 00 00       	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e7c6:	83 ec 08             	sub    esp,0x8
c000e7c9:	68 f9 a2 02 c0       	push   0xc002a2f9
c000e7ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7d2:	e8 c1 20 ff ff       	call   c0000898 <strcmp>
c000e7d7:	83 c4 10             	add    esp,0x10
c000e7da:	85 c0                	test   eax,eax
c000e7dc:	0f 94 c0             	sete   al
c000e7df:	84 c0                	test   al,al
c000e7e1:	74 0a                	je     c000e7ed <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e7e3:	b8 88 69 02 c0       	mov    eax,0xc0026988
c000e7e8:	e9 95 00 00 00       	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e7ed:	83 ec 08             	sub    esp,0x8
c000e7f0:	68 02 a3 02 c0       	push   0xc002a302
c000e7f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7f9:	e8 9a 20 ff ff       	call   c0000898 <strcmp>
c000e7fe:	83 c4 10             	add    esp,0x10
c000e801:	85 c0                	test   eax,eax
c000e803:	0f 94 c0             	sete   al
c000e806:	84 c0                	test   al,al
c000e808:	74 07                	je     c000e811 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e80a:	b8 54 6d 02 c0       	mov    eax,0xc0026d54
c000e80f:	eb 71                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e811:	83 ec 08             	sub    esp,0x8
c000e814:	68 0c a3 02 c0       	push   0xc002a30c
c000e819:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e81d:	e8 76 20 ff ff       	call   c0000898 <strcmp>
c000e822:	83 c4 10             	add    esp,0x10
c000e825:	85 c0                	test   eax,eax
c000e827:	0f 94 c0             	sete   al
c000e82a:	84 c0                	test   al,al
c000e82c:	74 07                	je     c000e835 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e82e:	b8 d4 6a 02 c0       	mov    eax,0xc0026ad4
c000e833:	eb 4d                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e835:	83 ec 08             	sub    esp,0x8
c000e838:	68 15 a3 02 c0       	push   0xc002a315
c000e83d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e841:	e8 52 20 ff ff       	call   c0000898 <strcmp>
c000e846:	83 c4 10             	add    esp,0x10
c000e849:	85 c0                	test   eax,eax
c000e84b:	0f 94 c0             	sete   al
c000e84e:	84 c0                	test   al,al
c000e850:	74 07                	je     c000e859 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e852:	b8 0c e4 02 c0       	mov    eax,0xc002e40c
c000e857:	eb 29                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e859:	83 ec 08             	sub    esp,0x8
c000e85c:	68 22 a3 02 c0       	push   0xc002a322
c000e861:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e865:	e8 2e 20 ff ff       	call   c0000898 <strcmp>
c000e86a:	83 c4 10             	add    esp,0x10
c000e86d:	85 c0                	test   eax,eax
c000e86f:	0f 94 c0             	sete   al
c000e872:	84 c0                	test   al,al
c000e874:	74 07                	je     c000e87d <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e876:	b8 0d e4 02 c0       	mov    eax,0xc002e40d
c000e87b:	eb 05                	jmp    c000e882 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e87d:	b8 00 00 00 00       	mov    eax,0x0
c000e882:	83 c4 0c             	add    esp,0xc
c000e885:	c3                   	ret    

c000e886 <Computer::close(int, int, void*)>:
c000e886:	57                   	push   edi
c000e887:	56                   	push   esi
c000e888:	53                   	push   ebx
c000e889:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e88d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e891:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e895:	83 ec 0c             	sub    esp,0xc
c000e898:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e89e:	e8 d1 55 00 00       	call   c0013e74 <Device::closeAll()>
c000e8a3:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e8a9:	83 c4 10             	add    esp,0x10
c000e8ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000e8ae:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e8b2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e8ba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e8be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e8c2:	5b                   	pop    ebx
c000e8c3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e8c6:	5e                   	pop    esi
c000e8c7:	5f                   	pop    edi
c000e8c8:	ff e0                	jmp    eax

c000e8ca <Krnl::firstTask()>:
c000e8ca:	53                   	push   ebx
c000e8cb:	83 ec 14             	sub    esp,0x14
c000e8ce:	68 2f a3 02 c0       	push   0xc002a32f
c000e8d3:	e8 db 0f 00 00       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c000e8d8:	fb                   	sti    
c000e8d9:	c7 04 24 46 a3 02 c0 	mov    DWORD PTR [esp],0xc002a346
c000e8e0:	e8 ce 0f 00 00       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c000e8e5:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e8ec:	e8 68 0f 00 00       	call   c000f859 <malloc>
c000e8f1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e8f8:	89 c3                	mov    ebx,eax
c000e8fa:	ff 35 30 f9 02 c0    	push   DWORD PTR ds:0xc002f930
c000e900:	68 5f a3 02 c0       	push   0xc002a35f
c000e905:	6a 01                	push   0x1
c000e907:	50                   	push   eax
c000e908:	e8 87 f0 00 00       	call   c001d994 <Process::Process(bool, char const*, Process*, char**)>
c000e90d:	83 c4 20             	add    esp,0x20
c000e910:	68 ff 00 00 00       	push   0xff
c000e915:	6a 00                	push   0x0
c000e917:	68 ef f1 00 c0       	push   0xc000f1ef
c000e91c:	53                   	push   ebx
c000e91d:	e8 6a f2 00 00       	call   c001db8c <Process::createThread(void (*)(void*), void*, int)>
c000e922:	6a 7a                	push   0x7a
c000e924:	6a 00                	push   0x0
c000e926:	68 7f e5 01 c0       	push   0xc001e57f
c000e92b:	ff 35 30 f9 02 c0    	push   DWORD PTR ds:0xc002f930
c000e931:	e8 56 f2 00 00       	call   c001db8c <Process::createThread(void (*)(void*), void*, int)>
c000e936:	83 c4 14             	add    esp,0x14
c000e939:	a3 e8 f8 02 c0       	mov    ds:0xc002f8e8,eax
c000e93e:	68 c8 a4 02 c0       	push   0xc002a4c8
c000e943:	c6 05 0d e4 02 c0 01 	mov    BYTE PTR ds:0xc002e40d,0x1
c000e94a:	e8 64 0f 00 00       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c000e94f:	e8 d7 ff 00 00       	call   c001e92b <Vm::initialise8086()>
c000e954:	e8 e3 42 00 00       	call   c0012c3c <Fs::initVFS()>
c000e959:	c7 04 24 6c a3 02 c0 	mov    DWORD PTR [esp],0xc002a36c
c000e960:	e8 4e 0f 00 00       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c000e965:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c000e96a:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e970:	8b 10                	mov    edx,DWORD PTR [eax]
c000e972:	6a 00                	push   0x0
c000e974:	6a 00                	push   0x0
c000e976:	6a 00                	push   0x0
c000e978:	50                   	push   eax
c000e979:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e97c:	83 c4 14             	add    esp,0x14
c000e97f:	68 c8 a4 02 c0       	push   0xc002a4c8
c000e984:	e8 2a 0f 00 00       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c000e989:	e8 8e d8 00 00       	call   c001c21c <Sys::loadSyscalls()>
c000e98e:	e8 83 b7 00 00       	call   c001a116 <Krnl::loadSystemEnv()>
c000e993:	83 c4 0c             	add    esp,0xc
c000e996:	6a 3a                	push   0x3a
c000e998:	68 86 a3 02 c0       	push   0xc002a386
c000e99d:	68 8f a3 02 c0       	push   0xc002a38f
c000e9a2:	e8 34 c6 00 00       	call   c001afdb <Reg::readIntWithDefault(char*, char*, int)>
c000e9a7:	89 04 24             	mov    DWORD PTR [esp],eax
c000e9aa:	e8 7d 4d 00 00       	call   c001372c <User::loadClockSettings(int)>
c000e9af:	c7 04 24 ec a4 02 c0 	mov    DWORD PTR [esp],0xc002a4ec
c000e9b6:	e8 f8 0e 00 00       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c000e9bb:	58                   	pop    eax
c000e9bc:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c000e9c1:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e9c7:	e8 68 54 00 00       	call   c0013e34 <Device::loadDriversForAll()>
c000e9cc:	c7 04 24 97 a3 02 c0 	mov    DWORD PTR [esp],0xc002a397
c000e9d3:	e8 db 0e 00 00       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c000e9d8:	e8 a1 b2 00 00       	call   c0019c7e <Krnl::startCPUs()>
c000e9dd:	c7 04 24 b1 a3 02 c0 	mov    DWORD PTR [esp],0xc002a3b1
c000e9e4:	e8 ca 0e 00 00       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c000e9e9:	5a                   	pop    edx
c000e9ea:	8b 1d 08 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e408
c000e9f0:	59                   	pop    ecx
c000e9f1:	6a 01                	push   0x1
c000e9f3:	68 c2 a3 02 c0       	push   0xc002a3c2
c000e9f8:	e8 ef e9 00 00       	call   c001d3ec <Thr::loadDLL(char const*, bool)>
c000e9fd:	5a                   	pop    edx
c000e9fe:	59                   	pop    ecx
c000e9ff:	53                   	push   ebx
c000ea00:	50                   	push   eax
c000ea01:	e8 17 ec 00 00       	call   c001d61d <Thr::executeDLL(unsigned long, void*)>
c000ea06:	83 c4 10             	add    esp,0x10
c000ea09:	83 ec 0c             	sub    esp,0xc
c000ea0c:	6a 02                	push   0x2
c000ea0e:	e8 74 f5 00 00       	call   c001df87 <blockTask(TaskState)>
c000ea13:	83 c4 10             	add    esp,0x10
c000ea16:	eb f1                	jmp    c000ea09 <Krnl::firstTask()+0x13f>

c000ea18 <Computer::Computer()>:
c000ea18:	83 ec 0c             	sub    esp,0xc
c000ea1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea1f:	83 ec 08             	sub    esp,0x8
c000ea22:	68 de a3 02 c0       	push   0xc002a3de
c000ea27:	50                   	push   eax
c000ea28:	e8 c1 54 00 00       	call   c0013eee <Device::Device(char const*)>
c000ea2d:	83 c4 10             	add    esp,0x10
c000ea30:	ba 9c a5 02 c0       	mov    edx,0xc002a59c
c000ea35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea39:	89 10                	mov    DWORD PTR [eax],edx
c000ea3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea3f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ea49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea4d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ea57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea5b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000ea61:	83 ca 04             	or     edx,0x4
c000ea64:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000ea6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea6e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ea74:	0f b6 d0             	movzx  edx,al
c000ea77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea7b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ea82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea86:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ea8c:	0f b6 d0             	movzx  edx,al
c000ea8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea93:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000ea98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea9c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eaa2:	8d 50 01             	lea    edx,[eax+0x1]
c000eaa5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000eaa9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000eaaf:	0f b6 d0             	movzx  edx,al
c000eab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eab6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000eaba:	83 e1 3f             	and    ecx,0x3f
c000eabd:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000eac1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eac5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eacb:	0f b6 d0             	movzx  edx,al
c000eace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ead2:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000ead9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eadd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eae3:	0f b6 d0             	movzx  edx,al
c000eae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaea:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000eaef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaf3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eaf9:	8d 50 01             	lea    edx,[eax+0x1]
c000eafc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000eb00:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000eb06:	0f b6 d0             	movzx  edx,al
c000eb09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb0d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000eb11:	83 e1 3f             	and    ecx,0x3f
c000eb14:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000eb18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb1c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eb22:	0f b6 d0             	movzx  edx,al
c000eb25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb29:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000eb30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb34:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eb3a:	0f b6 d0             	movzx  edx,al
c000eb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb41:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000eb46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb4a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000eb50:	8d 50 01             	lea    edx,[eax+0x1]
c000eb53:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000eb57:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000eb5d:	0f b6 d0             	movzx  edx,al
c000eb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb64:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000eb68:	83 e1 3f             	and    ecx,0x3f
c000eb6b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000eb6f:	90                   	nop
c000eb70:	83 c4 0c             	add    esp,0xc
c000eb73:	c3                   	ret    

c000eb74 <Computer::setBootMessage(char const*)>:
c000eb74:	c3                   	ret    
c000eb75:	90                   	nop

c000eb76 <Computer::detectFeatures()>:
c000eb76:	55                   	push   ebp
c000eb77:	57                   	push   edi
c000eb78:	56                   	push   esi
c000eb79:	53                   	push   ebx
c000eb7a:	83 ec 1c             	sub    esp,0x1c
c000eb7d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000eb81:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000eb8b:	e8 54 17 ff ff       	call   c00002e4 <detectCPUID>
c000eb90:	85 c0                	test   eax,eax
c000eb92:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb98:	0f 95 c2             	setne  dl
c000eb9b:	83 e0 fd             	and    eax,0xfffffffd
c000eb9e:	d1 e2                	shl    edx,1
c000eba0:	09 d0                	or     eax,edx
c000eba2:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eba8:	a8 02                	test   al,0x2
c000ebaa:	75 46                	jne    c000ebf2 <Computer::detectFeatures()+0x7c>
c000ebac:	f6 05 21 e4 02 c0 04 	test   BYTE PTR ds:0xc002e421,0x4
c000ebb3:	74 07                	je     c000ebbc <Computer::detectFeatures()+0x46>
c000ebb5:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000ebbc:	e8 55 7d 01 00       	call   c0026916 <x87Detect>
c000ebc1:	83 e0 01             	and    eax,0x1
c000ebc4:	c1 e0 04             	shl    eax,0x4
c000ebc7:	88 c2                	mov    dl,al
c000ebc9:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ebcf:	83 e0 ef             	and    eax,0xffffffef
c000ebd2:	09 d0                	or     eax,edx
c000ebd4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ebda:	a8 10                	test   al,0x10
c000ebdc:	0f 85 2a 01 00 00    	jne    c000ed0c <Computer::detectFeatures()+0x196>
c000ebe2:	84 c0                	test   al,al
c000ebe4:	0f 88 45 01 00 00    	js     c000ed2f <Computer::detectFeatures()+0x1b9>
c000ebea:	83 c4 1c             	add    esp,0x1c
c000ebed:	5b                   	pop    ebx
c000ebee:	5e                   	pop    esi
c000ebef:	5f                   	pop    edi
c000ebf0:	5d                   	pop    ebp
c000ebf1:	c3                   	ret    
c000ebf2:	83 ec 0c             	sub    esp,0xc
c000ebf5:	6a 20                	push   0x20
c000ebf7:	e8 84 9f 00 00       	call   c0018b80 <CPU::cpuidCheckEDX(unsigned int)>
c000ebfc:	83 e0 01             	and    eax,0x1
c000ebff:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ec06:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ec0c:	83 e0 f7             	and    eax,0xfffffff7
c000ec0f:	09 d0                	or     eax,edx
c000ec11:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ec17:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000ec1e:	e8 5d 9f 00 00       	call   c0018b80 <CPU::cpuidCheckEDX(unsigned int)>
c000ec23:	83 e0 01             	and    eax,0x1
c000ec26:	88 c2                	mov    dl,al
c000ec28:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ec2e:	83 e0 fe             	and    eax,0xfffffffe
c000ec31:	09 d0                	or     eax,edx
c000ec33:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ec39:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000ec40:	e8 3b 9f 00 00       	call   c0018b80 <CPU::cpuidCheckEDX(unsigned int)>
c000ec45:	c1 e0 07             	shl    eax,0x7
c000ec48:	88 c2                	mov    dl,al
c000ec4a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ec50:	83 e0 7f             	and    eax,0x7f
c000ec53:	09 d0                	or     eax,edx
c000ec55:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ec5b:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ec62:	e8 19 9f 00 00       	call   c0018b80 <CPU::cpuidCheckEDX(unsigned int)>
c000ec67:	83 c4 10             	add    esp,0x10
c000ec6a:	83 e0 01             	and    eax,0x1
c000ec6d:	c1 e0 05             	shl    eax,0x5
c000ec70:	88 c2                	mov    dl,al
c000ec72:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ec78:	83 e0 df             	and    eax,0xffffffdf
c000ec7b:	09 d0                	or     eax,edx
c000ec7d:	f7 05 20 e4 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e420,0x401
c000ec87:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ec8d:	0f 84 c2 00 00 00    	je     c000ed55 <Computer::detectFeatures()+0x1df>
c000ec93:	83 e0 fe             	and    eax,0xfffffffe
c000ec96:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ec9c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eca2:	88 c2                	mov    dl,al
c000eca4:	83 e2 09             	and    edx,0x9
c000eca7:	fe ca                	dec    dl
c000eca9:	75 09                	jne    c000ecb4 <Computer::detectFeatures()+0x13e>
c000ecab:	83 e0 fe             	and    eax,0xfffffffe
c000ecae:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ecb4:	83 ec 0c             	sub    esp,0xc
c000ecb7:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ecbb:	50                   	push   eax
c000ecbc:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ecc0:	55                   	push   ebp
c000ecc1:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ecc5:	57                   	push   edi
c000ecc6:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ecca:	56                   	push   esi
c000eccb:	68 00 00 00 80       	push   0x80000000
c000ecd0:	e8 27 9e 00 00       	call   c0018afc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ecd5:	83 c4 20             	add    esp,0x20
c000ecd8:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ecdf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ece3:	0f 86 c3 fe ff ff    	jbe    c000ebac <Computer::detectFeatures()+0x36>
c000ece9:	83 ec 0c             	sub    esp,0xc
c000ecec:	50                   	push   eax
c000eced:	55                   	push   ebp
c000ecee:	57                   	push   edi
c000ecef:	56                   	push   esi
c000ecf0:	68 01 00 00 80       	push   0x80000001
c000ecf5:	e8 02 9e 00 00       	call   c0018afc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ecfa:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ed04:	83 c4 20             	add    esp,0x20
c000ed07:	e9 a0 fe ff ff       	jmp    c000ebac <Computer::detectFeatures()+0x36>
c000ed0c:	e8 bf 7b 01 00       	call   c00268d0 <absolutelyNoChanceInHell>
c000ed11:	88 c2                	mov    dl,al
c000ed13:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ed19:	c1 e2 07             	shl    edx,0x7
c000ed1c:	83 e0 7f             	and    eax,0x7f
c000ed1f:	09 d0                	or     eax,edx
c000ed21:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ed27:	84 c0                	test   al,al
c000ed29:	0f 89 bb fe ff ff    	jns    c000ebea <Computer::detectFeatures()+0x74>
c000ed2f:	e8 7c 7b 01 00       	call   c00268b0 <avxDetect>
c000ed34:	83 e0 01             	and    eax,0x1
c000ed37:	c1 e0 05             	shl    eax,0x5
c000ed3a:	88 c2                	mov    dl,al
c000ed3c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ed42:	83 e0 df             	and    eax,0xffffffdf
c000ed45:	09 d0                	or     eax,edx
c000ed47:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ed4d:	83 c4 1c             	add    esp,0x1c
c000ed50:	5b                   	pop    ebx
c000ed51:	5e                   	pop    esi
c000ed52:	5f                   	pop    edi
c000ed53:	5d                   	pop    ebp
c000ed54:	c3                   	ret    
c000ed55:	83 ec 0c             	sub    esp,0xc
c000ed58:	68 00 02 00 00       	push   0x200
c000ed5d:	e8 1e 9e 00 00       	call   c0018b80 <CPU::cpuidCheckEDX(unsigned int)>
c000ed62:	83 c4 10             	add    esp,0x10
c000ed65:	83 e0 01             	and    eax,0x1
c000ed68:	88 c2                	mov    dl,al
c000ed6a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ed70:	83 e0 fe             	and    eax,0xfffffffe
c000ed73:	09 d0                	or     eax,edx
c000ed75:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ed7b:	e9 1c ff ff ff       	jmp    c000ec9c <Computer::detectFeatures()+0x126>

c000ed80 <Computer::displayFeatures()>:
c000ed80:	c3                   	ret    
c000ed81:	90                   	nop

c000ed82 <Computer::rdmsr(unsigned int)>:
c000ed82:	83 ec 0c             	sub    esp,0xc
c000ed85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed89:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ed90:	74 0a                	je     c000ed9c <Computer::rdmsr(unsigned int)+0x1a>
c000ed92:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ed96:	0f 32                	rdmsr  
c000ed98:	83 c4 0c             	add    esp,0xc
c000ed9b:	c3                   	ret    
c000ed9c:	83 ec 0c             	sub    esp,0xc
c000ed9f:	68 e7 a3 02 c0       	push   0xc002a3e7
c000eda4:	e8 76 b4 00 00       	call   c001a21f <Krnl::panic(char const*)>
c000eda9:	83 c4 10             	add    esp,0x10
c000edac:	eb e4                	jmp    c000ed92 <Computer::rdmsr(unsigned int)+0x10>

c000edae <Computer::wrmsr(unsigned int, unsigned long long)>:
c000edae:	57                   	push   edi
c000edaf:	56                   	push   esi
c000edb0:	52                   	push   edx
c000edb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edb5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000edb9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000edbd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edc4:	74 0e                	je     c000edd4 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000edc6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edca:	89 f0                	mov    eax,esi
c000edcc:	89 fa                	mov    edx,edi
c000edce:	0f 30                	wrmsr  
c000edd0:	58                   	pop    eax
c000edd1:	5e                   	pop    esi
c000edd2:	5f                   	pop    edi
c000edd3:	c3                   	ret    
c000edd4:	83 ec 0c             	sub    esp,0xc
c000edd7:	68 ed a3 02 c0       	push   0xc002a3ed
c000eddc:	e8 3e b4 00 00       	call   c001a21f <Krnl::panic(char const*)>
c000ede1:	83 c4 10             	add    esp,0x10
c000ede4:	eb e0                	jmp    c000edc6 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ede6 <Computer::nmiEnabled()>:
c000ede6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edea:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000edf0:	c3                   	ret    
c000edf1:	90                   	nop

c000edf2 <Computer::readCMOS(unsigned char)>:
c000edf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edf6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000edfd:	19 c0                	sbb    eax,eax
c000edff:	83 e0 80             	and    eax,0xffffff80
c000ee02:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee06:	e6 70                	out    0x70,al
c000ee08:	e4 71                	in     al,0x71
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <Computer::enableNMI(bool)>:
c000ee0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee14:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee1a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee22:	eb ce                	jmp    c000edf2 <Computer::readCMOS(unsigned char)>

c000ee24 <Computer::open(int, int, void*)>:
c000ee24:	56                   	push   esi
c000ee25:	53                   	push   ebx
c000ee26:	83 ec 10             	sub    esp,0x10
c000ee29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee2d:	68 0c a5 02 c0       	push   0xc002a50c
c000ee32:	e8 7c 0a 00 00       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c000ee37:	58                   	pop    eax
c000ee38:	f6 05 20 e4 02 c0 04 	test   BYTE PTR ds:0xc002e420,0x4
c000ee3f:	5a                   	pop    edx
c000ee40:	0f 94 05 40 d3 02 c0 	sete   BYTE PTR ds:0xc002d340
c000ee47:	68 58 01 00 00       	push   0x158
c000ee4c:	68 f3 a3 02 c0       	push   0xc002a3f3
c000ee51:	e8 5b 3a 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c000ee56:	59                   	pop    ecx
c000ee57:	5e                   	pop    esi
c000ee58:	68 14 01 00 00       	push   0x114
c000ee5d:	68 09 a4 02 c0       	push   0xc002a409
c000ee62:	e8 4a 3a 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c000ee67:	58                   	pop    eax
c000ee68:	5a                   	pop    edx
c000ee69:	6a 14                	push   0x14
c000ee6b:	68 1d a4 02 c0       	push   0xc002a41d
c000ee70:	e8 3c 3a 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c000ee75:	c7 04 24 30 a4 02 c0 	mov    DWORD PTR [esp],0xc002a430
c000ee7c:	e8 32 0a 00 00       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c000ee81:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ee88:	e8 cc 09 00 00       	call   c000f859 <malloc>
c000ee8d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ee90:	89 c6                	mov    esi,eax
c000ee92:	e8 5d 8f 00 00       	call   c0017df4 <ACPI::ACPI()>
c000ee97:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ee9d:	c7 04 24 4a a4 02 c0 	mov    DWORD PTR [esp],0xc002a44a
c000eea4:	e8 0a 0a 00 00       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c000eea9:	59                   	pop    ecx
c000eeaa:	5e                   	pop    esi
c000eeab:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000eeb1:	53                   	push   ebx
c000eeb2:	e8 33 4e 00 00       	call   c0013cea <Device::addChild(Device*)>
c000eeb7:	c7 04 24 30 a5 02 c0 	mov    DWORD PTR [esp],0xc002a530
c000eebe:	e8 f0 09 00 00       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c000eec3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec6:	e8 ab fc ff ff       	call   c000eb76 <Computer::detectFeatures()>
c000eecb:	c7 04 24 50 a5 02 c0 	mov    DWORD PTR [esp],0xc002a550
c000eed2:	e8 dc 09 00 00       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c000eed7:	c7 04 24 64 a4 02 c0 	mov    DWORD PTR [esp],0xc002a464
c000eede:	e8 d0 09 00 00       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c000eee3:	58                   	pop    eax
c000eee4:	5a                   	pop    edx
c000eee5:	6a 01                	push   0x1
c000eee7:	53                   	push   ebx
c000eee8:	e8 1f ff ff ff       	call   c000ee0c <Computer::enableNMI(bool)>
c000eeed:	c7 04 24 97 a3 02 c0 	mov    DWORD PTR [esp],0xc002a397
c000eef4:	e8 ba 09 00 00       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c000eef9:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef00:	e8 54 09 00 00       	call   c000f859 <malloc>
c000ef05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef08:	89 c6                	mov    esi,eax
c000ef0a:	e8 29 9d 00 00       	call   c0018c38 <CPU::CPU()>
c000ef0f:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef15:	59                   	pop    ecx
c000ef16:	58                   	pop    eax
c000ef17:	56                   	push   esi
c000ef18:	53                   	push   ebx
c000ef19:	e8 cc 4d 00 00       	call   c0013cea <Device::addChild(Device*)>
c000ef1e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef24:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef2a:	6a 00                	push   0x0
c000ef2c:	6a 00                	push   0x0
c000ef2e:	50                   	push   eax
c000ef2f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef32:	83 c4 14             	add    esp,0x14
c000ef35:	68 70 a5 02 c0       	push   0xc002a570
c000ef3a:	e8 74 09 00 00       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c000ef3f:	e8 3e 53 00 00       	call   c0014282 <setupFPU()>
c000ef44:	83 c4 10             	add    esp,0x10
c000ef47:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef4d:	85 c0                	test   eax,eax
c000ef4f:	74 1f                	je     c000ef70 <Computer::open(int, int, void*)+0x14c>
c000ef51:	83 ec 08             	sub    esp,0x8
c000ef54:	50                   	push   eax
c000ef55:	53                   	push   ebx
c000ef56:	e8 8f 4d 00 00       	call   c0013cea <Device::addChild(Device*)>
c000ef5b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef61:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef63:	6a 00                	push   0x0
c000ef65:	6a 00                	push   0x0
c000ef67:	6a 00                	push   0x0
c000ef69:	50                   	push   eax
c000ef6a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef6d:	83 c4 20             	add    esp,0x20
c000ef70:	83 ec 0c             	sub    esp,0xc
c000ef73:	68 75 a4 02 c0       	push   0xc002a475
c000ef78:	e8 36 09 00 00       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c000ef7d:	c7 04 24 ca e8 00 c0 	mov    DWORD PTR [esp],0xc000e8ca
c000ef84:	e8 25 ed 00 00       	call   c001dcae <setupMultitasking(void (*)())>
c000ef89:	83 c4 14             	add    esp,0x14
c000ef8c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef91:	5b                   	pop    ebx
c000ef92:	5e                   	pop    esi
c000ef93:	c3                   	ret    

c000ef94 <Computer::disableNMI()>:
c000ef94:	6a 00                	push   0x0
c000ef96:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef9a:	e8 6d fe ff ff       	call   c000ee0c <Computer::enableNMI(bool)>
c000ef9f:	58                   	pop    eax
c000efa0:	5a                   	pop    edx
c000efa1:	c3                   	ret    

c000efa2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000efa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efa6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000efad:	19 c0                	sbb    eax,eax
c000efaf:	83 e0 80             	and    eax,0xffffff80
c000efb2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000efb6:	e6 70                	out    0x70,al
c000efb8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efbc:	e6 71                	out    0x71,al
c000efbe:	c3                   	ret    
c000efbf:	90                   	nop

c000efc0 <Computer::handleNMI()>:
c000efc0:	56                   	push   esi
c000efc1:	53                   	push   ebx
c000efc2:	83 ec 10             	sub    esp,0x10
c000efc5:	e4 92                	in     al,0x92
c000efc7:	89 c6                	mov    esi,eax
c000efc9:	e4 61                	in     al,0x61
c000efcb:	68 90 a4 02 c0       	push   0xc002a490
c000efd0:	88 c3                	mov    bl,al
c000efd2:	e8 da 38 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c000efd7:	83 c4 10             	add    esp,0x10
c000efda:	83 e6 10             	and    esi,0x10
c000efdd:	75 0d                	jne    c000efec <Computer::handleNMI()+0x2c>
c000efdf:	f6 c3 40             	test   bl,0x40
c000efe2:	75 1d                	jne    c000f001 <Computer::handleNMI()+0x41>
c000efe4:	84 db                	test   bl,bl
c000efe6:	78 2d                	js     c000f015 <Computer::handleNMI()+0x55>
c000efe8:	58                   	pop    eax
c000efe9:	5b                   	pop    ebx
c000efea:	5e                   	pop    esi
c000efeb:	c3                   	ret    
c000efec:	83 ec 0c             	sub    esp,0xc
c000efef:	68 a1 a4 02 c0       	push   0xc002a4a1
c000eff4:	e8 26 b2 00 00       	call   c001a21f <Krnl::panic(char const*)>
c000eff9:	83 c4 10             	add    esp,0x10
c000effc:	f6 c3 40             	test   bl,0x40
c000efff:	74 e3                	je     c000efe4 <Computer::handleNMI()+0x24>
c000f001:	83 ec 0c             	sub    esp,0xc
c000f004:	68 ae a4 02 c0       	push   0xc002a4ae
c000f009:	e8 11 b2 00 00       	call   c001a21f <Krnl::panic(char const*)>
c000f00e:	83 c4 10             	add    esp,0x10
c000f011:	84 db                	test   bl,bl
c000f013:	79 d3                	jns    c000efe8 <Computer::handleNMI()+0x28>
c000f015:	c7 44 24 10 b8 a4 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a4b8
c000f01d:	5a                   	pop    edx
c000f01e:	5b                   	pop    ebx
c000f01f:	5e                   	pop    esi
c000f020:	e9 fa b1 00 00       	jmp    c001a21f <Krnl::panic(char const*)>
c000f025:	90                   	nop

c000f026 <Computer::setDiskActivityLight(int, bool)>:
c000f026:	56                   	push   esi
c000f027:	53                   	push   ebx
c000f028:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f02c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f031:	77 1b                	ja     c000f04e <Computer::setDiskActivityLight(int, bool)+0x28>
c000f033:	e4 92                	in     al,0x92
c000f035:	bb 40 00 00 00       	mov    ebx,0x40
c000f03a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f03e:	89 da                	mov    edx,ebx
c000f040:	d3 e2                	shl    edx,cl
c000f042:	89 f1                	mov    ecx,esi
c000f044:	f7 d2                	not    edx
c000f046:	d3 e3                	shl    ebx,cl
c000f048:	21 d0                	and    eax,edx
c000f04a:	09 d8                	or     eax,ebx
c000f04c:	e6 92                	out    0x92,al
c000f04e:	5b                   	pop    ebx
c000f04f:	5e                   	pop    esi
c000f050:	c3                   	ret    
c000f051:	90                   	nop

c000f052 <GDTEntry::setBase(unsigned int)>:
c000f052:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f056:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f05a:	89 c1                	mov    ecx,eax
c000f05c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f060:	c1 e9 10             	shr    ecx,0x10
c000f063:	c1 e8 18             	shr    eax,0x18
c000f066:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f069:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f06c:	c3                   	ret    
c000f06d:	90                   	nop

c000f06e <GDTEntry::setLimit(unsigned int)>:
c000f06e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f072:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f076:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f079:	66 89 01             	mov    WORD PTR [ecx],ax
c000f07c:	83 e2 f0             	and    edx,0xfffffff0
c000f07f:	c1 e8 10             	shr    eax,0x10
c000f082:	83 e0 0f             	and    eax,0xf
c000f085:	09 d0                	or     eax,edx
c000f087:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f08a:	c3                   	ret    
c000f08b:	90                   	nop

c000f08c <GDT::GDT()>:
c000f08c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f090:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f09a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0a0:	90                   	nop
c000f0a1:	c3                   	ret    

c000f0a2 <GDT::addEntry(GDTEntry)>:
c000f0a2:	53                   	push   ebx
c000f0a3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f0a7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f0ab:	8b 02                	mov    eax,DWORD PTR [edx]
c000f0ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f0b1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000f0b5:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000f0b9:	8d 48 01             	lea    ecx,[eax+0x1]
c000f0bc:	c1 e0 03             	shl    eax,0x3
c000f0bf:	89 0a                	mov    DWORD PTR [edx],ecx
c000f0c1:	5b                   	pop    ebx
c000f0c2:	c3                   	ret    
c000f0c3:	90                   	nop

c000f0c4 <GDT::getNumberOfEntries()>:
c000f0c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0ca:	c3                   	ret    
c000f0cb:	90                   	nop

c000f0cc <GDT::flush()>:
c000f0cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0d0:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0d2:	83 c0 04             	add    eax,0x4
c000f0d5:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0dc:	a3 12 e4 02 c0       	mov    ds:0xc002e412,eax
c000f0e1:	66 89 15 10 e4 02 c0 	mov    WORD PTR ds:0xc002e410,dx
c000f0e8:	e9 63 13 ff ff       	jmp    c0000450 <loadGDT>
c000f0ed:	90                   	nop

c000f0ee <GDT::setup()>:
c000f0ee:	55                   	push   ebp
c000f0ef:	57                   	push   edi
c000f0f0:	56                   	push   esi
c000f0f1:	53                   	push   ebx
c000f0f2:	83 ec 3c             	sub    esp,0x3c
c000f0f5:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0f9:	6a 00                	push   0x0
c000f0fb:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0ff:	53                   	push   ebx
c000f100:	e8 4d ff ff ff       	call   c000f052 <GDTEntry::setBase(unsigned int)>
c000f105:	6a 00                	push   0x0
c000f107:	53                   	push   ebx
c000f108:	e8 61 ff ff ff       	call   c000f06e <GDTEntry::setLimit(unsigned int)>
c000f10d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f115:	6a 00                	push   0x0
c000f117:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f11b:	53                   	push   ebx
c000f11c:	e8 31 ff ff ff       	call   c000f052 <GDTEntry::setBase(unsigned int)>
c000f121:	68 ff ff ff 00       	push   0xffffff
c000f126:	53                   	push   ebx
c000f127:	e8 42 ff ff ff       	call   c000f06e <GDTEntry::setLimit(unsigned int)>
c000f12c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f130:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f135:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f13a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f13e:	83 c4 20             	add    esp,0x20
c000f141:	6a 00                	push   0x0
c000f143:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f147:	53                   	push   ebx
c000f148:	e8 05 ff ff ff       	call   c000f052 <GDTEntry::setBase(unsigned int)>
c000f14d:	68 ff ff ff 00       	push   0xffffff
c000f152:	53                   	push   ebx
c000f153:	e8 16 ff ff ff       	call   c000f06e <GDTEntry::setLimit(unsigned int)>
c000f158:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f15c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f160:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f164:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f168:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f16c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f171:	0d 00 92 c0 00       	or     eax,0xc09200
c000f176:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f17a:	89 d8                	mov    eax,ebx
c000f17c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f180:	80 cc 60             	or     ah,0x60
c000f183:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f187:	83 c4 0c             	add    esp,0xc
c000f18a:	89 f8                	mov    eax,edi
c000f18c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f190:	80 cc 60             	or     ah,0x60
c000f193:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f197:	89 c7                	mov    edi,eax
c000f199:	55                   	push   ebp
c000f19a:	e8 03 ff ff ff       	call   c000f0a2 <GDT::addEntry(GDTEntry)>
c000f19f:	83 c4 0c             	add    esp,0xc
c000f1a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1a6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1aa:	55                   	push   ebp
c000f1ab:	e8 f2 fe ff ff       	call   c000f0a2 <GDT::addEntry(GDTEntry)>
c000f1b0:	83 c4 0c             	add    esp,0xc
c000f1b3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1b7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1bb:	55                   	push   ebp
c000f1bc:	e8 e1 fe ff ff       	call   c000f0a2 <GDT::addEntry(GDTEntry)>
c000f1c1:	83 c4 0c             	add    esp,0xc
c000f1c4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1cc:	53                   	push   ebx
c000f1cd:	51                   	push   ecx
c000f1ce:	55                   	push   ebp
c000f1cf:	e8 ce fe ff ff       	call   c000f0a2 <GDT::addEntry(GDTEntry)>
c000f1d4:	83 c4 0c             	add    esp,0xc
c000f1d7:	57                   	push   edi
c000f1d8:	56                   	push   esi
c000f1d9:	55                   	push   ebp
c000f1da:	e8 c3 fe ff ff       	call   c000f0a2 <GDT::addEntry(GDTEntry)>
c000f1df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1e2:	e8 e5 fe ff ff       	call   c000f0cc <GDT::flush()>
c000f1e7:	83 c4 4c             	add    esp,0x4c
c000f1ea:	5b                   	pop    ebx
c000f1eb:	5e                   	pop    esi
c000f1ec:	5f                   	pop    edi
c000f1ed:	5d                   	pop    ebp
c000f1ee:	c3                   	ret    

c000f1ef <idleFunction(void*)>:
c000f1ef:	53                   	push   ebx
c000f1f0:	83 ec 08             	sub    esp,0x8
c000f1f3:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c000f1f8:	48                   	dec    eax
c000f1f9:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c000f1fe:	75 01                	jne    c000f201 <idleFunction(void*)+0x12>
c000f200:	fb                   	sti    
c000f201:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c000f206:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f20c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f213:	74 3c                	je     c000f251 <idleFunction(void*)+0x62>
c000f215:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f21c:	74 33                	je     c000f251 <idleFunction(void*)+0x62>
c000f21e:	31 db                	xor    ebx,ebx
c000f220:	52                   	push   edx
c000f221:	52                   	push   edx
c000f222:	68 e1 00 00 00       	push   0xe1
c000f227:	50                   	push   eax
c000f228:	e8 55 fb ff ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c000f22d:	53                   	push   ebx
c000f22e:	83 e0 02             	and    eax,0x2
c000f231:	50                   	push   eax
c000f232:	68 e1 00 00 00       	push   0xe1
c000f237:	ff 35 08 e4 02 c0    	push   DWORD PTR ds:0xc002e408
c000f23d:	e8 6c fb ff ff       	call   c000edae <Computer::wrmsr(unsigned int, unsigned long long)>
c000f242:	83 c4 20             	add    esp,0x20
c000f245:	e8 35 10 ff ff       	call   c000027f <doTPAUSE>
c000f24a:	e8 11 97 01 00       	call   c0028960 <idleCommon()>
c000f24f:	eb f4                	jmp    c000f245 <idleFunction(void*)+0x56>
c000f251:	fb                   	sti    
c000f252:	f4                   	hlt    
c000f253:	e8 08 97 01 00       	call   c0028960 <idleCommon()>
c000f258:	eb f7                	jmp    c000f251 <idleFunction(void*)+0x62>

c000f25a <IDTEntry::IDTEntry(bool)>:
c000f25a:	83 ec 04             	sub    esp,0x4
c000f25d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f261:	88 04 24             	mov    BYTE PTR [esp],al
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f26e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f272:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f276:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f27a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f27d:	83 e2 f0             	and    edx,0xfffffff0
c000f280:	83 ca 0e             	or     edx,0xe
c000f283:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f286:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f28a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28d:	83 e2 ef             	and    edx,0xffffffef
c000f290:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f293:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f297:	74 04                	je     c000f29d <IDTEntry::IDTEntry(bool)+0x43>
c000f299:	b2 03                	mov    dl,0x3
c000f29b:	eb 02                	jmp    c000f29f <IDTEntry::IDTEntry(bool)+0x45>
c000f29d:	b2 00                	mov    dl,0x0
c000f29f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2a3:	83 e2 03             	and    edx,0x3
c000f2a6:	88 d1                	mov    cl,dl
c000f2a8:	c1 e1 05             	shl    ecx,0x5
c000f2ab:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ae:	83 e2 9f             	and    edx,0xffffff9f
c000f2b1:	09 ca                	or     edx,ecx
c000f2b3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2bd:	83 ca 80             	or     edx,0xffffff80
c000f2c0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2c3:	90                   	nop
c000f2c4:	83 c4 04             	add    esp,0x4
c000f2c7:	c3                   	ret    

c000f2c8 <IDTEntry::setOffset(unsigned int)>:
c000f2c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2d0:	66 89 02             	mov    WORD PTR [edx],ax
c000f2d3:	c1 e8 10             	shr    eax,0x10
c000f2d6:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2da:	c3                   	ret    
c000f2db:	90                   	nop

c000f2dc <IDT::IDT()>:
c000f2dc:	90                   	nop
c000f2dd:	c3                   	ret    

c000f2de <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2e2:	83 c0 30             	add    eax,0x30
c000f2e5:	c3                   	ret    

c000f2e6 <IDT::addEntry(IDTEntry, int)>:
c000f2e6:	53                   	push   ebx
c000f2e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2f7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2fa:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2fe:	5b                   	pop    ebx
c000f2ff:	c3                   	ret    

c000f300 <IDT::addEntry(int, void (*)(), bool)>:
c000f300:	53                   	push   ebx
c000f301:	83 ec 10             	sub    esp,0x10
c000f304:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f309:	50                   	push   eax
c000f30a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f30e:	53                   	push   ebx
c000f30f:	e8 46 ff ff ff       	call   c000f25a <IDTEntry::IDTEntry(bool)>
c000f314:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f318:	53                   	push   ebx
c000f319:	e8 aa ff ff ff       	call   c000f2c8 <IDTEntry::setOffset(unsigned int)>
c000f31e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f322:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f326:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f32a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f32e:	e8 b3 ff ff ff       	call   c000f2e6 <IDT::addEntry(IDTEntry, int)>
c000f333:	83 c4 30             	add    esp,0x30
c000f336:	5b                   	pop    ebx
c000f337:	c3                   	ret    

c000f338 <IDT::flush()>:
c000f338:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f33c:	66 c7 05 18 e4 02 c0 ff 07 	mov    WORD PTR ds:0xc002e418,0x7ff
c000f345:	a3 1a e4 02 c0       	mov    ds:0xc002e41a,eax
c000f34a:	0f 01 1d 18 e4 02 c0 	lidtd  ds:0xc002e418
c000f351:	c3                   	ret    

c000f352 <IDT::setup()>:
c000f352:	57                   	push   edi
c000f353:	56                   	push   esi
c000f354:	53                   	push   ebx
c000f355:	83 ec 10             	sub    esp,0x10
c000f358:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f35c:	6a 00                	push   0x0
c000f35e:	68 70 04 00 c0       	push   0xc0000470
c000f363:	6a 00                	push   0x0
c000f365:	53                   	push   ebx
c000f366:	e8 95 ff ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f36b:	6a 00                	push   0x0
c000f36d:	68 80 04 00 c0       	push   0xc0000480
c000f372:	6a 01                	push   0x1
c000f374:	53                   	push   ebx
c000f375:	e8 86 ff ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f37a:	83 c4 20             	add    esp,0x20
c000f37d:	6a 00                	push   0x0
c000f37f:	68 8a 04 00 c0       	push   0xc000048a
c000f384:	6a 02                	push   0x2
c000f386:	53                   	push   ebx
c000f387:	e8 74 ff ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f38c:	6a 00                	push   0x0
c000f38e:	68 94 04 00 c0       	push   0xc0000494
c000f393:	6a 03                	push   0x3
c000f395:	53                   	push   ebx
c000f396:	e8 65 ff ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f39b:	83 c4 20             	add    esp,0x20
c000f39e:	6a 00                	push   0x0
c000f3a0:	68 9e 04 00 c0       	push   0xc000049e
c000f3a5:	6a 04                	push   0x4
c000f3a7:	53                   	push   ebx
c000f3a8:	e8 53 ff ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f3ad:	6a 00                	push   0x0
c000f3af:	68 a8 04 00 c0       	push   0xc00004a8
c000f3b4:	6a 05                	push   0x5
c000f3b6:	53                   	push   ebx
c000f3b7:	e8 44 ff ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f3bc:	83 c4 20             	add    esp,0x20
c000f3bf:	6a 00                	push   0x0
c000f3c1:	68 b2 04 00 c0       	push   0xc00004b2
c000f3c6:	6a 06                	push   0x6
c000f3c8:	53                   	push   ebx
c000f3c9:	e8 32 ff ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f3ce:	6a 00                	push   0x0
c000f3d0:	68 bc 04 00 c0       	push   0xc00004bc
c000f3d5:	6a 07                	push   0x7
c000f3d7:	53                   	push   ebx
c000f3d8:	e8 23 ff ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f3dd:	83 c4 20             	add    esp,0x20
c000f3e0:	6a 00                	push   0x0
c000f3e2:	68 c6 04 00 c0       	push   0xc00004c6
c000f3e7:	6a 08                	push   0x8
c000f3e9:	53                   	push   ebx
c000f3ea:	e8 11 ff ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f3ef:	6a 00                	push   0x0
c000f3f1:	68 ce 04 00 c0       	push   0xc00004ce
c000f3f6:	6a 09                	push   0x9
c000f3f8:	53                   	push   ebx
c000f3f9:	e8 02 ff ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f3fe:	83 c4 20             	add    esp,0x20
c000f401:	6a 00                	push   0x0
c000f403:	68 d8 04 00 c0       	push   0xc00004d8
c000f408:	6a 0a                	push   0xa
c000f40a:	53                   	push   ebx
c000f40b:	e8 f0 fe ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f410:	6a 00                	push   0x0
c000f412:	68 e0 04 00 c0       	push   0xc00004e0
c000f417:	6a 0b                	push   0xb
c000f419:	53                   	push   ebx
c000f41a:	e8 e1 fe ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f41f:	83 c4 20             	add    esp,0x20
c000f422:	6a 00                	push   0x0
c000f424:	68 e8 04 00 c0       	push   0xc00004e8
c000f429:	6a 0c                	push   0xc
c000f42b:	53                   	push   ebx
c000f42c:	e8 cf fe ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f431:	6a 00                	push   0x0
c000f433:	68 f0 04 00 c0       	push   0xc00004f0
c000f438:	6a 0d                	push   0xd
c000f43a:	53                   	push   ebx
c000f43b:	e8 c0 fe ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f440:	83 c4 20             	add    esp,0x20
c000f443:	6a 00                	push   0x0
c000f445:	68 f8 04 00 c0       	push   0xc00004f8
c000f44a:	6a 0e                	push   0xe
c000f44c:	53                   	push   ebx
c000f44d:	e8 ae fe ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f452:	6a 00                	push   0x0
c000f454:	68 00 05 00 c0       	push   0xc0000500
c000f459:	6a 0f                	push   0xf
c000f45b:	53                   	push   ebx
c000f45c:	e8 9f fe ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f461:	83 c4 20             	add    esp,0x20
c000f464:	6a 00                	push   0x0
c000f466:	68 0a 05 00 c0       	push   0xc000050a
c000f46b:	6a 10                	push   0x10
c000f46d:	53                   	push   ebx
c000f46e:	e8 8d fe ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f473:	6a 00                	push   0x0
c000f475:	68 14 05 00 c0       	push   0xc0000514
c000f47a:	6a 11                	push   0x11
c000f47c:	53                   	push   ebx
c000f47d:	e8 7e fe ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f482:	83 c4 20             	add    esp,0x20
c000f485:	6a 00                	push   0x0
c000f487:	68 1e 05 00 c0       	push   0xc000051e
c000f48c:	6a 12                	push   0x12
c000f48e:	53                   	push   ebx
c000f48f:	e8 6c fe ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f494:	6a 01                	push   0x1
c000f496:	68 b8 05 00 c0       	push   0xc00005b8
c000f49b:	6a 60                	push   0x60
c000f49d:	53                   	push   ebx
c000f49e:	e8 5d fe ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f4a3:	83 c4 20             	add    esp,0x20
c000f4a6:	6a 00                	push   0x0
c000f4a8:	68 bf 05 00 c0       	push   0xc00005bf
c000f4ad:	6a 20                	push   0x20
c000f4af:	53                   	push   ebx
c000f4b0:	e8 4b fe ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f4b5:	6a 00                	push   0x0
c000f4b7:	68 aa 05 00 c0       	push   0xc00005aa
c000f4bc:	6a 21                	push   0x21
c000f4be:	53                   	push   ebx
c000f4bf:	e8 3c fe ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f4c4:	83 c4 20             	add    esp,0x20
c000f4c7:	6a 00                	push   0x0
c000f4c9:	68 b1 05 00 c0       	push   0xc00005b1
c000f4ce:	6a 22                	push   0x22
c000f4d0:	53                   	push   ebx
c000f4d1:	e8 2a fe ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f4d6:	6a 00                	push   0x0
c000f4d8:	68 28 05 00 c0       	push   0xc0000528
c000f4dd:	6a 23                	push   0x23
c000f4df:	53                   	push   ebx
c000f4e0:	e8 1b fe ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f4e5:	83 c4 20             	add    esp,0x20
c000f4e8:	6a 00                	push   0x0
c000f4ea:	68 32 05 00 c0       	push   0xc0000532
c000f4ef:	6a 24                	push   0x24
c000f4f1:	53                   	push   ebx
c000f4f2:	e8 09 fe ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f4f7:	6a 00                	push   0x0
c000f4f9:	68 3c 05 00 c0       	push   0xc000053c
c000f4fe:	6a 25                	push   0x25
c000f500:	53                   	push   ebx
c000f501:	e8 fa fd ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f506:	83 c4 20             	add    esp,0x20
c000f509:	6a 00                	push   0x0
c000f50b:	68 46 05 00 c0       	push   0xc0000546
c000f510:	6a 26                	push   0x26
c000f512:	53                   	push   ebx
c000f513:	e8 e8 fd ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f518:	6a 00                	push   0x0
c000f51a:	68 50 05 00 c0       	push   0xc0000550
c000f51f:	6a 27                	push   0x27
c000f521:	53                   	push   ebx
c000f522:	e8 d9 fd ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f527:	83 c4 20             	add    esp,0x20
c000f52a:	6a 00                	push   0x0
c000f52c:	68 5a 05 00 c0       	push   0xc000055a
c000f531:	6a 28                	push   0x28
c000f533:	53                   	push   ebx
c000f534:	e8 c7 fd ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f539:	6a 00                	push   0x0
c000f53b:	68 64 05 00 c0       	push   0xc0000564
c000f540:	6a 29                	push   0x29
c000f542:	53                   	push   ebx
c000f543:	e8 b8 fd ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f548:	83 c4 20             	add    esp,0x20
c000f54b:	6a 00                	push   0x0
c000f54d:	68 6e 05 00 c0       	push   0xc000056e
c000f552:	6a 2a                	push   0x2a
c000f554:	53                   	push   ebx
c000f555:	e8 a6 fd ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f55a:	6a 00                	push   0x0
c000f55c:	68 78 05 00 c0       	push   0xc0000578
c000f561:	6a 2b                	push   0x2b
c000f563:	53                   	push   ebx
c000f564:	e8 97 fd ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f569:	83 c4 20             	add    esp,0x20
c000f56c:	6a 00                	push   0x0
c000f56e:	68 82 05 00 c0       	push   0xc0000582
c000f573:	6a 2c                	push   0x2c
c000f575:	53                   	push   ebx
c000f576:	e8 85 fd ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f57b:	6a 00                	push   0x0
c000f57d:	68 8c 05 00 c0       	push   0xc000058c
c000f582:	6a 2d                	push   0x2d
c000f584:	53                   	push   ebx
c000f585:	e8 76 fd ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f58a:	83 c4 20             	add    esp,0x20
c000f58d:	6a 00                	push   0x0
c000f58f:	68 96 05 00 c0       	push   0xc0000596
c000f594:	6a 2e                	push   0x2e
c000f596:	53                   	push   ebx
c000f597:	e8 64 fd ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f59c:	6a 00                	push   0x0
c000f59e:	68 a0 05 00 c0       	push   0xc00005a0
c000f5a3:	6a 2f                	push   0x2f
c000f5a5:	53                   	push   ebx
c000f5a6:	e8 55 fd ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f5ab:	83 c4 20             	add    esp,0x20
c000f5ae:	6a 00                	push   0x0
c000f5b0:	68 f6 05 00 c0       	push   0xc00005f6
c000f5b5:	6a 30                	push   0x30
c000f5b7:	53                   	push   ebx
c000f5b8:	e8 43 fd ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f5bd:	6a 00                	push   0x0
c000f5bf:	68 00 06 00 c0       	push   0xc0000600
c000f5c4:	6a 31                	push   0x31
c000f5c6:	53                   	push   ebx
c000f5c7:	e8 34 fd ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f5cc:	83 c4 20             	add    esp,0x20
c000f5cf:	6a 00                	push   0x0
c000f5d1:	68 0a 06 00 c0       	push   0xc000060a
c000f5d6:	6a 32                	push   0x32
c000f5d8:	53                   	push   ebx
c000f5d9:	e8 22 fd ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f5de:	6a 00                	push   0x0
c000f5e0:	68 14 06 00 c0       	push   0xc0000614
c000f5e5:	6a 33                	push   0x33
c000f5e7:	53                   	push   ebx
c000f5e8:	e8 13 fd ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f5ed:	83 c4 20             	add    esp,0x20
c000f5f0:	6a 00                	push   0x0
c000f5f2:	68 1e 06 00 c0       	push   0xc000061e
c000f5f7:	6a 34                	push   0x34
c000f5f9:	53                   	push   ebx
c000f5fa:	e8 01 fd ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f5ff:	6a 00                	push   0x0
c000f601:	68 28 06 00 c0       	push   0xc0000628
c000f606:	6a 35                	push   0x35
c000f608:	53                   	push   ebx
c000f609:	e8 f2 fc ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f60e:	83 c4 20             	add    esp,0x20
c000f611:	6a 00                	push   0x0
c000f613:	68 32 06 00 c0       	push   0xc0000632
c000f618:	6a 36                	push   0x36
c000f61a:	53                   	push   ebx
c000f61b:	e8 e0 fc ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f620:	6a 00                	push   0x0
c000f622:	68 3c 06 00 c0       	push   0xc000063c
c000f627:	6a 37                	push   0x37
c000f629:	53                   	push   ebx
c000f62a:	e8 d1 fc ff ff       	call   c000f300 <IDT::addEntry(int, void (*)(), bool)>
c000f62f:	83 c4 1c             	add    esp,0x1c
c000f632:	6a 03                	push   0x3
c000f634:	6a 02                	push   0x2
c000f636:	ff 35 70 e5 02 c0    	push   DWORD PTR ds:0xc002e570
c000f63c:	e8 47 26 00 00       	call   c0011c88 <VAS::allocatePages(int, int)>
c000f641:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f648:	89 c6                	mov    esi,eax
c000f64a:	e8 0a 02 00 00       	call   c000f859 <malloc>
c000f64f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f655:	89 04 24             	mov    DWORD PTR [esp],eax
c000f658:	89 c7                	mov    edi,eax
c000f65a:	e8 c7 17 00 00       	call   c0010e26 <TSS::TSS()>
c000f65f:	83 c4 0c             	add    esp,0xc
c000f662:	68 c6 04 00 c0       	push   0xc00004c6
c000f667:	56                   	push   esi
c000f668:	57                   	push   edi
c000f669:	e8 f8 17 00 00       	call   c0010e66 <TSS::setup(unsigned long, unsigned long)>
c000f66e:	89 c6                	mov    esi,eax
c000f670:	58                   	pop    eax
c000f671:	5a                   	pop    edx
c000f672:	6a 00                	push   0x0
c000f674:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f678:	50                   	push   eax
c000f679:	e8 dc fb ff ff       	call   c000f25a <IDTEntry::IDTEntry(bool)>
c000f67e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f682:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f687:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f68e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f694:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f698:	80 ce 05             	or     dh,0x5
c000f69b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f69e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f6a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6a6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f6a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6ac:	e8 87 fc ff ff       	call   c000f338 <IDT::flush()>
c000f6b1:	83 c4 20             	add    esp,0x20
c000f6b4:	5b                   	pop    ebx
c000f6b5:	5e                   	pop    esi
c000f6b6:	5f                   	pop    edi
c000f6b7:	c3                   	ret    

c000f6b8 <sbrk>:
c000f6b8:	55                   	push   ebp
c000f6b9:	57                   	push   edi
c000f6ba:	56                   	push   esi
c000f6bb:	53                   	push   ebx
c000f6bc:	83 ec 1c             	sub    esp,0x1c
c000f6bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6c3:	85 c0                	test   eax,eax
c000f6c5:	74 3e                	je     c000f705 <sbrk+0x4d>
c000f6c7:	78 43                	js     c000f70c <sbrk+0x54>
c000f6c9:	8b 15 08 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e408
c000f6cf:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6d5:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6db:	83 e2 01             	and    edx,0x1
c000f6de:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6e2:	8b 0d dc d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d1dc
c000f6e8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6ec:	05 ff 0f 00 00       	add    eax,0xfff
c000f6f1:	89 c2                	mov    edx,eax
c000f6f3:	78 2f                	js     c000f724 <sbrk+0x6c>
c000f6f5:	c1 fa 0c             	sar    edx,0xc
c000f6f8:	89 d7                	mov    edi,edx
c000f6fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6fe:	be 00 00 00 00       	mov    esi,0x0
c000f703:	eb 36                	jmp    c000f73b <sbrk+0x83>
c000f705:	a1 dc d1 02 c0       	mov    eax,ds:0xc002d1dc
c000f70a:	eb 73                	jmp    c000f77f <sbrk+0xc7>
c000f70c:	83 ec 08             	sub    esp,0x8
c000f70f:	50                   	push   eax
c000f710:	68 c0 a5 02 c0       	push   0xc002a5c0
c000f715:	e8 97 31 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c000f71a:	83 c4 10             	add    esp,0x10
c000f71d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f722:	eb 5b                	jmp    c000f77f <sbrk+0xc7>
c000f724:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f72a:	eb c9                	jmp    c000f6f5 <sbrk+0x3d>
c000f72c:	81 05 dc d1 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d1dc,0x1000
c000f736:	46                   	inc    esi
c000f737:	39 f7                	cmp    edi,esi
c000f739:	74 33                	je     c000f76e <sbrk+0xb6>
c000f73b:	8b 1d 70 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e570
c000f741:	8b 2d dc d1 02 c0    	mov    ebp,DWORD PTR ds:0xc002d1dc
c000f747:	e8 09 05 00 00       	call   c000fc55 <Phys::allocatePage()>
c000f74c:	68 01 04 00 00       	push   0x401
c000f751:	55                   	push   ebp
c000f752:	50                   	push   eax
c000f753:	53                   	push   ebx
c000f754:	e8 2d 24 00 00       	call   c0011b86 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f759:	83 c4 10             	add    esp,0x10
c000f75c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f761:	74 c9                	je     c000f72c <sbrk+0x74>
c000f763:	8b 1d dc d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d1dc
c000f769:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f76c:	eb be                	jmp    c000f72c <sbrk+0x74>
c000f76e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f773:	75 12                	jne    c000f787 <sbrk+0xcf>
c000f775:	0f 20 d8             	mov    eax,cr3
c000f778:	0f 22 d8             	mov    cr3,eax
c000f77b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f77f:	83 c4 1c             	add    esp,0x1c
c000f782:	5b                   	pop    ebx
c000f783:	5e                   	pop    esi
c000f784:	5f                   	pop    edi
c000f785:	5d                   	pop    ebp
c000f786:	c3                   	ret    
c000f787:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f78b:	89 cb                	mov    ebx,ecx
c000f78d:	c1 eb 0a             	shr    ebx,0xa
c000f790:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f796:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f79c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7a0:	c1 e0 0c             	shl    eax,0xc
c000f7a3:	01 c8                	add    eax,ecx
c000f7a5:	c1 e8 0a             	shr    eax,0xa
c000f7a8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f7ad:	2d 00 00 40 00       	sub    eax,0x400000
c000f7b2:	39 c3                	cmp    ebx,eax
c000f7b4:	77 c5                	ja     c000f77b <sbrk+0xc3>
c000f7b6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7b9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f7bf:	39 d8                	cmp    eax,ebx
c000f7c1:	73 f3                	jae    c000f7b6 <sbrk+0xfe>
c000f7c3:	eb b6                	jmp    c000f77b <sbrk+0xc3>

c000f7c5 <mmap>:
c000f7c5:	83 ec 18             	sub    esp,0x18
c000f7c8:	68 f0 a5 02 c0       	push   0xc002a5f0
c000f7cd:	e8 4d aa 00 00       	call   c001a21f <Krnl::panic(char const*)>
c000f7d2:	b8 00 00 00 00       	mov    eax,0x0
c000f7d7:	83 c4 1c             	add    esp,0x1c
c000f7da:	c3                   	ret    

c000f7db <munmap>:
c000f7db:	83 ec 18             	sub    esp,0x18
c000f7de:	68 f5 a5 02 c0       	push   0xc002a5f5
c000f7e3:	e8 37 aa 00 00       	call   c001a21f <Krnl::panic(char const*)>
c000f7e8:	b8 00 00 00 00       	mov    eax,0x0
c000f7ed:	83 c4 1c             	add    esp,0x1c
c000f7f0:	c3                   	ret    

c000f7f1 <liballoc_lock()>:
c000f7f1:	fa                   	cli    
c000f7f2:	ff 05 08 f9 02 c0    	inc    DWORD PTR ds:0xc002f908
c000f7f8:	b8 00 00 00 00       	mov    eax,0x0
c000f7fd:	c3                   	ret    

c000f7fe <liballoc_unlock()>:
c000f7fe:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c000f803:	48                   	dec    eax
c000f804:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c000f809:	75 01                	jne    c000f80c <liballoc_unlock()+0xe>
c000f80b:	fb                   	sti    
c000f80c:	b8 00 00 00 00       	mov    eax,0x0
c000f811:	c3                   	ret    

c000f812 <liballoc_alloc(int)>:
c000f812:	83 ec 10             	sub    esp,0x10
c000f815:	6a 01                	push   0x1
c000f817:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f81b:	ff 35 70 e5 02 c0    	push   DWORD PTR ds:0xc002e570
c000f821:	e8 62 24 00 00       	call   c0011c88 <VAS::allocatePages(int, int)>
c000f826:	83 c4 1c             	add    esp,0x1c
c000f829:	c3                   	ret    

c000f82a <liballoc_free(void*, int)>:
c000f82a:	83 ec 14             	sub    esp,0x14
c000f82d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f831:	ff 35 70 e5 02 c0    	push   DWORD PTR ds:0xc002e570
c000f837:	e8 f6 20 00 00       	call   c0011932 <VAS::freeAllocatedPages(unsigned long)>
c000f83c:	b8 00 00 00 00       	mov    eax,0x0
c000f841:	83 c4 1c             	add    esp,0x1c
c000f844:	c3                   	ret    

c000f845 <realloc>:
c000f845:	83 ec 14             	sub    esp,0x14
c000f848:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f84c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f850:	e8 d7 1d ff ff       	call   c000162c <dlrealloc>
c000f855:	83 c4 1c             	add    esp,0x1c
c000f858:	c3                   	ret    

c000f859 <malloc>:
c000f859:	83 ec 18             	sub    esp,0x18
c000f85c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f860:	e8 8a 18 ff ff       	call   c00010ef <dlmalloc>
c000f865:	83 c4 1c             	add    esp,0x1c
c000f868:	c3                   	ret    

c000f869 <free>:
c000f869:	83 ec 18             	sub    esp,0x18
c000f86c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f870:	e8 1f 15 ff ff       	call   c0000d94 <dlfree>
c000f875:	83 c4 1c             	add    esp,0x1c
c000f878:	c3                   	ret    

c000f879 <rfree>:
c000f879:	83 ec 18             	sub    esp,0x18
c000f87c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f880:	e8 0f 15 ff ff       	call   c0000d94 <dlfree>
c000f885:	83 c4 1c             	add    esp,0x1c
c000f888:	c3                   	ret    

c000f889 <calloc>:
c000f889:	56                   	push   esi
c000f88a:	53                   	push   ebx
c000f88b:	83 ec 10             	sub    esp,0x10
c000f88e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f892:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f897:	53                   	push   ebx
c000f898:	e8 bc ff ff ff       	call   c000f859 <malloc>
c000f89d:	89 c6                	mov    esi,eax
c000f89f:	83 c4 0c             	add    esp,0xc
c000f8a2:	53                   	push   ebx
c000f8a3:	6a 00                	push   0x0
c000f8a5:	50                   	push   eax
c000f8a6:	e8 a5 0e ff ff       	call   c0000750 <memset>
c000f8ab:	89 f0                	mov    eax,esi
c000f8ad:	83 c4 14             	add    esp,0x14
c000f8b0:	5b                   	pop    ebx
c000f8b1:	5e                   	pop    esi
c000f8b2:	c3                   	ret    

c000f8b3 <Krnl::setBootMessage(char const*)>:
c000f8b3:	57                   	push   edi
c000f8b4:	56                   	push   esi
c000f8b5:	53                   	push   ebx
c000f8b6:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f8bc:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f8c3:	68 9e 00 00 00       	push   0x9e
c000f8c8:	6a 00                	push   0x0
c000f8ca:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f8ce:	56                   	push   esi
c000f8cf:	e8 7c 0e ff ff       	call   c0000750 <memset>
c000f8d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8d7:	e8 90 0e ff ff       	call   c000076c <strlen>
c000f8dc:	ba 50 00 00 00       	mov    edx,0x50
c000f8e1:	83 c4 10             	add    esp,0x10
c000f8e4:	29 c2                	sub    edx,eax
c000f8e6:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f8ea:	d1 ea                	shr    edx,1
c000f8ec:	84 c0                	test   al,al
c000f8ee:	74 19                	je     c000f909 <Krnl::setBootMessage(char const*)+0x56>
c000f8f0:	01 d2                	add    edx,edx
c000f8f2:	43                   	inc    ebx
c000f8f3:	01 f2                	add    edx,esi
c000f8f5:	80 cc 0f             	or     ah,0xf
c000f8f8:	83 c2 02             	add    edx,0x2
c000f8fb:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f8ff:	43                   	inc    ebx
c000f900:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f905:	84 c0                	test   al,al
c000f907:	75 ec                	jne    c000f8f5 <Krnl::setBootMessage(char const*)+0x42>
c000f909:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f90e:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f913:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f915:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f91b:	5b                   	pop    ebx
c000f91c:	5e                   	pop    esi
c000f91d:	5f                   	pop    edi
c000f91e:	c3                   	ret    

c000f91f <kernel_main>:
c000f91f:	57                   	push   edi
c000f920:	bf f9 03 00 00       	mov    edi,0x3f9
c000f925:	56                   	push   esi
c000f926:	89 fa                	mov    edx,edi
c000f928:	53                   	push   ebx
c000f929:	31 f6                	xor    esi,esi
c000f92b:	83 ec 2c             	sub    esp,0x2c
c000f92e:	89 f0                	mov    eax,esi
c000f930:	ee                   	out    dx,al
c000f931:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f936:	b0 80                	mov    al,0x80
c000f938:	89 da                	mov    edx,ebx
c000f93a:	ee                   	out    dx,al
c000f93b:	b1 03                	mov    cl,0x3
c000f93d:	ba f8 03 00 00       	mov    edx,0x3f8
c000f942:	88 c8                	mov    al,cl
c000f944:	ee                   	out    dx,al
c000f945:	89 f0                	mov    eax,esi
c000f947:	89 fa                	mov    edx,edi
c000f949:	ee                   	out    dx,al
c000f94a:	88 c8                	mov    al,cl
c000f94c:	89 da                	mov    edx,ebx
c000f94e:	ee                   	out    dx,al
c000f94f:	b0 c7                	mov    al,0xc7
c000f951:	ba fa 03 00 00       	mov    edx,0x3fa
c000f956:	ee                   	out    dx,al
c000f957:	b0 0b                	mov    al,0xb
c000f959:	ba fc 03 00 00       	mov    edx,0x3fc
c000f95e:	ee                   	out    dx,al
c000f95f:	68 fc a5 02 c0       	push   0xc002a5fc
c000f964:	e8 48 2f 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c000f969:	e8 b8 09 00 00       	call   c0010326 <installVgaTextImplementation()>
c000f96e:	0f b6 05 e0 d1 02 c0 	movzx  eax,BYTE PTR ds:0xc002d1e0
c000f975:	83 c4 10             	add    esp,0x10
c000f978:	84 c0                	test   al,al
c000f97a:	74 6c                	je     c000f9e8 <kernel_main+0xc9>
c000f97c:	31 db                	xor    ebx,ebx
c000f97e:	bf 0a 00 00 00       	mov    edi,0xa
c000f983:	be 05 00 00 00       	mov    esi,0x5
c000f988:	31 c9                	xor    ecx,ecx
c000f98a:	eb 2a                	jmp    c000f9b6 <kernel_main+0x97>
c000f98c:	3c 0d                	cmp    al,0xd
c000f98e:	74 1a                	je     c000f9aa <kernel_main+0x8b>
c000f990:	3c 0a                	cmp    al,0xa
c000f992:	74 40                	je     c000f9d4 <kernel_main+0xb5>
c000f994:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f997:	80 cc 0e             	or     ah,0xe
c000f99a:	c1 e2 04             	shl    edx,0x4
c000f99d:	01 ca                	add    edx,ecx
c000f99f:	41                   	inc    ecx
c000f9a0:	01 fa                	add    edx,edi
c000f9a2:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f9aa:	43                   	inc    ebx
c000f9ab:	0f b6 83 e0 d1 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd2e20]
c000f9b2:	84 c0                	test   al,al
c000f9b4:	74 32                	je     c000f9e8 <kernel_main+0xc9>
c000f9b6:	80 b9 16 d2 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd2dea],0xdb
c000f9bd:	75 cd                	jne    c000f98c <kernel_main+0x6d>
c000f9bf:	0f b6 91 15 d2 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd2deb]
c000f9c6:	83 e2 fe             	and    edx,0xfffffffe
c000f9c9:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f9cf:	75 bb                	jne    c000f98c <kernel_main+0x6d>
c000f9d1:	47                   	inc    edi
c000f9d2:	eb b8                	jmp    c000f98c <kernel_main+0x6d>
c000f9d4:	43                   	inc    ebx
c000f9d5:	46                   	inc    esi
c000f9d6:	31 c9                	xor    ecx,ecx
c000f9d8:	0f b6 83 e0 d1 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd2e20]
c000f9df:	bf 0a 00 00 00       	mov    edi,0xa
c000f9e4:	84 c0                	test   al,al
c000f9e6:	75 ce                	jne    c000f9b6 <kernel_main+0x97>
c000f9e8:	83 ec 0c             	sub    esp,0xc
c000f9eb:	68 14 a6 02 c0       	push   0xc002a614
c000f9f0:	e8 be fe ff ff       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c000f9f5:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f9fa:	a3 20 e4 02 c0       	mov    ds:0xc002e420,eax
c000f9ff:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fa04:	05 ff 0f 00 00       	add    eax,0xfff
c000fa09:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fa0e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa11:	e8 cb 03 00 00       	call   c000fde1 <Phys::physicalMemorySetup(unsigned int)>
c000fa16:	e8 83 1c 00 00       	call   c001169e <Virt::virtualMemorySetup()>
c000fa1b:	58                   	pop    eax
c000fa1c:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fa20:	53                   	push   ebx
c000fa21:	e8 34 1d 00 00       	call   c001175a <VAS::VAS()>
c000fa26:	89 1d 70 e5 02 c0    	mov    DWORD PTR ds:0xc002e570,ebx
c000fa2c:	e8 ef 05 ff ff       	call   c0000020 <callGlobalConstructors>
c000fa31:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fa38:	e8 1c fe ff ff       	call   c000f859 <malloc>
c000fa3d:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa40:	89 c6                	mov    esi,eax
c000fa42:	e8 d1 ef ff ff       	call   c000ea18 <Computer::Computer()>
c000fa47:	6a 00                	push   0x0
c000fa49:	89 35 08 e4 02 c0    	mov    DWORD PTR ds:0xc002e408,esi
c000fa4f:	6a 00                	push   0x0
c000fa51:	6a 00                	push   0x0
c000fa53:	56                   	push   esi
c000fa54:	e8 cb f3 ff ff       	call   c000ee24 <Computer::open(int, int, void*)>
c000fa59:	83 c4 14             	add    esp,0x14
c000fa5c:	53                   	push   ebx
c000fa5d:	e8 a8 1f 00 00       	call   c0011a0a <VAS::~VAS()>
c000fa62:	83 c4 30             	add    esp,0x30
c000fa65:	5b                   	pop    ebx
c000fa66:	5e                   	pop    esi
c000fa67:	5f                   	pop    edi
c000fa68:	c3                   	ret    

c000fa69 <Phys::allocateDMA(unsigned long)>:
c000fa69:	55                   	push   ebp
c000fa6a:	31 ed                	xor    ebp,ebp
c000fa6c:	57                   	push   edi
c000fa6d:	56                   	push   esi
c000fa6e:	53                   	push   ebx
c000fa6f:	31 db                	xor    ebx,ebx
c000fa71:	83 ec 18             	sub    esp,0x18
c000fa74:	68 33 a6 02 c0       	push   0xc002a633
c000fa79:	e8 33 2e 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c000fa7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa82:	31 d2                	xor    edx,edx
c000fa84:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fa8a:	83 c4 10             	add    esp,0x10
c000fa8d:	c1 ee 0c             	shr    esi,0xc
c000fa90:	31 c9                	xor    ecx,ecx
c000fa92:	eb 17                	jmp    c000faab <Phys::allocateDMA(unsigned long)+0x42>
c000fa94:	85 c9                	test   ecx,ecx
c000fa96:	75 04                	jne    c000fa9c <Phys::allocateDMA(unsigned long)+0x33>
c000fa98:	89 d5                	mov    ebp,edx
c000fa9a:	89 d3                	mov    ebx,edx
c000fa9c:	8d 41 01             	lea    eax,[ecx+0x1]
c000fa9f:	39 c6                	cmp    esi,eax
c000faa1:	74 23                	je     c000fac6 <Phys::allocateDMA(unsigned long)+0x5d>
c000faa3:	42                   	inc    edx
c000faa4:	89 c1                	mov    ecx,eax
c000faa6:	83 fa 2f             	cmp    edx,0x2f
c000faa9:	7f 11                	jg     c000fabc <Phys::allocateDMA(unsigned long)+0x53>
c000faab:	80 ba 60 e4 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1ba0],0x0
c000fab2:	74 e0                	je     c000fa94 <Phys::allocateDMA(unsigned long)+0x2b>
c000fab4:	31 c9                	xor    ecx,ecx
c000fab6:	42                   	inc    edx
c000fab7:	83 fa 2f             	cmp    edx,0x2f
c000faba:	7e ef                	jle    c000faab <Phys::allocateDMA(unsigned long)+0x42>
c000fabc:	83 c4 0c             	add    esp,0xc
c000fabf:	31 c0                	xor    eax,eax
c000fac1:	5b                   	pop    ebx
c000fac2:	5e                   	pop    esi
c000fac3:	5f                   	pop    edi
c000fac4:	5d                   	pop    ebp
c000fac5:	c3                   	ret    
c000fac6:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fac9:	89 d7                	mov    edi,edx
c000facb:	4f                   	dec    edi
c000facc:	79 03                	jns    c000fad1 <Phys::allocateDMA(unsigned long)+0x68>
c000face:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fad1:	c1 ff 04             	sar    edi,0x4
c000fad4:	89 da                	mov    edx,ebx
c000fad6:	c1 fa 04             	sar    edx,0x4
c000fad9:	39 fa                	cmp    edx,edi
c000fadb:	75 43                	jne    c000fb20 <Phys::allocateDMA(unsigned long)+0xb7>
c000fadd:	85 c0                	test   eax,eax
c000fadf:	74 1a                	je     c000fafb <Phys::allocateDMA(unsigned long)+0x92>
c000fae1:	be 60 e4 02 c0       	mov    esi,0xc002e460
c000fae6:	8d 93 60 e4 02 c0    	lea    edx,[ebx-0x3ffd1ba0]
c000faec:	f7 d6                	not    esi
c000faee:	29 de                	sub    esi,ebx
c000faf0:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000faf3:	42                   	inc    edx
c000faf4:	8d 04 16             	lea    eax,[esi+edx*1]
c000faf7:	39 c1                	cmp    ecx,eax
c000faf9:	7f f5                	jg     c000faf0 <Phys::allocateDMA(unsigned long)+0x87>
c000fafb:	83 ec 0c             	sub    esp,0xc
c000fafe:	68 4c a6 02 c0       	push   0xc002a64c
c000fb03:	e8 a9 2d 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c000fb08:	83 c4 10             	add    esp,0x10
c000fb0b:	85 ff                	test   edi,edi
c000fb0d:	74 17                	je     c000fb26 <Phys::allocateDMA(unsigned long)+0xbd>
c000fb0f:	83 c4 0c             	add    esp,0xc
c000fb12:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c000fb18:	5b                   	pop    ebx
c000fb19:	c1 e0 0c             	shl    eax,0xc
c000fb1c:	5e                   	pop    esi
c000fb1d:	5f                   	pop    edi
c000fb1e:	5d                   	pop    ebp
c000fb1f:	c3                   	ret    
c000fb20:	89 ea                	mov    edx,ebp
c000fb22:	31 c9                	xor    ecx,ecx
c000fb24:	eb 90                	jmp    c000fab6 <Phys::allocateDMA(unsigned long)+0x4d>
c000fb26:	83 c4 0c             	add    esp,0xc
c000fb29:	c1 e3 0c             	shl    ebx,0xc
c000fb2c:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c000fb32:	5b                   	pop    ebx
c000fb33:	5e                   	pop    esi
c000fb34:	5f                   	pop    edi
c000fb35:	5d                   	pop    ebp
c000fb36:	c3                   	ret    

c000fb37 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fb37:	83 ec 18             	sub    esp,0x18
c000fb3a:	68 63 a6 02 c0       	push   0xc002a663
c000fb3f:	e8 6d 2d 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c000fb44:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fb48:	83 c4 10             	add    esp,0x10
c000fb4b:	8d 88 ff 0f 00 00    	lea    ecx,[eax+0xfff]
c000fb51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb55:	c1 e9 0c             	shr    ecx,0xc
c000fb58:	81 7c 24 10 ff ff 05 c2 	cmp    DWORD PTR [esp+0x10],0xc205ffff
c000fb60:	76 29                	jbe    c000fb8b <Phys::freeDMA(unsigned long, unsigned long)+0x54>
c000fb62:	8d 90 00 00 fa 3d    	lea    edx,[eax+0x3dfa0000]
c000fb68:	c1 ea 0c             	shr    edx,0xc
c000fb6b:	83 c2 10             	add    edx,0x10
c000fb6e:	85 c9                	test   ecx,ecx
c000fb70:	74 15                	je     c000fb87 <Phys::freeDMA(unsigned long, unsigned long)+0x50>
c000fb72:	8d 82 60 e4 02 c0    	lea    eax,[edx-0x3ffd1ba0]
c000fb78:	8d 94 11 60 e4 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1ba0]
c000fb7f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fb82:	40                   	inc    eax
c000fb83:	39 d0                	cmp    eax,edx
c000fb85:	75 f8                	jne    c000fb7f <Phys::freeDMA(unsigned long, unsigned long)+0x48>
c000fb87:	83 c4 0c             	add    esp,0xc
c000fb8a:	c3                   	ret    
c000fb8b:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fb91:	c1 ea 0c             	shr    edx,0xc
c000fb94:	eb d8                	jmp    c000fb6e <Phys::freeDMA(unsigned long, unsigned long)+0x37>

c000fb96 <Phys::setPageState(unsigned long, bool)>:
c000fb96:	56                   	push   esi
c000fb97:	ba 01 00 00 00       	mov    edx,0x1
c000fb9c:	53                   	push   ebx
c000fb9d:	8b 35 24 d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d324
c000fba3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fba7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fbab:	89 c8                	mov    eax,ecx
c000fbad:	83 e1 07             	and    ecx,0x7
c000fbb0:	c1 e8 03             	shr    eax,0x3
c000fbb3:	d3 e3                	shl    ebx,cl
c000fbb5:	01 c6                	add    esi,eax
c000fbb7:	d3 e2                	shl    edx,cl
c000fbb9:	f7 d2                	not    edx
c000fbbb:	20 16                	and    BYTE PTR [esi],dl
c000fbbd:	03 05 24 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d324
c000fbc3:	08 18                	or     BYTE PTR [eax],bl
c000fbc5:	5b                   	pop    ebx
c000fbc6:	5e                   	pop    esi
c000fbc7:	c3                   	ret    

c000fbc8 <Phys::getPageState(unsigned long)>:
c000fbc8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fbcc:	8b 15 24 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d324
c000fbd2:	89 c8                	mov    eax,ecx
c000fbd4:	83 e1 07             	and    ecx,0x7
c000fbd7:	c1 e8 03             	shr    eax,0x3
c000fbda:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fbde:	d3 f8                	sar    eax,cl
c000fbe0:	83 e0 01             	and    eax,0x1
c000fbe3:	c3                   	ret    

c000fbe4 <Phys::freePage(unsigned long)>:
c000fbe4:	53                   	push   ebx
c000fbe5:	83 ec 10             	sub    esp,0x10
c000fbe8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fbec:	53                   	push   ebx
c000fbed:	68 79 a6 02 c0       	push   0xc002a679
c000fbf2:	e8 ba 2c 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c000fbf7:	83 c4 10             	add    esp,0x10
c000fbfa:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fc00:	76 3d                	jbe    c000fc3f <Phys::freePage(unsigned long)+0x5b>
c000fc02:	83 ec 0c             	sub    esp,0xc
c000fc05:	c1 eb 0c             	shr    ebx,0xc
c000fc08:	53                   	push   ebx
c000fc09:	e8 ba ff ff ff       	call   c000fbc8 <Phys::getPageState(unsigned long)>
c000fc0e:	83 c4 10             	add    esp,0x10
c000fc11:	84 c0                	test   al,al
c000fc13:	74 19                	je     c000fc2e <Phys::freePage(unsigned long)+0x4a>
c000fc15:	83 ec 08             	sub    esp,0x8
c000fc18:	ff 0d 50 e4 02 c0    	dec    DWORD PTR ds:0xc002e450
c000fc1e:	6a 00                	push   0x0
c000fc20:	53                   	push   ebx
c000fc21:	e8 70 ff ff ff       	call   c000fb96 <Phys::setPageState(unsigned long, bool)>
c000fc26:	83 c4 10             	add    esp,0x10
c000fc29:	83 c4 08             	add    esp,0x8
c000fc2c:	5b                   	pop    ebx
c000fc2d:	c3                   	ret    
c000fc2e:	c7 44 24 10 8c a6 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a68c
c000fc36:	83 c4 08             	add    esp,0x8
c000fc39:	5b                   	pop    ebx
c000fc3a:	e9 e0 a5 00 00       	jmp    c001a21f <Krnl::panic(char const*)>
c000fc3f:	83 ec 08             	sub    esp,0x8
c000fc42:	68 00 10 00 00       	push   0x1000
c000fc47:	53                   	push   ebx
c000fc48:	e8 ea fe ff ff       	call   c000fb37 <Phys::freeDMA(unsigned long, unsigned long)>
c000fc4d:	83 c4 10             	add    esp,0x10
c000fc50:	83 c4 08             	add    esp,0x8
c000fc53:	5b                   	pop    ebx
c000fc54:	c3                   	ret    

c000fc55 <Phys::allocatePage()>:
c000fc55:	56                   	push   esi
c000fc56:	53                   	push   ebx
c000fc57:	83 ec 14             	sub    esp,0x14
c000fc5a:	8b 35 44 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e444
c000fc60:	89 f3                	mov    ebx,esi
c000fc62:	eb 0a                	jmp    c000fc6e <Phys::allocatePage()+0x19>
c000fc64:	89 1d 44 e4 02 c0    	mov    DWORD PTR ds:0xc002e444,ebx
c000fc6a:	39 de                	cmp    esi,ebx
c000fc6c:	74 24                	je     c000fc92 <Phys::allocatePage()+0x3d>
c000fc6e:	53                   	push   ebx
c000fc6f:	e8 54 ff ff ff       	call   c000fbc8 <Phys::getPageState(unsigned long)>
c000fc74:	5a                   	pop    edx
c000fc75:	84 c0                	test   al,al
c000fc77:	74 76                	je     c000fcef <Phys::allocatePage()+0x9a>
c000fc79:	43                   	inc    ebx
c000fc7a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fc80:	75 e2                	jne    c000fc64 <Phys::allocatePage()+0xf>
c000fc82:	31 db                	xor    ebx,ebx
c000fc84:	c7 05 44 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e444,0x0
c000fc8e:	39 de                	cmp    esi,ebx
c000fc90:	75 dc                	jne    c000fc6e <Phys::allocatePage()+0x19>
c000fc92:	83 ec 0c             	sub    esp,0xc
c000fc95:	68 c0 a6 02 c0       	push   0xc002a6c0
c000fc9a:	e8 12 2c 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c000fc9f:	58                   	pop    eax
c000fca0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fca5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fca8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000fcae:	e8 8d 28 00 00       	call   c0012540 <VAS::scanForEviction()>
c000fcb3:	83 c4 10             	add    esp,0x10
c000fcb6:	85 c0                	test   eax,eax
c000fcb8:	75 76                	jne    c000fd30 <Phys::allocatePage()+0xdb>
c000fcba:	83 ec 0c             	sub    esp,0xc
c000fcbd:	68 00 10 00 00       	push   0x1000
c000fcc2:	e8 a2 fd ff ff       	call   c000fa69 <Phys::allocateDMA(unsigned long)>
c000fcc7:	83 c4 10             	add    esp,0x10
c000fcca:	85 c0                	test   eax,eax
c000fccc:	75 5c                	jne    c000fd2a <Phys::allocatePage()+0xd5>
c000fcce:	83 ec 0c             	sub    esp,0xc
c000fcd1:	68 d8 a6 02 c0       	push   0xc002a6d8
c000fcd6:	e8 44 a5 00 00       	call   c001a21f <Krnl::panic(char const*)>
c000fcdb:	83 c4 10             	add    esp,0x10
c000fcde:	8b 1d 44 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e444
c000fce4:	53                   	push   ebx
c000fce5:	e8 de fe ff ff       	call   c000fbc8 <Phys::getPageState(unsigned long)>
c000fcea:	5a                   	pop    edx
c000fceb:	84 c0                	test   al,al
c000fced:	75 8a                	jne    c000fc79 <Phys::allocatePage()+0x24>
c000fcef:	6a 01                	push   0x1
c000fcf1:	53                   	push   ebx
c000fcf2:	e8 9f fe ff ff       	call   c000fb96 <Phys::setPageState(unsigned long, bool)>
c000fcf7:	5a                   	pop    edx
c000fcf8:	a1 50 e4 02 c0       	mov    eax,ds:0xc002e450
c000fcfd:	59                   	pop    ecx
c000fcfe:	40                   	inc    eax
c000fcff:	8b 15 44 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e444
c000fd05:	a3 50 e4 02 c0       	mov    ds:0xc002e450,eax
c000fd0a:	c1 e2 0c             	shl    edx,0xc
c000fd0d:	52                   	push   edx
c000fd0e:	ff 35 54 e4 02 c0    	push   DWORD PTR ds:0xc002e454
c000fd14:	50                   	push   eax
c000fd15:	68 a2 a6 02 c0       	push   0xc002a6a2
c000fd1a:	e8 92 2b 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c000fd1f:	a1 44 e4 02 c0       	mov    eax,ds:0xc002e444
c000fd24:	83 c4 10             	add    esp,0x10
c000fd27:	c1 e0 0c             	shl    eax,0xc
c000fd2a:	83 c4 14             	add    esp,0x14
c000fd2d:	5b                   	pop    ebx
c000fd2e:	5e                   	pop    esi
c000fd2f:	c3                   	ret    
c000fd30:	83 ec 08             	sub    esp,0x8
c000fd33:	89 c2                	mov    edx,eax
c000fd35:	6a 01                	push   0x1
c000fd37:	c1 ea 0c             	shr    edx,0xc
c000fd3a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd3e:	52                   	push   edx
c000fd3f:	e8 52 fe ff ff       	call   c000fb96 <Phys::setPageState(unsigned long, bool)>
c000fd44:	83 c4 10             	add    esp,0x10
c000fd47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd4b:	eb dd                	jmp    c000fd2a <Phys::allocatePage()+0xd5>

c000fd4d <Phys::allocateContiguousPages(int)>:
c000fd4d:	57                   	push   edi
c000fd4e:	56                   	push   esi
c000fd4f:	53                   	push   ebx
c000fd50:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fd54:	fa                   	cli    
c000fd55:	ff 05 08 f9 02 c0    	inc    DWORD PTR ds:0xc002f908
c000fd5b:	31 db                	xor    ebx,ebx
c000fd5d:	85 db                	test   ebx,ebx
c000fd5f:	75 11                	jne    c000fd72 <Phys::allocateContiguousPages(int)+0x25>
c000fd61:	e8 ef fe ff ff       	call   c000fc55 <Phys::allocatePage()>
c000fd66:	83 fe 01             	cmp    esi,0x1
c000fd69:	89 c7                	mov    edi,eax
c000fd6b:	74 21                	je     c000fd8e <Phys::allocateContiguousPages(int)+0x41>
c000fd6d:	bb 01 00 00 00       	mov    ebx,0x1
c000fd72:	e8 de fe ff ff       	call   c000fc55 <Phys::allocatePage()>
c000fd77:	89 da                	mov    edx,ebx
c000fd79:	c1 e2 0c             	shl    edx,0xc
c000fd7c:	01 fa                	add    edx,edi
c000fd7e:	39 c2                	cmp    edx,eax
c000fd80:	74 20                	je     c000fda2 <Phys::allocateContiguousPages(int)+0x55>
c000fd82:	bb 01 00 00 00       	mov    ebx,0x1
c000fd87:	89 c7                	mov    edi,eax
c000fd89:	83 fe 01             	cmp    esi,0x1
c000fd8c:	75 e4                	jne    c000fd72 <Phys::allocateContiguousPages(int)+0x25>
c000fd8e:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c000fd93:	48                   	dec    eax
c000fd94:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c000fd99:	75 01                	jne    c000fd9c <Phys::allocateContiguousPages(int)+0x4f>
c000fd9b:	fb                   	sti    
c000fd9c:	89 f8                	mov    eax,edi
c000fd9e:	5b                   	pop    ebx
c000fd9f:	5e                   	pop    esi
c000fda0:	5f                   	pop    edi
c000fda1:	c3                   	ret    
c000fda2:	43                   	inc    ebx
c000fda3:	39 f3                	cmp    ebx,esi
c000fda5:	75 b6                	jne    c000fd5d <Phys::allocateContiguousPages(int)+0x10>
c000fda7:	eb e5                	jmp    c000fd8e <Phys::allocateContiguousPages(int)+0x41>

c000fda9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fda9:	56                   	push   esi
c000fdaa:	53                   	push   ebx
c000fdab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fdaf:	39 1d 48 e4 02 c0    	cmp    DWORD PTR ds:0xc002e448,ebx
c000fdb5:	73 06                	jae    c000fdbd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fdb7:	89 1d 48 e4 02 c0    	mov    DWORD PTR ds:0xc002e448,ebx
c000fdbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fdc1:	c1 eb 0c             	shr    ebx,0xc
c000fdc4:	c1 e8 0c             	shr    eax,0xc
c000fdc7:	39 d8                	cmp    eax,ebx
c000fdc9:	73 13                	jae    c000fdde <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fdcb:	6a 00                	push   0x0
c000fdcd:	8d 70 01             	lea    esi,[eax+0x1]
c000fdd0:	50                   	push   eax
c000fdd1:	e8 c0 fd ff ff       	call   c000fb96 <Phys::setPageState(unsigned long, bool)>
c000fdd6:	5a                   	pop    edx
c000fdd7:	89 f0                	mov    eax,esi
c000fdd9:	59                   	pop    ecx
c000fdda:	39 f3                	cmp    ebx,esi
c000fddc:	75 ed                	jne    c000fdcb <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fdde:	5b                   	pop    ebx
c000fddf:	5e                   	pop    esi
c000fde0:	c3                   	ret    

c000fde1 <Phys::physicalMemorySetup(unsigned int)>:
c000fde1:	55                   	push   ebp
c000fde2:	57                   	push   edi
c000fde3:	56                   	push   esi
c000fde4:	53                   	push   ebx
c000fde5:	83 ec 40             	sub    esp,0x40
c000fde8:	6a 30                	push   0x30
c000fdea:	6a 00                	push   0x0
c000fdec:	68 60 e4 02 c0       	push   0xc002e460
c000fdf1:	e8 5a 09 ff ff       	call   c0000750 <memset>
c000fdf6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fdfa:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fdff:	05 00 10 00 00       	add    eax,0x1000
c000fe04:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fe08:	5b                   	pop    ebx
c000fe09:	31 db                	xor    ebx,ebx
c000fe0b:	5e                   	pop    esi
c000fe0c:	50                   	push   eax
c000fe0d:	68 e6 a6 02 c0       	push   0xc002a6e6
c000fe12:	e8 9a 2a 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c000fe17:	83 c4 10             	add    esp,0x10
c000fe1a:	83 ec 08             	sub    esp,0x8
c000fe1d:	6a 01                	push   0x1
c000fe1f:	53                   	push   ebx
c000fe20:	43                   	inc    ebx
c000fe21:	e8 70 fd ff ff       	call   c000fb96 <Phys::setPageState(unsigned long, bool)>
c000fe26:	83 c4 10             	add    esp,0x10
c000fe29:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fe2f:	75 e9                	jne    c000fe1a <Phys::physicalMemorySetup(unsigned int)+0x39>
c000fe31:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fe38:	66 85 c0             	test   ax,ax
c000fe3b:	0f 84 8e 01 00 00    	je     c000ffcf <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000fe41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fe45:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fe4d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe51:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fe56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fe5a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fe62:	eb 15                	jmp    c000fe79 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000fe64:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fe68:	83 c3 18             	add    ebx,0x18
c000fe6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fe6f:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fe73:	0f 84 66 01 00 00    	je     c000ffdf <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fe79:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fe7c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fe7f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fe82:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe86:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fe8a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fe8c:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fe8f:	01 f0                	add    eax,esi
c000fe91:	55                   	push   ebp
c000fe92:	11 fa                	adc    edx,edi
c000fe94:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe98:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fe9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fea0:	56                   	push   esi
c000fea1:	68 28 a7 02 c0       	push   0xc002a728
c000fea6:	e8 06 2a 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c000feab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000feaf:	83 c4 10             	add    esp,0x10
c000feb2:	09 f8                	or     eax,edi
c000feb4:	0f 85 25 01 00 00    	jne    c000ffdf <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000feba:	4d                   	dec    ebp
c000febb:	75 a7                	jne    c000fe64 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000febd:	ba 00 00 08 00       	mov    edx,0x80000
c000fec2:	89 c1                	mov    ecx,eax
c000fec4:	39 f2                	cmp    edx,esi
c000fec6:	19 f9                	sbb    ecx,edi
c000fec8:	0f 82 a7 00 00 00    	jb     c000ff75 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fece:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fed2:	89 c1                	mov    ecx,eax
c000fed4:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fed8:	0f 83 97 00 00 00    	jae    c000ff75 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fede:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fee3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fee7:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000feeb:	39 fa                	cmp    edx,edi
c000feed:	19 e8                	sbb    eax,ebp
c000feef:	0f 82 14 01 00 00    	jb     c0010009 <Phys::physicalMemorySetup(unsigned int)+0x228>
c000fef5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fef9:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fefd:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000ff03:	ba ff 1f 00 00       	mov    edx,0x1fff
c000ff08:	83 d5 ff             	adc    ebp,0xffffffff
c000ff0b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000ff0f:	31 c0                	xor    eax,eax
c000ff11:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000ff15:	39 fa                	cmp    edx,edi
c000ff17:	89 c1                	mov    ecx,eax
c000ff19:	19 e9                	sbb    ecx,ebp
c000ff1b:	0f 83 43 ff ff ff    	jae    c000fe64 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000ff21:	be 00 00 08 00       	mov    esi,0x80000
c000ff26:	50                   	push   eax
c000ff27:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ff2b:	57                   	push   edi
c000ff2c:	56                   	push   esi
c000ff2d:	68 4c a7 02 c0       	push   0xc002a74c
c000ff32:	e8 7a 29 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c000ff37:	5a                   	pop    edx
c000ff38:	59                   	pop    ecx
c000ff39:	57                   	push   edi
c000ff3a:	56                   	push   esi
c000ff3b:	e8 69 fe ff ff       	call   c000fda9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000ff40:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ff44:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff48:	83 c4 0c             	add    esp,0xc
c000ff4b:	0f ac d0 0c          	shrd   eax,edx,0xc
c000ff4f:	03 05 54 e4 02 c0    	add    eax,DWORD PTR ds:0xc002e454
c000ff55:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ff5c:	a3 54 e4 02 c0       	mov    ds:0xc002e454,eax
c000ff61:	52                   	push   edx
c000ff62:	50                   	push   eax
c000ff63:	68 0c a7 02 c0       	push   0xc002a70c
c000ff68:	e8 44 29 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c000ff6d:	83 c4 10             	add    esp,0x10
c000ff70:	e9 ef fe ff ff       	jmp    c000fe64 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000ff75:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000ff79:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff7d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ff81:	39 ea                	cmp    edx,ebp
c000ff83:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000ff87:	0f 82 d7 fe ff ff    	jb     c000fe64 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000ff8d:	ba ff 1f 00 00       	mov    edx,0x1fff
c000ff92:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000ff96:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000ff9a:	0f 83 c4 fe ff ff    	jae    c000fe64 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000ffa0:	39 ee                	cmp    esi,ebp
c000ffa2:	89 f8                	mov    eax,edi
c000ffa4:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000ffa8:	0f 83 78 ff ff ff    	jae    c000ff26 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000ffae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ffb2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ffb6:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ffba:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ffbe:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000ffc2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ffc6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ffca:	e9 57 ff ff ff       	jmp    c000ff26 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000ffcf:	83 ec 0c             	sub    esp,0xc
c000ffd2:	68 fe a6 02 c0       	push   0xc002a6fe
c000ffd7:	e8 43 a2 00 00       	call   c001a21f <Krnl::panic(char const*)>
c000ffdc:	83 c4 10             	add    esp,0x10
c000ffdf:	bb 40 01 00 00       	mov    ebx,0x140
c000ffe4:	83 ec 08             	sub    esp,0x8
c000ffe7:	6a 00                	push   0x0
c000ffe9:	53                   	push   ebx
c000ffea:	43                   	inc    ebx
c000ffeb:	e8 a6 fb ff ff       	call   c000fb96 <Phys::setPageState(unsigned long, bool)>
c000fff0:	ff 05 54 e4 02 c0    	inc    DWORD PTR ds:0xc002e454
c000fff6:	83 c4 10             	add    esp,0x10
c000fff9:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000ffff:	75 e3                	jne    c000ffe4 <Phys::physicalMemorySetup(unsigned int)+0x203>
c0010001:	83 c4 3c             	add    esp,0x3c
c0010004:	5b                   	pop    ebx
c0010005:	5e                   	pop    esi
c0010006:	5f                   	pop    edi
c0010007:	5d                   	pop    ebp
c0010008:	c3                   	ret    
c0010009:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010011:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010019:	e9 d7 fe ff ff       	jmp    c000fef5 <Phys::physicalMemorySetup(unsigned int)+0x114>

c001001e <Pipe::isAtty()>:
c001001e:	31 c0                	xor    eax,eax
c0010020:	c3                   	ret    
c0010021:	90                   	nop

c0010022 <Pipe::~Pipe()>:
c0010022:	83 ec 0c             	sub    esp,0xc
c0010025:	ba b8 a7 02 c0       	mov    edx,0xc002a7b8
c001002a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001002e:	89 10                	mov    DWORD PTR [eax],edx
c0010030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010034:	83 ec 0c             	sub    esp,0xc
c0010037:	50                   	push   eax
c0010038:	e8 41 12 00 00       	call   c001127e <UnixFile::~UnixFile()>
c001003d:	83 c4 10             	add    esp,0x10
c0010040:	90                   	nop
c0010041:	83 c4 0c             	add    esp,0xc
c0010044:	c3                   	ret    
c0010045:	90                   	nop

c0010046 <Pipe::~Pipe()>:
c0010046:	83 ec 0c             	sub    esp,0xc
c0010049:	83 ec 0c             	sub    esp,0xc
c001004c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010050:	e8 cd ff ff ff       	call   c0010022 <Pipe::~Pipe()>
c0010055:	83 c4 10             	add    esp,0x10
c0010058:	83 ec 08             	sub    esp,0x8
c001005b:	6a 20                	push   0x20
c001005d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010061:	e8 73 27 00 00       	call   c00127d9 <operator delete(void*, unsigned long)>
c0010066:	83 c4 10             	add    esp,0x10
c0010069:	83 c4 0c             	add    esp,0xc
c001006c:	c3                   	ret    
c001006d:	90                   	nop

c001006e <Pipe::read(unsigned long long, void*, int*)>:
c001006e:	55                   	push   ebp
c001006f:	57                   	push   edi
c0010070:	56                   	push   esi
c0010071:	53                   	push   ebx
c0010072:	83 ec 1c             	sub    esp,0x1c
c0010075:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010079:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001007d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010081:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010084:	89 c8                	mov    eax,ecx
c0010086:	99                   	cdq    
c0010087:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c001008b:	74 24                	je     c00100b1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c001008d:	39 f9                	cmp    ecx,edi
c001008f:	89 d1                	mov    ecx,edx
c0010091:	19 f1                	sbb    ecx,esi
c0010093:	73 1c                	jae    c00100b1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0010095:	fa                   	cli    
c0010096:	ff 05 08 f9 02 c0    	inc    DWORD PTR ds:0xc002f908
c001009c:	e8 10 dd 00 00       	call   c001ddb1 <schedule()>
c00100a1:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c00100a6:	48                   	dec    eax
c00100a7:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c00100ac:	75 d3                	jne    c0010081 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00100ae:	fb                   	sti    
c00100af:	eb d0                	jmp    c0010081 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00100b1:	39 f8                	cmp    eax,edi
c00100b3:	89 d1                	mov    ecx,edx
c00100b5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00100b8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00100bc:	19 f1                	sbb    ecx,esi
c00100be:	73 07                	jae    c00100c7 <Pipe::read(unsigned long long, void*, int*)+0x59>
c00100c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00100c3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00100c7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00100ca:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00100cd:	29 f7                	sub    edi,esi
c00100cf:	89 f8                	mov    eax,edi
c00100d1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00100d5:	99                   	cdq    
c00100d6:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00100d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100dd:	19 d0                	sbb    eax,edx
c00100df:	73 07                	jae    c00100e8 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00100e1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00100e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100e8:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00100eb:	89 ea                	mov    edx,ebp
c00100ed:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00100f1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00100f6:	74 0d                	je     c0010105 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00100f8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00100fb:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00100ff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010103:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010105:	85 d2                	test   edx,edx
c0010107:	74 11                	je     c001011a <Pipe::read(unsigned long long, void*, int*)+0xac>
c0010109:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001010d:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0010110:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010114:	89 d1                	mov    ecx,edx
c0010116:	89 c7                	mov    edi,eax
c0010118:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001011a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001011d:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0010120:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010123:	99                   	cdq    
c0010124:	89 f7                	mov    edi,esi
c0010126:	03 04 24             	add    eax,DWORD PTR [esp]
c0010129:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c001012d:	c1 ff 1f             	sar    edi,0x1f
c0010130:	57                   	push   edi
c0010131:	56                   	push   esi
c0010132:	52                   	push   edx
c0010133:	50                   	push   eax
c0010134:	e8 1b 6c 01 00       	call   c0026d54 <__umoddi3>
c0010139:	83 c4 10             	add    esp,0x10
c001013c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001013f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010144:	75 10                	jne    c0010156 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0010146:	83 ec 0c             	sub    esp,0xc
c0010149:	68 75 a7 02 c0       	push   0xc002a775
c001014e:	e8 cc a0 00 00       	call   c001a21f <Krnl::panic(char const*)>
c0010153:	83 c4 10             	add    esp,0x10
c0010156:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001015a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001015d:	89 10                	mov    DWORD PTR [eax],edx
c001015f:	83 c4 1c             	add    esp,0x1c
c0010162:	31 c0                	xor    eax,eax
c0010164:	5b                   	pop    ebx
c0010165:	5e                   	pop    esi
c0010166:	5f                   	pop    edi
c0010167:	5d                   	pop    ebp
c0010168:	c3                   	ret    
c0010169:	90                   	nop

c001016a <Pipe::write(unsigned long long, void*, int*)>:
c001016a:	55                   	push   ebp
c001016b:	57                   	push   edi
c001016c:	56                   	push   esi
c001016d:	53                   	push   ebx
c001016e:	83 ec 1c             	sub    esp,0x1c
c0010171:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010175:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010179:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001017c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010180:	89 04 24             	mov    DWORD PTR [esp],eax
c0010183:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010187:	89 d8                	mov    eax,ebx
c0010189:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001018c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010190:	89 d6                	mov    esi,edx
c0010192:	89 d7                	mov    edi,edx
c0010194:	c1 ff 1f             	sar    edi,0x1f
c0010197:	03 34 24             	add    esi,DWORD PTR [esp]
c001019a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c001019e:	c1 f8 1f             	sar    eax,0x1f
c00101a1:	39 f3                	cmp    ebx,esi
c00101a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00101a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00101ab:	19 f8                	sbb    eax,edi
c00101ad:	b8 01 00 00 00       	mov    eax,0x1
c00101b2:	72 6e                	jb     c0010222 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00101b4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00101b7:	01 d0                	add    eax,edx
c00101b9:	99                   	cdq    
c00101ba:	f7 fb                	idiv   ebx
c00101bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101c0:	29 d3                	sub    ebx,edx
c00101c2:	89 d7                	mov    edi,edx
c00101c4:	89 de                	mov    esi,ebx
c00101c6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00101c9:	c1 fb 1f             	sar    ebx,0x1f
c00101cc:	39 f2                	cmp    edx,esi
c00101ce:	19 d8                	sbb    eax,ebx
c00101d0:	b8 00 00 00 00       	mov    eax,0x0
c00101d5:	72 04                	jb     c00101db <Pipe::write(unsigned long long, void*, int*)+0x71>
c00101d7:	89 d0                	mov    eax,edx
c00101d9:	29 f0                	sub    eax,esi
c00101db:	89 d3                	mov    ebx,edx
c00101dd:	29 c3                	sub    ebx,eax
c00101df:	74 0b                	je     c00101ec <Pipe::write(unsigned long long, void*, int*)+0x82>
c00101e1:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00101e4:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00101e8:	89 d9                	mov    ecx,ebx
c00101ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101ec:	85 c0                	test   eax,eax
c00101ee:	74 0d                	je     c00101fd <Pipe::write(unsigned long long, void*, int*)+0x93>
c00101f0:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00101f4:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00101f7:	89 de                	mov    esi,ebx
c00101f9:	89 c1                	mov    ecx,eax
c00101fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101fd:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0010200:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010205:	75 10                	jne    c0010217 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0010207:	83 ec 0c             	sub    esp,0xc
c001020a:	68 91 a7 02 c0       	push   0xc002a791
c001020f:	e8 0b a0 00 00       	call   c001a21f <Krnl::panic(char const*)>
c0010214:	83 c4 10             	add    esp,0x10
c0010217:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001021b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001021e:	89 08                	mov    DWORD PTR [eax],ecx
c0010220:	31 c0                	xor    eax,eax
c0010222:	83 c4 1c             	add    esp,0x1c
c0010225:	5b                   	pop    ebx
c0010226:	5e                   	pop    esi
c0010227:	5f                   	pop    edi
c0010228:	5d                   	pop    ebp
c0010229:	c3                   	ret    

c001022a <Pipe::Pipe(int)>:
c001022a:	83 ec 0c             	sub    esp,0xc
c001022d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010231:	83 ec 08             	sub    esp,0x8
c0010234:	6a 00                	push   0x0
c0010236:	50                   	push   eax
c0010237:	e8 60 0e 00 00       	call   c001109c <UnixFile::UnixFile(int)>
c001023c:	83 c4 10             	add    esp,0x10
c001023f:	ba b8 a7 02 c0       	mov    edx,0xc002a7b8
c0010244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010248:	89 10                	mov    DWORD PTR [eax],edx
c001024a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001024e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010252:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010259:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010264:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001026b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001026f:	83 ec 0c             	sub    esp,0xc
c0010272:	50                   	push   eax
c0010273:	e8 e1 f5 ff ff       	call   c000f859 <malloc>
c0010278:	83 c4 10             	add    esp,0x10
c001027b:	89 c2                	mov    edx,eax
c001027d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010281:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010288:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c001028c:	90                   	nop
c001028d:	83 c4 0c             	add    esp,0xc
c0010290:	c3                   	ret    
c0010291:	90                   	nop

c0010292 <VgaText::isAtty()>:
c0010292:	b0 01                	mov    al,0x1
c0010294:	c3                   	ret    
c0010295:	90                   	nop

c0010296 <VgaText::~VgaText()>:
c0010296:	83 ec 0c             	sub    esp,0xc
c0010299:	ba 40 a8 02 c0       	mov    edx,0xc002a840
c001029e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102a2:	89 10                	mov    DWORD PTR [eax],edx
c00102a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102a8:	83 ec 0c             	sub    esp,0xc
c00102ab:	50                   	push   eax
c00102ac:	e8 cd 0f 00 00       	call   c001127e <UnixFile::~UnixFile()>
c00102b1:	83 c4 10             	add    esp,0x10
c00102b4:	90                   	nop
c00102b5:	83 c4 0c             	add    esp,0xc
c00102b8:	c3                   	ret    
c00102b9:	90                   	nop

c00102ba <VgaText::~VgaText()>:
c00102ba:	83 ec 0c             	sub    esp,0xc
c00102bd:	83 ec 0c             	sub    esp,0xc
c00102c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102c4:	e8 cd ff ff ff       	call   c0010296 <VgaText::~VgaText()>
c00102c9:	83 c4 10             	add    esp,0x10
c00102cc:	83 ec 08             	sub    esp,0x8
c00102cf:	68 c4 02 00 00       	push   0x2c4
c00102d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102d8:	e8 fc 24 00 00       	call   c00127d9 <operator delete(void*, unsigned long)>
c00102dd:	83 c4 10             	add    esp,0x10
c00102e0:	83 c4 0c             	add    esp,0xc
c00102e3:	c3                   	ret    

c00102e4 <VgaText::read(unsigned long long, void*, int*)>:
c00102e4:	83 ec 10             	sub    esp,0x10
c00102e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00102ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102f3:	e8 86 5a 00 00       	call   c0015d7e <readKeyboard(VgaText*, char*, unsigned long)>
c00102f8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00102fc:	89 02                	mov    DWORD PTR [edx],eax
c00102fe:	31 c0                	xor    eax,eax
c0010300:	83 c4 1c             	add    esp,0x1c
c0010303:	c3                   	ret    

c0010304 <setTerminalScrollLock(bool)>:
c0010304:	c3                   	ret    

c0010305 <addToTerminalCycle(VgaText*)>:
c0010305:	8b 15 c0 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4c0
c001030b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001030f:	85 d2                	test   edx,edx
c0010311:	75 09                	jne    c001031c <addToTerminalCycle(VgaText*)+0x17>
c0010313:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c0010316:	a3 c0 e4 02 c0       	mov    ds:0xc002e4c0,eax
c001031b:	c3                   	ret    
c001031c:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c001031f:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010322:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010325:	c3                   	ret    

c0010326 <installVgaTextImplementation()>:
c0010326:	83 ec 10             	sub    esp,0x10
c0010329:	6a 20                	push   0x20
c001032b:	6a 00                	push   0x0
c001032d:	68 a0 e4 02 c0       	push   0xc002e4a0
c0010332:	e8 19 04 ff ff       	call   c0000750 <memset>
c0010337:	83 c4 1c             	add    esp,0x1c
c001033a:	c3                   	ret    

c001033b <scrollTerminalScrollLock(int)>:
c001033b:	c3                   	ret    

c001033c <VgaText::updateTitle()>:
c001033c:	53                   	push   ebx
c001033d:	31 c0                	xor    eax,eax
c001033f:	83 ec 58             	sub    esp,0x58
c0010342:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010346:	89 e1                	mov    ecx,esp
c0010348:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001034c:	40                   	inc    eax
c001034d:	83 f8 50             	cmp    eax,0x50
c0010350:	75 f6                	jne    c0010348 <VgaText::updateTitle()+0xc>
c0010352:	31 c0                	xor    eax,eax
c0010354:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c001035b:	84 db                	test   bl,bl
c001035d:	74 06                	je     c0010365 <VgaText::updateTitle()+0x29>
c001035f:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010362:	40                   	inc    eax
c0010363:	eb ef                	jmp    c0010354 <VgaText::updateTitle()+0x18>
c0010365:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010368:	85 c0                	test   eax,eax
c001036a:	74 09                	je     c0010375 <VgaText::updateTitle()+0x39>
c001036c:	53                   	push   ebx
c001036d:	53                   	push   ebx
c001036e:	51                   	push   ecx
c001036f:	52                   	push   edx
c0010370:	ff d0                	call   eax
c0010372:	83 c4 10             	add    esp,0x10
c0010375:	83 c4 58             	add    esp,0x58
c0010378:	5b                   	pop    ebx
c0010379:	c3                   	ret    

c001037a <VgaText::load()>:
c001037a:	53                   	push   ebx
c001037b:	31 c0                	xor    eax,eax
c001037d:	83 ec 58             	sub    esp,0x58
c0010380:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010384:	89 e2                	mov    edx,esp
c0010386:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001038a:	40                   	inc    eax
c001038b:	83 f8 50             	cmp    eax,0x50
c001038e:	75 f6                	jne    c0010386 <VgaText::load()+0xc>
c0010390:	31 c0                	xor    eax,eax
c0010392:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c0010399:	84 c9                	test   cl,cl
c001039b:	74 06                	je     c00103a3 <VgaText::load()+0x29>
c001039d:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00103a0:	40                   	inc    eax
c00103a1:	eb ef                	jmp    c0010392 <VgaText::load()+0x18>
c00103a3:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00103a6:	85 c0                	test   eax,eax
c00103a8:	74 09                	je     c00103b3 <VgaText::load()+0x39>
c00103aa:	51                   	push   ecx
c00103ab:	51                   	push   ecx
c00103ac:	52                   	push   edx
c00103ad:	53                   	push   ebx
c00103ae:	ff d0                	call   eax
c00103b0:	83 c4 10             	add    esp,0x10
c00103b3:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00103b6:	85 c0                	test   eax,eax
c00103b8:	74 09                	je     c00103c3 <VgaText::load()+0x49>
c00103ba:	83 ec 0c             	sub    esp,0xc
c00103bd:	53                   	push   ebx
c00103be:	ff d0                	call   eax
c00103c0:	83 c4 10             	add    esp,0x10
c00103c3:	83 c4 58             	add    esp,0x58
c00103c6:	5b                   	pop    ebx
c00103c7:	c3                   	ret    

c00103c8 <VgaText::updateCursor()>:
c00103c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103cc:	39 05 c4 e4 02 c0    	cmp    DWORD PTR ds:0xc002e4c4,eax
c00103d2:	75 09                	jne    c00103dd <VgaText::updateCursor()+0x15>
c00103d4:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c00103d7:	85 c0                	test   eax,eax
c00103d9:	74 02                	je     c00103dd <VgaText::updateCursor()+0x15>
c00103db:	ff e0                	jmp    eax
c00103dd:	c3                   	ret    

c00103de <VgaText::doANSI_SGR(int)>:
c00103de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103e6:	85 d2                	test   edx,edx
c00103e8:	75 0b                	jne    c00103f5 <VgaText::doANSI_SGR(int)+0x17>
c00103ea:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00103ed:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00103f0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00103f3:	eb 59                	jmp    c001044e <VgaText::doANSI_SGR(int)+0x70>
c00103f5:	83 fa 07             	cmp    edx,0x7
c00103f8:	75 0b                	jne    c0010405 <VgaText::doANSI_SGR(int)+0x27>
c00103fa:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00103fd:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010400:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010403:	eb 49                	jmp    c001044e <VgaText::doANSI_SGR(int)+0x70>
c0010405:	83 fa 1b             	cmp    edx,0x1b
c0010408:	74 e0                	je     c00103ea <VgaText::doANSI_SGR(int)+0xc>
c001040a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001040d:	83 f9 07             	cmp    ecx,0x7
c0010410:	77 09                	ja     c001041b <VgaText::doANSI_SGR(int)+0x3d>
c0010412:	8b 14 8d 60 d3 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2ca0]
c0010419:	eb 20                	jmp    c001043b <VgaText::doANSI_SGR(int)+0x5d>
c001041b:	8d 4a d8             	lea    ecx,[edx-0x28]
c001041e:	83 f9 07             	cmp    ecx,0x7
c0010421:	77 09                	ja     c001042c <VgaText::doANSI_SGR(int)+0x4e>
c0010423:	8b 14 8d 60 d3 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2ca0]
c001042a:	eb 22                	jmp    c001044e <VgaText::doANSI_SGR(int)+0x70>
c001042c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001042f:	83 f9 07             	cmp    ecx,0x7
c0010432:	77 0b                	ja     c001043f <VgaText::doANSI_SGR(int)+0x61>
c0010434:	8b 14 95 18 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2de8]
c001043b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001043e:	c3                   	ret    
c001043f:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010442:	83 f9 07             	cmp    ecx,0x7
c0010445:	77 0a                	ja     c0010451 <VgaText::doANSI_SGR(int)+0x73>
c0010447:	8b 14 95 f0 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e10]
c001044e:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010451:	c3                   	ret    

c0010452 <VgaText::setDefaultBgColour(VgaColour)>:
c0010452:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010456:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001045a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001045d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010460:	c3                   	ret    
c0010461:	90                   	nop

c0010462 <VgaText::setDefaultFgColour(VgaColour)>:
c0010462:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010466:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001046a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001046d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010470:	c3                   	ret    
c0010471:	90                   	nop

c0010472 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010472:	53                   	push   ebx
c0010473:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010477:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001047b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001047f:	51                   	push   ecx
c0010480:	e8 cd ff ff ff       	call   c0010452 <VgaText::setDefaultBgColour(VgaColour)>
c0010485:	58                   	pop    eax
c0010486:	5a                   	pop    edx
c0010487:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001048b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001048f:	5b                   	pop    ebx
c0010490:	eb d0                	jmp    c0010462 <VgaText::setDefaultFgColour(VgaColour)>

c0010492 <VgaText::setTitleTextColour(VgaColour)>:
c0010492:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010496:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001049a:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c001049d:	e9 9a fe ff ff       	jmp    c001033c <VgaText::updateTitle()>

c00104a2 <VgaText::setTitleColour(VgaColour)>:
c00104a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104aa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00104ad:	e9 8a fe ff ff       	jmp    c001033c <VgaText::updateTitle()>

c00104b2 <VgaText::setTitle(char*)>:
c00104b2:	53                   	push   ebx
c00104b3:	83 ec 10             	sub    esp,0x10
c00104b6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00104ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104be:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c00104c4:	50                   	push   eax
c00104c5:	e8 42 03 ff ff       	call   c000080c <strcpy>
c00104ca:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00104ce:	83 c4 18             	add    esp,0x18
c00104d1:	5b                   	pop    ebx
c00104d2:	e9 65 fe ff ff       	jmp    c001033c <VgaText::updateTitle()>
c00104d7:	90                   	nop

c00104d8 <VgaText::combineColours(unsigned char, unsigned char)>:
c00104d8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00104dc:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00104e1:	83 e0 0f             	and    eax,0xf
c00104e4:	c1 e2 04             	shl    edx,0x4
c00104e7:	09 d0                	or     eax,edx
c00104e9:	c3                   	ret    

c00104ea <VgaText::scrollScreen()>:
c00104ea:	55                   	push   ebp
c00104eb:	b9 01 00 00 00       	mov    ecx,0x1
c00104f0:	57                   	push   edi
c00104f1:	56                   	push   esi
c00104f2:	53                   	push   ebx
c00104f3:	83 ec 0c             	sub    esp,0xc
c00104f6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00104fa:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010500:	31 ff                	xor    edi,edi
c0010502:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010505:	83 f9 17             	cmp    ecx,0x17
c0010508:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c001050b:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010512:	75 27                	jne    c001053b <VgaText::scrollScreen()+0x51>
c0010514:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010517:	01 f5                	add    ebp,esi
c0010519:	f7 c7 01 00 00 00    	test   edi,0x1
c001051f:	74 16                	je     c0010537 <VgaText::scrollScreen()+0x4d>
c0010521:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010525:	50                   	push   eax
c0010526:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001052a:	50                   	push   eax
c001052b:	e8 a8 ff ff ff       	call   c00104d8 <VgaText::combineColours(unsigned char, unsigned char)>
c0010530:	5a                   	pop    edx
c0010531:	5a                   	pop    edx
c0010532:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010535:	eb 04                	jmp    c001053b <VgaText::scrollScreen()+0x51>
c0010537:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c001053b:	47                   	inc    edi
c001053c:	46                   	inc    esi
c001053d:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010543:	75 bd                	jne    c0010502 <VgaText::scrollScreen()+0x18>
c0010545:	41                   	inc    ecx
c0010546:	83 f9 18             	cmp    ecx,0x18
c0010549:	75 af                	jne    c00104fa <VgaText::scrollScreen()+0x10>
c001054b:	39 1d c4 e4 02 c0    	cmp    DWORD PTR ds:0xc002e4c4,ebx
c0010551:	75 1b                	jne    c001056e <VgaText::scrollScreen()+0x84>
c0010553:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010557:	74 05                	je     c001055e <VgaText::scrollScreen()+0x74>
c0010559:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001055c:	eb 10                	jmp    c001056e <VgaText::scrollScreen()+0x84>
c001055e:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c0010561:	85 c0                	test   eax,eax
c0010563:	74 09                	je     c001056e <VgaText::scrollScreen()+0x84>
c0010565:	83 ec 0c             	sub    esp,0xc
c0010568:	53                   	push   ebx
c0010569:	ff d0                	call   eax
c001056b:	83 c4 10             	add    esp,0x10
c001056e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010572:	83 c4 0c             	add    esp,0xc
c0010575:	5b                   	pop    ebx
c0010576:	5e                   	pop    esi
c0010577:	5f                   	pop    edi
c0010578:	5d                   	pop    ebp
c0010579:	e9 4a fe ff ff       	jmp    c00103c8 <VgaText::updateCursor()>

c001057e <VgaText::combineCharAndColour(char, unsigned char)>:
c001057e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010583:	c1 e0 08             	shl    eax,0x8
c0010586:	89 c2                	mov    edx,eax
c0010588:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001058d:	09 d0                	or     eax,edx
c001058f:	c3                   	ret    

c0010590 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010590:	56                   	push   esi
c0010591:	53                   	push   ebx
c0010592:	51                   	push   ecx
c0010593:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010597:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001059c:	50                   	push   eax
c001059d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00105a2:	50                   	push   eax
c00105a3:	e8 30 ff ff ff       	call   c00104d8 <VgaText::combineColours(unsigned char, unsigned char)>
c00105a8:	5b                   	pop    ebx
c00105a9:	0f b6 c0             	movzx  eax,al
c00105ac:	5e                   	pop    esi
c00105ad:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00105b2:	50                   	push   eax
c00105b3:	53                   	push   ebx
c00105b4:	e8 c5 ff ff ff       	call   c001057e <VgaText::combineCharAndColour(char, unsigned char)>
c00105b9:	5a                   	pop    edx
c00105ba:	5e                   	pop    esi
c00105bb:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00105be:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00105c4:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00105c8:	0f b7 d2             	movzx  edx,dx
c00105cb:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c00105cf:	39 0d c4 e4 02 c0    	cmp    DWORD PTR ds:0xc002e4c4,ecx
c00105d5:	75 10                	jne    c00105e7 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00105d7:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c00105da:	85 c0                	test   eax,eax
c00105dc:	74 09                	je     c00105e7 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00105de:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00105e2:	5a                   	pop    edx
c00105e3:	5b                   	pop    ebx
c00105e4:	5e                   	pop    esi
c00105e5:	ff e0                	jmp    eax
c00105e7:	58                   	pop    eax
c00105e8:	5b                   	pop    ebx
c00105e9:	5e                   	pop    esi
c00105ea:	c3                   	ret    
c00105eb:	90                   	nop

c00105ec <VgaText::getCursorX()>:
c00105ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105f0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00105f3:	c3                   	ret    

c00105f4 <VgaText::getCursorY()>:
c00105f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105f8:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00105fb:	c3                   	ret    

c00105fc <VgaText::setCursor(int, int)>:
c00105fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010600:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010604:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010607:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001060b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001060e:	e9 b5 fd ff ff       	jmp    c00103c8 <VgaText::updateCursor()>

c0010613 <setActiveTerminal(VgaText*)>:
c0010613:	53                   	push   ebx
c0010614:	83 ec 08             	sub    esp,0x8
c0010617:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001061b:	85 db                	test   ebx,ebx
c001061d:	75 11                	jne    c0010630 <setActiveTerminal(VgaText*)+0x1d>
c001061f:	c7 44 24 10 cc a7 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a7cc
c0010627:	83 c4 08             	add    esp,0x8
c001062a:	5b                   	pop    ebx
c001062b:	e9 ef 9b 00 00       	jmp    c001a21f <Krnl::panic(char const*)>
c0010630:	a1 c4 e4 02 c0       	mov    eax,ds:0xc002e4c4
c0010635:	85 c0                	test   eax,eax
c0010637:	74 0c                	je     c0010645 <setActiveTerminal(VgaText*)+0x32>
c0010639:	83 ec 0c             	sub    esp,0xc
c001063c:	50                   	push   eax
c001063d:	e8 86 fd ff ff       	call   c00103c8 <VgaText::updateCursor()>
c0010642:	83 c4 10             	add    esp,0x10
c0010645:	89 1d c4 e4 02 c0    	mov    DWORD PTR ds:0xc002e4c4,ebx
c001064b:	51                   	push   ecx
c001064c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001064f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010652:	53                   	push   ebx
c0010653:	e8 a4 ff ff ff       	call   c00105fc <VgaText::setCursor(int, int)>
c0010658:	83 c4 10             	add    esp,0x10
c001065b:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001065f:	75 07                	jne    c0010668 <setActiveTerminal(VgaText*)+0x55>
c0010661:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010668:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001066c:	83 c4 08             	add    esp,0x8
c001066f:	5b                   	pop    ebx
c0010670:	e9 05 fd ff ff       	jmp    c001037a <VgaText::load()>

c0010675 <doTerminalCycle()>:
c0010675:	83 ec 18             	sub    esp,0x18
c0010678:	a1 c0 e4 02 c0       	mov    eax,ds:0xc002e4c0
c001067d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010680:	50                   	push   eax
c0010681:	a3 c0 e4 02 c0       	mov    ds:0xc002e4c0,eax
c0010686:	e8 88 ff ff ff       	call   c0010613 <setActiveTerminal(VgaText*)>
c001068b:	83 c4 1c             	add    esp,0x1c
c001068e:	c3                   	ret    
c001068f:	90                   	nop

c0010690 <VgaText::setCursorX(int)>:
c0010690:	83 ec 10             	sub    esp,0x10
c0010693:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010697:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001069a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001069e:	50                   	push   eax
c001069f:	e8 58 ff ff ff       	call   c00105fc <VgaText::setCursor(int, int)>
c00106a4:	83 c4 1c             	add    esp,0x1c
c00106a7:	c3                   	ret    

c00106a8 <VgaText::setCursorY(int)>:
c00106a8:	83 ec 10             	sub    esp,0x10
c00106ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00106af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00106b3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00106b6:	50                   	push   eax
c00106b7:	e8 40 ff ff ff       	call   c00105fc <VgaText::setCursor(int, int)>
c00106bc:	83 c4 1c             	add    esp,0x1c
c00106bf:	c3                   	ret    

c00106c0 <VgaText::incrementCursor(bool)>:
c00106c0:	56                   	push   esi
c00106c1:	53                   	push   ebx
c00106c2:	51                   	push   ecx
c00106c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00106cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00106ce:	40                   	inc    eax
c00106cf:	83 f8 50             	cmp    eax,0x50
c00106d2:	74 05                	je     c00106d9 <VgaText::incrementCursor(bool)+0x19>
c00106d4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00106d7:	eb 24                	jmp    c00106fd <VgaText::incrementCursor(bool)+0x3d>
c00106d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00106dc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00106e3:	8d 50 01             	lea    edx,[eax+0x1]
c00106e6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00106e9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00106ec:	75 0f                	jne    c00106fd <VgaText::incrementCursor(bool)+0x3d>
c00106ee:	83 ec 0c             	sub    esp,0xc
c00106f1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00106f4:	53                   	push   ebx
c00106f5:	e8 f0 fd ff ff       	call   c00104ea <VgaText::scrollScreen()>
c00106fa:	83 c4 10             	add    esp,0x10
c00106fd:	89 f0                	mov    eax,esi
c00106ff:	84 c0                	test   al,al
c0010701:	74 0c                	je     c001070f <VgaText::incrementCursor(bool)+0x4f>
c0010703:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010707:	5a                   	pop    edx
c0010708:	5b                   	pop    ebx
c0010709:	5e                   	pop    esi
c001070a:	e9 b9 fc ff ff       	jmp    c00103c8 <VgaText::updateCursor()>
c001070f:	58                   	pop    eax
c0010710:	5b                   	pop    ebx
c0010711:	5e                   	pop    esi
c0010712:	c3                   	ret    
c0010713:	90                   	nop

c0010714 <VgaText::decrementCursor(bool)>:
c0010714:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010718:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001071c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001071f:	85 c0                	test   eax,eax
c0010721:	74 04                	je     c0010727 <VgaText::decrementCursor(bool)+0x13>
c0010723:	48                   	dec    eax
c0010724:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010727:	84 c9                	test   cl,cl
c0010729:	74 09                	je     c0010734 <VgaText::decrementCursor(bool)+0x20>
c001072b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001072f:	e9 94 fc ff ff       	jmp    c00103c8 <VgaText::updateCursor()>
c0010734:	c3                   	ret    
c0010735:	90                   	nop

c0010736 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010736:	53                   	push   ebx
c0010737:	83 ec 08             	sub    esp,0x8
c001073a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001073e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010742:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010746:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001074a:	3c 07                	cmp    al,0x7
c001074c:	75 2a                	jne    c0010778 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001074e:	a1 78 e5 02 c0       	mov    eax,ds:0xc002e578
c0010753:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001075b:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010763:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c001076b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001076f:	83 c4 08             	add    esp,0x8
c0010772:	5b                   	pop    ebx
c0010773:	e9 46 2f 00 00       	jmp    c00136be <Buzzer::beep(int, int, bool)>
c0010778:	3c 0d                	cmp    al,0xd
c001077a:	75 09                	jne    c0010785 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c001077c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010783:	eb 2c                	jmp    c00107b1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010785:	3c 0a                	cmp    al,0xa
c0010787:	75 31                	jne    c00107ba <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010789:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001078c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010793:	8d 50 01             	lea    edx,[eax+0x1]
c0010796:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010799:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001079c:	75 0f                	jne    c00107ad <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c001079e:	83 ec 0c             	sub    esp,0xc
c00107a1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00107a4:	53                   	push   ebx
c00107a5:	e8 40 fd ff ff       	call   c00104ea <VgaText::scrollScreen()>
c00107aa:	83 c4 10             	add    esp,0x10
c00107ad:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00107b1:	83 c4 08             	add    esp,0x8
c00107b4:	5b                   	pop    ebx
c00107b5:	e9 0e fc ff ff       	jmp    c00103c8 <VgaText::updateCursor()>
c00107ba:	3c 08                	cmp    al,0x8
c00107bc:	75 25                	jne    c00107e3 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c00107be:	50                   	push   eax
c00107bf:	50                   	push   eax
c00107c0:	6a 01                	push   0x1
c00107c2:	53                   	push   ebx
c00107c3:	e8 4c ff ff ff       	call   c0010714 <VgaText::decrementCursor(bool)>
c00107c8:	5a                   	pop    edx
c00107c9:	59                   	pop    ecx
c00107ca:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00107cd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00107d0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00107d3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00107d6:	6a 20                	push   0x20
c00107d8:	53                   	push   ebx
c00107d9:	e8 b2 fd ff ff       	call   c0010590 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00107de:	83 c4 28             	add    esp,0x28
c00107e1:	5b                   	pop    ebx
c00107e2:	c3                   	ret    
c00107e3:	83 ec 08             	sub    esp,0x8
c00107e6:	0f be c0             	movsx  eax,al
c00107e9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00107ec:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00107ef:	51                   	push   ecx
c00107f0:	52                   	push   edx
c00107f1:	50                   	push   eax
c00107f2:	53                   	push   ebx
c00107f3:	e8 98 fd ff ff       	call   c0010590 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00107f8:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00107fc:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010804:	83 c4 28             	add    esp,0x28
c0010807:	5b                   	pop    ebx
c0010808:	e9 b3 fe ff ff       	jmp    c00106c0 <VgaText::incrementCursor(bool)>
c001080d:	90                   	nop

c001080e <VgaText::doUpdate()>:
c001080e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010812:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010815:	85 c0                	test   eax,eax
c0010817:	74 02                	je     c001081b <VgaText::doUpdate()+0xd>
c0010819:	ff e0                	jmp    eax
c001081b:	c3                   	ret    

c001081c <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001081c:	55                   	push   ebp
c001081d:	31 ed                	xor    ebp,ebp
c001081f:	57                   	push   edi
c0010820:	56                   	push   esi
c0010821:	53                   	push   ebx
c0010822:	83 ec 1c             	sub    esp,0x1c
c0010825:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010829:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001082e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010835:	50                   	push   eax
c0010836:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001083b:	50                   	push   eax
c001083c:	e8 97 fc ff ff       	call   c00104d8 <VgaText::combineColours(unsigned char, unsigned char)>
c0010841:	59                   	pop    ecx
c0010842:	0f b6 c0             	movzx  eax,al
c0010845:	5e                   	pop    esi
c0010846:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001084b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001084f:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010852:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010856:	0f b7 f6             	movzx  esi,si
c0010859:	01 f6                	add    esi,esi
c001085b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001085e:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010861:	84 c0                	test   al,al
c0010863:	0f 84 fd 00 00 00    	je     c0010966 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010869:	3c 0d                	cmp    al,0xd
c001086b:	75 0c                	jne    c0010879 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c001086d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010874:	e9 e7 00 00 00       	jmp    c0010960 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010879:	3c 0a                	cmp    al,0xa
c001087b:	75 47                	jne    c00108c4 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c001087d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010880:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010887:	8d 48 01             	lea    ecx,[eax+0x1]
c001088a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c001088d:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010890:	75 0f                	jne    c00108a1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010892:	83 ec 0c             	sub    esp,0xc
c0010895:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010898:	53                   	push   ebx
c0010899:	e8 4c fc ff ff       	call   c00104ea <VgaText::scrollScreen()>
c001089e:	83 c4 10             	add    esp,0x10
c00108a1:	83 ec 0c             	sub    esp,0xc
c00108a4:	31 ed                	xor    ebp,ebp
c00108a6:	53                   	push   ebx
c00108a7:	e8 1c fb ff ff       	call   c00103c8 <VgaText::updateCursor()>
c00108ac:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00108b1:	83 c4 10             	add    esp,0x10
c00108b4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00108b7:	0f b7 f6             	movzx  esi,si
c00108ba:	01 f6                	add    esi,esi
c00108bc:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00108bf:	e9 9c 00 00 00       	jmp    c0010960 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00108c4:	3c 08                	cmp    al,0x8
c00108c6:	75 35                	jne    c00108fd <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c00108c8:	56                   	push   esi
c00108c9:	56                   	push   esi
c00108ca:	6a 01                	push   0x1
c00108cc:	53                   	push   ebx
c00108cd:	e8 42 fe ff ff       	call   c0010714 <VgaText::decrementCursor(bool)>
c00108d2:	58                   	pop    eax
c00108d3:	5a                   	pop    edx
c00108d4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00108d7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00108da:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00108dd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00108e0:	6a 20                	push   0x20
c00108e2:	53                   	push   ebx
c00108e3:	e8 a8 fc ff ff       	call   c0010590 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00108e8:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00108ed:	83 c4 20             	add    esp,0x20
c00108f0:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00108f3:	0f b7 f6             	movzx  esi,si
c00108f6:	01 f6                	add    esi,esi
c00108f8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00108fb:	eb 63                	jmp    c0010960 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00108fd:	51                   	push   ecx
c00108fe:	51                   	push   ecx
c00108ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010903:	50                   	push   eax
c0010904:	e8 75 fc ff ff       	call   c001057e <VgaText::combineCharAndColour(char, unsigned char)>
c0010909:	83 c4 10             	add    esp,0x10
c001090c:	66 89 06             	mov    WORD PTR [esi],ax
c001090f:	39 1d c4 e4 02 c0    	cmp    DWORD PTR ds:0xc002e4c4,ebx
c0010915:	75 21                	jne    c0010938 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010917:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c001091a:	85 c0                	test   eax,eax
c001091c:	74 1a                	je     c0010938 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c001091e:	52                   	push   edx
c001091f:	52                   	push   edx
c0010920:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010923:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010926:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001092a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001092e:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010931:	51                   	push   ecx
c0010932:	53                   	push   ebx
c0010933:	ff d0                	call   eax
c0010935:	83 c4 20             	add    esp,0x20
c0010938:	83 c6 02             	add    esi,0x2
c001093b:	50                   	push   eax
c001093c:	50                   	push   eax
c001093d:	6a 00                	push   0x0
c001093f:	53                   	push   ebx
c0010940:	e8 7b fd ff ff       	call   c00106c0 <VgaText::incrementCursor(bool)>
c0010945:	83 c4 10             	add    esp,0x10
c0010948:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c001094c:	75 0d                	jne    c001095b <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c001094e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010953:	0f b7 f6             	movzx  esi,si
c0010956:	01 f6                	add    esi,esi
c0010958:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001095b:	bd 01 00 00 00       	mov    ebp,0x1
c0010960:	47                   	inc    edi
c0010961:	e9 f8 fe ff ff       	jmp    c001085e <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010966:	83 ec 0c             	sub    esp,0xc
c0010969:	53                   	push   ebx
c001096a:	e8 59 fa ff ff       	call   c00103c8 <VgaText::updateCursor()>
c001096f:	83 c4 10             	add    esp,0x10
c0010972:	89 e8                	mov    eax,ebp
c0010974:	84 c0                	test   al,al
c0010976:	74 0c                	je     c0010984 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010978:	83 ec 0c             	sub    esp,0xc
c001097b:	53                   	push   ebx
c001097c:	e8 8d fe ff ff       	call   c001080e <VgaText::doUpdate()>
c0010981:	83 c4 10             	add    esp,0x10
c0010984:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001098b:	83 c4 1c             	add    esp,0x1c
c001098e:	5b                   	pop    ebx
c001098f:	5e                   	pop    esi
c0010990:	5f                   	pop    edi
c0010991:	5d                   	pop    ebp
c0010992:	c3                   	ret    
c0010993:	90                   	nop

c0010994 <VgaText::clearScreen()>:
c0010994:	57                   	push   edi
c0010995:	56                   	push   esi
c0010996:	31 f6                	xor    esi,esi
c0010998:	53                   	push   ebx
c0010999:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001099d:	52                   	push   edx
c001099e:	6a 00                	push   0x0
c00109a0:	6a 00                	push   0x0
c00109a2:	53                   	push   ebx
c00109a3:	e8 54 fc ff ff       	call   c00105fc <VgaText::setCursor(int, int)>
c00109a8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00109af:	83 c4 10             	add    esp,0x10
c00109b2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00109b5:	7e 20                	jle    c00109d7 <VgaText::clearScreen()+0x43>
c00109b7:	31 ff                	xor    edi,edi
c00109b9:	50                   	push   eax
c00109ba:	50                   	push   eax
c00109bb:	56                   	push   esi
c00109bc:	57                   	push   edi
c00109bd:	47                   	inc    edi
c00109be:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00109c1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00109c4:	6a 20                	push   0x20
c00109c6:	53                   	push   ebx
c00109c7:	e8 c4 fb ff ff       	call   c0010590 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00109cc:	83 c4 20             	add    esp,0x20
c00109cf:	83 ff 50             	cmp    edi,0x50
c00109d2:	75 e5                	jne    c00109b9 <VgaText::clearScreen()+0x25>
c00109d4:	46                   	inc    esi
c00109d5:	eb db                	jmp    c00109b2 <VgaText::clearScreen()+0x1e>
c00109d7:	83 ec 0c             	sub    esp,0xc
c00109da:	53                   	push   ebx
c00109db:	e8 2e fe ff ff       	call   c001080e <VgaText::doUpdate()>
c00109e0:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00109e7:	83 c4 10             	add    esp,0x10
c00109ea:	5b                   	pop    ebx
c00109eb:	5e                   	pop    esi
c00109ec:	5f                   	pop    edi
c00109ed:	c3                   	ret    

c00109ee <VgaText::putchar(char)>:
c00109ee:	56                   	push   esi
c00109ef:	53                   	push   ebx
c00109f0:	83 ec 14             	sub    esp,0x14
c00109f3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00109f7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00109fb:	3c 5b                	cmp    al,0x5b
c00109fd:	75 18                	jne    c0010a17 <VgaText::putchar(char)+0x29>
c00109ff:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010a03:	74 1f                	je     c0010a24 <VgaText::putchar(char)+0x36>
c0010a05:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010a0b:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010a12:	e9 bd 00 00 00       	jmp    c0010ad4 <VgaText::putchar(char)+0xe6>
c0010a17:	3c 1b                	cmp    al,0x1b
c0010a19:	75 09                	jne    c0010a24 <VgaText::putchar(char)+0x36>
c0010a1b:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010a1f:	e9 b0 00 00 00       	jmp    c0010ad4 <VgaText::putchar(char)+0xe6>
c0010a24:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010a27:	84 c9                	test   cl,cl
c0010a29:	0f 84 92 00 00 00    	je     c0010ac1 <VgaText::putchar(char)+0xd3>
c0010a2f:	8d 50 c0             	lea    edx,[eax-0x40]
c0010a32:	80 fa 3e             	cmp    dl,0x3e
c0010a35:	77 76                	ja     c0010aad <VgaText::putchar(char)+0xbf>
c0010a37:	3c 6d                	cmp    al,0x6d
c0010a39:	75 47                	jne    c0010a82 <VgaText::putchar(char)+0x94>
c0010a3b:	31 f6                	xor    esi,esi
c0010a3d:	31 d2                	xor    edx,edx
c0010a3f:	31 c0                	xor    eax,eax
c0010a41:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010a44:	7e 2d                	jle    c0010a73 <VgaText::putchar(char)+0x85>
c0010a46:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010a4b:	80 fa 3b             	cmp    dl,0x3b
c0010a4e:	75 17                	jne    c0010a67 <VgaText::putchar(char)+0x79>
c0010a50:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010a54:	50                   	push   eax
c0010a55:	53                   	push   ebx
c0010a56:	e8 83 f9 ff ff       	call   c00103de <VgaText::doANSI_SGR(int)>
c0010a5b:	59                   	pop    ecx
c0010a5c:	31 d2                	xor    edx,edx
c0010a5e:	58                   	pop    eax
c0010a5f:	31 c0                	xor    eax,eax
c0010a61:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010a65:	eb 09                	jmp    c0010a70 <VgaText::putchar(char)+0x82>
c0010a67:	6b c0 0a             	imul   eax,eax,0xa
c0010a6a:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010a6e:	88 ca                	mov    dl,cl
c0010a70:	46                   	inc    esi
c0010a71:	eb ce                	jmp    c0010a41 <VgaText::putchar(char)+0x53>
c0010a73:	84 d2                	test   dl,dl
c0010a75:	74 2e                	je     c0010aa5 <VgaText::putchar(char)+0xb7>
c0010a77:	50                   	push   eax
c0010a78:	53                   	push   ebx
c0010a79:	e8 60 f9 ff ff       	call   c00103de <VgaText::doANSI_SGR(int)>
c0010a7e:	58                   	pop    eax
c0010a7f:	5a                   	pop    edx
c0010a80:	eb 23                	jmp    c0010aa5 <VgaText::putchar(char)+0xb7>
c0010a82:	3c 4a                	cmp    al,0x4a
c0010a84:	75 1f                	jne    c0010aa5 <VgaText::putchar(char)+0xb7>
c0010a86:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010a8a:	75 19                	jne    c0010aa5 <VgaText::putchar(char)+0xb7>
c0010a8c:	83 ec 0c             	sub    esp,0xc
c0010a8f:	53                   	push   ebx
c0010a90:	e8 ff fe ff ff       	call   c0010994 <VgaText::clearScreen()>
c0010a95:	83 c4 0c             	add    esp,0xc
c0010a98:	6a 00                	push   0x0
c0010a9a:	6a 00                	push   0x0
c0010a9c:	53                   	push   ebx
c0010a9d:	e8 5a fb ff ff       	call   c00105fc <VgaText::setCursor(int, int)>
c0010aa2:	83 c4 10             	add    esp,0x10
c0010aa5:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010aab:	eb 27                	jmp    c0010ad4 <VgaText::putchar(char)+0xe6>
c0010aad:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010ab0:	83 fa 0e             	cmp    edx,0xe
c0010ab3:	7f 1f                	jg     c0010ad4 <VgaText::putchar(char)+0xe6>
c0010ab5:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010ab8:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010abb:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010abf:	eb 13                	jmp    c0010ad4 <VgaText::putchar(char)+0xe6>
c0010ac1:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010ac4:	0f be c0             	movsx  eax,al
c0010ac7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010aca:	50                   	push   eax
c0010acb:	53                   	push   ebx
c0010acc:	e8 65 fc ff ff       	call   c0010736 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010ad1:	83 c4 10             	add    esp,0x10
c0010ad4:	83 c4 14             	add    esp,0x14
c0010ad7:	5b                   	pop    ebx
c0010ad8:	5e                   	pop    esi
c0010ad9:	c3                   	ret    

c0010ada <VgaText::putx(unsigned int)>:
c0010ada:	57                   	push   edi
c0010adb:	b9 11 00 00 00       	mov    ecx,0x11
c0010ae0:	56                   	push   esi
c0010ae1:	be da a7 02 c0       	mov    esi,0xc002a7da
c0010ae6:	53                   	push   ebx
c0010ae7:	83 ec 20             	sub    esp,0x20
c0010aea:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010aee:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010af2:	fc                   	cld    
c0010af3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010af5:	be 08 00 00 00       	mov    esi,0x8
c0010afa:	50                   	push   eax
c0010afb:	50                   	push   eax
c0010afc:	89 d8                	mov    eax,ebx
c0010afe:	c1 e3 04             	shl    ebx,0x4
c0010b01:	c1 e8 1c             	shr    eax,0x1c
c0010b04:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010b09:	50                   	push   eax
c0010b0a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010b0e:	e8 db fe ff ff       	call   c00109ee <VgaText::putchar(char)>
c0010b13:	83 c4 10             	add    esp,0x10
c0010b16:	4e                   	dec    esi
c0010b17:	75 e1                	jne    c0010afa <VgaText::putx(unsigned int)+0x20>
c0010b19:	83 c4 20             	add    esp,0x20
c0010b1c:	5b                   	pop    ebx
c0010b1d:	5e                   	pop    esi
c0010b1e:	5f                   	pop    edi
c0010b1f:	c3                   	ret    

c0010b20 <VgaText::puts(char const*)>:
c0010b20:	53                   	push   ebx
c0010b21:	83 ec 08             	sub    esp,0x8
c0010b24:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010b28:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010b2b:	84 c0                	test   al,al
c0010b2d:	74 12                	je     c0010b41 <VgaText::puts(char const*)+0x21>
c0010b2f:	43                   	inc    ebx
c0010b30:	51                   	push   ecx
c0010b31:	51                   	push   ecx
c0010b32:	50                   	push   eax
c0010b33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b37:	e8 b2 fe ff ff       	call   c00109ee <VgaText::putchar(char)>
c0010b3c:	83 c4 10             	add    esp,0x10
c0010b3f:	eb e7                	jmp    c0010b28 <VgaText::puts(char const*)+0x8>
c0010b41:	83 c4 08             	add    esp,0x8
c0010b44:	5b                   	pop    ebx
c0010b45:	c3                   	ret    

c0010b46 <VgaText::VgaText(char const*)>:
c0010b46:	57                   	push   edi
c0010b47:	56                   	push   esi
c0010b48:	53                   	push   ebx
c0010b49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b4d:	83 ec 08             	sub    esp,0x8
c0010b50:	6a 00                	push   0x0
c0010b52:	50                   	push   eax
c0010b53:	e8 44 05 00 00       	call   c001109c <UnixFile::UnixFile(int)>
c0010b58:	83 c4 10             	add    esp,0x10
c0010b5b:	ba 40 a8 02 c0       	mov    edx,0xc002a840
c0010b60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b64:	89 10                	mov    DWORD PTR [eax],edx
c0010b66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b6a:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b75:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0010b7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b80:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0010b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b88:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0010b8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b90:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0010b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b9b:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0010ba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ba6:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0010bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bb1:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0010bb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bbc:	8d 50 60             	lea    edx,[eax+0x60]
c0010bbf:	bb a0 e4 02 c0       	mov    ebx,0xc002e4a0
c0010bc4:	b8 08 00 00 00       	mov    eax,0x8
c0010bc9:	fc                   	cld    
c0010bca:	89 d7                	mov    edi,edx
c0010bcc:	89 de                	mov    esi,ebx
c0010bce:	89 c1                	mov    ecx,eax
c0010bd0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bd6:	05 82 00 00 00       	add    eax,0x82
c0010bdb:	83 ec 08             	sub    esp,0x8
c0010bde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010be2:	50                   	push   eax
c0010be3:	e8 24 fc fe ff       	call   c000080c <strcpy>
c0010be8:	83 c4 10             	add    esp,0x10
c0010beb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bef:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010bf6:	83 ec 0c             	sub    esp,0xc
c0010bf9:	6a 01                	push   0x1
c0010bfb:	e8 df 08 00 00       	call   c00114df <Virt::allocateKernelVirtualPages(int)>
c0010c00:	83 c4 10             	add    esp,0x10
c0010c03:	89 c2                	mov    edx,eax
c0010c05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c09:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010c0c:	8b 1d 70 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e570
c0010c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c16:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010c19:	89 c6                	mov    esi,eax
c0010c1b:	e8 35 f0 ff ff       	call   c000fc55 <Phys::allocatePage()>
c0010c20:	68 05 0c 00 00       	push   0xc05
c0010c25:	56                   	push   esi
c0010c26:	50                   	push   eax
c0010c27:	53                   	push   ebx
c0010c28:	e8 59 0f 00 00       	call   c0011b86 <VAS::mapPage(unsigned long, unsigned long, int)>
c0010c2d:	83 c4 10             	add    esp,0x10
c0010c30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c34:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010c37:	83 ec 04             	sub    esp,0x4
c0010c3a:	68 00 0f 00 00       	push   0xf00
c0010c3f:	6a 00                	push   0x0
c0010c41:	50                   	push   eax
c0010c42:	e8 09 fb fe ff       	call   c0000750 <memset>
c0010c47:	83 c4 10             	add    esp,0x10
c0010c4a:	83 ec 04             	sub    esp,0x4
c0010c4d:	6a 00                	push   0x0
c0010c4f:	6a 07                	push   0x7
c0010c51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c55:	e8 18 f8 ff ff       	call   c0010472 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010c5a:	83 c4 10             	add    esp,0x10
c0010c5d:	83 ec 04             	sub    esp,0x4
c0010c60:	6a 00                	push   0x0
c0010c62:	6a 00                	push   0x0
c0010c64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c68:	e8 8f f9 ff ff       	call   c00105fc <VgaText::setCursor(int, int)>
c0010c6d:	83 c4 10             	add    esp,0x10
c0010c70:	83 ec 0c             	sub    esp,0xc
c0010c73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c77:	e8 18 fd ff ff       	call   c0010994 <VgaText::clearScreen()>
c0010c7c:	83 c4 10             	add    esp,0x10
c0010c7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c83:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0010c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c8b:	05 02 01 00 00       	add    eax,0x102
c0010c90:	83 ec 04             	sub    esp,0x4
c0010c93:	68 96 00 00 00       	push   0x96
c0010c98:	6a 00                	push   0x0
c0010c9a:	50                   	push   eax
c0010c9b:	e8 b0 fa fe ff       	call   c0000750 <memset>
c0010ca0:	83 c4 10             	add    esp,0x10
c0010ca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ca7:	05 98 01 00 00       	add    eax,0x198
c0010cac:	83 ec 04             	sub    esp,0x4
c0010caf:	68 2c 01 00 00       	push   0x12c
c0010cb4:	6a 00                	push   0x0
c0010cb6:	50                   	push   eax
c0010cb7:	e8 94 fa fe ff       	call   c0000750 <memset>
c0010cbc:	83 c4 10             	add    esp,0x10
c0010cbf:	90                   	nop
c0010cc0:	5b                   	pop    ebx
c0010cc1:	5e                   	pop    esi
c0010cc2:	5f                   	pop    edi
c0010cc3:	c3                   	ret    

c0010cc4 <VgaText::receiveKey(unsigned char)>:
c0010cc4:	55                   	push   ebp
c0010cc5:	57                   	push   edi
c0010cc6:	56                   	push   esi
c0010cc7:	53                   	push   ebx
c0010cc8:	83 ec 1c             	sub    esp,0x1c
c0010ccb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010ccf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010cd3:	84 db                	test   bl,bl
c0010cd5:	0f 84 c9 00 00 00    	je     c0010da4 <VgaText::receiveKey(unsigned char)+0xe0>
c0010cdb:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010ce1:	80 fb 08             	cmp    bl,0x8
c0010ce4:	75 2c                	jne    c0010d12 <VgaText::receiveKey(unsigned char)+0x4e>
c0010ce6:	83 ec 0c             	sub    esp,0xc
c0010ce9:	57                   	push   edi
c0010cea:	e8 7d fa fe ff       	call   c000076c <strlen>
c0010cef:	83 c4 10             	add    esp,0x10
c0010cf2:	85 c0                	test   eax,eax
c0010cf4:	74 41                	je     c0010d37 <VgaText::receiveKey(unsigned char)+0x73>
c0010cf6:	50                   	push   eax
c0010cf7:	50                   	push   eax
c0010cf8:	6a 08                	push   0x8
c0010cfa:	56                   	push   esi
c0010cfb:	e8 ee fc ff ff       	call   c00109ee <VgaText::putchar(char)>
c0010d00:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010d03:	e8 64 fa fe ff       	call   c000076c <strlen>
c0010d08:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010d10:	eb 22                	jmp    c0010d34 <VgaText::receiveKey(unsigned char)+0x70>
c0010d12:	0f be c3             	movsx  eax,bl
c0010d15:	52                   	push   edx
c0010d16:	52                   	push   edx
c0010d17:	50                   	push   eax
c0010d18:	56                   	push   esi
c0010d19:	e8 d0 fc ff ff       	call   c00109ee <VgaText::putchar(char)>
c0010d1e:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010d22:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010d27:	59                   	pop    ecx
c0010d28:	5d                   	pop    ebp
c0010d29:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010d2d:	50                   	push   eax
c0010d2e:	57                   	push   edi
c0010d2f:	e8 18 fc fe ff       	call   c000094c <strcat>
c0010d34:	83 c4 10             	add    esp,0x10
c0010d37:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010d3e:	75 05                	jne    c0010d45 <VgaText::receiveKey(unsigned char)+0x81>
c0010d40:	80 fb 0a             	cmp    bl,0xa
c0010d43:	75 53                	jne    c0010d98 <VgaText::receiveKey(unsigned char)+0xd4>
c0010d45:	83 ec 0c             	sub    esp,0xc
c0010d48:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010d4e:	53                   	push   ebx
c0010d4f:	e8 18 fa fe ff       	call   c000076c <strlen>
c0010d54:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010d57:	89 c5                	mov    ebp,eax
c0010d59:	e8 0e fa fe ff       	call   c000076c <strlen>
c0010d5e:	83 c4 10             	add    esp,0x10
c0010d61:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010d65:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010d6a:	76 10                	jbe    c0010d7c <VgaText::receiveKey(unsigned char)+0xb8>
c0010d6c:	83 ec 0c             	sub    esp,0xc
c0010d6f:	68 eb a7 02 c0       	push   0xc002a7eb
c0010d74:	e8 a6 94 00 00       	call   c001a21f <Krnl::panic(char const*)>
c0010d79:	83 c4 10             	add    esp,0x10
c0010d7c:	50                   	push   eax
c0010d7d:	50                   	push   eax
c0010d7e:	57                   	push   edi
c0010d7f:	53                   	push   ebx
c0010d80:	e8 c7 fb fe ff       	call   c000094c <strcat>
c0010d85:	83 c4 0c             	add    esp,0xc
c0010d88:	68 96 00 00 00       	push   0x96
c0010d8d:	6a 00                	push   0x0
c0010d8f:	57                   	push   edi
c0010d90:	e8 bb f9 fe ff       	call   c0000750 <memset>
c0010d95:	83 c4 10             	add    esp,0x10
c0010d98:	83 ec 0c             	sub    esp,0xc
c0010d9b:	56                   	push   esi
c0010d9c:	e8 6d fa ff ff       	call   c001080e <VgaText::doUpdate()>
c0010da1:	83 c4 10             	add    esp,0x10
c0010da4:	83 c4 1c             	add    esp,0x1c
c0010da7:	5b                   	pop    ebx
c0010da8:	5e                   	pop    esi
c0010da9:	5f                   	pop    edi
c0010daa:	5d                   	pop    ebp
c0010dab:	c3                   	ret    

c0010dac <VgaText::write(unsigned long long, void*, int*)>:
c0010dac:	55                   	push   ebp
c0010dad:	57                   	push   edi
c0010dae:	56                   	push   esi
c0010daf:	53                   	push   ebx
c0010db0:	83 ec 0c             	sub    esp,0xc
c0010db3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010db7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010dbb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010dbf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010dc6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010dc9:	39 eb                	cmp    ebx,ebp
c0010dcb:	74 13                	je     c0010de0 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010dcd:	43                   	inc    ebx
c0010dce:	50                   	push   eax
c0010dcf:	50                   	push   eax
c0010dd0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010dd4:	50                   	push   eax
c0010dd5:	56                   	push   esi
c0010dd6:	e8 13 fc ff ff       	call   c00109ee <VgaText::putchar(char)>
c0010ddb:	83 c4 10             	add    esp,0x10
c0010dde:	eb e9                	jmp    c0010dc9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010de0:	83 ec 0c             	sub    esp,0xc
c0010de3:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010dea:	56                   	push   esi
c0010deb:	e8 1e fa ff ff       	call   c001080e <VgaText::doUpdate()>
c0010df0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010df4:	89 38                	mov    DWORD PTR [eax],edi
c0010df6:	83 c4 1c             	add    esp,0x1c
c0010df9:	31 c0                	xor    eax,eax
c0010dfb:	5b                   	pop    ebx
c0010dfc:	5e                   	pop    esi
c0010dfd:	5f                   	pop    edi
c0010dfe:	5d                   	pop    ebp
c0010dff:	c3                   	ret    

c0010e00 <newTerminal(char*)>:
c0010e00:	83 ec 28             	sub    esp,0x28
c0010e03:	68 c4 02 00 00       	push   0x2c4
c0010e08:	e8 4c ea ff ff       	call   c000f859 <malloc>
c0010e0d:	5a                   	pop    edx
c0010e0e:	59                   	pop    ecx
c0010e0f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010e13:	50                   	push   eax
c0010e14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010e18:	e8 29 fd ff ff       	call   c0010b46 <VgaText::VgaText(char const*)>
c0010e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e21:	83 c4 2c             	add    esp,0x2c
c0010e24:	c3                   	ret    
c0010e25:	90                   	nop

c0010e26 <TSS::TSS()>:
c0010e26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e2a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010e31:	90                   	nop
c0010e32:	c3                   	ret    
c0010e33:	90                   	nop

c0010e34 <TSS::setESP(unsigned long)>:
c0010e34:	55                   	push   ebp
c0010e35:	89 e5                	mov    ebp,esp
c0010e37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e3d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010e40:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e43:	90                   	nop
c0010e44:	5d                   	pop    ebp
c0010e45:	c3                   	ret    

c0010e46 <TSS::flush()>:
c0010e46:	55                   	push   ebp
c0010e47:	89 e5                	mov    ebp,esp
c0010e49:	83 ec 10             	sub    esp,0x10
c0010e4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e51:	83 c8 03             	or     eax,0x3
c0010e54:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010e58:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010e5c:	66 89 d0             	mov    ax,dx
c0010e5f:	0f 00 d8             	ltr    ax
c0010e62:	90                   	nop
c0010e63:	c9                   	leave  
c0010e64:	c3                   	ret    
c0010e65:	90                   	nop

c0010e66 <TSS::setup(unsigned long, unsigned long)>:
c0010e66:	55                   	push   ebp
c0010e67:	89 e5                	mov    ebp,esp
c0010e69:	83 ec 18             	sub    esp,0x18
c0010e6c:	83 ec 0c             	sub    esp,0xc
c0010e6f:	6a 68                	push   0x68
c0010e71:	e8 e3 e9 ff ff       	call   c000f859 <malloc>
c0010e76:	83 c4 10             	add    esp,0x10
c0010e79:	89 c2                	mov    edx,eax
c0010e7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e7e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e87:	83 ec 04             	sub    esp,0x4
c0010e8a:	6a 68                	push   0x68
c0010e8c:	6a 00                	push   0x0
c0010e8e:	50                   	push   eax
c0010e8f:	e8 bc f8 fe ff       	call   c0000750 <memset>
c0010e94:	83 c4 10             	add    esp,0x10
c0010e97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e9d:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010ea3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ea6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ea9:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010eaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010eb5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010eb8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010ebb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ebe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ec1:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010ec7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ecd:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010ed3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ed6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ed9:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010edf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ee2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ee5:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010eeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ef1:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010ef7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010efa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010efd:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010f03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f09:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010f0c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010f0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f12:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f15:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010f18:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010f1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f21:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010f28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f2b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f2e:	0f 20 da             	mov    edx,cr3
c0010f31:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010f34:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010f37:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010f3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f3d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f40:	83 ec 08             	sub    esp,0x8
c0010f43:	50                   	push   eax
c0010f44:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010f47:	50                   	push   eax
c0010f48:	e8 05 e1 ff ff       	call   c000f052 <GDTEntry::setBase(unsigned int)>
c0010f4d:	83 c4 10             	add    esp,0x10
c0010f50:	83 ec 08             	sub    esp,0x8
c0010f53:	6a 68                	push   0x68
c0010f55:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010f58:	50                   	push   eax
c0010f59:	e8 10 e1 ff ff       	call   c000f06e <GDTEntry::setLimit(unsigned int)>
c0010f5e:	83 c4 10             	add    esp,0x10
c0010f61:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010f65:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010f68:	83 e0 0f             	and    eax,0xf
c0010f6b:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010f6e:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010f71:	83 c8 40             	or     eax,0x40
c0010f74:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010f77:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0010f7c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010f82:	05 78 01 00 00       	add    eax,0x178
c0010f87:	83 ec 04             	sub    esp,0x4
c0010f8a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010f8d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010f90:	50                   	push   eax
c0010f91:	e8 0c e1 ff ff       	call   c000f0a2 <GDT::addEntry(GDTEntry)>
c0010f96:	83 c4 10             	add    esp,0x10
c0010f99:	89 c2                	mov    edx,eax
c0010f9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f9e:	89 10                	mov    DWORD PTR [eax],edx
c0010fa0:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0010fa5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010fab:	05 78 01 00 00       	add    eax,0x178
c0010fb0:	83 ec 0c             	sub    esp,0xc
c0010fb3:	50                   	push   eax
c0010fb4:	e8 13 e1 ff ff       	call   c000f0cc <GDT::flush()>
c0010fb9:	83 c4 10             	add    esp,0x10
c0010fbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fbf:	8b 00                	mov    eax,DWORD PTR [eax]
c0010fc1:	c9                   	leave  
c0010fc2:	c3                   	ret    
c0010fc3:	90                   	nop

c0010fc4 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010fc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fc8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010fcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fcf:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010fd4:	75 08                	jne    c0010fde <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010fd6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010fdc:	eb 38                	jmp    c0011016 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010fde:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010fe3:	75 17                	jne    c0010ffc <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010fe5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010fed:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010ff3:	8b 10                	mov    edx,DWORD PTR [eax]
c0010ff5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010ff9:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010ffc:	89 c1                	mov    ecx,eax
c0010ffe:	83 e1 fd             	and    ecx,0xfffffffd
c0011001:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011007:	74 cd                	je     c0010fd6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011009:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001100e:	83 e0 ef             	and    eax,0xffffffef
c0011011:	83 f8 08             	cmp    eax,0x8
c0011014:	76 c0                	jbe    c0010fd6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011016:	31 c0                	xor    eax,eax
c0011018:	c3                   	ret    
c0011019:	90                   	nop

c001101a <ReservedFilename::isAtty()>:
c001101a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001101e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011021:	31 c0                	xor    eax,eax
c0011023:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011029:	74 09                	je     c0011034 <ReservedFilename::isAtty()+0x1a>
c001102b:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011031:	0f 94 c0             	sete   al
c0011034:	c3                   	ret    
c0011035:	90                   	nop

c0011036 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011036:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001103a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001103e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011041:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011045:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001104a:	75 08                	jne    c0011054 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001104c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011052:	eb 3d                	jmp    c0011091 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011054:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011059:	75 17                	jne    c0011072 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001105b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011060:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011063:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011069:	8b 10                	mov    edx,DWORD PTR [eax]
c001106b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001106f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011072:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011077:	75 04                	jne    c001107d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011079:	89 0a                	mov    DWORD PTR [edx],ecx
c001107b:	eb 14                	jmp    c0011091 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001107d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011082:	74 c8                	je     c001104c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011084:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011089:	83 e0 ef             	and    eax,0xffffffef
c001108c:	83 f8 08             	cmp    eax,0x8
c001108f:	76 bb                	jbe    c001104c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011091:	31 c0                	xor    eax,eax
c0011093:	c3                   	ret    

c0011094 <UnixFile::getFileDescriptor()>:
c0011094:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011098:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001109b:	c3                   	ret    

c001109c <UnixFile::UnixFile(int)>:
c001109c:	53                   	push   ebx
c001109d:	83 ec 28             	sub    esp,0x28
c00110a0:	ba 08 a9 02 c0       	mov    edx,0xc002a908
c00110a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00110a9:	89 10                	mov    DWORD PTR [eax],edx
c00110ab:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00110b3:	0f 8f 8c 01 00 00    	jg     c0011245 <UnixFile::UnixFile(int)+0x1a9>
c00110b9:	a1 a0 d3 02 c0       	mov    eax,ds:0xc002d3a0
c00110be:	8d 50 01             	lea    edx,[eax+0x1]
c00110c1:	89 15 a0 d3 02 c0    	mov    DWORD PTR ds:0xc002d3a0,edx
c00110c7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00110cb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00110ce:	83 ec 08             	sub    esp,0x8
c00110d1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00110d5:	68 58 e5 02 c0       	push   0xc002e558
c00110da:	e8 e7 78 01 00       	call   c00289c6 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00110df:	83 c4 10             	add    esp,0x10
c00110e2:	a0 54 e5 02 c0       	mov    al,ds:0xc002e554
c00110e7:	83 f0 01             	xor    eax,0x1
c00110ea:	84 c0                	test   al,al
c00110ec:	0f 84 54 01 00 00    	je     c0011246 <UnixFile::UnixFile(int)+0x1aa>
c00110f2:	c6 05 54 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e554,0x1
c00110f9:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011101:	83 ec 0c             	sub    esp,0xc
c0011104:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011108:	e8 4c e7 ff ff       	call   c000f859 <malloc>
c001110d:	83 c4 10             	add    esp,0x10
c0011110:	89 c3                	mov    ebx,eax
c0011112:	83 ec 08             	sub    esp,0x8
c0011115:	68 03 ff ff 0f       	push   0xfffff03
c001111a:	53                   	push   ebx
c001111b:	e8 2c 01 00 00       	call   c001124c <ReservedFilename::ReservedFilename(int)>
c0011120:	83 c4 10             	add    esp,0x10
c0011123:	89 1d 4c e5 02 c0    	mov    DWORD PTR ds:0xc002e54c,ebx
c0011129:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011131:	83 ec 0c             	sub    esp,0xc
c0011134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011138:	e8 1c e7 ff ff       	call   c000f859 <malloc>
c001113d:	83 c4 10             	add    esp,0x10
c0011140:	89 c3                	mov    ebx,eax
c0011142:	83 ec 08             	sub    esp,0x8
c0011145:	68 01 ff ff 0f       	push   0xfffff01
c001114a:	53                   	push   ebx
c001114b:	e8 fc 00 00 00       	call   c001124c <ReservedFilename::ReservedFilename(int)>
c0011150:	83 c4 10             	add    esp,0x10
c0011153:	89 1d 50 e5 02 c0    	mov    DWORD PTR ds:0xc002e550,ebx
c0011159:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011161:	83 ec 0c             	sub    esp,0xc
c0011164:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011168:	e8 ec e6 ff ff       	call   c000f859 <malloc>
c001116d:	83 c4 10             	add    esp,0x10
c0011170:	89 c3                	mov    ebx,eax
c0011172:	83 ec 08             	sub    esp,0x8
c0011175:	68 00 ff ff 0f       	push   0xfffff00
c001117a:	53                   	push   ebx
c001117b:	e8 cc 00 00 00       	call   c001124c <ReservedFilename::ReservedFilename(int)>
c0011180:	83 c4 10             	add    esp,0x10
c0011183:	89 1d 44 e5 02 c0    	mov    DWORD PTR ds:0xc002e544,ebx
c0011189:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011191:	83 ec 0c             	sub    esp,0xc
c0011194:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011198:	e8 bc e6 ff ff       	call   c000f859 <malloc>
c001119d:	83 c4 10             	add    esp,0x10
c00111a0:	89 c3                	mov    ebx,eax
c00111a2:	83 ec 08             	sub    esp,0x8
c00111a5:	68 02 ff ff 0f       	push   0xfffff02
c00111aa:	53                   	push   ebx
c00111ab:	e8 9c 00 00 00       	call   c001124c <ReservedFilename::ReservedFilename(int)>
c00111b0:	83 c4 10             	add    esp,0x10
c00111b3:	89 1d 48 e5 02 c0    	mov    DWORD PTR ds:0xc002e548,ebx
c00111b9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00111c1:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00111c6:	7f 7e                	jg     c0011246 <UnixFile::UnixFile(int)+0x1aa>
c00111c8:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00111d0:	83 ec 0c             	sub    esp,0xc
c00111d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00111d7:	e8 7d e6 ff ff       	call   c000f859 <malloc>
c00111dc:	83 c4 10             	add    esp,0x10
c00111df:	89 c3                	mov    ebx,eax
c00111e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111e5:	05 10 ff ff 0f       	add    eax,0xfffff10
c00111ea:	83 ec 08             	sub    esp,0x8
c00111ed:	50                   	push   eax
c00111ee:	53                   	push   ebx
c00111ef:	e8 58 00 00 00       	call   c001124c <ReservedFilename::ReservedFilename(int)>
c00111f4:	83 c4 10             	add    esp,0x10
c00111f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111fb:	89 1c 85 20 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1ae0],ebx
c0011202:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001120a:	83 ec 0c             	sub    esp,0xc
c001120d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011211:	e8 43 e6 ff ff       	call   c000f859 <malloc>
c0011216:	83 c4 10             	add    esp,0x10
c0011219:	89 c3                	mov    ebx,eax
c001121b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001121f:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011224:	83 ec 08             	sub    esp,0x8
c0011227:	50                   	push   eax
c0011228:	53                   	push   ebx
c0011229:	e8 1e 00 00 00       	call   c001124c <ReservedFilename::ReservedFilename(int)>
c001122e:	83 c4 10             	add    esp,0x10
c0011231:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011235:	89 1c 85 e0 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b20],ebx
c001123c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011240:	e9 7c ff ff ff       	jmp    c00111c1 <UnixFile::UnixFile(int)+0x125>
c0011245:	90                   	nop
c0011246:	83 c4 28             	add    esp,0x28
c0011249:	5b                   	pop    ebx
c001124a:	c3                   	ret    
c001124b:	90                   	nop

c001124c <ReservedFilename::ReservedFilename(int)>:
c001124c:	83 ec 0c             	sub    esp,0xc
c001124f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011253:	83 ec 08             	sub    esp,0x8
c0011256:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001125a:	50                   	push   eax
c001125b:	e8 3c fe ff ff       	call   c001109c <UnixFile::UnixFile(int)>
c0011260:	83 c4 10             	add    esp,0x10
c0011263:	ba 24 a9 02 c0       	mov    edx,0xc002a924
c0011268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001126c:	89 10                	mov    DWORD PTR [eax],edx
c001126e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011272:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011276:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011279:	90                   	nop
c001127a:	83 c4 0c             	add    esp,0xc
c001127d:	c3                   	ret    

c001127e <UnixFile::~UnixFile()>:
c001127e:	83 ec 1c             	sub    esp,0x1c
c0011281:	ba 08 a9 02 c0       	mov    edx,0xc002a908
c0011286:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001128a:	89 10                	mov    DWORD PTR [eax],edx
c001128c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011290:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011293:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011298:	7f 73                	jg     c001130d <UnixFile::~UnixFile()+0x8f>
c001129a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00112a2:	83 ec 0c             	sub    esp,0xc
c00112a5:	68 58 e5 02 c0       	push   0xc002e558
c00112aa:	e8 eb 77 01 00       	call   c0028a9a <LinkedList<UnixFile>::getFirstElement()>
c00112af:	83 c4 10             	add    esp,0x10
c00112b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00112b6:	83 ec 0c             	sub    esp,0xc
c00112b9:	68 58 e5 02 c0       	push   0xc002e558
c00112be:	e8 df 77 01 00       	call   c0028aa2 <LinkedList<UnixFile>::removeFirst()>
c00112c3:	83 c4 10             	add    esp,0x10
c00112c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00112ca:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00112ce:	74 40                	je     c0011310 <UnixFile::~UnixFile()+0x92>
c00112d0:	83 ec 08             	sub    esp,0x8
c00112d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00112d7:	68 58 e5 02 c0       	push   0xc002e558
c00112dc:	e8 e5 76 01 00       	call   c00289c6 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00112e1:	83 c4 10             	add    esp,0x10
c00112e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112e8:	8d 50 01             	lea    edx,[eax+0x1]
c00112eb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00112ef:	3d 88 13 00 00       	cmp    eax,0x1388
c00112f4:	0f 94 c0             	sete   al
c00112f7:	84 c0                	test   al,al
c00112f9:	74 a7                	je     c00112a2 <UnixFile::~UnixFile()+0x24>
c00112fb:	83 ec 0c             	sub    esp,0xc
c00112fe:	68 e0 a8 02 c0       	push   0xc002a8e0
c0011303:	e8 17 8f 00 00       	call   c001a21f <Krnl::panic(char const*)>
c0011308:	83 c4 10             	add    esp,0x10
c001130b:	eb 95                	jmp    c00112a2 <UnixFile::~UnixFile()+0x24>
c001130d:	90                   	nop
c001130e:	eb 01                	jmp    c0011311 <UnixFile::~UnixFile()+0x93>
c0011310:	90                   	nop
c0011311:	90                   	nop
c0011312:	83 c4 1c             	add    esp,0x1c
c0011315:	c3                   	ret    

c0011316 <UnixFile::~UnixFile()>:
c0011316:	83 ec 0c             	sub    esp,0xc
c0011319:	83 ec 0c             	sub    esp,0xc
c001131c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011320:	e8 59 ff ff ff       	call   c001127e <UnixFile::~UnixFile()>
c0011325:	83 c4 10             	add    esp,0x10
c0011328:	83 ec 08             	sub    esp,0x8
c001132b:	6a 0c                	push   0xc
c001132d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011331:	e8 a3 14 00 00       	call   c00127d9 <operator delete(void*, unsigned long)>
c0011336:	83 c4 10             	add    esp,0x10
c0011339:	83 c4 0c             	add    esp,0xc
c001133c:	c3                   	ret    
c001133d:	90                   	nop

c001133e <ReservedFilename::~ReservedFilename()>:
c001133e:	83 ec 0c             	sub    esp,0xc
c0011341:	ba 24 a9 02 c0       	mov    edx,0xc002a924
c0011346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001134a:	89 10                	mov    DWORD PTR [eax],edx
c001134c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011350:	83 ec 0c             	sub    esp,0xc
c0011353:	50                   	push   eax
c0011354:	e8 25 ff ff ff       	call   c001127e <UnixFile::~UnixFile()>
c0011359:	83 c4 10             	add    esp,0x10
c001135c:	90                   	nop
c001135d:	83 c4 0c             	add    esp,0xc
c0011360:	c3                   	ret    
c0011361:	90                   	nop

c0011362 <ReservedFilename::~ReservedFilename()>:
c0011362:	83 ec 0c             	sub    esp,0xc
c0011365:	83 ec 0c             	sub    esp,0xc
c0011368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001136c:	e8 cd ff ff ff       	call   c001133e <ReservedFilename::~ReservedFilename()>
c0011371:	83 c4 10             	add    esp,0x10
c0011374:	83 ec 08             	sub    esp,0x8
c0011377:	6a 0c                	push   0xc
c0011379:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001137d:	e8 57 14 00 00       	call   c00127d9 <operator delete(void*, unsigned long)>
c0011382:	83 c4 10             	add    esp,0x10
c0011385:	83 c4 0c             	add    esp,0xc
c0011388:	c3                   	ret    

c0011389 <getFromFileDescriptor(int)>:
c0011389:	53                   	push   ebx
c001138a:	83 ec 08             	sub    esp,0x8
c001138d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011391:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011397:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001139d:	7f 2c                	jg     c00113cb <getFromFileDescriptor(int)+0x42>
c001139f:	83 ec 0c             	sub    esp,0xc
c00113a2:	68 58 e5 02 c0       	push   0xc002e558
c00113a7:	e8 ee 76 01 00       	call   c0028a9a <LinkedList<UnixFile>::getFirstElement()>
c00113ac:	83 c4 10             	add    esp,0x10
c00113af:	85 c0                	test   eax,eax
c00113b1:	75 04                	jne    c00113b7 <getFromFileDescriptor(int)+0x2e>
c00113b3:	31 c0                	xor    eax,eax
c00113b5:	eb 6e                	jmp    c0011425 <getFromFileDescriptor(int)+0x9c>
c00113b7:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00113ba:	74 69                	je     c0011425 <getFromFileDescriptor(int)+0x9c>
c00113bc:	52                   	push   edx
c00113bd:	52                   	push   edx
c00113be:	50                   	push   eax
c00113bf:	68 58 e5 02 c0       	push   0xc002e558
c00113c4:	e8 7b 77 01 00       	call   c0028b44 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00113c9:	eb e1                	jmp    c00113ac <getFromFileDescriptor(int)+0x23>
c00113cb:	a1 4c e5 02 c0       	mov    eax,ds:0xc002e54c
c00113d0:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00113d6:	74 4d                	je     c0011425 <getFromFileDescriptor(int)+0x9c>
c00113d8:	a1 50 e5 02 c0       	mov    eax,ds:0xc002e550
c00113dd:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00113e3:	74 40                	je     c0011425 <getFromFileDescriptor(int)+0x9c>
c00113e5:	a1 48 e5 02 c0       	mov    eax,ds:0xc002e548
c00113ea:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00113f0:	74 33                	je     c0011425 <getFromFileDescriptor(int)+0x9c>
c00113f2:	a1 44 e5 02 c0       	mov    eax,ds:0xc002e544
c00113f7:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00113fd:	74 26                	je     c0011425 <getFromFileDescriptor(int)+0x9c>
c00113ff:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011405:	83 f8 08             	cmp    eax,0x8
c0011408:	77 09                	ja     c0011413 <getFromFileDescriptor(int)+0x8a>
c001140a:	8b 04 85 20 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ae0]
c0011411:	eb 12                	jmp    c0011425 <getFromFileDescriptor(int)+0x9c>
c0011413:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011419:	83 fb 08             	cmp    ebx,0x8
c001141c:	77 95                	ja     c00113b3 <getFromFileDescriptor(int)+0x2a>
c001141e:	8b 04 9d e0 e4 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1b20]
c0011425:	83 c4 08             	add    esp,0x8
c0011428:	5b                   	pop    ebx
c0011429:	c3                   	ret    

c001142a <__static_initialization_and_destruction_0(int, int)>:
c001142a:	83 ec 0c             	sub    esp,0xc
c001142d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011432:	75 34                	jne    c0011468 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011434:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001143c:	75 2a                	jne    c0011468 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001143e:	83 ec 0c             	sub    esp,0xc
c0011441:	68 58 e5 02 c0       	push   0xc002e558
c0011446:	e8 39 75 01 00       	call   c0028984 <LinkedList<UnixFile>::LinkedList()>
c001144b:	83 c4 10             	add    esp,0x10
c001144e:	83 ec 04             	sub    esp,0x4
c0011451:	68 d8 d1 02 c0       	push   0xc002d1d8
c0011456:	68 58 e5 02 c0       	push   0xc002e558
c001145b:	68 82 89 02 c0       	push   0xc0028982
c0011460:	e8 ee 12 00 00       	call   c0012753 <__cxa_atexit>
c0011465:	83 c4 10             	add    esp,0x10
c0011468:	90                   	nop
c0011469:	83 c4 0c             	add    esp,0xc
c001146c:	c3                   	ret    

c001146d <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001146d:	83 ec 0c             	sub    esp,0xc
c0011470:	83 ec 08             	sub    esp,0x8
c0011473:	68 ff ff 00 00       	push   0xffff
c0011478:	6a 01                	push   0x1
c001147a:	e8 ab ff ff ff       	call   c001142a <__static_initialization_and_destruction_0(int, int)>
c001147f:	83 c4 10             	add    esp,0x10
c0011482:	83 c4 0c             	add    esp,0xc
c0011485:	c3                   	ret    

c0011486 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011486:	53                   	push   ebx
c0011487:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001148b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001148f:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011495:	89 c8                	mov    eax,ecx
c0011497:	d1 e8                	shr    eax,1
c0011499:	03 05 a8 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d3a8
c001149f:	83 e1 01             	and    ecx,0x1
c00114a2:	8a 10                	mov    dl,BYTE PTR [eax]
c00114a4:	75 09                	jne    c00114af <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00114a6:	83 e2 f0             	and    edx,0xfffffff0
c00114a9:	09 da                	or     edx,ebx
c00114ab:	88 10                	mov    BYTE PTR [eax],dl
c00114ad:	5b                   	pop    ebx
c00114ae:	c3                   	ret    
c00114af:	c1 e3 04             	shl    ebx,0x4
c00114b2:	83 e2 0f             	and    edx,0xf
c00114b5:	09 da                	or     edx,ebx
c00114b7:	88 10                	mov    BYTE PTR [eax],dl
c00114b9:	5b                   	pop    ebx
c00114ba:	c3                   	ret    

c00114bb <Virt::getPageState(unsigned long)>:
c00114bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114bf:	8b 0d a8 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d3a8
c00114c5:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00114cb:	89 d0                	mov    eax,edx
c00114cd:	d1 e8                	shr    eax,1
c00114cf:	83 e2 01             	and    edx,0x1
c00114d2:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00114d5:	75 04                	jne    c00114db <Virt::getPageState(unsigned long)+0x20>
c00114d7:	83 e0 0f             	and    eax,0xf
c00114da:	c3                   	ret    
c00114db:	c0 e8 04             	shr    al,0x4
c00114de:	c3                   	ret    

c00114df <Virt::allocateKernelVirtualPages(int)>:
c00114df:	55                   	push   ebp
c00114e0:	31 ed                	xor    ebp,ebp
c00114e2:	57                   	push   edi
c00114e3:	56                   	push   esi
c00114e4:	53                   	push   ebx
c00114e5:	31 db                	xor    ebx,ebx
c00114e7:	83 ec 1c             	sub    esp,0x1c
c00114ea:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00114ee:	8b 3d a4 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d3a4
c00114f4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00114f9:	57                   	push   edi
c00114fa:	e8 bc ff ff ff       	call   c00114bb <Virt::getPageState(unsigned long)>
c00114ff:	5a                   	pop    edx
c0011500:	84 c0                	test   al,al
c0011502:	75 3a                	jne    c001153e <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011504:	85 db                	test   ebx,ebx
c0011506:	75 02                	jne    c001150a <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011508:	89 fd                	mov    ebp,edi
c001150a:	43                   	inc    ebx
c001150b:	39 f3                	cmp    ebx,esi
c001150d:	74 5a                	je     c0011569 <Virt::allocateKernelVirtualPages(int)+0x8a>
c001150f:	47                   	inc    edi
c0011510:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011516:	76 31                	jbe    c0011549 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011518:	c7 05 a4 d3 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d3a4,0xc8000
c0011522:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011527:	75 28                	jne    c0011551 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011529:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001152e:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011533:	57                   	push   edi
c0011534:	e8 82 ff ff ff       	call   c00114bb <Virt::getPageState(unsigned long)>
c0011539:	5a                   	pop    edx
c001153a:	84 c0                	test   al,al
c001153c:	74 c6                	je     c0011504 <Virt::allocateKernelVirtualPages(int)+0x25>
c001153e:	31 db                	xor    ebx,ebx
c0011540:	47                   	inc    edi
c0011541:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011547:	77 cf                	ja     c0011518 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011549:	89 3d a4 d3 02 c0    	mov    DWORD PTR ds:0xc002d3a4,edi
c001154f:	eb a8                	jmp    c00114f9 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011551:	83 ec 0c             	sub    esp,0xc
c0011554:	68 38 a9 02 c0       	push   0xc002a938
c0011559:	e8 c1 8c 00 00       	call   c001a21f <Krnl::panic(char const*)>
c001155e:	8b 3d a4 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d3a4
c0011564:	83 c4 10             	add    esp,0x10
c0011567:	eb 90                	jmp    c00114f9 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011569:	89 2d a4 d3 02 c0    	mov    DWORD PTR ds:0xc002d3a4,ebp
c001156f:	4b                   	dec    ebx
c0011570:	74 5f                	je     c00115d1 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011572:	85 f6                	test   esi,esi
c0011574:	74 3d                	je     c00115b3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011576:	89 e8                	mov    eax,ebp
c0011578:	31 db                	xor    ebx,ebx
c001157a:	8d 7e ff             	lea    edi,[esi-0x1]
c001157d:	eb 14                	jmp    c0011593 <Virt::allocateKernelVirtualPages(int)+0xb4>
c001157f:	6a 01                	push   0x1
c0011581:	43                   	inc    ebx
c0011582:	50                   	push   eax
c0011583:	e8 fe fe ff ff       	call   c0011486 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011588:	58                   	pop    eax
c0011589:	39 f3                	cmp    ebx,esi
c001158b:	5a                   	pop    edx
c001158c:	74 25                	je     c00115b3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001158e:	a1 a4 d3 02 c0       	mov    eax,ds:0xc002d3a4
c0011593:	8d 50 01             	lea    edx,[eax+0x1]
c0011596:	85 db                	test   ebx,ebx
c0011598:	89 15 a4 d3 02 c0    	mov    DWORD PTR ds:0xc002d3a4,edx
c001159e:	74 20                	je     c00115c0 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00115a0:	39 df                	cmp    edi,ebx
c00115a2:	75 db                	jne    c001157f <Virt::allocateKernelVirtualPages(int)+0xa0>
c00115a4:	6a 03                	push   0x3
c00115a6:	43                   	inc    ebx
c00115a7:	50                   	push   eax
c00115a8:	e8 d9 fe ff ff       	call   c0011486 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00115ad:	59                   	pop    ecx
c00115ae:	39 f3                	cmp    ebx,esi
c00115b0:	58                   	pop    eax
c00115b1:	75 db                	jne    c001158e <Virt::allocateKernelVirtualPages(int)+0xaf>
c00115b3:	83 c4 1c             	add    esp,0x1c
c00115b6:	89 e8                	mov    eax,ebp
c00115b8:	5b                   	pop    ebx
c00115b9:	c1 e0 0c             	shl    eax,0xc
c00115bc:	5e                   	pop    esi
c00115bd:	5f                   	pop    edi
c00115be:	5d                   	pop    ebp
c00115bf:	c3                   	ret    
c00115c0:	6a 02                	push   0x2
c00115c2:	bb 01 00 00 00       	mov    ebx,0x1
c00115c7:	50                   	push   eax
c00115c8:	e8 b9 fe ff ff       	call   c0011486 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00115cd:	58                   	pop    eax
c00115ce:	5a                   	pop    edx
c00115cf:	eb bd                	jmp    c001158e <Virt::allocateKernelVirtualPages(int)+0xaf>
c00115d1:	6a 04                	push   0x4
c00115d3:	8d 45 01             	lea    eax,[ebp+0x1]
c00115d6:	55                   	push   ebp
c00115d7:	a3 a4 d3 02 c0       	mov    ds:0xc002d3a4,eax
c00115dc:	e8 a5 fe ff ff       	call   c0011486 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00115e1:	59                   	pop    ecx
c00115e2:	89 e8                	mov    eax,ebp
c00115e4:	5b                   	pop    ebx
c00115e5:	c1 e0 0c             	shl    eax,0xc
c00115e8:	83 c4 1c             	add    esp,0x1c
c00115eb:	5b                   	pop    ebx
c00115ec:	5e                   	pop    esi
c00115ed:	5f                   	pop    edi
c00115ee:	5d                   	pop    ebp
c00115ef:	c3                   	ret    

c00115f0 <Virt::freeSwapfilePage(unsigned long)>:
c00115f0:	53                   	push   ebx
c00115f1:	8b 15 6c e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e56c
c00115f7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115fb:	b8 01 00 00 00       	mov    eax,0x1
c0011600:	89 cb                	mov    ebx,ecx
c0011602:	d3 e0                	shl    eax,cl
c0011604:	c1 eb 05             	shr    ebx,0x5
c0011607:	f7 d0                	not    eax
c0011609:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c001160c:	5b                   	pop    ebx
c001160d:	c3                   	ret    

c001160e <Virt::swapIDToSector(unsigned long)>:
c001160e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011612:	0f af 05 ac d3 02 c0 	imul   eax,DWORD PTR ds:0xc002d3ac
c0011619:	03 05 b4 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d3b4
c001161f:	c3                   	ret    

c0011620 <Virt::allocateSwapfilePage()>:
c0011620:	55                   	push   ebp
c0011621:	31 d2                	xor    edx,edx
c0011623:	57                   	push   edi
c0011624:	56                   	push   esi
c0011625:	53                   	push   ebx
c0011626:	83 ec 0c             	sub    esp,0xc
c0011629:	8b 0d ac d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d3ac
c001162f:	a1 b0 d3 02 c0       	mov    eax,ds:0xc002d3b0
c0011634:	f7 f1                	div    ecx
c0011636:	39 0d b0 d3 02 c0    	cmp    DWORD PTR ds:0xc002d3b0,ecx
c001163c:	72 2d                	jb     c001166b <Virt::allocateSwapfilePage()+0x4b>
c001163e:	8b 35 6c e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e56c
c0011644:	8b 16                	mov    edx,DWORD PTR [esi]
c0011646:	f6 c2 01             	test   dl,0x1
c0011649:	74 3c                	je     c0011687 <Virt::allocateSwapfilePage()+0x67>
c001164b:	31 c9                	xor    ecx,ecx
c001164d:	bf 01 00 00 00       	mov    edi,0x1
c0011652:	eb 12                	jmp    c0011666 <Virt::allocateSwapfilePage()+0x46>
c0011654:	89 fd                	mov    ebp,edi
c0011656:	89 ca                	mov    edx,ecx
c0011658:	d3 e5                	shl    ebp,cl
c001165a:	c1 ea 05             	shr    edx,0x5
c001165d:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011660:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011662:	85 ea                	test   edx,ebp
c0011664:	74 2a                	je     c0011690 <Virt::allocateSwapfilePage()+0x70>
c0011666:	41                   	inc    ecx
c0011667:	39 c8                	cmp    eax,ecx
c0011669:	77 e9                	ja     c0011654 <Virt::allocateSwapfilePage()+0x34>
c001166b:	83 ec 0c             	sub    esp,0xc
c001166e:	68 18 ab 02 c0       	push   0xc002ab18
c0011673:	e8 a7 8b 00 00       	call   c001a21f <Krnl::panic(char const*)>
c0011678:	83 c4 10             	add    esp,0x10
c001167b:	31 c9                	xor    ecx,ecx
c001167d:	83 c4 0c             	add    esp,0xc
c0011680:	89 c8                	mov    eax,ecx
c0011682:	5b                   	pop    ebx
c0011683:	5e                   	pop    esi
c0011684:	5f                   	pop    edi
c0011685:	5d                   	pop    ebp
c0011686:	c3                   	ret    
c0011687:	89 f3                	mov    ebx,esi
c0011689:	bd 01 00 00 00       	mov    ebp,0x1
c001168e:	31 c9                	xor    ecx,ecx
c0011690:	09 ea                	or     edx,ebp
c0011692:	89 c8                	mov    eax,ecx
c0011694:	89 13                	mov    DWORD PTR [ebx],edx
c0011696:	83 c4 0c             	add    esp,0xc
c0011699:	5b                   	pop    ebx
c001169a:	5e                   	pop    esi
c001169b:	5f                   	pop    edi
c001169c:	5d                   	pop    ebp
c001169d:	c3                   	ret    

c001169e <Virt::virtualMemorySetup()>:
c001169e:	53                   	push   ebx
c001169f:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00116a4:	6a 0f                	push   0xf
c00116a6:	53                   	push   ebx
c00116a7:	43                   	inc    ebx
c00116a8:	e8 d9 fd ff ff       	call   c0011486 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116ad:	58                   	pop    eax
c00116ae:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00116b4:	5a                   	pop    edx
c00116b5:	75 ed                	jne    c00116a4 <Virt::virtualMemorySetup()+0x6>
c00116b7:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00116bc:	6a 00                	push   0x0
c00116be:	53                   	push   ebx
c00116bf:	43                   	inc    ebx
c00116c0:	e8 c1 fd ff ff       	call   c0011486 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116c5:	59                   	pop    ecx
c00116c6:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00116cc:	58                   	pop    eax
c00116cd:	75 ed                	jne    c00116bc <Virt::virtualMemorySetup()+0x1e>
c00116cf:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00116d4:	6a 0f                	push   0xf
c00116d6:	53                   	push   ebx
c00116d7:	43                   	inc    ebx
c00116d8:	e8 a9 fd ff ff       	call   c0011486 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116dd:	58                   	pop    eax
c00116de:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00116e4:	5a                   	pop    edx
c00116e5:	75 ed                	jne    c00116d4 <Virt::virtualMemorySetup()+0x36>
c00116e7:	5b                   	pop    ebx
c00116e8:	c3                   	ret    

c00116e9 <Virt::setupPageSwapping(int)>:
c00116e9:	53                   	push   ebx
c00116ea:	83 ec 0c             	sub    esp,0xc
c00116ed:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00116f1:	a1 08 ea 02 c0       	mov    eax,ds:0xc002ea08
c00116f6:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00116fc:	8b 10                	mov    edx,DWORD PTR [eax]
c00116fe:	53                   	push   ebx
c00116ff:	c1 e3 0b             	shl    ebx,0xb
c0011702:	68 2f ab 02 c0       	push   0xc002ab2f
c0011707:	50                   	push   eax
c0011708:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c001170b:	89 1d b0 d3 02 c0    	mov    DWORD PTR ds:0xc002d3b0,ebx
c0011711:	c6 05 b8 d3 02 c0 43 	mov    BYTE PTR ds:0xc002d3b8,0x43
c0011718:	c1 eb 08             	shr    ebx,0x8
c001171b:	a3 b4 d3 02 c0       	mov    ds:0xc002d3b4,eax
c0011720:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011723:	c7 05 ac d3 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002d3ac,0x8
c001172d:	e8 27 e1 ff ff       	call   c000f859 <malloc>
c0011732:	83 c4 0c             	add    esp,0xc
c0011735:	89 c1                	mov    ecx,eax
c0011737:	a3 6c e5 02 c0       	mov    ds:0xc002e56c,eax
c001173c:	31 d2                	xor    edx,edx
c001173e:	a1 b0 d3 02 c0       	mov    eax,ds:0xc002d3b0
c0011743:	f7 35 ac d3 02 c0    	div    DWORD PTR ds:0xc002d3ac
c0011749:	c1 e8 05             	shr    eax,0x5
c001174c:	50                   	push   eax
c001174d:	6a 00                	push   0x0
c001174f:	51                   	push   ecx
c0011750:	e8 fb ef fe ff       	call   c0000750 <memset>
c0011755:	83 c4 18             	add    esp,0x18
c0011758:	5b                   	pop    ebx
c0011759:	c3                   	ret    

c001175a <VAS::VAS()>:
c001175a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001175e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011765:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011769:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011770:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011774:	a3 70 e5 02 c0       	mov    ds:0xc002e570,eax
c0011779:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001177d:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011781:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011785:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011788:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001178c:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011793:	90                   	nop
c0011794:	c3                   	ret    
c0011795:	90                   	nop

c0011796 <VAS::VAS(VAS*)>:
c0011796:	83 ec 0c             	sub    esp,0xc
c0011799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001179d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00117a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117a8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00117af:	83 ec 0c             	sub    esp,0xc
c00117b2:	68 58 a9 02 c0       	push   0xc002a958
c00117b7:	e8 63 8a 00 00       	call   c001a21f <Krnl::panic(char const*)>
c00117bc:	83 c4 10             	add    esp,0x10
c00117bf:	90                   	nop
c00117c0:	83 c4 0c             	add    esp,0xc
c00117c3:	c3                   	ret    

c00117c4 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00117c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117c8:	89 c2                	mov    edx,eax
c00117ca:	c1 e8 0a             	shr    eax,0xa
c00117cd:	c1 ea 16             	shr    edx,0x16
c00117d0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00117d5:	19 c9                	sbb    ecx,ecx
c00117d7:	c1 e2 0c             	shl    edx,0xc
c00117da:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00117e0:	25 fc 0f 00 00       	and    eax,0xffc
c00117e5:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00117ec:	01 d0                	add    eax,edx
c00117ee:	c3                   	ret    
c00117ef:	90                   	nop

c00117f0 <VAS::getPageTableEntry(unsigned long)>:
c00117f0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00117f4:	89 ca                	mov    edx,ecx
c00117f6:	c1 e9 0a             	shr    ecx,0xa
c00117f9:	c1 ea 16             	shr    edx,0x16
c00117fc:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011802:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011808:	c1 e0 0c             	shl    eax,0xc
c001180b:	8d 04 08             	lea    eax,[eax+ecx*1]
c001180e:	c3                   	ret    

c001180f <Virt::freeKernelVirtualPages(unsigned long)>:
c001180f:	57                   	push   edi
c0011810:	56                   	push   esi
c0011811:	be 01 00 00 00       	mov    esi,0x1
c0011816:	53                   	push   ebx
c0011817:	83 ec 10             	sub    esp,0x10
c001181a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001181e:	c1 eb 0c             	shr    ebx,0xc
c0011821:	eb 3f                	jmp    c0011862 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011823:	83 ec 08             	sub    esp,0x8
c0011826:	57                   	push   edi
c0011827:	ff 35 70 e5 02 c0    	push   DWORD PTR ds:0xc002e570
c001182d:	e8 be ff ff ff       	call   c00117f0 <VAS::getPageTableEntry(unsigned long)>
c0011832:	83 c4 10             	add    esp,0x10
c0011835:	8b 00                	mov    eax,DWORD PTR [eax]
c0011837:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001183b:	f6 c4 04             	test   ah,0x4
c001183e:	75 5f                	jne    c001189f <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011840:	80 fa 04             	cmp    dl,0x4
c0011843:	74 78                	je     c00118bd <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011845:	80 fa 02             	cmp    dl,0x2
c0011848:	0f 84 88 00 00 00    	je     c00118d6 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001184e:	80 fa 03             	cmp    dl,0x3
c0011851:	0f 84 ad 00 00 00    	je     c0011904 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011857:	fe ca                	dec    dl
c0011859:	0f 84 92 00 00 00    	je     c00118f1 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001185f:	43                   	inc    ebx
c0011860:	31 f6                	xor    esi,esi
c0011862:	53                   	push   ebx
c0011863:	89 df                	mov    edi,ebx
c0011865:	e8 51 fc ff ff       	call   c00114bb <Virt::getPageState(unsigned long)>
c001186a:	c1 e7 0c             	shl    edi,0xc
c001186d:	59                   	pop    ecx
c001186e:	84 c0                	test   al,al
c0011870:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011874:	75 ad                	jne    c0011823 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011876:	83 ec 0c             	sub    esp,0xc
c0011879:	68 46 ab 02 c0       	push   0xc002ab46
c001187e:	e8 9c 89 00 00       	call   c001a21f <Krnl::panic(char const*)>
c0011883:	58                   	pop    eax
c0011884:	5a                   	pop    edx
c0011885:	57                   	push   edi
c0011886:	ff 35 70 e5 02 c0    	push   DWORD PTR ds:0xc002e570
c001188c:	e8 5f ff ff ff       	call   c00117f0 <VAS::getPageTableEntry(unsigned long)>
c0011891:	83 c4 10             	add    esp,0x10
c0011894:	8b 00                	mov    eax,DWORD PTR [eax]
c0011896:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001189a:	f6 c4 04             	test   ah,0x4
c001189d:	74 c0                	je     c001185f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001189f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00118a3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118a8:	83 ec 0c             	sub    esp,0xc
c00118ab:	50                   	push   eax
c00118ac:	e8 33 e3 ff ff       	call   c000fbe4 <Phys::freePage(unsigned long)>
c00118b1:	83 c4 10             	add    esp,0x10
c00118b4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00118b8:	80 fa 04             	cmp    dl,0x4
c00118bb:	75 88                	jne    c0011845 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00118bd:	89 f0                	mov    eax,esi
c00118bf:	84 c0                	test   al,al
c00118c1:	75 47                	jne    c001190a <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00118c3:	c7 44 24 20 7c a9 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a97c
c00118cb:	83 c4 10             	add    esp,0x10
c00118ce:	5b                   	pop    ebx
c00118cf:	5e                   	pop    esi
c00118d0:	5f                   	pop    edi
c00118d1:	e9 49 89 00 00       	jmp    c001a21f <Krnl::panic(char const*)>
c00118d6:	89 f0                	mov    eax,esi
c00118d8:	84 c0                	test   al,al
c00118da:	75 15                	jne    c00118f1 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00118dc:	83 ec 0c             	sub    esp,0xc
c00118df:	68 62 ab 02 c0       	push   0xc002ab62
c00118e4:	e8 36 89 00 00       	call   c001a21f <Krnl::panic(char const*)>
c00118e9:	83 c4 10             	add    esp,0x10
c00118ec:	e9 6e ff ff ff       	jmp    c001185f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00118f1:	83 ec 08             	sub    esp,0x8
c00118f4:	6a 00                	push   0x0
c00118f6:	53                   	push   ebx
c00118f7:	e8 8a fb ff ff       	call   c0011486 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00118fc:	83 c4 10             	add    esp,0x10
c00118ff:	e9 5b ff ff ff       	jmp    c001185f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011904:	89 f0                	mov    eax,esi
c0011906:	84 c0                	test   al,al
c0011908:	75 15                	jne    c001191f <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c001190a:	83 ec 08             	sub    esp,0x8
c001190d:	6a 00                	push   0x0
c001190f:	53                   	push   ebx
c0011910:	e8 71 fb ff ff       	call   c0011486 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011915:	83 c4 10             	add    esp,0x10
c0011918:	83 c4 10             	add    esp,0x10
c001191b:	5b                   	pop    ebx
c001191c:	5e                   	pop    esi
c001191d:	5f                   	pop    edi
c001191e:	c3                   	ret    
c001191f:	c7 44 24 20 7e ab 02 c0 	mov    DWORD PTR [esp+0x20],0xc002ab7e
c0011927:	83 c4 10             	add    esp,0x10
c001192a:	5b                   	pop    ebx
c001192b:	5e                   	pop    esi
c001192c:	5f                   	pop    edi
c001192d:	e9 ed 88 00 00       	jmp    c001a21f <Krnl::panic(char const*)>

c0011932 <VAS::freeAllocatedPages(unsigned long)>:
c0011932:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011936:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001193a:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001193e:	74 09                	je     c0011949 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011940:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011944:	e9 c6 fe ff ff       	jmp    c001180f <Virt::freeKernelVirtualPages(unsigned long)>
c0011949:	c7 44 24 04 a0 a9 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a9a0
c0011951:	e9 5b 0f 00 00       	jmp    c00128b1 <Dbg::kprintf(char const*, ...)>

c0011956 <VAS::virtualToPhysical(unsigned long)>:
c0011956:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001195a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001195e:	e8 8d fe ff ff       	call   c00117f0 <VAS::getPageTableEntry(unsigned long)>
c0011963:	5a                   	pop    edx
c0011964:	8b 00                	mov    eax,DWORD PTR [eax]
c0011966:	59                   	pop    ecx
c0011967:	25 00 f0 ff ff       	and    eax,0xfffff000
c001196c:	c3                   	ret    
c001196d:	90                   	nop

c001196e <VAS::reflagRange(unsigned long, int, int, int)>:
c001196e:	55                   	push   ebp
c001196f:	57                   	push   edi
c0011970:	56                   	push   esi
c0011971:	53                   	push   ebx
c0011972:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011976:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001197a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001197e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011982:	85 db                	test   ebx,ebx
c0011984:	7e 22                	jle    c00119a8 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011986:	c1 e3 0c             	shl    ebx,0xc
c0011989:	01 f3                	add    ebx,esi
c001198b:	56                   	push   esi
c001198c:	81 c6 00 10 00 00    	add    esi,0x1000
c0011992:	55                   	push   ebp
c0011993:	e8 58 fe ff ff       	call   c00117f0 <VAS::getPageTableEntry(unsigned long)>
c0011998:	5a                   	pop    edx
c0011999:	59                   	pop    ecx
c001199a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001199c:	21 f9                	and    ecx,edi
c001199e:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00119a2:	39 f3                	cmp    ebx,esi
c00119a4:	89 08                	mov    DWORD PTR [eax],ecx
c00119a6:	75 e3                	jne    c001198b <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00119a8:	5b                   	pop    ebx
c00119a9:	5e                   	pop    esi
c00119aa:	5f                   	pop    edi
c00119ab:	5d                   	pop    ebp
c00119ac:	c3                   	ret    
c00119ad:	90                   	nop

c00119ae <VAS::setToWriteCombining(unsigned long, int)>:
c00119ae:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00119b3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00119b9:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00119c0:	75 01                	jne    c00119c3 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00119c2:	c3                   	ret    
c00119c3:	68 80 00 00 00       	push   0x80
c00119c8:	6a ff                	push   0xffffffff
c00119ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00119ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00119d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00119d6:	e8 93 ff ff ff       	call   c001196e <VAS::reflagRange(unsigned long, int, int, int)>
c00119db:	83 c4 14             	add    esp,0x14
c00119de:	c3                   	ret    
c00119df:	90                   	nop

c00119e0 <VAS::mapOtherVASIn(bool, VAS*)>:
c00119e0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00119e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00119ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119f0:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00119f3:	19 c0                	sbb    eax,eax
c00119f5:	83 ca 03             	or     edx,0x3
c00119f8:	83 e0 fc             	and    eax,0xfffffffc
c00119fb:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011a02:	0f 20 d8             	mov    eax,cr3
c0011a05:	0f 22 d8             	mov    cr3,eax
c0011a08:	c3                   	ret    
c0011a09:	90                   	nop

c0011a0a <VAS::~VAS()>:
c0011a0a:	83 ec 2c             	sub    esp,0x2c
c0011a0d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011a15:	fa                   	cli    
c0011a16:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c0011a1b:	40                   	inc    eax
c0011a1c:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c0011a21:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011a26:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a28:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a2b:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011a31:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011a35:	6a 01                	push   0x1
c0011a37:	50                   	push   eax
c0011a38:	e8 a3 ff ff ff       	call   c00119e0 <VAS::mapOtherVASIn(bool, VAS*)>
c0011a3d:	83 c4 0c             	add    esp,0xc
c0011a40:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011a48:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011a50:	0f 8f d4 00 00 00    	jg     c0011b2a <VAS::~VAS()+0x120>
c0011a56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011a5a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011a5d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011a61:	c1 e2 02             	shl    edx,0x2
c0011a64:	01 d0                	add    eax,edx
c0011a66:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011a6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a70:	83 e0 01             	and    eax,0x1
c0011a73:	0f 84 a8 00 00 00    	je     c0011b21 <VAS::~VAS()+0x117>
c0011a79:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011a81:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011a89:	7f 72                	jg     c0011afd <VAS::~VAS()+0xf3>
c0011a8b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011a8f:	c1 e0 0a             	shl    eax,0xa
c0011a92:	89 c2                	mov    edx,eax
c0011a94:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011a98:	01 d0                	add    eax,edx
c0011a9a:	c1 e0 0c             	shl    eax,0xc
c0011a9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011aa1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011aa6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011aa8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011aab:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011ab1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0011ab5:	6a 01                	push   0x1
c0011ab7:	50                   	push   eax
c0011ab8:	e8 07 fd ff ff       	call   c00117c4 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011abd:	83 c4 0c             	add    esp,0xc
c0011ac0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011ac4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011ac8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011aca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ace:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ad2:	25 01 04 00 00       	and    eax,0x401
c0011ad7:	3d 01 04 00 00       	cmp    eax,0x401
c0011adc:	75 19                	jne    c0011af7 <VAS::~VAS()+0xed>
c0011ade:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ae2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ae7:	83 ec 0c             	sub    esp,0xc
c0011aea:	50                   	push   eax
c0011aeb:	e8 f4 e0 ff ff       	call   c000fbe4 <Phys::freePage(unsigned long)>
c0011af0:	83 c4 10             	add    esp,0x10
c0011af3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011af7:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011afb:	eb 84                	jmp    c0011a81 <VAS::~VAS()+0x77>
c0011afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b01:	25 00 04 00 00       	and    eax,0x400
c0011b06:	74 19                	je     c0011b21 <VAS::~VAS()+0x117>
c0011b08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b0c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011b11:	83 ec 0c             	sub    esp,0xc
c0011b14:	50                   	push   eax
c0011b15:	e8 ca e0 ff ff       	call   c000fbe4 <Phys::freePage(unsigned long)>
c0011b1a:	83 c4 10             	add    esp,0x10
c0011b1d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011b21:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011b25:	e9 1e ff ff ff       	jmp    c0011a48 <VAS::~VAS()+0x3e>
c0011b2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011b2e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011b31:	83 ec 0c             	sub    esp,0xc
c0011b34:	50                   	push   eax
c0011b35:	e8 d5 fc ff ff       	call   c001180f <Virt::freeKernelVirtualPages(unsigned long)>
c0011b3a:	83 c4 10             	add    esp,0x10
c0011b3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011b41:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011b44:	83 ec 0c             	sub    esp,0xc
c0011b47:	50                   	push   eax
c0011b48:	e8 97 e0 ff ff       	call   c000fbe4 <Phys::freePage(unsigned long)>
c0011b4d:	83 c4 10             	add    esp,0x10
c0011b50:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011b54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011b58:	c1 e0 02             	shl    eax,0x2
c0011b5b:	83 ec 08             	sub    esp,0x8
c0011b5e:	50                   	push   eax
c0011b5f:	68 c4 a9 02 c0       	push   0xc002a9c4
c0011b64:	e8 48 0d 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0011b69:	83 c4 10             	add    esp,0x10
c0011b6c:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c0011b71:	48                   	dec    eax
c0011b72:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c0011b77:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c0011b7c:	85 c0                	test   eax,eax
c0011b7e:	75 01                	jne    c0011b81 <VAS::~VAS()+0x177>
c0011b80:	fb                   	sti    
c0011b81:	90                   	nop
c0011b82:	83 c4 2c             	add    esp,0x2c
c0011b85:	c3                   	ret    

c0011b86 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011b86:	55                   	push   ebp
c0011b87:	57                   	push   edi
c0011b88:	56                   	push   esi
c0011b89:	53                   	push   ebx
c0011b8a:	83 ec 1c             	sub    esp,0x1c
c0011b8d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011b91:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011b95:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011b9b:	77 08                	ja     c0011ba5 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011b9d:	0f 20 d8             	mov    eax,cr3
c0011ba0:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0011ba3:	75 47                	jne    c0011bec <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011ba5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ba9:	09 d8                	or     eax,ebx
c0011bab:	a9 ff 0f 00 00       	test   eax,0xfff
c0011bb0:	75 57                	jne    c0011c09 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011bb2:	89 de                	mov    esi,ebx
c0011bb4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011bb7:	c1 ee 16             	shr    esi,0x16
c0011bba:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011bc1:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011bc5:	74 54                	je     c0011c1b <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011bc7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011bcb:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011bd1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011bd5:	c1 e6 0c             	shl    esi,0xc
c0011bd8:	c1 eb 0a             	shr    ebx,0xa
c0011bdb:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011be1:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011be4:	83 c4 1c             	add    esp,0x1c
c0011be7:	5b                   	pop    ebx
c0011be8:	5e                   	pop    esi
c0011be9:	5f                   	pop    edi
c0011bea:	5d                   	pop    ebp
c0011beb:	c3                   	ret    
c0011bec:	83 ec 0c             	sub    esp,0xc
c0011bef:	68 e4 a9 02 c0       	push   0xc002a9e4
c0011bf4:	e8 b8 0c 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0011bf9:	83 c4 10             	add    esp,0x10
c0011bfc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c00:	09 d8                	or     eax,ebx
c0011c02:	a9 ff 0f 00 00       	test   eax,0xfff
c0011c07:	74 a9                	je     c0011bb2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011c09:	83 ec 0c             	sub    esp,0xc
c0011c0c:	68 4c aa 02 c0       	push   0xc002aa4c
c0011c11:	e8 09 86 00 00       	call   c001a21f <Krnl::panic(char const*)>
c0011c16:	83 c4 10             	add    esp,0x10
c0011c19:	eb 97                	jmp    c0011bb2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011c1b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011c1f:	e8 31 e0 ff ff       	call   c000fc55 <Phys::allocatePage()>
c0011c24:	83 ec 0c             	sub    esp,0xc
c0011c27:	89 c5                	mov    ebp,eax
c0011c29:	8b 0d 70 e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e570
c0011c2f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011c33:	6a 01                	push   0x1
c0011c35:	e8 a5 f8 ff ff       	call   c00114df <Virt::allocateKernelVirtualPages(int)>
c0011c3a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011c41:	6a 01                	push   0x1
c0011c43:	50                   	push   eax
c0011c44:	55                   	push   ebp
c0011c45:	81 cd 07 04 00 00    	or     ebp,0x407
c0011c4b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011c4f:	51                   	push   ecx
c0011c50:	e8 27 02 00 00       	call   c0011e7c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011c55:	83 c4 1c             	add    esp,0x1c
c0011c58:	68 00 10 00 00       	push   0x1000
c0011c5d:	6a 00                	push   0x0
c0011c5f:	50                   	push   eax
c0011c60:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011c64:	e8 e7 ea fe ff       	call   c0000750 <memset>
c0011c69:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011c6d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011c70:	e8 9a fb ff ff       	call   c001180f <Virt::freeKernelVirtualPages(unsigned long)>
c0011c75:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011c79:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011c7c:	83 c4 10             	add    esp,0x10
c0011c7f:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011c82:	e9 40 ff ff ff       	jmp    c0011bc7 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011c87:	90                   	nop

c0011c88 <VAS::allocatePages(int, int)>:
c0011c88:	55                   	push   ebp
c0011c89:	57                   	push   edi
c0011c8a:	56                   	push   esi
c0011c8b:	53                   	push   ebx
c0011c8c:	83 ec 1c             	sub    esp,0x1c
c0011c8f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011c93:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0011c98:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c9e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011ca4:	83 e0 01             	and    eax,0x1
c0011ca7:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011cab:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011caf:	0f 85 cc 00 00 00    	jne    c0011d81 <VAS::allocatePages(int, int)+0xf9>
c0011cb5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011cb8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011cbc:	85 c0                	test   eax,eax
c0011cbe:	0f 84 a1 00 00 00    	je     c0011d65 <VAS::allocatePages(int, int)+0xdd>
c0011cc4:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011cc8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ccc:	c1 e6 0c             	shl    esi,0xc
c0011ccf:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011cd3:	85 c0                	test   eax,eax
c0011cd5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011cd8:	7e 33                	jle    c0011d0d <VAS::allocatePages(int, int)+0x85>
c0011cda:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011cde:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ce2:	81 cd 00 04 00 00    	or     ebp,0x400
c0011ce8:	e8 68 df ff ff       	call   c000fc55 <Phys::allocatePage()>
c0011ced:	55                   	push   ebp
c0011cee:	53                   	push   ebx
c0011cef:	50                   	push   eax
c0011cf0:	57                   	push   edi
c0011cf1:	e8 90 fe ff ff       	call   c0011b86 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011cf6:	83 c4 10             	add    esp,0x10
c0011cf9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011cfe:	74 03                	je     c0011d03 <VAS::allocatePages(int, int)+0x7b>
c0011d00:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d03:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d09:	39 de                	cmp    esi,ebx
c0011d0b:	75 db                	jne    c0011ce8 <VAS::allocatePages(int, int)+0x60>
c0011d0d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d12:	75 12                	jne    c0011d26 <VAS::allocatePages(int, int)+0x9e>
c0011d14:	0f 20 d8             	mov    eax,cr3
c0011d17:	0f 22 d8             	mov    cr3,eax
c0011d1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d1e:	83 c4 1c             	add    esp,0x1c
c0011d21:	5b                   	pop    ebx
c0011d22:	5e                   	pop    esi
c0011d23:	5f                   	pop    edi
c0011d24:	5d                   	pop    ebp
c0011d25:	c3                   	ret    
c0011d26:	c1 ee 0a             	shr    esi,0xa
c0011d29:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011d2d:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011d33:	c1 eb 0a             	shr    ebx,0xa
c0011d36:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011d3c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011d42:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011d48:	39 c3                	cmp    ebx,eax
c0011d4a:	77 ce                	ja     c0011d1a <VAS::allocatePages(int, int)+0x92>
c0011d4c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d4f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d55:	39 d8                	cmp    eax,ebx
c0011d57:	73 f3                	jae    c0011d4c <VAS::allocatePages(int, int)+0xc4>
c0011d59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d5d:	83 c4 1c             	add    esp,0x1c
c0011d60:	5b                   	pop    ebx
c0011d61:	5e                   	pop    esi
c0011d62:	5f                   	pop    edi
c0011d63:	5d                   	pop    ebp
c0011d64:	c3                   	ret    
c0011d65:	83 ec 0c             	sub    esp,0xc
c0011d68:	68 70 aa 02 c0       	push   0xc002aa70
c0011d6d:	e8 ad 84 00 00       	call   c001a21f <Krnl::panic(char const*)>
c0011d72:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011d75:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011d79:	83 c4 10             	add    esp,0x10
c0011d7c:	e9 43 ff ff ff       	jmp    c0011cc4 <VAS::allocatePages(int, int)+0x3c>
c0011d81:	83 ec 0c             	sub    esp,0xc
c0011d84:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011d88:	e8 52 f7 ff ff       	call   c00114df <Virt::allocateKernelVirtualPages(int)>
c0011d8d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011d91:	83 c4 10             	add    esp,0x10
c0011d94:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011d99:	0f 87 9b 00 00 00    	ja     c0011e3a <VAS::allocatePages(int, int)+0x1b2>
c0011d9f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011da3:	85 d2                	test   edx,edx
c0011da5:	7e 3c                	jle    c0011de3 <VAS::allocatePages(int, int)+0x15b>
c0011da7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011dab:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011daf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011db3:	c1 e5 0c             	shl    ebp,0xc
c0011db6:	81 ce 00 04 00 00    	or     esi,0x400
c0011dbc:	01 dd                	add    ebp,ebx
c0011dbe:	e8 92 de ff ff       	call   c000fc55 <Phys::allocatePage()>
c0011dc3:	56                   	push   esi
c0011dc4:	53                   	push   ebx
c0011dc5:	50                   	push   eax
c0011dc6:	57                   	push   edi
c0011dc7:	e8 ba fd ff ff       	call   c0011b86 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011dcc:	83 c4 10             	add    esp,0x10
c0011dcf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011dd4:	74 03                	je     c0011dd9 <VAS::allocatePages(int, int)+0x151>
c0011dd6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011dd9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ddf:	39 dd                	cmp    ebp,ebx
c0011de1:	75 db                	jne    c0011dbe <VAS::allocatePages(int, int)+0x136>
c0011de3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011de8:	0f 84 26 ff ff ff    	je     c0011d14 <VAS::allocatePages(int, int)+0x8c>
c0011dee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011df2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011df6:	89 d3                	mov    ebx,edx
c0011df8:	c1 e0 0c             	shl    eax,0xc
c0011dfb:	c1 eb 0a             	shr    ebx,0xa
c0011dfe:	01 d0                	add    eax,edx
c0011e00:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011e06:	c1 e8 0a             	shr    eax,0xa
c0011e09:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011e0f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e14:	2d 00 00 40 00       	sub    eax,0x400000
c0011e19:	39 c3                	cmp    ebx,eax
c0011e1b:	0f 87 f9 fe ff ff    	ja     c0011d1a <VAS::allocatePages(int, int)+0x92>
c0011e21:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011e24:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011e2a:	39 d8                	cmp    eax,ebx
c0011e2c:	73 f3                	jae    c0011e21 <VAS::allocatePages(int, int)+0x199>
c0011e2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e32:	83 c4 1c             	add    esp,0x1c
c0011e35:	5b                   	pop    ebx
c0011e36:	5e                   	pop    esi
c0011e37:	5f                   	pop    edi
c0011e38:	5d                   	pop    ebp
c0011e39:	c3                   	ret    
c0011e3a:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0011e3f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e45:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011e4c:	0f 84 4d ff ff ff    	je     c0011d9f <VAS::allocatePages(int, int)+0x117>
c0011e52:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011e5a:	e9 40 ff ff ff       	jmp    c0011d9f <VAS::allocatePages(int, int)+0x117>
c0011e5f:	90                   	nop

c0011e60 <VAS::setCPUSpecific(unsigned long)>:
c0011e60:	83 ec 0c             	sub    esp,0xc
c0011e63:	6a 05                	push   0x5
c0011e65:	68 00 00 40 c2       	push   0xc2400000
c0011e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e72:	e8 0f fd ff ff       	call   c0011b86 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011e77:	83 c4 1c             	add    esp,0x1c
c0011e7a:	c3                   	ret    
c0011e7b:	90                   	nop

c0011e7c <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011e7c:	55                   	push   ebp
c0011e7d:	57                   	push   edi
c0011e7e:	56                   	push   esi
c0011e7f:	53                   	push   ebx
c0011e80:	83 ec 1c             	sub    esp,0x1c
c0011e83:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0011e88:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011e8c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e92:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011e96:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011e9c:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011ea0:	83 e0 01             	and    eax,0x1
c0011ea3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011ea7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011eab:	85 c0                	test   eax,eax
c0011ead:	7e 39                	jle    c0011ee8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011eaf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011eb3:	89 f3                	mov    ebx,esi
c0011eb5:	c1 e0 0c             	shl    eax,0xc
c0011eb8:	01 f0                	add    eax,esi
c0011eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ebe:	55                   	push   ebp
c0011ebf:	53                   	push   ebx
c0011ec0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011ec4:	29 f0                	sub    eax,esi
c0011ec6:	01 d8                	add    eax,ebx
c0011ec8:	50                   	push   eax
c0011ec9:	57                   	push   edi
c0011eca:	e8 b7 fc ff ff       	call   c0011b86 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ecf:	83 c4 10             	add    esp,0x10
c0011ed2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ed7:	74 03                	je     c0011edc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011ed9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011edc:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ee2:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011ee6:	75 d6                	jne    c0011ebe <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011ee8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011eed:	75 10                	jne    c0011eff <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011eef:	0f 20 d8             	mov    eax,cr3
c0011ef2:	0f 22 d8             	mov    cr3,eax
c0011ef5:	83 c4 1c             	add    esp,0x1c
c0011ef8:	89 f0                	mov    eax,esi
c0011efa:	5b                   	pop    ebx
c0011efb:	5e                   	pop    esi
c0011efc:	5f                   	pop    edi
c0011efd:	5d                   	pop    ebp
c0011efe:	c3                   	ret    
c0011eff:	89 f3                	mov    ebx,esi
c0011f01:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011f05:	c1 eb 0a             	shr    ebx,0xa
c0011f08:	c1 e0 0c             	shl    eax,0xc
c0011f0b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011f11:	01 f0                	add    eax,esi
c0011f13:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011f19:	c1 e8 0a             	shr    eax,0xa
c0011f1c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f21:	2d 00 00 40 00       	sub    eax,0x400000
c0011f26:	39 c3                	cmp    ebx,eax
c0011f28:	77 cb                	ja     c0011ef5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011f2a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011f2d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011f33:	39 d8                	cmp    eax,ebx
c0011f35:	73 f3                	jae    c0011f2a <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011f37:	83 c4 1c             	add    esp,0x1c
c0011f3a:	89 f0                	mov    eax,esi
c0011f3c:	5b                   	pop    ebx
c0011f3d:	5e                   	pop    esi
c0011f3e:	5f                   	pop    edi
c0011f3f:	5d                   	pop    ebp
c0011f40:	c3                   	ret    
c0011f41:	90                   	nop

c0011f42 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011f42:	55                   	push   ebp
c0011f43:	57                   	push   edi
c0011f44:	56                   	push   esi
c0011f45:	53                   	push   ebx
c0011f46:	83 ec 1c             	sub    esp,0x1c
c0011f49:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011f4d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011f51:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011f55:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011f59:	a9 ff 0f 00 00       	test   eax,0xfff
c0011f5e:	75 4a                	jne    c0011faa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011f60:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011f64:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011f67:	c1 eb 16             	shr    ebx,0x16
c0011f6a:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011f71:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011f75:	74 4d                	je     c0011fc4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011f77:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011f7b:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011f7f:	c1 e8 0a             	shr    eax,0xa
c0011f82:	80 fa 01             	cmp    dl,0x1
c0011f85:	19 d2                	sbb    edx,edx
c0011f87:	c1 e3 0c             	shl    ebx,0xc
c0011f8a:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011f8e:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011f94:	25 fc 0f 00 00       	and    eax,0xffc
c0011f99:	01 d8                	add    eax,ebx
c0011f9b:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011fa2:	83 c4 1c             	add    esp,0x1c
c0011fa5:	5b                   	pop    ebx
c0011fa6:	5e                   	pop    esi
c0011fa7:	5f                   	pop    edi
c0011fa8:	5d                   	pop    ebp
c0011fa9:	c3                   	ret    
c0011faa:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011fae:	83 ec 0c             	sub    esp,0xc
c0011fb1:	68 9c aa 02 c0       	push   0xc002aa9c
c0011fb6:	e8 64 82 00 00       	call   c001a21f <Krnl::panic(char const*)>
c0011fbb:	83 c4 10             	add    esp,0x10
c0011fbe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011fc2:	eb 9c                	jmp    c0011f60 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011fc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011fc8:	e8 88 dc ff ff       	call   c000fc55 <Phys::allocatePage()>
c0011fcd:	83 ec 0c             	sub    esp,0xc
c0011fd0:	89 c5                	mov    ebp,eax
c0011fd2:	8b 0d 70 e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e570
c0011fd8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011fdc:	6a 01                	push   0x1
c0011fde:	e8 fc f4 ff ff       	call   c00114df <Virt::allocateKernelVirtualPages(int)>
c0011fe3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011fea:	6a 01                	push   0x1
c0011fec:	50                   	push   eax
c0011fed:	55                   	push   ebp
c0011fee:	81 cd 07 04 00 00    	or     ebp,0x407
c0011ff4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011ff8:	51                   	push   ecx
c0011ff9:	e8 7e fe ff ff       	call   c0011e7c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011ffe:	83 c4 1c             	add    esp,0x1c
c0012001:	68 00 10 00 00       	push   0x1000
c0012006:	6a 00                	push   0x0
c0012008:	50                   	push   eax
c0012009:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001200d:	e8 3e e7 fe ff       	call   c0000750 <memset>
c0012012:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012016:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012019:	e8 f1 f7 ff ff       	call   c001180f <Virt::freeKernelVirtualPages(unsigned long)>
c001201e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012021:	83 c4 10             	add    esp,0x10
c0012024:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012027:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001202b:	e9 47 ff ff ff       	jmp    c0011f77 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0012030 <VAS::VAS(bool)>:
c0012030:	53                   	push   ebx
c0012031:	83 ec 28             	sub    esp,0x28
c0012034:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012038:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001203c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012040:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012047:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001204b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012052:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012056:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001205a:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001205d:	e8 f3 db ff ff       	call   c000fc55 <Phys::allocatePage()>
c0012062:	89 c2                	mov    edx,eax
c0012064:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012068:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001206b:	8b 1d 70 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e570
c0012071:	83 ec 0c             	sub    esp,0xc
c0012074:	6a 01                	push   0x1
c0012076:	e8 64 f4 ff ff       	call   c00114df <Virt::allocateKernelVirtualPages(int)>
c001207b:	83 c4 10             	add    esp,0x10
c001207e:	89 c2                	mov    edx,eax
c0012080:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012084:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012087:	83 ec 0c             	sub    esp,0xc
c001208a:	6a 03                	push   0x3
c001208c:	6a 01                	push   0x1
c001208e:	52                   	push   edx
c001208f:	50                   	push   eax
c0012090:	53                   	push   ebx
c0012091:	e8 e6 fd ff ff       	call   c0011e7c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012096:	83 c4 20             	add    esp,0x20
c0012099:	89 c2                	mov    edx,eax
c001209b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001209f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00120a2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00120aa:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00120b2:	7f 1c                	jg     c00120d0 <VAS::VAS(bool)+0xa0>
c00120b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120b8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00120bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00120bf:	c1 e2 02             	shl    edx,0x2
c00120c2:	01 d0                	add    eax,edx
c00120c4:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00120ca:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00120ce:	eb da                	jmp    c00120aa <VAS::VAS(bool)+0x7a>
c00120d0:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00120d8:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00120e0:	7f 7a                	jg     c001215c <VAS::VAS(bool)+0x12c>
c00120e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00120e6:	2d 00 02 00 00       	sub    eax,0x200
c00120eb:	c1 e0 0c             	shl    eax,0xc
c00120ee:	83 c8 03             	or     eax,0x3
c00120f1:	89 c2                	mov    edx,eax
c00120f3:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00120f8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120fe:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012104:	83 e0 10             	and    eax,0x10
c0012107:	84 c0                	test   al,al
c0012109:	74 07                	je     c0012112 <VAS::VAS(bool)+0xe2>
c001210b:	b8 00 01 00 00       	mov    eax,0x100
c0012110:	eb 05                	jmp    c0012117 <VAS::VAS(bool)+0xe7>
c0012112:	b8 00 00 00 00       	mov    eax,0x0
c0012117:	09 d0                	or     eax,edx
c0012119:	89 c1                	mov    ecx,eax
c001211b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001211f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012122:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012126:	c1 e2 02             	shl    edx,0x2
c0012129:	01 d0                	add    eax,edx
c001212b:	89 ca                	mov    edx,ecx
c001212d:	89 10                	mov    DWORD PTR [eax],edx
c001212f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012133:	2d 40 03 00 00       	sub    eax,0x340
c0012138:	83 f8 7f             	cmp    eax,0x7f
c001213b:	77 16                	ja     c0012153 <VAS::VAS(bool)+0x123>
c001213d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012141:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012144:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012148:	c1 e2 02             	shl    edx,0x2
c001214b:	01 d0                	add    eax,edx
c001214d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012153:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012157:	e9 7c ff ff ff       	jmp    c00120d8 <VAS::VAS(bool)+0xa8>
c001215c:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0012161:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012167:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001216d:	83 e0 10             	and    eax,0x10
c0012170:	84 c0                	test   al,al
c0012172:	74 07                	je     c001217b <VAS::VAS(bool)+0x14b>
c0012174:	b8 03 41 00 00       	mov    eax,0x4103
c0012179:	eb 05                	jmp    c0012180 <VAS::VAS(bool)+0x150>
c001217b:	b8 03 40 00 00       	mov    eax,0x4003
c0012180:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012184:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012187:	81 c2 20 0c 00 00    	add    edx,0xc20
c001218d:	89 02                	mov    DWORD PTR [edx],eax
c001218f:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0012194:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001219a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00121a0:	83 ec 08             	sub    esp,0x8
c00121a3:	50                   	push   eax
c00121a4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00121a8:	e8 b3 fc ff ff       	call   c0011e60 <VAS::setCPUSpecific(unsigned long)>
c00121ad:	83 c4 10             	add    esp,0x10
c00121b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121b4:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00121b7:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00121bc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121c2:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00121c8:	83 e0 10             	and    eax,0x10
c00121cb:	84 c0                	test   al,al
c00121cd:	74 07                	je     c00121d6 <VAS::VAS(bool)+0x1a6>
c00121cf:	b8 00 01 00 00       	mov    eax,0x100
c00121d4:	eb 05                	jmp    c00121db <VAS::VAS(bool)+0x1ab>
c00121d6:	b8 00 00 00 00       	mov    eax,0x0
c00121db:	09 c2                	or     edx,eax
c00121dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121e1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00121e4:	05 fc 0f 00 00       	add    eax,0xffc
c00121e9:	83 ca 03             	or     edx,0x3
c00121ec:	89 10                	mov    DWORD PTR [eax],edx
c00121ee:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00121f3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121f9:	83 ec 0c             	sub    esp,0xc
c00121fc:	50                   	push   eax
c00121fd:	e8 e8 1d 00 00       	call   c0013fea <Device::getName()>
c0012202:	83 c4 10             	add    esp,0x10
c0012205:	83 ec 08             	sub    esp,0x8
c0012208:	68 98 ab 02 c0       	push   0xc002ab98
c001220d:	50                   	push   eax
c001220e:	e8 85 e6 fe ff       	call   c0000898 <strcmp>
c0012213:	83 c4 10             	add    esp,0x10
c0012216:	85 c0                	test   eax,eax
c0012218:	0f 94 c0             	sete   al
c001221b:	84 c0                	test   al,al
c001221d:	0f 84 87 00 00 00    	je     c00122aa <VAS::VAS(bool)+0x27a>
c0012223:	fa                   	cli    
c0012224:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c0012229:	40                   	inc    eax
c001222a:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c001222f:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0012234:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001223a:	05 7c 09 00 00       	add    eax,0x97c
c001223f:	83 ec 0c             	sub    esp,0xc
c0012242:	50                   	push   eax
c0012243:	e8 96 d0 ff ff       	call   c000f2de <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012248:	83 c4 10             	add    esp,0x10
c001224b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012250:	89 c3                	mov    ebx,eax
c0012252:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0012257:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001225d:	05 7c 09 00 00       	add    eax,0x97c
c0012262:	83 ec 0c             	sub    esp,0xc
c0012265:	50                   	push   eax
c0012266:	e8 73 d0 ff ff       	call   c000f2de <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001226b:	83 c4 10             	add    esp,0x10
c001226e:	83 ec 08             	sub    esp,0x8
c0012271:	50                   	push   eax
c0012272:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012276:	e8 75 f5 ff ff       	call   c00117f0 <VAS::getPageTableEntry(unsigned long)>
c001227b:	83 c4 10             	add    esp,0x10
c001227e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012280:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012285:	6a 11                	push   0x11
c0012287:	53                   	push   ebx
c0012288:	50                   	push   eax
c0012289:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001228d:	e8 f4 f8 ff ff       	call   c0011b86 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012292:	83 c4 10             	add    esp,0x10
c0012295:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c001229a:	48                   	dec    eax
c001229b:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c00122a0:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c00122a5:	85 c0                	test   eax,eax
c00122a7:	75 01                	jne    c00122aa <VAS::VAS(bool)+0x27a>
c00122a9:	fb                   	sti    
c00122aa:	90                   	nop
c00122ab:	83 c4 28             	add    esp,0x28
c00122ae:	5b                   	pop    ebx
c00122af:	c3                   	ret    

c00122b0 <VAS::evict(unsigned long)>:
c00122b0:	55                   	push   ebp
c00122b1:	57                   	push   edi
c00122b2:	56                   	push   esi
c00122b3:	53                   	push   ebx
c00122b4:	83 ec 28             	sub    esp,0x28
c00122b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122bb:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00122bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122c3:	68 a6 ab 02 c0       	push   0xc002aba6
c00122c8:	e8 e4 05 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c00122cd:	e8 4e f3 ff ff       	call   c0011620 <Virt::allocateSwapfilePage()>
c00122d2:	5a                   	pop    edx
c00122d3:	89 c7                	mov    edi,eax
c00122d5:	59                   	pop    ecx
c00122d6:	50                   	push   eax
c00122d7:	68 c3 ab 02 c0       	push   0xc002abc3
c00122dc:	e8 d0 05 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c00122e1:	83 c4 10             	add    esp,0x10
c00122e4:	8b 1d ac d3 02 c0    	mov    ebx,DWORD PTR ds:0xc002d3ac
c00122ea:	85 db                	test   ebx,ebx
c00122ec:	7e 3d                	jle    c001232b <VAS::evict(unsigned long)+0x7b>
c00122ee:	89 ee                	mov    esi,ebp
c00122f0:	31 db                	xor    ebx,ebx
c00122f2:	83 ec 0c             	sub    esp,0xc
c00122f5:	57                   	push   edi
c00122f6:	e8 13 f3 ff ff       	call   c001160e <Virt::swapIDToSector(unsigned long)>
c00122fb:	89 34 24             	mov    DWORD PTR [esp],esi
c00122fe:	01 d8                	add    eax,ebx
c0012300:	6a 01                	push   0x1
c0012302:	31 d2                	xor    edx,edx
c0012304:	43                   	inc    ebx
c0012305:	52                   	push   edx
c0012306:	81 c6 00 02 00 00    	add    esi,0x200
c001230c:	50                   	push   eax
c001230d:	0f be 05 b8 d3 02 c0 	movsx  eax,BYTE PTR ds:0xc002d3b8
c0012314:	ff 34 85 fc e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd1704]
c001231b:	e8 58 3f 00 00       	call   c0016278 <LogicalDisk::write(unsigned long long, int, void*)>
c0012320:	83 c4 20             	add    esp,0x20
c0012323:	39 1d ac d3 02 c0    	cmp    DWORD PTR ds:0xc002d3ac,ebx
c0012329:	7f c7                	jg     c00122f2 <VAS::evict(unsigned long)+0x42>
c001232b:	83 ec 08             	sub    esp,0x8
c001232e:	c1 e7 0b             	shl    edi,0xb
c0012331:	55                   	push   ebp
c0012332:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012336:	e8 b5 f4 ff ff       	call   c00117f0 <VAS::getPageTableEntry(unsigned long)>
c001233b:	5a                   	pop    edx
c001233c:	89 c6                	mov    esi,eax
c001233e:	59                   	pop    ecx
c001233f:	ff 30                	push   DWORD PTR [eax]
c0012341:	68 d3 ab 02 c0       	push   0xc002abd3
c0012346:	e8 66 05 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c001234b:	8b 16                	mov    edx,DWORD PTR [esi]
c001234d:	89 d3                	mov    ebx,edx
c001234f:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012355:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001235b:	09 d7                	or     edi,edx
c001235d:	89 3e                	mov    DWORD PTR [esi],edi
c001235f:	5e                   	pop    esi
c0012360:	58                   	pop    eax
c0012361:	57                   	push   edi
c0012362:	68 ec ab 02 c0       	push   0xc002abec
c0012367:	e8 45 05 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c001236c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001236f:	ff 05 68 e5 02 c0    	inc    DWORD PTR ds:0xc002e568
c0012375:	e8 6a d8 ff ff       	call   c000fbe4 <Phys::freePage(unsigned long)>
c001237a:	0f 20 d8             	mov    eax,cr3
c001237d:	0f 22 d8             	mov    cr3,eax
c0012380:	ff 35 68 e5 02 c0    	push   DWORD PTR ds:0xc002e568
c0012386:	55                   	push   ebp
c0012387:	53                   	push   ebx
c0012388:	68 c0 aa 02 c0       	push   0xc002aac0
c001238d:	e8 1f 05 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0012392:	a1 64 e5 02 c0       	mov    eax,ds:0xc002e564
c0012397:	c7 44 24 50 05 ac 02 c0 	mov    DWORD PTR [esp+0x50],0xc002ac05
c001239f:	8d 50 01             	lea    edx,[eax+0x1]
c00123a2:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00123a6:	89 15 64 e5 02 c0    	mov    DWORD PTR ds:0xc002e564,edx
c00123ac:	83 c4 3c             	add    esp,0x3c
c00123af:	5b                   	pop    ebx
c00123b0:	5e                   	pop    esi
c00123b1:	5f                   	pop    edi
c00123b2:	5d                   	pop    ebp
c00123b3:	e9 f9 04 00 00       	jmp    c00128b1 <Dbg::kprintf(char const*, ...)>

c00123b8 <VAS::tryLoadBackOffDisk(unsigned long)>:
c00123b8:	55                   	push   ebp
c00123b9:	57                   	push   edi
c00123ba:	56                   	push   esi
c00123bb:	53                   	push   ebx
c00123bc:	83 ec 24             	sub    esp,0x24
c00123bf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00123c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00123c7:	68 16 ac 02 c0       	push   0xc002ac16
c00123cc:	e8 e0 04 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c00123d1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00123d5:	58                   	pop    eax
c00123d6:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c00123dc:	5a                   	pop    edx
c00123dd:	57                   	push   edi
c00123de:	53                   	push   ebx
c00123df:	e8 0c f4 ff ff       	call   c00117f0 <VAS::getPageTableEntry(unsigned long)>
c00123e4:	59                   	pop    ecx
c00123e5:	5e                   	pop    esi
c00123e6:	89 c6                	mov    esi,eax
c00123e8:	ff 30                	push   DWORD PTR [eax]
c00123ea:	68 29 ac 02 c0       	push   0xc002ac29
c00123ef:	e8 bd 04 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c00123f4:	83 c4 10             	add    esp,0x10
c00123f7:	85 ff                	test   edi,edi
c00123f9:	74 0a                	je     c0012405 <VAS::tryLoadBackOffDisk(unsigned long)+0x4d>
c00123fb:	8b 2e                	mov    ebp,DWORD PTR [esi]
c00123fd:	f7 c5 01 00 00 00    	test   ebp,0x1
c0012403:	74 0a                	je     c001240f <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c0012405:	83 c4 1c             	add    esp,0x1c
c0012408:	31 c0                	xor    eax,eax
c001240a:	5b                   	pop    ebx
c001240b:	5e                   	pop    esi
c001240c:	5f                   	pop    edi
c001240d:	5d                   	pop    ebp
c001240e:	c3                   	ret    
c001240f:	83 ec 08             	sub    esp,0x8
c0012412:	c1 ed 0b             	shr    ebp,0xb
c0012415:	55                   	push   ebp
c0012416:	68 37 ac 02 c0       	push   0xc002ac37
c001241b:	e8 91 04 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0012420:	e8 30 d8 ff ff       	call   c000fc55 <Phys::allocatePage()>
c0012425:	59                   	pop    ecx
c0012426:	5a                   	pop    edx
c0012427:	50                   	push   eax
c0012428:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001242c:	68 42 ac 02 c0       	push   0xc002ac42
c0012431:	e8 7b 04 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0012436:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001243a:	8b 16                	mov    edx,DWORD PTR [esi]
c001243c:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012442:	09 d0                	or     eax,edx
c0012444:	0d 01 08 00 00       	or     eax,0x801
c0012449:	89 06                	mov    DWORD PTR [esi],eax
c001244b:	59                   	pop    ecx
c001244c:	5e                   	pop    esi
c001244d:	50                   	push   eax
c001244e:	68 57 ac 02 c0       	push   0xc002ac57
c0012453:	e8 59 04 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0012458:	0f 20 d8             	mov    eax,cr3
c001245b:	83 c4 0c             	add    esp,0xc
c001245e:	53                   	push   ebx
c001245f:	50                   	push   eax
c0012460:	68 6f ac 02 c0       	push   0xc002ac6f
c0012465:	e8 47 04 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c001246a:	c7 04 24 87 ac 02 c0 	mov    DWORD PTR [esp],0xc002ac87
c0012471:	e8 3b 04 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0012476:	83 c4 10             	add    esp,0x10
c0012479:	a1 ac d3 02 c0       	mov    eax,ds:0xc002d3ac
c001247e:	85 c0                	test   eax,eax
c0012480:	7e 3d                	jle    c00124bf <VAS::tryLoadBackOffDisk(unsigned long)+0x107>
c0012482:	89 fe                	mov    esi,edi
c0012484:	31 db                	xor    ebx,ebx
c0012486:	83 ec 0c             	sub    esp,0xc
c0012489:	55                   	push   ebp
c001248a:	e8 7f f1 ff ff       	call   c001160e <Virt::swapIDToSector(unsigned long)>
c001248f:	89 34 24             	mov    DWORD PTR [esp],esi
c0012492:	01 d8                	add    eax,ebx
c0012494:	6a 01                	push   0x1
c0012496:	31 d2                	xor    edx,edx
c0012498:	43                   	inc    ebx
c0012499:	52                   	push   edx
c001249a:	81 c6 00 02 00 00    	add    esi,0x200
c00124a0:	50                   	push   eax
c00124a1:	0f be 05 b8 d3 02 c0 	movsx  eax,BYTE PTR ds:0xc002d3b8
c00124a8:	ff 34 85 fc e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd1704]
c00124af:	e8 58 3d 00 00       	call   c001620c <LogicalDisk::read(unsigned long long, int, void*)>
c00124b4:	83 c4 20             	add    esp,0x20
c00124b7:	39 1d ac d3 02 c0    	cmp    DWORD PTR ds:0xc002d3ac,ebx
c00124bd:	7f c7                	jg     c0012486 <VAS::tryLoadBackOffDisk(unsigned long)+0xce>
c00124bf:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c00124c4:	48                   	dec    eax
c00124c5:	52                   	push   edx
c00124c6:	a3 68 e5 02 c0       	mov    ds:0xc002e568,eax
c00124cb:	50                   	push   eax
c00124cc:	57                   	push   edi
c00124cd:	68 97 ac 02 c0       	push   0xc002ac97
c00124d2:	e8 da 03 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c00124d7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00124da:	e8 11 f1 ff ff       	call   c00115f0 <Virt::freeSwapfilePage(unsigned long)>
c00124df:	c7 04 24 ac ac 02 c0 	mov    DWORD PTR [esp],0xc002acac
c00124e6:	e8 c6 03 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c00124eb:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c00124f0:	83 c4 10             	add    esp,0x10
c00124f3:	48                   	dec    eax
c00124f4:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c00124f9:	85 c0                	test   eax,eax
c00124fb:	75 01                	jne    c00124fe <VAS::tryLoadBackOffDisk(unsigned long)+0x146>
c00124fd:	fb                   	sti    
c00124fe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012502:	25 ff 0f 00 00       	and    eax,0xfff
c0012507:	3d e0 0f 00 00       	cmp    eax,0xfe0
c001250c:	77 20                	ja     c001252e <VAS::tryLoadBackOffDisk(unsigned long)+0x176>
c001250e:	0f 20 d8             	mov    eax,cr3
c0012511:	0f 22 d8             	mov    cr3,eax
c0012514:	83 ec 0c             	sub    esp,0xc
c0012517:	68 d2 ac 02 c0       	push   0xc002acd2
c001251c:	e8 90 03 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0012521:	83 c4 10             	add    esp,0x10
c0012524:	b0 01                	mov    al,0x1
c0012526:	83 c4 1c             	add    esp,0x1c
c0012529:	5b                   	pop    ebx
c001252a:	5e                   	pop    esi
c001252b:	5f                   	pop    edi
c001252c:	5d                   	pop    ebp
c001252d:	c3                   	ret    
c001252e:	83 ec 0c             	sub    esp,0xc
c0012531:	68 c2 ac 02 c0       	push   0xc002acc2
c0012536:	e8 76 03 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c001253b:	83 c4 10             	add    esp,0x10
c001253e:	eb ce                	jmp    c001250e <VAS::tryLoadBackOffDisk(unsigned long)+0x156>

c0012540 <VAS::scanForEviction()>:
c0012540:	55                   	push   ebp
c0012541:	31 ed                	xor    ebp,ebp
c0012543:	57                   	push   edi
c0012544:	56                   	push   esi
c0012545:	53                   	push   ebx
c0012546:	83 ec 0c             	sub    esp,0xc
c0012549:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001254d:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012550:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012556:	75 0e                	jne    c0012566 <VAS::scanForEviction()+0x26>
c0012558:	89 da                	mov    edx,ebx
c001255a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001255d:	c1 ea 16             	shr    edx,0x16
c0012560:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012564:	74 4e                	je     c00125b4 <VAS::scanForEviction()+0x74>
c0012566:	53                   	push   ebx
c0012567:	56                   	push   esi
c0012568:	e8 83 f2 ff ff       	call   c00117f0 <VAS::getPageTableEntry(unsigned long)>
c001256d:	5f                   	pop    edi
c001256e:	8b 38                	mov    edi,DWORD PTR [eax]
c0012570:	5a                   	pop    edx
c0012571:	89 fa                	mov    edx,edi
c0012573:	81 e2 01 08 00 00    	and    edx,0x801
c0012579:	81 fa 01 08 00 00    	cmp    edx,0x801
c001257f:	74 3e                	je     c00125bf <VAS::scanForEviction()+0x7f>
c0012581:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012587:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c001258d:	76 2b                	jbe    c00125ba <VAS::scanForEviction()+0x7a>
c001258f:	45                   	inc    ebp
c0012590:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012597:	83 fd 04             	cmp    ebp,0x4
c001259a:	74 35                	je     c00125d1 <VAS::scanForEviction()+0x91>
c001259c:	31 db                	xor    ebx,ebx
c001259e:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00125a4:	75 c0                	jne    c0012566 <VAS::scanForEviction()+0x26>
c00125a6:	89 da                	mov    edx,ebx
c00125a8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00125ab:	c1 ea 16             	shr    edx,0x16
c00125ae:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00125b2:	75 b2                	jne    c0012566 <VAS::scanForEviction()+0x26>
c00125b4:	81 c3 00 00 40 00    	add    ebx,0x400000
c00125ba:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c00125bd:	eb 91                	jmp    c0012550 <VAS::scanForEviction()+0x10>
c00125bf:	f7 c7 20 00 00 00    	test   edi,0x20
c00125c5:	74 22                	je     c00125e9 <VAS::scanForEviction()+0xa9>
c00125c7:	83 e7 df             	and    edi,0xffffffdf
c00125ca:	89 38                	mov    DWORD PTR [eax],edi
c00125cc:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00125cf:	eb b0                	jmp    c0012581 <VAS::scanForEviction()+0x41>
c00125d1:	83 ec 0c             	sub    esp,0xc
c00125d4:	68 f0 aa 02 c0       	push   0xc002aaf0
c00125d9:	e8 41 7c 00 00       	call   c001a21f <Krnl::panic(char const*)>
c00125de:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00125e1:	83 c4 10             	add    esp,0x10
c00125e4:	e9 67 ff ff ff       	jmp    c0012550 <VAS::scanForEviction()+0x10>
c00125e9:	83 ec 08             	sub    esp,0x8
c00125ec:	53                   	push   ebx
c00125ed:	68 e0 ac 02 c0       	push   0xc002ace0
c00125f2:	e8 ba 02 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c00125f7:	58                   	pop    eax
c00125f8:	5a                   	pop    edx
c00125f9:	ff 76 08             	push   DWORD PTR [esi+0x8]
c00125fc:	56                   	push   esi
c00125fd:	e8 ae fc ff ff       	call   c00122b0 <VAS::evict(unsigned long)>
c0012602:	59                   	pop    ecx
c0012603:	5b                   	pop    ebx
c0012604:	ff 76 08             	push   DWORD PTR [esi+0x8]
c0012607:	68 f4 ac 02 c0       	push   0xc002acf4
c001260c:	e8 a0 02 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0012611:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012618:	89 f8                	mov    eax,edi
c001261a:	83 c4 1c             	add    esp,0x1c
c001261d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012622:	5b                   	pop    ebx
c0012623:	5e                   	pop    esi
c0012624:	5f                   	pop    edi
c0012625:	5d                   	pop    ebp
c0012626:	c3                   	ret    

c0012627 <mapVASFirstTime>:
c0012627:	55                   	push   ebp
c0012628:	57                   	push   edi
c0012629:	56                   	push   esi
c001262a:	53                   	push   ebx
c001262b:	83 ec 0c             	sub    esp,0xc
c001262e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012633:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012636:	4a                   	dec    edx
c0012637:	0f 84 fe 00 00 00    	je     c001273b <mapVASFirstTime+0x114>
c001263d:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012640:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012643:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012648:	c1 e5 15             	shl    ebp,0x15
c001264b:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0012650:	8b b2 32 05 00 00    	mov    esi,DWORD PTR [edx+0x532]
c0012656:	29 eb                	sub    ebx,ebp
c0012658:	29 ef                	sub    edi,ebp
c001265a:	83 ec 08             	sub    esp,0x8
c001265d:	53                   	push   ebx
c001265e:	68 20 ad 02 c0       	push   0xc002ad20
c0012663:	e8 49 02 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0012668:	e8 e8 d5 ff ff       	call   c000fc55 <Phys::allocatePage()>
c001266d:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c0012674:	6a 01                	push   0x1
c0012676:	53                   	push   ebx
c0012677:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001267d:	50                   	push   eax
c001267e:	56                   	push   esi
c001267f:	e8 f8 f7 ff ff       	call   c0011e7c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012684:	83 c4 20             	add    esp,0x20
c0012687:	39 fb                	cmp    ebx,edi
c0012689:	75 cf                	jne    c001265a <mapVASFirstTime+0x33>
c001268b:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0012690:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0012695:	29 eb                	sub    ebx,ebp
c0012697:	29 ef                	sub    edi,ebp
c0012699:	83 ec 08             	sub    esp,0x8
c001269c:	53                   	push   ebx
c001269d:	68 3c ad 02 c0       	push   0xc002ad3c
c00126a2:	e8 0a 02 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c00126a7:	58                   	pop    eax
c00126a8:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c00126ac:	5a                   	pop    edx
c00126ad:	19 c0                	sbb    eax,eax
c00126af:	83 e0 04             	and    eax,0x4
c00126b2:	05 03 04 00 00       	add    eax,0x403
c00126b7:	50                   	push   eax
c00126b8:	68 61 ac 02 c0       	push   0xc002ac61
c00126bd:	e8 ef 01 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c00126c2:	e8 8e d5 ff ff       	call   c000fc55 <Phys::allocatePage()>
c00126c7:	59                   	pop    ecx
c00126c8:	89 c5                	mov    ebp,eax
c00126ca:	58                   	pop    eax
c00126cb:	55                   	push   ebp
c00126cc:	68 50 ad 02 c0       	push   0xc002ad50
c00126d1:	e8 db 01 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c00126d6:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c00126da:	19 d2                	sbb    edx,edx
c00126dc:	83 e2 04             	and    edx,0x4
c00126df:	81 c2 03 04 00 00    	add    edx,0x403
c00126e5:	89 14 24             	mov    DWORD PTR [esp],edx
c00126e8:	6a 01                	push   0x1
c00126ea:	53                   	push   ebx
c00126eb:	55                   	push   ebp
c00126ec:	56                   	push   esi
c00126ed:	e8 8a f7 ff ff       	call   c0011e7c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00126f2:	83 c4 18             	add    esp,0x18
c00126f5:	53                   	push   ebx
c00126f6:	56                   	push   esi
c00126f7:	e8 f4 f0 ff ff       	call   c00117f0 <VAS::getPageTableEntry(unsigned long)>
c00126fc:	5a                   	pop    edx
c00126fd:	59                   	pop    ecx
c00126fe:	ff 30                	push   DWORD PTR [eax]
c0012700:	68 6c ad 02 c0       	push   0xc002ad6c
c0012705:	e8 a7 01 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c001270a:	0f 20 d8             	mov    eax,cr3
c001270d:	83 c4 0c             	add    esp,0xc
c0012710:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012716:	56                   	push   esi
c0012717:	50                   	push   eax
c0012718:	68 6f ac 02 c0       	push   0xc002ac6f
c001271d:	e8 8f 01 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0012722:	83 c4 10             	add    esp,0x10
c0012725:	39 df                	cmp    edi,ebx
c0012727:	0f 85 6c ff ff ff    	jne    c0012699 <mapVASFirstTime+0x72>
c001272d:	0f 20 d8             	mov    eax,cr3
c0012730:	0f 22 d8             	mov    cr3,eax
c0012733:	83 c4 0c             	add    esp,0xc
c0012736:	5b                   	pop    ebx
c0012737:	5e                   	pop    esi
c0012738:	5f                   	pop    edi
c0012739:	5d                   	pop    ebp
c001273a:	c3                   	ret    
c001273b:	83 ec 0c             	sub    esp,0xc
c001273e:	68 07 ad 02 c0       	push   0xc002ad07
c0012743:	e8 69 01 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0012748:	83 c4 10             	add    esp,0x10
c001274b:	83 c4 0c             	add    esp,0xc
c001274e:	5b                   	pop    ebx
c001274f:	5e                   	pop    esi
c0012750:	5f                   	pop    edi
c0012751:	5d                   	pop    ebp
c0012752:	c3                   	ret    

c0012753 <__cxa_atexit>:
c0012753:	31 c0                	xor    eax,eax
c0012755:	c3                   	ret    

c0012756 <__cxa_finalize>:
c0012756:	c3                   	ret    

c0012757 <__stack_chk_fail>:
c0012757:	55                   	push   ebp
c0012758:	89 e5                	mov    ebp,esp
c001275a:	83 ec 14             	sub    esp,0x14
c001275d:	68 77 ad 02 c0       	push   0xc002ad77
c0012762:	e8 4a 01 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0012767:	58                   	pop    eax
c0012768:	5a                   	pop    edx
c0012769:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001276c:	68 c7 ad 02 c0       	push   0xc002adc7
c0012771:	e8 3b 01 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0012776:	59                   	pop    ecx
c0012777:	58                   	pop    eax
c0012778:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001277b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001277e:	68 c7 ad 02 c0       	push   0xc002adc7
c0012783:	e8 29 01 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0012788:	5a                   	pop    edx
c0012789:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001278c:	59                   	pop    ecx
c001278d:	8b 00                	mov    eax,DWORD PTR [eax]
c001278f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012792:	68 c7 ad 02 c0       	push   0xc002adc7
c0012797:	e8 15 01 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c001279c:	5a                   	pop    edx
c001279d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127a0:	59                   	pop    ecx
c00127a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00127a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00127a5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127a8:	68 c7 ad 02 c0       	push   0xc002adc7
c00127ad:	e8 ff 00 00 00       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c00127b2:	c7 04 24 cf ad 02 c0 	mov    DWORD PTR [esp],0xc002adcf
c00127b9:	e8 61 7a 00 00       	call   c001a21f <Krnl::panic(char const*)>
c00127be:	83 c4 10             	add    esp,0x10
c00127c1:	c9                   	leave  
c00127c2:	c3                   	ret    

c00127c3 <__cxa_pure_virtual>:
c00127c3:	83 ec 18             	sub    esp,0x18
c00127c6:	68 e7 ad 02 c0       	push   0xc002ade7
c00127cb:	e8 4f 7a 00 00       	call   c001a21f <Krnl::panic(char const*)>
c00127d0:	83 c4 1c             	add    esp,0x1c
c00127d3:	c3                   	ret    

c00127d4 <operator new[](unsigned long)>:
c00127d4:	e9 80 d0 ff ff       	jmp    c000f859 <malloc>

c00127d9 <operator delete(void*, unsigned long)>:
c00127d9:	e9 9b d0 ff ff       	jmp    c000f879 <rfree>

c00127de <operator delete[](void*)>:
c00127de:	e9 96 d0 ff ff       	jmp    c000f879 <rfree>

c00127e3 <operator delete[](void*, unsigned long)>:
c00127e3:	e9 91 d0 ff ff       	jmp    c000f879 <rfree>

c00127e8 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00127e8:	55                   	push   ebp
c00127e9:	b9 11 00 00 00       	mov    ecx,0x11
c00127ee:	57                   	push   edi
c00127ef:	56                   	push   esi
c00127f0:	be da a7 02 c0       	mov    esi,0xc002a7da
c00127f5:	53                   	push   ebx
c00127f6:	83 ec 20             	sub    esp,0x20
c00127f9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00127fd:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012801:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0012805:	fc                   	cld    
c0012806:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012808:	89 ee                	mov    esi,ebp
c001280a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001280e:	eb 02                	jmp    c0012812 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c0012810:	89 c6                	mov    esi,eax
c0012812:	31 d2                	xor    edx,edx
c0012814:	41                   	inc    ecx
c0012815:	89 f0                	mov    eax,esi
c0012817:	f7 f3                	div    ebx
c0012819:	39 de                	cmp    esi,ebx
c001281b:	73 f3                	jae    c0012810 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c001281d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012820:	eb 02                	jmp    c0012824 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c0012822:	89 c5                	mov    ebp,eax
c0012824:	31 d2                	xor    edx,edx
c0012826:	49                   	dec    ecx
c0012827:	89 e8                	mov    eax,ebp
c0012829:	f7 f3                	div    ebx
c001282b:	39 dd                	cmp    ebp,ebx
c001282d:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0012831:	88 11                	mov    BYTE PTR [ecx],dl
c0012833:	73 ed                	jae    c0012822 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c0012835:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012839:	83 c4 20             	add    esp,0x20
c001283c:	5b                   	pop    ebx
c001283d:	5e                   	pop    esi
c001283e:	5f                   	pop    edi
c001283f:	5d                   	pop    ebp
c0012840:	c3                   	ret    

c0012841 <Dbg::logc(char)>:
c0012841:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012845:	ba fd 03 00 00       	mov    edx,0x3fd
c001284a:	ec                   	in     al,dx
c001284b:	a8 20                	test   al,0x20
c001284d:	74 fb                	je     c001284a <Dbg::logc(char)+0x9>
c001284f:	ba f8 03 00 00       	mov    edx,0x3f8
c0012854:	88 c8                	mov    al,cl
c0012856:	ee                   	out    dx,al
c0012857:	c3                   	ret    

c0012858 <Dbg::logs(char*)>:
c0012858:	53                   	push   ebx
c0012859:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001285d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012860:	84 c0                	test   al,al
c0012862:	74 0f                	je     c0012873 <Dbg::logs(char*)+0x1b>
c0012864:	50                   	push   eax
c0012865:	43                   	inc    ebx
c0012866:	e8 d6 ff ff ff       	call   c0012841 <Dbg::logc(char)>
c001286b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001286e:	5a                   	pop    edx
c001286f:	84 c0                	test   al,al
c0012871:	75 f1                	jne    c0012864 <Dbg::logs(char*)+0xc>
c0012873:	5b                   	pop    ebx
c0012874:	c3                   	ret    

c0012875 <Dbg::logWriteInt(unsigned int)>:
c0012875:	83 ec 10             	sub    esp,0x10
c0012878:	6a 0a                	push   0xa
c001287a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001287e:	50                   	push   eax
c001287f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012883:	e8 60 ff ff ff       	call   c00127e8 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012888:	50                   	push   eax
c0012889:	e8 ca ff ff ff       	call   c0012858 <Dbg::logs(char*)>
c001288e:	83 c4 20             	add    esp,0x20
c0012891:	c3                   	ret    

c0012892 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012892:	83 ec 10             	sub    esp,0x10
c0012895:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012899:	8d 44 24 08          	lea    eax,[esp+0x8]
c001289d:	50                   	push   eax
c001289e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128a2:	e8 41 ff ff ff       	call   c00127e8 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00128a7:	50                   	push   eax
c00128a8:	e8 ab ff ff ff       	call   c0012858 <Dbg::logs(char*)>
c00128ad:	83 c4 20             	add    esp,0x20
c00128b0:	c3                   	ret    

c00128b1 <Dbg::kprintf(char const*, ...)>:
c00128b1:	55                   	push   ebp
c00128b2:	57                   	push   edi
c00128b3:	56                   	push   esi
c00128b4:	53                   	push   ebx
c00128b5:	83 ec 0c             	sub    esp,0xc
c00128b8:	8d 44 24 24          	lea    eax,[esp+0x24]
c00128bc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00128c0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128c4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00128c7:	84 c0                	test   al,al
c00128c9:	74 4a                	je     c0012915 <Dbg::kprintf(char const*, ...)+0x64>
c00128cb:	31 db                	xor    ebx,ebx
c00128cd:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00128d0:	3c 25                	cmp    al,0x25
c00128d2:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00128d5:	0f 85 e4 00 00 00    	jne    c00129bf <Dbg::kprintf(char const*, ...)+0x10e>
c00128db:	83 c3 02             	add    ebx,0x2
c00128de:	8a 07                	mov    al,BYTE PTR [edi]
c00128e0:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00128e3:	83 e8 25             	sub    eax,0x25
c00128e6:	3c 53                	cmp    al,0x53
c00128e8:	0f 87 ba 00 00 00    	ja     c00129a8 <Dbg::kprintf(char const*, ...)+0xf7>
c00128ee:	0f b6 c0             	movzx  eax,al
c00128f1:	ff 24 85 fc ad 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5204]
c00128f8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00128fc:	89 c8                	mov    eax,ecx
c00128fe:	83 c1 04             	add    ecx,0x4
c0012901:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012905:	ff 30                	push   DWORD PTR [eax]
c0012907:	e8 69 ff ff ff       	call   c0012875 <Dbg::logWriteInt(unsigned int)>
c001290c:	5f                   	pop    edi
c001290d:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012911:	84 c0                	test   al,al
c0012913:	75 b8                	jne    c00128cd <Dbg::kprintf(char const*, ...)+0x1c>
c0012915:	83 c4 0c             	add    esp,0xc
c0012918:	5b                   	pop    ebx
c0012919:	5e                   	pop    esi
c001291a:	5f                   	pop    edi
c001291b:	5d                   	pop    ebp
c001291c:	c3                   	ret    
c001291d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012921:	89 c8                	mov    eax,ecx
c0012923:	83 c1 04             	add    ecx,0x4
c0012926:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001292a:	ff 30                	push   DWORD PTR [eax]
c001292c:	e8 27 ff ff ff       	call   c0012858 <Dbg::logs(char*)>
c0012931:	58                   	pop    eax
c0012932:	eb d9                	jmp    c001290d <Dbg::kprintf(char const*, ...)+0x5c>
c0012934:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012938:	89 d0                	mov    eax,edx
c001293a:	83 c2 04             	add    edx,0x4
c001293d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012941:	ff 30                	push   DWORD PTR [eax]
c0012943:	e8 2d ff ff ff       	call   c0012875 <Dbg::logWriteInt(unsigned int)>
c0012948:	58                   	pop    eax
c0012949:	eb c2                	jmp    c001290d <Dbg::kprintf(char const*, ...)+0x5c>
c001294b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001294f:	89 d0                	mov    eax,edx
c0012951:	83 c2 04             	add    edx,0x4
c0012954:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012957:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001295b:	50                   	push   eax
c001295c:	e8 e0 fe ff ff       	call   c0012841 <Dbg::logc(char)>
c0012961:	58                   	pop    eax
c0012962:	eb a9                	jmp    c001290d <Dbg::kprintf(char const*, ...)+0x5c>
c0012964:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012968:	89 c8                	mov    eax,ecx
c001296a:	83 c1 04             	add    ecx,0x4
c001296d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012971:	6a 10                	push   0x10
c0012973:	ff 30                	push   DWORD PTR [eax]
c0012975:	e8 18 ff ff ff       	call   c0012892 <Dbg::logWriteIntBase(unsigned int, int)>
c001297a:	59                   	pop    ecx
c001297b:	5f                   	pop    edi
c001297c:	eb 8f                	jmp    c001290d <Dbg::kprintf(char const*, ...)+0x5c>
c001297e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012982:	89 d0                	mov    eax,edx
c0012984:	83 c2 08             	add    edx,0x8
c0012987:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001298b:	6a 10                	push   0x10
c001298d:	ff 30                	push   DWORD PTR [eax]
c001298f:	e8 fe fe ff ff       	call   c0012892 <Dbg::logWriteIntBase(unsigned int, int)>
c0012994:	58                   	pop    eax
c0012995:	5a                   	pop    edx
c0012996:	e9 72 ff ff ff       	jmp    c001290d <Dbg::kprintf(char const*, ...)+0x5c>
c001299b:	6a 25                	push   0x25
c001299d:	e8 9f fe ff ff       	call   c0012841 <Dbg::logc(char)>
c00129a2:	58                   	pop    eax
c00129a3:	e9 65 ff ff ff       	jmp    c001290d <Dbg::kprintf(char const*, ...)+0x5c>
c00129a8:	6a 25                	push   0x25
c00129aa:	e8 92 fe ff ff       	call   c0012841 <Dbg::logc(char)>
c00129af:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00129b2:	50                   	push   eax
c00129b3:	e8 89 fe ff ff       	call   c0012841 <Dbg::logc(char)>
c00129b8:	5a                   	pop    edx
c00129b9:	59                   	pop    ecx
c00129ba:	e9 4e ff ff ff       	jmp    c001290d <Dbg::kprintf(char const*, ...)+0x5c>
c00129bf:	50                   	push   eax
c00129c0:	89 eb                	mov    ebx,ebp
c00129c2:	e8 7a fe ff ff       	call   c0012841 <Dbg::logc(char)>
c00129c7:	89 fd                	mov    ebp,edi
c00129c9:	58                   	pop    eax
c00129ca:	e9 3e ff ff ff       	jmp    c001290d <Dbg::kprintf(char const*, ...)+0x5c>
c00129cf:	90                   	nop

c00129d0 <File::read(unsigned long long, void*, int*)>:
c00129d0:	53                   	push   ebx
c00129d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00129d5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00129d9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00129e0:	3c 19                	cmp    al,0x19
c00129e2:	77 35                	ja     c0012a19 <File::read(unsigned long long, void*, int*)+0x49>
c00129e4:	8b 04 85 00 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1600]
c00129eb:	85 c0                	test   eax,eax
c00129ed:	74 2a                	je     c0012a19 <File::read(unsigned long long, void*, int*)+0x49>
c00129ef:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00129f5:	85 c0                	test   eax,eax
c00129f7:	74 20                	je     c0012a19 <File::read(unsigned long long, void*, int*)+0x49>
c00129f9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00129fd:	74 21                	je     c0012a20 <File::read(unsigned long long, void*, int*)+0x50>
c00129ff:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a01:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a05:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a13:	5b                   	pop    ebx
c0012a14:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012a17:	ff e0                	jmp    eax
c0012a19:	b8 0b 00 00 00       	mov    eax,0xb
c0012a1e:	eb 05                	jmp    c0012a25 <File::read(unsigned long long, void*, int*)+0x55>
c0012a20:	b8 05 00 00 00       	mov    eax,0x5
c0012a25:	5b                   	pop    ebx
c0012a26:	c3                   	ret    
c0012a27:	90                   	nop

c0012a28 <File::write(unsigned long long, void*, int*)>:
c0012a28:	53                   	push   ebx
c0012a29:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a2d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a31:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a38:	3c 19                	cmp    al,0x19
c0012a3a:	77 35                	ja     c0012a71 <File::write(unsigned long long, void*, int*)+0x49>
c0012a3c:	8b 04 85 00 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1600]
c0012a43:	85 c0                	test   eax,eax
c0012a45:	74 2a                	je     c0012a71 <File::write(unsigned long long, void*, int*)+0x49>
c0012a47:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a4d:	85 c0                	test   eax,eax
c0012a4f:	74 20                	je     c0012a71 <File::write(unsigned long long, void*, int*)+0x49>
c0012a51:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a55:	74 21                	je     c0012a78 <File::write(unsigned long long, void*, int*)+0x50>
c0012a57:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a59:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a5d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a67:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a6b:	5b                   	pop    ebx
c0012a6c:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012a6f:	ff e0                	jmp    eax
c0012a71:	b8 0b 00 00 00       	mov    eax,0xb
c0012a76:	eb 05                	jmp    c0012a7d <File::write(unsigned long long, void*, int*)+0x55>
c0012a78:	b8 05 00 00 00       	mov    eax,0x5
c0012a7d:	5b                   	pop    ebx
c0012a7e:	c3                   	ret    
c0012a7f:	90                   	nop

c0012a80 <Directory::read(unsigned long long, void*, int*)>:
c0012a80:	53                   	push   ebx
c0012a81:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a85:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a89:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a90:	3c 19                	cmp    al,0x19
c0012a92:	77 35                	ja     c0012ac9 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012a94:	8b 04 85 00 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1600]
c0012a9b:	85 c0                	test   eax,eax
c0012a9d:	74 2a                	je     c0012ac9 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012a9f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012aa5:	85 c0                	test   eax,eax
c0012aa7:	74 20                	je     c0012ac9 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012aa9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012aad:	74 21                	je     c0012ad0 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012aaf:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012ab1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012ab5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012abb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012abf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012ac3:	5b                   	pop    ebx
c0012ac4:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012ac7:	ff e0                	jmp    eax
c0012ac9:	b8 0b 00 00 00       	mov    eax,0xb
c0012ace:	eb 05                	jmp    c0012ad5 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012ad0:	b8 05 00 00 00       	mov    eax,0x5
c0012ad5:	5b                   	pop    ebx
c0012ad6:	c3                   	ret    
c0012ad7:	90                   	nop

c0012ad8 <Directory::write(unsigned long long, void*, int*)>:
c0012ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012adc:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012ae3:	b8 0b 00 00 00       	mov    eax,0xb
c0012ae8:	80 fa 19             	cmp    dl,0x19
c0012aeb:	77 18                	ja     c0012b05 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012aed:	8b 14 95 00 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1600]
c0012af4:	85 d2                	test   edx,edx
c0012af6:	74 0d                	je     c0012b05 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012af8:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012aff:	19 c0                	sbb    eax,eax
c0012b01:	83 e0 0a             	and    eax,0xa
c0012b04:	40                   	inc    eax
c0012b05:	c3                   	ret    

c0012b06 <File::isAtty()>:
c0012b06:	31 c0                	xor    eax,eax
c0012b08:	c3                   	ret    
c0012b09:	90                   	nop

c0012b0a <Directory::isAtty()>:
c0012b0a:	31 c0                	xor    eax,eax
c0012b0c:	c3                   	ret    
c0012b0d:	90                   	nop

c0012b0e <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012b0e:	b8 0a 00 00 00       	mov    eax,0xa
c0012b13:	c3                   	ret    

c0012b14 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012b14:	b8 0a 00 00 00       	mov    eax,0xa
c0012b19:	c3                   	ret    

c0012b1a <Filesystem::allocateSwapfile(char const*, int)>:
c0012b1a:	31 c0                	xor    eax,eax
c0012b1c:	31 d2                	xor    edx,edx
c0012b1e:	c3                   	ret    
c0012b1f:	90                   	nop

c0012b20 <File::~File()>:
c0012b20:	83 ec 0c             	sub    esp,0xc
c0012b23:	ba bc af 02 c0       	mov    edx,0xc002afbc
c0012b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b2c:	89 10                	mov    DWORD PTR [eax],edx
c0012b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b32:	83 ec 0c             	sub    esp,0xc
c0012b35:	50                   	push   eax
c0012b36:	e8 43 e7 ff ff       	call   c001127e <UnixFile::~UnixFile()>
c0012b3b:	83 c4 10             	add    esp,0x10
c0012b3e:	90                   	nop
c0012b3f:	83 c4 0c             	add    esp,0xc
c0012b42:	c3                   	ret    
c0012b43:	90                   	nop

c0012b44 <File::~File()>:
c0012b44:	83 ec 0c             	sub    esp,0xc
c0012b47:	83 ec 0c             	sub    esp,0xc
c0012b4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b4e:	e8 cd ff ff ff       	call   c0012b20 <File::~File()>
c0012b53:	83 c4 10             	add    esp,0x10
c0012b56:	83 ec 08             	sub    esp,0x8
c0012b59:	68 14 01 00 00       	push   0x114
c0012b5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b62:	e8 72 fc ff ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c0012b67:	83 c4 10             	add    esp,0x10
c0012b6a:	83 c4 0c             	add    esp,0xc
c0012b6d:	c3                   	ret    

c0012b6e <Directory::~Directory()>:
c0012b6e:	83 ec 0c             	sub    esp,0xc
c0012b71:	ba d8 af 02 c0       	mov    edx,0xc002afd8
c0012b76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b7a:	89 10                	mov    DWORD PTR [eax],edx
c0012b7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b80:	83 ec 0c             	sub    esp,0xc
c0012b83:	50                   	push   eax
c0012b84:	e8 f5 e6 ff ff       	call   c001127e <UnixFile::~UnixFile()>
c0012b89:	83 c4 10             	add    esp,0x10
c0012b8c:	90                   	nop
c0012b8d:	83 c4 0c             	add    esp,0xc
c0012b90:	c3                   	ret    
c0012b91:	90                   	nop

c0012b92 <Directory::~Directory()>:
c0012b92:	83 ec 0c             	sub    esp,0xc
c0012b95:	83 ec 0c             	sub    esp,0xc
c0012b98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b9c:	e8 cd ff ff ff       	call   c0012b6e <Directory::~Directory()>
c0012ba1:	83 c4 10             	add    esp,0x10
c0012ba4:	83 ec 08             	sub    esp,0x8
c0012ba7:	68 14 01 00 00       	push   0x114
c0012bac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bb0:	e8 24 fc ff ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c0012bb5:	83 c4 10             	add    esp,0x10
c0012bb8:	83 c4 0c             	add    esp,0xc
c0012bbb:	c3                   	ret    

c0012bbc <Filesystem::Filesystem()>:
c0012bbc:	ba 54 af 02 c0       	mov    edx,0xc002af54
c0012bc1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bc5:	89 10                	mov    DWORD PTR [eax],edx
c0012bc7:	8b 15 74 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e574
c0012bcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bd1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bd8:	a3 74 e5 02 c0       	mov    ds:0xc002e574,eax
c0012bdd:	90                   	nop
c0012bde:	c3                   	ret    
c0012bdf:	90                   	nop

c0012be0 <Filesystem::~Filesystem()>:
c0012be0:	ba 54 af 02 c0       	mov    edx,0xc002af54
c0012be5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012be9:	89 10                	mov    DWORD PTR [eax],edx
c0012beb:	90                   	nop
c0012bec:	c3                   	ret    
c0012bed:	90                   	nop

c0012bee <Filesystem::~Filesystem()>:
c0012bee:	83 ec 0c             	sub    esp,0xc
c0012bf1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012bf5:	e8 e6 ff ff ff       	call   c0012be0 <Filesystem::~Filesystem()>
c0012bfa:	83 c4 04             	add    esp,0x4
c0012bfd:	83 ec 08             	sub    esp,0x8
c0012c00:	6a 08                	push   0x8
c0012c02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c06:	e8 ce fb ff ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c0012c0b:	83 c4 10             	add    esp,0x10
c0012c0e:	83 c4 0c             	add    esp,0xc
c0012c11:	c3                   	ret    

c0012c12 <Fs::getcwd(Process*, char*, int)>:
c0012c12:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c16:	31 c0                	xor    eax,eax
c0012c18:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012c1b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012c1f:	7d 15                	jge    c0012c36 <Fs::getcwd(Process*, char*, int)+0x24>
c0012c21:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012c25:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012c2c:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012c2f:	84 c9                	test   cl,cl
c0012c31:	74 06                	je     c0012c39 <Fs::getcwd(Process*, char*, int)+0x27>
c0012c33:	40                   	inc    eax
c0012c34:	eb e2                	jmp    c0012c18 <Fs::getcwd(Process*, char*, int)+0x6>
c0012c36:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012c39:	31 c0                	xor    eax,eax
c0012c3b:	c3                   	ret    

c0012c3c <Fs::initVFS()>:
c0012c3c:	83 ec 18             	sub    esp,0x18
c0012c3f:	6a 08                	push   0x8
c0012c41:	e8 13 cc ff ff       	call   c000f859 <malloc>
c0012c46:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c49:	e8 ac e1 00 00       	call   c0020dfa <FAT::FAT()>
c0012c4e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012c55:	e8 ff cb ff ff       	call   c000f859 <malloc>
c0012c5a:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c5d:	e8 a4 f3 00 00       	call   c0022006 <ISO9660::ISO9660()>
c0012c62:	83 c4 1c             	add    esp,0x1c
c0012c65:	c3                   	ret    

c0012c66 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012c66:	55                   	push   ebp
c0012c67:	57                   	push   edi
c0012c68:	56                   	push   esi
c0012c69:	53                   	push   ebx
c0012c6a:	81 ec 10 04 00 00    	sub    esp,0x410
c0012c70:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012c77:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012c7e:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012c85:	68 00 04 00 00       	push   0x400
c0012c8a:	6a 00                	push   0x0
c0012c8c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012c90:	56                   	push   esi
c0012c91:	e8 ba da fe ff       	call   c0000750 <memset>
c0012c96:	83 c4 10             	add    esp,0x10
c0012c99:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012c9d:	75 0b                	jne    c0012caa <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012c9f:	50                   	push   eax
c0012ca0:	50                   	push   eax
c0012ca1:	57                   	push   edi
c0012ca2:	56                   	push   esi
c0012ca3:	e8 64 db fe ff       	call   c000080c <strcpy>
c0012ca8:	eb 41                	jmp    c0012ceb <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012caa:	8a 07                	mov    al,BYTE PTR [edi]
c0012cac:	3c 5c                	cmp    al,0x5c
c0012cae:	74 04                	je     c0012cb4 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012cb0:	3c 2f                	cmp    al,0x2f
c0012cb2:	75 18                	jne    c0012ccc <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012cb4:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012cb7:	3c 60                	cmp    al,0x60
c0012cb9:	7e 03                	jle    c0012cbe <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012cbb:	83 e8 20             	sub    eax,0x20
c0012cbe:	88 04 24             	mov    BYTE PTR [esp],al
c0012cc1:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012cc8:	50                   	push   eax
c0012cc9:	50                   	push   eax
c0012cca:	eb 18                	jmp    c0012ce4 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012ccc:	50                   	push   eax
c0012ccd:	50                   	push   eax
c0012cce:	55                   	push   ebp
c0012ccf:	56                   	push   esi
c0012cd0:	e8 37 db fe ff       	call   c000080c <strcpy>
c0012cd5:	5a                   	pop    edx
c0012cd6:	59                   	pop    ecx
c0012cd7:	68 be c5 02 c0       	push   0xc002c5be
c0012cdc:	56                   	push   esi
c0012cdd:	e8 6a dc fe ff       	call   c000094c <strcat>
c0012ce2:	5d                   	pop    ebp
c0012ce3:	58                   	pop    eax
c0012ce4:	57                   	push   edi
c0012ce5:	56                   	push   esi
c0012ce6:	e8 61 dc fe ff       	call   c000094c <strcat>
c0012ceb:	83 c4 10             	add    esp,0x10
c0012cee:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012cf1:	3c 60                	cmp    al,0x60
c0012cf3:	7e 03                	jle    c0012cf8 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012cf5:	83 e8 20             	sub    eax,0x20
c0012cf8:	88 04 24             	mov    BYTE PTR [esp],al
c0012cfb:	88 03                	mov    BYTE PTR [ebx],al
c0012cfd:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012d04:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012d0a:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012d0e:	bf 03 00 00 00       	mov    edi,0x3
c0012d13:	b8 03 00 00 00       	mov    eax,0x3
c0012d18:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012d1b:	84 d2                	test   dl,dl
c0012d1d:	0f 84 91 00 00 00    	je     c0012db4 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012d23:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012d26:	80 fa 5c             	cmp    dl,0x5c
c0012d29:	74 05                	je     c0012d30 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012d2b:	80 fa 2f             	cmp    dl,0x2f
c0012d2e:	75 12                	jne    c0012d42 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d30:	89 c5                	mov    ebp,eax
c0012d32:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012d37:	74 09                	je     c0012d42 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d39:	40                   	inc    eax
c0012d3a:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012d3e:	89 cf                	mov    edi,ecx
c0012d40:	eb d6                	jmp    c0012d18 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012d42:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012d47:	75 5b                	jne    c0012da4 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d49:	80 fa 2e             	cmp    dl,0x2e
c0012d4c:	75 56                	jne    c0012da4 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d4e:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012d52:	74 19                	je     c0012d6d <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012d54:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012d59:	74 53                	je     c0012dae <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012d5b:	89 f9                	mov    ecx,edi
c0012d5d:	41                   	inc    ecx
c0012d5e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012d61:	80 fa 2f             	cmp    dl,0x2f
c0012d64:	74 f7                	je     c0012d5d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012d66:	80 fa 5c             	cmp    dl,0x5c
c0012d69:	74 f2                	je     c0012d5d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012d6b:	eb d1                	jmp    c0012d3e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d6d:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012d72:	74 3a                	je     c0012dae <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012d74:	83 f8 03             	cmp    eax,0x3
c0012d77:	74 c5                	je     c0012d3e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d79:	41                   	inc    ecx
c0012d7a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012d7d:	80 fa 2f             	cmp    dl,0x2f
c0012d80:	74 f7                	je     c0012d79 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012d82:	80 fa 5c             	cmp    dl,0x5c
c0012d85:	74 f2                	je     c0012d79 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012d87:	48                   	dec    eax
c0012d88:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012d8c:	75 06                	jne    c0012d94 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012d8e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012d92:	eb f3                	jmp    c0012d87 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012d94:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012d98:	74 07                	je     c0012da1 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012d9a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012d9e:	48                   	dec    eax
c0012d9f:	eb f3                	jmp    c0012d94 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012da1:	40                   	inc    eax
c0012da2:	eb 9a                	jmp    c0012d3e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012da4:	80 fa 2f             	cmp    dl,0x2f
c0012da7:	74 95                	je     c0012d3e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012da9:	80 fa 5c             	cmp    dl,0x5c
c0012dac:	74 90                	je     c0012d3e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dae:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012db1:	40                   	inc    eax
c0012db2:	eb 8a                	jmp    c0012d3e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012db4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012db8:	83 ec 0c             	sub    esp,0xc
c0012dbb:	53                   	push   ebx
c0012dbc:	e8 ab d9 fe ff       	call   c000076c <strlen>
c0012dc1:	83 c4 10             	add    esp,0x10
c0012dc4:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012dc9:	75 26                	jne    c0012df1 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012dcb:	83 ec 0c             	sub    esp,0xc
c0012dce:	53                   	push   ebx
c0012dcf:	e8 98 d9 fe ff       	call   c000076c <strlen>
c0012dd4:	83 c4 10             	add    esp,0x10
c0012dd7:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012ddc:	74 26                	je     c0012e04 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012dde:	83 ec 0c             	sub    esp,0xc
c0012de1:	53                   	push   ebx
c0012de2:	e8 85 d9 fe ff       	call   c000076c <strlen>
c0012de7:	83 c4 10             	add    esp,0x10
c0012dea:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012def:	eb c7                	jmp    c0012db8 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012df1:	83 ec 0c             	sub    esp,0xc
c0012df4:	53                   	push   ebx
c0012df5:	e8 72 d9 fe ff       	call   c000076c <strlen>
c0012dfa:	83 c4 10             	add    esp,0x10
c0012dfd:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012e02:	74 c7                	je     c0012dcb <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012e04:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012e0a:	5b                   	pop    ebx
c0012e0b:	5e                   	pop    esi
c0012e0c:	5f                   	pop    edi
c0012e0d:	5d                   	pop    ebp
c0012e0e:	c3                   	ret    
c0012e0f:	90                   	nop

c0012e10 <File::File(char const*, Process*)>:
c0012e10:	83 ec 0c             	sub    esp,0xc
c0012e13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e17:	83 ec 08             	sub    esp,0x8
c0012e1a:	6a 00                	push   0x0
c0012e1c:	50                   	push   eax
c0012e1d:	e8 7a e2 ff ff       	call   c001109c <UnixFile::UnixFile(int)>
c0012e22:	83 c4 10             	add    esp,0x10
c0012e25:	ba bc af 02 c0       	mov    edx,0xc002afbc
c0012e2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e2e:	89 10                	mov    DWORD PTR [eax],edx
c0012e30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012e34:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012e3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e3e:	83 c0 0d             	add    eax,0xd
c0012e41:	83 ec 04             	sub    esp,0x4
c0012e44:	52                   	push   edx
c0012e45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e49:	50                   	push   eax
c0012e4a:	e8 17 fe ff ff       	call   c0012c66 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012e4f:	83 c4 10             	add    esp,0x10
c0012e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e56:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012e59:	8d 50 bf             	lea    edx,[eax-0x41]
c0012e5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e60:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e6a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012e6e:	90                   	nop
c0012e6f:	83 c4 0c             	add    esp,0xc
c0012e72:	c3                   	ret    
c0012e73:	90                   	nop

c0012e74 <File::open(FileOpenMode)>:
c0012e74:	53                   	push   ebx
c0012e75:	b8 0b 00 00 00       	mov    eax,0xb
c0012e7a:	83 ec 08             	sub    esp,0x8
c0012e7d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012e81:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012e88:	80 fa 19             	cmp    dl,0x19
c0012e8b:	77 40                	ja     c0012ecd <File::open(FileOpenMode)+0x59>
c0012e8d:	8b 14 95 00 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1600]
c0012e94:	85 d2                	test   edx,edx
c0012e96:	74 35                	je     c0012ecd <File::open(FileOpenMode)+0x59>
c0012e98:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e9e:	85 d2                	test   edx,edx
c0012ea0:	74 2b                	je     c0012ecd <File::open(FileOpenMode)+0x59>
c0012ea2:	b8 06 00 00 00       	mov    eax,0x6
c0012ea7:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012eab:	75 20                	jne    c0012ecd <File::open(FileOpenMode)+0x59>
c0012ead:	8b 02                	mov    eax,DWORD PTR [edx]
c0012eaf:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012eb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012eb9:	51                   	push   ecx
c0012eba:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012ebd:	51                   	push   ecx
c0012ebe:	52                   	push   edx
c0012ebf:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012ec2:	83 c4 10             	add    esp,0x10
c0012ec5:	85 c0                	test   eax,eax
c0012ec7:	75 04                	jne    c0012ecd <File::open(FileOpenMode)+0x59>
c0012ec9:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012ecd:	83 c4 08             	add    esp,0x8
c0012ed0:	5b                   	pop    ebx
c0012ed1:	c3                   	ret    

c0012ed2 <File::close()>:
c0012ed2:	53                   	push   ebx
c0012ed3:	b8 0b 00 00 00       	mov    eax,0xb
c0012ed8:	83 ec 08             	sub    esp,0x8
c0012edb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012edf:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012ee6:	80 fa 19             	cmp    dl,0x19
c0012ee9:	77 41                	ja     c0012f2c <File::close()+0x5a>
c0012eeb:	8b 1c 95 00 ea 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1600]
c0012ef2:	85 db                	test   ebx,ebx
c0012ef4:	74 36                	je     c0012f2c <File::close()+0x5a>
c0012ef6:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012efd:	74 2d                	je     c0012f2c <File::close()+0x5a>
c0012eff:	b8 05 00 00 00       	mov    eax,0x5
c0012f04:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012f08:	74 22                	je     c0012f2c <File::close()+0x5a>
c0012f0a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012f0e:	8b 04 95 00 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1600]
c0012f15:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f1b:	53                   	push   ebx
c0012f1c:	53                   	push   ebx
c0012f1d:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f1f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012f25:	50                   	push   eax
c0012f26:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012f29:	83 c4 10             	add    esp,0x10
c0012f2c:	83 c4 08             	add    esp,0x8
c0012f2f:	5b                   	pop    ebx
c0012f30:	c3                   	ret    
c0012f31:	90                   	nop

c0012f32 <File::seek(unsigned long long)>:
c0012f32:	56                   	push   esi
c0012f33:	53                   	push   ebx
c0012f34:	b8 0b 00 00 00       	mov    eax,0xb
c0012f39:	51                   	push   ecx
c0012f3a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012f3e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012f42:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012f49:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f4d:	80 fa 19             	cmp    dl,0x19
c0012f50:	77 31                	ja     c0012f83 <File::seek(unsigned long long)+0x51>
c0012f52:	8b 14 95 00 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1600]
c0012f59:	85 d2                	test   edx,edx
c0012f5b:	74 26                	je     c0012f83 <File::seek(unsigned long long)+0x51>
c0012f5d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012f63:	85 d2                	test   edx,edx
c0012f65:	74 1c                	je     c0012f83 <File::seek(unsigned long long)+0x51>
c0012f67:	b8 05 00 00 00       	mov    eax,0x5
c0012f6c:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012f70:	74 11                	je     c0012f83 <File::seek(unsigned long long)+0x51>
c0012f72:	8b 02                	mov    eax,DWORD PTR [edx]
c0012f74:	53                   	push   ebx
c0012f75:	51                   	push   ecx
c0012f76:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012f7c:	52                   	push   edx
c0012f7d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012f80:	83 c4 10             	add    esp,0x10
c0012f83:	5a                   	pop    edx
c0012f84:	5b                   	pop    ebx
c0012f85:	5e                   	pop    esi
c0012f86:	c3                   	ret    
c0012f87:	90                   	nop

c0012f88 <File::tell(unsigned long long*)>:
c0012f88:	83 ec 0c             	sub    esp,0xc
c0012f8b:	b8 0b 00 00 00       	mov    eax,0xb
c0012f90:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012f94:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012f9b:	80 fa 19             	cmp    dl,0x19
c0012f9e:	77 34                	ja     c0012fd4 <File::tell(unsigned long long*)+0x4c>
c0012fa0:	8b 14 95 00 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1600]
c0012fa7:	85 d2                	test   edx,edx
c0012fa9:	74 29                	je     c0012fd4 <File::tell(unsigned long long*)+0x4c>
c0012fab:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012fb1:	85 d2                	test   edx,edx
c0012fb3:	74 1f                	je     c0012fd4 <File::tell(unsigned long long*)+0x4c>
c0012fb5:	b8 05 00 00 00       	mov    eax,0x5
c0012fba:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012fbe:	74 14                	je     c0012fd4 <File::tell(unsigned long long*)+0x4c>
c0012fc0:	50                   	push   eax
c0012fc1:	8b 02                	mov    eax,DWORD PTR [edx]
c0012fc3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012fc7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012fcd:	52                   	push   edx
c0012fce:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012fd1:	83 c4 10             	add    esp,0x10
c0012fd4:	83 c4 0c             	add    esp,0xc
c0012fd7:	c3                   	ret    

c0012fd8 <File::rewind()>:
c0012fd8:	83 ec 10             	sub    esp,0x10
c0012fdb:	6a 00                	push   0x0
c0012fdd:	6a 00                	push   0x0
c0012fdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fe3:	e8 4a ff ff ff       	call   c0012f32 <File::seek(unsigned long long)>
c0012fe8:	83 c4 1c             	add    esp,0x1c
c0012feb:	c3                   	ret    

c0012fec <File::unlink()>:
c0012fec:	83 ec 0c             	sub    esp,0xc
c0012fef:	b8 0b 00 00 00       	mov    eax,0xb
c0012ff4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ff8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012fff:	80 f9 19             	cmp    cl,0x19
c0013002:	77 2f                	ja     c0013033 <File::unlink()+0x47>
c0013004:	8b 0c 8d 00 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1600]
c001300b:	85 c9                	test   ecx,ecx
c001300d:	74 24                	je     c0013033 <File::unlink()+0x47>
c001300f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013015:	85 c9                	test   ecx,ecx
c0013017:	74 1a                	je     c0013033 <File::unlink()+0x47>
c0013019:	b8 06 00 00 00       	mov    eax,0x6
c001301e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013022:	75 0f                	jne    c0013033 <File::unlink()+0x47>
c0013024:	83 c2 0d             	add    edx,0xd
c0013027:	50                   	push   eax
c0013028:	50                   	push   eax
c0013029:	8b 01                	mov    eax,DWORD PTR [ecx]
c001302b:	52                   	push   edx
c001302c:	51                   	push   ecx
c001302d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013030:	83 c4 10             	add    esp,0x10
c0013033:	83 c4 0c             	add    esp,0xc
c0013036:	c3                   	ret    
c0013037:	90                   	nop

c0013038 <File::rename(char const*)>:
c0013038:	83 ec 0c             	sub    esp,0xc
c001303b:	b8 0b 00 00 00       	mov    eax,0xb
c0013040:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013044:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001304b:	80 f9 19             	cmp    cl,0x19
c001304e:	77 32                	ja     c0013082 <File::rename(char const*)+0x4a>
c0013050:	8b 0c 8d 00 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1600]
c0013057:	85 c9                	test   ecx,ecx
c0013059:	74 27                	je     c0013082 <File::rename(char const*)+0x4a>
c001305b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013061:	85 c9                	test   ecx,ecx
c0013063:	74 1d                	je     c0013082 <File::rename(char const*)+0x4a>
c0013065:	b8 06 00 00 00       	mov    eax,0x6
c001306a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001306e:	75 12                	jne    c0013082 <File::rename(char const*)+0x4a>
c0013070:	83 c2 0d             	add    edx,0xd
c0013073:	50                   	push   eax
c0013074:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013076:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001307a:	52                   	push   edx
c001307b:	51                   	push   ecx
c001307c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001307f:	83 c4 10             	add    esp,0x10
c0013082:	83 c4 0c             	add    esp,0xc
c0013085:	c3                   	ret    

c0013086 <File::chfatattr(unsigned char, unsigned char)>:
c0013086:	57                   	push   edi
c0013087:	b8 0b 00 00 00       	mov    eax,0xb
c001308c:	56                   	push   esi
c001308d:	53                   	push   ebx
c001308e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013092:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013096:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001309d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00130a1:	80 f9 19             	cmp    cl,0x19
c00130a4:	77 37                	ja     c00130dd <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130a6:	8b 0c 8d 00 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1600]
c00130ad:	85 c9                	test   ecx,ecx
c00130af:	74 2c                	je     c00130dd <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130b1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00130b7:	85 c9                	test   ecx,ecx
c00130b9:	74 22                	je     c00130dd <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130bb:	b8 06 00 00 00       	mov    eax,0x6
c00130c0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130c4:	75 17                	jne    c00130dd <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130c6:	8b 39                	mov    edi,DWORD PTR [ecx]
c00130c8:	89 f0                	mov    eax,esi
c00130ca:	83 c2 0d             	add    edx,0xd
c00130cd:	0f b6 f0             	movzx  esi,al
c00130d0:	0f b6 db             	movzx  ebx,bl
c00130d3:	56                   	push   esi
c00130d4:	53                   	push   ebx
c00130d5:	52                   	push   edx
c00130d6:	51                   	push   ecx
c00130d7:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00130da:	83 c4 10             	add    esp,0x10
c00130dd:	5b                   	pop    ebx
c00130de:	5e                   	pop    esi
c00130df:	5f                   	pop    edi
c00130e0:	c3                   	ret    
c00130e1:	90                   	nop

c00130e2 <File::exists()>:
c00130e2:	83 ec 0c             	sub    esp,0xc
c00130e5:	31 c0                	xor    eax,eax
c00130e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130eb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00130f2:	80 f9 19             	cmp    cl,0x19
c00130f5:	77 24                	ja     c001311b <File::exists()+0x39>
c00130f7:	8b 0c 8d 00 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1600]
c00130fe:	85 c9                	test   ecx,ecx
c0013100:	74 19                	je     c001311b <File::exists()+0x39>
c0013102:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013108:	85 c9                	test   ecx,ecx
c001310a:	74 0f                	je     c001311b <File::exists()+0x39>
c001310c:	83 c2 0d             	add    edx,0xd
c001310f:	50                   	push   eax
c0013110:	50                   	push   eax
c0013111:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013113:	52                   	push   edx
c0013114:	51                   	push   ecx
c0013115:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013118:	83 c4 10             	add    esp,0x10
c001311b:	83 c4 0c             	add    esp,0xc
c001311e:	c3                   	ret    
c001311f:	90                   	nop

c0013120 <File::stat(unsigned long long*, bool*)>:
c0013120:	56                   	push   esi
c0013121:	53                   	push   ebx
c0013122:	50                   	push   eax
c0013123:	b8 0b 00 00 00       	mov    eax,0xb
c0013128:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001312c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013130:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013137:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001313b:	80 f9 19             	cmp    cl,0x19
c001313e:	77 3d                	ja     c001317d <File::stat(unsigned long long*, bool*)+0x5d>
c0013140:	8b 0c 8d 00 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1600]
c0013147:	85 c9                	test   ecx,ecx
c0013149:	74 32                	je     c001317d <File::stat(unsigned long long*, bool*)+0x5d>
c001314b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013151:	85 c9                	test   ecx,ecx
c0013153:	74 28                	je     c001317d <File::stat(unsigned long long*, bool*)+0x5d>
c0013155:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013157:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001315b:	74 13                	je     c0013170 <File::stat(unsigned long long*, bool*)+0x50>
c001315d:	83 ec 04             	sub    esp,0x4
c0013160:	56                   	push   esi
c0013161:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013167:	51                   	push   ecx
c0013168:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001316b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001316e:	eb 0a                	jmp    c001317a <File::stat(unsigned long long*, bool*)+0x5a>
c0013170:	53                   	push   ebx
c0013171:	83 c2 0d             	add    edx,0xd
c0013174:	56                   	push   esi
c0013175:	52                   	push   edx
c0013176:	51                   	push   ecx
c0013177:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001317a:	83 c4 10             	add    esp,0x10
c001317d:	5a                   	pop    edx
c001317e:	5b                   	pop    ebx
c001317f:	5e                   	pop    esi
c0013180:	c3                   	ret    

c0013181 <Fs::setcwd(Process*, char*)>:
c0013181:	55                   	push   ebp
c0013182:	57                   	push   edi
c0013183:	56                   	push   esi
c0013184:	53                   	push   ebx
c0013185:	81 ec 20 02 00 00    	sub    esp,0x220
c001318b:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013192:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013198:	57                   	push   edi
c0013199:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00131a0:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00131a4:	56                   	push   esi
c00131a5:	e8 bc fa ff ff       	call   c0012c66 <Fs::standardiseFiles(char*, char const*, char const*)>
c00131aa:	89 34 24             	mov    DWORD PTR [esp],esi
c00131ad:	e8 ba d5 fe ff       	call   c000076c <strlen>
c00131b2:	83 c4 10             	add    esp,0x10
c00131b5:	83 f8 02             	cmp    eax,0x2
c00131b8:	77 17                	ja     c00131d1 <Fs::setcwd(Process*, char*)+0x50>
c00131ba:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00131bf:	83 e8 41             	sub    eax,0x41
c00131c2:	83 f8 19             	cmp    eax,0x19
c00131c5:	76 24                	jbe    c00131eb <Fs::setcwd(Process*, char*)+0x6a>
c00131c7:	b8 03 00 00 00       	mov    eax,0x3
c00131cc:	e9 e0 00 00 00       	jmp    c00132b1 <Fs::setcwd(Process*, char*)+0x130>
c00131d1:	83 ec 0c             	sub    esp,0xc
c00131d4:	56                   	push   esi
c00131d5:	e8 92 d5 fe ff       	call   c000076c <strlen>
c00131da:	83 c4 10             	add    esp,0x10
c00131dd:	83 f8 03             	cmp    eax,0x3
c00131e0:	75 34                	jne    c0013216 <Fs::setcwd(Process*, char*)+0x95>
c00131e2:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00131e7:	75 2d                	jne    c0013216 <Fs::setcwd(Process*, char*)+0x95>
c00131e9:	eb cf                	jmp    c00131ba <Fs::setcwd(Process*, char*)+0x39>
c00131eb:	8b 14 85 00 ea 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1600]
c00131f2:	b8 05 00 00 00       	mov    eax,0x5
c00131f7:	85 d2                	test   edx,edx
c00131f9:	0f 84 b2 00 00 00    	je     c00132b1 <Fs::setcwd(Process*, char*)+0x130>
c00131ff:	b8 06 00 00 00       	mov    eax,0x6
c0013204:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001320b:	0f 85 92 00 00 00    	jne    c00132a3 <Fs::setcwd(Process*, char*)+0x122>
c0013211:	e9 9b 00 00 00       	jmp    c00132b1 <Fs::setcwd(Process*, char*)+0x130>
c0013216:	83 ec 0c             	sub    esp,0xc
c0013219:	68 14 01 00 00       	push   0x114
c001321e:	e8 36 c6 ff ff       	call   c000f859 <malloc>
c0013223:	83 c4 0c             	add    esp,0xc
c0013226:	89 c3                	mov    ebx,eax
c0013228:	55                   	push   ebp
c0013229:	56                   	push   esi
c001322a:	50                   	push   eax
c001322b:	e8 e0 fb ff ff       	call   c0012e10 <File::File(char const*, Process*)>
c0013230:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013235:	83 c4 0c             	add    esp,0xc
c0013238:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001323c:	50                   	push   eax
c001323d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013241:	50                   	push   eax
c0013242:	53                   	push   ebx
c0013243:	e8 d8 fe ff ff       	call   c0013120 <File::stat(unsigned long long*, bool*)>
c0013248:	83 c4 10             	add    esp,0x10
c001324b:	83 f8 02             	cmp    eax,0x2
c001324e:	74 04                	je     c0013254 <Fs::setcwd(Process*, char*)+0xd3>
c0013250:	85 c0                	test   eax,eax
c0013252:	74 1c                	je     c0013270 <Fs::setcwd(Process*, char*)+0xef>
c0013254:	b8 01 00 00 00       	mov    eax,0x1
c0013259:	85 db                	test   ebx,ebx
c001325b:	74 54                	je     c00132b1 <Fs::setcwd(Process*, char*)+0x130>
c001325d:	83 ec 0c             	sub    esp,0xc
c0013260:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013262:	53                   	push   ebx
c0013263:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013266:	83 c4 10             	add    esp,0x10
c0013269:	b8 01 00 00 00       	mov    eax,0x1
c001326e:	eb 41                	jmp    c00132b1 <Fs::setcwd(Process*, char*)+0x130>
c0013270:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013275:	75 1c                	jne    c0013293 <Fs::setcwd(Process*, char*)+0x112>
c0013277:	b8 02 00 00 00       	mov    eax,0x2
c001327c:	85 db                	test   ebx,ebx
c001327e:	74 31                	je     c00132b1 <Fs::setcwd(Process*, char*)+0x130>
c0013280:	83 ec 0c             	sub    esp,0xc
c0013283:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013285:	53                   	push   ebx
c0013286:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013289:	83 c4 10             	add    esp,0x10
c001328c:	b8 02 00 00 00       	mov    eax,0x2
c0013291:	eb 1e                	jmp    c00132b1 <Fs::setcwd(Process*, char*)+0x130>
c0013293:	85 db                	test   ebx,ebx
c0013295:	74 0c                	je     c00132a3 <Fs::setcwd(Process*, char*)+0x122>
c0013297:	83 ec 0c             	sub    esp,0xc
c001329a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001329c:	53                   	push   ebx
c001329d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132a0:	83 c4 10             	add    esp,0x10
c00132a3:	50                   	push   eax
c00132a4:	50                   	push   eax
c00132a5:	56                   	push   esi
c00132a6:	57                   	push   edi
c00132a7:	e8 60 d5 fe ff       	call   c000080c <strcpy>
c00132ac:	83 c4 10             	add    esp,0x10
c00132af:	31 c0                	xor    eax,eax
c00132b1:	81 c4 1c 02 00 00    	add    esp,0x21c
c00132b7:	5b                   	pop    ebx
c00132b8:	5e                   	pop    esi
c00132b9:	5f                   	pop    edi
c00132ba:	5d                   	pop    ebp
c00132bb:	c3                   	ret    

c00132bc <Directory::Directory(char const*, Process*)>:
c00132bc:	83 ec 0c             	sub    esp,0xc
c00132bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132c3:	83 ec 08             	sub    esp,0x8
c00132c6:	6a 00                	push   0x0
c00132c8:	50                   	push   eax
c00132c9:	e8 ce dd ff ff       	call   c001109c <UnixFile::UnixFile(int)>
c00132ce:	83 c4 10             	add    esp,0x10
c00132d1:	ba d8 af 02 c0       	mov    edx,0xc002afd8
c00132d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132da:	89 10                	mov    DWORD PTR [eax],edx
c00132dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132e0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00132e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132ea:	83 c0 0d             	add    eax,0xd
c00132ed:	83 ec 04             	sub    esp,0x4
c00132f0:	52                   	push   edx
c00132f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132f5:	50                   	push   eax
c00132f6:	e8 6b f9 ff ff       	call   c0012c66 <Fs::standardiseFiles(char*, char const*, char const*)>
c00132fb:	83 c4 10             	add    esp,0x10
c00132fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013302:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013305:	8d 50 bf             	lea    edx,[eax-0x41]
c0013308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001330c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013316:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001331a:	90                   	nop
c001331b:	83 c4 0c             	add    esp,0xc
c001331e:	c3                   	ret    
c001331f:	90                   	nop

c0013320 <Directory::open()>:
c0013320:	53                   	push   ebx
c0013321:	b8 0b 00 00 00       	mov    eax,0xb
c0013326:	83 ec 08             	sub    esp,0x8
c0013329:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001332d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013334:	80 fa 19             	cmp    dl,0x19
c0013337:	77 3d                	ja     c0013376 <Directory::open()+0x56>
c0013339:	8b 14 95 00 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1600]
c0013340:	85 d2                	test   edx,edx
c0013342:	74 32                	je     c0013376 <Directory::open()+0x56>
c0013344:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001334a:	85 d2                	test   edx,edx
c001334c:	74 28                	je     c0013376 <Directory::open()+0x56>
c001334e:	b8 06 00 00 00       	mov    eax,0x6
c0013353:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013357:	75 1d                	jne    c0013376 <Directory::open()+0x56>
c0013359:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001335f:	50                   	push   eax
c0013360:	8b 02                	mov    eax,DWORD PTR [edx]
c0013362:	51                   	push   ecx
c0013363:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013366:	51                   	push   ecx
c0013367:	52                   	push   edx
c0013368:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c001336b:	83 c4 10             	add    esp,0x10
c001336e:	85 c0                	test   eax,eax
c0013370:	75 04                	jne    c0013376 <Directory::open()+0x56>
c0013372:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013376:	83 c4 08             	add    esp,0x8
c0013379:	5b                   	pop    ebx
c001337a:	c3                   	ret    
c001337b:	90                   	nop

c001337c <Directory::close()>:
c001337c:	53                   	push   ebx
c001337d:	b8 0b 00 00 00       	mov    eax,0xb
c0013382:	83 ec 08             	sub    esp,0x8
c0013385:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013389:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013390:	80 fa 19             	cmp    dl,0x19
c0013393:	77 41                	ja     c00133d6 <Directory::close()+0x5a>
c0013395:	8b 1c 95 00 ea 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1600]
c001339c:	85 db                	test   ebx,ebx
c001339e:	74 36                	je     c00133d6 <Directory::close()+0x5a>
c00133a0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00133a7:	74 2d                	je     c00133d6 <Directory::close()+0x5a>
c00133a9:	b8 05 00 00 00       	mov    eax,0x5
c00133ae:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00133b2:	74 22                	je     c00133d6 <Directory::close()+0x5a>
c00133b4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00133b8:	8b 04 95 00 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1600]
c00133bf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00133c5:	53                   	push   ebx
c00133c6:	53                   	push   ebx
c00133c7:	8b 10                	mov    edx,DWORD PTR [eax]
c00133c9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00133cf:	50                   	push   eax
c00133d0:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00133d3:	83 c4 10             	add    esp,0x10
c00133d6:	83 c4 08             	add    esp,0x8
c00133d9:	5b                   	pop    ebx
c00133da:	c3                   	ret    
c00133db:	90                   	nop

c00133dc <Directory::unlink()>:
c00133dc:	83 ec 0c             	sub    esp,0xc
c00133df:	b8 0b 00 00 00       	mov    eax,0xb
c00133e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133e8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00133ef:	80 f9 19             	cmp    cl,0x19
c00133f2:	77 2f                	ja     c0013423 <Directory::unlink()+0x47>
c00133f4:	8b 0c 8d 00 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1600]
c00133fb:	85 c9                	test   ecx,ecx
c00133fd:	74 24                	je     c0013423 <Directory::unlink()+0x47>
c00133ff:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013405:	85 c9                	test   ecx,ecx
c0013407:	74 1a                	je     c0013423 <Directory::unlink()+0x47>
c0013409:	b8 06 00 00 00       	mov    eax,0x6
c001340e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013412:	75 0f                	jne    c0013423 <Directory::unlink()+0x47>
c0013414:	83 c2 0d             	add    edx,0xd
c0013417:	50                   	push   eax
c0013418:	50                   	push   eax
c0013419:	8b 01                	mov    eax,DWORD PTR [ecx]
c001341b:	52                   	push   edx
c001341c:	51                   	push   ecx
c001341d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013420:	83 c4 10             	add    esp,0x10
c0013423:	83 c4 0c             	add    esp,0xc
c0013426:	c3                   	ret    
c0013427:	90                   	nop

c0013428 <Directory::rename(char const*)>:
c0013428:	83 ec 0c             	sub    esp,0xc
c001342b:	b8 0b 00 00 00       	mov    eax,0xb
c0013430:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013434:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001343b:	80 f9 19             	cmp    cl,0x19
c001343e:	77 32                	ja     c0013472 <Directory::rename(char const*)+0x4a>
c0013440:	8b 0c 8d 00 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1600]
c0013447:	85 c9                	test   ecx,ecx
c0013449:	74 27                	je     c0013472 <Directory::rename(char const*)+0x4a>
c001344b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013451:	85 c9                	test   ecx,ecx
c0013453:	74 1d                	je     c0013472 <Directory::rename(char const*)+0x4a>
c0013455:	b8 06 00 00 00       	mov    eax,0x6
c001345a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001345e:	75 12                	jne    c0013472 <Directory::rename(char const*)+0x4a>
c0013460:	83 c2 0d             	add    edx,0xd
c0013463:	50                   	push   eax
c0013464:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013466:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001346a:	52                   	push   edx
c001346b:	51                   	push   ecx
c001346c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001346f:	83 c4 10             	add    esp,0x10
c0013472:	83 c4 0c             	add    esp,0xc
c0013475:	c3                   	ret    

c0013476 <Directory::exists()>:
c0013476:	83 ec 0c             	sub    esp,0xc
c0013479:	31 c0                	xor    eax,eax
c001347b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001347f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013486:	80 f9 19             	cmp    cl,0x19
c0013489:	77 24                	ja     c00134af <Directory::exists()+0x39>
c001348b:	8b 0c 8d 00 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1600]
c0013492:	85 c9                	test   ecx,ecx
c0013494:	74 19                	je     c00134af <Directory::exists()+0x39>
c0013496:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001349c:	85 c9                	test   ecx,ecx
c001349e:	74 0f                	je     c00134af <Directory::exists()+0x39>
c00134a0:	83 c2 0d             	add    edx,0xd
c00134a3:	50                   	push   eax
c00134a4:	50                   	push   eax
c00134a5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134a7:	52                   	push   edx
c00134a8:	51                   	push   ecx
c00134a9:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00134ac:	83 c4 10             	add    esp,0x10
c00134af:	83 c4 0c             	add    esp,0xc
c00134b2:	c3                   	ret    
c00134b3:	90                   	nop

c00134b4 <Directory::read(dirent*)>:
c00134b4:	83 ec 1c             	sub    esp,0x1c
c00134b7:	b8 0b 00 00 00       	mov    eax,0xb
c00134bc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00134c0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00134c7:	80 fa 19             	cmp    dl,0x19
c00134ca:	77 30                	ja     c00134fc <Directory::read(dirent*)+0x48>
c00134cc:	8b 14 95 00 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1600]
c00134d3:	85 d2                	test   edx,edx
c00134d5:	74 25                	je     c00134fc <Directory::read(dirent*)+0x48>
c00134d7:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00134de:	74 1c                	je     c00134fc <Directory::read(dirent*)+0x48>
c00134e0:	83 ec 0c             	sub    esp,0xc
c00134e3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134e5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00134e9:	52                   	push   edx
c00134ea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00134ee:	6a 00                	push   0x0
c00134f0:	68 10 01 00 00       	push   0x110
c00134f5:	51                   	push   ecx
c00134f6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00134f9:	83 c4 20             	add    esp,0x20
c00134fc:	83 c4 1c             	add    esp,0x1c
c00134ff:	c3                   	ret    

c0013500 <Directory::create()>:
c0013500:	83 ec 0c             	sub    esp,0xc
c0013503:	b8 0b 00 00 00       	mov    eax,0xb
c0013508:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001350c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013513:	80 f9 19             	cmp    cl,0x19
c0013516:	77 2f                	ja     c0013547 <Directory::create()+0x47>
c0013518:	8b 0c 8d 00 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1600]
c001351f:	85 c9                	test   ecx,ecx
c0013521:	74 24                	je     c0013547 <Directory::create()+0x47>
c0013523:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013529:	85 c9                	test   ecx,ecx
c001352b:	74 1a                	je     c0013547 <Directory::create()+0x47>
c001352d:	b8 06 00 00 00       	mov    eax,0x6
c0013532:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013536:	75 0f                	jne    c0013547 <Directory::create()+0x47>
c0013538:	83 c2 0d             	add    edx,0xd
c001353b:	50                   	push   eax
c001353c:	50                   	push   eax
c001353d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001353f:	52                   	push   edx
c0013540:	51                   	push   ecx
c0013541:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013544:	83 c4 10             	add    esp,0x10
c0013547:	83 c4 0c             	add    esp,0xc
c001354a:	c3                   	ret    
c001354b:	90                   	nop

c001354c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001354c:	b8 0a 00 00 00       	mov    eax,0xa
c0013551:	c3                   	ret    

c0013552 <Bus::Bus(char const*)>:
c0013552:	83 ec 0c             	sub    esp,0xc
c0013555:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013559:	83 ec 08             	sub    esp,0x8
c001355c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013560:	50                   	push   eax
c0013561:	e8 88 09 00 00       	call   c0013eee <Device::Device(char const*)>
c0013566:	83 c4 10             	add    esp,0x10
c0013569:	ba f4 af 02 c0       	mov    edx,0xc002aff4
c001356e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013572:	89 10                	mov    DWORD PTR [eax],edx
c0013574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013578:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013582:	90                   	nop
c0013583:	83 c4 0c             	add    esp,0xc
c0013586:	c3                   	ret    
c0013587:	90                   	nop

c0013588 <Bus::~Bus()>:
c0013588:	83 ec 0c             	sub    esp,0xc
c001358b:	ba f4 af 02 c0       	mov    edx,0xc002aff4
c0013590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013594:	89 10                	mov    DWORD PTR [eax],edx
c0013596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001359a:	83 ec 0c             	sub    esp,0xc
c001359d:	50                   	push   eax
c001359e:	e8 15 06 00 00       	call   c0013bb8 <Device::~Device()>
c00135a3:	83 c4 10             	add    esp,0x10
c00135a6:	90                   	nop
c00135a7:	83 c4 0c             	add    esp,0xc
c00135aa:	c3                   	ret    
c00135ab:	90                   	nop

c00135ac <Bus::~Bus()>:
c00135ac:	83 ec 0c             	sub    esp,0xc
c00135af:	83 ec 0c             	sub    esp,0xc
c00135b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135b6:	e8 cd ff ff ff       	call   c0013588 <Bus::~Bus()>
c00135bb:	83 c4 10             	add    esp,0x10
c00135be:	83 ec 08             	sub    esp,0x8
c00135c1:	68 58 01 00 00       	push   0x158
c00135c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135ca:	e8 0a f2 ff ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c00135cf:	83 c4 10             	add    esp,0x10
c00135d2:	83 c4 0c             	add    esp,0xc
c00135d5:	c3                   	ret    

c00135d6 <Buzzer::Buzzer(char const*)>:
c00135d6:	83 ec 0c             	sub    esp,0xc
c00135d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135dd:	83 ec 08             	sub    esp,0x8
c00135e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135e4:	50                   	push   eax
c00135e5:	e8 04 09 00 00       	call   c0013eee <Device::Device(char const*)>
c00135ea:	83 c4 10             	add    esp,0x10
c00135ed:	ba 20 b0 02 c0       	mov    edx,0xc002b020
c00135f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135f6:	89 10                	mov    DWORD PTR [eax],edx
c00135f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135fc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001360a:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013614:	90                   	nop
c0013615:	83 c4 0c             	add    esp,0xc
c0013618:	c3                   	ret    
c0013619:	90                   	nop

c001361a <Buzzer::~Buzzer()>:
c001361a:	83 ec 0c             	sub    esp,0xc
c001361d:	ba 20 b0 02 c0       	mov    edx,0xc002b020
c0013622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013626:	89 10                	mov    DWORD PTR [eax],edx
c0013628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001362c:	83 ec 0c             	sub    esp,0xc
c001362f:	50                   	push   eax
c0013630:	e8 83 05 00 00       	call   c0013bb8 <Device::~Device()>
c0013635:	83 c4 10             	add    esp,0x10
c0013638:	90                   	nop
c0013639:	83 c4 0c             	add    esp,0xc
c001363c:	c3                   	ret    
c001363d:	90                   	nop

c001363e <Buzzer::~Buzzer()>:
c001363e:	83 ec 0c             	sub    esp,0xc
c0013641:	83 ec 0c             	sub    esp,0xc
c0013644:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013648:	e8 cd ff ff ff       	call   c001361a <Buzzer::~Buzzer()>
c001364d:	83 c4 10             	add    esp,0x10
c0013650:	83 ec 08             	sub    esp,0x8
c0013653:	68 5c 01 00 00       	push   0x15c
c0013658:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001365c:	e8 78 f1 ff ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c0013661:	83 c4 10             	add    esp,0x10
c0013664:	83 c4 0c             	add    esp,0xc
c0013667:	c3                   	ret    

c0013668 <Buzzer::stop()>:
c0013668:	83 ec 14             	sub    esp,0x14
c001366b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001366f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013671:	6a 00                	push   0x0
c0013673:	50                   	push   eax
c0013674:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013677:	83 c4 1c             	add    esp,0x1c
c001367a:	c3                   	ret    

c001367b <beepThread(void*)>:
c001367b:	53                   	push   ebx
c001367c:	83 ec 08             	sub    esp,0x8
c001367f:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c0013684:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013688:	48                   	dec    eax
c0013689:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c001368e:	75 01                	jne    c0013691 <beepThread(void*)+0x16>
c0013690:	fb                   	sti    
c0013691:	50                   	push   eax
c0013692:	50                   	push   eax
c0013693:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013698:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c001369e:	52                   	push   edx
c001369f:	50                   	push   eax
c00136a0:	e8 e6 a9 00 00       	call   c001e08b <nanoSleep(unsigned long long)>
c00136a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00136a8:	e8 bb ff ff ff       	call   c0013668 <Buzzer::stop()>
c00136ad:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00136b5:	83 c4 18             	add    esp,0x18
c00136b8:	5b                   	pop    ebx
c00136b9:	e9 c9 a8 00 00       	jmp    c001df87 <blockTask(TaskState)>

c00136be <Buzzer::beep(int, int, bool)>:
c00136be:	57                   	push   edi
c00136bf:	56                   	push   esi
c00136c0:	53                   	push   ebx
c00136c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00136c9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00136cd:	52                   	push   edx
c00136ce:	52                   	push   edx
c00136cf:	8b 06                	mov    eax,DWORD PTR [esi]
c00136d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136d5:	56                   	push   esi
c00136d6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00136d9:	83 c4 10             	add    esp,0x10
c00136dc:	89 f8                	mov    eax,edi
c00136de:	84 c0                	test   al,al
c00136e0:	74 1f                	je     c0013701 <Buzzer::beep(int, int, bool)+0x43>
c00136e2:	50                   	push   eax
c00136e3:	50                   	push   eax
c00136e4:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00136ea:	99                   	cdq    
c00136eb:	52                   	push   edx
c00136ec:	50                   	push   eax
c00136ed:	e8 99 a9 00 00       	call   c001e08b <nanoSleep(unsigned long long)>
c00136f2:	83 c4 10             	add    esp,0x10
c00136f5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00136f9:	5b                   	pop    ebx
c00136fa:	5e                   	pop    esi
c00136fb:	5f                   	pop    edi
c00136fc:	e9 67 ff ff ff       	jmp    c0013668 <Buzzer::stop()>
c0013701:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013707:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001370c:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013714:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013718:	c7 44 24 14 7b 36 01 c0 	mov    DWORD PTR [esp+0x14],0xc001367b
c0013720:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013724:	5b                   	pop    ebx
c0013725:	5e                   	pop    esi
c0013726:	5f                   	pop    edi
c0013727:	e9 60 a4 00 00       	jmp    c001db8c <Process::createThread(void (*)(void*), void*, int)>

c001372c <User::loadClockSettings(int)>:
c001372c:	53                   	push   ebx
c001372d:	83 ec 14             	sub    esp,0x14
c0013730:	68 14 01 00 00       	push   0x114
c0013735:	e8 1f c1 ff ff       	call   c000f859 <malloc>
c001373a:	83 c4 0c             	add    esp,0xc
c001373d:	89 c3                	mov    ebx,eax
c001373f:	ff 35 30 f9 02 c0    	push   DWORD PTR ds:0xc002f930
c0013745:	68 48 b0 02 c0       	push   0xc002b048
c001374a:	50                   	push   eax
c001374b:	e8 c0 f6 ff ff       	call   c0012e10 <File::File(char const*, Process*)>
c0013750:	58                   	pop    eax
c0013751:	5a                   	pop    edx
c0013752:	6a 01                	push   0x1
c0013754:	53                   	push   ebx
c0013755:	e8 1a f7 ff ff       	call   c0012e74 <File::open(FileOpenMode)>
c001375a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001375d:	e8 70 f7 ff ff       	call   c0012ed2 <File::close()>
c0013762:	83 c4 10             	add    esp,0x10
c0013765:	85 db                	test   ebx,ebx
c0013767:	74 0f                	je     c0013778 <User::loadClockSettings(int)+0x4c>
c0013769:	8b 03                	mov    eax,DWORD PTR [ebx]
c001376b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001376f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013772:	83 c4 08             	add    esp,0x8
c0013775:	5b                   	pop    ebx
c0013776:	ff e0                	jmp    eax
c0013778:	83 c4 08             	add    esp,0x8
c001377b:	5b                   	pop    ebx
c001377c:	c3                   	ret    
c001377d:	90                   	nop

c001377e <Clock::Clock(char const*)>:
c001377e:	83 ec 0c             	sub    esp,0xc
c0013781:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013785:	83 ec 08             	sub    esp,0x8
c0013788:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001378c:	50                   	push   eax
c001378d:	e8 5c 07 00 00       	call   c0013eee <Device::Device(char const*)>
c0013792:	83 c4 10             	add    esp,0x10
c0013795:	ba 70 b0 02 c0       	mov    edx,0xc002b070
c001379a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001379e:	89 10                	mov    DWORD PTR [eax],edx
c00137a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137a4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00137ae:	90                   	nop
c00137af:	83 c4 0c             	add    esp,0xc
c00137b2:	c3                   	ret    
c00137b3:	90                   	nop

c00137b4 <Clock::~Clock()>:
c00137b4:	83 ec 0c             	sub    esp,0xc
c00137b7:	ba 70 b0 02 c0       	mov    edx,0xc002b070
c00137bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137c0:	89 10                	mov    DWORD PTR [eax],edx
c00137c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137c6:	83 ec 0c             	sub    esp,0xc
c00137c9:	50                   	push   eax
c00137ca:	e8 e9 03 00 00       	call   c0013bb8 <Device::~Device()>
c00137cf:	83 c4 10             	add    esp,0x10
c00137d2:	90                   	nop
c00137d3:	83 c4 0c             	add    esp,0xc
c00137d6:	c3                   	ret    
c00137d7:	90                   	nop

c00137d8 <Clock::~Clock()>:
c00137d8:	83 ec 0c             	sub    esp,0xc
c00137db:	83 ec 0c             	sub    esp,0xc
c00137de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137e2:	e8 cd ff ff ff       	call   c00137b4 <Clock::~Clock()>
c00137e7:	83 c4 10             	add    esp,0x10
c00137ea:	83 ec 08             	sub    esp,0x8
c00137ed:	68 58 01 00 00       	push   0x158
c00137f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137f6:	e8 de ef ff ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c00137fb:	83 c4 10             	add    esp,0x10
c00137fe:	83 c4 0c             	add    esp,0xc
c0013801:	c3                   	ret    

c0013802 <Clock::timeInSecondsLocal()>:
c0013802:	53                   	push   ebx
c0013803:	83 ec 14             	sub    esp,0x14
c0013806:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001380a:	8b 10                	mov    edx,DWORD PTR [eax]
c001380c:	50                   	push   eax
c001380d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013810:	0f b6 0d 7c e5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e57c
c0013817:	03 0d 80 e5 02 c0    	add    ecx,DWORD PTR ds:0xc002e580
c001381d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013823:	89 cb                	mov    ebx,ecx
c0013825:	c1 fb 1f             	sar    ebx,0x1f
c0013828:	01 c8                	add    eax,ecx
c001382a:	11 da                	adc    edx,ebx
c001382c:	83 c4 10             	add    esp,0x10
c001382f:	31 c9                	xor    ecx,ecx
c0013831:	80 3d 7d e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e57d,0x0
c0013838:	74 05                	je     c001383f <Clock::timeInSecondsLocal()+0x3d>
c001383a:	b9 08 07 00 00       	mov    ecx,0x708
c001383f:	31 db                	xor    ebx,ebx
c0013841:	01 c8                	add    eax,ecx
c0013843:	11 da                	adc    edx,ebx
c0013845:	83 c4 08             	add    esp,0x8
c0013848:	5b                   	pop    ebx
c0013849:	c3                   	ret    

c001384a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001384a:	57                   	push   edi
c001384b:	56                   	push   esi
c001384c:	53                   	push   ebx
c001384d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013851:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013855:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013857:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001385b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001385e:	0f b6 05 7c e5 02 c0 	movzx  eax,BYTE PTR ds:0xc002e57c
c0013865:	03 05 80 e5 02 c0    	add    eax,DWORD PTR ds:0xc002e580
c001386b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013871:	99                   	cdq    
c0013872:	29 c6                	sub    esi,eax
c0013874:	19 d7                	sbb    edi,edx
c0013876:	89 f0                	mov    eax,esi
c0013878:	89 fa                	mov    edx,edi
c001387a:	31 f6                	xor    esi,esi
c001387c:	80 3d 7d e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e57d,0x0
c0013883:	74 05                	je     c001388a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013885:	be 08 07 00 00       	mov    esi,0x708
c001388a:	31 ff                	xor    edi,edi
c001388c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013890:	29 f0                	sub    eax,esi
c0013892:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013896:	19 fa                	sbb    edx,edi
c0013898:	89 d8                	mov    eax,ebx
c001389a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001389e:	5b                   	pop    ebx
c001389f:	5e                   	pop    esi
c00138a0:	5f                   	pop    edi
c00138a1:	ff e0                	jmp    eax

c00138a3 <datetimeToSeconds(datetime_t)>:
c00138a3:	55                   	push   ebp
c00138a4:	57                   	push   edi
c00138a5:	56                   	push   esi
c00138a6:	53                   	push   ebx
c00138a7:	83 ec 14             	sub    esp,0x14
c00138aa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00138ae:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00138b2:	89 d3                	mov    ebx,edx
c00138b4:	0f b6 c6             	movzx  eax,dh
c00138b7:	c1 eb 10             	shr    ebx,0x10
c00138ba:	48                   	dec    eax
c00138bb:	66 81 eb 6c 07       	sub    bx,0x76c
c00138c0:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00138c4:	0f b6 f5             	movzx  esi,ch
c00138c7:	89 cf                	mov    edi,ecx
c00138c9:	6b f6 3c             	imul   esi,esi,0x3c
c00138cc:	c1 ef 10             	shr    edi,0x10
c00138cf:	0f b6 c9             	movzx  ecx,cl
c00138d2:	89 f8                	mov    eax,edi
c00138d4:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00138da:	0f b6 f8             	movzx  edi,al
c00138dd:	0f b6 d2             	movzx  edx,dl
c00138e0:	01 fe                	add    esi,edi
c00138e2:	01 f1                	add    ecx,esi
c00138e4:	0f b7 f3             	movzx  esi,bx
c00138e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00138eb:	c1 f9 1f             	sar    ecx,0x1f
c00138ee:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c00138f3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00138f7:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c00138fc:	8b 0c 8d c0 b0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4f40]
c0013903:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013907:	76 29                	jbe    c0013932 <datetimeToSeconds(datetime_t)+0x8f>
c0013909:	f6 c3 03             	test   bl,0x3
c001390c:	75 24                	jne    c0013932 <datetimeToSeconds(datetime_t)+0x8f>
c001390e:	31 d2                	xor    edx,edx
c0013910:	bf 64 00 00 00       	mov    edi,0x64
c0013915:	89 d8                	mov    eax,ebx
c0013917:	66 f7 f7             	div    di
c001391a:	66 85 d2             	test   dx,dx
c001391d:	75 12                	jne    c0013931 <datetimeToSeconds(datetime_t)+0x8e>
c001391f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013925:	bf 90 01 00 00       	mov    edi,0x190
c001392a:	99                   	cdq    
c001392b:	f7 ff                	idiv   edi
c001392d:	85 d2                	test   edx,edx
c001392f:	75 01                	jne    c0013932 <datetimeToSeconds(datetime_t)+0x8f>
c0013931:	41                   	inc    ecx
c0013932:	66 83 fb 46          	cmp    bx,0x46
c0013936:	76 45                	jbe    c001397d <datetimeToSeconds(datetime_t)+0xda>
c0013938:	bb 46 00 00 00       	mov    ebx,0x46
c001393d:	bf 64 00 00 00       	mov    edi,0x64
c0013942:	bd 90 01 00 00       	mov    ebp,0x190
c0013947:	b8 6d 01 00 00       	mov    eax,0x16d
c001394c:	f6 c3 03             	test   bl,0x3
c001394f:	75 23                	jne    c0013974 <datetimeToSeconds(datetime_t)+0xd1>
c0013951:	89 d8                	mov    eax,ebx
c0013953:	99                   	cdq    
c0013954:	f7 ff                	idiv   edi
c0013956:	b8 6e 01 00 00       	mov    eax,0x16e
c001395b:	85 d2                	test   edx,edx
c001395d:	75 15                	jne    c0013974 <datetimeToSeconds(datetime_t)+0xd1>
c001395f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013965:	99                   	cdq    
c0013966:	f7 fd                	idiv   ebp
c0013968:	83 fa 01             	cmp    edx,0x1
c001396b:	19 c0                	sbb    eax,eax
c001396d:	f7 d0                	not    eax
c001396f:	05 6e 01 00 00       	add    eax,0x16e
c0013974:	01 c1                	add    ecx,eax
c0013976:	43                   	inc    ebx
c0013977:	39 f3                	cmp    ebx,esi
c0013979:	7c cc                	jl     c0013947 <datetimeToSeconds(datetime_t)+0xa4>
c001397b:	eb 35                	jmp    c00139b2 <datetimeToSeconds(datetime_t)+0x10f>
c001397d:	74 33                	je     c00139b2 <datetimeToSeconds(datetime_t)+0x10f>
c001397f:	b8 45 00 00 00       	mov    eax,0x45
c0013984:	89 c2                	mov    edx,eax
c0013986:	83 e2 03             	and    edx,0x3
c0013989:	39 f0                	cmp    eax,esi
c001398b:	7e 0f                	jle    c001399c <datetimeToSeconds(datetime_t)+0xf9>
c001398d:	83 fa 01             	cmp    edx,0x1
c0013990:	19 d2                	sbb    edx,edx
c0013992:	48                   	dec    eax
c0013993:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001399a:	eb e8                	jmp    c0013984 <datetimeToSeconds(datetime_t)+0xe1>
c001399c:	b8 6d 01 00 00       	mov    eax,0x16d
c00139a1:	85 d2                	test   edx,edx
c00139a3:	75 0b                	jne    c00139b0 <datetimeToSeconds(datetime_t)+0x10d>
c00139a5:	66 83 fb 01          	cmp    bx,0x1
c00139a9:	19 c0                	sbb    eax,eax
c00139ab:	05 6e 01 00 00       	add    eax,0x16e
c00139b0:	29 c1                	sub    ecx,eax
c00139b2:	b8 80 51 01 00       	mov    eax,0x15180
c00139b7:	f7 e9                	imul   ecx
c00139b9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00139bd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00139c1:	83 c4 14             	add    esp,0x14
c00139c4:	5b                   	pop    ebx
c00139c5:	5e                   	pop    esi
c00139c6:	5f                   	pop    edi
c00139c7:	5d                   	pop    ebp
c00139c8:	c3                   	ret    
c00139c9:	90                   	nop

c00139ca <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00139ca:	57                   	push   edi
c00139cb:	56                   	push   esi
c00139cc:	53                   	push   ebx
c00139cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00139d1:	8b 06                	mov    eax,DWORD PTR [esi]
c00139d3:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00139d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139de:	e8 c0 fe ff ff       	call   c00138a3 <datetimeToSeconds(datetime_t)>
c00139e3:	59                   	pop    ecx
c00139e4:	0f b6 0d 7c e5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e57c
c00139eb:	5b                   	pop    ebx
c00139ec:	03 0d 80 e5 02 c0    	add    ecx,DWORD PTR ds:0xc002e580
c00139f2:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00139f8:	89 cb                	mov    ebx,ecx
c00139fa:	c1 fb 1f             	sar    ebx,0x1f
c00139fd:	29 c8                	sub    eax,ecx
c00139ff:	19 da                	sbb    edx,ebx
c0013a01:	31 c9                	xor    ecx,ecx
c0013a03:	80 3d 7d e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e57d,0x0
c0013a0a:	74 05                	je     c0013a11 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013a0c:	b9 08 07 00 00       	mov    ecx,0x708
c0013a11:	31 db                	xor    ebx,ebx
c0013a13:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013a17:	29 c8                	sub    eax,ecx
c0013a19:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a1d:	19 da                	sbb    edx,ebx
c0013a1f:	89 f8                	mov    eax,edi
c0013a21:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013a25:	5b                   	pop    ebx
c0013a26:	5e                   	pop    esi
c0013a27:	5f                   	pop    edi
c0013a28:	ff e0                	jmp    eax

c0013a2a <secondsToDatetime(unsigned long long)>:
c0013a2a:	55                   	push   ebp
c0013a2b:	57                   	push   edi
c0013a2c:	56                   	push   esi
c0013a2d:	53                   	push   ebx
c0013a2e:	83 ec 1c             	sub    esp,0x1c
c0013a31:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013a35:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013a39:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013a3d:	6a 00                	push   0x0
c0013a3f:	68 80 51 01 00       	push   0x15180
c0013a44:	55                   	push   ebp
c0013a45:	57                   	push   edi
c0013a46:	e8 09 32 01 00       	call   c0026c54 <__udivdi3>
c0013a4b:	83 c4 10             	add    esp,0x10
c0013a4e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013a54:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a58:	6a 00                	push   0x0
c0013a5a:	68 80 51 01 00       	push   0x15180
c0013a5f:	55                   	push   ebp
c0013a60:	57                   	push   edi
c0013a61:	bf 10 0e 00 00       	mov    edi,0xe10
c0013a66:	e8 e9 32 01 00       	call   c0026d54 <__umoddi3>
c0013a6b:	83 c4 10             	add    esp,0x10
c0013a6e:	99                   	cdq    
c0013a6f:	f7 ff                	idiv   edi
c0013a71:	bf 3c 00 00 00       	mov    edi,0x3c
c0013a76:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013a79:	89 d0                	mov    eax,edx
c0013a7b:	99                   	cdq    
c0013a7c:	f7 ff                	idiv   edi
c0013a7e:	85 db                	test   ebx,ebx
c0013a80:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013a83:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013a86:	79 11                	jns    c0013a99 <secondsToDatetime(unsigned long long)+0x6f>
c0013a88:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013a8c:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013a92:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013a97:	eb 07                	jmp    c0013aa0 <secondsToDatetime(unsigned long long)+0x76>
c0013a99:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013a9e:	89 d8                	mov    eax,ebx
c0013aa0:	bf b4 05 00 00       	mov    edi,0x5b4
c0013aa5:	99                   	cdq    
c0013aa6:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013aab:	f7 f9                	idiv   ecx
c0013aad:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013ab2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013ab6:	31 d2                	xor    edx,edx
c0013ab8:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013ac0:	01 c3                	add    ebx,eax
c0013ac2:	89 d8                	mov    eax,ebx
c0013ac4:	f7 f1                	div    ecx
c0013ac6:	31 d2                	xor    edx,edx
c0013ac8:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013acb:	89 d8                	mov    eax,ebx
c0013acd:	f7 f7                	div    edi
c0013acf:	31 d2                	xor    edx,edx
c0013ad1:	29 c1                	sub    ecx,eax
c0013ad3:	89 d8                	mov    eax,ebx
c0013ad5:	f7 f5                	div    ebp
c0013ad7:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013adc:	29 c1                	sub    ecx,eax
c0013ade:	31 d2                	xor    edx,edx
c0013ae0:	89 c8                	mov    eax,ecx
c0013ae2:	f7 f5                	div    ebp
c0013ae4:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013ae9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013aed:	31 d2                	xor    edx,edx
c0013aef:	89 c8                	mov    eax,ecx
c0013af1:	f7 f5                	div    ebp
c0013af3:	31 d2                	xor    edx,edx
c0013af5:	01 c3                	add    ebx,eax
c0013af7:	89 c8                	mov    eax,ecx
c0013af9:	f7 f7                	div    edi
c0013afb:	bf 99 00 00 00       	mov    edi,0x99
c0013b00:	29 c3                	sub    ebx,eax
c0013b02:	31 d2                	xor    edx,edx
c0013b04:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013b0c:	29 c3                	sub    ebx,eax
c0013b0e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013b11:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013b14:	bb 05 00 00 00       	mov    ebx,0x5
c0013b19:	83 c1 02             	add    ecx,0x2
c0013b1c:	89 c8                	mov    eax,ecx
c0013b1e:	f7 f7                	div    edi
c0013b20:	31 d2                	xor    edx,edx
c0013b22:	89 c7                	mov    edi,eax
c0013b24:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013b2a:	83 c0 02             	add    eax,0x2
c0013b2d:	f7 f3                	div    ebx
c0013b2f:	89 eb                	mov    ebx,ebp
c0013b31:	29 c3                	sub    ebx,eax
c0013b33:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013b39:	88 1e                	mov    BYTE PTR [esi],bl
c0013b3b:	19 c0                	sbb    eax,eax
c0013b3d:	31 d2                	xor    edx,edx
c0013b3f:	83 e0 0c             	and    eax,0xc
c0013b42:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013b46:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013b4e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013b52:	83 f9 01             	cmp    ecx,0x1
c0013b55:	0f 96 c2             	setbe  dl
c0013b58:	41                   	inc    ecx
c0013b59:	01 d0                	add    eax,edx
c0013b5b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013b5e:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013b62:	83 c4 1c             	add    esp,0x1c
c0013b65:	89 f0                	mov    eax,esi
c0013b67:	5b                   	pop    ebx
c0013b68:	5e                   	pop    esi
c0013b69:	5f                   	pop    edi
c0013b6a:	5d                   	pop    ebp
c0013b6b:	c2 04 00             	ret    0x4

c0013b6e <Clock::timeInDatetimeLocal()>:
c0013b6e:	53                   	push   ebx
c0013b6f:	83 ec 14             	sub    esp,0x14
c0013b72:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b76:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013b7a:	e8 83 fc ff ff       	call   c0013802 <Clock::timeInSecondsLocal()>
c0013b7f:	83 c4 0c             	add    esp,0xc
c0013b82:	52                   	push   edx
c0013b83:	50                   	push   eax
c0013b84:	53                   	push   ebx
c0013b85:	e8 a0 fe ff ff       	call   c0013a2a <secondsToDatetime(unsigned long long)>
c0013b8a:	89 d8                	mov    eax,ebx
c0013b8c:	83 c4 14             	add    esp,0x14
c0013b8f:	5b                   	pop    ebx
c0013b90:	c2 04 00             	ret    0x4
c0013b93:	90                   	nop

c0013b94 <Device::hibernate()>:
c0013b94:	c3                   	ret    
c0013b95:	90                   	nop

c0013b96 <Device::wake()>:
c0013b96:	c3                   	ret    
c0013b97:	90                   	nop

c0013b98 <Device::detect()>:
c0013b98:	c3                   	ret    
c0013b99:	90                   	nop

c0013b9a <Device::disableLegacy()>:
c0013b9a:	c3                   	ret    
c0013b9b:	90                   	nop

c0013b9c <Device::powerSaving(PowerSavingLevel)>:
c0013b9c:	c3                   	ret    
c0013b9d:	90                   	nop

c0013b9e <DriverlessDevice::close(int, int, void*)>:
c0013b9e:	31 c0                	xor    eax,eax
c0013ba0:	c3                   	ret    
c0013ba1:	90                   	nop

c0013ba2 <DriverlessDevice::detect()>:
c0013ba2:	c3                   	ret    
c0013ba3:	90                   	nop

c0013ba4 <DriverlessDevice::open(int, int, void*)>:
c0013ba4:	83 ec 18             	sub    esp,0x18
c0013ba7:	68 f0 b0 02 c0       	push   0xc002b0f0
c0013bac:	e8 6e 66 00 00       	call   c001a21f <Krnl::panic(char const*)>
c0013bb1:	83 c8 ff             	or     eax,0xffffffff
c0013bb4:	83 c4 1c             	add    esp,0x1c
c0013bb7:	c3                   	ret    

c0013bb8 <Device::~Device()>:
c0013bb8:	ba 50 b1 02 c0       	mov    edx,0xc002b150
c0013bbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013bc1:	89 10                	mov    DWORD PTR [eax],edx
c0013bc3:	90                   	nop
c0013bc4:	c3                   	ret    
c0013bc5:	90                   	nop

c0013bc6 <Device::~Device()>:
c0013bc6:	83 ec 0c             	sub    esp,0xc
c0013bc9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013bcd:	e8 e6 ff ff ff       	call   c0013bb8 <Device::~Device()>
c0013bd2:	83 c4 04             	add    esp,0x4
c0013bd5:	83 ec 08             	sub    esp,0x8
c0013bd8:	68 58 01 00 00       	push   0x158
c0013bdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013be1:	e8 f3 eb ff ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c0013be6:	83 c4 10             	add    esp,0x10
c0013be9:	83 c4 0c             	add    esp,0xc
c0013bec:	c3                   	ret    
c0013bed:	90                   	nop

c0013bee <Device::findAndLoadDriver()>:
c0013bee:	c7 44 24 04 0e b1 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b10e
c0013bf6:	e9 b6 ec ff ff       	jmp    c00128b1 <Dbg::kprintf(char const*, ...)>
c0013bfb:	90                   	nop

c0013bfc <Device::preOpenPCI(PCIDeviceInfo)>:
c0013bfc:	57                   	push   edi
c0013bfd:	b9 09 00 00 00       	mov    ecx,0x9
c0013c02:	56                   	push   esi
c0013c03:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013c07:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013c0b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013c15:	81 c7 18 01 00 00    	add    edi,0x118
c0013c1b:	fc                   	cld    
c0013c1c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013c1e:	5e                   	pop    esi
c0013c1f:	5f                   	pop    edi
c0013c20:	c3                   	ret    
c0013c21:	90                   	nop

c0013c22 <Device::preOpenACPI(void*, char*, char*)>:
c0013c22:	57                   	push   edi
c0013c23:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013c28:	56                   	push   esi
c0013c29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013c2d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c31:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013c3b:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013c41:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013c47:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013c4b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013c4d:	b9 0e 00 00 00       	mov    ecx,0xe
c0013c52:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013c58:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013c5c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013c5e:	5e                   	pop    esi
c0013c5f:	5f                   	pop    edi
c0013c60:	c3                   	ret    
c0013c61:	90                   	nop

c0013c62 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013c62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c66:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013c6b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013c72:	75 0b                	jne    c0013c7f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013c74:	8b 00                	mov    eax,DWORD PTR [eax]
c0013c76:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013c7a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013c7d:	eb 1e                	jmp    c0013c9d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013c7f:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0013c84:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013c8a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013c90:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013c92:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013c96:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013c9a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013c9d:	ff e0                	jmp    eax
c0013c9f:	90                   	nop

c0013ca0 <Device::getParent()>:
c0013ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ca4:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013caa:	c3                   	ret    
c0013cab:	90                   	nop

c0013cac <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013cac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013cb0:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013cb5:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013cbc:	75 0b                	jne    c0013cc9 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013cbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0013cc0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cc4:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013cc7:	eb 1e                	jmp    c0013ce7 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013cc9:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0013cce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013cd4:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013cda:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013cdc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013ce0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013ce4:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013ce7:	ff e0                	jmp    eax
c0013ce9:	90                   	nop

c0013cea <Device::addChild(Device*)>:
c0013cea:	53                   	push   ebx
c0013ceb:	83 ec 08             	sub    esp,0x8
c0013cee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013cf2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cf6:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013cfc:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013d02:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013d04:	85 d2                	test   edx,edx
c0013d06:	74 04                	je     c0013d0c <Device::addChild(Device*)+0x22>
c0013d08:	89 d3                	mov    ebx,edx
c0013d0a:	eb f6                	jmp    c0013d02 <Device::addChild(Device*)+0x18>
c0013d0c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013d0f:	83 ec 0c             	sub    esp,0xc
c0013d12:	6a 08                	push   0x8
c0013d14:	e8 40 bb ff ff       	call   c000f859 <malloc>
c0013d19:	89 03                	mov    DWORD PTR [ebx],eax
c0013d1b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d21:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d28:	83 c4 18             	add    esp,0x18
c0013d2b:	5b                   	pop    ebx
c0013d2c:	c3                   	ret    
c0013d2d:	90                   	nop

c0013d2e <Device::removeAllChildren()>:
c0013d2e:	56                   	push   esi
c0013d2f:	53                   	push   ebx
c0013d30:	52                   	push   edx
c0013d31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d35:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013d3b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d3e:	74 17                	je     c0013d57 <Device::removeAllChildren()+0x29>
c0013d40:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013d43:	85 c0                	test   eax,eax
c0013d45:	74 0c                	je     c0013d53 <Device::removeAllChildren()+0x25>
c0013d47:	83 ec 0c             	sub    esp,0xc
c0013d4a:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d4c:	50                   	push   eax
c0013d4d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013d50:	83 c4 10             	add    esp,0x10
c0013d53:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d55:	eb e4                	jmp    c0013d3b <Device::removeAllChildren()+0xd>
c0013d57:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d5d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d63:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d69:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d70:	58                   	pop    eax
c0013d71:	5b                   	pop    ebx
c0013d72:	5e                   	pop    esi
c0013d73:	c3                   	ret    

c0013d74 <Device::hibernateAll()>:
c0013d74:	53                   	push   ebx
c0013d75:	83 ec 14             	sub    esp,0x14
c0013d78:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d7e:	53                   	push   ebx
c0013d7f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013d82:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d88:	83 c4 10             	add    esp,0x10
c0013d8b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d8e:	74 0f                	je     c0013d9f <Device::hibernateAll()+0x2b>
c0013d90:	83 ec 0c             	sub    esp,0xc
c0013d93:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d96:	e8 d9 ff ff ff       	call   c0013d74 <Device::hibernateAll()>
c0013d9b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d9d:	eb e9                	jmp    c0013d88 <Device::hibernateAll()+0x14>
c0013d9f:	83 c4 08             	add    esp,0x8
c0013da2:	5b                   	pop    ebx
c0013da3:	c3                   	ret    

c0013da4 <Device::wakeAll()>:
c0013da4:	53                   	push   ebx
c0013da5:	83 ec 14             	sub    esp,0x14
c0013da8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013dac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dae:	53                   	push   ebx
c0013daf:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013db2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013db8:	83 c4 10             	add    esp,0x10
c0013dbb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013dbe:	74 0f                	je     c0013dcf <Device::wakeAll()+0x2b>
c0013dc0:	83 ec 0c             	sub    esp,0xc
c0013dc3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013dc6:	e8 d9 ff ff ff       	call   c0013da4 <Device::wakeAll()>
c0013dcb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013dcd:	eb e9                	jmp    c0013db8 <Device::wakeAll()+0x14>
c0013dcf:	83 c4 08             	add    esp,0x8
c0013dd2:	5b                   	pop    ebx
c0013dd3:	c3                   	ret    

c0013dd4 <Device::detectAll()>:
c0013dd4:	53                   	push   ebx
c0013dd5:	83 ec 14             	sub    esp,0x14
c0013dd8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ddc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dde:	53                   	push   ebx
c0013ddf:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013de2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013de8:	83 c4 10             	add    esp,0x10
c0013deb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013dee:	74 0f                	je     c0013dff <Device::detectAll()+0x2b>
c0013df0:	83 ec 0c             	sub    esp,0xc
c0013df3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013df6:	e8 d9 ff ff ff       	call   c0013dd4 <Device::detectAll()>
c0013dfb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013dfd:	eb e9                	jmp    c0013de8 <Device::detectAll()+0x14>
c0013dff:	83 c4 08             	add    esp,0x8
c0013e02:	5b                   	pop    ebx
c0013e03:	c3                   	ret    

c0013e04 <Device::disableLegacyAll()>:
c0013e04:	53                   	push   ebx
c0013e05:	83 ec 14             	sub    esp,0x14
c0013e08:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e0e:	53                   	push   ebx
c0013e0f:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013e12:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e18:	83 c4 10             	add    esp,0x10
c0013e1b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e1e:	74 0f                	je     c0013e2f <Device::disableLegacyAll()+0x2b>
c0013e20:	83 ec 0c             	sub    esp,0xc
c0013e23:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e26:	e8 d9 ff ff ff       	call   c0013e04 <Device::disableLegacyAll()>
c0013e2b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e2d:	eb e9                	jmp    c0013e18 <Device::disableLegacyAll()+0x14>
c0013e2f:	83 c4 08             	add    esp,0x8
c0013e32:	5b                   	pop    ebx
c0013e33:	c3                   	ret    

c0013e34 <Device::loadDriversForAll()>:
c0013e34:	53                   	push   ebx
c0013e35:	83 ec 08             	sub    esp,0x8
c0013e38:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e3c:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013e43:	75 0c                	jne    c0013e51 <Device::loadDriversForAll()+0x1d>
c0013e45:	83 ec 0c             	sub    esp,0xc
c0013e48:	53                   	push   ebx
c0013e49:	e8 a0 fd ff ff       	call   c0013bee <Device::findAndLoadDriver()>
c0013e4e:	83 c4 10             	add    esp,0x10
c0013e51:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e57:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e5a:	74 12                	je     c0013e6e <Device::loadDriversForAll()+0x3a>
c0013e5c:	83 ec 0c             	sub    esp,0xc
c0013e5f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e62:	e8 cd ff ff ff       	call   c0013e34 <Device::loadDriversForAll()>
c0013e67:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e69:	83 c4 10             	add    esp,0x10
c0013e6c:	eb e9                	jmp    c0013e57 <Device::loadDriversForAll()+0x23>
c0013e6e:	83 c4 08             	add    esp,0x8
c0013e71:	5b                   	pop    ebx
c0013e72:	c3                   	ret    
c0013e73:	90                   	nop

c0013e74 <Device::closeAll()>:
c0013e74:	53                   	push   ebx
c0013e75:	83 ec 08             	sub    esp,0x8
c0013e78:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e7e:	6a 00                	push   0x0
c0013e80:	6a 00                	push   0x0
c0013e82:	6a 00                	push   0x0
c0013e84:	53                   	push   ebx
c0013e85:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e88:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e8e:	83 c4 10             	add    esp,0x10
c0013e91:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e94:	74 0f                	je     c0013ea5 <Device::closeAll()+0x31>
c0013e96:	83 ec 0c             	sub    esp,0xc
c0013e99:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e9c:	e8 d3 ff ff ff       	call   c0013e74 <Device::closeAll()>
c0013ea1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ea3:	eb e9                	jmp    c0013e8e <Device::closeAll()+0x1a>
c0013ea5:	83 c4 08             	add    esp,0x8
c0013ea8:	5b                   	pop    ebx
c0013ea9:	c3                   	ret    

c0013eaa <Device::powerSavingAll(PowerSavingLevel)>:
c0013eaa:	56                   	push   esi
c0013eab:	53                   	push   ebx
c0013eac:	83 ec 0c             	sub    esp,0xc
c0013eaf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013eb3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013eb7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013eb9:	56                   	push   esi
c0013eba:	53                   	push   ebx
c0013ebb:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013ebe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ec4:	83 c4 10             	add    esp,0x10
c0013ec7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013eca:	74 0f                	je     c0013edb <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013ecc:	52                   	push   edx
c0013ecd:	52                   	push   edx
c0013ece:	56                   	push   esi
c0013ecf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ed2:	e8 d3 ff ff ff       	call   c0013eaa <Device::powerSavingAll(PowerSavingLevel)>
c0013ed7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ed9:	eb e9                	jmp    c0013ec4 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013edb:	58                   	pop    eax
c0013edc:	5b                   	pop    ebx
c0013edd:	5e                   	pop    esi
c0013ede:	c3                   	ret    
c0013edf:	90                   	nop

c0013ee0 <Device::setName(char const*)>:
c0013ee0:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013ee8:	e9 1f c9 fe ff       	jmp    c000080c <strcpy>
c0013eed:	90                   	nop

c0013eee <Device::Device(char const*)>:
c0013eee:	83 ec 1c             	sub    esp,0x1c
c0013ef1:	ba 50 b1 02 c0       	mov    edx,0xc002b150
c0013ef6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013efa:	89 10                	mov    DWORD PTR [eax],edx
c0013efc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f00:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013f0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f0e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013f18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f1c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013f26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f2a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013f34:	83 ec 08             	sub    esp,0x8
c0013f37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f3f:	e8 9c ff ff ff       	call   c0013ee0 <Device::setName(char const*)>
c0013f44:	83 c4 10             	add    esp,0x10
c0013f47:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013f4f:	83 ec 0c             	sub    esp,0xc
c0013f52:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f56:	e8 fe b8 ff ff       	call   c000f859 <malloc>
c0013f5b:	83 c4 10             	add    esp,0x10
c0013f5e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f64:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f6b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013f6f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013f75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f79:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013f7f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f89:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013f8f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f9a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013fa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fa5:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013fac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fb0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013fba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fbe:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013fc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fcc:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013fd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fda:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013fe4:	90                   	nop
c0013fe5:	83 c4 1c             	add    esp,0x1c
c0013fe8:	c3                   	ret    
c0013fe9:	90                   	nop

c0013fea <Device::getName()>:
c0013fea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013fee:	05 d0 00 00 00       	add    eax,0xd0
c0013ff3:	c3                   	ret    

c0013ff4 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013ff4:	83 ec 0c             	sub    esp,0xc
c0013ff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ffb:	83 ec 08             	sub    esp,0x8
c0013ffe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014002:	50                   	push   eax
c0014003:	e8 e6 fe ff ff       	call   c0013eee <Device::Device(char const*)>
c0014008:	83 c4 10             	add    esp,0x10
c001400b:	ba 7c b1 02 c0       	mov    edx,0xc002b17c
c0014010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014014:	89 10                	mov    DWORD PTR [eax],edx
c0014016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001401a:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014024:	90                   	nop
c0014025:	83 c4 0c             	add    esp,0xc
c0014028:	c3                   	ret    
c0014029:	90                   	nop

c001402a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001402a:	57                   	push   edi
c001402b:	56                   	push   esi
c001402c:	53                   	push   ebx
c001402d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014031:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014035:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014039:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001403f:	75 0c                	jne    c001404d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014041:	52                   	push   edx
c0014042:	52                   	push   edx
c0014043:	53                   	push   ebx
c0014044:	56                   	push   esi
c0014045:	e8 46 4b 01 00       	call   c0028b90 <LinkedList<Device>::addElement(Device*)>
c001404a:	83 c4 10             	add    esp,0x10
c001404d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014053:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014056:	74 12                	je     c001406a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014058:	50                   	push   eax
c0014059:	57                   	push   edi
c001405a:	56                   	push   esi
c001405b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001405e:	e8 c7 ff ff ff       	call   c001402a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014063:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014065:	83 c4 10             	add    esp,0x10
c0014068:	eb e9                	jmp    c0014053 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001406a:	5b                   	pop    ebx
c001406b:	5e                   	pop    esi
c001406c:	5f                   	pop    edi
c001406d:	c3                   	ret    

c001406e <getDevicesOfType(DeviceType)>:
c001406e:	53                   	push   ebx
c001406f:	83 ec 14             	sub    esp,0x14
c0014072:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014076:	53                   	push   ebx
c0014077:	e8 f0 4b 01 00       	call   c0028c6c <LinkedList<Device>::LinkedList()>
c001407c:	83 c4 0c             	add    esp,0xc
c001407f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014083:	53                   	push   ebx
c0014084:	ff 35 08 e4 02 c0    	push   DWORD PTR ds:0xc002e408
c001408a:	e8 9b ff ff ff       	call   c001402a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001408f:	89 d8                	mov    eax,ebx
c0014091:	83 c4 18             	add    esp,0x18
c0014094:	5b                   	pop    ebx
c0014095:	c2 04 00             	ret    0x4

c0014098 <HardDiskController::HardDiskController(char const*)>:
c0014098:	83 ec 0c             	sub    esp,0xc
c001409b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001409f:	83 ec 08             	sub    esp,0x8
c00140a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140a6:	50                   	push   eax
c00140a7:	e8 42 fe ff ff       	call   c0013eee <Device::Device(char const*)>
c00140ac:	83 c4 10             	add    esp,0x10
c00140af:	ba a8 b1 02 c0       	mov    edx,0xc002b1a8
c00140b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140b8:	89 10                	mov    DWORD PTR [eax],edx
c00140ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140be:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00140c8:	90                   	nop
c00140c9:	83 c4 0c             	add    esp,0xc
c00140cc:	c3                   	ret    
c00140cd:	90                   	nop

c00140ce <HardDiskController::~HardDiskController()>:
c00140ce:	83 ec 0c             	sub    esp,0xc
c00140d1:	ba a8 b1 02 c0       	mov    edx,0xc002b1a8
c00140d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140da:	89 10                	mov    DWORD PTR [eax],edx
c00140dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140e0:	83 ec 0c             	sub    esp,0xc
c00140e3:	50                   	push   eax
c00140e4:	e8 cf fa ff ff       	call   c0013bb8 <Device::~Device()>
c00140e9:	83 c4 10             	add    esp,0x10
c00140ec:	90                   	nop
c00140ed:	83 c4 0c             	add    esp,0xc
c00140f0:	c3                   	ret    
c00140f1:	90                   	nop

c00140f2 <HardDiskController::~HardDiskController()>:
c00140f2:	83 ec 0c             	sub    esp,0xc
c00140f5:	83 ec 0c             	sub    esp,0xc
c00140f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140fc:	e8 cd ff ff ff       	call   c00140ce <HardDiskController::~HardDiskController()>
c0014101:	83 c4 10             	add    esp,0x10
c0014104:	83 ec 08             	sub    esp,0x8
c0014107:	68 58 01 00 00       	push   0x158
c001410c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014110:	e8 c4 e6 ff ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c0014115:	83 c4 10             	add    esp,0x10
c0014118:	83 c4 0c             	add    esp,0xc
c001411b:	c3                   	ret    

c001411c <PhysicalDisk::eject()>:
c001411c:	83 c8 ff             	or     eax,0xffffffff
c001411f:	c3                   	ret    

c0014120 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014120:	83 ec 0c             	sub    esp,0xc
c0014123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014127:	83 ec 08             	sub    esp,0x8
c001412a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001412e:	50                   	push   eax
c001412f:	e8 ba fd ff ff       	call   c0013eee <Device::Device(char const*)>
c0014134:	83 c4 10             	add    esp,0x10
c0014137:	ba d4 b1 02 c0       	mov    edx,0xc002b1d4
c001413c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014140:	89 10                	mov    DWORD PTR [eax],edx
c0014142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014146:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001414d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014151:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001415c:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014166:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001416a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001416e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014178:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014182:	90                   	nop
c0014183:	83 c4 0c             	add    esp,0xc
c0014186:	c3                   	ret    
c0014187:	90                   	nop

c0014188 <PhysicalDisk::startCache()>:
c0014188:	56                   	push   esi
c0014189:	53                   	push   ebx
c001418a:	83 ec 10             	sub    esp,0x10
c001418d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014191:	6a 44                	push   0x44
c0014193:	e8 c1 b6 ff ff       	call   c000f859 <malloc>
c0014198:	89 c6                	mov    esi,eax
c001419a:	58                   	pop    eax
c001419b:	5a                   	pop    edx
c001419c:	53                   	push   ebx
c001419d:	56                   	push   esi
c001419e:	e8 77 28 00 00       	call   c0016a1a <VCache::VCache(PhysicalDisk*)>
c00141a3:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00141a9:	83 c4 14             	add    esp,0x14
c00141ac:	5b                   	pop    ebx
c00141ad:	5e                   	pop    esi
c00141ae:	c3                   	ret    
c00141af:	90                   	nop

c00141b0 <PhysicalDisk::~PhysicalDisk()>:
c00141b0:	83 ec 0c             	sub    esp,0xc
c00141b3:	ba d4 b1 02 c0       	mov    edx,0xc002b1d4
c00141b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141bc:	89 10                	mov    DWORD PTR [eax],edx
c00141be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141c2:	83 ec 0c             	sub    esp,0xc
c00141c5:	50                   	push   eax
c00141c6:	e8 ed f9 ff ff       	call   c0013bb8 <Device::~Device()>
c00141cb:	83 c4 10             	add    esp,0x10
c00141ce:	90                   	nop
c00141cf:	83 c4 0c             	add    esp,0xc
c00141d2:	c3                   	ret    
c00141d3:	90                   	nop

c00141d4 <PhysicalDisk::~PhysicalDisk()>:
c00141d4:	83 ec 0c             	sub    esp,0xc
c00141d7:	83 ec 0c             	sub    esp,0xc
c00141da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141de:	e8 cd ff ff ff       	call   c00141b0 <PhysicalDisk::~PhysicalDisk()>
c00141e3:	83 c4 10             	add    esp,0x10
c00141e6:	83 ec 08             	sub    esp,0x8
c00141e9:	68 6c 01 00 00       	push   0x16c
c00141ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141f2:	e8 e2 e5 ff ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c00141f7:	83 c4 10             	add    esp,0x10
c00141fa:	83 c4 0c             	add    esp,0xc
c00141fd:	c3                   	ret    

c00141fe <FPU::FPU(char const*)>:
c00141fe:	83 ec 0c             	sub    esp,0xc
c0014201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014205:	83 ec 08             	sub    esp,0x8
c0014208:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001420c:	50                   	push   eax
c001420d:	e8 dc fc ff ff       	call   c0013eee <Device::Device(char const*)>
c0014212:	83 c4 10             	add    esp,0x10
c0014215:	ba 18 b2 02 c0       	mov    edx,0xc002b218
c001421a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001421e:	89 10                	mov    DWORD PTR [eax],edx
c0014220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014224:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001422e:	90                   	nop
c001422f:	83 c4 0c             	add    esp,0xc
c0014232:	c3                   	ret    
c0014233:	90                   	nop

c0014234 <FPU::~FPU()>:
c0014234:	83 ec 0c             	sub    esp,0xc
c0014237:	ba 18 b2 02 c0       	mov    edx,0xc002b218
c001423c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014240:	89 10                	mov    DWORD PTR [eax],edx
c0014242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014246:	83 ec 0c             	sub    esp,0xc
c0014249:	50                   	push   eax
c001424a:	e8 69 f9 ff ff       	call   c0013bb8 <Device::~Device()>
c001424f:	83 c4 10             	add    esp,0x10
c0014252:	90                   	nop
c0014253:	83 c4 0c             	add    esp,0xc
c0014256:	c3                   	ret    
c0014257:	90                   	nop

c0014258 <FPU::~FPU()>:
c0014258:	83 ec 0c             	sub    esp,0xc
c001425b:	83 ec 0c             	sub    esp,0xc
c001425e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014262:	e8 cd ff ff ff       	call   c0014234 <FPU::~FPU()>
c0014267:	83 c4 10             	add    esp,0x10
c001426a:	83 ec 08             	sub    esp,0x8
c001426d:	68 58 01 00 00       	push   0x158
c0014272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014276:	e8 5e e5 ff ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c001427b:	83 c4 10             	add    esp,0x10
c001427e:	83 c4 0c             	add    esp,0xc
c0014281:	c3                   	ret    

c0014282 <setupFPU()>:
c0014282:	53                   	push   ebx
c0014283:	83 ec 08             	sub    esp,0x8
c0014286:	8b 15 08 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e408
c001428c:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014293:	74 19                	je     c00142ae <setupFPU()+0x2c>
c0014295:	83 ec 0c             	sub    esp,0xc
c0014298:	68 58 01 00 00       	push   0x158
c001429d:	e8 b7 b5 ff ff       	call   c000f859 <malloc>
c00142a2:	89 c3                	mov    ebx,eax
c00142a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00142a7:	e8 2a 15 01 00       	call   c00257d6 <AVX::AVX()>
c00142ac:	eb 5b                	jmp    c0014309 <setupFPU()+0x87>
c00142ae:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00142b4:	84 c0                	test   al,al
c00142b6:	79 19                	jns    c00142d1 <setupFPU()+0x4f>
c00142b8:	83 ec 0c             	sub    esp,0xc
c00142bb:	68 58 01 00 00       	push   0x158
c00142c0:	e8 94 b5 ff ff       	call   c000f859 <malloc>
c00142c5:	89 c3                	mov    ebx,eax
c00142c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00142ca:	e8 2d 16 01 00       	call   c00258fc <SSE::SSE()>
c00142cf:	eb 38                	jmp    c0014309 <setupFPU()+0x87>
c00142d1:	a8 20                	test   al,0x20
c00142d3:	74 19                	je     c00142ee <setupFPU()+0x6c>
c00142d5:	83 ec 0c             	sub    esp,0xc
c00142d8:	68 58 01 00 00       	push   0x158
c00142dd:	e8 77 b5 ff ff       	call   c000f859 <malloc>
c00142e2:	89 c3                	mov    ebx,eax
c00142e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00142e7:	e8 7a 15 01 00       	call   c0025866 <MMX::MMX()>
c00142ec:	eb 1b                	jmp    c0014309 <setupFPU()+0x87>
c00142ee:	a8 10                	test   al,0x10
c00142f0:	74 1c                	je     c001430e <setupFPU()+0x8c>
c00142f2:	83 ec 0c             	sub    esp,0xc
c00142f5:	68 58 01 00 00       	push   0x158
c00142fa:	e8 5a b5 ff ff       	call   c000f859 <malloc>
c00142ff:	89 c3                	mov    ebx,eax
c0014301:	89 04 24             	mov    DWORD PTR [esp],eax
c0014304:	e8 81 16 01 00       	call   c002598a <x87::x87()>
c0014309:	83 c4 10             	add    esp,0x10
c001430c:	eb 24                	jmp    c0014332 <setupFPU()+0xb0>
c001430e:	83 e0 ef             	and    eax,0xffffffef
c0014311:	83 ec 0c             	sub    esp,0xc
c0014314:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001431a:	68 04 b2 02 c0       	push   0xc002b204
c001431f:	e8 8d e5 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0014324:	0f 20 c0             	mov    eax,cr0
c0014327:	83 c8 04             	or     eax,0x4
c001432a:	0f 22 c0             	mov    cr0,eax
c001432d:	31 db                	xor    ebx,ebx
c001432f:	83 c4 10             	add    esp,0x10
c0014332:	89 d8                	mov    eax,ebx
c0014334:	83 c4 08             	add    esp,0x8
c0014337:	5b                   	pop    ebx
c0014338:	c3                   	ret    
c0014339:	90                   	nop

c001433a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001433a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001433e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014342:	c1 e0 04             	shl    eax,0x4
c0014345:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014349:	8d 50 10             	lea    edx,[eax+0x10]
c001434c:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014352:	74 08                	je     c001435c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014354:	83 c0 04             	add    eax,0x4
c0014357:	39 d0                	cmp    eax,edx
c0014359:	75 f1                	jne    c001434c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001435b:	c3                   	ret    
c001435c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014366:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014370:	eb e2                	jmp    c0014354 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014372 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014372:	57                   	push   edi
c0014373:	31 c0                	xor    eax,eax
c0014375:	56                   	push   esi
c0014376:	53                   	push   ebx
c0014377:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001437b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001437f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014383:	89 da                	mov    edx,ebx
c0014385:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014389:	c1 e2 04             	shl    edx,0x4
c001438c:	01 ca                	add    edx,ecx
c001438e:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014396:	74 16                	je     c00143ae <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014398:	40                   	inc    eax
c0014399:	83 f8 04             	cmp    eax,0x4
c001439c:	75 f0                	jne    c001438e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001439e:	c7 44 24 10 48 b2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b248
c00143a6:	5b                   	pop    ebx
c00143a7:	5e                   	pop    esi
c00143a8:	5f                   	pop    edi
c00143a9:	e9 71 5e 00 00       	jmp    c001a21f <Krnl::panic(char const*)>
c00143ae:	8d 04 98             	lea    eax,[eax+ebx*4]
c00143b1:	8d 04 81             	lea    eax,[ecx+eax*4]
c00143b4:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00143ba:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00143c0:	5b                   	pop    ebx
c00143c1:	5e                   	pop    esi
c00143c2:	5f                   	pop    edi
c00143c3:	c3                   	ret    

c00143c4 <doubleFault(regs*, void*)>:
c00143c4:	55                   	push   ebp
c00143c5:	89 e5                	mov    ebp,esp
c00143c7:	83 ec 08             	sub    esp,0x8
c00143ca:	83 ec 0c             	sub    esp,0xc
c00143cd:	68 55 b2 02 c0       	push   0xc002b255
c00143d2:	e8 48 5e 00 00       	call   c001a21f <Krnl::panic(char const*)>
c00143d7:	83 c4 10             	add    esp,0x10
c00143da:	90                   	nop
c00143db:	c9                   	leave  
c00143dc:	c3                   	ret    
c00143dd:	90                   	nop

c00143de <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00143de:	56                   	push   esi
c00143df:	53                   	push   ebx
c00143e0:	50                   	push   eax
c00143e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00143e5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00143e9:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00143ee:	75 35                	jne    c0014425 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00143f0:	8d 43 20             	lea    eax,[ebx+0x20]
c00143f3:	31 d2                	xor    edx,edx
c00143f5:	89 c1                	mov    ecx,eax
c00143f7:	c1 e1 04             	shl    ecx,0x4
c00143fa:	01 f1                	add    ecx,esi
c00143fc:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014404:	74 3e                	je     c0014444 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014406:	42                   	inc    edx
c0014407:	83 fa 04             	cmp    edx,0x4
c001440a:	75 f0                	jne    c00143fc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c001440c:	83 ec 0c             	sub    esp,0xc
c001440f:	68 6f b2 02 c0       	push   0xc002b26f
c0014414:	e8 06 5e 00 00       	call   c001a21f <Krnl::panic(char const*)>
c0014419:	83 c4 10             	add    esp,0x10
c001441c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014421:	5a                   	pop    edx
c0014422:	5b                   	pop    ebx
c0014423:	5e                   	pop    esi
c0014424:	c3                   	ret    
c0014425:	83 ec 0c             	sub    esp,0xc
c0014428:	56                   	push   esi
c0014429:	e8 bc fb ff ff       	call   c0013fea <Device::getName()>
c001442e:	83 c4 10             	add    esp,0x10
c0014431:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014434:	75 ba                	jne    c00143f0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014436:	83 fb 0f             	cmp    ebx,0xf
c0014439:	7f 29                	jg     c0014464 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c001443b:	0f b6 9b 60 d6 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd29a0]
c0014442:	eb ac                	jmp    c00143f0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014444:	8d 04 82             	lea    eax,[edx+eax*4]
c0014447:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001444b:	8d 04 86             	lea    eax,[esi+eax*4]
c001444e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014454:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014458:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c001445e:	89 d8                	mov    eax,ebx
c0014460:	5a                   	pop    edx
c0014461:	5b                   	pop    ebx
c0014462:	5e                   	pop    esi
c0014463:	c3                   	ret    
c0014464:	83 ec 0c             	sub    esp,0xc
c0014467:	68 62 b2 02 c0       	push   0xc002b262
c001446c:	e8 ae 5d 00 00       	call   c001a21f <Krnl::panic(char const*)>
c0014471:	83 c4 10             	add    esp,0x10
c0014474:	e9 77 ff ff ff       	jmp    c00143f0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014479:	90                   	nop

c001447a <InterruptController::clearAllHandlers(int, bool)>:
c001447a:	56                   	push   esi
c001447b:	53                   	push   ebx
c001447c:	52                   	push   edx
c001447d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014481:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014485:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001448a:	75 61                	jne    c00144ed <InterruptController::clearAllHandlers(int, bool)+0x73>
c001448c:	8d 46 20             	lea    eax,[esi+0x20]
c001448f:	c1 e6 04             	shl    esi,0x4
c0014492:	c1 e0 04             	shl    eax,0x4
c0014495:	01 de                	add    esi,ebx
c0014497:	01 d8                	add    eax,ebx
c0014499:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00144a3:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00144ad:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00144b7:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00144c1:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00144cb:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00144d5:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00144df:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00144e9:	58                   	pop    eax
c00144ea:	5b                   	pop    ebx
c00144eb:	5e                   	pop    esi
c00144ec:	c3                   	ret    
c00144ed:	83 ec 0c             	sub    esp,0xc
c00144f0:	53                   	push   ebx
c00144f1:	e8 f4 fa ff ff       	call   c0013fea <Device::getName()>
c00144f6:	83 c4 10             	add    esp,0x10
c00144f9:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00144fc:	75 8e                	jne    c001448c <InterruptController::clearAllHandlers(int, bool)+0x12>
c00144fe:	83 fe 0f             	cmp    esi,0xf
c0014501:	7f 09                	jg     c001450c <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014503:	0f b6 b6 60 d6 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd29a0]
c001450a:	eb 80                	jmp    c001448c <InterruptController::clearAllHandlers(int, bool)+0x12>
c001450c:	83 ec 0c             	sub    esp,0xc
c001450f:	68 7c b2 02 c0       	push   0xc002b27c
c0014514:	e8 06 5d 00 00       	call   c001a21f <Krnl::panic(char const*)>
c0014519:	83 c4 10             	add    esp,0x10
c001451c:	e9 6b ff ff ff       	jmp    c001448c <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014521:	90                   	nop

c0014522 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014522:	56                   	push   esi
c0014523:	53                   	push   ebx
c0014524:	52                   	push   edx
c0014525:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014529:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001452d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014532:	75 3a                	jne    c001456e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014534:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014538:	8d 50 20             	lea    edx,[eax+0x20]
c001453b:	c1 e2 04             	shl    edx,0x4
c001453e:	8d 04 16             	lea    eax,[esi+edx*1]
c0014541:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014545:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c001454b:	74 0b                	je     c0014558 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c001454d:	83 c0 04             	add    eax,0x4
c0014550:	39 d0                	cmp    eax,edx
c0014552:	75 f1                	jne    c0014545 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014554:	58                   	pop    eax
c0014555:	5b                   	pop    ebx
c0014556:	5e                   	pop    esi
c0014557:	c3                   	ret    
c0014558:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014562:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001456c:	eb df                	jmp    c001454d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001456e:	83 ec 0c             	sub    esp,0xc
c0014571:	56                   	push   esi
c0014572:	e8 73 fa ff ff       	call   c0013fea <Device::getName()>
c0014577:	83 c4 10             	add    esp,0x10
c001457a:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001457d:	75 b5                	jne    c0014534 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001457f:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014584:	7f 11                	jg     c0014597 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014586:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001458a:	0f b6 80 60 d6 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd29a0]
c0014591:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014595:	eb 9d                	jmp    c0014534 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014597:	83 ec 0c             	sub    esp,0xc
c001459a:	68 89 b2 02 c0       	push   0xc002b289
c001459f:	e8 7b 5c 00 00       	call   c001a21f <Krnl::panic(char const*)>
c00145a4:	83 c4 10             	add    esp,0x10
c00145a7:	eb 8b                	jmp    c0014534 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00145a9 <nmiHandler(regs*, void*)>:
c00145a9:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00145ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00145b2:	e9 09 aa ff ff       	jmp    c000efc0 <Computer::handleNMI()>

c00145b7 <int_handler>:
c00145b7:	55                   	push   ebp
c00145b8:	57                   	push   edi
c00145b9:	56                   	push   esi
c00145ba:	53                   	push   ebx
c00145bb:	83 ec 0c             	sub    esp,0xc
c00145be:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00145c2:	80 3d 24 ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef24,0x0
c00145c9:	74 0b                	je     c00145d6 <int_handler+0x1f>
c00145cb:	fa                   	cli    
c00145cc:	f4                   	hlt    
c00145cd:	80 3d 24 ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef24,0x0
c00145d4:	75 f5                	jne    c00145cb <int_handler+0x14>
c00145d6:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00145db:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00145de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00145e4:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c00145ea:	8d 43 e0             	lea    eax,[ebx-0x20]
c00145ed:	83 f8 17             	cmp    eax,0x17
c00145f0:	77 13                	ja     c0014605 <int_handler+0x4e>
c00145f2:	83 ec 08             	sub    esp,0x8
c00145f5:	8b 17                	mov    edx,DWORD PTR [edi]
c00145f7:	8d 43 e0             	lea    eax,[ebx-0x20]
c00145fa:	0f b6 c0             	movzx  eax,al
c00145fd:	50                   	push   eax
c00145fe:	57                   	push   edi
c00145ff:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014602:	83 c4 10             	add    esp,0x10
c0014605:	83 c3 15             	add    ebx,0x15
c0014608:	c1 e3 04             	shl    ebx,0x4
c001460b:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c001460f:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014616:	31 db                	xor    ebx,ebx
c0014618:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001461c:	85 c0                	test   eax,eax
c001461e:	74 13                	je     c0014633 <int_handler+0x7c>
c0014620:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014623:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014627:	74 1c                	je     c0014645 <int_handler+0x8e>
c0014629:	83 ec 08             	sub    esp,0x8
c001462c:	52                   	push   edx
c001462d:	56                   	push   esi
c001462e:	ff d0                	call   eax
c0014630:	83 c4 10             	add    esp,0x10
c0014633:	43                   	inc    ebx
c0014634:	83 fb 04             	cmp    ebx,0x4
c0014637:	75 df                	jne    c0014618 <int_handler+0x61>
c0014639:	83 c4 0c             	add    esp,0xc
c001463c:	31 c0                	xor    eax,eax
c001463e:	5b                   	pop    ebx
c001463f:	31 d2                	xor    edx,edx
c0014641:	5e                   	pop    esi
c0014642:	5f                   	pop    edi
c0014643:	5d                   	pop    ebp
c0014644:	c3                   	ret    
c0014645:	83 ec 08             	sub    esp,0x8
c0014648:	52                   	push   edx
c0014649:	56                   	push   esi
c001464a:	ff d0                	call   eax
c001464c:	83 c4 10             	add    esp,0x10
c001464f:	83 c4 0c             	add    esp,0xc
c0014652:	5b                   	pop    ebx
c0014653:	5e                   	pop    esi
c0014654:	5f                   	pop    edi
c0014655:	5d                   	pop    ebp
c0014656:	c3                   	ret    
c0014657:	90                   	nop

c0014658 <InterruptController::InterruptController(char const*)>:
c0014658:	83 ec 1c             	sub    esp,0x1c
c001465b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001465f:	83 ec 08             	sub    esp,0x8
c0014662:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014666:	50                   	push   eax
c0014667:	e8 82 f8 ff ff       	call   c0013eee <Device::Device(char const*)>
c001466c:	83 c4 10             	add    esp,0x10
c001466f:	ba 50 b5 02 c0       	mov    edx,0xc002b550
c0014674:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014678:	89 10                	mov    DWORD PTR [eax],edx
c001467a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001467e:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014688:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014690:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014698:	7f 5e                	jg     c00146f8 <InterruptController::InterruptController(char const*)+0xa0>
c001469a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00146a2:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00146a7:	7f 49                	jg     c00146f2 <InterruptController::InterruptController(char const*)+0x9a>
c00146a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146b1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00146b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00146bc:	01 ca                	add    edx,ecx
c00146be:	83 c2 54             	add    edx,0x54
c00146c1:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00146c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146d1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00146d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00146dc:	01 ca                	add    edx,ecx
c00146de:	81 c2 54 04 00 00    	add    edx,0x454
c00146e4:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00146ec:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00146f0:	eb b0                	jmp    c00146a2 <InterruptController::InterruptController(char const*)+0x4a>
c00146f2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00146f6:	eb 98                	jmp    c0014690 <InterruptController::InterruptController(char const*)+0x38>
c00146f8:	90                   	nop
c00146f9:	83 c4 1c             	add    esp,0x1c
c00146fc:	c3                   	ret    
c00146fd:	90                   	nop

c00146fe <InterruptController::~InterruptController()>:
c00146fe:	83 ec 0c             	sub    esp,0xc
c0014701:	ba 50 b5 02 c0       	mov    edx,0xc002b550
c0014706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001470a:	89 10                	mov    DWORD PTR [eax],edx
c001470c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014710:	83 ec 0c             	sub    esp,0xc
c0014713:	50                   	push   eax
c0014714:	e8 9f f4 ff ff       	call   c0013bb8 <Device::~Device()>
c0014719:	83 c4 10             	add    esp,0x10
c001471c:	90                   	nop
c001471d:	83 c4 0c             	add    esp,0xc
c0014720:	c3                   	ret    
c0014721:	90                   	nop

c0014722 <InterruptController::~InterruptController()>:
c0014722:	83 ec 0c             	sub    esp,0xc
c0014725:	83 ec 0c             	sub    esp,0xc
c0014728:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001472c:	e8 cd ff ff ff       	call   c00146fe <InterruptController::~InterruptController()>
c0014731:	83 c4 10             	add    esp,0x10
c0014734:	83 ec 08             	sub    esp,0x8
c0014737:	68 58 21 00 00       	push   0x2158
c001473c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014740:	e8 94 e0 ff ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c0014745:	83 c4 10             	add    esp,0x10
c0014748:	83 c4 0c             	add    esp,0xc
c001474b:	c3                   	ret    

c001474c <displayDebugInfo(regs*)>:
c001474c:	55                   	push   ebp
c001474d:	57                   	push   edi
c001474e:	56                   	push   esi
c001474f:	53                   	push   ebx
c0014750:	83 ec 24             	sub    esp,0x24
c0014753:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014757:	0f 20 c2             	mov    edx,cr0
c001475a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001475e:	0f 20 d7             	mov    edi,cr2
c0014761:	0f 20 de             	mov    esi,cr3
c0014764:	0f 20 e5             	mov    ebp,cr4
c0014767:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001476a:	68 96 b2 02 c0       	push   0xc002b296
c001476f:	e8 3d e1 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0014774:	59                   	pop    ecx
c0014775:	58                   	pop    eax
c0014776:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014779:	68 a1 b2 02 c0       	push   0xc002b2a1
c001477e:	e8 2e e1 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0014783:	58                   	pop    eax
c0014784:	5a                   	pop    edx
c0014785:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014788:	68 ac b2 02 c0       	push   0xc002b2ac
c001478d:	e8 1f e1 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0014792:	59                   	pop    ecx
c0014793:	58                   	pop    eax
c0014794:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014797:	68 b7 b2 02 c0       	push   0xc002b2b7
c001479c:	e8 10 e1 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c00147a1:	58                   	pop    eax
c00147a2:	5a                   	pop    edx
c00147a3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00147a6:	68 c2 b2 02 c0       	push   0xc002b2c2
c00147ab:	e8 01 e1 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c00147b0:	59                   	pop    ecx
c00147b1:	58                   	pop    eax
c00147b2:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00147b5:	68 cd b2 02 c0       	push   0xc002b2cd
c00147ba:	e8 f2 e0 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c00147bf:	58                   	pop    eax
c00147c0:	5a                   	pop    edx
c00147c1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00147c4:	68 d8 b2 02 c0       	push   0xc002b2d8
c00147c9:	e8 e3 e0 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c00147ce:	59                   	pop    ecx
c00147cf:	58                   	pop    eax
c00147d0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00147d3:	68 e3 b2 02 c0       	push   0xc002b2e3
c00147d8:	e8 d4 e0 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c00147dd:	58                   	pop    eax
c00147de:	5a                   	pop    edx
c00147df:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00147e2:	68 ee b2 02 c0       	push   0xc002b2ee
c00147e7:	e8 c5 e0 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c00147ec:	59                   	pop    ecx
c00147ed:	58                   	pop    eax
c00147ee:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00147f1:	68 fd b2 02 c0       	push   0xc002b2fd
c00147f6:	e8 b6 e0 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c00147fb:	58                   	pop    eax
c00147fc:	5a                   	pop    edx
c00147fd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014800:	68 08 b3 02 c0       	push   0xc002b308
c0014805:	e8 a7 e0 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c001480a:	59                   	pop    ecx
c001480b:	58                   	pop    eax
c001480c:	57                   	push   edi
c001480d:	68 13 b3 02 c0       	push   0xc002b313
c0014812:	e8 9a e0 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0014817:	58                   	pop    eax
c0014818:	5a                   	pop    edx
c0014819:	56                   	push   esi
c001481a:	68 1e b3 02 c0       	push   0xc002b31e
c001481f:	e8 8d e0 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0014824:	59                   	pop    ecx
c0014825:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001482a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014830:	e8 de bd ff ff       	call   c0010613 <setActiveTerminal(VgaText*)>
c0014835:	58                   	pop    eax
c0014836:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014839:	5a                   	pop    edx
c001483a:	c1 e0 05             	shl    eax,0x5
c001483d:	05 c0 d3 02 c0       	add    eax,0xc002d3c0
c0014842:	50                   	push   eax
c0014843:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c0014848:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001484e:	e8 cd c2 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c0014853:	59                   	pop    ecx
c0014854:	58                   	pop    eax
c0014855:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001485a:	68 29 b3 02 c0       	push   0xc002b329
c001485f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014865:	e8 b6 c2 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c001486a:	58                   	pop    eax
c001486b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014870:	5a                   	pop    edx
c0014871:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014874:	83 c0 0c             	add    eax,0xc
c0014877:	50                   	push   eax
c0014878:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001487d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014883:	e8 98 c2 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c0014888:	59                   	pop    ecx
c0014889:	58                   	pop    eax
c001488a:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001488f:	68 32 b3 02 c0       	push   0xc002b332
c0014894:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001489a:	e8 81 c2 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c001489f:	58                   	pop    eax
c00148a0:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c00148a5:	5a                   	pop    edx
c00148a6:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00148a9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148af:	e8 26 c2 ff ff       	call   c0010ada <VgaText::putx(unsigned int)>
c00148b4:	59                   	pop    ecx
c00148b5:	58                   	pop    eax
c00148b6:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c00148bb:	68 3a b3 02 c0       	push   0xc002b33a
c00148c0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148c6:	e8 55 c2 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c00148cb:	58                   	pop    eax
c00148cc:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c00148d1:	5a                   	pop    edx
c00148d2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00148d5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148db:	e8 fa c1 ff ff       	call   c0010ada <VgaText::putx(unsigned int)>
c00148e0:	59                   	pop    ecx
c00148e1:	58                   	pop    eax
c00148e2:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c00148e7:	68 42 b3 02 c0       	push   0xc002b342
c00148ec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148f2:	e8 29 c2 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c00148f7:	58                   	pop    eax
c00148f8:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c00148fd:	5a                   	pop    edx
c00148fe:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014901:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014907:	e8 ce c1 ff ff       	call   c0010ada <VgaText::putx(unsigned int)>
c001490c:	59                   	pop    ecx
c001490d:	58                   	pop    eax
c001490e:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c0014913:	68 4a b3 02 c0       	push   0xc002b34a
c0014918:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001491e:	e8 fd c1 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c0014923:	58                   	pop    eax
c0014924:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c0014929:	5a                   	pop    edx
c001492a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001492d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014933:	e8 a2 c1 ff ff       	call   c0010ada <VgaText::putx(unsigned int)>
c0014938:	59                   	pop    ecx
c0014939:	58                   	pop    eax
c001493a:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001493f:	68 52 b3 02 c0       	push   0xc002b352
c0014944:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001494a:	e8 d1 c1 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c001494f:	58                   	pop    eax
c0014950:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c0014955:	5a                   	pop    edx
c0014956:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014959:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001495f:	e8 76 c1 ff ff       	call   c0010ada <VgaText::putx(unsigned int)>
c0014964:	59                   	pop    ecx
c0014965:	58                   	pop    eax
c0014966:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001496b:	68 5a b3 02 c0       	push   0xc002b35a
c0014970:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014976:	e8 a5 c1 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c001497b:	58                   	pop    eax
c001497c:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c0014981:	5a                   	pop    edx
c0014982:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014985:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001498b:	e8 4a c1 ff ff       	call   c0010ada <VgaText::putx(unsigned int)>
c0014990:	59                   	pop    ecx
c0014991:	58                   	pop    eax
c0014992:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c0014997:	68 62 b3 02 c0       	push   0xc002b362
c001499c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149a2:	e8 79 c1 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c00149a7:	58                   	pop    eax
c00149a8:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c00149ad:	5a                   	pop    edx
c00149ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00149b2:	52                   	push   edx
c00149b3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149b9:	e8 1c c1 ff ff       	call   c0010ada <VgaText::putx(unsigned int)>
c00149be:	59                   	pop    ecx
c00149bf:	58                   	pop    eax
c00149c0:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c00149c5:	68 6b b3 02 c0       	push   0xc002b36b
c00149ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149d0:	e8 4b c1 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c00149d5:	58                   	pop    eax
c00149d6:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c00149db:	5a                   	pop    edx
c00149dc:	57                   	push   edi
c00149dd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149e3:	e8 f2 c0 ff ff       	call   c0010ada <VgaText::putx(unsigned int)>
c00149e8:	59                   	pop    ecx
c00149e9:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c00149ee:	5f                   	pop    edi
c00149ef:	68 73 b3 02 c0       	push   0xc002b373
c00149f4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149fa:	e8 21 c1 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c00149ff:	58                   	pop    eax
c0014a00:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c0014a05:	5a                   	pop    edx
c0014a06:	56                   	push   esi
c0014a07:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a0d:	e8 c8 c0 ff ff       	call   c0010ada <VgaText::putx(unsigned int)>
c0014a12:	59                   	pop    ecx
c0014a13:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c0014a18:	5e                   	pop    esi
c0014a19:	68 7b b3 02 c0       	push   0xc002b37b
c0014a1e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a24:	e8 f7 c0 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c0014a29:	5f                   	pop    edi
c0014a2a:	58                   	pop    eax
c0014a2b:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c0014a30:	55                   	push   ebp
c0014a31:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a37:	e8 9e c0 ff ff       	call   c0010ada <VgaText::putx(unsigned int)>
c0014a3c:	58                   	pop    eax
c0014a3d:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c0014a42:	5a                   	pop    edx
c0014a43:	68 83 b3 02 c0       	push   0xc002b383
c0014a48:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a4e:	e8 cd c0 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c0014a53:	0f 21 c0             	mov    eax,db0
c0014a56:	59                   	pop    ecx
c0014a57:	5e                   	pop    esi
c0014a58:	50                   	push   eax
c0014a59:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c0014a5e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a64:	e8 71 c0 ff ff       	call   c0010ada <VgaText::putx(unsigned int)>
c0014a69:	5f                   	pop    edi
c0014a6a:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c0014a6f:	5d                   	pop    ebp
c0014a70:	68 8c b3 02 c0       	push   0xc002b38c
c0014a75:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a7b:	e8 a0 c0 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c0014a80:	0f 21 c8             	mov    eax,db1
c0014a83:	5a                   	pop    edx
c0014a84:	59                   	pop    ecx
c0014a85:	50                   	push   eax
c0014a86:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c0014a8b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a91:	e8 44 c0 ff ff       	call   c0010ada <VgaText::putx(unsigned int)>
c0014a96:	5e                   	pop    esi
c0014a97:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c0014a9c:	5f                   	pop    edi
c0014a9d:	68 94 b3 02 c0       	push   0xc002b394
c0014aa2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aa8:	e8 73 c0 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c0014aad:	0f 21 d0             	mov    eax,db2
c0014ab0:	5d                   	pop    ebp
c0014ab1:	5a                   	pop    edx
c0014ab2:	50                   	push   eax
c0014ab3:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c0014ab8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014abe:	e8 17 c0 ff ff       	call   c0010ada <VgaText::putx(unsigned int)>
c0014ac3:	59                   	pop    ecx
c0014ac4:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c0014ac9:	5e                   	pop    esi
c0014aca:	68 9c b3 02 c0       	push   0xc002b39c
c0014acf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ad5:	e8 46 c0 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c0014ada:	0f 21 d8             	mov    eax,db3
c0014add:	5f                   	pop    edi
c0014ade:	5d                   	pop    ebp
c0014adf:	50                   	push   eax
c0014ae0:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c0014ae5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aeb:	e8 ea bf ff ff       	call   c0010ada <VgaText::putx(unsigned int)>
c0014af0:	58                   	pop    eax
c0014af1:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c0014af6:	5a                   	pop    edx
c0014af7:	68 a4 b3 02 c0       	push   0xc002b3a4
c0014afc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b02:	e8 19 c0 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c0014b07:	0f 21 f0             	mov    eax,db6
c0014b0a:	59                   	pop    ecx
c0014b0b:	5e                   	pop    esi
c0014b0c:	50                   	push   eax
c0014b0d:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c0014b12:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b18:	e8 bd bf ff ff       	call   c0010ada <VgaText::putx(unsigned int)>
c0014b1d:	5f                   	pop    edi
c0014b1e:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c0014b23:	5d                   	pop    ebp
c0014b24:	68 ac b3 02 c0       	push   0xc002b3ac
c0014b29:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b2f:	e8 ec bf ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c0014b34:	0f 21 f8             	mov    eax,db7
c0014b37:	5a                   	pop    edx
c0014b38:	59                   	pop    ecx
c0014b39:	50                   	push   eax
c0014b3a:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c0014b3f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b45:	e8 90 bf ff ff       	call   c0010ada <VgaText::putx(unsigned int)>
c0014b4a:	5e                   	pop    esi
c0014b4b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014b4e:	e8 48 88 00 00       	call   c001d39b <Thr::getDriverNameFromAddress(unsigned long)>
c0014b53:	83 c4 10             	add    esp,0x10
c0014b56:	85 c0                	test   eax,eax
c0014b58:	74 7d                	je     c0014bd7 <displayDebugInfo(regs*)+0x48b>
c0014b5a:	89 c6                	mov    esi,eax
c0014b5c:	50                   	push   eax
c0014b5d:	50                   	push   eax
c0014b5e:	56                   	push   esi
c0014b5f:	68 b4 b3 02 c0       	push   0xc002b3b4
c0014b64:	e8 48 dd ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0014b69:	5a                   	pop    edx
c0014b6a:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c0014b6f:	59                   	pop    ecx
c0014b70:	68 c2 b3 02 c0       	push   0xc002b3c2
c0014b75:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b7b:	e8 a0 bf ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c0014b80:	5f                   	pop    edi
c0014b81:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c0014b86:	5d                   	pop    ebp
c0014b87:	56                   	push   esi
c0014b88:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b8e:	e8 8d bf ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c0014b93:	58                   	pop    eax
c0014b94:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c0014b99:	5a                   	pop    edx
c0014b9a:	68 ce b3 02 c0       	push   0xc002b3ce
c0014b9f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ba5:	e8 76 bf ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c0014baa:	59                   	pop    ecx
c0014bab:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c0014bb0:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014bb6:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014bb9:	e8 14 88 00 00       	call   c001d3d2 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014bbe:	5b                   	pop    ebx
c0014bbf:	5d                   	pop    ebp
c0014bc0:	50                   	push   eax
c0014bc1:	57                   	push   edi
c0014bc2:	e8 13 bf ff ff       	call   c0010ada <VgaText::putx(unsigned int)>
c0014bc7:	58                   	pop    eax
c0014bc8:	5a                   	pop    edx
c0014bc9:	56                   	push   esi
c0014bca:	68 da b3 02 c0       	push   0xc002b3da
c0014bcf:	e8 dd dc ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0014bd4:	83 c4 10             	add    esp,0x10
c0014bd7:	fa                   	cli    
c0014bd8:	f4                   	hlt    
c0014bd9:	eb fe                	jmp    c0014bd9 <displayDebugInfo(regs*)+0x48d>

c0014bdb <x87EmulHandler(regs*, void*)>:
c0014bdb:	83 ec 0c             	sub    esp,0xc
c0014bde:	0f 20 c2             	mov    edx,cr0
c0014be1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014be6:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014bea:	75 4b                	jne    c0014c37 <x87EmulHandler(regs*, void*)+0x5c>
c0014bec:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0014bf1:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014bf7:	85 c0                	test   eax,eax
c0014bf9:	74 05                	je     c0014c00 <x87EmulHandler(regs*, void*)+0x25>
c0014bfb:	83 e2 08             	and    edx,0x8
c0014bfe:	75 17                	jne    c0014c17 <x87EmulHandler(regs*, void*)+0x3c>
c0014c00:	83 ec 0c             	sub    esp,0xc
c0014c03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c07:	e8 75 ab 00 00       	call   c001f781 <Vm::x87Handler(regs*)>
c0014c0c:	83 c4 10             	add    esp,0x10
c0014c0f:	84 c0                	test   al,al
c0014c11:	74 24                	je     c0014c37 <x87EmulHandler(regs*, void*)+0x5c>
c0014c13:	83 c4 0c             	add    esp,0xc
c0014c16:	c3                   	ret    
c0014c17:	83 ec 0c             	sub    esp,0xc
c0014c1a:	68 00 b4 02 c0       	push   0xc002b400
c0014c1f:	e8 8d dc ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0014c24:	0f 06                	clts   
c0014c26:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c2b:	83 c4 10             	add    esp,0x10
c0014c2e:	a3 88 e5 02 c0       	mov    ds:0xc002e588,eax
c0014c33:	83 c4 0c             	add    esp,0xc
c0014c36:	c3                   	ret    
c0014c37:	83 ec 0c             	sub    esp,0xc
c0014c3a:	68 ea b3 02 c0       	push   0xc002b3ea
c0014c3f:	e8 6d dc ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0014c44:	5a                   	pop    edx
c0014c45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c49:	e8 fe fa ff ff       	call   c001474c <displayDebugInfo(regs*)>

c0014c4e <gpFault(regs*, void*)>:
c0014c4e:	53                   	push   ebx
c0014c4f:	83 ec 14             	sub    esp,0x14
c0014c52:	c7 05 84 e5 02 c0 5a ec 01 c0 	mov    DWORD PTR ds:0xc002e584,0xc001ec5a
c0014c5c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014c60:	53                   	push   ebx
c0014c61:	e8 f4 9f 00 00       	call   c001ec5a <Vm::faultHandler(regs*)>
c0014c66:	83 c4 10             	add    esp,0x10
c0014c69:	84 c0                	test   al,al
c0014c6b:	74 05                	je     c0014c72 <gpFault(regs*, void*)+0x24>
c0014c6d:	83 c4 08             	add    esp,0x8
c0014c70:	5b                   	pop    ebx
c0014c71:	c3                   	ret    
c0014c72:	83 ec 0c             	sub    esp,0xc
c0014c75:	68 0d b4 02 c0       	push   0xc002b40d
c0014c7a:	e8 32 dc ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0014c7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c82:	e8 c5 fa ff ff       	call   c001474c <displayDebugInfo(regs*)>

c0014c87 <pgFault(regs*, void*)>:
c0014c87:	53                   	push   ebx
c0014c88:	83 ec 10             	sub    esp,0x10
c0014c8b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014c8f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014c92:	68 28 b4 02 c0       	push   0xc002b428
c0014c97:	e8 15 dc ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0014c9c:	0f 20 d0             	mov    eax,cr2
c0014c9f:	5a                   	pop    edx
c0014ca0:	59                   	pop    ecx
c0014ca1:	50                   	push   eax
c0014ca2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ca7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014caa:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0014cb0:	e8 03 d7 ff ff       	call   c00123b8 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014cb5:	83 c4 10             	add    esp,0x10
c0014cb8:	84 c0                	test   al,al
c0014cba:	74 05                	je     c0014cc1 <pgFault(regs*, void*)+0x3a>
c0014cbc:	83 c4 08             	add    esp,0x8
c0014cbf:	5b                   	pop    ebx
c0014cc0:	c3                   	ret    
c0014cc1:	83 ec 0c             	sub    esp,0xc
c0014cc4:	68 3d b4 02 c0       	push   0xc002b43d
c0014cc9:	e8 e3 db ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0014cce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014cd1:	e8 76 fa ff ff       	call   c001474c <displayDebugInfo(regs*)>

c0014cd6 <otherISRHandler(regs*, void*)>:
c0014cd6:	53                   	push   ebx
c0014cd7:	83 ec 0c             	sub    esp,0xc
c0014cda:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014cde:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014ce1:	50                   	push   eax
c0014ce2:	50                   	push   eax
c0014ce3:	68 4a b4 02 c0       	push   0xc002b44a
c0014ce8:	e8 c4 db ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0014ced:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014cf0:	e8 57 fa ff ff       	call   c001474c <displayDebugInfo(regs*)>

c0014cf5 <opcodeFault(regs*, void*)>:
c0014cf5:	55                   	push   ebp
c0014cf6:	89 e5                	mov    ebp,esp
c0014cf8:	56                   	push   esi
c0014cf9:	53                   	push   ebx
c0014cfa:	83 ec 40             	sub    esp,0x40
c0014cfd:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0014d02:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014d08:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014d0e:	84 c0                	test   al,al
c0014d10:	74 24                	je     c0014d36 <opcodeFault(regs*, void*)+0x41>
c0014d12:	83 ec 0c             	sub    esp,0xc
c0014d15:	68 68 b4 02 c0       	push   0xc002b468
c0014d1a:	e8 92 db ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0014d1f:	83 c4 10             	add    esp,0x10
c0014d22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d25:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d28:	8d 50 19             	lea    edx,[eax+0x19]
c0014d2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d2e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d31:	e9 d5 05 00 00       	jmp    c001530b <opcodeFault(regs*, void*)+0x616>
c0014d36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d39:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d3c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014d3f:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014d43:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014d47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d4a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d4d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014d50:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d53:	8a 00                	mov    al,BYTE PTR [eax]
c0014d55:	3c f0                	cmp    al,0xf0
c0014d57:	75 17                	jne    c0014d70 <opcodeFault(regs*, void*)+0x7b>
c0014d59:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d5f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d62:	8d 50 01             	lea    edx,[eax+0x1]
c0014d65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d68:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d6b:	e9 da 00 00 00       	jmp    c0014e4a <opcodeFault(regs*, void*)+0x155>
c0014d70:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d73:	8a 00                	mov    al,BYTE PTR [eax]
c0014d75:	3c f2                	cmp    al,0xf2
c0014d77:	74 09                	je     c0014d82 <opcodeFault(regs*, void*)+0x8d>
c0014d79:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d7c:	8a 00                	mov    al,BYTE PTR [eax]
c0014d7e:	3c f3                	cmp    al,0xf3
c0014d80:	75 1b                	jne    c0014d9d <opcodeFault(regs*, void*)+0xa8>
c0014d82:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d86:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d8c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d8f:	8d 50 01             	lea    edx,[eax+0x1]
c0014d92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d95:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d98:	e9 ad 00 00 00       	jmp    c0014e4a <opcodeFault(regs*, void*)+0x155>
c0014d9d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014da0:	8a 00                	mov    al,BYTE PTR [eax]
c0014da2:	3c 66                	cmp    al,0x66
c0014da4:	75 1f                	jne    c0014dc5 <opcodeFault(regs*, void*)+0xd0>
c0014da6:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014daa:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014dae:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014db1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014db4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014db7:	8d 50 01             	lea    edx,[eax+0x1]
c0014dba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dbd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014dc0:	e9 85 00 00 00       	jmp    c0014e4a <opcodeFault(regs*, void*)+0x155>
c0014dc5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dc8:	8a 00                	mov    al,BYTE PTR [eax]
c0014dca:	3c 67                	cmp    al,0x67
c0014dcc:	75 18                	jne    c0014de6 <opcodeFault(regs*, void*)+0xf1>
c0014dce:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014dd2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014dd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dd8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ddb:	8d 50 01             	lea    edx,[eax+0x1]
c0014dde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014de1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014de4:	eb 64                	jmp    c0014e4a <opcodeFault(regs*, void*)+0x155>
c0014de6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014de9:	8a 00                	mov    al,BYTE PTR [eax]
c0014deb:	3c 2e                	cmp    al,0x2e
c0014ded:	74 09                	je     c0014df8 <opcodeFault(regs*, void*)+0x103>
c0014def:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014df2:	8a 00                	mov    al,BYTE PTR [eax]
c0014df4:	3c 3e                	cmp    al,0x3e
c0014df6:	75 18                	jne    c0014e10 <opcodeFault(regs*, void*)+0x11b>
c0014df8:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014dfc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014dff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e02:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e05:	8d 50 01             	lea    edx,[eax+0x1]
c0014e08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e0b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e0e:	eb 3a                	jmp    c0014e4a <opcodeFault(regs*, void*)+0x155>
c0014e10:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e13:	8a 00                	mov    al,BYTE PTR [eax]
c0014e15:	3c 36                	cmp    al,0x36
c0014e17:	74 1b                	je     c0014e34 <opcodeFault(regs*, void*)+0x13f>
c0014e19:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e1c:	8a 00                	mov    al,BYTE PTR [eax]
c0014e1e:	3c 26                	cmp    al,0x26
c0014e20:	74 12                	je     c0014e34 <opcodeFault(regs*, void*)+0x13f>
c0014e22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e25:	8a 00                	mov    al,BYTE PTR [eax]
c0014e27:	3c 64                	cmp    al,0x64
c0014e29:	74 09                	je     c0014e34 <opcodeFault(regs*, void*)+0x13f>
c0014e2b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e2e:	8a 00                	mov    al,BYTE PTR [eax]
c0014e30:	3c 65                	cmp    al,0x65
c0014e32:	75 16                	jne    c0014e4a <opcodeFault(regs*, void*)+0x155>
c0014e34:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014e38:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e3e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e41:	8d 50 01             	lea    edx,[eax+0x1]
c0014e44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e47:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e4a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e4d:	8a 00                	mov    al,BYTE PTR [eax]
c0014e4f:	3c 0f                	cmp    al,0xf
c0014e51:	0f 85 ad 00 00 00    	jne    c0014f04 <opcodeFault(regs*, void*)+0x20f>
c0014e57:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e5a:	40                   	inc    eax
c0014e5b:	8a 00                	mov    al,BYTE PTR [eax]
c0014e5d:	3c c2                	cmp    al,0xc2
c0014e5f:	74 0e                	je     c0014e6f <opcodeFault(regs*, void*)+0x17a>
c0014e61:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e64:	40                   	inc    eax
c0014e65:	8a 00                	mov    al,BYTE PTR [eax]
c0014e67:	3c c3                	cmp    al,0xc3
c0014e69:	0f 85 95 00 00 00    	jne    c0014f04 <opcodeFault(regs*, void*)+0x20f>
c0014e6f:	83 ec 0c             	sub    esp,0xc
c0014e72:	68 8b b4 02 c0       	push   0xc002b48b
c0014e77:	e8 35 da ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0014e7c:	83 c4 10             	add    esp,0x10
c0014e7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e82:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e85:	8d 50 01             	lea    edx,[eax+0x1]
c0014e88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e8b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e8e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e91:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e94:	8a 00                	mov    al,BYTE PTR [eax]
c0014e96:	8d 50 fe             	lea    edx,[eax-0x2]
c0014e99:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e9c:	88 10                	mov    BYTE PTR [eax],dl
c0014e9e:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014ea1:	50                   	push   eax
c0014ea2:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014ea5:	50                   	push   eax
c0014ea6:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014ea9:	50                   	push   eax
c0014eaa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014ead:	e8 86 4a 00 00       	call   c0019938 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014eb2:	83 c4 10             	add    esp,0x10
c0014eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eb8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ebb:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014ebe:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014ec1:	01 d0                	add    eax,edx
c0014ec3:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014ec6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ec9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ecc:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014ecf:	48                   	dec    eax
c0014ed0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014ed3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ed6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014ed9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014edc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014edf:	83 ec 04             	sub    esp,0x4
c0014ee2:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014ee5:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014ee8:	50                   	push   eax
c0014ee9:	e8 c6 b2 fe ff       	call   c00001b4 <voodooXADD>
c0014eee:	83 c4 10             	add    esp,0x10
c0014ef1:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014ef4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014ef7:	01 c2                	add    edx,eax
c0014ef9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014efc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014eff:	e9 07 04 00 00       	jmp    c001530b <opcodeFault(regs*, void*)+0x616>
c0014f04:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f07:	8a 00                	mov    al,BYTE PTR [eax]
c0014f09:	3c 0f                	cmp    al,0xf
c0014f0b:	0f 85 8b 01 00 00    	jne    c001509c <opcodeFault(regs*, void*)+0x3a7>
c0014f11:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f14:	40                   	inc    eax
c0014f15:	8a 00                	mov    al,BYTE PTR [eax]
c0014f17:	3c c7                	cmp    al,0xc7
c0014f19:	0f 86 7d 01 00 00    	jbe    c001509c <opcodeFault(regs*, void*)+0x3a7>
c0014f1f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f22:	40                   	inc    eax
c0014f23:	8a 00                	mov    al,BYTE PTR [eax]
c0014f25:	3c cf                	cmp    al,0xcf
c0014f27:	0f 87 6f 01 00 00    	ja     c001509c <opcodeFault(regs*, void*)+0x3a7>
c0014f2d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f30:	40                   	inc    eax
c0014f31:	8a 00                	mov    al,BYTE PTR [eax]
c0014f33:	83 c0 38             	add    eax,0x38
c0014f36:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014f39:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014f3d:	75 0b                	jne    c0014f4a <opcodeFault(regs*, void*)+0x255>
c0014f3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f42:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014f45:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f48:	eb 75                	jmp    c0014fbf <opcodeFault(regs*, void*)+0x2ca>
c0014f4a:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014f4e:	75 0b                	jne    c0014f5b <opcodeFault(regs*, void*)+0x266>
c0014f50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f53:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014f56:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f59:	eb 64                	jmp    c0014fbf <opcodeFault(regs*, void*)+0x2ca>
c0014f5b:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014f5f:	75 0b                	jne    c0014f6c <opcodeFault(regs*, void*)+0x277>
c0014f61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f64:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014f67:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f6a:	eb 53                	jmp    c0014fbf <opcodeFault(regs*, void*)+0x2ca>
c0014f6c:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014f70:	75 0b                	jne    c0014f7d <opcodeFault(regs*, void*)+0x288>
c0014f72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f75:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014f78:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f7b:	eb 42                	jmp    c0014fbf <opcodeFault(regs*, void*)+0x2ca>
c0014f7d:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014f81:	75 0b                	jne    c0014f8e <opcodeFault(regs*, void*)+0x299>
c0014f83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f86:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014f89:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f8c:	eb 31                	jmp    c0014fbf <opcodeFault(regs*, void*)+0x2ca>
c0014f8e:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014f92:	75 0b                	jne    c0014f9f <opcodeFault(regs*, void*)+0x2aa>
c0014f94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f97:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014f9a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f9d:	eb 20                	jmp    c0014fbf <opcodeFault(regs*, void*)+0x2ca>
c0014f9f:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014fa3:	75 0b                	jne    c0014fb0 <opcodeFault(regs*, void*)+0x2bb>
c0014fa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014fab:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014fae:	eb 0f                	jmp    c0014fbf <opcodeFault(regs*, void*)+0x2ca>
c0014fb0:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014fb4:	75 09                	jne    c0014fbf <opcodeFault(regs*, void*)+0x2ca>
c0014fb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fb9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014fbc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014fbf:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014fc3:	74 10                	je     c0014fd5 <opcodeFault(regs*, void*)+0x2e0>
c0014fc5:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014fcc:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014fd3:	eb 2d                	jmp    c0015002 <opcodeFault(regs*, void*)+0x30d>
c0014fd5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014fd8:	c1 e0 18             	shl    eax,0x18
c0014fdb:	89 c2                	mov    edx,eax
c0014fdd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014fe0:	c1 e0 08             	shl    eax,0x8
c0014fe3:	25 00 00 ff 00       	and    eax,0xff0000
c0014fe8:	09 c2                	or     edx,eax
c0014fea:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014fed:	c1 e8 08             	shr    eax,0x8
c0014ff0:	25 00 ff 00 00       	and    eax,0xff00
c0014ff5:	09 c2                	or     edx,eax
c0014ff7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ffa:	c1 e8 18             	shr    eax,0x18
c0014ffd:	09 d0                	or     eax,edx
c0014fff:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015002:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015006:	75 0b                	jne    c0015013 <opcodeFault(regs*, void*)+0x31e>
c0015008:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001500b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001500e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015011:	eb 75                	jmp    c0015088 <opcodeFault(regs*, void*)+0x393>
c0015013:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015017:	75 0b                	jne    c0015024 <opcodeFault(regs*, void*)+0x32f>
c0015019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001501c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001501f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015022:	eb 64                	jmp    c0015088 <opcodeFault(regs*, void*)+0x393>
c0015024:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015028:	75 0b                	jne    c0015035 <opcodeFault(regs*, void*)+0x340>
c001502a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001502d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015030:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015033:	eb 53                	jmp    c0015088 <opcodeFault(regs*, void*)+0x393>
c0015035:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015039:	75 0b                	jne    c0015046 <opcodeFault(regs*, void*)+0x351>
c001503b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001503e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015041:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015044:	eb 42                	jmp    c0015088 <opcodeFault(regs*, void*)+0x393>
c0015046:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001504a:	75 0b                	jne    c0015057 <opcodeFault(regs*, void*)+0x362>
c001504c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001504f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015052:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015055:	eb 31                	jmp    c0015088 <opcodeFault(regs*, void*)+0x393>
c0015057:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001505b:	75 0b                	jne    c0015068 <opcodeFault(regs*, void*)+0x373>
c001505d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015060:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015063:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015066:	eb 20                	jmp    c0015088 <opcodeFault(regs*, void*)+0x393>
c0015068:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001506c:	75 0b                	jne    c0015079 <opcodeFault(regs*, void*)+0x384>
c001506e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015071:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015074:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015077:	eb 0f                	jmp    c0015088 <opcodeFault(regs*, void*)+0x393>
c0015079:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001507d:	75 09                	jne    c0015088 <opcodeFault(regs*, void*)+0x393>
c001507f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015082:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015085:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015088:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001508b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001508e:	8d 50 02             	lea    edx,[eax+0x2]
c0015091:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015094:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015097:	e9 6f 02 00 00       	jmp    c001530b <opcodeFault(regs*, void*)+0x616>
c001509c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001509f:	8a 00                	mov    al,BYTE PTR [eax]
c00150a1:	3c 0f                	cmp    al,0xf
c00150a3:	0f 85 8d 01 00 00    	jne    c0015236 <opcodeFault(regs*, void*)+0x541>
c00150a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150ac:	40                   	inc    eax
c00150ad:	8a 00                	mov    al,BYTE PTR [eax]
c00150af:	3c c7                	cmp    al,0xc7
c00150b1:	0f 85 7f 01 00 00    	jne    c0015236 <opcodeFault(regs*, void*)+0x541>
c00150b7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00150ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150bd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150c0:	8d 50 01             	lea    edx,[eax+0x1]
c00150c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150c6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00150c9:	8d 45 ba             	lea    eax,[ebp-0x46]
c00150cc:	50                   	push   eax
c00150cd:	8d 45 bb             	lea    eax,[ebp-0x45]
c00150d0:	50                   	push   eax
c00150d1:	8d 45 bc             	lea    eax,[ebp-0x44]
c00150d4:	50                   	push   eax
c00150d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00150d8:	e8 5b 48 00 00       	call   c0019938 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00150dd:	83 c4 10             	add    esp,0x10
c00150e0:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00150e3:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00150e6:	83 f0 01             	xor    eax,0x1
c00150e9:	84 c0                	test   al,al
c00150eb:	0f 84 45 01 00 00    	je     c0015236 <opcodeFault(regs*, void*)+0x541>
c00150f1:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00150f4:	3c 01                	cmp    al,0x1
c00150f6:	0f 85 3a 01 00 00    	jne    c0015236 <opcodeFault(regs*, void*)+0x541>
c00150fc:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00150ff:	83 f0 01             	xor    eax,0x1
c0015102:	84 c0                	test   al,al
c0015104:	0f 84 2c 01 00 00    	je     c0015236 <opcodeFault(regs*, void*)+0x541>
c001510a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001510d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015110:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015113:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001511a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001511d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015120:	89 c2                	mov    edx,eax
c0015122:	b8 00 00 00 00       	mov    eax,0x0
c0015127:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001512a:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001512d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015130:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015133:	ba 00 00 00 00       	mov    edx,0x0
c0015138:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001513b:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001513e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015141:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015144:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015147:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001514e:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015151:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015154:	89 c2                	mov    edx,eax
c0015156:	b8 00 00 00 00       	mov    eax,0x0
c001515b:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001515e:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015161:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015164:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015167:	ba 00 00 00 00       	mov    edx,0x0
c001516c:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001516f:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015172:	fa                   	cli    
c0015173:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c0015178:	40                   	inc    eax
c0015179:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c001517e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015181:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015184:	8b 00                	mov    eax,DWORD PTR [eax]
c0015186:	89 c1                	mov    ecx,eax
c0015188:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001518b:	89 cb                	mov    ebx,ecx
c001518d:	89 d0                	mov    eax,edx
c001518f:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015192:	89 c6                	mov    esi,eax
c0015194:	89 f0                	mov    eax,esi
c0015196:	09 d8                	or     eax,ebx
c0015198:	85 c0                	test   eax,eax
c001519a:	75 21                	jne    c00151bd <opcodeFault(regs*, void*)+0x4c8>
c001519c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c001519f:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00151a2:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00151a5:	89 01                	mov    DWORD PTR [ecx],eax
c00151a7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00151aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ad:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00151b0:	83 c8 40             	or     eax,0x40
c00151b3:	89 c2                	mov    edx,eax
c00151b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151b8:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00151bb:	eb 3e                	jmp    c00151fb <opcodeFault(regs*, void*)+0x506>
c00151bd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00151c0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00151c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00151c5:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00151c8:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00151cb:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00151ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151d1:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00151d4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00151d7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00151da:	89 d0                	mov    eax,edx
c00151dc:	31 d2                	xor    edx,edx
c00151de:	89 c3                	mov    ebx,eax
c00151e0:	89 d6                	mov    esi,edx
c00151e2:	89 da                	mov    edx,ebx
c00151e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151e7:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00151ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ed:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00151f0:	83 e0 bf             	and    eax,0xffffffbf
c00151f3:	89 c2                	mov    edx,eax
c00151f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151f8:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00151fb:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c0015200:	48                   	dec    eax
c0015201:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c0015206:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c001520b:	85 c0                	test   eax,eax
c001520d:	75 01                	jne    c0015210 <opcodeFault(regs*, void*)+0x51b>
c001520f:	fb                   	sti    
c0015210:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015213:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015216:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015219:	01 c2                	add    edx,eax
c001521b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001521e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015221:	83 ec 0c             	sub    esp,0xc
c0015224:	68 9a b4 02 c0       	push   0xc002b49a
c0015229:	e8 83 d6 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c001522e:	83 c4 10             	add    esp,0x10
c0015231:	e9 d5 00 00 00       	jmp    c001530b <opcodeFault(regs*, void*)+0x616>
c0015236:	83 ec 0c             	sub    esp,0xc
c0015239:	68 ad b4 02 c0       	push   0xc002b4ad
c001523e:	e8 6e d6 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0015243:	83 c4 10             	add    esp,0x10
c0015246:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015249:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001524c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001524f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015252:	c1 e0 04             	shl    eax,0x4
c0015255:	01 d0                	add    eax,edx
c0015257:	83 c0 03             	add    eax,0x3
c001525a:	8a 00                	mov    al,BYTE PTR [eax]
c001525c:	0f b6 d8             	movzx  ebx,al
c001525f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015262:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015265:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015268:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001526b:	c1 e0 04             	shl    eax,0x4
c001526e:	01 d0                	add    eax,edx
c0015270:	83 c0 02             	add    eax,0x2
c0015273:	8a 00                	mov    al,BYTE PTR [eax]
c0015275:	0f b6 c8             	movzx  ecx,al
c0015278:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001527b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001527e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015281:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015284:	c1 e0 04             	shl    eax,0x4
c0015287:	01 d0                	add    eax,edx
c0015289:	40                   	inc    eax
c001528a:	8a 00                	mov    al,BYTE PTR [eax]
c001528c:	0f b6 d0             	movzx  edx,al
c001528f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015292:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015295:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015298:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001529b:	c1 e0 04             	shl    eax,0x4
c001529e:	01 f0                	add    eax,esi
c00152a0:	8a 00                	mov    al,BYTE PTR [eax]
c00152a2:	0f b6 c0             	movzx  eax,al
c00152a5:	83 ec 0c             	sub    esp,0xc
c00152a8:	53                   	push   ebx
c00152a9:	51                   	push   ecx
c00152aa:	52                   	push   edx
c00152ab:	50                   	push   eax
c00152ac:	68 c0 b4 02 c0       	push   0xc002b4c0
c00152b1:	e8 fb d5 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c00152b6:	83 c4 20             	add    esp,0x20
c00152b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152bc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152bf:	83 c0 03             	add    eax,0x3
c00152c2:	8a 00                	mov    al,BYTE PTR [eax]
c00152c4:	0f b6 d8             	movzx  ebx,al
c00152c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ca:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152cd:	83 c0 02             	add    eax,0x2
c00152d0:	8a 00                	mov    al,BYTE PTR [eax]
c00152d2:	0f b6 c8             	movzx  ecx,al
c00152d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152d8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152db:	40                   	inc    eax
c00152dc:	8a 00                	mov    al,BYTE PTR [eax]
c00152de:	0f b6 d0             	movzx  edx,al
c00152e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152e4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152e7:	8a 00                	mov    al,BYTE PTR [eax]
c00152e9:	0f b6 c0             	movzx  eax,al
c00152ec:	83 ec 0c             	sub    esp,0xc
c00152ef:	53                   	push   ebx
c00152f0:	51                   	push   ecx
c00152f1:	52                   	push   edx
c00152f2:	50                   	push   eax
c00152f3:	68 e8 b4 02 c0       	push   0xc002b4e8
c00152f8:	e8 b4 d5 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c00152fd:	83 c4 20             	add    esp,0x20
c0015300:	83 ec 0c             	sub    esp,0xc
c0015303:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015306:	e8 41 f4 ff ff       	call   c001474c <displayDebugInfo(regs*)>
c001530b:	8d 65 f8             	lea    esp,[ebp-0x8]
c001530e:	5b                   	pop    ebx
c001530f:	5e                   	pop    esi
c0015310:	5d                   	pop    ebp
c0015311:	c3                   	ret    

c0015312 <displayProgramFault(char const*)>:
c0015312:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015317:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001531a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015320:	85 c0                	test   eax,eax
c0015322:	74 15                	je     c0015339 <displayProgramFault(char const*)+0x27>
c0015324:	83 ec 0c             	sub    esp,0xc
c0015327:	6a 04                	push   0x4
c0015329:	6a 0f                	push   0xf
c001532b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001532f:	50                   	push   eax
c0015330:	e8 e7 b4 ff ff       	call   c001081c <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015335:	83 c4 1c             	add    esp,0x1c
c0015338:	c3                   	ret    
c0015339:	c3                   	ret    

c001533a <setupInterruptController()>:
c001533a:	55                   	push   ebp
c001533b:	89 e5                	mov    ebp,esp
c001533d:	53                   	push   ebx
c001533e:	83 ec 24             	sub    esp,0x24
c0015341:	b8 00 00 00 00       	mov    eax,0x0
c0015346:	85 c0                	test   eax,eax
c0015348:	0f 95 c0             	setne  al
c001534b:	84 c0                	test   al,al
c001534d:	74 5b                	je     c00153aa <setupInterruptController()+0x70>
c001534f:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015356:	83 ec 0c             	sub    esp,0xc
c0015359:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001535c:	e8 f8 a4 ff ff       	call   c000f859 <malloc>
c0015361:	83 c4 10             	add    esp,0x10
c0015364:	89 c3                	mov    ebx,eax
c0015366:	83 ec 0c             	sub    esp,0xc
c0015369:	53                   	push   ebx
c001536a:	e8 59 08 01 00       	call   c0025bc8 <APIC::APIC()>
c001536f:	83 c4 10             	add    esp,0x10
c0015372:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015375:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015378:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001537b:	8b 00                	mov    eax,DWORD PTR [eax]
c001537d:	83 c0 08             	add    eax,0x8
c0015380:	8b 00                	mov    eax,DWORD PTR [eax]
c0015382:	6a 00                	push   0x0
c0015384:	6a 00                	push   0x0
c0015386:	6a 00                	push   0x0
c0015388:	52                   	push   edx
c0015389:	ff d0                	call   eax
c001538b:	83 c4 10             	add    esp,0x10
c001538e:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0015393:	83 ec 08             	sub    esp,0x8
c0015396:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015399:	50                   	push   eax
c001539a:	e8 4b e9 ff ff       	call   c0013cea <Device::addChild(Device*)>
c001539f:	83 c4 10             	add    esp,0x10
c00153a2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00153a5:	e9 79 03 00 00       	jmp    c0015723 <setupInterruptController()+0x3e9>
c00153aa:	a0 60 ed 02 c0       	mov    al,ds:0xc002ed60
c00153af:	84 c0                	test   al,al
c00153b1:	75 14                	jne    c00153c7 <setupInterruptController()+0x8d>
c00153b3:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00153b8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00153be:	83 e2 fe             	and    edx,0xfffffffe
c00153c1:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00153c7:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00153cc:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00153d2:	83 e0 01             	and    eax,0x1
c00153d5:	84 c0                	test   al,al
c00153d7:	0f 95 c0             	setne  al
c00153da:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00153dd:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00153e4:	83 ec 0c             	sub    esp,0xc
c00153e7:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00153ea:	e8 6a a4 ff ff       	call   c000f859 <malloc>
c00153ef:	83 c4 10             	add    esp,0x10
c00153f2:	89 c3                	mov    ebx,eax
c00153f4:	83 ec 0c             	sub    esp,0xc
c00153f7:	53                   	push   ebx
c00153f8:	e8 23 0d 01 00       	call   c0026120 <PIC::PIC()>
c00153fd:	83 c4 10             	add    esp,0x10
c0015400:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015403:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015406:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015409:	8b 00                	mov    eax,DWORD PTR [eax]
c001540b:	83 c0 08             	add    eax,0x8
c001540e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015410:	6a 00                	push   0x0
c0015412:	6a 00                	push   0x0
c0015414:	6a 00                	push   0x0
c0015416:	52                   	push   edx
c0015417:	ff d0                	call   eax
c0015419:	83 c4 10             	add    esp,0x10
c001541c:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015420:	74 73                	je     c0015495 <setupInterruptController()+0x15b>
c0015422:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015425:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015428:	8b 00                	mov    eax,DWORD PTR [eax]
c001542a:	83 c0 0c             	add    eax,0xc
c001542d:	8b 00                	mov    eax,DWORD PTR [eax]
c001542f:	6a 00                	push   0x0
c0015431:	6a 00                	push   0x0
c0015433:	6a 00                	push   0x0
c0015435:	52                   	push   edx
c0015436:	ff d0                	call   eax
c0015438:	83 c4 10             	add    esp,0x10
c001543b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001543f:	74 15                	je     c0015456 <setupInterruptController()+0x11c>
c0015441:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015444:	8b 00                	mov    eax,DWORD PTR [eax]
c0015446:	83 c0 04             	add    eax,0x4
c0015449:	8b 00                	mov    eax,DWORD PTR [eax]
c001544b:	83 ec 0c             	sub    esp,0xc
c001544e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015451:	ff d0                	call   eax
c0015453:	83 c4 10             	add    esp,0x10
c0015456:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c001545d:	83 ec 0c             	sub    esp,0xc
c0015460:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015463:	e8 f1 a3 ff ff       	call   c000f859 <malloc>
c0015468:	83 c4 10             	add    esp,0x10
c001546b:	89 c3                	mov    ebx,eax
c001546d:	83 ec 0c             	sub    esp,0xc
c0015470:	53                   	push   ebx
c0015471:	e8 52 07 01 00       	call   c0025bc8 <APIC::APIC()>
c0015476:	83 c4 10             	add    esp,0x10
c0015479:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001547c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001547f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015482:	8b 00                	mov    eax,DWORD PTR [eax]
c0015484:	83 c0 08             	add    eax,0x8
c0015487:	8b 00                	mov    eax,DWORD PTR [eax]
c0015489:	6a 00                	push   0x0
c001548b:	6a 00                	push   0x0
c001548d:	6a 00                	push   0x0
c001548f:	52                   	push   edx
c0015490:	ff d0                	call   eax
c0015492:	83 c4 10             	add    esp,0x10
c0015495:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c001549a:	83 ec 08             	sub    esp,0x8
c001549d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154a0:	50                   	push   eax
c00154a1:	e8 44 e8 ff ff       	call   c0013cea <Device::addChild(Device*)>
c00154a6:	83 c4 10             	add    esp,0x10
c00154a9:	c7 05 88 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e588,0x0
c00154b3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b8:	83 c0 24             	add    eax,0x24
c00154bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00154bd:	6a 00                	push   0x0
c00154bf:	68 d6 4c 01 c0       	push   0xc0014cd6
c00154c4:	6a 00                	push   0x0
c00154c6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154c9:	ff d0                	call   eax
c00154cb:	83 c4 10             	add    esp,0x10
c00154ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d3:	83 c0 24             	add    eax,0x24
c00154d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d8:	6a 00                	push   0x0
c00154da:	68 d6 4c 01 c0       	push   0xc0014cd6
c00154df:	6a 01                	push   0x1
c00154e1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154e4:	ff d0                	call   eax
c00154e6:	83 c4 10             	add    esp,0x10
c00154e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ee:	83 c0 24             	add    eax,0x24
c00154f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00154f3:	6a 00                	push   0x0
c00154f5:	68 a9 45 01 c0       	push   0xc00145a9
c00154fa:	6a 02                	push   0x2
c00154fc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154ff:	ff d0                	call   eax
c0015501:	83 c4 10             	add    esp,0x10
c0015504:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015507:	8b 00                	mov    eax,DWORD PTR [eax]
c0015509:	83 c0 24             	add    eax,0x24
c001550c:	8b 00                	mov    eax,DWORD PTR [eax]
c001550e:	6a 00                	push   0x0
c0015510:	68 d6 4c 01 c0       	push   0xc0014cd6
c0015515:	6a 03                	push   0x3
c0015517:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001551a:	ff d0                	call   eax
c001551c:	83 c4 10             	add    esp,0x10
c001551f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015522:	8b 00                	mov    eax,DWORD PTR [eax]
c0015524:	83 c0 24             	add    eax,0x24
c0015527:	8b 00                	mov    eax,DWORD PTR [eax]
c0015529:	6a 00                	push   0x0
c001552b:	68 d6 4c 01 c0       	push   0xc0014cd6
c0015530:	6a 04                	push   0x4
c0015532:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015535:	ff d0                	call   eax
c0015537:	83 c4 10             	add    esp,0x10
c001553a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001553d:	8b 00                	mov    eax,DWORD PTR [eax]
c001553f:	83 c0 24             	add    eax,0x24
c0015542:	8b 00                	mov    eax,DWORD PTR [eax]
c0015544:	6a 00                	push   0x0
c0015546:	68 d6 4c 01 c0       	push   0xc0014cd6
c001554b:	6a 05                	push   0x5
c001554d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015550:	ff d0                	call   eax
c0015552:	83 c4 10             	add    esp,0x10
c0015555:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015558:	8b 00                	mov    eax,DWORD PTR [eax]
c001555a:	83 c0 24             	add    eax,0x24
c001555d:	8b 00                	mov    eax,DWORD PTR [eax]
c001555f:	6a 00                	push   0x0
c0015561:	68 f5 4c 01 c0       	push   0xc0014cf5
c0015566:	6a 06                	push   0x6
c0015568:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001556b:	ff d0                	call   eax
c001556d:	83 c4 10             	add    esp,0x10
c0015570:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015573:	8b 00                	mov    eax,DWORD PTR [eax]
c0015575:	83 c0 24             	add    eax,0x24
c0015578:	8b 00                	mov    eax,DWORD PTR [eax]
c001557a:	6a 00                	push   0x0
c001557c:	68 db 4b 01 c0       	push   0xc0014bdb
c0015581:	6a 07                	push   0x7
c0015583:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015586:	ff d0                	call   eax
c0015588:	83 c4 10             	add    esp,0x10
c001558b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001558e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015590:	83 c0 24             	add    eax,0x24
c0015593:	8b 00                	mov    eax,DWORD PTR [eax]
c0015595:	6a 00                	push   0x0
c0015597:	68 c4 43 01 c0       	push   0xc00143c4
c001559c:	6a 08                	push   0x8
c001559e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155a1:	ff d0                	call   eax
c00155a3:	83 c4 10             	add    esp,0x10
c00155a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00155ab:	83 c0 24             	add    eax,0x24
c00155ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00155b0:	6a 00                	push   0x0
c00155b2:	68 d6 4c 01 c0       	push   0xc0014cd6
c00155b7:	6a 09                	push   0x9
c00155b9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155bc:	ff d0                	call   eax
c00155be:	83 c4 10             	add    esp,0x10
c00155c1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00155c6:	83 c0 24             	add    eax,0x24
c00155c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00155cb:	6a 00                	push   0x0
c00155cd:	68 d6 4c 01 c0       	push   0xc0014cd6
c00155d2:	6a 0a                	push   0xa
c00155d4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155d7:	ff d0                	call   eax
c00155d9:	83 c4 10             	add    esp,0x10
c00155dc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155df:	8b 00                	mov    eax,DWORD PTR [eax]
c00155e1:	83 c0 24             	add    eax,0x24
c00155e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00155e6:	6a 00                	push   0x0
c00155e8:	68 d6 4c 01 c0       	push   0xc0014cd6
c00155ed:	6a 0b                	push   0xb
c00155ef:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155f2:	ff d0                	call   eax
c00155f4:	83 c4 10             	add    esp,0x10
c00155f7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00155fc:	83 c0 24             	add    eax,0x24
c00155ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0015601:	6a 00                	push   0x0
c0015603:	68 d6 4c 01 c0       	push   0xc0014cd6
c0015608:	6a 0c                	push   0xc
c001560a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001560d:	ff d0                	call   eax
c001560f:	83 c4 10             	add    esp,0x10
c0015612:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015615:	8b 00                	mov    eax,DWORD PTR [eax]
c0015617:	83 c0 24             	add    eax,0x24
c001561a:	8b 00                	mov    eax,DWORD PTR [eax]
c001561c:	6a 00                	push   0x0
c001561e:	68 4e 4c 01 c0       	push   0xc0014c4e
c0015623:	6a 0d                	push   0xd
c0015625:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015628:	ff d0                	call   eax
c001562a:	83 c4 10             	add    esp,0x10
c001562d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015630:	8b 00                	mov    eax,DWORD PTR [eax]
c0015632:	83 c0 24             	add    eax,0x24
c0015635:	8b 00                	mov    eax,DWORD PTR [eax]
c0015637:	6a 00                	push   0x0
c0015639:	68 87 4c 01 c0       	push   0xc0014c87
c001563e:	6a 0e                	push   0xe
c0015640:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015643:	ff d0                	call   eax
c0015645:	83 c4 10             	add    esp,0x10
c0015648:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001564b:	8b 00                	mov    eax,DWORD PTR [eax]
c001564d:	83 c0 24             	add    eax,0x24
c0015650:	8b 00                	mov    eax,DWORD PTR [eax]
c0015652:	6a 00                	push   0x0
c0015654:	68 d6 4c 01 c0       	push   0xc0014cd6
c0015659:	6a 0f                	push   0xf
c001565b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001565e:	ff d0                	call   eax
c0015660:	83 c4 10             	add    esp,0x10
c0015663:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015666:	8b 00                	mov    eax,DWORD PTR [eax]
c0015668:	83 c0 24             	add    eax,0x24
c001566b:	8b 00                	mov    eax,DWORD PTR [eax]
c001566d:	6a 00                	push   0x0
c001566f:	68 d6 4c 01 c0       	push   0xc0014cd6
c0015674:	6a 10                	push   0x10
c0015676:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015679:	ff d0                	call   eax
c001567b:	83 c4 10             	add    esp,0x10
c001567e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015681:	8b 00                	mov    eax,DWORD PTR [eax]
c0015683:	83 c0 24             	add    eax,0x24
c0015686:	8b 00                	mov    eax,DWORD PTR [eax]
c0015688:	6a 00                	push   0x0
c001568a:	68 d6 4c 01 c0       	push   0xc0014cd6
c001568f:	6a 11                	push   0x11
c0015691:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015694:	ff d0                	call   eax
c0015696:	83 c4 10             	add    esp,0x10
c0015699:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001569c:	8b 00                	mov    eax,DWORD PTR [eax]
c001569e:	83 c0 24             	add    eax,0x24
c00156a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00156a3:	6a 00                	push   0x0
c00156a5:	68 d6 4c 01 c0       	push   0xc0014cd6
c00156aa:	6a 12                	push   0x12
c00156ac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156af:	ff d0                	call   eax
c00156b1:	83 c4 10             	add    esp,0x10
c00156b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00156b9:	83 c0 24             	add    eax,0x24
c00156bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00156be:	6a 00                	push   0x0
c00156c0:	68 d6 4c 01 c0       	push   0xc0014cd6
c00156c5:	6a 13                	push   0x13
c00156c7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156ca:	ff d0                	call   eax
c00156cc:	83 c4 10             	add    esp,0x10
c00156cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00156d4:	83 c0 24             	add    eax,0x24
c00156d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00156d9:	6a 00                	push   0x0
c00156db:	68 d6 4c 01 c0       	push   0xc0014cd6
c00156e0:	6a 14                	push   0x14
c00156e2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156e5:	ff d0                	call   eax
c00156e7:	83 c4 10             	add    esp,0x10
c00156ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00156ef:	83 c0 24             	add    eax,0x24
c00156f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00156f4:	6a 00                	push   0x0
c00156f6:	68 d6 4c 01 c0       	push   0xc0014cd6
c00156fb:	6a 1e                	push   0x1e
c00156fd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015700:	ff d0                	call   eax
c0015702:	83 c4 10             	add    esp,0x10
c0015705:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015708:	8b 00                	mov    eax,DWORD PTR [eax]
c001570a:	83 c0 24             	add    eax,0x24
c001570d:	8b 00                	mov    eax,DWORD PTR [eax]
c001570f:	6a 00                	push   0x0
c0015711:	68 11 c4 01 c0       	push   0xc001c411
c0015716:	6a 60                	push   0x60
c0015718:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001571b:	ff d0                	call   eax
c001571d:	83 c4 10             	add    esp,0x10
c0015720:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015723:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015726:	c9                   	leave  
c0015727:	c3                   	ret    

c0015728 <InterruptController::convertLegacyIRQNumber(int)>:
c0015728:	55                   	push   ebp
c0015729:	89 e5                	mov    ebp,esp
c001572b:	83 ec 08             	sub    esp,0x8
c001572e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015731:	83 ec 0c             	sub    esp,0xc
c0015734:	50                   	push   eax
c0015735:	e8 b0 e8 ff ff       	call   c0013fea <Device::getName()>
c001573a:	83 c4 10             	add    esp,0x10
c001573d:	8a 00                	mov    al,BYTE PTR [eax]
c001573f:	3c 41                	cmp    al,0x41
c0015741:	0f 94 c0             	sete   al
c0015744:	84 c0                	test   al,al
c0015746:	74 28                	je     c0015770 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015748:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001574c:	7f 12                	jg     c0015760 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c001574e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015751:	05 60 d6 02 c0       	add    eax,0xc002d660
c0015756:	8a 00                	mov    al,BYTE PTR [eax]
c0015758:	0f b6 c0             	movzx  eax,al
c001575b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001575e:	eb 10                	jmp    c0015770 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015760:	83 ec 0c             	sub    esp,0xc
c0015763:	68 10 b5 02 c0       	push   0xc002b510
c0015768:	e8 b2 4a 00 00       	call   c001a21f <Krnl::panic(char const*)>
c001576d:	83 c4 10             	add    esp,0x10
c0015770:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015773:	c9                   	leave  
c0015774:	c3                   	ret    
c0015775:	90                   	nop

c0015776 <startGUI(void*)>:
c0015776:	55                   	push   ebp
c0015777:	89 e5                	mov    ebp,esp
c0015779:	53                   	push   ebx
c001577a:	83 ec 04             	sub    esp,0x4
c001577d:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c0015782:	48                   	dec    eax
c0015783:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c0015788:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c001578d:	85 c0                	test   eax,eax
c001578f:	75 01                	jne    c0015792 <startGUI(void*)+0x1c>
c0015791:	fb                   	sti    
c0015792:	8b 1d 08 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e408
c0015798:	83 ec 08             	sub    esp,0x8
c001579b:	6a 01                	push   0x1
c001579d:	68 90 b5 02 c0       	push   0xc002b590
c00157a2:	e8 45 7c 00 00       	call   c001d3ec <Thr::loadDLL(char const*, bool)>
c00157a7:	83 c4 10             	add    esp,0x10
c00157aa:	83 ec 08             	sub    esp,0x8
c00157ad:	53                   	push   ebx
c00157ae:	50                   	push   eax
c00157af:	e8 69 7e 00 00       	call   c001d61d <Thr::executeDLL(unsigned long, void*)>
c00157b4:	83 c4 10             	add    esp,0x10
c00157b7:	8b 1d 08 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e408
c00157bd:	83 ec 08             	sub    esp,0x8
c00157c0:	6a 01                	push   0x1
c00157c2:	68 aa b5 02 c0       	push   0xc002b5aa
c00157c7:	e8 20 7c 00 00       	call   c001d3ec <Thr::loadDLL(char const*, bool)>
c00157cc:	83 c4 10             	add    esp,0x10
c00157cf:	83 ec 08             	sub    esp,0x8
c00157d2:	53                   	push   ebx
c00157d3:	50                   	push   eax
c00157d4:	e8 44 7e 00 00       	call   c001d61d <Thr::executeDLL(unsigned long, void*)>
c00157d9:	83 c4 10             	add    esp,0x10
c00157dc:	90                   	nop
c00157dd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00157e0:	c9                   	leave  
c00157e1:	c3                   	ret    

c00157e2 <startGUIVESA(void*)>:
c00157e2:	55                   	push   ebp
c00157e3:	89 e5                	mov    ebp,esp
c00157e5:	53                   	push   ebx
c00157e6:	83 ec 04             	sub    esp,0x4
c00157e9:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c00157ee:	48                   	dec    eax
c00157ef:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c00157f4:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c00157f9:	85 c0                	test   eax,eax
c00157fb:	75 01                	jne    c00157fe <startGUIVESA(void*)+0x1c>
c00157fd:	fb                   	sti    
c00157fe:	8b 1d 08 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e408
c0015804:	83 ec 08             	sub    esp,0x8
c0015807:	6a 01                	push   0x1
c0015809:	68 c4 b5 02 c0       	push   0xc002b5c4
c001580e:	e8 d9 7b 00 00       	call   c001d3ec <Thr::loadDLL(char const*, bool)>
c0015813:	83 c4 10             	add    esp,0x10
c0015816:	83 ec 08             	sub    esp,0x8
c0015819:	53                   	push   ebx
c001581a:	50                   	push   eax
c001581b:	e8 fd 7d 00 00       	call   c001d61d <Thr::executeDLL(unsigned long, void*)>
c0015820:	83 c4 10             	add    esp,0x10
c0015823:	8b 1d 08 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e408
c0015829:	83 ec 08             	sub    esp,0x8
c001582c:	6a 01                	push   0x1
c001582e:	68 aa b5 02 c0       	push   0xc002b5aa
c0015833:	e8 b4 7b 00 00       	call   c001d3ec <Thr::loadDLL(char const*, bool)>
c0015838:	83 c4 10             	add    esp,0x10
c001583b:	83 ec 08             	sub    esp,0x8
c001583e:	53                   	push   ebx
c001583f:	50                   	push   eax
c0015840:	e8 d8 7d 00 00       	call   c001d61d <Thr::executeDLL(unsigned long, void*)>
c0015845:	83 c4 10             	add    esp,0x10
c0015848:	90                   	nop
c0015849:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001584c:	c9                   	leave  
c001584d:	c3                   	ret    

c001584e <sendKeyToTerminal(unsigned char)>:
c001584e:	55                   	push   ebp
c001584f:	89 e5                	mov    ebp,esp
c0015851:	83 ec 28             	sub    esp,0x28
c0015854:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015857:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001585a:	a1 c4 e4 02 c0       	mov    eax,ds:0xc002e4c4
c001585f:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015863:	83 ec 08             	sub    esp,0x8
c0015866:	52                   	push   edx
c0015867:	50                   	push   eax
c0015868:	e8 57 b4 ff ff       	call   c0010cc4 <VgaText::receiveKey(unsigned char)>
c001586d:	83 c4 10             	add    esp,0x10
c0015870:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015874:	0f 85 8f 00 00 00    	jne    c0015909 <sendKeyToTerminal(unsigned char)+0xbb>
c001587a:	fa                   	cli    
c001587b:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c0015880:	40                   	inc    eax
c0015881:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c0015886:	a1 04 f9 02 c0       	mov    eax,ds:0xc002f904
c001588b:	40                   	inc    eax
c001588c:	a3 04 f9 02 c0       	mov    ds:0xc002f904,eax
c0015891:	a1 a0 e5 02 c0       	mov    eax,ds:0xc002e5a0
c0015896:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015899:	c7 05 a0 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e5a0,0x0
c00158a3:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00158a7:	74 1f                	je     c00158c8 <sendKeyToTerminal(unsigned char)+0x7a>
c00158a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158ac:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00158af:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00158b2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00158b5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00158b8:	83 ec 0c             	sub    esp,0xc
c00158bb:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00158be:	e8 80 89 00 00       	call   c001e243 <unblockTask(ThreadControlBlock*)>
c00158c3:	83 c4 10             	add    esp,0x10
c00158c6:	eb db                	jmp    c00158a3 <sendKeyToTerminal(unsigned char)+0x55>
c00158c8:	a1 04 f9 02 c0       	mov    eax,ds:0xc002f904
c00158cd:	48                   	dec    eax
c00158ce:	a3 04 f9 02 c0       	mov    ds:0xc002f904,eax
c00158d3:	a1 04 f9 02 c0       	mov    eax,ds:0xc002f904
c00158d8:	85 c0                	test   eax,eax
c00158da:	75 18                	jne    c00158f4 <sendKeyToTerminal(unsigned char)+0xa6>
c00158dc:	a1 00 f9 02 c0       	mov    eax,ds:0xc002f900
c00158e1:	85 c0                	test   eax,eax
c00158e3:	74 0f                	je     c00158f4 <sendKeyToTerminal(unsigned char)+0xa6>
c00158e5:	c7 05 00 f9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f900,0x0
c00158ef:	e8 bd 84 00 00       	call   c001ddb1 <schedule()>
c00158f4:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c00158f9:	48                   	dec    eax
c00158fa:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c00158ff:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c0015904:	85 c0                	test   eax,eax
c0015906:	75 01                	jne    c0015909 <sendKeyToTerminal(unsigned char)+0xbb>
c0015908:	fb                   	sti    
c0015909:	90                   	nop
c001590a:	c9                   	leave  
c001590b:	c3                   	ret    

c001590c <sendKeyboardToken(KeyboardToken)>:
c001590c:	55                   	push   ebp
c001590d:	89 e5                	mov    ebp,esp
c001590f:	83 ec 18             	sub    esp,0x18
c0015912:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015915:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015918:	0f b7 c0             	movzx  eax,ax
c001591b:	83 f2 01             	xor    edx,0x1
c001591e:	88 90 c0 e5 02 c0    	mov    BYTE PTR [eax-0x3ffd1a40],dl
c0015924:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0015929:	85 c0                	test   eax,eax
c001592b:	74 24                	je     c0015951 <sendKeyboardToken(KeyboardToken)+0x45>
c001592d:	8b 0d a8 e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e5a8
c0015933:	83 ec 04             	sub    esp,0x4
c0015936:	68 c0 e5 02 c0       	push   0xc002e5c0
c001593b:	83 ec 08             	sub    esp,0x8
c001593e:	89 e2                	mov    edx,esp
c0015940:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015943:	89 02                	mov    DWORD PTR [edx],eax
c0015945:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015948:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001594c:	ff d1                	call   ecx
c001594e:	83 c4 10             	add    esp,0x10
c0015951:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015954:	66 3d 03 02          	cmp    ax,0x203
c0015958:	75 07                	jne    c0015961 <sendKeyboardToken(KeyboardToken)+0x55>
c001595a:	a0 c0 e6 02 c0       	mov    al,ds:0xc002e6c0
c001595f:	84 c0                	test   al,al
c0015961:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015965:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015968:	a0 c8 e9 02 c0       	mov    al,ds:0xc002e9c8
c001596d:	38 c2                	cmp    dl,al
c001596f:	74 1c                	je     c001598d <sendKeyboardToken(KeyboardToken)+0x81>
c0015971:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015974:	a2 c8 e9 02 c0       	mov    ds:0xc002e9c8,al
c0015979:	a0 c8 e9 02 c0       	mov    al,ds:0xc002e9c8
c001597e:	0f b6 c0             	movzx  eax,al
c0015981:	83 ec 0c             	sub    esp,0xc
c0015984:	50                   	push   eax
c0015985:	e8 7a a9 ff ff       	call   c0010304 <setTerminalScrollLock(bool)>
c001598a:	83 c4 10             	add    esp,0x10
c001598d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015990:	84 c0                	test   al,al
c0015992:	0f 84 ae 00 00 00    	je     c0015a46 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015998:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001599b:	66 3d 10 03          	cmp    ax,0x310
c001599f:	75 06                	jne    c00159a7 <sendKeyboardToken(KeyboardToken)+0x9b>
c00159a1:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00159a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159aa:	66 3d 11 03          	cmp    ax,0x311
c00159ae:	75 06                	jne    c00159b6 <sendKeyboardToken(KeyboardToken)+0xaa>
c00159b0:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00159b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159b9:	66 3d 12 03          	cmp    ax,0x312
c00159bd:	75 06                	jne    c00159c5 <sendKeyboardToken(KeyboardToken)+0xb9>
c00159bf:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00159c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159c8:	66 3d 13 03          	cmp    ax,0x313
c00159cc:	75 06                	jne    c00159d4 <sendKeyboardToken(KeyboardToken)+0xc8>
c00159ce:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00159d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159d7:	66 3d 14 03          	cmp    ax,0x314
c00159db:	75 06                	jne    c00159e3 <sendKeyboardToken(KeyboardToken)+0xd7>
c00159dd:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00159e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159e6:	66 3d 15 03          	cmp    ax,0x315
c00159ea:	75 06                	jne    c00159f2 <sendKeyboardToken(KeyboardToken)+0xe6>
c00159ec:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00159f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159f5:	66 3d 16 03          	cmp    ax,0x316
c00159f9:	75 06                	jne    c0015a01 <sendKeyboardToken(KeyboardToken)+0xf5>
c00159fb:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015a01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a04:	66 3d 17 03          	cmp    ax,0x317
c0015a08:	75 06                	jne    c0015a10 <sendKeyboardToken(KeyboardToken)+0x104>
c0015a0a:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015a10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a13:	66 3d 18 03          	cmp    ax,0x318
c0015a17:	75 06                	jne    c0015a1f <sendKeyboardToken(KeyboardToken)+0x113>
c0015a19:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015a1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a22:	66 3d 19 03          	cmp    ax,0x319
c0015a26:	75 06                	jne    c0015a2e <sendKeyboardToken(KeyboardToken)+0x122>
c0015a28:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015a2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a31:	66 3d 1a 03          	cmp    ax,0x31a
c0015a35:	0f 85 c9 00 00 00    	jne    c0015b04 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015a3b:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015a41:	e9 be 00 00 00       	jmp    c0015b04 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015a46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a49:	66 3d 10 03          	cmp    ax,0x310
c0015a4d:	75 0a                	jne    c0015a59 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015a4f:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015a55:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a5c:	66 3d 11 03          	cmp    ax,0x311
c0015a60:	75 0a                	jne    c0015a6c <sendKeyboardToken(KeyboardToken)+0x160>
c0015a62:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015a68:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a6f:	66 3d 12 03          	cmp    ax,0x312
c0015a73:	75 0a                	jne    c0015a7f <sendKeyboardToken(KeyboardToken)+0x173>
c0015a75:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015a7b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a82:	66 3d 13 03          	cmp    ax,0x313
c0015a86:	75 0a                	jne    c0015a92 <sendKeyboardToken(KeyboardToken)+0x186>
c0015a88:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015a8e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a95:	66 3d 14 03          	cmp    ax,0x314
c0015a99:	75 0a                	jne    c0015aa5 <sendKeyboardToken(KeyboardToken)+0x199>
c0015a9b:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015aa1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015aa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aa8:	66 3d 15 03          	cmp    ax,0x315
c0015aac:	75 0a                	jne    c0015ab8 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015aae:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015ab4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ab8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015abb:	66 3d 16 03          	cmp    ax,0x316
c0015abf:	75 0a                	jne    c0015acb <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015ac1:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015ac7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015acb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ace:	66 3d 17 03          	cmp    ax,0x317
c0015ad2:	75 0a                	jne    c0015ade <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015ad4:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015ada:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ade:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ae1:	66 3d 18 03          	cmp    ax,0x318
c0015ae5:	75 0a                	jne    c0015af1 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015ae7:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015aed:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015af1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015af4:	66 3d 19 03          	cmp    ax,0x319
c0015af8:	75 0a                	jne    c0015b04 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015afa:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015b00:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b07:	66 3d 00 02          	cmp    ax,0x200
c0015b0b:	75 2c                	jne    c0015b39 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015b0d:	a0 c0 e9 02 c0       	mov    al,ds:0xc002e9c0
c0015b12:	83 f0 01             	xor    eax,0x1
c0015b15:	84 c0                	test   al,al
c0015b17:	74 20                	je     c0015b39 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015b19:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c0015b1e:	6a 01                	push   0x1
c0015b20:	6a 00                	push   0x0
c0015b22:	68 76 57 01 c0       	push   0xc0015776
c0015b27:	50                   	push   eax
c0015b28:	e8 5f 80 00 00       	call   c001db8c <Process::createThread(void (*)(void*), void*, int)>
c0015b2d:	83 c4 10             	add    esp,0x10
c0015b30:	c6 05 c0 e9 02 c0 01 	mov    BYTE PTR ds:0xc002e9c0,0x1
c0015b37:	eb 33                	jmp    c0015b6c <sendKeyboardToken(KeyboardToken)+0x260>
c0015b39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b3c:	66 3d 01 02          	cmp    ax,0x201
c0015b40:	75 2a                	jne    c0015b6c <sendKeyboardToken(KeyboardToken)+0x260>
c0015b42:	a0 c0 e9 02 c0       	mov    al,ds:0xc002e9c0
c0015b47:	83 f0 01             	xor    eax,0x1
c0015b4a:	84 c0                	test   al,al
c0015b4c:	74 1e                	je     c0015b6c <sendKeyboardToken(KeyboardToken)+0x260>
c0015b4e:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c0015b53:	6a 01                	push   0x1
c0015b55:	6a 00                	push   0x0
c0015b57:	68 e2 57 01 c0       	push   0xc00157e2
c0015b5c:	50                   	push   eax
c0015b5d:	e8 2a 80 00 00       	call   c001db8c <Process::createThread(void (*)(void*), void*, int)>
c0015b62:	83 c4 10             	add    esp,0x10
c0015b65:	c6 05 c0 e9 02 c0 01 	mov    BYTE PTR ds:0xc002e9c0,0x1
c0015b6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b6f:	66 3d 1d 03          	cmp    ax,0x31d
c0015b73:	75 06                	jne    c0015b7b <sendKeyboardToken(KeyboardToken)+0x26f>
c0015b75:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015b7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b7e:	66 3d 1c 03          	cmp    ax,0x31c
c0015b82:	75 06                	jne    c0015b8a <sendKeyboardToken(KeyboardToken)+0x27e>
c0015b84:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015b8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b8d:	66 3d 1b 03          	cmp    ax,0x31b
c0015b91:	75 06                	jne    c0015b99 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015b93:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015b99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b9c:	66 3d 1e 03          	cmp    ax,0x31e
c0015ba0:	75 06                	jne    c0015ba8 <sendKeyboardToken(KeyboardToken)+0x29c>
c0015ba2:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015ba8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bab:	66 3d 1f 03          	cmp    ax,0x31f
c0015baf:	75 06                	jne    c0015bb7 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015bb1:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015bb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bba:	66 3d 1a 03          	cmp    ax,0x31a
c0015bbe:	75 06                	jne    c0015bc6 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015bc0:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015bc6:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015bca:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015bcd:	83 f0 01             	xor    eax,0x1
c0015bd0:	84 c0                	test   al,al
c0015bd2:	74 77                	je     c0015c4b <sendKeyboardToken(KeyboardToken)+0x33f>
c0015bd4:	a0 c1 e6 02 c0       	mov    al,ds:0xc002e6c1
c0015bd9:	84 c0                	test   al,al
c0015bdb:	74 41                	je     c0015c1e <sendKeyboardToken(KeyboardToken)+0x312>
c0015bdd:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015be1:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015be5:	74 2b                	je     c0015c12 <sendKeyboardToken(KeyboardToken)+0x306>
c0015be7:	8b 15 c4 e9 02 c0    	mov    edx,DWORD PTR ds:0xc002e9c4
c0015bed:	89 d0                	mov    eax,edx
c0015bef:	c1 e0 02             	shl    eax,0x2
c0015bf2:	01 d0                	add    eax,edx
c0015bf4:	01 c0                	add    eax,eax
c0015bf6:	a3 c4 e9 02 c0       	mov    ds:0xc002e9c4,eax
c0015bfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bfe:	0f b7 c0             	movzx  eax,ax
c0015c01:	8d 50 d0             	lea    edx,[eax-0x30]
c0015c04:	a1 c4 e9 02 c0       	mov    eax,ds:0xc002e9c4
c0015c09:	01 d0                	add    eax,edx
c0015c0b:	a3 c4 e9 02 c0       	mov    ds:0xc002e9c4,eax
c0015c10:	eb 6d                	jmp    c0015c7f <sendKeyboardToken(KeyboardToken)+0x373>
c0015c12:	c7 05 c4 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e9c4,0x0
c0015c1c:	eb 61                	jmp    c0015c7f <sendKeyboardToken(KeyboardToken)+0x373>
c0015c1e:	a1 c4 e9 02 c0       	mov    eax,ds:0xc002e9c4
c0015c23:	85 c0                	test   eax,eax
c0015c25:	74 18                	je     c0015c3f <sendKeyboardToken(KeyboardToken)+0x333>
c0015c27:	a1 c4 e9 02 c0       	mov    eax,ds:0xc002e9c4
c0015c2c:	0f b6 c0             	movzx  eax,al
c0015c2f:	83 ec 0c             	sub    esp,0xc
c0015c32:	50                   	push   eax
c0015c33:	e8 16 fc ff ff       	call   c001584e <sendKeyToTerminal(unsigned char)>
c0015c38:	83 c4 10             	add    esp,0x10
c0015c3b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015c3f:	c7 05 c4 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e9c4,0x0
c0015c49:	eb 34                	jmp    c0015c7f <sendKeyboardToken(KeyboardToken)+0x373>
c0015c4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c4e:	66 3d 01 01          	cmp    ax,0x101
c0015c52:	75 2b                	jne    c0015c7f <sendKeyboardToken(KeyboardToken)+0x373>
c0015c54:	a1 c4 e9 02 c0       	mov    eax,ds:0xc002e9c4
c0015c59:	85 c0                	test   eax,eax
c0015c5b:	74 18                	je     c0015c75 <sendKeyboardToken(KeyboardToken)+0x369>
c0015c5d:	a1 c4 e9 02 c0       	mov    eax,ds:0xc002e9c4
c0015c62:	0f b6 c0             	movzx  eax,al
c0015c65:	83 ec 0c             	sub    esp,0xc
c0015c68:	50                   	push   eax
c0015c69:	e8 e0 fb ff ff       	call   c001584e <sendKeyToTerminal(unsigned char)>
c0015c6e:	83 c4 10             	add    esp,0x10
c0015c71:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015c75:	c7 05 c4 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e9c4,0x0
c0015c7f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015c82:	83 f0 01             	xor    eax,0x1
c0015c85:	84 c0                	test   al,al
c0015c87:	74 4c                	je     c0015cd5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015c89:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015c8c:	83 f0 01             	xor    eax,0x1
c0015c8f:	84 c0                	test   al,al
c0015c91:	74 42                	je     c0015cd5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015c93:	a0 c0 e6 02 c0       	mov    al,ds:0xc002e6c0
c0015c98:	83 f0 01             	xor    eax,0x1
c0015c9b:	84 c0                	test   al,al
c0015c9d:	74 36                	je     c0015cd5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015c9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ca2:	66 83 f8 1f          	cmp    ax,0x1f
c0015ca6:	76 09                	jbe    c0015cb1 <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015ca8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cab:	66 83 f8 7e          	cmp    ax,0x7e
c0015caf:	76 12                	jbe    c0015cc3 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015cb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cb4:	66 83 f8 0a          	cmp    ax,0xa
c0015cb8:	74 09                	je     c0015cc3 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015cba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cbd:	66 83 f8 08          	cmp    ax,0x8
c0015cc1:	75 12                	jne    c0015cd5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015cc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cc6:	0f b6 c0             	movzx  eax,al
c0015cc9:	83 ec 0c             	sub    esp,0xc
c0015ccc:	50                   	push   eax
c0015ccd:	e8 7c fb ff ff       	call   c001584e <sendKeyToTerminal(unsigned char)>
c0015cd2:	83 c4 10             	add    esp,0x10
c0015cd5:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015cd8:	83 f0 01             	xor    eax,0x1
c0015cdb:	84 c0                	test   al,al
c0015cdd:	74 4f                	je     c0015d2e <sendKeyboardToken(KeyboardToken)+0x422>
c0015cdf:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015ce2:	83 f0 01             	xor    eax,0x1
c0015ce5:	84 c0                	test   al,al
c0015ce7:	74 45                	je     c0015d2e <sendKeyboardToken(KeyboardToken)+0x422>
c0015ce9:	a0 c0 e6 02 c0       	mov    al,ds:0xc002e6c0
c0015cee:	84 c0                	test   al,al
c0015cf0:	74 3c                	je     c0015d2e <sendKeyboardToken(KeyboardToken)+0x422>
c0015cf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cf5:	66 83 f8 3f          	cmp    ax,0x3f
c0015cf9:	76 33                	jbe    c0015d2e <sendKeyboardToken(KeyboardToken)+0x422>
c0015cfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cfe:	66 83 f8 7f          	cmp    ax,0x7f
c0015d02:	77 2a                	ja     c0015d2e <sendKeyboardToken(KeyboardToken)+0x422>
c0015d04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d07:	88 c2                	mov    dl,al
c0015d09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d0c:	66 83 f8 5f          	cmp    ax,0x5f
c0015d10:	76 04                	jbe    c0015d16 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015d12:	b0 20                	mov    al,0x20
c0015d14:	eb 02                	jmp    c0015d18 <sendKeyboardToken(KeyboardToken)+0x40c>
c0015d16:	b0 00                	mov    al,0x0
c0015d18:	29 c2                	sub    edx,eax
c0015d1a:	88 d0                	mov    al,dl
c0015d1c:	83 e8 40             	sub    eax,0x40
c0015d1f:	0f b6 c0             	movzx  eax,al
c0015d22:	83 ec 0c             	sub    esp,0xc
c0015d25:	50                   	push   eax
c0015d26:	e8 23 fb ff ff       	call   c001584e <sendKeyToTerminal(unsigned char)>
c0015d2b:	83 c4 10             	add    esp,0x10
c0015d2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d31:	66 3d 00 03          	cmp    ax,0x300
c0015d35:	75 0f                	jne    c0015d46 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015d37:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015d3a:	83 f0 01             	xor    eax,0x1
c0015d3d:	84 c0                	test   al,al
c0015d3f:	74 05                	je     c0015d46 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015d41:	e8 2f a9 ff ff       	call   c0010675 <doTerminalCycle()>
c0015d46:	90                   	nop
c0015d47:	c9                   	leave  
c0015d48:	c3                   	ret    

c0015d49 <clearInternalKeybuffer(VgaText*)>:
c0015d49:	55                   	push   ebp
c0015d4a:	89 e5                	mov    ebp,esp
c0015d4c:	83 ec 08             	sub    esp,0x8
c0015d4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d52:	05 98 01 00 00       	add    eax,0x198
c0015d57:	83 ec 0c             	sub    esp,0xc
c0015d5a:	50                   	push   eax
c0015d5b:	e8 0c aa fe ff       	call   c000076c <strlen>
c0015d60:	83 c4 10             	add    esp,0x10
c0015d63:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015d66:	81 c2 98 01 00 00    	add    edx,0x198
c0015d6c:	83 ec 04             	sub    esp,0x4
c0015d6f:	50                   	push   eax
c0015d70:	6a 00                	push   0x0
c0015d72:	52                   	push   edx
c0015d73:	e8 d8 a9 fe ff       	call   c0000750 <memset>
c0015d78:	83 c4 10             	add    esp,0x10
c0015d7b:	90                   	nop
c0015d7c:	c9                   	leave  
c0015d7d:	c3                   	ret    

c0015d7e <readKeyboard(VgaText*, char*, unsigned long)>:
c0015d7e:	55                   	push   ebp
c0015d7f:	89 e5                	mov    ebp,esp
c0015d81:	83 ec 18             	sub    esp,0x18
c0015d84:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0015d89:	85 c0                	test   eax,eax
c0015d8b:	74 2a                	je     c0015db7 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015d8d:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015d93:	8b 0d a8 e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e5a8
c0015d99:	83 ec 04             	sub    esp,0x4
c0015d9c:	68 c0 e5 02 c0       	push   0xc002e5c0
c0015da1:	83 ec 08             	sub    esp,0x8
c0015da4:	89 e2                	mov    edx,esp
c0015da6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015da9:	89 02                	mov    DWORD PTR [edx],eax
c0015dab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015dae:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015db2:	ff d1                	call   ecx
c0015db4:	83 c4 10             	add    esp,0x10
c0015db7:	fb                   	sti    
c0015db8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015dbf:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015dc3:	0f 84 a1 00 00 00    	je     c0015e6a <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015dc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dcc:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015dd2:	84 c0                	test   al,al
c0015dd4:	75 28                	jne    c0015dfe <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015dd6:	fa                   	cli    
c0015dd7:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c0015ddc:	40                   	inc    eax
c0015ddd:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c0015de2:	e8 ca 7f 00 00       	call   c001ddb1 <schedule()>
c0015de7:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c0015dec:	48                   	dec    eax
c0015ded:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c0015df2:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c0015df7:	85 c0                	test   eax,eax
c0015df9:	75 ce                	jne    c0015dc9 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015dfb:	fb                   	sti    
c0015dfc:	eb cb                	jmp    c0015dc9 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015dfe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015e01:	8d 50 01             	lea    edx,[eax+0x1]
c0015e04:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015e07:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e0a:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015e10:	88 10                	mov    BYTE PTR [eax],dl
c0015e12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e15:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015e1b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015e1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e21:	05 98 01 00 00       	add    eax,0x198
c0015e26:	83 ec 0c             	sub    esp,0xc
c0015e29:	50                   	push   eax
c0015e2a:	e8 3d a9 fe ff       	call   c000076c <strlen>
c0015e2f:	83 c4 10             	add    esp,0x10
c0015e32:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e35:	81 c2 98 01 00 00    	add    edx,0x198
c0015e3b:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015e3e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e41:	81 c2 98 01 00 00    	add    edx,0x198
c0015e47:	83 ec 04             	sub    esp,0x4
c0015e4a:	50                   	push   eax
c0015e4b:	51                   	push   ecx
c0015e4c:	52                   	push   edx
c0015e4d:	e8 36 a8 fe ff       	call   c0000688 <memmove>
c0015e52:	83 c4 10             	add    esp,0x10
c0015e55:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015e58:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015e5b:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015e5f:	0f 85 5a ff ff ff    	jne    c0015dbf <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015e65:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e68:	eb 03                	jmp    c0015e6d <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015e6a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e6d:	c9                   	leave  
c0015e6e:	c3                   	ret    
c0015e6f:	90                   	nop

c0015e70 <Keyboard::Keyboard(char const*)>:
c0015e70:	83 ec 0c             	sub    esp,0xc
c0015e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e77:	83 ec 08             	sub    esp,0x8
c0015e7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e7e:	50                   	push   eax
c0015e7f:	e8 6a e0 ff ff       	call   c0013eee <Device::Device(char const*)>
c0015e84:	83 c4 10             	add    esp,0x10
c0015e87:	ba e8 b5 02 c0       	mov    edx,0xc002b5e8
c0015e8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e90:	89 10                	mov    DWORD PTR [eax],edx
c0015e92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e96:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015ea0:	c6 05 a4 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e5a4,0x1
c0015ea7:	90                   	nop
c0015ea8:	83 c4 0c             	add    esp,0xc
c0015eab:	c3                   	ret    

c0015eac <Keyboard::~Keyboard()>:
c0015eac:	83 ec 0c             	sub    esp,0xc
c0015eaf:	ba e8 b5 02 c0       	mov    edx,0xc002b5e8
c0015eb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015eb8:	89 10                	mov    DWORD PTR [eax],edx
c0015eba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ebe:	83 ec 0c             	sub    esp,0xc
c0015ec1:	50                   	push   eax
c0015ec2:	e8 f1 dc ff ff       	call   c0013bb8 <Device::~Device()>
c0015ec7:	83 c4 10             	add    esp,0x10
c0015eca:	90                   	nop
c0015ecb:	83 c4 0c             	add    esp,0xc
c0015ece:	c3                   	ret    
c0015ecf:	90                   	nop

c0015ed0 <Keyboard::~Keyboard()>:
c0015ed0:	83 ec 0c             	sub    esp,0xc
c0015ed3:	83 ec 0c             	sub    esp,0xc
c0015ed6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015eda:	e8 cd ff ff ff       	call   c0015eac <Keyboard::~Keyboard()>
c0015edf:	83 c4 10             	add    esp,0x10
c0015ee2:	83 ec 08             	sub    esp,0x8
c0015ee5:	68 5c 01 00 00       	push   0x15c
c0015eea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015eee:	e8 e6 c8 ff ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c0015ef3:	83 c4 10             	add    esp,0x10
c0015ef6:	83 c4 0c             	add    esp,0xc
c0015ef9:	c3                   	ret    

c0015efa <LogicalDisk::close(int, int, void*)>:
c0015efa:	83 c8 ff             	or     eax,0xffffffff
c0015efd:	c3                   	ret    

c0015efe <LogicalDisk::~LogicalDisk()>:
c0015efe:	83 ec 0c             	sub    esp,0xc
c0015f01:	ba 60 b6 02 c0       	mov    edx,0xc002b660
c0015f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f0a:	89 10                	mov    DWORD PTR [eax],edx
c0015f0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f10:	83 ec 0c             	sub    esp,0xc
c0015f13:	50                   	push   eax
c0015f14:	e8 9f dc ff ff       	call   c0013bb8 <Device::~Device()>
c0015f19:	83 c4 10             	add    esp,0x10
c0015f1c:	90                   	nop
c0015f1d:	83 c4 0c             	add    esp,0xc
c0015f20:	c3                   	ret    
c0015f21:	90                   	nop

c0015f22 <LogicalDisk::~LogicalDisk()>:
c0015f22:	83 ec 0c             	sub    esp,0xc
c0015f25:	83 ec 0c             	sub    esp,0xc
c0015f28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f2c:	e8 cd ff ff ff       	call   c0015efe <LogicalDisk::~LogicalDisk()>
c0015f31:	83 c4 10             	add    esp,0x10
c0015f34:	83 ec 08             	sub    esp,0x8
c0015f37:	68 74 01 00 00       	push   0x174
c0015f3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f40:	e8 94 c8 ff ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c0015f45:	83 c4 10             	add    esp,0x10
c0015f48:	83 c4 0c             	add    esp,0xc
c0015f4b:	c3                   	ret    

c0015f4c <LogicalDisk::open(int, int, void*)>:
c0015f4c:	83 ec 18             	sub    esp,0x18
c0015f4f:	68 14 b6 02 c0       	push   0xc002b614
c0015f54:	e8 c6 42 00 00       	call   c001a21f <Krnl::panic(char const*)>
c0015f59:	83 c8 ff             	or     eax,0xffffffff
c0015f5c:	83 c4 1c             	add    esp,0x1c
c0015f5f:	c3                   	ret    

c0015f60 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015f60:	53                   	push   ebx
c0015f61:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015f65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f69:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015f6d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015f73:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015f79:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015f7f:	77 10                	ja     c0015f91 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015f81:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015f87:	89 d3                	mov    ebx,edx
c0015f89:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015f8f:	72 05                	jb     c0015f96 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015f91:	83 c8 ff             	or     eax,0xffffffff
c0015f94:	89 c2                	mov    edx,eax
c0015f96:	5b                   	pop    ebx
c0015f97:	c3                   	ret    

c0015f98 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015f98:	56                   	push   esi
c0015f99:	83 c8 ff             	or     eax,0xffffffff
c0015f9c:	53                   	push   ebx
c0015f9d:	89 c2                	mov    edx,eax
c0015f9f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015fa3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015fa7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015fab:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015fb1:	77 27                	ja     c0015fda <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015fb3:	89 d8                	mov    eax,ebx
c0015fb5:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015fbb:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015fc1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015fc6:	89 c2                	mov    edx,eax
c0015fc8:	73 10                	jae    c0015fda <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015fca:	89 c8                	mov    eax,ecx
c0015fcc:	89 da                	mov    edx,ebx
c0015fce:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015fd4:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015fda:	5b                   	pop    ebx
c0015fdb:	5e                   	pop    esi
c0015fdc:	c3                   	ret    
c0015fdd:	90                   	nop

c0015fde <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015fde:	83 ec 1c             	sub    esp,0x1c
c0015fe1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015fe5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015fe9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015fed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015ff1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015ff5:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ff8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015ffc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016000:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016004:	83 ec 08             	sub    esp,0x8
c0016007:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001600b:	50                   	push   eax
c001600c:	e8 dd de ff ff       	call   c0013eee <Device::Device(char const*)>
c0016011:	83 c4 10             	add    esp,0x10
c0016014:	ba 60 b6 02 c0       	mov    edx,0xc002b660
c0016019:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001601d:	89 10                	mov    DWORD PTR [eax],edx
c001601f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016023:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001602a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001602e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016035:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016039:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016043:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016047:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001604b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001604f:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016055:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001605b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001605f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016062:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016066:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001606c:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016072:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016076:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001607a:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016080:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016084:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001608e:	90                   	nop
c001608f:	83 c4 1c             	add    esp,0x1c
c0016092:	c3                   	ret    
c0016093:	90                   	nop

c0016094 <LogicalDisk::assignDriveLetter()>:
c0016094:	55                   	push   ebp
c0016095:	57                   	push   edi
c0016096:	56                   	push   esi
c0016097:	53                   	push   ebx
c0016098:	83 ec 14             	sub    esp,0x14
c001609b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001609f:	8b 3d e0 e9 02 c0    	mov    edi,DWORD PTR ds:0xc002e9e0
c00160a5:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00160ab:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00160af:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00160b5:	8b 3d e4 e9 02 c0    	mov    edi,DWORD PTR ds:0xc002e9e4
c00160bb:	3c 01                	cmp    al,0x1
c00160bd:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00160c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00160c5:	19 c0                	sbb    eax,eax
c00160c7:	83 e0 02             	and    eax,0x2
c00160ca:	83 c0 41             	add    eax,0x41
c00160cd:	0f be e8             	movsx  ebp,al
c00160d0:	3c 43                	cmp    al,0x43
c00160d2:	75 10                	jne    c00160e4 <LogicalDisk::assignDriveLetter()+0x50>
c00160d4:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00160db:	75 5d                	jne    c001613a <LogicalDisk::assignDriveLetter()+0xa6>
c00160dd:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00160e2:	75 56                	jne    c001613a <LogicalDisk::assignDriveLetter()+0xa6>
c00160e4:	8d 75 bf             	lea    esi,[ebp-0x41]
c00160e7:	ba 01 00 00 00       	mov    edx,0x1
c00160ec:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00160f0:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00160f4:	d3 e2                	shl    edx,cl
c00160f6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00160fa:	89 d7                	mov    edi,edx
c00160fc:	89 d6                	mov    esi,edx
c00160fe:	c1 ff 1f             	sar    edi,0x1f
c0016101:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016105:	21 f9                	and    ecx,edi
c0016107:	09 d1                	or     ecx,edx
c0016109:	75 2f                	jne    c001613a <LogicalDisk::assignDriveLetter()+0xa6>
c001610b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001610f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016113:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016119:	09 f2                	or     edx,esi
c001611b:	89 15 e0 e9 02 c0    	mov    DWORD PTR ds:0xc002e9e0,edx
c0016121:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016125:	09 fa                	or     edx,edi
c0016127:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001612b:	89 15 e4 e9 02 c0    	mov    DWORD PTR ds:0xc002e9e4,edx
c0016131:	89 1c bd 00 ea 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1600],ebx
c0016138:	eb 08                	jmp    c0016142 <LogicalDisk::assignDriveLetter()+0xae>
c001613a:	45                   	inc    ebp
c001613b:	40                   	inc    eax
c001613c:	3c 5b                	cmp    al,0x5b
c001613e:	75 90                	jne    c00160d0 <LogicalDisk::assignDriveLetter()+0x3c>
c0016140:	31 c0                	xor    eax,eax
c0016142:	83 c4 14             	add    esp,0x14
c0016145:	5b                   	pop    ebx
c0016146:	5e                   	pop    esi
c0016147:	5f                   	pop    edi
c0016148:	5d                   	pop    ebp
c0016149:	c3                   	ret    

c001614a <LogicalDisk::mount()>:
c001614a:	56                   	push   esi
c001614b:	53                   	push   ebx
c001614c:	53                   	push   ebx
c001614d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016151:	8b 1d 74 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e574
c0016157:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016161:	85 db                	test   ebx,ebx
c0016163:	74 27                	je     c001618c <LogicalDisk::mount()+0x42>
c0016165:	51                   	push   ecx
c0016166:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001616d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001616f:	83 e8 41             	sub    eax,0x41
c0016172:	50                   	push   eax
c0016173:	56                   	push   esi
c0016174:	53                   	push   ebx
c0016175:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016178:	83 c4 10             	add    esp,0x10
c001617b:	84 c0                	test   al,al
c001617d:	74 08                	je     c0016187 <LogicalDisk::mount()+0x3d>
c001617f:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016185:	eb 07                	jmp    c001618e <LogicalDisk::mount()+0x44>
c0016187:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001618a:	eb d5                	jmp    c0016161 <LogicalDisk::mount()+0x17>
c001618c:	31 c0                	xor    eax,eax
c001618e:	5a                   	pop    edx
c001618f:	5b                   	pop    ebx
c0016190:	5e                   	pop    esi
c0016191:	c3                   	ret    

c0016192 <LogicalDisk::unmount()>:
c0016192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016196:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00161a0:	c3                   	ret    
c00161a1:	90                   	nop

c00161a2 <LogicalDisk::eject()>:
c00161a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00161a6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00161ac:	8b 10                	mov    edx,DWORD PTR [eax]
c00161ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00161b2:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00161b5:	90                   	nop

c00161b6 <LogicalDisk::unassignDriveLetter()>:
c00161b6:	57                   	push   edi
c00161b7:	56                   	push   esi
c00161b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00161bc:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00161c3:	84 c9                	test   cl,cl
c00161c5:	75 0f                	jne    c00161d6 <LogicalDisk::unassignDriveLetter()+0x20>
c00161c7:	c7 44 24 0c 38 b6 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b638
c00161cf:	5e                   	pop    esi
c00161d0:	5f                   	pop    edi
c00161d1:	e9 49 40 00 00       	jmp    c001a21f <Krnl::panic(char const*)>
c00161d6:	83 e9 41             	sub    ecx,0x41
c00161d9:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00161e0:	b8 01 00 00 00       	mov    eax,0x1
c00161e5:	c7 04 8d 00 ea 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1600],0x0
c00161f0:	d3 e0                	shl    eax,cl
c00161f2:	89 c7                	mov    edi,eax
c00161f4:	f7 d0                	not    eax
c00161f6:	c1 ff 1f             	sar    edi,0x1f
c00161f9:	21 05 e0 e9 02 c0    	and    DWORD PTR ds:0xc002e9e0,eax
c00161ff:	89 fe                	mov    esi,edi
c0016201:	f7 d6                	not    esi
c0016203:	21 35 e4 e9 02 c0    	and    DWORD PTR ds:0xc002e9e4,esi
c0016209:	5e                   	pop    esi
c001620a:	5f                   	pop    edi
c001620b:	c3                   	ret    

c001620c <LogicalDisk::read(unsigned long long, int, void*)>:
c001620c:	57                   	push   edi
c001620d:	56                   	push   esi
c001620e:	53                   	push   ebx
c001620f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016213:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016217:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001621b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001621f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016225:	77 41                	ja     c0016268 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016227:	99                   	cdq    
c0016228:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001622e:	01 c8                	add    eax,ecx
c0016230:	11 da                	adc    edx,ebx
c0016232:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016238:	19 d7                	sbb    edi,edx
c001623a:	72 33                	jb     c001626f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001623c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016242:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016248:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001624c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016250:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016256:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001625c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016260:	5b                   	pop    ebx
c0016261:	5e                   	pop    esi
c0016262:	5f                   	pop    edi
c0016263:	e9 1c 0b 00 00       	jmp    c0016d84 <VCache::read(unsigned long long, int, void*)>
c0016268:	b8 05 00 00 00       	mov    eax,0x5
c001626d:	eb 05                	jmp    c0016274 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001626f:	b8 07 00 00 00       	mov    eax,0x7
c0016274:	5b                   	pop    ebx
c0016275:	5e                   	pop    esi
c0016276:	5f                   	pop    edi
c0016277:	c3                   	ret    

c0016278 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016278:	57                   	push   edi
c0016279:	56                   	push   esi
c001627a:	53                   	push   ebx
c001627b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001627f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016283:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016287:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001628b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016291:	77 41                	ja     c00162d4 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016293:	99                   	cdq    
c0016294:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001629a:	01 c8                	add    eax,ecx
c001629c:	11 da                	adc    edx,ebx
c001629e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00162a4:	19 d7                	sbb    edi,edx
c00162a6:	72 33                	jb     c00162db <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00162a8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00162ae:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00162b4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00162b8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00162bc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00162c2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00162c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00162cc:	5b                   	pop    ebx
c00162cd:	5e                   	pop    esi
c00162ce:	5f                   	pop    edi
c00162cf:	e9 86 09 00 00       	jmp    c0016c5a <VCache::write(unsigned long long, int, void*)>
c00162d4:	b8 05 00 00 00       	mov    eax,0x5
c00162d9:	eb 05                	jmp    c00162e0 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00162db:	b8 07 00 00 00       	mov    eax,0x7
c00162e0:	5b                   	pop    ebx
c00162e1:	5e                   	pop    esi
c00162e2:	5f                   	pop    edi
c00162e3:	c3                   	ret    

c00162e4 <Mouse::Mouse(char const*)>:
c00162e4:	83 ec 0c             	sub    esp,0xc
c00162e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162eb:	83 ec 08             	sub    esp,0x8
c00162ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162f2:	50                   	push   eax
c00162f3:	e8 f6 db ff ff       	call   c0013eee <Device::Device(char const*)>
c00162f8:	83 c4 10             	add    esp,0x10
c00162fb:	ba 8c b6 02 c0       	mov    edx,0xc002b68c
c0016300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016304:	89 10                	mov    DWORD PTR [eax],edx
c0016306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001630a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016314:	90                   	nop
c0016315:	83 c4 0c             	add    esp,0xc
c0016318:	c3                   	ret    
c0016319:	90                   	nop

c001631a <Mouse::~Mouse()>:
c001631a:	83 ec 0c             	sub    esp,0xc
c001631d:	ba 8c b6 02 c0       	mov    edx,0xc002b68c
c0016322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016326:	89 10                	mov    DWORD PTR [eax],edx
c0016328:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001632c:	83 ec 0c             	sub    esp,0xc
c001632f:	50                   	push   eax
c0016330:	e8 83 d8 ff ff       	call   c0013bb8 <Device::~Device()>
c0016335:	83 c4 10             	add    esp,0x10
c0016338:	90                   	nop
c0016339:	83 c4 0c             	add    esp,0xc
c001633c:	c3                   	ret    
c001633d:	90                   	nop

c001633e <Mouse::~Mouse()>:
c001633e:	83 ec 0c             	sub    esp,0xc
c0016341:	83 ec 0c             	sub    esp,0xc
c0016344:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016348:	e8 cd ff ff ff       	call   c001631a <Mouse::~Mouse()>
c001634d:	83 c4 10             	add    esp,0x10
c0016350:	83 ec 08             	sub    esp,0x8
c0016353:	68 58 01 00 00       	push   0x158
c0016358:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001635c:	e8 78 c4 ff ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c0016361:	83 c4 10             	add    esp,0x10
c0016364:	83 c4 0c             	add    esp,0xc
c0016367:	c3                   	ret    

c0016368 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016368:	55                   	push   ebp
c0016369:	57                   	push   edi
c001636a:	56                   	push   esi
c001636b:	53                   	push   ebx
c001636c:	81 ec 28 01 00 00    	sub    esp,0x128
c0016372:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016379:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016380:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016387:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001638e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016392:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016396:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001639d:	e8 48 dc ff ff       	call   c0013fea <Device::getName()>
c00163a2:	5a                   	pop    edx
c00163a3:	59                   	pop    ecx
c00163a4:	50                   	push   eax
c00163a5:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00163a9:	55                   	push   ebp
c00163aa:	e8 5d a4 fe ff       	call   c000080c <strcpy>
c00163af:	5b                   	pop    ebx
c00163b0:	58                   	pop    eax
c00163b1:	68 b0 b6 02 c0       	push   0xc002b6b0
c00163b6:	55                   	push   ebp
c00163b7:	e8 90 a5 fe ff       	call   c000094c <strcat>
c00163bc:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00163c3:	e8 91 94 ff ff       	call   c000f859 <malloc>
c00163c8:	83 c4 0c             	add    esp,0xc
c00163cb:	89 c3                	mov    ebx,eax
c00163cd:	57                   	push   edi
c00163ce:	56                   	push   esi
c00163cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00163d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00163d7:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00163de:	55                   	push   ebp
c00163df:	50                   	push   eax
c00163e0:	e8 f9 fb ff ff       	call   c0015fde <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00163e5:	83 c4 14             	add    esp,0x14
c00163e8:	53                   	push   ebx
c00163e9:	e8 a6 fc ff ff       	call   c0016094 <LogicalDisk::assignDriveLetter()>
c00163ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00163f1:	e8 54 fd ff ff       	call   c001614a <LogicalDisk::mount()>
c00163f6:	58                   	pop    eax
c00163f7:	5a                   	pop    edx
c00163f8:	53                   	push   ebx
c00163f9:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016400:	e8 e5 d8 ff ff       	call   c0013cea <Device::addChild(Device*)>
c0016405:	81 c4 2c 01 00 00    	add    esp,0x12c
c001640b:	5b                   	pop    ebx
c001640c:	5e                   	pop    esi
c001640d:	5f                   	pop    edi
c001640e:	5d                   	pop    ebp
c001640f:	c3                   	ret    

c0016410 <createPartitionsForDisk(PhysicalDisk*)>:
c0016410:	55                   	push   ebp
c0016411:	57                   	push   edi
c0016412:	56                   	push   esi
c0016413:	53                   	push   ebx
c0016414:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001641a:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016421:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016427:	3d 00 02 00 00       	cmp    eax,0x200
c001642c:	74 27                	je     c0016455 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001642e:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016434:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001643a:	83 ec 10             	sub    esp,0x10
c001643d:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016441:	99                   	cdq    
c0016442:	c1 e6 0a             	shl    esi,0xa
c0016445:	52                   	push   edx
c0016446:	89 fd                	mov    ebp,edi
c0016448:	50                   	push   eax
c0016449:	55                   	push   ebp
c001644a:	56                   	push   esi
c001644b:	e8 04 08 01 00       	call   c0026c54 <__udivdi3>
c0016450:	e9 b1 00 00 00       	jmp    c0016506 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016455:	83 ec 0c             	sub    esp,0xc
c0016458:	8b 03                	mov    eax,DWORD PTR [ebx]
c001645a:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001645e:	56                   	push   esi
c001645f:	6a 01                	push   0x1
c0016461:	6a 00                	push   0x0
c0016463:	6a 00                	push   0x0
c0016465:	53                   	push   ebx
c0016466:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016469:	83 c4 20             	add    esp,0x20
c001646c:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016474:	75 0a                	jne    c0016480 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016476:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001647e:	74 2c                	je     c00164ac <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016480:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016486:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001648c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016492:	83 ec 10             	sub    esp,0x10
c0016495:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016499:	89 f7                	mov    edi,esi
c001649b:	c1 e0 0a             	shl    eax,0xa
c001649e:	c1 ff 1f             	sar    edi,0x1f
c00164a1:	57                   	push   edi
c00164a2:	56                   	push   esi
c00164a3:	52                   	push   edx
c00164a4:	50                   	push   eax
c00164a5:	e8 aa 07 01 00       	call   c0026c54 <__udivdi3>
c00164aa:	eb 5a                	jmp    c0016506 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00164ac:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00164b3:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00164ba:	83 e1 7f             	and    ecx,0x7f
c00164bd:	83 e0 7f             	and    eax,0x7f
c00164c0:	01 c1                	add    ecx,eax
c00164c2:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00164c9:	83 e0 7f             	and    eax,0x7f
c00164cc:	01 c1                	add    ecx,eax
c00164ce:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00164d5:	83 e0 7f             	and    eax,0x7f
c00164d8:	00 c1                	add    cl,al
c00164da:	74 41                	je     c001651d <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00164dc:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00164e2:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00164e8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00164ee:	83 ec 10             	sub    esp,0x10
c00164f1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00164f5:	89 f7                	mov    edi,esi
c00164f7:	c1 e0 0a             	shl    eax,0xa
c00164fa:	c1 ff 1f             	sar    edi,0x1f
c00164fd:	57                   	push   edi
c00164fe:	56                   	push   esi
c00164ff:	52                   	push   edx
c0016500:	50                   	push   eax
c0016501:	e8 4e 07 01 00       	call   c0026c54 <__udivdi3>
c0016506:	83 c4 14             	add    esp,0x14
c0016509:	52                   	push   edx
c001650a:	50                   	push   eax
c001650b:	6a 00                	push   0x0
c001650d:	6a 00                	push   0x0
c001650f:	53                   	push   ebx
c0016510:	e8 53 fe ff ff       	call   c0016368 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016515:	83 c4 20             	add    esp,0x20
c0016518:	e9 79 01 00 00       	jmp    c0016696 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001651d:	89 f0                	mov    eax,esi
c001651f:	31 f6                	xor    esi,esi
c0016521:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016528:	75 02                	jne    c001652c <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001652a:	89 f1                	mov    ecx,esi
c001652c:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016533:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001653a:	c1 e2 08             	shl    edx,0x8
c001653d:	c1 e7 10             	shl    edi,0x10
c0016540:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016548:	09 fa                	or     edx,edi
c001654a:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016552:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016559:	83 c0 10             	add    eax,0x10
c001655c:	09 fa                	or     edx,edi
c001655e:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016565:	c1 e7 18             	shl    edi,0x18
c0016568:	09 fa                	or     edx,edi
c001656a:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016571:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016575:	c1 e7 10             	shl    edi,0x10
c0016578:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001657f:	c1 e2 08             	shl    edx,0x8
c0016582:	09 fa                	or     edx,edi
c0016584:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c001658b:	09 fa                	or     edx,edi
c001658d:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016594:	c1 e7 18             	shl    edi,0x18
c0016597:	09 fa                	or     edx,edi
c0016599:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001659d:	46                   	inc    esi
c001659e:	83 fe 04             	cmp    esi,0x4
c00165a1:	0f 85 7a ff ff ff    	jne    c0016521 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00165a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165ab:	83 f0 01             	xor    eax,0x1
c00165ae:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00165b2:	75 57                	jne    c001660b <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00165b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00165b8:	83 f0 01             	xor    eax,0x1
c00165bb:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00165bf:	75 4a                	jne    c001660b <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00165c1:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00165c5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00165cd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00165d5:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00165db:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00165e1:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00165e7:	0f a4 c2 0a          	shld   edx,eax,0xa
c00165eb:	89 f7                	mov    edi,esi
c00165ed:	c1 e0 0a             	shl    eax,0xa
c00165f0:	c1 ff 1f             	sar    edi,0x1f
c00165f3:	57                   	push   edi
c00165f4:	56                   	push   esi
c00165f5:	52                   	push   edx
c00165f6:	50                   	push   eax
c00165f7:	e8 58 06 01 00       	call   c0026c54 <__udivdi3>
c00165fc:	83 c4 10             	add    esp,0x10
c00165ff:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016603:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016607:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001660b:	84 c9                	test   cl,cl
c001660d:	74 53                	je     c0016662 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001660f:	0f b6 c9             	movzx  ecx,cl
c0016612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016616:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001661a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001661e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016622:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001662a:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c001662e:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016632:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016636:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001663a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001663e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016642:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016646:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c001664a:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001664e:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016652:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016656:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001665a:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001665e:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016662:	31 ed                	xor    ebp,ebp
c0016664:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016668:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001666c:	89 f8                	mov    eax,edi
c001666e:	09 f0                	or     eax,esi
c0016670:	74 1e                	je     c0016690 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016672:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016676:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001667a:	89 d1                	mov    ecx,edx
c001667c:	09 c1                	or     ecx,eax
c001667e:	74 10                	je     c0016690 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016680:	83 ec 0c             	sub    esp,0xc
c0016683:	57                   	push   edi
c0016684:	56                   	push   esi
c0016685:	52                   	push   edx
c0016686:	50                   	push   eax
c0016687:	53                   	push   ebx
c0016688:	e8 db fc ff ff       	call   c0016368 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001668d:	83 c4 20             	add    esp,0x20
c0016690:	45                   	inc    ebp
c0016691:	83 fd 04             	cmp    ebp,0x4
c0016694:	75 ce                	jne    c0016664 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016696:	81 c4 5c 02 00 00    	add    esp,0x25c
c001669c:	5b                   	pop    ebx
c001669d:	5e                   	pop    esi
c001669e:	5f                   	pop    edi
c001669f:	5d                   	pop    ebp
c00166a0:	c3                   	ret    
c00166a1:	90                   	nop

c00166a2 <Serial::Serial(char const*)>:
c00166a2:	83 ec 0c             	sub    esp,0xc
c00166a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166a9:	83 ec 08             	sub    esp,0x8
c00166ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00166b0:	50                   	push   eax
c00166b1:	e8 38 d8 ff ff       	call   c0013eee <Device::Device(char const*)>
c00166b6:	83 c4 10             	add    esp,0x10
c00166b9:	ba c4 b6 02 c0       	mov    edx,0xc002b6c4
c00166be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166c2:	89 10                	mov    DWORD PTR [eax],edx
c00166c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166c8:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00166d2:	90                   	nop
c00166d3:	83 c4 0c             	add    esp,0xc
c00166d6:	c3                   	ret    
c00166d7:	90                   	nop

c00166d8 <Serial::~Serial()>:
c00166d8:	83 ec 0c             	sub    esp,0xc
c00166db:	ba c4 b6 02 c0       	mov    edx,0xc002b6c4
c00166e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166e4:	89 10                	mov    DWORD PTR [eax],edx
c00166e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166ea:	83 ec 0c             	sub    esp,0xc
c00166ed:	50                   	push   eax
c00166ee:	e8 c5 d4 ff ff       	call   c0013bb8 <Device::~Device()>
c00166f3:	83 c4 10             	add    esp,0x10
c00166f6:	90                   	nop
c00166f7:	83 c4 0c             	add    esp,0xc
c00166fa:	c3                   	ret    
c00166fb:	90                   	nop

c00166fc <Serial::~Serial()>:
c00166fc:	83 ec 0c             	sub    esp,0xc
c00166ff:	83 ec 0c             	sub    esp,0xc
c0016702:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016706:	e8 cd ff ff ff       	call   c00166d8 <Serial::~Serial()>
c001670b:	83 c4 10             	add    esp,0x10
c001670e:	83 ec 08             	sub    esp,0x8
c0016711:	68 58 01 00 00       	push   0x158
c0016716:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001671a:	e8 ba c0 ff ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c001671f:	83 c4 10             	add    esp,0x10
c0016722:	83 c4 0c             	add    esp,0xc
c0016725:	c3                   	ret    

c0016726 <Timer::Timer(char const*)>:
c0016726:	83 ec 0c             	sub    esp,0xc
c0016729:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001672d:	83 ec 08             	sub    esp,0x8
c0016730:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016734:	50                   	push   eax
c0016735:	e8 b4 d7 ff ff       	call   c0013eee <Device::Device(char const*)>
c001673a:	83 c4 10             	add    esp,0x10
c001673d:	ba 08 b7 02 c0       	mov    edx,0xc002b708
c0016742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016746:	89 10                	mov    DWORD PTR [eax],edx
c0016748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001674c:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016756:	90                   	nop
c0016757:	83 c4 0c             	add    esp,0xc
c001675a:	c3                   	ret    
c001675b:	90                   	nop

c001675c <Timer::~Timer()>:
c001675c:	83 ec 0c             	sub    esp,0xc
c001675f:	ba 08 b7 02 c0       	mov    edx,0xc002b708
c0016764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016768:	89 10                	mov    DWORD PTR [eax],edx
c001676a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001676e:	83 ec 0c             	sub    esp,0xc
c0016771:	50                   	push   eax
c0016772:	e8 41 d4 ff ff       	call   c0013bb8 <Device::~Device()>
c0016777:	83 c4 10             	add    esp,0x10
c001677a:	90                   	nop
c001677b:	83 c4 0c             	add    esp,0xc
c001677e:	c3                   	ret    
c001677f:	90                   	nop

c0016780 <Timer::~Timer()>:
c0016780:	83 ec 0c             	sub    esp,0xc
c0016783:	83 ec 0c             	sub    esp,0xc
c0016786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001678a:	e8 cd ff ff ff       	call   c001675c <Timer::~Timer()>
c001678f:	83 c4 10             	add    esp,0x10
c0016792:	83 ec 08             	sub    esp,0x8
c0016795:	68 5c 01 00 00       	push   0x15c
c001679a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001679e:	e8 36 c0 ff ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c00167a3:	83 c4 10             	add    esp,0x10
c00167a6:	83 c4 0c             	add    esp,0xc
c00167a9:	c3                   	ret    

c00167aa <Timer::read()>:
c00167aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167ae:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00167b4:	c3                   	ret    

c00167b5 <timerHandler(unsigned long long)>:
c00167b5:	55                   	push   ebp
c00167b6:	57                   	push   edi
c00167b7:	56                   	push   esi
c00167b8:	53                   	push   ebx
c00167b9:	83 ec 0c             	sub    esp,0xc
c00167bc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00167c0:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00167c4:	01 35 70 ea 02 c0    	add    DWORD PTR ds:0xc002ea70,esi
c00167ca:	11 3d 74 ea 02 c0    	adc    DWORD PTR ds:0xc002ea74,edi
c00167d0:	80 3d 0d e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e40d,0x0
c00167d7:	0f 84 42 01 00 00    	je     c001691f <timerHandler(unsigned long long)+0x16a>
c00167dd:	fa                   	cli    
c00167de:	ff 05 08 f9 02 c0    	inc    DWORD PTR ds:0xc002f908
c00167e4:	83 ec 0c             	sub    esp,0xc
c00167e7:	ff 05 04 f9 02 c0    	inc    DWORD PTR ds:0xc002f904
c00167ed:	68 18 f9 02 c0       	push   0xc002f918
c00167f2:	e8 b7 24 01 00       	call   c0028cae <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00167f7:	83 c4 10             	add    esp,0x10
c00167fa:	84 c0                	test   al,al
c00167fc:	0f 85 a2 00 00 00    	jne    c00168a4 <timerHandler(unsigned long long)+0xef>
c0016802:	83 ec 0c             	sub    esp,0xc
c0016805:	68 18 f9 02 c0       	push   0xc002f918
c001680a:	e8 bb 24 01 00       	call   c0028cca <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001680f:	83 c4 10             	add    esp,0x10
c0016812:	89 c3                	mov    ebx,eax
c0016814:	83 ec 0c             	sub    esp,0xc
c0016817:	68 18 f9 02 c0       	push   0xc002f918
c001681c:	e8 a9 24 01 00       	call   c0028cca <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016821:	c7 04 24 18 f9 02 c0 	mov    DWORD PTR [esp],0xc002f918
c0016828:	89 c5                	mov    ebp,eax
c001682a:	e8 a3 24 01 00       	call   c0028cd2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001682f:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016832:	83 c4 10             	add    esp,0x10
c0016835:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016838:	39 15 70 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea70,edx
c001683e:	a1 74 ea 02 c0       	mov    eax,ds:0xc002ea74
c0016843:	19 c8                	sbb    eax,ecx
c0016845:	72 21                	jb     c0016868 <timerHandler(unsigned long long)+0xb3>
c0016847:	83 ec 0c             	sub    esp,0xc
c001684a:	55                   	push   ebp
c001684b:	e8 f3 79 00 00       	call   c001e243 <unblockTask(ThreadControlBlock*)>
c0016850:	83 c4 10             	add    esp,0x10
c0016853:	39 eb                	cmp    ebx,ebp
c0016855:	75 21                	jne    c0016878 <timerHandler(unsigned long long)+0xc3>
c0016857:	83 ec 0c             	sub    esp,0xc
c001685a:	68 18 f9 02 c0       	push   0xc002f918
c001685f:	e8 66 24 01 00       	call   c0028cca <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016864:	89 c3                	mov    ebx,eax
c0016866:	eb 0d                	jmp    c0016875 <timerHandler(unsigned long long)+0xc0>
c0016868:	50                   	push   eax
c0016869:	50                   	push   eax
c001686a:	55                   	push   ebp
c001686b:	68 18 f9 02 c0       	push   0xc002f918
c0016870:	e8 0b 25 01 00       	call   c0028d80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016875:	83 c4 10             	add    esp,0x10
c0016878:	83 ec 0c             	sub    esp,0xc
c001687b:	68 18 f9 02 c0       	push   0xc002f918
c0016880:	e8 29 24 01 00       	call   c0028cae <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016885:	83 c4 10             	add    esp,0x10
c0016888:	84 c0                	test   al,al
c001688a:	75 18                	jne    c00168a4 <timerHandler(unsigned long long)+0xef>
c001688c:	83 ec 0c             	sub    esp,0xc
c001688f:	68 18 f9 02 c0       	push   0xc002f918
c0016894:	e8 31 24 01 00       	call   c0028cca <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016899:	83 c4 10             	add    esp,0x10
c001689c:	39 d8                	cmp    eax,ebx
c001689e:	0f 85 70 ff ff ff    	jne    c0016814 <timerHandler(unsigned long long)+0x5f>
c00168a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168a9:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c00168ad:	74 3d                	je     c00168ec <timerHandler(unsigned long long)+0x137>
c00168af:	80 3d 0c e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e40c,0x0
c00168b6:	74 34                	je     c00168ec <timerHandler(unsigned long long)+0x137>
c00168b8:	fa                   	cli    
c00168b9:	ff 05 08 f9 02 c0    	inc    DWORD PTR ds:0xc002f908
c00168bf:	31 d2                	xor    edx,edx
c00168c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168c6:	89 f9                	mov    ecx,edi
c00168c8:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00168cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168d0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00168d3:	39 c6                	cmp    esi,eax
c00168d5:	19 d1                	sbb    ecx,edx
c00168d7:	72 05                	jb     c00168de <timerHandler(unsigned long long)+0x129>
c00168d9:	e8 d3 74 00 00       	call   c001ddb1 <schedule()>
c00168de:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c00168e3:	48                   	dec    eax
c00168e4:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c00168e9:	75 01                	jne    c00168ec <timerHandler(unsigned long long)+0x137>
c00168eb:	fb                   	sti    
c00168ec:	a1 04 f9 02 c0       	mov    eax,ds:0xc002f904
c00168f1:	48                   	dec    eax
c00168f2:	a3 04 f9 02 c0       	mov    ds:0xc002f904,eax
c00168f7:	75 18                	jne    c0016911 <timerHandler(unsigned long long)+0x15c>
c00168f9:	83 3d 00 f9 02 c0 00 	cmp    DWORD PTR ds:0xc002f900,0x0
c0016900:	74 0f                	je     c0016911 <timerHandler(unsigned long long)+0x15c>
c0016902:	c7 05 00 f9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f900,0x0
c001690c:	e8 a0 74 00 00       	call   c001ddb1 <schedule()>
c0016911:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c0016916:	48                   	dec    eax
c0016917:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c001691c:	75 01                	jne    c001691f <timerHandler(unsigned long long)+0x16a>
c001691e:	fb                   	sti    
c001691f:	83 c4 0c             	add    esp,0xc
c0016922:	5b                   	pop    ebx
c0016923:	5e                   	pop    esi
c0016924:	5f                   	pop    edi
c0016925:	5d                   	pop    ebp
c0016926:	c3                   	ret    

c0016927 <setupTimer(int)>:
c0016927:	57                   	push   edi
c0016928:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c001692d:	56                   	push   esi
c001692e:	53                   	push   ebx
c001692f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016933:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016939:	83 ec 0c             	sub    esp,0xc
c001693c:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016942:	e8 a3 d6 ff ff       	call   c0013fea <Device::getName()>
c0016947:	83 c4 10             	add    esp,0x10
c001694a:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001694d:	0f 85 8d 00 00 00    	jne    c00169e0 <setupTimer(int)+0xb9>
c0016953:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0016958:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001695f:	74 7f                	je     c00169e0 <setupTimer(int)+0xb9>
c0016961:	83 ec 0c             	sub    esp,0xc
c0016964:	68 5c 01 00 00       	push   0x15c
c0016969:	e8 eb 8e ff ff       	call   c000f859 <malloc>
c001696e:	89 04 24             	mov    DWORD PTR [esp],eax
c0016971:	89 c3                	mov    ebx,eax
c0016973:	e8 b2 fe 00 00       	call   c002682a <PIT::PIT()>
c0016978:	59                   	pop    ecx
c0016979:	5f                   	pop    edi
c001697a:	53                   	push   ebx
c001697b:	ff 35 08 e4 02 c0    	push   DWORD PTR ds:0xc002e408
c0016981:	e8 64 d3 ff ff       	call   c0013cea <Device::addChild(Device*)>
c0016986:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016988:	6a 00                	push   0x0
c001698a:	6a 00                	push   0x0
c001698c:	56                   	push   esi
c001698d:	53                   	push   ebx
c001698e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016991:	83 c4 14             	add    esp,0x14
c0016994:	68 60 01 00 00       	push   0x160
c0016999:	e8 bb 8e ff ff       	call   c000f859 <malloc>
c001699e:	89 04 24             	mov    DWORD PTR [esp],eax
c00169a1:	89 c7                	mov    edi,eax
c00169a3:	e8 32 fd 00 00       	call   c00266da <APICTimer::APICTimer()>
c00169a8:	6a 00                	push   0x0
c00169aa:	6a 00                	push   0x0
c00169ac:	56                   	push   esi
c00169ad:	57                   	push   edi
c00169ae:	e8 29 fc 00 00       	call   c00265dc <APICTimer::open(int, int, void*)>
c00169b3:	83 c4 20             	add    esp,0x20
c00169b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00169b8:	6a 00                	push   0x0
c00169ba:	6a 00                	push   0x0
c00169bc:	6a 00                	push   0x0
c00169be:	53                   	push   ebx
c00169bf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00169c2:	58                   	pop    eax
c00169c3:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00169c8:	5a                   	pop    edx
c00169c9:	57                   	push   edi
c00169ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00169d0:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00169d6:	e8 0f d3 ff ff       	call   c0013cea <Device::addChild(Device*)>
c00169db:	83 c4 10             	add    esp,0x10
c00169de:	eb 33                	jmp    c0016a13 <setupTimer(int)+0xec>
c00169e0:	83 ec 0c             	sub    esp,0xc
c00169e3:	68 5c 01 00 00       	push   0x15c
c00169e8:	e8 6c 8e ff ff       	call   c000f859 <malloc>
c00169ed:	89 04 24             	mov    DWORD PTR [esp],eax
c00169f0:	89 c3                	mov    ebx,eax
c00169f2:	e8 33 fe 00 00       	call   c002682a <PIT::PIT()>
c00169f7:	58                   	pop    eax
c00169f8:	5a                   	pop    edx
c00169f9:	53                   	push   ebx
c00169fa:	ff 35 08 e4 02 c0    	push   DWORD PTR ds:0xc002e408
c0016a00:	e8 e5 d2 ff ff       	call   c0013cea <Device::addChild(Device*)>
c0016a05:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a07:	6a 00                	push   0x0
c0016a09:	6a 00                	push   0x0
c0016a0b:	56                   	push   esi
c0016a0c:	53                   	push   ebx
c0016a0d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a10:	83 c4 20             	add    esp,0x20
c0016a13:	89 d8                	mov    eax,ebx
c0016a15:	5b                   	pop    ebx
c0016a16:	5e                   	pop    esi
c0016a17:	5f                   	pop    edi
c0016a18:	c3                   	ret    
c0016a19:	90                   	nop

c0016a1a <VCache::VCache(PhysicalDisk*)>:
c0016a1a:	53                   	push   ebx
c0016a1b:	83 ec 18             	sub    esp,0x18
c0016a1e:	ba 58 b8 02 c0       	mov    edx,0xc002b858
c0016a23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a27:	89 10                	mov    DWORD PTR [eax],edx
c0016a29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a2d:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016a34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a38:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016a3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a43:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016a4a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016a51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a55:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016a5c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016a63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a67:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016a6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a72:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016a76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a7a:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016a81:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016a88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a8c:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016a90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a94:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016a98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a9c:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016aa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016aa4:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016aab:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016ab3:	83 ec 0c             	sub    esp,0xc
c0016ab6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016aba:	e8 9a 8d ff ff       	call   c000f859 <malloc>
c0016abf:	83 c4 10             	add    esp,0x10
c0016ac2:	89 c3                	mov    ebx,eax
c0016ac4:	83 ec 0c             	sub    esp,0xc
c0016ac7:	53                   	push   ebx
c0016ac8:	e8 ad 70 00 00       	call   c001db7a <Mutex::Mutex()>
c0016acd:	83 c4 10             	add    esp,0x10
c0016ad0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ad4:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016ad7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016adb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016adf:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016ae2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ae6:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016aed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016af1:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016afb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016afe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016b02:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016b08:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016b0e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016b12:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016b15:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b1c:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016b20:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016b24:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016b2a:	05 00 01 00 00       	add    eax,0x100
c0016b2f:	c1 e0 04             	shl    eax,0x4
c0016b32:	83 ec 0c             	sub    esp,0xc
c0016b35:	50                   	push   eax
c0016b36:	e8 1e 8d ff ff       	call   c000f859 <malloc>
c0016b3b:	83 c4 10             	add    esp,0x10
c0016b3e:	89 c2                	mov    edx,eax
c0016b40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b44:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016b47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b4b:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b56:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016b5a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016b5e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016b64:	c1 e0 07             	shl    eax,0x7
c0016b67:	83 ec 0c             	sub    esp,0xc
c0016b6a:	50                   	push   eax
c0016b6b:	e8 e9 8c ff ff       	call   c000f859 <malloc>
c0016b70:	83 c4 10             	add    esp,0x10
c0016b73:	89 c2                	mov    edx,eax
c0016b75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b79:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016b7c:	90                   	nop
c0016b7d:	83 c4 18             	add    esp,0x18
c0016b80:	5b                   	pop    ebx
c0016b81:	c3                   	ret    

c0016b82 <VCache::invalidateReadBuffer()>:
c0016b82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b86:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016b8c:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016b90:	c3                   	ret    
c0016b91:	90                   	nop

c0016b92 <VCache::writeWriteBuffer()>:
c0016b92:	53                   	push   ebx
c0016b93:	83 ec 0c             	sub    esp,0xc
c0016b96:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016b9a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016b9d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016ba0:	68 30 b7 02 c0       	push   0xc002b730
c0016ba5:	e8 07 bd ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0016baa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016bad:	5a                   	pop    edx
c0016bae:	8b 10                	mov    edx,DWORD PTR [eax]
c0016bb0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016bb3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016bb6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016bb9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016bbc:	50                   	push   eax
c0016bbd:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016bc0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016bc7:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016bce:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016bd2:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016bd9:	83 c4 28             	add    esp,0x28
c0016bdc:	5b                   	pop    ebx
c0016bdd:	c3                   	ret    

c0016bde <VCache::~VCache()>:
c0016bde:	83 ec 0c             	sub    esp,0xc
c0016be1:	ba 58 b8 02 c0       	mov    edx,0xc002b858
c0016be6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bea:	89 10                	mov    DWORD PTR [eax],edx
c0016bec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bf0:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016bf3:	84 c0                	test   al,al
c0016bf5:	74 0f                	je     c0016c06 <VCache::~VCache()+0x28>
c0016bf7:	83 ec 0c             	sub    esp,0xc
c0016bfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bfe:	e8 8f ff ff ff       	call   c0016b92 <VCache::writeWriteBuffer()>
c0016c03:	83 c4 10             	add    esp,0x10
c0016c06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c0a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016c0d:	83 ec 0c             	sub    esp,0xc
c0016c10:	50                   	push   eax
c0016c11:	e8 53 8c ff ff       	call   c000f869 <free>
c0016c16:	83 c4 10             	add    esp,0x10
c0016c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c1d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016c20:	83 ec 0c             	sub    esp,0xc
c0016c23:	50                   	push   eax
c0016c24:	e8 40 8c ff ff       	call   c000f869 <free>
c0016c29:	83 c4 10             	add    esp,0x10
c0016c2c:	90                   	nop
c0016c2d:	83 c4 0c             	add    esp,0xc
c0016c30:	c3                   	ret    
c0016c31:	90                   	nop

c0016c32 <VCache::~VCache()>:
c0016c32:	83 ec 0c             	sub    esp,0xc
c0016c35:	83 ec 0c             	sub    esp,0xc
c0016c38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c3c:	e8 9d ff ff ff       	call   c0016bde <VCache::~VCache()>
c0016c41:	83 c4 10             	add    esp,0x10
c0016c44:	83 ec 08             	sub    esp,0x8
c0016c47:	6a 44                	push   0x44
c0016c49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c4d:	e8 87 bb ff ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c0016c52:	83 c4 10             	add    esp,0x10
c0016c55:	83 c4 0c             	add    esp,0xc
c0016c58:	c3                   	ret    
c0016c59:	90                   	nop

c0016c5a <VCache::write(unsigned long long, int, void*)>:
c0016c5a:	55                   	push   ebp
c0016c5b:	57                   	push   edi
c0016c5c:	56                   	push   esi
c0016c5d:	53                   	push   ebx
c0016c5e:	83 ec 18             	sub    esp,0x18
c0016c61:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016c65:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c69:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016c6d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0016c71:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016c74:	e8 47 74 00 00       	call   c001e0c0 <Semaphore::acquire()>
c0016c79:	c7 04 24 54 b7 02 c0 	mov    DWORD PTR [esp],0xc002b754
c0016c80:	e8 2c bc ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0016c85:	83 c4 10             	add    esp,0x10
c0016c88:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016c8c:	74 0c                	je     c0016c9a <VCache::write(unsigned long long, int, void*)+0x40>
c0016c8e:	83 ec 0c             	sub    esp,0xc
c0016c91:	53                   	push   ebx
c0016c92:	e8 eb fe ff ff       	call   c0016b82 <VCache::invalidateReadBuffer()>
c0016c97:	83 c4 10             	add    esp,0x10
c0016c9a:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016c9e:	74 66                	je     c0016d06 <VCache::write(unsigned long long, int, void*)+0xac>
c0016ca0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016ca3:	99                   	cdq    
c0016ca4:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016ca7:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016caa:	31 f0                	xor    eax,esi
c0016cac:	89 d1                	mov    ecx,edx
c0016cae:	89 ca                	mov    edx,ecx
c0016cb0:	31 fa                	xor    edx,edi
c0016cb2:	09 d0                	or     eax,edx
c0016cb4:	75 44                	jne    c0016cfa <VCache::write(unsigned long long, int, void*)+0xa0>
c0016cb6:	83 fd 01             	cmp    ebp,0x1
c0016cb9:	75 3f                	jne    c0016cfa <VCache::write(unsigned long long, int, void*)+0xa0>
c0016cbb:	83 ec 0c             	sub    esp,0xc
c0016cbe:	68 7b b7 02 c0       	push   0xc002b77b
c0016cc3:	e8 e9 bb ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0016cc8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ccb:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016cce:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016cd4:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016cd8:	0f af f9             	imul   edi,ecx
c0016cdb:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016cde:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ce0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016ce3:	83 c4 10             	add    esp,0x10
c0016ce6:	40                   	inc    eax
c0016ce7:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016cea:	83 c0 80             	add    eax,0xffffff80
c0016ced:	75 75                	jne    c0016d64 <VCache::write(unsigned long long, int, void*)+0x10a>
c0016cef:	83 ec 0c             	sub    esp,0xc
c0016cf2:	53                   	push   ebx
c0016cf3:	e8 9a fe ff ff       	call   c0016b92 <VCache::writeWriteBuffer()>
c0016cf8:	eb 41                	jmp    c0016d3b <VCache::write(unsigned long long, int, void*)+0xe1>
c0016cfa:	83 ec 0c             	sub    esp,0xc
c0016cfd:	53                   	push   ebx
c0016cfe:	e8 8f fe ff ff       	call   c0016b92 <VCache::writeWriteBuffer()>
c0016d03:	83 c4 10             	add    esp,0x10
c0016d06:	83 fd 7f             	cmp    ebp,0x7f
c0016d09:	7f 35                	jg     c0016d40 <VCache::write(unsigned long long, int, void*)+0xe6>
c0016d0b:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016d0e:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016d11:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016d14:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016d18:	56                   	push   esi
c0016d19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016d1d:	6a 01                	push   0x1
c0016d1f:	68 91 b7 02 c0       	push   0xc002b791
c0016d24:	e8 88 bb ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0016d29:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d2c:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016d2f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016d35:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016d39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d3b:	83 c4 10             	add    esp,0x10
c0016d3e:	eb 24                	jmp    c0016d64 <VCache::write(unsigned long long, int, void*)+0x10a>
c0016d40:	52                   	push   edx
c0016d41:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016d45:	55                   	push   ebp
c0016d46:	68 b2 b7 02 c0       	push   0xc002b7b2
c0016d4b:	e8 61 bb ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0016d50:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d53:	59                   	pop    ecx
c0016d54:	8b 10                	mov    edx,DWORD PTR [eax]
c0016d56:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016d5a:	55                   	push   ebp
c0016d5b:	57                   	push   edi
c0016d5c:	56                   	push   esi
c0016d5d:	50                   	push   eax
c0016d5e:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016d61:	83 c4 20             	add    esp,0x20
c0016d64:	83 ec 0c             	sub    esp,0xc
c0016d67:	68 cf b7 02 c0       	push   0xc002b7cf
c0016d6c:	e8 40 bb ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0016d71:	58                   	pop    eax
c0016d72:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016d75:	e8 b2 79 00 00       	call   c001e72c <Semaphore::release()>
c0016d7a:	83 c4 1c             	add    esp,0x1c
c0016d7d:	31 c0                	xor    eax,eax
c0016d7f:	5b                   	pop    ebx
c0016d80:	5e                   	pop    esi
c0016d81:	5f                   	pop    edi
c0016d82:	5d                   	pop    ebp
c0016d83:	c3                   	ret    

c0016d84 <VCache::read(unsigned long long, int, void*)>:
c0016d84:	55                   	push   ebp
c0016d85:	57                   	push   edi
c0016d86:	56                   	push   esi
c0016d87:	53                   	push   ebx
c0016d88:	83 ec 28             	sub    esp,0x28
c0016d8b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016d8f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0016d93:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d9b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016d9f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016da3:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0016da7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016daa:	e8 11 73 00 00       	call   c001e0c0 <Semaphore::acquire()>
c0016daf:	c7 04 24 ef b7 02 c0 	mov    DWORD PTR [esp],0xc002b7ef
c0016db6:	e8 f6 ba ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0016dbb:	83 c4 10             	add    esp,0x10
c0016dbe:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016dc2:	74 0c                	je     c0016dd0 <VCache::read(unsigned long long, int, void*)+0x4c>
c0016dc4:	83 ec 0c             	sub    esp,0xc
c0016dc7:	53                   	push   ebx
c0016dc8:	e8 c5 fd ff ff       	call   c0016b92 <VCache::writeWriteBuffer()>
c0016dcd:	83 c4 10             	add    esp,0x10
c0016dd0:	83 fe 01             	cmp    esi,0x1
c0016dd3:	75 79                	jne    c0016e4e <VCache::read(unsigned long long, int, void*)+0xca>
c0016dd5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016dd8:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016ddf:	75 6d                	jne    c0016e4e <VCache::read(unsigned long long, int, void*)+0xca>
c0016de1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016de4:	89 d1                	mov    ecx,edx
c0016de6:	f7 d9                	neg    ecx
c0016de8:	89 cf                	mov    edi,ecx
c0016dea:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016dee:	c1 ff 1f             	sar    edi,0x1f
c0016df1:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0016df4:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016df8:	89 ce                	mov    esi,ecx
c0016dfa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016dfe:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0016e02:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016e06:	89 cf                	mov    edi,ecx
c0016e08:	74 0a                	je     c0016e14 <VCache::read(unsigned long long, int, void*)+0x90>
c0016e0a:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016e0d:	75 05                	jne    c0016e14 <VCache::read(unsigned long long, int, void*)+0x90>
c0016e0f:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0016e12:	74 1c                	je     c0016e30 <VCache::read(unsigned long long, int, void*)+0xac>
c0016e14:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016e18:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0016e1b:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0016e1e:	83 ec 0c             	sub    esp,0xc
c0016e21:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016e23:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016e26:	52                   	push   edx
c0016e27:	57                   	push   edi
c0016e28:	56                   	push   esi
c0016e29:	50                   	push   eax
c0016e2a:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016e2d:	83 c4 20             	add    esp,0x20
c0016e30:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e33:	89 ef                	mov    edi,ebp
c0016e35:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016e3b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016e3e:	8d 70 ff             	lea    esi,[eax-0x1]
c0016e41:	23 34 24             	and    esi,DWORD PTR [esp]
c0016e44:	0f af f1             	imul   esi,ecx
c0016e47:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016e4a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e4c:	eb 30                	jmp    c0016e7e <VCache::read(unsigned long long, int, void*)+0xfa>
c0016e4e:	83 ec 0c             	sub    esp,0xc
c0016e51:	53                   	push   ebx
c0016e52:	e8 2b fd ff ff       	call   c0016b82 <VCache::invalidateReadBuffer()>
c0016e57:	83 c4 0c             	add    esp,0xc
c0016e5a:	55                   	push   ebp
c0016e5b:	56                   	push   esi
c0016e5c:	68 15 b8 02 c0       	push   0xc002b815
c0016e61:	e8 4b ba ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0016e66:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e69:	8b 10                	mov    edx,DWORD PTR [eax]
c0016e6b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016e6e:	56                   	push   esi
c0016e6f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e73:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e77:	50                   	push   eax
c0016e78:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016e7b:	83 c4 20             	add    esp,0x20
c0016e7e:	83 ec 0c             	sub    esp,0xc
c0016e81:	68 31 b8 02 c0       	push   0xc002b831
c0016e86:	e8 26 ba ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0016e8b:	58                   	pop    eax
c0016e8c:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016e8f:	e8 98 78 00 00       	call   c001e72c <Semaphore::release()>
c0016e94:	83 c4 2c             	add    esp,0x2c
c0016e97:	31 c0                	xor    eax,eax
c0016e99:	5b                   	pop    ebx
c0016e9a:	5e                   	pop    esi
c0016e9b:	5f                   	pop    edi
c0016e9c:	5d                   	pop    ebp
c0016e9d:	c3                   	ret    

c0016e9e <Video::putrect(int, int, int, int, unsigned int)>:
c0016e9e:	55                   	push   ebp
c0016e9f:	57                   	push   edi
c0016ea0:	56                   	push   esi
c0016ea1:	53                   	push   ebx
c0016ea2:	83 ec 1c             	sub    esp,0x1c
c0016ea5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016ea9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ead:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016eb1:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016eb5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016eb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ebd:	01 df                	add    edi,ebx
c0016ebf:	39 fb                	cmp    ebx,edi
c0016ec1:	7d 1f                	jge    c0016ee2 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016ec3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016ec7:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016ecb:	7d 12                	jge    c0016edf <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016ecd:	8b 16                	mov    edx,DWORD PTR [esi]
c0016ecf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016ed3:	53                   	push   ebx
c0016ed4:	55                   	push   ebp
c0016ed5:	45                   	inc    ebp
c0016ed6:	56                   	push   esi
c0016ed7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016eda:	83 c4 10             	add    esp,0x10
c0016edd:	eb e8                	jmp    c0016ec7 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016edf:	43                   	inc    ebx
c0016ee0:	eb dd                	jmp    c0016ebf <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016ee2:	83 c4 1c             	add    esp,0x1c
c0016ee5:	5b                   	pop    ebx
c0016ee6:	5e                   	pop    esi
c0016ee7:	5f                   	pop    edi
c0016ee8:	5d                   	pop    ebp
c0016ee9:	c3                   	ret    

c0016eea <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016eea:	55                   	push   ebp
c0016eeb:	57                   	push   edi
c0016eec:	31 ff                	xor    edi,edi
c0016eee:	56                   	push   esi
c0016eef:	53                   	push   ebx
c0016ef0:	83 ec 1c             	sub    esp,0x1c
c0016ef3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016ef7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016efb:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016f02:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016f07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f0b:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016f0f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f13:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016f16:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016f1a:	01 f9                	add    ecx,edi
c0016f1c:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016f20:	7d 2f                	jge    c0016f51 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016f22:	31 f6                	xor    esi,esi
c0016f24:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016f28:	01 f2                	add    edx,esi
c0016f2a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016f2e:	7d 1a                	jge    c0016f4a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016f30:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016f33:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016f36:	46                   	inc    esi
c0016f37:	51                   	push   ecx
c0016f38:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016f3c:	52                   	push   edx
c0016f3d:	55                   	push   ebp
c0016f3e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016f41:	83 c4 10             	add    esp,0x10
c0016f44:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f48:	eb da                	jmp    c0016f24 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016f4a:	47                   	inc    edi
c0016f4b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016f4f:	eb c5                	jmp    c0016f16 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016f51:	83 c4 1c             	add    esp,0x1c
c0016f54:	5b                   	pop    ebx
c0016f55:	5e                   	pop    esi
c0016f56:	5f                   	pop    edi
c0016f57:	5d                   	pop    ebp
c0016f58:	c3                   	ret    
c0016f59:	90                   	nop

c0016f5a <Video::blit(unsigned int*, int, int, int, int)>:
c0016f5a:	55                   	push   ebp
c0016f5b:	57                   	push   edi
c0016f5c:	56                   	push   esi
c0016f5d:	53                   	push   ebx
c0016f5e:	83 ec 1c             	sub    esp,0x1c
c0016f61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016f65:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016f69:	85 c0                	test   eax,eax
c0016f6b:	79 02                	jns    c0016f6f <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016f6d:	31 c0                	xor    eax,eax
c0016f6f:	c1 e0 02             	shl    eax,0x2
c0016f72:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016f76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f7a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f7e:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016f82:	39 d8                	cmp    eax,ebx
c0016f84:	7e 49                	jle    c0016fcf <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016f86:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016f8c:	7c 41                	jl     c0016fcf <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016f8e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016f92:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016f96:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016f9a:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016f9e:	39 f9                	cmp    ecx,edi
c0016fa0:	7e 22                	jle    c0016fc4 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016fa2:	83 c5 04             	add    ebp,0x4
c0016fa5:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016fab:	7c 14                	jl     c0016fc1 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016fad:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016faf:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016fb2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016fb6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016fba:	56                   	push   esi
c0016fbb:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016fbe:	83 c4 10             	add    esp,0x10
c0016fc1:	47                   	inc    edi
c0016fc2:	eb d2                	jmp    c0016f96 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016fc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fc8:	43                   	inc    ebx
c0016fc9:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016fcd:	eb ab                	jmp    c0016f7a <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016fcf:	83 c4 1c             	add    esp,0x1c
c0016fd2:	5b                   	pop    ebx
c0016fd3:	5e                   	pop    esi
c0016fd4:	5f                   	pop    edi
c0016fd5:	5d                   	pop    ebp
c0016fd6:	c3                   	ret    
c0016fd7:	90                   	nop

c0016fd8 <Video::clearScreen(unsigned int)>:
c0016fd8:	57                   	push   edi
c0016fd9:	56                   	push   esi
c0016fda:	53                   	push   ebx
c0016fdb:	31 db                	xor    ebx,ebx
c0016fdd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016fe1:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016fe7:	7e 1f                	jle    c0017008 <Video::clearScreen(unsigned int)+0x30>
c0016fe9:	31 ff                	xor    edi,edi
c0016feb:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016ff1:	7e 12                	jle    c0017005 <Video::clearScreen(unsigned int)+0x2d>
c0016ff3:	8b 06                	mov    eax,DWORD PTR [esi]
c0016ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016ff9:	53                   	push   ebx
c0016ffa:	57                   	push   edi
c0016ffb:	47                   	inc    edi
c0016ffc:	56                   	push   esi
c0016ffd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017000:	83 c4 10             	add    esp,0x10
c0017003:	eb e6                	jmp    c0016feb <Video::clearScreen(unsigned int)+0x13>
c0017005:	43                   	inc    ebx
c0017006:	eb d9                	jmp    c0016fe1 <Video::clearScreen(unsigned int)+0x9>
c0017008:	5b                   	pop    ebx
c0017009:	5e                   	pop    esi
c001700a:	5f                   	pop    edi
c001700b:	c3                   	ret    

c001700c <Video::putpixel(int, int, unsigned int)>:
c001700c:	c7 44 24 04 60 b8 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b860
c0017014:	e9 06 32 00 00       	jmp    c001a21f <Krnl::panic(char const*)>
c0017019:	90                   	nop

c001701a <Video::Video(char const*)>:
c001701a:	83 ec 0c             	sub    esp,0xc
c001701d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017021:	83 ec 08             	sub    esp,0x8
c0017024:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017028:	50                   	push   eax
c0017029:	e8 c0 ce ff ff       	call   c0013eee <Device::Device(char const*)>
c001702e:	83 c4 10             	add    esp,0x10
c0017031:	ba d0 b8 02 c0       	mov    edx,0xc002b8d0
c0017036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001703a:	89 10                	mov    DWORD PTR [eax],edx
c001703c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017040:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001704a:	90                   	nop
c001704b:	83 c4 0c             	add    esp,0xc
c001704e:	c3                   	ret    
c001704f:	90                   	nop

c0017050 <Video::~Video()>:
c0017050:	83 ec 0c             	sub    esp,0xc
c0017053:	ba d0 b8 02 c0       	mov    edx,0xc002b8d0
c0017058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001705c:	89 10                	mov    DWORD PTR [eax],edx
c001705e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017062:	83 ec 0c             	sub    esp,0xc
c0017065:	50                   	push   eax
c0017066:	e8 4d cb ff ff       	call   c0013bb8 <Device::~Device()>
c001706b:	83 c4 10             	add    esp,0x10
c001706e:	90                   	nop
c001706f:	83 c4 0c             	add    esp,0xc
c0017072:	c3                   	ret    
c0017073:	90                   	nop

c0017074 <Video::~Video()>:
c0017074:	83 ec 0c             	sub    esp,0xc
c0017077:	83 ec 0c             	sub    esp,0xc
c001707a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001707e:	e8 cd ff ff ff       	call   c0017050 <Video::~Video()>
c0017083:	83 c4 10             	add    esp,0x10
c0017086:	83 ec 08             	sub    esp,0x8
c0017089:	68 64 01 00 00       	push   0x164
c001708e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017092:	e8 42 b7 ff ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c0017097:	83 c4 10             	add    esp,0x10
c001709a:	83 c4 0c             	add    esp,0xc
c001709d:	c3                   	ret    

c001709e <Video::isMonochrome()>:
c001709e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170a2:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00170a8:	c3                   	ret    
c00170a9:	90                   	nop

c00170aa <Video::getWidth()>:
c00170aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170ae:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00170b4:	c3                   	ret    
c00170b5:	90                   	nop

c00170b6 <Video::getHeight()>:
c00170b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170ba:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170c0:	c3                   	ret    
c00170c1:	90                   	nop

c00170c2 <Video::drawCursor(int, int, unsigned char*, int)>:
c00170c2:	55                   	push   ebp
c00170c3:	57                   	push   edi
c00170c4:	56                   	push   esi
c00170c5:	53                   	push   ebx
c00170c6:	83 ec 2c             	sub    esp,0x2c
c00170c9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00170cd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00170d1:	83 f8 01             	cmp    eax,0x1
c00170d4:	19 c9                	sbb    ecx,ecx
c00170d6:	31 db                	xor    ebx,ebx
c00170d8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00170dc:	89 cd                	mov    ebp,ecx
c00170de:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00170e6:	f7 d5                	not    ebp
c00170e8:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00170ee:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00170f2:	01 d8                	add    eax,ebx
c00170f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00170f8:	56                   	push   esi
c00170f9:	e8 b8 ff ff ff       	call   c00170b6 <Video::getHeight()>
c00170fe:	59                   	pop    ecx
c00170ff:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017103:	7e 70                	jle    c0017175 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017105:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017109:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001710d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017110:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017114:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017118:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001711f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017123:	89 f8                	mov    eax,edi
c0017125:	83 c0 20             	add    eax,0x20
c0017128:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001712c:	56                   	push   esi
c001712d:	e8 78 ff ff ff       	call   c00170aa <Video::getWidth()>
c0017132:	5a                   	pop    edx
c0017133:	39 c7                	cmp    edi,eax
c0017135:	7d 34                	jge    c001716b <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017137:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001713c:	74 05                	je     c0017143 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001713e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017140:	55                   	push   ebp
c0017141:	eb 0d                	jmp    c0017150 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017143:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017148:	74 12                	je     c001715c <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001714a:	8b 06                	mov    eax,DWORD PTR [esi]
c001714c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017150:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017154:	57                   	push   edi
c0017155:	56                   	push   esi
c0017156:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017159:	83 c4 10             	add    esp,0x10
c001715c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017160:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017164:	47                   	inc    edi
c0017165:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017169:	75 c1                	jne    c001712c <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001716b:	43                   	inc    ebx
c001716c:	83 fb 20             	cmp    ebx,0x20
c001716f:	0f 85 79 ff ff ff    	jne    c00170ee <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017175:	83 c4 2c             	add    esp,0x2c
c0017178:	5b                   	pop    ebx
c0017179:	5e                   	pop    esi
c001717a:	5f                   	pop    edi
c001717b:	5d                   	pop    ebp
c001717c:	c3                   	ret    
c001717d:	90                   	nop

c001717e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001717e:	55                   	push   ebp
c001717f:	57                   	push   edi
c0017180:	56                   	push   esi
c0017181:	53                   	push   ebx
c0017182:	83 ec 28             	sub    esp,0x28
c0017185:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017189:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c001718d:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0017191:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017195:	c1 e6 08             	shl    esi,0x8
c0017198:	01 c6                	add    esi,eax
c001719a:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001719e:	c1 e0 08             	shl    eax,0x8
c00171a1:	01 d0                	add    eax,edx
c00171a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171ab:	0f af c6             	imul   eax,esi
c00171ae:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00171b5:	50                   	push   eax
c00171b6:	e8 9e 86 ff ff       	call   c000f859 <malloc>
c00171bb:	83 c4 10             	add    esp,0x10
c00171be:	89 c7                	mov    edi,eax
c00171c0:	85 c0                	test   eax,eax
c00171c2:	75 10                	jne    c00171d4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c00171c4:	83 ec 0c             	sub    esp,0xc
c00171c7:	68 81 b8 02 c0       	push   0xc002b881
c00171cc:	e8 4e 30 00 00       	call   c001a21f <Krnl::panic(char const*)>
c00171d1:	83 c4 10             	add    esp,0x10
c00171d4:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00171d7:	ba 12 00 00 00       	mov    edx,0x12
c00171dc:	84 c0                	test   al,al
c00171de:	74 11                	je     c00171f1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c00171e0:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c00171e4:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c00171e8:	c1 fa 03             	sar    edx,0x3
c00171eb:	0f af d1             	imul   edx,ecx
c00171ee:	83 c2 12             	add    edx,0x12
c00171f1:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00171f5:	74 04                	je     c00171fb <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c00171f7:	85 f6                	test   esi,esi
c00171f9:	75 12                	jne    c001720d <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c00171fb:	83 ec 0c             	sub    esp,0xc
c00171fe:	68 91 b8 02 c0       	push   0xc002b891
c0017203:	e8 a9 b6 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0017208:	e9 b8 00 00 00       	jmp    c00172c5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c001720d:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0017211:	80 f9 02             	cmp    cl,0x2
c0017214:	0f 85 96 00 00 00    	jne    c00172b0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c001721a:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001721f:	75 0e                	jne    c001722f <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0017221:	84 c0                	test   al,al
c0017223:	75 0a                	jne    c001722f <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0017225:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017228:	83 e8 18             	sub    eax,0x18
c001722b:	a8 f7                	test   al,0xf7
c001722d:	74 0a                	je     c0017239 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c001722f:	83 ec 0c             	sub    esp,0xc
c0017232:	68 a6 b8 02 c0       	push   0xc002b8a6
c0017237:	eb 7f                	jmp    c00172b8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0017239:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017241:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017249:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c001724d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017255:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017259:	75 0c                	jne    c0017267 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001725b:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0017260:	c1 e0 18             	shl    eax,0x18
c0017263:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017267:	45                   	inc    ebp
c0017268:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c001726d:	c1 e1 10             	shl    ecx,0x10
c0017270:	89 c8                	mov    eax,ecx
c0017272:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0017277:	c1 e1 08             	shl    ecx,0x8
c001727a:	09 c1                	or     ecx,eax
c001727c:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0017280:	09 c1                	or     ecx,eax
c0017282:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0017286:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c001728a:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001728e:	c1 f8 03             	sar    eax,0x3
c0017291:	01 c2                	add    edx,eax
c0017293:	89 e8                	mov    eax,ebp
c0017295:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017299:	39 c6                	cmp    esi,eax
c001729b:	7f b0                	jg     c001724d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c001729d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00172a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00172a5:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00172a8:	7e 22                	jle    c00172cc <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c00172aa:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c00172ae:	eb 99                	jmp    c0017249 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00172b0:	50                   	push   eax
c00172b1:	50                   	push   eax
c00172b2:	51                   	push   ecx
c00172b3:	68 b4 b8 02 c0       	push   0xc002b8b4
c00172b8:	e8 f4 b5 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c00172bd:	89 3c 24             	mov    DWORD PTR [esp],edi
c00172c0:	e8 a4 85 ff ff       	call   c000f869 <free>
c00172c5:	83 c4 10             	add    esp,0x10
c00172c8:	31 ff                	xor    edi,edi
c00172ca:	eb 0f                	jmp    c00172db <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c00172cc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00172d0:	89 30                	mov    DWORD PTR [eax],esi
c00172d2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00172d6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00172d9:	89 30                	mov    DWORD PTR [eax],esi
c00172db:	83 c4 1c             	add    esp,0x1c
c00172de:	89 f8                	mov    eax,edi
c00172e0:	5b                   	pop    ebx
c00172e1:	5e                   	pop    esi
c00172e2:	5f                   	pop    edi
c00172e3:	5d                   	pop    ebp
c00172e4:	c3                   	ret    
c00172e5:	90                   	nop

c00172e6 <Video::putTGA(int, int, unsigned char*, int)>:
c00172e6:	55                   	push   ebp
c00172e7:	57                   	push   edi
c00172e8:	56                   	push   esi
c00172e9:	53                   	push   ebx
c00172ea:	83 ec 28             	sub    esp,0x28
c00172ed:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00172f1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172f5:	50                   	push   eax
c00172f6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172fa:	50                   	push   eax
c00172fb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00172ff:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017303:	56                   	push   esi
c0017304:	e8 75 fe ff ff       	call   c001717e <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017309:	83 c4 20             	add    esp,0x20
c001730c:	85 c0                	test   eax,eax
c001730e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017312:	74 35                	je     c0017349 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017314:	89 c7                	mov    edi,eax
c0017316:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001731a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001731e:	39 d8                	cmp    eax,ebx
c0017320:	7e 27                	jle    c0017349 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017322:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017326:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001732a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001732e:	39 e8                	cmp    eax,ebp
c0017330:	7e 14                	jle    c0017346 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017332:	8b 06                	mov    eax,DWORD PTR [esi]
c0017334:	83 c7 04             	add    edi,0x4
c0017337:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c001733a:	53                   	push   ebx
c001733b:	55                   	push   ebp
c001733c:	45                   	inc    ebp
c001733d:	56                   	push   esi
c001733e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017341:	83 c4 10             	add    esp,0x10
c0017344:	eb e0                	jmp    c0017326 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017346:	43                   	inc    ebx
c0017347:	eb cd                	jmp    c0017316 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017349:	83 c4 1c             	add    esp,0x1c
c001734c:	5b                   	pop    ebx
c001734d:	5e                   	pop    esi
c001734e:	5f                   	pop    edi
c001734f:	5d                   	pop    ebp
c0017350:	c3                   	ret    
c0017351:	90                   	nop

c0017352 <ACPI::close(int, int, void*)>:
c0017352:	83 ec 1c             	sub    esp,0x1c
c0017355:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001735d:	74 0a                	je     c0017369 <ACPI::close(int, int, void*)+0x17>
c001735f:	b8 00 00 00 00       	mov    eax,0x0
c0017364:	e9 8a 00 00 00       	jmp    c00173f3 <ACPI::close(int, int, void*)+0xa1>
c0017369:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001736e:	75 27                	jne    c0017397 <ACPI::close(int, int, void*)+0x45>
c0017370:	a1 88 ea 02 c0       	mov    eax,ds:0xc002ea88
c0017375:	85 c0                	test   eax,eax
c0017377:	74 07                	je     c0017380 <ACPI::close(int, int, void*)+0x2e>
c0017379:	a1 88 ea 02 c0       	mov    eax,ds:0xc002ea88
c001737e:	ff d0                	call   eax
c0017380:	83 ec 0c             	sub    esp,0xc
c0017383:	68 10 b9 02 c0       	push   0xc002b910
c0017388:	e8 92 2e 00 00       	call   c001a21f <Krnl::panic(char const*)>
c001738d:	83 c4 10             	add    esp,0x10
c0017390:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017395:	eb 5c                	jmp    c00173f3 <ACPI::close(int, int, void*)+0xa1>
c0017397:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001739c:	75 50                	jne    c00173ee <ACPI::close(int, int, void*)+0x9c>
c001739e:	a1 84 ea 02 c0       	mov    eax,ds:0xc002ea84
c00173a3:	85 c0                	test   eax,eax
c00173a5:	74 07                	je     c00173ae <ACPI::close(int, int, void*)+0x5c>
c00173a7:	a1 84 ea 02 c0       	mov    eax,ds:0xc002ea84
c00173ac:	ff d0                	call   eax
c00173ae:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00173b3:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00173b8:	83 e0 02             	and    eax,0x2
c00173bb:	74 1c                	je     c00173d9 <ACPI::close(int, int, void*)+0x87>
c00173bd:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00173c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00173c8:	89 c2                	mov    edx,eax
c00173ca:	ec                   	in     al,dx
c00173cb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00173cf:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00173d3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00173d7:	eb da                	jmp    c00173b3 <ACPI::close(int, int, void*)+0x61>
c00173d9:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00173e0:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00173e5:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00173e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00173ed:	ee                   	out    dx,al
c00173ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00173f3:	83 c4 1c             	add    esp,0x1c
c00173f6:	c3                   	ret    

c00173f7 <findRSDP()>:
c00173f7:	83 ec 1c             	sub    esp,0x1c
c00173fa:	83 ec 0c             	sub    esp,0xc
c00173fd:	68 eb b9 02 c0       	push   0xc002b9eb
c0017402:	e8 ac 84 ff ff       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c0017407:	83 c4 10             	add    esp,0x10
c001740a:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c001740f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017415:	83 e0 04             	and    eax,0x4
c0017418:	84 c0                	test   al,al
c001741a:	75 0a                	jne    c0017426 <findRSDP()+0x2f>
c001741c:	b8 00 00 00 00       	mov    eax,0x0
c0017421:	e9 9a 00 00 00       	jmp    c00174c0 <findRSDP()+0xc9>
c0017426:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c001742b:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017430:	7f 1b                	jg     c001744d <findRSDP()+0x56>
c0017432:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0017437:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001743d:	83 e2 fb             	and    edx,0xfffffffb
c0017440:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017446:	b8 00 00 00 00       	mov    eax,0x0
c001744b:	eb 73                	jmp    c00174c0 <findRSDP()+0xc9>
c001744d:	83 ec 0c             	sub    esp,0xc
c0017450:	68 fb b9 02 c0       	push   0xc002b9fb
c0017455:	e8 59 84 ff ff       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c001745a:	83 c4 10             	add    esp,0x10
c001745d:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017465:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001746d:	77 3c                	ja     c00174ab <findRSDP()+0xb4>
c001746f:	83 ec 04             	sub    esp,0x4
c0017472:	6a 08                	push   0x8
c0017474:	68 14 ba 02 c0       	push   0xc002ba14
c0017479:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001747d:	e8 ca 91 fe ff       	call   c000064c <memcmp>
c0017482:	83 c4 10             	add    esp,0x10
c0017485:	85 c0                	test   eax,eax
c0017487:	0f 94 c0             	sete   al
c001748a:	84 c0                	test   al,al
c001748c:	74 16                	je     c00174a4 <findRSDP()+0xad>
c001748e:	83 ec 0c             	sub    esp,0xc
c0017491:	68 1d ba 02 c0       	push   0xc002ba1d
c0017496:	e8 18 84 ff ff       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c001749b:	83 c4 10             	add    esp,0x10
c001749e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174a2:	eb 1c                	jmp    c00174c0 <findRSDP()+0xc9>
c00174a4:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00174a9:	eb ba                	jmp    c0017465 <findRSDP()+0x6e>
c00174ab:	83 ec 0c             	sub    esp,0xc
c00174ae:	68 2b ba 02 c0       	push   0xc002ba2b
c00174b3:	e8 fb 83 ff ff       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c00174b8:	83 c4 10             	add    esp,0x10
c00174bb:	b8 00 00 00 00       	mov    eax,0x0
c00174c0:	83 c4 1c             	add    esp,0x1c
c00174c3:	c3                   	ret    

c00174c4 <loadACPITables(unsigned char*)>:
c00174c4:	57                   	push   edi
c00174c5:	56                   	push   esi
c00174c6:	53                   	push   ebx
c00174c7:	83 ec 60             	sub    esp,0x60
c00174ca:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00174cf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00174d5:	83 e0 04             	and    eax,0x4
c00174d8:	84 c0                	test   al,al
c00174da:	0f 84 33 02 00 00    	je     c0017713 <loadACPITables(unsigned char*)+0x24f>
c00174e0:	a0 a0 ec 02 c0       	mov    al,ds:0xc002eca0
c00174e5:	84 c0                	test   al,al
c00174e7:	74 75                	je     c001755e <loadACPITables(unsigned char*)+0x9a>
c00174e9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00174ed:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00174f1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00174f5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00174f8:	83 e8 24             	sub    eax,0x24
c00174fb:	c1 e8 03             	shr    eax,0x3
c00174fe:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017502:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001750a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001750e:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0017512:	0f 8d b2 00 00 00    	jge    c00175ca <loadACPITables(unsigned char*)+0x106>
c0017518:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001751c:	83 c0 24             	add    eax,0x24
c001751f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017523:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017527:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001752b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001752f:	c1 e0 03             	shl    eax,0x3
c0017532:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0017536:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001753a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001753d:	8b 00                	mov    eax,DWORD PTR [eax]
c001753f:	89 c1                	mov    ecx,eax
c0017541:	a1 8c ea 02 c0       	mov    eax,ds:0xc002ea8c
c0017546:	8d 50 01             	lea    edx,[eax+0x1]
c0017549:	89 15 8c ea 02 c0    	mov    DWORD PTR ds:0xc002ea8c,edx
c001754f:	89 ca                	mov    edx,ecx
c0017551:	89 14 c5 a4 ea 02 c0 	mov    DWORD PTR [eax*8-0x3ffd155c],edx
c0017558:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001755c:	eb ac                	jmp    c001750a <loadACPITables(unsigned char*)+0x46>
c001755e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017562:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017566:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001756a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001756d:	83 e8 24             	sub    eax,0x24
c0017570:	c1 e8 02             	shr    eax,0x2
c0017573:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017577:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001757f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017583:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017587:	7d 41                	jge    c00175ca <loadACPITables(unsigned char*)+0x106>
c0017589:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001758d:	83 c0 24             	add    eax,0x24
c0017590:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017594:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017598:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001759c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00175a0:	c1 e0 02             	shl    eax,0x2
c00175a3:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00175a7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00175ab:	8b 08                	mov    ecx,DWORD PTR [eax]
c00175ad:	a1 8c ea 02 c0       	mov    eax,ds:0xc002ea8c
c00175b2:	8d 50 01             	lea    edx,[eax+0x1]
c00175b5:	89 15 8c ea 02 c0    	mov    DWORD PTR ds:0xc002ea8c,edx
c00175bb:	89 ca                	mov    edx,ecx
c00175bd:	89 14 c5 a4 ea 02 c0 	mov    DWORD PTR [eax*8-0x3ffd155c],edx
c00175c4:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c00175c8:	eb b5                	jmp    c001757f <loadACPITables(unsigned char*)+0xbb>
c00175ca:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00175d2:	a1 8c ea 02 c0       	mov    eax,ds:0xc002ea8c
c00175d7:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00175db:	0f 8d 33 01 00 00    	jge    c0017714 <loadACPITables(unsigned char*)+0x250>
c00175e1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00175e5:	8b 04 c5 a4 ea 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd155c]
c00175ec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00175f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00175f4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00175f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00175fc:	25 ff 0f 00 00       	and    eax,0xfff
c0017601:	89 c6                	mov    esi,eax
c0017603:	8b 1d 70 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e570
c0017609:	83 ec 0c             	sub    esp,0xc
c001760c:	6a 01                	push   0x1
c001760e:	e8 cc 9e ff ff       	call   c00114df <Virt::allocateKernelVirtualPages(int)>
c0017613:	83 c4 10             	add    esp,0x10
c0017616:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001761a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017620:	83 ec 0c             	sub    esp,0xc
c0017623:	6a 01                	push   0x1
c0017625:	6a 01                	push   0x1
c0017627:	50                   	push   eax
c0017628:	52                   	push   edx
c0017629:	53                   	push   ebx
c001762a:	e8 4d a8 ff ff       	call   c0011e7c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001762f:	83 c4 20             	add    esp,0x20
c0017632:	09 f0                	or     eax,esi
c0017634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017638:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001763c:	c1 e0 03             	shl    eax,0x3
c001763f:	05 a0 ea 02 c0       	add    eax,0xc002eaa0
c0017644:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017648:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001764c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017650:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0017658:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001765c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017660:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017664:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017668:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001766c:	89 c6                	mov    esi,eax
c001766e:	89 d7                	mov    edi,edx
c0017670:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017672:	89 c8                	mov    eax,ecx
c0017674:	89 fa                	mov    edx,edi
c0017676:	89 f3                	mov    ebx,esi
c0017678:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001767c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017680:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017684:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017688:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001768b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001768f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017693:	05 00 10 00 00       	add    eax,0x1000
c0017698:	c1 e8 0c             	shr    eax,0xc
c001769b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001769f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00176a3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00176a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00176ab:	25 ff 0f 00 00       	and    eax,0xfff
c00176b0:	89 c6                	mov    esi,eax
c00176b2:	8b 1d 70 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e570
c00176b8:	83 ec 0c             	sub    esp,0xc
c00176bb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00176bf:	e8 1b 9e ff ff       	call   c00114df <Virt::allocateKernelVirtualPages(int)>
c00176c4:	83 c4 10             	add    esp,0x10
c00176c7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00176cb:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00176d1:	83 ec 0c             	sub    esp,0xc
c00176d4:	6a 01                	push   0x1
c00176d6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00176da:	50                   	push   eax
c00176db:	52                   	push   edx
c00176dc:	53                   	push   ebx
c00176dd:	e8 9a a7 ff ff       	call   c0011e7c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00176e2:	83 c4 20             	add    esp,0x20
c00176e5:	09 f0                	or     eax,esi
c00176e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00176eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176ef:	83 ec 0c             	sub    esp,0xc
c00176f2:	50                   	push   eax
c00176f3:	e8 17 a1 ff ff       	call   c001180f <Virt::freeKernelVirtualPages(unsigned long)>
c00176f8:	83 c4 10             	add    esp,0x10
c00176fb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00176ff:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017703:	89 14 c5 a4 ea 02 c0 	mov    DWORD PTR [eax*8-0x3ffd155c],edx
c001770a:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c001770e:	e9 bf fe ff ff       	jmp    c00175d2 <loadACPITables(unsigned char*)+0x10e>
c0017713:	90                   	nop
c0017714:	83 c4 60             	add    esp,0x60
c0017717:	5b                   	pop    ebx
c0017718:	5e                   	pop    esi
c0017719:	5f                   	pop    edi
c001771a:	c3                   	ret    

c001771b <findRSDT(unsigned char*)>:
c001771b:	57                   	push   edi
c001771c:	56                   	push   esi
c001771d:	53                   	push   ebx
c001771e:	83 ec 50             	sub    esp,0x50
c0017721:	83 ec 0c             	sub    esp,0xc
c0017724:	68 3f ba 02 c0       	push   0xc002ba3f
c0017729:	e8 85 81 ff ff       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c001772e:	83 c4 10             	add    esp,0x10
c0017731:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0017736:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001773c:	83 e0 04             	and    eax,0x4
c001773f:	84 c0                	test   al,al
c0017741:	75 0a                	jne    c001774d <findRSDT(unsigned char*)+0x32>
c0017743:	b8 00 00 00 00       	mov    eax,0x0
c0017748:	e9 81 01 00 00       	jmp    c00178ce <findRSDT(unsigned char*)+0x1b3>
c001774d:	83 ec 0c             	sub    esp,0xc
c0017750:	68 51 ba 02 c0       	push   0xc002ba51
c0017755:	e8 59 81 ff ff       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c001775a:	83 c4 10             	add    esp,0x10
c001775d:	89 e0                	mov    eax,esp
c001775f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017763:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017767:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001776b:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0017773:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017777:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001777b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001777f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017783:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0017787:	89 c6                	mov    esi,eax
c0017789:	89 d7                	mov    edi,edx
c001778b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001778d:	89 c8                	mov    eax,ecx
c001778f:	89 fa                	mov    edx,edi
c0017791:	89 f3                	mov    ebx,esi
c0017793:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017797:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001779b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001779f:	83 ec 0c             	sub    esp,0xc
c00177a2:	68 63 ba 02 c0       	push   0xc002ba63
c00177a7:	e8 07 81 ff ff       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c00177ac:	83 c4 10             	add    esp,0x10
c00177af:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00177b3:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c00177b7:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c00177bf:	83 ec 0c             	sub    esp,0xc
c00177c2:	68 75 ba 02 c0       	push   0xc002ba75
c00177c7:	e8 e7 80 ff ff       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c00177cc:	83 c4 10             	add    esp,0x10
c00177cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00177d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00177d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00177db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177df:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00177e3:	83 ec 04             	sub    esp,0x4
c00177e6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00177ea:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00177ee:	68 34 b9 02 c0       	push   0xc002b934
c00177f3:	e8 b9 b0 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c00177f8:	83 c4 10             	add    esp,0x10
c00177fb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00177ff:	25 ff 0f 00 00       	and    eax,0xfff
c0017804:	89 c6                	mov    esi,eax
c0017806:	8b 1d 70 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e570
c001780c:	83 ec 0c             	sub    esp,0xc
c001780f:	6a 02                	push   0x2
c0017811:	e8 c9 9c ff ff       	call   c00114df <Virt::allocateKernelVirtualPages(int)>
c0017816:	83 c4 10             	add    esp,0x10
c0017819:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001781d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017823:	83 ec 0c             	sub    esp,0xc
c0017826:	6a 01                	push   0x1
c0017828:	6a 02                	push   0x2
c001782a:	50                   	push   eax
c001782b:	52                   	push   edx
c001782c:	53                   	push   ebx
c001782d:	e8 4a a6 ff ff       	call   c0011e7c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017832:	83 c4 20             	add    esp,0x20
c0017835:	09 f0                	or     eax,esi
c0017837:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001783b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001783f:	25 ff 0f 00 00       	and    eax,0xfff
c0017844:	89 c6                	mov    esi,eax
c0017846:	8b 1d 70 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e570
c001784c:	83 ec 0c             	sub    esp,0xc
c001784f:	6a 02                	push   0x2
c0017851:	e8 89 9c ff ff       	call   c00114df <Virt::allocateKernelVirtualPages(int)>
c0017856:	83 c4 10             	add    esp,0x10
c0017859:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001785d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017863:	83 ec 0c             	sub    esp,0xc
c0017866:	6a 01                	push   0x1
c0017868:	6a 02                	push   0x2
c001786a:	50                   	push   eax
c001786b:	52                   	push   edx
c001786c:	53                   	push   ebx
c001786d:	e8 0a a6 ff ff       	call   c0011e7c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017872:	83 c4 20             	add    esp,0x20
c0017875:	09 f0                	or     eax,esi
c0017877:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001787b:	83 ec 04             	sub    esp,0x4
c001787e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017882:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017886:	68 54 b9 02 c0       	push   0xc002b954
c001788b:	e8 21 b0 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0017890:	83 c4 10             	add    esp,0x10
c0017893:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0017898:	75 11                	jne    c00178ab <findRSDT(unsigned char*)+0x190>
c001789a:	c6 05 a0 ec 02 c0 00 	mov    BYTE PTR ds:0xc002eca0,0x0
c00178a1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00178a5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00178a9:	eb 1f                	jmp    c00178ca <findRSDT(unsigned char*)+0x1af>
c00178ab:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c00178b0:	75 11                	jne    c00178c3 <findRSDT(unsigned char*)+0x1a8>
c00178b2:	c6 05 a0 ec 02 c0 01 	mov    BYTE PTR ds:0xc002eca0,0x1
c00178b9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00178bd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00178c1:	eb 07                	jmp    c00178ca <findRSDT(unsigned char*)+0x1af>
c00178c3:	b8 00 00 00 00       	mov    eax,0x0
c00178c8:	eb 04                	jmp    c00178ce <findRSDT(unsigned char*)+0x1b3>
c00178ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00178ce:	83 c4 50             	add    esp,0x50
c00178d1:	5b                   	pop    ebx
c00178d2:	5e                   	pop    esi
c00178d3:	5f                   	pop    edi
c00178d4:	c3                   	ret    

c00178d5 <findDataTable(unsigned char*, char*)>:
c00178d5:	83 ec 1c             	sub    esp,0x1c
c00178d8:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00178dd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00178e3:	83 e0 04             	and    eax,0x4
c00178e6:	84 c0                	test   al,al
c00178e8:	75 07                	jne    c00178f1 <findDataTable(unsigned char*, char*)+0x1c>
c00178ea:	b8 00 00 00 00       	mov    eax,0x0
c00178ef:	eb 52                	jmp    c0017943 <findDataTable(unsigned char*, char*)+0x6e>
c00178f1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00178f9:	a1 8c ea 02 c0       	mov    eax,ds:0xc002ea8c
c00178fe:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017902:	7d 3a                	jge    c001793e <findDataTable(unsigned char*, char*)+0x69>
c0017904:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017908:	c1 e0 03             	shl    eax,0x3
c001790b:	05 a0 ea 02 c0       	add    eax,0xc002eaa0
c0017910:	83 ec 04             	sub    esp,0x4
c0017913:	6a 04                	push   0x4
c0017915:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017919:	50                   	push   eax
c001791a:	e8 2d 8d fe ff       	call   c000064c <memcmp>
c001791f:	83 c4 10             	add    esp,0x10
c0017922:	85 c0                	test   eax,eax
c0017924:	0f 94 c0             	sete   al
c0017927:	84 c0                	test   al,al
c0017929:	74 0d                	je     c0017938 <findDataTable(unsigned char*, char*)+0x63>
c001792b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001792f:	8b 04 c5 a4 ea 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd155c]
c0017936:	eb 0b                	jmp    c0017943 <findDataTable(unsigned char*, char*)+0x6e>
c0017938:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001793c:	eb bb                	jmp    c00178f9 <findDataTable(unsigned char*, char*)+0x24>
c001793e:	b8 00 00 00 00       	mov    eax,0x0
c0017943:	83 c4 1c             	add    esp,0x1c
c0017946:	c3                   	ret    

c0017947 <scanMADT()>:
c0017947:	53                   	push   ebx
c0017948:	83 ec 38             	sub    esp,0x38
c001794b:	a1 20 e4 02 c0       	mov    eax,ds:0xc002e420
c0017950:	25 00 04 00 00       	and    eax,0x400
c0017955:	74 14                	je     c001796b <scanMADT()+0x24>
c0017957:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c001795c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017962:	83 e2 fb             	and    edx,0xfffffffb
c0017965:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001796b:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0017970:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017976:	83 e0 04             	and    eax,0x4
c0017979:	84 c0                	test   al,al
c001797b:	0f 84 6a 04 00 00    	je     c0017deb <scanMADT()+0x4a4>
c0017981:	e8 71 fa ff ff       	call   c00173f7 <findRSDP()>
c0017986:	a3 ac ec 02 c0       	mov    ds:0xc002ecac,eax
c001798b:	a1 ac ec 02 c0       	mov    eax,ds:0xc002ecac
c0017990:	85 c0                	test   eax,eax
c0017992:	75 19                	jne    c00179ad <scanMADT()+0x66>
c0017994:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0017999:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001799f:	83 e2 fb             	and    edx,0xfffffffb
c00179a2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00179a8:	e9 42 04 00 00       	jmp    c0017def <scanMADT()+0x4a8>
c00179ad:	83 ec 0c             	sub    esp,0xc
c00179b0:	68 87 ba 02 c0       	push   0xc002ba87
c00179b5:	e8 f9 7e ff ff       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c00179ba:	83 c4 10             	add    esp,0x10
c00179bd:	a1 ac ec 02 c0       	mov    eax,ds:0xc002ecac
c00179c2:	83 ec 0c             	sub    esp,0xc
c00179c5:	50                   	push   eax
c00179c6:	e8 50 fd ff ff       	call   c001771b <findRSDT(unsigned char*)>
c00179cb:	83 c4 10             	add    esp,0x10
c00179ce:	a3 a8 ec 02 c0       	mov    ds:0xc002eca8,eax
c00179d3:	a1 a8 ec 02 c0       	mov    eax,ds:0xc002eca8
c00179d8:	85 c0                	test   eax,eax
c00179da:	75 19                	jne    c00179f5 <scanMADT()+0xae>
c00179dc:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00179e1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00179e7:	83 e2 fb             	and    edx,0xfffffffb
c00179ea:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00179f0:	e9 fa 03 00 00       	jmp    c0017def <scanMADT()+0x4a8>
c00179f5:	83 ec 0c             	sub    esp,0xc
c00179f8:	68 97 ba 02 c0       	push   0xc002ba97
c00179fd:	e8 b1 7e ff ff       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c0017a02:	83 c4 10             	add    esp,0x10
c0017a05:	a1 a8 ec 02 c0       	mov    eax,ds:0xc002eca8
c0017a0a:	83 ec 0c             	sub    esp,0xc
c0017a0d:	50                   	push   eax
c0017a0e:	e8 b1 fa ff ff       	call   c00174c4 <loadACPITables(unsigned char*)>
c0017a13:	83 c4 10             	add    esp,0x10
c0017a16:	a1 a8 ec 02 c0       	mov    eax,ds:0xc002eca8
c0017a1b:	83 ec 08             	sub    esp,0x8
c0017a1e:	68 af ba 02 c0       	push   0xc002baaf
c0017a23:	50                   	push   eax
c0017a24:	e8 ac fe ff ff       	call   c00178d5 <findDataTable(unsigned char*, char*)>
c0017a29:	83 c4 10             	add    esp,0x10
c0017a2c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017a30:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017a35:	75 19                	jne    c0017a50 <scanMADT()+0x109>
c0017a37:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0017a3c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017a42:	83 e2 fe             	and    edx,0xfffffffe
c0017a45:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017a4b:	e9 9f 03 00 00       	jmp    c0017def <scanMADT()+0x4a8>
c0017a50:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017a58:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a5f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017a63:	0f 87 86 03 00 00    	ja     c0017def <scanMADT()+0x4a8>
c0017a69:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017a71:	0f 87 78 03 00 00    	ja     c0017def <scanMADT()+0x4a8>
c0017a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a7b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017a7f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a83:	8d 50 01             	lea    edx,[eax+0x1]
c0017a86:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a8a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a8e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a92:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017a96:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a9a:	8d 50 01             	lea    edx,[eax+0x1]
c0017a9d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017aa1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017aa5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017aa9:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017aad:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017ab2:	0f 86 36 03 00 00    	jbe    c0017dee <scanMADT()+0x4a7>
c0017ab8:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017abd:	75 57                	jne    c0017b16 <scanMADT()+0x1cf>
c0017abf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ac3:	8d 50 01             	lea    edx,[eax+0x1]
c0017ac6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017aca:	8a 15 a0 ee 02 c0    	mov    dl,BYTE PTR ds:0xc002eea0
c0017ad0:	0f b6 d2             	movzx  edx,dl
c0017ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017ad7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017adb:	88 82 e0 ee 02 c0    	mov    BYTE PTR [edx-0x3ffd1120],al
c0017ae1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ae5:	8d 50 01             	lea    edx,[eax+0x1]
c0017ae8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017aec:	8a 15 a0 ee 02 c0    	mov    dl,BYTE PTR ds:0xc002eea0
c0017af2:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017af5:	88 0d a0 ee 02 c0    	mov    BYTE PTR ds:0xc002eea0,cl
c0017afb:	0f b6 d2             	movzx  edx,dl
c0017afe:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017b02:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017b06:	88 82 c0 ee 02 c0    	mov    BYTE PTR [edx-0x3ffd1140],al
c0017b0c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017b11:	e9 c1 02 00 00       	jmp    c0017dd7 <scanMADT()+0x490>
c0017b16:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017b1b:	0f 85 14 01 00 00    	jne    c0017c35 <scanMADT()+0x2ee>
c0017b21:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b25:	8d 50 01             	lea    edx,[eax+0x1]
c0017b28:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017b2c:	8a 15 60 ed 02 c0    	mov    dl,BYTE PTR ds:0xc002ed60
c0017b32:	0f b6 d2             	movzx  edx,dl
c0017b35:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017b39:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017b3d:	88 82 80 ed 02 c0    	mov    BYTE PTR [edx-0x3ffd1280],al
c0017b43:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017b47:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b4b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b4f:	01 d0                	add    eax,edx
c0017b51:	83 c0 2c             	add    eax,0x2c
c0017b54:	8a 00                	mov    al,BYTE PTR [eax]
c0017b56:	0f b6 d0             	movzx  edx,al
c0017b59:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b5d:	8d 48 01             	lea    ecx,[eax+0x1]
c0017b60:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b64:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017b68:	0f b6 c0             	movzx  eax,al
c0017b6b:	c1 e0 08             	shl    eax,0x8
c0017b6e:	89 d1                	mov    ecx,edx
c0017b70:	09 c1                	or     ecx,eax
c0017b72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b76:	8d 50 02             	lea    edx,[eax+0x2]
c0017b79:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b7d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b81:	0f b6 c0             	movzx  eax,al
c0017b84:	c1 e0 10             	shl    eax,0x10
c0017b87:	09 c1                	or     ecx,eax
c0017b89:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b8d:	8d 50 03             	lea    edx,[eax+0x3]
c0017b90:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b94:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b98:	0f b6 c0             	movzx  eax,al
c0017b9b:	c1 e0 18             	shl    eax,0x18
c0017b9e:	09 c1                	or     ecx,eax
c0017ba0:	89 ca                	mov    edx,ecx
c0017ba2:	a0 60 ed 02 c0       	mov    al,ds:0xc002ed60
c0017ba7:	0f b6 c0             	movzx  eax,al
c0017baa:	89 14 85 a0 ed 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1260],edx
c0017bb1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017bb6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bbe:	01 d0                	add    eax,edx
c0017bc0:	83 c0 2c             	add    eax,0x2c
c0017bc3:	8a 00                	mov    al,BYTE PTR [eax]
c0017bc5:	0f b6 d0             	movzx  edx,al
c0017bc8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bcc:	8d 48 01             	lea    ecx,[eax+0x1]
c0017bcf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bd3:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017bd7:	0f b6 c0             	movzx  eax,al
c0017bda:	c1 e0 08             	shl    eax,0x8
c0017bdd:	89 d1                	mov    ecx,edx
c0017bdf:	09 c1                	or     ecx,eax
c0017be1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017be5:	8d 50 02             	lea    edx,[eax+0x2]
c0017be8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bec:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017bf0:	0f b6 c0             	movzx  eax,al
c0017bf3:	c1 e0 10             	shl    eax,0x10
c0017bf6:	09 c1                	or     ecx,eax
c0017bf8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bfc:	8d 50 03             	lea    edx,[eax+0x3]
c0017bff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c03:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017c07:	0f b6 c0             	movzx  eax,al
c0017c0a:	c1 e0 18             	shl    eax,0x18
c0017c0d:	09 c1                	or     ecx,eax
c0017c0f:	89 ca                	mov    edx,ecx
c0017c11:	a0 60 ed 02 c0       	mov    al,ds:0xc002ed60
c0017c16:	0f b6 c0             	movzx  eax,al
c0017c19:	89 14 85 20 ee 02 c0 	mov    DWORD PTR [eax*4-0x3ffd11e0],edx
c0017c20:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017c25:	a0 60 ed 02 c0       	mov    al,ds:0xc002ed60
c0017c2a:	40                   	inc    eax
c0017c2b:	a2 60 ed 02 c0       	mov    ds:0xc002ed60,al
c0017c30:	e9 a2 01 00 00       	jmp    c0017dd7 <scanMADT()+0x490>
c0017c35:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017c3a:	0f 85 e9 00 00 00    	jne    c0017d29 <scanMADT()+0x3e2>
c0017c40:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c44:	8d 50 01             	lea    edx,[eax+0x1]
c0017c47:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c4b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c4f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017c53:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017c57:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c5b:	8d 50 01             	lea    edx,[eax+0x1]
c0017c5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c62:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c66:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017c6a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017c6e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c76:	01 d0                	add    eax,edx
c0017c78:	83 c0 2c             	add    eax,0x2c
c0017c7b:	8a 00                	mov    al,BYTE PTR [eax]
c0017c7d:	0f b6 d0             	movzx  edx,al
c0017c80:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c84:	8d 48 01             	lea    ecx,[eax+0x1]
c0017c87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c8b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017c8f:	0f b6 c0             	movzx  eax,al
c0017c92:	c1 e0 08             	shl    eax,0x8
c0017c95:	89 d1                	mov    ecx,edx
c0017c97:	09 c1                	or     ecx,eax
c0017c99:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c9d:	8d 50 02             	lea    edx,[eax+0x2]
c0017ca0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ca4:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ca8:	0f b6 c0             	movzx  eax,al
c0017cab:	c1 e0 10             	shl    eax,0x10
c0017cae:	09 c1                	or     ecx,eax
c0017cb0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cb4:	8d 50 03             	lea    edx,[eax+0x3]
c0017cb7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cbb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017cbf:	0f b6 c0             	movzx  eax,al
c0017cc2:	c1 e0 18             	shl    eax,0x18
c0017cc5:	09 c8                	or     eax,ecx
c0017cc7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017ccb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017cd0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cd4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cd8:	01 d0                	add    eax,edx
c0017cda:	83 c0 2c             	add    eax,0x2c
c0017cdd:	8a 00                	mov    al,BYTE PTR [eax]
c0017cdf:	0f b6 c0             	movzx  eax,al
c0017ce2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017ce6:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017ce9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ced:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017cf1:	0f b6 d2             	movzx  edx,dl
c0017cf4:	c1 e2 08             	shl    edx,0x8
c0017cf7:	09 d0                	or     eax,edx
c0017cf9:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017cfe:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017d03:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017d08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017d0c:	88 90 60 d6 02 c0    	mov    BYTE PTR [eax-0x3ffd29a0],dl
c0017d12:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017d17:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017d1c:	66 89 84 12 40 ed 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd12c0],ax
c0017d24:	e9 ae 00 00 00       	jmp    c0017dd7 <scanMADT()+0x490>
c0017d29:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017d2e:	0f 85 97 00 00 00    	jne    c0017dcb <scanMADT()+0x484>
c0017d34:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d38:	8d 50 01             	lea    edx,[eax+0x1]
c0017d3b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d3f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d43:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017d47:	0f b6 c0             	movzx  eax,al
c0017d4a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017d4e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d52:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d56:	01 d0                	add    eax,edx
c0017d58:	83 c0 2c             	add    eax,0x2c
c0017d5b:	8a 00                	mov    al,BYTE PTR [eax]
c0017d5d:	0f b6 d0             	movzx  edx,al
c0017d60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d64:	8d 48 01             	lea    ecx,[eax+0x1]
c0017d67:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d6b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017d6f:	0f b6 c0             	movzx  eax,al
c0017d72:	c1 e0 08             	shl    eax,0x8
c0017d75:	09 d0                	or     eax,edx
c0017d77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017d7b:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017d80:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d84:	8d 50 01             	lea    edx,[eax+0x1]
c0017d87:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d8b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d8f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017d93:	0f b6 c0             	movzx  eax,al
c0017d96:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d9e:	c1 e0 08             	shl    eax,0x8
c0017da1:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017da5:	89 c1                	mov    ecx,eax
c0017da7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017dab:	c1 e0 18             	shl    eax,0x18
c0017dae:	89 c3                	mov    ebx,eax
c0017db0:	a1 b0 ec 02 c0       	mov    eax,ds:0xc002ecb0
c0017db5:	8d 50 01             	lea    edx,[eax+0x1]
c0017db8:	89 15 b0 ec 02 c0    	mov    DWORD PTR ds:0xc002ecb0,edx
c0017dbe:	09 d9                	or     ecx,ebx
c0017dc0:	89 ca                	mov    edx,ecx
c0017dc2:	89 14 85 c0 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1340],edx
c0017dc9:	eb 0c                	jmp    c0017dd7 <scanMADT()+0x490>
c0017dcb:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017dd0:	75 05                	jne    c0017dd7 <scanMADT()+0x490>
c0017dd2:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017dd7:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017ddc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017de0:	01 d0                	add    eax,edx
c0017de2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017de6:	e9 6d fc ff ff       	jmp    c0017a58 <scanMADT()+0x111>
c0017deb:	90                   	nop
c0017dec:	eb 01                	jmp    c0017def <scanMADT()+0x4a8>
c0017dee:	90                   	nop
c0017def:	83 c4 38             	add    esp,0x38
c0017df2:	5b                   	pop    ebx
c0017df3:	c3                   	ret    

c0017df4 <ACPI::ACPI()>:
c0017df4:	83 ec 0c             	sub    esp,0xc
c0017df7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017dfb:	83 ec 08             	sub    esp,0x8
c0017dfe:	68 b4 ba 02 c0       	push   0xc002bab4
c0017e03:	50                   	push   eax
c0017e04:	e8 e5 c0 ff ff       	call   c0013eee <Device::Device(char const*)>
c0017e09:	83 c4 10             	add    esp,0x10
c0017e0c:	ba 10 bc 02 c0       	mov    edx,0xc002bc10
c0017e11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e15:	89 10                	mov    DWORD PTR [eax],edx
c0017e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e1b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017e22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e26:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e34:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017e3e:	e8 04 fb ff ff       	call   c0017947 <scanMADT()>
c0017e43:	90                   	nop
c0017e44:	83 c4 0c             	add    esp,0xc
c0017e47:	c3                   	ret    

c0017e48 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017e48:	83 ec 2c             	sub    esp,0x2c
c0017e4b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017e4f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017e53:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017e57:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017e5b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017e60:	88 d0                	mov    al,dl
c0017e62:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017e66:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017e6b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017e73:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e77:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017e7d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017e81:	0f 8d 97 00 00 00    	jge    c0017f1e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017e87:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e8b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e8f:	83 c2 2a             	add    edx,0x2a
c0017e92:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017e96:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017e9b:	75 78                	jne    c0017f15 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017e9d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ea1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ea5:	83 c2 2a             	add    edx,0x2a
c0017ea8:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017eac:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017eb0:	75 63                	jne    c0017f15 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017eb2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017eb7:	74 3a                	je     c0017ef3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017eb9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ebd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ec1:	83 c2 2a             	add    edx,0x2a
c0017ec4:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017ec8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ecc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ecf:	39 c2                	cmp    edx,eax
c0017ed1:	74 10                	je     c0017ee3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017ed3:	83 ec 0c             	sub    esp,0xc
c0017ed6:	68 74 b9 02 c0       	push   0xc002b974
c0017edb:	e8 3f 23 00 00       	call   c001a21f <Krnl::panic(char const*)>
c0017ee0:	83 c4 10             	add    esp,0x10
c0017ee3:	83 ec 0c             	sub    esp,0xc
c0017ee6:	68 b9 ba 02 c0       	push   0xc002bab9
c0017eeb:	e8 2f 23 00 00       	call   c001a21f <Krnl::panic(char const*)>
c0017ef0:	83 c4 10             	add    esp,0x10
c0017ef3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017ef7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017efb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017eff:	83 c2 2a             	add    edx,0x2a
c0017f02:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017f06:	8b 02                	mov    eax,DWORD PTR [edx]
c0017f08:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017f0b:	89 01                	mov    DWORD PTR [ecx],eax
c0017f0d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017f10:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017f15:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017f19:	e9 55 ff ff ff       	jmp    c0017e73 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017f1e:	90                   	nop
c0017f1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f23:	83 c4 2c             	add    esp,0x2c
c0017f26:	c2 04 00             	ret    0x4
c0017f29:	90                   	nop

c0017f2a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017f2a:	83 ec 1c             	sub    esp,0x1c
c0017f2d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f31:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017f35:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017f39:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017f3e:	88 c8                	mov    al,cl
c0017f40:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017f44:	88 d0                	mov    al,dl
c0017f46:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017f4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f4e:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017f54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f58:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017f5b:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017f5f:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017f63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f67:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017f6d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017f71:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017f74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f78:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017f7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f81:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017f87:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017f8b:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f92:	83 c2 2a             	add    edx,0x2a
c0017f95:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017f99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f9d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017fa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fa7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017faa:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017fae:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017fb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fb6:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017fbc:	8d 50 01             	lea    edx,[eax+0x1]
c0017fbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fc3:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fcd:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017fd3:	3d 00 02 00 00       	cmp    eax,0x200
c0017fd8:	75 10                	jne    c0017fea <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017fda:	83 ec 0c             	sub    esp,0xc
c0017fdd:	68 c8 ba 02 c0       	push   0xc002bac8
c0017fe2:	e8 38 22 00 00       	call   c001a21f <Krnl::panic(char const*)>
c0017fe7:	83 c4 10             	add    esp,0x10
c0017fea:	90                   	nop
c0017feb:	83 c4 1c             	add    esp,0x1c
c0017fee:	c3                   	ret    
c0017fef:	90                   	nop

c0017ff0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017ff0:	b8 00 00 00 00       	mov    eax,0x0
c0017ff5:	c3                   	ret    

c0017ff6 <ACPI::detectPCI()>:
c0017ff6:	53                   	push   ebx
c0017ff7:	83 ec 28             	sub    esp,0x28
c0017ffa:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017fff:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0018004:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0018009:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001800f:	83 e0 04             	and    eax,0x4
c0018012:	84 c0                	test   al,al
c0018014:	74 2b                	je     c0018041 <ACPI::detectPCI()+0x4b>
c0018016:	a1 a8 ec 02 c0       	mov    eax,ds:0xc002eca8
c001801b:	83 ec 08             	sub    esp,0x8
c001801e:	68 e5 ba 02 c0       	push   0xc002bae5
c0018023:	50                   	push   eax
c0018024:	e8 ac f8 ff ff       	call   c00178d5 <findDataTable(unsigned char*, char*)>
c0018029:	83 c4 10             	add    esp,0x10
c001802c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018030:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0018035:	74 0a                	je     c0018041 <ACPI::detectPCI()+0x4b>
c0018037:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001803c:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0018041:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0018049:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001804d:	8a 00                	mov    al,BYTE PTR [eax]
c001804f:	3c 01                	cmp    al,0x1
c0018051:	75 0c                	jne    c001805f <ACPI::detectPCI()+0x69>
c0018053:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018058:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001805d:	eb 26                	jmp    c0018085 <ACPI::detectPCI()+0x8f>
c001805f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018063:	8a 00                	mov    al,BYTE PTR [eax]
c0018065:	3c 02                	cmp    al,0x2
c0018067:	75 1c                	jne    c0018085 <ACPI::detectPCI()+0x8f>
c0018069:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001806e:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0018073:	74 10                	je     c0018085 <ACPI::detectPCI()+0x8f>
c0018075:	83 ec 0c             	sub    esp,0xc
c0018078:	68 a4 b9 02 c0       	push   0xc002b9a4
c001807d:	e8 9d 21 00 00       	call   c001a21f <Krnl::panic(char const*)>
c0018082:	83 c4 10             	add    esp,0x10
c0018085:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018089:	83 f0 01             	xor    eax,0x1
c001808c:	84 c0                	test   al,al
c001808e:	74 3f                	je     c00180cf <ACPI::detectPCI()+0xd9>
c0018090:	e8 bb 80 fe ff       	call   c0000150 <manualPCIProbe>
c0018095:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018099:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001809e:	75 0c                	jne    c00180ac <ACPI::detectPCI()+0xb6>
c00180a0:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00180a5:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c00180aa:	eb 23                	jmp    c00180cf <ACPI::detectPCI()+0xd9>
c00180ac:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c00180b1:	75 1c                	jne    c00180cf <ACPI::detectPCI()+0xd9>
c00180b3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00180b8:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00180bd:	74 10                	je     c00180cf <ACPI::detectPCI()+0xd9>
c00180bf:	83 ec 0c             	sub    esp,0xc
c00180c2:	68 a4 b9 02 c0       	push   0xc002b9a4
c00180c7:	e8 53 21 00 00       	call   c001a21f <Krnl::panic(char const*)>
c00180cc:	83 c4 10             	add    esp,0x10
c00180cf:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00180d4:	74 7e                	je     c0018154 <ACPI::detectPCI()+0x15e>
c00180d6:	83 ec 0c             	sub    esp,0xc
c00180d9:	68 ea ba 02 c0       	push   0xc002baea
c00180de:	e8 d0 77 ff ff       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c00180e3:	83 c4 10             	add    esp,0x10
c00180e6:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c00180ee:	83 ec 0c             	sub    esp,0xc
c00180f1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00180f5:	e8 5f 77 ff ff       	call   c000f859 <malloc>
c00180fa:	83 c4 10             	add    esp,0x10
c00180fd:	89 c3                	mov    ebx,eax
c00180ff:	83 ec 0c             	sub    esp,0xc
c0018102:	53                   	push   ebx
c0018103:	e8 18 a7 00 00       	call   c0022820 <PCI::PCI()>
c0018108:	83 c4 10             	add    esp,0x10
c001810b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001810f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018113:	83 ec 08             	sub    esp,0x8
c0018116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001811a:	50                   	push   eax
c001811b:	e8 ca bb ff ff       	call   c0013cea <Device::addChild(Device*)>
c0018120:	83 c4 10             	add    esp,0x10
c0018123:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018127:	8b 00                	mov    eax,DWORD PTR [eax]
c0018129:	83 c0 08             	add    eax,0x8
c001812c:	8b 00                	mov    eax,DWORD PTR [eax]
c001812e:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0018133:	74 07                	je     c001813c <ACPI::detectPCI()+0x146>
c0018135:	ba 01 00 00 00       	mov    edx,0x1
c001813a:	eb 05                	jmp    c0018141 <ACPI::detectPCI()+0x14b>
c001813c:	ba 02 00 00 00       	mov    edx,0x2
c0018141:	6a 00                	push   0x0
c0018143:	6a 00                	push   0x0
c0018145:	52                   	push   edx
c0018146:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001814a:	ff d0                	call   eax
c001814c:	83 c4 10             	add    esp,0x10
c001814f:	e9 9e 00 00 00       	jmp    c00181f2 <ACPI::detectPCI()+0x1fc>
c0018154:	83 ec 0c             	sub    esp,0xc
c0018157:	68 02 bb 02 c0       	push   0xc002bb02
c001815c:	e8 50 a7 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0018161:	83 c4 10             	add    esp,0x10
c0018164:	83 ec 0c             	sub    esp,0xc
c0018167:	68 0d bb 02 c0       	push   0xc002bb0d
c001816c:	e8 42 77 ff ff       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c0018171:	83 c4 10             	add    esp,0x10
c0018174:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c001817b:	83 ec 0c             	sub    esp,0xc
c001817e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018182:	e8 d2 76 ff ff       	call   c000f859 <malloc>
c0018187:	83 c4 10             	add    esp,0x10
c001818a:	89 c3                	mov    ebx,eax
c001818c:	83 ec 0c             	sub    esp,0xc
c001818f:	53                   	push   ebx
c0018190:	e8 f5 b1 00 00       	call   c002338a <IDE::IDE()>
c0018195:	83 c4 10             	add    esp,0x10
c0018198:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001819c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00181a0:	83 ec 08             	sub    esp,0x8
c00181a3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00181a7:	50                   	push   eax
c00181a8:	e8 3d bb ff ff       	call   c0013cea <Device::addChild(Device*)>
c00181ad:	83 c4 10             	add    esp,0x10
c00181b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00181b4:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c00181be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00181c2:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c00181cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00181cf:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c00181d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00181dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00181de:	83 c0 08             	add    eax,0x8
c00181e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00181e3:	6a 00                	push   0x0
c00181e5:	6a 00                	push   0x0
c00181e7:	6a 00                	push   0x0
c00181e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00181ed:	ff d0                	call   eax
c00181ef:	83 c4 10             	add    esp,0x10
c00181f2:	90                   	nop
c00181f3:	83 c4 28             	add    esp,0x28
c00181f6:	5b                   	pop    ebx
c00181f7:	c3                   	ret    

c00181f8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00181f8:	83 ec 1c             	sub    esp,0x1c
c00181fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00181ff:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018202:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018206:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c001820b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018210:	83 ec 08             	sub    esp,0x8
c0018213:	52                   	push   edx
c0018214:	50                   	push   eax
c0018215:	e8 d8 6b ff ff       	call   c000edf2 <Computer::readCMOS(unsigned char)>
c001821a:	83 c4 10             	add    esp,0x10
c001821d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018221:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0018226:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001822b:	83 ec 04             	sub    esp,0x4
c001822e:	6a 01                	push   0x1
c0018230:	52                   	push   edx
c0018231:	50                   	push   eax
c0018232:	e8 6b 6d ff ff       	call   c000efa2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018237:	83 c4 10             	add    esp,0x10
c001823a:	90                   	nop
c001823b:	83 c4 1c             	add    esp,0x1c
c001823e:	c3                   	ret    
c001823f:	90                   	nop

c0018240 <ACPI::sleep()>:
c0018240:	83 ec 0c             	sub    esp,0xc
c0018243:	a1 80 ea 02 c0       	mov    eax,ds:0xc002ea80
c0018248:	85 c0                	test   eax,eax
c001824a:	74 07                	je     c0018253 <ACPI::sleep()+0x13>
c001824c:	a1 80 ea 02 c0       	mov    eax,ds:0xc002ea80
c0018251:	ff d0                	call   eax
c0018253:	90                   	nop
c0018254:	83 c4 0c             	add    esp,0xc
c0018257:	c3                   	ret    

c0018258 <ACPI::open(int, int, void*)>:
c0018258:	57                   	push   edi
c0018259:	56                   	push   esi
c001825a:	53                   	push   ebx
c001825b:	81 ec 60 01 00 00    	sub    esp,0x160
c0018261:	83 ec 0c             	sub    esp,0xc
c0018264:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c001826b:	e8 86 fd ff ff       	call   c0017ff6 <ACPI::detectPCI()>
c0018270:	83 c4 10             	add    esp,0x10
c0018273:	83 ec 0c             	sub    esp,0xc
c0018276:	68 cc b9 02 c0       	push   0xc002b9cc
c001827b:	e8 33 76 ff ff       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c0018280:	83 c4 10             	add    esp,0x10
c0018283:	83 ec 0c             	sub    esp,0xc
c0018286:	68 22 bb 02 c0       	push   0xc002bb22
c001828b:	e8 e5 46 00 00       	call   c001c975 <Thr::loadKernelSymbolTable(char const*)>
c0018290:	83 c4 10             	add    esp,0x10
c0018293:	83 ec 0c             	sub    esp,0xc
c0018296:	68 40 bb 02 c0       	push   0xc002bb40
c001829b:	e8 13 76 ff ff       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c00182a0:	83 c4 10             	add    esp,0x10
c00182a3:	83 ec 04             	sub    esp,0x4
c00182a6:	6a 0c                	push   0xc
c00182a8:	68 5b bb 02 c0       	push   0xc002bb5b
c00182ad:	68 6c bb 02 c0       	push   0xc002bb6c
c00182b2:	e8 24 2d 00 00       	call   c001afdb <Reg::readIntWithDefault(char*, char*, int)>
c00182b7:	83 c4 10             	add    esp,0x10
c00182ba:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c00182c1:	83 ec 0c             	sub    esp,0xc
c00182c4:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c00182cb:	e8 19 94 ff ff       	call   c00116e9 <Virt::setupPageSwapping(int)>
c00182d0:	83 c4 10             	add    esp,0x10
c00182d3:	83 ec 0c             	sub    esp,0xc
c00182d6:	68 6c a3 02 c0       	push   0xc002a36c
c00182db:	e8 d3 75 ff ff       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c00182e0:	83 c4 10             	add    esp,0x10
c00182e3:	8b 1d 08 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e408
c00182e9:	83 ec 08             	sub    esp,0x8
c00182ec:	6a 01                	push   0x1
c00182ee:	68 73 bb 02 c0       	push   0xc002bb73
c00182f3:	e8 f4 50 00 00       	call   c001d3ec <Thr::loadDLL(char const*, bool)>
c00182f8:	83 c4 10             	add    esp,0x10
c00182fb:	83 ec 08             	sub    esp,0x8
c00182fe:	53                   	push   ebx
c00182ff:	50                   	push   eax
c0018300:	e8 18 53 00 00       	call   c001d61d <Thr::executeDLL(unsigned long, void*)>
c0018305:	83 c4 10             	add    esp,0x10
c0018308:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c001830f:	83 ec 08             	sub    esp,0x8
c0018312:	6a 12                	push   0x12
c0018314:	50                   	push   eax
c0018315:	e8 54 bd ff ff       	call   c001406e <getDevicesOfType(DeviceType)>
c001831a:	83 c4 0c             	add    esp,0xc
c001831d:	83 ec 0c             	sub    esp,0xc
c0018320:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018327:	50                   	push   eax
c0018328:	e8 77 0b 01 00       	call   c0028ea4 <LinkedList<Device>::isEmpty()>
c001832d:	83 c4 10             	add    esp,0x10
c0018330:	83 f0 01             	xor    eax,0x1
c0018333:	84 c0                	test   al,al
c0018335:	0f 84 43 01 00 00    	je     c001847e <ACPI::open(int, int, void*)+0x226>
c001833b:	83 ec 0c             	sub    esp,0xc
c001833e:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018345:	50                   	push   eax
c0018346:	e8 75 0b 01 00       	call   c0028ec0 <LinkedList<Device>::getFirstElement()>
c001834b:	83 c4 10             	add    esp,0x10
c001834e:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0018355:	83 ec 0c             	sub    esp,0xc
c0018358:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001835f:	50                   	push   eax
c0018360:	e8 63 0b 01 00       	call   c0028ec8 <LinkedList<Device>::removeFirst()>
c0018365:	83 c4 10             	add    esp,0x10
c0018368:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c001836f:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0018376:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c001837d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018381:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0018387:	ba 09 00 00 00       	mov    edx,0x9
c001838c:	fc                   	cld    
c001838d:	89 c7                	mov    edi,eax
c001838f:	89 de                	mov    esi,ebx
c0018391:	89 d1                	mov    ecx,edx
c0018393:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018395:	83 ec 08             	sub    esp,0x8
c0018398:	8d 44 24 38          	lea    eax,[esp+0x38]
c001839c:	50                   	push   eax
c001839d:	83 ec 24             	sub    esp,0x24
c00183a0:	89 e0                	mov    eax,esp
c00183a2:	89 c3                	mov    ebx,eax
c00183a4:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00183a8:	ba 09 00 00 00       	mov    edx,0x9
c00183ad:	89 df                	mov    edi,ebx
c00183af:	89 c6                	mov    esi,eax
c00183b1:	89 d1                	mov    ecx,edx
c00183b3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00183b5:	e8 44 a9 00 00       	call   c0022cfe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c00183ba:	83 c4 30             	add    esp,0x30
c00183bd:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c00183c4:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c00183cc:	0f 84 4b ff ff ff    	je     c001831d <ACPI::open(int, int, void*)+0xc5>
c00183d2:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c00183dd:	83 ec 0c             	sub    esp,0xc
c00183e0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00183e7:	e8 6d 74 ff ff       	call   c000f859 <malloc>
c00183ec:	83 c4 10             	add    esp,0x10
c00183ef:	89 c3                	mov    ebx,eax
c00183f1:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c00183f6:	83 ec 04             	sub    esp,0x4
c00183f9:	50                   	push   eax
c00183fa:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018401:	53                   	push   ebx
c0018402:	e8 09 aa ff ff       	call   c0012e10 <File::File(char const*, Process*)>
c0018407:	83 c4 10             	add    esp,0x10
c001840a:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0018411:	83 ec 0c             	sub    esp,0xc
c0018414:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001841b:	e8 c2 ac ff ff       	call   c00130e2 <File::exists()>
c0018420:	83 c4 10             	add    esp,0x10
c0018423:	84 c0                	test   al,al
c0018425:	74 27                	je     c001844e <ACPI::open(int, int, void*)+0x1f6>
c0018427:	83 ec 08             	sub    esp,0x8
c001842a:	6a 01                	push   0x1
c001842c:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018433:	e8 b4 4f 00 00       	call   c001d3ec <Thr::loadDLL(char const*, bool)>
c0018438:	83 c4 10             	add    esp,0x10
c001843b:	83 ec 08             	sub    esp,0x8
c001843e:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018445:	50                   	push   eax
c0018446:	e8 d2 51 00 00       	call   c001d61d <Thr::executeDLL(unsigned long, void*)>
c001844b:	83 c4 10             	add    esp,0x10
c001844e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0018456:	0f 84 c1 fe ff ff    	je     c001831d <ACPI::open(int, int, void*)+0xc5>
c001845c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0018463:	8b 00                	mov    eax,DWORD PTR [eax]
c0018465:	83 c0 08             	add    eax,0x8
c0018468:	8b 00                	mov    eax,DWORD PTR [eax]
c001846a:	83 ec 0c             	sub    esp,0xc
c001846d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018474:	ff d0                	call   eax
c0018476:	83 c4 10             	add    esp,0x10
c0018479:	e9 9f fe ff ff       	jmp    c001831d <ACPI::open(int, int, void*)+0xc5>
c001847e:	83 ec 0c             	sub    esp,0xc
c0018481:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018488:	50                   	push   eax
c0018489:	e8 14 0a 01 00       	call   c0028ea2 <LinkedList<Device>::~LinkedList()>
c001848e:	83 c4 10             	add    esp,0x10
c0018491:	8b 1d 08 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e408
c0018497:	83 ec 08             	sub    esp,0x8
c001849a:	6a 01                	push   0x1
c001849c:	68 8e bb 02 c0       	push   0xc002bb8e
c00184a1:	e8 46 4f 00 00       	call   c001d3ec <Thr::loadDLL(char const*, bool)>
c00184a6:	83 c4 10             	add    esp,0x10
c00184a9:	83 ec 08             	sub    esp,0x8
c00184ac:	53                   	push   ebx
c00184ad:	50                   	push   eax
c00184ae:	e8 6a 51 00 00       	call   c001d61d <Thr::executeDLL(unsigned long, void*)>
c00184b3:	83 c4 10             	add    esp,0x10
c00184b6:	8b 1d 08 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e408
c00184bc:	83 ec 08             	sub    esp,0x8
c00184bf:	6a 01                	push   0x1
c00184c1:	68 ab bb 02 c0       	push   0xc002bbab
c00184c6:	e8 21 4f 00 00       	call   c001d3ec <Thr::loadDLL(char const*, bool)>
c00184cb:	83 c4 10             	add    esp,0x10
c00184ce:	83 ec 08             	sub    esp,0x8
c00184d1:	53                   	push   ebx
c00184d2:	50                   	push   eax
c00184d3:	e8 45 51 00 00       	call   c001d61d <Thr::executeDLL(unsigned long, void*)>
c00184d8:	83 c4 10             	add    esp,0x10
c00184db:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00184e0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00184e6:	83 e0 04             	and    eax,0x4
c00184e9:	84 c0                	test   al,al
c00184eb:	0f 84 0d 01 00 00    	je     c00185fe <ACPI::open(int, int, void*)+0x3a6>
c00184f1:	83 ec 0c             	sub    esp,0xc
c00184f4:	68 c8 bb 02 c0       	push   0xc002bbc8
c00184f9:	e8 b5 73 ff ff       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c00184fe:	83 c4 10             	add    esp,0x10
c0018501:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001850c:	83 ec 0c             	sub    esp,0xc
c001850f:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0018516:	e8 3e 73 ff ff       	call   c000f859 <malloc>
c001851b:	83 c4 10             	add    esp,0x10
c001851e:	89 c3                	mov    ebx,eax
c0018520:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c0018525:	83 ec 04             	sub    esp,0x4
c0018528:	50                   	push   eax
c0018529:	68 e5 bb 02 c0       	push   0xc002bbe5
c001852e:	53                   	push   ebx
c001852f:	e8 dc a8 ff ff       	call   c0012e10 <File::File(char const*, Process*)>
c0018534:	83 c4 10             	add    esp,0x10
c0018537:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c001853e:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018546:	74 1a                	je     c0018562 <ACPI::open(int, int, void*)+0x30a>
c0018548:	83 ec 0c             	sub    esp,0xc
c001854b:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018552:	e8 8b ab ff ff       	call   c00130e2 <File::exists()>
c0018557:	83 c4 10             	add    esp,0x10
c001855a:	84 c0                	test   al,al
c001855c:	74 04                	je     c0018562 <ACPI::open(int, int, void*)+0x30a>
c001855e:	b0 01                	mov    al,0x1
c0018560:	eb 02                	jmp    c0018564 <ACPI::open(int, int, void*)+0x30c>
c0018562:	b0 00                	mov    al,0x0
c0018564:	84 c0                	test   al,al
c0018566:	74 25                	je     c001858d <ACPI::open(int, int, void*)+0x335>
c0018568:	83 ec 08             	sub    esp,0x8
c001856b:	6a 01                	push   0x1
c001856d:	68 e5 bb 02 c0       	push   0xc002bbe5
c0018572:	e8 75 4e 00 00       	call   c001d3ec <Thr::loadDLL(char const*, bool)>
c0018577:	83 c4 10             	add    esp,0x10
c001857a:	83 ec 08             	sub    esp,0x8
c001857d:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c0018584:	50                   	push   eax
c0018585:	e8 93 50 00 00       	call   c001d61d <Thr::executeDLL(unsigned long, void*)>
c001858a:	83 c4 10             	add    esp,0x10
c001858d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018595:	74 27                	je     c00185be <ACPI::open(int, int, void*)+0x366>
c0018597:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001859f:	74 1d                	je     c00185be <ACPI::open(int, int, void*)+0x366>
c00185a1:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c00185a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00185aa:	83 c0 08             	add    eax,0x8
c00185ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00185af:	83 ec 0c             	sub    esp,0xc
c00185b2:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00185b9:	ff d0                	call   eax
c00185bb:	83 c4 10             	add    esp,0x10
c00185be:	a1 a8 ec 02 c0       	mov    eax,ds:0xc002eca8
c00185c3:	83 ec 08             	sub    esp,0x8
c00185c6:	68 02 bc 02 c0       	push   0xc002bc02
c00185cb:	50                   	push   eax
c00185cc:	e8 04 f3 ff ff       	call   c00178d5 <findDataTable(unsigned char*, char*)>
c00185d1:	83 c4 10             	add    esp,0x10
c00185d4:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c00185db:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c00185e3:	74 19                	je     c00185fe <ACPI::open(int, int, void*)+0x3a6>
c00185e5:	83 ec 08             	sub    esp,0x8
c00185e8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00185ef:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c00185f6:	e8 fd fb ff ff       	call   c00181f8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00185fb:	83 c4 10             	add    esp,0x10
c00185fe:	b8 00 00 00 00       	mov    eax,0x0
c0018603:	81 c4 60 01 00 00    	add    esp,0x160
c0018609:	5b                   	pop    ebx
c001860a:	5e                   	pop    esi
c001860b:	5f                   	pop    edi
c001860c:	c3                   	ret    
c001860d:	90                   	nop

c001860e <CPU::close(int, int, void*)>:
c001860e:	31 c0                	xor    eax,eax
c0018610:	c3                   	ret    
c0018611:	90                   	nop

c0018612 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018612:	55                   	push   ebp
c0018613:	57                   	push   edi
c0018614:	56                   	push   esi
c0018615:	53                   	push   ebx
c0018616:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001861a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001861e:	89 ce                	mov    esi,ecx
c0018620:	89 d5                	mov    ebp,edx
c0018622:	80 f9 04             	cmp    cl,0x4
c0018625:	75 28                	jne    c001864f <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018627:	8d 42 f9             	lea    eax,[edx-0x7]
c001862a:	3c 03                	cmp    al,0x3
c001862c:	0f 86 63 01 00 00    	jbe    c0018795 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018632:	80 fa 03             	cmp    dl,0x3
c0018635:	0f 84 5a 01 00 00    	je     c0018795 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001863b:	8d 7a f2             	lea    edi,[edx-0xe]
c001863e:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018643:	89 fb                	mov    ebx,edi
c0018645:	80 fb 01             	cmp    bl,0x1
c0018648:	77 4e                	ja     c0018698 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c001864a:	e9 52 01 00 00       	jmp    c00187a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001864f:	80 f9 05             	cmp    cl,0x5
c0018652:	75 4d                	jne    c00186a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018654:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c0018659:	80 fa 03             	cmp    dl,0x3
c001865c:	0f 86 3f 01 00 00    	jbe    c00187a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018662:	8d 7a fa             	lea    edi,[edx-0x6]
c0018665:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c001866a:	89 fb                	mov    ebx,edi
c001866c:	80 fb 01             	cmp    bl,0x1
c001866f:	0f 86 2c 01 00 00    	jbe    c00187a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018675:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c001867a:	80 fa 08             	cmp    dl,0x8
c001867d:	0f 84 1e 01 00 00    	je     c00187a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018683:	89 d7                	mov    edi,edx
c0018685:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c001868a:	83 e7 fb             	and    edi,0xfffffffb
c001868d:	89 fb                	mov    ebx,edi
c001868f:	80 fb 09             	cmp    bl,0x9
c0018692:	0f 84 09 01 00 00    	je     c00187a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018698:	31 c0                	xor    eax,eax
c001869a:	89 eb                	mov    ebx,ebp
c001869c:	0f b6 fb             	movzx  edi,bl
c001869f:	eb 30                	jmp    c00186d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00186a1:	31 c0                	xor    eax,eax
c00186a3:	80 f9 06             	cmp    cl,0x6
c00186a6:	75 f2                	jne    c001869a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00186a8:	80 fa 0a             	cmp    dl,0xa
c00186ab:	77 ed                	ja     c001869a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00186ad:	bf de 05 00 00       	mov    edi,0x5de
c00186b2:	0f a3 d7             	bt     edi,edx
c00186b5:	73 e3                	jae    c001869a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00186b7:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c00186bc:	e9 e0 00 00 00       	jmp    c00187a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186c1:	39 c7                	cmp    edi,eax
c00186c3:	0f 84 d3 00 00 00    	je     c001879c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00186c9:	40                   	inc    eax
c00186ca:	3d d0 00 00 00       	cmp    eax,0xd0
c00186cf:	74 09                	je     c00186da <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00186d1:	89 f3                	mov    ebx,esi
c00186d3:	80 fb 0f             	cmp    bl,0xf
c00186d6:	75 f1                	jne    c00186c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00186d8:	eb e7                	jmp    c00186c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00186da:	80 f9 10             	cmp    cl,0x10
c00186dd:	75 14                	jne    c00186f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00186df:	8d 42 fc             	lea    eax,[edx-0x4]
c00186e2:	83 e0 fb             	and    eax,0xfffffffb
c00186e5:	3c 02                	cmp    al,0x2
c00186e7:	76 34                	jbe    c001871d <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00186e9:	b8 89 bd 02 c0       	mov    eax,0xc002bd89
c00186ee:	80 fa 02             	cmp    dl,0x2
c00186f1:	eb 24                	jmp    c0018717 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00186f3:	80 f9 11             	cmp    cl,0x11
c00186f6:	75 13                	jne    c001870b <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00186f8:	b8 89 bd 02 c0       	mov    eax,0xc002bd89
c00186fd:	80 fa 03             	cmp    dl,0x3
c0018700:	0f 85 9b 00 00 00    	jne    c00187a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018706:	e9 91 00 00 00       	jmp    c001879c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001870b:	80 f9 12             	cmp    cl,0x12
c001870e:	75 14                	jne    c0018724 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018710:	b8 89 bd 02 c0       	mov    eax,0xc002bd89
c0018715:	fe ca                	dec    dl
c0018717:	0f 85 84 00 00 00    	jne    c00187a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001871d:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c0018722:	eb 7d                	jmp    c00187a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018724:	80 f9 14             	cmp    cl,0x14
c0018727:	75 12                	jne    c001873b <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018729:	4a                   	dec    edx
c001872a:	b8 89 bd 02 c0       	mov    eax,0xc002bd89
c001872f:	80 fa 01             	cmp    dl,0x1
c0018732:	77 6d                	ja     c00187a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018734:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c0018739:	eb 66                	jmp    c00187a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001873b:	80 f9 15             	cmp    cl,0x15
c001873e:	75 31                	jne    c0018771 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018740:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c0018745:	80 fa 01             	cmp    dl,0x1
c0018748:	74 57                	je     c00187a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001874a:	b8 89 bd 02 c0       	mov    eax,0xc002bd89
c001874f:	80 fa 13             	cmp    dl,0x13
c0018752:	76 0c                	jbe    c0018760 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018754:	80 fa 30             	cmp    dl,0x30
c0018757:	75 48                	jne    c00187a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018759:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c001875e:	eb 41                	jmp    c00187a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018760:	b9 04 00 09 00       	mov    ecx,0x90004
c0018765:	0f a3 d1             	bt     ecx,edx
c0018768:	73 37                	jae    c00187a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001876a:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c001876f:	eb 30                	jmp    c00187a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018771:	b8 89 bd 02 c0       	mov    eax,0xc002bd89
c0018776:	80 f9 16             	cmp    cl,0x16
c0018779:	75 26                	jne    c00187a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001877b:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c0018780:	84 d2                	test   dl,dl
c0018782:	74 1d                	je     c00187a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018784:	b8 89 bd 02 c0       	mov    eax,0xc002bd89
c0018789:	80 fa 30             	cmp    dl,0x30
c001878c:	75 13                	jne    c00187a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001878e:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0018793:	eb 0c                	jmp    c00187a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018795:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c001879a:	eb 05                	jmp    c00187a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001879c:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c00187a1:	5b                   	pop    ebx
c00187a2:	5e                   	pop    esi
c00187a3:	5f                   	pop    edi
c00187a4:	5d                   	pop    ebp
c00187a5:	c3                   	ret    

c00187a6 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00187a6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00187aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00187ae:	80 f9 04             	cmp    cl,0x4
c00187b1:	75 6b                	jne    c001881e <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00187b3:	b8 80 d6 02 c0       	mov    eax,0xc002d680
c00187b8:	80 fa 01             	cmp    dl,0x1
c00187bb:	0f 86 92 02 00 00    	jbe    c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187c1:	b8 90 d6 02 c0       	mov    eax,0xc002d690
c00187c6:	80 fa 02             	cmp    dl,0x2
c00187c9:	0f 84 84 02 00 00    	je     c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187cf:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c00187d4:	80 fa 03             	cmp    dl,0x3
c00187d7:	0f 84 76 02 00 00    	je     c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187dd:	b8 b0 d6 02 c0       	mov    eax,0xc002d6b0
c00187e2:	80 fa 04             	cmp    dl,0x4
c00187e5:	0f 84 68 02 00 00    	je     c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187eb:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c00187f0:	80 fa 05             	cmp    dl,0x5
c00187f3:	0f 84 5a 02 00 00    	je     c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187f9:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c00187fe:	80 fa 07             	cmp    dl,0x7
c0018801:	0f 84 4c 02 00 00    	je     c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018807:	83 ea 08             	sub    edx,0x8
c001880a:	b8 89 bd 02 c0       	mov    eax,0xc002bd89
c001880f:	80 fa 01             	cmp    dl,0x1
c0018812:	0f 87 3b 02 00 00    	ja     c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018818:	b8 d0 d6 02 c0       	mov    eax,0xc002d6d0
c001881d:	c3                   	ret    
c001881e:	80 f9 05             	cmp    cl,0x5
c0018821:	75 45                	jne    c0018868 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018823:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018826:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c001882b:	80 f9 02             	cmp    cl,0x2
c001882e:	0f 86 1f 02 00 00    	jbe    c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018834:	80 fa 04             	cmp    dl,0x4
c0018837:	0f 84 f3 01 00 00    	je     c0018a30 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c001883d:	80 fa 07             	cmp    dl,0x7
c0018840:	0f 84 0d 02 00 00    	je     c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018846:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c001884b:	80 fa 08             	cmp    dl,0x8
c001884e:	0f 84 ff 01 00 00    	je     c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018854:	b8 89 bd 02 c0       	mov    eax,0xc002bd89
c0018859:	80 fa 09             	cmp    dl,0x9
c001885c:	0f 85 f1 01 00 00    	jne    c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018862:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0018867:	c3                   	ret    
c0018868:	80 f9 06             	cmp    cl,0x6
c001886b:	0f 85 85 01 00 00    	jne    c00189f6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018871:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c0018876:	80 fa 01             	cmp    dl,0x1
c0018879:	0f 84 d4 01 00 00    	je     c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001887f:	8d 42 fb             	lea    eax,[edx-0x5]
c0018882:	3c 01                	cmp    al,0x1
c0018884:	0f 86 ac 01 00 00    	jbe    c0018a36 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001888a:	80 fa 03             	cmp    dl,0x3
c001888d:	0f 84 a3 01 00 00    	je     c0018a36 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018893:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018896:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c001889b:	80 f9 01             	cmp    cl,0x1
c001889e:	0f 86 af 01 00 00    	jbe    c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188a4:	80 fa 09             	cmp    dl,0x9
c00188a7:	0f 84 8f 01 00 00    	je     c0018a3c <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00188ad:	8d 4a f6             	lea    ecx,[edx-0xa]
c00188b0:	80 f9 01             	cmp    cl,0x1
c00188b3:	0f 86 9a 01 00 00    	jbe    c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188b9:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c00188be:	80 fa 0d             	cmp    dl,0xd
c00188c1:	0f 84 8c 01 00 00    	je     c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188c7:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c00188cc:	80 fa 0e             	cmp    dl,0xe
c00188cf:	0f 84 7e 01 00 00    	je     c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188d5:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c00188da:	80 fa 0f             	cmp    dl,0xf
c00188dd:	0f 84 70 01 00 00    	je     c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188e3:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c00188e8:	80 fa 15             	cmp    dl,0x15
c00188eb:	0f 84 62 01 00 00    	je     c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188f1:	8d 4a ea             	lea    ecx,[edx-0x16]
c00188f4:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c00188f9:	80 f9 01             	cmp    cl,0x1
c00188fc:	0f 86 51 01 00 00    	jbe    c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018902:	80 fa 1a             	cmp    dl,0x1a
c0018905:	0f 84 37 01 00 00    	je     c0018a42 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c001890b:	80 fa 1c             	cmp    dl,0x1c
c001890e:	0f 84 34 01 00 00    	je     c0018a48 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018914:	80 fa 1d             	cmp    dl,0x1d
c0018917:	0f 84 36 01 00 00    	je     c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001891d:	b8 90 d7 02 c0       	mov    eax,0xc002d790
c0018922:	80 fa 25             	cmp    dl,0x25
c0018925:	0f 84 28 01 00 00    	je     c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001892b:	8d 4a da             	lea    ecx,[edx-0x26]
c001892e:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c0018933:	80 f9 01             	cmp    cl,0x1
c0018936:	0f 86 17 01 00 00    	jbe    c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001893c:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c0018941:	80 fa 2a             	cmp    dl,0x2a
c0018944:	0f 84 09 01 00 00    	je     c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001894a:	b8 90 d7 02 c0       	mov    eax,0xc002d790
c001894f:	80 fa 2c             	cmp    dl,0x2c
c0018952:	0f 84 fb 00 00 00    	je     c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018958:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c001895d:	80 fa 2d             	cmp    dl,0x2d
c0018960:	0f 84 ed 00 00 00    	je     c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018966:	b8 70 d7 02 c0       	mov    eax,0xc002d770
c001896b:	80 fa 2e             	cmp    dl,0x2e
c001896e:	0f 84 df 00 00 00    	je     c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018974:	b8 90 d7 02 c0       	mov    eax,0xc002d790
c0018979:	80 fa 2f             	cmp    dl,0x2f
c001897c:	0f 84 d1 00 00 00    	je     c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018982:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018985:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c001898a:	80 f9 01             	cmp    cl,0x1
c001898d:	0f 86 c0 00 00 00    	jbe    c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018993:	b8 b0 d7 02 c0       	mov    eax,0xc002d7b0
c0018998:	80 fa 37             	cmp    dl,0x37
c001899b:	0f 84 b2 00 00 00    	je     c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189a1:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c00189a6:	80 fa 3a             	cmp    dl,0x3a
c00189a9:	0f 84 a4 00 00 00    	je     c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189af:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c00189b4:	80 fa 3c             	cmp    dl,0x3c
c00189b7:	0f 84 96 00 00 00    	je     c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189bd:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c00189c2:	80 fa 3d             	cmp    dl,0x3d
c00189c5:	0f 84 88 00 00 00    	je     c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189cb:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c00189d0:	80 fa 3e             	cmp    dl,0x3e
c00189d3:	74 7e                	je     c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189d5:	8d 42 bb             	lea    eax,[edx-0x45]
c00189d8:	3c 01                	cmp    al,0x1
c00189da:	76 72                	jbe    c0018a4e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00189dc:	80 fa 3f             	cmp    dl,0x3f
c00189df:	74 6d                	je     c0018a4e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00189e1:	80 fa 4a             	cmp    dl,0x4a
c00189e4:	74 0a                	je     c00189f0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00189e6:	b8 89 bd 02 c0       	mov    eax,0xc002bd89
c00189eb:	80 fa 4d             	cmp    dl,0x4d
c00189ee:	75 63                	jne    c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189f0:	b8 b0 d7 02 c0       	mov    eax,0xc002d7b0
c00189f5:	c3                   	ret    
c00189f6:	b8 89 bd 02 c0       	mov    eax,0xc002bd89
c00189fb:	80 f9 0b             	cmp    cl,0xb
c00189fe:	75 0a                	jne    c0018a0a <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018a00:	fe ca                	dec    dl
c0018a02:	75 4f                	jne    c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a04:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c0018a09:	c3                   	ret    
c0018a0a:	80 f9 0f             	cmp    cl,0xf
c0018a0d:	75 44                	jne    c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a0f:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c0018a14:	80 fa 02             	cmp    dl,0x2
c0018a17:	76 3a                	jbe    c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a19:	8d 42 fd             	lea    eax,[edx-0x3]
c0018a1c:	3c 01                	cmp    al,0x1
c0018a1e:	76 0a                	jbe    c0018a2a <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018a20:	b8 89 bd 02 c0       	mov    eax,0xc002bd89
c0018a25:	80 fa 06             	cmp    dl,0x6
c0018a28:	75 29                	jne    c0018a53 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a2a:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c0018a2f:	c3                   	ret    
c0018a30:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c0018a35:	c3                   	ret    
c0018a36:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c0018a3b:	c3                   	ret    
c0018a3c:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c0018a41:	c3                   	ret    
c0018a42:	b8 70 d7 02 c0       	mov    eax,0xc002d770
c0018a47:	c3                   	ret    
c0018a48:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c0018a4d:	c3                   	ret    
c0018a4e:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c0018a53:	c3                   	ret    

c0018a54 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018a54:	60                   	pusha  
c0018a55:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018a59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018a61:	9c                   	pushf  
c0018a62:	fa                   	cli    
c0018a63:	0f 09                	wbinvd 
c0018a65:	0f 30                	wrmsr  
c0018a67:	9d                   	popf   
c0018a68:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018a6c:	89 02                	mov    DWORD PTR [edx],eax
c0018a6e:	61                   	popa   
c0018a6f:	c3                   	ret    

c0018a70 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018a70:	60                   	pusha  
c0018a71:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018a75:	9c                   	pushf  
c0018a76:	fa                   	cli    
c0018a77:	0f 09                	wbinvd 
c0018a79:	31 c0                	xor    eax,eax
c0018a7b:	31 d2                	xor    edx,edx
c0018a7d:	0f 32                	rdmsr  
c0018a7f:	9d                   	popf   
c0018a80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018a84:	89 02                	mov    DWORD PTR [edx],eax
c0018a86:	61                   	popa   
c0018a87:	c3                   	ret    

c0018a88 <CPU::AMD_K6_writeback(int, int, int)>:
c0018a88:	56                   	push   esi
c0018a89:	53                   	push   ebx
c0018a8a:	83 ec 10             	sub    esp,0x10
c0018a8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a91:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018a96:	75 5d                	jne    c0018af5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018a98:	83 f8 08             	cmp    eax,0x8
c0018a9b:	75 09                	jne    c0018aa6 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018a9d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018aa2:	7e 13                	jle    c0018ab7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018aa4:	eb 30                	jmp    c0018ad6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018aa6:	83 f8 06             	cmp    eax,0x6
c0018aa9:	7c 4a                	jl     c0018af5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018aab:	83 f8 07             	cmp    eax,0x7
c0018aae:	7e 07                	jle    c0018ab7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018ab0:	83 f8 09             	cmp    eax,0x9
c0018ab3:	74 21                	je     c0018ad6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018ab5:	eb 3e                	jmp    c0018af5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ab7:	89 e6                	mov    esi,esp
c0018ab9:	8b 1d 48 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e448
c0018abf:	56                   	push   esi
c0018ac0:	c1 eb 15             	shr    ebx,0x15
c0018ac3:	68 82 00 00 c0       	push   0xc0000082
c0018ac8:	83 e3 7e             	and    ebx,0x7e
c0018acb:	e8 a0 ff ff ff       	call   c0018a70 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018ad0:	56                   	push   esi
c0018ad1:	6a 00                	push   0x0
c0018ad3:	53                   	push   ebx
c0018ad4:	eb 12                	jmp    c0018ae8 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018ad6:	89 e3                	mov    ebx,esp
c0018ad8:	53                   	push   ebx
c0018ad9:	68 82 00 00 c0       	push   0xc0000082
c0018ade:	e8 8d ff ff ff       	call   c0018a70 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018ae3:	53                   	push   ebx
c0018ae4:	6a 00                	push   0x0
c0018ae6:	6a 00                	push   0x0
c0018ae8:	68 82 00 00 c0       	push   0xc0000082
c0018aed:	e8 62 ff ff ff       	call   c0018a54 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018af2:	83 c4 18             	add    esp,0x18
c0018af5:	83 c4 10             	add    esp,0x10
c0018af8:	5b                   	pop    ebx
c0018af9:	5e                   	pop    esi
c0018afa:	c3                   	ret    
c0018afb:	90                   	nop

c0018afc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018afc:	55                   	push   ebp
c0018afd:	57                   	push   edi
c0018afe:	56                   	push   esi
c0018aff:	53                   	push   ebx
c0018b00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b04:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018b08:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018b0c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018b10:	39 05 20 d9 02 c0    	cmp    DWORD PTR ds:0xc002d920,eax
c0018b16:	75 23                	jne    c0018b3b <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018b18:	a1 0c ef 02 c0       	mov    eax,ds:0xc002ef0c
c0018b1d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018b21:	89 06                	mov    DWORD PTR [esi],eax
c0018b23:	a1 08 ef 02 c0       	mov    eax,ds:0xc002ef08
c0018b28:	89 07                	mov    DWORD PTR [edi],eax
c0018b2a:	a1 04 ef 02 c0       	mov    eax,ds:0xc002ef04
c0018b2f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018b32:	a1 00 ef 02 c0       	mov    eax,ds:0xc002ef00
c0018b37:	89 02                	mov    DWORD PTR [edx],eax
c0018b39:	eb 3f                	jmp    c0018b7a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018b3b:	31 c9                	xor    ecx,ecx
c0018b3d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b41:	0f a2                	cpuid  
c0018b43:	89 06                	mov    DWORD PTR [esi],eax
c0018b45:	89 1f                	mov    DWORD PTR [edi],ebx
c0018b47:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018b4b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018b4e:	89 10                	mov    DWORD PTR [eax],edx
c0018b50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b54:	a3 20 d9 02 c0       	mov    ds:0xc002d920,eax
c0018b59:	8b 06                	mov    eax,DWORD PTR [esi]
c0018b5b:	a3 0c ef 02 c0       	mov    ds:0xc002ef0c,eax
c0018b60:	8b 07                	mov    eax,DWORD PTR [edi]
c0018b62:	a3 08 ef 02 c0       	mov    ds:0xc002ef08,eax
c0018b67:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018b6a:	a3 04 ef 02 c0       	mov    ds:0xc002ef04,eax
c0018b6f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018b73:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b75:	a3 00 ef 02 c0       	mov    ds:0xc002ef00,eax
c0018b7a:	5b                   	pop    ebx
c0018b7b:	5e                   	pop    esi
c0018b7c:	5f                   	pop    edi
c0018b7d:	5d                   	pop    ebp
c0018b7e:	c3                   	ret    
c0018b7f:	90                   	nop

c0018b80 <CPU::cpuidCheckEDX(unsigned int)>:
c0018b80:	83 ec 10             	sub    esp,0x10
c0018b83:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b87:	50                   	push   eax
c0018b88:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b8c:	50                   	push   eax
c0018b8d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b91:	50                   	push   eax
c0018b92:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b96:	50                   	push   eax
c0018b97:	6a 01                	push   0x1
c0018b99:	e8 5e ff ff ff       	call   c0018afc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018b9e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ba2:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018ba6:	0f 95 c0             	setne  al
c0018ba9:	83 c4 24             	add    esp,0x24
c0018bac:	c3                   	ret    
c0018bad:	90                   	nop

c0018bae <CPU::cpuidCheckECX(unsigned int)>:
c0018bae:	83 ec 10             	sub    esp,0x10
c0018bb1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bb5:	50                   	push   eax
c0018bb6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bba:	50                   	push   eax
c0018bbb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bbf:	50                   	push   eax
c0018bc0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bc4:	50                   	push   eax
c0018bc5:	6a 01                	push   0x1
c0018bc7:	e8 30 ff ff ff       	call   c0018afc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018bcc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018bd0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018bd4:	0f 95 c0             	setne  al
c0018bd7:	83 c4 24             	add    esp,0x24
c0018bda:	c3                   	ret    
c0018bdb:	90                   	nop

c0018bdc <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018bdc:	83 ec 10             	sub    esp,0x10
c0018bdf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018be3:	50                   	push   eax
c0018be4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018be8:	50                   	push   eax
c0018be9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bed:	50                   	push   eax
c0018bee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bf2:	50                   	push   eax
c0018bf3:	6a 07                	push   0x7
c0018bf5:	e8 02 ff ff ff       	call   c0018afc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018bfa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018bfe:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018c02:	0f 95 c0             	setne  al
c0018c05:	83 c4 24             	add    esp,0x24
c0018c08:	c3                   	ret    
c0018c09:	90                   	nop

c0018c0a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018c0a:	83 ec 10             	sub    esp,0x10
c0018c0d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c11:	50                   	push   eax
c0018c12:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c16:	50                   	push   eax
c0018c17:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c1b:	50                   	push   eax
c0018c1c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c20:	50                   	push   eax
c0018c21:	6a 07                	push   0x7
c0018c23:	e8 d4 fe ff ff       	call   c0018afc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c28:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c2c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018c30:	0f 95 c0             	setne  al
c0018c33:	83 c4 24             	add    esp,0x24
c0018c36:	c3                   	ret    
c0018c37:	90                   	nop

c0018c38 <CPU::CPU()>:
c0018c38:	83 ec 0c             	sub    esp,0xc
c0018c3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c3f:	83 ec 08             	sub    esp,0x8
c0018c42:	68 89 bd 02 c0       	push   0xc002bd89
c0018c47:	50                   	push   eax
c0018c48:	e8 a1 b2 ff ff       	call   c0013eee <Device::Device(char const*)>
c0018c4d:	83 c4 10             	add    esp,0x10
c0018c50:	ba ac bf 02 c0       	mov    edx,0xc002bfac
c0018c55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c59:	89 10                	mov    DWORD PTR [eax],edx
c0018c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c5f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018c69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c6d:	05 78 01 00 00       	add    eax,0x178
c0018c72:	83 ec 0c             	sub    esp,0xc
c0018c75:	50                   	push   eax
c0018c76:	e8 11 64 ff ff       	call   c000f08c <GDT::GDT()>
c0018c7b:	83 c4 10             	add    esp,0x10
c0018c7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c82:	05 7c 09 00 00       	add    eax,0x97c
c0018c87:	83 ec 0c             	sub    esp,0xc
c0018c8a:	50                   	push   eax
c0018c8b:	e8 4c 66 ff ff       	call   c000f2dc <IDT::IDT()>
c0018c90:	83 c4 10             	add    esp,0x10
c0018c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c97:	05 7c 11 00 00       	add    eax,0x117c
c0018c9c:	83 ec 0c             	sub    esp,0xc
c0018c9f:	50                   	push   eax
c0018ca0:	e8 81 81 ff ff       	call   c0010e26 <TSS::TSS()>
c0018ca5:	83 c4 10             	add    esp,0x10
c0018ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cac:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018cb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cb7:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018cc1:	90                   	nop
c0018cc2:	83 c4 0c             	add    esp,0xc
c0018cc5:	c3                   	ret    

c0018cc6 <CPU::displayFeatures()>:
c0018cc6:	c3                   	ret    
c0018cc7:	90                   	nop

c0018cc8 <CPU::detectFeatures()>:
c0018cc8:	55                   	push   ebp
c0018cc9:	57                   	push   edi
c0018cca:	56                   	push   esi
c0018ccb:	53                   	push   ebx
c0018ccc:	83 ec 50             	sub    esp,0x50
c0018ccf:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018cd3:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018cdd:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018ce4:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0018cea:	6a 0d                	push   0xd
c0018cec:	6a 00                	push   0x0
c0018cee:	55                   	push   ebp
c0018cef:	e8 5c 7a fe ff       	call   c0000750 <memset>
c0018cf4:	83 c4 10             	add    esp,0x10
c0018cf7:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0018cfc:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018d03:	0f 84 22 09 00 00    	je     c001962b <CPU::detectFeatures()+0x963>
c0018d09:	83 ec 0c             	sub    esp,0xc
c0018d0c:	89 ef                	mov    edi,ebp
c0018d0e:	6a 10                	push   0x10
c0018d10:	e8 6b fe ff ff       	call   c0018b80 <CPU::cpuidCheckEDX(unsigned int)>
c0018d15:	83 e0 01             	and    eax,0x1
c0018d18:	8d 14 00             	lea    edx,[eax+eax*1]
c0018d1b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d21:	83 e0 fd             	and    eax,0xfffffffd
c0018d24:	09 d0                	or     eax,edx
c0018d26:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d2c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018d33:	e8 48 fe ff ff       	call   c0018b80 <CPU::cpuidCheckEDX(unsigned int)>
c0018d38:	83 e0 01             	and    eax,0x1
c0018d3b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018d42:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d48:	83 e0 fb             	and    eax,0xfffffffb
c0018d4b:	09 d0                	or     eax,edx
c0018d4d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d53:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018d5a:	e8 21 fe ff ff       	call   c0018b80 <CPU::cpuidCheckEDX(unsigned int)>
c0018d5f:	83 e0 01             	and    eax,0x1
c0018d62:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018d69:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d6f:	83 e0 f7             	and    eax,0xfffffff7
c0018d72:	09 d0                	or     eax,edx
c0018d74:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d7a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018d81:	e8 fa fd ff ff       	call   c0018b80 <CPU::cpuidCheckEDX(unsigned int)>
c0018d86:	83 e0 01             	and    eax,0x1
c0018d89:	c1 e0 04             	shl    eax,0x4
c0018d8c:	88 c2                	mov    dl,al
c0018d8e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d94:	83 e0 ef             	and    eax,0xffffffef
c0018d97:	09 d0                	or     eax,edx
c0018d99:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d9f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018da6:	e8 d5 fd ff ff       	call   c0018b80 <CPU::cpuidCheckEDX(unsigned int)>
c0018dab:	83 e0 01             	and    eax,0x1
c0018dae:	c1 e0 05             	shl    eax,0x5
c0018db1:	88 c2                	mov    dl,al
c0018db3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018db9:	83 e0 df             	and    eax,0xffffffdf
c0018dbc:	09 d0                	or     eax,edx
c0018dbe:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018dc4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018dcb:	e8 b0 fd ff ff       	call   c0018b80 <CPU::cpuidCheckEDX(unsigned int)>
c0018dd0:	83 e0 01             	and    eax,0x1
c0018dd3:	8d 14 00             	lea    edx,[eax+eax*1]
c0018dd6:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018ddc:	83 e0 fd             	and    eax,0xfffffffd
c0018ddf:	09 d0                	or     eax,edx
c0018de1:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018de7:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018dee:	e8 8d fd ff ff       	call   c0018b80 <CPU::cpuidCheckEDX(unsigned int)>
c0018df3:	83 e0 01             	and    eax,0x1
c0018df6:	c1 e0 06             	shl    eax,0x6
c0018df9:	88 c2                	mov    dl,al
c0018dfb:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018e01:	83 e0 bf             	and    eax,0xffffffbf
c0018e04:	09 d0                	or     eax,edx
c0018e06:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018e0c:	58                   	pop    eax
c0018e0d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e11:	50                   	push   eax
c0018e12:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e16:	50                   	push   eax
c0018e17:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018e1b:	56                   	push   esi
c0018e1c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e20:	50                   	push   eax
c0018e21:	6a 00                	push   0x0
c0018e23:	e8 d4 fc ff ff       	call   c0018afc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e28:	b8 04 00 00 00       	mov    eax,0x4
c0018e2d:	89 c1                	mov    ecx,eax
c0018e2f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018e31:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018e37:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018e3b:	89 c1                	mov    ecx,eax
c0018e3d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018e3f:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018e45:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018e49:	89 c1                	mov    ecx,eax
c0018e4b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018e4d:	83 c4 18             	add    esp,0x18
c0018e50:	68 34 bc 02 c0       	push   0xc002bc34
c0018e55:	55                   	push   ebp
c0018e56:	e8 3d 7a fe ff       	call   c0000898 <strcmp>
c0018e5b:	83 c4 10             	add    esp,0x10
c0018e5e:	85 c0                	test   eax,eax
c0018e60:	75 0f                	jne    c0018e71 <CPU::detectFeatures()+0x1a9>
c0018e62:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018e6c:	e9 22 02 00 00       	jmp    c0019093 <CPU::detectFeatures()+0x3cb>
c0018e71:	50                   	push   eax
c0018e72:	50                   	push   eax
c0018e73:	68 41 bc 02 c0       	push   0xc002bc41
c0018e78:	55                   	push   ebp
c0018e79:	e8 1a 7a fe ff       	call   c0000898 <strcmp>
c0018e7e:	83 c4 10             	add    esp,0x10
c0018e81:	85 c0                	test   eax,eax
c0018e83:	74 dd                	je     c0018e62 <CPU::detectFeatures()+0x19a>
c0018e85:	50                   	push   eax
c0018e86:	50                   	push   eax
c0018e87:	68 4e bc 02 c0       	push   0xc002bc4e
c0018e8c:	55                   	push   ebp
c0018e8d:	e8 06 7a fe ff       	call   c0000898 <strcmp>
c0018e92:	83 c4 10             	add    esp,0x10
c0018e95:	85 c0                	test   eax,eax
c0018e97:	74 2a                	je     c0018ec3 <CPU::detectFeatures()+0x1fb>
c0018e99:	50                   	push   eax
c0018e9a:	50                   	push   eax
c0018e9b:	68 5b bc 02 c0       	push   0xc002bc5b
c0018ea0:	55                   	push   ebp
c0018ea1:	e8 f2 79 fe ff       	call   c0000898 <strcmp>
c0018ea6:	83 c4 10             	add    esp,0x10
c0018ea9:	85 c0                	test   eax,eax
c0018eab:	74 16                	je     c0018ec3 <CPU::detectFeatures()+0x1fb>
c0018ead:	50                   	push   eax
c0018eae:	50                   	push   eax
c0018eaf:	68 68 bc 02 c0       	push   0xc002bc68
c0018eb4:	55                   	push   ebp
c0018eb5:	e8 de 79 fe ff       	call   c0000898 <strcmp>
c0018eba:	83 c4 10             	add    esp,0x10
c0018ebd:	85 c0                	test   eax,eax
c0018ebf:	74 48                	je     c0018f09 <CPU::detectFeatures()+0x241>
c0018ec1:	eb 0f                	jmp    c0018ed2 <CPU::detectFeatures()+0x20a>
c0018ec3:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018ecd:	e9 c1 01 00 00       	jmp    c0019093 <CPU::detectFeatures()+0x3cb>
c0018ed2:	50                   	push   eax
c0018ed3:	50                   	push   eax
c0018ed4:	68 75 bc 02 c0       	push   0xc002bc75
c0018ed9:	55                   	push   ebp
c0018eda:	e8 b9 79 fe ff       	call   c0000898 <strcmp>
c0018edf:	83 c4 10             	add    esp,0x10
c0018ee2:	85 c0                	test   eax,eax
c0018ee4:	74 23                	je     c0018f09 <CPU::detectFeatures()+0x241>
c0018ee6:	57                   	push   edi
c0018ee7:	57                   	push   edi
c0018ee8:	68 82 bc 02 c0       	push   0xc002bc82
c0018eed:	55                   	push   ebp
c0018eee:	e8 a5 79 fe ff       	call   c0000898 <strcmp>
c0018ef3:	83 c4 10             	add    esp,0x10
c0018ef6:	85 c0                	test   eax,eax
c0018ef8:	75 1e                	jne    c0018f18 <CPU::detectFeatures()+0x250>
c0018efa:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018f04:	e9 8a 01 00 00       	jmp    c0019093 <CPU::detectFeatures()+0x3cb>
c0018f09:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018f13:	e9 7b 01 00 00       	jmp    c0019093 <CPU::detectFeatures()+0x3cb>
c0018f18:	56                   	push   esi
c0018f19:	56                   	push   esi
c0018f1a:	68 8f bc 02 c0       	push   0xc002bc8f
c0018f1f:	55                   	push   ebp
c0018f20:	e8 73 79 fe ff       	call   c0000898 <strcmp>
c0018f25:	83 c4 10             	add    esp,0x10
c0018f28:	85 c0                	test   eax,eax
c0018f2a:	75 0f                	jne    c0018f3b <CPU::detectFeatures()+0x273>
c0018f2c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018f36:	e9 58 01 00 00       	jmp    c0019093 <CPU::detectFeatures()+0x3cb>
c0018f3b:	51                   	push   ecx
c0018f3c:	51                   	push   ecx
c0018f3d:	68 4e bc 02 c0       	push   0xc002bc4e
c0018f42:	55                   	push   ebp
c0018f43:	e8 50 79 fe ff       	call   c0000898 <strcmp>
c0018f48:	83 c4 10             	add    esp,0x10
c0018f4b:	85 c0                	test   eax,eax
c0018f4d:	75 0f                	jne    c0018f5e <CPU::detectFeatures()+0x296>
c0018f4f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018f59:	e9 35 01 00 00       	jmp    c0019093 <CPU::detectFeatures()+0x3cb>
c0018f5e:	52                   	push   edx
c0018f5f:	52                   	push   edx
c0018f60:	68 9c bc 02 c0       	push   0xc002bc9c
c0018f65:	55                   	push   ebp
c0018f66:	e8 2d 79 fe ff       	call   c0000898 <strcmp>
c0018f6b:	83 c4 10             	add    esp,0x10
c0018f6e:	85 c0                	test   eax,eax
c0018f70:	75 0f                	jne    c0018f81 <CPU::detectFeatures()+0x2b9>
c0018f72:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018f7c:	e9 12 01 00 00       	jmp    c0019093 <CPU::detectFeatures()+0x3cb>
c0018f81:	50                   	push   eax
c0018f82:	50                   	push   eax
c0018f83:	68 a9 bc 02 c0       	push   0xc002bca9
c0018f88:	55                   	push   ebp
c0018f89:	e8 0a 79 fe ff       	call   c0000898 <strcmp>
c0018f8e:	83 c4 10             	add    esp,0x10
c0018f91:	85 c0                	test   eax,eax
c0018f93:	75 0f                	jne    c0018fa4 <CPU::detectFeatures()+0x2dc>
c0018f95:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018f9f:	e9 ef 00 00 00       	jmp    c0019093 <CPU::detectFeatures()+0x3cb>
c0018fa4:	50                   	push   eax
c0018fa5:	50                   	push   eax
c0018fa6:	68 b6 bc 02 c0       	push   0xc002bcb6
c0018fab:	55                   	push   ebp
c0018fac:	e8 e7 78 fe ff       	call   c0000898 <strcmp>
c0018fb1:	83 c4 10             	add    esp,0x10
c0018fb4:	85 c0                	test   eax,eax
c0018fb6:	75 0f                	jne    c0018fc7 <CPU::detectFeatures()+0x2ff>
c0018fb8:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018fc2:	e9 cc 00 00 00       	jmp    c0019093 <CPU::detectFeatures()+0x3cb>
c0018fc7:	50                   	push   eax
c0018fc8:	50                   	push   eax
c0018fc9:	68 c3 bc 02 c0       	push   0xc002bcc3
c0018fce:	55                   	push   ebp
c0018fcf:	e8 c4 78 fe ff       	call   c0000898 <strcmp>
c0018fd4:	83 c4 10             	add    esp,0x10
c0018fd7:	85 c0                	test   eax,eax
c0018fd9:	75 0f                	jne    c0018fea <CPU::detectFeatures()+0x322>
c0018fdb:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018fe5:	e9 a9 00 00 00       	jmp    c0019093 <CPU::detectFeatures()+0x3cb>
c0018fea:	50                   	push   eax
c0018feb:	50                   	push   eax
c0018fec:	68 d0 bc 02 c0       	push   0xc002bcd0
c0018ff1:	55                   	push   ebp
c0018ff2:	e8 a1 78 fe ff       	call   c0000898 <strcmp>
c0018ff7:	83 c4 10             	add    esp,0x10
c0018ffa:	85 c0                	test   eax,eax
c0018ffc:	75 0f                	jne    c001900d <CPU::detectFeatures()+0x345>
c0018ffe:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0019008:	e9 86 00 00 00       	jmp    c0019093 <CPU::detectFeatures()+0x3cb>
c001900d:	50                   	push   eax
c001900e:	50                   	push   eax
c001900f:	68 dd bc 02 c0       	push   0xc002bcdd
c0019014:	55                   	push   ebp
c0019015:	e8 7e 78 fe ff       	call   c0000898 <strcmp>
c001901a:	83 c4 10             	add    esp,0x10
c001901d:	85 c0                	test   eax,eax
c001901f:	75 0c                	jne    c001902d <CPU::detectFeatures()+0x365>
c0019021:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001902b:	eb 66                	jmp    c0019093 <CPU::detectFeatures()+0x3cb>
c001902d:	50                   	push   eax
c001902e:	50                   	push   eax
c001902f:	68 ea bc 02 c0       	push   0xc002bcea
c0019034:	55                   	push   ebp
c0019035:	e8 5e 78 fe ff       	call   c0000898 <strcmp>
c001903a:	83 c4 10             	add    esp,0x10
c001903d:	85 c0                	test   eax,eax
c001903f:	75 0c                	jne    c001904d <CPU::detectFeatures()+0x385>
c0019041:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001904b:	eb 46                	jmp    c0019093 <CPU::detectFeatures()+0x3cb>
c001904d:	57                   	push   edi
c001904e:	57                   	push   edi
c001904f:	68 f7 bc 02 c0       	push   0xc002bcf7
c0019054:	55                   	push   ebp
c0019055:	e8 3e 78 fe ff       	call   c0000898 <strcmp>
c001905a:	83 c4 10             	add    esp,0x10
c001905d:	85 c0                	test   eax,eax
c001905f:	74 e0                	je     c0019041 <CPU::detectFeatures()+0x379>
c0019061:	56                   	push   esi
c0019062:	56                   	push   esi
c0019063:	68 04 bd 02 c0       	push   0xc002bd04
c0019068:	55                   	push   ebp
c0019069:	e8 2a 78 fe ff       	call   c0000898 <strcmp>
c001906e:	83 c4 10             	add    esp,0x10
c0019071:	85 c0                	test   eax,eax
c0019073:	74 cc                	je     c0019041 <CPU::detectFeatures()+0x379>
c0019075:	51                   	push   ecx
c0019076:	51                   	push   ecx
c0019077:	68 11 bd 02 c0       	push   0xc002bd11
c001907c:	55                   	push   ebp
c001907d:	e8 16 78 fe ff       	call   c0000898 <strcmp>
c0019082:	83 c4 10             	add    esp,0x10
c0019085:	85 c0                	test   eax,eax
c0019087:	74 b8                	je     c0019041 <CPU::detectFeatures()+0x379>
c0019089:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019093:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019098:	0f 86 be 00 00 00    	jbe    c001915c <CPU::detectFeatures()+0x494>
c001909e:	83 ec 0c             	sub    esp,0xc
c00190a1:	68 80 00 00 00       	push   0x80
c00190a6:	e8 31 fb ff ff       	call   c0018bdc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00190ab:	83 e0 01             	and    eax,0x1
c00190ae:	c1 e0 06             	shl    eax,0x6
c00190b1:	88 c2                	mov    dl,al
c00190b3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00190b9:	83 e0 bf             	and    eax,0xffffffbf
c00190bc:	09 d0                	or     eax,edx
c00190be:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00190c4:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00190cb:	e8 0c fb ff ff       	call   c0018bdc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00190d0:	83 e0 01             	and    eax,0x1
c00190d3:	c1 e0 04             	shl    eax,0x4
c00190d6:	88 c2                	mov    dl,al
c00190d8:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00190de:	83 e0 ef             	and    eax,0xffffffef
c00190e1:	09 d0                	or     eax,edx
c00190e3:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00190e9:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00190f0:	e8 e7 fa ff ff       	call   c0018bdc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00190f5:	c1 e0 07             	shl    eax,0x7
c00190f8:	88 c2                	mov    dl,al
c00190fa:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019100:	83 e0 7f             	and    eax,0x7f
c0019103:	09 d0                	or     eax,edx
c0019105:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001910b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019112:	e8 f3 fa ff ff       	call   c0018c0a <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019117:	83 e0 01             	and    eax,0x1
c001911a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019121:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019127:	83 e0 f7             	and    eax,0xfffffff7
c001912a:	09 d0                	or     eax,edx
c001912c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019132:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0019139:	e8 cc fa ff ff       	call   c0018c0a <CPU::cpuidCheckExtendedECX(unsigned int)>
c001913e:	83 c4 10             	add    esp,0x10
c0019141:	83 e0 01             	and    eax,0x1
c0019144:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001914b:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019151:	83 e0 fb             	and    eax,0xfffffffb
c0019154:	09 d0                	or     eax,edx
c0019156:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001915c:	83 ec 0c             	sub    esp,0xc
c001915f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019163:	50                   	push   eax
c0019164:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019168:	50                   	push   eax
c0019169:	8d 74 24 28          	lea    esi,[esp+0x28]
c001916d:	56                   	push   esi
c001916e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019172:	50                   	push   eax
c0019173:	6a 01                	push   0x1
c0019175:	e8 82 f9 ff ff       	call   c0018afc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001917a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001917e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019184:	88 ca                	mov    dl,cl
c0019186:	83 e0 f0             	and    eax,0xfffffff0
c0019189:	83 e2 0f             	and    edx,0xf
c001918c:	09 d0                	or     eax,edx
c001918e:	88 ca                	mov    dl,cl
c0019190:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019196:	c0 ea 04             	shr    dl,0x4
c0019199:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001919d:	0f b6 c2             	movzx  eax,dl
c00191a0:	83 c4 20             	add    esp,0x20
c00191a3:	c1 e0 06             	shl    eax,0x6
c00191a6:	89 c7                	mov    edi,eax
c00191a8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00191ae:	66 25 3f c0          	and    ax,0xc03f
c00191b2:	09 f8                	or     eax,edi
c00191b4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00191bb:	89 c8                	mov    eax,ecx
c00191bd:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c00191c4:	c1 e8 08             	shr    eax,0x8
c00191c7:	83 e5 3f             	and    ebp,0x3f
c00191ca:	83 e0 0f             	and    eax,0xf
c00191cd:	89 c7                	mov    edi,eax
c00191cf:	c1 e7 06             	shl    edi,0x6
c00191d2:	09 ef                	or     edi,ebp
c00191d4:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c00191db:	89 fa                	mov    edx,edi
c00191dd:	83 e5 c0             	and    ebp,0xffffffc0
c00191e0:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00191e6:	88 c2                	mov    dl,al
c00191e8:	c0 ea 02             	shr    dl,0x2
c00191eb:	89 d7                	mov    edi,edx
c00191ed:	09 ef                	or     edi,ebp
c00191ef:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00191f5:	89 fa                	mov    edx,edi
c00191f7:	83 e5 cf             	and    ebp,0xffffffcf
c00191fa:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019200:	89 cf                	mov    edi,ecx
c0019202:	c1 ef 0c             	shr    edi,0xc
c0019205:	83 e7 03             	and    edi,0x3
c0019208:	c1 e7 04             	shl    edi,0x4
c001920b:	09 ef                	or     edi,ebp
c001920d:	3c 06                	cmp    al,0x6
c001920f:	89 fa                	mov    edx,edi
c0019211:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019217:	74 04                	je     c001921d <CPU::detectFeatures()+0x555>
c0019219:	3c 0f                	cmp    al,0xf
c001921b:	75 5c                	jne    c0019279 <CPU::detectFeatures()+0x5b1>
c001921d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019221:	89 cf                	mov    edi,ecx
c0019223:	c1 ef 10             	shr    edi,0x10
c0019226:	c1 e7 04             	shl    edi,0x4
c0019229:	09 fa                	or     edx,edi
c001922b:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0019231:	0f b6 d2             	movzx  edx,dl
c0019234:	66 81 e7 3f c0       	and    di,0xc03f
c0019239:	c1 e2 06             	shl    edx,0x6
c001923c:	09 fa                	or     edx,edi
c001923e:	3c 0f                	cmp    al,0xf
c0019240:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019247:	75 30                	jne    c0019279 <CPU::detectFeatures()+0x5b1>
c0019249:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001924f:	c1 e9 14             	shr    ecx,0x14
c0019252:	83 e0 3f             	and    eax,0x3f
c0019255:	83 c1 0f             	add    ecx,0xf
c0019258:	88 ca                	mov    dl,cl
c001925a:	c0 e9 02             	shr    cl,0x2
c001925d:	c1 e2 06             	shl    edx,0x6
c0019260:	09 d0                	or     eax,edx
c0019262:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019268:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001926e:	83 e0 c0             	and    eax,0xffffffc0
c0019271:	09 c1                	or     ecx,eax
c0019273:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019279:	83 ec 0c             	sub    esp,0xc
c001927c:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019283:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019287:	50                   	push   eax
c0019288:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001928c:	55                   	push   ebp
c001928d:	56                   	push   esi
c001928e:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019292:	57                   	push   edi
c0019293:	68 00 00 00 80       	push   0x80000000
c0019298:	e8 5f f8 ff ff       	call   c0018afc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001929d:	83 c4 20             	add    esp,0x20
c00192a0:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00192a8:	76 22                	jbe    c00192cc <CPU::detectFeatures()+0x604>
c00192aa:	83 ec 0c             	sub    esp,0xc
c00192ad:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192b1:	50                   	push   eax
c00192b2:	55                   	push   ebp
c00192b3:	56                   	push   esi
c00192b4:	57                   	push   edi
c00192b5:	68 01 00 00 80       	push   0x80000001
c00192ba:	e8 3d f8 ff ff       	call   c0018afc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00192bf:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00192c9:	83 c4 20             	add    esp,0x20
c00192cc:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00192d2:	83 f8 01             	cmp    eax,0x1
c00192d5:	75 6f                	jne    c0019346 <CPU::detectFeatures()+0x67e>
c00192d7:	51                   	push   ecx
c00192d8:	51                   	push   ecx
c00192d9:	68 1d bd 02 c0       	push   0xc002bd1d
c00192de:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00192e2:	56                   	push   esi
c00192e3:	e8 24 75 fe ff       	call   c000080c <strcpy>
c00192e8:	5f                   	pop    edi
c00192e9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00192ef:	5d                   	pop    ebp
c00192f0:	66 c1 e8 06          	shr    ax,0x6
c00192f4:	0f b6 c0             	movzx  eax,al
c00192f7:	50                   	push   eax
c00192f8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00192fe:	c1 e8 0e             	shr    eax,0xe
c0019301:	0f b6 c0             	movzx  eax,al
c0019304:	50                   	push   eax
c0019305:	e8 9c f4 ff ff       	call   c00187a6 <CPU::lookupIntelName(unsigned char, unsigned char)>
c001930a:	5a                   	pop    edx
c001930b:	59                   	pop    ecx
c001930c:	50                   	push   eax
c001930d:	56                   	push   esi
c001930e:	e8 39 76 fe ff       	call   c000094c <strcat>
c0019313:	5f                   	pop    edi
c0019314:	5d                   	pop    ebp
c0019315:	56                   	push   esi
c0019316:	53                   	push   ebx
c0019317:	e8 c4 ab ff ff       	call   c0013ee0 <Device::setName(char const*)>
c001931c:	58                   	pop    eax
c001931d:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019323:	5a                   	pop    edx
c0019324:	68 24 bd 02 c0       	push   0xc002bd24
c0019329:	50                   	push   eax
c001932a:	e8 69 75 fe ff       	call   c0000898 <strcmp>
c001932f:	83 c4 10             	add    esp,0x10
c0019332:	85 c0                	test   eax,eax
c0019334:	0f 85 71 03 00 00    	jne    c00196ab <CPU::detectFeatures()+0x9e3>
c001933a:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019341:	e9 65 03 00 00       	jmp    c00196ab <CPU::detectFeatures()+0x9e3>
c0019346:	83 f8 02             	cmp    eax,0x2
c0019349:	0f 85 b5 00 00 00    	jne    c0019404 <CPU::detectFeatures()+0x73c>
c001934f:	57                   	push   edi
c0019350:	57                   	push   edi
c0019351:	68 36 bd 02 c0       	push   0xc002bd36
c0019356:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001935a:	56                   	push   esi
c001935b:	e8 ac 74 fe ff       	call   c000080c <strcpy>
c0019360:	5d                   	pop    ebp
c0019361:	58                   	pop    eax
c0019362:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019368:	66 c1 e8 06          	shr    ax,0x6
c001936c:	0f b6 c0             	movzx  eax,al
c001936f:	50                   	push   eax
c0019370:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019376:	c1 e8 0e             	shr    eax,0xe
c0019379:	0f b6 c0             	movzx  eax,al
c001937c:	50                   	push   eax
c001937d:	e8 90 f2 ff ff       	call   c0018612 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019382:	5a                   	pop    edx
c0019383:	59                   	pop    ecx
c0019384:	50                   	push   eax
c0019385:	56                   	push   esi
c0019386:	e8 c1 75 fe ff       	call   c000094c <strcat>
c001938b:	5f                   	pop    edi
c001938c:	5d                   	pop    ebp
c001938d:	56                   	push   esi
c001938e:	53                   	push   ebx
c001938f:	e8 4c ab ff ff       	call   c0013ee0 <Device::setName(char const*)>
c0019394:	58                   	pop    eax
c0019395:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001939b:	5a                   	pop    edx
c001939c:	68 3b bd 02 c0       	push   0xc002bd3b
c00193a1:	50                   	push   eax
c00193a2:	e8 f1 74 fe ff       	call   c0000898 <strcmp>
c00193a7:	83 c4 10             	add    esp,0x10
c00193aa:	85 c0                	test   eax,eax
c00193ac:	75 20                	jne    c00193ce <CPU::detectFeatures()+0x706>
c00193ae:	8b 15 08 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e408
c00193b4:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00193ba:	a8 01                	test   al,0x1
c00193bc:	74 10                	je     c00193ce <CPU::detectFeatures()+0x706>
c00193be:	83 e0 fe             	and    eax,0xfffffffe
c00193c1:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00193c7:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00193ce:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00193d4:	c1 e8 0e             	shr    eax,0xe
c00193d7:	3c 05                	cmp    al,0x5
c00193d9:	0f 85 cc 02 00 00    	jne    c00196ab <CPU::detectFeatures()+0x9e3>
c00193df:	56                   	push   esi
c00193e0:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00193e6:	83 e0 0f             	and    eax,0xf
c00193e9:	50                   	push   eax
c00193ea:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00193f0:	66 c1 e8 06          	shr    ax,0x6
c00193f4:	0f b6 c0             	movzx  eax,al
c00193f7:	50                   	push   eax
c00193f8:	6a 05                	push   0x5
c00193fa:	e8 89 f6 ff ff       	call   c0018a88 <CPU::AMD_K6_writeback(int, int, int)>
c00193ff:	e9 1f 02 00 00       	jmp    c0019623 <CPU::detectFeatures()+0x95b>
c0019404:	8d 50 fd             	lea    edx,[eax-0x3]
c0019407:	83 fa 01             	cmp    edx,0x1
c001940a:	76 09                	jbe    c0019415 <CPU::detectFeatures()+0x74d>
c001940c:	83 f8 06             	cmp    eax,0x6
c001940f:	0f 85 91 01 00 00    	jne    c00195a6 <CPU::detectFeatures()+0x8de>
c0019415:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001941b:	c1 ea 0e             	shr    edx,0xe
c001941e:	80 fa 05             	cmp    dl,0x5
c0019421:	75 7b                	jne    c001949e <CPU::detectFeatures()+0x7d6>
c0019423:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019429:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001942e:	66 81 fa 00 01       	cmp    dx,0x100
c0019433:	75 0c                	jne    c0019441 <CPU::detectFeatures()+0x779>
c0019435:	51                   	push   ecx
c0019436:	51                   	push   ecx
c0019437:	68 42 bd 02 c0       	push   0xc002bd42
c001943c:	e9 dc 01 00 00       	jmp    c001961d <CPU::detectFeatures()+0x955>
c0019441:	66 81 fa 00 02       	cmp    dx,0x200
c0019446:	75 0c                	jne    c0019454 <CPU::detectFeatures()+0x78c>
c0019448:	52                   	push   edx
c0019449:	52                   	push   edx
c001944a:	68 55 bd 02 c0       	push   0xc002bd55
c001944f:	e9 c9 01 00 00       	jmp    c001961d <CPU::detectFeatures()+0x955>
c0019454:	66 81 fa 40 02       	cmp    dx,0x240
c0019459:	75 0c                	jne    c0019467 <CPU::detectFeatures()+0x79f>
c001945b:	50                   	push   eax
c001945c:	50                   	push   eax
c001945d:	68 67 bd 02 c0       	push   0xc002bd67
c0019462:	e9 b6 01 00 00       	jmp    c001961d <CPU::detectFeatures()+0x955>
c0019467:	83 f8 06             	cmp    eax,0x6
c001946a:	75 0c                	jne    c0019478 <CPU::detectFeatures()+0x7b0>
c001946c:	50                   	push   eax
c001946d:	50                   	push   eax
c001946e:	68 79 bd 02 c0       	push   0xc002bd79
c0019473:	e9 a5 01 00 00       	jmp    c001961d <CPU::detectFeatures()+0x955>
c0019478:	83 f8 04             	cmp    eax,0x4
c001947b:	75 0c                	jne    c0019489 <CPU::detectFeatures()+0x7c1>
c001947d:	50                   	push   eax
c001947e:	50                   	push   eax
c001947f:	68 85 bd 02 c0       	push   0xc002bd85
c0019484:	e9 94 01 00 00       	jmp    c001961d <CPU::detectFeatures()+0x955>
c0019489:	83 f8 03             	cmp    eax,0x3
c001948c:	0f 85 19 02 00 00    	jne    c00196ab <CPU::detectFeatures()+0x9e3>
c0019492:	50                   	push   eax
c0019493:	50                   	push   eax
c0019494:	68 8d bd 02 c0       	push   0xc002bd8d
c0019499:	e9 7f 01 00 00       	jmp    c001961d <CPU::detectFeatures()+0x955>
c001949e:	80 fa 06             	cmp    dl,0x6
c00194a1:	0f 85 db 00 00 00    	jne    c0019582 <CPU::detectFeatures()+0x8ba>
c00194a7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00194ad:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00194b2:	66 81 fa 80 01       	cmp    dx,0x180
c00194b7:	75 0c                	jne    c00194c5 <CPU::detectFeatures()+0x7fd>
c00194b9:	50                   	push   eax
c00194ba:	50                   	push   eax
c00194bb:	68 98 bd 02 c0       	push   0xc002bd98
c00194c0:	e9 58 01 00 00       	jmp    c001961d <CPU::detectFeatures()+0x955>
c00194c5:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00194cb:	66 f7 c1 80 ff       	test   cx,0xff80
c00194d0:	75 0c                	jne    c00194de <CPU::detectFeatures()+0x816>
c00194d2:	50                   	push   eax
c00194d3:	50                   	push   eax
c00194d4:	68 a8 bd 02 c0       	push   0xc002bda8
c00194d9:	e9 3f 01 00 00       	jmp    c001961d <CPU::detectFeatures()+0x955>
c00194de:	66 81 fa 40 02       	cmp    dx,0x240
c00194e3:	75 0c                	jne    c00194f1 <CPU::detectFeatures()+0x829>
c00194e5:	55                   	push   ebp
c00194e6:	55                   	push   ebp
c00194e7:	68 af bd 02 c0       	push   0xc002bdaf
c00194ec:	e9 2c 01 00 00       	jmp    c001961d <CPU::detectFeatures()+0x955>
c00194f1:	66 81 fa 80 02       	cmp    dx,0x280
c00194f6:	75 0c                	jne    c0019504 <CPU::detectFeatures()+0x83c>
c00194f8:	57                   	push   edi
c00194f9:	57                   	push   edi
c00194fa:	68 b8 bd 02 c0       	push   0xc002bdb8
c00194ff:	e9 19 01 00 00       	jmp    c001961d <CPU::detectFeatures()+0x955>
c0019504:	66 81 fa 40 03       	cmp    dx,0x340
c0019509:	74 ed                	je     c00194f8 <CPU::detectFeatures()+0x830>
c001950b:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019510:	75 0c                	jne    c001951e <CPU::detectFeatures()+0x856>
c0019512:	56                   	push   esi
c0019513:	56                   	push   esi
c0019514:	68 bf bd 02 c0       	push   0xc002bdbf
c0019519:	e9 ff 00 00 00       	jmp    c001961d <CPU::detectFeatures()+0x955>
c001951e:	83 f8 06             	cmp    eax,0x6
c0019521:	0f 84 45 ff ff ff    	je     c001946c <CPU::detectFeatures()+0x7a4>
c0019527:	83 f8 04             	cmp    eax,0x4
c001952a:	0f 84 4d ff ff ff    	je     c001947d <CPU::detectFeatures()+0x7b5>
c0019530:	83 f8 03             	cmp    eax,0x3
c0019533:	0f 85 72 01 00 00    	jne    c00196ab <CPU::detectFeatures()+0x9e3>
c0019539:	51                   	push   ecx
c001953a:	51                   	push   ecx
c001953b:	68 c8 bd 02 c0       	push   0xc002bdc8
c0019540:	53                   	push   ebx
c0019541:	e8 9a a9 ff ff       	call   c0013ee0 <Device::setName(char const*)>
c0019546:	b1 c1                	mov    cl,0xc1
c0019548:	88 c8                	mov    al,cl
c001954a:	e6 22                	out    0x22,al
c001954c:	e4 23                	in     al,0x23
c001954e:	88 c2                	mov    dl,al
c0019550:	88 c8                	mov    al,cl
c0019552:	e6 22                	out    0x22,al
c0019554:	88 d0                	mov    al,dl
c0019556:	83 c8 10             	or     eax,0x10
c0019559:	e6 23                	out    0x23,al
c001955b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019562:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019565:	89 d0                	mov    eax,edx
c0019567:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001956d:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019571:	40                   	inc    eax
c0019572:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019578:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001957d:	e9 a1 00 00 00       	jmp    c0019623 <CPU::detectFeatures()+0x95b>
c0019582:	83 f8 06             	cmp    eax,0x6
c0019585:	0f 84 e1 fe ff ff    	je     c001946c <CPU::detectFeatures()+0x7a4>
c001958b:	83 f8 04             	cmp    eax,0x4
c001958e:	0f 84 e9 fe ff ff    	je     c001947d <CPU::detectFeatures()+0x7b5>
c0019594:	83 f8 03             	cmp    eax,0x3
c0019597:	0f 85 0e 01 00 00    	jne    c00196ab <CPU::detectFeatures()+0x9e3>
c001959d:	52                   	push   edx
c001959e:	52                   	push   edx
c001959f:	68 d3 bd 02 c0       	push   0xc002bdd3
c00195a4:	eb 77                	jmp    c001961d <CPU::detectFeatures()+0x955>
c00195a6:	83 f8 07             	cmp    eax,0x7
c00195a9:	75 09                	jne    c00195b4 <CPU::detectFeatures()+0x8ec>
c00195ab:	50                   	push   eax
c00195ac:	50                   	push   eax
c00195ad:	68 dd bd 02 c0       	push   0xc002bddd
c00195b2:	eb 69                	jmp    c001961d <CPU::detectFeatures()+0x955>
c00195b4:	83 f8 0a             	cmp    eax,0xa
c00195b7:	75 09                	jne    c00195c2 <CPU::detectFeatures()+0x8fa>
c00195b9:	50                   	push   eax
c00195ba:	50                   	push   eax
c00195bb:	68 e8 bd 02 c0       	push   0xc002bde8
c00195c0:	eb 5b                	jmp    c001961d <CPU::detectFeatures()+0x955>
c00195c2:	83 f8 0b             	cmp    eax,0xb
c00195c5:	75 09                	jne    c00195d0 <CPU::detectFeatures()+0x908>
c00195c7:	50                   	push   eax
c00195c8:	50                   	push   eax
c00195c9:	68 f0 bd 02 c0       	push   0xc002bdf0
c00195ce:	eb 4d                	jmp    c001961d <CPU::detectFeatures()+0x955>
c00195d0:	83 f8 08             	cmp    eax,0x8
c00195d3:	75 09                	jne    c00195de <CPU::detectFeatures()+0x916>
c00195d5:	50                   	push   eax
c00195d6:	50                   	push   eax
c00195d7:	68 f9 bd 02 c0       	push   0xc002bdf9
c00195dc:	eb 3f                	jmp    c001961d <CPU::detectFeatures()+0x955>
c00195de:	83 f8 09             	cmp    eax,0x9
c00195e1:	75 09                	jne    c00195ec <CPU::detectFeatures()+0x924>
c00195e3:	50                   	push   eax
c00195e4:	50                   	push   eax
c00195e5:	68 01 be 02 c0       	push   0xc002be01
c00195ea:	eb 31                	jmp    c001961d <CPU::detectFeatures()+0x955>
c00195ec:	83 f8 05             	cmp    eax,0x5
c00195ef:	75 09                	jne    c00195fa <CPU::detectFeatures()+0x932>
c00195f1:	50                   	push   eax
c00195f2:	50                   	push   eax
c00195f3:	68 09 be 02 c0       	push   0xc002be09
c00195f8:	eb 23                	jmp    c001961d <CPU::detectFeatures()+0x955>
c00195fa:	83 f8 0c             	cmp    eax,0xc
c00195fd:	75 09                	jne    c0019608 <CPU::detectFeatures()+0x940>
c00195ff:	55                   	push   ebp
c0019600:	55                   	push   ebp
c0019601:	68 17 be 02 c0       	push   0xc002be17
c0019606:	eb 15                	jmp    c001961d <CPU::detectFeatures()+0x955>
c0019608:	83 f8 0d             	cmp    eax,0xd
c001960b:	75 09                	jne    c0019616 <CPU::detectFeatures()+0x94e>
c001960d:	57                   	push   edi
c001960e:	57                   	push   edi
c001960f:	68 22 be 02 c0       	push   0xc002be22
c0019614:	eb 07                	jmp    c001961d <CPU::detectFeatures()+0x955>
c0019616:	56                   	push   esi
c0019617:	56                   	push   esi
c0019618:	68 36 be 02 c0       	push   0xc002be36
c001961d:	53                   	push   ebx
c001961e:	e8 bd a8 ff ff       	call   c0013ee0 <Device::setName(char const*)>
c0019623:	83 c4 10             	add    esp,0x10
c0019626:	e9 80 00 00 00       	jmp    c00196ab <CPU::detectFeatures()+0x9e3>
c001962b:	51                   	push   ecx
c001962c:	51                   	push   ecx
c001962d:	68 82 bc 02 c0       	push   0xc002bc82
c0019632:	55                   	push   ebp
c0019633:	e8 d4 71 fe ff       	call   c000080c <strcpy>
c0019638:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019642:	e8 67 6c fe ff       	call   c00002ae <is486>
c0019647:	83 c4 10             	add    esp,0x10
c001964a:	85 c0                	test   eax,eax
c001964c:	74 2b                	je     c0019679 <CPU::detectFeatures()+0x9b1>
c001964e:	52                   	push   edx
c001964f:	52                   	push   edx
c0019650:	68 42 be 02 c0       	push   0xc002be42
c0019655:	53                   	push   ebx
c0019656:	e8 85 a8 ff ff       	call   c0013ee0 <Device::setName(char const*)>
c001965b:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019662:	0f 20 c0             	mov    eax,cr0
c0019665:	83 e0 14             	and    eax,0x14
c0019668:	83 c4 10             	add    esp,0x10
c001966b:	83 f8 04             	cmp    eax,0x4
c001966e:	75 1f                	jne    c001968f <CPU::detectFeatures()+0x9c7>
c0019670:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019677:	eb 32                	jmp    c00196ab <CPU::detectFeatures()+0x9e3>
c0019679:	50                   	push   eax
c001967a:	50                   	push   eax
c001967b:	68 4d be 02 c0       	push   0xc002be4d
c0019680:	53                   	push   ebx
c0019681:	e8 5a a8 ff ff       	call   c0013ee0 <Device::setName(char const*)>
c0019686:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001968d:	eb d3                	jmp    c0019662 <CPU::detectFeatures()+0x99a>
c001968f:	e8 f5 6b fe ff       	call   c0000289 <hasLegacyFPU>
c0019694:	83 e0 01             	and    eax,0x1
c0019697:	8d 14 00             	lea    edx,[eax+eax*1]
c001969a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00196a0:	83 e0 fd             	and    eax,0xfffffffd
c00196a3:	09 d0                	or     eax,edx
c00196a5:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00196ab:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00196b2:	83 c4 4c             	add    esp,0x4c
c00196b5:	5b                   	pop    ebx
c00196b6:	5e                   	pop    esi
c00196b7:	5f                   	pop    edi
c00196b8:	5d                   	pop    ebp
c00196b9:	c3                   	ret    

c00196ba <CPU::setupSMEP()>:
c00196ba:	0f 20 e0             	mov    eax,cr4
c00196bd:	0d 00 00 10 00       	or     eax,0x100000
c00196c2:	0f 22 e0             	mov    cr4,eax
c00196c5:	c3                   	ret    

c00196c6 <CPU::setupUMIP()>:
c00196c6:	0f 20 e0             	mov    eax,cr4
c00196c9:	80 cc 08             	or     ah,0x8
c00196cc:	0f 22 e0             	mov    cr4,eax
c00196cf:	c3                   	ret    

c00196d0 <CPU::setupTSC()>:
c00196d0:	0f 20 e0             	mov    eax,cr4
c00196d3:	83 c8 04             	or     eax,0x4
c00196d6:	0f 22 e0             	mov    cr4,eax
c00196d9:	c3                   	ret    

c00196da <CPU::setupLargePages()>:
c00196da:	0f 20 e0             	mov    eax,cr4
c00196dd:	83 c8 10             	or     eax,0x10
c00196e0:	0f 22 e0             	mov    cr4,eax
c00196e3:	c3                   	ret    

c00196e4 <CPU::setupPAT()>:
c00196e4:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00196e9:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00196f0:	74 2c                	je     c001971e <CPU::setupPAT()+0x3a>
c00196f2:	53                   	push   ebx
c00196f3:	83 ec 10             	sub    esp,0x10
c00196f6:	68 77 02 00 00       	push   0x277
c00196fb:	50                   	push   eax
c00196fc:	e8 81 56 ff ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c0019701:	83 e2 f8             	and    edx,0xfffffff8
c0019704:	83 ca 01             	or     edx,0x1
c0019707:	52                   	push   edx
c0019708:	50                   	push   eax
c0019709:	68 77 02 00 00       	push   0x277
c001970e:	ff 35 08 e4 02 c0    	push   DWORD PTR ds:0xc002e408
c0019714:	e8 95 56 ff ff       	call   c000edae <Computer::wrmsr(unsigned int, unsigned long long)>
c0019719:	83 c4 28             	add    esp,0x28
c001971c:	5b                   	pop    ebx
c001971d:	c3                   	ret    
c001971e:	c3                   	ret    
c001971f:	90                   	nop

c0019720 <CPU::setupMTRR()>:
c0019720:	c3                   	ret    
c0019721:	90                   	nop

c0019722 <CPU::setupGlobalPages()>:
c0019722:	0f 20 e0             	mov    eax,cr4
c0019725:	0c 80                	or     al,0x80
c0019727:	0f 22 e0             	mov    cr4,eax
c001972a:	c3                   	ret    
c001972b:	90                   	nop

c001972c <CPU::allowUsermodeDataAccess()>:
c001972c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019730:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019737:	74 03                	je     c001973c <CPU::allowUsermodeDataAccess()+0x10>
c0019739:	0f 01 cb             	stac   
c001973c:	c3                   	ret    
c001973d:	90                   	nop

c001973e <CPU::prohibitUsermodeDataAccess()>:
c001973e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019742:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019749:	74 03                	je     c001974e <CPU::prohibitUsermodeDataAccess()+0x10>
c001974b:	0f 01 ca             	clac   
c001974e:	c3                   	ret    
c001974f:	90                   	nop

c0019750 <CPU::setupSMAP()>:
c0019750:	0f 20 e0             	mov    eax,cr4
c0019753:	0d 00 00 20 00       	or     eax,0x200000
c0019758:	0f 22 e0             	mov    cr4,eax
c001975b:	eb e1                	jmp    c001973e <CPU::prohibitUsermodeDataAccess()>
c001975d:	90                   	nop

c001975e <CPU::setupFeatures()>:
c001975e:	83 ec 0c             	sub    esp,0xc
c0019761:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019765:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c001976c:	74 07                	je     c0019775 <CPU::setupFeatures()+0x17>
c001976e:	52                   	push   edx
c001976f:	e8 46 ff ff ff       	call   c00196ba <CPU::setupSMEP()>
c0019774:	58                   	pop    eax
c0019775:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c001977c:	74 07                	je     c0019785 <CPU::setupFeatures()+0x27>
c001977e:	52                   	push   edx
c001977f:	e8 cc ff ff ff       	call   c0019750 <CPU::setupSMAP()>
c0019784:	58                   	pop    eax
c0019785:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c001978c:	74 07                	je     c0019795 <CPU::setupFeatures()+0x37>
c001978e:	52                   	push   edx
c001978f:	e8 32 ff ff ff       	call   c00196c6 <CPU::setupUMIP()>
c0019794:	58                   	pop    eax
c0019795:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c001979c:	74 07                	je     c00197a5 <CPU::setupFeatures()+0x47>
c001979e:	52                   	push   edx
c001979f:	e8 2c ff ff ff       	call   c00196d0 <CPU::setupTSC()>
c00197a4:	58                   	pop    eax
c00197a5:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c00197ac:	74 07                	je     c00197b5 <CPU::setupFeatures()+0x57>
c00197ae:	52                   	push   edx
c00197af:	e8 26 ff ff ff       	call   c00196da <CPU::setupLargePages()>
c00197b4:	59                   	pop    ecx
c00197b5:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c00197bc:	74 07                	je     c00197c5 <CPU::setupFeatures()+0x67>
c00197be:	52                   	push   edx
c00197bf:	e8 5e ff ff ff       	call   c0019722 <CPU::setupGlobalPages()>
c00197c4:	58                   	pop    eax
c00197c5:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c00197cc:	74 0c                	je     c00197da <CPU::setupFeatures()+0x7c>
c00197ce:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00197d2:	83 c4 0c             	add    esp,0xc
c00197d5:	e9 0a ff ff ff       	jmp    c00196e4 <CPU::setupPAT()>
c00197da:	83 c4 0c             	add    esp,0xc
c00197dd:	c3                   	ret    

c00197de <CPU::open(int, int, void*)>:
c00197de:	57                   	push   edi
c00197df:	56                   	push   esi
c00197e0:	53                   	push   ebx
c00197e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00197e5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00197e9:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00197ef:	83 ec 0c             	sub    esp,0xc
c00197f2:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00197f8:	68 58 be 02 c0       	push   0xc002be58
c00197fd:	e8 b1 60 ff ff       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c0019802:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019808:	89 04 24             	mov    DWORD PTR [esp],eax
c001980b:	e8 de 58 ff ff       	call   c000f0ee <GDT::setup()>
c0019810:	c7 04 24 6a be 02 c0 	mov    DWORD PTR [esp],0xc002be6a
c0019817:	e8 97 60 ff ff       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c001981c:	83 c4 0c             	add    esp,0xc
c001981f:	6a 00                	push   0x0
c0019821:	68 ef be ad de       	push   0xdeadbeef
c0019826:	57                   	push   edi
c0019827:	e8 3a 76 ff ff       	call   c0010e66 <TSS::setup(unsigned long, unsigned long)>
c001982c:	c7 04 24 7c be 02 c0 	mov    DWORD PTR [esp],0xc002be7c
c0019833:	e8 7b 60 ff ff       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c0019838:	89 3c 24             	mov    DWORD PTR [esp],edi
c001983b:	e8 06 76 ff ff       	call   c0010e46 <TSS::flush()>
c0019840:	c7 04 24 90 be 02 c0 	mov    DWORD PTR [esp],0xc002be90
c0019847:	e8 67 60 ff ff       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c001984c:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019852:	89 04 24             	mov    DWORD PTR [esp],eax
c0019855:	e8 f8 5a ff ff       	call   c000f352 <IDT::setup()>
c001985a:	c7 04 24 a2 be 02 c0 	mov    DWORD PTR [esp],0xc002bea2
c0019861:	e8 4d 60 ff ff       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c0019866:	b8 00 04 00 00       	mov    eax,0x400
c001986b:	0f 23 f8             	mov    db7,eax
c001986e:	c7 04 24 c0 be 02 c0 	mov    DWORD PTR [esp],0xc002bec0
c0019875:	e8 39 60 ff ff       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c001987a:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019884:	e8 cc 63 ff ff       	call   c000fc55 <Phys::allocatePage()>
c0019889:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001988f:	89 30                	mov    DWORD PTR [eax],esi
c0019891:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019897:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001989a:	c7 04 24 e2 be 02 c0 	mov    DWORD PTR [esp],0xc002bee2
c00198a1:	e8 0d 60 ff ff       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c00198a6:	58                   	pop    eax
c00198a7:	5a                   	pop    edx
c00198a8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00198ae:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00198b2:	e8 a9 85 ff ff       	call   c0011e60 <VAS::setCPUSpecific(unsigned long)>
c00198b7:	c7 04 24 0a bf 02 c0 	mov    DWORD PTR [esp],0xc002bf0a
c00198be:	e8 f0 5f ff ff       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c00198c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00198c6:	e8 fd f3 ff ff       	call   c0018cc8 <CPU::detectFeatures()>
c00198cb:	c7 04 24 2d bf 02 c0 	mov    DWORD PTR [esp],0xc002bf2d
c00198d2:	e8 dc 5f ff ff       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c00198d7:	e8 5e ba ff ff       	call   c001533a <setupInterruptController()>
c00198dc:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00198e2:	c7 04 24 51 bf 02 c0 	mov    DWORD PTR [esp],0xc002bf51
c00198e9:	e8 c5 5f ff ff       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c00198ee:	a1 20 e4 02 c0       	mov    eax,ds:0xc002e420
c00198f3:	83 e0 10             	and    eax,0x10
c00198f6:	83 f8 01             	cmp    eax,0x1
c00198f9:	19 c0                	sbb    eax,eax
c00198fb:	83 e0 46             	and    eax,0x46
c00198fe:	83 c0 1e             	add    eax,0x1e
c0019901:	89 04 24             	mov    DWORD PTR [esp],eax
c0019904:	e8 1e d0 ff ff       	call   c0016927 <setupTimer(int)>
c0019909:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c001990f:	c7 04 24 6c bf 02 c0 	mov    DWORD PTR [esp],0xc002bf6c
c0019916:	e8 98 5f ff ff       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c001991b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001991e:	e8 3b fe ff ff       	call   c001975e <CPU::setupFeatures()>
c0019923:	c7 04 24 87 bf 02 c0 	mov    DWORD PTR [esp],0xc002bf87
c001992a:	e8 84 5f ff ff       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c001992f:	83 c4 10             	add    esp,0x10
c0019932:	31 c0                	xor    eax,eax
c0019934:	5b                   	pop    ebx
c0019935:	5e                   	pop    esi
c0019936:	5f                   	pop    edi
c0019937:	c3                   	ret    

c0019938 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019938:	57                   	push   edi
c0019939:	56                   	push   esi
c001993a:	53                   	push   ebx
c001993b:	51                   	push   ecx
c001993c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019940:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019943:	0f 02 c0             	lar    eax,ax
c0019946:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019949:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001994d:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019950:	88 ca                	mov    dl,cl
c0019952:	c0 ea 06             	shr    dl,0x6
c0019955:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019959:	89 ca                	mov    edx,ecx
c001995b:	66 c1 ea 03          	shr    dx,0x3
c001995f:	83 e2 07             	and    edx,0x7
c0019962:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019967:	88 17                	mov    BYTE PTR [edi],dl
c0019969:	0f 84 a6 01 00 00    	je     c0019b15 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c001996f:	83 e1 07             	and    ecx,0x7
c0019972:	80 f9 04             	cmp    cl,0x4
c0019975:	0f 84 98 00 00 00    	je     c0019a13 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001997b:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019980:	0f 95 c0             	setne  al
c0019983:	80 f9 05             	cmp    cl,0x5
c0019986:	0f 95 c2             	setne  dl
c0019989:	08 c2                	or     dl,al
c001998b:	74 79                	je     c0019a06 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001998d:	84 c9                	test   cl,cl
c001998f:	75 05                	jne    c0019996 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019991:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019994:	eb 3c                	jmp    c00199d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019996:	80 f9 01             	cmp    cl,0x1
c0019999:	75 05                	jne    c00199a0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001999b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001999e:	eb 32                	jmp    c00199d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00199a0:	80 f9 02             	cmp    cl,0x2
c00199a3:	75 05                	jne    c00199aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00199a5:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00199a8:	eb 28                	jmp    c00199d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00199aa:	31 c0                	xor    eax,eax
c00199ac:	80 f9 03             	cmp    cl,0x3
c00199af:	75 05                	jne    c00199b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00199b1:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00199b4:	eb 1c                	jmp    c00199d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00199b6:	80 f9 05             	cmp    cl,0x5
c00199b9:	75 05                	jne    c00199c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00199bb:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00199be:	eb 12                	jmp    c00199d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00199c0:	80 f9 06             	cmp    cl,0x6
c00199c3:	75 05                	jne    c00199ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00199c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00199c8:	eb 08                	jmp    c00199d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00199ca:	80 f9 07             	cmp    cl,0x7
c00199cd:	75 03                	jne    c00199d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00199cf:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00199d2:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00199d7:	75 10                	jne    c00199e9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00199d9:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00199dd:	b9 03 00 00 00       	mov    ecx,0x3
c00199e2:	01 d0                	add    eax,edx
c00199e4:	e9 37 01 00 00       	jmp    c0019b20 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00199e9:	b9 02 00 00 00       	mov    ecx,0x2
c00199ee:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00199f3:	0f 85 27 01 00 00    	jne    c0019b20 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00199f9:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00199fc:	b9 06 00 00 00       	mov    ecx,0x6
c0019a01:	e9 1a 01 00 00       	jmp    c0019b20 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019a06:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019a09:	b9 06 00 00 00       	mov    ecx,0x6
c0019a0e:	e9 0f 01 00 00       	jmp    c0019b22 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019a13:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019a16:	88 ca                	mov    dl,cl
c0019a18:	c0 ea 06             	shr    dl,0x6
c0019a1b:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019a1f:	89 ca                	mov    edx,ecx
c0019a21:	66 c1 ea 03          	shr    dx,0x3
c0019a25:	83 e2 07             	and    edx,0x7
c0019a28:	80 e1 07             	and    cl,0x7
c0019a2b:	75 05                	jne    c0019a32 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019a2d:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019a30:	eb 4c                	jmp    c0019a7e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a32:	80 f9 01             	cmp    cl,0x1
c0019a35:	75 05                	jne    c0019a3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019a37:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019a3a:	eb 42                	jmp    c0019a7e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a3c:	80 f9 02             	cmp    cl,0x2
c0019a3f:	75 05                	jne    c0019a46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019a41:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019a44:	eb 38                	jmp    c0019a7e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a46:	80 f9 03             	cmp    cl,0x3
c0019a49:	75 05                	jne    c0019a50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019a4b:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019a4e:	eb 2e                	jmp    c0019a7e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a50:	80 f9 04             	cmp    cl,0x4
c0019a53:	75 12                	jne    c0019a67 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019a55:	f6 c4 60             	test   ah,0x60
c0019a58:	75 08                	jne    c0019a62 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019a5a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019a5d:	8d 78 14             	lea    edi,[eax+0x14]
c0019a60:	eb 1c                	jmp    c0019a7e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a62:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019a65:	eb 17                	jmp    c0019a7e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a67:	80 f9 05             	cmp    cl,0x5
c0019a6a:	75 05                	jne    c0019a71 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019a6c:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019a6f:	eb 0d                	jmp    c0019a7e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a71:	80 f9 06             	cmp    cl,0x6
c0019a74:	75 05                	jne    c0019a7b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019a76:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019a79:	eb 03                	jmp    c0019a7e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a7b:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019a7e:	84 d2                	test   dl,dl
c0019a80:	75 05                	jne    c0019a87 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019a82:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019a85:	eb 3c                	jmp    c0019ac3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019a87:	80 fa 01             	cmp    dl,0x1
c0019a8a:	75 05                	jne    c0019a91 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019a8c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019a8f:	eb 32                	jmp    c0019ac3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019a91:	80 fa 02             	cmp    dl,0x2
c0019a94:	75 05                	jne    c0019a9b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019a96:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019a99:	eb 28                	jmp    c0019ac3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019a9b:	80 fa 03             	cmp    dl,0x3
c0019a9e:	75 05                	jne    c0019aa5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019aa0:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019aa3:	eb 1e                	jmp    c0019ac3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019aa5:	31 c0                	xor    eax,eax
c0019aa7:	80 fa 04             	cmp    dl,0x4
c0019aaa:	74 17                	je     c0019ac3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019aac:	80 fa 05             	cmp    dl,0x5
c0019aaf:	75 05                	jne    c0019ab6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019ab1:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019ab4:	eb 0d                	jmp    c0019ac3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ab6:	80 fa 06             	cmp    dl,0x6
c0019ab9:	75 05                	jne    c0019ac0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019abb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019abe:	eb 03                	jmp    c0019ac3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ac0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019ac3:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019ac8:	0f 94 c2             	sete   dl
c0019acb:	80 f9 05             	cmp    cl,0x5
c0019ace:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019ad2:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019ad7:	d3 e0                	shl    eax,cl
c0019ad9:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019add:	74 0a                	je     c0019ae9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019adf:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019ae2:	b9 07 00 00 00       	mov    ecx,0x7
c0019ae7:	eb 37                	jmp    c0019b20 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019ae9:	01 f8                	add    eax,edi
c0019aeb:	b9 03 00 00 00       	mov    ecx,0x3
c0019af0:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019af5:	74 2b                	je     c0019b22 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019af7:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019afc:	75 0d                	jne    c0019b0b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019afe:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019b02:	01 c8                	add    eax,ecx
c0019b04:	b9 04 00 00 00       	mov    ecx,0x4
c0019b09:	eb 17                	jmp    c0019b22 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019b0b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019b0e:	b9 07 00 00 00       	mov    ecx,0x7
c0019b13:	eb 0d                	jmp    c0019b22 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019b15:	b9 02 00 00 00       	mov    ecx,0x2
c0019b1a:	b2 01                	mov    dl,0x1
c0019b1c:	31 c0                	xor    eax,eax
c0019b1e:	eb 02                	jmp    c0019b22 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019b20:	31 d2                	xor    edx,edx
c0019b22:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019b26:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019b28:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019b2c:	88 11                	mov    BYTE PTR [ecx],dl
c0019b2e:	5a                   	pop    edx
c0019b2f:	5b                   	pop    ebx
c0019b30:	5e                   	pop    esi
c0019b31:	5f                   	pop    edi
c0019b32:	c3                   	ret    

c0019b33 <Krnl::smpEntry()>:
c0019b33:	eb fe                	jmp    c0019b33 <Krnl::smpEntry()>

c0019b35 <Krnl::startCPU(int)>:
c0019b35:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0019b3a:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019b41:	0f 84 36 01 00 00    	je     c0019c7d <Krnl::startCPU(int)+0x148>
c0019b47:	53                   	push   ebx
c0019b48:	83 ec 10             	sub    esp,0x10
c0019b4b:	fa                   	cli    
c0019b4c:	ff 05 08 f9 02 c0    	inc    DWORD PTR ds:0xc002f908
c0019b52:	6a 1b                	push   0x1b
c0019b54:	ff 35 08 e4 02 c0    	push   DWORD PTR ds:0xc002e408
c0019b5a:	e8 23 52 ff ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c0019b5f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019b64:	89 c3                	mov    ebx,eax
c0019b66:	58                   	pop    eax
c0019b67:	5a                   	pop    edx
c0019b68:	53                   	push   ebx
c0019b69:	68 d0 bf 02 c0       	push   0xc002bfd0
c0019b6e:	e8 3e 8d ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0019b73:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019b7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b81:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019b8b:	c1 e0 18             	shl    eax,0x18
c0019b8e:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019b94:	83 c4 10             	add    esp,0x10
c0019b97:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019b9d:	09 c2                	or     edx,eax
c0019b9f:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019ba5:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019bab:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019bb1:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019bb7:	80 cd c5             	or     ch,0xc5
c0019bba:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019bc0:	f3 90                	pause  
c0019bc2:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019bc4:	0f ba e1 0c          	bt     ecx,0xc
c0019bc8:	72 f6                	jb     c0019bc0 <Krnl::startCPU(int)+0x8b>
c0019bca:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019bd0:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019bd6:	09 c1                	or     ecx,eax
c0019bd8:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019bde:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019be4:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019bea:	80 cd 85             	or     ch,0x85
c0019bed:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019bf3:	f3 90                	pause  
c0019bf5:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019bf7:	0f ba e1 0c          	bt     ecx,0xc
c0019bfb:	72 f6                	jb     c0019bf3 <Krnl::startCPU(int)+0xbe>
c0019bfd:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019c07:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019c0d:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019c13:	09 c1                	or     ecx,eax
c0019c15:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019c1b:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019c21:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019c27:	81 c9 02 06 00 00    	or     ecx,0x602
c0019c2d:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019c33:	f3 90                	pause  
c0019c35:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019c37:	0f ba e1 0c          	bt     ecx,0xc
c0019c3b:	72 f6                	jb     c0019c33 <Krnl::startCPU(int)+0xfe>
c0019c3d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019c47:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019c4d:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019c53:	09 c8                	or     eax,ecx
c0019c55:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019c5b:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019c61:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019c66:	0d 02 06 00 00       	or     eax,0x602
c0019c6b:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019c71:	f3 90                	pause  
c0019c73:	8b 02                	mov    eax,DWORD PTR [edx]
c0019c75:	0f ba e0 0c          	bt     eax,0xc
c0019c79:	72 f6                	jb     c0019c71 <Krnl::startCPU(int)+0x13c>
c0019c7b:	eb fe                	jmp    c0019c7b <Krnl::startCPU(int)+0x146>
c0019c7d:	c3                   	ret    

c0019c7e <Krnl::startCPUs()>:
c0019c7e:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0019c83:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019c89:	88 c2                	mov    dl,al
c0019c8b:	83 e2 0a             	and    edx,0xa
c0019c8e:	80 fa 0a             	cmp    dl,0xa
c0019c91:	75 09                	jne    c0019c9c <Krnl::startCPUs()+0x1e>
c0019c93:	a8 01                	test   al,0x1
c0019c95:	74 05                	je     c0019c9c <Krnl::startCPUs()+0x1e>
c0019c97:	e9 ff 64 fe ff       	jmp    c000019b <prepareTramp>
c0019c9c:	c3                   	ret    
c0019c9d:	90                   	nop

c0019c9e <EnvVarContainer::getEnv(char const*)>:
c0019c9e:	57                   	push   edi
c0019c9f:	56                   	push   esi
c0019ca0:	53                   	push   ebx
c0019ca1:	31 db                	xor    ebx,ebx
c0019ca3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019ca7:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019ca9:	7e 2b                	jle    c0019cd6 <EnvVarContainer::getEnv(char const*)+0x38>
c0019cab:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019cb2:	50                   	push   eax
c0019cb3:	50                   	push   eax
c0019cb4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019cb7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019cba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019cbe:	e8 d5 6b fe ff       	call   c0000898 <strcmp>
c0019cc3:	83 c4 10             	add    esp,0x10
c0019cc6:	85 c0                	test   eax,eax
c0019cc8:	75 09                	jne    c0019cd3 <EnvVarContainer::getEnv(char const*)+0x35>
c0019cca:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019ccd:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019cd1:	eb 05                	jmp    c0019cd8 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019cd3:	43                   	inc    ebx
c0019cd4:	eb d1                	jmp    c0019ca7 <EnvVarContainer::getEnv(char const*)+0x9>
c0019cd6:	31 c0                	xor    eax,eax
c0019cd8:	5b                   	pop    ebx
c0019cd9:	5e                   	pop    esi
c0019cda:	5f                   	pop    edi
c0019cdb:	c3                   	ret    

c0019cdc <EnvVarContainer::setEnv(char const*, char const*)>:
c0019cdc:	55                   	push   ebp
c0019cdd:	57                   	push   edi
c0019cde:	56                   	push   esi
c0019cdf:	53                   	push   ebx
c0019ce0:	83 ec 28             	sub    esp,0x28
c0019ce3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019ce7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0019ceb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019cef:	56                   	push   esi
c0019cf0:	e8 77 6a fe ff       	call   c000076c <strlen>
c0019cf5:	40                   	inc    eax
c0019cf6:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cf9:	e8 5b 5b ff ff       	call   c000f859 <malloc>
c0019cfe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d01:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019d05:	e8 62 6a fe ff       	call   c000076c <strlen>
c0019d0a:	40                   	inc    eax
c0019d0b:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d0e:	e8 46 5b ff ff       	call   c000f859 <malloc>
c0019d13:	89 34 24             	mov    DWORD PTR [esp],esi
c0019d16:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019d1a:	e8 4d 6a fe ff       	call   c000076c <strlen>
c0019d1f:	83 c4 0c             	add    esp,0xc
c0019d22:	40                   	inc    eax
c0019d23:	50                   	push   eax
c0019d24:	6a 00                	push   0x0
c0019d26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019d2a:	e8 21 6a fe ff       	call   c0000750 <memset>
c0019d2f:	89 34 24             	mov    DWORD PTR [esp],esi
c0019d32:	e8 35 6a fe ff       	call   c000076c <strlen>
c0019d37:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019d3b:	8d 48 01             	lea    ecx,[eax+0x1]
c0019d3e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019d40:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d43:	89 de                	mov    esi,ebx
c0019d45:	e8 22 6a fe ff       	call   c000076c <strlen>
c0019d4a:	83 c4 0c             	add    esp,0xc
c0019d4d:	40                   	inc    eax
c0019d4e:	50                   	push   eax
c0019d4f:	6a 00                	push   0x0
c0019d51:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019d55:	e8 f6 69 fe ff       	call   c0000750 <memset>
c0019d5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d5d:	e8 0a 6a fe ff       	call   c000076c <strlen>
c0019d62:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019d66:	8d 48 01             	lea    ecx,[eax+0x1]
c0019d69:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019d6b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019d6e:	40                   	inc    eax
c0019d6f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019d72:	c1 e0 03             	shl    eax,0x3
c0019d75:	5a                   	pop    edx
c0019d76:	59                   	pop    ecx
c0019d77:	50                   	push   eax
c0019d78:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019d7b:	e8 c5 5a ff ff       	call   c000f845 <realloc>
c0019d80:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019d84:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019d87:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019d8a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019d8e:	b9 08 00 00 00       	mov    ecx,0x8
c0019d93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019d95:	83 c4 2c             	add    esp,0x2c
c0019d98:	5b                   	pop    ebx
c0019d99:	5e                   	pop    esi
c0019d9a:	5f                   	pop    edi
c0019d9b:	5d                   	pop    ebp
c0019d9c:	c3                   	ret    
c0019d9d:	90                   	nop

c0019d9e <EnvVarContainer::deleteEnv(char const*)>:
c0019d9e:	c3                   	ret    
c0019d9f:	90                   	nop

c0019da0 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019da0:	55                   	push   ebp
c0019da1:	57                   	push   edi
c0019da2:	56                   	push   esi
c0019da3:	53                   	push   ebx
c0019da4:	81 ec 38 01 00 00    	sub    esp,0x138
c0019daa:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0019db1:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0019db8:	68 14 01 00 00       	push   0x114
c0019dbd:	e8 97 5a ff ff       	call   c000f859 <malloc>
c0019dc2:	83 c4 0c             	add    esp,0xc
c0019dc5:	89 c3                	mov    ebx,eax
c0019dc7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019dca:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019dd1:	50                   	push   eax
c0019dd2:	e8 39 90 ff ff       	call   c0012e10 <File::File(char const*, Process*)>
c0019dd7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019dda:	e8 03 93 ff ff       	call   c00130e2 <File::exists()>
c0019ddf:	83 c4 10             	add    esp,0x10
c0019de2:	84 c0                	test   al,al
c0019de4:	75 31                	jne    c0019e17 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019de6:	50                   	push   eax
c0019de7:	50                   	push   eax
c0019de8:	6a 12                	push   0x12
c0019dea:	53                   	push   ebx
c0019deb:	e8 84 90 ff ff       	call   c0012e74 <File::open(FileOpenMode)>
c0019df0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019df2:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019df5:	89 34 24             	mov    DWORD PTR [esp],esi
c0019df8:	e8 6f 69 fe ff       	call   c000076c <strlen>
c0019dfd:	5a                   	pop    edx
c0019dfe:	31 d2                	xor    edx,edx
c0019e00:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019e04:	51                   	push   ecx
c0019e05:	56                   	push   esi
c0019e06:	52                   	push   edx
c0019e07:	50                   	push   eax
c0019e08:	53                   	push   ebx
c0019e09:	ff d7                	call   edi
c0019e0b:	83 c4 14             	add    esp,0x14
c0019e0e:	53                   	push   ebx
c0019e0f:	e8 be 90 ff ff       	call   c0012ed2 <File::close()>
c0019e14:	83 c4 10             	add    esp,0x10
c0019e17:	56                   	push   esi
c0019e18:	31 f6                	xor    esi,esi
c0019e1a:	68 00 01 00 00       	push   0x100
c0019e1f:	6a 00                	push   0x0
c0019e21:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019e25:	50                   	push   eax
c0019e26:	e8 25 69 fe ff       	call   c0000750 <memset>
c0019e2b:	5f                   	pop    edi
c0019e2c:	58                   	pop    eax
c0019e2d:	6a 01                	push   0x1
c0019e2f:	53                   	push   ebx
c0019e30:	e8 3f 90 ff ff       	call   c0012e74 <File::open(FileOpenMode)>
c0019e35:	83 c4 10             	add    esp,0x10
c0019e38:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019e40:	83 ec 0c             	sub    esp,0xc
c0019e43:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e45:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019e49:	51                   	push   ecx
c0019e4a:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019e4e:	52                   	push   edx
c0019e4f:	6a 00                	push   0x0
c0019e51:	6a 01                	push   0x1
c0019e53:	53                   	push   ebx
c0019e54:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019e57:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019e5b:	83 c4 20             	add    esp,0x20
c0019e5e:	3c 0d                	cmp    al,0xd
c0019e60:	0f 84 09 01 00 00    	je     c0019f6f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019e66:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019e6b:	0f 84 ef 00 00 00    	je     c0019f60 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019e71:	3c 0a                	cmp    al,0xa
c0019e73:	74 13                	je     c0019e88 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019e75:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019e7a:	74 0c                	je     c0019e88 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019e7c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019e82:	0f 8e d8 00 00 00    	jle    c0019f60 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019e88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019e8c:	83 ec 0c             	sub    esp,0xc
c0019e8f:	8d 78 01             	lea    edi,[eax+0x1]
c0019e92:	57                   	push   edi
c0019e93:	e8 c1 59 ff ff       	call   c000f859 <malloc>
c0019e98:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019e9c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019ea0:	8d 56 04             	lea    edx,[esi+0x4]
c0019ea3:	89 14 24             	mov    DWORD PTR [esp],edx
c0019ea6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019eaa:	e8 aa 59 ff ff       	call   c000f859 <malloc>
c0019eaf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019eb3:	83 c4 0c             	add    esp,0xc
c0019eb6:	57                   	push   edi
c0019eb7:	6a 00                	push   0x0
c0019eb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019ebd:	e8 8e 68 fe ff       	call   c0000750 <memset>
c0019ec2:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019ec6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019eca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019ece:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019ed0:	83 c4 0c             	add    esp,0xc
c0019ed3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019ed7:	52                   	push   edx
c0019ed8:	6a 00                	push   0x0
c0019eda:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019ede:	e8 6d 68 fe ff       	call   c0000750 <memset>
c0019ee3:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019ee7:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019eeb:	89 34 24             	mov    DWORD PTR [esp],esi
c0019eee:	e8 79 68 fe ff       	call   c000076c <strlen>
c0019ef3:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019ef7:	89 c1                	mov    ecx,eax
c0019ef9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019efb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019efe:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0019f01:	40                   	inc    eax
c0019f02:	83 c4 10             	add    esp,0x10
c0019f05:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019f08:	85 d2                	test   edx,edx
c0019f0a:	75 0c                	jne    c0019f18 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0019f0c:	83 ec 0c             	sub    esp,0xc
c0019f0f:	6a 08                	push   0x8
c0019f11:	e8 43 59 ff ff       	call   c000f859 <malloc>
c0019f16:	eb 0c                	jmp    c0019f24 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0019f18:	c1 e0 03             	shl    eax,0x3
c0019f1b:	51                   	push   ecx
c0019f1c:	51                   	push   ecx
c0019f1d:	50                   	push   eax
c0019f1e:	52                   	push   edx
c0019f1f:	e8 21 59 ff ff       	call   c000f845 <realloc>
c0019f24:	83 c4 10             	add    esp,0x10
c0019f27:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019f2a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019f2d:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0019f30:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019f34:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019f38:	b9 08 00 00 00       	mov    ecx,0x8
c0019f3d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019f3f:	31 f6                	xor    esi,esi
c0019f41:	50                   	push   eax
c0019f42:	68 00 01 00 00       	push   0x100
c0019f47:	6a 00                	push   0x0
c0019f49:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019f4d:	50                   	push   eax
c0019f4e:	e8 fd 67 fe ff       	call   c0000750 <memset>
c0019f53:	83 c4 10             	add    esp,0x10
c0019f56:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019f5e:	eb 0f                	jmp    c0019f6f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019f60:	3c 3d                	cmp    al,0x3d
c0019f62:	74 07                	je     c0019f6b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0019f64:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0019f68:	46                   	inc    esi
c0019f69:	eb 04                	jmp    c0019f6f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019f6b:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019f6f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019f74:	0f 85 c6 fe ff ff    	jne    c0019e40 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0019f7a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019f80:	5b                   	pop    ebx
c0019f81:	5e                   	pop    esi
c0019f82:	5f                   	pop    edi
c0019f83:	5d                   	pop    ebp
c0019f84:	c3                   	ret    
c0019f85:	90                   	nop

c0019f86 <EnvVarContainer::__loadSystem()>:
c0019f86:	83 ec 10             	sub    esp,0x10
c0019f89:	68 40 d9 02 c0       	push   0xc002d940
c0019f8e:	68 e1 bf 02 c0       	push   0xc002bfe1
c0019f93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f97:	e8 04 fe ff ff       	call   c0019da0 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019f9c:	83 c4 1c             	add    esp,0x1c
c0019f9f:	c3                   	ret    

c0019fa0 <EnvVarContainer::__loadUser()>:
c0019fa0:	c3                   	ret    
c0019fa1:	90                   	nop

c0019fa2 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019fa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fa6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019fac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fb0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019fb4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019fb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fbb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019fc2:	90                   	nop
c0019fc3:	c3                   	ret    

c0019fc4 <EnvVarContainer::~EnvVarContainer()>:
c0019fc4:	83 ec 0c             	sub    esp,0xc
c0019fc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fcb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019fce:	85 c0                	test   eax,eax
c0019fd0:	74 1d                	je     c0019fef <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019fd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0019fd8:	85 c0                	test   eax,eax
c0019fda:	74 13                	je     c0019fef <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019fe3:	83 ec 0c             	sub    esp,0xc
c0019fe6:	50                   	push   eax
c0019fe7:	e8 7d 58 ff ff       	call   c000f869 <free>
c0019fec:	83 c4 10             	add    esp,0x10
c0019fef:	90                   	nop
c0019ff0:	83 c4 0c             	add    esp,0xc
c0019ff3:	c3                   	ret    

c0019ff4 <Krnl::getEnv(Process*, char const*)>:
c0019ff4:	53                   	push   ebx
c0019ff5:	83 ec 08             	sub    esp,0x8
c0019ff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ffc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a000:	39 05 30 f9 02 c0    	cmp    DWORD PTR ds:0xc002f930,eax
c001a006:	74 04                	je     c001a00c <Krnl::getEnv(Process*, char const*)+0x18>
c001a008:	85 c0                	test   eax,eax
c001a00a:	75 0b                	jne    c001a017 <Krnl::getEnv(Process*, char const*)+0x23>
c001a00c:	a1 14 ef 02 c0       	mov    eax,ds:0xc002ef14
c001a011:	85 c0                	test   eax,eax
c001a013:	75 19                	jne    c001a02e <Krnl::getEnv(Process*, char const*)+0x3a>
c001a015:	eb 27                	jmp    c001a03e <Krnl::getEnv(Process*, char const*)+0x4a>
c001a017:	52                   	push   edx
c001a018:	52                   	push   edx
c001a019:	53                   	push   ebx
c001a01a:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a020:	e8 79 fc ff ff       	call   c0019c9e <EnvVarContainer::getEnv(char const*)>
c001a025:	83 c4 10             	add    esp,0x10
c001a028:	85 c0                	test   eax,eax
c001a02a:	75 28                	jne    c001a054 <Krnl::getEnv(Process*, char const*)+0x60>
c001a02c:	eb de                	jmp    c001a00c <Krnl::getEnv(Process*, char const*)+0x18>
c001a02e:	52                   	push   edx
c001a02f:	52                   	push   edx
c001a030:	53                   	push   ebx
c001a031:	50                   	push   eax
c001a032:	e8 67 fc ff ff       	call   c0019c9e <EnvVarContainer::getEnv(char const*)>
c001a037:	83 c4 10             	add    esp,0x10
c001a03a:	85 c0                	test   eax,eax
c001a03c:	75 16                	jne    c001a054 <Krnl::getEnv(Process*, char const*)+0x60>
c001a03e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a042:	a1 18 ef 02 c0       	mov    eax,ds:0xc002ef18
c001a047:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a04b:	83 c4 08             	add    esp,0x8
c001a04e:	5b                   	pop    ebx
c001a04f:	e9 4a fc ff ff       	jmp    c0019c9e <EnvVarContainer::getEnv(char const*)>
c001a054:	83 c4 08             	add    esp,0x8
c001a057:	5b                   	pop    ebx
c001a058:	c3                   	ret    

c001a059 <Krnl::setEnvSystem(char const*, char const*)>:
c001a059:	83 ec 10             	sub    esp,0x10
c001a05c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a060:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a064:	ff 35 18 ef 02 c0    	push   DWORD PTR ds:0xc002ef18
c001a06a:	e8 6d fc ff ff       	call   c0019cdc <EnvVarContainer::setEnv(char const*, char const*)>
c001a06f:	83 c4 1c             	add    esp,0x1c
c001a072:	c3                   	ret    

c001a073 <Krnl::setEnvUser(char const*, char const*)>:
c001a073:	a1 14 ef 02 c0       	mov    eax,ds:0xc002ef14
c001a078:	85 c0                	test   eax,eax
c001a07a:	74 15                	je     c001a091 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a07c:	83 ec 10             	sub    esp,0x10
c001a07f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a083:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a087:	50                   	push   eax
c001a088:	e8 4f fc ff ff       	call   c0019cdc <EnvVarContainer::setEnv(char const*, char const*)>
c001a08d:	83 c4 1c             	add    esp,0x1c
c001a090:	c3                   	ret    
c001a091:	c3                   	ret    

c001a092 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a092:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a096:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a09c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a0a0:	e9 37 fc ff ff       	jmp    c0019cdc <EnvVarContainer::setEnv(char const*, char const*)>

c001a0a5 <Krnl::deleteEnvSystem(char const*)>:
c001a0a5:	c3                   	ret    

c001a0a6 <Krnl::deleteEnvUser(char const*)>:
c001a0a6:	c3                   	ret    

c001a0a7 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a0a7:	c3                   	ret    

c001a0a8 <Krnl::newProcessEnv(Process*)>:
c001a0a8:	83 ec 28             	sub    esp,0x28
c001a0ab:	6a 0c                	push   0xc
c001a0ad:	e8 a7 57 ff ff       	call   c000f859 <malloc>
c001a0b2:	5a                   	pop    edx
c001a0b3:	59                   	pop    ecx
c001a0b4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a0b8:	50                   	push   eax
c001a0b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a0bd:	e8 e0 fe ff ff       	call   c0019fa2 <EnvVarContainer::EnvVarContainer(Process*)>
c001a0c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a0c6:	83 c4 2c             	add    esp,0x2c
c001a0c9:	c3                   	ret    

c001a0ca <Krnl::copyProcessEnv(Process*, Process*)>:
c001a0ca:	57                   	push   edi
c001a0cb:	56                   	push   esi
c001a0cc:	53                   	push   ebx
c001a0cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0d1:	83 ec 0c             	sub    esp,0xc
c001a0d4:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c001a0da:	6a 0c                	push   0xc
c001a0dc:	e8 78 57 ff ff       	call   c000f859 <malloc>
c001a0e1:	89 c3                	mov    ebx,eax
c001a0e3:	58                   	pop    eax
c001a0e4:	5a                   	pop    edx
c001a0e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0e9:	53                   	push   ebx
c001a0ea:	e8 b3 fe ff ff       	call   c0019fa2 <EnvVarContainer::EnvVarContainer(Process*)>
c001a0ef:	8b 07                	mov    eax,DWORD PTR [edi]
c001a0f1:	89 03                	mov    DWORD PTR [ebx],eax
c001a0f3:	c1 e0 03             	shl    eax,0x3
c001a0f6:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0f9:	e8 5b 57 ff ff       	call   c000f859 <malloc>
c001a0fe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a101:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001a103:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001a106:	c1 e1 03             	shl    ecx,0x3
c001a109:	89 c7                	mov    edi,eax
c001a10b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a10d:	83 c4 10             	add    esp,0x10
c001a110:	89 d8                	mov    eax,ebx
c001a112:	5b                   	pop    ebx
c001a113:	5e                   	pop    esi
c001a114:	5f                   	pop    edi
c001a115:	c3                   	ret    

c001a116 <Krnl::loadSystemEnv()>:
c001a116:	53                   	push   ebx
c001a117:	83 ec 14             	sub    esp,0x14
c001a11a:	6a 0c                	push   0xc
c001a11c:	e8 38 57 ff ff       	call   c000f859 <malloc>
c001a121:	89 c3                	mov    ebx,eax
c001a123:	58                   	pop    eax
c001a124:	5a                   	pop    edx
c001a125:	ff 35 30 f9 02 c0    	push   DWORD PTR ds:0xc002f930
c001a12b:	53                   	push   ebx
c001a12c:	e8 71 fe ff ff       	call   c0019fa2 <EnvVarContainer::EnvVarContainer(Process*)>
c001a131:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a134:	89 1d 18 ef 02 c0    	mov    DWORD PTR ds:0xc002ef18,ebx
c001a13a:	e8 47 fe ff ff       	call   c0019f86 <EnvVarContainer::__loadSystem()>
c001a13f:	83 c4 18             	add    esp,0x18
c001a142:	5b                   	pop    ebx
c001a143:	c3                   	ret    

c001a144 <Krnl::loadUserEnv()>:
c001a144:	53                   	push   ebx
c001a145:	83 ec 14             	sub    esp,0x14
c001a148:	6a 0c                	push   0xc
c001a14a:	e8 0a 57 ff ff       	call   c000f859 <malloc>
c001a14f:	89 c3                	mov    ebx,eax
c001a151:	58                   	pop    eax
c001a152:	5a                   	pop    edx
c001a153:	ff 35 30 f9 02 c0    	push   DWORD PTR ds:0xc002f930
c001a159:	53                   	push   ebx
c001a15a:	e8 43 fe ff ff       	call   c0019fa2 <EnvVarContainer::EnvVarContainer(Process*)>
c001a15f:	89 1d 14 ef 02 c0    	mov    DWORD PTR ds:0xc002ef14,ebx
c001a165:	83 c4 18             	add    esp,0x18
c001a168:	5b                   	pop    ebx
c001a169:	c3                   	ret    

c001a16a <Krnl::flushEnv()>:
c001a16a:	c3                   	ret    

c001a16b <Krnl::getProcessTotalEnvCount(Process*)>:
c001a16b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a16f:	8b 15 14 ef 02 c0    	mov    edx,DWORD PTR ds:0xc002ef14
c001a175:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a17b:	a1 18 ef 02 c0       	mov    eax,ds:0xc002ef18
c001a180:	8b 00                	mov    eax,DWORD PTR [eax]
c001a182:	03 01                	add    eax,DWORD PTR [ecx]
c001a184:	85 d2                	test   edx,edx
c001a186:	74 02                	je     c001a18a <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a188:	03 02                	add    eax,DWORD PTR [edx]
c001a18a:	c3                   	ret    

c001a18b <Krnl::getProcessEnvPair(Process*, int)>:
c001a18b:	57                   	push   edi
c001a18c:	56                   	push   esi
c001a18d:	8b 35 14 ef 02 c0    	mov    esi,DWORD PTR ds:0xc002ef14
c001a193:	53                   	push   ebx
c001a194:	85 f6                	test   esi,esi
c001a196:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a19a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a19e:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a1a4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a1a8:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a1aa:	75 16                	jne    c001a1c2 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c001a1ac:	39 c2                	cmp    edx,eax
c001a1ae:	7c 16                	jl     c001a1c6 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001a1b0:	8b 0d 18 ef 02 c0    	mov    ecx,DWORD PTR ds:0xc002ef18
c001a1b6:	8b 31                	mov    esi,DWORD PTR [ecx]
c001a1b8:	01 c6                	add    esi,eax
c001a1ba:	39 d6                	cmp    esi,edx
c001a1bc:	7e 3c                	jle    c001a1fa <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001a1be:	29 c2                	sub    edx,eax
c001a1c0:	eb 04                	jmp    c001a1c6 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001a1c2:	39 c2                	cmp    edx,eax
c001a1c4:	7d 05                	jge    c001a1cb <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001a1c6:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a1c9:	eb 20                	jmp    c001a1eb <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001a1cb:	8b 3e                	mov    edi,DWORD PTR [esi]
c001a1cd:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001a1d0:	39 d1                	cmp    ecx,edx
c001a1d2:	7e 04                	jle    c001a1d8 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c001a1d4:	29 c2                	sub    edx,eax
c001a1d6:	eb 10                	jmp    c001a1e8 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001a1d8:	8b 35 18 ef 02 c0    	mov    esi,DWORD PTR ds:0xc002ef18
c001a1de:	03 0e                	add    ecx,DWORD PTR [esi]
c001a1e0:	39 d1                	cmp    ecx,edx
c001a1e2:	7e 16                	jle    c001a1fa <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001a1e4:	29 c2                	sub    edx,eax
c001a1e6:	29 fa                	sub    edx,edi
c001a1e8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a1eb:	8d 14 d0             	lea    edx,[eax+edx*8]
c001a1ee:	8b 02                	mov    eax,DWORD PTR [edx]
c001a1f0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001a1f3:	89 03                	mov    DWORD PTR [ebx],eax
c001a1f5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a1f8:	eb 1d                	jmp    c001a217 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001a1fa:	83 ec 0c             	sub    esp,0xc
c001a1fd:	68 03 c0 02 c0       	push   0xc002c003
c001a202:	e8 18 00 00 00       	call   c001a21f <Krnl::panic(char const*)>
c001a207:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a20d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a214:	83 c4 10             	add    esp,0x10
c001a217:	89 d8                	mov    eax,ebx
c001a219:	5b                   	pop    ebx
c001a21a:	5e                   	pop    esi
c001a21b:	5f                   	pop    edi
c001a21c:	c2 04 00             	ret    0x4

c001a21f <Krnl::panic(char const*)>:
c001a21f:	55                   	push   ebp
c001a220:	89 e5                	mov    ebp,esp
c001a222:	53                   	push   ebx
c001a223:	83 ec 10             	sub    esp,0x10
c001a226:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a229:	fa                   	cli    
c001a22a:	c6 05 24 ef 02 c0 01 	mov    BYTE PTR ds:0xc002ef24,0x1
c001a231:	53                   	push   ebx
c001a232:	e8 7c 56 ff ff       	call   c000f8b3 <Krnl::setBootMessage(char const*)>
c001a237:	58                   	pop    eax
c001a238:	c6 05 40 d3 02 c0 00 	mov    BYTE PTR ds:0xc002d340,0x0
c001a23f:	5a                   	pop    edx
c001a240:	53                   	push   ebx
c001a241:	68 1d c0 02 c0       	push   0xc002c01d
c001a246:	e8 66 86 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c001a24b:	59                   	pop    ecx
c001a24c:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001a251:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a257:	e8 b7 63 ff ff       	call   c0010613 <setActiveTerminal(VgaText*)>
c001a25c:	83 c4 0c             	add    esp,0xc
c001a25f:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001a264:	6a 01                	push   0x1
c001a266:	6a 0f                	push   0xf
c001a268:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a26e:	e8 ff 61 ff ff       	call   c0010472 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a273:	58                   	pop    eax
c001a274:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001a279:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a27f:	e8 10 67 ff ff       	call   c0010994 <VgaText::clearScreen()>
c001a284:	58                   	pop    eax
c001a285:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001a28a:	5a                   	pop    edx
c001a28b:	68 36 c0 02 c0       	push   0xc002c036
c001a290:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a296:	e8 85 68 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c001a29b:	59                   	pop    ecx
c001a29c:	58                   	pop    eax
c001a29d:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001a2a2:	68 dc c0 02 c0       	push   0xc002c0dc
c001a2a7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2ad:	e8 6e 68 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c001a2b2:	58                   	pop    eax
c001a2b3:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001a2b8:	5a                   	pop    edx
c001a2b9:	68 52 c0 02 c0       	push   0xc002c052
c001a2be:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2c4:	e8 57 68 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c001a2c9:	59                   	pop    ecx
c001a2ca:	58                   	pop    eax
c001a2cb:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001a2d0:	53                   	push   ebx
c001a2d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2d7:	e8 44 68 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c001a2dc:	58                   	pop    eax
c001a2dd:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001a2e2:	5a                   	pop    edx
c001a2e3:	68 72 c0 02 c0       	push   0xc002c072
c001a2e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2ee:	e8 2d 68 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c001a2f3:	a1 20 ef 02 c0       	mov    eax,ds:0xc002ef20
c001a2f8:	83 c4 10             	add    esp,0x10
c001a2fb:	85 c0                	test   eax,eax
c001a2fd:	74 02                	je     c001a301 <Krnl::panic(char const*)+0xe2>
c001a2ff:	ff d0                	call   eax
c001a301:	83 ec 0c             	sub    esp,0xc
c001a304:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a307:	e8 8f 30 00 00       	call   c001d39b <Thr::getDriverNameFromAddress(unsigned long)>
c001a30c:	83 c4 10             	add    esp,0x10
c001a30f:	89 c3                	mov    ebx,eax
c001a311:	85 c0                	test   eax,eax
c001a313:	0f 84 4e 02 00 00    	je     c001a567 <Krnl::panic(char const*)+0x348>
c001a319:	83 ec 08             	sub    esp,0x8
c001a31c:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001a321:	68 18 c1 02 c0       	push   0xc002c118
c001a326:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a32c:	e8 ef 67 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c001a331:	58                   	pop    eax
c001a332:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001a337:	5a                   	pop    edx
c001a338:	68 52 c0 02 c0       	push   0xc002c052
c001a33d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a343:	e8 d8 67 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c001a348:	59                   	pop    ecx
c001a349:	58                   	pop    eax
c001a34a:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001a34f:	53                   	push   ebx
c001a350:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a356:	e8 c5 67 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c001a35b:	83 c4 10             	add    esp,0x10
c001a35e:	83 ec 08             	sub    esp,0x8
c001a361:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001a366:	68 71 c0 02 c0       	push   0xc002c071
c001a36b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a371:	e8 aa 67 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c001a376:	58                   	pop    eax
c001a377:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001a37c:	5a                   	pop    edx
c001a37d:	68 70 c1 02 c0       	push   0xc002c170
c001a382:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a388:	e8 93 67 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c001a38d:	59                   	pop    ecx
c001a38e:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001a393:	5b                   	pop    ebx
c001a394:	68 b0 c1 02 c0       	push   0xc002c1b0
c001a399:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a39f:	e8 7c 67 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c001a3a4:	58                   	pop    eax
c001a3a5:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001a3aa:	5a                   	pop    edx
c001a3ab:	68 5d c0 02 c0       	push   0xc002c05d
c001a3b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3b6:	e8 65 67 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c001a3bb:	59                   	pop    ecx
c001a3bc:	5b                   	pop    ebx
c001a3bd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a3c0:	68 75 c0 02 c0       	push   0xc002c075
c001a3c5:	e8 e7 84 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c001a3ca:	58                   	pop    eax
c001a3cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a3ce:	5a                   	pop    edx
c001a3cf:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a3d2:	68 7e c0 02 c0       	push   0xc002c07e
c001a3d7:	e8 d5 84 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c001a3dc:	59                   	pop    ecx
c001a3dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a3e0:	5b                   	pop    ebx
c001a3e1:	8b 00                	mov    eax,DWORD PTR [eax]
c001a3e3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a3e6:	68 87 c0 02 c0       	push   0xc002c087
c001a3eb:	e8 c1 84 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c001a3f0:	58                   	pop    eax
c001a3f1:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001a3f6:	5a                   	pop    edx
c001a3f7:	68 f4 c1 02 c0       	push   0xc002c1f4
c001a3fc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a402:	e8 19 67 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c001a407:	59                   	pop    ecx
c001a408:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001a40d:	5b                   	pop    ebx
c001a40e:	68 90 c0 02 c0       	push   0xc002c090
c001a413:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a419:	e8 02 67 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c001a41e:	0f 20 c0             	mov    eax,cr0
c001a421:	5a                   	pop    edx
c001a422:	59                   	pop    ecx
c001a423:	50                   	push   eax
c001a424:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001a429:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a42f:	e8 a6 66 ff ff       	call   c0010ada <VgaText::putx(unsigned int)>
c001a434:	5b                   	pop    ebx
c001a435:	58                   	pop    eax
c001a436:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001a43b:	68 9a c0 02 c0       	push   0xc002c09a
c001a440:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a446:	e8 d5 66 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c001a44b:	0f 20 d0             	mov    eax,cr2
c001a44e:	5a                   	pop    edx
c001a44f:	59                   	pop    ecx
c001a450:	50                   	push   eax
c001a451:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001a456:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a45c:	e8 79 66 ff ff       	call   c0010ada <VgaText::putx(unsigned int)>
c001a461:	5b                   	pop    ebx
c001a462:	58                   	pop    eax
c001a463:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001a468:	68 a4 c0 02 c0       	push   0xc002c0a4
c001a46d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a473:	e8 a8 66 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c001a478:	0f 20 d8             	mov    eax,cr3
c001a47b:	5a                   	pop    edx
c001a47c:	59                   	pop    ecx
c001a47d:	50                   	push   eax
c001a47e:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001a483:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a489:	e8 4c 66 ff ff       	call   c0010ada <VgaText::putx(unsigned int)>
c001a48e:	5b                   	pop    ebx
c001a48f:	58                   	pop    eax
c001a490:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001a495:	68 b7 c0 02 c0       	push   0xc002c0b7
c001a49a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4a0:	e8 7b 66 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c001a4a5:	0f 20 e0             	mov    eax,cr4
c001a4a8:	5a                   	pop    edx
c001a4a9:	59                   	pop    ecx
c001a4aa:	50                   	push   eax
c001a4ab:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001a4b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4b6:	e8 1f 66 ff ff       	call   c0010ada <VgaText::putx(unsigned int)>
c001a4bb:	5b                   	pop    ebx
c001a4bc:	58                   	pop    eax
c001a4bd:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001a4c2:	68 c1 c0 02 c0       	push   0xc002c0c1
c001a4c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4cd:	e8 4e 66 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c001a4d2:	5a                   	pop    edx
c001a4d3:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001a4d8:	59                   	pop    ecx
c001a4d9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a4df:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a4e2:	50                   	push   eax
c001a4e3:	e8 f2 65 ff ff       	call   c0010ada <VgaText::putx(unsigned int)>
c001a4e8:	5b                   	pop    ebx
c001a4e9:	58                   	pop    eax
c001a4ea:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001a4ef:	68 d8 c0 02 c0       	push   0xc002c0d8
c001a4f4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4fa:	e8 21 66 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c001a4ff:	5a                   	pop    edx
c001a500:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001a505:	59                   	pop    ecx
c001a506:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a50c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a50f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a512:	50                   	push   eax
c001a513:	e8 c2 65 ff ff       	call   c0010ada <VgaText::putx(unsigned int)>
c001a518:	5b                   	pop    ebx
c001a519:	58                   	pop    eax
c001a51a:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001a51f:	68 d8 c0 02 c0       	push   0xc002c0d8
c001a524:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a52a:	e8 f1 65 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c001a52f:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001a534:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a537:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a53d:	8b 12                	mov    edx,DWORD PTR [edx]
c001a53f:	59                   	pop    ecx
c001a540:	5b                   	pop    ebx
c001a541:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a544:	50                   	push   eax
c001a545:	e8 90 65 ff ff       	call   c0010ada <VgaText::putx(unsigned int)>
c001a54a:	83 c4 10             	add    esp,0x10
c001a54d:	b2 fe                	mov    dl,0xfe
c001a54f:	e4 60                	in     al,0x60
c001a551:	3c 1c                	cmp    al,0x1c
c001a553:	74 04                	je     c001a559 <Krnl::panic(char const*)+0x33a>
c001a555:	3c 5a                	cmp    al,0x5a
c001a557:	75 f6                	jne    c001a54f <Krnl::panic(char const*)+0x330>
c001a559:	e4 64                	in     al,0x64
c001a55b:	a8 02                	test   al,0x2
c001a55d:	75 fa                	jne    c001a559 <Krnl::panic(char const*)+0x33a>
c001a55f:	88 d0                	mov    al,dl
c001a561:	e6 64                	out    0x64,al
c001a563:	fa                   	cli    
c001a564:	f4                   	hlt    
c001a565:	eb e8                	jmp    c001a54f <Krnl::panic(char const*)+0x330>
c001a567:	50                   	push   eax
c001a568:	50                   	push   eax
c001a569:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001a56e:	68 44 c1 02 c0       	push   0xc002c144
c001a573:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a579:	e8 a2 65 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c001a57e:	58                   	pop    eax
c001a57f:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001a584:	5a                   	pop    edx
c001a585:	68 52 c0 02 c0       	push   0xc002c052
c001a58a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a590:	e8 8b 65 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c001a595:	59                   	pop    ecx
c001a596:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a59b:	5b                   	pop    ebx
c001a59c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a59f:	83 c0 0c             	add    eax,0xc
c001a5a2:	50                   	push   eax
c001a5a3:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001a5a8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5ae:	e8 6d 65 ff ff       	call   c0010b20 <VgaText::puts(char const*)>
c001a5b3:	83 c4 10             	add    esp,0x10
c001a5b6:	e9 a3 fd ff ff       	jmp    c001a35e <Krnl::panic(char const*)+0x13f>

c001a5bb <Net::switchEndian16(unsigned short)>:
c001a5bb:	83 ec 04             	sub    esp,0x4
c001a5be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a5c2:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a5c6:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a5ca:	c1 f8 08             	sar    eax,0x8
c001a5cd:	89 c2                	mov    edx,eax
c001a5cf:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a5d3:	c1 e0 08             	shl    eax,0x8
c001a5d6:	09 d0                	or     eax,edx
c001a5d8:	83 c4 04             	add    esp,0x4
c001a5db:	c3                   	ret    

c001a5dc <Net::switchEndian32(unsigned int)>:
c001a5dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5e0:	c1 e8 18             	shr    eax,0x18
c001a5e3:	89 c2                	mov    edx,eax
c001a5e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5e9:	c1 e0 08             	shl    eax,0x8
c001a5ec:	25 00 00 ff 00       	and    eax,0xff0000
c001a5f1:	09 c2                	or     edx,eax
c001a5f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5f7:	c1 e8 08             	shr    eax,0x8
c001a5fa:	25 00 ff 00 00       	and    eax,0xff00
c001a5ff:	09 c2                	or     edx,eax
c001a601:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a605:	c1 e0 18             	shl    eax,0x18
c001a608:	09 d0                	or     eax,edx
c001a60a:	c3                   	ret    

c001a60b <Net::crc32Calc(unsigned char*, int)>:
c001a60b:	83 ec 10             	sub    esp,0x10
c001a60e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a613:	75 07                	jne    c001a61c <Net::crc32Calc(unsigned char*, int)+0x11>
c001a615:	b8 00 00 00 00       	mov    eax,0x0
c001a61a:	eb 7c                	jmp    c001a698 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a61c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a621:	7f 07                	jg     c001a62a <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a623:	b8 00 00 00 00       	mov    eax,0x0
c001a628:	eb 6e                	jmp    c001a698 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a62a:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a632:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a63a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a63e:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a642:	7d 4e                	jge    c001a692 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a644:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a648:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a64c:	01 d0                	add    eax,edx
c001a64e:	8a 00                	mov    al,BYTE PTR [eax]
c001a650:	0f b6 c0             	movzx  eax,al
c001a653:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a657:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a65f:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a664:	7f 26                	jg     c001a68c <Net::crc32Calc(unsigned char*, int)+0x81>
c001a666:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a66a:	83 e0 01             	and    eax,0x1
c001a66d:	74 0d                	je     c001a67c <Net::crc32Calc(unsigned char*, int)+0x71>
c001a66f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a673:	d1 e8                	shr    eax,1
c001a675:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a67a:	eb 06                	jmp    c001a682 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a67c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a680:	d1 e8                	shr    eax,1
c001a682:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a686:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a68a:	eb d3                	jmp    c001a65f <Net::crc32Calc(unsigned char*, int)+0x54>
c001a68c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a690:	eb a8                	jmp    c001a63a <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a692:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a696:	f7 d0                	not    eax
c001a698:	83 c4 10             	add    esp,0x10
c001a69b:	c3                   	ret    

c001a69c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a69c:	57                   	push   edi
c001a69d:	56                   	push   esi
c001a69e:	53                   	push   ebx
c001a69f:	83 ec 60             	sub    esp,0x60
c001a6a2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a6a9:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a6ad:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a6b5:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a6ba:	7f 1a                	jg     c001a6d6 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a6bc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a6c3:	8d 50 01             	lea    edx,[eax+0x1]
c001a6c6:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a6cd:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a6d0:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a6d4:	eb df                	jmp    c001a6b5 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a6d6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a6dd:	8d 50 01             	lea    edx,[eax+0x1]
c001a6e0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a6e7:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a6ea:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a6f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a6f5:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a6f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a6fd:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a705:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a709:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a70d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a711:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a715:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a719:	89 c6                	mov    esi,eax
c001a71b:	89 d7                	mov    edi,edx
c001a71d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a71f:	89 c8                	mov    eax,ecx
c001a721:	89 fa                	mov    edx,edi
c001a723:	89 f3                	mov    ebx,esi
c001a725:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a729:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a72d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a730:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a738:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a73f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a743:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a747:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a74b:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a753:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a757:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a75b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a75f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a763:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a767:	89 c6                	mov    esi,eax
c001a769:	89 d7                	mov    edi,edx
c001a76b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a76d:	89 c8                	mov    eax,ecx
c001a76f:	89 fa                	mov    edx,edi
c001a771:	89 f3                	mov    ebx,esi
c001a773:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a777:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a77b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a77f:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a787:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a78e:	0f b7 c0             	movzx  eax,ax
c001a791:	c1 f8 08             	sar    eax,0x8
c001a794:	89 c1                	mov    ecx,eax
c001a796:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a79d:	8d 50 01             	lea    edx,[eax+0x1]
c001a7a0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a7a7:	88 ca                	mov    dl,cl
c001a7a9:	88 10                	mov    BYTE PTR [eax],dl
c001a7ab:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a7b2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a7b9:	8d 48 01             	lea    ecx,[eax+0x1]
c001a7bc:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a7c3:	88 10                	mov    BYTE PTR [eax],dl
c001a7c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a7c9:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a7cd:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a7d4:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a7d8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a7dc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a7e0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a7e4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a7e8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a7ec:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a7f0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a7f4:	89 c6                	mov    esi,eax
c001a7f6:	89 d7                	mov    edi,edx
c001a7f8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a7fa:	89 c8                	mov    eax,ecx
c001a7fc:	89 fa                	mov    edx,edi
c001a7fe:	89 f3                	mov    ebx,esi
c001a800:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a804:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a808:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a80c:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a810:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a817:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a81e:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a822:	50                   	push   eax
c001a823:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a827:	e8 df fd ff ff       	call   c001a60b <Net::crc32Calc(unsigned char*, int)>
c001a82c:	83 c4 08             	add    esp,0x8
c001a82f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a833:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a837:	c1 e8 18             	shr    eax,0x18
c001a83a:	89 c1                	mov    ecx,eax
c001a83c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a843:	8d 50 01             	lea    edx,[eax+0x1]
c001a846:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a84d:	88 ca                	mov    dl,cl
c001a84f:	88 10                	mov    BYTE PTR [eax],dl
c001a851:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a855:	c1 e8 10             	shr    eax,0x10
c001a858:	89 c1                	mov    ecx,eax
c001a85a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a861:	8d 50 01             	lea    edx,[eax+0x1]
c001a864:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a86b:	88 ca                	mov    dl,cl
c001a86d:	88 10                	mov    BYTE PTR [eax],dl
c001a86f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a873:	c1 e8 08             	shr    eax,0x8
c001a876:	89 c1                	mov    ecx,eax
c001a878:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a87f:	8d 50 01             	lea    edx,[eax+0x1]
c001a882:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a889:	88 ca                	mov    dl,cl
c001a88b:	88 10                	mov    BYTE PTR [eax],dl
c001a88d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a894:	8d 50 01             	lea    edx,[eax+0x1]
c001a897:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a89e:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a8a2:	88 10                	mov    BYTE PTR [eax],dl
c001a8a4:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a8a8:	83 c4 60             	add    esp,0x60
c001a8ab:	5b                   	pop    ebx
c001a8ac:	5e                   	pop    esi
c001a8ad:	5f                   	pop    edi
c001a8ae:	c3                   	ret    

c001a8af <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a8af:	57                   	push   edi
c001a8b0:	56                   	push   esi
c001a8b1:	53                   	push   ebx
c001a8b2:	83 ec 70             	sub    esp,0x70
c001a8b5:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a8bc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a8c0:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a8c8:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a8cf:	83 c0 0e             	add    eax,0xe
c001a8d2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a8d6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a8dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a8e1:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a8e9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a8ed:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a8f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a8f5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a8f9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a8fd:	89 c6                	mov    esi,eax
c001a8ff:	89 d7                	mov    edi,edx
c001a901:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a903:	89 c8                	mov    eax,ecx
c001a905:	89 fa                	mov    edx,edi
c001a907:	89 f3                	mov    ebx,esi
c001a909:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a90d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a911:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a915:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a91d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a924:	83 c0 08             	add    eax,0x8
c001a927:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001a92b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a932:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a936:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001a93e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a942:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a946:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a94a:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a94e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a952:	89 c6                	mov    esi,eax
c001a954:	89 d7                	mov    edi,edx
c001a956:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a958:	89 c8                	mov    eax,ecx
c001a95a:	89 fa                	mov    edx,edi
c001a95c:	89 f3                	mov    ebx,esi
c001a95e:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a962:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a966:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a96a:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a972:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a979:	8d 50 01             	lea    edx,[eax+0x1]
c001a97c:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a983:	8a 00                	mov    al,BYTE PTR [eax]
c001a985:	0f b6 c0             	movzx  eax,al
c001a988:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001a98d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a994:	8d 50 01             	lea    edx,[eax+0x1]
c001a997:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a99e:	8a 00                	mov    al,BYTE PTR [eax]
c001a9a0:	0f b6 c0             	movzx  eax,al
c001a9a3:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001a9a8:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001a9ad:	c1 e0 08             	shl    eax,0x8
c001a9b0:	89 c2                	mov    edx,eax
c001a9b2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a9b6:	09 d0                	or     eax,edx
c001a9b8:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a9bf:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a9c3:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001a9cb:	75 46                	jne    c001aa13 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a9cd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a9d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a9d7:	66 3d dc 05          	cmp    ax,0x5dc
c001a9db:	77 16                	ja     c001a9f3 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001a9dd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a9e4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a9e7:	0f b7 c0             	movzx  eax,ax
c001a9ea:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a9f1:	eb 20                	jmp    c001aa13 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a9f3:	83 ec 0c             	sub    esp,0xc
c001a9f6:	68 1c c2 02 c0       	push   0xc002c21c
c001a9fb:	e8 b1 7e ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c001aa00:	83 c4 10             	add    esp,0x10
c001aa03:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aa0a:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001aa0e:	e9 17 01 00 00       	jmp    c001ab2a <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001aa13:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aa1a:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001aa21:	8b 12                	mov    edx,DWORD PTR [edx]
c001aa23:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001aa27:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001aa2e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001aa32:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001aa36:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aa3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aa3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa42:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aa46:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001aa4a:	89 c6                	mov    esi,eax
c001aa4c:	89 d7                	mov    edi,edx
c001aa4e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa50:	89 c8                	mov    eax,ecx
c001aa52:	89 fa                	mov    edx,edi
c001aa54:	89 f3                	mov    ebx,esi
c001aa56:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001aa5a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001aa5e:	89 04 24             	mov    DWORD PTR [esp],eax
c001aa61:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aa68:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001aa6f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa76:	8d 50 01             	lea    edx,[eax+0x1]
c001aa79:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001aa80:	8a 00                	mov    al,BYTE PTR [eax]
c001aa82:	0f b6 c0             	movzx  eax,al
c001aa85:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001aa89:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa90:	8d 50 01             	lea    edx,[eax+0x1]
c001aa93:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001aa9a:	8a 00                	mov    al,BYTE PTR [eax]
c001aa9c:	0f b6 c0             	movzx  eax,al
c001aa9f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001aaa3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aaaa:	8d 50 01             	lea    edx,[eax+0x1]
c001aaad:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001aab4:	8a 00                	mov    al,BYTE PTR [eax]
c001aab6:	0f b6 c0             	movzx  eax,al
c001aab9:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001aabd:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aac4:	8d 50 01             	lea    edx,[eax+0x1]
c001aac7:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001aace:	8a 00                	mov    al,BYTE PTR [eax]
c001aad0:	0f b6 c0             	movzx  eax,al
c001aad3:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001aad7:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001aadb:	c1 e0 18             	shl    eax,0x18
c001aade:	89 c2                	mov    edx,eax
c001aae0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001aae4:	c1 e0 10             	shl    eax,0x10
c001aae7:	09 c2                	or     edx,eax
c001aae9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001aaed:	c1 e0 08             	shl    eax,0x8
c001aaf0:	09 d0                	or     eax,edx
c001aaf2:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001aaf6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001aafa:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ab01:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001ab05:	83 e8 04             	sub    eax,0x4
c001ab08:	83 ec 08             	sub    esp,0x8
c001ab0b:	50                   	push   eax
c001ab0c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001ab10:	e8 f6 fa ff ff       	call   c001a60b <Net::crc32Calc(unsigned char*, int)>
c001ab15:	83 c4 10             	add    esp,0x10
c001ab18:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001ab1c:	0f 94 c2             	sete   dl
c001ab1f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ab26:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ab29:	90                   	nop
c001ab2a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ab31:	83 c4 70             	add    esp,0x70
c001ab34:	5b                   	pop    ebx
c001ab35:	5e                   	pop    esi
c001ab36:	5f                   	pop    edi
c001ab37:	c2 04 00             	ret    0x4

c001ab3a <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ab3a:	55                   	push   ebp
c001ab3b:	57                   	push   edi
c001ab3c:	56                   	push   esi
c001ab3d:	53                   	push   ebx
c001ab3e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ab44:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ab4b:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ab4d:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ab50:	80 fb 40             	cmp    bl,0x40
c001ab53:	75 1b                	jne    c001ab70 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ab55:	8a 16                	mov    dl,BYTE PTR [esi]
c001ab57:	84 d2                	test   dl,dl
c001ab59:	0f 84 f1 00 00 00    	je     c001ac50 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ab5f:	8d 46 01             	lea    eax,[esi+0x1]
c001ab62:	80 fa 3a             	cmp    dl,0x3a
c001ab65:	74 04                	je     c001ab6b <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ab67:	89 c6                	mov    esi,eax
c001ab69:	eb ea                	jmp    c001ab55 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ab6b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ab6e:	89 c6                	mov    esi,eax
c001ab70:	50                   	push   eax
c001ab71:	6a 40                	push   0x40
c001ab73:	6a 00                	push   0x0
c001ab75:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ab79:	50                   	push   eax
c001ab7a:	e8 d1 5b fe ff       	call   c0000750 <memset>
c001ab7f:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ab86:	31 c0                	xor    eax,eax
c001ab88:	83 c4 10             	add    esp,0x10
c001ab8b:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ab8d:	84 c9                	test   cl,cl
c001ab8f:	0f 84 bb 00 00 00    	je     c001ac50 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ab95:	3d c7 00 00 00       	cmp    eax,0xc7
c001ab9a:	0f 8f b0 00 00 00    	jg     c001ac50 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001aba0:	80 f9 0a             	cmp    cl,0xa
c001aba3:	0f 85 98 00 00 00    	jne    c001ac41 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001aba9:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001abae:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001abb2:	a8 df                	test   al,0xdf
c001abb4:	0f 94 c1             	sete   cl
c001abb7:	3c 23                	cmp    al,0x23
c001abb9:	0f 94 c2             	sete   dl
c001abbc:	08 d1                	or     cl,dl
c001abbe:	75 4a                	jne    c001ac0a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001abc0:	8d 50 f7             	lea    edx,[eax-0x9]
c001abc3:	80 fa 01             	cmp    dl,0x1
c001abc6:	76 42                	jbe    c001ac0a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001abc8:	3c 5b                	cmp    al,0x5b
c001abca:	75 42                	jne    c001ac0e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001abcc:	80 fb 40             	cmp    bl,0x40
c001abcf:	75 39                	jne    c001ac0a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001abd1:	83 ec 0c             	sub    esp,0xc
c001abd4:	8d 54 24 65          	lea    edx,[esp+0x65]
c001abd8:	52                   	push   edx
c001abd9:	e8 8e 5b fe ff       	call   c000076c <strlen>
c001abde:	83 c4 10             	add    esp,0x10
c001abe1:	83 f8 3f             	cmp    eax,0x3f
c001abe4:	77 6a                	ja     c001ac50 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001abe6:	50                   	push   eax
c001abe7:	50                   	push   eax
c001abe8:	8d 54 24 61          	lea    edx,[esp+0x61]
c001abec:	52                   	push   edx
c001abed:	8d 54 24 24          	lea    edx,[esp+0x24]
c001abf1:	52                   	push   edx
c001abf2:	e8 15 5c fe ff       	call   c000080c <strcpy>
c001abf7:	58                   	pop    eax
c001abf8:	8d 54 24 24          	lea    edx,[esp+0x24]
c001abfc:	52                   	push   edx
c001abfd:	e8 6a 5b fe ff       	call   c000076c <strlen>
c001ac02:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ac07:	83 c4 10             	add    esp,0x10
c001ac0a:	31 d2                	xor    edx,edx
c001ac0c:	eb 3a                	jmp    c001ac48 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ac0e:	80 fb 40             	cmp    bl,0x40
c001ac11:	74 06                	je     c001ac19 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ac13:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ac17:	eb 20                	jmp    c001ac39 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ac19:	50                   	push   eax
c001ac1a:	50                   	push   eax
c001ac1b:	55                   	push   ebp
c001ac1c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ac20:	50                   	push   eax
c001ac21:	e8 72 5c fe ff       	call   c0000898 <strcmp>
c001ac26:	83 c4 10             	add    esp,0x10
c001ac29:	85 c0                	test   eax,eax
c001ac2b:	75 dd                	jne    c001ac0a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ac2d:	eb e4                	jmp    c001ac13 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ac2f:	8d 50 01             	lea    edx,[eax+0x1]
c001ac32:	80 f9 3d             	cmp    cl,0x3d
c001ac35:	74 1d                	je     c001ac54 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ac37:	89 d0                	mov    eax,edx
c001ac39:	8a 08                	mov    cl,BYTE PTR [eax]
c001ac3b:	84 c9                	test   cl,cl
c001ac3d:	75 f0                	jne    c001ac2f <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ac3f:	eb 0f                	jmp    c001ac50 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac41:	8d 50 01             	lea    edx,[eax+0x1]
c001ac44:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ac48:	47                   	inc    edi
c001ac49:	89 d0                	mov    eax,edx
c001ac4b:	e9 3b ff ff ff       	jmp    c001ab8b <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ac50:	31 c0                	xor    eax,eax
c001ac52:	eb 33                	jmp    c001ac87 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ac54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ac58:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ac5b:	50                   	push   eax
c001ac5c:	50                   	push   eax
c001ac5d:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ac61:	50                   	push   eax
c001ac62:	56                   	push   esi
c001ac63:	e8 30 5c fe ff       	call   c0000898 <strcmp>
c001ac68:	83 c4 10             	add    esp,0x10
c001ac6b:	85 c0                	test   eax,eax
c001ac6d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ac71:	75 97                	jne    c001ac0a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ac73:	51                   	push   ecx
c001ac74:	51                   	push   ecx
c001ac75:	52                   	push   edx
c001ac76:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ac7d:	e8 8a 5b fe ff       	call   c000080c <strcpy>
c001ac82:	83 c4 10             	add    esp,0x10
c001ac85:	b0 01                	mov    al,0x1
c001ac87:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ac8d:	5b                   	pop    ebx
c001ac8e:	5e                   	pop    esi
c001ac8f:	5f                   	pop    edi
c001ac90:	5d                   	pop    ebp
c001ac91:	c3                   	ret    

c001ac92 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ac92:	57                   	push   edi
c001ac93:	56                   	push   esi
c001ac94:	53                   	push   ebx
c001ac95:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ac9b:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001aca2:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001aca9:	53                   	push   ebx
c001acaa:	e8 bd 5a fe ff       	call   c000076c <strlen>
c001acaf:	89 34 24             	mov    DWORD PTR [esp],esi
c001acb2:	89 c7                	mov    edi,eax
c001acb4:	e8 b3 5a fe ff       	call   c000076c <strlen>
c001acb9:	83 c4 10             	add    esp,0x10
c001acbc:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001acc0:	3d ff 00 00 00       	cmp    eax,0xff
c001acc5:	0f 87 d3 00 00 00    	ja     c001ad9e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001accb:	57                   	push   edi
c001accc:	57                   	push   edi
c001accd:	56                   	push   esi
c001acce:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001acd2:	56                   	push   esi
c001acd3:	e8 34 5b fe ff       	call   c000080c <strcpy>
c001acd8:	58                   	pop    eax
c001acd9:	5a                   	pop    edx
c001acda:	68 be c5 02 c0       	push   0xc002c5be
c001acdf:	56                   	push   esi
c001ace0:	e8 67 5c fe ff       	call   c000094c <strcat>
c001ace5:	59                   	pop    ecx
c001ace6:	5f                   	pop    edi
c001ace7:	53                   	push   ebx
c001ace8:	56                   	push   esi
c001ace9:	e8 5e 5c fe ff       	call   c000094c <strcat>
c001acee:	58                   	pop    eax
c001acef:	5a                   	pop    edx
c001acf0:	68 68 c2 02 c0       	push   0xc002c268
c001acf5:	56                   	push   esi
c001acf6:	e8 51 5c fe ff       	call   c000094c <strcat>
c001acfb:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ad02:	e8 52 4b ff ff       	call   c000f859 <malloc>
c001ad07:	83 c4 0c             	add    esp,0xc
c001ad0a:	89 c3                	mov    ebx,eax
c001ad0c:	ff 35 30 f9 02 c0    	push   DWORD PTR ds:0xc002f930
c001ad12:	56                   	push   esi
c001ad13:	50                   	push   eax
c001ad14:	e8 f7 80 ff ff       	call   c0012e10 <File::File(char const*, Process*)>
c001ad19:	83 c4 10             	add    esp,0x10
c001ad1c:	85 db                	test   ebx,ebx
c001ad1e:	74 7e                	je     c001ad9e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ad20:	51                   	push   ecx
c001ad21:	51                   	push   ecx
c001ad22:	6a 01                	push   0x1
c001ad24:	53                   	push   ebx
c001ad25:	e8 4a 81 ff ff       	call   c0012e74 <File::open(FileOpenMode)>
c001ad2a:	83 c4 10             	add    esp,0x10
c001ad2d:	85 c0                	test   eax,eax
c001ad2f:	74 08                	je     c001ad39 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001ad31:	83 ec 0c             	sub    esp,0xc
c001ad34:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad36:	53                   	push   ebx
c001ad37:	eb 5f                	jmp    c001ad98 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001ad39:	52                   	push   edx
c001ad3a:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ad3e:	50                   	push   eax
c001ad3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ad43:	50                   	push   eax
c001ad44:	53                   	push   ebx
c001ad45:	e8 d6 83 ff ff       	call   c0013120 <File::stat(unsigned long long*, bool*)>
c001ad4a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ad4e:	83 c4 10             	add    esp,0x10
c001ad51:	89 c1                	mov    ecx,eax
c001ad53:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001ad57:	74 31                	je     c001ad8a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ad59:	83 ec 0c             	sub    esp,0xc
c001ad5c:	50                   	push   eax
c001ad5d:	e8 f7 4a ff ff       	call   c000f859 <malloc>
c001ad62:	89 c6                	mov    esi,eax
c001ad64:	58                   	pop    eax
c001ad65:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad67:	8d 54 24 20          	lea    edx,[esp+0x20]
c001ad6b:	52                   	push   edx
c001ad6c:	56                   	push   esi
c001ad6d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ad71:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ad75:	53                   	push   ebx
c001ad76:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ad79:	83 c4 20             	add    esp,0x20
c001ad7c:	85 c0                	test   eax,eax
c001ad7e:	75 0a                	jne    c001ad8a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ad80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad84:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001ad88:	74 18                	je     c001ada2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001ad8a:	83 ec 0c             	sub    esp,0xc
c001ad8d:	53                   	push   ebx
c001ad8e:	e8 3f 81 ff ff       	call   c0012ed2 <File::close()>
c001ad93:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad95:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad98:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ad9b:	83 c4 10             	add    esp,0x10
c001ad9e:	31 c0                	xor    eax,eax
c001ada0:	eb 3b                	jmp    c001addd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001ada2:	83 ec 0c             	sub    esp,0xc
c001ada5:	53                   	push   ebx
c001ada6:	e8 27 81 ff ff       	call   c0012ed2 <File::close()>
c001adab:	8b 03                	mov    eax,DWORD PTR [ebx]
c001adad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001adb0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001adb3:	83 c4 0c             	add    esp,0xc
c001adb6:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001adbd:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001adc4:	56                   	push   esi
c001adc5:	e8 70 fd ff ff       	call   c001ab3a <Reg::findLineFromLoadedData(char*, char*, char*)>
c001adca:	89 34 24             	mov    DWORD PTR [esp],esi
c001adcd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001add1:	e8 93 4a ff ff       	call   c000f869 <free>
c001add6:	83 c4 10             	add    esp,0x10
c001add9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001addd:	81 c4 20 01 00 00    	add    esp,0x120
c001ade3:	5b                   	pop    ebx
c001ade4:	5e                   	pop    esi
c001ade5:	5f                   	pop    edi
c001ade6:	c3                   	ret    

c001ade7 <Reg::getLine(char*, char*, char*)>:
c001ade7:	57                   	push   edi
c001ade8:	56                   	push   esi
c001ade9:	53                   	push   ebx
c001adea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001adee:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001adf2:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001adf6:	57                   	push   edi
c001adf7:	56                   	push   esi
c001adf8:	53                   	push   ebx
c001adf9:	68 6d c2 02 c0       	push   0xc002c26d
c001adfe:	e8 8f fe ff ff       	call   c001ac92 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001ae03:	83 c4 10             	add    esp,0x10
c001ae06:	84 c0                	test   al,al
c001ae08:	75 10                	jne    c001ae1a <Reg::getLine(char*, char*, char*)+0x33>
c001ae0a:	57                   	push   edi
c001ae0b:	56                   	push   esi
c001ae0c:	53                   	push   ebx
c001ae0d:	68 92 c2 02 c0       	push   0xc002c292
c001ae12:	e8 7b fe ff ff       	call   c001ac92 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001ae17:	83 c4 10             	add    esp,0x10
c001ae1a:	5b                   	pop    ebx
c001ae1b:	5e                   	pop    esi
c001ae1c:	5f                   	pop    edi
c001ae1d:	c3                   	ret    

c001ae1e <Reg::readInt(char*, char*, int*)>:
c001ae1e:	55                   	push   ebp
c001ae1f:	57                   	push   edi
c001ae20:	56                   	push   esi
c001ae21:	53                   	push   ebx
c001ae22:	81 ec f0 00 00 00    	sub    esp,0xf0
c001ae28:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001ae2c:	57                   	push   edi
c001ae2d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001ae34:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001ae3b:	e8 a7 ff ff ff       	call   c001ade7 <Reg::getLine(char*, char*, char*)>
c001ae40:	83 c4 10             	add    esp,0x10
c001ae43:	84 c0                	test   al,al
c001ae45:	0f 84 b3 00 00 00    	je     c001aefe <Reg::readInt(char*, char*, int*)+0xe0>
c001ae4b:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001ae4f:	80 fa 2b             	cmp    dl,0x2b
c001ae52:	74 0c                	je     c001ae60 <Reg::readInt(char*, char*, int*)+0x42>
c001ae54:	80 fa 2d             	cmp    dl,0x2d
c001ae57:	75 0e                	jne    c001ae67 <Reg::readInt(char*, char*, int*)+0x49>
c001ae59:	ba 01 00 00 00       	mov    edx,0x1
c001ae5e:	eb 0b                	jmp    c001ae6b <Reg::readInt(char*, char*, int*)+0x4d>
c001ae60:	ba 01 00 00 00       	mov    edx,0x1
c001ae65:	eb 02                	jmp    c001ae69 <Reg::readInt(char*, char*, int*)+0x4b>
c001ae67:	31 d2                	xor    edx,edx
c001ae69:	31 c0                	xor    eax,eax
c001ae6b:	be 0a 00 00 00       	mov    esi,0xa
c001ae70:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001ae75:	75 20                	jne    c001ae97 <Reg::readInt(char*, char*, int*)+0x79>
c001ae77:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001ae7b:	80 f9 78             	cmp    cl,0x78
c001ae7e:	75 0a                	jne    c001ae8a <Reg::readInt(char*, char*, int*)+0x6c>
c001ae80:	83 c2 02             	add    edx,0x2
c001ae83:	be 10 00 00 00       	mov    esi,0x10
c001ae88:	eb 0d                	jmp    c001ae97 <Reg::readInt(char*, char*, int*)+0x79>
c001ae8a:	80 f9 62             	cmp    cl,0x62
c001ae8d:	75 08                	jne    c001ae97 <Reg::readInt(char*, char*, int*)+0x79>
c001ae8f:	83 c2 02             	add    edx,0x2
c001ae92:	be 02 00 00 00       	mov    esi,0x2
c001ae97:	01 d7                	add    edi,edx
c001ae99:	31 d2                	xor    edx,edx
c001ae9b:	8a 1f                	mov    bl,BYTE PTR [edi]
c001ae9d:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001aea1:	80 fb 0d             	cmp    bl,0xd
c001aea4:	0f 94 c3             	sete   bl
c001aea7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001aeac:	0f 94 c1             	sete   cl
c001aeaf:	08 cb                	or     bl,cl
c001aeb1:	75 3a                	jne    c001aeed <Reg::readInt(char*, char*, int*)+0xcf>
c001aeb3:	0f af d6             	imul   edx,esi
c001aeb6:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001aebb:	83 fe 10             	cmp    esi,0x10
c001aebe:	75 26                	jne    c001aee6 <Reg::readInt(char*, char*, int*)+0xc8>
c001aec0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001aec4:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001aec7:	89 e9                	mov    ecx,ebp
c001aec9:	80 f9 05             	cmp    cl,0x5
c001aecc:	77 06                	ja     c001aed4 <Reg::readInt(char*, char*, int*)+0xb6>
c001aece:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001aed2:	eb 16                	jmp    c001aeea <Reg::readInt(char*, char*, int*)+0xcc>
c001aed4:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001aed8:	83 e9 61             	sub    ecx,0x61
c001aedb:	80 f9 05             	cmp    cl,0x5
c001aede:	77 06                	ja     c001aee6 <Reg::readInt(char*, char*, int*)+0xc8>
c001aee0:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001aee4:	eb 04                	jmp    c001aeea <Reg::readInt(char*, char*, int*)+0xcc>
c001aee6:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001aeea:	47                   	inc    edi
c001aeeb:	eb ae                	jmp    c001ae9b <Reg::readInt(char*, char*, int*)+0x7d>
c001aeed:	84 c0                	test   al,al
c001aeef:	74 02                	je     c001aef3 <Reg::readInt(char*, char*, int*)+0xd5>
c001aef1:	f7 da                	neg    edx
c001aef3:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001aefa:	89 10                	mov    DWORD PTR [eax],edx
c001aefc:	88 d8                	mov    al,bl
c001aefe:	81 c4 ec 00 00 00    	add    esp,0xec
c001af04:	5b                   	pop    ebx
c001af05:	5e                   	pop    esi
c001af06:	5f                   	pop    edi
c001af07:	5d                   	pop    ebp
c001af08:	c3                   	ret    

c001af09 <Reg::readString(char*, char*, char*, int)>:
c001af09:	57                   	push   edi
c001af0a:	56                   	push   esi
c001af0b:	53                   	push   ebx
c001af0c:	81 ec d4 00 00 00    	sub    esp,0xd4
c001af12:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001af19:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001af1d:	57                   	push   edi
c001af1e:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001af25:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001af2c:	e8 b6 fe ff ff       	call   c001ade7 <Reg::getLine(char*, char*, char*)>
c001af31:	83 c4 10             	add    esp,0x10
c001af34:	89 c6                	mov    esi,eax
c001af36:	84 c0                	test   al,al
c001af38:	74 44                	je     c001af7e <Reg::readString(char*, char*, char*, int)+0x75>
c001af3a:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001af41:	31 c0                	xor    eax,eax
c001af43:	4a                   	dec    edx
c001af44:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001af47:	84 c9                	test   cl,cl
c001af49:	74 0f                	je     c001af5a <Reg::readString(char*, char*, char*, int)+0x51>
c001af4b:	39 c2                	cmp    edx,eax
c001af4d:	7e 0b                	jle    c001af5a <Reg::readString(char*, char*, char*, int)+0x51>
c001af4f:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001af52:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001af57:	40                   	inc    eax
c001af58:	eb ea                	jmp    c001af44 <Reg::readString(char*, char*, char*, int)+0x3b>
c001af5a:	83 ec 0c             	sub    esp,0xc
c001af5d:	53                   	push   ebx
c001af5e:	e8 09 58 fe ff       	call   c000076c <strlen>
c001af63:	83 c4 10             	add    esp,0x10
c001af66:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001af6b:	75 11                	jne    c001af7e <Reg::readString(char*, char*, char*, int)+0x75>
c001af6d:	83 ec 0c             	sub    esp,0xc
c001af70:	53                   	push   ebx
c001af71:	e8 f6 57 fe ff       	call   c000076c <strlen>
c001af76:	83 c4 10             	add    esp,0x10
c001af79:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001af7e:	81 c4 d0 00 00 00    	add    esp,0xd0
c001af84:	89 f0                	mov    eax,esi
c001af86:	5b                   	pop    ebx
c001af87:	5e                   	pop    esi
c001af88:	5f                   	pop    edi
c001af89:	c3                   	ret    

c001af8a <Reg::readBool(char*, char*, bool*)>:
c001af8a:	83 ec 20             	sub    esp,0x20
c001af8d:	8d 44 24 10          	lea    eax,[esp+0x10]
c001af91:	50                   	push   eax
c001af92:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af96:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af9a:	e8 7f fe ff ff       	call   c001ae1e <Reg::readInt(char*, char*, int*)>
c001af9f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001afa4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001afa8:	0f 95 02             	setne  BYTE PTR [edx]
c001afab:	83 c4 2c             	add    esp,0x2c
c001afae:	c3                   	ret    

c001afaf <Reg::readBoolWithDefault(char*, char*, bool)>:
c001afaf:	53                   	push   ebx
c001afb0:	83 ec 1c             	sub    esp,0x1c
c001afb3:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001afb7:	8d 44 24 13          	lea    eax,[esp+0x13]
c001afbb:	50                   	push   eax
c001afbc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001afc0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001afc4:	e8 c1 ff ff ff       	call   c001af8a <Reg::readBool(char*, char*, bool*)>
c001afc9:	83 c4 10             	add    esp,0x10
c001afcc:	84 c0                	test   al,al
c001afce:	74 04                	je     c001afd4 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001afd0:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001afd4:	88 d8                	mov    al,bl
c001afd6:	83 c4 18             	add    esp,0x18
c001afd9:	5b                   	pop    ebx
c001afda:	c3                   	ret    

c001afdb <Reg::readIntWithDefault(char*, char*, int)>:
c001afdb:	53                   	push   ebx
c001afdc:	83 ec 1c             	sub    esp,0x1c
c001afdf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001afe3:	8d 44 24 10          	lea    eax,[esp+0x10]
c001afe7:	50                   	push   eax
c001afe8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001afec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aff0:	e8 29 fe ff ff       	call   c001ae1e <Reg::readInt(char*, char*, int*)>
c001aff5:	83 c4 10             	add    esp,0x10
c001aff8:	84 c0                	test   al,al
c001affa:	74 04                	je     c001b000 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001affc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b000:	89 d8                	mov    eax,ebx
c001b002:	83 c4 18             	add    esp,0x18
c001b005:	5b                   	pop    ebx
c001b006:	c3                   	ret    

c001b007 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b007:	57                   	push   edi
c001b008:	56                   	push   esi
c001b009:	56                   	push   esi
c001b00a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b00e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b012:	56                   	push   esi
c001b013:	57                   	push   edi
c001b014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b018:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b01c:	e8 e8 fe ff ff       	call   c001af09 <Reg::readString(char*, char*, char*, int)>
c001b021:	83 c4 10             	add    esp,0x10
c001b024:	84 c0                	test   al,al
c001b026:	75 1a                	jne    c001b042 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001b028:	51                   	push   ecx
c001b029:	56                   	push   esi
c001b02a:	6a 00                	push   0x0
c001b02c:	57                   	push   edi
c001b02d:	e8 1e 57 fe ff       	call   c0000750 <memset>
c001b032:	8d 4e ff             	lea    ecx,[esi-0x1]
c001b035:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b039:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b03b:	83 c4 10             	add    esp,0x10
c001b03e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b042:	89 f8                	mov    eax,edi
c001b044:	5a                   	pop    edx
c001b045:	5e                   	pop    esi
c001b046:	5f                   	pop    edi
c001b047:	c3                   	ret    

c001b048 <Sys::eject(regs*)>:
c001b048:	83 ec 0c             	sub    esp,0xc
c001b04b:	83 ca ff             	or     edx,0xffffffff
c001b04e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b052:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b055:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b05a:	83 e9 41             	sub    ecx,0x41
c001b05d:	83 f9 19             	cmp    ecx,0x19
c001b060:	77 18                	ja     c001b07a <Sys::eject(regs*)+0x32>
c001b062:	8b 0c 8d 00 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1600]
c001b069:	85 c9                	test   ecx,ecx
c001b06b:	74 0d                	je     c001b07a <Sys::eject(regs*)+0x32>
c001b06d:	83 ec 0c             	sub    esp,0xc
c001b070:	51                   	push   ecx
c001b071:	e8 2c b1 ff ff       	call   c00161a2 <LogicalDisk::eject()>
c001b076:	83 c4 10             	add    esp,0x10
c001b079:	99                   	cdq    
c001b07a:	83 c4 0c             	add    esp,0xc
c001b07d:	c3                   	ret    

c001b07e <Sys::exit(regs*)>:
c001b07e:	83 ec 18             	sub    esp,0x18
c001b081:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b085:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b088:	e8 d3 35 00 00       	call   c001e660 <terminateTask(int)>
c001b08d:	83 c8 ff             	or     eax,0xffffffff
c001b090:	83 c4 1c             	add    esp,0x1c
c001b093:	89 c2                	mov    edx,eax
c001b095:	c3                   	ret    

c001b096 <Sys::getCwd(regs*)>:
c001b096:	83 ec 10             	sub    esp,0x10
c001b099:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b09d:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b0a0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b0a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0a8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b0ab:	e8 62 7b ff ff       	call   c0012c12 <Fs::getcwd(Process*, char*, int)>
c001b0b0:	83 c4 1c             	add    esp,0x1c
c001b0b3:	99                   	cdq    
c001b0b4:	c3                   	ret    

c001b0b5 <Sys::getPID(regs*)>:
c001b0b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0ba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b0bd:	8b 00                	mov    eax,DWORD PTR [eax]
c001b0bf:	99                   	cdq    
c001b0c0:	c3                   	ret    

c001b0c1 <Sys::getRAMData(regs*)>:
c001b0c1:	8b 0d 54 e4 02 c0    	mov    ecx,DWORD PTR ds:0xc002e454
c001b0c7:	69 05 50 e4 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc002e450,0xc8
c001b0d1:	99                   	cdq    
c001b0d2:	f7 f9                	idiv   ecx
c001b0d4:	c1 e0 18             	shl    eax,0x18
c001b0d7:	09 c8                	or     eax,ecx
c001b0d9:	99                   	cdq    
c001b0da:	c3                   	ret    

c001b0db <Sys::getVGAPtr(regs*)>:
c001b0db:	55                   	push   ebp
c001b0dc:	57                   	push   edi
c001b0dd:	56                   	push   esi
c001b0de:	53                   	push   ebx
c001b0df:	83 ec 18             	sub    esp,0x18
c001b0e2:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b0e6:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001b0e9:	e8 be 30 00 00       	call   c001e1ac <Thr::processFromPID(int)>
c001b0ee:	83 c4 10             	add    esp,0x10
c001b0f1:	89 c1                	mov    ecx,eax
c001b0f3:	b8 01 00 00 00       	mov    eax,0x1
c001b0f8:	85 c9                	test   ecx,ecx
c001b0fa:	74 59                	je     c001b155 <Sys::getVGAPtr(regs*)+0x7a>
c001b0fc:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b102:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001b106:	74 0c                	je     c001b114 <Sys::getVGAPtr(regs*)+0x39>
c001b108:	83 ec 0c             	sub    esp,0xc
c001b10b:	53                   	push   ebx
c001b10c:	e8 02 55 ff ff       	call   c0010613 <setActiveTerminal(VgaText*)>
c001b111:	83 c4 10             	add    esp,0x10
c001b114:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001b117:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001b11a:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001b11f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b121:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001b124:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b127:	81 c3 82 00 00 00    	add    ebx,0x82
c001b12d:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b133:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b136:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b139:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b13f:	50                   	push   eax
c001b140:	50                   	push   eax
c001b141:	53                   	push   ebx
c001b142:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b145:	05 a8 0f 00 00       	add    eax,0xfa8
c001b14a:	50                   	push   eax
c001b14b:	e8 bc 56 fe ff       	call   c000080c <strcpy>
c001b150:	83 c4 10             	add    esp,0x10
c001b153:	31 c0                	xor    eax,eax
c001b155:	83 c4 0c             	add    esp,0xc
c001b158:	31 d2                	xor    edx,edx
c001b15a:	5b                   	pop    ebx
c001b15b:	5e                   	pop    esi
c001b15c:	5f                   	pop    edi
c001b15d:	5d                   	pop    ebp
c001b15e:	c3                   	ret    

c001b15f <Sys::loadDLL(regs*)>:
c001b15f:	56                   	push   esi
c001b160:	53                   	push   ebx
c001b161:	31 d2                	xor    edx,edx
c001b163:	51                   	push   ecx
c001b164:	b8 01 00 00 00       	mov    eax,0x1
c001b169:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b16d:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b171:	0f 84 8c 00 00 00    	je     c001b203 <Sys::loadDLL(regs*)+0xa4>
c001b177:	83 ec 0c             	sub    esp,0xc
c001b17a:	68 14 01 00 00       	push   0x114
c001b17f:	e8 d5 46 ff ff       	call   c000f859 <malloc>
c001b184:	83 c4 0c             	add    esp,0xc
c001b187:	89 c3                	mov    ebx,eax
c001b189:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b18e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b191:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b194:	53                   	push   ebx
c001b195:	e8 76 7c ff ff       	call   c0012e10 <File::File(char const*, Process*)>
c001b19a:	83 c4 10             	add    esp,0x10
c001b19d:	31 d2                	xor    edx,edx
c001b19f:	b8 02 00 00 00       	mov    eax,0x2
c001b1a4:	85 db                	test   ebx,ebx
c001b1a6:	74 5b                	je     c001b203 <Sys::loadDLL(regs*)+0xa4>
c001b1a8:	83 ec 0c             	sub    esp,0xc
c001b1ab:	53                   	push   ebx
c001b1ac:	e8 31 7f ff ff       	call   c00130e2 <File::exists()>
c001b1b1:	83 c4 10             	add    esp,0x10
c001b1b4:	84 c0                	test   al,al
c001b1b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b1b8:	75 11                	jne    c001b1cb <Sys::loadDLL(regs*)+0x6c>
c001b1ba:	83 ec 0c             	sub    esp,0xc
c001b1bd:	53                   	push   ebx
c001b1be:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b1c1:	83 c4 10             	add    esp,0x10
c001b1c4:	b8 03 00 00 00       	mov    eax,0x3
c001b1c9:	eb 36                	jmp    c001b201 <Sys::loadDLL(regs*)+0xa2>
c001b1cb:	83 ec 0c             	sub    esp,0xc
c001b1ce:	53                   	push   ebx
c001b1cf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b1d2:	58                   	pop    eax
c001b1d3:	5a                   	pop    edx
c001b1d4:	6a 00                	push   0x0
c001b1d6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b1d9:	e8 0e 22 00 00       	call   c001d3ec <Thr::loadDLL(char const*, bool)>
c001b1de:	83 c4 10             	add    esp,0x10
c001b1e1:	89 c1                	mov    ecx,eax
c001b1e3:	31 d2                	xor    edx,edx
c001b1e5:	b8 04 00 00 00       	mov    eax,0x4
c001b1ea:	85 c9                	test   ecx,ecx
c001b1ec:	74 15                	je     c001b203 <Sys::loadDLL(regs*)+0xa4>
c001b1ee:	53                   	push   ebx
c001b1ef:	53                   	push   ebx
c001b1f0:	ff 35 08 e4 02 c0    	push   DWORD PTR ds:0xc002e408
c001b1f6:	51                   	push   ecx
c001b1f7:	e8 21 24 00 00       	call   c001d61d <Thr::executeDLL(unsigned long, void*)>
c001b1fc:	83 c4 10             	add    esp,0x10
c001b1ff:	31 c0                	xor    eax,eax
c001b201:	31 d2                	xor    edx,edx
c001b203:	59                   	pop    ecx
c001b204:	5b                   	pop    ebx
c001b205:	5e                   	pop    esi
c001b206:	c3                   	ret    

c001b207 <Sys::read(regs*)>:
c001b207:	57                   	push   edi
c001b208:	56                   	push   esi
c001b209:	53                   	push   ebx
c001b20a:	83 ec 10             	sub    esp,0x10
c001b20d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b211:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b214:	83 f8 02             	cmp    eax,0x2
c001b217:	77 10                	ja     c001b229 <Sys::read(regs*)+0x22>
c001b219:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b21e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b221:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b227:	eb 0e                	jmp    c001b237 <Sys::read(regs*)+0x30>
c001b229:	83 ec 0c             	sub    esp,0xc
c001b22c:	50                   	push   eax
c001b22d:	e8 57 61 ff ff       	call   c0011389 <getFromFileDescriptor(int)>
c001b232:	83 c4 10             	add    esp,0x10
c001b235:	89 c1                	mov    ecx,eax
c001b237:	83 c8 ff             	or     eax,0xffffffff
c001b23a:	85 c9                	test   ecx,ecx
c001b23c:	89 c2                	mov    edx,eax
c001b23e:	74 28                	je     c001b268 <Sys::read(regs*)+0x61>
c001b240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b248:	31 ff                	xor    edi,edi
c001b24a:	83 ec 0c             	sub    esp,0xc
c001b24d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b24f:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b253:	52                   	push   edx
c001b254:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b257:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b25a:	57                   	push   edi
c001b25b:	56                   	push   esi
c001b25c:	51                   	push   ecx
c001b25d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b260:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b264:	83 c4 20             	add    esp,0x20
c001b267:	99                   	cdq    
c001b268:	83 c4 10             	add    esp,0x10
c001b26b:	5b                   	pop    ebx
c001b26c:	5e                   	pop    esi
c001b26d:	5f                   	pop    edi
c001b26e:	c3                   	ret    

c001b26f <Sys::sbrk(regs*)>:
c001b26f:	56                   	push   esi
c001b270:	53                   	push   ebx
c001b271:	50                   	push   eax
c001b272:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b277:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b27b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b27e:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b281:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b287:	85 db                	test   ebx,ebx
c001b289:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b28c:	74 02                	je     c001b290 <Sys::sbrk(regs*)+0x21>
c001b28e:	79 06                	jns    c001b296 <Sys::sbrk(regs*)+0x27>
c001b290:	89 f0                	mov    eax,esi
c001b292:	31 d2                	xor    edx,edx
c001b294:	eb 2a                	jmp    c001b2c0 <Sys::sbrk(regs*)+0x51>
c001b296:	83 c8 ff             	or     eax,0xffffffff
c001b299:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b29f:	89 c2                	mov    edx,eax
c001b2a1:	77 1d                	ja     c001b2c0 <Sys::sbrk(regs*)+0x51>
c001b2a3:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b2a9:	50                   	push   eax
c001b2aa:	c1 ea 0c             	shr    edx,0xc
c001b2ad:	68 07 0c 00 00       	push   0xc07
c001b2b2:	52                   	push   edx
c001b2b3:	51                   	push   ecx
c001b2b4:	e8 cf 69 ff ff       	call   c0011c88 <VAS::allocatePages(int, int)>
c001b2b9:	89 f0                	mov    eax,esi
c001b2bb:	31 d2                	xor    edx,edx
c001b2bd:	83 c4 10             	add    esp,0x10
c001b2c0:	59                   	pop    ecx
c001b2c1:	5b                   	pop    ebx
c001b2c2:	5e                   	pop    esi
c001b2c3:	c3                   	ret    

c001b2c4 <Sys::setCwd(regs*)>:
c001b2c4:	83 ec 14             	sub    esp,0x14
c001b2c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b2cb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b2ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2d3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2d6:	e8 a6 7e ff ff       	call   c0013181 <Fs::setcwd(Process*, char*)>
c001b2db:	83 c4 1c             	add    esp,0x1c
c001b2de:	99                   	cdq    
c001b2df:	c3                   	ret    

c001b2e0 <Sys::setTime(regs*)>:
c001b2e0:	55                   	push   ebp
c001b2e1:	31 c9                	xor    ecx,ecx
c001b2e3:	57                   	push   edi
c001b2e4:	bd 0c 00 00 00       	mov    ebp,0xc
c001b2e9:	56                   	push   esi
c001b2ea:	53                   	push   ebx
c001b2eb:	31 db                	xor    ebx,ebx
c001b2ed:	83 ec 10             	sub    esp,0x10
c001b2f0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b2f4:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001b2f7:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001b2fa:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001b2fd:	89 c2                	mov    edx,eax
c001b2ff:	66 81 ef 6c 07       	sub    di,0x76c
c001b304:	83 e2 1f             	and    edx,0x1f
c001b307:	c1 e7 10             	shl    edi,0x10
c001b30a:	42                   	inc    edx
c001b30b:	c1 e8 05             	shr    eax,0x5
c001b30e:	88 d1                	mov    cl,dl
c001b310:	31 d2                	xor    edx,edx
c001b312:	f7 f5                	div    ebp
c001b314:	89 dd                	mov    ebp,ebx
c001b316:	88 d5                	mov    ch,dl
c001b318:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001b31e:	0f b7 c1             	movzx  eax,cx
c001b321:	31 d2                	xor    edx,edx
c001b323:	09 f8                	or     eax,edi
c001b325:	bf 3c 00 00 00       	mov    edi,0x3c
c001b32a:	89 c1                	mov    ecx,eax
c001b32c:	89 f0                	mov    eax,esi
c001b32e:	f7 f7                	div    edi
c001b330:	c1 e2 10             	shl    edx,0x10
c001b333:	09 d5                	or     ebp,edx
c001b335:	31 d2                	xor    edx,edx
c001b337:	89 eb                	mov    ebx,ebp
c001b339:	f7 f7                	div    edi
c001b33b:	bf 10 0e 00 00       	mov    edi,0xe10
c001b340:	88 d7                	mov    bh,dl
c001b342:	89 f0                	mov    eax,esi
c001b344:	31 d2                	xor    edx,edx
c001b346:	f7 f7                	div    edi
c001b348:	bf 18 00 00 00       	mov    edi,0x18
c001b34d:	31 d2                	xor    edx,edx
c001b34f:	f7 f7                	div    edi
c001b351:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c001b356:	88 d3                	mov    bl,dl
c001b358:	53                   	push   ebx
c001b359:	51                   	push   ecx
c001b35a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b360:	e8 65 86 ff ff       	call   c00139ca <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b365:	83 c4 1c             	add    esp,0x1c
c001b368:	83 f0 01             	xor    eax,0x1
c001b36b:	5b                   	pop    ebx
c001b36c:	0f b6 c0             	movzx  eax,al
c001b36f:	5e                   	pop    esi
c001b370:	31 d2                	xor    edx,edx
c001b372:	5f                   	pop    edi
c001b373:	5d                   	pop    ebp
c001b374:	c3                   	ret    

c001b375 <Sys::timezone(regs*)>:
c001b375:	53                   	push   ebx
c001b376:	83 ec 08             	sub    esp,0x8
c001b379:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b37d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b381:	75 17                	jne    c001b39a <Sys::timezone(regs*)+0x25>
c001b383:	83 ec 0c             	sub    esp,0xc
c001b386:	68 ad c2 02 c0       	push   0xc002c2ad
c001b38b:	e8 21 75 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c001b390:	83 c8 ff             	or     eax,0xffffffff
c001b393:	83 c4 10             	add    esp,0x10
c001b396:	89 c2                	mov    edx,eax
c001b398:	eb 20                	jmp    c001b3ba <Sys::timezone(regs*)+0x45>
c001b39a:	83 ec 0c             	sub    esp,0xc
c001b39d:	68 c2 c2 02 c0       	push   0xc002c2c2
c001b3a2:	e8 0a 75 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c001b3a7:	58                   	pop    eax
c001b3a8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b3ab:	e8 7c 83 ff ff       	call   c001372c <User::loadClockSettings(int)>
c001b3b0:	83 c4 10             	add    esp,0x10
c001b3b3:	b8 01 00 00 00       	mov    eax,0x1
c001b3b8:	31 d2                	xor    edx,edx
c001b3ba:	83 c4 08             	add    esp,0x8
c001b3bd:	5b                   	pop    ebx
c001b3be:	c3                   	ret    

c001b3bf <Sys::write(regs*)>:
c001b3bf:	57                   	push   edi
c001b3c0:	56                   	push   esi
c001b3c1:	53                   	push   ebx
c001b3c2:	83 ec 10             	sub    esp,0x10
c001b3c5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b3c9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3cc:	83 f8 02             	cmp    eax,0x2
c001b3cf:	77 10                	ja     c001b3e1 <Sys::write(regs*)+0x22>
c001b3d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3d6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3d9:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b3df:	eb 0e                	jmp    c001b3ef <Sys::write(regs*)+0x30>
c001b3e1:	83 ec 0c             	sub    esp,0xc
c001b3e4:	50                   	push   eax
c001b3e5:	e8 9f 5f ff ff       	call   c0011389 <getFromFileDescriptor(int)>
c001b3ea:	83 c4 10             	add    esp,0x10
c001b3ed:	89 c1                	mov    ecx,eax
c001b3ef:	83 c8 ff             	or     eax,0xffffffff
c001b3f2:	85 c9                	test   ecx,ecx
c001b3f4:	89 c2                	mov    edx,eax
c001b3f6:	74 28                	je     c001b420 <Sys::write(regs*)+0x61>
c001b3f8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b400:	31 ff                	xor    edi,edi
c001b402:	83 ec 0c             	sub    esp,0xc
c001b405:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b407:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b40b:	52                   	push   edx
c001b40c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b40f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b412:	57                   	push   edi
c001b413:	56                   	push   esi
c001b414:	51                   	push   ecx
c001b415:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b418:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b41c:	83 c4 20             	add    esp,0x20
c001b41f:	99                   	cdq    
c001b420:	83 c4 10             	add    esp,0x10
c001b423:	5b                   	pop    ebx
c001b424:	5e                   	pop    esi
c001b425:	5f                   	pop    edi
c001b426:	c3                   	ret    

c001b427 <Sys::wsbe(regs*)>:
c001b427:	57                   	push   edi
c001b428:	b9 0b 00 00 00       	mov    ecx,0xb
c001b42d:	56                   	push   esi
c001b42e:	be 01 c3 02 c0       	mov    esi,0xc002c301
c001b433:	53                   	push   ebx
c001b434:	83 ec 30             	sub    esp,0x30
c001b437:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b43b:	fc                   	cld    
c001b43c:	83 ec 0c             	sub    esp,0xc
c001b43f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b441:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b445:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b44a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b44d:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b453:	8b 06                	mov    eax,DWORD PTR [esi]
c001b455:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b458:	57                   	push   edi
c001b459:	e8 0e 53 fe ff       	call   c000076c <strlen>
c001b45e:	5a                   	pop    edx
c001b45f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b463:	52                   	push   edx
c001b464:	31 d2                	xor    edx,edx
c001b466:	57                   	push   edi
c001b467:	52                   	push   edx
c001b468:	50                   	push   eax
c001b469:	56                   	push   esi
c001b46a:	ff d3                	call   ebx
c001b46c:	83 c4 14             	add    esp,0x14
c001b46f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b473:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b476:	e8 e5 31 00 00       	call   c001e660 <terminateTask(int)>
c001b47b:	83 c4 40             	add    esp,0x40
c001b47e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b483:	5b                   	pop    ebx
c001b484:	31 d2                	xor    edx,edx
c001b486:	5e                   	pop    esi
c001b487:	5f                   	pop    edi
c001b488:	c3                   	ret    

c001b489 <Sys::yield(regs*)>:
c001b489:	57                   	push   edi
c001b48a:	56                   	push   esi
c001b48b:	53                   	push   ebx
c001b48c:	fa                   	cli    
c001b48d:	ff 05 08 f9 02 c0    	inc    DWORD PTR ds:0xc002f908
c001b493:	e8 19 29 00 00       	call   c001ddb1 <schedule()>
c001b498:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c001b49d:	48                   	dec    eax
c001b49e:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c001b4a3:	75 01                	jne    c001b4a6 <Sys::yield(regs*)+0x1d>
c001b4a5:	fb                   	sti    
c001b4a6:	8b 35 70 ea 02 c0    	mov    esi,DWORD PTR ds:0xc002ea70
c001b4ac:	8b 3d 74 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea74
c001b4b2:	89 f0                	mov    eax,esi
c001b4b4:	89 fb                	mov    ebx,edi
c001b4b6:	89 f1                	mov    ecx,esi
c001b4b8:	c1 e0 07             	shl    eax,0x7
c001b4bb:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b4bf:	25 80 30 0f 00       	and    eax,0xf3080
c001b4c4:	c1 eb 17             	shr    ebx,0x17
c001b4c7:	31 c8                	xor    eax,ecx
c001b4c9:	89 da                	mov    edx,ebx
c001b4cb:	5b                   	pop    ebx
c001b4cc:	5e                   	pop    esi
c001b4cd:	5f                   	pop    edi
c001b4ce:	c3                   	ret    

c001b4cf <sysCallSeekDir(regs*)>:
c001b4cf:	31 c0                	xor    eax,eax
c001b4d1:	31 d2                	xor    edx,edx
c001b4d3:	c3                   	ret    

c001b4d4 <sysCallTellDir(regs*)>:
c001b4d4:	31 c0                	xor    eax,eax
c001b4d6:	31 d2                	xor    edx,edx
c001b4d8:	c3                   	ret    

c001b4d9 <sysCallVerify(regs*)>:
c001b4d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b4dd:	31 d2                	xor    edx,edx
c001b4df:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b4e2:	c3                   	ret    

c001b4e3 <sysCallGetArgc(regs*)>:
c001b4e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4e8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4eb:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b4f1:	99                   	cdq    
c001b4f2:	c3                   	ret    

c001b4f3 <sysFormatDisk(regs*)>:
c001b4f3:	56                   	push   esi
c001b4f4:	53                   	push   ebx
c001b4f5:	53                   	push   ebx
c001b4f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b4fa:	8b 1d 74 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e574
c001b500:	eb 25                	jmp    c001b527 <sysFormatDisk(regs*)+0x34>
c001b502:	83 ec 0c             	sub    esp,0xc
c001b505:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b508:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b50a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b50d:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b510:	50                   	push   eax
c001b511:	ff 34 85 00 ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1600]
c001b518:	53                   	push   ebx
c001b519:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b51c:	83 c4 20             	add    esp,0x20
c001b51f:	83 f8 08             	cmp    eax,0x8
c001b522:	75 12                	jne    c001b536 <sysFormatDisk(regs*)+0x43>
c001b524:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b527:	85 db                	test   ebx,ebx
c001b529:	75 d7                	jne    c001b502 <sysFormatDisk(regs*)+0xf>
c001b52b:	59                   	pop    ecx
c001b52c:	b8 03 00 00 00       	mov    eax,0x3
c001b531:	31 d2                	xor    edx,edx
c001b533:	5b                   	pop    ebx
c001b534:	5e                   	pop    esi
c001b535:	c3                   	ret    
c001b536:	85 c0                	test   eax,eax
c001b538:	74 1b                	je     c001b555 <sysFormatDisk(regs*)+0x62>
c001b53a:	83 f8 09             	cmp    eax,0x9
c001b53d:	74 0b                	je     c001b54a <sysFormatDisk(regs*)+0x57>
c001b53f:	59                   	pop    ecx
c001b540:	b8 02 00 00 00       	mov    eax,0x2
c001b545:	31 d2                	xor    edx,edx
c001b547:	5b                   	pop    ebx
c001b548:	5e                   	pop    esi
c001b549:	c3                   	ret    
c001b54a:	59                   	pop    ecx
c001b54b:	b8 01 00 00 00       	mov    eax,0x1
c001b550:	31 d2                	xor    edx,edx
c001b552:	5b                   	pop    ebx
c001b553:	5e                   	pop    esi
c001b554:	c3                   	ret    
c001b555:	59                   	pop    ecx
c001b556:	31 c0                	xor    eax,eax
c001b558:	31 d2                	xor    edx,edx
c001b55a:	5b                   	pop    ebx
c001b55b:	5e                   	pop    esi
c001b55c:	c3                   	ret    

c001b55d <sysSetDiskVolumeLabel(regs*)>:
c001b55d:	56                   	push   esi
c001b55e:	53                   	push   ebx
c001b55f:	53                   	push   ebx
c001b560:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b564:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b567:	83 f8 19             	cmp    eax,0x19
c001b56a:	77 29                	ja     c001b595 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b56c:	8b 0c 85 00 ea 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1600]
c001b573:	85 c9                	test   ecx,ecx
c001b575:	74 1e                	je     c001b595 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b577:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b57a:	85 d2                	test   edx,edx
c001b57c:	74 17                	je     c001b595 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b57e:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b584:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b586:	52                   	push   edx
c001b587:	50                   	push   eax
c001b588:	51                   	push   ecx
c001b589:	53                   	push   ebx
c001b58a:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b58d:	83 c4 10             	add    esp,0x10
c001b590:	99                   	cdq    
c001b591:	59                   	pop    ecx
c001b592:	5b                   	pop    ebx
c001b593:	5e                   	pop    esi
c001b594:	c3                   	ret    
c001b595:	59                   	pop    ecx
c001b596:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b59b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5a0:	5b                   	pop    ebx
c001b5a1:	5e                   	pop    esi
c001b5a2:	c3                   	ret    

c001b5a3 <sysGetDiskVolumeLabel(regs*)>:
c001b5a3:	57                   	push   edi
c001b5a4:	56                   	push   esi
c001b5a5:	53                   	push   ebx
c001b5a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5aa:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b5ad:	83 fa 19             	cmp    edx,0x19
c001b5b0:	77 34                	ja     c001b5e6 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b5b2:	8b 0c 95 00 ea 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1600]
c001b5b9:	85 c9                	test   ecx,ecx
c001b5bb:	74 29                	je     c001b5e6 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b5bd:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b5c0:	85 db                	test   ebx,ebx
c001b5c2:	74 22                	je     c001b5e6 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b5c4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b5c7:	85 c0                	test   eax,eax
c001b5c9:	74 1b                	je     c001b5e6 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b5cb:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b5d1:	83 ec 0c             	sub    esp,0xc
c001b5d4:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b5d6:	50                   	push   eax
c001b5d7:	53                   	push   ebx
c001b5d8:	52                   	push   edx
c001b5d9:	51                   	push   ecx
c001b5da:	56                   	push   esi
c001b5db:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b5de:	83 c4 20             	add    esp,0x20
c001b5e1:	99                   	cdq    
c001b5e2:	5b                   	pop    ebx
c001b5e3:	5e                   	pop    esi
c001b5e4:	5f                   	pop    edi
c001b5e5:	c3                   	ret    
c001b5e6:	5b                   	pop    ebx
c001b5e7:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b5ec:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5f1:	5e                   	pop    esi
c001b5f2:	5f                   	pop    edi
c001b5f3:	c3                   	ret    

c001b5f4 <sysShutdown(regs*)>:
c001b5f4:	83 ec 0c             	sub    esp,0xc
c001b5f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5fb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b5fe:	85 c0                	test   eax,eax
c001b600:	74 18                	je     c001b61a <sysShutdown(regs*)+0x26>
c001b602:	83 f8 01             	cmp    eax,0x1
c001b605:	74 38                	je     c001b63f <sysShutdown(regs*)+0x4b>
c001b607:	83 f8 02             	cmp    eax,0x2
c001b60a:	74 24                	je     c001b630 <sysShutdown(regs*)+0x3c>
c001b60c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b611:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b616:	83 c4 0c             	add    esp,0xc
c001b619:	c3                   	ret    
c001b61a:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c001b61f:	8b 10                	mov    edx,DWORD PTR [eax]
c001b621:	6a 00                	push   0x0
c001b623:	6a 00                	push   0x0
c001b625:	6a 00                	push   0x0
c001b627:	50                   	push   eax
c001b628:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b62b:	83 c4 10             	add    esp,0x10
c001b62e:	eb dc                	jmp    c001b60c <sysShutdown(regs*)+0x18>
c001b630:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c001b635:	8b 10                	mov    edx,DWORD PTR [eax]
c001b637:	6a 00                	push   0x0
c001b639:	6a 00                	push   0x0
c001b63b:	6a 01                	push   0x1
c001b63d:	eb e8                	jmp    c001b627 <sysShutdown(regs*)+0x33>
c001b63f:	a1 80 ea 02 c0       	mov    eax,ds:0xc002ea80
c001b644:	85 c0                	test   eax,eax
c001b646:	74 02                	je     c001b64a <sysShutdown(regs*)+0x56>
c001b648:	ff d0                	call   eax
c001b64a:	31 c0                	xor    eax,eax
c001b64c:	31 d2                	xor    edx,edx
c001b64e:	83 c4 0c             	add    esp,0xc
c001b651:	c3                   	ret    

c001b652 <sysCallRealpath(regs*)>:
c001b652:	83 ec 0c             	sub    esp,0xc
c001b655:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b659:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b65c:	85 d2                	test   edx,edx
c001b65e:	74 07                	je     c001b667 <sysCallRealpath(regs*)+0x15>
c001b660:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b663:	85 c0                	test   eax,eax
c001b665:	75 0b                	jne    c001b672 <sysCallRealpath(regs*)+0x20>
c001b667:	b8 01 00 00 00       	mov    eax,0x1
c001b66c:	31 d2                	xor    edx,edx
c001b66e:	83 c4 0c             	add    esp,0xc
c001b671:	c3                   	ret    
c001b672:	51                   	push   ecx
c001b673:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b679:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b67c:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b682:	51                   	push   ecx
c001b683:	52                   	push   edx
c001b684:	50                   	push   eax
c001b685:	e8 dc 75 ff ff       	call   c0012c66 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b68a:	83 c4 10             	add    esp,0x10
c001b68d:	31 c0                	xor    eax,eax
c001b68f:	31 d2                	xor    edx,edx
c001b691:	83 c4 0c             	add    esp,0xc
c001b694:	c3                   	ret    

c001b695 <sysCallReadDir(regs*)>:
c001b695:	53                   	push   ebx
c001b696:	83 ec 18             	sub    esp,0x18
c001b699:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b69d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b6a0:	83 f8 02             	cmp    eax,0x2
c001b6a3:	76 60                	jbe    c001b705 <sysCallReadDir(regs*)+0x70>
c001b6a5:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b6ac:	77 48                	ja     c001b6f6 <sysCallReadDir(regs*)+0x61>
c001b6ae:	83 ec 0c             	sub    esp,0xc
c001b6b1:	50                   	push   eax
c001b6b2:	e8 d2 5c ff ff       	call   c0011389 <getFromFileDescriptor(int)>
c001b6b7:	83 c4 10             	add    esp,0x10
c001b6ba:	85 c0                	test   eax,eax
c001b6bc:	74 38                	je     c001b6f6 <sysCallReadDir(regs*)+0x61>
c001b6be:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b6c6:	83 ec 0c             	sub    esp,0xc
c001b6c9:	8b 10                	mov    edx,DWORD PTR [eax]
c001b6cb:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b6cf:	51                   	push   ecx
c001b6d0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b6d3:	6a 00                	push   0x0
c001b6d5:	68 10 01 00 00       	push   0x110
c001b6da:	50                   	push   eax
c001b6db:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b6de:	83 c4 20             	add    esp,0x20
c001b6e1:	85 c0                	test   eax,eax
c001b6e3:	74 29                	je     c001b70e <sysCallReadDir(regs*)+0x79>
c001b6e5:	83 f8 07             	cmp    eax,0x7
c001b6e8:	74 1b                	je     c001b705 <sysCallReadDir(regs*)+0x70>
c001b6ea:	b8 02 00 00 00       	mov    eax,0x2
c001b6ef:	31 d2                	xor    edx,edx
c001b6f1:	83 c4 18             	add    esp,0x18
c001b6f4:	5b                   	pop    ebx
c001b6f5:	c3                   	ret    
c001b6f6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b6fb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b700:	83 c4 18             	add    esp,0x18
c001b703:	5b                   	pop    ebx
c001b704:	c3                   	ret    
c001b705:	b8 01 00 00 00       	mov    eax,0x1
c001b70a:	31 d2                	xor    edx,edx
c001b70c:	eb e3                	jmp    c001b6f1 <sysCallReadDir(regs*)+0x5c>
c001b70e:	31 c0                	xor    eax,eax
c001b710:	31 d2                	xor    edx,edx
c001b712:	eb dd                	jmp    c001b6f1 <sysCallReadDir(regs*)+0x5c>

c001b714 <sysCallIsATTY(regs*)>:
c001b714:	83 ec 0c             	sub    esp,0xc
c001b717:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b71b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b71e:	83 f8 02             	cmp    eax,0x2
c001b721:	76 07                	jbe    c001b72a <sysCallIsATTY(regs*)+0x16>
c001b723:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b728:	75 26                	jne    c001b750 <sysCallIsATTY(regs*)+0x3c>
c001b72a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b72f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b732:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b738:	85 c0                	test   eax,eax
c001b73a:	74 24                	je     c001b760 <sysCallIsATTY(regs*)+0x4c>
c001b73c:	83 ec 0c             	sub    esp,0xc
c001b73f:	8b 10                	mov    edx,DWORD PTR [eax]
c001b741:	50                   	push   eax
c001b742:	ff 12                	call   DWORD PTR [edx]
c001b744:	31 d2                	xor    edx,edx
c001b746:	0f b6 c0             	movzx  eax,al
c001b749:	83 c4 10             	add    esp,0x10
c001b74c:	83 c4 0c             	add    esp,0xc
c001b74f:	c3                   	ret    
c001b750:	83 ec 0c             	sub    esp,0xc
c001b753:	50                   	push   eax
c001b754:	e8 30 5c ff ff       	call   c0011389 <getFromFileDescriptor(int)>
c001b759:	83 c4 10             	add    esp,0x10
c001b75c:	85 c0                	test   eax,eax
c001b75e:	75 dc                	jne    c001b73c <sysCallIsATTY(regs*)+0x28>
c001b760:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b765:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b76a:	83 c4 0c             	add    esp,0xc
c001b76d:	c3                   	ret    

c001b76e <sysCallSeek(regs*)>:
c001b76e:	53                   	push   ebx
c001b76f:	83 ec 08             	sub    esp,0x8
c001b772:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b776:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b779:	8d 50 fd             	lea    edx,[eax-0x3]
c001b77c:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b782:	77 32                	ja     c001b7b6 <sysCallSeek(regs*)+0x48>
c001b784:	83 ec 0c             	sub    esp,0xc
c001b787:	50                   	push   eax
c001b788:	e8 fc 5b ff ff       	call   c0011389 <getFromFileDescriptor(int)>
c001b78d:	83 c4 0c             	add    esp,0xc
c001b790:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b793:	31 db                	xor    ebx,ebx
c001b795:	53                   	push   ebx
c001b796:	51                   	push   ecx
c001b797:	50                   	push   eax
c001b798:	e8 95 77 ff ff       	call   c0012f32 <File::seek(unsigned long long)>
c001b79d:	83 c4 10             	add    esp,0x10
c001b7a0:	85 c0                	test   eax,eax
c001b7a2:	0f 95 c0             	setne  al
c001b7a5:	31 d2                	xor    edx,edx
c001b7a7:	0f b6 c0             	movzx  eax,al
c001b7aa:	f7 d8                	neg    eax
c001b7ac:	83 d2 00             	adc    edx,0x0
c001b7af:	83 c4 08             	add    esp,0x8
c001b7b2:	f7 da                	neg    edx
c001b7b4:	5b                   	pop    ebx
c001b7b5:	c3                   	ret    
c001b7b6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b7bb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7c0:	83 c4 08             	add    esp,0x8
c001b7c3:	5b                   	pop    ebx
c001b7c4:	c3                   	ret    

c001b7c5 <sysCallTell(regs*)>:
c001b7c5:	53                   	push   ebx
c001b7c6:	83 ec 08             	sub    esp,0x8
c001b7c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b7cd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b7d0:	83 f8 02             	cmp    eax,0x2
c001b7d3:	76 4d                	jbe    c001b822 <sysCallTell(regs*)+0x5d>
c001b7d5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b7da:	76 19                	jbe    c001b7f5 <sysCallTell(regs*)+0x30>
c001b7dc:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b7df:	31 d2                	xor    edx,edx
c001b7e1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b7e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b7ee:	31 c0                	xor    eax,eax
c001b7f0:	83 c4 08             	add    esp,0x8
c001b7f3:	5b                   	pop    ebx
c001b7f4:	c3                   	ret    
c001b7f5:	83 ec 0c             	sub    esp,0xc
c001b7f8:	50                   	push   eax
c001b7f9:	e8 8b 5b ff ff       	call   c0011389 <getFromFileDescriptor(int)>
c001b7fe:	5a                   	pop    edx
c001b7ff:	59                   	pop    ecx
c001b800:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b803:	50                   	push   eax
c001b804:	e8 7f 77 ff ff       	call   c0012f88 <File::tell(unsigned long long*)>
c001b809:	83 c4 10             	add    esp,0x10
c001b80c:	85 c0                	test   eax,eax
c001b80e:	0f 95 c0             	setne  al
c001b811:	31 d2                	xor    edx,edx
c001b813:	0f b6 c0             	movzx  eax,al
c001b816:	f7 d8                	neg    eax
c001b818:	83 d2 00             	adc    edx,0x0
c001b81b:	83 c4 08             	add    esp,0x8
c001b81e:	f7 da                	neg    edx
c001b820:	5b                   	pop    ebx
c001b821:	c3                   	ret    
c001b822:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b827:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b82c:	83 c4 08             	add    esp,0x8
c001b82f:	5b                   	pop    ebx
c001b830:	c3                   	ret    

c001b831 <sysCallSize(regs*)>:
c001b831:	53                   	push   ebx
c001b832:	83 ec 18             	sub    esp,0x18
c001b835:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b839:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b83c:	83 f8 02             	cmp    eax,0x2
c001b83f:	76 53                	jbe    c001b894 <sysCallSize(regs*)+0x63>
c001b841:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b846:	76 19                	jbe    c001b861 <sysCallSize(regs*)+0x30>
c001b848:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b84b:	31 d2                	xor    edx,edx
c001b84d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b853:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b85a:	31 c0                	xor    eax,eax
c001b85c:	83 c4 18             	add    esp,0x18
c001b85f:	5b                   	pop    ebx
c001b860:	c3                   	ret    
c001b861:	83 ec 0c             	sub    esp,0xc
c001b864:	50                   	push   eax
c001b865:	e8 1f 5b ff ff       	call   c0011389 <getFromFileDescriptor(int)>
c001b86a:	83 c4 0c             	add    esp,0xc
c001b86d:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b871:	52                   	push   edx
c001b872:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b875:	50                   	push   eax
c001b876:	e8 a5 78 ff ff       	call   c0013120 <File::stat(unsigned long long*, bool*)>
c001b87b:	83 c4 10             	add    esp,0x10
c001b87e:	85 c0                	test   eax,eax
c001b880:	0f 95 c0             	setne  al
c001b883:	31 d2                	xor    edx,edx
c001b885:	0f b6 c0             	movzx  eax,al
c001b888:	f7 d8                	neg    eax
c001b88a:	83 d2 00             	adc    edx,0x0
c001b88d:	83 c4 18             	add    esp,0x18
c001b890:	f7 da                	neg    edx
c001b892:	5b                   	pop    ebx
c001b893:	c3                   	ret    
c001b894:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b899:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b89e:	83 c4 18             	add    esp,0x18
c001b8a1:	5b                   	pop    ebx
c001b8a2:	c3                   	ret    

c001b8a3 <sysCallSizeFromFilename(regs*)>:
c001b8a3:	57                   	push   edi
c001b8a4:	56                   	push   esi
c001b8a5:	53                   	push   ebx
c001b8a6:	83 ec 20             	sub    esp,0x20
c001b8a9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b8ad:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001b8b0:	83 fb 02             	cmp    ebx,0x2
c001b8b3:	0f 86 88 00 00 00    	jbe    c001b941 <sysCallSizeFromFilename(regs*)+0x9e>
c001b8b9:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b8bf:	76 1b                	jbe    c001b8dc <sysCallSizeFromFilename(regs*)+0x39>
c001b8c1:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b8c4:	31 d2                	xor    edx,edx
c001b8c6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b8cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b8d3:	83 c4 20             	add    esp,0x20
c001b8d6:	31 c0                	xor    eax,eax
c001b8d8:	5b                   	pop    ebx
c001b8d9:	5e                   	pop    esi
c001b8da:	5f                   	pop    edi
c001b8db:	c3                   	ret    
c001b8dc:	83 ec 0c             	sub    esp,0xc
c001b8df:	68 14 01 00 00       	push   0x114
c001b8e4:	e8 70 3f ff ff       	call   c000f859 <malloc>
c001b8e9:	83 c4 0c             	add    esp,0xc
c001b8ec:	89 c7                	mov    edi,eax
c001b8ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8f3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b8f6:	53                   	push   ebx
c001b8f7:	57                   	push   edi
c001b8f8:	e8 13 75 ff ff       	call   c0012e10 <File::File(char const*, Process*)>
c001b8fd:	83 c4 0c             	add    esp,0xc
c001b900:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b904:	50                   	push   eax
c001b905:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b908:	57                   	push   edi
c001b909:	e8 12 78 ff ff       	call   c0013120 <File::stat(unsigned long long*, bool*)>
c001b90e:	83 c4 10             	add    esp,0x10
c001b911:	85 ff                	test   edi,edi
c001b913:	74 14                	je     c001b929 <sysCallSizeFromFilename(regs*)+0x86>
c001b915:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b919:	8b 17                	mov    edx,DWORD PTR [edi]
c001b91b:	83 ec 0c             	sub    esp,0xc
c001b91e:	57                   	push   edi
c001b91f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b922:	83 c4 10             	add    esp,0x10
c001b925:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b929:	85 c0                	test   eax,eax
c001b92b:	0f 95 c0             	setne  al
c001b92e:	31 d2                	xor    edx,edx
c001b930:	0f b6 c0             	movzx  eax,al
c001b933:	f7 d8                	neg    eax
c001b935:	83 d2 00             	adc    edx,0x0
c001b938:	83 c4 20             	add    esp,0x20
c001b93b:	f7 da                	neg    edx
c001b93d:	5b                   	pop    ebx
c001b93e:	5e                   	pop    esi
c001b93f:	5f                   	pop    edi
c001b940:	c3                   	ret    
c001b941:	83 c4 20             	add    esp,0x20
c001b944:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b949:	5b                   	pop    ebx
c001b94a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b94f:	5e                   	pop    esi
c001b950:	5f                   	pop    edi
c001b951:	c3                   	ret    

c001b952 <sysCallClose(regs*)>:
c001b952:	53                   	push   ebx
c001b953:	83 ec 08             	sub    esp,0x8
c001b956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b95a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b95d:	83 f8 02             	cmp    eax,0x2
c001b960:	76 41                	jbe    c001b9a3 <sysCallClose(regs*)+0x51>
c001b962:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001b968:	83 fa 01             	cmp    edx,0x1
c001b96b:	76 2d                	jbe    c001b99a <sysCallClose(regs*)+0x48>
c001b96d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b972:	77 2f                	ja     c001b9a3 <sysCallClose(regs*)+0x51>
c001b974:	83 ec 0c             	sub    esp,0xc
c001b977:	50                   	push   eax
c001b978:	e8 0c 5a ff ff       	call   c0011389 <getFromFileDescriptor(int)>
c001b97d:	89 c3                	mov    ebx,eax
c001b97f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b982:	e8 4b 75 ff ff       	call   c0012ed2 <File::close()>
c001b987:	83 c4 10             	add    esp,0x10
c001b98a:	85 db                	test   ebx,ebx
c001b98c:	74 0c                	je     c001b99a <sysCallClose(regs*)+0x48>
c001b98e:	83 ec 0c             	sub    esp,0xc
c001b991:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b993:	53                   	push   ebx
c001b994:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b997:	83 c4 10             	add    esp,0x10
c001b99a:	31 c0                	xor    eax,eax
c001b99c:	31 d2                	xor    edx,edx
c001b99e:	83 c4 08             	add    esp,0x8
c001b9a1:	5b                   	pop    ebx
c001b9a2:	c3                   	ret    
c001b9a3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9a8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9ad:	83 c4 08             	add    esp,0x8
c001b9b0:	5b                   	pop    ebx
c001b9b1:	c3                   	ret    

c001b9b2 <sysCallOpenDir(regs*)>:
c001b9b2:	56                   	push   esi
c001b9b3:	53                   	push   ebx
c001b9b4:	53                   	push   ebx
c001b9b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9b9:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b9bc:	85 f6                	test   esi,esi
c001b9be:	74 59                	je     c001ba19 <sysCallOpenDir(regs*)+0x67>
c001b9c0:	83 ec 0c             	sub    esp,0xc
c001b9c3:	68 14 01 00 00       	push   0x114
c001b9c8:	e8 8c 3e ff ff       	call   c000f859 <malloc>
c001b9cd:	83 c4 0c             	add    esp,0xc
c001b9d0:	89 c6                	mov    esi,eax
c001b9d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9d7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b9da:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b9dd:	56                   	push   esi
c001b9de:	e8 d9 78 ff ff       	call   c00132bc <Directory::Directory(char const*, Process*)>
c001b9e3:	83 c4 10             	add    esp,0x10
c001b9e6:	85 f6                	test   esi,esi
c001b9e8:	74 2f                	je     c001ba19 <sysCallOpenDir(regs*)+0x67>
c001b9ea:	83 ec 0c             	sub    esp,0xc
c001b9ed:	56                   	push   esi
c001b9ee:	e8 2d 79 ff ff       	call   c0013320 <Directory::open()>
c001b9f3:	83 c4 10             	add    esp,0x10
c001b9f6:	85 c0                	test   eax,eax
c001b9f8:	75 1f                	jne    c001ba19 <sysCallOpenDir(regs*)+0x67>
c001b9fa:	83 ec 0c             	sub    esp,0xc
c001b9fd:	56                   	push   esi
c001b9fe:	e8 91 56 ff ff       	call   c0011094 <UnixFile::getFileDescriptor()>
c001ba03:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001ba06:	83 c4 10             	add    esp,0x10
c001ba09:	89 02                	mov    DWORD PTR [edx],eax
c001ba0b:	c1 f8 1f             	sar    eax,0x1f
c001ba0e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ba11:	31 c0                	xor    eax,eax
c001ba13:	59                   	pop    ecx
c001ba14:	31 d2                	xor    edx,edx
c001ba16:	5b                   	pop    ebx
c001ba17:	5e                   	pop    esi
c001ba18:	c3                   	ret    
c001ba19:	59                   	pop    ecx
c001ba1a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba1f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba24:	5b                   	pop    ebx
c001ba25:	5e                   	pop    esi
c001ba26:	c3                   	ret    

c001ba27 <sysCallCloseDir(regs*)>:
c001ba27:	53                   	push   ebx
c001ba28:	83 ec 08             	sub    esp,0x8
c001ba2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba2f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ba32:	8d 50 fd             	lea    edx,[eax-0x3]
c001ba35:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001ba3b:	77 2f                	ja     c001ba6c <sysCallCloseDir(regs*)+0x45>
c001ba3d:	83 ec 0c             	sub    esp,0xc
c001ba40:	50                   	push   eax
c001ba41:	e8 43 59 ff ff       	call   c0011389 <getFromFileDescriptor(int)>
c001ba46:	89 c3                	mov    ebx,eax
c001ba48:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba4b:	e8 2c 79 ff ff       	call   c001337c <Directory::close()>
c001ba50:	83 c4 10             	add    esp,0x10
c001ba53:	85 db                	test   ebx,ebx
c001ba55:	74 0c                	je     c001ba63 <sysCallCloseDir(regs*)+0x3c>
c001ba57:	83 ec 0c             	sub    esp,0xc
c001ba5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ba5c:	53                   	push   ebx
c001ba5d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ba60:	83 c4 10             	add    esp,0x10
c001ba63:	31 c0                	xor    eax,eax
c001ba65:	31 d2                	xor    edx,edx
c001ba67:	83 c4 08             	add    esp,0x8
c001ba6a:	5b                   	pop    ebx
c001ba6b:	c3                   	ret    
c001ba6c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba71:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba76:	83 c4 08             	add    esp,0x8
c001ba79:	5b                   	pop    ebx
c001ba7a:	c3                   	ret    

c001ba7b <sysCallMakeDir(regs*)>:
c001ba7b:	56                   	push   esi
c001ba7c:	53                   	push   ebx
c001ba7d:	83 ec 10             	sub    esp,0x10
c001ba80:	68 14 01 00 00       	push   0x114
c001ba85:	e8 cf 3d ff ff       	call   c000f859 <malloc>
c001ba8a:	83 c4 0c             	add    esp,0xc
c001ba8d:	89 c3                	mov    ebx,eax
c001ba8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba94:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ba97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba9b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ba9e:	53                   	push   ebx
c001ba9f:	e8 18 78 ff ff       	call   c00132bc <Directory::Directory(char const*, Process*)>
c001baa4:	83 c4 10             	add    esp,0x10
c001baa7:	85 db                	test   ebx,ebx
c001baa9:	74 32                	je     c001badd <sysCallMakeDir(regs*)+0x62>
c001baab:	83 ec 0c             	sub    esp,0xc
c001baae:	53                   	push   ebx
c001baaf:	e8 4c 7a ff ff       	call   c0013500 <Directory::create()>
c001bab4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bab7:	89 c6                	mov    esi,eax
c001bab9:	e8 be 78 ff ff       	call   c001337c <Directory::close()>
c001babe:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bac0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bac3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bac6:	83 c4 10             	add    esp,0x10
c001bac9:	31 c0                	xor    eax,eax
c001bacb:	59                   	pop    ecx
c001bacc:	85 f6                	test   esi,esi
c001bace:	5b                   	pop    ebx
c001bacf:	0f 95 c0             	setne  al
c001bad2:	5e                   	pop    esi
c001bad3:	31 d2                	xor    edx,edx
c001bad5:	f7 d8                	neg    eax
c001bad7:	83 d2 00             	adc    edx,0x0
c001bada:	f7 da                	neg    edx
c001badc:	c3                   	ret    
c001badd:	59                   	pop    ecx
c001bade:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bae3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bae8:	5b                   	pop    ebx
c001bae9:	5e                   	pop    esi
c001baea:	c3                   	ret    

c001baeb <sysCallWait(regs*)>:
c001baeb:	83 ec 10             	sub    esp,0x10
c001baee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001baf2:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001baf5:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001baf8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bafb:	e8 b4 24 00 00       	call   c001dfb4 <waitTask(int, int*, int)>
c001bb00:	83 c4 1c             	add    esp,0x1c
c001bb03:	99                   	cdq    
c001bb04:	c3                   	ret    

c001bb05 <sysCallNotImpl(regs*)>:
c001bb05:	83 ec 18             	sub    esp,0x18
c001bb08:	68 2d c3 02 c0       	push   0xc002c32d
c001bb0d:	e8 0d e7 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c001bb12:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb17:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb1c:	83 c4 1c             	add    esp,0x1c
c001bb1f:	c3                   	ret    

c001bb20 <sysPanic(regs*)>:
c001bb20:	83 ec 18             	sub    esp,0x18
c001bb23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bb27:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bb2a:	e8 f0 e6 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c001bb2f:	b8 01 00 00 00       	mov    eax,0x1
c001bb34:	31 d2                	xor    edx,edx
c001bb36:	83 c4 1c             	add    esp,0x1c
c001bb39:	c3                   	ret    

c001bb3a <sysCallRmdir(regs*)>:
c001bb3a:	56                   	push   esi
c001bb3b:	53                   	push   ebx
c001bb3c:	83 ec 20             	sub    esp,0x20
c001bb3f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bb43:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bb46:	68 14 01 00 00       	push   0x114
c001bb4b:	e8 09 3d ff ff       	call   c000f859 <malloc>
c001bb50:	83 c4 0c             	add    esp,0xc
c001bb53:	89 c3                	mov    ebx,eax
c001bb55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb5a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb5d:	56                   	push   esi
c001bb5e:	53                   	push   ebx
c001bb5f:	e8 ac 72 ff ff       	call   c0012e10 <File::File(char const*, Process*)>
c001bb64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bb67:	e8 80 74 ff ff       	call   c0012fec <File::unlink()>
c001bb6c:	83 c4 10             	add    esp,0x10
c001bb6f:	85 db                	test   ebx,ebx
c001bb71:	74 14                	je     c001bb87 <sysCallRmdir(regs*)+0x4d>
c001bb73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb77:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bb79:	83 ec 0c             	sub    esp,0xc
c001bb7c:	53                   	push   ebx
c001bb7d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bb80:	83 c4 10             	add    esp,0x10
c001bb83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb87:	85 c0                	test   eax,eax
c001bb89:	0f 95 c0             	setne  al
c001bb8c:	31 d2                	xor    edx,edx
c001bb8e:	0f b6 c0             	movzx  eax,al
c001bb91:	f7 d8                	neg    eax
c001bb93:	83 d2 00             	adc    edx,0x0
c001bb96:	83 c4 14             	add    esp,0x14
c001bb99:	f7 da                	neg    edx
c001bb9b:	5b                   	pop    ebx
c001bb9c:	5e                   	pop    esi
c001bb9d:	c3                   	ret    

c001bb9e <sysCallUnlink(regs*)>:
c001bb9e:	56                   	push   esi
c001bb9f:	53                   	push   ebx
c001bba0:	83 ec 20             	sub    esp,0x20
c001bba3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bba7:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bbaa:	68 14 01 00 00       	push   0x114
c001bbaf:	e8 a5 3c ff ff       	call   c000f859 <malloc>
c001bbb4:	83 c4 0c             	add    esp,0xc
c001bbb7:	89 c3                	mov    ebx,eax
c001bbb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbbe:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bbc1:	56                   	push   esi
c001bbc2:	53                   	push   ebx
c001bbc3:	e8 48 72 ff ff       	call   c0012e10 <File::File(char const*, Process*)>
c001bbc8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bbcb:	e8 1c 74 ff ff       	call   c0012fec <File::unlink()>
c001bbd0:	83 c4 10             	add    esp,0x10
c001bbd3:	85 db                	test   ebx,ebx
c001bbd5:	74 14                	je     c001bbeb <sysCallUnlink(regs*)+0x4d>
c001bbd7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bbdb:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bbdd:	83 ec 0c             	sub    esp,0xc
c001bbe0:	53                   	push   ebx
c001bbe1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bbe4:	83 c4 10             	add    esp,0x10
c001bbe7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bbeb:	85 c0                	test   eax,eax
c001bbed:	0f 95 c0             	setne  al
c001bbf0:	31 d2                	xor    edx,edx
c001bbf2:	0f b6 c0             	movzx  eax,al
c001bbf5:	f7 d8                	neg    eax
c001bbf7:	83 d2 00             	adc    edx,0x0
c001bbfa:	83 c4 14             	add    esp,0x14
c001bbfd:	f7 da                	neg    edx
c001bbff:	5b                   	pop    ebx
c001bc00:	5e                   	pop    esi
c001bc01:	c3                   	ret    

c001bc02 <sysCallGetArgv(regs*)>:
c001bc02:	83 ec 0c             	sub    esp,0xc
c001bc05:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bc09:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bc0c:	85 c0                	test   eax,eax
c001bc0e:	78 2b                	js     c001bc3b <sysCallGetArgv(regs*)+0x39>
c001bc10:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bc16:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bc19:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bc1f:	7d 1a                	jge    c001bc3b <sysCallGetArgv(regs*)+0x39>
c001bc21:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bc28:	85 c0                	test   eax,eax
c001bc2a:	74 17                	je     c001bc43 <sysCallGetArgv(regs*)+0x41>
c001bc2c:	83 ec 08             	sub    esp,0x8
c001bc2f:	50                   	push   eax
c001bc30:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bc33:	e8 d4 4b fe ff       	call   c000080c <strcpy>
c001bc38:	83 c4 10             	add    esp,0x10
c001bc3b:	31 c0                	xor    eax,eax
c001bc3d:	31 d2                	xor    edx,edx
c001bc3f:	83 c4 0c             	add    esp,0xc
c001bc42:	c3                   	ret    
c001bc43:	b8 01 00 00 00       	mov    eax,0x1
c001bc48:	31 d2                	xor    edx,edx
c001bc4a:	83 c4 0c             	add    esp,0xc
c001bc4d:	c3                   	ret    

c001bc4e <sysCallTTYName(regs*)>:
c001bc4e:	56                   	push   esi
c001bc4f:	53                   	push   ebx
c001bc50:	53                   	push   ebx
c001bc51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bc55:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bc58:	85 c0                	test   eax,eax
c001bc5a:	74 5f                	je     c001bcbb <sysCallTTYName(regs*)+0x6d>
c001bc5c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bc5f:	83 f8 02             	cmp    eax,0x2
c001bc62:	77 3e                	ja     c001bca2 <sysCallTTYName(regs*)+0x54>
c001bc64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc69:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc6c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bc72:	85 db                	test   ebx,ebx
c001bc74:	74 45                	je     c001bcbb <sysCallTTYName(regs*)+0x6d>
c001bc76:	83 ec 0c             	sub    esp,0xc
c001bc79:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc7b:	53                   	push   ebx
c001bc7c:	ff 10                	call   DWORD PTR [eax]
c001bc7e:	83 c4 10             	add    esp,0x10
c001bc81:	84 c0                	test   al,al
c001bc83:	74 41                	je     c001bcc6 <sysCallTTYName(regs*)+0x78>
c001bc85:	83 ec 08             	sub    esp,0x8
c001bc88:	81 c3 82 00 00 00    	add    ebx,0x82
c001bc8e:	53                   	push   ebx
c001bc8f:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bc92:	e8 75 4b fe ff       	call   c000080c <strcpy>
c001bc97:	83 c4 10             	add    esp,0x10
c001bc9a:	31 c0                	xor    eax,eax
c001bc9c:	59                   	pop    ecx
c001bc9d:	31 d2                	xor    edx,edx
c001bc9f:	5b                   	pop    ebx
c001bca0:	5e                   	pop    esi
c001bca1:	c3                   	ret    
c001bca2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bca7:	74 bb                	je     c001bc64 <sysCallTTYName(regs*)+0x16>
c001bca9:	83 ec 0c             	sub    esp,0xc
c001bcac:	50                   	push   eax
c001bcad:	e8 d7 56 ff ff       	call   c0011389 <getFromFileDescriptor(int)>
c001bcb2:	83 c4 10             	add    esp,0x10
c001bcb5:	89 c3                	mov    ebx,eax
c001bcb7:	85 db                	test   ebx,ebx
c001bcb9:	75 bb                	jne    c001bc76 <sysCallTTYName(regs*)+0x28>
c001bcbb:	59                   	pop    ecx
c001bcbc:	b8 01 00 00 00       	mov    eax,0x1
c001bcc1:	31 d2                	xor    edx,edx
c001bcc3:	5b                   	pop    ebx
c001bcc4:	5e                   	pop    esi
c001bcc5:	c3                   	ret    
c001bcc6:	59                   	pop    ecx
c001bcc7:	b8 02 00 00 00       	mov    eax,0x2
c001bccc:	31 d2                	xor    edx,edx
c001bcce:	5b                   	pop    ebx
c001bccf:	5e                   	pop    esi
c001bcd0:	c3                   	ret    

c001bcd1 <sysCallUSleep(regs*)>:
c001bcd1:	83 ec 14             	sub    esp,0x14
c001bcd4:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bcd9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bcdd:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bce4:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bce7:	01 ca                	add    edx,ecx
c001bce9:	52                   	push   edx
c001bcea:	50                   	push   eax
c001bceb:	e8 9b 23 00 00       	call   c001e08b <nanoSleep(unsigned long long)>
c001bcf0:	31 c0                	xor    eax,eax
c001bcf2:	31 d2                	xor    edx,edx
c001bcf4:	83 c4 1c             	add    esp,0x1c
c001bcf7:	c3                   	ret    

c001bcf8 <sysCallSpawn(regs*)>:
c001bcf8:	56                   	push   esi
c001bcf9:	53                   	push   ebx
c001bcfa:	50                   	push   eax
c001bcfb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bcff:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bd02:	85 c0                	test   eax,eax
c001bd04:	75 08                	jne    c001bd0e <sysCallSpawn(regs*)+0x16>
c001bd06:	59                   	pop    ecx
c001bd07:	31 c0                	xor    eax,eax
c001bd09:	31 d2                	xor    edx,edx
c001bd0b:	5b                   	pop    ebx
c001bd0c:	5e                   	pop    esi
c001bd0d:	c3                   	ret    
c001bd0e:	83 ec 0c             	sub    esp,0xc
c001bd11:	68 3f 07 00 00       	push   0x73f
c001bd16:	e8 3e 3b ff ff       	call   c000f859 <malloc>
c001bd1b:	83 c4 10             	add    esp,0x10
c001bd1e:	89 c6                	mov    esi,eax
c001bd20:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bd23:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bd26:	85 c0                	test   eax,eax
c001bd28:	75 32                	jne    c001bd5c <sysCallSpawn(regs*)+0x64>
c001bd2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd2f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bd32:	52                   	push   edx
c001bd33:	50                   	push   eax
c001bd34:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd37:	56                   	push   esi
c001bd38:	e8 73 1a 00 00       	call   c001d7b0 <Process::Process(char const*, Process*, char**)>
c001bd3d:	83 c4 10             	add    esp,0x10
c001bd40:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001bd47:	75 bd                	jne    c001bd06 <sysCallSpawn(regs*)+0xe>
c001bd49:	83 ec 0c             	sub    esp,0xc
c001bd4c:	56                   	push   esi
c001bd4d:	e8 40 1f 00 00       	call   c001dc92 <Process::createUserThread()>
c001bd52:	8b 06                	mov    eax,DWORD PTR [esi]
c001bd54:	83 c4 10             	add    esp,0x10
c001bd57:	99                   	cdq    
c001bd58:	59                   	pop    ecx
c001bd59:	5b                   	pop    ebx
c001bd5a:	5e                   	pop    esi
c001bd5b:	c3                   	ret    
c001bd5c:	31 c0                	xor    eax,eax
c001bd5e:	eb d2                	jmp    c001bd32 <sysCallSpawn(regs*)+0x3a>

c001bd60 <sysCallGetEnv(regs*)>:
c001bd60:	57                   	push   edi
c001bd61:	56                   	push   esi
c001bd62:	53                   	push   ebx
c001bd63:	83 ec 1c             	sub    esp,0x1c
c001bd66:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001bd6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd6f:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001bd72:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bd75:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd78:	e8 ee e3 ff ff       	call   c001a16b <Krnl::getProcessTotalEnvCount(Process*)>
c001bd7d:	83 c4 10             	add    esp,0x10
c001bd80:	39 c7                	cmp    edi,eax
c001bd82:	7c 14                	jl     c001bd98 <sysCallGetEnv(regs*)+0x38>
c001bd84:	85 f6                	test   esi,esi
c001bd86:	75 0b                	jne    c001bd93 <sysCallGetEnv(regs*)+0x33>
c001bd88:	83 c4 10             	add    esp,0x10
c001bd8b:	31 c0                	xor    eax,eax
c001bd8d:	5b                   	pop    ebx
c001bd8e:	31 d2                	xor    edx,edx
c001bd90:	5e                   	pop    esi
c001bd91:	5f                   	pop    edi
c001bd92:	c3                   	ret    
c001bd93:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bd96:	eb f0                	jmp    c001bd88 <sysCallGetEnv(regs*)+0x28>
c001bd98:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bd9c:	52                   	push   edx
c001bd9d:	57                   	push   edi
c001bd9e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bda4:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001bda7:	50                   	push   eax
c001bda8:	e8 de e3 ff ff       	call   c001a18b <Krnl::getProcessEnvPair(Process*, int)>
c001bdad:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bdb0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bdb4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bdb8:	83 c4 0c             	add    esp,0xc
c001bdbb:	85 c9                	test   ecx,ecx
c001bdbd:	75 23                	jne    c001bde2 <sysCallGetEnv(regs*)+0x82>
c001bdbf:	83 ec 0c             	sub    esp,0xc
c001bdc2:	50                   	push   eax
c001bdc3:	e8 a4 49 fe ff       	call   c000076c <strlen>
c001bdc8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bdcb:	89 c3                	mov    ebx,eax
c001bdcd:	e8 9a 49 fe ff       	call   c000076c <strlen>
c001bdd2:	83 c4 10             	add    esp,0x10
c001bdd5:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bdd9:	83 c4 10             	add    esp,0x10
c001bddc:	31 d2                	xor    edx,edx
c001bdde:	5b                   	pop    ebx
c001bddf:	5e                   	pop    esi
c001bde0:	5f                   	pop    edi
c001bde1:	c3                   	ret    
c001bde2:	83 ec 08             	sub    esp,0x8
c001bde5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bde8:	50                   	push   eax
c001bde9:	56                   	push   esi
c001bdea:	e8 1d 4a fe ff       	call   c000080c <strcpy>
c001bdef:	58                   	pop    eax
c001bdf0:	5a                   	pop    edx
c001bdf1:	68 47 c3 02 c0       	push   0xc002c347
c001bdf6:	56                   	push   esi
c001bdf7:	e8 50 4b fe ff       	call   c000094c <strcat>
c001bdfc:	59                   	pop    ecx
c001bdfd:	5b                   	pop    ebx
c001bdfe:	57                   	push   edi
c001bdff:	56                   	push   esi
c001be00:	e8 47 4b fe ff       	call   c000094c <strcat>
c001be05:	83 c4 10             	add    esp,0x10
c001be08:	e9 7b ff ff ff       	jmp    c001bd88 <sysCallGetEnv(regs*)+0x28>

c001be0d <sysAppSettings(regs*)>:
c001be0d:	57                   	push   edi
c001be0e:	56                   	push   esi
c001be0f:	56                   	push   esi
c001be10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be14:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be17:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001be1d:	25 e0 1f 00 00       	and    eax,0x1fe0
c001be22:	66 3d c0 09          	cmp    ax,0x9c0
c001be26:	75 2e                	jne    c001be56 <sysAppSettings(regs*)+0x49>
c001be28:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001be2e:	83 e0 1f             	and    eax,0x1f
c001be31:	3c 01                	cmp    al,0x1
c001be33:	74 2c                	je     c001be61 <sysAppSettings(regs*)+0x54>
c001be35:	3c 07                	cmp    al,0x7
c001be37:	0f 84 b3 00 00 00    	je     c001bef0 <sysAppSettings(regs*)+0xe3>
c001be3d:	84 c0                	test   al,al
c001be3f:	0f 84 d2 00 00 00    	je     c001bf17 <sysAppSettings(regs*)+0x10a>
c001be45:	3c 08                	cmp    al,0x8
c001be47:	74 63                	je     c001beac <sysAppSettings(regs*)+0x9f>
c001be49:	59                   	pop    ecx
c001be4a:	0f b6 c0             	movzx  eax,al
c001be4d:	5e                   	pop    esi
c001be4e:	05 e8 03 00 00       	add    eax,0x3e8
c001be53:	5f                   	pop    edi
c001be54:	99                   	cdq    
c001be55:	c3                   	ret    
c001be56:	b8 01 00 00 00       	mov    eax,0x1
c001be5b:	59                   	pop    ecx
c001be5c:	31 d2                	xor    edx,edx
c001be5e:	5e                   	pop    esi
c001be5f:	5f                   	pop    edi
c001be60:	c3                   	ret    
c001be61:	50                   	push   eax
c001be62:	68 00 01 00 00       	push   0x100
c001be67:	6a 00                	push   0x0
c001be69:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be6e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be71:	83 c0 0c             	add    eax,0xc
c001be74:	50                   	push   eax
c001be75:	e8 d6 48 fe ff       	call   c0000750 <memset>
c001be7a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be7f:	b9 ff 00 00 00       	mov    ecx,0xff
c001be84:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001be87:	83 c7 0c             	add    edi,0xc
c001be8a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001be8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be91:	5a                   	pop    edx
c001be92:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be95:	59                   	pop    ecx
c001be96:	8d 50 0c             	lea    edx,[eax+0xc]
c001be99:	52                   	push   edx
c001be9a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bea0:	e8 0d 46 ff ff       	call   c00104b2 <VgaText::setTitle(char*)>
c001bea5:	83 c4 10             	add    esp,0x10
c001bea8:	31 c0                	xor    eax,eax
c001beaa:	eb af                	jmp    c001be5b <sysAppSettings(regs*)+0x4e>
c001beac:	83 ec 08             	sub    esp,0x8
c001beaf:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001beb5:	83 e0 0f             	and    eax,0xf
c001beb8:	50                   	push   eax
c001beb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bebe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bec1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bec7:	e8 d6 45 ff ff       	call   c00104a2 <VgaText::setTitleColour(VgaColour)>
c001becc:	5f                   	pop    edi
c001becd:	58                   	pop    eax
c001bece:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bed4:	c1 e8 04             	shr    eax,0x4
c001bed7:	83 e0 0f             	and    eax,0xf
c001beda:	50                   	push   eax
c001bedb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bee0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bee3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bee9:	e8 a4 45 ff ff       	call   c0010492 <VgaText::setTitleTextColour(VgaColour)>
c001beee:	eb b5                	jmp    c001bea5 <sysAppSettings(regs*)+0x98>
c001bef0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bef5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bef8:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001befe:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001bf04:	c0 e8 06             	shr    al,0x6
c001bf07:	83 e0 01             	and    eax,0x1
c001bf0a:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001bf10:	31 c0                	xor    eax,eax
c001bf12:	e9 44 ff ff ff       	jmp    c001be5b <sysAppSettings(regs*)+0x4e>
c001bf17:	b8 02 00 00 00       	mov    eax,0x2
c001bf1c:	e9 3a ff ff ff       	jmp    c001be5b <sysAppSettings(regs*)+0x4e>

c001bf21 <sysSetFatAttrib(regs*)>:
c001bf21:	57                   	push   edi
c001bf22:	56                   	push   esi
c001bf23:	53                   	push   ebx
c001bf24:	83 ec 1c             	sub    esp,0x1c
c001bf27:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bf2b:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001bf2e:	68 14 01 00 00       	push   0x114
c001bf33:	e8 21 39 ff ff       	call   c000f859 <malloc>
c001bf38:	83 c4 0c             	add    esp,0xc
c001bf3b:	89 c3                	mov    ebx,eax
c001bf3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf42:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf45:	57                   	push   edi
c001bf46:	53                   	push   ebx
c001bf47:	e8 c4 6e ff ff       	call   c0012e10 <File::File(char const*, Process*)>
c001bf4c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001bf4f:	83 c4 0c             	add    esp,0xc
c001bf52:	0f b6 d4             	movzx  edx,ah
c001bf55:	0f b6 c0             	movzx  eax,al
c001bf58:	52                   	push   edx
c001bf59:	50                   	push   eax
c001bf5a:	53                   	push   ebx
c001bf5b:	e8 26 71 ff ff       	call   c0013086 <File::chfatattr(unsigned char, unsigned char)>
c001bf60:	83 c4 10             	add    esp,0x10
c001bf63:	85 db                	test   ebx,ebx
c001bf65:	74 14                	je     c001bf7b <sysSetFatAttrib(regs*)+0x5a>
c001bf67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf6b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bf6d:	83 ec 0c             	sub    esp,0xc
c001bf70:	53                   	push   ebx
c001bf71:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bf74:	83 c4 10             	add    esp,0x10
c001bf77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf7b:	85 c0                	test   eax,eax
c001bf7d:	0f 95 c0             	setne  al
c001bf80:	31 d2                	xor    edx,edx
c001bf82:	0f b6 c0             	movzx  eax,al
c001bf85:	f7 d8                	neg    eax
c001bf87:	83 d2 00             	adc    edx,0x0
c001bf8a:	83 c4 10             	add    esp,0x10
c001bf8d:	f7 da                	neg    edx
c001bf8f:	5b                   	pop    ebx
c001bf90:	5e                   	pop    esi
c001bf91:	5f                   	pop    edi
c001bf92:	c3                   	ret    

c001bf93 <sysPipe(regs*)>:
c001bf93:	57                   	push   edi
c001bf94:	56                   	push   esi
c001bf95:	53                   	push   ebx
c001bf96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf9a:	83 ec 0c             	sub    esp,0xc
c001bf9d:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bfa0:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bfa3:	6a 20                	push   0x20
c001bfa5:	e8 af 38 ff ff       	call   c000f859 <malloc>
c001bfaa:	89 c3                	mov    ebx,eax
c001bfac:	58                   	pop    eax
c001bfad:	5a                   	pop    edx
c001bfae:	68 00 50 00 00       	push   0x5000
c001bfb3:	53                   	push   ebx
c001bfb4:	e8 71 42 ff ff       	call   c001022a <Pipe::Pipe(int)>
c001bfb9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bfbc:	e8 d3 50 ff ff       	call   c0011094 <UnixFile::getFileDescriptor()>
c001bfc1:	89 07                	mov    DWORD PTR [edi],eax
c001bfc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bfc6:	e8 c9 50 ff ff       	call   c0011094 <UnixFile::getFileDescriptor()>
c001bfcb:	83 c4 10             	add    esp,0x10
c001bfce:	89 06                	mov    DWORD PTR [esi],eax
c001bfd0:	31 d2                	xor    edx,edx
c001bfd2:	5b                   	pop    ebx
c001bfd3:	31 c0                	xor    eax,eax
c001bfd5:	5e                   	pop    esi
c001bfd6:	5f                   	pop    edi
c001bfd7:	c3                   	ret    

c001bfd8 <sysGetUnixTime(regs*)>:
c001bfd8:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c001bfdd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bfe3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bfe7:	e9 16 78 ff ff       	jmp    c0013802 <Clock::timeInSecondsLocal()>

c001bfec <string_ends_with(char const*, char const*)>:
c001bfec:	57                   	push   edi
c001bfed:	56                   	push   esi
c001bfee:	53                   	push   ebx
c001bfef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bff3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bff7:	83 ec 0c             	sub    esp,0xc
c001bffa:	53                   	push   ebx
c001bffb:	e8 6c 47 fe ff       	call   c000076c <strlen>
c001c000:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c003:	89 c6                	mov    esi,eax
c001c005:	e8 62 47 fe ff       	call   c000076c <strlen>
c001c00a:	83 c4 10             	add    esp,0x10
c001c00d:	39 c6                	cmp    esi,eax
c001c00f:	7d 06                	jge    c001c017 <string_ends_with(char const*, char const*)+0x2b>
c001c011:	5b                   	pop    ebx
c001c012:	31 c0                	xor    eax,eax
c001c014:	5e                   	pop    esi
c001c015:	5f                   	pop    edi
c001c016:	c3                   	ret    
c001c017:	83 ec 08             	sub    esp,0x8
c001c01a:	29 c6                	sub    esi,eax
c001c01c:	57                   	push   edi
c001c01d:	01 f3                	add    ebx,esi
c001c01f:	53                   	push   ebx
c001c020:	e8 73 48 fe ff       	call   c0000898 <strcmp>
c001c025:	83 c4 10             	add    esp,0x10
c001c028:	85 c0                	test   eax,eax
c001c02a:	5b                   	pop    ebx
c001c02b:	0f 94 c0             	sete   al
c001c02e:	5e                   	pop    esi
c001c02f:	0f b6 c0             	movzx  eax,al
c001c032:	5f                   	pop    edi
c001c033:	c3                   	ret    

c001c034 <sysCallOpen(regs*)>:
c001c034:	56                   	push   esi
c001c035:	53                   	push   ebx
c001c036:	81 ec 04 01 00 00    	sub    esp,0x104
c001c03c:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c043:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c046:	85 c9                	test   ecx,ecx
c001c048:	0f 84 ad 01 00 00    	je     c001c1fb <sysCallOpen(regs*)+0x1c7>
c001c04e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c051:	85 c0                	test   eax,eax
c001c053:	0f 84 a2 01 00 00    	je     c001c1fb <sysCallOpen(regs*)+0x1c7>
c001c059:	52                   	push   edx
c001c05a:	68 49 c3 02 c0       	push   0xc002c349
c001c05f:	50                   	push   eax
c001c060:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c064:	56                   	push   esi
c001c065:	e8 fc 6b ff ff       	call   c0012c66 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c06a:	89 34 24             	mov    DWORD PTR [esp],esi
c001c06d:	e8 fa 46 fe ff       	call   c000076c <strlen>
c001c072:	83 c4 10             	add    esp,0x10
c001c075:	48                   	dec    eax
c001c076:	74 1d                	je     c001c095 <sysCallOpen(regs*)+0x61>
c001c078:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c07b:	eb 0f                	jmp    c001c08c <sysCallOpen(regs*)+0x58>
c001c07d:	80 fa 3a             	cmp    dl,0x3a
c001c080:	74 0f                	je     c001c091 <sysCallOpen(regs*)+0x5d>
c001c082:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c086:	48                   	dec    eax
c001c087:	74 0c                	je     c001c095 <sysCallOpen(regs*)+0x61>
c001c089:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c08c:	80 fa 2e             	cmp    dl,0x2e
c001c08f:	75 ec                	jne    c001c07d <sysCallOpen(regs*)+0x49>
c001c091:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c095:	83 ec 08             	sub    esp,0x8
c001c098:	68 4d c3 02 c0       	push   0xc002c34d
c001c09d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c0a0:	e8 47 ff ff ff       	call   c001bfec <string_ends_with(char const*, char const*)>
c001c0a5:	83 c4 10             	add    esp,0x10
c001c0a8:	85 c0                	test   eax,eax
c001c0aa:	74 1d                	je     c001c0c9 <sysCallOpen(regs*)+0x95>
c001c0ac:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c0af:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c0b5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c0bc:	81 c4 04 01 00 00    	add    esp,0x104
c001c0c2:	31 c0                	xor    eax,eax
c001c0c4:	31 d2                	xor    edx,edx
c001c0c6:	5b                   	pop    ebx
c001c0c7:	5e                   	pop    esi
c001c0c8:	c3                   	ret    
c001c0c9:	83 ec 08             	sub    esp,0x8
c001c0cc:	68 52 c3 02 c0       	push   0xc002c352
c001c0d1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c0d4:	e8 13 ff ff ff       	call   c001bfec <string_ends_with(char const*, char const*)>
c001c0d9:	83 c4 10             	add    esp,0x10
c001c0dc:	85 c0                	test   eax,eax
c001c0de:	75 cc                	jne    c001c0ac <sysCallOpen(regs*)+0x78>
c001c0e0:	83 ec 08             	sub    esp,0x8
c001c0e3:	68 4e c3 02 c0       	push   0xc002c34e
c001c0e8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c0eb:	e8 a8 47 fe ff       	call   c0000898 <strcmp>
c001c0f0:	83 c4 10             	add    esp,0x10
c001c0f3:	85 c0                	test   eax,eax
c001c0f5:	74 b5                	je     c001c0ac <sysCallOpen(regs*)+0x78>
c001c0f7:	83 ec 08             	sub    esp,0x8
c001c0fa:	68 4d c3 02 c0       	push   0xc002c34d
c001c0ff:	56                   	push   esi
c001c100:	e8 e7 fe ff ff       	call   c001bfec <string_ends_with(char const*, char const*)>
c001c105:	83 c4 10             	add    esp,0x10
c001c108:	85 c0                	test   eax,eax
c001c10a:	75 a0                	jne    c001c0ac <sysCallOpen(regs*)+0x78>
c001c10c:	83 ec 08             	sub    esp,0x8
c001c10f:	68 57 c3 02 c0       	push   0xc002c357
c001c114:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c117:	e8 d0 fe ff ff       	call   c001bfec <string_ends_with(char const*, char const*)>
c001c11c:	83 c4 10             	add    esp,0x10
c001c11f:	85 c0                	test   eax,eax
c001c121:	0f 85 e7 00 00 00    	jne    c001c20e <sysCallOpen(regs*)+0x1da>
c001c127:	83 ec 08             	sub    esp,0x8
c001c12a:	68 5c c3 02 c0       	push   0xc002c35c
c001c12f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c132:	e8 b5 fe ff ff       	call   c001bfec <string_ends_with(char const*, char const*)>
c001c137:	83 c4 10             	add    esp,0x10
c001c13a:	85 c0                	test   eax,eax
c001c13c:	0f 85 cc 00 00 00    	jne    c001c20e <sysCallOpen(regs*)+0x1da>
c001c142:	83 ec 08             	sub    esp,0x8
c001c145:	68 58 c3 02 c0       	push   0xc002c358
c001c14a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c14d:	e8 46 47 fe ff       	call   c0000898 <strcmp>
c001c152:	83 c4 10             	add    esp,0x10
c001c155:	85 c0                	test   eax,eax
c001c157:	0f 84 b1 00 00 00    	je     c001c20e <sysCallOpen(regs*)+0x1da>
c001c15d:	83 ec 08             	sub    esp,0x8
c001c160:	68 57 c3 02 c0       	push   0xc002c357
c001c165:	56                   	push   esi
c001c166:	e8 81 fe ff ff       	call   c001bfec <string_ends_with(char const*, char const*)>
c001c16b:	83 c4 10             	add    esp,0x10
c001c16e:	85 c0                	test   eax,eax
c001c170:	0f 85 98 00 00 00    	jne    c001c20e <sysCallOpen(regs*)+0x1da>
c001c176:	83 ec 0c             	sub    esp,0xc
c001c179:	68 14 01 00 00       	push   0x114
c001c17e:	e8 d6 36 ff ff       	call   c000f859 <malloc>
c001c183:	83 c4 0c             	add    esp,0xc
c001c186:	89 c6                	mov    esi,eax
c001c188:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c18d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c190:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c193:	56                   	push   esi
c001c194:	e8 77 6c ff ff       	call   c0012e10 <File::File(char const*, Process*)>
c001c199:	83 c4 10             	add    esp,0x10
c001c19c:	85 f6                	test   esi,esi
c001c19e:	74 5b                	je     c001c1fb <sysCallOpen(regs*)+0x1c7>
c001c1a0:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c1a3:	0f b6 c2             	movzx  eax,dl
c001c1a6:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c1a9:	89 d0                	mov    eax,edx
c001c1ab:	83 e0 01             	and    eax,0x1
c001c1ae:	f6 c2 02             	test   dl,0x2
c001c1b1:	74 03                	je     c001c1b6 <sysCallOpen(regs*)+0x182>
c001c1b3:	83 c8 02             	or     eax,0x2
c001c1b6:	f6 c2 04             	test   dl,0x4
c001c1b9:	74 03                	je     c001c1be <sysCallOpen(regs*)+0x18a>
c001c1bb:	83 c8 04             	or     eax,0x4
c001c1be:	f6 c2 08             	test   dl,0x8
c001c1c1:	74 03                	je     c001c1c6 <sysCallOpen(regs*)+0x192>
c001c1c3:	83 c8 0a             	or     eax,0xa
c001c1c6:	83 e2 10             	and    edx,0x10
c001c1c9:	74 03                	je     c001c1ce <sysCallOpen(regs*)+0x19a>
c001c1cb:	83 c8 12             	or     eax,0x12
c001c1ce:	83 ec 08             	sub    esp,0x8
c001c1d1:	50                   	push   eax
c001c1d2:	56                   	push   esi
c001c1d3:	e8 9c 6c ff ff       	call   c0012e74 <File::open(FileOpenMode)>
c001c1d8:	83 c4 10             	add    esp,0x10
c001c1db:	85 c0                	test   eax,eax
c001c1dd:	75 1c                	jne    c001c1fb <sysCallOpen(regs*)+0x1c7>
c001c1df:	83 ec 0c             	sub    esp,0xc
c001c1e2:	56                   	push   esi
c001c1e3:	e8 ac 4e ff ff       	call   c0011094 <UnixFile::getFileDescriptor()>
c001c1e8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c1eb:	83 c4 10             	add    esp,0x10
c001c1ee:	89 02                	mov    DWORD PTR [edx],eax
c001c1f0:	c1 f8 1f             	sar    eax,0x1f
c001c1f3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c1f6:	e9 c1 fe ff ff       	jmp    c001c0bc <sysCallOpen(regs*)+0x88>
c001c1fb:	81 c4 04 01 00 00    	add    esp,0x104
c001c201:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c206:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c20b:	5b                   	pop    ebx
c001c20c:	5e                   	pop    esi
c001c20d:	c3                   	ret    
c001c20e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c211:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c217:	e9 99 fe ff ff       	jmp    c001c0b5 <sysCallOpen(regs*)+0x81>

c001c21c <Sys::loadSyscalls()>:
c001c21c:	c7 05 40 ef 02 c0 89 b4 01 c0 	mov    DWORD PTR ds:0xc002ef40,0xc001b489
c001c226:	c7 05 44 ef 02 c0 7e b0 01 c0 	mov    DWORD PTR ds:0xc002ef44,0xc001b07e
c001c230:	c7 05 48 ef 02 c0 6f b2 01 c0 	mov    DWORD PTR ds:0xc002ef48,0xc001b26f
c001c23a:	c7 05 4c ef 02 c0 bf b3 01 c0 	mov    DWORD PTR ds:0xc002ef4c,0xc001b3bf
c001c244:	c7 05 50 ef 02 c0 07 b2 01 c0 	mov    DWORD PTR ds:0xc002ef50,0xc001b207
c001c24e:	c7 05 54 ef 02 c0 b5 b0 01 c0 	mov    DWORD PTR ds:0xc002ef54,0xc001b0b5
c001c258:	c7 05 58 ef 02 c0 96 b0 01 c0 	mov    DWORD PTR ds:0xc002ef58,0xc001b096
c001c262:	c7 05 5c ef 02 c0 c4 b2 01 c0 	mov    DWORD PTR ds:0xc002ef5c,0xc001b2c4
c001c26c:	c7 05 64 ef 02 c0 52 b9 01 c0 	mov    DWORD PTR ds:0xc002ef64,0xc001b952
c001c276:	c7 05 60 ef 02 c0 34 c0 01 c0 	mov    DWORD PTR ds:0xc002ef60,0xc001c034
c001c280:	c7 05 68 ef 02 c0 b2 b9 01 c0 	mov    DWORD PTR ds:0xc002ef68,0xc001b9b2
c001c28a:	c7 05 6c ef 02 c0 95 b6 01 c0 	mov    DWORD PTR ds:0xc002ef6c,0xc001b695
c001c294:	c7 05 70 ef 02 c0 cf b4 01 c0 	mov    DWORD PTR ds:0xc002ef70,0xc001b4cf
c001c29e:	c7 05 74 ef 02 c0 d4 b4 01 c0 	mov    DWORD PTR ds:0xc002ef74,0xc001b4d4
c001c2a8:	c7 05 78 ef 02 c0 7b ba 01 c0 	mov    DWORD PTR ds:0xc002ef78,0xc001ba7b
c001c2b2:	c7 05 7c ef 02 c0 27 ba 01 c0 	mov    DWORD PTR ds:0xc002ef7c,0xc001ba27
c001c2bc:	c7 05 80 ef 02 c0 6e b7 01 c0 	mov    DWORD PTR ds:0xc002ef80,0xc001b76e
c001c2c6:	c7 05 84 ef 02 c0 c5 b7 01 c0 	mov    DWORD PTR ds:0xc002ef84,0xc001b7c5
c001c2d0:	c7 05 88 ef 02 c0 31 b8 01 c0 	mov    DWORD PTR ds:0xc002ef88,0xc001b831
c001c2da:	c7 05 8c ef 02 c0 d9 b4 01 c0 	mov    DWORD PTR ds:0xc002ef8c,0xc001b4d9
c001c2e4:	c7 05 90 ef 02 c0 eb ba 01 c0 	mov    DWORD PTR ds:0xc002ef90,0xc001baeb
c001c2ee:	c7 05 94 ef 02 c0 05 bb 01 c0 	mov    DWORD PTR ds:0xc002ef94,0xc001bb05
c001c2f8:	c7 05 98 ef 02 c0 05 bb 01 c0 	mov    DWORD PTR ds:0xc002ef98,0xc001bb05
c001c302:	c7 05 9c ef 02 c0 3a bb 01 c0 	mov    DWORD PTR ds:0xc002ef9c,0xc001bb3a
c001c30c:	c7 05 a0 ef 02 c0 9e bb 01 c0 	mov    DWORD PTR ds:0xc002efa0,0xc001bb9e
c001c316:	c7 05 a4 ef 02 c0 e3 b4 01 c0 	mov    DWORD PTR ds:0xc002efa4,0xc001b4e3
c001c320:	c7 05 a8 ef 02 c0 02 bc 01 c0 	mov    DWORD PTR ds:0xc002efa8,0xc001bc02
c001c32a:	c7 05 ac ef 02 c0 52 b6 01 c0 	mov    DWORD PTR ds:0xc002efac,0xc001b652
c001c334:	c7 05 b0 ef 02 c0 4e bc 01 c0 	mov    DWORD PTR ds:0xc002efb0,0xc001bc4e
c001c33e:	c7 05 b4 ef 02 c0 14 b7 01 c0 	mov    DWORD PTR ds:0xc002efb4,0xc001b714
c001c348:	c7 05 b8 ef 02 c0 d1 bc 01 c0 	mov    DWORD PTR ds:0xc002efb8,0xc001bcd1
c001c352:	c7 05 bc ef 02 c0 a3 b8 01 c0 	mov    DWORD PTR ds:0xc002efbc,0xc001b8a3
c001c35c:	c7 05 c0 ef 02 c0 f8 bc 01 c0 	mov    DWORD PTR ds:0xc002efc0,0xc001bcf8
c001c366:	c7 05 c4 ef 02 c0 60 bd 01 c0 	mov    DWORD PTR ds:0xc002efc4,0xc001bd60
c001c370:	c7 05 c8 ef 02 c0 0d be 01 c0 	mov    DWORD PTR ds:0xc002efc8,0xc001be0d
c001c37a:	c7 05 cc ef 02 c0 f3 b4 01 c0 	mov    DWORD PTR ds:0xc002efcc,0xc001b4f3
c001c384:	c7 05 d0 ef 02 c0 5d b5 01 c0 	mov    DWORD PTR ds:0xc002efd0,0xc001b55d
c001c38e:	c7 05 d4 ef 02 c0 a3 b5 01 c0 	mov    DWORD PTR ds:0xc002efd4,0xc001b5a3
c001c398:	c7 05 d8 ef 02 c0 21 bf 01 c0 	mov    DWORD PTR ds:0xc002efd8,0xc001bf21
c001c3a2:	c7 05 dc ef 02 c0 20 bb 01 c0 	mov    DWORD PTR ds:0xc002efdc,0xc001bb20
c001c3ac:	c7 05 e0 ef 02 c0 f4 b5 01 c0 	mov    DWORD PTR ds:0xc002efe0,0xc001b5f4
c001c3b6:	c7 05 e4 ef 02 c0 93 bf 01 c0 	mov    DWORD PTR ds:0xc002efe4,0xc001bf93
c001c3c0:	c7 05 e8 ef 02 c0 d8 bf 01 c0 	mov    DWORD PTR ds:0xc002efe8,0xc001bfd8
c001c3ca:	c7 05 ec ef 02 c0 5f b1 01 c0 	mov    DWORD PTR ds:0xc002efec,0xc001b15f
c001c3d4:	c7 05 f0 ef 02 c0 e0 b2 01 c0 	mov    DWORD PTR ds:0xc002eff0,0xc001b2e0
c001c3de:	c7 05 f4 ef 02 c0 75 b3 01 c0 	mov    DWORD PTR ds:0xc002eff4,0xc001b375
c001c3e8:	c7 05 f8 ef 02 c0 48 b0 01 c0 	mov    DWORD PTR ds:0xc002eff8,0xc001b048
c001c3f2:	c7 05 fc ef 02 c0 27 b4 01 c0 	mov    DWORD PTR ds:0xc002effc,0xc001b427
c001c3fc:	c7 05 00 f0 02 c0 c1 b0 01 c0 	mov    DWORD PTR ds:0xc002f000,0xc001b0c1
c001c406:	c7 05 04 f0 02 c0 db b0 01 c0 	mov    DWORD PTR ds:0xc002f004,0xc001b0db
c001c410:	c3                   	ret    

c001c411 <Sys::systemCall(regs*, void*)>:
c001c411:	53                   	push   ebx
c001c412:	83 ec 08             	sub    esp,0x8
c001c415:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c419:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c41c:	83 f8 7f             	cmp    eax,0x7f
c001c41f:	77 16                	ja     c001c437 <Sys::systemCall(regs*, void*)+0x26>
c001c421:	8b 14 85 40 ef 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd10c0]
c001c428:	85 d2                	test   edx,edx
c001c42a:	74 0b                	je     c001c437 <Sys::systemCall(regs*, void*)+0x26>
c001c42c:	83 ec 0c             	sub    esp,0xc
c001c42f:	53                   	push   ebx
c001c430:	ff d2                	call   edx
c001c432:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c435:	eb 0d                	jmp    c001c444 <Sys::systemCall(regs*, void*)+0x33>
c001c437:	52                   	push   edx
c001c438:	52                   	push   edx
c001c439:	50                   	push   eax
c001c43a:	68 61 c3 02 c0       	push   0xc002c361
c001c43f:	e8 6d 64 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c001c444:	83 c4 10             	add    esp,0x10
c001c447:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c44c:	31 d2                	xor    edx,edx
c001c44e:	83 c4 08             	add    esp,0x8
c001c451:	5b                   	pop    ebx
c001c452:	c3                   	ret    

c001c453 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c453:	55                   	push   ebp
c001c454:	57                   	push   edi
c001c455:	56                   	push   esi
c001c456:	53                   	push   ebx
c001c457:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c45d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c464:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c46b:	85 c0                	test   eax,eax
c001c46d:	0f 95 c1             	setne  cl
c001c470:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c478:	0f 94 c2             	sete   dl
c001c47b:	84 d1                	test   cl,dl
c001c47d:	74 23                	je     c001c4a2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c47f:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c485:	74 1b                	je     c001c4a2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c487:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c48d:	89 da                	mov    edx,ebx
c001c48f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c495:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c49b:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c4a2:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c4a9:	05 ff 0f 00 00       	add    eax,0xfff
c001c4ae:	83 ec 0c             	sub    esp,0xc
c001c4b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c4b5:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c4bb:	c1 e8 0c             	shr    eax,0xc
c001c4be:	89 fe                	mov    esi,edi
c001c4c0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c4c4:	c1 ee 0c             	shr    esi,0xc
c001c4c7:	6a 01                	push   0x1
c001c4c9:	e8 11 50 ff ff       	call   c00114df <Virt::allocateKernelVirtualPages(int)>
c001c4ce:	89 c5                	mov    ebp,eax
c001c4d0:	58                   	pop    eax
c001c4d1:	5a                   	pop    edx
c001c4d2:	56                   	push   esi
c001c4d3:	68 75 c3 02 c0       	push   0xc002c375
c001c4d8:	e8 d4 63 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c001c4dd:	59                   	pop    ecx
c001c4de:	58                   	pop    eax
c001c4df:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c4e3:	68 87 c3 02 c0       	push   0xc002c387
c001c4e8:	e8 c4 63 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c001c4ed:	83 c4 10             	add    esp,0x10
c001c4f0:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c4f6:	0f 86 31 01 00 00    	jbe    c001c62d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c4fc:	c1 e6 0c             	shl    esi,0xc
c001c4ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c502:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c505:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c509:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c510:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c513:	01 df                	add    edi,ebx
c001c515:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c518:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c51c:	0f 84 08 01 00 00    	je     c001c62a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c522:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c528:	76 05                	jbe    c001c52f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c52a:	bf 00 10 00 00       	mov    edi,0x1000
c001c52f:	83 ec 0c             	sub    esp,0xc
c001c532:	31 d2                	xor    edx,edx
c001c534:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c53b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c53d:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c541:	50                   	push   eax
c001c542:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c546:	56                   	push   esi
c001c547:	52                   	push   edx
c001c548:	57                   	push   edi
c001c549:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c550:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c553:	83 c4 20             	add    esp,0x20
c001c556:	85 c0                	test   eax,eax
c001c558:	74 0a                	je     c001c564 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c55a:	53                   	push   ebx
c001c55b:	53                   	push   ebx
c001c55c:	50                   	push   eax
c001c55d:	68 99 c3 02 c0       	push   0xc002c399
c001c562:	eb 0f                	jmp    c001c573 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c564:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c568:	74 20                	je     c001c58a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c56a:	51                   	push   ecx
c001c56b:	51                   	push   ecx
c001c56c:	6a 00                	push   0x0
c001c56e:	68 c4 c3 02 c0       	push   0xc002c3c4
c001c573:	e8 39 63 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c001c578:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c57b:	e8 8f 52 ff ff       	call   c001180f <Virt::freeKernelVirtualPages(unsigned long)>
c001c580:	83 c4 10             	add    esp,0x10
c001c583:	31 c0                	xor    eax,eax
c001c585:	e9 68 01 00 00       	jmp    c001c6f2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c58a:	fa                   	cli    
c001c58b:	ff 05 08 f9 02 c0    	inc    DWORD PTR ds:0xc002f908
c001c591:	e8 bf 36 ff ff       	call   c000fc55 <Phys::allocatePage()>
c001c596:	6a 07                	push   0x7
c001c598:	89 c7                	mov    edi,eax
c001c59a:	55                   	push   ebp
c001c59b:	50                   	push   eax
c001c59c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5a1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c5a4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c5aa:	e8 d7 55 ff ff       	call   c0011b86 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c5af:	83 c4 0c             	add    esp,0xc
c001c5b2:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c5b9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c5bf:	6a 00                	push   0x0
c001c5c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5c6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c5c9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c5cf:	e8 0c 54 ff ff       	call   c00119e0 <VAS::mapOtherVASIn(bool, VAS*)>
c001c5d4:	58                   	pop    eax
c001c5d5:	5a                   	pop    edx
c001c5d6:	68 07 0c 00 00       	push   0xc07
c001c5db:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c5df:	57                   	push   edi
c001c5e0:	89 ef                	mov    edi,ebp
c001c5e2:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c5e9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c5ef:	6a 00                	push   0x0
c001c5f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5f6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c5f9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c5ff:	e8 3e 59 ff ff       	call   c0011f42 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c604:	b9 00 10 00 00       	mov    ecx,0x1000
c001c609:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c60b:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c001c610:	83 c4 20             	add    esp,0x20
c001c613:	48                   	dec    eax
c001c614:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c001c619:	85 c0                	test   eax,eax
c001c61b:	75 01                	jne    c001c61e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c61d:	fb                   	sti    
c001c61e:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c625:	e9 df fe ff ff       	jmp    c001c509 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c62a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c62d:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c635:	0f 86 a9 00 00 00    	jbe    c001c6e4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c63b:	fa                   	cli    
c001c63c:	ff 05 08 f9 02 c0    	inc    DWORD PTR ds:0xc002f908
c001c642:	51                   	push   ecx
c001c643:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c64a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c650:	6a 00                	push   0x0
c001c652:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c657:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c65a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c660:	e8 7b 53 ff ff       	call   c00119e0 <VAS::mapOtherVASIn(bool, VAS*)>
c001c665:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c669:	c1 e6 0c             	shl    esi,0xc
c001c66c:	01 de                	add    esi,ebx
c001c66e:	83 c4 10             	add    esp,0x10
c001c671:	39 de                	cmp    esi,ebx
c001c673:	74 61                	je     c001c6d6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c675:	e8 db 35 ff ff       	call   c000fc55 <Phys::allocatePage()>
c001c67a:	6a 07                	push   0x7
c001c67c:	89 c7                	mov    edi,eax
c001c67e:	55                   	push   ebp
c001c67f:	50                   	push   eax
c001c680:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c685:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c688:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c68e:	e8 f3 54 ff ff       	call   c0011b86 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c693:	58                   	pop    eax
c001c694:	5a                   	pop    edx
c001c695:	68 07 0c 00 00       	push   0xc07
c001c69a:	53                   	push   ebx
c001c69b:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c6a1:	57                   	push   edi
c001c6a2:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c6a9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c6af:	6a 00                	push   0x0
c001c6b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c6b6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c6b9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c6bf:	e8 7e 58 ff ff       	call   c0011f42 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c6c4:	83 c4 1c             	add    esp,0x1c
c001c6c7:	68 00 10 00 00       	push   0x1000
c001c6cc:	6a 00                	push   0x0
c001c6ce:	55                   	push   ebp
c001c6cf:	e8 7c 40 fe ff       	call   c0000750 <memset>
c001c6d4:	eb 98                	jmp    c001c66e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c6d6:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c001c6db:	48                   	dec    eax
c001c6dc:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c001c6e1:	75 01                	jne    c001c6e4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c6e3:	fb                   	sti    
c001c6e4:	83 ec 0c             	sub    esp,0xc
c001c6e7:	55                   	push   ebp
c001c6e8:	e8 22 51 ff ff       	call   c001180f <Virt::freeKernelVirtualPages(unsigned long)>
c001c6ed:	83 c4 10             	add    esp,0x10
c001c6f0:	b0 01                	mov    al,0x1
c001c6f2:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c6f8:	5b                   	pop    ebx
c001c6f9:	5e                   	pop    esi
c001c6fa:	5f                   	pop    edi
c001c6fb:	5d                   	pop    ebp
c001c6fc:	c3                   	ret    

c001c6fd <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c6fd:	55                   	push   ebp
c001c6fe:	57                   	push   edi
c001c6ff:	56                   	push   esi
c001c700:	53                   	push   ebx
c001c701:	83 ec 48             	sub    esp,0x48
c001c704:	68 14 01 00 00       	push   0x114
c001c709:	e8 4b 31 ff ff       	call   c000f859 <malloc>
c001c70e:	83 c4 0c             	add    esp,0xc
c001c711:	89 c6                	mov    esi,eax
c001c713:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c717:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c71b:	50                   	push   eax
c001c71c:	e8 ef 66 ff ff       	call   c0012e10 <File::File(char const*, Process*)>
c001c721:	58                   	pop    eax
c001c722:	5a                   	pop    edx
c001c723:	6a 01                	push   0x1
c001c725:	56                   	push   esi
c001c726:	e8 49 67 ff ff       	call   c0012e74 <File::open(FileOpenMode)>
c001c72b:	83 c4 10             	add    esp,0x10
c001c72e:	85 c0                	test   eax,eax
c001c730:	0f 85 47 01 00 00    	jne    c001c87d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c736:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c73e:	83 ec 0c             	sub    esp,0xc
c001c741:	6a 34                	push   0x34
c001c743:	e8 11 31 ff ff       	call   c000f859 <malloc>
c001c748:	89 c3                	mov    ebx,eax
c001c74a:	58                   	pop    eax
c001c74b:	8b 06                	mov    eax,DWORD PTR [esi]
c001c74d:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c751:	57                   	push   edi
c001c752:	53                   	push   ebx
c001c753:	6a 00                	push   0x0
c001c755:	6a 34                	push   0x34
c001c757:	56                   	push   esi
c001c758:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c75b:	83 c4 20             	add    esp,0x20
c001c75e:	85 c0                	test   eax,eax
c001c760:	0f 85 17 01 00 00    	jne    c001c87d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c766:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c76c:	0f 85 0b 01 00 00    	jne    c001c87d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c772:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c775:	85 c0                	test   eax,eax
c001c777:	0f 84 00 01 00 00    	je     c001c87d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c77d:	31 d2                	xor    edx,edx
c001c77f:	55                   	push   ebp
c001c780:	52                   	push   edx
c001c781:	50                   	push   eax
c001c782:	56                   	push   esi
c001c783:	e8 aa 67 ff ff       	call   c0012f32 <File::seek(unsigned long long)>
c001c788:	83 c4 10             	add    esp,0x10
c001c78b:	85 c0                	test   eax,eax
c001c78d:	0f 85 ea 00 00 00    	jne    c001c87d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c793:	83 ec 0c             	sub    esp,0xc
c001c796:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c799:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c79d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c7a1:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c7a5:	0f af c2             	imul   eax,edx
c001c7a8:	50                   	push   eax
c001c7a9:	e8 ab 30 ff ff       	call   c000f859 <malloc>
c001c7ae:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c7b0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c7b4:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c7b7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c7bb:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c7bf:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c7c3:	0f af c2             	imul   eax,edx
c001c7c6:	99                   	cdq    
c001c7c7:	52                   	push   edx
c001c7c8:	50                   	push   eax
c001c7c9:	56                   	push   esi
c001c7ca:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c7cd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c7d0:	83 c4 20             	add    esp,0x20
c001c7d3:	85 c0                	test   eax,eax
c001c7d5:	0f 84 a2 00 00 00    	je     c001c87d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c7db:	31 d2                	xor    edx,edx
c001c7dd:	51                   	push   ecx
c001c7de:	52                   	push   edx
c001c7df:	50                   	push   eax
c001c7e0:	56                   	push   esi
c001c7e1:	e8 4c 67 ff ff       	call   c0012f32 <File::seek(unsigned long long)>
c001c7e6:	83 c4 10             	add    esp,0x10
c001c7e9:	85 c0                	test   eax,eax
c001c7eb:	0f 85 8c 00 00 00    	jne    c001c87d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c7f1:	83 ec 0c             	sub    esp,0xc
c001c7f4:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c7f8:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c7fc:	31 ed                	xor    ebp,ebp
c001c7fe:	0f af c2             	imul   eax,edx
c001c801:	50                   	push   eax
c001c802:	e8 52 30 ff ff       	call   c000f859 <malloc>
c001c807:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c809:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c80d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c814:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c818:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c81c:	0f af c2             	imul   eax,edx
c001c81f:	99                   	cdq    
c001c820:	52                   	push   edx
c001c821:	50                   	push   eax
c001c822:	56                   	push   esi
c001c823:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c826:	83 c4 20             	add    esp,0x20
c001c829:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c831:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c835:	0f 86 80 00 00 00    	jbe    c001c8bb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c83b:	0f b7 fd             	movzx  edi,bp
c001c83e:	c1 e7 05             	shl    edi,0x5
c001c841:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c845:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c848:	75 6b                	jne    c001c8b5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c84a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c84d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c851:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c854:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c858:	52                   	push   edx
c001c859:	31 d2                	xor    edx,edx
c001c85b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c85e:	52                   	push   edx
c001c85f:	50                   	push   eax
c001c860:	56                   	push   esi
c001c861:	e8 cc 66 ff ff       	call   c0012f32 <File::seek(unsigned long long)>
c001c866:	83 c4 10             	add    esp,0x10
c001c869:	85 c0                	test   eax,eax
c001c86b:	74 17                	je     c001c884 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c86d:	83 ec 0c             	sub    esp,0xc
c001c870:	68 f0 c3 02 c0       	push   0xc002c3f0
c001c875:	e8 37 60 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c001c87a:	83 c4 10             	add    esp,0x10
c001c87d:	31 c0                	xor    eax,eax
c001c87f:	e9 87 00 00 00       	jmp    c001c90b <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c884:	83 ec 0c             	sub    esp,0xc
c001c887:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c88a:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c88d:	50                   	push   eax
c001c88e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c892:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c896:	56                   	push   esi
c001c897:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c89b:	e8 b3 fb ff ff       	call   c001c453 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c8a0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c8a4:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c8a8:	83 c4 20             	add    esp,0x20
c001c8ab:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c8af:	73 04                	jae    c001c8b5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c8b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c8b5:	45                   	inc    ebp
c001c8b6:	e9 76 ff ff ff       	jmp    c001c831 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c8bb:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c8bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c8c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c8c7:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c8cd:	83 ec 0c             	sub    esp,0xc
c001c8d0:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c8d6:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c8db:	05 00 10 00 00       	add    eax,0x1000
c001c8e0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c8e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8e7:	e8 7d 2f ff ff       	call   c000f869 <free>
c001c8ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c8ef:	e8 75 2f ff ff       	call   c000f869 <free>
c001c8f4:	58                   	pop    eax
c001c8f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c8f9:	e8 6b 2f ff ff       	call   c000f869 <free>
c001c8fe:	89 34 24             	mov    DWORD PTR [esp],esi
c001c901:	e8 cc 65 ff ff       	call   c0012ed2 <File::close()>
c001c906:	83 c4 10             	add    esp,0x10
c001c909:	b0 01                	mov    al,0x1
c001c90b:	83 c4 3c             	add    esp,0x3c
c001c90e:	5b                   	pop    ebx
c001c90f:	5e                   	pop    esi
c001c910:	5f                   	pop    edi
c001c911:	5d                   	pop    ebp
c001c912:	c3                   	ret    

c001c913 <Thr::runtimeReferenceHelper()>:
c001c913:	83 ec 18             	sub    esp,0x18
c001c916:	68 f8 c3 02 c0       	push   0xc002c3f8
c001c91b:	e8 91 5f ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c001c920:	fa                   	cli    
c001c921:	83 c4 10             	add    esp,0x10
c001c924:	eb fe                	jmp    c001c924 <Thr::runtimeReferenceHelper()+0x11>

c001c926 <Thr::getAddressOfKernelSymbol(char const*)>:
c001c926:	57                   	push   edi
c001c927:	56                   	push   esi
c001c928:	53                   	push   ebx
c001c929:	31 db                	xor    ebx,ebx
c001c92b:	39 1d e0 f8 02 c0    	cmp    DWORD PTR ds:0xc002f8e0,ebx
c001c931:	7e 3c                	jle    c001c96f <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c933:	8b 34 9d 60 f8 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd07a0]
c001c93a:	31 ff                	xor    edi,edi
c001c93c:	39 3c 9d 60 f7 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd08a0],edi
c001c943:	7e 27                	jle    c001c96c <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c945:	50                   	push   eax
c001c946:	50                   	push   eax
c001c947:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c94b:	8b 06                	mov    eax,DWORD PTR [esi]
c001c94d:	03 04 9d e0 f7 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd0820]
c001c954:	50                   	push   eax
c001c955:	e8 3e 3f fe ff       	call   c0000898 <strcmp>
c001c95a:	83 c4 10             	add    esp,0x10
c001c95d:	85 c0                	test   eax,eax
c001c95f:	75 05                	jne    c001c966 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c961:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c964:	eb 0b                	jmp    c001c971 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c966:	83 c6 10             	add    esi,0x10
c001c969:	47                   	inc    edi
c001c96a:	eb d0                	jmp    c001c93c <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c96c:	43                   	inc    ebx
c001c96d:	eb bc                	jmp    c001c92b <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c96f:	31 c0                	xor    eax,eax
c001c971:	5b                   	pop    ebx
c001c972:	5e                   	pop    esi
c001c973:	5f                   	pop    edi
c001c974:	c3                   	ret    

c001c975 <Thr::loadKernelSymbolTable(char const*)>:
c001c975:	55                   	push   ebp
c001c976:	57                   	push   edi
c001c977:	56                   	push   esi
c001c978:	53                   	push   ebx
c001c979:	83 ec 68             	sub    esp,0x68
c001c97c:	8b 35 30 f9 02 c0    	mov    esi,DWORD PTR ds:0xc002f930
c001c982:	68 14 01 00 00       	push   0x114
c001c987:	e8 cd 2e ff ff       	call   c000f859 <malloc>
c001c98c:	83 c4 0c             	add    esp,0xc
c001c98f:	89 c3                	mov    ebx,eax
c001c991:	56                   	push   esi
c001c992:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c996:	50                   	push   eax
c001c997:	e8 74 64 ff ff       	call   c0012e10 <File::File(char const*, Process*)>
c001c99c:	5e                   	pop    esi
c001c99d:	5f                   	pop    edi
c001c99e:	6a 01                	push   0x1
c001c9a0:	53                   	push   ebx
c001c9a1:	e8 ce 64 ff ff       	call   c0012e74 <File::open(FileOpenMode)>
c001c9a6:	83 c4 10             	add    esp,0x10
c001c9a9:	85 c0                	test   eax,eax
c001c9ab:	74 0a                	je     c001c9b7 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c9ad:	83 ec 0c             	sub    esp,0xc
c001c9b0:	68 1a c4 02 c0       	push   0xc002c41a
c001c9b5:	eb 34                	jmp    c001c9eb <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c9b7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c9bf:	83 ec 0c             	sub    esp,0xc
c001c9c2:	6a 34                	push   0x34
c001c9c4:	e8 90 2e ff ff       	call   c000f859 <malloc>
c001c9c9:	59                   	pop    ecx
c001c9ca:	89 c7                	mov    edi,eax
c001c9cc:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c9d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c9d2:	56                   	push   esi
c001c9d3:	57                   	push   edi
c001c9d4:	6a 00                	push   0x0
c001c9d6:	6a 34                	push   0x34
c001c9d8:	53                   	push   ebx
c001c9d9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c9dc:	83 c4 20             	add    esp,0x20
c001c9df:	85 c0                	test   eax,eax
c001c9e1:	74 17                	je     c001c9fa <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c9e3:	83 ec 0c             	sub    esp,0xc
c001c9e6:	68 31 c4 02 c0       	push   0xc002c431
c001c9eb:	e8 2f d8 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c001c9f0:	83 c4 10             	add    esp,0x10
c001c9f3:	31 c0                	xor    eax,eax
c001c9f5:	e9 31 02 00 00       	jmp    c001cc2b <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c9fa:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001ca00:	75 e1                	jne    c001c9e3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ca02:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ca05:	85 c0                	test   eax,eax
c001ca07:	74 da                	je     c001c9e3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ca09:	52                   	push   edx
c001ca0a:	31 d2                	xor    edx,edx
c001ca0c:	52                   	push   edx
c001ca0d:	50                   	push   eax
c001ca0e:	53                   	push   ebx
c001ca0f:	e8 1e 65 ff ff       	call   c0012f32 <File::seek(unsigned long long)>
c001ca14:	83 c4 10             	add    esp,0x10
c001ca17:	85 c0                	test   eax,eax
c001ca19:	75 c8                	jne    c001c9e3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ca1b:	83 ec 0c             	sub    esp,0xc
c001ca1e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ca22:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ca26:	31 ed                	xor    ebp,ebp
c001ca28:	0f af c2             	imul   eax,edx
c001ca2b:	50                   	push   eax
c001ca2c:	e8 28 2e ff ff       	call   c000f859 <malloc>
c001ca31:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001ca33:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ca37:	89 34 24             	mov    DWORD PTR [esp],esi
c001ca3a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ca3e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ca42:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ca46:	0f af c2             	imul   eax,edx
c001ca49:	99                   	cdq    
c001ca4a:	52                   	push   edx
c001ca4b:	50                   	push   eax
c001ca4c:	53                   	push   ebx
c001ca4d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca50:	83 c4 20             	add    esp,0x20
c001ca53:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ca5b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ca63:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ca6b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ca73:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001ca77:	0f 86 aa 00 00 00    	jbe    c001cb27 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001ca7d:	0f b7 f5             	movzx  esi,bp
c001ca80:	6b f6 28             	imul   esi,esi,0x28
c001ca83:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ca87:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ca8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ca8e:	50                   	push   eax
c001ca8f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ca93:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ca97:	8b 16                	mov    edx,DWORD PTR [esi]
c001ca99:	6b c0 28             	imul   eax,eax,0x28
c001ca9c:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001caa0:	89 d0                	mov    eax,edx
c001caa2:	31 d2                	xor    edx,edx
c001caa4:	52                   	push   edx
c001caa5:	50                   	push   eax
c001caa6:	53                   	push   ebx
c001caa7:	e8 86 64 ff ff       	call   c0012f32 <File::seek(unsigned long long)>
c001caac:	83 c4 0c             	add    esp,0xc
c001caaf:	6a 20                	push   0x20
c001cab1:	6a 00                	push   0x0
c001cab3:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cab7:	52                   	push   edx
c001cab8:	e8 93 3c fe ff       	call   c0000750 <memset>
c001cabd:	58                   	pop    eax
c001cabe:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cac0:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cac4:	51                   	push   ecx
c001cac5:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cac9:	52                   	push   edx
c001caca:	6a 00                	push   0x0
c001cacc:	6a 1f                	push   0x1f
c001cace:	53                   	push   ebx
c001cacf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cad2:	83 c4 18             	add    esp,0x18
c001cad5:	68 48 c4 02 c0       	push   0xc002c448
c001cada:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cade:	52                   	push   edx
c001cadf:	e8 b4 3d fe ff       	call   c0000898 <strcmp>
c001cae4:	83 c4 10             	add    esp,0x10
c001cae7:	85 c0                	test   eax,eax
c001cae9:	75 0f                	jne    c001cafa <Thr::loadKernelSymbolTable(char const*)+0x185>
c001caeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001caee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001caf2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001caf6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cafa:	50                   	push   eax
c001cafb:	50                   	push   eax
c001cafc:	68 50 c4 02 c0       	push   0xc002c450
c001cb01:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cb05:	50                   	push   eax
c001cb06:	e8 8d 3d fe ff       	call   c0000898 <strcmp>
c001cb0b:	83 c4 10             	add    esp,0x10
c001cb0e:	85 c0                	test   eax,eax
c001cb10:	75 0f                	jne    c001cb21 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cb12:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb15:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cb1d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cb21:	45                   	inc    ebp
c001cb22:	e9 4c ff ff ff       	jmp    c001ca73 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cb27:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cb2c:	75 10                	jne    c001cb3e <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cb2e:	83 ec 0c             	sub    esp,0xc
c001cb31:	68 58 c4 02 c0       	push   0xc002c458
c001cb36:	e8 e4 d6 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c001cb3b:	83 c4 10             	add    esp,0x10
c001cb3e:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cb43:	75 10                	jne    c001cb55 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cb45:	83 ec 0c             	sub    esp,0xc
c001cb48:	68 58 c4 02 c0       	push   0xc002c458
c001cb4d:	e8 cd d6 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c001cb52:	83 c4 10             	add    esp,0x10
c001cb55:	31 d2                	xor    edx,edx
c001cb57:	50                   	push   eax
c001cb58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb5c:	52                   	push   edx
c001cb5d:	50                   	push   eax
c001cb5e:	53                   	push   ebx
c001cb5f:	e8 ce 63 ff ff       	call   c0012f32 <File::seek(unsigned long long)>
c001cb64:	5a                   	pop    edx
c001cb65:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cb69:	e8 eb 2c ff ff       	call   c000f859 <malloc>
c001cb6e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cb72:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb76:	31 c9                	xor    ecx,ecx
c001cb78:	5e                   	pop    esi
c001cb79:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb7b:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cb7f:	55                   	push   ebp
c001cb80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb84:	51                   	push   ecx
c001cb85:	52                   	push   edx
c001cb86:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cb8a:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cb8e:	53                   	push   ebx
c001cb8f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb92:	83 c4 14             	add    esp,0x14
c001cb95:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb99:	e8 bb 2c ff ff       	call   c000f859 <malloc>
c001cb9e:	89 c6                	mov    esi,eax
c001cba0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cba2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cba5:	56                   	push   esi
c001cba6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cbaa:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cbae:	51                   	push   ecx
c001cbaf:	52                   	push   edx
c001cbb0:	53                   	push   ebx
c001cbb1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cbb4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cbb8:	8b 15 e0 f8 02 c0    	mov    edx,DWORD PTR ds:0xc002f8e0
c001cbbe:	83 c4 1c             	add    esp,0x1c
c001cbc1:	c1 e8 04             	shr    eax,0x4
c001cbc4:	89 04 95 60 f7 02 c0 	mov    DWORD PTR [edx*4-0x3ffd08a0],eax
c001cbcb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cbcf:	31 d2                	xor    edx,edx
c001cbd1:	52                   	push   edx
c001cbd2:	50                   	push   eax
c001cbd3:	53                   	push   ebx
c001cbd4:	e8 59 63 ff ff       	call   c0012f32 <File::seek(unsigned long long)>
c001cbd9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cbdb:	31 d2                	xor    edx,edx
c001cbdd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cbe0:	56                   	push   esi
c001cbe1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cbe5:	52                   	push   edx
c001cbe6:	50                   	push   eax
c001cbe7:	53                   	push   ebx
c001cbe8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbeb:	83 c4 14             	add    esp,0x14
c001cbee:	53                   	push   ebx
c001cbef:	e8 de 62 ff ff       	call   c0012ed2 <File::close()>
c001cbf4:	5d                   	pop    ebp
c001cbf5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cbf9:	e8 6b 2c ff ff       	call   c000f869 <free>
c001cbfe:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cc01:	e8 63 2c ff ff       	call   c000f869 <free>
c001cc06:	a1 e0 f8 02 c0       	mov    eax,ds:0xc002f8e0
c001cc0b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cc0f:	8d 50 01             	lea    edx,[eax+0x1]
c001cc12:	89 0c 85 60 f8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd07a0],ecx
c001cc19:	89 34 85 e0 f7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0820],esi
c001cc20:	89 15 e0 f8 02 c0    	mov    DWORD PTR ds:0xc002f8e0,edx
c001cc26:	83 c4 10             	add    esp,0x10
c001cc29:	b0 01                	mov    al,0x1
c001cc2b:	83 c4 5c             	add    esp,0x5c
c001cc2e:	5b                   	pop    ebx
c001cc2f:	5e                   	pop    esi
c001cc30:	5f                   	pop    edi
c001cc31:	5d                   	pop    ebp
c001cc32:	c3                   	ret    

c001cc33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cc33:	55                   	push   ebp
c001cc34:	57                   	push   edi
c001cc35:	56                   	push   esi
c001cc36:	53                   	push   ebx
c001cc37:	81 ec 68 03 00 00    	sub    esp,0x368
c001cc3d:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cc44:	8b 1d 30 f9 02 c0    	mov    ebx,DWORD PTR ds:0xc002f930
c001cc4a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cc4e:	68 14 01 00 00       	push   0x114
c001cc53:	e8 01 2c ff ff       	call   c000f859 <malloc>
c001cc58:	83 c4 0c             	add    esp,0xc
c001cc5b:	89 c5                	mov    ebp,eax
c001cc5d:	53                   	push   ebx
c001cc5e:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cc65:	50                   	push   eax
c001cc66:	e8 a5 61 ff ff       	call   c0012e10 <File::File(char const*, Process*)>
c001cc6b:	5e                   	pop    esi
c001cc6c:	5f                   	pop    edi
c001cc6d:	6a 01                	push   0x1
c001cc6f:	55                   	push   ebp
c001cc70:	e8 ff 61 ff ff       	call   c0012e74 <File::open(FileOpenMode)>
c001cc75:	83 c4 10             	add    esp,0x10
c001cc78:	85 c0                	test   eax,eax
c001cc7a:	0f 85 a7 06 00 00    	jne    c001d327 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cc80:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cc88:	83 ec 0c             	sub    esp,0xc
c001cc8b:	6a 34                	push   0x34
c001cc8d:	e8 c7 2b ff ff       	call   c000f859 <malloc>
c001cc92:	5b                   	pop    ebx
c001cc93:	89 c7                	mov    edi,eax
c001cc95:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cc99:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cc9c:	53                   	push   ebx
c001cc9d:	57                   	push   edi
c001cc9e:	6a 00                	push   0x0
c001cca0:	6a 34                	push   0x34
c001cca2:	55                   	push   ebp
c001cca3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cca6:	83 c4 20             	add    esp,0x20
c001cca9:	85 c0                	test   eax,eax
c001ccab:	0f 85 76 06 00 00    	jne    c001d327 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ccb1:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001ccb7:	0f 85 6a 06 00 00    	jne    c001d327 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ccbd:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ccc0:	85 c0                	test   eax,eax
c001ccc2:	0f 84 5f 06 00 00    	je     c001d327 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ccc8:	31 d2                	xor    edx,edx
c001ccca:	51                   	push   ecx
c001cccb:	52                   	push   edx
c001cccc:	50                   	push   eax
c001cccd:	55                   	push   ebp
c001ccce:	e8 5f 62 ff ff       	call   c0012f32 <File::seek(unsigned long long)>
c001ccd3:	83 c4 10             	add    esp,0x10
c001ccd6:	85 c0                	test   eax,eax
c001ccd8:	0f 85 49 06 00 00    	jne    c001d327 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ccde:	83 ec 0c             	sub    esp,0xc
c001cce1:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001cce4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cce8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001ccec:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ccf0:	0f af c2             	imul   eax,edx
c001ccf3:	50                   	push   eax
c001ccf4:	e8 60 2b ff ff       	call   c000f859 <malloc>
c001ccf9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ccfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd00:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd03:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd07:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd0b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd0f:	0f af c2             	imul   eax,edx
c001cd12:	99                   	cdq    
c001cd13:	52                   	push   edx
c001cd14:	50                   	push   eax
c001cd15:	55                   	push   ebp
c001cd16:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd19:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001cd1c:	83 c4 20             	add    esp,0x20
c001cd1f:	85 c0                	test   eax,eax
c001cd21:	0f 84 00 06 00 00    	je     c001d327 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cd27:	52                   	push   edx
c001cd28:	31 d2                	xor    edx,edx
c001cd2a:	52                   	push   edx
c001cd2b:	50                   	push   eax
c001cd2c:	55                   	push   ebp
c001cd2d:	e8 00 62 ff ff       	call   c0012f32 <File::seek(unsigned long long)>
c001cd32:	83 c4 10             	add    esp,0x10
c001cd35:	85 c0                	test   eax,eax
c001cd37:	0f 85 ea 05 00 00    	jne    c001d327 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cd3d:	83 ec 0c             	sub    esp,0xc
c001cd40:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cd44:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cd48:	31 f6                	xor    esi,esi
c001cd4a:	0f af c2             	imul   eax,edx
c001cd4d:	50                   	push   eax
c001cd4e:	e8 06 2b ff ff       	call   c000f859 <malloc>
c001cd53:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cd56:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cd5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd5d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cd61:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cd65:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cd69:	0f af c2             	imul   eax,edx
c001cd6c:	99                   	cdq    
c001cd6d:	52                   	push   edx
c001cd6e:	50                   	push   eax
c001cd6f:	55                   	push   ebp
c001cd70:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd73:	83 c4 20             	add    esp,0x20
c001cd76:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001cd7a:	0f 86 8a 00 00 00    	jbe    c001ce0a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001cd80:	0f b7 de             	movzx  ebx,si
c001cd83:	c1 e3 05             	shl    ebx,0x5
c001cd86:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001cd8a:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001cd8d:	75 75                	jne    c001ce04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001cd8f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cd92:	31 d2                	xor    edx,edx
c001cd94:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cd98:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cd9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cd9f:	50                   	push   eax
c001cda0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001cda3:	52                   	push   edx
c001cda4:	50                   	push   eax
c001cda5:	55                   	push   ebp
c001cda6:	e8 87 61 ff ff       	call   c0012f32 <File::seek(unsigned long long)>
c001cdab:	83 c4 10             	add    esp,0x10
c001cdae:	85 c0                	test   eax,eax
c001cdb0:	0f 85 71 05 00 00    	jne    c001d327 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cdb6:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001cdbd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cdc0:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001cdc4:	31 d2                	xor    edx,edx
c001cdc6:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001cdca:	83 ec 0c             	sub    esp,0xc
c001cdcd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cdd1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cdd8:	50                   	push   eax
c001cdd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cddd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cde1:	52                   	push   edx
c001cde2:	50                   	push   eax
c001cde3:	55                   	push   ebp
c001cde4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cde7:	83 c4 1c             	add    esp,0x1c
c001cdea:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cded:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001cdf0:	50                   	push   eax
c001cdf1:	6a 00                	push   0x0
c001cdf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdf7:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001cdfb:	50                   	push   eax
c001cdfc:	e8 4f 39 fe ff       	call   c0000750 <memset>
c001ce01:	83 c4 10             	add    esp,0x10
c001ce04:	46                   	inc    esi
c001ce05:	e9 6c ff ff ff       	jmp    c001cd76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001ce0a:	53                   	push   ebx
c001ce0b:	31 db                	xor    ebx,ebx
c001ce0d:	68 00 01 00 00       	push   0x100
c001ce12:	6a 00                	push   0x0
c001ce14:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001ce18:	50                   	push   eax
c001ce19:	e8 32 39 fe ff       	call   c0000750 <memset>
c001ce1e:	83 c4 0c             	add    esp,0xc
c001ce21:	68 00 01 00 00       	push   0x100
c001ce26:	6a 00                	push   0x0
c001ce28:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001ce2f:	50                   	push   eax
c001ce30:	e8 1b 39 fe ff       	call   c0000750 <memset>
c001ce35:	83 c4 10             	add    esp,0x10
c001ce38:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ce40:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ce48:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001ce50:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ce58:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001ce60:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001ce64:	0f 86 30 01 00 00    	jbe    c001cf9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001ce6a:	0f b7 f3             	movzx  esi,bx
c001ce6d:	6b f6 28             	imul   esi,esi,0x28
c001ce70:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ce74:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ce77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce7b:	52                   	push   edx
c001ce7c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ce80:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001ce84:	8b 06                	mov    eax,DWORD PTR [esi]
c001ce86:	6b d2 28             	imul   edx,edx,0x28
c001ce89:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001ce8d:	31 d2                	xor    edx,edx
c001ce8f:	52                   	push   edx
c001ce90:	50                   	push   eax
c001ce91:	55                   	push   ebp
c001ce92:	e8 9b 60 ff ff       	call   c0012f32 <File::seek(unsigned long long)>
c001ce97:	83 c4 0c             	add    esp,0xc
c001ce9a:	6a 20                	push   0x20
c001ce9c:	6a 00                	push   0x0
c001ce9e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cea5:	51                   	push   ecx
c001cea6:	e8 a5 38 fe ff       	call   c0000750 <memset>
c001ceab:	59                   	pop    ecx
c001ceac:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ceaf:	8d 54 24 58          	lea    edx,[esp+0x58]
c001ceb3:	52                   	push   edx
c001ceb4:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001cebb:	51                   	push   ecx
c001cebc:	6a 00                	push   0x0
c001cebe:	6a 1f                	push   0x1f
c001cec0:	55                   	push   ebp
c001cec1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cec4:	83 c4 1c             	add    esp,0x1c
c001cec7:	6a 09                	push   0x9
c001cec9:	68 72 c4 02 c0       	push   0xc002c472
c001cece:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001ced5:	51                   	push   ecx
c001ced6:	e8 71 37 fe ff       	call   c000064c <memcmp>
c001cedb:	83 c4 10             	add    esp,0x10
c001cede:	85 c0                	test   eax,eax
c001cee0:	75 21                	jne    c001cf03 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001cee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cee6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ceea:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001ceee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cef2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cef5:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cefc:	89 d0                	mov    eax,edx
c001cefe:	40                   	inc    eax
c001ceff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cf03:	50                   	push   eax
c001cf04:	6a 09                	push   0x9
c001cf06:	68 7c c4 02 c0       	push   0xc002c47c
c001cf0b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cf12:	50                   	push   eax
c001cf13:	e8 34 37 fe ff       	call   c000064c <memcmp>
c001cf18:	83 c4 10             	add    esp,0x10
c001cf1b:	85 c0                	test   eax,eax
c001cf1d:	75 21                	jne    c001cf40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001cf1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf23:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cf27:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cf2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cf2f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf32:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cf39:	89 d0                	mov    eax,edx
c001cf3b:	40                   	inc    eax
c001cf3c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cf40:	50                   	push   eax
c001cf41:	50                   	push   eax
c001cf42:	68 48 c4 02 c0       	push   0xc002c448
c001cf47:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cf4e:	50                   	push   eax
c001cf4f:	e8 44 39 fe ff       	call   c0000898 <strcmp>
c001cf54:	83 c4 10             	add    esp,0x10
c001cf57:	85 c0                	test   eax,eax
c001cf59:	75 0f                	jne    c001cf6a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001cf5b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf5e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cf62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cf66:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cf6a:	50                   	push   eax
c001cf6b:	50                   	push   eax
c001cf6c:	68 50 c4 02 c0       	push   0xc002c450
c001cf71:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cf78:	50                   	push   eax
c001cf79:	e8 1a 39 fe ff       	call   c0000898 <strcmp>
c001cf7e:	83 c4 10             	add    esp,0x10
c001cf81:	85 c0                	test   eax,eax
c001cf83:	75 0f                	jne    c001cf94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001cf85:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf88:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cf8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cf90:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001cf94:	43                   	inc    ebx
c001cf95:	e9 c6 fe ff ff       	jmp    c001ce60 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001cf9a:	31 d2                	xor    edx,edx
c001cf9c:	50                   	push   eax
c001cf9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cfa1:	52                   	push   edx
c001cfa2:	50                   	push   eax
c001cfa3:	55                   	push   ebp
c001cfa4:	e8 89 5f ff ff       	call   c0012f32 <File::seek(unsigned long long)>
c001cfa9:	58                   	pop    eax
c001cfaa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cfae:	e8 a6 28 ff ff       	call   c000f859 <malloc>
c001cfb3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cfb6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cfba:	31 d2                	xor    edx,edx
c001cfbc:	58                   	pop    eax
c001cfbd:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cfc1:	53                   	push   ebx
c001cfc2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cfc6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cfca:	52                   	push   edx
c001cfcb:	50                   	push   eax
c001cfcc:	55                   	push   ebp
c001cfcd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cfd0:	83 c4 14             	add    esp,0x14
c001cfd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cfd7:	e8 7d 28 ff ff       	call   c000f859 <malloc>
c001cfdc:	31 d2                	xor    edx,edx
c001cfde:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cfe2:	83 c4 0c             	add    esp,0xc
c001cfe5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cfe9:	52                   	push   edx
c001cfea:	50                   	push   eax
c001cfeb:	55                   	push   ebp
c001cfec:	e8 41 5f ff ff       	call   c0012f32 <File::seek(unsigned long long)>
c001cff1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cff4:	31 d2                	xor    edx,edx
c001cff6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cff9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cffd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d001:	52                   	push   edx
c001d002:	50                   	push   eax
c001d003:	55                   	push   ebp
c001d004:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d007:	83 c4 20             	add    esp,0x20
c001d00a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d012:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d016:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d01a:	0f 84 0b 03 00 00    	je     c001d32b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d020:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d027:	31 d2                	xor    edx,edx
c001d029:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d02d:	c1 e8 03             	shr    eax,0x3
c001d030:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d034:	51                   	push   ecx
c001d035:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d039:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d03d:	52                   	push   edx
c001d03e:	50                   	push   eax
c001d03f:	55                   	push   ebp
c001d040:	e8 ed 5e ff ff       	call   c0012f32 <File::seek(unsigned long long)>
c001d045:	5b                   	pop    ebx
c001d046:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d04a:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d051:	e8 03 28 ff ff       	call   c000f859 <malloc>
c001d056:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d059:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d05d:	31 d2                	xor    edx,edx
c001d05f:	5e                   	pop    esi
c001d060:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d064:	50                   	push   eax
c001d065:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d069:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d06d:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d074:	52                   	push   edx
c001d075:	50                   	push   eax
c001d076:	55                   	push   ebp
c001d077:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d07a:	83 c4 20             	add    esp,0x20
c001d07d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d085:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d089:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d08d:	0f 8d 7c 02 00 00    	jge    c001d30f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d093:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d097:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d09b:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d0a0:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d0a3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d0a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0ab:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d0af:	89 d8                	mov    eax,ebx
c001d0b1:	c1 e8 08             	shr    eax,0x8
c001d0b4:	89 c6                	mov    esi,eax
c001d0b6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d0ba:	c1 e6 04             	shl    esi,0x4
c001d0bd:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d0c1:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d0c4:	85 d2                	test   edx,edx
c001d0c6:	0f 85 bf 00 00 00    	jne    c001d18b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d0cc:	83 ec 0c             	sub    esp,0xc
c001d0cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d0d3:	03 06                	add    eax,DWORD PTR [esi]
c001d0d5:	50                   	push   eax
c001d0d6:	e8 4b f8 ff ff       	call   c001c926 <Thr::getAddressOfKernelSymbol(char const*)>
c001d0db:	83 c4 10             	add    esp,0x10
c001d0de:	89 c2                	mov    edx,eax
c001d0e0:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d0e5:	85 c0                	test   eax,eax
c001d0e7:	0f 85 9e 00 00 00    	jne    c001d18b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d0ed:	83 ec 0c             	sub    esp,0xc
c001d0f0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d0f4:	03 06                	add    eax,DWORD PTR [esi]
c001d0f6:	50                   	push   eax
c001d0f7:	e8 79 16 ff ff       	call   c000e775 <Krnl::resolveCompatibilitySymbol(char*)>
c001d0fc:	83 c4 10             	add    esp,0x10
c001d0ff:	89 c2                	mov    edx,eax
c001d101:	85 c0                	test   eax,eax
c001d103:	0f 85 82 00 00 00    	jne    c001d18b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d109:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d10d:	50                   	push   eax
c001d10e:	50                   	push   eax
c001d10f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d113:	03 06                	add    eax,DWORD PTR [esi]
c001d115:	50                   	push   eax
c001d116:	68 86 c4 02 c0       	push   0xc002c486
c001d11b:	e8 91 57 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c001d120:	58                   	pop    eax
c001d121:	5a                   	pop    edx
c001d122:	68 a0 c4 02 c0       	push   0xc002c4a0
c001d127:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d12e:	50                   	push   eax
c001d12f:	e8 d8 36 fe ff       	call   c000080c <strcpy>
c001d134:	59                   	pop    ecx
c001d135:	58                   	pop    eax
c001d136:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d13a:	03 06                	add    eax,DWORD PTR [esi]
c001d13c:	50                   	push   eax
c001d13d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d144:	50                   	push   eax
c001d145:	e8 02 38 fe ff       	call   c000094c <strcat>
c001d14a:	58                   	pop    eax
c001d14b:	5a                   	pop    edx
c001d14c:	68 36 c5 02 c0       	push   0xc002c536
c001d151:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d158:	50                   	push   eax
c001d159:	e8 ee 37 fe ff       	call   c000094c <strcat>
c001d15e:	83 c4 10             	add    esp,0x10
c001d161:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d166:	0f 84 5d 01 00 00    	je     c001d2c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d16c:	83 ec 0c             	sub    esp,0xc
c001d16f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d176:	50                   	push   eax
c001d177:	e8 a3 d0 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c001d17c:	83 c4 10             	add    esp,0x10
c001d17f:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d183:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d187:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d18b:	80 fb 01             	cmp    bl,0x1
c001d18e:	0f 85 88 00 00 00    	jne    c001d21c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d194:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d19b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d19f:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d1a3:	01 ce                	add    esi,ecx
c001d1a5:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d1ab:	0f 94 c0             	sete   al
c001d1ae:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d1b4:	0f 94 c3             	sete   bl
c001d1b7:	09 c3                	or     ebx,eax
c001d1b9:	8b 06                	mov    eax,DWORD PTR [esi]
c001d1bb:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d1c0:	74 41                	je     c001d203 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001d1c2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d1c5:	84 db                	test   bl,bl
c001d1c7:	75 15                	jne    c001d1de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001d1c9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d1cd:	66 83 f8 0c          	cmp    ax,0xc
c001d1d1:	76 05                	jbe    c001d1d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001d1d3:	b8 0c 00 00 00       	mov    eax,0xc
c001d1d8:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d1dc:	76 37                	jbe    c001d215 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d1de:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d1e2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d1e7:	0f 84 dc 00 00 00    	je     c001d2c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d1ed:	83 ec 0c             	sub    esp,0xc
c001d1f0:	68 b7 c4 02 c0       	push   0xc002c4b7
c001d1f5:	e8 25 d0 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c001d1fa:	83 c4 10             	add    esp,0x10
c001d1fd:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d201:	eb 12                	jmp    c001d215 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d203:	01 c1                	add    ecx,eax
c001d205:	84 db                	test   bl,bl
c001d207:	75 0c                	jne    c001d215 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d209:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d20d:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d211:	77 02                	ja     c001d215 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d213:	01 d1                	add    ecx,edx
c001d215:	89 0e                	mov    DWORD PTR [esi],ecx
c001d217:	e9 ea 00 00 00       	jmp    c001d306 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d21c:	80 fb 02             	cmp    bl,0x2
c001d21f:	75 7c                	jne    c001d29d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d221:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d228:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d22c:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d230:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d236:	74 20                	je     c001d258 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d238:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d23e:	74 18                	je     c001d258 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d240:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d244:	b9 0a 00 00 00       	mov    ecx,0xa
c001d249:	66 83 f8 0e          	cmp    ax,0xe
c001d24d:	77 03                	ja     c001d252 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d24f:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d252:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d256:	76 1f                	jbe    c001d277 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d258:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d25c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d261:	74 66                	je     c001d2c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d263:	83 ec 0c             	sub    esp,0xc
c001d266:	68 d3 c4 02 c0       	push   0xc002c4d3
c001d26b:	e8 af cf ff ff       	call   c001a21f <Krnl::panic(char const*)>
c001d270:	83 c4 10             	add    esp,0x10
c001d273:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d277:	8b 06                	mov    eax,DWORD PTR [esi]
c001d279:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d27e:	74 13                	je     c001d293 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d280:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d284:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d28b:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d28f:	01 c8                	add    eax,ecx
c001d291:	eb 04                	jmp    c001d297 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d293:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d297:	01 c2                	add    edx,eax
c001d299:	89 16                	mov    DWORD PTR [esi],edx
c001d29b:	eb 69                	jmp    c001d306 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d29d:	0f b6 db             	movzx  ebx,bl
c001d2a0:	50                   	push   eax
c001d2a1:	50                   	push   eax
c001d2a2:	53                   	push   ebx
c001d2a3:	68 ef c4 02 c0       	push   0xc002c4ef
c001d2a8:	e8 04 56 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c001d2ad:	83 c4 10             	add    esp,0x10
c001d2b0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d2b5:	74 12                	je     c001d2c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d2b7:	83 ec 0c             	sub    esp,0xc
c001d2ba:	68 fa c4 02 c0       	push   0xc002c4fa
c001d2bf:	e8 5b cf ff ff       	call   c001a21f <Krnl::panic(char const*)>
c001d2c4:	83 c4 10             	add    esp,0x10
c001d2c7:	eb 3d                	jmp    c001d306 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d2c9:	83 ec 0c             	sub    esp,0xc
c001d2cc:	55                   	push   ebp
c001d2cd:	e8 00 5c ff ff       	call   c0012ed2 <File::close()>
c001d2d2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d2d5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d2d8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d2db:	59                   	pop    ecx
c001d2dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d2e0:	e8 84 25 ff ff       	call   c000f869 <free>
c001d2e5:	5b                   	pop    ebx
c001d2e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d2ea:	e8 7a 25 ff ff       	call   c000f869 <free>
c001d2ef:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d2f2:	e8 72 25 ff ff       	call   c000f869 <free>
c001d2f7:	5e                   	pop    esi
c001d2f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d2fc:	e8 68 25 ff ff       	call   c000f869 <free>
c001d301:	83 c4 10             	add    esp,0x10
c001d304:	eb 21                	jmp    c001d327 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d306:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d30a:	e9 76 fd ff ff       	jmp    c001d085 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d30f:	83 ec 0c             	sub    esp,0xc
c001d312:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d316:	e8 4e 25 ff ff       	call   c000f869 <free>
c001d31b:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d31f:	83 c4 10             	add    esp,0x10
c001d322:	e9 eb fc ff ff       	jmp    c001d012 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d327:	31 c0                	xor    eax,eax
c001d329:	eb 33                	jmp    c001d35e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d32b:	83 ec 0c             	sub    esp,0xc
c001d32e:	55                   	push   ebp
c001d32f:	e8 9e 5b ff ff       	call   c0012ed2 <File::close()>
c001d334:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d337:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d33a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d33d:	58                   	pop    eax
c001d33e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d342:	e8 22 25 ff ff       	call   c000f869 <free>
c001d347:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d34a:	e8 1a 25 ff ff       	call   c000f869 <free>
c001d34f:	5a                   	pop    edx
c001d350:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d354:	e8 10 25 ff ff       	call   c000f869 <free>
c001d359:	83 c4 10             	add    esp,0x10
c001d35c:	b0 01                	mov    al,0x1
c001d35e:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d364:	5b                   	pop    ebx
c001d365:	5e                   	pop    esi
c001d366:	5f                   	pop    edi
c001d367:	5d                   	pop    ebp
c001d368:	c3                   	ret    

c001d369 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d369:	56                   	push   esi
c001d36a:	31 d2                	xor    edx,edx
c001d36c:	53                   	push   ebx
c001d36d:	8b 1d 40 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f140
c001d373:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d377:	39 d3                	cmp    ebx,edx
c001d379:	7e 1b                	jle    c001d396 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d37b:	8b 04 95 60 f3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0ca0]
c001d382:	39 c8                	cmp    eax,ecx
c001d384:	77 0d                	ja     c001d393 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d386:	8b 34 95 60 f1 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd0ea0]
c001d38d:	01 c6                	add    esi,eax
c001d38f:	39 ce                	cmp    esi,ecx
c001d391:	77 05                	ja     c001d398 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d393:	42                   	inc    edx
c001d394:	eb e1                	jmp    c001d377 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d396:	31 c0                	xor    eax,eax
c001d398:	5b                   	pop    ebx
c001d399:	5e                   	pop    esi
c001d39a:	c3                   	ret    

c001d39b <Thr::getDriverNameFromAddress(unsigned long)>:
c001d39b:	53                   	push   ebx
c001d39c:	31 c0                	xor    eax,eax
c001d39e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d3a2:	8b 1d 40 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f140
c001d3a8:	39 c3                	cmp    ebx,eax
c001d3aa:	7e 22                	jle    c001d3ce <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d3ac:	8b 14 85 60 f3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0ca0]
c001d3b3:	39 ca                	cmp    edx,ecx
c001d3b5:	77 14                	ja     c001d3cb <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d3b7:	03 14 85 60 f1 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd0ea0]
c001d3be:	39 ca                	cmp    edx,ecx
c001d3c0:	76 09                	jbe    c001d3cb <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d3c2:	8b 04 85 60 f5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0aa0]
c001d3c9:	eb 05                	jmp    c001d3d0 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d3cb:	40                   	inc    eax
c001d3cc:	eb da                	jmp    c001d3a8 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d3ce:	31 c0                	xor    eax,eax
c001d3d0:	5b                   	pop    ebx
c001d3d1:	c3                   	ret    

c001d3d2 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d3d2:	53                   	push   ebx
c001d3d3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d3d7:	53                   	push   ebx
c001d3d8:	e8 8c ff ff ff       	call   c001d369 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d3dd:	5a                   	pop    edx
c001d3de:	31 d2                	xor    edx,edx
c001d3e0:	85 c0                	test   eax,eax
c001d3e2:	74 04                	je     c001d3e8 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d3e4:	89 da                	mov    edx,ebx
c001d3e6:	29 c2                	sub    edx,eax
c001d3e8:	89 d0                	mov    eax,edx
c001d3ea:	5b                   	pop    ebx
c001d3eb:	c3                   	ret    

c001d3ec <Thr::loadDLL(char const*, bool)>:
c001d3ec:	55                   	push   ebp
c001d3ed:	57                   	push   edi
c001d3ee:	56                   	push   esi
c001d3ef:	53                   	push   ebx
c001d3f0:	81 ec 34 01 00 00    	sub    esp,0x134
c001d3f6:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d3fd:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d404:	56                   	push   esi
c001d405:	68 12 c5 02 c0       	push   0xc002c512
c001d40a:	e8 a2 54 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c001d40f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d416:	e8 3e 24 ff ff       	call   c000f859 <malloc>
c001d41b:	83 c4 0c             	add    esp,0xc
c001d41e:	89 c3                	mov    ebx,eax
c001d420:	ff 35 30 f9 02 c0    	push   DWORD PTR ds:0xc002f930
c001d426:	56                   	push   esi
c001d427:	50                   	push   eax
c001d428:	e8 e3 59 ff ff       	call   c0012e10 <File::File(char const*, Process*)>
c001d42d:	83 c4 10             	add    esp,0x10
c001d430:	85 db                	test   ebx,ebx
c001d432:	75 3c                	jne    c001d470 <Thr::loadDLL(char const*, bool)+0x84>
c001d434:	89 f8                	mov    eax,edi
c001d436:	84 c0                	test   al,al
c001d438:	0f 84 d2 01 00 00    	je     c001d610 <Thr::loadDLL(char const*, bool)+0x224>
c001d43e:	55                   	push   ebp
c001d43f:	55                   	push   ebp
c001d440:	68 23 c5 02 c0       	push   0xc002c523
c001d445:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d449:	55                   	push   ebp
c001d44a:	e8 bd 33 fe ff       	call   c000080c <strcpy>
c001d44f:	58                   	pop    eax
c001d450:	5a                   	pop    edx
c001d451:	56                   	push   esi
c001d452:	55                   	push   ebp
c001d453:	e8 f4 34 fe ff       	call   c000094c <strcat>
c001d458:	59                   	pop    ecx
c001d459:	58                   	pop    eax
c001d45a:	68 36 c5 02 c0       	push   0xc002c536
c001d45f:	55                   	push   ebp
c001d460:	e8 e7 34 fe ff       	call   c000094c <strcat>
c001d465:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d468:	e8 b2 cd ff ff       	call   c001a21f <Krnl::panic(char const*)>
c001d46d:	83 c4 10             	add    esp,0x10
c001d470:	51                   	push   ecx
c001d471:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d475:	50                   	push   eax
c001d476:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d47a:	50                   	push   eax
c001d47b:	53                   	push   ebx
c001d47c:	e8 9f 5c ff ff       	call   c0013120 <File::stat(unsigned long long*, bool*)>
c001d481:	83 c4 10             	add    esp,0x10
c001d484:	85 db                	test   ebx,ebx
c001d486:	74 0c                	je     c001d494 <Thr::loadDLL(char const*, bool)+0xa8>
c001d488:	83 ec 0c             	sub    esp,0xc
c001d48b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d48d:	53                   	push   ebx
c001d48e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d491:	83 c4 10             	add    esp,0x10
c001d494:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d499:	75 0a                	jne    c001d4a5 <Thr::loadDLL(char const*, bool)+0xb9>
c001d49b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d49f:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d4a3:	75 3c                	jne    c001d4e1 <Thr::loadDLL(char const*, bool)+0xf5>
c001d4a5:	89 f8                	mov    eax,edi
c001d4a7:	84 c0                	test   al,al
c001d4a9:	0f 84 49 01 00 00    	je     c001d5f8 <Thr::loadDLL(char const*, bool)+0x20c>
c001d4af:	51                   	push   ecx
c001d4b0:	51                   	push   ecx
c001d4b1:	68 23 c5 02 c0       	push   0xc002c523
c001d4b6:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d4ba:	53                   	push   ebx
c001d4bb:	e8 4c 33 fe ff       	call   c000080c <strcpy>
c001d4c0:	5d                   	pop    ebp
c001d4c1:	58                   	pop    eax
c001d4c2:	56                   	push   esi
c001d4c3:	53                   	push   ebx
c001d4c4:	e8 83 34 fe ff       	call   c000094c <strcat>
c001d4c9:	58                   	pop    eax
c001d4ca:	5a                   	pop    edx
c001d4cb:	68 36 c5 02 c0       	push   0xc002c536
c001d4d0:	53                   	push   ebx
c001d4d1:	e8 76 34 fe ff       	call   c000094c <strcat>
c001d4d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d4d9:	e8 41 cd ff ff       	call   c001a21f <Krnl::panic(char const*)>
c001d4de:	83 c4 10             	add    esp,0x10
c001d4e1:	52                   	push   edx
c001d4e2:	6a 03                	push   0x3
c001d4e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4e8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d4ec:	05 ff 0f 00 00       	add    eax,0xfff
c001d4f1:	83 d2 00             	adc    edx,0x0
c001d4f4:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d4f8:	50                   	push   eax
c001d4f9:	ff 35 70 e5 02 c0    	push   DWORD PTR ds:0xc002e570
c001d4ff:	e8 84 47 ff ff       	call   c0011c88 <VAS::allocatePages(int, int)>
c001d504:	59                   	pop    ecx
c001d505:	89 c3                	mov    ebx,eax
c001d507:	5d                   	pop    ebp
c001d508:	50                   	push   eax
c001d509:	68 f1 a6 02 c0       	push   0xc002a6f1
c001d50e:	e8 9e 53 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c001d513:	89 34 24             	mov    DWORD PTR [esp],esi
c001d516:	e8 51 32 fe ff       	call   c000076c <strlen>
c001d51b:	8b 2d 40 f1 02 c0    	mov    ebp,DWORD PTR ds:0xc002f140
c001d521:	40                   	inc    eax
c001d522:	89 04 24             	mov    DWORD PTR [esp],eax
c001d525:	e8 2f 23 ff ff       	call   c000f859 <malloc>
c001d52a:	89 04 ad 60 f5 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd0aa0],eax
c001d531:	58                   	pop    eax
c001d532:	a1 40 f1 02 c0       	mov    eax,ds:0xc002f140
c001d537:	5a                   	pop    edx
c001d538:	56                   	push   esi
c001d539:	ff 34 85 60 f5 02 c0 	push   DWORD PTR [eax*4-0x3ffd0aa0]
c001d540:	e8 c7 32 fe ff       	call   c000080c <strcpy>
c001d545:	a1 40 f1 02 c0       	mov    eax,ds:0xc002f140
c001d54a:	8d 50 01             	lea    edx,[eax+0x1]
c001d54d:	89 1c 85 60 f3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0ca0],ebx
c001d554:	89 15 40 f1 02 c0    	mov    DWORD PTR ds:0xc002f140,edx
c001d55a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d55e:	83 c4 0c             	add    esp,0xc
c001d561:	89 14 85 60 f1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0ea0],edx
c001d568:	6a 01                	push   0x1
c001d56a:	53                   	push   ebx
c001d56b:	56                   	push   esi
c001d56c:	e8 c2 f6 ff ff       	call   c001cc33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d571:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d575:	83 c4 10             	add    esp,0x10
c001d578:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d57d:	0f 85 89 00 00 00    	jne    c001d60c <Thr::loadDLL(char const*, bool)+0x220>
c001d583:	89 f8                	mov    eax,edi
c001d585:	84 c0                	test   al,al
c001d587:	74 73                	je     c001d5fc <Thr::loadDLL(char const*, bool)+0x210>
c001d589:	83 ec 0c             	sub    esp,0xc
c001d58c:	68 38 c5 02 c0       	push   0xc002c538
c001d591:	e8 89 cc ff ff       	call   c001a21f <Krnl::panic(char const*)>
c001d596:	83 c4 10             	add    esp,0x10
c001d599:	eb 61                	jmp    c001d5fc <Thr::loadDLL(char const*, bool)+0x210>
c001d59b:	50                   	push   eax
c001d59c:	50                   	push   eax
c001d59d:	89 e8                	mov    eax,ebp
c001d59f:	c1 e0 0c             	shl    eax,0xc
c001d5a2:	01 d8                	add    eax,ebx
c001d5a4:	50                   	push   eax
c001d5a5:	ff 35 70 e5 02 c0    	push   DWORD PTR ds:0xc002e570
c001d5ab:	e8 40 42 ff ff       	call   c00117f0 <VAS::getPageTableEntry(unsigned long)>
c001d5b0:	83 c4 10             	add    esp,0x10
c001d5b3:	8b 00                	mov    eax,DWORD PTR [eax]
c001d5b5:	a8 60                	test   al,0x60
c001d5b7:	75 11                	jne    c001d5ca <Thr::loadDLL(char const*, bool)+0x1de>
c001d5b9:	83 ec 0c             	sub    esp,0xc
c001d5bc:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d5c1:	50                   	push   eax
c001d5c2:	e8 1d 26 ff ff       	call   c000fbe4 <Phys::freePage(unsigned long)>
c001d5c7:	83 c4 10             	add    esp,0x10
c001d5ca:	45                   	inc    ebp
c001d5cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d5cf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d5d3:	05 ff 0f 00 00       	add    eax,0xfff
c001d5d8:	bf 00 00 00 00       	mov    edi,0x0
c001d5dd:	83 d2 00             	adc    edx,0x0
c001d5e0:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d5e4:	c1 ea 0c             	shr    edx,0xc
c001d5e7:	39 c5                	cmp    ebp,eax
c001d5e9:	89 d1                	mov    ecx,edx
c001d5eb:	89 f8                	mov    eax,edi
c001d5ed:	19 c8                	sbb    eax,ecx
c001d5ef:	72 aa                	jb     c001d59b <Thr::loadDLL(char const*, bool)+0x1af>
c001d5f1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d5f6:	75 18                	jne    c001d610 <Thr::loadDLL(char const*, bool)+0x224>
c001d5f8:	31 db                	xor    ebx,ebx
c001d5fa:	eb 14                	jmp    c001d610 <Thr::loadDLL(char const*, bool)+0x224>
c001d5fc:	83 ec 0c             	sub    esp,0xc
c001d5ff:	68 57 c5 02 c0       	push   0xc002c557
c001d604:	e8 16 cc ff ff       	call   c001a21f <Krnl::panic(char const*)>
c001d609:	83 c4 10             	add    esp,0x10
c001d60c:	31 ed                	xor    ebp,ebp
c001d60e:	eb bb                	jmp    c001d5cb <Thr::loadDLL(char const*, bool)+0x1df>
c001d610:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d616:	89 d8                	mov    eax,ebx
c001d618:	5b                   	pop    ebx
c001d619:	5e                   	pop    esi
c001d61a:	5f                   	pop    edi
c001d61b:	5d                   	pop    ebp
c001d61c:	c3                   	ret    

c001d61d <Thr::executeDLL(unsigned long, void*)>:
c001d61d:	56                   	push   esi
c001d61e:	53                   	push   ebx
c001d61f:	52                   	push   edx
c001d620:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d624:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d628:	85 db                	test   ebx,ebx
c001d62a:	75 10                	jne    c001d63c <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d62c:	83 ec 0c             	sub    esp,0xc
c001d62f:	68 73 c5 02 c0       	push   0xc002c573
c001d634:	e8 e6 cb ff ff       	call   c001a21f <Krnl::panic(char const*)>
c001d639:	83 c4 10             	add    esp,0x10
c001d63c:	50                   	push   eax
c001d63d:	50                   	push   eax
c001d63e:	53                   	push   ebx
c001d63f:	68 9d c5 02 c0       	push   0xc002c59d
c001d644:	e8 68 52 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c001d649:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d64d:	89 d8                	mov    eax,ebx
c001d64f:	83 c4 14             	add    esp,0x14
c001d652:	5b                   	pop    ebx
c001d653:	5e                   	pop    esi
c001d654:	ff e0                	jmp    eax

c001d656 <userModeEntryPoint(void*)>:
c001d656:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c001d65b:	48                   	dec    eax
c001d65c:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c001d661:	75 01                	jne    c001d664 <userModeEntryPoint(void*)+0xe>
c001d663:	fb                   	sti    
c001d664:	fb                   	sti    
c001d665:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d66a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d66d:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d673:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d677:	e9 ae 2c fe ff       	jmp    c000032a <goToUsermode>

c001d67c <changeTSS>:
c001d67c:	83 ec 14             	sub    esp,0x14
c001d67f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d684:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d687:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d68c:	c1 e2 15             	shl    edx,0x15
c001d68f:	29 d0                	sub    eax,edx
c001d691:	50                   	push   eax
c001d692:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c001d697:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d69d:	05 7c 11 00 00       	add    eax,0x117c
c001d6a2:	50                   	push   eax
c001d6a3:	e8 8c 37 ff ff       	call   c0010e34 <TSS::setESP(unsigned long)>
c001d6a8:	83 c4 1c             	add    esp,0x1c
c001d6ab:	c3                   	ret    

c001d6ac <switchToThread(ThreadControlBlock*)>:
c001d6ac:	57                   	push   edi
c001d6ad:	a1 04 f9 02 c0       	mov    eax,ds:0xc002f904
c001d6b2:	56                   	push   esi
c001d6b3:	85 c0                	test   eax,eax
c001d6b5:	53                   	push   ebx
c001d6b6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d6ba:	0f 85 88 00 00 00    	jne    c001d748 <switchToThread(ThreadControlBlock*)+0x9c>
c001d6c0:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d6c3:	3c ff                	cmp    al,0xff
c001d6c5:	74 7d                	je     c001d744 <switchToThread(ThreadControlBlock*)+0x98>
c001d6c7:	0f b6 d0             	movzx  edx,al
c001d6ca:	b8 84 03 00 00       	mov    eax,0x384
c001d6cf:	29 d0                	sub    eax,edx
c001d6d1:	c1 e0 10             	shl    eax,0x10
c001d6d4:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d6d7:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d6da:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c001d6df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d6e5:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d6ec:	74 4a                	je     c001d738 <switchToThread(ThreadControlBlock*)+0x8c>
c001d6ee:	0f 31                	rdtsc  
c001d6f0:	a3 48 f9 02 c0       	mov    ds:0xc002f948,eax
c001d6f5:	89 c6                	mov    esi,eax
c001d6f7:	89 d7                	mov    edi,edx
c001d6f9:	2b 35 38 f9 02 c0    	sub    esi,DWORD PTR ds:0xc002f938
c001d6ff:	89 15 4c f9 02 c0    	mov    DWORD PTR ds:0xc002f94c,edx
c001d705:	1b 3d 3c f9 02 c0    	sbb    edi,DWORD PTR ds:0xc002f93c
c001d70b:	89 35 40 f9 02 c0    	mov    DWORD PTR ds:0xc002f940,esi
c001d711:	a3 38 f9 02 c0       	mov    ds:0xc002f938,eax
c001d716:	89 3d 44 f9 02 c0    	mov    DWORD PTR ds:0xc002f944,edi
c001d71c:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d722:	89 15 3c f9 02 c0    	mov    DWORD PTR ds:0xc002f93c,edx
c001d728:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d72b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d72e:	01 c6                	add    esi,eax
c001d730:	11 d7                	adc    edi,edx
c001d732:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d735:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d738:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d73c:	5b                   	pop    ebx
c001d73d:	5e                   	pop    esi
c001d73e:	5f                   	pop    edi
c001d73f:	e9 1e 2c fe ff       	jmp    c0000362 <switchToThreadASM>
c001d744:	31 c0                	xor    eax,eax
c001d746:	eb 8f                	jmp    c001d6d7 <switchToThread(ThreadControlBlock*)+0x2b>
c001d748:	5b                   	pop    ebx
c001d749:	c7 05 00 f9 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002f900,0x1
c001d753:	5e                   	pop    esi
c001d754:	5f                   	pop    edi
c001d755:	c3                   	ret    

c001d756 <Process::addArgs(char**)>:
c001d756:	57                   	push   edi
c001d757:	56                   	push   esi
c001d758:	53                   	push   ebx
c001d759:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d75d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d761:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d76b:	85 ff                	test   edi,edi
c001d76d:	74 3d                	je     c001d7ac <Process::addArgs(char**)+0x56>
c001d76f:	8b 07                	mov    eax,DWORD PTR [edi]
c001d771:	85 c0                	test   eax,eax
c001d773:	74 37                	je     c001d7ac <Process::addArgs(char**)+0x56>
c001d775:	31 db                	xor    ebx,ebx
c001d777:	83 ec 0c             	sub    esp,0xc
c001d77a:	50                   	push   eax
c001d77b:	e8 ec 2f fe ff       	call   c000076c <strlen>
c001d780:	40                   	inc    eax
c001d781:	89 04 24             	mov    DWORD PTR [esp],eax
c001d784:	e8 d0 20 ff ff       	call   c000f859 <malloc>
c001d789:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d790:	5a                   	pop    edx
c001d791:	59                   	pop    ecx
c001d792:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d795:	43                   	inc    ebx
c001d796:	50                   	push   eax
c001d797:	e8 70 30 fe ff       	call   c000080c <strcpy>
c001d79c:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d7a2:	83 c4 10             	add    esp,0x10
c001d7a5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d7a8:	85 c0                	test   eax,eax
c001d7aa:	75 cb                	jne    c001d777 <Process::addArgs(char**)+0x21>
c001d7ac:	5b                   	pop    ebx
c001d7ad:	5e                   	pop    esi
c001d7ae:	5f                   	pop    edi
c001d7af:	c3                   	ret    

c001d7b0 <Process::Process(char const*, Process*, char**)>:
c001d7b0:	56                   	push   esi
c001d7b1:	53                   	push   ebx
c001d7b2:	83 ec 14             	sub    esp,0x14
c001d7b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7b9:	05 0c 02 00 00       	add    eax,0x20c
c001d7be:	bb 07 00 00 00       	mov    ebx,0x7
c001d7c3:	89 c6                	mov    esi,eax
c001d7c5:	85 db                	test   ebx,ebx
c001d7c7:	78 12                	js     c001d7db <Process::Process(char const*, Process*, char**)+0x2b>
c001d7c9:	83 ec 0c             	sub    esp,0xc
c001d7cc:	56                   	push   esi
c001d7cd:	e8 f4 b7 00 00       	call   c0028fc6 <ThreadControlBlock::ThreadControlBlock()>
c001d7d2:	83 c4 10             	add    esp,0x10
c001d7d5:	83 c6 63             	add    esi,0x63
c001d7d8:	4b                   	dec    ebx
c001d7d9:	eb ea                	jmp    c001d7c5 <Process::Process(char const*, Process*, char**)+0x15>
c001d7db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7df:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d7e6:	83 ec 0c             	sub    esp,0xc
c001d7e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d7ed:	e8 b6 c8 ff ff       	call   c001a0a8 <Krnl::newProcessEnv(Process*)>
c001d7f2:	83 c4 10             	add    esp,0x10
c001d7f5:	89 c2                	mov    edx,eax
c001d7f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7fb:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d801:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d805:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d80e:	a1 90 d9 02 c0       	mov    eax,ds:0xc002d990
c001d813:	8d 50 01             	lea    edx,[eax+0x1]
c001d816:	89 15 90 d9 02 c0    	mov    DWORD PTR ds:0xc002d990,edx
c001d81c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d820:	89 02                	mov    DWORD PTR [edx],eax
c001d822:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d82a:	83 ec 0c             	sub    esp,0xc
c001d82d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d831:	e8 23 20 ff ff       	call   c000f859 <malloc>
c001d836:	83 c4 10             	add    esp,0x10
c001d839:	89 c3                	mov    ebx,eax
c001d83b:	83 ec 08             	sub    esp,0x8
c001d83e:	6a 00                	push   0x0
c001d840:	53                   	push   ebx
c001d841:	e8 ea 47 ff ff       	call   c0012030 <VAS::VAS(bool)>
c001d846:	83 c4 10             	add    esp,0x10
c001d849:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d84d:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d853:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d857:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d861:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d865:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d869:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d86f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d873:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d879:	85 c0                	test   eax,eax
c001d87b:	74 42                	je     c001d8bf <Process::Process(char const*, Process*, char**)+0x10f>
c001d87d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d881:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d887:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d88d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d891:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d897:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d89b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d8a1:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d8a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8ab:	05 0c 01 00 00       	add    eax,0x10c
c001d8b0:	83 ec 08             	sub    esp,0x8
c001d8b3:	52                   	push   edx
c001d8b4:	50                   	push   eax
c001d8b5:	e8 52 2f fe ff       	call   c000080c <strcpy>
c001d8ba:	83 c4 10             	add    esp,0x10
c001d8bd:	eb 63                	jmp    c001d922 <Process::Process(char const*, Process*, char**)+0x172>
c001d8bf:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001d8c7:	83 ec 0c             	sub    esp,0xc
c001d8ca:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d8ce:	e8 86 1f ff ff       	call   c000f859 <malloc>
c001d8d3:	83 c4 10             	add    esp,0x10
c001d8d6:	89 c3                	mov    ebx,eax
c001d8d8:	83 ec 08             	sub    esp,0x8
c001d8db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d8df:	53                   	push   ebx
c001d8e0:	e8 61 32 ff ff       	call   c0010b46 <VgaText::VgaText(char const*)>
c001d8e5:	83 c4 10             	add    esp,0x10
c001d8e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8ec:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d8f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8f6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d8fc:	83 ec 0c             	sub    esp,0xc
c001d8ff:	50                   	push   eax
c001d900:	e8 00 2a ff ff       	call   c0010305 <addToTerminalCycle(VgaText*)>
c001d905:	83 c4 10             	add    esp,0x10
c001d908:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d90c:	05 0c 01 00 00       	add    eax,0x10c
c001d911:	83 ec 08             	sub    esp,0x8
c001d914:	68 bc c5 02 c0       	push   0xc002c5bc
c001d919:	50                   	push   eax
c001d91a:	e8 ed 2e fe ff       	call   c000080c <strcpy>
c001d91f:	83 c4 10             	add    esp,0x10
c001d922:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d926:	83 c0 0c             	add    eax,0xc
c001d929:	83 ec 08             	sub    esp,0x8
c001d92c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d930:	50                   	push   eax
c001d931:	e8 d6 2e fe ff       	call   c000080c <strcpy>
c001d936:	83 c4 10             	add    esp,0x10
c001d939:	83 ec 08             	sub    esp,0x8
c001d93c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d940:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d944:	e8 0d fe ff ff       	call   c001d756 <Process::addArgs(char**)>
c001d949:	83 c4 10             	add    esp,0x10
c001d94c:	83 ec 08             	sub    esp,0x8
c001d94f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d953:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d957:	e8 a1 ed ff ff       	call   c001c6fd <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d95c:	83 c4 10             	add    esp,0x10
c001d95f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d963:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d967:	83 f0 01             	xor    eax,0x1
c001d96a:	88 c2                	mov    dl,al
c001d96c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d970:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d976:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d97b:	83 ec 08             	sub    esp,0x8
c001d97e:	50                   	push   eax
c001d97f:	68 14 c6 02 c0       	push   0xc002c614
c001d984:	e8 28 4f ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c001d989:	83 c4 10             	add    esp,0x10
c001d98c:	90                   	nop
c001d98d:	83 c4 14             	add    esp,0x14
c001d990:	5b                   	pop    ebx
c001d991:	5e                   	pop    esi
c001d992:	c3                   	ret    
c001d993:	90                   	nop

c001d994 <Process::Process(bool, char const*, Process*, char**)>:
c001d994:	56                   	push   esi
c001d995:	53                   	push   ebx
c001d996:	83 ec 24             	sub    esp,0x24
c001d999:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d99d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d9a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d9a5:	05 0c 02 00 00       	add    eax,0x20c
c001d9aa:	bb 07 00 00 00       	mov    ebx,0x7
c001d9af:	89 c6                	mov    esi,eax
c001d9b1:	85 db                	test   ebx,ebx
c001d9b3:	78 12                	js     c001d9c7 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d9b5:	83 ec 0c             	sub    esp,0xc
c001d9b8:	56                   	push   esi
c001d9b9:	e8 08 b6 00 00       	call   c0028fc6 <ThreadControlBlock::ThreadControlBlock()>
c001d9be:	83 c4 10             	add    esp,0x10
c001d9c1:	83 c6 63             	add    esi,0x63
c001d9c4:	4b                   	dec    ebx
c001d9c5:	eb ea                	jmp    c001d9b1 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d9c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d9cb:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d9d2:	83 ec 0c             	sub    esp,0xc
c001d9d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d9d9:	e8 ca c6 ff ff       	call   c001a0a8 <Krnl::newProcessEnv(Process*)>
c001d9de:	83 c4 10             	add    esp,0x10
c001d9e1:	89 c2                	mov    edx,eax
c001d9e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d9e7:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d9ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d9f1:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d9fa:	a1 90 d9 02 c0       	mov    eax,ds:0xc002d990
c001d9ff:	8d 50 01             	lea    edx,[eax+0x1]
c001da02:	89 15 90 d9 02 c0    	mov    DWORD PTR ds:0xc002d990,edx
c001da08:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001da0c:	89 02                	mov    DWORD PTR [edx],eax
c001da0e:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001da16:	83 ec 0c             	sub    esp,0xc
c001da19:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001da1d:	e8 37 1e ff ff       	call   c000f859 <malloc>
c001da22:	83 c4 10             	add    esp,0x10
c001da25:	89 c3                	mov    ebx,eax
c001da27:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001da2c:	83 ec 08             	sub    esp,0x8
c001da2f:	50                   	push   eax
c001da30:	53                   	push   ebx
c001da31:	e8 fa 45 ff ff       	call   c0012030 <VAS::VAS(bool)>
c001da36:	83 c4 10             	add    esp,0x10
c001da39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da3d:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001da43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da47:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001da51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da55:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001da59:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001da5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da63:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001da69:	85 c0                	test   eax,eax
c001da6b:	74 42                	je     c001daaf <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001da6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da71:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001da77:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001da7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da81:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001da87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da8b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001da91:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001da97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da9b:	05 0c 01 00 00       	add    eax,0x10c
c001daa0:	83 ec 08             	sub    esp,0x8
c001daa3:	52                   	push   edx
c001daa4:	50                   	push   eax
c001daa5:	e8 62 2d fe ff       	call   c000080c <strcpy>
c001daaa:	83 c4 10             	add    esp,0x10
c001daad:	eb 63                	jmp    c001db12 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001daaf:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001dab7:	83 ec 0c             	sub    esp,0xc
c001daba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dabe:	e8 96 1d ff ff       	call   c000f859 <malloc>
c001dac3:	83 c4 10             	add    esp,0x10
c001dac6:	89 c3                	mov    ebx,eax
c001dac8:	83 ec 08             	sub    esp,0x8
c001dacb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dacf:	53                   	push   ebx
c001dad0:	e8 71 30 ff ff       	call   c0010b46 <VgaText::VgaText(char const*)>
c001dad5:	83 c4 10             	add    esp,0x10
c001dad8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dadc:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dae2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dae6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001daec:	83 ec 0c             	sub    esp,0xc
c001daef:	50                   	push   eax
c001daf0:	e8 10 28 ff ff       	call   c0010305 <addToTerminalCycle(VgaText*)>
c001daf5:	83 c4 10             	add    esp,0x10
c001daf8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dafc:	05 0c 01 00 00       	add    eax,0x10c
c001db01:	83 ec 08             	sub    esp,0x8
c001db04:	68 bc c5 02 c0       	push   0xc002c5bc
c001db09:	50                   	push   eax
c001db0a:	e8 fd 2c fe ff       	call   c000080c <strcpy>
c001db0f:	83 c4 10             	add    esp,0x10
c001db12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db16:	83 c0 0c             	add    eax,0xc
c001db19:	83 ec 08             	sub    esp,0x8
c001db1c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001db20:	50                   	push   eax
c001db21:	e8 e6 2c fe ff       	call   c000080c <strcpy>
c001db26:	83 c4 10             	add    esp,0x10
c001db29:	83 ec 08             	sub    esp,0x8
c001db2c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001db30:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001db34:	e8 1d fc ff ff       	call   c001d756 <Process::addArgs(char**)>
c001db39:	83 c4 10             	add    esp,0x10
c001db3c:	90                   	nop
c001db3d:	83 c4 24             	add    esp,0x24
c001db40:	5b                   	pop    ebx
c001db41:	5e                   	pop    esi
c001db42:	c3                   	ret    

c001db43 <taskStartupFunction>:
c001db43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db48:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001db4b:	c3                   	ret    

c001db4c <Semaphore::Semaphore(int)>:
c001db4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001db54:	89 10                	mov    DWORD PTR [eax],edx
c001db56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db5a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001db61:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db65:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001db6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db70:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001db77:	90                   	nop
c001db78:	c3                   	ret    
c001db79:	90                   	nop

c001db7a <Mutex::Mutex()>:
c001db7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db7e:	6a 01                	push   0x1
c001db80:	50                   	push   eax
c001db81:	e8 c6 ff ff ff       	call   c001db4c <Semaphore::Semaphore(int)>
c001db86:	83 c4 08             	add    esp,0x8
c001db89:	90                   	nop
c001db8a:	c3                   	ret    
c001db8b:	90                   	nop

c001db8c <Process::createThread(void (*)(void*), void*, int)>:
c001db8c:	55                   	push   ebp
c001db8d:	31 c9                	xor    ecx,ecx
c001db8f:	57                   	push   edi
c001db90:	56                   	push   esi
c001db91:	53                   	push   ebx
c001db92:	83 ec 1c             	sub    esp,0x1c
c001db95:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001db99:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001dba0:	89 f2                	mov    edx,esi
c001dba2:	0f b7 c2             	movzx  eax,dx
c001dba5:	83 e2 01             	and    edx,0x1
c001dba8:	74 16                	je     c001dbc0 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001dbaa:	d1 f8                	sar    eax,1
c001dbac:	41                   	inc    ecx
c001dbad:	89 c2                	mov    edx,eax
c001dbaf:	83 f9 10             	cmp    ecx,0x10
c001dbb2:	75 ee                	jne    c001dba2 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001dbb4:	83 c4 1c             	add    esp,0x1c
c001dbb7:	31 db                	xor    ebx,ebx
c001dbb9:	89 d8                	mov    eax,ebx
c001dbbb:	5b                   	pop    ebx
c001dbbc:	5e                   	pop    esi
c001dbbd:	5f                   	pop    edi
c001dbbe:	5d                   	pop    ebp
c001dbbf:	c3                   	ret    
c001dbc0:	b8 01 00 00 00       	mov    eax,0x1
c001dbc5:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001dbc8:	d3 e0                	shl    eax,cl
c001dbca:	09 c6                	or     esi,eax
c001dbcc:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001dbcf:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001dbd6:	89 c6                	mov    esi,eax
c001dbd8:	c1 e6 05             	shl    esi,0x5
c001dbdb:	01 f0                	add    eax,esi
c001dbdd:	01 d8                	add    eax,ebx
c001dbdf:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001dbe6:	75 0a                	jne    c001dbf2 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001dbe8:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001dbf2:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dbf8:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001dbfc:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001dbff:	01 ca                	add    edx,ecx
c001dc01:	83 ec 08             	sub    esp,0x8
c001dc04:	89 d0                	mov    eax,edx
c001dc06:	c1 e0 05             	shl    eax,0x5
c001dc09:	01 d0                	add    eax,edx
c001dc0b:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001dc0f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dc13:	01 d8                	add    eax,ebx
c001dc15:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001dc1b:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001dc21:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001dc27:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001dc2d:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001dc33:	89 cd                	mov    ebp,ecx
c001dc35:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001dc39:	f7 dd                	neg    ebp
c001dc3b:	c1 e5 15             	shl    ebp,0x15
c001dc3e:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001dc44:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001dc4a:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001dc54:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001dc5a:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001dc64:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001dc6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dc72:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001dc79:	53                   	push   ebx
c001dc7a:	68 24 f9 02 c0       	push   0xc002f924
c001dc7f:	e8 fc b0 00 00       	call   c0028d80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dc84:	89 d8                	mov    eax,ebx
c001dc86:	83 c4 10             	add    esp,0x10
c001dc89:	83 c4 1c             	add    esp,0x1c
c001dc8c:	5b                   	pop    ebx
c001dc8d:	5e                   	pop    esi
c001dc8e:	5f                   	pop    edi
c001dc8f:	5d                   	pop    ebp
c001dc90:	c3                   	ret    
c001dc91:	90                   	nop

c001dc92 <Process::createUserThread()>:
c001dc92:	83 ec 0c             	sub    esp,0xc
c001dc95:	68 80 00 00 00       	push   0x80
c001dc9a:	6a 00                	push   0x0
c001dc9c:	68 56 d6 01 c0       	push   0xc001d656
c001dca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dca5:	e8 e2 fe ff ff       	call   c001db8c <Process::createThread(void (*)(void*), void*, int)>
c001dcaa:	83 c4 1c             	add    esp,0x1c
c001dcad:	c3                   	ret    

c001dcae <setupMultitasking(void (*)())>:
c001dcae:	56                   	push   esi
c001dcaf:	53                   	push   ebx
c001dcb0:	51                   	push   ecx
c001dcb1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dcb5:	eb 10                	jmp    c001dcc7 <setupMultitasking(void (*)())+0x19>
c001dcb7:	83 ec 0c             	sub    esp,0xc
c001dcba:	68 24 f9 02 c0       	push   0xc002f924
c001dcbf:	e8 0e b0 00 00       	call   c0028cd2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dcc4:	83 c4 10             	add    esp,0x10
c001dcc7:	83 ec 0c             	sub    esp,0xc
c001dcca:	68 24 f9 02 c0       	push   0xc002f924
c001dccf:	e8 da af 00 00       	call   c0028cae <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dcd4:	83 c4 10             	add    esp,0x10
c001dcd7:	84 c0                	test   al,al
c001dcd9:	74 dc                	je     c001dcb7 <setupMultitasking(void (*)())+0x9>
c001dcdb:	83 ec 0c             	sub    esp,0xc
c001dcde:	68 3f 07 00 00       	push   0x73f
c001dce3:	e8 71 1b ff ff       	call   c000f859 <malloc>
c001dce8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dcef:	89 c3                	mov    ebx,eax
c001dcf1:	6a 00                	push   0x0
c001dcf3:	68 c0 c5 02 c0       	push   0xc002c5c0
c001dcf8:	6a 01                	push   0x1
c001dcfa:	50                   	push   eax
c001dcfb:	e8 94 fc ff ff       	call   c001d994 <Process::Process(bool, char const*, Process*, char**)>
c001dd00:	83 c4 14             	add    esp,0x14
c001dd03:	89 1d 30 f9 02 c0    	mov    DWORD PTR ds:0xc002f930,ebx
c001dd09:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001dd0f:	e8 ff 28 ff ff       	call   c0010613 <setActiveTerminal(VgaText*)>
c001dd14:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001dd1c:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001dd26:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dd2c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001dd2f:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001dd39:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001dd3f:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001dd45:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001dd4f:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001dd59:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001dd63:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001dd69:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001dd73:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001dd79:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001dd83:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001dd89:	58                   	pop    eax
c001dd8a:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001dd90:	5a                   	pop    edx
c001dd91:	68 bc c5 02 c0       	push   0xc002c5bc
c001dd96:	50                   	push   eax
c001dd97:	e8 70 2a fe ff       	call   c000080c <strcpy>
c001dd9c:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001dda3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001dda7:	83 c4 14             	add    esp,0x14
c001ddaa:	5b                   	pop    ebx
c001ddab:	5e                   	pop    esi
c001ddac:	e9 a3 25 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001ddb1 <schedule()>:
c001ddb1:	a1 04 f9 02 c0       	mov    eax,ds:0xc002f904
c001ddb6:	85 c0                	test   eax,eax
c001ddb8:	74 0b                	je     c001ddc5 <schedule()+0x14>
c001ddba:	c7 05 00 f9 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002f900,0x1
c001ddc4:	c3                   	ret    
c001ddc5:	53                   	push   ebx
c001ddc6:	83 ec 14             	sub    esp,0x14
c001ddc9:	68 24 f9 02 c0       	push   0xc002f924
c001ddce:	e8 db ae 00 00       	call   c0028cae <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ddd3:	83 c4 10             	add    esp,0x10
c001ddd6:	84 c0                	test   al,al
c001ddd8:	75 38                	jne    c001de12 <schedule()+0x61>
c001ddda:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dddf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001dde2:	4a                   	dec    edx
c001dde3:	74 32                	je     c001de17 <schedule()+0x66>
c001dde5:	83 ec 0c             	sub    esp,0xc
c001dde8:	68 24 f9 02 c0       	push   0xc002f924
c001dded:	e8 d8 ae 00 00       	call   c0028cca <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ddf2:	c7 04 24 24 f9 02 c0 	mov    DWORD PTR [esp],0xc002f924
c001ddf9:	89 c3                	mov    ebx,eax
c001ddfb:	e8 d2 ae 00 00       	call   c0028cd2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001de00:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001de07:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001de0a:	e8 9d f8 ff ff       	call   c001d6ac <switchToThread(ThreadControlBlock*)>
c001de0f:	83 c4 10             	add    esp,0x10
c001de12:	83 c4 08             	add    esp,0x8
c001de15:	5b                   	pop    ebx
c001de16:	c3                   	ret    
c001de17:	83 ec 08             	sub    esp,0x8
c001de1a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001de21:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001de27:	68 24 f9 02 c0       	push   0xc002f924
c001de2c:	e8 4f af 00 00       	call   c0028d80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001de31:	83 c4 10             	add    esp,0x10
c001de34:	eb af                	jmp    c001dde5 <schedule()+0x34>

c001de36 <Semaphore::tryAcquire()>:
c001de36:	53                   	push   ebx
c001de37:	83 ec 08             	sub    esp,0x8
c001de3a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001de3e:	fa                   	cli    
c001de3f:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c001de44:	8d 50 01             	lea    edx,[eax+0x1]
c001de47:	89 15 08 f9 02 c0    	mov    DWORD PTR ds:0xc002f908,edx
c001de4d:	8b 15 04 f9 02 c0    	mov    edx,DWORD PTR ds:0xc002f904
c001de53:	8d 5a 01             	lea    ebx,[edx+0x1]
c001de56:	89 1d 04 f9 02 c0    	mov    DWORD PTR ds:0xc002f904,ebx
c001de5c:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001de5f:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001de61:	7c 2a                	jl     c001de8d <Semaphore::tryAcquire()+0x57>
c001de63:	89 15 04 f9 02 c0    	mov    DWORD PTR ds:0xc002f904,edx
c001de69:	85 d2                	test   edx,edx
c001de6b:	75 0a                	jne    c001de77 <Semaphore::tryAcquire()+0x41>
c001de6d:	8b 15 00 f9 02 c0    	mov    edx,DWORD PTR ds:0xc002f900
c001de73:	85 d2                	test   edx,edx
c001de75:	75 5b                	jne    c001ded2 <Semaphore::tryAcquire()+0x9c>
c001de77:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c001de7c:	85 c0                	test   eax,eax
c001de7e:	74 07                	je     c001de87 <Semaphore::tryAcquire()+0x51>
c001de80:	31 c0                	xor    eax,eax
c001de82:	83 c4 08             	add    esp,0x8
c001de85:	5b                   	pop    ebx
c001de86:	c3                   	ret    
c001de87:	fb                   	sti    
c001de88:	83 c4 08             	add    esp,0x8
c001de8b:	5b                   	pop    ebx
c001de8c:	c3                   	ret    
c001de8d:	43                   	inc    ebx
c001de8e:	89 15 04 f9 02 c0    	mov    DWORD PTR ds:0xc002f904,edx
c001de94:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001de97:	85 d2                	test   edx,edx
c001de99:	75 1f                	jne    c001deba <Semaphore::tryAcquire()+0x84>
c001de9b:	8b 0d 00 f9 02 c0    	mov    ecx,DWORD PTR ds:0xc002f900
c001dea1:	85 c9                	test   ecx,ecx
c001dea3:	74 15                	je     c001deba <Semaphore::tryAcquire()+0x84>
c001dea5:	c7 05 00 f9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f900,0x0
c001deaf:	e8 fd fe ff ff       	call   c001ddb1 <schedule()>
c001deb4:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c001deb9:	48                   	dec    eax
c001deba:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c001debf:	85 c0                	test   eax,eax
c001dec1:	75 08                	jne    c001decb <Semaphore::tryAcquire()+0x95>
c001dec3:	fb                   	sti    
c001dec4:	b0 01                	mov    al,0x1
c001dec6:	83 c4 08             	add    esp,0x8
c001dec9:	5b                   	pop    ebx
c001deca:	c3                   	ret    
c001decb:	b0 01                	mov    al,0x1
c001decd:	83 c4 08             	add    esp,0x8
c001ded0:	5b                   	pop    ebx
c001ded1:	c3                   	ret    
c001ded2:	c7 05 00 f9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f900,0x0
c001dedc:	e8 d0 fe ff ff       	call   c001ddb1 <schedule()>
c001dee1:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c001dee6:	48                   	dec    eax
c001dee7:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c001deec:	85 c0                	test   eax,eax
c001deee:	75 90                	jne    c001de80 <Semaphore::tryAcquire()+0x4a>
c001def0:	eb 95                	jmp    c001de87 <Semaphore::tryAcquire()+0x51>

c001def2 <Semaphore::assertLocked(char const*)>:
c001def2:	83 ec 0c             	sub    esp,0xc
c001def5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001def9:	fa                   	cli    
c001defa:	ff 05 08 f9 02 c0    	inc    DWORD PTR ds:0xc002f908
c001df00:	a1 04 f9 02 c0       	mov    eax,ds:0xc002f904
c001df05:	8d 48 01             	lea    ecx,[eax+0x1]
c001df08:	89 0d 04 f9 02 c0    	mov    DWORD PTR ds:0xc002f904,ecx
c001df0e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001df10:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001df13:	7c 24                	jl     c001df39 <Semaphore::assertLocked(char const*)+0x47>
c001df15:	a3 04 f9 02 c0       	mov    ds:0xc002f904,eax
c001df1a:	85 c0                	test   eax,eax
c001df1c:	75 09                	jne    c001df27 <Semaphore::assertLocked(char const*)+0x35>
c001df1e:	a1 00 f9 02 c0       	mov    eax,ds:0xc002f900
c001df23:	85 c0                	test   eax,eax
c001df25:	75 29                	jne    c001df50 <Semaphore::assertLocked(char const*)+0x5e>
c001df27:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c001df2c:	48                   	dec    eax
c001df2d:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c001df32:	75 01                	jne    c001df35 <Semaphore::assertLocked(char const*)+0x43>
c001df34:	fb                   	sti    
c001df35:	83 c4 0c             	add    esp,0xc
c001df38:	c3                   	ret    
c001df39:	83 ec 0c             	sub    esp,0xc
c001df3c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001df40:	e8 da c2 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c001df45:	a1 04 f9 02 c0       	mov    eax,ds:0xc002f904
c001df4a:	83 c4 10             	add    esp,0x10
c001df4d:	48                   	dec    eax
c001df4e:	eb c5                	jmp    c001df15 <Semaphore::assertLocked(char const*)+0x23>
c001df50:	c7 05 00 f9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f900,0x0
c001df5a:	e8 52 fe ff ff       	call   c001ddb1 <schedule()>
c001df5f:	eb c6                	jmp    c001df27 <Semaphore::assertLocked(char const*)+0x35>

c001df61 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001df61:	83 ec 0c             	sub    esp,0xc
c001df64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df69:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001df6d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001df70:	e8 3c fe ff ff       	call   c001ddb1 <schedule()>
c001df75:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c001df7a:	48                   	dec    eax
c001df7b:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c001df80:	75 01                	jne    c001df83 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001df82:	fb                   	sti    
c001df83:	83 c4 0c             	add    esp,0xc
c001df86:	c3                   	ret    

c001df87 <blockTask(TaskState)>:
c001df87:	83 ec 0c             	sub    esp,0xc
c001df8a:	fa                   	cli    
c001df8b:	ff 05 08 f9 02 c0    	inc    DWORD PTR ds:0xc002f908
c001df91:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001df95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df9a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001df9d:	e8 0f fe ff ff       	call   c001ddb1 <schedule()>
c001dfa2:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c001dfa7:	48                   	dec    eax
c001dfa8:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c001dfad:	75 01                	jne    c001dfb0 <blockTask(TaskState)+0x29>
c001dfaf:	fb                   	sti    
c001dfb0:	83 c4 0c             	add    esp,0xc
c001dfb3:	c3                   	ret    

c001dfb4 <waitTask(int, int*, int)>:
c001dfb4:	83 ec 18             	sub    esp,0x18
c001dfb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dfbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dfc0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001dfc3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dfc7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dfcc:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001dfcf:	6a 07                	push   0x7
c001dfd1:	e8 b1 ff ff ff       	call   c001df87 <blockTask(TaskState)>
c001dfd6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dfdb:	83 c4 10             	add    esp,0x10
c001dfde:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001dfe1:	85 d2                	test   edx,edx
c001dfe3:	74 0a                	je     c001dfef <waitTask(int, int*, int)+0x3b>
c001dfe5:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001dfe8:	89 02                	mov    DWORD PTR [edx],eax
c001dfea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dfef:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001dff2:	83 c4 0c             	add    esp,0xc
c001dff5:	c3                   	ret    

c001dff6 <nanoSleepUntil(unsigned long long)>:
c001dff6:	83 ec 0c             	sub    esp,0xc
c001dff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dffd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e001:	3b 05 70 ea 02 c0    	cmp    eax,DWORD PTR ds:0xc002ea70
c001e007:	89 d1                	mov    ecx,edx
c001e009:	1b 0d 74 ea 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ea74
c001e00f:	73 04                	jae    c001e015 <nanoSleepUntil(unsigned long long)+0x1f>
c001e011:	83 c4 0c             	add    esp,0xc
c001e014:	c3                   	ret    
c001e015:	fa                   	cli    
c001e016:	ff 05 08 f9 02 c0    	inc    DWORD PTR ds:0xc002f908
c001e01c:	83 ec 08             	sub    esp,0x8
c001e01f:	ff 05 04 f9 02 c0    	inc    DWORD PTR ds:0xc002f904
c001e025:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e02b:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e02e:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e031:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e037:	68 18 f9 02 c0       	push   0xc002f918
c001e03c:	e8 3f ad 00 00       	call   c0028d80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e041:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e048:	e8 3a ff ff ff       	call   c001df87 <blockTask(TaskState)>
c001e04d:	a1 04 f9 02 c0       	mov    eax,ds:0xc002f904
c001e052:	83 c4 10             	add    esp,0x10
c001e055:	48                   	dec    eax
c001e056:	a3 04 f9 02 c0       	mov    ds:0xc002f904,eax
c001e05b:	85 c0                	test   eax,eax
c001e05d:	75 09                	jne    c001e068 <nanoSleepUntil(unsigned long long)+0x72>
c001e05f:	a1 00 f9 02 c0       	mov    eax,ds:0xc002f900
c001e064:	85 c0                	test   eax,eax
c001e066:	75 12                	jne    c001e07a <nanoSleepUntil(unsigned long long)+0x84>
c001e068:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c001e06d:	48                   	dec    eax
c001e06e:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c001e073:	75 9c                	jne    c001e011 <nanoSleepUntil(unsigned long long)+0x1b>
c001e075:	fb                   	sti    
c001e076:	83 c4 0c             	add    esp,0xc
c001e079:	c3                   	ret    
c001e07a:	c7 05 00 f9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f900,0x0
c001e084:	e8 28 fd ff ff       	call   c001ddb1 <schedule()>
c001e089:	eb dd                	jmp    c001e068 <nanoSleepUntil(unsigned long long)+0x72>

c001e08b <nanoSleep(unsigned long long)>:
c001e08b:	a1 70 ea 02 c0       	mov    eax,ds:0xc002ea70
c001e090:	8b 15 74 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea74
c001e096:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e09a:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e09e:	e9 53 ff ff ff       	jmp    c001dff6 <nanoSleepUntil(unsigned long long)>

c001e0a3 <sleep(unsigned long long)>:
c001e0a3:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e0ab:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e0b0:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e0b4:	01 ca                	add    edx,ecx
c001e0b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e0ba:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e0be:	eb cb                	jmp    c001e08b <nanoSleep(unsigned long long)>

c001e0c0 <Semaphore::acquire()>:
c001e0c0:	83 ec 0c             	sub    esp,0xc
c001e0c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e0c7:	fa                   	cli    
c001e0c8:	a1 04 f9 02 c0       	mov    eax,ds:0xc002f904
c001e0cd:	ff 05 08 f9 02 c0    	inc    DWORD PTR ds:0xc002f908
c001e0d3:	8d 48 01             	lea    ecx,[eax+0x1]
c001e0d6:	89 0d 04 f9 02 c0    	mov    DWORD PTR ds:0xc002f904,ecx
c001e0dc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e0df:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e0e1:	7d 28                	jge    c001e10b <Semaphore::acquire()+0x4b>
c001e0e3:	41                   	inc    ecx
c001e0e4:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e0e7:	a3 04 f9 02 c0       	mov    ds:0xc002f904,eax
c001e0ec:	85 c0                	test   eax,eax
c001e0ee:	75 09                	jne    c001e0f9 <Semaphore::acquire()+0x39>
c001e0f0:	a1 00 f9 02 c0       	mov    eax,ds:0xc002f900
c001e0f5:	85 c0                	test   eax,eax
c001e0f7:	75 5d                	jne    c001e156 <Semaphore::acquire()+0x96>
c001e0f9:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c001e0fe:	48                   	dec    eax
c001e0ff:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c001e104:	75 01                	jne    c001e107 <Semaphore::acquire()+0x47>
c001e106:	fb                   	sti    
c001e107:	83 c4 0c             	add    esp,0xc
c001e10a:	c3                   	ret    
c001e10b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e110:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e117:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e11a:	85 c9                	test   ecx,ecx
c001e11c:	74 49                	je     c001e167 <Semaphore::acquire()+0xa7>
c001e11e:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e121:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e127:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001e12a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e12f:	83 ec 0c             	sub    esp,0xc
c001e132:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001e135:	68 3c c6 02 c0       	push   0xc002c63c
c001e13a:	e8 72 47 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c001e13f:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c001e146:	e8 3c fe ff ff       	call   c001df87 <blockTask(TaskState)>
c001e14b:	a1 04 f9 02 c0       	mov    eax,ds:0xc002f904
c001e150:	83 c4 10             	add    esp,0x10
c001e153:	48                   	dec    eax
c001e154:	eb 91                	jmp    c001e0e7 <Semaphore::acquire()+0x27>
c001e156:	c7 05 00 f9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f900,0x0
c001e160:	e8 4c fc ff ff       	call   c001ddb1 <schedule()>
c001e165:	eb 92                	jmp    c001e0f9 <Semaphore::acquire()+0x39>
c001e167:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e16c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e16f:	eb b9                	jmp    c001e12a <Semaphore::acquire()+0x6a>

c001e171 <taskReturned>:
c001e171:	83 ec 18             	sub    esp,0x18
c001e174:	68 5c c6 02 c0       	push   0xc002c65c
c001e179:	e8 a1 c0 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c001e17e:	83 c4 10             	add    esp,0x10
c001e181:	83 ec 0c             	sub    esp,0xc
c001e184:	6a 02                	push   0x2
c001e186:	e8 fc fd ff ff       	call   c001df87 <blockTask(TaskState)>
c001e18b:	fa                   	cli    
c001e18c:	ff 05 08 f9 02 c0    	inc    DWORD PTR ds:0xc002f908
c001e192:	e8 1a fc ff ff       	call   c001ddb1 <schedule()>
c001e197:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c001e19c:	83 c4 10             	add    esp,0x10
c001e19f:	48                   	dec    eax
c001e1a0:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c001e1a5:	85 c0                	test   eax,eax
c001e1a7:	75 d8                	jne    c001e181 <taskReturned+0x10>
c001e1a9:	fb                   	sti    
c001e1aa:	eb d5                	jmp    c001e181 <taskReturned+0x10>

c001e1ac <Thr::processFromPID(int)>:
c001e1ac:	57                   	push   edi
c001e1ad:	56                   	push   esi
c001e1ae:	53                   	push   ebx
c001e1af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e1b3:	fa                   	cli    
c001e1b4:	ff 05 08 f9 02 c0    	inc    DWORD PTR ds:0xc002f908
c001e1ba:	83 ec 0c             	sub    esp,0xc
c001e1bd:	68 24 f9 02 c0       	push   0xc002f924
c001e1c2:	e8 03 ab 00 00       	call   c0028cca <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1c7:	83 c4 10             	add    esp,0x10
c001e1ca:	89 c7                	mov    edi,eax
c001e1cc:	eb 14                	jmp    c001e1e2 <Thr::processFromPID(int)+0x36>
c001e1ce:	83 ec 0c             	sub    esp,0xc
c001e1d1:	68 24 f9 02 c0       	push   0xc002f924
c001e1d6:	e8 ef aa 00 00       	call   c0028cca <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1db:	83 c4 10             	add    esp,0x10
c001e1de:	39 f8                	cmp    eax,edi
c001e1e0:	74 49                	je     c001e22b <Thr::processFromPID(int)+0x7f>
c001e1e2:	83 ec 0c             	sub    esp,0xc
c001e1e5:	68 24 f9 02 c0       	push   0xc002f924
c001e1ea:	e8 db aa 00 00       	call   c0028cca <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1ef:	c7 04 24 24 f9 02 c0 	mov    DWORD PTR [esp],0xc002f924
c001e1f6:	89 c3                	mov    ebx,eax
c001e1f8:	e8 d5 aa 00 00       	call   c0028cd2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e1fd:	58                   	pop    eax
c001e1fe:	5a                   	pop    edx
c001e1ff:	53                   	push   ebx
c001e200:	68 24 f9 02 c0       	push   0xc002f924
c001e205:	e8 76 ab 00 00       	call   c0028d80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e20a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e20d:	83 c4 10             	add    esp,0x10
c001e210:	39 30                	cmp    DWORD PTR [eax],esi
c001e212:	75 ba                	jne    c001e1ce <Thr::processFromPID(int)+0x22>
c001e214:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c001e219:	48                   	dec    eax
c001e21a:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c001e21f:	74 07                	je     c001e228 <Thr::processFromPID(int)+0x7c>
c001e221:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e224:	5b                   	pop    ebx
c001e225:	5e                   	pop    esi
c001e226:	5f                   	pop    edi
c001e227:	c3                   	ret    
c001e228:	fb                   	sti    
c001e229:	eb f6                	jmp    c001e221 <Thr::processFromPID(int)+0x75>
c001e22b:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c001e230:	48                   	dec    eax
c001e231:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c001e236:	75 05                	jne    c001e23d <Thr::processFromPID(int)+0x91>
c001e238:	fb                   	sti    
c001e239:	5b                   	pop    ebx
c001e23a:	5e                   	pop    esi
c001e23b:	5f                   	pop    edi
c001e23c:	c3                   	ret    
c001e23d:	5b                   	pop    ebx
c001e23e:	31 c0                	xor    eax,eax
c001e240:	5e                   	pop    esi
c001e241:	5f                   	pop    edi
c001e242:	c3                   	ret    

c001e243 <unblockTask(ThreadControlBlock*)>:
c001e243:	53                   	push   ebx
c001e244:	83 ec 08             	sub    esp,0x8
c001e247:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e24b:	fa                   	cli    
c001e24c:	ff 05 08 f9 02 c0    	inc    DWORD PTR ds:0xc002f908
c001e252:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e255:	85 c0                	test   eax,eax
c001e257:	74 5a                	je     c001e2b3 <unblockTask(ThreadControlBlock*)+0x70>
c001e259:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e25c:	48                   	dec    eax
c001e25d:	74 31                	je     c001e290 <unblockTask(ThreadControlBlock*)+0x4d>
c001e25f:	83 ec 0c             	sub    esp,0xc
c001e262:	68 24 f9 02 c0       	push   0xc002f924
c001e267:	e8 5e aa 00 00       	call   c0028cca <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e26c:	83 c4 10             	add    esp,0x10
c001e26f:	85 c0                	test   eax,eax
c001e271:	75 17                	jne    c001e28a <unblockTask(ThreadControlBlock*)+0x47>
c001e273:	eb 50                	jmp    c001e2c5 <unblockTask(ThreadControlBlock*)+0x82>
c001e275:	83 ec 08             	sub    esp,0x8
c001e278:	50                   	push   eax
c001e279:	68 24 f9 02 c0       	push   0xc002f924
c001e27e:	e8 cf ad 00 00       	call   c0029052 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e283:	83 c4 10             	add    esp,0x10
c001e286:	85 c0                	test   eax,eax
c001e288:	74 3b                	je     c001e2c5 <unblockTask(ThreadControlBlock*)+0x82>
c001e28a:	39 c3                	cmp    ebx,eax
c001e28c:	75 e7                	jne    c001e275 <unblockTask(ThreadControlBlock*)+0x32>
c001e28e:	eb 10                	jmp    c001e2a0 <unblockTask(ThreadControlBlock*)+0x5d>
c001e290:	83 ec 0c             	sub    esp,0xc
c001e293:	68 de c5 02 c0       	push   0xc002c5de
c001e298:	e8 14 46 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c001e29d:	83 c4 10             	add    esp,0x10
c001e2a0:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c001e2a5:	48                   	dec    eax
c001e2a6:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c001e2ab:	75 01                	jne    c001e2ae <unblockTask(ThreadControlBlock*)+0x6b>
c001e2ad:	fb                   	sti    
c001e2ae:	83 c4 08             	add    esp,0x8
c001e2b1:	5b                   	pop    ebx
c001e2b2:	c3                   	ret    
c001e2b3:	83 ec 0c             	sub    esp,0xc
c001e2b6:	68 c7 c5 02 c0       	push   0xc002c5c7
c001e2bb:	e8 f1 45 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c001e2c0:	83 c4 10             	add    esp,0x10
c001e2c3:	eb db                	jmp    c001e2a0 <unblockTask(ThreadControlBlock*)+0x5d>
c001e2c5:	83 ec 08             	sub    esp,0x8
c001e2c8:	53                   	push   ebx
c001e2c9:	68 24 f9 02 c0       	push   0xc002f924
c001e2ce:	e8 ad aa 00 00       	call   c0028d80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e2d3:	83 c4 10             	add    esp,0x10
c001e2d6:	eb c8                	jmp    c001e2a0 <unblockTask(ThreadControlBlock*)+0x5d>

c001e2d8 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e2d8:	55                   	push   ebp
c001e2d9:	57                   	push   edi
c001e2da:	56                   	push   esi
c001e2db:	53                   	push   ebx
c001e2dc:	83 ec 1c             	sub    esp,0x1c
c001e2df:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e2e3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e2e6:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e2ec:	85 ff                	test   edi,edi
c001e2ee:	7e 20                	jle    c001e310 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e2f0:	31 f6                	xor    esi,esi
c001e2f2:	83 ec 0c             	sub    esp,0xc
c001e2f5:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e2fc:	46                   	inc    esi
c001e2fd:	e8 67 15 ff ff       	call   c000f869 <free>
c001e302:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e305:	83 c4 10             	add    esp,0x10
c001e308:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e30e:	7f e2                	jg     c001e2f2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e310:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e31a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e31f:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e322:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e325:	d3 c0                	rol    eax,cl
c001e327:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e32e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e331:	89 f7                	mov    edi,esi
c001e333:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e33b:	0f 85 64 01 00 00    	jne    c001e4a5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e341:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e347:	85 ed                	test   ebp,ebp
c001e349:	74 1b                	je     c001e366 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e34b:	83 ec 0c             	sub    esp,0xc
c001e34e:	55                   	push   ebp
c001e34f:	e8 70 bc ff ff       	call   c0019fc4 <EnvVarContainer::~EnvVarContainer()>
c001e354:	59                   	pop    ecx
c001e355:	5e                   	pop    esi
c001e356:	6a 0c                	push   0xc
c001e358:	55                   	push   ebp
c001e359:	e8 7b 44 ff ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c001e35e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e361:	83 c4 10             	add    esp,0x10
c001e364:	89 f7                	mov    edi,esi
c001e366:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e36c:	85 c0                	test   eax,eax
c001e36e:	0f 84 aa 00 00 00    	je     c001e41e <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e374:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e377:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e37b:	31 c9                	xor    ecx,ecx
c001e37d:	eb 10                	jmp    c001e38f <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e37f:	41                   	inc    ecx
c001e380:	83 f9 10             	cmp    ecx,0x10
c001e383:	0f 84 95 00 00 00    	je     c001e41e <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e389:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e38f:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e396:	d3 fa                	sar    edx,cl
c001e398:	83 e2 01             	and    edx,0x1
c001e39b:	74 e2                	je     c001e37f <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e39d:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e3a0:	01 ca                	add    edx,ecx
c001e3a2:	89 d5                	mov    ebp,edx
c001e3a4:	c1 e5 05             	shl    ebp,0x5
c001e3a7:	01 ea                	add    edx,ebp
c001e3a9:	01 d0                	add    eax,edx
c001e3ab:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e3b1:	83 fd 07             	cmp    ebp,0x7
c001e3b4:	75 c9                	jne    c001e37f <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e3b6:	05 40 02 00 00       	add    eax,0x240
c001e3bb:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e3be:	83 fd ff             	cmp    ebp,0xffffffff
c001e3c1:	0f 8c e6 00 00 00    	jl     c001e4ad <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001e3c7:	0f 84 97 01 00 00    	je     c001e564 <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001e3cd:	85 ed                	test   ebp,ebp
c001e3cf:	0f 84 7e 01 00 00    	je     c001e553 <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001e3d5:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e3d7:	75 a6                	jne    c001e37f <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e3d9:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e3df:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e3e3:	01 d0                	add    eax,edx
c001e3e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e3e9:	83 ec 0c             	sub    esp,0xc
c001e3ec:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e3f2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e3f5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e3fb:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e402:	50                   	push   eax
c001e403:	e8 3b fe ff ff       	call   c001e243 <unblockTask(ThreadControlBlock*)>
c001e408:	83 c4 10             	add    esp,0x10
c001e40b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e40e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e412:	89 f7                	mov    edi,esi
c001e414:	41                   	inc    ecx
c001e415:	83 f9 10             	cmp    ecx,0x10
c001e418:	0f 85 6b ff ff ff    	jne    c001e389 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e41e:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e424:	85 c0                	test   eax,eax
c001e426:	74 5d                	je     c001e485 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e428:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e42e:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e434:	74 4f                	je     c001e485 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e436:	83 ec 0c             	sub    esp,0xc
c001e439:	68 24 f9 02 c0       	push   0xc002f924
c001e43e:	e8 87 a8 00 00       	call   c0028cca <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e443:	c7 04 24 24 f9 02 c0 	mov    DWORD PTR [esp],0xc002f924
c001e44a:	89 c7                	mov    edi,eax
c001e44c:	e8 5d a8 00 00       	call   c0028cae <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e451:	83 c4 10             	add    esp,0x10
c001e454:	84 c0                	test   al,al
c001e456:	0f 84 c2 00 00 00    	je     c001e51e <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001e45c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e45f:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e465:	85 d2                	test   edx,edx
c001e467:	74 0f                	je     c001e478 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e469:	83 ec 0c             	sub    esp,0xc
c001e46c:	8b 02                	mov    eax,DWORD PTR [edx]
c001e46e:	52                   	push   edx
c001e46f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e472:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e475:	83 c4 10             	add    esp,0x10
c001e478:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e482:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e485:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e48b:	85 db                	test   ebx,ebx
c001e48d:	74 16                	je     c001e4a5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e48f:	83 ec 0c             	sub    esp,0xc
c001e492:	53                   	push   ebx
c001e493:	e8 72 35 ff ff       	call   c0011a0a <VAS::~VAS()>
c001e498:	58                   	pop    eax
c001e499:	5a                   	pop    edx
c001e49a:	6a 14                	push   0x14
c001e49c:	53                   	push   ebx
c001e49d:	e8 37 43 ff ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c001e4a2:	83 c4 10             	add    esp,0x10
c001e4a5:	83 c4 1c             	add    esp,0x1c
c001e4a8:	5b                   	pop    ebx
c001e4a9:	5e                   	pop    esi
c001e4aa:	5f                   	pop    edi
c001e4ab:	5d                   	pop    ebp
c001e4ac:	c3                   	ret    
c001e4ad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e4b1:	83 ec 0c             	sub    esp,0xc
c001e4b4:	68 90 c6 02 c0       	push   0xc002c690
c001e4b9:	e8 61 bd ff ff       	call   c001a21f <Krnl::panic(char const*)>
c001e4be:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e4c1:	83 c4 10             	add    esp,0x10
c001e4c4:	89 f7                	mov    edi,esi
c001e4c6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e4ca:	e9 b0 fe ff ff       	jmp    c001e37f <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e4cf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e4d5:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e4db:	75 1c                	jne    c001e4f9 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e4dd:	83 ec 0c             	sub    esp,0xc
c001e4e0:	68 f8 c6 02 c0       	push   0xc002c6f8
c001e4e5:	e8 c7 43 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c001e4ea:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e4f1:	e8 91 fa ff ff       	call   c001df87 <blockTask(TaskState)>
c001e4f6:	83 c4 10             	add    esp,0x10
c001e4f9:	83 ec 08             	sub    esp,0x8
c001e4fc:	56                   	push   esi
c001e4fd:	68 24 f9 02 c0       	push   0xc002f924
c001e502:	e8 79 a8 00 00       	call   c0028d80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e507:	c7 04 24 24 f9 02 c0 	mov    DWORD PTR [esp],0xc002f924
c001e50e:	e8 b7 a7 00 00       	call   c0028cca <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e513:	83 c4 10             	add    esp,0x10
c001e516:	39 f8                	cmp    eax,edi
c001e518:	0f 84 3e ff ff ff    	je     c001e45c <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e51e:	83 ec 0c             	sub    esp,0xc
c001e521:	68 24 f9 02 c0       	push   0xc002f924
c001e526:	e8 9f a7 00 00       	call   c0028cca <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e52b:	c7 04 24 24 f9 02 c0 	mov    DWORD PTR [esp],0xc002f924
c001e532:	89 c6                	mov    esi,eax
c001e534:	e8 99 a7 00 00       	call   c0028cd2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e539:	83 c4 10             	add    esp,0x10
c001e53c:	39 f3                	cmp    ebx,esi
c001e53e:	74 b9                	je     c001e4f9 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e540:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e543:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e546:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e54c:	75 ab                	jne    c001e4f9 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e54e:	e9 7c ff ff ff       	jmp    c001e4cf <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e553:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e557:	83 ec 0c             	sub    esp,0xc
c001e55a:	68 c4 c6 02 c0       	push   0xc002c6c4
c001e55f:	e9 55 ff ff ff       	jmp    c001e4b9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001e564:	8b 36                	mov    esi,DWORD PTR [esi]
c001e566:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e56a:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e56d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e570:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e576:	01 d7                	add    edi,edx
c001e578:	89 f8                	mov    eax,edi
c001e57a:	e9 66 fe ff ff       	jmp    c001e3e5 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e57f <cleanerTaskFunction(void*)>:
c001e57f:	53                   	push   ebx
c001e580:	83 ec 08             	sub    esp,0x8
c001e583:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c001e588:	48                   	dec    eax
c001e589:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c001e58e:	75 01                	jne    c001e591 <cleanerTaskFunction(void*)+0x12>
c001e590:	fb                   	sti    
c001e591:	fa                   	cli    
c001e592:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c001e597:	80 3d ec f8 02 c0 00 	cmp    BYTE PTR ds:0xc002f8ec,0x0
c001e59e:	8d 50 01             	lea    edx,[eax+0x1]
c001e5a1:	89 15 08 f9 02 c0    	mov    DWORD PTR ds:0xc002f908,edx
c001e5a7:	0f 84 a1 00 00 00    	je     c001e64e <cleanerTaskFunction(void*)+0xcf>
c001e5ad:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c001e5b2:	85 c0                	test   eax,eax
c001e5b4:	75 01                	jne    c001e5b7 <cleanerTaskFunction(void*)+0x38>
c001e5b6:	fb                   	sti    
c001e5b7:	c6 05 ec f8 02 c0 00 	mov    BYTE PTR ds:0xc002f8ec,0x0
c001e5be:	fa                   	cli    
c001e5bf:	ff 05 08 f9 02 c0    	inc    DWORD PTR ds:0xc002f908
c001e5c5:	ff 05 04 f9 02 c0    	inc    DWORD PTR ds:0xc002f904
c001e5cb:	fa                   	cli    
c001e5cc:	ff 05 08 f9 02 c0    	inc    DWORD PTR ds:0xc002f908
c001e5d2:	eb 26                	jmp    c001e5fa <cleanerTaskFunction(void*)+0x7b>
c001e5d4:	83 ec 0c             	sub    esp,0xc
c001e5d7:	68 0c f9 02 c0       	push   0xc002f90c
c001e5dc:	e8 e9 a6 00 00       	call   c0028cca <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e5e1:	c7 04 24 0c f9 02 c0 	mov    DWORD PTR [esp],0xc002f90c
c001e5e8:	89 c3                	mov    ebx,eax
c001e5ea:	e8 e3 a6 00 00       	call   c0028cd2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e5ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e5f2:	e8 e1 fc ff ff       	call   c001e2d8 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e5f7:	83 c4 10             	add    esp,0x10
c001e5fa:	83 ec 0c             	sub    esp,0xc
c001e5fd:	68 0c f9 02 c0       	push   0xc002f90c
c001e602:	e8 a7 a6 00 00       	call   c0028cae <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e607:	83 c4 10             	add    esp,0x10
c001e60a:	84 c0                	test   al,al
c001e60c:	74 c6                	je     c001e5d4 <cleanerTaskFunction(void*)+0x55>
c001e60e:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c001e613:	48                   	dec    eax
c001e614:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c001e619:	75 01                	jne    c001e61c <cleanerTaskFunction(void*)+0x9d>
c001e61b:	fb                   	sti    
c001e61c:	a1 04 f9 02 c0       	mov    eax,ds:0xc002f904
c001e621:	48                   	dec    eax
c001e622:	a3 04 f9 02 c0       	mov    ds:0xc002f904,eax
c001e627:	0f 85 56 ff ff ff    	jne    c001e583 <cleanerTaskFunction(void*)+0x4>
c001e62d:	a1 00 f9 02 c0       	mov    eax,ds:0xc002f900
c001e632:	85 c0                	test   eax,eax
c001e634:	0f 84 49 ff ff ff    	je     c001e583 <cleanerTaskFunction(void*)+0x4>
c001e63a:	c7 05 00 f9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f900,0x0
c001e644:	e8 68 f7 ff ff       	call   c001ddb1 <schedule()>
c001e649:	e9 35 ff ff ff       	jmp    c001e583 <cleanerTaskFunction(void*)+0x4>
c001e64e:	83 ec 0c             	sub    esp,0xc
c001e651:	6a 02                	push   0x2
c001e653:	e8 09 f9 ff ff       	call   c001df61 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e658:	83 c4 10             	add    esp,0x10
c001e65b:	e9 57 ff ff ff       	jmp    c001e5b7 <cleanerTaskFunction(void*)+0x38>

c001e660 <terminateTask(int)>:
c001e660:	83 ec 14             	sub    esp,0x14
c001e663:	fa                   	cli    
c001e664:	ff 05 08 f9 02 c0    	inc    DWORD PTR ds:0xc002f908
c001e66a:	ff 05 04 f9 02 c0    	inc    DWORD PTR ds:0xc002f904
c001e670:	fa                   	cli    
c001e671:	ff 05 08 f9 02 c0    	inc    DWORD PTR ds:0xc002f908
c001e677:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e67b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e680:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e683:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e688:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e68b:	50                   	push   eax
c001e68c:	68 0c f9 02 c0       	push   0xc002f90c
c001e691:	e8 ea a6 00 00       	call   c0028d80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e696:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e69b:	83 c4 10             	add    esp,0x10
c001e69e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e6a5:	a1 e8 f8 02 c0       	mov    eax,ds:0xc002f8e8
c001e6aa:	85 c0                	test   eax,eax
c001e6ac:	74 53                	je     c001e701 <terminateTask(int)+0xa1>
c001e6ae:	83 ec 0c             	sub    esp,0xc
c001e6b1:	c6 05 ec f8 02 c0 01 	mov    BYTE PTR ds:0xc002f8ec,0x1
c001e6b8:	50                   	push   eax
c001e6b9:	e8 85 fb ff ff       	call   c001e243 <unblockTask(ThreadControlBlock*)>
c001e6be:	83 c4 10             	add    esp,0x10
c001e6c1:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c001e6c6:	48                   	dec    eax
c001e6c7:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c001e6cc:	75 01                	jne    c001e6cf <terminateTask(int)+0x6f>
c001e6ce:	fb                   	sti    
c001e6cf:	a1 04 f9 02 c0       	mov    eax,ds:0xc002f904
c001e6d4:	48                   	dec    eax
c001e6d5:	a3 04 f9 02 c0       	mov    ds:0xc002f904,eax
c001e6da:	75 09                	jne    c001e6e5 <terminateTask(int)+0x85>
c001e6dc:	83 3d 00 f9 02 c0 00 	cmp    DWORD PTR ds:0xc002f900,0x0
c001e6e3:	75 2e                	jne    c001e713 <terminateTask(int)+0xb3>
c001e6e5:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c001e6ea:	48                   	dec    eax
c001e6eb:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c001e6f0:	75 01                	jne    c001e6f3 <terminateTask(int)+0x93>
c001e6f2:	fb                   	sti    
c001e6f3:	fa                   	cli    
c001e6f4:	ff 05 08 f9 02 c0    	inc    DWORD PTR ds:0xc002f908
c001e6fa:	e8 b2 f6 ff ff       	call   c001ddb1 <schedule()>
c001e6ff:	eb e4                	jmp    c001e6e5 <terminateTask(int)+0x85>
c001e701:	83 ec 0c             	sub    esp,0xc
c001e704:	68 f5 c5 02 c0       	push   0xc002c5f5
c001e709:	e8 a3 41 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c001e70e:	83 c4 10             	add    esp,0x10
c001e711:	eb ae                	jmp    c001e6c1 <terminateTask(int)+0x61>
c001e713:	c7 05 00 f9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f900,0x0
c001e71d:	eb db                	jmp    c001e6fa <terminateTask(int)+0x9a>

c001e71f <Thr::terminateFromIRQ(int)>:
c001e71f:	83 ec 18             	sub    esp,0x18
c001e722:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e726:	e8 35 ff ff ff       	call   c001e660 <terminateTask(int)>
c001e72b:	90                   	nop

c001e72c <Semaphore::release()>:
c001e72c:	83 ec 0c             	sub    esp,0xc
c001e72f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e733:	fa                   	cli    
c001e734:	a1 04 f9 02 c0       	mov    eax,ds:0xc002f904
c001e739:	ff 05 08 f9 02 c0    	inc    DWORD PTR ds:0xc002f908
c001e73f:	8d 48 01             	lea    ecx,[eax+0x1]
c001e742:	89 0d 04 f9 02 c0    	mov    DWORD PTR ds:0xc002f904,ecx
c001e748:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e74b:	85 c9                	test   ecx,ecx
c001e74d:	74 3c                	je     c001e78b <Semaphore::release()+0x5f>
c001e74f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e752:	83 ec 0c             	sub    esp,0xc
c001e755:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e758:	51                   	push   ecx
c001e759:	e8 e5 fa ff ff       	call   c001e243 <unblockTask(ThreadControlBlock*)>
c001e75e:	a1 04 f9 02 c0       	mov    eax,ds:0xc002f904
c001e763:	83 c4 10             	add    esp,0x10
c001e766:	48                   	dec    eax
c001e767:	a3 04 f9 02 c0       	mov    ds:0xc002f904,eax
c001e76c:	85 c0                	test   eax,eax
c001e76e:	75 09                	jne    c001e779 <Semaphore::release()+0x4d>
c001e770:	a1 00 f9 02 c0       	mov    eax,ds:0xc002f900
c001e775:	85 c0                	test   eax,eax
c001e777:	75 17                	jne    c001e790 <Semaphore::release()+0x64>
c001e779:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c001e77e:	48                   	dec    eax
c001e77f:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c001e784:	75 01                	jne    c001e787 <Semaphore::release()+0x5b>
c001e786:	fb                   	sti    
c001e787:	83 c4 0c             	add    esp,0xc
c001e78a:	c3                   	ret    
c001e78b:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e78e:	eb d7                	jmp    c001e767 <Semaphore::release()+0x3b>
c001e790:	c7 05 00 f9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f900,0x0
c001e79a:	e8 12 f6 ff ff       	call   c001ddb1 <schedule()>
c001e79f:	eb d8                	jmp    c001e779 <Semaphore::release()+0x4d>

c001e7a1 <__static_initialization_and_destruction_0(int, int)>:
c001e7a1:	83 ec 0c             	sub    esp,0xc
c001e7a4:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e7a9:	0f 85 88 00 00 00    	jne    c001e837 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e7af:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e7b7:	75 7e                	jne    c001e837 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e7b9:	83 ec 0c             	sub    esp,0xc
c001e7bc:	68 24 f9 02 c0       	push   0xc002f924
c001e7c1:	e8 4a a8 00 00       	call   c0029010 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e7c6:	83 c4 10             	add    esp,0x10
c001e7c9:	83 ec 04             	sub    esp,0x4
c001e7cc:	68 d8 d1 02 c0       	push   0xc002d1d8
c001e7d1:	68 24 f9 02 c0       	push   0xc002f924
c001e7d6:	68 c4 8f 02 c0       	push   0xc0028fc4
c001e7db:	e8 73 3f ff ff       	call   c0012753 <__cxa_atexit>
c001e7e0:	83 c4 10             	add    esp,0x10
c001e7e3:	83 ec 0c             	sub    esp,0xc
c001e7e6:	68 18 f9 02 c0       	push   0xc002f918
c001e7eb:	e8 20 a8 00 00       	call   c0029010 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e7f0:	83 c4 10             	add    esp,0x10
c001e7f3:	83 ec 04             	sub    esp,0x4
c001e7f6:	68 d8 d1 02 c0       	push   0xc002d1d8
c001e7fb:	68 18 f9 02 c0       	push   0xc002f918
c001e800:	68 c4 8f 02 c0       	push   0xc0028fc4
c001e805:	e8 49 3f ff ff       	call   c0012753 <__cxa_atexit>
c001e80a:	83 c4 10             	add    esp,0x10
c001e80d:	83 ec 0c             	sub    esp,0xc
c001e810:	68 0c f9 02 c0       	push   0xc002f90c
c001e815:	e8 f6 a7 00 00       	call   c0029010 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e81a:	83 c4 10             	add    esp,0x10
c001e81d:	83 ec 04             	sub    esp,0x4
c001e820:	68 d8 d1 02 c0       	push   0xc002d1d8
c001e825:	68 0c f9 02 c0       	push   0xc002f90c
c001e82a:	68 c4 8f 02 c0       	push   0xc0028fc4
c001e82f:	e8 1f 3f ff ff       	call   c0012753 <__cxa_atexit>
c001e834:	83 c4 10             	add    esp,0x10
c001e837:	90                   	nop
c001e838:	83 c4 0c             	add    esp,0xc
c001e83b:	c3                   	ret    

c001e83c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e83c:	83 ec 0c             	sub    esp,0xc
c001e83f:	83 ec 08             	sub    esp,0x8
c001e842:	68 ff ff 00 00       	push   0xffff
c001e847:	6a 01                	push   0x1
c001e849:	e8 53 ff ff ff       	call   c001e7a1 <__static_initialization_and_destruction_0(int, int)>
c001e84e:	83 c4 10             	add    esp,0x10
c001e851:	83 c4 0c             	add    esp,0xc
c001e854:	c3                   	ret    

c001e855 <Vm::inbv(unsigned short)>:
c001e855:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e859:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e85e:	75 06                	jne    c001e866 <Vm::inbv(unsigned short)+0x11>
c001e860:	a0 6c f9 02 c0       	mov    al,ds:0xc002f96c
c001e865:	c3                   	ret    
c001e866:	ec                   	in     al,dx
c001e867:	c3                   	ret    

c001e868 <Vm::outbv(unsigned short, unsigned char)>:
c001e868:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e86c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e870:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e875:	75 25                	jne    c001e89c <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e877:	8b 0d 6c f9 02 c0    	mov    ecx,DWORD PTR ds:0xc002f96c
c001e87d:	8d 51 01             	lea    edx,[ecx+0x1]
c001e880:	88 81 80 f9 02 c0    	mov    BYTE PTR [ecx-0x3ffd0680],al
c001e886:	89 15 6c f9 02 c0    	mov    DWORD PTR ds:0xc002f96c,edx
c001e88c:	83 fa 20             	cmp    edx,0x20
c001e88f:	75 0c                	jne    c001e89d <Vm::outbv(unsigned short, unsigned char)+0x35>
c001e891:	c7 05 6c f9 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002f96c,0x1f
c001e89b:	c3                   	ret    
c001e89c:	ee                   	out    dx,al
c001e89d:	c3                   	ret    

c001e89e <Vm::realToLinear(unsigned short, unsigned short)>:
c001e89e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e8a3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e8a8:	c1 e0 04             	shl    eax,0x4
c001e8ab:	01 d0                	add    eax,edx
c001e8ad:	c3                   	ret    

c001e8ae <Vm::getSegment(unsigned int)>:
c001e8ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8b2:	c1 e8 10             	shr    eax,0x10
c001e8b5:	c3                   	ret    

c001e8b6 <Vm::getOffset(unsigned int)>:
c001e8b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8ba:	c3                   	ret    

c001e8bb <Vm::mainloop2()>:
c001e8bb:	83 ec 18             	sub    esp,0x18
c001e8be:	fa                   	cli    
c001e8bf:	ff 05 08 f9 02 c0    	inc    DWORD PTR ds:0xc002f908
c001e8c5:	6a 02                	push   0x2
c001e8c7:	c6 05 65 f9 02 c0 01 	mov    BYTE PTR ds:0xc002f965,0x1
c001e8ce:	e8 8e f6 ff ff       	call   c001df61 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e8d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8d8:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e8dc:	52                   	push   edx
c001e8dd:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e8e1:	52                   	push   edx
c001e8e2:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e8e6:	52                   	push   edx
c001e8e7:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e8eb:	50                   	push   eax
c001e8ec:	e8 09 1a fe ff       	call   c00002fa <goToVM86>
c001e8f1:	83 c4 2c             	add    esp,0x2c
c001e8f4:	c3                   	ret    

c001e8f5 <Vm::mainVm8086Loop(void*)>:
c001e8f5:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c001e8fa:	48                   	dec    eax
c001e8fb:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c001e900:	75 01                	jne    c001e903 <Vm::mainVm8086Loop(void*)+0xe>
c001e902:	fb                   	sti    
c001e903:	eb b6                	jmp    c001e8bb <Vm::mainloop2()>

c001e905 <Vm::mainloop3(unsigned long)>:
c001e905:	83 ec 18             	sub    esp,0x18
c001e908:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e90c:	fa                   	cli    
c001e90d:	ff 05 08 f9 02 c0    	inc    DWORD PTR ds:0xc002f908
c001e913:	6a 02                	push   0x2
c001e915:	c6 05 64 f9 02 c0 01 	mov    BYTE PTR ds:0xc002f964,0x1
c001e91c:	a3 60 f9 02 c0       	mov    ds:0xc002f960,eax
c001e921:	e8 3b f6 ff ff       	call   c001df61 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e926:	83 c4 1c             	add    esp,0x1c
c001e929:	eb 90                	jmp    c001e8bb <Vm::mainloop2()>

c001e92b <Vm::initialise8086()>:
c001e92b:	83 ec 0c             	sub    esp,0xc
c001e92e:	68 80 00 00 00       	push   0x80
c001e933:	6a 00                	push   0x0
c001e935:	68 f5 e8 01 c0       	push   0xc001e8f5
c001e93a:	ff 35 30 f9 02 c0    	push   DWORD PTR ds:0xc002f930
c001e940:	e8 47 f2 ff ff       	call   c001db8c <Process::createThread(void (*)(void*), void*, int)>
c001e945:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e94c:	a3 68 f9 02 c0       	mov    ds:0xc002f968,eax
c001e951:	68 00 01 00 00       	push   0x100
c001e956:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c001e95b:	6a 00                	push   0x0
c001e95d:	6a 00                	push   0x0
c001e95f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e965:	e8 12 35 ff ff       	call   c0011e7c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e96a:	83 c4 2c             	add    esp,0x2c
c001e96d:	c3                   	ret    

c001e96e <Vm::finish8086()>:
c001e96e:	53                   	push   ebx
c001e96f:	83 ec 08             	sub    esp,0x8
c001e972:	fa                   	cli    
c001e973:	ff 05 08 f9 02 c0    	inc    DWORD PTR ds:0xc002f908
c001e979:	80 3d 64 f9 02 c0 00 	cmp    BYTE PTR ds:0xc002f964,0x0
c001e980:	75 15                	jne    c001e997 <Vm::finish8086()+0x29>
c001e982:	e8 2a f4 ff ff       	call   c001ddb1 <schedule()>
c001e987:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c001e98c:	48                   	dec    eax
c001e98d:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c001e992:	75 de                	jne    c001e972 <Vm::finish8086()+0x4>
c001e994:	fb                   	sti    
c001e995:	eb db                	jmp    c001e972 <Vm::finish8086()+0x4>
c001e997:	83 ec 0c             	sub    esp,0xc
c001e99a:	8b 1d 60 f9 02 c0    	mov    ebx,DWORD PTR ds:0xc002f960
c001e9a0:	ff 35 68 f9 02 c0    	push   DWORD PTR ds:0xc002f968
c001e9a6:	c6 05 64 f9 02 c0 00 	mov    BYTE PTR ds:0xc002f964,0x0
c001e9ad:	e8 91 f8 ff ff       	call   c001e243 <unblockTask(ThreadControlBlock*)>
c001e9b2:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c001e9b7:	83 c4 10             	add    esp,0x10
c001e9ba:	8d 50 ff             	lea    edx,[eax-0x1]
c001e9bd:	89 15 08 f9 02 c0    	mov    DWORD PTR ds:0xc002f908,edx
c001e9c3:	85 d2                	test   edx,edx
c001e9c5:	75 01                	jne    c001e9c8 <Vm::finish8086()+0x5a>
c001e9c7:	fb                   	sti    
c001e9c8:	89 d8                	mov    eax,ebx
c001e9ca:	83 c4 08             	add    esp,0x8
c001e9cd:	5b                   	pop    ebx
c001e9ce:	c3                   	ret    

c001e9cf <Vm::getOutput8086(unsigned char*)>:
c001e9cf:	57                   	push   edi
c001e9d0:	8b 0d 6c f9 02 c0    	mov    ecx,DWORD PTR ds:0xc002f96c
c001e9d6:	56                   	push   esi
c001e9d7:	be 80 f9 02 c0       	mov    esi,0xc002f980
c001e9dc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e9e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e9e2:	a1 6c f9 02 c0       	mov    eax,ds:0xc002f96c
c001e9e7:	5e                   	pop    esi
c001e9e8:	c7 05 6c f9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f96c,0x0
c001e9f2:	5f                   	pop    edi
c001e9f3:	c3                   	ret    

c001e9f4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e9f4:	55                   	push   ebp
c001e9f5:	57                   	push   edi
c001e9f6:	56                   	push   esi
c001e9f7:	53                   	push   ebx
c001e9f8:	83 ec 2c             	sub    esp,0x2c
c001e9fb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e9ff:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001ea03:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001ea07:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001ea0b:	fa                   	cli    
c001ea0c:	ff 05 08 f9 02 c0    	inc    DWORD PTR ds:0xc002f908
c001ea12:	0f b6 35 65 f9 02 c0 	movzx  esi,BYTE PTR ds:0xc002f965
c001ea19:	89 f0                	mov    eax,esi
c001ea1b:	84 c0                	test   al,al
c001ea1d:	75 1d                	jne    c001ea3c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001ea1f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ea23:	e8 89 f3 ff ff       	call   c001ddb1 <schedule()>
c001ea28:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c001ea2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ea31:	48                   	dec    eax
c001ea32:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c001ea37:	75 d2                	jne    c001ea0b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ea39:	fb                   	sti    
c001ea3a:	eb cf                	jmp    c001ea0b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ea3c:	a1 68 f9 02 c0       	mov    eax,ds:0xc002f968
c001ea41:	c7 05 6c f9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f96c,0x0
c001ea4b:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001ea4f:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001ea53:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001ea57:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001ea5b:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ea5f:	50                   	push   eax
c001ea60:	6a 20                	push   0x20
c001ea62:	6a 00                	push   0x0
c001ea64:	68 80 f9 02 c0       	push   0xc002f980
c001ea69:	e8 e2 1c fe ff       	call   c0000750 <memset>
c001ea6e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ea75:	e8 df 0d ff ff       	call   c000f859 <malloc>
c001ea7a:	83 c4 0c             	add    esp,0xc
c001ea7d:	89 c3                	mov    ebx,eax
c001ea7f:	ff 35 30 f9 02 c0    	push   DWORD PTR ds:0xc002f930
c001ea85:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ea89:	50                   	push   eax
c001ea8a:	e8 81 43 ff ff       	call   c0012e10 <File::File(char const*, Process*)>
c001ea8f:	83 c4 10             	add    esp,0x10
c001ea92:	85 db                	test   ebx,ebx
c001ea94:	75 0a                	jne    c001eaa0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001ea96:	83 ec 0c             	sub    esp,0xc
c001ea99:	68 20 c7 02 c0       	push   0xc002c720
c001ea9e:	eb 3e                	jmp    c001eade <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001eaa0:	50                   	push   eax
c001eaa1:	8d 44 24 17          	lea    eax,[esp+0x17]
c001eaa5:	50                   	push   eax
c001eaa6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001eaaa:	50                   	push   eax
c001eaab:	53                   	push   ebx
c001eaac:	e8 6f 46 ff ff       	call   c0013120 <File::stat(unsigned long long*, bool*)>
c001eab1:	83 c4 10             	add    esp,0x10
c001eab4:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001eab9:	74 0a                	je     c001eac5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001eabb:	83 ec 0c             	sub    esp,0xc
c001eabe:	68 34 c7 02 c0       	push   0xc002c734
c001eac3:	eb 19                	jmp    c001eade <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001eac5:	51                   	push   ecx
c001eac6:	51                   	push   ecx
c001eac7:	6a 01                	push   0x1
c001eac9:	53                   	push   ebx
c001eaca:	e8 a5 43 ff ff       	call   c0012e74 <File::open(FileOpenMode)>
c001eacf:	83 c4 10             	add    esp,0x10
c001ead2:	85 c0                	test   eax,eax
c001ead4:	74 24                	je     c001eafa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001ead6:	83 ec 0c             	sub    esp,0xc
c001ead9:	68 4d c7 02 c0       	push   0xc002c74d
c001eade:	e8 3c b7 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c001eae3:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c001eae8:	83 c4 10             	add    esp,0x10
c001eaeb:	48                   	dec    eax
c001eaec:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c001eaf1:	85 c0                	test   eax,eax
c001eaf3:	75 01                	jne    c001eaf6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001eaf5:	fb                   	sti    
c001eaf6:	31 f6                	xor    esi,esi
c001eaf8:	eb 58                	jmp    c001eb52 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001eafa:	0f b7 ed             	movzx  ebp,bp
c001eafd:	50                   	push   eax
c001eafe:	0f b7 ff             	movzx  edi,di
c001eb01:	50                   	push   eax
c001eb02:	55                   	push   ebp
c001eb03:	57                   	push   edi
c001eb04:	e8 95 fd ff ff       	call   c001e89e <Vm::realToLinear(unsigned short, unsigned short)>
c001eb09:	5a                   	pop    edx
c001eb0a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001eb0c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001eb10:	51                   	push   ecx
c001eb11:	50                   	push   eax
c001eb12:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eb16:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eb1a:	53                   	push   ebx
c001eb1b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001eb1e:	83 c4 14             	add    esp,0x14
c001eb21:	53                   	push   ebx
c001eb22:	e8 ab 43 ff ff       	call   c0012ed2 <File::close()>
c001eb27:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c001eb2c:	83 c4 10             	add    esp,0x10
c001eb2f:	48                   	dec    eax
c001eb30:	c6 05 65 f9 02 c0 00 	mov    BYTE PTR ds:0xc002f965,0x0
c001eb37:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c001eb3c:	85 c0                	test   eax,eax
c001eb3e:	75 01                	jne    c001eb41 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001eb40:	fb                   	sti    
c001eb41:	83 ec 0c             	sub    esp,0xc
c001eb44:	ff 35 68 f9 02 c0    	push   DWORD PTR ds:0xc002f968
c001eb4a:	e8 f4 f6 ff ff       	call   c001e243 <unblockTask(ThreadControlBlock*)>
c001eb4f:	83 c4 10             	add    esp,0x10
c001eb52:	83 c4 2c             	add    esp,0x2c
c001eb55:	89 f0                	mov    eax,esi
c001eb57:	5b                   	pop    ebx
c001eb58:	5e                   	pop    esi
c001eb59:	5f                   	pop    edi
c001eb5a:	5d                   	pop    ebp
c001eb5b:	c3                   	ret    

c001eb5c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001eb5c:	57                   	push   edi
c001eb5d:	56                   	push   esi
c001eb5e:	53                   	push   ebx
c001eb5f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eb63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb67:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eb6b:	83 e8 06             	sub    eax,0x6
c001eb6e:	0f b7 c0             	movzx  eax,ax
c001eb71:	50                   	push   eax
c001eb72:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001eb77:	50                   	push   eax
c001eb78:	e8 21 fd ff ff       	call   c001e89e <Vm::realToLinear(unsigned short, unsigned short)>
c001eb7d:	5a                   	pop    edx
c001eb7e:	5e                   	pop    esi
c001eb7f:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001eb82:	8d 56 fa             	lea    edx,[esi-0x6]
c001eb85:	81 e2 ff ff 00 00    	and    edx,0xffff
c001eb8b:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001eb8e:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001eb91:	83 c2 02             	add    edx,0x2
c001eb94:	66 89 10             	mov    WORD PTR [eax],dx
c001eb97:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001eb9a:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001eb9e:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001eba1:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001eba5:	89 d6                	mov    esi,edx
c001eba7:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ebad:	66 81 e6 ff fd       	and    si,0xfdff
c001ebb2:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ebb6:	74 07                	je     c001ebbf <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ebb8:	89 d6                	mov    esi,edx
c001ebba:	66 81 ce 00 02       	or     si,0x200
c001ebbf:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ebc3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ebc8:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ebcc:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ebd4:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ebd7:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ebdf:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ebe2:	5b                   	pop    ebx
c001ebe3:	5e                   	pop    esi
c001ebe4:	5f                   	pop    edi
c001ebe5:	c3                   	ret    

c001ebe6 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ebe6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ebeb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ebf0:	c1 e0 04             	shl    eax,0x4
c001ebf3:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ebf6:	c3                   	ret    

c001ebf7 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ebf7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ebfc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec01:	c1 e0 04             	shl    eax,0x4
c001ec04:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ec08:	c3                   	ret    

c001ec09 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ec09:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec0e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec13:	c1 e0 04             	shl    eax,0x4
c001ec16:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ec19:	c3                   	ret    

c001ec1a <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ec1a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec1f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec24:	c1 e0 04             	shl    eax,0x4
c001ec27:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec2b:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ec2e:	c3                   	ret    

c001ec2f <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ec2f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec34:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec39:	c1 e0 04             	shl    eax,0x4
c001ec3c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec40:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ec44:	c3                   	ret    

c001ec45 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ec45:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec4a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec4f:	c1 e0 04             	shl    eax,0x4
c001ec52:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec56:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ec59:	c3                   	ret    

c001ec5a <Vm::faultHandler(regs*)>:
c001ec5a:	55                   	push   ebp
c001ec5b:	57                   	push   edi
c001ec5c:	56                   	push   esi
c001ec5d:	53                   	push   ebx
c001ec5e:	83 ec 1c             	sub    esp,0x1c
c001ec61:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ec65:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001ec68:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001ec6c:	0f b7 f8             	movzx  edi,ax
c001ec6f:	52                   	push   edx
c001ec70:	0f b7 c0             	movzx  eax,ax
c001ec73:	50                   	push   eax
c001ec74:	e8 25 fc ff ff       	call   c001e89e <Vm::realToLinear(unsigned short, unsigned short)>
c001ec79:	5a                   	pop    edx
c001ec7a:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001ec7d:	59                   	pop    ecx
c001ec7e:	89 c1                	mov    ecx,eax
c001ec80:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ec83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ec87:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ec90:	0f b7 c5             	movzx  eax,bp
c001ec93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ec97:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001ec9b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ec9f:	e8 fa fb ff ff       	call   c001e89e <Vm::realToLinear(unsigned short, unsigned short)>
c001eca4:	5e                   	pop    esi
c001eca5:	be 06 00 00 00       	mov    esi,0x6
c001ecaa:	5a                   	pop    edx
c001ecab:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001ecb0:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001ecb5:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001ecb8:	80 fa 9d             	cmp    dl,0x9d
c001ecbb:	0f 84 2c 02 00 00    	je     c001eeed <Vm::faultHandler(regs*)+0x293>
c001ecc1:	0f 87 91 00 00 00    	ja     c001ed58 <Vm::faultHandler(regs*)+0xfe>
c001ecc7:	80 fa 66             	cmp    dl,0x66
c001ecca:	0f 84 98 01 00 00    	je     c001ee68 <Vm::faultHandler(regs*)+0x20e>
c001ecd0:	77 47                	ja     c001ed19 <Vm::faultHandler(regs*)+0xbf>
c001ecd2:	80 fa 36             	cmp    dl,0x36
c001ecd5:	0f 84 80 01 00 00    	je     c001ee5b <Vm::faultHandler(regs*)+0x201>
c001ecdb:	77 1a                	ja     c001ecf7 <Vm::faultHandler(regs*)+0x9d>
c001ecdd:	80 fa 26             	cmp    dl,0x26
c001ece0:	0f 84 4e 01 00 00    	je     c001ee34 <Vm::faultHandler(regs*)+0x1da>
c001ece6:	80 fa 2e             	cmp    dl,0x2e
c001ece9:	0f 85 e2 05 00 00    	jne    c001f2d1 <Vm::faultHandler(regs*)+0x677>
c001ecef:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ecf2:	31 f6                	xor    esi,esi
c001ecf4:	41                   	inc    ecx
c001ecf5:	eb be                	jmp    c001ecb5 <Vm::faultHandler(regs*)+0x5b>
c001ecf7:	80 fa 64             	cmp    dl,0x64
c001ecfa:	0f 84 41 01 00 00    	je     c001ee41 <Vm::faultHandler(regs*)+0x1e7>
c001ed00:	0f 87 48 01 00 00    	ja     c001ee4e <Vm::faultHandler(regs*)+0x1f4>
c001ed06:	80 fa 3e             	cmp    dl,0x3e
c001ed09:	0f 85 c2 05 00 00    	jne    c001f2d1 <Vm::faultHandler(regs*)+0x677>
c001ed0f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ed12:	be 01 00 00 00       	mov    esi,0x1
c001ed17:	eb db                	jmp    c001ecf4 <Vm::faultHandler(regs*)+0x9a>
c001ed19:	80 fa 6d             	cmp    dl,0x6d
c001ed1c:	0f 84 ec 02 00 00    	je     c001f00e <Vm::faultHandler(regs*)+0x3b4>
c001ed22:	77 17                	ja     c001ed3b <Vm::faultHandler(regs*)+0xe1>
c001ed24:	80 fa 67             	cmp    dl,0x67
c001ed27:	0f 84 48 01 00 00    	je     c001ee75 <Vm::faultHandler(regs*)+0x21b>
c001ed2d:	80 fa 6c             	cmp    dl,0x6c
c001ed30:	0f 84 69 02 00 00    	je     c001ef9f <Vm::faultHandler(regs*)+0x345>
c001ed36:	e9 96 05 00 00       	jmp    c001f2d1 <Vm::faultHandler(regs*)+0x677>
c001ed3b:	80 fa 6f             	cmp    dl,0x6f
c001ed3e:	0f 84 f4 03 00 00    	je     c001f138 <Vm::faultHandler(regs*)+0x4de>
c001ed44:	0f 82 59 03 00 00    	jb     c001f0a3 <Vm::faultHandler(regs*)+0x449>
c001ed4a:	80 fa 9c             	cmp    dl,0x9c
c001ed4d:	0f 84 2f 01 00 00    	je     c001ee82 <Vm::faultHandler(regs*)+0x228>
c001ed53:	e9 79 05 00 00       	jmp    c001f2d1 <Vm::faultHandler(regs*)+0x677>
c001ed58:	80 fa ec             	cmp    dl,0xec
c001ed5b:	0f 84 14 05 00 00    	je     c001f275 <Vm::faultHandler(regs*)+0x61b>
c001ed61:	77 7b                	ja     c001edde <Vm::faultHandler(regs*)+0x184>
c001ed63:	80 fa e4             	cmp    dl,0xe4
c001ed66:	0f 84 93 04 00 00    	je     c001f1ff <Vm::faultHandler(regs*)+0x5a5>
c001ed6c:	77 53                	ja     c001edc1 <Vm::faultHandler(regs*)+0x167>
c001ed6e:	80 fa cd             	cmp    dl,0xcd
c001ed71:	0f 84 d9 01 00 00    	je     c001ef50 <Vm::faultHandler(regs*)+0x2f6>
c001ed77:	80 fa cf             	cmp    dl,0xcf
c001ed7a:	0f 85 51 05 00 00    	jne    c001f2d1 <Vm::faultHandler(regs*)+0x677>
c001ed80:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001ed83:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001ed86:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001ed8a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001ed8d:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001ed91:	81 ca 00 02 02 00    	or     edx,0x20200
c001ed97:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ed9a:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001ed9e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eda4:	66 c1 e8 09          	shr    ax,0x9
c001eda8:	83 e0 01             	and    eax,0x1
c001edab:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001edae:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001edb1:	83 c0 06             	add    eax,0x6
c001edb4:	25 ff ff 00 00       	and    eax,0xffff
c001edb9:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001edbc:	e9 0c 05 00 00       	jmp    c001f2cd <Vm::faultHandler(regs*)+0x673>
c001edc1:	80 fa e6             	cmp    dl,0xe6
c001edc4:	0f 84 7f 04 00 00    	je     c001f249 <Vm::faultHandler(regs*)+0x5ef>
c001edca:	0f 82 4b 04 00 00    	jb     c001f21b <Vm::faultHandler(regs*)+0x5c1>
c001edd0:	80 fa e7             	cmp    dl,0xe7
c001edd3:	0f 84 87 04 00 00    	je     c001f260 <Vm::faultHandler(regs*)+0x606>
c001edd9:	e9 f3 04 00 00       	jmp    c001f2d1 <Vm::faultHandler(regs*)+0x677>
c001edde:	80 fa ef             	cmp    dl,0xef
c001ede1:	0f 84 d1 04 00 00    	je     c001f2b8 <Vm::faultHandler(regs*)+0x65e>
c001ede7:	77 28                	ja     c001ee11 <Vm::faultHandler(regs*)+0x1b7>
c001ede9:	80 fa ed             	cmp    dl,0xed
c001edec:	0f 84 9f 04 00 00    	je     c001f291 <Vm::faultHandler(regs*)+0x637>
c001edf2:	80 fa ee             	cmp    dl,0xee
c001edf5:	0f 85 d6 04 00 00    	jne    c001f2d1 <Vm::faultHandler(regs*)+0x677>
c001edfb:	50                   	push   eax
c001edfc:	50                   	push   eax
c001edfd:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ee01:	50                   	push   eax
c001ee02:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ee06:	50                   	push   eax
c001ee07:	e8 5c fa ff ff       	call   c001e868 <Vm::outbv(unsigned short, unsigned char)>
c001ee0c:	e9 9f 04 00 00       	jmp    c001f2b0 <Vm::faultHandler(regs*)+0x656>
c001ee11:	80 fa fa             	cmp    dl,0xfa
c001ee14:	0f 84 69 01 00 00    	je     c001ef83 <Vm::faultHandler(regs*)+0x329>
c001ee1a:	80 fa fb             	cmp    dl,0xfb
c001ee1d:	0f 84 6e 01 00 00    	je     c001ef91 <Vm::faultHandler(regs*)+0x337>
c001ee23:	80 fa f3             	cmp    dl,0xf3
c001ee26:	0f 85 a5 04 00 00    	jne    c001f2d1 <Vm::faultHandler(regs*)+0x677>
c001ee2c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee2f:	e9 c0 fe ff ff       	jmp    c001ecf4 <Vm::faultHandler(regs*)+0x9a>
c001ee34:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee37:	be 02 00 00 00       	mov    esi,0x2
c001ee3c:	e9 b3 fe ff ff       	jmp    c001ecf4 <Vm::faultHandler(regs*)+0x9a>
c001ee41:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee44:	be 03 00 00 00       	mov    esi,0x3
c001ee49:	e9 a6 fe ff ff       	jmp    c001ecf4 <Vm::faultHandler(regs*)+0x9a>
c001ee4e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee51:	be 04 00 00 00       	mov    esi,0x4
c001ee56:	e9 99 fe ff ff       	jmp    c001ecf4 <Vm::faultHandler(regs*)+0x9a>
c001ee5b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee5e:	be 05 00 00 00       	mov    esi,0x5
c001ee63:	e9 8c fe ff ff       	jmp    c001ecf4 <Vm::faultHandler(regs*)+0x9a>
c001ee68:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee6b:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001ee70:	e9 7f fe ff ff       	jmp    c001ecf4 <Vm::faultHandler(regs*)+0x9a>
c001ee75:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee78:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001ee7d:	e9 72 fe ff ff       	jmp    c001ecf4 <Vm::faultHandler(regs*)+0x9a>
c001ee82:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001ee85:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ee89:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee8e:	74 30                	je     c001eec0 <Vm::faultHandler(regs*)+0x266>
c001ee90:	83 e9 04             	sub    ecx,0x4
c001ee93:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ee99:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001ee9f:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001eea2:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001eea5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001eeab:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001eeaf:	0f 84 15 04 00 00    	je     c001f2ca <Vm::faultHandler(regs*)+0x670>
c001eeb5:	80 ce 02             	or     dh,0x2
c001eeb8:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001eebb:	e9 0a 04 00 00       	jmp    c001f2ca <Vm::faultHandler(regs*)+0x670>
c001eec0:	83 e9 02             	sub    ecx,0x2
c001eec3:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001eec9:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001eecc:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001eed0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001eed6:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001eeda:	74 05                	je     c001eee1 <Vm::faultHandler(regs*)+0x287>
c001eedc:	80 ce 02             	or     dh,0x2
c001eedf:	eb 03                	jmp    c001eee4 <Vm::faultHandler(regs*)+0x28a>
c001eee1:	80 e6 fd             	and    dh,0xfd
c001eee4:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001eee8:	e9 dd 03 00 00       	jmp    c001f2ca <Vm::faultHandler(regs*)+0x670>
c001eeed:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eef2:	74 2a                	je     c001ef1e <Vm::faultHandler(regs*)+0x2c4>
c001eef4:	8b 10                	mov    edx,DWORD PTR [eax]
c001eef6:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001eefc:	81 ca 00 02 02 00    	or     edx,0x20200
c001ef02:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ef05:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef07:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ef0d:	c1 e8 09             	shr    eax,0x9
c001ef10:	83 e0 01             	and    eax,0x1
c001ef13:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ef16:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ef19:	83 c0 04             	add    eax,0x4
c001ef1c:	eb 25                	jmp    c001ef43 <Vm::faultHandler(regs*)+0x2e9>
c001ef1e:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001ef21:	81 ca 00 02 02 00    	or     edx,0x20200
c001ef27:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ef2a:	66 8b 00             	mov    ax,WORD PTR [eax]
c001ef2d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ef33:	66 c1 e8 09          	shr    ax,0x9
c001ef37:	83 e0 01             	and    eax,0x1
c001ef3a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ef3d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ef40:	83 c0 02             	add    eax,0x2
c001ef43:	25 ff ff 00 00       	and    eax,0xffff
c001ef48:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001ef4b:	e9 7a 03 00 00       	jmp    c001f2ca <Vm::faultHandler(regs*)+0x670>
c001ef50:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ef54:	3c ee                	cmp    al,0xee
c001ef56:	75 10                	jne    c001ef68 <Vm::faultHandler(regs*)+0x30e>
c001ef58:	83 ec 0c             	sub    esp,0xc
c001ef5b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001ef5e:	e8 a2 f9 ff ff       	call   c001e905 <Vm::mainloop3(unsigned long)>
c001ef63:	e9 4b 03 00 00       	jmp    c001f2b3 <Vm::faultHandler(regs*)+0x659>
c001ef68:	83 ec 0c             	sub    esp,0xc
c001ef6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ef6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef73:	51                   	push   ecx
c001ef74:	50                   	push   eax
c001ef75:	53                   	push   ebx
c001ef76:	e8 e1 fb ff ff       	call   c001eb5c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001ef7b:	83 c4 20             	add    esp,0x20
c001ef7e:	e9 4a 03 00 00       	jmp    c001f2cd <Vm::faultHandler(regs*)+0x673>
c001ef83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ef88:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ef8c:	e9 39 03 00 00       	jmp    c001f2ca <Vm::faultHandler(regs*)+0x670>
c001ef91:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ef96:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001ef9a:	e9 2b 03 00 00       	jmp    c001f2ca <Vm::faultHandler(regs*)+0x670>
c001ef9f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001efa2:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001efa7:	74 2b                	je     c001efd4 <Vm::faultHandler(regs*)+0x37a>
c001efa9:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001efb0:	76 22                	jbe    c001efd4 <Vm::faultHandler(regs*)+0x37a>
c001efb2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001efb6:	50                   	push   eax
c001efb7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001efbb:	50                   	push   eax
c001efbc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001efc0:	50                   	push   eax
c001efc1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001efc5:	50                   	push   eax
c001efc6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001efca:	50                   	push   eax
c001efcb:	6a 6c                	push   0x6c
c001efcd:	6a 6c                	push   0x6c
c001efcf:	e9 b9 01 00 00       	jmp    c001f18d <Vm::faultHandler(regs*)+0x533>
c001efd4:	83 ec 0c             	sub    esp,0xc
c001efd7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001efdb:	0f b7 f6             	movzx  esi,si
c001efde:	50                   	push   eax
c001efdf:	e8 71 f8 ff ff       	call   c001e855 <Vm::inbv(unsigned short)>
c001efe4:	83 c4 0c             	add    esp,0xc
c001efe7:	0f b6 c0             	movzx  eax,al
c001efea:	50                   	push   eax
c001efeb:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001efef:	50                   	push   eax
c001eff0:	56                   	push   esi
c001eff1:	e8 24 fc ff ff       	call   c001ec1a <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001eff6:	83 c4 10             	add    esp,0x10
c001eff9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001effc:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f000:	74 03                	je     c001f005 <Vm::faultHandler(regs*)+0x3ab>
c001f002:	48                   	dec    eax
c001f003:	eb 01                	jmp    c001f006 <Vm::faultHandler(regs*)+0x3ac>
c001f005:	40                   	inc    eax
c001f006:	0f b7 c0             	movzx  eax,ax
c001f009:	e9 8d 00 00 00       	jmp    c001f09b <Vm::faultHandler(regs*)+0x441>
c001f00e:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f011:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f014:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f019:	74 29                	je     c001f044 <Vm::faultHandler(regs*)+0x3ea>
c001f01b:	3d ff ff 00 00       	cmp    eax,0xffff
c001f020:	76 22                	jbe    c001f044 <Vm::faultHandler(regs*)+0x3ea>
c001f022:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f026:	50                   	push   eax
c001f027:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f02b:	50                   	push   eax
c001f02c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f030:	50                   	push   eax
c001f031:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f035:	50                   	push   eax
c001f036:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f03a:	50                   	push   eax
c001f03b:	6a 6d                	push   0x6d
c001f03d:	6a 6d                	push   0x6d
c001f03f:	e9 49 01 00 00       	jmp    c001f18d <Vm::faultHandler(regs*)+0x533>
c001f044:	0f b7 c8             	movzx  ecx,ax
c001f047:	0f b7 f6             	movzx  esi,si
c001f04a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f04d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f052:	74 20                	je     c001f074 <Vm::faultHandler(regs*)+0x41a>
c001f054:	ed                   	in     eax,dx
c001f055:	55                   	push   ebp
c001f056:	50                   	push   eax
c001f057:	51                   	push   ecx
c001f058:	56                   	push   esi
c001f059:	e8 e7 fb ff ff       	call   c001ec45 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f05e:	83 c4 10             	add    esp,0x10
c001f061:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f064:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f068:	74 05                	je     c001f06f <Vm::faultHandler(regs*)+0x415>
c001f06a:	83 e8 04             	sub    eax,0x4
c001f06d:	eb 27                	jmp    c001f096 <Vm::faultHandler(regs*)+0x43c>
c001f06f:	83 c0 04             	add    eax,0x4
c001f072:	eb 22                	jmp    c001f096 <Vm::faultHandler(regs*)+0x43c>
c001f074:	66 ed                	in     ax,dx
c001f076:	0f b7 c0             	movzx  eax,ax
c001f079:	57                   	push   edi
c001f07a:	50                   	push   eax
c001f07b:	51                   	push   ecx
c001f07c:	56                   	push   esi
c001f07d:	e8 ad fb ff ff       	call   c001ec2f <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f082:	83 c4 10             	add    esp,0x10
c001f085:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f088:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f08c:	74 05                	je     c001f093 <Vm::faultHandler(regs*)+0x439>
c001f08e:	83 e8 02             	sub    eax,0x2
c001f091:	eb 03                	jmp    c001f096 <Vm::faultHandler(regs*)+0x43c>
c001f093:	83 c0 02             	add    eax,0x2
c001f096:	25 ff ff 00 00       	and    eax,0xffff
c001f09b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001f09e:	e9 27 02 00 00       	jmp    c001f2ca <Vm::faultHandler(regs*)+0x670>
c001f0a3:	8d 46 ff             	lea    eax,[esi-0x1]
c001f0a6:	3c 05                	cmp    al,0x5
c001f0a8:	77 24                	ja     c001f0ce <Vm::faultHandler(regs*)+0x474>
c001f0aa:	0f b6 c0             	movzx  eax,al
c001f0ad:	ff 24 85 c0 c7 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd3840]
c001f0b4:	0f b7 fd             	movzx  edi,bp
c001f0b7:	eb 15                	jmp    c001f0ce <Vm::faultHandler(regs*)+0x474>
c001f0b9:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001f0bd:	eb 0f                	jmp    c001f0ce <Vm::faultHandler(regs*)+0x474>
c001f0bf:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001f0c3:	eb 09                	jmp    c001f0ce <Vm::faultHandler(regs*)+0x474>
c001f0c5:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001f0c9:	eb 03                	jmp    c001f0ce <Vm::faultHandler(regs*)+0x474>
c001f0cb:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001f0ce:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f0d1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f0d6:	74 29                	je     c001f101 <Vm::faultHandler(regs*)+0x4a7>
c001f0d8:	3d ff ff 00 00       	cmp    eax,0xffff
c001f0dd:	76 22                	jbe    c001f101 <Vm::faultHandler(regs*)+0x4a7>
c001f0df:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f0e3:	50                   	push   eax
c001f0e4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f0e8:	50                   	push   eax
c001f0e9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f0ed:	50                   	push   eax
c001f0ee:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f0f2:	50                   	push   eax
c001f0f3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f0f7:	50                   	push   eax
c001f0f8:	6a 6e                	push   0x6e
c001f0fa:	6a 6e                	push   0x6e
c001f0fc:	e9 8c 00 00 00       	jmp    c001f18d <Vm::faultHandler(regs*)+0x533>
c001f101:	0f b7 c0             	movzx  eax,ax
c001f104:	52                   	push   edx
c001f105:	52                   	push   edx
c001f106:	50                   	push   eax
c001f107:	57                   	push   edi
c001f108:	e8 d9 fa ff ff       	call   c001ebe6 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f10d:	59                   	pop    ecx
c001f10e:	0f b6 c0             	movzx  eax,al
c001f111:	5e                   	pop    esi
c001f112:	50                   	push   eax
c001f113:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f117:	50                   	push   eax
c001f118:	e8 4b f7 ff ff       	call   c001e868 <Vm::outbv(unsigned short, unsigned char)>
c001f11d:	83 c4 10             	add    esp,0x10
c001f120:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f123:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f127:	74 03                	je     c001f12c <Vm::faultHandler(regs*)+0x4d2>
c001f129:	48                   	dec    eax
c001f12a:	eb 01                	jmp    c001f12d <Vm::faultHandler(regs*)+0x4d3>
c001f12c:	40                   	inc    eax
c001f12d:	0f b7 c0             	movzx  eax,ax
c001f130:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001f133:	e9 92 01 00 00       	jmp    c001f2ca <Vm::faultHandler(regs*)+0x670>
c001f138:	8d 46 ff             	lea    eax,[esi-0x1]
c001f13b:	3c 05                	cmp    al,0x5
c001f13d:	77 1f                	ja     c001f15e <Vm::faultHandler(regs*)+0x504>
c001f13f:	0f b6 c0             	movzx  eax,al
c001f142:	ff 24 85 d8 c7 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd3828]
c001f149:	89 ef                	mov    edi,ebp
c001f14b:	eb 11                	jmp    c001f15e <Vm::faultHandler(regs*)+0x504>
c001f14d:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001f150:	eb 0c                	jmp    c001f15e <Vm::faultHandler(regs*)+0x504>
c001f152:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001f155:	eb 07                	jmp    c001f15e <Vm::faultHandler(regs*)+0x504>
c001f157:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001f15a:	eb 02                	jmp    c001f15e <Vm::faultHandler(regs*)+0x504>
c001f15c:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001f15e:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001f161:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f166:	74 37                	je     c001f19f <Vm::faultHandler(regs*)+0x545>
c001f168:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001f16e:	76 2f                	jbe    c001f19f <Vm::faultHandler(regs*)+0x545>
c001f170:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f174:	50                   	push   eax
c001f175:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f179:	50                   	push   eax
c001f17a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f17e:	50                   	push   eax
c001f17f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f183:	50                   	push   eax
c001f184:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f188:	50                   	push   eax
c001f189:	6a 6f                	push   0x6f
c001f18b:	6a 6f                	push   0x6f
c001f18d:	68 66 c7 02 c0       	push   0xc002c766
c001f192:	e8 1a 37 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c001f197:	83 c4 20             	add    esp,0x20
c001f19a:	e9 86 01 00 00       	jmp    c001f325 <Vm::faultHandler(regs*)+0x6cb>
c001f19f:	0f b7 d7             	movzx  edx,di
c001f1a2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001f1a5:	0f b7 c6             	movzx  eax,si
c001f1a8:	81 e1 00 04 00 00    	and    ecx,0x400
c001f1ae:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001f1b1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f1b6:	74 1d                	je     c001f1d5 <Vm::faultHandler(regs*)+0x57b>
c001f1b8:	55                   	push   ebp
c001f1b9:	55                   	push   ebp
c001f1ba:	50                   	push   eax
c001f1bb:	52                   	push   edx
c001f1bc:	e8 48 fa ff ff       	call   c001ec09 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f1c1:	83 c4 10             	add    esp,0x10
c001f1c4:	89 fa                	mov    edx,edi
c001f1c6:	ef                   	out    dx,eax
c001f1c7:	85 c9                	test   ecx,ecx
c001f1c9:	74 05                	je     c001f1d0 <Vm::faultHandler(regs*)+0x576>
c001f1cb:	83 ee 04             	sub    esi,0x4
c001f1ce:	eb 21                	jmp    c001f1f1 <Vm::faultHandler(regs*)+0x597>
c001f1d0:	83 c6 04             	add    esi,0x4
c001f1d3:	eb 1c                	jmp    c001f1f1 <Vm::faultHandler(regs*)+0x597>
c001f1d5:	55                   	push   ebp
c001f1d6:	55                   	push   ebp
c001f1d7:	50                   	push   eax
c001f1d8:	52                   	push   edx
c001f1d9:	e8 19 fa ff ff       	call   c001ebf7 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f1de:	83 c4 10             	add    esp,0x10
c001f1e1:	89 fa                	mov    edx,edi
c001f1e3:	66 ef                	out    dx,ax
c001f1e5:	85 c9                	test   ecx,ecx
c001f1e7:	74 05                	je     c001f1ee <Vm::faultHandler(regs*)+0x594>
c001f1e9:	83 ee 02             	sub    esi,0x2
c001f1ec:	eb 03                	jmp    c001f1f1 <Vm::faultHandler(regs*)+0x597>
c001f1ee:	83 c6 02             	add    esi,0x2
c001f1f1:	81 e6 ff ff 00 00    	and    esi,0xffff
c001f1f7:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001f1fa:	e9 cb 00 00 00       	jmp    c001f2ca <Vm::faultHandler(regs*)+0x670>
c001f1ff:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f206:	83 ec 0c             	sub    esp,0xc
c001f209:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f20d:	50                   	push   eax
c001f20e:	e8 42 f6 ff ff       	call   c001e855 <Vm::inbv(unsigned short)>
c001f213:	0f b6 c0             	movzx  eax,al
c001f216:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f219:	eb 3f                	jmp    c001f25a <Vm::faultHandler(regs*)+0x600>
c001f21b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f220:	74 07                	je     c001f229 <Vm::faultHandler(regs*)+0x5cf>
c001f222:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f226:	ed                   	in     eax,dx
c001f227:	eb 14                	jmp    c001f23d <Vm::faultHandler(regs*)+0x5e3>
c001f229:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001f22c:	66 31 f6             	xor    si,si
c001f22f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001f232:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f236:	66 ed                	in     ax,dx
c001f238:	0f b7 c0             	movzx  eax,ax
c001f23b:	09 f0                	or     eax,esi
c001f23d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f240:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f244:	e9 84 00 00 00       	jmp    c001f2cd <Vm::faultHandler(regs*)+0x673>
c001f249:	52                   	push   edx
c001f24a:	52                   	push   edx
c001f24b:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f24f:	50                   	push   eax
c001f250:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f254:	50                   	push   eax
c001f255:	e8 0e f6 ff ff       	call   c001e868 <Vm::outbv(unsigned short, unsigned char)>
c001f25a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f25e:	eb 53                	jmp    c001f2b3 <Vm::faultHandler(regs*)+0x659>
c001f260:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f263:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f267:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f26c:	74 03                	je     c001f271 <Vm::faultHandler(regs*)+0x617>
c001f26e:	ef                   	out    dx,eax
c001f26f:	eb cf                	jmp    c001f240 <Vm::faultHandler(regs*)+0x5e6>
c001f271:	66 ef                	out    dx,ax
c001f273:	eb cb                	jmp    c001f240 <Vm::faultHandler(regs*)+0x5e6>
c001f275:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f27c:	83 ec 0c             	sub    esp,0xc
c001f27f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f283:	50                   	push   eax
c001f284:	e8 cc f5 ff ff       	call   c001e855 <Vm::inbv(unsigned short)>
c001f289:	0f b6 c0             	movzx  eax,al
c001f28c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f28f:	eb 1f                	jmp    c001f2b0 <Vm::faultHandler(regs*)+0x656>
c001f291:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f294:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f299:	74 03                	je     c001f29e <Vm::faultHandler(regs*)+0x644>
c001f29b:	ed                   	in     eax,dx
c001f29c:	eb 0d                	jmp    c001f2ab <Vm::faultHandler(regs*)+0x651>
c001f29e:	66 ed                	in     ax,dx
c001f2a0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001f2a3:	0f b7 c0             	movzx  eax,ax
c001f2a6:	66 31 d2             	xor    dx,dx
c001f2a9:	09 d0                	or     eax,edx
c001f2ab:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f2ae:	eb 1a                	jmp    c001f2ca <Vm::faultHandler(regs*)+0x670>
c001f2b0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f2b3:	83 c4 10             	add    esp,0x10
c001f2b6:	eb 15                	jmp    c001f2cd <Vm::faultHandler(regs*)+0x673>
c001f2b8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f2bb:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f2be:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f2c3:	74 03                	je     c001f2c8 <Vm::faultHandler(regs*)+0x66e>
c001f2c5:	ef                   	out    dx,eax
c001f2c6:	eb 02                	jmp    c001f2ca <Vm::faultHandler(regs*)+0x670>
c001f2c8:	66 ef                	out    dx,ax
c001f2ca:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f2cd:	b0 01                	mov    al,0x1
c001f2cf:	eb 56                	jmp    c001f327 <Vm::faultHandler(regs*)+0x6cd>
c001f2d1:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f2d5:	50                   	push   eax
c001f2d6:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f2da:	50                   	push   eax
c001f2db:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f2df:	50                   	push   eax
c001f2e0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f2e4:	50                   	push   eax
c001f2e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f2e9:	50                   	push   eax
c001f2ea:	52                   	push   edx
c001f2eb:	52                   	push   edx
c001f2ec:	68 93 c7 02 c0       	push   0xc002c793
c001f2f1:	e8 bb 35 ff ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c001f2f6:	83 c4 20             	add    esp,0x20
c001f2f9:	83 ec 0c             	sub    esp,0xc
c001f2fc:	6a 60                	push   0x60
c001f2fe:	e8 52 f5 ff ff       	call   c001e855 <Vm::inbv(unsigned short)>
c001f303:	83 c4 10             	add    esp,0x10
c001f306:	3c 1c                	cmp    al,0x1c
c001f308:	74 04                	je     c001f30e <Vm::faultHandler(regs*)+0x6b4>
c001f30a:	3c 5a                	cmp    al,0x5a
c001f30c:	75 eb                	jne    c001f2f9 <Vm::faultHandler(regs*)+0x69f>
c001f30e:	3c 5a                	cmp    al,0x5a
c001f310:	74 04                	je     c001f316 <Vm::faultHandler(regs*)+0x6bc>
c001f312:	3c 1c                	cmp    al,0x1c
c001f314:	75 0f                	jne    c001f325 <Vm::faultHandler(regs*)+0x6cb>
c001f316:	83 ec 0c             	sub    esp,0xc
c001f319:	6a 60                	push   0x60
c001f31b:	e8 35 f5 ff ff       	call   c001e855 <Vm::inbv(unsigned short)>
c001f320:	83 c4 10             	add    esp,0x10
c001f323:	eb e9                	jmp    c001f30e <Vm::faultHandler(regs*)+0x6b4>
c001f325:	31 c0                	xor    eax,eax
c001f327:	83 c4 1c             	add    esp,0x1c
c001f32a:	5b                   	pop    ebx
c001f32b:	5e                   	pop    esi
c001f32c:	5f                   	pop    edi
c001f32d:	5d                   	pop    ebp
c001f32e:	c3                   	ret    

c001f32f <Vm::fpuInternalTo32(unsigned long long)>:
c001f32f:	57                   	push   edi
c001f330:	56                   	push   esi
c001f331:	53                   	push   ebx
c001f332:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f33a:	89 d6                	mov    esi,edx
c001f33c:	89 d7                	mov    edi,edx
c001f33e:	89 c1                	mov    ecx,eax
c001f340:	c1 ef 14             	shr    edi,0x14
c001f343:	89 d3                	mov    ebx,edx
c001f345:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f34b:	31 d2                	xor    edx,edx
c001f34d:	89 f8                	mov    eax,edi
c001f34f:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f355:	bf ff 00 00 00       	mov    edi,0xff
c001f35a:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f35f:	83 d2 ff             	adc    edx,0xffffffff
c001f362:	39 c7                	cmp    edi,eax
c001f364:	bf 00 00 00 00       	mov    edi,0x0
c001f369:	19 d7                	sbb    edi,edx
c001f36b:	72 15                	jb     c001f382 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f36d:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f371:	c1 e0 17             	shl    eax,0x17
c001f374:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f37a:	09 f1                	or     ecx,esi
c001f37c:	09 c1                	or     ecx,eax
c001f37e:	89 cf                	mov    edi,ecx
c001f380:	eb 02                	jmp    c001f384 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f382:	31 ff                	xor    edi,edi
c001f384:	89 f8                	mov    eax,edi
c001f386:	5b                   	pop    ebx
c001f387:	5e                   	pop    esi
c001f388:	5f                   	pop    edi
c001f389:	c3                   	ret    

c001f38a <Vm::fpuInternalTo64(unsigned long long)>:
c001f38a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f38e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f392:	c3                   	ret    

c001f393 <Vm::fpu32ToInternal(unsigned int)>:
c001f393:	57                   	push   edi
c001f394:	31 ff                	xor    edi,edi
c001f396:	56                   	push   esi
c001f397:	53                   	push   ebx
c001f398:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f39c:	89 cb                	mov    ebx,ecx
c001f39e:	89 ce                	mov    esi,ecx
c001f3a0:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f3a6:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f3ac:	c1 e9 17             	shr    ecx,0x17
c001f3af:	89 f0                	mov    eax,esi
c001f3b1:	0f b6 d1             	movzx  edx,cl
c001f3b4:	81 c2 80 03 00 00    	add    edx,0x380
c001f3ba:	89 d1                	mov    ecx,edx
c001f3bc:	89 fa                	mov    edx,edi
c001f3be:	c1 e1 14             	shl    ecx,0x14
c001f3c1:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f3c5:	c1 e0 1d             	shl    eax,0x1d
c001f3c8:	89 d7                	mov    edi,edx
c001f3ca:	89 c6                	mov    esi,eax
c001f3cc:	89 ca                	mov    edx,ecx
c001f3ce:	89 f0                	mov    eax,esi
c001f3d0:	09 fa                	or     edx,edi
c001f3d2:	09 da                	or     edx,ebx
c001f3d4:	5b                   	pop    ebx
c001f3d5:	5e                   	pop    esi
c001f3d6:	5f                   	pop    edi
c001f3d7:	c3                   	ret    

c001f3d8 <Vm::fpu64ToInternal(unsigned long long)>:
c001f3d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f3e0:	c3                   	ret    

c001f3e1 <Vm::fpuFloatToLong(unsigned long long)>:
c001f3e1:	57                   	push   edi
c001f3e2:	31 c0                	xor    eax,eax
c001f3e4:	56                   	push   esi
c001f3e5:	31 d2                	xor    edx,edx
c001f3e7:	53                   	push   ebx
c001f3e8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f3ec:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f3f0:	89 d9                	mov    ecx,ebx
c001f3f2:	c1 e9 14             	shr    ecx,0x14
c001f3f5:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f3fb:	89 cf                	mov    edi,ecx
c001f3fd:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f403:	78 33                	js     c001f438 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f405:	89 d9                	mov    ecx,ebx
c001f407:	89 f0                	mov    eax,esi
c001f409:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f40f:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f415:	89 ca                	mov    edx,ecx
c001f417:	b9 34 00 00 00       	mov    ecx,0x34
c001f41c:	29 f9                	sub    ecx,edi
c001f41e:	0f ad d0             	shrd   eax,edx,cl
c001f421:	d3 fa                	sar    edx,cl
c001f423:	f6 c1 20             	test   cl,0x20
c001f426:	74 05                	je     c001f42d <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f428:	89 d0                	mov    eax,edx
c001f42a:	c1 fa 1f             	sar    edx,0x1f
c001f42d:	85 db                	test   ebx,ebx
c001f42f:	79 07                	jns    c001f438 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f431:	f7 d8                	neg    eax
c001f433:	83 d2 00             	adc    edx,0x0
c001f436:	f7 da                	neg    edx
c001f438:	5b                   	pop    ebx
c001f439:	5e                   	pop    esi
c001f43a:	5f                   	pop    edi
c001f43b:	c3                   	ret    

c001f43c <Vm::fpuULongToFloat(unsigned long long)>:
c001f43c:	57                   	push   edi
c001f43d:	31 c9                	xor    ecx,ecx
c001f43f:	56                   	push   esi
c001f440:	53                   	push   ebx
c001f441:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f445:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f449:	0f ba e7 14          	bt     edi,0x14
c001f44d:	72 07                	jb     c001f456 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f44f:	01 f6                	add    esi,esi
c001f451:	11 ff                	adc    edi,edi
c001f453:	41                   	inc    ecx
c001f454:	eb f3                	jmp    c001f449 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f456:	89 fa                	mov    edx,edi
c001f458:	89 f0                	mov    eax,esi
c001f45a:	bb 33 04 00 00       	mov    ebx,0x433
c001f45f:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f465:	29 cb                	sub    ebx,ecx
c001f467:	89 d9                	mov    ecx,ebx
c001f469:	5b                   	pop    ebx
c001f46a:	c1 e1 14             	shl    ecx,0x14
c001f46d:	5e                   	pop    esi
c001f46e:	09 ca                	or     edx,ecx
c001f470:	5f                   	pop    edi
c001f471:	c3                   	ret    

c001f472 <Vm::fpuLongToFloat(long long)>:
c001f472:	56                   	push   esi
c001f473:	31 c0                	xor    eax,eax
c001f475:	53                   	push   ebx
c001f476:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f47a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f47e:	39 c8                	cmp    eax,ecx
c001f480:	19 d8                	sbb    eax,ebx
c001f482:	7d 04                	jge    c001f488 <Vm::fpuLongToFloat(long long)+0x16>
c001f484:	31 f6                	xor    esi,esi
c001f486:	eb 0c                	jmp    c001f494 <Vm::fpuLongToFloat(long long)+0x22>
c001f488:	f7 d9                	neg    ecx
c001f48a:	be 01 00 00 00       	mov    esi,0x1
c001f48f:	83 d3 00             	adc    ebx,0x0
c001f492:	f7 db                	neg    ebx
c001f494:	31 c0                	xor    eax,eax
c001f496:	0f ba e3 14          	bt     ebx,0x14
c001f49a:	72 07                	jb     c001f4a3 <Vm::fpuLongToFloat(long long)+0x31>
c001f49c:	01 c9                	add    ecx,ecx
c001f49e:	11 db                	adc    ebx,ebx
c001f4a0:	40                   	inc    eax
c001f4a1:	eb f3                	jmp    c001f496 <Vm::fpuLongToFloat(long long)+0x24>
c001f4a3:	ba 33 04 00 00       	mov    edx,0x433
c001f4a8:	29 c2                	sub    edx,eax
c001f4aa:	89 c8                	mov    eax,ecx
c001f4ac:	c1 e2 14             	shl    edx,0x14
c001f4af:	89 d9                	mov    ecx,ebx
c001f4b1:	89 f3                	mov    ebx,esi
c001f4b3:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f4b9:	09 ca                	or     edx,ecx
c001f4bb:	84 db                	test   bl,bl
c001f4bd:	74 06                	je     c001f4c5 <Vm::fpuLongToFloat(long long)+0x53>
c001f4bf:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f4c5:	5b                   	pop    ebx
c001f4c6:	5e                   	pop    esi
c001f4c7:	c3                   	ret    

c001f4c8 <Vm::fpuGet0()>:
c001f4c8:	31 c0                	xor    eax,eax
c001f4ca:	31 d2                	xor    edx,edx
c001f4cc:	c3                   	ret    

c001f4cd <Vm::fpuGet1()>:
c001f4cd:	b8 01 00 00 00       	mov    eax,0x1
c001f4d2:	31 d2                	xor    edx,edx
c001f4d4:	c3                   	ret    

c001f4d5 <Vm::fpuGetPi()>:
c001f4d5:	b8 03 00 00 00       	mov    eax,0x3
c001f4da:	31 d2                	xor    edx,edx
c001f4dc:	c3                   	ret    

c001f4dd <Vm::fpuGetLog2E()>:
c001f4dd:	83 ec 18             	sub    esp,0x18
c001f4e0:	68 f0 c7 02 c0       	push   0xc002c7f0
c001f4e5:	e8 35 ad ff ff       	call   c001a21f <Krnl::panic(char const*)>
c001f4ea:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f4ef:	31 d2                	xor    edx,edx
c001f4f1:	83 c4 1c             	add    esp,0x1c
c001f4f4:	c3                   	ret    

c001f4f5 <Vm::fpuGetLogE2()>:
c001f4f5:	83 ec 18             	sub    esp,0x18
c001f4f8:	68 fc c7 02 c0       	push   0xc002c7fc
c001f4fd:	e8 1d ad ff ff       	call   c001a21f <Krnl::panic(char const*)>
c001f502:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f507:	31 d2                	xor    edx,edx
c001f509:	83 c4 1c             	add    esp,0x1c
c001f50c:	c3                   	ret    

c001f50d <Vm::fpuGetLog210()>:
c001f50d:	83 ec 18             	sub    esp,0x18
c001f510:	68 08 c8 02 c0       	push   0xc002c808
c001f515:	e8 05 ad ff ff       	call   c001a21f <Krnl::panic(char const*)>
c001f51a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f51f:	31 d2                	xor    edx,edx
c001f521:	83 c4 1c             	add    esp,0x1c
c001f524:	c3                   	ret    

c001f525 <Vm::fpuGetLog102()>:
c001f525:	83 ec 18             	sub    esp,0x18
c001f528:	68 15 c8 02 c0       	push   0xc002c815
c001f52d:	e8 ed ac ff ff       	call   c001a21f <Krnl::panic(char const*)>
c001f532:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f537:	31 d2                	xor    edx,edx
c001f539:	83 c4 1c             	add    esp,0x1c
c001f53c:	c3                   	ret    

c001f53d <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f53d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f541:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f545:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f549:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f54d:	0f 92 c0             	setb   al
c001f550:	c3                   	ret    

c001f551 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f551:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f555:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f559:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f55d:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f561:	09 c2                	or     edx,eax
c001f563:	0f 94 c0             	sete   al
c001f566:	c3                   	ret    

c001f567 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f567:	57                   	push   edi
c001f568:	56                   	push   esi
c001f569:	53                   	push   ebx
c001f56a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f56e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f572:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f576:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f57a:	57                   	push   edi
c001f57b:	56                   	push   esi
c001f57c:	53                   	push   ebx
c001f57d:	51                   	push   ecx
c001f57e:	e8 ce ff ff ff       	call   c001f551 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f583:	83 c4 10             	add    esp,0x10
c001f586:	88 c2                	mov    dl,al
c001f588:	31 c0                	xor    eax,eax
c001f58a:	84 d2                	test   dl,dl
c001f58c:	75 0c                	jne    c001f59a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f58e:	57                   	push   edi
c001f58f:	56                   	push   esi
c001f590:	53                   	push   ebx
c001f591:	51                   	push   ecx
c001f592:	e8 a6 ff ff ff       	call   c001f53d <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f597:	83 c4 10             	add    esp,0x10
c001f59a:	83 e0 01             	and    eax,0x1
c001f59d:	5b                   	pop    ebx
c001f59e:	88 c1                	mov    cl,al
c001f5a0:	83 e2 01             	and    edx,0x1
c001f5a3:	a0 a1 f9 02 c0       	mov    al,ds:0xc002f9a1
c001f5a8:	c1 e2 06             	shl    edx,0x6
c001f5ab:	83 e0 ba             	and    eax,0xffffffba
c001f5ae:	5e                   	pop    esi
c001f5af:	09 c8                	or     eax,ecx
c001f5b1:	5f                   	pop    edi
c001f5b2:	09 d0                	or     eax,edx
c001f5b4:	a2 a1 f9 02 c0       	mov    ds:0xc002f9a1,al
c001f5b9:	c3                   	ret    

c001f5ba <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f5ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f5be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f5c2:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f5c6:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f5ca:	c3                   	ret    

c001f5cb <Vm::fpuAbs(unsigned long long)>:
c001f5cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f5d3:	c3                   	ret    

c001f5d4 <Vm::fpuChs(unsigned long long)>:
c001f5d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f5dc:	f7 d8                	neg    eax
c001f5de:	83 d2 00             	adc    edx,0x0
c001f5e1:	f7 da                	neg    edx
c001f5e3:	c3                   	ret    

c001f5e4 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f5e4:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f5e8:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f5ed:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f5f1:	eb c7                	jmp    c001f5ba <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f5f3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f5f3:	53                   	push   ebx
c001f5f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f5f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f5fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f600:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f604:	0f af ca             	imul   ecx,edx
c001f607:	0f af d8             	imul   ebx,eax
c001f60a:	f7 e2                	mul    edx
c001f60c:	01 d9                	add    ecx,ebx
c001f60e:	5b                   	pop    ebx
c001f60f:	01 ca                	add    edx,ecx
c001f611:	c3                   	ret    

c001f612 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f612:	83 ec 0c             	sub    esp,0xc
c001f615:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f619:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f625:	e8 2a 76 00 00       	call   c0026c54 <__udivdi3>
c001f62a:	83 c4 1c             	add    esp,0x1c
c001f62d:	c3                   	ret    

c001f62e <Vm::fpuSquare(unsigned long long)>:
c001f62e:	50                   	push   eax
c001f62f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f633:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f637:	52                   	push   edx
c001f638:	50                   	push   eax
c001f639:	52                   	push   edx
c001f63a:	50                   	push   eax
c001f63b:	e8 b3 ff ff ff       	call   c001f5f3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f640:	83 c4 14             	add    esp,0x14
c001f643:	c3                   	ret    

c001f644 <Vm::fpuGetReg(int)>:
c001f644:	83 ec 0c             	sub    esp,0xc
c001f647:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f64c:	76 10                	jbe    c001f65e <Vm::fpuGetReg(int)+0x1a>
c001f64e:	83 ec 0c             	sub    esp,0xc
c001f651:	68 22 c8 02 c0       	push   0xc002c822
c001f656:	e8 c4 ab ff ff       	call   c001a21f <Krnl::panic(char const*)>
c001f65b:	83 c4 10             	add    esp,0x10
c001f65e:	a0 a1 f9 02 c0       	mov    al,ds:0xc002f9a1
c001f663:	b9 08 00 00 00       	mov    ecx,0x8
c001f668:	c0 e8 03             	shr    al,0x3
c001f66b:	83 e0 07             	and    eax,0x7
c001f66e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f672:	99                   	cdq    
c001f673:	f7 f9                	idiv   ecx
c001f675:	8b 04 d5 a4 f9 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd065c]
c001f67c:	8b 14 d5 a8 f9 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd0658]
c001f683:	83 c4 0c             	add    esp,0xc
c001f686:	c3                   	ret    

c001f687 <Vm::fpuSetReg(int, unsigned long long)>:
c001f687:	57                   	push   edi
c001f688:	56                   	push   esi
c001f689:	52                   	push   edx
c001f68a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f68e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f692:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f697:	76 10                	jbe    c001f6a9 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f699:	83 ec 0c             	sub    esp,0xc
c001f69c:	68 35 c8 02 c0       	push   0xc002c835
c001f6a1:	e8 79 ab ff ff       	call   c001a21f <Krnl::panic(char const*)>
c001f6a6:	83 c4 10             	add    esp,0x10
c001f6a9:	a0 a1 f9 02 c0       	mov    al,ds:0xc002f9a1
c001f6ae:	b9 08 00 00 00       	mov    ecx,0x8
c001f6b3:	c0 e8 03             	shr    al,0x3
c001f6b6:	83 e0 07             	and    eax,0x7
c001f6b9:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f6bd:	99                   	cdq    
c001f6be:	f7 f9                	idiv   ecx
c001f6c0:	89 34 d5 a4 f9 02 c0 	mov    DWORD PTR [edx*8-0x3ffd065c],esi
c001f6c7:	89 3c d5 a8 f9 02 c0 	mov    DWORD PTR [edx*8-0x3ffd0658],edi
c001f6ce:	58                   	pop    eax
c001f6cf:	5e                   	pop    esi
c001f6d0:	5f                   	pop    edi
c001f6d1:	c3                   	ret    

c001f6d2 <Vm::fpuPush(unsigned long long)>:
c001f6d2:	a0 a1 f9 02 c0       	mov    al,ds:0xc002f9a1
c001f6d7:	c0 e8 03             	shr    al,0x3
c001f6da:	83 e0 07             	and    eax,0x7
c001f6dd:	83 c0 07             	add    eax,0x7
c001f6e0:	88 c2                	mov    dl,al
c001f6e2:	83 e0 07             	and    eax,0x7
c001f6e5:	83 e2 07             	and    edx,0x7
c001f6e8:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f6ef:	8a 15 a1 f9 02 c0    	mov    dl,BYTE PTR ds:0xc002f9a1
c001f6f5:	83 e2 c7             	and    edx,0xffffffc7
c001f6f8:	09 ca                	or     edx,ecx
c001f6fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f6fe:	88 15 a1 f9 02 c0    	mov    BYTE PTR ds:0xc002f9a1,dl
c001f704:	89 0c c5 a8 f9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd0658],ecx
c001f70b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f70f:	89 14 c5 a4 f9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd065c],edx
c001f716:	a1 e4 f9 02 c0       	mov    eax,ds:0xc002f9e4
c001f71b:	83 f8 08             	cmp    eax,0x8
c001f71e:	75 08                	jne    c001f728 <Vm::fpuPush(unsigned long long)+0x56>
c001f720:	80 0d a0 f9 02 c0 40 	or     BYTE PTR ds:0xc002f9a0,0x40
c001f727:	c3                   	ret    
c001f728:	40                   	inc    eax
c001f729:	a3 e4 f9 02 c0       	mov    ds:0xc002f9e4,eax
c001f72e:	c3                   	ret    

c001f72f <Vm::fpuPop()>:
c001f72f:	8a 0d a1 f9 02 c0    	mov    cl,BYTE PTR ds:0xc002f9a1
c001f735:	53                   	push   ebx
c001f736:	c0 e9 03             	shr    cl,0x3
c001f739:	8a 1d a1 f9 02 c0    	mov    bl,BYTE PTR ds:0xc002f9a1
c001f73f:	83 e1 07             	and    ecx,0x7
c001f742:	83 e3 c7             	and    ebx,0xffffffc7
c001f745:	8b 04 cd a4 f9 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd065c]
c001f74c:	8b 14 cd a8 f9 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd0658]
c001f753:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f75a:	83 e1 38             	and    ecx,0x38
c001f75d:	09 d9                	or     ecx,ebx
c001f75f:	88 0d a1 f9 02 c0    	mov    BYTE PTR ds:0xc002f9a1,cl
c001f765:	8b 0d e4 f9 02 c0    	mov    ecx,DWORD PTR ds:0xc002f9e4
c001f76b:	85 c9                	test   ecx,ecx
c001f76d:	74 09                	je     c001f778 <Vm::fpuPop()+0x49>
c001f76f:	49                   	dec    ecx
c001f770:	89 0d e4 f9 02 c0    	mov    DWORD PTR ds:0xc002f9e4,ecx
c001f776:	eb 07                	jmp    c001f77f <Vm::fpuPop()+0x50>
c001f778:	80 0d a0 f9 02 c0 40 	or     BYTE PTR ds:0xc002f9a0,0x40
c001f77f:	5b                   	pop    ebx
c001f780:	c3                   	ret    

c001f781 <Vm::x87Handler(regs*)>:
c001f781:	55                   	push   ebp
c001f782:	57                   	push   edi
c001f783:	56                   	push   esi
c001f784:	53                   	push   ebx
c001f785:	83 ec 1c             	sub    esp,0x1c
c001f788:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f78c:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f791:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f794:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f79c:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f7a0:	50                   	push   eax
c001f7a1:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f7a5:	50                   	push   eax
c001f7a6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f7aa:	50                   	push   eax
c001f7ab:	53                   	push   ebx
c001f7ac:	e8 87 a1 ff ff       	call   c0019938 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f7b1:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f7b4:	83 c4 10             	add    esp,0x10
c001f7b7:	89 c6                	mov    esi,eax
c001f7b9:	80 fa d9             	cmp    dl,0xd9
c001f7bc:	0f 85 52 01 00 00    	jne    c001f914 <Vm::x87Handler(regs*)+0x193>
c001f7c2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7c6:	8d 50 20             	lea    edx,[eax+0x20]
c001f7c9:	80 fa 0e             	cmp    dl,0xe
c001f7cc:	0f 87 86 00 00 00    	ja     c001f858 <Vm::x87Handler(regs*)+0xd7>
c001f7d2:	0f b6 d2             	movzx  edx,dl
c001f7d5:	ff 24 95 48 c8 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd37b8]
c001f7dc:	e8 e7 fc ff ff       	call   c001f4c8 <Vm::fpuGet0()>
c001f7e1:	eb 05                	jmp    c001f7e8 <Vm::x87Handler(regs*)+0x67>
c001f7e3:	e8 e5 fc ff ff       	call   c001f4cd <Vm::fpuGet1()>
c001f7e8:	57                   	push   edi
c001f7e9:	57                   	push   edi
c001f7ea:	52                   	push   edx
c001f7eb:	50                   	push   eax
c001f7ec:	e8 e1 fe ff ff       	call   c001f6d2 <Vm::fpuPush(unsigned long long)>
c001f7f1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f7f5:	83 c4 10             	add    esp,0x10
c001f7f8:	b0 01                	mov    al,0x1
c001f7fa:	e9 e3 09 00 00       	jmp    c00201e2 <Vm::x87Handler(regs*)+0xa61>
c001f7ff:	83 ec 0c             	sub    esp,0xc
c001f802:	6a 00                	push   0x0
c001f804:	e8 3b fe ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001f809:	59                   	pop    ecx
c001f80a:	5e                   	pop    esi
c001f80b:	52                   	push   edx
c001f80c:	50                   	push   eax
c001f80d:	e8 c2 fd ff ff       	call   c001f5d4 <Vm::fpuChs(unsigned long long)>
c001f812:	eb 13                	jmp    c001f827 <Vm::x87Handler(regs*)+0xa6>
c001f814:	83 ec 0c             	sub    esp,0xc
c001f817:	6a 00                	push   0x0
c001f819:	e8 26 fe ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001f81e:	5f                   	pop    edi
c001f81f:	5d                   	pop    ebp
c001f820:	52                   	push   edx
c001f821:	50                   	push   eax
c001f822:	e8 a4 fd ff ff       	call   c001f5cb <Vm::fpuAbs(unsigned long long)>
c001f827:	83 c4 0c             	add    esp,0xc
c001f82a:	52                   	push   edx
c001f82b:	50                   	push   eax
c001f82c:	6a 00                	push   0x0
c001f82e:	e8 54 fe ff ff       	call   c001f687 <Vm::fpuSetReg(int, unsigned long long)>
c001f833:	eb bc                	jmp    c001f7f1 <Vm::x87Handler(regs*)+0x70>
c001f835:	e8 d3 fc ff ff       	call   c001f50d <Vm::fpuGetLog210()>
c001f83a:	eb ac                	jmp    c001f7e8 <Vm::x87Handler(regs*)+0x67>
c001f83c:	e8 9c fc ff ff       	call   c001f4dd <Vm::fpuGetLog2E()>
c001f841:	eb a5                	jmp    c001f7e8 <Vm::x87Handler(regs*)+0x67>
c001f843:	e8 8d fc ff ff       	call   c001f4d5 <Vm::fpuGetPi()>
c001f848:	eb 9e                	jmp    c001f7e8 <Vm::x87Handler(regs*)+0x67>
c001f84a:	e8 d6 fc ff ff       	call   c001f525 <Vm::fpuGetLog102()>
c001f84f:	eb 97                	jmp    c001f7e8 <Vm::x87Handler(regs*)+0x67>
c001f851:	e8 9f fc ff ff       	call   c001f4f5 <Vm::fpuGetLogE2()>
c001f856:	eb 90                	jmp    c001f7e8 <Vm::x87Handler(regs*)+0x67>
c001f858:	8d 50 40             	lea    edx,[eax+0x40]
c001f85b:	80 fa 07             	cmp    dl,0x7
c001f85e:	77 15                	ja     c001f875 <Vm::x87Handler(regs*)+0xf4>
c001f860:	83 ec 0c             	sub    esp,0xc
c001f863:	2d c0 00 00 00       	sub    eax,0xc0
c001f868:	50                   	push   eax
c001f869:	e8 d6 fd ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001f86e:	59                   	pop    ecx
c001f86f:	5e                   	pop    esi
c001f870:	e9 75 ff ff ff       	jmp    c001f7ea <Vm::x87Handler(regs*)+0x69>
c001f875:	8d 50 38             	lea    edx,[eax+0x38]
c001f878:	80 fa 07             	cmp    dl,0x7
c001f87b:	77 3c                	ja     c001f8b9 <Vm::x87Handler(regs*)+0x138>
c001f87d:	83 ec 0c             	sub    esp,0xc
c001f880:	2d c8 00 00 00       	sub    eax,0xc8
c001f885:	50                   	push   eax
c001f886:	e8 b9 fd ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001f88b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f892:	89 c6                	mov    esi,eax
c001f894:	89 d7                	mov    edi,edx
c001f896:	e8 a9 fd ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001f89b:	83 c4 0c             	add    esp,0xc
c001f89e:	52                   	push   edx
c001f89f:	50                   	push   eax
c001f8a0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8a4:	2d c8 00 00 00       	sub    eax,0xc8
c001f8a9:	50                   	push   eax
c001f8aa:	e8 d8 fd ff ff       	call   c001f687 <Vm::fpuSetReg(int, unsigned long long)>
c001f8af:	83 c4 0c             	add    esp,0xc
c001f8b2:	57                   	push   edi
c001f8b3:	56                   	push   esi
c001f8b4:	e9 73 ff ff ff       	jmp    c001f82c <Vm::x87Handler(regs*)+0xab>
c001f8b9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f8bd:	84 d2                	test   dl,dl
c001f8bf:	75 0f                	jne    c001f8d0 <Vm::x87Handler(regs*)+0x14f>
c001f8c1:	83 ec 0c             	sub    esp,0xc
c001f8c4:	ff 36                	push   DWORD PTR [esi]
c001f8c6:	e8 c8 fa ff ff       	call   c001f393 <Vm::fpu32ToInternal(unsigned int)>
c001f8cb:	e9 bf 00 00 00       	jmp    c001f98f <Vm::x87Handler(regs*)+0x20e>
c001f8d0:	80 fa 03             	cmp    dl,0x3
c001f8d3:	75 13                	jne    c001f8e8 <Vm::x87Handler(regs*)+0x167>
c001f8d5:	e8 55 fe ff ff       	call   c001f72f <Vm::fpuPop()>
c001f8da:	55                   	push   ebp
c001f8db:	55                   	push   ebp
c001f8dc:	52                   	push   edx
c001f8dd:	50                   	push   eax
c001f8de:	e8 4c fa ff ff       	call   c001f32f <Vm::fpuInternalTo32(unsigned long long)>
c001f8e3:	e9 88 00 00 00       	jmp    c001f970 <Vm::x87Handler(regs*)+0x1ef>
c001f8e8:	80 fa 05             	cmp    dl,0x5
c001f8eb:	75 0e                	jne    c001f8fb <Vm::x87Handler(regs*)+0x17a>
c001f8ed:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f8f0:	66 a3 a2 f9 02 c0    	mov    ds:0xc002f9a2,ax
c001f8f6:	e9 df 00 00 00       	jmp    c001f9da <Vm::x87Handler(regs*)+0x259>
c001f8fb:	31 c0                	xor    eax,eax
c001f8fd:	80 fa 07             	cmp    dl,0x7
c001f900:	0f 85 dc 08 00 00    	jne    c00201e2 <Vm::x87Handler(regs*)+0xa61>
c001f906:	66 a1 a2 f9 02 c0    	mov    ax,ds:0xc002f9a2
c001f90c:	66 89 06             	mov    WORD PTR [esi],ax
c001f90f:	e9 c6 00 00 00       	jmp    c001f9da <Vm::x87Handler(regs*)+0x259>
c001f914:	80 fa d8             	cmp    dl,0xd8
c001f917:	0f 84 c9 00 00 00    	je     c001f9e6 <Vm::x87Handler(regs*)+0x265>
c001f91d:	80 fa dc             	cmp    dl,0xdc
c001f920:	0f 84 0d 02 00 00    	je     c001fb33 <Vm::x87Handler(regs*)+0x3b2>
c001f926:	80 fa de             	cmp    dl,0xde
c001f929:	0f 84 cd 02 00 00    	je     c001fbfc <Vm::x87Handler(regs*)+0x47b>
c001f92f:	80 fa dd             	cmp    dl,0xdd
c001f932:	0f 84 5f 04 00 00    	je     c001fd97 <Vm::x87Handler(regs*)+0x616>
c001f938:	80 fa da             	cmp    dl,0xda
c001f93b:	0f 84 24 05 00 00    	je     c001fe65 <Vm::x87Handler(regs*)+0x6e4>
c001f941:	80 fa df             	cmp    dl,0xdf
c001f944:	0f 84 68 05 00 00    	je     c001feb2 <Vm::x87Handler(regs*)+0x731>
c001f94a:	31 c0                	xor    eax,eax
c001f94c:	80 fa db             	cmp    dl,0xdb
c001f94f:	0f 85 8d 08 00 00    	jne    c00201e2 <Vm::x87Handler(regs*)+0xa61>
c001f955:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f959:	80 fa 03             	cmp    dl,0x3
c001f95c:	0f 85 70 06 00 00    	jne    c001ffd2 <Vm::x87Handler(regs*)+0x851>
c001f962:	e8 c8 fd ff ff       	call   c001f72f <Vm::fpuPop()>
c001f967:	55                   	push   ebp
c001f968:	55                   	push   ebp
c001f969:	52                   	push   edx
c001f96a:	50                   	push   eax
c001f96b:	e8 71 fa ff ff       	call   c001f3e1 <Vm::fpuFloatToLong(unsigned long long)>
c001f970:	83 c4 10             	add    esp,0x10
c001f973:	89 06                	mov    DWORD PTR [esi],eax
c001f975:	eb 63                	jmp    c001f9da <Vm::x87Handler(regs*)+0x259>
c001f977:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f97b:	84 d2                	test   dl,dl
c001f97d:	0f 85 e6 05 00 00    	jne    c001ff69 <Vm::x87Handler(regs*)+0x7e8>
c001f983:	57                   	push   edi
c001f984:	57                   	push   edi
c001f985:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f988:	ff 36                	push   DWORD PTR [esi]
c001f98a:	e8 49 fa ff ff       	call   c001f3d8 <Vm::fpu64ToInternal(unsigned long long)>
c001f98f:	5e                   	pop    esi
c001f990:	5f                   	pop    edi
c001f991:	52                   	push   edx
c001f992:	50                   	push   eax
c001f993:	e8 3a fd ff ff       	call   c001f6d2 <Vm::fpuPush(unsigned long long)>
c001f998:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f99c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f99f:	e9 51 fe ff ff       	jmp    c001f7f5 <Vm::x87Handler(regs*)+0x74>
c001f9a4:	80 fa 03             	cmp    dl,0x3
c001f9a7:	0f 85 d7 06 00 00    	jne    c0020084 <Vm::x87Handler(regs*)+0x903>
c001f9ad:	57                   	push   edi
c001f9ae:	57                   	push   edi
c001f9af:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f9b2:	ff 36                	push   DWORD PTR [esi]
c001f9b4:	e8 1f fa ff ff       	call   c001f3d8 <Vm::fpu64ToInternal(unsigned long long)>
c001f9b9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f9c0:	89 c6                	mov    esi,eax
c001f9c2:	89 d7                	mov    edi,edx
c001f9c4:	e8 7b fc ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001f9c9:	57                   	push   edi
c001f9ca:	56                   	push   esi
c001f9cb:	52                   	push   edx
c001f9cc:	50                   	push   eax
c001f9cd:	e8 95 fb ff ff       	call   c001f567 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f9d2:	83 c4 20             	add    esp,0x20
c001f9d5:	e8 55 fd ff ff       	call   c001f72f <Vm::fpuPop()>
c001f9da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f9de:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f9e1:	e9 12 fe ff ff       	jmp    c001f7f8 <Vm::x87Handler(regs*)+0x77>
c001f9e6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9ea:	8d 50 40             	lea    edx,[eax+0x40]
c001f9ed:	80 fa 07             	cmp    dl,0x7
c001f9f0:	77 29                	ja     c001fa1b <Vm::x87Handler(regs*)+0x29a>
c001f9f2:	83 ec 0c             	sub    esp,0xc
c001f9f5:	2d c0 00 00 00       	sub    eax,0xc0
c001f9fa:	50                   	push   eax
c001f9fb:	e8 44 fc ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fa00:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa07:	89 c6                	mov    esi,eax
c001fa09:	89 d7                	mov    edi,edx
c001fa0b:	e8 34 fc ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fa10:	57                   	push   edi
c001fa11:	56                   	push   esi
c001fa12:	52                   	push   edx
c001fa13:	50                   	push   eax
c001fa14:	e8 a1 fb ff ff       	call   c001f5ba <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fa19:	eb 2f                	jmp    c001fa4a <Vm::x87Handler(regs*)+0x2c9>
c001fa1b:	8d 50 38             	lea    edx,[eax+0x38]
c001fa1e:	80 fa 07             	cmp    dl,0x7
c001fa21:	77 2f                	ja     c001fa52 <Vm::x87Handler(regs*)+0x2d1>
c001fa23:	83 ec 0c             	sub    esp,0xc
c001fa26:	2d c8 00 00 00       	sub    eax,0xc8
c001fa2b:	50                   	push   eax
c001fa2c:	e8 13 fc ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fa31:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa38:	89 c6                	mov    esi,eax
c001fa3a:	89 d7                	mov    edi,edx
c001fa3c:	e8 03 fc ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fa41:	57                   	push   edi
c001fa42:	56                   	push   esi
c001fa43:	52                   	push   edx
c001fa44:	50                   	push   eax
c001fa45:	e8 a9 fb ff ff       	call   c001f5f3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fa4a:	83 c4 1c             	add    esp,0x1c
c001fa4d:	e9 d8 fd ff ff       	jmp    c001f82a <Vm::x87Handler(regs*)+0xa9>
c001fa52:	8d 50 30             	lea    edx,[eax+0x30]
c001fa55:	80 fa 07             	cmp    dl,0x7
c001fa58:	77 0d                	ja     c001fa67 <Vm::x87Handler(regs*)+0x2e6>
c001fa5a:	83 ec 0c             	sub    esp,0xc
c001fa5d:	2d d0 00 00 00       	sub    eax,0xd0
c001fa62:	e9 99 03 00 00       	jmp    c001fe00 <Vm::x87Handler(regs*)+0x67f>
c001fa67:	8d 50 28             	lea    edx,[eax+0x28]
c001fa6a:	80 fa 07             	cmp    dl,0x7
c001fa6d:	77 0d                	ja     c001fa7c <Vm::x87Handler(regs*)+0x2fb>
c001fa6f:	83 ec 0c             	sub    esp,0xc
c001fa72:	2d d8 00 00 00       	sub    eax,0xd8
c001fa77:	e9 c0 03 00 00       	jmp    c001fe3c <Vm::x87Handler(regs*)+0x6bb>
c001fa7c:	8d 50 20             	lea    edx,[eax+0x20]
c001fa7f:	80 fa 07             	cmp    dl,0x7
c001fa82:	77 1b                	ja     c001fa9f <Vm::x87Handler(regs*)+0x31e>
c001fa84:	83 ec 0c             	sub    esp,0xc
c001fa87:	2d e0 00 00 00       	sub    eax,0xe0
c001fa8c:	50                   	push   eax
c001fa8d:	e8 b2 fb ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fa92:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa99:	89 c6                	mov    esi,eax
c001fa9b:	89 d7                	mov    edi,edx
c001fa9d:	eb 22                	jmp    c001fac1 <Vm::x87Handler(regs*)+0x340>
c001fa9f:	8d 50 18             	lea    edx,[eax+0x18]
c001faa2:	80 fa 07             	cmp    dl,0x7
c001faa5:	77 2d                	ja     c001fad4 <Vm::x87Handler(regs*)+0x353>
c001faa7:	83 ec 0c             	sub    esp,0xc
c001faaa:	6a 00                	push   0x0
c001faac:	e8 93 fb ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fab1:	89 c6                	mov    esi,eax
c001fab3:	89 d7                	mov    edi,edx
c001fab5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fab9:	2d e8 00 00 00       	sub    eax,0xe8
c001fabe:	89 04 24             	mov    DWORD PTR [esp],eax
c001fac1:	e8 7e fb ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fac6:	57                   	push   edi
c001fac7:	56                   	push   esi
c001fac8:	52                   	push   edx
c001fac9:	50                   	push   eax
c001faca:	e8 15 fb ff ff       	call   c001f5e4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001facf:	e9 76 ff ff ff       	jmp    c001fa4a <Vm::x87Handler(regs*)+0x2c9>
c001fad4:	8d 50 10             	lea    edx,[eax+0x10]
c001fad7:	80 fa 07             	cmp    dl,0x7
c001fada:	77 1b                	ja     c001faf7 <Vm::x87Handler(regs*)+0x376>
c001fadc:	83 ec 0c             	sub    esp,0xc
c001fadf:	2d f0 00 00 00       	sub    eax,0xf0
c001fae4:	50                   	push   eax
c001fae5:	e8 5a fb ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001faea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001faf1:	89 c6                	mov    esi,eax
c001faf3:	89 d7                	mov    edi,edx
c001faf5:	eb 22                	jmp    c001fb19 <Vm::x87Handler(regs*)+0x398>
c001faf7:	3c f7                	cmp    al,0xf7
c001faf9:	0f 86 d1 03 00 00    	jbe    c001fed0 <Vm::x87Handler(regs*)+0x74f>
c001faff:	83 ec 0c             	sub    esp,0xc
c001fb02:	6a 00                	push   0x0
c001fb04:	e8 3b fb ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fb09:	89 c6                	mov    esi,eax
c001fb0b:	89 d7                	mov    edi,edx
c001fb0d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb11:	2d f8 00 00 00       	sub    eax,0xf8
c001fb16:	89 04 24             	mov    DWORD PTR [esp],eax
c001fb19:	e8 26 fb ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fb1e:	57                   	push   edi
c001fb1f:	56                   	push   esi
c001fb20:	52                   	push   edx
c001fb21:	50                   	push   eax
c001fb22:	e8 eb fa ff ff       	call   c001f612 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fb27:	83 c4 1c             	add    esp,0x1c
c001fb2a:	52                   	push   edx
c001fb2b:	50                   	push   eax
c001fb2c:	6a 00                	push   0x0
c001fb2e:	e9 51 02 00 00       	jmp    c001fd84 <Vm::x87Handler(regs*)+0x603>
c001fb33:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb37:	8d 50 40             	lea    edx,[eax+0x40]
c001fb3a:	80 fa 07             	cmp    dl,0x7
c001fb3d:	77 37                	ja     c001fb76 <Vm::x87Handler(regs*)+0x3f5>
c001fb3f:	83 ec 0c             	sub    esp,0xc
c001fb42:	2d c0 00 00 00       	sub    eax,0xc0
c001fb47:	50                   	push   eax
c001fb48:	e8 f7 fa ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fb4d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb54:	89 c6                	mov    esi,eax
c001fb56:	89 d7                	mov    edi,edx
c001fb58:	e8 e7 fa ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fb5d:	57                   	push   edi
c001fb5e:	56                   	push   esi
c001fb5f:	52                   	push   edx
c001fb60:	50                   	push   eax
c001fb61:	e8 54 fa ff ff       	call   c001f5ba <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fb66:	83 c4 1c             	add    esp,0x1c
c001fb69:	52                   	push   edx
c001fb6a:	50                   	push   eax
c001fb6b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb6f:	2d c0 00 00 00       	sub    eax,0xc0
c001fb74:	eb 3d                	jmp    c001fbb3 <Vm::x87Handler(regs*)+0x432>
c001fb76:	8d 50 38             	lea    edx,[eax+0x38]
c001fb79:	80 fa 07             	cmp    dl,0x7
c001fb7c:	77 3b                	ja     c001fbb9 <Vm::x87Handler(regs*)+0x438>
c001fb7e:	83 ec 0c             	sub    esp,0xc
c001fb81:	2d c8 00 00 00       	sub    eax,0xc8
c001fb86:	50                   	push   eax
c001fb87:	e8 b8 fa ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fb8c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb93:	89 c6                	mov    esi,eax
c001fb95:	89 d7                	mov    edi,edx
c001fb97:	e8 a8 fa ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fb9c:	57                   	push   edi
c001fb9d:	56                   	push   esi
c001fb9e:	52                   	push   edx
c001fb9f:	50                   	push   eax
c001fba0:	e8 4e fa ff ff       	call   c001f5f3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fba5:	83 c4 1c             	add    esp,0x1c
c001fba8:	52                   	push   edx
c001fba9:	50                   	push   eax
c001fbaa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbae:	2d c8 00 00 00       	sub    eax,0xc8
c001fbb3:	50                   	push   eax
c001fbb4:	e9 75 fc ff ff       	jmp    c001f82e <Vm::x87Handler(regs*)+0xad>
c001fbb9:	83 c0 18             	add    eax,0x18
c001fbbc:	3c 07                	cmp    al,0x7
c001fbbe:	0f 87 3b 04 00 00    	ja     c001ffff <Vm::x87Handler(regs*)+0x87e>
c001fbc4:	83 ec 0c             	sub    esp,0xc
c001fbc7:	6a 00                	push   0x0
c001fbc9:	e8 76 fa ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fbce:	89 c6                	mov    esi,eax
c001fbd0:	89 d7                	mov    edi,edx
c001fbd2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbd6:	2d e8 00 00 00       	sub    eax,0xe8
c001fbdb:	89 04 24             	mov    DWORD PTR [esp],eax
c001fbde:	e8 61 fa ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fbe3:	57                   	push   edi
c001fbe4:	56                   	push   esi
c001fbe5:	52                   	push   edx
c001fbe6:	50                   	push   eax
c001fbe7:	e8 f8 f9 ff ff       	call   c001f5e4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fbec:	83 c4 1c             	add    esp,0x1c
c001fbef:	52                   	push   edx
c001fbf0:	50                   	push   eax
c001fbf1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbf5:	2d e8 00 00 00       	sub    eax,0xe8
c001fbfa:	eb b7                	jmp    c001fbb3 <Vm::x87Handler(regs*)+0x432>
c001fbfc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc00:	8d 50 40             	lea    edx,[eax+0x40]
c001fc03:	80 fa 07             	cmp    dl,0x7
c001fc06:	77 3a                	ja     c001fc42 <Vm::x87Handler(regs*)+0x4c1>
c001fc08:	83 ec 0c             	sub    esp,0xc
c001fc0b:	2d c0 00 00 00       	sub    eax,0xc0
c001fc10:	50                   	push   eax
c001fc11:	e8 2e fa ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fc16:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc1d:	89 c6                	mov    esi,eax
c001fc1f:	89 d7                	mov    edi,edx
c001fc21:	e8 1e fa ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fc26:	57                   	push   edi
c001fc27:	56                   	push   esi
c001fc28:	52                   	push   edx
c001fc29:	50                   	push   eax
c001fc2a:	e8 8b f9 ff ff       	call   c001f5ba <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fc2f:	83 c4 1c             	add    esp,0x1c
c001fc32:	52                   	push   edx
c001fc33:	50                   	push   eax
c001fc34:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc38:	2d c0 00 00 00       	sub    eax,0xc0
c001fc3d:	e9 9e 01 00 00       	jmp    c001fde0 <Vm::x87Handler(regs*)+0x65f>
c001fc42:	8d 50 20             	lea    edx,[eax+0x20]
c001fc45:	80 fa 07             	cmp    dl,0x7
c001fc48:	77 3a                	ja     c001fc84 <Vm::x87Handler(regs*)+0x503>
c001fc4a:	83 ec 0c             	sub    esp,0xc
c001fc4d:	2d e0 00 00 00       	sub    eax,0xe0
c001fc52:	50                   	push   eax
c001fc53:	e8 ec f9 ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fc58:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc5f:	89 c6                	mov    esi,eax
c001fc61:	89 d7                	mov    edi,edx
c001fc63:	e8 dc f9 ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fc68:	57                   	push   edi
c001fc69:	56                   	push   esi
c001fc6a:	52                   	push   edx
c001fc6b:	50                   	push   eax
c001fc6c:	e8 73 f9 ff ff       	call   c001f5e4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fc71:	83 c4 1c             	add    esp,0x1c
c001fc74:	52                   	push   edx
c001fc75:	50                   	push   eax
c001fc76:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc7a:	2d e0 00 00 00       	sub    eax,0xe0
c001fc7f:	e9 5c 01 00 00       	jmp    c001fde0 <Vm::x87Handler(regs*)+0x65f>
c001fc84:	8d 50 18             	lea    edx,[eax+0x18]
c001fc87:	80 fa 07             	cmp    dl,0x7
c001fc8a:	77 3b                	ja     c001fcc7 <Vm::x87Handler(regs*)+0x546>
c001fc8c:	83 ec 0c             	sub    esp,0xc
c001fc8f:	6a 00                	push   0x0
c001fc91:	e8 ae f9 ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fc96:	89 c6                	mov    esi,eax
c001fc98:	89 d7                	mov    edi,edx
c001fc9a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc9e:	2d e8 00 00 00       	sub    eax,0xe8
c001fca3:	89 04 24             	mov    DWORD PTR [esp],eax
c001fca6:	e8 99 f9 ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fcab:	57                   	push   edi
c001fcac:	56                   	push   esi
c001fcad:	52                   	push   edx
c001fcae:	50                   	push   eax
c001fcaf:	e8 30 f9 ff ff       	call   c001f5e4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fcb4:	83 c4 1c             	add    esp,0x1c
c001fcb7:	52                   	push   edx
c001fcb8:	50                   	push   eax
c001fcb9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcbd:	2d e8 00 00 00       	sub    eax,0xe8
c001fcc2:	e9 19 01 00 00       	jmp    c001fde0 <Vm::x87Handler(regs*)+0x65f>
c001fcc7:	8d 50 38             	lea    edx,[eax+0x38]
c001fcca:	80 fa 07             	cmp    dl,0x7
c001fccd:	77 37                	ja     c001fd06 <Vm::x87Handler(regs*)+0x585>
c001fccf:	83 ec 0c             	sub    esp,0xc
c001fcd2:	2d c8 00 00 00       	sub    eax,0xc8
c001fcd7:	50                   	push   eax
c001fcd8:	e8 67 f9 ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fcdd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fce4:	89 c6                	mov    esi,eax
c001fce6:	89 d7                	mov    edi,edx
c001fce8:	e8 57 f9 ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fced:	57                   	push   edi
c001fcee:	56                   	push   esi
c001fcef:	52                   	push   edx
c001fcf0:	50                   	push   eax
c001fcf1:	e8 fd f8 ff ff       	call   c001f5f3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fcf6:	83 c4 1c             	add    esp,0x1c
c001fcf9:	52                   	push   edx
c001fcfa:	50                   	push   eax
c001fcfb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcff:	2d c8 00 00 00       	sub    eax,0xc8
c001fd04:	eb 7d                	jmp    c001fd83 <Vm::x87Handler(regs*)+0x602>
c001fd06:	3c f7                	cmp    al,0xf7
c001fd08:	76 38                	jbe    c001fd42 <Vm::x87Handler(regs*)+0x5c1>
c001fd0a:	83 ec 0c             	sub    esp,0xc
c001fd0d:	6a 00                	push   0x0
c001fd0f:	e8 30 f9 ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fd14:	89 c6                	mov    esi,eax
c001fd16:	89 d7                	mov    edi,edx
c001fd18:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd1c:	2d f8 00 00 00       	sub    eax,0xf8
c001fd21:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd24:	e8 1b f9 ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fd29:	57                   	push   edi
c001fd2a:	56                   	push   esi
c001fd2b:	52                   	push   edx
c001fd2c:	50                   	push   eax
c001fd2d:	e8 e0 f8 ff ff       	call   c001f612 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fd32:	83 c4 1c             	add    esp,0x1c
c001fd35:	52                   	push   edx
c001fd36:	50                   	push   eax
c001fd37:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd3b:	2d f8 00 00 00       	sub    eax,0xf8
c001fd40:	eb 41                	jmp    c001fd83 <Vm::x87Handler(regs*)+0x602>
c001fd42:	8d 50 10             	lea    edx,[eax+0x10]
c001fd45:	80 fa 07             	cmp    dl,0x7
c001fd48:	0f 87 5a 01 00 00    	ja     c001fea8 <Vm::x87Handler(regs*)+0x727>
c001fd4e:	83 ec 0c             	sub    esp,0xc
c001fd51:	2d f0 00 00 00       	sub    eax,0xf0
c001fd56:	50                   	push   eax
c001fd57:	e8 e8 f8 ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fd5c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd63:	89 c6                	mov    esi,eax
c001fd65:	89 d7                	mov    edi,edx
c001fd67:	e8 d8 f8 ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fd6c:	57                   	push   edi
c001fd6d:	56                   	push   esi
c001fd6e:	52                   	push   edx
c001fd6f:	50                   	push   eax
c001fd70:	e8 9d f8 ff ff       	call   c001f612 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fd75:	83 c4 1c             	add    esp,0x1c
c001fd78:	52                   	push   edx
c001fd79:	50                   	push   eax
c001fd7a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd7e:	2d f0 00 00 00       	sub    eax,0xf0
c001fd83:	50                   	push   eax
c001fd84:	e8 fe f8 ff ff       	call   c001f687 <Vm::fpuSetReg(int, unsigned long long)>
c001fd89:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fd8d:	e8 9d f9 ff ff       	call   c001f72f <Vm::fpuPop()>
c001fd92:	e9 5e fa ff ff       	jmp    c001f7f5 <Vm::x87Handler(regs*)+0x74>
c001fd97:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd9b:	8d 50 30             	lea    edx,[eax+0x30]
c001fd9e:	80 fa 07             	cmp    dl,0x7
c001fda1:	77 1d                	ja     c001fdc0 <Vm::x87Handler(regs*)+0x63f>
c001fda3:	83 ec 0c             	sub    esp,0xc
c001fda6:	6a 00                	push   0x0
c001fda8:	e8 97 f8 ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fdad:	83 c4 0c             	add    esp,0xc
c001fdb0:	52                   	push   edx
c001fdb1:	50                   	push   eax
c001fdb2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdb6:	2d d0 00 00 00       	sub    eax,0xd0
c001fdbb:	e9 f3 fd ff ff       	jmp    c001fbb3 <Vm::x87Handler(regs*)+0x432>
c001fdc0:	8d 50 28             	lea    edx,[eax+0x28]
c001fdc3:	80 fa 07             	cmp    dl,0x7
c001fdc6:	77 28                	ja     c001fdf0 <Vm::x87Handler(regs*)+0x66f>
c001fdc8:	83 ec 0c             	sub    esp,0xc
c001fdcb:	6a 00                	push   0x0
c001fdcd:	e8 72 f8 ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fdd2:	83 c4 0c             	add    esp,0xc
c001fdd5:	52                   	push   edx
c001fdd6:	50                   	push   eax
c001fdd7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fddb:	2d d8 00 00 00       	sub    eax,0xd8
c001fde0:	50                   	push   eax
c001fde1:	e8 a1 f8 ff ff       	call   c001f687 <Vm::fpuSetReg(int, unsigned long long)>
c001fde6:	e8 44 f9 ff ff       	call   c001f72f <Vm::fpuPop()>
c001fdeb:	e9 01 fa ff ff       	jmp    c001f7f1 <Vm::x87Handler(regs*)+0x70>
c001fdf0:	8d 50 20             	lea    edx,[eax+0x20]
c001fdf3:	80 fa 07             	cmp    dl,0x7
c001fdf6:	77 30                	ja     c001fe28 <Vm::x87Handler(regs*)+0x6a7>
c001fdf8:	83 ec 0c             	sub    esp,0xc
c001fdfb:	2d e0 00 00 00       	sub    eax,0xe0
c001fe00:	50                   	push   eax
c001fe01:	e8 3e f8 ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fe06:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe0d:	89 c6                	mov    esi,eax
c001fe0f:	89 d7                	mov    edi,edx
c001fe11:	e8 2e f8 ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fe16:	57                   	push   edi
c001fe17:	56                   	push   esi
c001fe18:	52                   	push   edx
c001fe19:	50                   	push   eax
c001fe1a:	e8 48 f7 ff ff       	call   c001f567 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fe1f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fe23:	e9 54 02 00 00       	jmp    c002007c <Vm::x87Handler(regs*)+0x8fb>
c001fe28:	8d 50 18             	lea    edx,[eax+0x18]
c001fe2b:	80 fa 07             	cmp    dl,0x7
c001fe2e:	0f 87 43 fb ff ff    	ja     c001f977 <Vm::x87Handler(regs*)+0x1f6>
c001fe34:	83 ec 0c             	sub    esp,0xc
c001fe37:	2d e8 00 00 00       	sub    eax,0xe8
c001fe3c:	50                   	push   eax
c001fe3d:	e8 02 f8 ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fe42:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe49:	89 c6                	mov    esi,eax
c001fe4b:	89 d7                	mov    edi,edx
c001fe4d:	e8 f2 f7 ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fe52:	57                   	push   edi
c001fe53:	56                   	push   esi
c001fe54:	52                   	push   edx
c001fe55:	50                   	push   eax
c001fe56:	e8 0c f7 ff ff       	call   c001f567 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fe5b:	83 c4 20             	add    esp,0x20
c001fe5e:	e8 cc f8 ff ff       	call   c001f72f <Vm::fpuPop()>
c001fe63:	eb 62                	jmp    c001fec7 <Vm::x87Handler(regs*)+0x746>
c001fe65:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001fe69:	0f 85 0f 01 00 00    	jne    c001ff7e <Vm::x87Handler(regs*)+0x7fd>
c001fe6f:	83 ec 0c             	sub    esp,0xc
c001fe72:	6a 01                	push   0x1
c001fe74:	e8 cb f7 ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fe79:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe80:	89 c6                	mov    esi,eax
c001fe82:	89 d7                	mov    edi,edx
c001fe84:	e8 bb f7 ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fe89:	57                   	push   edi
c001fe8a:	56                   	push   esi
c001fe8b:	52                   	push   edx
c001fe8c:	50                   	push   eax
c001fe8d:	e8 d5 f6 ff ff       	call   c001f567 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fe92:	83 c4 20             	add    esp,0x20
c001fe95:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fe99:	e8 91 f8 ff ff       	call   c001f72f <Vm::fpuPop()>
c001fe9e:	e8 8c f8 ff ff       	call   c001f72f <Vm::fpuPop()>
c001fea3:	e9 50 f9 ff ff       	jmp    c001f7f8 <Vm::x87Handler(regs*)+0x77>
c001fea8:	3c d9                	cmp    al,0xd9
c001feaa:	0f 85 b5 02 00 00    	jne    c0020165 <Vm::x87Handler(regs*)+0x9e4>
c001feb0:	eb bd                	jmp    c001fe6f <Vm::x87Handler(regs*)+0x6ee>
c001feb2:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001feb6:	0f 85 ea 02 00 00    	jne    c00201a6 <Vm::x87Handler(regs*)+0xa25>
c001febc:	0f b7 05 a0 f9 02 c0 	movzx  eax,WORD PTR ds:0xc002f9a0
c001fec3:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001fec7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fecb:	e9 28 f9 ff ff       	jmp    c001f7f8 <Vm::x87Handler(regs*)+0x77>
c001fed0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fed4:	84 d2                	test   dl,dl
c001fed6:	75 0f                	jne    c001fee7 <Vm::x87Handler(regs*)+0x766>
c001fed8:	83 ec 0c             	sub    esp,0xc
c001fedb:	ff 36                	push   DWORD PTR [esi]
c001fedd:	e8 b1 f4 ff ff       	call   c001f393 <Vm::fpu32ToInternal(unsigned int)>
c001fee2:	e9 2c 01 00 00       	jmp    c0020013 <Vm::x87Handler(regs*)+0x892>
c001fee7:	80 fa 01             	cmp    dl,0x1
c001feea:	75 0f                	jne    c001fefb <Vm::x87Handler(regs*)+0x77a>
c001feec:	83 ec 0c             	sub    esp,0xc
c001feef:	ff 36                	push   DWORD PTR [esi]
c001fef1:	e8 9d f4 ff ff       	call   c001f393 <Vm::fpu32ToInternal(unsigned int)>
c001fef6:	e9 81 02 00 00       	jmp    c002017c <Vm::x87Handler(regs*)+0x9fb>
c001fefb:	80 fa 04             	cmp    dl,0x4
c001fefe:	75 0f                	jne    c001ff0f <Vm::x87Handler(regs*)+0x78e>
c001ff00:	83 ec 0c             	sub    esp,0xc
c001ff03:	ff 36                	push   DWORD PTR [esi]
c001ff05:	e8 89 f4 ff ff       	call   c001f393 <Vm::fpu32ToInternal(unsigned int)>
c001ff0a:	e9 86 01 00 00       	jmp    c0020095 <Vm::x87Handler(regs*)+0x914>
c001ff0f:	80 fa 05             	cmp    dl,0x5
c001ff12:	75 1b                	jne    c001ff2f <Vm::x87Handler(regs*)+0x7ae>
c001ff14:	83 ec 0c             	sub    esp,0xc
c001ff17:	6a 00                	push   0x0
c001ff19:	e8 26 f7 ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001ff1e:	89 c7                	mov    edi,eax
c001ff20:	89 d5                	mov    ebp,edx
c001ff22:	58                   	pop    eax
c001ff23:	ff 36                	push   DWORD PTR [esi]
c001ff25:	e8 69 f4 ff ff       	call   c001f393 <Vm::fpu32ToInternal(unsigned int)>
c001ff2a:	e9 a3 01 00 00       	jmp    c00200d2 <Vm::x87Handler(regs*)+0x951>
c001ff2f:	80 fa 06             	cmp    dl,0x6
c001ff32:	75 0f                	jne    c001ff43 <Vm::x87Handler(regs*)+0x7c2>
c001ff34:	83 ec 0c             	sub    esp,0xc
c001ff37:	ff 36                	push   DWORD PTR [esi]
c001ff39:	e8 55 f4 ff ff       	call   c001f393 <Vm::fpu32ToInternal(unsigned int)>
c001ff3e:	e9 ae 01 00 00       	jmp    c00200f1 <Vm::x87Handler(regs*)+0x970>
c001ff43:	31 c0                	xor    eax,eax
c001ff45:	80 fa 07             	cmp    dl,0x7
c001ff48:	0f 85 94 02 00 00    	jne    c00201e2 <Vm::x87Handler(regs*)+0xa61>
c001ff4e:	83 ec 0c             	sub    esp,0xc
c001ff51:	6a 00                	push   0x0
c001ff53:	e8 ec f6 ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001ff58:	89 c7                	mov    edi,eax
c001ff5a:	89 d5                	mov    ebp,edx
c001ff5c:	58                   	pop    eax
c001ff5d:	ff 36                	push   DWORD PTR [esi]
c001ff5f:	e8 2f f4 ff ff       	call   c001f393 <Vm::fpu32ToInternal(unsigned int)>
c001ff64:	e9 cb 01 00 00       	jmp    c0020134 <Vm::x87Handler(regs*)+0x9b3>
c001ff69:	80 fa 03             	cmp    dl,0x3
c001ff6c:	0f 85 d3 01 00 00    	jne    c0020145 <Vm::x87Handler(regs*)+0x9c4>
c001ff72:	e8 b8 f7 ff ff       	call   c001f72f <Vm::fpuPop()>
c001ff77:	51                   	push   ecx
c001ff78:	51                   	push   ecx
c001ff79:	e9 de 01 00 00       	jmp    c002015c <Vm::x87Handler(regs*)+0x9db>
c001ff7e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ff82:	80 fa 01             	cmp    dl,0x1
c001ff85:	75 09                	jne    c001ff90 <Vm::x87Handler(regs*)+0x80f>
c001ff87:	57                   	push   edi
c001ff88:	57                   	push   edi
c001ff89:	8b 06                	mov    eax,DWORD PTR [esi]
c001ff8b:	e9 e3 01 00 00       	jmp    c0020173 <Vm::x87Handler(regs*)+0x9f2>
c001ff90:	80 fa 04             	cmp    dl,0x4
c001ff93:	75 12                	jne    c001ffa7 <Vm::x87Handler(regs*)+0x826>
c001ff95:	31 d2                	xor    edx,edx
c001ff97:	51                   	push   ecx
c001ff98:	51                   	push   ecx
c001ff99:	8b 06                	mov    eax,DWORD PTR [esi]
c001ff9b:	52                   	push   edx
c001ff9c:	50                   	push   eax
c001ff9d:	e8 d0 f4 ff ff       	call   c001f472 <Vm::fpuLongToFloat(long long)>
c001ffa2:	e9 ee 00 00 00       	jmp    c0020095 <Vm::x87Handler(regs*)+0x914>
c001ffa7:	31 c0                	xor    eax,eax
c001ffa9:	80 fa 07             	cmp    dl,0x7
c001ffac:	0f 85 30 02 00 00    	jne    c00201e2 <Vm::x87Handler(regs*)+0xa61>
c001ffb2:	83 ec 0c             	sub    esp,0xc
c001ffb5:	6a 00                	push   0x0
c001ffb7:	e8 88 f6 ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001ffbc:	89 c7                	mov    edi,eax
c001ffbe:	89 d5                	mov    ebp,edx
c001ffc0:	58                   	pop    eax
c001ffc1:	8b 06                	mov    eax,DWORD PTR [esi]
c001ffc3:	5a                   	pop    edx
c001ffc4:	31 d2                	xor    edx,edx
c001ffc6:	52                   	push   edx
c001ffc7:	50                   	push   eax
c001ffc8:	e8 a5 f4 ff ff       	call   c001f472 <Vm::fpuLongToFloat(long long)>
c001ffcd:	e9 62 01 00 00       	jmp    c0020134 <Vm::x87Handler(regs*)+0x9b3>
c001ffd2:	84 d2                	test   dl,dl
c001ffd4:	75 0d                	jne    c001ffe3 <Vm::x87Handler(regs*)+0x862>
c001ffd6:	31 d2                	xor    edx,edx
c001ffd8:	55                   	push   ebp
c001ffd9:	55                   	push   ebp
c001ffda:	8b 06                	mov    eax,DWORD PTR [esi]
c001ffdc:	52                   	push   edx
c001ffdd:	50                   	push   eax
c001ffde:	e9 d3 01 00 00       	jmp    c00201b6 <Vm::x87Handler(regs*)+0xa35>
c001ffe3:	31 c0                	xor    eax,eax
c001ffe5:	80 fa 02             	cmp    dl,0x2
c001ffe8:	0f 85 f4 01 00 00    	jne    c00201e2 <Vm::x87Handler(regs*)+0xa61>
c001ffee:	83 ec 0c             	sub    esp,0xc
c001fff1:	6a 00                	push   0x0
c001fff3:	e8 4c f6 ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c001fff8:	59                   	pop    ecx
c001fff9:	5f                   	pop    edi
c001fffa:	e9 6a f9 ff ff       	jmp    c001f969 <Vm::x87Handler(regs*)+0x1e8>
c001ffff:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020003:	84 d2                	test   dl,dl
c0020005:	75 2a                	jne    c0020031 <Vm::x87Handler(regs*)+0x8b0>
c0020007:	50                   	push   eax
c0020008:	50                   	push   eax
c0020009:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002000c:	ff 36                	push   DWORD PTR [esi]
c002000e:	e8 c5 f3 ff ff       	call   c001f3d8 <Vm::fpu64ToInternal(unsigned long long)>
c0020013:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002001a:	89 c6                	mov    esi,eax
c002001c:	89 d7                	mov    edi,edx
c002001e:	e8 21 f6 ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c0020023:	57                   	push   edi
c0020024:	56                   	push   esi
c0020025:	52                   	push   edx
c0020026:	50                   	push   eax
c0020027:	e8 8e f5 ff ff       	call   c001f5ba <Vm::fpuAdd(unsigned long long, unsigned long long)>
c002002c:	e9 64 01 00 00       	jmp    c0020195 <Vm::x87Handler(regs*)+0xa14>
c0020031:	80 fa 01             	cmp    dl,0x1
c0020034:	75 11                	jne    c0020047 <Vm::x87Handler(regs*)+0x8c6>
c0020036:	50                   	push   eax
c0020037:	50                   	push   eax
c0020038:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002003b:	ff 36                	push   DWORD PTR [esi]
c002003d:	e8 96 f3 ff ff       	call   c001f3d8 <Vm::fpu64ToInternal(unsigned long long)>
c0020042:	e9 35 01 00 00       	jmp    c002017c <Vm::x87Handler(regs*)+0x9fb>
c0020047:	80 fa 02             	cmp    dl,0x2
c002004a:	0f 85 54 f9 ff ff    	jne    c001f9a4 <Vm::x87Handler(regs*)+0x223>
c0020050:	55                   	push   ebp
c0020051:	55                   	push   ebp
c0020052:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020055:	ff 36                	push   DWORD PTR [esi]
c0020057:	e8 7c f3 ff ff       	call   c001f3d8 <Vm::fpu64ToInternal(unsigned long long)>
c002005c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020063:	89 c6                	mov    esi,eax
c0020065:	89 d7                	mov    edi,edx
c0020067:	e8 d8 f5 ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c002006c:	57                   	push   edi
c002006d:	56                   	push   esi
c002006e:	52                   	push   edx
c002006f:	50                   	push   eax
c0020070:	e8 f2 f4 ff ff       	call   c001f567 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020075:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020079:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c002007c:	83 c4 20             	add    esp,0x20
c002007f:	e9 74 f7 ff ff       	jmp    c001f7f8 <Vm::x87Handler(regs*)+0x77>
c0020084:	80 fa 04             	cmp    dl,0x4
c0020087:	75 2a                	jne    c00200b3 <Vm::x87Handler(regs*)+0x932>
c0020089:	51                   	push   ecx
c002008a:	51                   	push   ecx
c002008b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002008e:	ff 36                	push   DWORD PTR [esi]
c0020090:	e8 43 f3 ff ff       	call   c001f3d8 <Vm::fpu64ToInternal(unsigned long long)>
c0020095:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002009c:	89 c6                	mov    esi,eax
c002009e:	89 d7                	mov    edi,edx
c00200a0:	e8 9f f5 ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c00200a5:	57                   	push   edi
c00200a6:	56                   	push   esi
c00200a7:	52                   	push   edx
c00200a8:	50                   	push   eax
c00200a9:	e8 36 f5 ff ff       	call   c001f5e4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00200ae:	e9 e2 00 00 00       	jmp    c0020195 <Vm::x87Handler(regs*)+0xa14>
c00200b3:	80 fa 05             	cmp    dl,0x5
c00200b6:	75 28                	jne    c00200e0 <Vm::x87Handler(regs*)+0x95f>
c00200b8:	83 ec 0c             	sub    esp,0xc
c00200bb:	6a 00                	push   0x0
c00200bd:	e8 82 f5 ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c00200c2:	89 c7                	mov    edi,eax
c00200c4:	89 d5                	mov    ebp,edx
c00200c6:	58                   	pop    eax
c00200c7:	5a                   	pop    edx
c00200c8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00200cb:	ff 36                	push   DWORD PTR [esi]
c00200cd:	e8 06 f3 ff ff       	call   c001f3d8 <Vm::fpu64ToInternal(unsigned long long)>
c00200d2:	83 c4 10             	add    esp,0x10
c00200d5:	55                   	push   ebp
c00200d6:	57                   	push   edi
c00200d7:	52                   	push   edx
c00200d8:	50                   	push   eax
c00200d9:	e8 06 f5 ff ff       	call   c001f5e4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00200de:	eb 60                	jmp    c0020140 <Vm::x87Handler(regs*)+0x9bf>
c00200e0:	80 fa 06             	cmp    dl,0x6
c00200e3:	75 2a                	jne    c002010f <Vm::x87Handler(regs*)+0x98e>
c00200e5:	51                   	push   ecx
c00200e6:	51                   	push   ecx
c00200e7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00200ea:	ff 36                	push   DWORD PTR [esi]
c00200ec:	e8 e7 f2 ff ff       	call   c001f3d8 <Vm::fpu64ToInternal(unsigned long long)>
c00200f1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200f8:	89 c6                	mov    esi,eax
c00200fa:	89 d7                	mov    edi,edx
c00200fc:	e8 43 f5 ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c0020101:	57                   	push   edi
c0020102:	56                   	push   esi
c0020103:	52                   	push   edx
c0020104:	50                   	push   eax
c0020105:	e8 08 f5 ff ff       	call   c001f612 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002010a:	e9 86 00 00 00       	jmp    c0020195 <Vm::x87Handler(regs*)+0xa14>
c002010f:	31 c0                	xor    eax,eax
c0020111:	80 fa 07             	cmp    dl,0x7
c0020114:	0f 85 c8 00 00 00    	jne    c00201e2 <Vm::x87Handler(regs*)+0xa61>
c002011a:	83 ec 0c             	sub    esp,0xc
c002011d:	6a 00                	push   0x0
c002011f:	e8 20 f5 ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c0020124:	89 c7                	mov    edi,eax
c0020126:	89 d5                	mov    ebp,edx
c0020128:	58                   	pop    eax
c0020129:	5a                   	pop    edx
c002012a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002012d:	ff 36                	push   DWORD PTR [esi]
c002012f:	e8 a4 f2 ff ff       	call   c001f3d8 <Vm::fpu64ToInternal(unsigned long long)>
c0020134:	83 c4 10             	add    esp,0x10
c0020137:	55                   	push   ebp
c0020138:	57                   	push   edi
c0020139:	52                   	push   edx
c002013a:	50                   	push   eax
c002013b:	e8 d2 f4 ff ff       	call   c001f612 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020140:	83 c4 0c             	add    esp,0xc
c0020143:	eb 53                	jmp    c0020198 <Vm::x87Handler(regs*)+0xa17>
c0020145:	31 c0                	xor    eax,eax
c0020147:	80 fa 02             	cmp    dl,0x2
c002014a:	0f 85 92 00 00 00    	jne    c00201e2 <Vm::x87Handler(regs*)+0xa61>
c0020150:	83 ec 0c             	sub    esp,0xc
c0020153:	6a 00                	push   0x0
c0020155:	e8 ea f4 ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c002015a:	59                   	pop    ecx
c002015b:	5f                   	pop    edi
c002015c:	52                   	push   edx
c002015d:	50                   	push   eax
c002015e:	e8 27 f2 ff ff       	call   c001f38a <Vm::fpuInternalTo64(unsigned long long)>
c0020163:	eb 70                	jmp    c00201d5 <Vm::x87Handler(regs*)+0xa54>
c0020165:	31 c0                	xor    eax,eax
c0020167:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c002016c:	75 74                	jne    c00201e2 <Vm::x87Handler(regs*)+0xa61>
c002016e:	50                   	push   eax
c002016f:	50                   	push   eax
c0020170:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020173:	31 d2                	xor    edx,edx
c0020175:	52                   	push   edx
c0020176:	50                   	push   eax
c0020177:	e8 f6 f2 ff ff       	call   c001f472 <Vm::fpuLongToFloat(long long)>
c002017c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020183:	89 c6                	mov    esi,eax
c0020185:	89 d7                	mov    edi,edx
c0020187:	e8 b8 f4 ff ff       	call   c001f644 <Vm::fpuGetReg(int)>
c002018c:	57                   	push   edi
c002018d:	56                   	push   esi
c002018e:	52                   	push   edx
c002018f:	50                   	push   eax
c0020190:	e8 5e f4 ff ff       	call   c001f5f3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020195:	83 c4 1c             	add    esp,0x1c
c0020198:	52                   	push   edx
c0020199:	50                   	push   eax
c002019a:	6a 00                	push   0x0
c002019c:	e8 e6 f4 ff ff       	call   c001f687 <Vm::fpuSetReg(int, unsigned long long)>
c00201a1:	e9 f2 f7 ff ff       	jmp    c001f998 <Vm::x87Handler(regs*)+0x217>
c00201a6:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00201aa:	80 fa 05             	cmp    dl,0x5
c00201ad:	75 11                	jne    c00201c0 <Vm::x87Handler(regs*)+0xa3f>
c00201af:	55                   	push   ebp
c00201b0:	55                   	push   ebp
c00201b1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00201b4:	ff 36                	push   DWORD PTR [esi]
c00201b6:	e8 81 f2 ff ff       	call   c001f43c <Vm::fpuULongToFloat(unsigned long long)>
c00201bb:	e9 cf f7 ff ff       	jmp    c001f98f <Vm::x87Handler(regs*)+0x20e>
c00201c0:	31 c0                	xor    eax,eax
c00201c2:	80 fa 07             	cmp    dl,0x7
c00201c5:	75 1b                	jne    c00201e2 <Vm::x87Handler(regs*)+0xa61>
c00201c7:	e8 63 f5 ff ff       	call   c001f72f <Vm::fpuPop()>
c00201cc:	51                   	push   ecx
c00201cd:	51                   	push   ecx
c00201ce:	52                   	push   edx
c00201cf:	50                   	push   eax
c00201d0:	e8 0c f2 ff ff       	call   c001f3e1 <Vm::fpuFloatToLong(unsigned long long)>
c00201d5:	83 c4 10             	add    esp,0x10
c00201d8:	89 06                	mov    DWORD PTR [esi],eax
c00201da:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00201dd:	e9 f8 f7 ff ff       	jmp    c001f9da <Vm::x87Handler(regs*)+0x259>
c00201e2:	83 c4 1c             	add    esp,0x1c
c00201e5:	5b                   	pop    ebx
c00201e6:	5e                   	pop    esi
c00201e7:	5f                   	pop    edi
c00201e8:	5d                   	pop    ebp
c00201e9:	c3                   	ret    

c00201ea <__static_initialization_and_destruction_0(int, int)>:
c00201ea:	83 ec 0c             	sub    esp,0xc
c00201ed:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00201f2:	75 1a                	jne    c002020e <__static_initialization_and_destruction_0(int, int)+0x24>
c00201f4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00201fc:	75 10                	jne    c002020e <__static_initialization_and_destruction_0(int, int)+0x24>
c00201fe:	83 ec 0c             	sub    esp,0xc
c0020201:	68 a0 f9 02 c0       	push   0xc002f9a0
c0020206:	e8 4f 8e 00 00       	call   c002905a <Vm::_FPUState::_FPUState()>
c002020b:	83 c4 10             	add    esp,0x10
c002020e:	90                   	nop
c002020f:	83 c4 0c             	add    esp,0xc
c0020212:	c3                   	ret    

c0020213 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020213:	83 ec 0c             	sub    esp,0xc
c0020216:	83 ec 08             	sub    esp,0x8
c0020219:	68 ff ff 00 00       	push   0xffff
c002021e:	6a 01                	push   0x1
c0020220:	e8 c5 ff ff ff       	call   c00201ea <__static_initialization_and_destruction_0(int, int)>
c0020225:	83 c4 10             	add    esp,0x10
c0020228:	83 c4 0c             	add    esp,0xc
c002022b:	c3                   	ret    

c002022c <FAT::getName()>:
c002022c:	b8 84 c8 02 c0       	mov    eax,0xc002c884
c0020231:	c3                   	ret    

c0020232 <FAT::tell(void*, unsigned long long*)>:
c0020232:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020237:	75 06                	jne    c002023f <FAT::tell(void*, unsigned long long*)+0xd>
c0020239:	b8 04 00 00 00       	mov    eax,0x4
c002023e:	c3                   	ret    
c002023f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020244:	75 06                	jne    c002024c <FAT::tell(void*, unsigned long long*)+0x1a>
c0020246:	b8 04 00 00 00       	mov    eax,0x4
c002024b:	c3                   	ret    
c002024c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020250:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020253:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020256:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002025a:	89 01                	mov    DWORD PTR [ecx],eax
c002025c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002025f:	b8 00 00 00 00       	mov    eax,0x0
c0020264:	c3                   	ret    
c0020265:	90                   	nop

c0020266 <FAT::stat(void*, unsigned long long*)>:
c0020266:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002026b:	75 06                	jne    c0020273 <FAT::stat(void*, unsigned long long*)+0xd>
c002026d:	b8 04 00 00 00       	mov    eax,0x4
c0020272:	c3                   	ret    
c0020273:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020278:	75 06                	jne    c0020280 <FAT::stat(void*, unsigned long long*)+0x1a>
c002027a:	b8 04 00 00 00       	mov    eax,0x4
c002027f:	c3                   	ret    
c0020280:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020284:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020287:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002028a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002028e:	89 01                	mov    DWORD PTR [ecx],eax
c0020290:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020293:	b8 00 00 00 00       	mov    eax,0x0
c0020298:	c3                   	ret    
c0020299:	90                   	nop

c002029a <FAT::~FAT()>:
c002029a:	83 ec 0c             	sub    esp,0xc
c002029d:	ba d0 c8 02 c0       	mov    edx,0xc002c8d0
c00202a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202a6:	89 10                	mov    DWORD PTR [eax],edx
c00202a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202ac:	83 ec 0c             	sub    esp,0xc
c00202af:	50                   	push   eax
c00202b0:	e8 2b 29 ff ff       	call   c0012be0 <Filesystem::~Filesystem()>
c00202b5:	83 c4 10             	add    esp,0x10
c00202b8:	90                   	nop
c00202b9:	83 c4 0c             	add    esp,0xc
c00202bc:	c3                   	ret    
c00202bd:	90                   	nop

c00202be <FAT::~FAT()>:
c00202be:	83 ec 0c             	sub    esp,0xc
c00202c1:	83 ec 0c             	sub    esp,0xc
c00202c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202c8:	e8 cd ff ff ff       	call   c002029a <FAT::~FAT()>
c00202cd:	83 c4 10             	add    esp,0x10
c00202d0:	83 ec 08             	sub    esp,0x8
c00202d3:	6a 08                	push   0x8
c00202d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202d9:	e8 fb 24 ff ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c00202de:	83 c4 10             	add    esp,0x10
c00202e1:	83 c4 0c             	add    esp,0xc
c00202e4:	c3                   	ret    
c00202e5:	90                   	nop

c00202e6 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00202e6:	83 ec 1c             	sub    esp,0x1c
c00202e9:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00202f0:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00202f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00202f9:	8b 04 85 20 fa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd05e0]
c0020300:	83 f8 ff             	cmp    eax,0xffffffff
c0020303:	75 34                	jne    c0020339 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020305:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020309:	88 c2                	mov    dl,al
c002030b:	a1 00 fa 02 c0       	mov    eax,ds:0xc002fa00
c0020310:	01 d0                	add    eax,edx
c0020312:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020316:	8b 15 00 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa00
c002031c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020320:	89 14 85 20 fa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd05e0],edx
c0020327:	a1 00 fa 02 c0       	mov    eax,ds:0xc002fa00
c002032c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020330:	89 14 85 a0 fa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0560],edx
c0020337:	eb 17                	jmp    c0020350 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020339:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002033d:	88 c2                	mov    dl,al
c002033f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020343:	8b 04 85 20 fa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd05e0]
c002034a:	01 d0                	add    eax,edx
c002034c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020350:	83 ec 04             	sub    esp,0x4
c0020353:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020357:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002035b:	8d 44 24 15          	lea    eax,[esp+0x15]
c002035f:	50                   	push   eax
c0020360:	e8 99 69 fe ff       	call   c0006cfe <f_getlabel>
c0020365:	83 c4 10             	add    esp,0x10
c0020368:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002036c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020371:	75 07                	jne    c002037a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020373:	b8 00 00 00 00       	mov    eax,0x0
c0020378:	eb 05                	jmp    c002037f <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c002037a:	b8 01 00 00 00       	mov    eax,0x1
c002037f:	83 c4 1c             	add    esp,0x1c
c0020382:	c3                   	ret    
c0020383:	90                   	nop

c0020384 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020384:	57                   	push   edi
c0020385:	83 ec 58             	sub    esp,0x58
c0020388:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020390:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020394:	b9 0f 00 00 00       	mov    ecx,0xf
c0020399:	b8 00 00 00 00       	mov    eax,0x0
c002039e:	fc                   	cld    
c002039f:	89 d7                	mov    edi,edx
c00203a1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00203a3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00203a7:	8b 04 85 20 fa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd05e0]
c00203ae:	83 f8 ff             	cmp    eax,0xffffffff
c00203b1:	75 34                	jne    c00203e7 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00203b3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00203b7:	88 c2                	mov    dl,al
c00203b9:	a1 00 fa 02 c0       	mov    eax,ds:0xc002fa00
c00203be:	01 d0                	add    eax,edx
c00203c0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00203c4:	8b 15 00 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa00
c00203ca:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00203ce:	89 14 85 20 fa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd05e0],edx
c00203d5:	a1 00 fa 02 c0       	mov    eax,ds:0xc002fa00
c00203da:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00203de:	89 14 85 a0 fa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0560],edx
c00203e5:	eb 17                	jmp    c00203fe <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c00203e7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00203eb:	88 c2                	mov    dl,al
c00203ed:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00203f1:	8b 04 85 20 fa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd05e0]
c00203f8:	01 d0                	add    eax,edx
c00203fa:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00203fe:	83 ec 08             	sub    esp,0x8
c0020401:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020405:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020409:	50                   	push   eax
c002040a:	e8 3d 05 fe ff       	call   c000094c <strcat>
c002040f:	83 c4 10             	add    esp,0x10
c0020412:	83 ec 0c             	sub    esp,0xc
c0020415:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020419:	50                   	push   eax
c002041a:	e8 cd 6a fe ff       	call   c0006eec <f_setlabel>
c002041f:	83 c4 10             	add    esp,0x10
c0020422:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020426:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c002042b:	75 07                	jne    c0020434 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c002042d:	b8 00 00 00 00       	mov    eax,0x0
c0020432:	eb 05                	jmp    c0020439 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020434:	b8 01 00 00 00       	mov    eax,0x1
c0020439:	83 c4 58             	add    esp,0x58
c002043c:	5f                   	pop    edi
c002043d:	c3                   	ret    

c002043e <FAT::format(LogicalDisk*, int, char const*, int)>:
c002043e:	83 ec 2c             	sub    esp,0x2c
c0020441:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020449:	83 ec 08             	sub    esp,0x8
c002044c:	68 a8 c8 02 c0       	push   0xc002c8a8
c0020451:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020455:	e8 3e 04 fe ff       	call   c0000898 <strcmp>
c002045a:	83 c4 10             	add    esp,0x10
c002045d:	85 c0                	test   eax,eax
c002045f:	0f 94 c0             	sete   al
c0020462:	84 c0                	test   al,al
c0020464:	74 0d                	je     c0020473 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020466:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002046e:	e9 a6 00 00 00       	jmp    c0020519 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020473:	83 ec 08             	sub    esp,0x8
c0020476:	68 9a c8 02 c0       	push   0xc002c89a
c002047b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002047f:	e8 14 04 fe ff       	call   c0000898 <strcmp>
c0020484:	83 c4 10             	add    esp,0x10
c0020487:	85 c0                	test   eax,eax
c0020489:	0f 94 c0             	sete   al
c002048c:	84 c0                	test   al,al
c002048e:	74 0a                	je     c002049a <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020490:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020498:	eb 7f                	jmp    c0020519 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002049a:	83 ec 08             	sub    esp,0x8
c002049d:	68 a0 c8 02 c0       	push   0xc002c8a0
c00204a2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00204a6:	e8 ed 03 fe ff       	call   c0000898 <strcmp>
c00204ab:	83 c4 10             	add    esp,0x10
c00204ae:	85 c0                	test   eax,eax
c00204b0:	0f 94 c0             	sete   al
c00204b3:	84 c0                	test   al,al
c00204b5:	74 0a                	je     c00204c1 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00204b7:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00204bf:	eb 58                	jmp    c0020519 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00204c1:	83 ec 08             	sub    esp,0x8
c00204c4:	68 cc 97 02 c0       	push   0xc00297cc
c00204c9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00204cd:	e8 c6 03 fe ff       	call   c0000898 <strcmp>
c00204d2:	83 c4 10             	add    esp,0x10
c00204d5:	85 c0                	test   eax,eax
c00204d7:	0f 94 c0             	sete   al
c00204da:	84 c0                	test   al,al
c00204dc:	74 0a                	je     c00204e8 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00204de:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00204e6:	eb 31                	jmp    c0020519 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00204e8:	83 ec 08             	sub    esp,0x8
c00204eb:	68 a6 c8 02 c0       	push   0xc002c8a6
c00204f0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00204f4:	e8 9f 03 fe ff       	call   c0000898 <strcmp>
c00204f9:	83 c4 10             	add    esp,0x10
c00204fc:	85 c0                	test   eax,eax
c00204fe:	0f 94 c0             	sete   al
c0020501:	84 c0                	test   al,al
c0020503:	74 0a                	je     c002050f <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020505:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c002050d:	eb 0a                	jmp    c0020519 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002050f:	b8 08 00 00 00       	mov    eax,0x8
c0020514:	e9 df 00 00 00       	jmp    c00205f8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020519:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020520:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020525:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020529:	8b 04 85 20 fa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd05e0]
c0020530:	83 f8 ff             	cmp    eax,0xffffffff
c0020533:	75 34                	jne    c0020569 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020535:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020539:	88 c2                	mov    dl,al
c002053b:	a1 00 fa 02 c0       	mov    eax,ds:0xc002fa00
c0020540:	01 d0                	add    eax,edx
c0020542:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020546:	8b 15 00 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa00
c002054c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020550:	89 14 85 20 fa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd05e0],edx
c0020557:	a1 00 fa 02 c0       	mov    eax,ds:0xc002fa00
c002055c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020560:	89 14 85 a0 fa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0560],edx
c0020567:	eb 17                	jmp    c0020580 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020569:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002056d:	88 c2                	mov    dl,al
c002056f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020573:	8b 04 85 20 fa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd05e0]
c002057a:	01 d0                	add    eax,edx
c002057c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020580:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020584:	88 04 24             	mov    BYTE PTR [esp],al
c0020587:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002058b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002058f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020597:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c002059c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00205a4:	83 ec 0c             	sub    esp,0xc
c00205a7:	68 00 20 00 00       	push   0x2000
c00205ac:	e8 a8 f2 fe ff       	call   c000f859 <malloc>
c00205b1:	83 c4 10             	add    esp,0x10
c00205b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00205b8:	68 00 20 00 00       	push   0x2000
c00205bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205c1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00205c5:	50                   	push   eax
c00205c6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00205ca:	50                   	push   eax
c00205cb:	e8 9d 6f fe ff       	call   c000756d <f_mkfs>
c00205d0:	83 c4 10             	add    esp,0x10
c00205d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00205d7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00205dc:	75 07                	jne    c00205e5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00205de:	b8 00 00 00 00       	mov    eax,0x0
c00205e3:	eb 13                	jmp    c00205f8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00205e5:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00205ea:	75 07                	jne    c00205f3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c00205ec:	b8 09 00 00 00       	mov    eax,0x9
c00205f1:	eb 05                	jmp    c00205f8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00205f3:	b8 01 00 00 00       	mov    eax,0x1
c00205f8:	83 c4 2c             	add    esp,0x2c
c00205fb:	c3                   	ret    

c00205fc <FAT::tryMount(LogicalDisk*, int)>:
c00205fc:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020602:	a1 00 fa 02 c0       	mov    eax,ds:0xc002fa00
c0020607:	83 f8 14             	cmp    eax,0x14
c002060a:	75 17                	jne    c0020623 <FAT::tryMount(LogicalDisk*, int)+0x27>
c002060c:	83 ec 0c             	sub    esp,0xc
c002060f:	68 ac c8 02 c0       	push   0xc002c8ac
c0020614:	e8 06 9c ff ff       	call   c001a21f <Krnl::panic(char const*)>
c0020619:	83 c4 10             	add    esp,0x10
c002061c:	b0 00                	mov    al,0x0
c002061e:	e9 d7 01 00 00       	jmp    c00207fa <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020623:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c002062a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020630:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020636:	3d 00 02 00 00       	cmp    eax,0x200
c002063b:	74 07                	je     c0020644 <FAT::tryMount(LogicalDisk*, int)+0x48>
c002063d:	b0 00                	mov    al,0x0
c002063f:	e9 b6 01 00 00       	jmp    c00207fa <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020644:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c002064c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020653:	8b 04 85 20 fa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd05e0]
c002065a:	83 f8 ff             	cmp    eax,0xffffffff
c002065d:	74 07                	je     c0020666 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c002065f:	b0 01                	mov    al,0x1
c0020661:	e9 94 01 00 00       	jmp    c00207fa <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020666:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020670:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020678:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c002067f:	88 c2                	mov    dl,al
c0020681:	a1 00 fa 02 c0       	mov    eax,ds:0xc002fa00
c0020686:	01 d0                	add    eax,edx
c0020688:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c002068f:	8b 15 00 fa 02 c0    	mov    edx,DWORD PTR ds:0xc002fa00
c0020695:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002069c:	89 14 85 20 fa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd05e0],edx
c00206a3:	a1 00 fa 02 c0       	mov    eax,ds:0xc002fa00
c00206a8:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00206af:	89 14 85 a0 fa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0560],edx
c00206b6:	83 ec 0c             	sub    esp,0xc
c00206b9:	68 54 02 00 00       	push   0x254
c00206be:	e8 96 f1 fe ff       	call   c000f859 <malloc>
c00206c3:	83 c4 10             	add    esp,0x10
c00206c6:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00206cd:	83 ec 04             	sub    esp,0x4
c00206d0:	6a 00                	push   0x0
c00206d2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00206d9:	50                   	push   eax
c00206da:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00206e1:	e8 0f 48 fe ff       	call   c0004ef5 <f_mount>
c00206e6:	83 c4 10             	add    esp,0x10
c00206e9:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00206f0:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00206f8:	74 19                	je     c0020713 <FAT::tryMount(LogicalDisk*, int)+0x117>
c00206fa:	83 ec 0c             	sub    esp,0xc
c00206fd:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020704:	e8 70 f1 fe ff       	call   c000f879 <rfree>
c0020709:	83 c4 10             	add    esp,0x10
c002070c:	b0 00                	mov    al,0x0
c002070e:	e9 e7 00 00 00       	jmp    c00207fa <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020713:	83 ec 04             	sub    esp,0x4
c0020716:	68 00 01 00 00       	push   0x100
c002071b:	6a 00                	push   0x0
c002071d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020724:	50                   	push   eax
c0020725:	e8 26 00 fe ff       	call   c0000750 <memset>
c002072a:	83 c4 10             	add    esp,0x10
c002072d:	83 ec 08             	sub    esp,0x8
c0020730:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020737:	50                   	push   eax
c0020738:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002073f:	50                   	push   eax
c0020740:	e8 07 02 fe ff       	call   c000094c <strcat>
c0020745:	83 c4 10             	add    esp,0x10
c0020748:	83 ec 08             	sub    esp,0x8
c002074b:	68 ba c8 02 c0       	push   0xc002c8ba
c0020750:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020757:	50                   	push   eax
c0020758:	e8 ef 01 fe ff       	call   c000094c <strcat>
c002075d:	83 c4 10             	add    esp,0x10
c0020760:	83 ec 04             	sub    esp,0x4
c0020763:	6a 01                	push   0x1
c0020765:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c002076c:	50                   	push   eax
c002076d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020771:	50                   	push   eax
c0020772:	e8 e0 47 fe ff       	call   c0004f57 <f_open>
c0020777:	83 c4 10             	add    esp,0x10
c002077a:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020781:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020788:	85 c0                	test   eax,eax
c002078a:	74 0a                	je     c0020796 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c002078c:	78 2d                	js     c00207bb <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002078e:	83 e8 04             	sub    eax,0x4
c0020791:	83 f8 01             	cmp    eax,0x1
c0020794:	77 25                	ja     c00207bb <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020796:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c002079e:	83 ec 0c             	sub    esp,0xc
c00207a1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00207a5:	50                   	push   eax
c00207a6:	e8 fe 52 fe ff       	call   c0005aa9 <f_close>
c00207ab:	83 c4 10             	add    esp,0x10
c00207ae:	90                   	nop
c00207af:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00207b7:	74 3a                	je     c00207f3 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00207b9:	eb 2d                	jmp    c00207e8 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00207bb:	83 ec 0c             	sub    esp,0xc
c00207be:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00207c5:	e8 af f0 fe ff       	call   c000f879 <rfree>
c00207ca:	83 c4 10             	add    esp,0x10
c00207cd:	83 ec 04             	sub    esp,0x4
c00207d0:	6a 00                	push   0x0
c00207d2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00207d9:	50                   	push   eax
c00207da:	6a 00                	push   0x0
c00207dc:	e8 14 47 fe ff       	call   c0004ef5 <f_mount>
c00207e1:	83 c4 10             	add    esp,0x10
c00207e4:	b0 00                	mov    al,0x0
c00207e6:	eb 12                	jmp    c00207fa <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00207e8:	a1 00 fa 02 c0       	mov    eax,ds:0xc002fa00
c00207ed:	40                   	inc    eax
c00207ee:	a3 00 fa 02 c0       	mov    ds:0xc002fa00,eax
c00207f3:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00207fa:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020800:	c3                   	ret    
c0020801:	90                   	nop

c0020802 <FAT::allocateSwapfile(char const*, int)>:
c0020802:	53                   	push   ebx
c0020803:	81 ec 28 04 00 00    	sub    esp,0x428
c0020809:	c7 84 24 10 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x410],0x114
c0020814:	83 ec 0c             	sub    esp,0xc
c0020817:	ff b4 24 1c 04 00 00 	push   DWORD PTR [esp+0x41c]
c002081e:	e8 36 f0 fe ff       	call   c000f859 <malloc>
c0020823:	83 c4 10             	add    esp,0x10
c0020826:	89 c3                	mov    ebx,eax
c0020828:	a1 30 f9 02 c0       	mov    eax,ds:0xc002f930
c002082d:	83 ec 04             	sub    esp,0x4
c0020830:	50                   	push   eax
c0020831:	ff b4 24 3c 04 00 00 	push   DWORD PTR [esp+0x43c]
c0020838:	53                   	push   ebx
c0020839:	e8 d2 25 ff ff       	call   c0012e10 <File::File(char const*, Process*)>
c002083e:	83 c4 10             	add    esp,0x10
c0020841:	89 9c 24 1c 04 00 00 	mov    DWORD PTR [esp+0x41c],ebx
c0020848:	83 ec 0c             	sub    esp,0xc
c002084b:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c0020852:	e8 95 27 ff ff       	call   c0012fec <File::unlink()>
c0020857:	83 c4 10             	add    esp,0x10
c002085a:	83 ec 08             	sub    esp,0x8
c002085d:	6a 12                	push   0x12
c002085f:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c0020866:	e8 09 26 ff ff       	call   c0012e74 <File::open(FileOpenMode)>
c002086b:	83 c4 10             	add    esp,0x10
c002086e:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c0020875:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c002087b:	89 84 24 18 04 00 00 	mov    DWORD PTR [esp+0x418],eax
c0020882:	8b 84 24 38 04 00 00 	mov    eax,DWORD PTR [esp+0x438]
c0020889:	c1 e0 14             	shl    eax,0x14
c002088c:	99                   	cdq    
c002088d:	6a 01                	push   0x1
c002088f:	52                   	push   edx
c0020890:	50                   	push   eax
c0020891:	ff b4 24 24 04 00 00 	push   DWORD PTR [esp+0x424]
c0020898:	e8 bc 68 fe ff       	call   c0007159 <f_expand>
c002089d:	83 c4 10             	add    esp,0x10
c00208a0:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c00208a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00208a9:	83 c0 10             	add    eax,0x10
c00208ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00208ae:	83 ec 0c             	sub    esp,0xc
c00208b1:	8d 54 24 14          	lea    edx,[esp+0x14]
c00208b5:	52                   	push   edx
c00208b6:	8d 54 24 20          	lea    edx,[esp+0x20]
c00208ba:	52                   	push   edx
c00208bb:	6a 00                	push   0x0
c00208bd:	68 00 04 00 00       	push   0x400
c00208c2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00208c9:	ff d0                	call   eax
c00208cb:	83 c4 20             	add    esp,0x20
c00208ce:	83 ec 0c             	sub    esp,0xc
c00208d1:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c00208d8:	e8 f5 25 ff ff       	call   c0012ed2 <File::close()>
c00208dd:	83 c4 10             	add    esp,0x10
c00208e0:	83 ec 08             	sub    esp,0x8
c00208e3:	6a 01                	push   0x1
c00208e5:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c00208ec:	e8 83 25 ff ff       	call   c0012e74 <File::open(FileOpenMode)>
c00208f1:	83 c4 10             	add    esp,0x10
c00208f4:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c00208fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00208fd:	83 c0 0c             	add    eax,0xc
c0020900:	8b 00                	mov    eax,DWORD PTR [eax]
c0020902:	83 ec 0c             	sub    esp,0xc
c0020905:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020909:	52                   	push   edx
c002090a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002090e:	52                   	push   edx
c002090f:	6a 00                	push   0x0
c0020911:	6a 04                	push   0x4
c0020913:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c002091a:	ff d0                	call   eax
c002091c:	83 c4 20             	add    esp,0x20
c002091f:	8b 84 24 1c 04 00 00 	mov    eax,DWORD PTR [esp+0x41c]
c0020926:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c002092c:	89 84 24 18 04 00 00 	mov    DWORD PTR [esp+0x418],eax
c0020933:	8b 84 24 18 04 00 00 	mov    eax,DWORD PTR [esp+0x418]
c002093a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c002093d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020940:	89 84 24 14 04 00 00 	mov    DWORD PTR [esp+0x414],eax
c0020947:	83 ec 0c             	sub    esp,0xc
c002094a:	ff b4 24 28 04 00 00 	push   DWORD PTR [esp+0x428]
c0020951:	e8 7c 25 ff ff       	call   c0012ed2 <File::close()>
c0020956:	83 c4 10             	add    esp,0x10
c0020959:	8b 84 24 14 04 00 00 	mov    eax,DWORD PTR [esp+0x414]
c0020960:	ba 00 00 00 00       	mov    edx,0x0
c0020965:	81 c4 28 04 00 00    	add    esp,0x428
c002096b:	5b                   	pop    ebx
c002096c:	c3                   	ret    
c002096d:	90                   	nop

c002096e <FAT::readDir(void*, unsigned long, void*, int*)>:
c002096e:	57                   	push   edi
c002096f:	56                   	push   esi
c0020970:	53                   	push   ebx
c0020971:	81 ec 50 02 00 00    	sub    esp,0x250
c0020977:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c002097f:	74 0a                	je     c002098b <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c0020981:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0020989:	75 0a                	jne    c0020995 <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c002098b:	b8 04 00 00 00       	mov    eax,0x4
c0020990:	e9 29 01 00 00       	jmp    c0020abe <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020995:	83 ec 08             	sub    esp,0x8
c0020998:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c002099f:	50                   	push   eax
c00209a0:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00209a7:	e8 07 57 fe ff       	call   c00060b3 <f_readdir>
c00209ac:	83 c4 10             	add    esp,0x10
c00209af:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00209b6:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c00209bd:	83 ec 0c             	sub    esp,0xc
c00209c0:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00209c7:	83 c0 1a             	add    eax,0x1a
c00209ca:	50                   	push   eax
c00209cb:	e8 9c fd fd ff       	call   c000076c <strlen>
c00209d0:	83 c4 10             	add    esp,0x10
c00209d3:	ba 00 00 00 00       	mov    edx,0x0
c00209d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00209dc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00209e0:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00209e7:	0f b6 c0             	movzx  eax,al
c00209ea:	83 e0 10             	and    eax,0x10
c00209ed:	74 07                	je     c00209f6 <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c00209ef:	b8 02 00 00 00       	mov    eax,0x2
c00209f4:	eb 05                	jmp    c00209fb <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c00209f6:	b8 01 00 00 00       	mov    eax,0x1
c00209fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00209ff:	83 ec 08             	sub    esp,0x8
c0020a02:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020a09:	83 c0 1a             	add    eax,0x1a
c0020a0c:	50                   	push   eax
c0020a0d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020a11:	83 c0 10             	add    eax,0x10
c0020a14:	50                   	push   eax
c0020a15:	e8 f2 fd fd ff       	call   c000080c <strcpy>
c0020a1a:	83 c4 10             	add    esp,0x10
c0020a1d:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0020a24:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0020a2b:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020a2f:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0020a36:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0020a3d:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0020a44:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0020a4b:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0020a52:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0020a59:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0020a60:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0020a67:	89 c6                	mov    esi,eax
c0020a69:	89 d7                	mov    edi,edx
c0020a6b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020a6d:	89 c8                	mov    eax,ecx
c0020a6f:	89 fa                	mov    edx,edi
c0020a71:	89 f3                	mov    ebx,esi
c0020a73:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0020a7a:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0020a81:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0020a88:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0020a8f:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020a95:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0020a9c:	84 c0                	test   al,al
c0020a9e:	75 07                	jne    c0020aa7 <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0020aa0:	b8 07 00 00 00       	mov    eax,0x7
c0020aa5:	eb 17                	jmp    c0020abe <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020aa7:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0020aae:	85 c0                	test   eax,eax
c0020ab0:	75 07                	jne    c0020ab9 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c0020ab2:	b8 00 00 00 00       	mov    eax,0x0
c0020ab7:	eb 05                	jmp    c0020abe <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020ab9:	b8 01 00 00 00       	mov    eax,0x1
c0020abe:	81 c4 50 02 00 00    	add    esp,0x250
c0020ac4:	5b                   	pop    ebx
c0020ac5:	5e                   	pop    esi
c0020ac6:	5f                   	pop    edi
c0020ac7:	c3                   	ret    

c0020ac8 <FAT::read(void*, unsigned long, void*, int*)>:
c0020ac8:	83 ec 1c             	sub    esp,0x1c
c0020acb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020ad0:	74 07                	je     c0020ad9 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020ad2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020ad7:	75 07                	jne    c0020ae0 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020ad9:	b8 04 00 00 00       	mov    eax,0x4
c0020ade:	eb 3d                	jmp    c0020b1d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020ae0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020ae4:	50                   	push   eax
c0020ae5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020ae9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020aed:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020af1:	e8 9d 48 fe ff       	call   c0005393 <f_read>
c0020af6:	83 c4 10             	add    esp,0x10
c0020af9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020afd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020b01:	89 c2                	mov    edx,eax
c0020b03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020b07:	89 10                	mov    DWORD PTR [eax],edx
c0020b09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020b0d:	85 c0                	test   eax,eax
c0020b0f:	75 07                	jne    c0020b18 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020b11:	b8 00 00 00 00       	mov    eax,0x0
c0020b16:	eb 05                	jmp    c0020b1d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020b18:	b8 01 00 00 00       	mov    eax,0x1
c0020b1d:	83 c4 1c             	add    esp,0x1c
c0020b20:	c3                   	ret    
c0020b21:	90                   	nop

c0020b22 <FAT::write(void*, unsigned long, void*, int*)>:
c0020b22:	83 ec 1c             	sub    esp,0x1c
c0020b25:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020b2a:	74 07                	je     c0020b33 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020b2c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020b31:	75 07                	jne    c0020b3a <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020b33:	b8 04 00 00 00       	mov    eax,0x4
c0020b38:	eb 3d                	jmp    c0020b77 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020b3a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020b3e:	50                   	push   eax
c0020b3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020b43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020b47:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020b4b:	e8 c3 4a fe ff       	call   c0005613 <f_write>
c0020b50:	83 c4 10             	add    esp,0x10
c0020b53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020b5b:	89 c2                	mov    edx,eax
c0020b5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020b61:	89 10                	mov    DWORD PTR [eax],edx
c0020b63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020b67:	85 c0                	test   eax,eax
c0020b69:	75 07                	jne    c0020b72 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020b6b:	b8 00 00 00 00       	mov    eax,0x0
c0020b70:	eb 05                	jmp    c0020b77 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020b72:	b8 01 00 00 00       	mov    eax,0x1
c0020b77:	83 c4 1c             	add    esp,0x1c
c0020b7a:	c3                   	ret    
c0020b7b:	90                   	nop

c0020b7c <FAT::close(void*)>:
c0020b7c:	83 ec 1c             	sub    esp,0x1c
c0020b7f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020b84:	75 07                	jne    c0020b8d <FAT::close(void*)+0x11>
c0020b86:	b8 04 00 00 00       	mov    eax,0x4
c0020b8b:	eb 36                	jmp    c0020bc3 <FAT::close(void*)+0x47>
c0020b8d:	83 ec 0c             	sub    esp,0xc
c0020b90:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020b94:	e8 10 4f fe ff       	call   c0005aa9 <f_close>
c0020b99:	83 c4 10             	add    esp,0x10
c0020b9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ba0:	83 ec 0c             	sub    esp,0xc
c0020ba3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ba7:	e8 bd ec fe ff       	call   c000f869 <free>
c0020bac:	83 c4 10             	add    esp,0x10
c0020baf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020bb3:	85 c0                	test   eax,eax
c0020bb5:	75 07                	jne    c0020bbe <FAT::close(void*)+0x42>
c0020bb7:	b8 00 00 00 00       	mov    eax,0x0
c0020bbc:	eb 05                	jmp    c0020bc3 <FAT::close(void*)+0x47>
c0020bbe:	b8 01 00 00 00       	mov    eax,0x1
c0020bc3:	83 c4 1c             	add    esp,0x1c
c0020bc6:	c3                   	ret    
c0020bc7:	90                   	nop

c0020bc8 <FAT::closeDir(void*)>:
c0020bc8:	83 ec 1c             	sub    esp,0x1c
c0020bcb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020bd0:	75 07                	jne    c0020bd9 <FAT::closeDir(void*)+0x11>
c0020bd2:	b8 04 00 00 00       	mov    eax,0x4
c0020bd7:	eb 36                	jmp    c0020c0f <FAT::closeDir(void*)+0x47>
c0020bd9:	83 ec 0c             	sub    esp,0xc
c0020bdc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020be0:	e8 ac 54 fe ff       	call   c0006091 <f_closedir>
c0020be5:	83 c4 10             	add    esp,0x10
c0020be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020bec:	83 ec 0c             	sub    esp,0xc
c0020bef:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020bf3:	e8 71 ec fe ff       	call   c000f869 <free>
c0020bf8:	83 c4 10             	add    esp,0x10
c0020bfb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020bff:	85 c0                	test   eax,eax
c0020c01:	75 07                	jne    c0020c0a <FAT::closeDir(void*)+0x42>
c0020c03:	b8 00 00 00 00       	mov    eax,0x0
c0020c08:	eb 05                	jmp    c0020c0f <FAT::closeDir(void*)+0x47>
c0020c0a:	b8 01 00 00 00       	mov    eax,0x1
c0020c0f:	83 c4 1c             	add    esp,0x1c
c0020c12:	c3                   	ret    
c0020c13:	90                   	nop

c0020c14 <FAT::seek(void*, unsigned long long)>:
c0020c14:	83 ec 2c             	sub    esp,0x2c
c0020c17:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020c1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020c1f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020c23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c27:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020c2c:	75 07                	jne    c0020c35 <FAT::seek(void*, unsigned long long)+0x21>
c0020c2e:	b8 04 00 00 00       	mov    eax,0x4
c0020c33:	eb 2f                	jmp    c0020c64 <FAT::seek(void*, unsigned long long)+0x50>
c0020c35:	83 ec 04             	sub    esp,0x4
c0020c38:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020c3c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020c40:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020c44:	e8 8f 4e fe ff       	call   c0005ad8 <f_lseek>
c0020c49:	83 c4 10             	add    esp,0x10
c0020c4c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020c50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020c54:	85 c0                	test   eax,eax
c0020c56:	75 07                	jne    c0020c5f <FAT::seek(void*, unsigned long long)+0x4b>
c0020c58:	b8 00 00 00 00       	mov    eax,0x0
c0020c5d:	eb 05                	jmp    c0020c64 <FAT::seek(void*, unsigned long long)+0x50>
c0020c5f:	b8 01 00 00 00       	mov    eax,0x1
c0020c64:	83 c4 2c             	add    esp,0x2c
c0020c67:	c3                   	ret    

c0020c68 <fatWrapperReadDisk>:
c0020c68:	83 ec 1c             	sub    esp,0x1c
c0020c6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020c6f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020c73:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020c77:	89 04 24             	mov    DWORD PTR [esp],eax
c0020c7a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020c7e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020c82:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020c87:	8b 04 85 00 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1600]
c0020c8e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020c92:	83 ec 0c             	sub    esp,0xc
c0020c95:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c99:	52                   	push   edx
c0020c9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020c9e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020ca2:	50                   	push   eax
c0020ca3:	e8 64 55 ff ff       	call   c001620c <LogicalDisk::read(unsigned long long, int, void*)>
c0020ca8:	83 c4 20             	add    esp,0x20
c0020cab:	83 c4 1c             	add    esp,0x1c
c0020cae:	c3                   	ret    

c0020caf <fatWrapperWriteDisk>:
c0020caf:	83 ec 1c             	sub    esp,0x1c
c0020cb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020cb6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020cba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020cbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0020cc1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020cc5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020cc9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020cce:	8b 04 85 00 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1600]
c0020cd5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020cd9:	83 ec 0c             	sub    esp,0xc
c0020cdc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ce0:	52                   	push   edx
c0020ce1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020ce5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020ce9:	50                   	push   eax
c0020cea:	e8 89 55 ff ff       	call   c0016278 <LogicalDisk::write(unsigned long long, int, void*)>
c0020cef:	83 c4 20             	add    esp,0x20
c0020cf2:	83 c4 1c             	add    esp,0x1c
c0020cf5:	c3                   	ret    

c0020cf6 <fatWrapperIoctl>:
c0020cf6:	53                   	push   ebx
c0020cf7:	83 ec 28             	sub    esp,0x28
c0020cfa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020cfe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020d02:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020d06:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020d0a:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020d0f:	75 31                	jne    c0020d42 <fatWrapperIoctl+0x4c>
c0020d11:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d15:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020d19:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d1e:	8b 04 85 00 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1600]
c0020d25:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020d2b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020d31:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020d35:	66 89 02             	mov    WORD PTR [edx],ax
c0020d38:	b8 00 00 00 00       	mov    eax,0x0
c0020d3d:	e9 b2 00 00 00       	jmp    c0020df4 <fatWrapperIoctl+0xfe>
c0020d42:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020d47:	75 6a                	jne    c0020db3 <fatWrapperIoctl+0xbd>
c0020d49:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d4d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020d51:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d56:	8b 04 85 00 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1600]
c0020d5d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020d63:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020d69:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020d6f:	89 c8                	mov    eax,ecx
c0020d71:	89 da                	mov    edx,ebx
c0020d73:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020d77:	c1 e0 0a             	shl    eax,0xa
c0020d7a:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020d7f:	8b 0c 8d 00 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1600]
c0020d86:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020d8c:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020d92:	89 cb                	mov    ebx,ecx
c0020d94:	c1 fb 1f             	sar    ebx,0x1f
c0020d97:	53                   	push   ebx
c0020d98:	51                   	push   ecx
c0020d99:	52                   	push   edx
c0020d9a:	50                   	push   eax
c0020d9b:	e8 b4 5e 00 00       	call   c0026c54 <__udivdi3>
c0020da0:	83 c4 10             	add    esp,0x10
c0020da3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020da7:	89 01                	mov    DWORD PTR [ecx],eax
c0020da9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020dac:	b8 00 00 00 00       	mov    eax,0x0
c0020db1:	eb 41                	jmp    c0020df4 <fatWrapperIoctl+0xfe>
c0020db3:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020db8:	75 07                	jne    c0020dc1 <fatWrapperIoctl+0xcb>
c0020dba:	b8 00 00 00 00       	mov    eax,0x0
c0020dbf:	eb 33                	jmp    c0020df4 <fatWrapperIoctl+0xfe>
c0020dc1:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020dc6:	75 19                	jne    c0020de1 <fatWrapperIoctl+0xeb>
c0020dc8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020dcc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020dd0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020dd4:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020dda:	b8 00 00 00 00       	mov    eax,0x0
c0020ddf:	eb 13                	jmp    c0020df4 <fatWrapperIoctl+0xfe>
c0020de1:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020de6:	75 07                	jne    c0020def <fatWrapperIoctl+0xf9>
c0020de8:	b8 00 00 00 00       	mov    eax,0x0
c0020ded:	eb 05                	jmp    c0020df4 <fatWrapperIoctl+0xfe>
c0020def:	b8 04 00 00 00       	mov    eax,0x4
c0020df4:	83 c4 28             	add    esp,0x28
c0020df7:	5b                   	pop    ebx
c0020df8:	c3                   	ret    
c0020df9:	90                   	nop

c0020dfa <FAT::FAT()>:
c0020dfa:	83 ec 1c             	sub    esp,0x1c
c0020dfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e01:	83 ec 0c             	sub    esp,0xc
c0020e04:	50                   	push   eax
c0020e05:	e8 b2 1d ff ff       	call   c0012bbc <Filesystem::Filesystem()>
c0020e0a:	83 c4 10             	add    esp,0x10
c0020e0d:	ba d0 c8 02 c0       	mov    edx,0xc002c8d0
c0020e12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e16:	89 10                	mov    DWORD PTR [eax],edx
c0020e18:	c7 05 00 fa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002fa00,0x0
c0020e22:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020e2a:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020e2f:	7f 15                	jg     c0020e46 <FAT::FAT()+0x4c>
c0020e31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e35:	c7 04 85 20 fa 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd05e0],0xffffffff
c0020e40:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020e44:	eb e4                	jmp    c0020e2a <FAT::FAT()+0x30>
c0020e46:	90                   	nop
c0020e47:	83 c4 1c             	add    esp,0x1c
c0020e4a:	c3                   	ret    
c0020e4b:	90                   	nop

c0020e4c <FAT::fixFilepath(char*)>:
c0020e4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e50:	8a 00                	mov    al,BYTE PTR [eax]
c0020e52:	3c 40                	cmp    al,0x40
c0020e54:	7e 2c                	jle    c0020e82 <FAT::fixFilepath(char*)+0x36>
c0020e56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e5a:	8a 00                	mov    al,BYTE PTR [eax]
c0020e5c:	83 e8 41             	sub    eax,0x41
c0020e5f:	88 c2                	mov    dl,al
c0020e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e65:	88 10                	mov    BYTE PTR [eax],dl
c0020e67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e6b:	8a 00                	mov    al,BYTE PTR [eax]
c0020e6d:	0f be c0             	movsx  eax,al
c0020e70:	8b 04 85 20 fa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd05e0]
c0020e77:	83 c0 30             	add    eax,0x30
c0020e7a:	88 c2                	mov    dl,al
c0020e7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e80:	88 10                	mov    BYTE PTR [eax],dl
c0020e82:	90                   	nop
c0020e83:	c3                   	ret    

c0020e84 <FAT::open(char const*, void**, FileOpenMode)>:
c0020e84:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020e8a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020e92:	74 0a                	je     c0020e9e <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020e94:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020e9c:	75 0a                	jne    c0020ea8 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020e9e:	b8 04 00 00 00       	mov    eax,0x4
c0020ea3:	e9 fd 00 00 00       	jmp    c0020fa5 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020ea8:	83 ec 08             	sub    esp,0x8
c0020eab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020eb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020eb6:	50                   	push   eax
c0020eb7:	e8 50 f9 fd ff       	call   c000080c <strcpy>
c0020ebc:	83 c4 10             	add    esp,0x10
c0020ebf:	83 ec 08             	sub    esp,0x8
c0020ec2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020ec6:	50                   	push   eax
c0020ec7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ece:	e8 79 ff ff ff       	call   c0020e4c <FAT::fixFilepath(char*)>
c0020ed3:	83 c4 10             	add    esp,0x10
c0020ed6:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020ede:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020ee5:	83 e0 01             	and    eax,0x1
c0020ee8:	74 08                	je     c0020ef2 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020eea:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020ef2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020ef9:	83 e0 04             	and    eax,0x4
c0020efc:	74 10                	je     c0020f0e <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020efe:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020f06:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020f0e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f15:	83 e0 02             	and    eax,0x2
c0020f18:	74 08                	je     c0020f22 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020f1a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020f22:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f29:	83 e0 08             	and    eax,0x8
c0020f2c:	74 08                	je     c0020f36 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020f2e:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020f36:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f3d:	83 e0 10             	and    eax,0x10
c0020f40:	74 08                	je     c0020f4a <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020f42:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020f4a:	83 ec 0c             	sub    esp,0xc
c0020f4d:	68 50 02 00 00       	push   0x250
c0020f52:	e8 02 e9 fe ff       	call   c000f859 <malloc>
c0020f57:	83 c4 10             	add    esp,0x10
c0020f5a:	89 c2                	mov    edx,eax
c0020f5c:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020f63:	89 10                	mov    DWORD PTR [eax],edx
c0020f65:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020f6d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020f74:	8b 00                	mov    eax,DWORD PTR [eax]
c0020f76:	83 ec 04             	sub    esp,0x4
c0020f79:	52                   	push   edx
c0020f7a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020f7e:	52                   	push   edx
c0020f7f:	50                   	push   eax
c0020f80:	e8 d2 3f fe ff       	call   c0004f57 <f_open>
c0020f85:	83 c4 10             	add    esp,0x10
c0020f88:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020f8f:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020f97:	74 07                	je     c0020fa0 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020f99:	b8 01 00 00 00       	mov    eax,0x1
c0020f9e:	eb 05                	jmp    c0020fa5 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020fa0:	b8 00 00 00 00       	mov    eax,0x0
c0020fa5:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020fab:	c3                   	ret    

c0020fac <FAT::openDir(char const*, void**)>:
c0020fac:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020fb2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020fba:	74 0a                	je     c0020fc6 <FAT::openDir(char const*, void**)+0x1a>
c0020fbc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020fc4:	75 07                	jne    c0020fcd <FAT::openDir(char const*, void**)+0x21>
c0020fc6:	b8 04 00 00 00       	mov    eax,0x4
c0020fcb:	eb 7d                	jmp    c002104a <FAT::openDir(char const*, void**)+0x9e>
c0020fcd:	83 ec 08             	sub    esp,0x8
c0020fd0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020fd7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020fdb:	50                   	push   eax
c0020fdc:	e8 2b f8 fd ff       	call   c000080c <strcpy>
c0020fe1:	83 c4 10             	add    esp,0x10
c0020fe4:	83 ec 08             	sub    esp,0x8
c0020fe7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020feb:	50                   	push   eax
c0020fec:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ff3:	e8 54 fe ff ff       	call   c0020e4c <FAT::fixFilepath(char*)>
c0020ff8:	83 c4 10             	add    esp,0x10
c0020ffb:	83 ec 0c             	sub    esp,0xc
c0020ffe:	6a 4c                	push   0x4c
c0021000:	e8 54 e8 fe ff       	call   c000f859 <malloc>
c0021005:	83 c4 10             	add    esp,0x10
c0021008:	89 c2                	mov    edx,eax
c002100a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021011:	89 10                	mov    DWORD PTR [eax],edx
c0021013:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002101a:	8b 00                	mov    eax,DWORD PTR [eax]
c002101c:	83 ec 08             	sub    esp,0x8
c002101f:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021023:	52                   	push   edx
c0021024:	50                   	push   eax
c0021025:	e8 65 4f fe ff       	call   c0005f8f <f_opendir>
c002102a:	83 c4 10             	add    esp,0x10
c002102d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021034:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c002103c:	74 07                	je     c0021045 <FAT::openDir(char const*, void**)+0x99>
c002103e:	b8 01 00 00 00       	mov    eax,0x1
c0021043:	eb 05                	jmp    c002104a <FAT::openDir(char const*, void**)+0x9e>
c0021045:	b8 00 00 00 00       	mov    eax,0x0
c002104a:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021050:	c3                   	ret    
c0021051:	90                   	nop

c0021052 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021052:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021058:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021060:	75 0a                	jne    c002106c <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021062:	b8 04 00 00 00       	mov    eax,0x4
c0021067:	e9 c9 00 00 00       	jmp    c0021135 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002106c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021074:	75 0a                	jne    c0021080 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021076:	b8 04 00 00 00       	mov    eax,0x4
c002107b:	e9 b5 00 00 00       	jmp    c0021135 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021080:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021088:	75 0a                	jne    c0021094 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c002108a:	b8 04 00 00 00       	mov    eax,0x4
c002108f:	e9 a1 00 00 00       	jmp    c0021135 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021094:	83 ec 08             	sub    esp,0x8
c0021097:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002109e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00210a5:	50                   	push   eax
c00210a6:	e8 61 f7 fd ff       	call   c000080c <strcpy>
c00210ab:	83 c4 10             	add    esp,0x10
c00210ae:	83 ec 08             	sub    esp,0x8
c00210b1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00210b8:	50                   	push   eax
c00210b9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00210c0:	e8 87 fd ff ff       	call   c0020e4c <FAT::fixFilepath(char*)>
c00210c5:	83 c4 10             	add    esp,0x10
c00210c8:	83 ec 08             	sub    esp,0x8
c00210cb:	8d 44 24 08          	lea    eax,[esp+0x8]
c00210cf:	50                   	push   eax
c00210d0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00210d7:	50                   	push   eax
c00210d8:	e8 71 50 fe ff       	call   c000614e <f_stat>
c00210dd:	83 c4 10             	add    esp,0x10
c00210e0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00210e7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00210ee:	85 c0                	test   eax,eax
c00210f0:	74 07                	je     c00210f9 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c00210f2:	83 f8 04             	cmp    eax,0x4
c00210f5:	74 32                	je     c0021129 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c00210f7:	eb 37                	jmp    c0021130 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c00210f9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00210fd:	0f b6 c0             	movzx  eax,al
c0021100:	83 e0 10             	and    eax,0x10
c0021103:	0f 95 c2             	setne  dl
c0021106:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c002110d:	88 10                	mov    BYTE PTR [eax],dl
c002110f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021112:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021116:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c002111d:	89 01                	mov    DWORD PTR [ecx],eax
c002111f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021122:	b8 00 00 00 00       	mov    eax,0x0
c0021127:	eb 0c                	jmp    c0021135 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021129:	b8 02 00 00 00       	mov    eax,0x2
c002112e:	eb 05                	jmp    c0021135 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021130:	b8 01 00 00 00       	mov    eax,0x1
c0021135:	81 c4 2c 02 00 00    	add    esp,0x22c
c002113b:	c3                   	ret    

c002113c <FAT::unlink(char const*)>:
c002113c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021142:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002114a:	75 07                	jne    c0021153 <FAT::unlink(char const*)+0x17>
c002114c:	b8 04 00 00 00       	mov    eax,0x4
c0021151:	eb 5c                	jmp    c00211af <FAT::unlink(char const*)+0x73>
c0021153:	83 ec 08             	sub    esp,0x8
c0021156:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002115d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021161:	50                   	push   eax
c0021162:	e8 a5 f6 fd ff       	call   c000080c <strcpy>
c0021167:	83 c4 10             	add    esp,0x10
c002116a:	83 ec 08             	sub    esp,0x8
c002116d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021171:	50                   	push   eax
c0021172:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021179:	e8 ce fc ff ff       	call   c0020e4c <FAT::fixFilepath(char*)>
c002117e:	83 c4 10             	add    esp,0x10
c0021181:	83 ec 0c             	sub    esp,0xc
c0021184:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021188:	50                   	push   eax
c0021189:	e8 12 53 fe ff       	call   c00064a0 <f_unlink>
c002118e:	83 c4 10             	add    esp,0x10
c0021191:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021198:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002119f:	85 c0                	test   eax,eax
c00211a1:	75 07                	jne    c00211aa <FAT::unlink(char const*)+0x6e>
c00211a3:	b8 00 00 00 00       	mov    eax,0x0
c00211a8:	eb 05                	jmp    c00211af <FAT::unlink(char const*)+0x73>
c00211aa:	b8 01 00 00 00       	mov    eax,0x1
c00211af:	81 c4 1c 01 00 00    	add    esp,0x11c
c00211b5:	c3                   	ret    

c00211b6 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00211b6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00211bc:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00211c3:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00211ca:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00211ce:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00211d2:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00211da:	75 0a                	jne    c00211e6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00211dc:	b8 04 00 00 00       	mov    eax,0x4
c00211e1:	e9 1c 01 00 00       	jmp    c0021302 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00211e6:	83 ec 08             	sub    esp,0x8
c00211e9:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00211f0:	8d 44 24 24          	lea    eax,[esp+0x24]
c00211f4:	50                   	push   eax
c00211f5:	e8 12 f6 fd ff       	call   c000080c <strcpy>
c00211fa:	83 c4 10             	add    esp,0x10
c00211fd:	83 ec 08             	sub    esp,0x8
c0021200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021204:	50                   	push   eax
c0021205:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002120c:	e8 3b fc ff ff       	call   c0020e4c <FAT::fixFilepath(char*)>
c0021211:	83 c4 10             	add    esp,0x10
c0021214:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c002121c:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021224:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021229:	83 e0 01             	and    eax,0x1
c002122c:	74 08                	je     c0021236 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c002122e:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021236:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002123b:	83 e0 02             	and    eax,0x2
c002123e:	74 08                	je     c0021248 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021240:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021248:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002124d:	83 e0 04             	and    eax,0x4
c0021250:	74 08                	je     c002125a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021252:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c002125a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002125f:	83 e0 08             	and    eax,0x8
c0021262:	74 08                	je     c002126c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021264:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c002126c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021271:	83 e0 01             	and    eax,0x1
c0021274:	74 08                	je     c002127e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021276:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c002127e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021283:	83 e0 02             	and    eax,0x2
c0021286:	74 08                	je     c0021290 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021288:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021290:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021295:	83 e0 04             	and    eax,0x4
c0021298:	74 08                	je     c00212a2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c002129a:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00212a2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00212a7:	83 e0 08             	and    eax,0x8
c00212aa:	74 08                	je     c00212b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00212ac:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00212b4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00212bb:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00212c2:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00212ca:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00212d2:	83 ec 04             	sub    esp,0x4
c00212d5:	52                   	push   edx
c00212d6:	50                   	push   eax
c00212d7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00212db:	50                   	push   eax
c00212dc:	e8 61 58 fe ff       	call   c0006b42 <f_chmod>
c00212e1:	83 c4 10             	add    esp,0x10
c00212e4:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00212eb:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00212f2:	85 c0                	test   eax,eax
c00212f4:	75 07                	jne    c00212fd <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c00212f6:	b8 00 00 00 00       	mov    eax,0x0
c00212fb:	eb 05                	jmp    c0021302 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00212fd:	b8 01 00 00 00       	mov    eax,0x1
c0021302:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021308:	c3                   	ret    
c0021309:	90                   	nop

c002130a <FAT::rename(char const*, char const*)>:
c002130a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021310:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021318:	74 0a                	je     c0021324 <FAT::rename(char const*, char const*)+0x1a>
c002131a:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021322:	75 0a                	jne    c002132e <FAT::rename(char const*, char const*)+0x24>
c0021324:	b8 04 00 00 00       	mov    eax,0x4
c0021329:	e9 98 00 00 00       	jmp    c00213c6 <FAT::rename(char const*, char const*)+0xbc>
c002132e:	83 ec 08             	sub    esp,0x8
c0021331:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021338:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002133f:	50                   	push   eax
c0021340:	e8 c7 f4 fd ff       	call   c000080c <strcpy>
c0021345:	83 c4 10             	add    esp,0x10
c0021348:	83 ec 08             	sub    esp,0x8
c002134b:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021352:	50                   	push   eax
c0021353:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002135a:	e8 ed fa ff ff       	call   c0020e4c <FAT::fixFilepath(char*)>
c002135f:	83 c4 10             	add    esp,0x10
c0021362:	83 ec 08             	sub    esp,0x8
c0021365:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c002136c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021370:	50                   	push   eax
c0021371:	e8 96 f4 fd ff       	call   c000080c <strcpy>
c0021376:	83 c4 10             	add    esp,0x10
c0021379:	83 ec 08             	sub    esp,0x8
c002137c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021380:	50                   	push   eax
c0021381:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021388:	e8 bf fa ff ff       	call   c0020e4c <FAT::fixFilepath(char*)>
c002138d:	83 c4 10             	add    esp,0x10
c0021390:	83 ec 08             	sub    esp,0x8
c0021393:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021397:	50                   	push   eax
c0021398:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002139f:	50                   	push   eax
c00213a0:	e8 aa 54 fe ff       	call   c000684f <f_rename>
c00213a5:	83 c4 10             	add    esp,0x10
c00213a8:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00213af:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00213b6:	85 c0                	test   eax,eax
c00213b8:	75 07                	jne    c00213c1 <FAT::rename(char const*, char const*)+0xb7>
c00213ba:	b8 00 00 00 00       	mov    eax,0x0
c00213bf:	eb 05                	jmp    c00213c6 <FAT::rename(char const*, char const*)+0xbc>
c00213c1:	b8 01 00 00 00       	mov    eax,0x1
c00213c6:	81 c4 1c 02 00 00    	add    esp,0x21c
c00213cc:	c3                   	ret    
c00213cd:	90                   	nop

c00213ce <FAT::mkdir(char const*)>:
c00213ce:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00213d4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00213dc:	75 07                	jne    c00213e5 <FAT::mkdir(char const*)+0x17>
c00213de:	b8 04 00 00 00       	mov    eax,0x4
c00213e3:	eb 5c                	jmp    c0021441 <FAT::mkdir(char const*)+0x73>
c00213e5:	83 ec 08             	sub    esp,0x8
c00213e8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00213ef:	8d 44 24 18          	lea    eax,[esp+0x18]
c00213f3:	50                   	push   eax
c00213f4:	e8 13 f4 fd ff       	call   c000080c <strcpy>
c00213f9:	83 c4 10             	add    esp,0x10
c00213fc:	83 ec 08             	sub    esp,0x8
c00213ff:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021403:	50                   	push   eax
c0021404:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002140b:	e8 3c fa ff ff       	call   c0020e4c <FAT::fixFilepath(char*)>
c0021410:	83 c4 10             	add    esp,0x10
c0021413:	83 ec 0c             	sub    esp,0xc
c0021416:	8d 44 24 18          	lea    eax,[esp+0x18]
c002141a:	50                   	push   eax
c002141b:	e8 03 52 fe ff       	call   c0006623 <f_mkdir>
c0021420:	83 c4 10             	add    esp,0x10
c0021423:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002142a:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021431:	85 c0                	test   eax,eax
c0021433:	75 07                	jne    c002143c <FAT::mkdir(char const*)+0x6e>
c0021435:	b8 00 00 00 00       	mov    eax,0x0
c002143a:	eb 05                	jmp    c0021441 <FAT::mkdir(char const*)+0x73>
c002143c:	b8 01 00 00 00       	mov    eax,0x1
c0021441:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021447:	c3                   	ret    

c0021448 <FAT::exists(char const*)>:
c0021448:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002144e:	83 ec 08             	sub    esp,0x8
c0021451:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021458:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002145c:	50                   	push   eax
c002145d:	e8 aa f3 fd ff       	call   c000080c <strcpy>
c0021462:	83 c4 10             	add    esp,0x10
c0021465:	83 ec 08             	sub    esp,0x8
c0021468:	8d 44 24 08          	lea    eax,[esp+0x8]
c002146c:	50                   	push   eax
c002146d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021474:	e8 d3 f9 ff ff       	call   c0020e4c <FAT::fixFilepath(char*)>
c0021479:	83 c4 10             	add    esp,0x10
c002147c:	83 ec 08             	sub    esp,0x8
c002147f:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021486:	50                   	push   eax
c0021487:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002148b:	50                   	push   eax
c002148c:	e8 bd 4c fe ff       	call   c000614e <f_stat>
c0021491:	83 c4 10             	add    esp,0x10
c0021494:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002149b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00214a2:	85 c0                	test   eax,eax
c00214a4:	75 04                	jne    c00214aa <FAT::exists(char const*)+0x62>
c00214a6:	b0 01                	mov    al,0x1
c00214a8:	eb 02                	jmp    c00214ac <FAT::exists(char const*)+0x64>
c00214aa:	b0 00                	mov    al,0x0
c00214ac:	81 c4 2c 02 00 00    	add    esp,0x22c
c00214b2:	c3                   	ret    
c00214b3:	90                   	nop

c00214b4 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00214b4:	b8 08 00 00 00       	mov    eax,0x8
c00214b9:	c3                   	ret    

c00214ba <ISO9660::seek(void*, unsigned long long)>:
c00214ba:	53                   	push   ebx
c00214bb:	b8 04 00 00 00       	mov    eax,0x4
c00214c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00214c4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00214c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00214cc:	85 d2                	test   edx,edx
c00214ce:	74 17                	je     c00214e7 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00214d0:	89 c8                	mov    eax,ecx
c00214d2:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00214d5:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00214d8:	b8 01 00 00 00       	mov    eax,0x1
c00214dd:	73 08                	jae    c00214e7 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00214df:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00214e2:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00214e5:	31 c0                	xor    eax,eax
c00214e7:	5b                   	pop    ebx
c00214e8:	c3                   	ret    
c00214e9:	90                   	nop

c00214ea <ISO9660::tell(void*, unsigned long long*)>:
c00214ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00214ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00214f2:	85 d2                	test   edx,edx
c00214f4:	74 12                	je     c0021508 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00214f6:	85 c0                	test   eax,eax
c00214f8:	74 0e                	je     c0021508 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00214fa:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00214fd:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021500:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021503:	89 10                	mov    DWORD PTR [eax],edx
c0021505:	31 c0                	xor    eax,eax
c0021507:	c3                   	ret    
c0021508:	b8 04 00 00 00       	mov    eax,0x4
c002150d:	c3                   	ret    

c002150e <ISO9660::getName()>:
c002150e:	b8 30 c9 02 c0       	mov    eax,0xc002c930
c0021513:	c3                   	ret    

c0021514 <ISO9660::stat(void*, unsigned long long*)>:
c0021514:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021518:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002151c:	85 d2                	test   edx,edx
c002151e:	74 12                	je     c0021532 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021520:	85 c0                	test   eax,eax
c0021522:	74 0e                	je     c0021532 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021524:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021527:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c002152a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002152d:	89 10                	mov    DWORD PTR [eax],edx
c002152f:	31 c0                	xor    eax,eax
c0021531:	c3                   	ret    
c0021532:	b8 04 00 00 00       	mov    eax,0x4
c0021537:	c3                   	ret    

c0021538 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021538:	b8 01 00 00 00       	mov    eax,0x1
c002153d:	c3                   	ret    

c002153e <ISO9660::unlink(char const*)>:
c002153e:	b8 01 00 00 00       	mov    eax,0x1
c0021543:	c3                   	ret    

c0021544 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021544:	b8 01 00 00 00       	mov    eax,0x1
c0021549:	c3                   	ret    

c002154a <ISO9660::rename(char const*, char const*)>:
c002154a:	b8 01 00 00 00       	mov    eax,0x1
c002154f:	c3                   	ret    

c0021550 <ISO9660::mkdir(char const*)>:
c0021550:	b8 01 00 00 00       	mov    eax,0x1
c0021555:	c3                   	ret    

c0021556 <ISO9660::close(void*)>:
c0021556:	83 ec 0c             	sub    esp,0xc
c0021559:	b8 04 00 00 00       	mov    eax,0x4
c002155e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021562:	85 d2                	test   edx,edx
c0021564:	74 0e                	je     c0021574 <ISO9660::close(void*)+0x1e>
c0021566:	83 ec 0c             	sub    esp,0xc
c0021569:	52                   	push   edx
c002156a:	e8 fa e2 fe ff       	call   c000f869 <free>
c002156f:	83 c4 10             	add    esp,0x10
c0021572:	31 c0                	xor    eax,eax
c0021574:	83 c4 0c             	add    esp,0xc
c0021577:	c3                   	ret    

c0021578 <ISO9660::closeDir(void*)>:
c0021578:	83 ec 0c             	sub    esp,0xc
c002157b:	b8 04 00 00 00       	mov    eax,0x4
c0021580:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021584:	85 d2                	test   edx,edx
c0021586:	74 0e                	je     c0021596 <ISO9660::closeDir(void*)+0x1e>
c0021588:	83 ec 0c             	sub    esp,0xc
c002158b:	52                   	push   edx
c002158c:	e8 d8 e2 fe ff       	call   c000f869 <free>
c0021591:	83 c4 10             	add    esp,0x10
c0021594:	31 c0                	xor    eax,eax
c0021596:	83 c4 0c             	add    esp,0xc
c0021599:	c3                   	ret    

c002159a <ISO9660::~ISO9660()>:
c002159a:	83 ec 0c             	sub    esp,0xc
c002159d:	ba 54 c9 02 c0       	mov    edx,0xc002c954
c00215a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215a6:	89 10                	mov    DWORD PTR [eax],edx
c00215a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215ac:	83 ec 0c             	sub    esp,0xc
c00215af:	50                   	push   eax
c00215b0:	e8 2b 16 ff ff       	call   c0012be0 <Filesystem::~Filesystem()>
c00215b5:	83 c4 10             	add    esp,0x10
c00215b8:	90                   	nop
c00215b9:	83 c4 0c             	add    esp,0xc
c00215bc:	c3                   	ret    
c00215bd:	90                   	nop

c00215be <ISO9660::~ISO9660()>:
c00215be:	83 ec 0c             	sub    esp,0xc
c00215c1:	83 ec 0c             	sub    esp,0xc
c00215c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00215c8:	e8 cd ff ff ff       	call   c002159a <ISO9660::~ISO9660()>
c00215cd:	83 c4 10             	add    esp,0x10
c00215d0:	83 ec 08             	sub    esp,0x8
c00215d3:	6a 08                	push   0x8
c00215d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00215d9:	e8 fb 11 ff ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c00215de:	83 c4 10             	add    esp,0x10
c00215e1:	83 c4 0c             	add    esp,0xc
c00215e4:	c3                   	ret    

c00215e5 <__memmem(unsigned char*, int, unsigned char*, int)>:
c00215e5:	55                   	push   ebp
c00215e6:	31 c9                	xor    ecx,ecx
c00215e8:	57                   	push   edi
c00215e9:	56                   	push   esi
c00215ea:	53                   	push   ebx
c00215eb:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00215ef:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00215f3:	89 eb                	mov    ebx,ebp
c00215f5:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00215f9:	39 ce                	cmp    esi,ecx
c00215fb:	7e 17                	jle    c0021614 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00215fd:	31 d2                	xor    edx,edx
c00215ff:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021603:	7d 13                	jge    c0021618 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021605:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021609:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002160c:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c002160f:	75 0d                	jne    c002161e <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021611:	42                   	inc    edx
c0021612:	eb eb                	jmp    c00215ff <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021614:	31 c0                	xor    eax,eax
c0021616:	eb 0a                	jmp    c0021622 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021618:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c002161c:	eb 04                	jmp    c0021622 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002161e:	41                   	inc    ecx
c002161f:	43                   	inc    ebx
c0021620:	eb d7                	jmp    c00215f9 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021622:	5b                   	pop    ebx
c0021623:	5e                   	pop    esi
c0021624:	5f                   	pop    edi
c0021625:	5d                   	pop    ebp
c0021626:	c3                   	ret    

c0021627 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021627:	57                   	push   edi
c0021628:	56                   	push   esi
c0021629:	53                   	push   ebx
c002162a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002162e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021632:	39 0d 00 fb 02 c0    	cmp    DWORD PTR ds:0xc002fb00,ecx
c0021638:	75 08                	jne    c0021642 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c002163a:	38 05 94 d9 02 c0    	cmp    BYTE PTR ds:0xc002d994,al
c0021640:	74 2b                	je     c002166d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c0021642:	83 ec 0c             	sub    esp,0xc
c0021645:	a2 94 d9 02 c0       	mov    ds:0xc002d994,al
c002164a:	68 20 fb 02 c0       	push   0xc002fb20
c002164f:	0f be c0             	movsx  eax,al
c0021652:	6a 01                	push   0x1
c0021654:	89 0d 00 fb 02 c0    	mov    DWORD PTR ds:0xc002fb00,ecx
c002165a:	31 db                	xor    ebx,ebx
c002165c:	53                   	push   ebx
c002165d:	51                   	push   ecx
c002165e:	ff 34 85 fc e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd1704]
c0021665:	e8 a2 4b ff ff       	call   c001620c <LogicalDisk::read(unsigned long long, int, void*)>
c002166a:	83 c4 20             	add    esp,0x20
c002166d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021671:	be 20 fb 02 c0       	mov    esi,0xc002fb20
c0021676:	b9 00 08 00 00       	mov    ecx,0x800
c002167b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002167d:	5b                   	pop    ebx
c002167e:	5e                   	pop    esi
c002167f:	5f                   	pop    edi
c0021680:	c3                   	ret    
c0021681:	90                   	nop

c0021682 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021682:	81 ec 10 08 00 00    	sub    esp,0x810
c0021688:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c002168f:	83 c0 41             	add    eax,0x41
c0021692:	0f be c0             	movsx  eax,al
c0021695:	50                   	push   eax
c0021696:	8d 44 24 08          	lea    eax,[esp+0x8]
c002169a:	50                   	push   eax
c002169b:	6a 10                	push   0x10
c002169d:	e8 85 ff ff ff       	call   c0021627 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00216a2:	83 c4 10             	add    esp,0x10
c00216a5:	31 c0                	xor    eax,eax
c00216a7:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00216ac:	75 1d                	jne    c00216cb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00216ae:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00216b3:	75 16                	jne    c00216cb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00216b5:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00216ba:	75 0f                	jne    c00216cb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00216bc:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00216c1:	75 08                	jne    c00216cb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00216c3:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00216c8:	0f 94 c0             	sete   al
c00216cb:	81 c4 0c 08 00 00    	add    esp,0x80c
c00216d1:	c3                   	ret    

c00216d2 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00216d2:	55                   	push   ebp
c00216d3:	57                   	push   edi
c00216d4:	56                   	push   esi
c00216d5:	53                   	push   ebx
c00216d6:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00216dc:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00216e3:	85 ed                	test   ebp,ebp
c00216e5:	0f 84 da 01 00 00    	je     c00218c5 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00216eb:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00216f3:	0f 84 cc 01 00 00    	je     c00218c5 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00216f9:	b8 01 00 00 00       	mov    eax,0x1
c00216fe:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021702:	0f 85 c2 01 00 00    	jne    c00218ca <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021708:	31 d2                	xor    edx,edx
c002170a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021711:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021714:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0021717:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c002171a:	89 04 24             	mov    DWORD PTR [esp],eax
c002171d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021721:	01 c8                	add    eax,ecx
c0021723:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021726:	11 da                	adc    edx,ebx
c0021728:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c002172c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021730:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021734:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021738:	19 d7                	sbb    edi,edx
c002173a:	72 11                	jb     c002174d <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c002173c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c002173f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021743:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021747:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002174b:	eb 0c                	jmp    c0021759 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c002174d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0021751:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021755:	29 ce                	sub    esi,ecx
c0021757:	19 df                	sbb    edi,ebx
c0021759:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002175c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c002175f:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021763:	c1 e0 0b             	shl    eax,0xb
c0021766:	01 c8                	add    eax,ecx
c0021768:	11 da                	adc    edx,ebx
c002176a:	89 04 24             	mov    DWORD PTR [esp],eax
c002176d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021771:	51                   	push   ecx
c0021772:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021776:	50                   	push   eax
c0021777:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c002177b:	53                   	push   ebx
c002177c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021784:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021788:	50                   	push   eax
c0021789:	e8 99 fe ff ff       	call   c0021627 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002178e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021791:	b8 00 08 00 00       	mov    eax,0x800
c0021796:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002179c:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c00217a0:	29 d0                	sub    eax,edx
c00217a2:	83 c4 10             	add    esp,0x10
c00217a5:	89 f9                	mov    ecx,edi
c00217a7:	39 c6                	cmp    esi,eax
c00217a9:	83 d9 00             	sbb    ecx,0x0
c00217ac:	7d 1b                	jge    c00217c9 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c00217ae:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00217b3:	75 12                	jne    c00217c7 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c00217b5:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00217bc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00217c2:	e9 fa 00 00 00       	jmp    c00218c1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00217c7:	89 f0                	mov    eax,esi
c00217c9:	01 d3                	add    ebx,edx
c00217cb:	31 d2                	xor    edx,edx
c00217cd:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00217d1:	39 c2                	cmp    edx,eax
c00217d3:	7d 14                	jge    c00217e9 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c00217d5:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00217dc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00217e0:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00217e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00217e6:	42                   	inc    edx
c00217e7:	eb e8                	jmp    c00217d1 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c00217e9:	89 c2                	mov    edx,eax
c00217eb:	85 c0                	test   eax,eax
c00217ed:	79 02                	jns    c00217f1 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c00217ef:	31 d2                	xor    edx,edx
c00217f1:	01 c2                	add    edx,eax
c00217f3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00217f6:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c00217fd:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0021801:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021805:	99                   	cdq    
c0021806:	01 c1                	add    ecx,eax
c0021808:	11 d3                	adc    ebx,edx
c002180a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002180e:	29 c6                	sub    esi,eax
c0021810:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0021814:	19 d7                	sbb    edi,edx
c0021816:	89 34 24             	mov    DWORD PTR [esp],esi
c0021819:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c002181d:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021822:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021825:	b8 00 00 00 00       	mov    eax,0x0
c002182a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c002182e:	7d 43                	jge    c0021873 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0021830:	52                   	push   edx
c0021831:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021835:	50                   	push   eax
c0021836:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002183a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002183e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021842:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021846:	50                   	push   eax
c0021847:	e8 db fd ff ff       	call   c0021627 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002184c:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021854:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021859:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0021861:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021869:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c002186e:	83 c4 10             	add    esp,0x10
c0021871:	eb aa                	jmp    c002181d <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0021873:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021877:	0b 04 24             	or     eax,DWORD PTR [esp]
c002187a:	74 2a                	je     c00218a6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c002187c:	50                   	push   eax
c002187d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021881:	50                   	push   eax
c0021882:	8d 74 24 28          	lea    esi,[esp+0x28]
c0021886:	56                   	push   esi
c0021887:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002188b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002188f:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0021893:	51                   	push   ecx
c0021894:	e8 8e fd ff ff       	call   c0021627 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021899:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002189d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00218a1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00218a3:	83 c4 10             	add    esp,0x10
c00218a6:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00218ad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00218b1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00218b5:	89 18                	mov    DWORD PTR [eax],ebx
c00218b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218bb:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00218be:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00218c1:	31 c0                	xor    eax,eax
c00218c3:	eb 05                	jmp    c00218ca <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c00218c5:	b8 04 00 00 00       	mov    eax,0x4
c00218ca:	81 c4 2c 08 00 00    	add    esp,0x82c
c00218d0:	5b                   	pop    ebx
c00218d1:	5e                   	pop    esi
c00218d2:	5f                   	pop    edi
c00218d3:	5d                   	pop    ebp
c00218d4:	c3                   	ret    
c00218d5:	90                   	nop

c00218d6 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00218d6:	55                   	push   ebp
c00218d7:	57                   	push   edi
c00218d8:	56                   	push   esi
c00218d9:	53                   	push   ebx
c00218da:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00218e0:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c00218e7:	85 ed                	test   ebp,ebp
c00218e9:	0f 84 51 02 00 00    	je     c0021b40 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c00218ef:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c00218f7:	0f 84 43 02 00 00    	je     c0021b40 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c00218fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021900:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0021903:	75 0a                	jne    c002190f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021905:	b8 07 00 00 00       	mov    eax,0x7
c002190a:	e9 36 02 00 00       	jmp    c0021b45 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c002190f:	50                   	push   eax
c0021910:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021914:	50                   	push   eax
c0021915:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002191c:	53                   	push   ebx
c002191d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021920:	c1 e0 0b             	shl    eax,0xb
c0021923:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0021926:	c1 e8 0b             	shr    eax,0xb
c0021929:	50                   	push   eax
c002192a:	e8 f8 fc ff ff       	call   c0021627 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002192f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021932:	83 c4 10             	add    esp,0x10
c0021935:	89 c1                	mov    ecx,eax
c0021937:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002193a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021940:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021943:	84 db                	test   bl,bl
c0021945:	0f 85 8b 00 00 00    	jne    c00219d6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c002194b:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0021951:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021954:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002195a:	29 c6                	sub    esi,eax
c002195c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0021960:	89 f3                	mov    ebx,esi
c0021962:	89 f1                	mov    ecx,esi
c0021964:	c1 fb 1f             	sar    ebx,0x1f
c0021967:	01 f0                	add    eax,esi
c0021969:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002196c:	11 da                	adc    edx,ebx
c002196e:	89 04 24             	mov    DWORD PTR [esp],eax
c0021971:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021975:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021978:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c002197b:	89 d8                	mov    eax,ebx
c002197d:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0021981:	ba 00 00 00 00       	mov    edx,0x0
c0021986:	19 f8                	sbb    eax,edi
c0021988:	b8 00 00 00 00       	mov    eax,0x0
c002198d:	73 08                	jae    c0021997 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c002198f:	89 f0                	mov    eax,esi
c0021991:	89 fa                	mov    edx,edi
c0021993:	29 c8                	sub    eax,ecx
c0021995:	19 da                	sbb    edx,ebx
c0021997:	89 d7                	mov    edi,edx
c0021999:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c002199c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c002199f:	09 c7                	or     edi,eax
c00219a1:	0f 84 5e ff ff ff    	je     c0021905 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00219a7:	57                   	push   edi
c00219a8:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00219ac:	50                   	push   eax
c00219ad:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00219b4:	53                   	push   ebx
c00219b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00219b8:	c1 e0 0b             	shl    eax,0xb
c00219bb:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00219bf:	c1 e8 0b             	shr    eax,0xb
c00219c2:	50                   	push   eax
c00219c3:	e8 5f fc ff ff       	call   c0021627 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219c8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00219cb:	83 c4 10             	add    esp,0x10
c00219ce:	25 ff 07 00 00       	and    eax,0x7ff
c00219d3:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c00219d6:	31 ff                	xor    edi,edi
c00219d8:	56                   	push   esi
c00219d9:	6a 28                	push   0x28
c00219db:	6a 00                	push   0x0
c00219dd:	8d 44 24 24          	lea    eax,[esp+0x24]
c00219e1:	50                   	push   eax
c00219e2:	e8 69 ed fd ff       	call   c0000750 <memset>
c00219e7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00219ea:	25 ff 07 00 00       	and    eax,0x7ff
c00219ef:	89 c6                	mov    esi,eax
c00219f1:	83 c6 21             	add    esi,0x21
c00219f4:	83 d7 00             	adc    edi,0x0
c00219f7:	83 c4 10             	add    esp,0x10
c00219fa:	31 c9                	xor    ecx,ecx
c00219fc:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0021a03:	83 f9 28             	cmp    ecx,0x28
c0021a06:	88 04 24             	mov    BYTE PTR [esp],al
c0021a09:	0f 94 c2             	sete   dl
c0021a0c:	88 d0                	mov    al,dl
c0021a0e:	ba ff 07 00 00       	mov    edx,0x7ff
c0021a13:	39 f2                	cmp    edx,esi
c0021a15:	ba 00 00 00 00       	mov    edx,0x0
c0021a1a:	19 fa                	sbb    edx,edi
c0021a1c:	0f 92 c2             	setb   dl
c0021a1f:	09 c2                	or     edx,eax
c0021a21:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021a25:	0f 94 c0             	sete   al
c0021a28:	08 d0                	or     al,dl
c0021a2a:	75 16                	jne    c0021a42 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021a2c:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021a30:	74 10                	je     c0021a42 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021a32:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021a35:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021a39:	41                   	inc    ecx
c0021a3a:	83 c6 01             	add    esi,0x1
c0021a3d:	83 d7 00             	adc    edi,0x0
c0021a40:	eb ba                	jmp    c00219fc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0021a42:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021a49:	83 ec 0c             	sub    esp,0xc
c0021a4c:	8d 74 24 24          	lea    esi,[esp+0x24]
c0021a50:	56                   	push   esi
c0021a51:	e8 16 ed fd ff       	call   c000076c <strlen>
c0021a56:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0021a5d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021a61:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021a69:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021a6c:	5a                   	pop    edx
c0021a6d:	25 ff 07 00 00       	and    eax,0x7ff
c0021a72:	59                   	pop    ecx
c0021a73:	01 f8                	add    eax,edi
c0021a75:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021a7b:	83 e0 02             	and    eax,0x2
c0021a7e:	3c 01                	cmp    al,0x1
c0021a80:	19 c0                	sbb    eax,eax
c0021a82:	83 c0 02             	add    eax,0x2
c0021a85:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021a89:	56                   	push   esi
c0021a8a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021a8e:	50                   	push   eax
c0021a8f:	e8 78 ed fd ff       	call   c000080c <strcpy>
c0021a94:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021a98:	83 c4 10             	add    esp,0x10
c0021a9b:	84 c0                	test   al,al
c0021a9d:	75 21                	jne    c0021ac0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0021a9f:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021aa7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021aaf:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021ab7:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021abe:	eb 28                	jmp    c0021ae8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021ac0:	fe c8                	dec    al
c0021ac2:	75 24                	jne    c0021ae8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021ac4:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021acc:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021ad4:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021adc:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021ae3:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021ae8:	8d 74 24 40          	lea    esi,[esp+0x40]
c0021aec:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0021af3:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0021afa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021afc:	0f b6 f3             	movzx  esi,bl
c0021aff:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0021b06:	31 db                	xor    ebx,ebx
c0021b08:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021b0e:	89 df                	mov    edi,ebx
c0021b10:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0021b13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021b16:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0021b19:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021b1c:	39 c6                	cmp    esi,eax
c0021b1e:	19 d7                	sbb    edi,edx
c0021b20:	72 10                	jb     c0021b32 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0021b22:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0021b29:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0021b30:	eb 0a                	jmp    c0021b3c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c0021b32:	29 f0                	sub    eax,esi
c0021b34:	19 da                	sbb    edx,ebx
c0021b36:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021b39:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021b3c:	31 c0                	xor    eax,eax
c0021b3e:	eb 05                	jmp    c0021b45 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021b40:	b8 04 00 00 00       	mov    eax,0x4
c0021b45:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021b4b:	5b                   	pop    ebx
c0021b4c:	5e                   	pop    esi
c0021b4d:	5f                   	pop    edi
c0021b4e:	5d                   	pop    ebp
c0021b4f:	c3                   	ret    

c0021b50 <readRoot(unsigned int*, unsigned int*, char)>:
c0021b50:	57                   	push   edi
c0021b51:	56                   	push   esi
c0021b52:	81 ec 38 08 00 00    	sub    esp,0x838
c0021b58:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021b60:	50                   	push   eax
c0021b61:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021b65:	50                   	push   eax
c0021b66:	6a 10                	push   0x10
c0021b68:	e8 ba fa ff ff       	call   c0021627 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b6d:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0021b74:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0021b78:	b9 22 00 00 00       	mov    ecx,0x22
c0021b7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021b7f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021b86:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021b8a:	89 10                	mov    DWORD PTR [eax],edx
c0021b8c:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021b93:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021b97:	89 10                	mov    DWORD PTR [eax],edx
c0021b99:	81 c4 44 08 00 00    	add    esp,0x844
c0021b9f:	b0 01                	mov    al,0x1
c0021ba1:	5e                   	pop    esi
c0021ba2:	5f                   	pop    edi
c0021ba3:	c3                   	ret    

c0021ba4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021ba4:	55                   	push   ebp
c0021ba5:	57                   	push   edi
c0021ba6:	56                   	push   esi
c0021ba7:	53                   	push   ebx
c0021ba8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021bae:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021bb5:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021bbc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021bc0:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021bc4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021bc8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021bcc:	75 03                	jne    c0021bd1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021bce:	83 c3 02             	add    ebx,0x2
c0021bd1:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021bd4:	75 03                	jne    c0021bd9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021bd6:	43                   	inc    ebx
c0021bd7:	eb f8                	jmp    c0021bd1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021bd9:	51                   	push   ecx
c0021bda:	68 00 01 00 00       	push   0x100
c0021bdf:	6a 00                	push   0x0
c0021be1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021be5:	50                   	push   eax
c0021be6:	e8 65 eb fd ff       	call   c0000750 <memset>
c0021beb:	83 c4 10             	add    esp,0x10
c0021bee:	31 d2                	xor    edx,edx
c0021bf0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021bf3:	84 c0                	test   al,al
c0021bf5:	74 21                	je     c0021c18 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021bf7:	3c 2f                	cmp    al,0x2f
c0021bf9:	75 0b                	jne    c0021c06 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021bfb:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021bff:	bd 01 00 00 00       	mov    ebp,0x1
c0021c04:	eb 14                	jmp    c0021c1a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021c06:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021c09:	80 f9 19             	cmp    cl,0x19
c0021c0c:	77 03                	ja     c0021c11 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021c0e:	83 e8 20             	sub    eax,0x20
c0021c11:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021c15:	42                   	inc    edx
c0021c16:	eb d8                	jmp    c0021bf0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021c18:	31 ed                	xor    ebp,ebp
c0021c1a:	83 ec 0c             	sub    esp,0xc
c0021c1d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021c24:	e8 30 dc fe ff       	call   c000f859 <malloc>
c0021c29:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021c30:	89 c6                	mov    esi,eax
c0021c32:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021c38:	c1 ef 0b             	shr    edi,0xb
c0021c3b:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021c42:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021c46:	83 c4 10             	add    esp,0x10
c0021c49:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021c4e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021c52:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021c59:	74 28                	je     c0021c83 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021c5b:	52                   	push   edx
c0021c5c:	57                   	push   edi
c0021c5d:	50                   	push   eax
c0021c5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021c62:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021c69:	e8 b9 f9 ff ff       	call   c0021627 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021c6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021c72:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021c79:	05 00 08 00 00       	add    eax,0x800
c0021c7e:	83 c4 10             	add    esp,0x10
c0021c81:	eb cb                	jmp    c0021c4e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021c83:	83 ec 0c             	sub    esp,0xc
c0021c86:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021c8a:	57                   	push   edi
c0021c8b:	e8 dc ea fd ff       	call   c000076c <strlen>
c0021c90:	50                   	push   eax
c0021c91:	57                   	push   edi
c0021c92:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021c99:	56                   	push   esi
c0021c9a:	e8 46 f9 ff ff       	call   c00215e5 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021c9f:	83 c4 20             	add    esp,0x20
c0021ca2:	85 c0                	test   eax,eax
c0021ca4:	75 13                	jne    c0021cb9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021ca6:	83 ec 0c             	sub    esp,0xc
c0021ca9:	56                   	push   esi
c0021caa:	e8 ba db fe ff       	call   c000f869 <free>
c0021caf:	83 c4 10             	add    esp,0x10
c0021cb2:	31 c0                	xor    eax,eax
c0021cb4:	e9 b3 00 00 00       	jmp    c0021d6c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021cb9:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021cbd:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021cc1:	c1 e7 08             	shl    edi,0x8
c0021cc4:	c1 e2 10             	shl    edx,0x10
c0021cc7:	09 d7                	or     edi,edx
c0021cc9:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021ccd:	09 d7                	or     edi,edx
c0021ccf:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021cd3:	c1 e2 18             	shl    edx,0x18
c0021cd6:	09 d7                	or     edi,edx
c0021cd8:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021cdc:	89 d1                	mov    ecx,edx
c0021cde:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021ce2:	c1 e1 08             	shl    ecx,0x8
c0021ce5:	c1 e2 10             	shl    edx,0x10
c0021ce8:	09 ca                	or     edx,ecx
c0021cea:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021cee:	09 ca                	or     edx,ecx
c0021cf0:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021cf4:	c1 e1 18             	shl    ecx,0x18
c0021cf7:	09 ca                	or     edx,ecx
c0021cf9:	89 e9                	mov    ecx,ebp
c0021cfb:	84 c9                	test   cl,cl
c0021cfd:	74 3c                	je     c0021d3b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021cff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021d03:	83 ec 0c             	sub    esp,0xc
c0021d06:	56                   	push   esi
c0021d07:	e8 5d db fe ff       	call   c000f869 <free>
c0021d0c:	83 c4 0c             	add    esp,0xc
c0021d0f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021d16:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021d1b:	50                   	push   eax
c0021d1c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021d23:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021d2a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021d2e:	52                   	push   edx
c0021d2f:	57                   	push   edi
c0021d30:	53                   	push   ebx
c0021d31:	e8 6e fe ff ff       	call   c0021ba4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021d36:	83 c4 20             	add    esp,0x20
c0021d39:	eb 31                	jmp    c0021d6c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021d3b:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021d3e:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021d45:	d0 e8                	shr    al,1
c0021d47:	89 3b                	mov    DWORD PTR [ebx],edi
c0021d49:	83 e0 01             	and    eax,0x1
c0021d4c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021d53:	83 ec 0c             	sub    esp,0xc
c0021d56:	89 13                	mov    DWORD PTR [ebx],edx
c0021d58:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021d5f:	89 03                	mov    DWORD PTR [ebx],eax
c0021d61:	56                   	push   esi
c0021d62:	e8 02 db fe ff       	call   c000f869 <free>
c0021d67:	83 c4 10             	add    esp,0x10
c0021d6a:	b0 01                	mov    al,0x1
c0021d6c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021d72:	5b                   	pop    ebx
c0021d73:	5e                   	pop    esi
c0021d74:	5f                   	pop    edi
c0021d75:	5d                   	pop    ebp
c0021d76:	c3                   	ret    

c0021d77 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021d77:	55                   	push   ebp
c0021d78:	57                   	push   edi
c0021d79:	56                   	push   esi
c0021d7a:	53                   	push   ebx
c0021d7b:	83 ec 20             	sub    esp,0x20
c0021d7e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021d82:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021d86:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021d8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021d92:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021d9a:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021d9f:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021da5:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021dab:	57                   	push   edi
c0021dac:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021db0:	50                   	push   eax
c0021db1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021db5:	50                   	push   eax
c0021db6:	e8 95 fd ff ff       	call   c0021b50 <readRoot(unsigned int*, unsigned int*, char)>
c0021dbb:	5a                   	pop    edx
c0021dbc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021dc0:	e8 a7 e9 fd ff       	call   c000076c <strlen>
c0021dc5:	83 c4 10             	add    esp,0x10
c0021dc8:	83 f8 03             	cmp    eax,0x3
c0021dcb:	77 17                	ja     c0021de4 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021dcd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021dd1:	89 03                	mov    DWORD PTR [ebx],eax
c0021dd3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021dd7:	89 06                	mov    DWORD PTR [esi],eax
c0021dd9:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021de0:	b0 01                	mov    al,0x1
c0021de2:	eb 19                	jmp    c0021dfd <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021de4:	50                   	push   eax
c0021de5:	55                   	push   ebp
c0021de6:	57                   	push   edi
c0021de7:	56                   	push   esi
c0021de8:	53                   	push   ebx
c0021de9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021ded:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021df1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021df5:	e8 aa fd ff ff       	call   c0021ba4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021dfa:	83 c4 20             	add    esp,0x20
c0021dfd:	83 c4 1c             	add    esp,0x1c
c0021e00:	5b                   	pop    ebx
c0021e01:	5e                   	pop    esi
c0021e02:	5f                   	pop    edi
c0021e03:	5d                   	pop    ebp
c0021e04:	c3                   	ret    
c0021e05:	90                   	nop

c0021e06 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021e06:	57                   	push   edi
c0021e07:	56                   	push   esi
c0021e08:	53                   	push   ebx
c0021e09:	83 ec 10             	sub    esp,0x10
c0021e0c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021e10:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021e14:	85 ff                	test   edi,edi
c0021e16:	0f 84 8b 00 00 00    	je     c0021ea7 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021e1c:	85 f6                	test   esi,esi
c0021e1e:	0f 84 83 00 00 00    	je     c0021ea7 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021e24:	b8 03 00 00 00       	mov    eax,0x3
c0021e29:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021e2e:	75 7c                	jne    c0021eac <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021e30:	83 ec 0c             	sub    esp,0xc
c0021e33:	6a 1c                	push   0x1c
c0021e35:	e8 1f da fe ff       	call   c000f859 <malloc>
c0021e3a:	89 07                	mov    DWORD PTR [edi],eax
c0021e3c:	89 c3                	mov    ebx,eax
c0021e3e:	58                   	pop    eax
c0021e3f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021e43:	50                   	push   eax
c0021e44:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021e47:	50                   	push   eax
c0021e48:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021e4c:	50                   	push   eax
c0021e4d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021e51:	50                   	push   eax
c0021e52:	56                   	push   esi
c0021e53:	e8 1f ff ff ff       	call   c0021d77 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021e58:	83 c4 20             	add    esp,0x20
c0021e5b:	84 c0                	test   al,al
c0021e5d:	74 07                	je     c0021e66 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c0021e5f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021e64:	74 0b                	je     c0021e71 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c0021e66:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021e6a:	b8 01 00 00 00       	mov    eax,0x1
c0021e6f:	eb 3b                	jmp    c0021eac <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021e71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e75:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021e79:	89 03                	mov    DWORD PTR [ebx],eax
c0021e7b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021e82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021e86:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021e8d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021e94:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021e97:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021e9e:	8a 06                	mov    al,BYTE PTR [esi]
c0021ea0:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021ea3:	31 c0                	xor    eax,eax
c0021ea5:	eb 05                	jmp    c0021eac <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021ea7:	b8 04 00 00 00       	mov    eax,0x4
c0021eac:	83 c4 10             	add    esp,0x10
c0021eaf:	5b                   	pop    ebx
c0021eb0:	5e                   	pop    esi
c0021eb1:	5f                   	pop    edi
c0021eb2:	c3                   	ret    
c0021eb3:	90                   	nop

c0021eb4 <ISO9660::exists(char const*)>:
c0021eb4:	83 ec 28             	sub    esp,0x28
c0021eb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021ebb:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021ebf:	52                   	push   edx
c0021ec0:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021ec3:	52                   	push   edx
c0021ec4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021ec8:	52                   	push   edx
c0021ec9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021ecd:	52                   	push   edx
c0021ece:	50                   	push   eax
c0021ecf:	e8 a3 fe ff ff       	call   c0021d77 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021ed4:	83 c4 3c             	add    esp,0x3c
c0021ed7:	c3                   	ret    

c0021ed8 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021ed8:	56                   	push   esi
c0021ed9:	53                   	push   ebx
c0021eda:	83 ec 14             	sub    esp,0x14
c0021edd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021ee1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021ee5:	85 db                	test   ebx,ebx
c0021ee7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021eeb:	0f 94 c2             	sete   dl
c0021eee:	85 f6                	test   esi,esi
c0021ef0:	0f 94 c0             	sete   al
c0021ef3:	08 c2                	or     dl,al
c0021ef5:	75 68                	jne    c0021f5f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021ef7:	85 c9                	test   ecx,ecx
c0021ef9:	74 64                	je     c0021f5f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021efb:	83 ec 0c             	sub    esp,0xc
c0021efe:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021f01:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021f05:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021f0b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021f12:	50                   	push   eax
c0021f13:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021f16:	50                   	push   eax
c0021f17:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f1b:	50                   	push   eax
c0021f1c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f20:	50                   	push   eax
c0021f21:	51                   	push   ecx
c0021f22:	e8 50 fe ff ff       	call   c0021d77 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021f27:	83 c4 20             	add    esp,0x20
c0021f2a:	ba 01 00 00 00       	mov    edx,0x1
c0021f2f:	84 c0                	test   al,al
c0021f31:	74 31                	je     c0021f64 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021f33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f37:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021f3e:	89 03                	mov    DWORD PTR [ebx],eax
c0021f40:	ba 00 00 00 00       	mov    edx,0x0
c0021f45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f49:	85 c0                	test   eax,eax
c0021f4b:	0f 95 06             	setne  BYTE PTR [esi]
c0021f4e:	74 14                	je     c0021f64 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021f50:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021f56:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021f5d:	eb 05                	jmp    c0021f64 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021f5f:	ba 04 00 00 00       	mov    edx,0x4
c0021f64:	83 c4 14             	add    esp,0x14
c0021f67:	89 d0                	mov    eax,edx
c0021f69:	5b                   	pop    ebx
c0021f6a:	5e                   	pop    esi
c0021f6b:	c3                   	ret    

c0021f6c <ISO9660::openDir(char const*, void**)>:
c0021f6c:	57                   	push   edi
c0021f6d:	56                   	push   esi
c0021f6e:	53                   	push   ebx
c0021f6f:	83 ec 10             	sub    esp,0x10
c0021f72:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021f76:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021f7a:	85 ff                	test   edi,edi
c0021f7c:	74 7b                	je     c0021ff9 <ISO9660::openDir(char const*, void**)+0x8d>
c0021f7e:	85 f6                	test   esi,esi
c0021f80:	74 77                	je     c0021ff9 <ISO9660::openDir(char const*, void**)+0x8d>
c0021f82:	83 ec 0c             	sub    esp,0xc
c0021f85:	6a 1c                	push   0x1c
c0021f87:	e8 cd d8 fe ff       	call   c000f859 <malloc>
c0021f8c:	89 07                	mov    DWORD PTR [edi],eax
c0021f8e:	89 c3                	mov    ebx,eax
c0021f90:	58                   	pop    eax
c0021f91:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021f95:	50                   	push   eax
c0021f96:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021f99:	50                   	push   eax
c0021f9a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f9e:	50                   	push   eax
c0021f9f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021fa3:	50                   	push   eax
c0021fa4:	56                   	push   esi
c0021fa5:	e8 cd fd ff ff       	call   c0021d77 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021faa:	83 c4 20             	add    esp,0x20
c0021fad:	84 c0                	test   al,al
c0021faf:	74 07                	je     c0021fb8 <ISO9660::openDir(char const*, void**)+0x4c>
c0021fb1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021fb6:	75 0b                	jne    c0021fc3 <ISO9660::openDir(char const*, void**)+0x57>
c0021fb8:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021fbc:	b8 01 00 00 00       	mov    eax,0x1
c0021fc1:	eb 3b                	jmp    c0021ffe <ISO9660::openDir(char const*, void**)+0x92>
c0021fc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fc7:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021fcb:	89 03                	mov    DWORD PTR [ebx],eax
c0021fcd:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021fd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021fd8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021fdf:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021fe6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021fe9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021ff0:	8a 06                	mov    al,BYTE PTR [esi]
c0021ff2:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021ff5:	31 c0                	xor    eax,eax
c0021ff7:	eb 05                	jmp    c0021ffe <ISO9660::openDir(char const*, void**)+0x92>
c0021ff9:	b8 04 00 00 00       	mov    eax,0x4
c0021ffe:	83 c4 10             	add    esp,0x10
c0022001:	5b                   	pop    ebx
c0022002:	5e                   	pop    esi
c0022003:	5f                   	pop    edi
c0022004:	c3                   	ret    
c0022005:	90                   	nop

c0022006 <ISO9660::ISO9660()>:
c0022006:	83 ec 0c             	sub    esp,0xc
c0022009:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002200d:	83 ec 0c             	sub    esp,0xc
c0022010:	50                   	push   eax
c0022011:	e8 a6 0b ff ff       	call   c0012bbc <Filesystem::Filesystem()>
c0022016:	83 c4 10             	add    esp,0x10
c0022019:	ba 54 c9 02 c0       	mov    edx,0xc002c954
c002201e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022022:	89 10                	mov    DWORD PTR [eax],edx
c0022024:	90                   	nop
c0022025:	83 c4 0c             	add    esp,0xc
c0022028:	c3                   	ret    
c0022029:	90                   	nop

c002202a <SoundChannel::SoundChannel(int, int, int, int)>:
c002202a:	83 ec 1c             	sub    esp,0x1c
c002202d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022031:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022035:	89 10                	mov    DWORD PTR [eax],edx
c0022037:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002203b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002203f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022042:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022046:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002204a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002204d:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022052:	75 23                	jne    c0022077 <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c0022054:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022058:	8b 10                	mov    edx,DWORD PTR [eax]
c002205a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002205e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022061:	0f af c2             	imul   eax,edx
c0022064:	85 c0                	test   eax,eax
c0022066:	79 03                	jns    c002206b <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c0022068:	83 c0 03             	add    eax,0x3
c002206b:	c1 f8 02             	sar    eax,0x2
c002206e:	05 a0 0f 00 00       	add    eax,0xfa0
c0022073:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022077:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002207b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002207f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022082:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022086:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c002208d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022091:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022098:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002209c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002209f:	c1 e0 02             	shl    eax,0x2
c00220a2:	83 ec 0c             	sub    esp,0xc
c00220a5:	50                   	push   eax
c00220a6:	e8 ae d7 fe ff       	call   c000f859 <malloc>
c00220ab:	83 c4 10             	add    esp,0x10
c00220ae:	89 c2                	mov    edx,eax
c00220b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00220b4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00220b7:	83 ec 04             	sub    esp,0x4
c00220ba:	8d 44 24 08          	lea    eax,[esp+0x8]
c00220be:	50                   	push   eax
c00220bf:	6a 01                	push   0x1
c00220c1:	6a 04                	push   0x4
c00220c3:	e8 d3 6c fe ff       	call   c0008d9b <src_new>
c00220c8:	83 c4 10             	add    esp,0x10
c00220cb:	89 c2                	mov    edx,eax
c00220cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00220d1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00220d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220d8:	85 c0                	test   eax,eax
c00220da:	74 10                	je     c00220ec <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c00220dc:	83 ec 0c             	sub    esp,0xc
c00220df:	68 b4 c9 02 c0       	push   0xc002c9b4
c00220e4:	e8 36 81 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c00220e9:	83 c4 10             	add    esp,0x10
c00220ec:	a0 20 07 03 c0       	mov    al,ds:0xc0030720
c00220f1:	83 f0 01             	xor    eax,0x1
c00220f4:	84 c0                	test   al,al
c00220f6:	74 57                	je     c002214f <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c00220f8:	a1 d0 c9 02 c0       	mov    eax,ds:0xc002c9d0
c00220fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022101:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022109:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022111:	7f 35                	jg     c0022148 <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c0022113:	83 ec 0c             	sub    esp,0xc
c0022116:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002211a:	e8 60 54 00 00       	call   c002757f <__floatsisf>
c002211f:	83 c4 10             	add    esp,0x10
c0022122:	8b 15 d0 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c9d0
c0022128:	83 ec 08             	sub    esp,0x8
c002212b:	52                   	push   edx
c002212c:	50                   	push   eax
c002212d:	e8 5f 50 00 00       	call   c0027191 <__mulsf3>
c0022132:	83 c4 10             	add    esp,0x10
c0022135:	89 c2                	mov    edx,eax
c0022137:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002213b:	89 14 85 20 03 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfce0],edx
c0022142:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022146:	eb c1                	jmp    c0022109 <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c0022148:	c6 05 20 07 03 c0 01 	mov    BYTE PTR ds:0xc0030720,0x1
c002214f:	90                   	nop
c0022150:	83 c4 1c             	add    esp,0x1c
c0022153:	c3                   	ret    

c0022154 <SoundChannel::~SoundChannel()>:
c0022154:	83 ec 0c             	sub    esp,0xc
c0022157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002215b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002215e:	83 ec 0c             	sub    esp,0xc
c0022161:	50                   	push   eax
c0022162:	e8 02 d7 fe ff       	call   c000f869 <free>
c0022167:	83 c4 10             	add    esp,0x10
c002216a:	90                   	nop
c002216b:	83 c4 0c             	add    esp,0xc
c002216e:	c3                   	ret    
c002216f:	90                   	nop

c0022170 <SoundChannel::getSampleRate()>:
c0022170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022174:	8b 00                	mov    eax,DWORD PTR [eax]
c0022176:	c3                   	ret    
c0022177:	90                   	nop

c0022178 <SoundChannel::getBits()>:
c0022178:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002217c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002217f:	c3                   	ret    

c0022180 <SoundChannel::getBufferUsed()>:
c0022180:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022184:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022187:	c3                   	ret    

c0022188 <SoundChannel::getBufferSize()>:
c0022188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002218c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002218f:	c3                   	ret    

c0022190 <SoundChannel::unbuffer(float*, int, int)>:
c0022190:	56                   	push   esi
c0022191:	53                   	push   ebx
c0022192:	83 ec 40             	sub    esp,0x40
c0022195:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022199:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002219c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00221a0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00221a3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00221a7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00221ab:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00221af:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00221b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00221b7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00221bb:	e8 bf 53 00 00       	call   c002757f <__floatsisf>
c00221c0:	5a                   	pop    edx
c00221c1:	89 c6                	mov    esi,eax
c00221c3:	ff 33                	push   DWORD PTR [ebx]
c00221c5:	e8 b5 53 00 00       	call   c002757f <__floatsisf>
c00221ca:	59                   	pop    ecx
c00221cb:	5a                   	pop    edx
c00221cc:	50                   	push   eax
c00221cd:	56                   	push   esi
c00221ce:	e8 81 51 00 00       	call   c0027354 <__divsf3>
c00221d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00221d6:	e8 74 66 00 00       	call   c002884f <__extendsfdf2>
c00221db:	59                   	pop    ecx
c00221dc:	5e                   	pop    esi
c00221dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00221e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00221e5:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00221ed:	8d 44 24 14          	lea    eax,[esp+0x14]
c00221f1:	50                   	push   eax
c00221f2:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00221f5:	e8 96 67 fe ff       	call   c0008990 <src_process>
c00221fa:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00221fe:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022201:	83 c4 0c             	add    esp,0xc
c0022204:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022207:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c002220a:	29 d0                	sub    eax,edx
c002220c:	c1 e0 02             	shl    eax,0x2
c002220f:	50                   	push   eax
c0022210:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022213:	50                   	push   eax
c0022214:	51                   	push   ecx
c0022215:	e8 6e e4 fd ff       	call   c0000688 <memmove>
c002221a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002221e:	83 c4 44             	add    esp,0x44
c0022221:	5b                   	pop    ebx
c0022222:	5e                   	pop    esi
c0022223:	c3                   	ret    

c0022224 <SoundChannel::buffer16(short*, int)>:
c0022224:	55                   	push   ebp
c0022225:	57                   	push   edi
c0022226:	56                   	push   esi
c0022227:	53                   	push   ebx
c0022228:	83 ec 1c             	sub    esp,0x1c
c002222b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002222f:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0022232:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0022235:	0f 84 d2 00 00 00    	je     c002230d <SoundChannel::buffer16(short*, int)+0xe9>
c002223b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c002223f:	85 ed                	test   ebp,ebp
c0022241:	0f 8e c6 00 00 00    	jle    c002230d <SoundChannel::buffer16(short*, int)+0xe9>
c0022247:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002224b:	bd 00 00 00 38       	mov    ebp,0x38000000
c0022250:	83 ec 0c             	sub    esp,0xc
c0022253:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0022256:	50                   	push   eax
c0022257:	e8 23 53 00 00       	call   c002757f <__floatsisf>
c002225c:	59                   	pop    ecx
c002225d:	8d 4e 01             	lea    ecx,[esi+0x1]
c0022260:	5f                   	pop    edi
c0022261:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0022264:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0022267:	55                   	push   ebp
c0022268:	50                   	push   eax
c0022269:	e8 23 4f 00 00       	call   c0027191 <__mulsf3>
c002226e:	83 c4 10             	add    esp,0x10
c0022271:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0022274:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0022277:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c002227a:	0f 84 99 00 00 00    	je     c0022319 <SoundChannel::buffer16(short*, int)+0xf5>
c0022280:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0022285:	74 78                	je     c00222ff <SoundChannel::buffer16(short*, int)+0xdb>
c0022287:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002228b:	83 ec 0c             	sub    esp,0xc
c002228e:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0022292:	50                   	push   eax
c0022293:	e8 e7 52 00 00       	call   c002757f <__floatsisf>
c0022298:	5f                   	pop    edi
c0022299:	8d 4e 01             	lea    ecx,[esi+0x1]
c002229c:	5a                   	pop    edx
c002229d:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00222a0:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c00222a3:	55                   	push   ebp
c00222a4:	50                   	push   eax
c00222a5:	e8 e7 4e 00 00       	call   c0027191 <__mulsf3>
c00222aa:	83 c4 10             	add    esp,0x10
c00222ad:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c00222b0:	be 02 00 00 00       	mov    esi,0x2
c00222b5:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c00222b8:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c00222bb:	74 46                	je     c0022303 <SoundChannel::buffer16(short*, int)+0xdf>
c00222bd:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00222c1:	eb 36                	jmp    c00222f9 <SoundChannel::buffer16(short*, int)+0xd5>
c00222c3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00222c7:	83 ec 0c             	sub    esp,0xc
c00222ca:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c00222ce:	46                   	inc    esi
c00222cf:	50                   	push   eax
c00222d0:	e8 aa 52 00 00       	call   c002757f <__floatsisf>
c00222d5:	5a                   	pop    edx
c00222d6:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00222d9:	59                   	pop    ecx
c00222da:	8d 4f 01             	lea    ecx,[edi+0x1]
c00222dd:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c00222e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222e4:	50                   	push   eax
c00222e5:	e8 a7 4e 00 00       	call   c0027191 <__mulsf3>
c00222ea:	83 c4 10             	add    esp,0x10
c00222ed:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c00222f1:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c00222f4:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c00222f7:	74 0a                	je     c0022303 <SoundChannel::buffer16(short*, int)+0xdf>
c00222f9:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c00222fd:	75 c4                	jne    c00222c3 <SoundChannel::buffer16(short*, int)+0x9f>
c00222ff:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0022303:	83 c4 1c             	add    esp,0x1c
c0022306:	89 f0                	mov    eax,esi
c0022308:	5b                   	pop    ebx
c0022309:	5e                   	pop    esi
c002230a:	5f                   	pop    edi
c002230b:	5d                   	pop    ebp
c002230c:	c3                   	ret    
c002230d:	83 c4 1c             	add    esp,0x1c
c0022310:	31 f6                	xor    esi,esi
c0022312:	5b                   	pop    ebx
c0022313:	89 f0                	mov    eax,esi
c0022315:	5e                   	pop    esi
c0022316:	5f                   	pop    edi
c0022317:	5d                   	pop    ebp
c0022318:	c3                   	ret    
c0022319:	be 01 00 00 00       	mov    esi,0x1
c002231e:	eb e3                	jmp    c0022303 <SoundChannel::buffer16(short*, int)+0xdf>

c0022320 <SoundChannel::buffer8(unsigned char*, int)>:
c0022320:	55                   	push   ebp
c0022321:	57                   	push   edi
c0022322:	56                   	push   esi
c0022323:	53                   	push   ebx
c0022324:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022328:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002232c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002232f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022333:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022336:	74 7a                	je     c00223b2 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022338:	85 ff                	test   edi,edi
c002233a:	7e 76                	jle    c00223b2 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002233c:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022340:	8d 70 01             	lea    esi,[eax+0x1]
c0022343:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022346:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022349:	8b 1c 9d 20 03 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcfce0]
c0022350:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022353:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022356:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022359:	74 5e                	je     c00223b9 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c002235b:	83 ff 01             	cmp    edi,0x1
c002235e:	74 4b                	je     c00223ab <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022360:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022364:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022367:	8d 70 01             	lea    esi,[eax+0x1]
c002236a:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002236d:	8b 1c 9d 20 03 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcfce0]
c0022374:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022377:	b8 02 00 00 00       	mov    eax,0x2
c002237c:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002237f:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022382:	75 23                	jne    c00223a7 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022384:	eb 27                	jmp    c00223ad <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022386:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c002238b:	8d 71 01             	lea    esi,[ecx+0x1]
c002238e:	40                   	inc    eax
c002238f:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022392:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022395:	8b 1c 9d 20 03 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcfce0]
c002239c:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c002239f:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00223a2:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00223a5:	74 06                	je     c00223ad <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00223a7:	39 c7                	cmp    edi,eax
c00223a9:	75 db                	jne    c0022386 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c00223ab:	89 f8                	mov    eax,edi
c00223ad:	5b                   	pop    ebx
c00223ae:	5e                   	pop    esi
c00223af:	5f                   	pop    edi
c00223b0:	5d                   	pop    ebp
c00223b1:	c3                   	ret    
c00223b2:	5b                   	pop    ebx
c00223b3:	31 c0                	xor    eax,eax
c00223b5:	5e                   	pop    esi
c00223b6:	5f                   	pop    edi
c00223b7:	5d                   	pop    ebp
c00223b8:	c3                   	ret    
c00223b9:	b8 01 00 00 00       	mov    eax,0x1
c00223be:	eb ed                	jmp    c00223ad <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00223c0 <SoundDevice::SoundDevice(char const*)>:
c00223c0:	83 ec 1c             	sub    esp,0x1c
c00223c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223c7:	83 ec 08             	sub    esp,0x8
c00223ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00223ce:	50                   	push   eax
c00223cf:	e8 1a 1b ff ff       	call   c0013eee <Device::Device(char const*)>
c00223d4:	83 c4 10             	add    esp,0x10
c00223d7:	ba dc c9 02 c0       	mov    edx,0xc002c9dc
c00223dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223e0:	89 10                	mov    DWORD PTR [eax],edx
c00223e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223e6:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00223f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223f4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00223fe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022406:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002240b:	7f 19                	jg     c0022426 <SoundDevice::SoundDevice(char const*)+0x66>
c002240d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022411:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022415:	83 c2 54             	add    edx,0x54
c0022418:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022420:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022424:	eb e0                	jmp    c0022406 <SoundDevice::SoundDevice(char const*)+0x46>
c0022426:	90                   	nop
c0022427:	83 c4 1c             	add    esp,0x1c
c002242a:	c3                   	ret    
c002242b:	90                   	nop

c002242c <SoundDevice::~SoundDevice()>:
c002242c:	53                   	push   ebx
c002242d:	83 ec 18             	sub    esp,0x18
c0022430:	ba dc c9 02 c0       	mov    edx,0xc002c9dc
c0022435:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022439:	89 10                	mov    DWORD PTR [eax],edx
c002243b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022443:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022448:	7f 46                	jg     c0022490 <SoundDevice::~SoundDevice()+0x64>
c002244a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002244e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022452:	83 c2 54             	add    edx,0x54
c0022455:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022459:	85 c0                	test   eax,eax
c002245b:	74 2d                	je     c002248a <SoundDevice::~SoundDevice()+0x5e>
c002245d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022461:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022465:	83 c2 54             	add    edx,0x54
c0022468:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c002246c:	85 db                	test   ebx,ebx
c002246e:	74 1a                	je     c002248a <SoundDevice::~SoundDevice()+0x5e>
c0022470:	83 ec 0c             	sub    esp,0xc
c0022473:	53                   	push   ebx
c0022474:	e8 db fc ff ff       	call   c0022154 <SoundChannel::~SoundChannel()>
c0022479:	83 c4 10             	add    esp,0x10
c002247c:	83 ec 08             	sub    esp,0x8
c002247f:	6a 2c                	push   0x2c
c0022481:	53                   	push   ebx
c0022482:	e8 52 03 ff ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c0022487:	83 c4 10             	add    esp,0x10
c002248a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002248e:	eb b3                	jmp    c0022443 <SoundDevice::~SoundDevice()+0x17>
c0022490:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022494:	83 ec 0c             	sub    esp,0xc
c0022497:	50                   	push   eax
c0022498:	e8 1b 17 ff ff       	call   c0013bb8 <Device::~Device()>
c002249d:	83 c4 10             	add    esp,0x10
c00224a0:	90                   	nop
c00224a1:	83 c4 18             	add    esp,0x18
c00224a4:	5b                   	pop    ebx
c00224a5:	c3                   	ret    

c00224a6 <SoundDevice::~SoundDevice()>:
c00224a6:	83 ec 0c             	sub    esp,0xc
c00224a9:	83 ec 0c             	sub    esp,0xc
c00224ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224b0:	e8 77 ff ff ff       	call   c002242c <SoundDevice::~SoundDevice()>
c00224b5:	83 c4 10             	add    esp,0x10
c00224b8:	83 ec 08             	sub    esp,0x8
c00224bb:	68 e4 01 00 00       	push   0x1e4
c00224c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224c4:	e8 10 03 ff ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c00224c9:	83 c4 10             	add    esp,0x10
c00224cc:	83 c4 0c             	add    esp,0xc
c00224cf:	c3                   	ret    

c00224d0 <SoundDevice::getFreeChannelNum()>:
c00224d0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00224d4:	31 c0                	xor    eax,eax
c00224d6:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00224de:	74 09                	je     c00224e9 <SoundDevice::getFreeChannelNum()+0x19>
c00224e0:	40                   	inc    eax
c00224e1:	83 f8 20             	cmp    eax,0x20
c00224e4:	75 f0                	jne    c00224d6 <SoundDevice::getFreeChannelNum()+0x6>
c00224e6:	83 c8 ff             	or     eax,0xffffffff
c00224e9:	c3                   	ret    

c00224ea <SoundDevice::addChannel(SoundChannel*)>:
c00224ea:	56                   	push   esi
c00224eb:	53                   	push   ebx
c00224ec:	51                   	push   ecx
c00224ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00224f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00224f5:	53                   	push   ebx
c00224f6:	e8 d5 ff ff ff       	call   c00224d0 <SoundDevice::getFreeChannelNum()>
c00224fb:	5a                   	pop    edx
c00224fc:	83 f8 ff             	cmp    eax,0xffffffff
c00224ff:	74 51                	je     c0022552 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022501:	85 f6                	test   esi,esi
c0022503:	74 4d                	je     c0022552 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022505:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c002250c:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022513:	75 30                	jne    c0022545 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022515:	83 ec 0c             	sub    esp,0xc
c0022518:	56                   	push   esi
c0022519:	e8 52 fc ff ff       	call   c0022170 <SoundChannel::getSampleRate()>
c002251e:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022524:	89 34 24             	mov    DWORD PTR [esp],esi
c0022527:	e8 4c fc ff ff       	call   c0022178 <SoundChannel::getBits()>
c002252c:	83 c4 0c             	add    esp,0xc
c002252f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022535:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022537:	50                   	push   eax
c0022538:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002253e:	53                   	push   ebx
c002253f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0022542:	83 c4 10             	add    esp,0x10
c0022545:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c002254b:	b8 01 00 00 00       	mov    eax,0x1
c0022550:	eb 03                	jmp    c0022555 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022552:	83 c8 ff             	or     eax,0xffffffff
c0022555:	5a                   	pop    edx
c0022556:	5b                   	pop    ebx
c0022557:	5e                   	pop    esi
c0022558:	c3                   	ret    
c0022559:	90                   	nop

c002255a <SoundDevice::removeChannel(int)>:
c002255a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002255e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022562:	83 fa 1f             	cmp    edx,0x1f
c0022565:	77 23                	ja     c002258a <SoundDevice::removeChannel(int)+0x30>
c0022567:	8d 14 90             	lea    edx,[eax+edx*4]
c002256a:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022571:	74 17                	je     c002258a <SoundDevice::removeChannel(int)+0x30>
c0022573:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c002257d:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022583:	75 05                	jne    c002258a <SoundDevice::removeChannel(int)+0x30>
c0022585:	8b 00                	mov    eax,DWORD PTR [eax]
c0022587:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c002258a:	c3                   	ret    
c002258b:	90                   	nop

c002258c <SoundDevice::floatTo16(float*, short*, int)>:
c002258c:	57                   	push   edi
c002258d:	56                   	push   esi
c002258e:	53                   	push   ebx
c002258f:	31 db                	xor    ebx,ebx
c0022591:	83 ec 10             	sub    esp,0x10
c0022594:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022598:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c002259c:	0f 8d d0 00 00 00    	jge    c0022672 <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c00225a2:	83 ec 0c             	sub    esp,0xc
c00225a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00225a9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00225ac:	e8 9e 62 00 00       	call   c002884f <__extendsfdf2>
c00225b1:	83 c4 10             	add    esp,0x10
c00225b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00225b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00225bc:	68 00 00 f0 3f       	push   0x3ff00000
c00225c1:	6a 00                	push   0x0
c00225c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225cb:	e8 0b 52 00 00       	call   c00277db <__adddf3>
c00225d0:	83 c4 10             	add    esp,0x10
c00225d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00225d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00225db:	68 00 00 e0 3f       	push   0x3fe00000
c00225e0:	6a 00                	push   0x0
c00225e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225ea:	e8 69 58 00 00       	call   c0027e58 <__muldf3>
c00225ef:	83 c4 10             	add    esp,0x10
c00225f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00225f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00225fa:	68 c0 ff df 40       	push   0x40dfffc0
c00225ff:	6a 00                	push   0x0
c0022601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022609:	e8 4a 58 00 00       	call   c0027e58 <__muldf3>
c002260e:	59                   	pop    ecx
c002260f:	5f                   	pop    edi
c0022610:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022614:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022618:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002261c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022620:	e8 06 61 00 00       	call   c002872b <__truncdfsf2>
c0022625:	5a                   	pop    edx
c0022626:	89 c7                	mov    edi,eax
c0022628:	59                   	pop    ecx
c0022629:	68 00 fe ff 46       	push   0x46fffe00
c002262e:	50                   	push   eax
c002262f:	e8 a1 51 00 00       	call   c00277d5 <__gesf2>
c0022634:	83 c4 10             	add    esp,0x10
c0022637:	85 c0                	test   eax,eax
c0022639:	78 08                	js     c0022643 <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c002263b:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0022641:	eb 29                	jmp    c002266c <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022643:	50                   	push   eax
c0022644:	50                   	push   eax
c0022645:	6a 00                	push   0x0
c0022647:	57                   	push   edi
c0022648:	e8 8c 51 00 00       	call   c00277d9 <__lesf2>
c002264d:	83 c4 10             	add    esp,0x10
c0022650:	85 c0                	test   eax,eax
c0022652:	7f 08                	jg     c002265c <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c0022654:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c002265a:	eb 10                	jmp    c002266c <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c002265c:	83 ec 0c             	sub    esp,0xc
c002265f:	57                   	push   edi
c0022660:	e8 87 62 00 00       	call   c00288ec <lrintf>
c0022665:	83 c4 10             	add    esp,0x10
c0022668:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c002266c:	43                   	inc    ebx
c002266d:	e9 26 ff ff ff       	jmp    c0022598 <SoundDevice::floatTo16(float*, short*, int)+0xc>
c0022672:	83 c4 10             	add    esp,0x10
c0022675:	5b                   	pop    ebx
c0022676:	5e                   	pop    esi
c0022677:	5f                   	pop    edi
c0022678:	c3                   	ret    
c0022679:	90                   	nop

c002267a <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c002267a:	57                   	push   edi
c002267b:	56                   	push   esi
c002267c:	53                   	push   ebx
c002267d:	31 db                	xor    ebx,ebx
c002267f:	83 ec 10             	sub    esp,0x10
c0022682:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022686:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c002268a:	0f 8d cb 00 00 00    	jge    c002275b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022690:	83 ec 0c             	sub    esp,0xc
c0022693:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022697:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002269a:	e8 b0 61 00 00       	call   c002884f <__extendsfdf2>
c002269f:	83 c4 10             	add    esp,0x10
c00226a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00226aa:	68 00 00 f0 3f       	push   0x3ff00000
c00226af:	6a 00                	push   0x0
c00226b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226b9:	e8 1d 51 00 00       	call   c00277db <__adddf3>
c00226be:	83 c4 10             	add    esp,0x10
c00226c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226c5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00226c9:	68 00 00 e0 3f       	push   0x3fe00000
c00226ce:	6a 00                	push   0x0
c00226d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226d8:	e8 7b 57 00 00       	call   c0027e58 <__muldf3>
c00226dd:	83 c4 10             	add    esp,0x10
c00226e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00226e8:	68 00 00 60 40       	push   0x40600000
c00226ed:	6a 00                	push   0x0
c00226ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226f7:	e8 5c 57 00 00       	call   c0027e58 <__muldf3>
c00226fc:	59                   	pop    ecx
c00226fd:	5f                   	pop    edi
c00226fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022702:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022706:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002270a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002270e:	e8 18 60 00 00       	call   c002872b <__truncdfsf2>
c0022713:	5a                   	pop    edx
c0022714:	89 c7                	mov    edi,eax
c0022716:	59                   	pop    ecx
c0022717:	68 00 00 fe 42       	push   0x42fe0000
c002271c:	50                   	push   eax
c002271d:	e8 b3 50 00 00       	call   c00277d5 <__gesf2>
c0022722:	83 c4 10             	add    esp,0x10
c0022725:	85 c0                	test   eax,eax
c0022727:	78 06                	js     c002272f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022729:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c002272d:	eb 26                	jmp    c0022755 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002272f:	50                   	push   eax
c0022730:	50                   	push   eax
c0022731:	6a 00                	push   0x0
c0022733:	57                   	push   edi
c0022734:	e8 a0 50 00 00       	call   c00277d9 <__lesf2>
c0022739:	83 c4 10             	add    esp,0x10
c002273c:	85 c0                	test   eax,eax
c002273e:	7f 06                	jg     c0022746 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022740:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022744:	eb 0f                	jmp    c0022755 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022746:	83 ec 0c             	sub    esp,0xc
c0022749:	57                   	push   edi
c002274a:	e8 9d 61 00 00       	call   c00288ec <lrintf>
c002274f:	83 c4 10             	add    esp,0x10
c0022752:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022755:	43                   	inc    ebx
c0022756:	e9 2b ff ff ff       	jmp    c0022686 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002275b:	83 c4 10             	add    esp,0x10
c002275e:	5b                   	pop    ebx
c002275f:	5e                   	pop    esi
c0022760:	5f                   	pop    edi
c0022761:	c3                   	ret    

c0022762 <SoundDevice::getAudio(int, float*, float*)>:
c0022762:	55                   	push   ebp
c0022763:	31 ed                	xor    ebp,ebp
c0022765:	57                   	push   edi
c0022766:	56                   	push   esi
c0022767:	31 f6                	xor    esi,esi
c0022769:	53                   	push   ebx
c002276a:	83 ec 20             	sub    esp,0x20
c002276d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022771:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022775:	c1 e0 02             	shl    eax,0x2
c0022778:	50                   	push   eax
c0022779:	6a 00                	push   0x0
c002277b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002277f:	e8 cc df fd ff       	call   c0000750 <memset>
c0022784:	83 c4 10             	add    esp,0x10
c0022787:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002278f:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c0022796:	85 c9                	test   ecx,ecx
c0022798:	74 52                	je     c00227ec <SoundDevice::getAudio(int, float*, float*)+0x8a>
c002279a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002279e:	99                   	cdq    
c002279f:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c00227a5:	50                   	push   eax
c00227a6:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00227ac:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00227b0:	51                   	push   ecx
c00227b1:	e8 da f9 ff ff       	call   c0022190 <SoundChannel::unbuffer(float*, int, int)>
c00227b6:	31 d2                	xor    edx,edx
c00227b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00227bc:	83 c4 10             	add    esp,0x10
c00227bf:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00227c3:	7d 1e                	jge    c00227e3 <SoundDevice::getAudio(int, float*, float*)+0x81>
c00227c5:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00227c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00227cd:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c00227d0:	89 cf                	mov    edi,ecx
c00227d2:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c00227d8:	0f af ca             	imul   ecx,edx
c00227db:	42                   	inc    edx
c00227dc:	01 e9                	add    ecx,ebp
c00227de:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c00227e1:	eb dc                	jmp    c00227bf <SoundDevice::getAudio(int, float*, float*)+0x5d>
c00227e3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00227e7:	45                   	inc    ebp
c00227e8:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c00227ec:	46                   	inc    esi
c00227ed:	83 fe 20             	cmp    esi,0x20
c00227f0:	75 9d                	jne    c002278f <SoundDevice::getAudio(int, float*, float*)+0x2d>
c00227f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00227f6:	83 c4 1c             	add    esp,0x1c
c00227f9:	5b                   	pop    ebx
c00227fa:	5e                   	pop    esi
c00227fb:	5f                   	pop    edi
c00227fc:	5d                   	pop    ebp
c00227fd:	c3                   	ret    

c00227fe <PCI::open(int, int, void*)>:
c00227fe:	83 ec 18             	sub    esp,0x18
c0022801:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022805:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022809:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002280f:	8b 10                	mov    edx,DWORD PTR [eax]
c0022811:	50                   	push   eax
c0022812:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022815:	31 c0                	xor    eax,eax
c0022817:	83 c4 1c             	add    esp,0x1c
c002281a:	c3                   	ret    
c002281b:	90                   	nop

c002281c <PCI::close(int, int, void*)>:
c002281c:	31 c0                	xor    eax,eax
c002281e:	c3                   	ret    
c002281f:	90                   	nop

c0022820 <PCI::PCI()>:
c0022820:	83 ec 0c             	sub    esp,0xc
c0022823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022827:	83 ec 08             	sub    esp,0x8
c002282a:	68 0c ca 02 c0       	push   0xc002ca0c
c002282f:	50                   	push   eax
c0022830:	e8 1d 0d ff ff       	call   c0013552 <Bus::Bus(char const*)>
c0022835:	83 c4 10             	add    esp,0x10
c0022838:	ba f8 ca 02 c0       	mov    edx,0xc002caf8
c002283d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022841:	89 10                	mov    DWORD PTR [eax],edx
c0022843:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022847:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0022851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022855:	a3 24 07 03 c0       	mov    ds:0xc0030724,eax
c002285a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002285e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022864:	0f b6 d0             	movzx  edx,al
c0022867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002286b:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022876:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002287c:	0f b6 d0             	movzx  edx,al
c002287f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022883:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002288c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022892:	8d 50 01             	lea    edx,[eax+0x1]
c0022895:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022899:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002289f:	0f b6 d0             	movzx  edx,al
c00228a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228a6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00228aa:	83 c9 c0             	or     ecx,0xffffffc0
c00228ad:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00228b1:	90                   	nop
c00228b2:	83 c4 0c             	add    esp,0xc
c00228b5:	c3                   	ret    

c00228b6 <PCI::readBAR8(unsigned int, int)>:
c00228b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00228ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00228be:	f6 c2 01             	test   dl,0x1
c00228c1:	74 07                	je     c00228ca <PCI::readBAR8(unsigned int, int)+0x14>
c00228c3:	83 e2 fc             	and    edx,0xfffffffc
c00228c6:	01 c2                	add    edx,eax
c00228c8:	ec                   	in     al,dx
c00228c9:	c3                   	ret    
c00228ca:	83 e2 f0             	and    edx,0xfffffff0
c00228cd:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00228d0:	c3                   	ret    
c00228d1:	90                   	nop

c00228d2 <PCI::readBAR16(unsigned int, int)>:
c00228d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00228d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00228da:	f6 c2 01             	test   dl,0x1
c00228dd:	74 08                	je     c00228e7 <PCI::readBAR16(unsigned int, int)+0x15>
c00228df:	83 e2 fc             	and    edx,0xfffffffc
c00228e2:	01 c2                	add    edx,eax
c00228e4:	66 ed                	in     ax,dx
c00228e6:	c3                   	ret    
c00228e7:	83 e2 f0             	and    edx,0xfffffff0
c00228ea:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00228ee:	c3                   	ret    
c00228ef:	90                   	nop

c00228f0 <PCI::readBAR32(unsigned int, int)>:
c00228f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00228f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00228f8:	f6 c2 01             	test   dl,0x1
c00228fb:	74 07                	je     c0022904 <PCI::readBAR32(unsigned int, int)+0x14>
c00228fd:	83 e2 fc             	and    edx,0xfffffffc
c0022900:	01 c2                	add    edx,eax
c0022902:	ed                   	in     eax,dx
c0022903:	c3                   	ret    
c0022904:	83 e2 f0             	and    edx,0xfffffff0
c0022907:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c002290a:	c3                   	ret    
c002290b:	90                   	nop

c002290c <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c002290c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022910:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022914:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022918:	f6 c2 01             	test   dl,0x1
c002291b:	74 07                	je     c0022924 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c002291d:	83 e2 fc             	and    edx,0xfffffffc
c0022920:	01 ca                	add    edx,ecx
c0022922:	ee                   	out    dx,al
c0022923:	c3                   	ret    
c0022924:	83 e2 f0             	and    edx,0xfffffff0
c0022927:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c002292a:	c3                   	ret    
c002292b:	90                   	nop

c002292c <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c002292c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022930:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022934:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022938:	f6 c2 01             	test   dl,0x1
c002293b:	74 08                	je     c0022945 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c002293d:	83 e2 fc             	and    edx,0xfffffffc
c0022940:	01 ca                	add    edx,ecx
c0022942:	66 ef                	out    dx,ax
c0022944:	c3                   	ret    
c0022945:	83 e2 f0             	and    edx,0xfffffff0
c0022948:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c002294c:	c3                   	ret    
c002294d:	90                   	nop

c002294e <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c002294e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022952:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022956:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002295a:	f6 c2 01             	test   dl,0x1
c002295d:	74 07                	je     c0022966 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c002295f:	83 e2 fc             	and    edx,0xfffffffc
c0022962:	01 ca                	add    edx,ecx
c0022964:	ef                   	out    dx,eax
c0022965:	c3                   	ret    
c0022966:	83 e2 f0             	and    edx,0xfffffff0
c0022969:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c002296c:	c3                   	ret    
c002296d:	90                   	nop

c002296e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002296e:	55                   	push   ebp
c002296f:	57                   	push   edi
c0022970:	56                   	push   esi
c0022971:	53                   	push   ebx
c0022972:	83 ec 0c             	sub    esp,0xc
c0022975:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022979:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c002297d:	89 f0                	mov    eax,esi
c002297f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022983:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022987:	3c 07                	cmp    al,0x7
c0022989:	76 10                	jbe    c002299b <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c002298b:	83 ec 0c             	sub    esp,0xc
c002298e:	68 14 ca 02 c0       	push   0xc002ca14
c0022993:	e8 87 78 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c0022998:	83 c4 10             	add    esp,0x10
c002299b:	80 fb 0f             	cmp    bl,0xf
c002299e:	76 10                	jbe    c00229b0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00229a0:	83 ec 0c             	sub    esp,0xc
c00229a3:	68 44 ca 02 c0       	push   0xc002ca44
c00229a8:	e8 72 78 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c00229ad:	83 c4 10             	add    esp,0x10
c00229b0:	8d 04 36             	lea    eax,[esi+esi*1]
c00229b3:	ba f8 0c 00 00       	mov    edx,0xcf8
c00229b8:	83 c8 f0             	or     eax,0xfffffff0
c00229bb:	ee                   	out    dx,al
c00229bc:	ba fa 0c 00 00       	mov    edx,0xcfa
c00229c1:	89 e8                	mov    eax,ebp
c00229c3:	ee                   	out    dx,al
c00229c4:	83 c4 0c             	add    esp,0xc
c00229c7:	89 d8                	mov    eax,ebx
c00229c9:	66 81 e7 fc 00       	and    di,0xfc
c00229ce:	5b                   	pop    ebx
c00229cf:	c1 e0 08             	shl    eax,0x8
c00229d2:	5e                   	pop    esi
c00229d3:	09 f8                	or     eax,edi
c00229d5:	5f                   	pop    edi
c00229d6:	66 0d 00 c0          	or     ax,0xc000
c00229da:	5d                   	pop    ebp
c00229db:	c3                   	ret    

c00229dc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00229dc:	57                   	push   edi
c00229dd:	56                   	push   esi
c00229de:	53                   	push   ebx
c00229df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00229e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00229e7:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c00229ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00229f1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00229f5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00229f9:	83 ff 01             	cmp    edi,0x1
c00229fc:	75 3e                	jne    c0022a3c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c00229fe:	89 de                	mov    esi,ebx
c0022a00:	0f b6 c0             	movzx  eax,al
c0022a03:	81 e6 fc 00 00 00    	and    esi,0xfc
c0022a09:	c1 e0 10             	shl    eax,0x10
c0022a0c:	0f b6 c9             	movzx  ecx,cl
c0022a0f:	09 f0                	or     eax,esi
c0022a11:	c1 e1 08             	shl    ecx,0x8
c0022a14:	0f b6 d2             	movzx  edx,dl
c0022a17:	09 c8                	or     eax,ecx
c0022a19:	c1 e2 0b             	shl    edx,0xb
c0022a1c:	09 d0                	or     eax,edx
c0022a1e:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022a23:	0d 00 00 00 80       	or     eax,0x80000000
c0022a28:	ef                   	out    dx,eax
c0022a29:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022a2e:	ed                   	in     eax,dx
c0022a2f:	83 e3 02             	and    ebx,0x2
c0022a32:	0f b6 cb             	movzx  ecx,bl
c0022a35:	c1 e1 03             	shl    ecx,0x3
c0022a38:	d3 e8                	shr    eax,cl
c0022a3a:	eb 43                	jmp    c0022a7f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022a3c:	83 ff 02             	cmp    edi,0x2
c0022a3f:	75 2c                	jne    c0022a6d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0022a41:	83 ec 0c             	sub    esp,0xc
c0022a44:	0f b6 c9             	movzx  ecx,cl
c0022a47:	0f b6 d2             	movzx  edx,dl
c0022a4a:	0f b6 fb             	movzx  edi,bl
c0022a4d:	0f b6 c0             	movzx  eax,al
c0022a50:	57                   	push   edi
c0022a51:	51                   	push   ecx
c0022a52:	52                   	push   edx
c0022a53:	50                   	push   eax
c0022a54:	56                   	push   esi
c0022a55:	e8 14 ff ff ff       	call   c002296e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a5a:	89 c2                	mov    edx,eax
c0022a5c:	ed                   	in     eax,dx
c0022a5d:	83 e3 02             	and    ebx,0x2
c0022a60:	83 c4 20             	add    esp,0x20
c0022a63:	0f b6 cb             	movzx  ecx,bl
c0022a66:	c1 e1 03             	shl    ecx,0x3
c0022a69:	d3 e8                	shr    eax,cl
c0022a6b:	eb 12                	jmp    c0022a7f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022a6d:	83 ec 0c             	sub    esp,0xc
c0022a70:	68 74 ca 02 c0       	push   0xc002ca74
c0022a75:	e8 a5 77 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c0022a7a:	83 c4 10             	add    esp,0x10
c0022a7d:	31 c0                	xor    eax,eax
c0022a7f:	5b                   	pop    ebx
c0022a80:	5e                   	pop    esi
c0022a81:	5f                   	pop    edi
c0022a82:	c3                   	ret    
c0022a83:	90                   	nop

c0022a84 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022a84:	83 ec 18             	sub    esp,0x18
c0022a87:	6a 00                	push   0x0
c0022a89:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022a8e:	50                   	push   eax
c0022a8f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022a94:	50                   	push   eax
c0022a95:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022a9a:	50                   	push   eax
c0022a9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022a9f:	e8 38 ff ff ff       	call   c00229dc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022aa4:	83 c4 2c             	add    esp,0x2c
c0022aa7:	c3                   	ret    

c0022aa8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022aa8:	83 ec 18             	sub    esp,0x18
c0022aab:	6a 0e                	push   0xe
c0022aad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022ab2:	50                   	push   eax
c0022ab3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022ab8:	50                   	push   eax
c0022ab9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022abe:	50                   	push   eax
c0022abf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022ac3:	e8 14 ff ff ff       	call   c00229dc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ac8:	83 c4 2c             	add    esp,0x2c
c0022acb:	0f b6 c0             	movzx  eax,al
c0022ace:	c3                   	ret    
c0022acf:	90                   	nop

c0022ad0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022ad0:	55                   	push   ebp
c0022ad1:	57                   	push   edi
c0022ad2:	56                   	push   esi
c0022ad3:	53                   	push   ebx
c0022ad4:	83 ec 18             	sub    esp,0x18
c0022ad7:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0022adc:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0022ae1:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0022ae6:	6a 0a                	push   0xa
c0022ae8:	56                   	push   esi
c0022ae9:	55                   	push   ebp
c0022aea:	57                   	push   edi
c0022aeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022aef:	e8 e8 fe ff ff       	call   c00229dc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022af4:	83 c4 14             	add    esp,0x14
c0022af7:	89 c3                	mov    ebx,eax
c0022af9:	6a 0a                	push   0xa
c0022afb:	0f b6 db             	movzx  ebx,bl
c0022afe:	56                   	push   esi
c0022aff:	55                   	push   ebp
c0022b00:	57                   	push   edi
c0022b01:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022b05:	e8 d2 fe ff ff       	call   c00229dc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b0a:	83 c4 2c             	add    esp,0x2c
c0022b0d:	25 00 ff 00 00       	and    eax,0xff00
c0022b12:	09 d8                	or     eax,ebx
c0022b14:	5b                   	pop    ebx
c0022b15:	5e                   	pop    esi
c0022b16:	5f                   	pop    edi
c0022b17:	5d                   	pop    ebp
c0022b18:	c3                   	ret    
c0022b19:	90                   	nop

c0022b1a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022b1a:	83 ec 18             	sub    esp,0x18
c0022b1d:	6a 08                	push   0x8
c0022b1f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022b24:	50                   	push   eax
c0022b25:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022b2a:	50                   	push   eax
c0022b2b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022b30:	50                   	push   eax
c0022b31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022b35:	e8 a2 fe ff ff       	call   c00229dc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b3a:	83 c4 2c             	add    esp,0x2c
c0022b3d:	0f b6 c4             	movzx  eax,ah
c0022b40:	c3                   	ret    
c0022b41:	90                   	nop

c0022b42 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022b42:	83 ec 18             	sub    esp,0x18
c0022b45:	6a 08                	push   0x8
c0022b47:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022b4c:	50                   	push   eax
c0022b4d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022b52:	50                   	push   eax
c0022b53:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022b58:	50                   	push   eax
c0022b59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022b5d:	e8 7a fe ff ff       	call   c00229dc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b62:	83 c4 2c             	add    esp,0x2c
c0022b65:	c3                   	ret    

c0022b66 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022b66:	83 ec 18             	sub    esp,0x18
c0022b69:	6a 3c                	push   0x3c
c0022b6b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022b70:	50                   	push   eax
c0022b71:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022b76:	50                   	push   eax
c0022b77:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022b7c:	50                   	push   eax
c0022b7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022b81:	e8 56 fe ff ff       	call   c00229dc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b86:	83 c4 2c             	add    esp,0x2c
c0022b89:	c3                   	ret    

c0022b8a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022b8a:	83 ec 18             	sub    esp,0x18
c0022b8d:	6a 18                	push   0x18
c0022b8f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022b94:	50                   	push   eax
c0022b95:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022b9a:	50                   	push   eax
c0022b9b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022ba0:	50                   	push   eax
c0022ba1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022ba5:	e8 32 fe ff ff       	call   c00229dc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022baa:	83 c4 2c             	add    esp,0x2c
c0022bad:	0f b6 c4             	movzx  eax,ah
c0022bb0:	c3                   	ret    
c0022bb1:	90                   	nop

c0022bb2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022bb2:	55                   	push   ebp
c0022bb3:	57                   	push   edi
c0022bb4:	56                   	push   esi
c0022bb5:	53                   	push   ebx
c0022bb6:	83 ec 28             	sub    esp,0x28
c0022bb9:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0022bbd:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0022bc2:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0022bc7:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0022bcc:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022bd3:	8d 43 12             	lea    eax,[ebx+0x12]
c0022bd6:	83 c3 10             	add    ebx,0x10
c0022bd9:	0f b6 c0             	movzx  eax,al
c0022bdc:	0f b6 db             	movzx  ebx,bl
c0022bdf:	50                   	push   eax
c0022be0:	51                   	push   ecx
c0022be1:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0022be5:	57                   	push   edi
c0022be6:	55                   	push   ebp
c0022be7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022beb:	e8 ec fd ff ff       	call   c00229dc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bf0:	83 c4 14             	add    esp,0x14
c0022bf3:	89 c6                	mov    esi,eax
c0022bf5:	53                   	push   ebx
c0022bf6:	c1 e6 10             	shl    esi,0x10
c0022bf9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022bfd:	51                   	push   ecx
c0022bfe:	57                   	push   edi
c0022bff:	55                   	push   ebp
c0022c00:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022c04:	e8 d3 fd ff ff       	call   c00229dc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c09:	83 c4 3c             	add    esp,0x3c
c0022c0c:	0f b7 c0             	movzx  eax,ax
c0022c0f:	5b                   	pop    ebx
c0022c10:	09 f0                	or     eax,esi
c0022c12:	5e                   	pop    esi
c0022c13:	5f                   	pop    edi
c0022c14:	5d                   	pop    ebp
c0022c15:	c3                   	ret    

c0022c16 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022c16:	55                   	push   ebp
c0022c17:	57                   	push   edi
c0022c18:	56                   	push   esi
c0022c19:	53                   	push   ebx
c0022c1a:	83 ec 0c             	sub    esp,0xc
c0022c1d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022c21:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022c25:	89 f5                	mov    ebp,esi
c0022c27:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0022c2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022c31:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022c35:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022c39:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022c3d:	83 f9 01             	cmp    ecx,0x1
c0022c40:	75 5d                	jne    c0022c9f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0022c42:	0f b6 c8             	movzx  ecx,al
c0022c45:	0f b6 d2             	movzx  edx,dl
c0022c48:	c1 e1 10             	shl    ecx,0x10
c0022c4b:	c1 e2 0b             	shl    edx,0xb
c0022c4e:	89 f0                	mov    eax,esi
c0022c50:	25 fc 00 00 00       	and    eax,0xfc
c0022c55:	09 c1                	or     ecx,eax
c0022c57:	89 e8                	mov    eax,ebp
c0022c59:	0f b6 c0             	movzx  eax,al
c0022c5c:	c1 e0 08             	shl    eax,0x8
c0022c5f:	09 c1                	or     ecx,eax
c0022c61:	09 d1                	or     ecx,edx
c0022c63:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022c68:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022c6e:	89 c8                	mov    eax,ecx
c0022c70:	ef                   	out    dx,eax
c0022c71:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022c76:	ed                   	in     eax,dx
c0022c77:	0f b7 db             	movzx  ebx,bx
c0022c7a:	83 e6 02             	and    esi,0x2
c0022c7d:	74 0a                	je     c0022c89 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0022c7f:	0f b7 d0             	movzx  edx,ax
c0022c82:	c1 e3 10             	shl    ebx,0x10
c0022c85:	09 d3                	or     ebx,edx
c0022c87:	eb 05                	jmp    c0022c8e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0022c89:	66 31 c0             	xor    ax,ax
c0022c8c:	09 c3                	or     ebx,eax
c0022c8e:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022c93:	89 c8                	mov    eax,ecx
c0022c95:	ef                   	out    dx,eax
c0022c96:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022c9b:	89 d8                	mov    eax,ebx
c0022c9d:	eb 41                	jmp    c0022ce0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022c9f:	83 f9 02             	cmp    ecx,0x2
c0022ca2:	75 45                	jne    c0022ce9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0022ca4:	83 ec 0c             	sub    esp,0xc
c0022ca7:	0f b6 d2             	movzx  edx,dl
c0022caa:	89 f1                	mov    ecx,esi
c0022cac:	0f b6 c0             	movzx  eax,al
c0022caf:	0f b6 f1             	movzx  esi,cl
c0022cb2:	89 e9                	mov    ecx,ebp
c0022cb4:	56                   	push   esi
c0022cb5:	0f b6 c9             	movzx  ecx,cl
c0022cb8:	51                   	push   ecx
c0022cb9:	52                   	push   edx
c0022cba:	50                   	push   eax
c0022cbb:	57                   	push   edi
c0022cbc:	e8 ad fc ff ff       	call   c002296e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022cc1:	89 c2                	mov    edx,eax
c0022cc3:	ed                   	in     eax,dx
c0022cc4:	83 c4 20             	add    esp,0x20
c0022cc7:	0f b7 db             	movzx  ebx,bx
c0022cca:	f6 c2 02             	test   dl,0x2
c0022ccd:	74 0c                	je     c0022cdb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0022ccf:	0f b7 c8             	movzx  ecx,ax
c0022cd2:	89 d8                	mov    eax,ebx
c0022cd4:	c1 e0 10             	shl    eax,0x10
c0022cd7:	09 c8                	or     eax,ecx
c0022cd9:	eb 05                	jmp    c0022ce0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022cdb:	66 31 c0             	xor    ax,ax
c0022cde:	09 d8                	or     eax,ebx
c0022ce0:	ef                   	out    dx,eax
c0022ce1:	83 c4 0c             	add    esp,0xc
c0022ce4:	5b                   	pop    ebx
c0022ce5:	5e                   	pop    esi
c0022ce6:	5f                   	pop    edi
c0022ce7:	5d                   	pop    ebp
c0022ce8:	c3                   	ret    
c0022ce9:	c7 44 24 20 74 ca 02 c0 	mov    DWORD PTR [esp+0x20],0xc002ca74
c0022cf1:	83 c4 0c             	add    esp,0xc
c0022cf4:	5b                   	pop    ebx
c0022cf5:	5e                   	pop    esi
c0022cf6:	5f                   	pop    edi
c0022cf7:	5d                   	pop    ebp
c0022cf8:	e9 22 75 ff ff       	jmp    c001a21f <Krnl::panic(char const*)>
c0022cfd:	90                   	nop

c0022cfe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0022cfe:	55                   	push   ebp
c0022cff:	57                   	push   edi
c0022d00:	56                   	push   esi
c0022d01:	53                   	push   ebx
c0022d02:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022d08:	80 3d 30 07 03 c0 00 	cmp    BYTE PTR ds:0xc0030730,0x0
c0022d0f:	0f 85 84 00 00 00    	jne    c0022d99 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0022d15:	83 ec 0c             	sub    esp,0xc
c0022d18:	68 14 01 00 00       	push   0x114
c0022d1d:	e8 37 cb fe ff       	call   c000f859 <malloc>
c0022d22:	83 c4 0c             	add    esp,0xc
c0022d25:	89 c3                	mov    ebx,eax
c0022d27:	ff 35 30 f9 02 c0    	push   DWORD PTR ds:0xc002f930
c0022d2d:	68 7a ca 02 c0       	push   0xc002ca7a
c0022d32:	50                   	push   eax
c0022d33:	e8 d8 00 ff ff       	call   c0012e10 <File::File(char const*, Process*)>
c0022d38:	5a                   	pop    edx
c0022d39:	59                   	pop    ecx
c0022d3a:	6a 01                	push   0x1
c0022d3c:	53                   	push   ebx
c0022d3d:	e8 32 01 ff ff       	call   c0012e74 <File::open(FileOpenMode)>
c0022d42:	83 c4 0c             	add    esp,0xc
c0022d45:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0022d49:	50                   	push   eax
c0022d4a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022d4e:	50                   	push   eax
c0022d4f:	53                   	push   ebx
c0022d50:	e8 cb 03 ff ff       	call   c0013120 <File::stat(unsigned long long*, bool*)>
c0022d55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022d59:	40                   	inc    eax
c0022d5a:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d5d:	e8 f7 ca fe ff       	call   c000f859 <malloc>
c0022d62:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022d66:	a3 2c 07 03 c0       	mov    ds:0xc003072c,eax
c0022d6b:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0022d6f:	5e                   	pop    esi
c0022d70:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022d72:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0022d76:	51                   	push   ecx
c0022d77:	50                   	push   eax
c0022d78:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022d7c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022d80:	53                   	push   ebx
c0022d81:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022d84:	83 c4 14             	add    esp,0x14
c0022d87:	53                   	push   ebx
c0022d88:	e8 45 01 ff ff       	call   c0012ed2 <File::close()>
c0022d8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022d91:	83 c4 10             	add    esp,0x10
c0022d94:	a3 28 07 03 c0       	mov    ds:0xc0030728,eax
c0022d99:	a1 28 07 03 c0       	mov    eax,ds:0xc0030728
c0022d9e:	8b 15 2c 07 03 c0    	mov    edx,DWORD PTR ds:0xc003072c
c0022da4:	89 04 24             	mov    DWORD PTR [esp],eax
c0022da7:	31 ff                	xor    edi,edi
c0022da9:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0022db1:	31 f6                	xor    esi,esi
c0022db3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0022db8:	31 db                	xor    ebx,ebx
c0022dba:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0022dc2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0022dc7:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0022dce:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0022dd2:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0022dd9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0022ddd:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022de0:	0f 8e 6b 01 00 00    	jle    c0022f51 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0022de6:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022de9:	d4 40                	aam    0x40
c0022deb:	d5 39                	aad    0x39
c0022ded:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022df1:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0022df5:	d4 40                	aam    0x40
c0022df7:	d5 39                	aad    0x39
c0022df9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022dfd:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0022e01:	d4 40                	aam    0x40
c0022e03:	d5 39                	aad    0x39
c0022e05:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0022e09:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0022e0d:	d4 40                	aam    0x40
c0022e0f:	d5 39                	aad    0x39
c0022e11:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022e15:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0022e19:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022e1d:	3c 56                	cmp    al,0x56
c0022e1f:	74 45                	je     c0022e66 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0022e21:	d4 40                	aam    0x40
c0022e23:	d5 39                	aad    0x39
c0022e25:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022e28:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0022e2c:	0f b6 c9             	movzx  ecx,cl
c0022e2f:	c1 e1 04             	shl    ecx,0x4
c0022e32:	d4 40                	aam    0x40
c0022e34:	d5 39                	aad    0x39
c0022e36:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022e39:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0022e3d:	0f b6 db             	movzx  ebx,bl
c0022e40:	09 cb                	or     ebx,ecx
c0022e42:	c1 e3 04             	shl    ebx,0x4
c0022e45:	d4 40                	aam    0x40
c0022e47:	d5 39                	aad    0x39
c0022e49:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022e4c:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0022e50:	0f b6 c9             	movzx  ecx,cl
c0022e53:	09 cb                	or     ebx,ecx
c0022e55:	c1 e3 04             	shl    ebx,0x4
c0022e58:	89 d9                	mov    ecx,ebx
c0022e5a:	d4 40                	aam    0x40
c0022e5c:	d5 39                	aad    0x39
c0022e5e:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022e61:	0f b6 db             	movzx  ebx,bl
c0022e64:	09 cb                	or     ebx,ecx
c0022e66:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0022e6a:	80 f9 44             	cmp    cl,0x44
c0022e6d:	74 47                	je     c0022eb6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0022e6f:	88 c8                	mov    al,cl
c0022e71:	d4 40                	aam    0x40
c0022e73:	d5 39                	aad    0x39
c0022e75:	83 e8 30             	sub    eax,0x30
c0022e78:	0f b6 e8             	movzx  ebp,al
c0022e7b:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0022e7f:	c1 e5 04             	shl    ebp,0x4
c0022e82:	d4 40                	aam    0x40
c0022e84:	d5 39                	aad    0x39
c0022e86:	83 e8 30             	sub    eax,0x30
c0022e89:	0f b6 f0             	movzx  esi,al
c0022e8c:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0022e90:	09 ee                	or     esi,ebp
c0022e92:	c1 e6 04             	shl    esi,0x4
c0022e95:	d4 40                	aam    0x40
c0022e97:	d5 39                	aad    0x39
c0022e99:	83 e8 30             	sub    eax,0x30
c0022e9c:	0f b6 e8             	movzx  ebp,al
c0022e9f:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0022ea3:	09 ee                	or     esi,ebp
c0022ea5:	c1 e6 04             	shl    esi,0x4
c0022ea8:	89 f5                	mov    ebp,esi
c0022eaa:	d4 40                	aam    0x40
c0022eac:	d5 39                	aad    0x39
c0022eae:	83 e8 30             	sub    eax,0x30
c0022eb1:	0f b6 f0             	movzx  esi,al
c0022eb4:	09 ee                	or     esi,ebp
c0022eb6:	83 c7 10             	add    edi,0x10
c0022eb9:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0022ebd:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022ec0:	3c 0a                	cmp    al,0xa
c0022ec2:	74 09                	je     c0022ecd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0022ec4:	45                   	inc    ebp
c0022ec5:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022ec8:	75 16                	jne    c0022ee0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0022eca:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022ecd:	3c 0a                	cmp    al,0xa
c0022ecf:	0f 94 c0             	sete   al
c0022ed2:	0f b6 c0             	movzx  eax,al
c0022ed5:	01 c7                	add    edi,eax
c0022ed7:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0022edc:	75 0c                	jne    c0022eea <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0022ede:	eb 15                	jmp    c0022ef5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0022ee0:	47                   	inc    edi
c0022ee1:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0022ee4:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0022ee8:	eb d3                	jmp    c0022ebd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0022eea:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0022eef:	0f 85 e8 fe ff ff    	jne    c0022ddd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022ef5:	80 f9 44             	cmp    cl,0x44
c0022ef8:	74 0b                	je     c0022f05 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0022efa:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0022eff:	0f 85 d8 fe ff ff    	jne    c0022ddd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022f05:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0022f09:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0022f0d:	c1 e1 04             	shl    ecx,0x4
c0022f10:	83 e8 30             	sub    eax,0x30
c0022f13:	09 c8                	or     eax,ecx
c0022f15:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0022f19:	0f 85 be fe ff ff    	jne    c0022ddd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022f1f:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0022f23:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022f27:	c1 e1 04             	shl    ecx,0x4
c0022f2a:	83 e8 30             	sub    eax,0x30
c0022f2d:	09 c8                	or     eax,ecx
c0022f2f:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0022f33:	0f 85 a4 fe ff ff    	jne    c0022ddd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022f39:	50                   	push   eax
c0022f3a:	50                   	push   eax
c0022f3b:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022f3f:	50                   	push   eax
c0022f40:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0022f47:	e8 c0 d8 fd ff       	call   c000080c <strcpy>
c0022f4c:	83 c4 10             	add    esp,0x10
c0022f4f:	eb 15                	jmp    c0022f66 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0022f51:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022f58:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0022f63:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022f66:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022f6d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022f73:	5b                   	pop    ebx
c0022f74:	5e                   	pop    esi
c0022f75:	5f                   	pop    edi
c0022f76:	5d                   	pop    ebp
c0022f77:	c3                   	ret    

c0022f78 <PCI::checkBus(unsigned char)>:
c0022f78:	56                   	push   esi
c0022f79:	53                   	push   ebx
c0022f7a:	31 db                	xor    ebx,ebx
c0022f7c:	51                   	push   ecx
c0022f7d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022f82:	52                   	push   edx
c0022f83:	53                   	push   ebx
c0022f84:	43                   	inc    ebx
c0022f85:	56                   	push   esi
c0022f86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f8a:	e8 37 03 00 00       	call   c00232c6 <PCI::checkDevice(unsigned char, unsigned char)>
c0022f8f:	83 c4 10             	add    esp,0x10
c0022f92:	83 fb 20             	cmp    ebx,0x20
c0022f95:	75 eb                	jne    c0022f82 <PCI::checkBus(unsigned char)+0xa>
c0022f97:	58                   	pop    eax
c0022f98:	5b                   	pop    ebx
c0022f99:	5e                   	pop    esi
c0022f9a:	c3                   	ret    
c0022f9b:	90                   	nop

c0022f9c <PCI::foundDevice(PCIDeviceInfo)>:
c0022f9c:	55                   	push   ebp
c0022f9d:	57                   	push   edi
c0022f9e:	56                   	push   esi
c0022f9f:	53                   	push   ebx
c0022fa0:	83 ec 1c             	sub    esp,0x1c
c0022fa3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022fa7:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022fad:	0f 84 52 01 00 00    	je     c0023105 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022fb3:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022fb7:	66 81 f9 06 04       	cmp    cx,0x406
c0022fbc:	75 2c                	jne    c0022fea <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022fbe:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022fc3:	50                   	push   eax
c0022fc4:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022fc9:	50                   	push   eax
c0022fca:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022fcf:	50                   	push   eax
c0022fd0:	56                   	push   esi
c0022fd1:	e8 b4 fb ff ff       	call   c0022b8a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022fd6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022fda:	0f b6 c0             	movzx  eax,al
c0022fdd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022fe1:	83 c4 2c             	add    esp,0x2c
c0022fe4:	5b                   	pop    ebx
c0022fe5:	5e                   	pop    esi
c0022fe6:	5f                   	pop    edi
c0022fe7:	5d                   	pop    ebp
c0022fe8:	eb 8e                	jmp    c0022f78 <PCI::checkBus(unsigned char)>
c0022fea:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022fee:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022ff4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022ff8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022ffc:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0023000:	88 d3                	mov    bl,dl
c0023002:	85 c0                	test   eax,eax
c0023004:	74 33                	je     c0023039 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0023006:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0023009:	85 d2                	test   edx,edx
c002300b:	74 28                	je     c0023035 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002300d:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0023013:	31 ef                	xor    edi,ebp
c0023015:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c002301b:	75 18                	jne    c0023035 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002301d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023021:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0023027:	75 0c                	jne    c0023035 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023029:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c002302f:	0f 84 d0 00 00 00    	je     c0023105 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0023035:	8b 00                	mov    eax,DWORD PTR [eax]
c0023037:	eb c9                	jmp    c0023002 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0023039:	66 81 f9 01 06       	cmp    cx,0x601
c002303e:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0023042:	75 19                	jne    c002305d <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0023044:	83 ec 0c             	sub    esp,0xc
c0023047:	68 64 01 00 00       	push   0x164
c002304c:	e8 08 c8 fe ff       	call   c000f859 <malloc>
c0023051:	89 c5                	mov    ebp,eax
c0023053:	89 04 24             	mov    DWORD PTR [esp],eax
c0023056:	e8 85 0e 00 00       	call   c0023ee0 <SATABus::SATABus()>
c002305b:	eb 1e                	jmp    c002307b <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c002305d:	66 81 f9 01 01       	cmp    cx,0x101
c0023062:	75 60                	jne    c00230c4 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0023064:	83 ec 0c             	sub    esp,0xc
c0023067:	68 70 02 00 00       	push   0x270
c002306c:	e8 e8 c7 fe ff       	call   c000f859 <malloc>
c0023071:	89 c5                	mov    ebp,eax
c0023073:	89 04 24             	mov    DWORD PTR [esp],eax
c0023076:	e8 0f 03 00 00       	call   c002338a <IDE::IDE()>
c002307b:	58                   	pop    eax
c002307c:	5a                   	pop    edx
c002307d:	55                   	push   ebp
c002307e:	56                   	push   esi
c002307f:	e8 66 0c ff ff       	call   c0013cea <Device::addChild(Device*)>
c0023084:	83 ec 1c             	sub    esp,0x1c
c0023087:	b9 09 00 00 00       	mov    ecx,0x9
c002308c:	fc                   	cld    
c002308d:	89 e7                	mov    edi,esp
c002308f:	89 de                	mov    esi,ebx
c0023091:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023093:	55                   	push   ebp
c0023094:	e8 63 0b ff ff       	call   c0013bfc <Device::preOpenPCI(PCIDeviceInfo)>
c0023099:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002309c:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c00230a0:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00230a8:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00230b0:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00230b8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00230bb:	83 c4 4c             	add    esp,0x4c
c00230be:	5b                   	pop    ebx
c00230bf:	5e                   	pop    esi
c00230c0:	5f                   	pop    edi
c00230c1:	5d                   	pop    ebp
c00230c2:	ff e0                	jmp    eax
c00230c4:	83 ec 0c             	sub    esp,0xc
c00230c7:	68 58 01 00 00       	push   0x158
c00230cc:	e8 88 c7 fe ff       	call   c000f859 <malloc>
c00230d1:	89 c5                	mov    ebp,eax
c00230d3:	58                   	pop    eax
c00230d4:	5a                   	pop    edx
c00230d5:	68 93 ca 02 c0       	push   0xc002ca93
c00230da:	55                   	push   ebp
c00230db:	e8 14 0f ff ff       	call   c0013ff4 <DriverlessDevice::DriverlessDevice(char const*)>
c00230e0:	59                   	pop    ecx
c00230e1:	5f                   	pop    edi
c00230e2:	55                   	push   ebp
c00230e3:	56                   	push   esi
c00230e4:	e8 01 0c ff ff       	call   c0013cea <Device::addChild(Device*)>
c00230e9:	b9 09 00 00 00       	mov    ecx,0x9
c00230ee:	fc                   	cld    
c00230ef:	89 df                	mov    edi,ebx
c00230f1:	89 de                	mov    esi,ebx
c00230f3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00230f5:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00230f9:	83 c4 2c             	add    esp,0x2c
c00230fc:	5b                   	pop    ebx
c00230fd:	5e                   	pop    esi
c00230fe:	5f                   	pop    edi
c00230ff:	5d                   	pop    ebp
c0023100:	e9 f7 0a ff ff       	jmp    c0013bfc <Device::preOpenPCI(PCIDeviceInfo)>
c0023105:	83 c4 1c             	add    esp,0x1c
c0023108:	5b                   	pop    ebx
c0023109:	5e                   	pop    esi
c002310a:	5f                   	pop    edi
c002310b:	5d                   	pop    ebp
c002310c:	c3                   	ret    
c002310d:	90                   	nop

c002310e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002310e:	55                   	push   ebp
c002310f:	57                   	push   edi
c0023110:	56                   	push   esi
c0023111:	53                   	push   ebx
c0023112:	83 ec 68             	sub    esp,0x68
c0023115:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0023119:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0023120:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023124:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c002312b:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0023130:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023134:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c002313b:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0023140:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0023144:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0023149:	6a 0c                	push   0xc
c002314b:	57                   	push   edi
c002314c:	53                   	push   ebx
c002314d:	56                   	push   esi
c002314e:	55                   	push   ebp
c002314f:	e8 88 f8 ff ff       	call   c00229dc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023154:	83 c4 20             	add    esp,0x20
c0023157:	57                   	push   edi
c0023158:	53                   	push   ebx
c0023159:	56                   	push   esi
c002315a:	55                   	push   ebp
c002315b:	e8 70 f9 ff ff       	call   c0022ad0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0023160:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0023165:	57                   	push   edi
c0023166:	53                   	push   ebx
c0023167:	56                   	push   esi
c0023168:	55                   	push   ebp
c0023169:	e8 f8 f9 ff ff       	call   c0022b66 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002316e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0023172:	83 c4 14             	add    esp,0x14
c0023175:	6a 3c                	push   0x3c
c0023177:	57                   	push   edi
c0023178:	53                   	push   ebx
c0023179:	56                   	push   esi
c002317a:	55                   	push   ebp
c002317b:	e8 5c f8 ff ff       	call   c00229dc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023180:	0f b6 c4             	movzx  eax,ah
c0023183:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0023187:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002318b:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c002318f:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0023194:	83 c4 20             	add    esp,0x20
c0023197:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002319d:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c00231a4:	74 7c                	je     c0023222 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c00231a6:	31 c0                	xor    eax,eax
c00231a8:	8b 15 08 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e408
c00231ae:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00231b4:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c00231ba:	7e 66                	jle    c0023222 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c00231bc:	8d 14 c2             	lea    edx,[edx+eax*8]
c00231bf:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c00231c6:	39 cb                	cmp    ebx,ecx
c00231c8:	75 55                	jne    c002321f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c00231ca:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c00231d1:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00231d5:	75 48                	jne    c002321f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c00231d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00231db:	83 ec 0c             	sub    esp,0xc
c00231de:	68 ad ca 02 c0       	push   0xc002caad
c00231e3:	e8 c9 f6 fe ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c00231e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00231ec:	8b 15 08 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e408
c00231f2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00231f6:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00231fc:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0023204:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0023208:	52                   	push   edx
c0023209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002320d:	53                   	push   ebx
c002320e:	68 d2 ca 02 c0       	push   0xc002cad2
c0023213:	e8 99 f6 fe ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0023218:	83 c4 20             	add    esp,0x20
c002321b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002321f:	40                   	inc    eax
c0023220:	eb 86                	jmp    c00231a8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0023222:	31 d2                	xor    edx,edx
c0023224:	83 ec 0c             	sub    esp,0xc
c0023227:	57                   	push   edi
c0023228:	53                   	push   ebx
c0023229:	56                   	push   esi
c002322a:	52                   	push   edx
c002322b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002322f:	55                   	push   ebp
c0023230:	e8 7d f9 ff ff       	call   c0022bb2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023235:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0023239:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002323d:	42                   	inc    edx
c002323e:	83 c4 20             	add    esp,0x20
c0023241:	83 fa 06             	cmp    edx,0x6
c0023244:	75 de                	jne    c0023224 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0023246:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c002324b:	83 ec 0c             	sub    esp,0xc
c002324e:	86 e0                	xchg   al,ah
c0023250:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0023255:	6a 02                	push   0x2
c0023257:	57                   	push   edi
c0023258:	53                   	push   ebx
c0023259:	56                   	push   esi
c002325a:	55                   	push   ebp
c002325b:	e8 7c f7 ff ff       	call   c00229dc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023260:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0023265:	83 c4 20             	add    esp,0x20
c0023268:	57                   	push   edi
c0023269:	53                   	push   ebx
c002326a:	56                   	push   esi
c002326b:	55                   	push   ebp
c002326c:	e8 a9 f8 ff ff       	call   c0022b1a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0023271:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0023275:	57                   	push   edi
c0023276:	53                   	push   ebx
c0023277:	56                   	push   esi
c0023278:	55                   	push   ebp
c0023279:	e8 06 f8 ff ff       	call   c0022a84 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002327e:	b9 09 00 00 00       	mov    ecx,0x9
c0023283:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0023288:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c002328c:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0023290:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0023294:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0023298:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002329c:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c00232a0:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c00232a4:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c00232a8:	83 ec 0c             	sub    esp,0xc
c00232ab:	fc                   	cld    
c00232ac:	89 e7                	mov    edi,esp
c00232ae:	8d 74 24 58          	lea    esi,[esp+0x58]
c00232b2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00232b4:	55                   	push   ebp
c00232b5:	e8 e2 fc ff ff       	call   c0022f9c <PCI::foundDevice(PCIDeviceInfo)>
c00232ba:	81 c4 8c 00 00 00    	add    esp,0x8c
c00232c0:	5b                   	pop    ebx
c00232c1:	5e                   	pop    esi
c00232c2:	5f                   	pop    edi
c00232c3:	5d                   	pop    ebp
c00232c4:	c3                   	ret    
c00232c5:	90                   	nop

c00232c6 <PCI::checkDevice(unsigned char, unsigned char)>:
c00232c6:	55                   	push   ebp
c00232c7:	57                   	push   edi
c00232c8:	56                   	push   esi
c00232c9:	53                   	push   ebx
c00232ca:	83 ec 0c             	sub    esp,0xc
c00232cd:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00232d1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00232d6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00232db:	6a 00                	push   0x0
c00232dd:	56                   	push   esi
c00232de:	57                   	push   edi
c00232df:	55                   	push   ebp
c00232e0:	e8 9f f7 ff ff       	call   c0022a84 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00232e5:	6a 00                	push   0x0
c00232e7:	56                   	push   esi
c00232e8:	57                   	push   edi
c00232e9:	55                   	push   ebp
c00232ea:	e8 1f fe ff ff       	call   c002310e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00232ef:	83 c4 20             	add    esp,0x20
c00232f2:	6a 00                	push   0x0
c00232f4:	56                   	push   esi
c00232f5:	57                   	push   edi
c00232f6:	55                   	push   ebp
c00232f7:	e8 ac f7 ff ff       	call   c0022aa8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00232fc:	83 c4 10             	add    esp,0x10
c00232ff:	84 c0                	test   al,al
c0023301:	79 27                	jns    c002332a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0023303:	bb 01 00 00 00       	mov    ebx,0x1
c0023308:	53                   	push   ebx
c0023309:	56                   	push   esi
c002330a:	57                   	push   edi
c002330b:	55                   	push   ebp
c002330c:	e8 73 f7 ff ff       	call   c0022a84 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023311:	83 c4 10             	add    esp,0x10
c0023314:	66 40                	inc    ax
c0023316:	74 0c                	je     c0023324 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0023318:	53                   	push   ebx
c0023319:	56                   	push   esi
c002331a:	57                   	push   edi
c002331b:	55                   	push   ebp
c002331c:	e8 ed fd ff ff       	call   c002310e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023321:	83 c4 10             	add    esp,0x10
c0023324:	43                   	inc    ebx
c0023325:	83 fb 08             	cmp    ebx,0x8
c0023328:	75 de                	jne    c0023308 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002332a:	83 c4 0c             	add    esp,0xc
c002332d:	5b                   	pop    ebx
c002332e:	5e                   	pop    esi
c002332f:	5f                   	pop    edi
c0023330:	5d                   	pop    ebp
c0023331:	c3                   	ret    

c0023332 <PCI::detect()>:
c0023332:	56                   	push   esi
c0023333:	53                   	push   ebx
c0023334:	53                   	push   ebx
c0023335:	31 db                	xor    ebx,ebx
c0023337:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002333b:	6a 00                	push   0x0
c002333d:	6a 00                	push   0x0
c002333f:	6a 00                	push   0x0
c0023341:	56                   	push   esi
c0023342:	e8 61 f7 ff ff       	call   c0022aa8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023347:	83 c4 10             	add    esp,0x10
c002334a:	a8 80                	test   al,0x80
c002334c:	75 21                	jne    c002336f <PCI::detect()+0x3d>
c002334e:	51                   	push   ecx
c002334f:	51                   	push   ecx
c0023350:	6a 00                	push   0x0
c0023352:	56                   	push   esi
c0023353:	e8 20 fc ff ff       	call   c0022f78 <PCI::checkBus(unsigned char)>
c0023358:	83 c4 10             	add    esp,0x10
c002335b:	eb 24                	jmp    c0023381 <PCI::detect()+0x4f>
c002335d:	52                   	push   edx
c002335e:	52                   	push   edx
c002335f:	53                   	push   ebx
c0023360:	43                   	inc    ebx
c0023361:	56                   	push   esi
c0023362:	e8 11 fc ff ff       	call   c0022f78 <PCI::checkBus(unsigned char)>
c0023367:	83 c4 10             	add    esp,0x10
c002336a:	83 fb 08             	cmp    ebx,0x8
c002336d:	74 12                	je     c0023381 <PCI::detect()+0x4f>
c002336f:	53                   	push   ebx
c0023370:	6a 00                	push   0x0
c0023372:	6a 00                	push   0x0
c0023374:	56                   	push   esi
c0023375:	e8 0a f7 ff ff       	call   c0022a84 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002337a:	83 c4 10             	add    esp,0x10
c002337d:	66 40                	inc    ax
c002337f:	74 dc                	je     c002335d <PCI::detect()+0x2b>
c0023381:	58                   	pop    eax
c0023382:	5b                   	pop    ebx
c0023383:	5e                   	pop    esi
c0023384:	c3                   	ret    
c0023385:	90                   	nop

c0023386 <IDE::close(int, int, void*)>:
c0023386:	83 c8 ff             	or     eax,0xffffffff
c0023389:	c3                   	ret    

c002338a <IDE::IDE()>:
c002338a:	83 ec 0c             	sub    esp,0xc
c002338d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023391:	83 ec 08             	sub    esp,0x8
c0023394:	68 1c cb 02 c0       	push   0xc002cb1c
c0023399:	50                   	push   eax
c002339a:	e8 f9 0c ff ff       	call   c0014098 <HardDiskController::HardDiskController(char const*)>
c002339f:	83 c4 10             	add    esp,0x10
c00233a2:	ba ac cb 02 c0       	mov    edx,0xc002cbac
c00233a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233ab:	89 10                	mov    DWORD PTR [eax],edx
c00233ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233b1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00233b8:	90                   	nop
c00233b9:	83 c4 0c             	add    esp,0xc
c00233bc:	c3                   	ret    
c00233bd:	90                   	nop

c00233be <IDE::prepareInterrupt(unsigned char)>:
c00233be:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00233c3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00233c7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00233cf:	c3                   	ret    

c00233d0 <selectDrive(unsigned char, unsigned char)>:
c00233d0:	c3                   	ret    
c00233d1:	90                   	nop

c00233d2 <IDE::getBase(unsigned char)>:
c00233d2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00233d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00233db:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00233e3:	c3                   	ret    

c00233e4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00233e4:	55                   	push   ebp
c00233e5:	57                   	push   edi
c00233e6:	56                   	push   esi
c00233e7:	53                   	push   ebx
c00233e8:	83 ec 1c             	sub    esp,0x1c
c00233eb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00233ef:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00233f3:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00233f6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00233fa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00233fe:	80 f9 03             	cmp    cl,0x3
c0023401:	77 51                	ja     c0023454 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023403:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023407:	0f b6 f2             	movzx  esi,dl
c002340a:	0f b6 db             	movzx  ebx,bl
c002340d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023410:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023414:	83 ca 80             	or     edx,0xffffff80
c0023417:	0f b6 d2             	movzx  edx,dl
c002341a:	52                   	push   edx
c002341b:	6a 0c                	push   0xc
c002341d:	56                   	push   esi
c002341e:	57                   	push   edi
c002341f:	e8 c0 ff ff ff       	call   c00233e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023424:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023429:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002342d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023431:	ee                   	out    dx,al
c0023432:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023437:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002343b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002343f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023443:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002344b:	83 c4 2c             	add    esp,0x2c
c002344e:	5b                   	pop    ebx
c002344f:	5e                   	pop    esi
c0023450:	5f                   	pop    edi
c0023451:	5d                   	pop    ebp
c0023452:	eb 90                	jmp    c00233e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023454:	80 fb 07             	cmp    bl,0x7
c0023457:	77 12                	ja     c002346b <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023459:	0f b6 d2             	movzx  edx,dl
c002345c:	0f b6 db             	movzx  ebx,bl
c002345f:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023467:	89 da                	mov    edx,ebx
c0023469:	eb 2f                	jmp    c002349a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002346b:	80 fb 0d             	cmp    bl,0xd
c002346e:	77 13                	ja     c0023483 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023470:	0f b6 d2             	movzx  edx,dl
c0023473:	0f b6 db             	movzx  ebx,bl
c0023476:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002347d:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023481:	eb 17                	jmp    c002349a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023483:	80 fb 15             	cmp    bl,0x15
c0023486:	77 13                	ja     c002349b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023488:	0f b6 d2             	movzx  edx,dl
c002348b:	0f b6 db             	movzx  ebx,bl
c002348e:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023496:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002349a:	ee                   	out    dx,al
c002349b:	83 c4 1c             	add    esp,0x1c
c002349e:	5b                   	pop    ebx
c002349f:	5e                   	pop    esi
c00234a0:	5f                   	pop    edi
c00234a1:	5d                   	pop    ebp
c00234a2:	c3                   	ret    
c00234a3:	90                   	nop

c00234a4 <IDE::read(unsigned char, unsigned char)>:
c00234a4:	55                   	push   ebp
c00234a5:	57                   	push   edi
c00234a6:	56                   	push   esi
c00234a7:	53                   	push   ebx
c00234a8:	83 ec 1c             	sub    esp,0x1c
c00234ab:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00234af:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00234b3:	8d 43 f8             	lea    eax,[ebx-0x8]
c00234b6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00234ba:	3c 03                	cmp    al,0x3
c00234bc:	77 43                	ja     c0023501 <IDE::read(unsigned char, unsigned char)+0x5d>
c00234be:	0f b6 f2             	movzx  esi,dl
c00234c1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00234c4:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00234c8:	83 c8 80             	or     eax,0xffffff80
c00234cb:	0f b6 c0             	movzx  eax,al
c00234ce:	50                   	push   eax
c00234cf:	6a 0c                	push   0xc
c00234d1:	56                   	push   esi
c00234d2:	57                   	push   edi
c00234d3:	e8 0c ff ff ff       	call   c00233e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00234d8:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00234dd:	0f b6 c3             	movzx  eax,bl
c00234e0:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00234e4:	ec                   	in     al,dx
c00234e5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00234e9:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00234ee:	52                   	push   edx
c00234ef:	6a 0c                	push   0xc
c00234f1:	56                   	push   esi
c00234f2:	57                   	push   edi
c00234f3:	e8 ec fe ff ff       	call   c00233e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00234f8:	83 c4 20             	add    esp,0x20
c00234fb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00234ff:	eb 49                	jmp    c002354a <IDE::read(unsigned char, unsigned char)+0xa6>
c0023501:	80 fb 07             	cmp    bl,0x7
c0023504:	77 12                	ja     c0023518 <IDE::read(unsigned char, unsigned char)+0x74>
c0023506:	0f b6 d2             	movzx  edx,dl
c0023509:	0f b6 c3             	movzx  eax,bl
c002350c:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023514:	89 c2                	mov    edx,eax
c0023516:	eb 31                	jmp    c0023549 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023518:	80 fb 0d             	cmp    bl,0xd
c002351b:	77 13                	ja     c0023530 <IDE::read(unsigned char, unsigned char)+0x8c>
c002351d:	0f b6 d2             	movzx  edx,dl
c0023520:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023527:	0f b6 d3             	movzx  edx,bl
c002352a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002352e:	eb 19                	jmp    c0023549 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023530:	31 c0                	xor    eax,eax
c0023532:	80 fb 15             	cmp    bl,0x15
c0023535:	77 13                	ja     c002354a <IDE::read(unsigned char, unsigned char)+0xa6>
c0023537:	0f b6 d2             	movzx  edx,dl
c002353a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023542:	0f b6 d3             	movzx  edx,bl
c0023545:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023549:	ec                   	in     al,dx
c002354a:	83 c4 1c             	add    esp,0x1c
c002354d:	5b                   	pop    ebx
c002354e:	5e                   	pop    esi
c002354f:	5f                   	pop    edi
c0023550:	5d                   	pop    ebp
c0023551:	c3                   	ret    

c0023552 <IDE::waitInterrupt(unsigned char)>:
c0023552:	55                   	push   ebp
c0023553:	57                   	push   edi
c0023554:	56                   	push   esi
c0023555:	53                   	push   ebx
c0023556:	31 db                	xor    ebx,ebx
c0023558:	83 ec 0c             	sub    esp,0xc
c002355b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002355f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023564:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002356c:	89 e8                	mov    eax,ebp
c002356e:	84 c0                	test   al,al
c0023570:	75 34                	jne    c00235a6 <IDE::waitInterrupt(unsigned char)+0x54>
c0023572:	52                   	push   edx
c0023573:	6a 0c                	push   0xc
c0023575:	56                   	push   esi
c0023576:	57                   	push   edi
c0023577:	e8 28 ff ff ff       	call   c00234a4 <IDE::read(unsigned char, unsigned char)>
c002357c:	83 c4 10             	add    esp,0x10
c002357f:	a8 01                	test   al,0x1
c0023581:	75 2b                	jne    c00235ae <IDE::waitInterrupt(unsigned char)+0x5c>
c0023583:	f6 c3 04             	test   bl,0x4
c0023586:	75 16                	jne    c002359e <IDE::waitInterrupt(unsigned char)+0x4c>
c0023588:	83 fb 32             	cmp    ebx,0x32
c002358b:	7e 11                	jle    c002359e <IDE::waitInterrupt(unsigned char)+0x4c>
c002358d:	50                   	push   eax
c002358e:	50                   	push   eax
c002358f:	6a 00                	push   0x0
c0023591:	68 80 96 98 00       	push   0x989680
c0023596:	e8 f0 aa ff ff       	call   c001e08b <nanoSleep(unsigned long long)>
c002359b:	83 c4 10             	add    esp,0x10
c002359e:	83 fb 3c             	cmp    ebx,0x3c
c00235a1:	74 0b                	je     c00235ae <IDE::waitInterrupt(unsigned char)+0x5c>
c00235a3:	43                   	inc    ebx
c00235a4:	eb be                	jmp    c0023564 <IDE::waitInterrupt(unsigned char)+0x12>
c00235a6:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00235ae:	83 c4 0c             	add    esp,0xc
c00235b1:	89 e8                	mov    eax,ebp
c00235b3:	5b                   	pop    ebx
c00235b4:	5e                   	pop    esi
c00235b5:	5f                   	pop    edi
c00235b6:	5d                   	pop    ebp
c00235b7:	c3                   	ret    

c00235b8 <ideChannel0IRQHandler(regs*, void*)>:
c00235b8:	83 ec 10             	sub    esp,0x10
c00235bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00235bf:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00235c6:	6a 07                	push   0x7
c00235c8:	6a 00                	push   0x0
c00235ca:	50                   	push   eax
c00235cb:	e8 d4 fe ff ff       	call   c00234a4 <IDE::read(unsigned char, unsigned char)>
c00235d0:	83 c4 1c             	add    esp,0x1c
c00235d3:	c3                   	ret    

c00235d4 <ideChannel1IRQHandler(regs*, void*)>:
c00235d4:	83 ec 10             	sub    esp,0x10
c00235d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00235db:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00235e2:	6a 07                	push   0x7
c00235e4:	6a 01                	push   0x1
c00235e6:	50                   	push   eax
c00235e7:	e8 b8 fe ff ff       	call   c00234a4 <IDE::read(unsigned char, unsigned char)>
c00235ec:	83 c4 1c             	add    esp,0x1c
c00235ef:	c3                   	ret    

c00235f0 <IDE::enableIRQs(unsigned char, bool)>:
c00235f0:	57                   	push   edi
c00235f1:	56                   	push   esi
c00235f2:	be 04 00 00 00       	mov    esi,0x4
c00235f7:	53                   	push   ebx
c00235f8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00235fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023601:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023606:	0f 94 c0             	sete   al
c0023609:	d1 e0                	shl    eax,1
c002360b:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023612:	0f b6 c0             	movzx  eax,al
c0023615:	50                   	push   eax
c0023616:	6a 0c                	push   0xc
c0023618:	57                   	push   edi
c0023619:	53                   	push   ebx
c002361a:	e8 c5 fd ff ff       	call   c00233e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002361f:	83 c4 10             	add    esp,0x10
c0023622:	50                   	push   eax
c0023623:	6a 0c                	push   0xc
c0023625:	57                   	push   edi
c0023626:	53                   	push   ebx
c0023627:	e8 78 fe ff ff       	call   c00234a4 <IDE::read(unsigned char, unsigned char)>
c002362c:	83 c4 10             	add    esp,0x10
c002362f:	4e                   	dec    esi
c0023630:	75 f0                	jne    c0023622 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023632:	5b                   	pop    ebx
c0023633:	5e                   	pop    esi
c0023634:	5f                   	pop    edi
c0023635:	c3                   	ret    

c0023636 <IDE::open(int, int, void*)>:
c0023636:	55                   	push   ebp
c0023637:	57                   	push   edi
c0023638:	56                   	push   esi
c0023639:	53                   	push   ebx
c002363a:	83 ec 1c             	sub    esp,0x1c
c002363d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023641:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002364a:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023653:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002365a:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023661:	0f 85 b0 02 00 00    	jne    c0023917 <IDE::open(int, int, void*)+0x2e1>
c0023667:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002366d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023671:	83 e0 7f             	and    eax,0x7f
c0023674:	3c 05                	cmp    al,0x5
c0023676:	74 04                	je     c002367c <IDE::open(int, int, void*)+0x46>
c0023678:	3c 0f                	cmp    al,0xf
c002367a:	75 32                	jne    c00236ae <IDE::open(int, int, void*)+0x78>
c002367c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023682:	83 e0 fc             	and    eax,0xfffffffc
c0023685:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002368c:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023692:	83 e0 fc             	and    eax,0xfffffffc
c0023695:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002369c:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00236a2:	83 e0 fc             	and    eax,0xfffffffc
c00236a5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00236ac:	eb 14                	jmp    c00236c2 <IDE::open(int, int, void*)+0x8c>
c00236ae:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00236b8:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00236c2:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00236c9:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00236d0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00236d4:	89 c6                	mov    esi,eax
c00236d6:	bf f8 0c 00 00       	mov    edi,0xcf8
c00236db:	c1 e6 10             	shl    esi,0x10
c00236de:	89 e8                	mov    eax,ebp
c00236e0:	89 fa                	mov    edx,edi
c00236e2:	c1 e0 0b             	shl    eax,0xb
c00236e5:	09 f0                	or     eax,esi
c00236e7:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00236ee:	c1 e6 08             	shl    esi,0x8
c00236f1:	09 c6                	or     esi,eax
c00236f3:	89 f0                	mov    eax,esi
c00236f5:	0d 08 00 00 80       	or     eax,0x80000008
c00236fa:	ef                   	out    dx,eax
c00236fb:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023700:	89 ca                	mov    edx,ecx
c0023702:	ed                   	in     eax,dx
c0023703:	c1 e8 10             	shr    eax,0x10
c0023706:	3d ff ff 00 00       	cmp    eax,0xffff
c002370b:	0f 84 f5 00 00 00    	je     c0023806 <IDE::open(int, int, void*)+0x1d0>
c0023711:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023717:	89 fa                	mov    edx,edi
c0023719:	89 f0                	mov    eax,esi
c002371b:	ef                   	out    dx,eax
c002371c:	b0 fe                	mov    al,0xfe
c002371e:	89 ca                	mov    edx,ecx
c0023720:	ee                   	out    dx,al
c0023721:	89 f0                	mov    eax,esi
c0023723:	89 fa                	mov    edx,edi
c0023725:	ef                   	out    dx,eax
c0023726:	89 ca                	mov    edx,ecx
c0023728:	ed                   	in     eax,dx
c0023729:	3c fe                	cmp    al,0xfe
c002372b:	0f 85 a9 00 00 00    	jne    c00237da <IDE::open(int, int, void*)+0x1a4>
c0023731:	8b 15 08 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e408
c0023737:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c002373e:	74 33                	je     c0023773 <IDE::open(int, int, void*)+0x13d>
c0023740:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023746:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002374a:	40                   	inc    eax
c002374b:	83 ec 0c             	sub    esp,0xc
c002374e:	0f b6 c0             	movzx  eax,al
c0023751:	50                   	push   eax
c0023752:	55                   	push   ebp
c0023753:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023757:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c002375d:	51                   	push   ecx
c002375e:	e8 e5 46 ff ff       	call   c0017e48 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023763:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023768:	83 c4 1c             	add    esp,0x1c
c002376b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023771:	eb 0a                	jmp    c002377d <IDE::open(int, int, void*)+0x147>
c0023773:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002377d:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023784:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002378b:	c1 e1 10             	shl    ecx,0x10
c002378e:	c1 e0 08             	shl    eax,0x8
c0023791:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023796:	09 c1                	or     ecx,eax
c0023798:	89 fa                	mov    edx,edi
c002379a:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00237a1:	c1 e0 0b             	shl    eax,0xb
c00237a4:	09 c1                	or     ecx,eax
c00237a6:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00237ac:	89 c8                	mov    eax,ecx
c00237ae:	ef                   	out    dx,eax
c00237af:	be fc 0c 00 00       	mov    esi,0xcfc
c00237b4:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00237ba:	89 f2                	mov    edx,esi
c00237bc:	ee                   	out    dx,al
c00237bd:	89 c8                	mov    eax,ecx
c00237bf:	89 fa                	mov    edx,edi
c00237c1:	ef                   	out    dx,eax
c00237c2:	89 f2                	mov    edx,esi
c00237c4:	ed                   	in     eax,dx
c00237c5:	0f b6 c0             	movzx  eax,al
c00237c8:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00237ce:	74 46                	je     c0023816 <IDE::open(int, int, void*)+0x1e0>
c00237d0:	83 ec 0c             	sub    esp,0xc
c00237d3:	68 34 cb 02 c0       	push   0xc002cb34
c00237d8:	eb 34                	jmp    c002380e <IDE::open(int, int, void*)+0x1d8>
c00237da:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00237e3:	75 17                	jne    c00237fc <IDE::open(int, int, void*)+0x1c6>
c00237e5:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00237ea:	74 07                	je     c00237f3 <IDE::open(int, int, void*)+0x1bd>
c00237ec:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00237f1:	75 09                	jne    c00237fc <IDE::open(int, int, void*)+0x1c6>
c00237f3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00237fa:	eb 1a                	jmp    c0023816 <IDE::open(int, int, void*)+0x1e0>
c00237fc:	83 ec 0c             	sub    esp,0xc
c00237ff:	68 3c cb 02 c0       	push   0xc002cb3c
c0023804:	eb 08                	jmp    c002380e <IDE::open(int, int, void*)+0x1d8>
c0023806:	83 ec 0c             	sub    esp,0xc
c0023809:	68 6d cb 02 c0       	push   0xc002cb6d
c002380e:	e8 0c 6a ff ff       	call   c001a21f <Krnl::panic(char const*)>
c0023813:	83 c4 10             	add    esp,0x10
c0023816:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c002381d:	79 1a                	jns    c0023839 <IDE::open(int, int, void*)+0x203>
c002381f:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023825:	83 e0 fc             	and    eax,0xfffffffc
c0023828:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002382f:	83 c0 08             	add    eax,0x8
c0023832:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023839:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002383f:	89 c2                	mov    edx,eax
c0023841:	83 e2 0f             	and    edx,0xf
c0023844:	66 83 fa 08          	cmp    dx,0x8
c0023848:	75 0a                	jne    c0023854 <IDE::open(int, int, void*)+0x21e>
c002384a:	83 e8 02             	sub    eax,0x2
c002384d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023854:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002385a:	89 c2                	mov    edx,eax
c002385c:	83 e2 0f             	and    edx,0xf
c002385f:	66 83 fa 08          	cmp    dx,0x8
c0023863:	75 0a                	jne    c002386f <IDE::open(int, int, void*)+0x239>
c0023865:	83 e8 02             	sub    eax,0x2
c0023868:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002386f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023876:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002387d:	89 d0                	mov    eax,edx
c002387f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023882:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023886:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002388a:	8d 4a 01             	lea    ecx,[edx+0x1]
c002388d:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023892:	0f b6 c9             	movzx  ecx,cl
c0023895:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002389c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002389f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00238a3:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00238a7:	8d 50 02             	lea    edx,[eax+0x2]
c00238aa:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00238af:	0f b6 d2             	movzx  edx,dl
c00238b2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00238b8:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00238bb:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00238bf:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00238c3:	8d 48 03             	lea    ecx,[eax+0x3]
c00238c6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00238cb:	0f b6 c9             	movzx  ecx,cl
c00238ce:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00238d4:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00238d7:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00238db:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00238df:	8d 50 04             	lea    edx,[eax+0x4]
c00238e2:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00238e8:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00238ed:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00238f4:	66 85 f6             	test   si,si
c00238f7:	74 5b                	je     c0023954 <IDE::open(int, int, void*)+0x31e>
c00238f9:	0f b6 d2             	movzx  edx,dl
c00238fc:	83 c0 05             	add    eax,0x5
c00238ff:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023902:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023906:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002390a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023910:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023915:	eb 3d                	jmp    c0023954 <IDE::open(int, int, void*)+0x31e>
c0023917:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c002391d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023924:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002392b:	66 05 06 02          	add    ax,0x206
c002392f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023936:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c002393d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023944:	66 05 06 02          	add    ax,0x206
c0023948:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002394f:	e9 e5 fe ff ff       	jmp    c0023839 <IDE::open(int, int, void*)+0x203>
c0023954:	50                   	push   eax
c0023955:	50                   	push   eax
c0023956:	6a 00                	push   0x0
c0023958:	53                   	push   ebx
c0023959:	e8 60 fa ff ff       	call   c00233be <IDE::prepareInterrupt(unsigned char)>
c002395e:	5a                   	pop    edx
c002395f:	59                   	pop    ecx
c0023960:	6a 01                	push   0x1
c0023962:	53                   	push   ebx
c0023963:	e8 56 fa ff ff       	call   c00233be <IDE::prepareInterrupt(unsigned char)>
c0023968:	83 c4 0c             	add    esp,0xc
c002396b:	6a 00                	push   0x0
c002396d:	6a 00                	push   0x0
c002396f:	53                   	push   ebx
c0023970:	e8 7b fc ff ff       	call   c00235f0 <IDE::enableIRQs(unsigned char, bool)>
c0023975:	83 c4 0c             	add    esp,0xc
c0023978:	6a 00                	push   0x0
c002397a:	6a 01                	push   0x1
c002397c:	53                   	push   ebx
c002397d:	e8 6e fc ff ff       	call   c00235f0 <IDE::enableIRQs(unsigned char, bool)>
c0023982:	83 c4 10             	add    esp,0x10
c0023985:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002398c:	74 34                	je     c00239c2 <IDE::open(int, int, void*)+0x38c>
c002398e:	83 ec 0c             	sub    esp,0xc
c0023991:	53                   	push   ebx
c0023992:	6a 01                	push   0x1
c0023994:	68 b8 35 02 c0       	push   0xc00235b8
c0023999:	6a 0e                	push   0xe
c002399b:	53                   	push   ebx
c002399c:	e8 c1 02 ff ff       	call   c0013c62 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00239a1:	83 c4 14             	add    esp,0x14
c00239a4:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00239aa:	53                   	push   ebx
c00239ab:	6a 01                	push   0x1
c00239ad:	68 d4 35 02 c0       	push   0xc00235d4
c00239b2:	6a 0f                	push   0xf
c00239b4:	53                   	push   ebx
c00239b5:	e8 a8 02 ff ff       	call   c0013c62 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00239ba:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00239c0:	eb 38                	jmp    c00239fa <IDE::open(int, int, void*)+0x3c4>
c00239c2:	83 ec 0c             	sub    esp,0xc
c00239c5:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00239cf:	53                   	push   ebx
c00239d0:	6a 00                	push   0x0
c00239d2:	68 b8 35 02 c0       	push   0xc00235b8
c00239d7:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00239dd:	53                   	push   ebx
c00239de:	e8 7f 02 ff ff       	call   c0013c62 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00239e3:	83 c4 14             	add    esp,0x14
c00239e6:	53                   	push   ebx
c00239e7:	6a 00                	push   0x0
c00239e9:	68 d4 35 02 c0       	push   0xc00235d4
c00239ee:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00239f4:	53                   	push   ebx
c00239f5:	e8 68 02 ff ff       	call   c0013c62 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00239fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00239fc:	83 c4 20             	add    esp,0x20
c00239ff:	83 ec 0c             	sub    esp,0xc
c0023a02:	53                   	push   ebx
c0023a03:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023a06:	83 c4 0c             	add    esp,0xc
c0023a09:	6a 07                	push   0x7
c0023a0b:	6a 00                	push   0x0
c0023a0d:	53                   	push   ebx
c0023a0e:	e8 91 fa ff ff       	call   c00234a4 <IDE::read(unsigned char, unsigned char)>
c0023a13:	83 c4 0c             	add    esp,0xc
c0023a16:	6a 07                	push   0x7
c0023a18:	6a 01                	push   0x1
c0023a1a:	53                   	push   ebx
c0023a1b:	e8 84 fa ff ff       	call   c00234a4 <IDE::read(unsigned char, unsigned char)>
c0023a20:	83 c4 0c             	add    esp,0xc
c0023a23:	6a 01                	push   0x1
c0023a25:	6a 00                	push   0x0
c0023a27:	53                   	push   ebx
c0023a28:	e8 c3 fb ff ff       	call   c00235f0 <IDE::enableIRQs(unsigned char, bool)>
c0023a2d:	83 c4 0c             	add    esp,0xc
c0023a30:	6a 01                	push   0x1
c0023a32:	6a 01                	push   0x1
c0023a34:	53                   	push   ebx
c0023a35:	e8 b6 fb ff ff       	call   c00235f0 <IDE::enableIRQs(unsigned char, bool)>
c0023a3a:	83 c4 2c             	add    esp,0x2c
c0023a3d:	31 c0                	xor    eax,eax
c0023a3f:	5b                   	pop    ebx
c0023a40:	5e                   	pop    esi
c0023a41:	5f                   	pop    edi
c0023a42:	5d                   	pop    ebp
c0023a43:	c3                   	ret    

c0023a44 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023a44:	55                   	push   ebp
c0023a45:	57                   	push   edi
c0023a46:	56                   	push   esi
c0023a47:	53                   	push   ebx
c0023a48:	83 ec 1c             	sub    esp,0x1c
c0023a4b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023a4f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023a53:	8d 50 f8             	lea    edx,[eax-0x8]
c0023a56:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023a5a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023a5e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023a62:	80 fa 03             	cmp    dl,0x3
c0023a65:	77 5d                	ja     c0023ac4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023a67:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023a6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023a6f:	0f b6 db             	movzx  ebx,bl
c0023a72:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023a75:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023a79:	83 ca 80             	or     edx,0xffffff80
c0023a7c:	0f b6 d2             	movzx  edx,dl
c0023a7f:	52                   	push   edx
c0023a80:	6a 0c                	push   0xc
c0023a82:	53                   	push   ebx
c0023a83:	56                   	push   esi
c0023a84:	e8 5b f9 ff ff       	call   c00233e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a89:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023a8e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023a92:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023a96:	0f b6 c0             	movzx  eax,al
c0023a99:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023a9d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023a9f:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023aa4:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023aa8:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023aac:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023ab0:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023ab8:	83 c4 2c             	add    esp,0x2c
c0023abb:	5b                   	pop    ebx
c0023abc:	5e                   	pop    esi
c0023abd:	5f                   	pop    edi
c0023abe:	5d                   	pop    ebp
c0023abf:	e9 20 f9 ff ff       	jmp    c00233e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ac4:	3c 07                	cmp    al,0x7
c0023ac6:	77 10                	ja     c0023ad8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023ac8:	0f b6 db             	movzx  ebx,bl
c0023acb:	0f b6 d0             	movzx  edx,al
c0023ace:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023ad6:	eb 2d                	jmp    c0023b05 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023ad8:	3c 0d                	cmp    al,0xd
c0023ada:	77 13                	ja     c0023aef <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023adc:	0f b6 db             	movzx  ebx,bl
c0023adf:	0f b6 c0             	movzx  eax,al
c0023ae2:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023ae9:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023aed:	eb 16                	jmp    c0023b05 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023aef:	3c 15                	cmp    al,0x15
c0023af1:	77 14                	ja     c0023b07 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023af3:	0f b6 db             	movzx  ebx,bl
c0023af6:	0f b6 c0             	movzx  eax,al
c0023af9:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023b01:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023b05:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023b07:	83 c4 1c             	add    esp,0x1c
c0023b0a:	5b                   	pop    ebx
c0023b0b:	5e                   	pop    esi
c0023b0c:	5f                   	pop    edi
c0023b0d:	5d                   	pop    ebp
c0023b0e:	c3                   	ret    
c0023b0f:	90                   	nop

c0023b10 <IDE::detect()>:
c0023b10:	55                   	push   ebp
c0023b11:	57                   	push   edi
c0023b12:	56                   	push   esi
c0023b13:	53                   	push   ebx
c0023b14:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023b1a:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023b21:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023b28:	0f 85 9d 02 00 00    	jne    c0023dcb <IDE::detect()+0x2bb>
c0023b2e:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023b35:	31 f6                	xor    esi,esi
c0023b37:	31 ed                	xor    ebp,ebp
c0023b39:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023b41:	89 e8                	mov    eax,ebp
c0023b43:	c1 e0 06             	shl    eax,0x6
c0023b46:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023b4e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023b52:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023b56:	c1 e0 04             	shl    eax,0x4
c0023b59:	83 c8 a0             	or     eax,0xffffffa0
c0023b5c:	0f b6 c0             	movzx  eax,al
c0023b5f:	50                   	push   eax
c0023b60:	6a 06                	push   0x6
c0023b62:	56                   	push   esi
c0023b63:	53                   	push   ebx
c0023b64:	e8 7b f8 ff ff       	call   c00233e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b69:	83 c4 0c             	add    esp,0xc
c0023b6c:	6a 0c                	push   0xc
c0023b6e:	56                   	push   esi
c0023b6f:	53                   	push   ebx
c0023b70:	e8 2f f9 ff ff       	call   c00234a4 <IDE::read(unsigned char, unsigned char)>
c0023b75:	83 c4 0c             	add    esp,0xc
c0023b78:	6a 0c                	push   0xc
c0023b7a:	56                   	push   esi
c0023b7b:	53                   	push   ebx
c0023b7c:	e8 23 f9 ff ff       	call   c00234a4 <IDE::read(unsigned char, unsigned char)>
c0023b81:	83 c4 0c             	add    esp,0xc
c0023b84:	6a 0c                	push   0xc
c0023b86:	56                   	push   esi
c0023b87:	53                   	push   ebx
c0023b88:	e8 17 f9 ff ff       	call   c00234a4 <IDE::read(unsigned char, unsigned char)>
c0023b8d:	83 c4 0c             	add    esp,0xc
c0023b90:	6a 0c                	push   0xc
c0023b92:	56                   	push   esi
c0023b93:	53                   	push   ebx
c0023b94:	e8 0b f9 ff ff       	call   c00234a4 <IDE::read(unsigned char, unsigned char)>
c0023b99:	68 ec 00 00 00       	push   0xec
c0023b9e:	6a 07                	push   0x7
c0023ba0:	56                   	push   esi
c0023ba1:	53                   	push   ebx
c0023ba2:	e8 3d f8 ff ff       	call   c00233e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ba7:	83 c4 1c             	add    esp,0x1c
c0023baa:	6a 0c                	push   0xc
c0023bac:	56                   	push   esi
c0023bad:	53                   	push   ebx
c0023bae:	e8 f1 f8 ff ff       	call   c00234a4 <IDE::read(unsigned char, unsigned char)>
c0023bb3:	83 c4 0c             	add    esp,0xc
c0023bb6:	6a 0c                	push   0xc
c0023bb8:	56                   	push   esi
c0023bb9:	53                   	push   ebx
c0023bba:	e8 e5 f8 ff ff       	call   c00234a4 <IDE::read(unsigned char, unsigned char)>
c0023bbf:	83 c4 0c             	add    esp,0xc
c0023bc2:	6a 0c                	push   0xc
c0023bc4:	56                   	push   esi
c0023bc5:	53                   	push   ebx
c0023bc6:	e8 d9 f8 ff ff       	call   c00234a4 <IDE::read(unsigned char, unsigned char)>
c0023bcb:	83 c4 0c             	add    esp,0xc
c0023bce:	6a 0c                	push   0xc
c0023bd0:	56                   	push   esi
c0023bd1:	53                   	push   ebx
c0023bd2:	e8 cd f8 ff ff       	call   c00234a4 <IDE::read(unsigned char, unsigned char)>
c0023bd7:	83 c4 0c             	add    esp,0xc
c0023bda:	6a 0c                	push   0xc
c0023bdc:	56                   	push   esi
c0023bdd:	53                   	push   ebx
c0023bde:	e8 c1 f8 ff ff       	call   c00234a4 <IDE::read(unsigned char, unsigned char)>
c0023be3:	83 c4 10             	add    esp,0x10
c0023be6:	84 c0                	test   al,al
c0023be8:	0f 84 63 01 00 00    	je     c0023d51 <IDE::detect()+0x241>
c0023bee:	31 ff                	xor    edi,edi
c0023bf0:	50                   	push   eax
c0023bf1:	6a 0c                	push   0xc
c0023bf3:	56                   	push   esi
c0023bf4:	53                   	push   ebx
c0023bf5:	e8 aa f8 ff ff       	call   c00234a4 <IDE::read(unsigned char, unsigned char)>
c0023bfa:	83 c4 10             	add    esp,0x10
c0023bfd:	a8 01                	test   al,0x1
c0023bff:	0f 85 6d 01 00 00    	jne    c0023d72 <IDE::detect()+0x262>
c0023c05:	84 c0                	test   al,al
c0023c07:	78 04                	js     c0023c0d <IDE::detect()+0xfd>
c0023c09:	a8 08                	test   al,0x8
c0023c0b:	75 27                	jne    c0023c34 <IDE::detect()+0x124>
c0023c0d:	47                   	inc    edi
c0023c0e:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023c14:	7e da                	jle    c0023bf0 <IDE::detect()+0xe0>
c0023c16:	50                   	push   eax
c0023c17:	50                   	push   eax
c0023c18:	6a 00                	push   0x0
c0023c1a:	68 40 4b 4c 00       	push   0x4c4b40
c0023c1f:	e8 67 a4 ff ff       	call   c001e08b <nanoSleep(unsigned long long)>
c0023c24:	83 c4 10             	add    esp,0x10
c0023c27:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023c2d:	75 c1                	jne    c0023bf0 <IDE::detect()+0xe0>
c0023c2f:	e9 3e 01 00 00       	jmp    c0023d72 <IDE::detect()+0x262>
c0023c34:	31 c9                	xor    ecx,ecx
c0023c36:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023c3a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023c3e:	83 ec 0c             	sub    esp,0xc
c0023c41:	68 80 00 00 00       	push   0x80
c0023c46:	57                   	push   edi
c0023c47:	6a 00                	push   0x0
c0023c49:	56                   	push   esi
c0023c4a:	53                   	push   ebx
c0023c4b:	e8 f4 fd ff ff       	call   c0023a44 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023c50:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023c55:	89 e8                	mov    eax,ebp
c0023c57:	89 d1                	mov    ecx,edx
c0023c59:	c1 e0 06             	shl    eax,0x6
c0023c5c:	01 d8                	add    eax,ebx
c0023c5e:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023c65:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023c6c:	89 f2                	mov    edx,esi
c0023c6e:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023c74:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023c78:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023c7e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023c82:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023c89:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023c91:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023c98:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023ca0:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023ca6:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023cad:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023cb3:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023cb7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023cbb:	83 c4 20             	add    esp,0x20
c0023cbe:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023cc1:	83 c0 02             	add    eax,0x2
c0023cc4:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023cca:	83 c7 02             	add    edi,0x2
c0023ccd:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023cd0:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023cd6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023cda:	75 e2                	jne    c0023cbe <IDE::detect()+0x1ae>
c0023cdc:	89 e8                	mov    eax,ebp
c0023cde:	c1 e0 06             	shl    eax,0x6
c0023ce1:	01 d8                	add    eax,ebx
c0023ce3:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023ce9:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023cf0:	66 c1 ea 09          	shr    dx,0x9
c0023cf4:	83 e2 01             	and    edx,0x1
c0023cf7:	84 c9                	test   cl,cl
c0023cf9:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023cff:	75 22                	jne    c0023d23 <IDE::detect()+0x213>
c0023d01:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0023d08:	74 46                	je     c0023d50 <IDE::detect()+0x240>
c0023d0a:	83 ec 0c             	sub    esp,0xc
c0023d0d:	68 7c 01 00 00       	push   0x17c
c0023d12:	e8 42 bb fe ff       	call   c000f859 <malloc>
c0023d17:	89 c7                	mov    edi,eax
c0023d19:	89 04 24             	mov    DWORD PTR [esp],eax
c0023d1c:	e8 15 05 00 00       	call   c0024236 <ATA::ATA()>
c0023d21:	eb 17                	jmp    c0023d3a <IDE::detect()+0x22a>
c0023d23:	83 ec 0c             	sub    esp,0xc
c0023d26:	68 80 01 00 00       	push   0x180
c0023d2b:	e8 29 bb fe ff       	call   c000f859 <malloc>
c0023d30:	89 c7                	mov    edi,eax
c0023d32:	89 04 24             	mov    DWORD PTR [esp],eax
c0023d35:	e8 88 0b 00 00       	call   c00248c2 <ATAPI::ATAPI()>
c0023d3a:	5a                   	pop    edx
c0023d3b:	59                   	pop    ecx
c0023d3c:	57                   	push   edi
c0023d3d:	53                   	push   ebx
c0023d3e:	e8 a7 ff fe ff       	call   c0013cea <Device::addChild(Device*)>
c0023d43:	8b 07                	mov    eax,DWORD PTR [edi]
c0023d45:	53                   	push   ebx
c0023d46:	55                   	push   ebp
c0023d47:	6a 00                	push   0x0
c0023d49:	57                   	push   edi
c0023d4a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023d4d:	83 c4 20             	add    esp,0x20
c0023d50:	45                   	inc    ebp
c0023d51:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0023d56:	74 0d                	je     c0023d65 <IDE::detect()+0x255>
c0023d58:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0023d60:	e9 dc fd ff ff       	jmp    c0023b41 <IDE::detect()+0x31>
c0023d65:	4e                   	dec    esi
c0023d66:	74 63                	je     c0023dcb <IDE::detect()+0x2bb>
c0023d68:	be 01 00 00 00       	mov    esi,0x1
c0023d6d:	e9 c7 fd ff ff       	jmp    c0023b39 <IDE::detect()+0x29>
c0023d72:	50                   	push   eax
c0023d73:	6a 04                	push   0x4
c0023d75:	56                   	push   esi
c0023d76:	53                   	push   ebx
c0023d77:	e8 28 f7 ff ff       	call   c00234a4 <IDE::read(unsigned char, unsigned char)>
c0023d7c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023d80:	83 c4 0c             	add    esp,0xc
c0023d83:	6a 05                	push   0x5
c0023d85:	56                   	push   esi
c0023d86:	53                   	push   ebx
c0023d87:	e8 18 f7 ff ff       	call   c00234a4 <IDE::read(unsigned char, unsigned char)>
c0023d8c:	83 c4 10             	add    esp,0x10
c0023d8f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023d93:	80 fa 14             	cmp    dl,0x14
c0023d96:	75 04                	jne    c0023d9c <IDE::detect()+0x28c>
c0023d98:	3c eb                	cmp    al,0xeb
c0023d9a:	eb 07                	jmp    c0023da3 <IDE::detect()+0x293>
c0023d9c:	3c 96                	cmp    al,0x96
c0023d9e:	75 b1                	jne    c0023d51 <IDE::detect()+0x241>
c0023da0:	80 fa 69             	cmp    dl,0x69
c0023da3:	75 ac                	jne    c0023d51 <IDE::detect()+0x241>
c0023da5:	68 a1 00 00 00       	push   0xa1
c0023daa:	6a 07                	push   0x7
c0023dac:	56                   	push   esi
c0023dad:	53                   	push   ebx
c0023dae:	e8 31 f6 ff ff       	call   c00233e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023db3:	5f                   	pop    edi
c0023db4:	58                   	pop    eax
c0023db5:	6a 00                	push   0x0
c0023db7:	68 40 42 0f 00       	push   0xf4240
c0023dbc:	e8 ca a2 ff ff       	call   c001e08b <nanoSleep(unsigned long long)>
c0023dc1:	83 c4 10             	add    esp,0x10
c0023dc4:	b1 01                	mov    cl,0x1
c0023dc6:	e9 6b fe ff ff       	jmp    c0023c36 <IDE::detect()+0x126>
c0023dcb:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023dd1:	5b                   	pop    ebx
c0023dd2:	5e                   	pop    esi
c0023dd3:	5f                   	pop    edi
c0023dd4:	5d                   	pop    ebp
c0023dd5:	c3                   	ret    

c0023dd6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023dd6:	55                   	push   ebp
c0023dd7:	57                   	push   edi
c0023dd8:	56                   	push   esi
c0023dd9:	53                   	push   ebx
c0023dda:	83 ec 1c             	sub    esp,0x1c
c0023ddd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023de1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023de5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023de9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023ded:	88 c3                	mov    bl,al
c0023def:	84 c0                	test   al,al
c0023df1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023df5:	0f 84 81 00 00 00    	je     c0023e7c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023dfb:	83 ec 0c             	sub    esp,0xc
c0023dfe:	68 97 cb 02 c0       	push   0xc002cb97
c0023e03:	e8 a9 ea fe ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0023e08:	83 c4 10             	add    esp,0x10
c0023e0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023e0f:	3c 01                	cmp    al,0x1
c0023e11:	74 63                	je     c0023e76 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0023e13:	3c 02                	cmp    al,0x2
c0023e15:	75 53                	jne    c0023e6a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0023e17:	d1 e6                	shl    esi,1
c0023e19:	09 ee                	or     esi,ebp
c0023e1b:	50                   	push   eax
c0023e1c:	89 f0                	mov    eax,esi
c0023e1e:	6a 01                	push   0x1
c0023e20:	0f b6 f0             	movzx  esi,al
c0023e23:	c1 e6 06             	shl    esi,0x6
c0023e26:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023e2e:	50                   	push   eax
c0023e2f:	57                   	push   edi
c0023e30:	e8 6f f6 ff ff       	call   c00234a4 <IDE::read(unsigned char, unsigned char)>
c0023e35:	83 c4 10             	add    esp,0x10
c0023e38:	a8 01                	test   al,0x1
c0023e3a:	74 02                	je     c0023e3e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0023e3c:	b3 07                	mov    bl,0x7
c0023e3e:	a8 02                	test   al,0x2
c0023e40:	74 02                	je     c0023e44 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0023e42:	b3 03                	mov    bl,0x3
c0023e44:	a8 04                	test   al,0x4
c0023e46:	74 02                	je     c0023e4a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0023e48:	b3 14                	mov    bl,0x14
c0023e4a:	a8 08                	test   al,0x8
c0023e4c:	74 02                	je     c0023e50 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0023e4e:	b3 03                	mov    bl,0x3
c0023e50:	a8 10                	test   al,0x10
c0023e52:	74 02                	je     c0023e56 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0023e54:	b3 15                	mov    bl,0x15
c0023e56:	a8 20                	test   al,0x20
c0023e58:	74 02                	je     c0023e5c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0023e5a:	b3 03                	mov    bl,0x3
c0023e5c:	a8 40                	test   al,0x40
c0023e5e:	74 02                	je     c0023e62 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0023e60:	b3 16                	mov    bl,0x16
c0023e62:	84 c0                	test   al,al
c0023e64:	79 16                	jns    c0023e7c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023e66:	b3 0d                	mov    bl,0xd
c0023e68:	eb 12                	jmp    c0023e7c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023e6a:	3c 03                	cmp    al,0x3
c0023e6c:	74 0c                	je     c0023e7a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0023e6e:	3c 04                	cmp    al,0x4
c0023e70:	75 0a                	jne    c0023e7c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023e72:	b3 08                	mov    bl,0x8
c0023e74:	eb 06                	jmp    c0023e7c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023e76:	b3 13                	mov    bl,0x13
c0023e78:	eb 02                	jmp    c0023e7c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023e7a:	b3 17                	mov    bl,0x17
c0023e7c:	83 c4 1c             	add    esp,0x1c
c0023e7f:	88 d8                	mov    al,bl
c0023e81:	5b                   	pop    ebx
c0023e82:	5e                   	pop    esi
c0023e83:	5f                   	pop    edi
c0023e84:	5d                   	pop    ebp
c0023e85:	c3                   	ret    

c0023e86 <IDE::polling(unsigned char, unsigned int)>:
c0023e86:	57                   	push   edi
c0023e87:	56                   	push   esi
c0023e88:	53                   	push   ebx
c0023e89:	bb 04 00 00 00       	mov    ebx,0x4
c0023e8e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023e92:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023e97:	52                   	push   edx
c0023e98:	6a 0c                	push   0xc
c0023e9a:	56                   	push   esi
c0023e9b:	57                   	push   edi
c0023e9c:	e8 03 f6 ff ff       	call   c00234a4 <IDE::read(unsigned char, unsigned char)>
c0023ea1:	83 c4 10             	add    esp,0x10
c0023ea4:	4b                   	dec    ebx
c0023ea5:	75 f0                	jne    c0023e97 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023ea7:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023eac:	50                   	push   eax
c0023ead:	6a 0c                	push   0xc
c0023eaf:	56                   	push   esi
c0023eb0:	57                   	push   edi
c0023eb1:	e8 ee f5 ff ff       	call   c00234a4 <IDE::read(unsigned char, unsigned char)>
c0023eb6:	83 c4 10             	add    esp,0x10
c0023eb9:	a8 01                	test   al,0x1
c0023ebb:	75 17                	jne    c0023ed4 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023ebd:	a8 20                	test   al,0x20
c0023ebf:	75 0f                	jne    c0023ed0 <IDE::polling(unsigned char, unsigned int)+0x4a>
c0023ec1:	4b                   	dec    ebx
c0023ec2:	74 10                	je     c0023ed4 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023ec4:	84 c0                	test   al,al
c0023ec6:	78 e4                	js     c0023eac <IDE::polling(unsigned char, unsigned int)+0x26>
c0023ec8:	a8 08                	test   al,0x8
c0023eca:	74 e0                	je     c0023eac <IDE::polling(unsigned char, unsigned int)+0x26>
c0023ecc:	31 c0                	xor    eax,eax
c0023ece:	eb 06                	jmp    c0023ed6 <IDE::polling(unsigned char, unsigned int)+0x50>
c0023ed0:	b0 01                	mov    al,0x1
c0023ed2:	eb 02                	jmp    c0023ed6 <IDE::polling(unsigned char, unsigned int)+0x50>
c0023ed4:	b0 02                	mov    al,0x2
c0023ed6:	5b                   	pop    ebx
c0023ed7:	5e                   	pop    esi
c0023ed8:	5f                   	pop    edi
c0023ed9:	c3                   	ret    

c0023eda <SATABus::close(int, int, void*)>:
c0023eda:	31 c0                	xor    eax,eax
c0023edc:	c3                   	ret    
c0023edd:	90                   	nop

c0023ede <SATABus::detect()>:
c0023ede:	c3                   	ret    
c0023edf:	90                   	nop

c0023ee0 <SATABus::SATABus()>:
c0023ee0:	83 ec 0c             	sub    esp,0xc
c0023ee3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ee7:	83 ec 08             	sub    esp,0x8
c0023eea:	68 d0 cb 02 c0       	push   0xc002cbd0
c0023eef:	50                   	push   eax
c0023ef0:	e8 a3 01 ff ff       	call   c0014098 <HardDiskController::HardDiskController(char const*)>
c0023ef5:	83 c4 10             	add    esp,0x10
c0023ef8:	ba 24 cc 02 c0       	mov    edx,0xc002cc24
c0023efd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f01:	89 10                	mov    DWORD PTR [eax],edx
c0023f03:	83 ec 0c             	sub    esp,0xc
c0023f06:	6a 50                	push   0x50
c0023f08:	e8 40 be fe ff       	call   c000fd4d <Phys::allocateContiguousPages(int)>
c0023f0d:	83 c4 10             	add    esp,0x10
c0023f10:	89 c2                	mov    edx,eax
c0023f12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f16:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023f1c:	83 ec 0c             	sub    esp,0xc
c0023f1f:	6a 50                	push   0x50
c0023f21:	e8 b9 d5 fe ff       	call   c00114df <Virt::allocateKernelVirtualPages(int)>
c0023f26:	83 c4 10             	add    esp,0x10
c0023f29:	89 c2                	mov    edx,eax
c0023f2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f2f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023f35:	a1 70 e5 02 c0       	mov    eax,ds:0xc002e570
c0023f3a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023f3e:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023f44:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023f48:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023f4e:	83 ec 0c             	sub    esp,0xc
c0023f51:	6a 03                	push   0x3
c0023f53:	6a 50                	push   0x50
c0023f55:	51                   	push   ecx
c0023f56:	52                   	push   edx
c0023f57:	50                   	push   eax
c0023f58:	e8 1f df fe ff       	call   c0011e7c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023f5d:	83 c4 20             	add    esp,0x20
c0023f60:	90                   	nop
c0023f61:	83 c4 0c             	add    esp,0xc
c0023f64:	c3                   	ret    
c0023f65:	90                   	nop

c0023f66 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023f66:	83 ec 0c             	sub    esp,0xc
c0023f69:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023f6d:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023f70:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023f73:	09 c2                	or     edx,eax
c0023f75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f79:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023f7f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023f81:	31 c0                	xor    eax,eax
c0023f83:	c1 e9 08             	shr    ecx,0x8
c0023f86:	83 e1 0f             	and    ecx,0xf
c0023f89:	39 c8                	cmp    eax,ecx
c0023f8b:	74 0a                	je     c0023f97 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023f8d:	f6 c2 01             	test   dl,0x1
c0023f90:	74 18                	je     c0023faa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023f92:	d1 ea                	shr    edx,1
c0023f94:	40                   	inc    eax
c0023f95:	eb f2                	jmp    c0023f89 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023f97:	83 ec 0c             	sub    esp,0xc
c0023f9a:	68 f4 cb 02 c0       	push   0xc002cbf4
c0023f9f:	e8 7b 62 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c0023fa4:	83 c4 10             	add    esp,0x10
c0023fa7:	83 c8 ff             	or     eax,0xffffffff
c0023faa:	83 c4 0c             	add    esp,0xc
c0023fad:	c3                   	ret    

c0023fae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023fae:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023fb2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023fb5:	89 c2                	mov    edx,eax
c0023fb7:	c1 ea 08             	shr    edx,0x8
c0023fba:	83 e2 0f             	and    edx,0xf
c0023fbd:	fe ca                	dec    dl
c0023fbf:	75 31                	jne    c0023ff2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023fc1:	83 e0 0f             	and    eax,0xf
c0023fc4:	3c 03                	cmp    al,0x3
c0023fc6:	75 2a                	jne    c0023ff2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023fc8:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023fcb:	b8 02 00 00 00       	mov    eax,0x2
c0023fd0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023fd6:	74 1c                	je     c0023ff4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023fd8:	b8 04 00 00 00       	mov    eax,0x4
c0023fdd:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023fe3:	74 0f                	je     c0023ff4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023fe5:	31 c0                	xor    eax,eax
c0023fe7:	83 fa 03             	cmp    edx,0x3
c0023fea:	0f 94 c0             	sete   al
c0023fed:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023ff1:	c3                   	ret    
c0023ff2:	31 c0                	xor    eax,eax
c0023ff4:	c3                   	ret    
c0023ff5:	90                   	nop

c0023ff6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023ffa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023ffd:	0f ba e2 0f          	bt     edx,0xf
c0024001:	72 f7                	jb     c0023ffa <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0024003:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024006:	83 ca 10             	or     edx,0x10
c0024009:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002400c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002400f:	83 ca 01             	or     edx,0x1
c0024012:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024015:	c3                   	ret    

c0024016 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0024016:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002401a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002401d:	83 e2 fe             	and    edx,0xfffffffe
c0024020:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024023:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024026:	83 e2 ef             	and    edx,0xffffffef
c0024029:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002402c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002402f:	0f ba e2 0e          	bt     edx,0xe
c0024033:	72 f7                	jb     c002402c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024035:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024038:	0f ba e2 0f          	bt     edx,0xf
c002403c:	72 ee                	jb     c002402c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002403e:	c3                   	ret    
c002403f:	90                   	nop

c0024040 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0024040:	55                   	push   ebp
c0024041:	57                   	push   edi
c0024042:	56                   	push   esi
c0024043:	53                   	push   ebx
c0024044:	83 ec 1c             	sub    esp,0x1c
c0024047:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002404b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002404f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0024053:	53                   	push   ebx
c0024054:	89 fd                	mov    ebp,edi
c0024056:	56                   	push   esi
c0024057:	c1 e5 0a             	shl    ebp,0xa
c002405a:	e8 b7 ff ff ff       	call   c0024016 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002405f:	83 ec 0c             	sub    esp,0xc
c0024062:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0024068:	01 e8                	add    eax,ebp
c002406a:	89 03                	mov    DWORD PTR [ebx],eax
c002406c:	8b 03                	mov    eax,DWORD PTR [ebx]
c002406e:	68 00 04 00 00       	push   0x400
c0024073:	6a 00                	push   0x0
c0024075:	50                   	push   eax
c0024076:	e8 d5 c6 fd ff       	call   c0000750 <memset>
c002407b:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0024081:	89 fa                	mov    edx,edi
c0024083:	01 e8                	add    eax,ebp
c0024085:	c1 e7 0d             	shl    edi,0xd
c0024088:	89 03                	mov    DWORD PTR [ebx],eax
c002408a:	c1 e2 08             	shl    edx,0x8
c002408d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0024094:	81 c2 00 80 00 00    	add    edx,0x8000
c002409a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c002409e:	89 d0                	mov    eax,edx
c00240a0:	83 c4 1c             	add    esp,0x1c
c00240a3:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00240a9:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00240ac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00240af:	68 00 01 00 00       	push   0x100
c00240b4:	6a 00                	push   0x0
c00240b6:	50                   	push   eax
c00240b7:	e8 94 c6 fd ff       	call   c0000750 <memset>
c00240bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00240c0:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c00240c6:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c00240cc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00240d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00240d3:	83 c4 10             	add    esp,0x10
c00240d6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00240dd:	31 ff                	xor    edi,edi
c00240df:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c00240e5:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c00240eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00240ef:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00240f5:	83 c5 20             	add    ebp,0x20
c00240f8:	01 f8                	add    eax,edi
c00240fa:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00240fd:	52                   	push   edx
c00240fe:	68 00 01 00 00       	push   0x100
c0024103:	6a 00                	push   0x0
c0024105:	50                   	push   eax
c0024106:	e8 45 c6 fd ff       	call   c0000750 <memset>
c002410b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002410f:	83 c4 10             	add    esp,0x10
c0024112:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0024118:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002411f:	01 f8                	add    eax,edi
c0024121:	81 c7 00 01 00 00    	add    edi,0x100
c0024127:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002412a:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0024130:	75 b3                	jne    c00240e5 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0024132:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0024136:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c002413a:	83 c4 1c             	add    esp,0x1c
c002413d:	5b                   	pop    ebx
c002413e:	5e                   	pop    esi
c002413f:	5f                   	pop    edi
c0024140:	5d                   	pop    ebp
c0024141:	e9 b0 fe ff ff       	jmp    c0023ff6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0024146 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0024146:	55                   	push   ebp
c0024147:	57                   	push   edi
c0024148:	56                   	push   esi
c0024149:	53                   	push   ebx
c002414a:	31 db                	xor    ebx,ebx
c002414c:	83 ec 0c             	sub    esp,0xc
c002414f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024153:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024157:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002415a:	f7 c7 01 00 00 00    	test   edi,0x1
c0024160:	74 7a                	je     c00241dc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0024162:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0024166:	89 d8                	mov    eax,ebx
c0024168:	c1 e0 07             	shl    eax,0x7
c002416b:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0024172:	55                   	push   ebp
c0024173:	56                   	push   esi
c0024174:	e8 35 fe ff ff       	call   c0023fae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0024179:	5a                   	pop    edx
c002417a:	83 f8 01             	cmp    eax,0x1
c002417d:	59                   	pop    ecx
c002417e:	75 21                	jne    c00241a1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0024180:	50                   	push   eax
c0024181:	53                   	push   ebx
c0024182:	55                   	push   ebp
c0024183:	56                   	push   esi
c0024184:	e8 b7 fe ff ff       	call   c0024040 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024189:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024190:	e8 c4 b6 fe ff       	call   c000f859 <malloc>
c0024195:	89 c5                	mov    ebp,eax
c0024197:	89 04 24             	mov    DWORD PTR [esp],eax
c002419a:	e8 87 0d 00 00       	call   c0024f26 <SATA::SATA()>
c002419f:	eb 24                	jmp    c00241c5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c00241a1:	83 f8 04             	cmp    eax,0x4
c00241a4:	75 36                	jne    c00241dc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c00241a6:	51                   	push   ecx
c00241a7:	53                   	push   ebx
c00241a8:	55                   	push   ebp
c00241a9:	56                   	push   esi
c00241aa:	e8 91 fe ff ff       	call   c0024040 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00241af:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00241b6:	e8 9e b6 fe ff       	call   c000f859 <malloc>
c00241bb:	89 c5                	mov    ebp,eax
c00241bd:	89 04 24             	mov    DWORD PTR [esp],eax
c00241c0:	e8 d7 10 00 00       	call   c002529c <SATAPI::SATAPI()>
c00241c5:	58                   	pop    eax
c00241c6:	5a                   	pop    edx
c00241c7:	55                   	push   ebp
c00241c8:	56                   	push   esi
c00241c9:	e8 1c fb fe ff       	call   c0013cea <Device::addChild(Device*)>
c00241ce:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00241d1:	56                   	push   esi
c00241d2:	6a 00                	push   0x0
c00241d4:	53                   	push   ebx
c00241d5:	55                   	push   ebp
c00241d6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00241d9:	83 c4 20             	add    esp,0x20
c00241dc:	d1 ef                	shr    edi,1
c00241de:	43                   	inc    ebx
c00241df:	83 fb 20             	cmp    ebx,0x20
c00241e2:	0f 85 72 ff ff ff    	jne    c002415a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c00241e8:	83 c4 0c             	add    esp,0xc
c00241eb:	5b                   	pop    ebx
c00241ec:	5e                   	pop    esi
c00241ed:	5f                   	pop    edi
c00241ee:	5d                   	pop    ebp
c00241ef:	c3                   	ret    

c00241f0 <SATABus::open(int, int, void*)>:
c00241f0:	83 ec 14             	sub    esp,0x14
c00241f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00241f7:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c00241fd:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024203:	52                   	push   edx
c0024204:	50                   	push   eax
c0024205:	e8 3c ff ff ff       	call   c0024146 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002420a:	31 c0                	xor    eax,eax
c002420c:	83 c4 1c             	add    esp,0x1c
c002420f:	c3                   	ret    

c0024210 <ATA::close(int, int, void*)>:
c0024210:	83 ec 0c             	sub    esp,0xc
c0024213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024217:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002421d:	85 c0                	test   eax,eax
c002421f:	74 0c                	je     c002422d <ATA::close(int, int, void*)+0x1d>
c0024221:	83 ec 0c             	sub    esp,0xc
c0024224:	8b 10                	mov    edx,DWORD PTR [eax]
c0024226:	50                   	push   eax
c0024227:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002422a:	83 c4 10             	add    esp,0x10
c002422d:	31 c0                	xor    eax,eax
c002422f:	83 c4 0c             	add    esp,0xc
c0024232:	c3                   	ret    
c0024233:	90                   	nop

c0024234 <ATA::powerSaving(PowerSavingLevel)>:
c0024234:	c3                   	ret    
c0024235:	90                   	nop

c0024236 <ATA::ATA()>:
c0024236:	83 ec 0c             	sub    esp,0xc
c0024239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002423d:	83 ec 04             	sub    esp,0x4
c0024240:	68 00 02 00 00       	push   0x200
c0024245:	68 19 cd 02 c0       	push   0xc002cd19
c002424a:	50                   	push   eax
c002424b:	e8 d0 fe fe ff       	call   c0014120 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024250:	83 c4 10             	add    esp,0x10
c0024253:	ba 9c cc 02 c0       	mov    edx,0xc002cc9c
c0024258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002425c:	89 10                	mov    DWORD PTR [eax],edx
c002425e:	90                   	nop
c002425f:	83 c4 0c             	add    esp,0xc
c0024262:	c3                   	ret    
c0024263:	90                   	nop

c0024264 <ATA::flush(bool)>:
c0024264:	53                   	push   ebx
c0024265:	83 ec 08             	sub    esp,0x8
c0024268:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c002426d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024271:	19 c0                	sbb    eax,eax
c0024273:	83 e0 fd             	and    eax,0xfffffffd
c0024276:	05 ea 00 00 00       	add    eax,0xea
c002427b:	50                   	push   eax
c002427c:	6a 07                	push   0x7
c002427e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024285:	50                   	push   eax
c0024286:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002428c:	e8 53 f1 ff ff       	call   c00233e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024291:	83 c4 0c             	add    esp,0xc
c0024294:	6a 00                	push   0x0
c0024296:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002429d:	50                   	push   eax
c002429e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242a4:	e8 dd fb ff ff       	call   c0023e86 <IDE::polling(unsigned char, unsigned int)>
c00242a9:	83 c4 18             	add    esp,0x18
c00242ac:	5b                   	pop    ebx
c00242ad:	c3                   	ret    

c00242ae <ATA::readyForCommand()>:
c00242ae:	56                   	push   esi
c00242af:	53                   	push   ebx
c00242b0:	31 db                	xor    ebx,ebx
c00242b2:	50                   	push   eax
c00242b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00242b7:	50                   	push   eax
c00242b8:	6a 0c                	push   0xc
c00242ba:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00242c1:	50                   	push   eax
c00242c2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00242c8:	e8 d7 f1 ff ff       	call   c00234a4 <IDE::read(unsigned char, unsigned char)>
c00242cd:	83 c4 10             	add    esp,0x10
c00242d0:	a8 88                	test   al,0x88
c00242d2:	74 23                	je     c00242f7 <ATA::readyForCommand()+0x49>
c00242d4:	43                   	inc    ebx
c00242d5:	83 fb 63             	cmp    ebx,0x63
c00242d8:	7e dd                	jle    c00242b7 <ATA::readyForCommand()+0x9>
c00242da:	51                   	push   ecx
c00242db:	51                   	push   ecx
c00242dc:	6a 00                	push   0x0
c00242de:	68 40 42 0f 00       	push   0xf4240
c00242e3:	e8 a3 9d ff ff       	call   c001e08b <nanoSleep(unsigned long long)>
c00242e8:	83 c4 10             	add    esp,0x10
c00242eb:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00242f1:	75 c4                	jne    c00242b7 <ATA::readyForCommand()+0x9>
c00242f3:	31 c0                	xor    eax,eax
c00242f5:	eb 02                	jmp    c00242f9 <ATA::readyForCommand()+0x4b>
c00242f7:	b0 01                	mov    al,0x1
c00242f9:	5a                   	pop    edx
c00242fa:	5b                   	pop    ebx
c00242fb:	5e                   	pop    esi
c00242fc:	c3                   	ret    
c00242fd:	90                   	nop

c00242fe <ATA::access(unsigned long long, int, void*, bool)>:
c00242fe:	55                   	push   ebp
c00242ff:	57                   	push   edi
c0024300:	56                   	push   esi
c0024301:	53                   	push   ebx
c0024302:	83 ec 38             	sub    esp,0x38
c0024305:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0024309:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c002430d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0024311:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024315:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0024319:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002431d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0024321:	68 48 cc 02 c0       	push   0xc002cc48
c0024326:	e8 86 e5 fe ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c002432b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024331:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024335:	83 c4 10             	add    esp,0x10
c0024338:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002433e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024342:	c1 e0 06             	shl    eax,0x6
c0024345:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002434d:	74 5d                	je     c00243ac <ATA::access(unsigned long long, int, void*, bool)+0xae>
c002434f:	89 fa                	mov    edx,edi
c0024351:	89 f0                	mov    eax,esi
c0024353:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024357:	c1 ea 1c             	shr    edx,0x1c
c002435a:	89 d1                	mov    ecx,edx
c002435c:	09 c1                	or     ecx,eax
c002435e:	74 25                	je     c0024385 <ATA::access(unsigned long long, int, void*, bool)+0x87>
c0024360:	31 ed                	xor    ebp,ebp
c0024362:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024369:	89 fa                	mov    edx,edi
c002436b:	89 f0                	mov    eax,esi
c002436d:	0f ad d0             	shrd   eax,edx,cl
c0024370:	d3 ea                	shr    edx,cl
c0024372:	f6 c1 20             	test   cl,0x20
c0024375:	74 02                	je     c0024379 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c0024377:	89 d0                	mov    eax,edx
c0024379:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002437d:	45                   	inc    ebp
c002437e:	83 fd 06             	cmp    ebp,0x6
c0024381:	75 df                	jne    c0024362 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c0024383:	eb 76                	jmp    c00243fb <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c0024385:	89 f0                	mov    eax,esi
c0024387:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002438c:	89 fa                	mov    edx,edi
c002438e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024395:	0f ac d0 10          	shrd   eax,edx,0x10
c0024399:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002439e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00243a2:	c1 ee 18             	shr    esi,0x18
c00243a5:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00243aa:	eb 56                	jmp    c0024402 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c00243ac:	6a 00                	push   0x0
c00243ae:	6a 3f                	push   0x3f
c00243b0:	57                   	push   edi
c00243b1:	56                   	push   esi
c00243b2:	e8 9d 29 00 00       	call   c0026d54 <__umoddi3>
c00243b7:	83 c4 10             	add    esp,0x10
c00243ba:	40                   	inc    eax
c00243bb:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00243bf:	6a 00                	push   0x0
c00243c1:	68 f0 03 00 00       	push   0x3f0
c00243c6:	57                   	push   edi
c00243c7:	56                   	push   esi
c00243c8:	e8 87 28 00 00       	call   c0026c54 <__udivdi3>
c00243cd:	83 c4 10             	add    esp,0x10
c00243d0:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00243d5:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00243dc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00243e1:	6a 00                	push   0x0
c00243e3:	6a 3f                	push   0x3f
c00243e5:	57                   	push   edi
c00243e6:	56                   	push   esi
c00243e7:	e8 68 28 00 00       	call   c0026c54 <__udivdi3>
c00243ec:	83 c4 10             	add    esp,0x10
c00243ef:	89 c6                	mov    esi,eax
c00243f1:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00243f6:	83 e6 0f             	and    esi,0xf
c00243f9:	eb 07                	jmp    c0024402 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c00243fb:	31 f6                	xor    esi,esi
c00243fd:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024402:	bf 01 00 00 00       	mov    edi,0x1
c0024407:	50                   	push   eax
c0024408:	6a 00                	push   0x0
c002440a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024411:	50                   	push   eax
c0024412:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024416:	e8 d5 f1 ff ff       	call   c00235f0 <IDE::enableIRQs(unsigned char, bool)>
c002441b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002441e:	e8 8b fe ff ff       	call   c00242ae <ATA::readyForCommand()>
c0024423:	83 c4 10             	add    esp,0x10
c0024426:	84 c0                	test   al,al
c0024428:	0f 84 bc 02 00 00    	je     c00246ea <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c002442e:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024434:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002443a:	c1 e0 04             	shl    eax,0x4
c002443d:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024444:	09 c6                	or     esi,eax
c0024446:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c002444b:	75 05                	jne    c0024452 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c002444d:	83 ce a0             	or     esi,0xffffffa0
c0024450:	eb 03                	jmp    c0024455 <ATA::access(unsigned long long, int, void*, bool)+0x157>
c0024452:	83 ce e0             	or     esi,0xffffffe0
c0024455:	89 f0                	mov    eax,esi
c0024457:	0f b6 f0             	movzx  esi,al
c002445a:	56                   	push   esi
c002445b:	6a 06                	push   0x6
c002445d:	51                   	push   ecx
c002445e:	52                   	push   edx
c002445f:	e8 80 ef ff ff       	call   c00233e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024464:	83 c4 10             	add    esp,0x10
c0024467:	6a 00                	push   0x0
c0024469:	6a 01                	push   0x1
c002446b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024472:	50                   	push   eax
c0024473:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024479:	e8 66 ef ff ff       	call   c00233e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002447e:	83 c4 10             	add    esp,0x10
c0024481:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024486:	75 6e                	jne    c00244f6 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c0024488:	6a 00                	push   0x0
c002448a:	6a 08                	push   0x8
c002448c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024493:	50                   	push   eax
c0024494:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002449a:	e8 45 ef ff ff       	call   c00233e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002449f:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00244a4:	50                   	push   eax
c00244a5:	6a 09                	push   0x9
c00244a7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00244ae:	50                   	push   eax
c00244af:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00244b5:	e8 2a ef ff ff       	call   c00233e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244ba:	83 c4 20             	add    esp,0x20
c00244bd:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00244c2:	50                   	push   eax
c00244c3:	6a 0a                	push   0xa
c00244c5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00244cc:	50                   	push   eax
c00244cd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00244d3:	e8 0c ef ff ff       	call   c00233e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244d8:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00244dd:	50                   	push   eax
c00244de:	6a 0b                	push   0xb
c00244e0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00244e7:	50                   	push   eax
c00244e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00244ee:	e8 f1 ee ff ff       	call   c00233e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244f3:	83 c4 20             	add    esp,0x20
c00244f6:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00244fb:	50                   	push   eax
c00244fc:	6a 02                	push   0x2
c00244fe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024505:	50                   	push   eax
c0024506:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002450c:	e8 d3 ee ff ff       	call   c00233e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024511:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024516:	50                   	push   eax
c0024517:	6a 03                	push   0x3
c0024519:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024520:	50                   	push   eax
c0024521:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024527:	e8 b8 ee ff ff       	call   c00233e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002452c:	83 c4 20             	add    esp,0x20
c002452f:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024534:	50                   	push   eax
c0024535:	6a 04                	push   0x4
c0024537:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002453e:	50                   	push   eax
c002453f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024545:	e8 9a ee ff ff       	call   c00233e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002454a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002454f:	50                   	push   eax
c0024550:	6a 05                	push   0x5
c0024552:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024559:	50                   	push   eax
c002455a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024560:	e8 7f ee ff ff       	call   c00233e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024565:	83 c4 20             	add    esp,0x20
c0024568:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002456d:	0f 94 c0             	sete   al
c0024570:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024575:	74 09                	je     c0024580 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c0024577:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c002457e:	eb 07                	jmp    c0024587 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c0024580:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024587:	0f b6 c0             	movzx  eax,al
c002458a:	50                   	push   eax
c002458b:	6a 07                	push   0x7
c002458d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024594:	50                   	push   eax
c0024595:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002459b:	e8 44 ee ff ff       	call   c00233e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245a0:	c7 04 24 55 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc55
c00245a7:	e8 05 e3 fe ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c00245ac:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00245b0:	83 c4 10             	add    esp,0x10
c00245b3:	85 f6                	test   esi,esi
c00245b5:	0f 84 f7 00 00 00    	je     c00246b2 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c00245bb:	83 ec 0c             	sub    esp,0xc
c00245be:	68 58 cc 02 c0       	push   0xc002cc58
c00245c3:	e8 e9 e2 fe ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c00245c8:	83 c4 0c             	add    esp,0xc
c00245cb:	6a 01                	push   0x1
c00245cd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245d4:	50                   	push   eax
c00245d5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00245db:	e8 a6 f8 ff ff       	call   c0023e86 <IDE::polling(unsigned char, unsigned int)>
c00245e0:	c7 04 24 5b cc 02 c0 	mov    DWORD PTR [esp],0xc002cc5b
c00245e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00245eb:	e8 c1 e2 fe ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c00245f0:	83 c4 10             	add    esp,0x10
c00245f3:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00245f7:	84 c0                	test   al,al
c00245f9:	74 2b                	je     c0024626 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c00245fb:	0f b6 f8             	movzx  edi,al
c00245fe:	57                   	push   edi
c00245ff:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024606:	50                   	push   eax
c0024607:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002460e:	50                   	push   eax
c002460f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024615:	e8 bc f7 ff ff       	call   c0023dd6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002461a:	c7 04 24 5e cc 02 c0 	mov    DWORD PTR [esp],0xc002cc5e
c0024621:	e9 bc 00 00 00       	jmp    c00246e2 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c0024626:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002462b:	74 50                	je     c002467d <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c002462d:	83 ec 0c             	sub    esp,0xc
c0024630:	31 ed                	xor    ebp,ebp
c0024632:	68 69 cc 02 c0       	push   0xc002cc69
c0024637:	e8 75 e2 fe ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c002463c:	83 c4 10             	add    esp,0x10
c002463f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024643:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024647:	50                   	push   eax
c0024648:	50                   	push   eax
c0024649:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024650:	50                   	push   eax
c0024651:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024657:	e8 76 ed ff ff       	call   c00233d2 <IDE::getBase(unsigned char)>
c002465c:	89 c2                	mov    edx,eax
c002465e:	89 f8                	mov    eax,edi
c0024660:	66 ef                	out    dx,ax
c0024662:	45                   	inc    ebp
c0024663:	83 c4 10             	add    esp,0x10
c0024666:	81 fd 00 01 00 00    	cmp    ebp,0x100
c002466c:	75 d1                	jne    c002463f <ATA::access(unsigned long long, int, void*, bool)+0x341>
c002466e:	83 ec 0c             	sub    esp,0xc
c0024671:	68 6c cc 02 c0       	push   0xc002cc6c
c0024676:	e8 36 e2 fe ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c002467b:	eb 24                	jmp    c00246a1 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c002467d:	51                   	push   ecx
c002467e:	51                   	push   ecx
c002467f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024686:	50                   	push   eax
c0024687:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002468d:	e8 40 ed ff ff       	call   c00233d2 <IDE::getBase(unsigned char)>
c0024692:	b9 00 01 00 00       	mov    ecx,0x100
c0024697:	89 c2                	mov    edx,eax
c0024699:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002469d:	fc                   	cld    
c002469e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00246a1:	83 c4 10             	add    esp,0x10
c00246a4:	4e                   	dec    esi
c00246a5:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00246ad:	e9 01 ff ff ff       	jmp    c00245b3 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c00246b2:	31 ff                	xor    edi,edi
c00246b4:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00246b9:	74 2f                	je     c00246ea <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c00246bb:	83 ec 0c             	sub    esp,0xc
c00246be:	68 6f cc 02 c0       	push   0xc002cc6f
c00246c3:	e8 e9 e1 fe ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c00246c8:	58                   	pop    eax
c00246c9:	31 c0                	xor    eax,eax
c00246cb:	5a                   	pop    edx
c00246cc:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00246d1:	0f 94 c0             	sete   al
c00246d4:	50                   	push   eax
c00246d5:	53                   	push   ebx
c00246d6:	e8 89 fb ff ff       	call   c0024264 <ATA::flush(bool)>
c00246db:	c7 04 24 72 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc72
c00246e2:	e8 ca e1 fe ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c00246e7:	83 c4 10             	add    esp,0x10
c00246ea:	83 c4 2c             	add    esp,0x2c
c00246ed:	89 f8                	mov    eax,edi
c00246ef:	5b                   	pop    ebx
c00246f0:	5e                   	pop    esi
c00246f1:	5f                   	pop    edi
c00246f2:	5d                   	pop    ebp
c00246f3:	c3                   	ret    

c00246f4 <ATA::read(unsigned long long, int, void*)>:
c00246f4:	57                   	push   edi
c00246f5:	b8 04 00 00 00       	mov    eax,0x4
c00246fa:	56                   	push   esi
c00246fb:	53                   	push   ebx
c00246fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024700:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024704:	8d 7a ff             	lea    edi,[edx-0x1]
c0024707:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002470b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002470f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024715:	77 25                	ja     c002473c <ATA::read(unsigned long long, int, void*)+0x48>
c0024717:	b8 06 00 00 00       	mov    eax,0x6
c002471c:	85 f6                	test   esi,esi
c002471e:	74 1c                	je     c002473c <ATA::read(unsigned long long, int, void*)+0x48>
c0024720:	50                   	push   eax
c0024721:	50                   	push   eax
c0024722:	6a 00                	push   0x0
c0024724:	56                   	push   esi
c0024725:	52                   	push   edx
c0024726:	53                   	push   ebx
c0024727:	51                   	push   ecx
c0024728:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002472c:	e8 cd fb ff ff       	call   c00242fe <ATA::access(unsigned long long, int, void*, bool)>
c0024731:	83 c4 20             	add    esp,0x20
c0024734:	85 c0                	test   eax,eax
c0024736:	0f 95 c0             	setne  al
c0024739:	0f b6 c0             	movzx  eax,al
c002473c:	5b                   	pop    ebx
c002473d:	5e                   	pop    esi
c002473e:	5f                   	pop    edi
c002473f:	c3                   	ret    

c0024740 <ATA::write(unsigned long long, int, void*)>:
c0024740:	55                   	push   ebp
c0024741:	57                   	push   edi
c0024742:	56                   	push   esi
c0024743:	53                   	push   ebx
c0024744:	83 ec 18             	sub    esp,0x18
c0024747:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002474b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002474f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0024753:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0024757:	68 75 cc 02 c0       	push   0xc002cc75
c002475c:	e8 50 e1 fe ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0024761:	8d 53 ff             	lea    edx,[ebx-0x1]
c0024764:	83 c4 10             	add    esp,0x10
c0024767:	b8 04 00 00 00       	mov    eax,0x4
c002476c:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0024772:	77 25                	ja     c0024799 <ATA::write(unsigned long long, int, void*)+0x59>
c0024774:	b8 06 00 00 00       	mov    eax,0x6
c0024779:	85 f6                	test   esi,esi
c002477b:	74 1c                	je     c0024799 <ATA::write(unsigned long long, int, void*)+0x59>
c002477d:	50                   	push   eax
c002477e:	50                   	push   eax
c002477f:	6a 01                	push   0x1
c0024781:	56                   	push   esi
c0024782:	53                   	push   ebx
c0024783:	55                   	push   ebp
c0024784:	57                   	push   edi
c0024785:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024789:	e8 70 fb ff ff       	call   c00242fe <ATA::access(unsigned long long, int, void*, bool)>
c002478e:	83 c4 20             	add    esp,0x20
c0024791:	85 c0                	test   eax,eax
c0024793:	0f 95 c0             	setne  al
c0024796:	0f b6 c0             	movzx  eax,al
c0024799:	83 c4 0c             	add    esp,0xc
c002479c:	5b                   	pop    ebx
c002479d:	5e                   	pop    esi
c002479e:	5f                   	pop    edi
c002479f:	5d                   	pop    ebp
c00247a0:	c3                   	ret    
c00247a1:	90                   	nop

c00247a2 <ATA::detectCHS()>:
c00247a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00247a6:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00247ac:	c1 e0 06             	shl    eax,0x6
c00247af:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00247b5:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00247bf:	c7 44 24 04 81 cc 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cc81
c00247c7:	e9 53 5a ff ff       	jmp    c001a21f <Krnl::panic(char const*)>

c00247cc <ATA::open(int, int, void*)>:
c00247cc:	53                   	push   ebx
c00247cd:	83 ec 08             	sub    esp,0x8
c00247d0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00247d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00247d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00247dc:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00247e2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00247e8:	c1 e0 06             	shl    eax,0x6
c00247eb:	01 d0                	add    eax,edx
c00247ed:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00247f4:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00247fa:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024801:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002480b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024811:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024818:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002481f:	75 0c                	jne    c002482d <ATA::open(int, int, void*)+0x61>
c0024821:	83 ec 0c             	sub    esp,0xc
c0024824:	53                   	push   ebx
c0024825:	e8 78 ff ff ff       	call   c00247a2 <ATA::detectCHS()>
c002482a:	83 c4 10             	add    esp,0x10
c002482d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024833:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024839:	c1 e0 06             	shl    eax,0x6
c002483c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024843:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002484d:	d1 e8                	shr    eax,1
c002484f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024855:	6a 04                	push   0x4
c0024857:	6a 0c                	push   0xc
c0024859:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024860:	50                   	push   eax
c0024861:	52                   	push   edx
c0024862:	e8 7d eb ff ff       	call   c00233e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024867:	90                   	nop
c0024868:	90                   	nop
c0024869:	6a 00                	push   0x0
c002486b:	6a 0c                	push   0xc
c002486d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024874:	50                   	push   eax
c0024875:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002487b:	e8 64 eb ff ff       	call   c00233e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024880:	83 c4 14             	add    esp,0x14
c0024883:	53                   	push   ebx
c0024884:	e8 ff f8 fe ff       	call   c0014188 <PhysicalDisk::startCache()>
c0024889:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002488c:	e8 7f 1b ff ff       	call   c0016410 <createPartitionsForDisk(PhysicalDisk*)>
c0024891:	31 c0                	xor    eax,eax
c0024893:	83 c4 18             	add    esp,0x18
c0024896:	5b                   	pop    ebx
c0024897:	c3                   	ret    

c0024898 <ATAPI::write(unsigned long long, int, void*)>:
c0024898:	b8 03 00 00 00       	mov    eax,0x3
c002489d:	c3                   	ret    

c002489e <ATAPI::close(int, int, void*)>:
c002489e:	83 ec 0c             	sub    esp,0xc
c00248a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248a5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00248ab:	85 c0                	test   eax,eax
c00248ad:	74 0c                	je     c00248bb <ATAPI::close(int, int, void*)+0x1d>
c00248af:	83 ec 0c             	sub    esp,0xc
c00248b2:	8b 10                	mov    edx,DWORD PTR [eax]
c00248b4:	50                   	push   eax
c00248b5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00248b8:	83 c4 10             	add    esp,0x10
c00248bb:	31 c0                	xor    eax,eax
c00248bd:	83 c4 0c             	add    esp,0xc
c00248c0:	c3                   	ret    
c00248c1:	90                   	nop

c00248c2 <ATAPI::ATAPI()>:
c00248c2:	83 ec 0c             	sub    esp,0xc
c00248c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248c9:	83 ec 04             	sub    esp,0x4
c00248cc:	68 00 08 00 00       	push   0x800
c00248d1:	68 b9 cd 02 c0       	push   0xc002cdb9
c00248d6:	50                   	push   eax
c00248d7:	e8 44 f8 fe ff       	call   c0014120 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00248dc:	83 c4 10             	add    esp,0x10
c00248df:	ba d4 cc 02 c0       	mov    edx,0xc002ccd4
c00248e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248e8:	89 10                	mov    DWORD PTR [eax],edx
c00248ea:	90                   	nop
c00248eb:	83 c4 0c             	add    esp,0xc
c00248ee:	c3                   	ret    
c00248ef:	90                   	nop

c00248f0 <ATAPI::readyForCommand()>:
c00248f0:	56                   	push   esi
c00248f1:	53                   	push   ebx
c00248f2:	31 db                	xor    ebx,ebx
c00248f4:	50                   	push   eax
c00248f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00248f9:	50                   	push   eax
c00248fa:	6a 0c                	push   0xc
c00248fc:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024903:	50                   	push   eax
c0024904:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002490a:	e8 95 eb ff ff       	call   c00234a4 <IDE::read(unsigned char, unsigned char)>
c002490f:	83 c4 10             	add    esp,0x10
c0024912:	a8 88                	test   al,0x88
c0024914:	74 23                	je     c0024939 <ATAPI::readyForCommand()+0x49>
c0024916:	43                   	inc    ebx
c0024917:	83 fb 63             	cmp    ebx,0x63
c002491a:	7e dd                	jle    c00248f9 <ATAPI::readyForCommand()+0x9>
c002491c:	51                   	push   ecx
c002491d:	51                   	push   ecx
c002491e:	6a 00                	push   0x0
c0024920:	68 40 42 0f 00       	push   0xf4240
c0024925:	e8 61 97 ff ff       	call   c001e08b <nanoSleep(unsigned long long)>
c002492a:	83 c4 10             	add    esp,0x10
c002492d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024933:	75 c4                	jne    c00248f9 <ATAPI::readyForCommand()+0x9>
c0024935:	31 c0                	xor    eax,eax
c0024937:	eb 02                	jmp    c002493b <ATAPI::readyForCommand()+0x4b>
c0024939:	b0 01                	mov    al,0x1
c002493b:	5a                   	pop    edx
c002493c:	5b                   	pop    ebx
c002493d:	5e                   	pop    esi
c002493e:	c3                   	ret    
c002493f:	90                   	nop

c0024940 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024940:	55                   	push   ebp
c0024941:	57                   	push   edi
c0024942:	56                   	push   esi
c0024943:	53                   	push   ebx
c0024944:	83 ec 20             	sub    esp,0x20
c0024947:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002494b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002494f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024953:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024957:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002495b:	6a 01                	push   0x1
c002495d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024964:	50                   	push   eax
c0024965:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002496b:	e8 80 ec ff ff       	call   c00235f0 <IDE::enableIRQs(unsigned char, bool)>
c0024970:	5e                   	pop    esi
c0024971:	58                   	pop    eax
c0024972:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024979:	50                   	push   eax
c002497a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024980:	e8 39 ea ff ff       	call   c00233be <IDE::prepareInterrupt(unsigned char)>
c0024985:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024988:	e8 63 ff ff ff       	call   c00248f0 <ATAPI::readyForCommand()>
c002498d:	83 c4 10             	add    esp,0x10
c0024990:	84 c0                	test   al,al
c0024992:	75 0a                	jne    c002499e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024994:	bb 01 00 00 00       	mov    ebx,0x1
c0024999:	e9 57 02 00 00       	jmp    c0024bf5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002499e:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00249a4:	c1 e0 04             	shl    eax,0x4
c00249a7:	0f b6 c0             	movzx  eax,al
c00249aa:	50                   	push   eax
c00249ab:	6a 06                	push   0x6
c00249ad:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00249b4:	50                   	push   eax
c00249b5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00249bb:	e8 24 ea ff ff       	call   c00233e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249c0:	6a 00                	push   0x0
c00249c2:	6a 01                	push   0x1
c00249c4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00249cb:	50                   	push   eax
c00249cc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00249d2:	e8 0d ea ff ff       	call   c00233e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249d7:	83 c4 20             	add    esp,0x20
c00249da:	0f b6 c3             	movzx  eax,bl
c00249dd:	0f b6 df             	movzx  ebx,bh
c00249e0:	50                   	push   eax
c00249e1:	6a 04                	push   0x4
c00249e3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00249ea:	50                   	push   eax
c00249eb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00249f1:	e8 ee e9 ff ff       	call   c00233e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249f6:	53                   	push   ebx
c00249f7:	6a 05                	push   0x5
c00249f9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024a00:	50                   	push   eax
c0024a01:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024a07:	e8 d8 e9 ff ff       	call   c00233e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a0c:	83 c4 20             	add    esp,0x20
c0024a0f:	68 a0 00 00 00       	push   0xa0
c0024a14:	6a 07                	push   0x7
c0024a16:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024a1d:	50                   	push   eax
c0024a1e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024a24:	e8 bb e9 ff ff       	call   c00233e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a29:	83 c4 0c             	add    esp,0xc
c0024a2c:	6a 01                	push   0x1
c0024a2e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024a35:	50                   	push   eax
c0024a36:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024a3c:	e8 45 f4 ff ff       	call   c0023e86 <IDE::polling(unsigned char, unsigned int)>
c0024a41:	83 c4 10             	add    esp,0x10
c0024a44:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024a4a:	84 c0                	test   al,al
c0024a4c:	74 23                	je     c0024a71 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024a4e:	0f b6 d8             	movzx  ebx,al
c0024a51:	0f b6 d2             	movzx  edx,dl
c0024a54:	53                   	push   ebx
c0024a55:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024a5c:	50                   	push   eax
c0024a5d:	52                   	push   edx
c0024a5e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024a64:	e8 6d f3 ff ff       	call   c0023dd6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024a69:	83 c4 10             	add    esp,0x10
c0024a6c:	e9 84 01 00 00       	jmp    c0024bf5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024a71:	0f b6 d2             	movzx  edx,dl
c0024a74:	53                   	push   ebx
c0024a75:	53                   	push   ebx
c0024a76:	52                   	push   edx
c0024a77:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024a7d:	e8 50 e9 ff ff       	call   c00233d2 <IDE::getBase(unsigned char)>
c0024a82:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024a86:	b9 06 00 00 00       	mov    ecx,0x6
c0024a8b:	89 c2                	mov    edx,eax
c0024a8d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024a90:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024a94:	83 c4 10             	add    esp,0x10
c0024a97:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024a9d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024aa4:	85 db                	test   ebx,ebx
c0024aa6:	0f 84 ec 00 00 00    	je     c0024b98 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024aac:	51                   	push   ecx
c0024aad:	51                   	push   ecx
c0024aae:	52                   	push   edx
c0024aaf:	50                   	push   eax
c0024ab0:	e8 9d ea ff ff       	call   c0023552 <IDE::waitInterrupt(unsigned char)>
c0024ab5:	83 c4 10             	add    esp,0x10
c0024ab8:	84 c0                	test   al,al
c0024aba:	0f 84 d4 fe ff ff    	je     c0024994 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024ac0:	56                   	push   esi
c0024ac1:	56                   	push   esi
c0024ac2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024ac9:	50                   	push   eax
c0024aca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ad0:	e8 e9 e8 ff ff       	call   c00233be <IDE::prepareInterrupt(unsigned char)>
c0024ad5:	83 c4 0c             	add    esp,0xc
c0024ad8:	6a 04                	push   0x4
c0024ada:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024ae1:	50                   	push   eax
c0024ae2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ae8:	e8 b7 e9 ff ff       	call   c00234a4 <IDE::read(unsigned char, unsigned char)>
c0024aed:	83 c4 0c             	add    esp,0xc
c0024af0:	89 c6                	mov    esi,eax
c0024af2:	6a 05                	push   0x5
c0024af4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024afb:	50                   	push   eax
c0024afc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024b02:	e8 9d e9 ff ff       	call   c00234a4 <IDE::read(unsigned char, unsigned char)>
c0024b07:	89 f1                	mov    ecx,esi
c0024b09:	0f b6 c0             	movzx  eax,al
c0024b0c:	0f b6 f1             	movzx  esi,cl
c0024b0f:	c1 e0 08             	shl    eax,0x8
c0024b12:	09 c6                	or     esi,eax
c0024b14:	d1 fe                	sar    esi,1
c0024b16:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024b1a:	83 c4 10             	add    esp,0x10
c0024b1d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024b22:	74 41                	je     c0024b65 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024b24:	31 c9                	xor    ecx,ecx
c0024b26:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024b2c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024b33:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024b37:	75 0a                	jne    c0024b43 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024b39:	01 c9                	add    ecx,ecx
c0024b3b:	01 cd                	add    ebp,ecx
c0024b3d:	4b                   	dec    ebx
c0024b3e:	e9 54 ff ff ff       	jmp    c0024a97 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024b43:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024b48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024b4c:	51                   	push   ecx
c0024b4d:	51                   	push   ecx
c0024b4e:	52                   	push   edx
c0024b4f:	50                   	push   eax
c0024b50:	e8 7d e8 ff ff       	call   c00233d2 <IDE::getBase(unsigned char)>
c0024b55:	89 c2                	mov    edx,eax
c0024b57:	89 f0                	mov    eax,esi
c0024b59:	66 ef                	out    dx,ax
c0024b5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024b5f:	83 c4 10             	add    esp,0x10
c0024b62:	41                   	inc    ecx
c0024b63:	eb c1                	jmp    c0024b26 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024b65:	31 f6                	xor    esi,esi
c0024b67:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024b6d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024b74:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024b78:	75 06                	jne    c0024b80 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024b7a:	01 f6                	add    esi,esi
c0024b7c:	01 f5                	add    ebp,esi
c0024b7e:	eb bd                	jmp    c0024b3d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024b80:	51                   	push   ecx
c0024b81:	51                   	push   ecx
c0024b82:	52                   	push   edx
c0024b83:	50                   	push   eax
c0024b84:	e8 49 e8 ff ff       	call   c00233d2 <IDE::getBase(unsigned char)>
c0024b89:	89 c2                	mov    edx,eax
c0024b8b:	66 ed                	in     ax,dx
c0024b8d:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024b92:	83 c4 10             	add    esp,0x10
c0024b95:	46                   	inc    esi
c0024b96:	eb cf                	jmp    c0024b67 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024b98:	51                   	push   ecx
c0024b99:	51                   	push   ecx
c0024b9a:	52                   	push   edx
c0024b9b:	50                   	push   eax
c0024b9c:	e8 b1 e9 ff ff       	call   c0023552 <IDE::waitInterrupt(unsigned char)>
c0024ba1:	83 c4 10             	add    esp,0x10
c0024ba4:	84 c0                	test   al,al
c0024ba6:	0f 84 e8 fd ff ff    	je     c0024994 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024bac:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024bb1:	52                   	push   edx
c0024bb2:	52                   	push   edx
c0024bb3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024bba:	50                   	push   eax
c0024bbb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024bc1:	e8 f8 e7 ff ff       	call   c00233be <IDE::prepareInterrupt(unsigned char)>
c0024bc6:	83 c4 10             	add    esp,0x10
c0024bc9:	50                   	push   eax
c0024bca:	50                   	push   eax
c0024bcb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024bd2:	50                   	push   eax
c0024bd3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024bd9:	e8 f4 e7 ff ff       	call   c00233d2 <IDE::getBase(unsigned char)>
c0024bde:	8d 50 07             	lea    edx,[eax+0x7]
c0024be1:	ec                   	in     al,dx
c0024be2:	83 c4 10             	add    esp,0x10
c0024be5:	a8 88                	test   al,0x88
c0024be7:	74 0a                	je     c0024bf3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024be9:	4b                   	dec    ebx
c0024bea:	75 dd                	jne    c0024bc9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024bec:	bb 02 00 00 00       	mov    ebx,0x2
c0024bf1:	eb 02                	jmp    c0024bf5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024bf3:	31 db                	xor    ebx,ebx
c0024bf5:	83 c4 1c             	add    esp,0x1c
c0024bf8:	89 d8                	mov    eax,ebx
c0024bfa:	5b                   	pop    ebx
c0024bfb:	5e                   	pop    esi
c0024bfc:	5f                   	pop    edi
c0024bfd:	5d                   	pop    ebp
c0024bfe:	c3                   	ret    
c0024bff:	90                   	nop

c0024c00 <ATAPI::diskRemoved()>:
c0024c00:	83 ec 18             	sub    esp,0x18
c0024c03:	68 c5 cd 02 c0       	push   0xc002cdc5
c0024c08:	e8 a4 dc fe ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0024c0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c11:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024c18:	83 c4 1c             	add    esp,0x1c
c0024c1b:	c3                   	ret    

c0024c1c <ATAPI::eject()>:
c0024c1c:	57                   	push   edi
c0024c1d:	b9 03 00 00 00       	mov    ecx,0x3
c0024c22:	53                   	push   ebx
c0024c23:	83 ec 14             	sub    esp,0x14
c0024c26:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024c2a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024c2e:	fc                   	cld    
c0024c2f:	31 c0                	xor    eax,eax
c0024c31:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024c33:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024c38:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024c3d:	50                   	push   eax
c0024c3e:	50                   	push   eax
c0024c3f:	6a 00                	push   0x0
c0024c41:	6a 00                	push   0x0
c0024c43:	6a 00                	push   0x0
c0024c45:	6a 02                	push   0x2
c0024c47:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024c4b:	50                   	push   eax
c0024c4c:	53                   	push   ebx
c0024c4d:	e8 ee fc ff ff       	call   c0024940 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024c52:	83 c4 14             	add    esp,0x14
c0024c55:	53                   	push   ebx
c0024c56:	e8 a5 ff ff ff       	call   c0024c00 <ATAPI::diskRemoved()>
c0024c5b:	83 c4 24             	add    esp,0x24
c0024c5e:	31 c0                	xor    eax,eax
c0024c60:	5b                   	pop    ebx
c0024c61:	5f                   	pop    edi
c0024c62:	c3                   	ret    
c0024c63:	90                   	nop

c0024c64 <ATAPI::diskInserted()>:
c0024c64:	53                   	push   ebx
c0024c65:	83 ec 14             	sub    esp,0x14
c0024c68:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024c6c:	68 dc cd 02 c0       	push   0xc002cddc
c0024c71:	e8 3b dc fe ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0024c76:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024c7d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024c80:	e8 03 f5 fe ff       	call   c0014188 <PhysicalDisk::startCache()>
c0024c85:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024c89:	83 c4 18             	add    esp,0x18
c0024c8c:	5b                   	pop    ebx
c0024c8d:	e9 7e 17 ff ff       	jmp    c0016410 <createPartitionsForDisk(PhysicalDisk*)>

c0024c92 <ATAPI::detectMedia()>:
c0024c92:	56                   	push   esi
c0024c93:	53                   	push   ebx
c0024c94:	83 ec 28             	sub    esp,0x28
c0024c97:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024c9b:	6a 0c                	push   0xc
c0024c9d:	6a 00                	push   0x0
c0024c9f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024ca3:	56                   	push   esi
c0024ca4:	e8 a7 ba fd ff       	call   c0000750 <memset>
c0024ca9:	58                   	pop    eax
c0024caa:	5a                   	pop    edx
c0024cab:	6a 00                	push   0x0
c0024cad:	6a 00                	push   0x0
c0024caf:	6a 00                	push   0x0
c0024cb1:	6a 00                	push   0x0
c0024cb3:	56                   	push   esi
c0024cb4:	53                   	push   ebx
c0024cb5:	e8 86 fc ff ff       	call   c0024940 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024cba:	83 c4 1c             	add    esp,0x1c
c0024cbd:	6a 0c                	push   0xc
c0024cbf:	6a 00                	push   0x0
c0024cc1:	56                   	push   esi
c0024cc2:	e8 89 ba fd ff       	call   c0000750 <memset>
c0024cc7:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024ccc:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024cd1:	59                   	pop    ecx
c0024cd2:	58                   	pop    eax
c0024cd3:	6a 01                	push   0x1
c0024cd5:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024cd9:	50                   	push   eax
c0024cda:	6a 00                	push   0x0
c0024cdc:	6a 12                	push   0x12
c0024cde:	56                   	push   esi
c0024cdf:	53                   	push   ebx
c0024ce0:	e8 5b fc ff ff       	call   c0024940 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024ce5:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024ce9:	83 c4 20             	add    esp,0x20
c0024cec:	83 e0 7f             	and    eax,0x7f
c0024cef:	3c 70                	cmp    al,0x70
c0024cf1:	74 15                	je     c0024d08 <ATAPI::detectMedia()+0x76>
c0024cf3:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024cfa:	75 0c                	jne    c0024d08 <ATAPI::detectMedia()+0x76>
c0024cfc:	83 ec 0c             	sub    esp,0xc
c0024cff:	53                   	push   ebx
c0024d00:	e8 5f ff ff ff       	call   c0024c64 <ATAPI::diskInserted()>
c0024d05:	83 c4 10             	add    esp,0x10
c0024d08:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024d0c:	83 e0 0f             	and    eax,0xf
c0024d0f:	3c 02                	cmp    al,0x2
c0024d11:	75 1b                	jne    c0024d2e <ATAPI::detectMedia()+0x9c>
c0024d13:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024d18:	75 2d                	jne    c0024d47 <ATAPI::detectMedia()+0xb5>
c0024d1a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024d21:	74 24                	je     c0024d47 <ATAPI::detectMedia()+0xb5>
c0024d23:	83 ec 0c             	sub    esp,0xc
c0024d26:	53                   	push   ebx
c0024d27:	e8 d4 fe ff ff       	call   c0024c00 <ATAPI::diskRemoved()>
c0024d2c:	eb 16                	jmp    c0024d44 <ATAPI::detectMedia()+0xb2>
c0024d2e:	84 c0                	test   al,al
c0024d30:	75 15                	jne    c0024d47 <ATAPI::detectMedia()+0xb5>
c0024d32:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024d39:	75 0c                	jne    c0024d47 <ATAPI::detectMedia()+0xb5>
c0024d3b:	83 ec 0c             	sub    esp,0xc
c0024d3e:	53                   	push   ebx
c0024d3f:	e8 20 ff ff ff       	call   c0024c64 <ATAPI::diskInserted()>
c0024d44:	83 c4 10             	add    esp,0x10
c0024d47:	83 c4 24             	add    esp,0x24
c0024d4a:	5b                   	pop    ebx
c0024d4b:	5e                   	pop    esi
c0024d4c:	c3                   	ret    
c0024d4d:	90                   	nop

c0024d4e <ATAPI::open(int, int, void*)>:
c0024d4e:	53                   	push   ebx
c0024d4f:	83 ec 08             	sub    esp,0x8
c0024d52:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024d56:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024d5a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024d5e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024d64:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024d6a:	c1 e0 06             	shl    eax,0x6
c0024d6d:	01 d0                	add    eax,edx
c0024d6f:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024d76:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024d7c:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024d83:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024d8d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024d93:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024d9a:	6a 04                	push   0x4
c0024d9c:	6a 0c                	push   0xc
c0024d9e:	51                   	push   ecx
c0024d9f:	52                   	push   edx
c0024da0:	e8 3f e6 ff ff       	call   c00233e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024da5:	90                   	nop
c0024da6:	90                   	nop
c0024da7:	6a 00                	push   0x0
c0024da9:	6a 0c                	push   0xc
c0024dab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024db2:	50                   	push   eax
c0024db3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024db9:	e8 26 e6 ff ff       	call   c00233e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024dbe:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024dc5:	83 c4 14             	add    esp,0x14
c0024dc8:	53                   	push   ebx
c0024dc9:	e8 c4 fe ff ff       	call   c0024c92 <ATAPI::detectMedia()>
c0024dce:	31 c0                	xor    eax,eax
c0024dd0:	83 c4 18             	add    esp,0x18
c0024dd3:	5b                   	pop    ebx
c0024dd4:	c3                   	ret    
c0024dd5:	90                   	nop

c0024dd6 <ATAPI::read(unsigned long long, int, void*)>:
c0024dd6:	55                   	push   ebp
c0024dd7:	57                   	push   edi
c0024dd8:	56                   	push   esi
c0024dd9:	53                   	push   ebx
c0024dda:	83 ec 1c             	sub    esp,0x1c
c0024ddd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024de1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024de5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024de9:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024df0:	74 41                	je     c0024e33 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024df2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024df6:	b9 03 00 00 00       	mov    ecx,0x3
c0024dfb:	fc                   	cld    
c0024dfc:	31 c0                	xor    eax,eax
c0024dfe:	86 fb                	xchg   bl,bh
c0024e00:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024e02:	c1 c3 10             	rol    ebx,0x10
c0024e05:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024e0a:	89 e8                	mov    eax,ebp
c0024e0c:	86 fb                	xchg   bl,bh
c0024e0e:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024e12:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024e16:	50                   	push   eax
c0024e17:	50                   	push   eax
c0024e18:	55                   	push   ebp
c0024e19:	c1 e5 0b             	shl    ebp,0xb
c0024e1c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024e20:	6a 00                	push   0x0
c0024e22:	55                   	push   ebp
c0024e23:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024e27:	50                   	push   eax
c0024e28:	56                   	push   esi
c0024e29:	e8 12 fb ff ff       	call   c0024940 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024e2e:	83 c4 20             	add    esp,0x20
c0024e31:	eb 1a                	jmp    c0024e4d <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024e33:	83 ec 0c             	sub    esp,0xc
c0024e36:	56                   	push   esi
c0024e37:	e8 56 fe ff ff       	call   c0024c92 <ATAPI::detectMedia()>
c0024e3c:	83 c4 10             	add    esp,0x10
c0024e3f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024e46:	75 aa                	jne    c0024df2 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024e48:	b8 02 00 00 00       	mov    eax,0x2
c0024e4d:	83 c4 1c             	add    esp,0x1c
c0024e50:	5b                   	pop    ebx
c0024e51:	5e                   	pop    esi
c0024e52:	5f                   	pop    edi
c0024e53:	5d                   	pop    ebp
c0024e54:	c3                   	ret    
c0024e55:	90                   	nop

c0024e56 <SATA::close(int, int, void*)>:
c0024e56:	83 ec 0c             	sub    esp,0xc
c0024e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e5d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024e63:	85 c0                	test   eax,eax
c0024e65:	74 0c                	je     c0024e73 <SATA::close(int, int, void*)+0x1d>
c0024e67:	83 ec 0c             	sub    esp,0xc
c0024e6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0024e6c:	50                   	push   eax
c0024e6d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024e70:	83 c4 10             	add    esp,0x10
c0024e73:	31 c0                	xor    eax,eax
c0024e75:	83 c4 0c             	add    esp,0xc
c0024e78:	c3                   	ret    
c0024e79:	90                   	nop

c0024e7a <SATA::powerSaving(PowerSavingLevel)>:
c0024e7a:	c3                   	ret    
c0024e7b:	90                   	nop

c0024e7c <SATA::open(int, int, void*)>:
c0024e7c:	56                   	push   esi
c0024e7d:	53                   	push   ebx
c0024e7e:	50                   	push   eax
c0024e7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024e83:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024e87:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024e91:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024e97:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024ea1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024ea5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024eaf:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024eb5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024ebc:	e8 94 ad fe ff       	call   c000fc55 <Phys::allocatePage()>
c0024ec1:	89 c6                	mov    esi,eax
c0024ec3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024ec9:	81 c6 00 10 00 00    	add    esi,0x1000
c0024ecf:	e8 81 ad fe ff       	call   c000fc55 <Phys::allocatePage()>
c0024ed4:	39 c6                	cmp    esi,eax
c0024ed6:	74 10                	je     c0024ee8 <SATA::open(int, int, void*)+0x6c>
c0024ed8:	83 ec 0c             	sub    esp,0xc
c0024edb:	68 04 cd 02 c0       	push   0xc002cd04
c0024ee0:	e8 3a 53 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c0024ee5:	83 c4 10             	add    esp,0x10
c0024ee8:	83 ec 0c             	sub    esp,0xc
c0024eeb:	6a 02                	push   0x2
c0024eed:	e8 ed c5 fe ff       	call   c00114df <Virt::allocateKernelVirtualPages(int)>
c0024ef2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024ef8:	6a 03                	push   0x3
c0024efa:	50                   	push   eax
c0024efb:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024f01:	ff 35 70 e5 02 c0    	push   DWORD PTR ds:0xc002e570
c0024f07:	e8 7a cc fe ff       	call   c0011b86 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024f0c:	83 c4 14             	add    esp,0x14
c0024f0f:	53                   	push   ebx
c0024f10:	e8 73 f2 fe ff       	call   c0014188 <PhysicalDisk::startCache()>
c0024f15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024f18:	e8 f3 14 ff ff       	call   c0016410 <createPartitionsForDisk(PhysicalDisk*)>
c0024f1d:	83 c4 14             	add    esp,0x14
c0024f20:	31 c0                	xor    eax,eax
c0024f22:	5b                   	pop    ebx
c0024f23:	5e                   	pop    esi
c0024f24:	c3                   	ret    
c0024f25:	90                   	nop

c0024f26 <SATA::SATA()>:
c0024f26:	83 ec 0c             	sub    esp,0xc
c0024f29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f2d:	83 ec 04             	sub    esp,0x4
c0024f30:	68 00 02 00 00       	push   0x200
c0024f35:	68 18 cd 02 c0       	push   0xc002cd18
c0024f3a:	50                   	push   eax
c0024f3b:	e8 e0 f1 fe ff       	call   c0014120 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024f40:	83 c4 10             	add    esp,0x10
c0024f43:	ba 88 cd 02 c0       	mov    edx,0xc002cd88
c0024f48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f4c:	89 10                	mov    DWORD PTR [eax],edx
c0024f4e:	90                   	nop
c0024f4f:	83 c4 0c             	add    esp,0xc
c0024f52:	c3                   	ret    
c0024f53:	90                   	nop

c0024f54 <SATA::access(unsigned long long, int, void*, bool)>:
c0024f54:	55                   	push   ebp
c0024f55:	57                   	push   edi
c0024f56:	56                   	push   esi
c0024f57:	53                   	push   ebx
c0024f58:	83 ec 2c             	sub    esp,0x2c
c0024f5b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024f5f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024f63:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024f67:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024f6b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024f6f:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024f74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024f78:	7e 10                	jle    c0024f8a <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024f7a:	83 ec 0c             	sub    esp,0xc
c0024f7d:	68 28 cd 02 c0       	push   0xc002cd28
c0024f82:	e8 98 52 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c0024f87:	83 c4 10             	add    esp,0x10
c0024f8a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024f90:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0024f96:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024f9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024fa0:	89 d0                	mov    eax,edx
c0024fa2:	c1 e0 07             	shl    eax,0x7
c0024fa5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024fa9:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024fb3:	51                   	push   ecx
c0024fb4:	8d 42 02             	lea    eax,[edx+0x2]
c0024fb7:	51                   	push   ecx
c0024fb8:	c1 e0 07             	shl    eax,0x7
c0024fbb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024fbf:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024fc3:	50                   	push   eax
c0024fc4:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0024fca:	e8 97 ef ff ff       	call   c0023f66 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024fcf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024fd3:	83 c4 10             	add    esp,0x10
c0024fd6:	b8 01 00 00 00       	mov    eax,0x1
c0024fdb:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024fe0:	0f 84 cb 01 00 00    	je     c00251b1 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024fe6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024fea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024fee:	c1 e0 09             	shl    eax,0x9
c0024ff1:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024ff6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024ffa:	74 0e                	je     c002500a <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c0024ffc:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0025002:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0025006:	89 c1                	mov    ecx,eax
c0025008:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002500a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002500e:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0025014:	8d 42 02             	lea    eax,[edx+0x2]
c0025017:	c1 e0 07             	shl    eax,0x7
c002501a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002501e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025020:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025026:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002502c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025030:	c1 e1 05             	shl    ecx,0x5
c0025033:	01 c8                	add    eax,ecx
c0025035:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0025039:	83 e1 01             	and    ecx,0x1
c002503c:	89 ce                	mov    esi,ecx
c002503e:	8a 08                	mov    cl,BYTE PTR [eax]
c0025040:	c1 e6 06             	shl    esi,0x6
c0025043:	83 e1 bf             	and    ecx,0xffffffbf
c0025046:	09 f1                	or     ecx,esi
c0025048:	88 08                	mov    BYTE PTR [eax],cl
c002504a:	8b 08                	mov    ecx,DWORD PTR [eax]
c002504c:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0025052:	81 c9 05 00 01 00    	or     ecx,0x10005
c0025058:	89 08                	mov    DWORD PTR [eax],ecx
c002505a:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0025060:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0025066:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c002506c:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c002506f:	50                   	push   eax
c0025070:	68 90 00 00 00       	push   0x90
c0025075:	6a 00                	push   0x0
c0025077:	56                   	push   esi
c0025078:	e8 d3 b6 fd ff       	call   c0000750 <memset>
c002507d:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0025083:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0025087:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002508d:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0025091:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0025095:	83 c4 10             	add    esp,0x10
c0025098:	48                   	dec    eax
c0025099:	25 ff ff 3f 00       	and    eax,0x3fffff
c002509e:	89 c1                	mov    ecx,eax
c00250a0:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c00250a6:	25 00 00 c0 ff       	and    eax,0xffc00000
c00250ab:	09 c8                	or     eax,ecx
c00250ad:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c00250b3:	66 8b 06             	mov    ax,WORD PTR [esi]
c00250b6:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c00250bd:	66 25 00 7f          	and    ax,0x7f00
c00250c1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00250c5:	66 0d 27 80          	or     ax,0x8027
c00250c9:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c00250ce:	66 89 06             	mov    WORD PTR [esi],ax
c00250d1:	19 c0                	sbb    eax,eax
c00250d3:	83 e0 f0             	and    eax,0xfffffff0
c00250d6:	83 c0 35             	add    eax,0x35
c00250d9:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00250dc:	89 e8                	mov    eax,ebp
c00250de:	c1 e8 10             	shr    eax,0x10
c00250e1:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c00250e4:	89 e8                	mov    eax,ebp
c00250e6:	c1 e8 18             	shr    eax,0x18
c00250e9:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c00250ec:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00250f0:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c00250f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00250f7:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c00250fa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00250fe:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0025102:	89 d6                	mov    esi,edx
c0025104:	31 c0                	xor    eax,eax
c0025106:	c1 e6 07             	shl    esi,0x7
c0025109:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c002510d:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0025113:	80 e1 88             	and    cl,0x88
c0025116:	74 0a                	je     c0025122 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0025118:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002511d:	74 0a                	je     c0025129 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c002511f:	40                   	inc    eax
c0025120:	eb eb                	jmp    c002510d <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0025122:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025127:	75 0a                	jne    c0025133 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0025129:	83 ec 0c             	sub    esp,0xc
c002512c:	68 61 cd 02 c0       	push   0xc002cd61
c0025131:	eb 56                	jmp    c0025189 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0025133:	b8 01 00 00 00       	mov    eax,0x1
c0025138:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002513c:	c1 e2 07             	shl    edx,0x7
c002513f:	d3 e0                	shl    eax,cl
c0025141:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0025145:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002514b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0025151:	85 c8                	test   eax,ecx
c0025153:	74 20                	je     c0025175 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0025155:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c002515b:	0f ba e1 1e          	bt     ecx,0x1e
c002515f:	73 ea                	jae    c002514b <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0025161:	83 ec 0c             	sub    esp,0xc
c0025164:	68 6f cd 02 c0       	push   0xc002cd6f
c0025169:	e8 b1 50 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c002516e:	83 c4 10             	add    esp,0x10
c0025171:	31 c0                	xor    eax,eax
c0025173:	eb 3c                	jmp    c00251b1 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025175:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c002517b:	0f ba e0 1e          	bt     eax,0x1e
c002517f:	73 17                	jae    c0025198 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0025181:	83 ec 0c             	sub    esp,0xc
c0025184:	68 6f cd 02 c0       	push   0xc002cd6f
c0025189:	e8 91 50 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c002518e:	83 c4 10             	add    esp,0x10
c0025191:	b8 01 00 00 00       	mov    eax,0x1
c0025196:	eb 19                	jmp    c00251b1 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025198:	31 c0                	xor    eax,eax
c002519a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002519f:	75 10                	jne    c00251b1 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00251a1:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c00251a7:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00251ab:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00251af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00251b1:	83 c4 2c             	add    esp,0x2c
c00251b4:	5b                   	pop    ebx
c00251b5:	5e                   	pop    esi
c00251b6:	5f                   	pop    edi
c00251b7:	5d                   	pop    ebp
c00251b8:	c3                   	ret    
c00251b9:	90                   	nop

c00251ba <SATA::read(unsigned long long, int, void*)>:
c00251ba:	57                   	push   edi
c00251bb:	b8 04 00 00 00       	mov    eax,0x4
c00251c0:	56                   	push   esi
c00251c1:	53                   	push   ebx
c00251c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00251c6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00251ca:	8d 7a ff             	lea    edi,[edx-0x1]
c00251cd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00251d1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00251d5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00251db:	77 25                	ja     c0025202 <SATA::read(unsigned long long, int, void*)+0x48>
c00251dd:	b8 06 00 00 00       	mov    eax,0x6
c00251e2:	85 f6                	test   esi,esi
c00251e4:	74 1c                	je     c0025202 <SATA::read(unsigned long long, int, void*)+0x48>
c00251e6:	50                   	push   eax
c00251e7:	50                   	push   eax
c00251e8:	6a 00                	push   0x0
c00251ea:	56                   	push   esi
c00251eb:	52                   	push   edx
c00251ec:	53                   	push   ebx
c00251ed:	51                   	push   ecx
c00251ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00251f2:	e8 5d fd ff ff       	call   c0024f54 <SATA::access(unsigned long long, int, void*, bool)>
c00251f7:	83 c4 20             	add    esp,0x20
c00251fa:	85 c0                	test   eax,eax
c00251fc:	0f 95 c0             	setne  al
c00251ff:	0f b6 c0             	movzx  eax,al
c0025202:	5b                   	pop    ebx
c0025203:	5e                   	pop    esi
c0025204:	5f                   	pop    edi
c0025205:	c3                   	ret    

c0025206 <SATA::write(unsigned long long, int, void*)>:
c0025206:	55                   	push   ebp
c0025207:	b8 04 00 00 00       	mov    eax,0x4
c002520c:	57                   	push   edi
c002520d:	56                   	push   esi
c002520e:	53                   	push   ebx
c002520f:	83 ec 0c             	sub    esp,0xc
c0025212:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025216:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002521a:	8d 73 ff             	lea    esi,[ebx-0x1]
c002521d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0025221:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025225:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002522b:	77 3d                	ja     c002526a <SATA::write(unsigned long long, int, void*)+0x64>
c002522d:	b8 06 00 00 00       	mov    eax,0x6
c0025232:	85 ed                	test   ebp,ebp
c0025234:	74 34                	je     c002526a <SATA::write(unsigned long long, int, void*)+0x64>
c0025236:	c1 e3 09             	shl    ebx,0x9
c0025239:	01 eb                	add    ebx,ebp
c002523b:	89 d6                	mov    esi,edx
c002523d:	89 cf                	mov    edi,ecx
c002523f:	83 c6 01             	add    esi,0x1
c0025242:	83 d7 00             	adc    edi,0x0
c0025245:	50                   	push   eax
c0025246:	50                   	push   eax
c0025247:	6a 01                	push   0x1
c0025249:	55                   	push   ebp
c002524a:	81 c5 00 02 00 00    	add    ebp,0x200
c0025250:	6a 01                	push   0x1
c0025252:	51                   	push   ecx
c0025253:	52                   	push   edx
c0025254:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025258:	e8 f7 fc ff ff       	call   c0024f54 <SATA::access(unsigned long long, int, void*, bool)>
c002525d:	83 c4 20             	add    esp,0x20
c0025260:	89 f2                	mov    edx,esi
c0025262:	89 f9                	mov    ecx,edi
c0025264:	39 dd                	cmp    ebp,ebx
c0025266:	75 d3                	jne    c002523b <SATA::write(unsigned long long, int, void*)+0x35>
c0025268:	31 c0                	xor    eax,eax
c002526a:	83 c4 0c             	add    esp,0xc
c002526d:	5b                   	pop    ebx
c002526e:	5e                   	pop    esi
c002526f:	5f                   	pop    edi
c0025270:	5d                   	pop    ebp
c0025271:	c3                   	ret    

c0025272 <SATAPI::write(unsigned long long, int, void*)>:
c0025272:	b8 03 00 00 00       	mov    eax,0x3
c0025277:	c3                   	ret    

c0025278 <SATAPI::close(int, int, void*)>:
c0025278:	83 ec 0c             	sub    esp,0xc
c002527b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002527f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025285:	85 c0                	test   eax,eax
c0025287:	74 0c                	je     c0025295 <SATAPI::close(int, int, void*)+0x1d>
c0025289:	83 ec 0c             	sub    esp,0xc
c002528c:	8b 10                	mov    edx,DWORD PTR [eax]
c002528e:	50                   	push   eax
c002528f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025292:	83 c4 10             	add    esp,0x10
c0025295:	31 c0                	xor    eax,eax
c0025297:	83 c4 0c             	add    esp,0xc
c002529a:	c3                   	ret    
c002529b:	90                   	nop

c002529c <SATAPI::SATAPI()>:
c002529c:	83 ec 0c             	sub    esp,0xc
c002529f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252a3:	83 ec 04             	sub    esp,0x4
c00252a6:	68 00 08 00 00       	push   0x800
c00252ab:	68 b8 cd 02 c0       	push   0xc002cdb8
c00252b0:	50                   	push   eax
c00252b1:	e8 6a ee fe ff       	call   c0014120 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00252b6:	83 c4 10             	add    esp,0x10
c00252b9:	ba 64 ce 02 c0       	mov    edx,0xc002ce64
c00252be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252c2:	89 10                	mov    DWORD PTR [eax],edx
c00252c4:	90                   	nop
c00252c5:	83 c4 0c             	add    esp,0xc
c00252c8:	c3                   	ret    
c00252c9:	90                   	nop

c00252ca <SATAPI::diskRemoved()>:
c00252ca:	83 ec 18             	sub    esp,0x18
c00252cd:	68 c4 cd 02 c0       	push   0xc002cdc4
c00252d2:	e8 da d5 fe ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c00252d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00252db:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c00252e2:	83 c4 1c             	add    esp,0x1c
c00252e5:	c3                   	ret    

c00252e6 <SATAPI::diskInserted()>:
c00252e6:	53                   	push   ebx
c00252e7:	83 ec 14             	sub    esp,0x14
c00252ea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00252ee:	68 db cd 02 c0       	push   0xc002cddb
c00252f3:	e8 b9 d5 fe ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c00252f8:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c00252ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025302:	e8 81 ee fe ff       	call   c0014188 <PhysicalDisk::startCache()>
c0025307:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002530b:	83 c4 18             	add    esp,0x18
c002530e:	5b                   	pop    ebx
c002530f:	e9 fc 10 ff ff       	jmp    c0016410 <createPartitionsForDisk(PhysicalDisk*)>

c0025314 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025314:	55                   	push   ebp
c0025315:	57                   	push   edi
c0025316:	56                   	push   esi
c0025317:	53                   	push   ebx
c0025318:	83 ec 34             	sub    esp,0x34
c002531b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002531f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025323:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0025327:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002532b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002532f:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0025335:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002533b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002533f:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0025345:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025349:	c1 e0 07             	shl    eax,0x7
c002534c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025350:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025354:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002535e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025362:	8d 58 02             	lea    ebx,[eax+0x2]
c0025365:	c1 e3 07             	shl    ebx,0x7
c0025368:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c002536c:	53                   	push   ebx
c002536d:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0025373:	e8 ee eb ff ff       	call   c0023f66 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025378:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002537c:	83 c4 10             	add    esp,0x10
c002537f:	b8 01 00 00 00       	mov    eax,0x1
c0025384:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025389:	0f 84 85 01 00 00    	je     c0025514 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c002538f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025395:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025397:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002539d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00253a3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00253a7:	c1 e1 05             	shl    ecx,0x5
c00253aa:	01 c8                	add    eax,ecx
c00253ac:	8b 08                	mov    ecx,DWORD PTR [eax]
c00253ae:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00253b4:	81 c9 25 00 01 00    	or     ecx,0x10025
c00253ba:	89 08                	mov    DWORD PTR [eax],ecx
c00253bc:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00253c2:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00253c8:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00253ce:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00253d1:	8d 7b 40             	lea    edi,[ebx+0x40]
c00253d4:	50                   	push   eax
c00253d5:	68 90 00 00 00       	push   0x90
c00253da:	6a 00                	push   0x0
c00253dc:	53                   	push   ebx
c00253dd:	e8 6e b3 fd ff       	call   c0000750 <memset>
c00253e2:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00253e6:	b9 0c 00 00 00       	mov    ecx,0xc
c00253eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00253ed:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c00253f3:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00253f7:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00253fd:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025401:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025405:	48                   	dec    eax
c0025406:	25 ff ff 3f 00       	and    eax,0x3fffff
c002540b:	89 c1                	mov    ecx,eax
c002540d:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025413:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025418:	09 c8                	or     eax,ecx
c002541a:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025420:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025423:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c002542a:	66 25 00 7f          	and    ax,0x7f00
c002542e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0025432:	66 0d 27 80          	or     ax,0x8027
c0025436:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c002543a:	66 89 03             	mov    WORD PTR [ebx],ax
c002543d:	89 d0                	mov    eax,edx
c002543f:	c1 ea 18             	shr    edx,0x18
c0025442:	c1 e8 10             	shr    eax,0x10
c0025445:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025448:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002544b:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002544f:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025452:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025456:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025459:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002545d:	83 c4 10             	add    esp,0x10
c0025460:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025464:	31 c0                	xor    eax,eax
c0025466:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002546a:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0025470:	80 e2 88             	and    dl,0x88
c0025473:	74 0a                	je     c002547f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025475:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002547a:	74 0a                	je     c0025486 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c002547c:	40                   	inc    eax
c002547d:	eb eb                	jmp    c002546a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c002547f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025484:	75 0f                	jne    c0025495 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0025486:	83 ec 0c             	sub    esp,0xc
c0025489:	68 61 cd 02 c0       	push   0xc002cd61
c002548e:	e8 8c 4d ff ff       	call   c001a21f <Krnl::panic(char const*)>
c0025493:	eb 3f                	jmp    c00254d4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0025495:	ba 01 00 00 00       	mov    edx,0x1
c002549a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002549e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00254a2:	d3 e2                	shl    edx,cl
c00254a4:	c1 e0 07             	shl    eax,0x7
c00254a7:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c00254ad:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00254b1:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c00254b7:	85 ca                	test   edx,ecx
c00254b9:	74 23                	je     c00254de <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c00254bb:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c00254c1:	0f ba e1 1e          	bt     ecx,0x1e
c00254c5:	73 ea                	jae    c00254b1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c00254c7:	83 ec 0c             	sub    esp,0xc
c00254ca:	68 f3 cd 02 c0       	push   0xc002cdf3
c00254cf:	e8 dd d3 fe ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c00254d4:	83 c4 10             	add    esp,0x10
c00254d7:	b8 01 00 00 00       	mov    eax,0x1
c00254dc:	eb 36                	jmp    c0025514 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c00254de:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00254e4:	0f ba e0 1e          	bt     eax,0x1e
c00254e8:	73 0a                	jae    c00254f4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c00254ea:	83 ec 0c             	sub    esp,0xc
c00254ed:	68 06 ce 02 c0       	push   0xc002ce06
c00254f2:	eb db                	jmp    c00254cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c00254f4:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c00254f9:	74 17                	je     c0025512 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c00254fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0025500:	74 10                	je     c0025512 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025502:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0025508:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002550c:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0025510:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025512:	31 c0                	xor    eax,eax
c0025514:	83 c4 2c             	add    esp,0x2c
c0025517:	5b                   	pop    ebx
c0025518:	5e                   	pop    esi
c0025519:	5f                   	pop    edi
c002551a:	5d                   	pop    ebp
c002551b:	c3                   	ret    

c002551c <SATAPI::eject()>:
c002551c:	57                   	push   edi
c002551d:	b9 03 00 00 00       	mov    ecx,0x3
c0025522:	53                   	push   ebx
c0025523:	83 ec 14             	sub    esp,0x14
c0025526:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002552a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002552e:	fc                   	cld    
c002552f:	31 c0                	xor    eax,eax
c0025531:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025533:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025538:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002553d:	50                   	push   eax
c002553e:	6a 00                	push   0x0
c0025540:	6a 00                	push   0x0
c0025542:	6a 00                	push   0x0
c0025544:	6a 00                	push   0x0
c0025546:	6a 02                	push   0x2
c0025548:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002554c:	50                   	push   eax
c002554d:	53                   	push   ebx
c002554e:	e8 c1 fd ff ff       	call   c0025314 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025553:	83 c4 14             	add    esp,0x14
c0025556:	53                   	push   ebx
c0025557:	e8 6e fd ff ff       	call   c00252ca <SATAPI::diskRemoved()>
c002555c:	83 c4 24             	add    esp,0x24
c002555f:	31 c0                	xor    eax,eax
c0025561:	5b                   	pop    ebx
c0025562:	5f                   	pop    edi
c0025563:	c3                   	ret    

c0025564 <SATAPI::detectMedia()>:
c0025564:	56                   	push   esi
c0025565:	53                   	push   ebx
c0025566:	83 ec 28             	sub    esp,0x28
c0025569:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002556d:	6a 0c                	push   0xc
c002556f:	6a 00                	push   0x0
c0025571:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025575:	56                   	push   esi
c0025576:	e8 d5 b1 fd ff       	call   c0000750 <memset>
c002557b:	83 c4 0c             	add    esp,0xc
c002557e:	6a 00                	push   0x0
c0025580:	6a 00                	push   0x0
c0025582:	6a 00                	push   0x0
c0025584:	6a 00                	push   0x0
c0025586:	6a 00                	push   0x0
c0025588:	56                   	push   esi
c0025589:	53                   	push   ebx
c002558a:	e8 85 fd ff ff       	call   c0025314 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002558f:	83 c4 1c             	add    esp,0x1c
c0025592:	6a 0c                	push   0xc
c0025594:	6a 00                	push   0x0
c0025596:	56                   	push   esi
c0025597:	e8 b4 b1 fd ff       	call   c0000750 <memset>
c002559c:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00255a1:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00255a6:	83 c4 0c             	add    esp,0xc
c00255a9:	6a 01                	push   0x1
c00255ab:	8d 44 24 16          	lea    eax,[esp+0x16]
c00255af:	50                   	push   eax
c00255b0:	6a 00                	push   0x0
c00255b2:	6a 00                	push   0x0
c00255b4:	6a 12                	push   0x12
c00255b6:	56                   	push   esi
c00255b7:	53                   	push   ebx
c00255b8:	e8 57 fd ff ff       	call   c0025314 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00255bd:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00255c1:	83 c4 20             	add    esp,0x20
c00255c4:	83 e0 7f             	and    eax,0x7f
c00255c7:	3c 70                	cmp    al,0x70
c00255c9:	74 15                	je     c00255e0 <SATAPI::detectMedia()+0x7c>
c00255cb:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00255d2:	75 0c                	jne    c00255e0 <SATAPI::detectMedia()+0x7c>
c00255d4:	83 ec 0c             	sub    esp,0xc
c00255d7:	53                   	push   ebx
c00255d8:	e8 09 fd ff ff       	call   c00252e6 <SATAPI::diskInserted()>
c00255dd:	83 c4 10             	add    esp,0x10
c00255e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00255e4:	83 e0 0f             	and    eax,0xf
c00255e7:	3c 02                	cmp    al,0x2
c00255e9:	75 1b                	jne    c0025606 <SATAPI::detectMedia()+0xa2>
c00255eb:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00255f0:	75 2d                	jne    c002561f <SATAPI::detectMedia()+0xbb>
c00255f2:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00255f9:	74 24                	je     c002561f <SATAPI::detectMedia()+0xbb>
c00255fb:	83 ec 0c             	sub    esp,0xc
c00255fe:	53                   	push   ebx
c00255ff:	e8 c6 fc ff ff       	call   c00252ca <SATAPI::diskRemoved()>
c0025604:	eb 16                	jmp    c002561c <SATAPI::detectMedia()+0xb8>
c0025606:	84 c0                	test   al,al
c0025608:	75 15                	jne    c002561f <SATAPI::detectMedia()+0xbb>
c002560a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025611:	75 0c                	jne    c002561f <SATAPI::detectMedia()+0xbb>
c0025613:	83 ec 0c             	sub    esp,0xc
c0025616:	53                   	push   ebx
c0025617:	e8 ca fc ff ff       	call   c00252e6 <SATAPI::diskInserted()>
c002561c:	83 c4 10             	add    esp,0x10
c002561f:	83 c4 24             	add    esp,0x24
c0025622:	5b                   	pop    ebx
c0025623:	5e                   	pop    esi
c0025624:	c3                   	ret    
c0025625:	90                   	nop

c0025626 <SATAPI::open(int, int, void*)>:
c0025626:	56                   	push   esi
c0025627:	53                   	push   ebx
c0025628:	50                   	push   eax
c0025629:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002562d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025631:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002563b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025641:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002564b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002564f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025659:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002565f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025666:	e8 ea a5 fe ff       	call   c000fc55 <Phys::allocatePage()>
c002566b:	89 c6                	mov    esi,eax
c002566d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025673:	81 c6 00 10 00 00    	add    esi,0x1000
c0025679:	e8 d7 a5 fe ff       	call   c000fc55 <Phys::allocatePage()>
c002567e:	39 c6                	cmp    esi,eax
c0025680:	74 10                	je     c0025692 <SATAPI::open(int, int, void*)+0x6c>
c0025682:	83 ec 0c             	sub    esp,0xc
c0025685:	68 1b ce 02 c0       	push   0xc002ce1b
c002568a:	e8 90 4b ff ff       	call   c001a21f <Krnl::panic(char const*)>
c002568f:	83 c4 10             	add    esp,0x10
c0025692:	83 ec 0c             	sub    esp,0xc
c0025695:	6a 02                	push   0x2
c0025697:	e8 43 be fe ff       	call   c00114df <Virt::allocateKernelVirtualPages(int)>
c002569c:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00256a2:	6a 03                	push   0x3
c00256a4:	50                   	push   eax
c00256a5:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00256ab:	ff 35 70 e5 02 c0    	push   DWORD PTR ds:0xc002e570
c00256b1:	e8 d0 c4 fe ff       	call   c0011b86 <VAS::mapPage(unsigned long, unsigned long, int)>
c00256b6:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00256bd:	83 c4 14             	add    esp,0x14
c00256c0:	53                   	push   ebx
c00256c1:	e8 9e fe ff ff       	call   c0025564 <SATAPI::detectMedia()>
c00256c6:	83 c4 14             	add    esp,0x14
c00256c9:	31 c0                	xor    eax,eax
c00256cb:	5b                   	pop    ebx
c00256cc:	5e                   	pop    esi
c00256cd:	c3                   	ret    

c00256ce <SATAPI::read(unsigned long long, int, void*)>:
c00256ce:	55                   	push   ebp
c00256cf:	57                   	push   edi
c00256d0:	56                   	push   esi
c00256d1:	53                   	push   ebx
c00256d2:	83 ec 1c             	sub    esp,0x1c
c00256d5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00256d9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00256dd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00256e1:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00256e8:	74 19                	je     c0025703 <SATAPI::read(unsigned long long, int, void*)+0x35>
c00256ea:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00256ef:	7e 2e                	jle    c002571f <SATAPI::read(unsigned long long, int, void*)+0x51>
c00256f1:	83 ec 0c             	sub    esp,0xc
c00256f4:	68 31 ce 02 c0       	push   0xc002ce31
c00256f9:	e8 21 4b ff ff       	call   c001a21f <Krnl::panic(char const*)>
c00256fe:	83 c4 10             	add    esp,0x10
c0025701:	eb 1c                	jmp    c002571f <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025703:	83 ec 0c             	sub    esp,0xc
c0025706:	55                   	push   ebp
c0025707:	e8 58 fe ff ff       	call   c0025564 <SATAPI::detectMedia()>
c002570c:	83 c4 10             	add    esp,0x10
c002570f:	b8 02 00 00 00       	mov    eax,0x2
c0025714:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002571b:	75 cd                	jne    c00256ea <SATAPI::read(unsigned long long, int, void*)+0x1c>
c002571d:	eb 49                	jmp    c0025768 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c002571f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025723:	b9 03 00 00 00       	mov    ecx,0x3
c0025728:	fc                   	cld    
c0025729:	31 c0                	xor    eax,eax
c002572b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002572d:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025732:	89 d8                	mov    eax,ebx
c0025734:	86 e0                	xchg   al,ah
c0025736:	c1 c0 10             	rol    eax,0x10
c0025739:	86 e0                	xchg   al,ah
c002573b:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c002573f:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025743:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025747:	50                   	push   eax
c0025748:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002574c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025750:	56                   	push   esi
c0025751:	53                   	push   ebx
c0025752:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025756:	c1 e0 0b             	shl    eax,0xb
c0025759:	50                   	push   eax
c002575a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002575e:	50                   	push   eax
c002575f:	55                   	push   ebp
c0025760:	e8 af fb ff ff       	call   c0025314 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025765:	83 c4 20             	add    esp,0x20
c0025768:	83 c4 1c             	add    esp,0x1c
c002576b:	5b                   	pop    ebx
c002576c:	5e                   	pop    esi
c002576d:	5f                   	pop    edi
c002576e:	5d                   	pop    ebp
c002576f:	c3                   	ret    

c0025770 <AVX::open(int, int, void*)>:
c0025770:	83 ec 0c             	sub    esp,0xc
c0025773:	e8 40 11 00 00       	call   c00268b8 <avxInit>
c0025778:	b8 00 00 00 00       	mov    eax,0x0
c002577d:	83 c4 0c             	add    esp,0xc
c0025780:	c3                   	ret    
c0025781:	90                   	nop

c0025782 <AVX::close(int, int, void*)>:
c0025782:	83 ec 0c             	sub    esp,0xc
c0025785:	e8 2f 11 00 00       	call   c00268b9 <avxClose>
c002578a:	b8 00 00 00 00       	mov    eax,0x0
c002578f:	83 c4 0c             	add    esp,0xc
c0025792:	c3                   	ret    
c0025793:	90                   	nop

c0025794 <AVX::available()>:
c0025794:	83 ec 0c             	sub    esp,0xc
c0025797:	e8 14 11 00 00       	call   c00268b0 <avxDetect>
c002579c:	85 c0                	test   eax,eax
c002579e:	0f 95 c0             	setne  al
c00257a1:	83 c4 0c             	add    esp,0xc
c00257a4:	c3                   	ret    
c00257a5:	90                   	nop

c00257a6 <AVX::save(void*)>:
c00257a6:	83 ec 0c             	sub    esp,0xc
c00257a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00257ad:	83 ec 0c             	sub    esp,0xc
c00257b0:	50                   	push   eax
c00257b1:	e8 00 11 00 00       	call   c00268b6 <avxSave>
c00257b6:	83 c4 10             	add    esp,0x10
c00257b9:	90                   	nop
c00257ba:	83 c4 0c             	add    esp,0xc
c00257bd:	c3                   	ret    

c00257be <AVX::load(void*)>:
c00257be:	83 ec 0c             	sub    esp,0xc
c00257c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00257c5:	83 ec 0c             	sub    esp,0xc
c00257c8:	50                   	push   eax
c00257c9:	e8 e9 10 00 00       	call   c00268b7 <avxLoad>
c00257ce:	83 c4 10             	add    esp,0x10
c00257d1:	90                   	nop
c00257d2:	83 c4 0c             	add    esp,0xc
c00257d5:	c3                   	ret    

c00257d6 <AVX::AVX()>:
c00257d6:	83 ec 0c             	sub    esp,0xc
c00257d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257dd:	83 ec 08             	sub    esp,0x8
c00257e0:	68 94 ce 02 c0       	push   0xc002ce94
c00257e5:	50                   	push   eax
c00257e6:	e8 13 ea fe ff       	call   c00141fe <FPU::FPU(char const*)>
c00257eb:	83 c4 10             	add    esp,0x10
c00257ee:	ba a4 ce 02 c0       	mov    edx,0xc002cea4
c00257f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257f7:	89 10                	mov    DWORD PTR [eax],edx
c00257f9:	90                   	nop
c00257fa:	83 c4 0c             	add    esp,0xc
c00257fd:	c3                   	ret    

c00257fe <MMX::available()>:
c00257fe:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0025803:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025809:	83 e0 20             	and    eax,0x20
c002580c:	84 c0                	test   al,al
c002580e:	0f 95 c0             	setne  al
c0025811:	c3                   	ret    

c0025812 <MMX::open(int, int, void*)>:
c0025812:	83 ec 0c             	sub    esp,0xc
c0025815:	e8 28 11 00 00       	call   c0026942 <x87Init>
c002581a:	b8 00 00 00 00       	mov    eax,0x0
c002581f:	83 c4 0c             	add    esp,0xc
c0025822:	c3                   	ret    
c0025823:	90                   	nop

c0025824 <MMX::close(int, int, void*)>:
c0025824:	83 ec 0c             	sub    esp,0xc
c0025827:	e8 30 11 00 00       	call   c002695c <x87Close>
c002582c:	b8 00 00 00 00       	mov    eax,0x0
c0025831:	83 c4 0c             	add    esp,0xc
c0025834:	c3                   	ret    
c0025835:	90                   	nop

c0025836 <MMX::save(void*)>:
c0025836:	83 ec 0c             	sub    esp,0xc
c0025839:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002583d:	83 ec 0c             	sub    esp,0xc
c0025840:	50                   	push   eax
c0025841:	e8 eb 10 00 00       	call   c0026931 <x87Save>
c0025846:	83 c4 10             	add    esp,0x10
c0025849:	90                   	nop
c002584a:	83 c4 0c             	add    esp,0xc
c002584d:	c3                   	ret    

c002584e <MMX::load(void*)>:
c002584e:	83 ec 0c             	sub    esp,0xc
c0025851:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025855:	83 ec 0c             	sub    esp,0xc
c0025858:	50                   	push   eax
c0025859:	e8 dc 10 00 00       	call   c002693a <x87Load>
c002585e:	83 c4 10             	add    esp,0x10
c0025861:	90                   	nop
c0025862:	83 c4 0c             	add    esp,0xc
c0025865:	c3                   	ret    

c0025866 <MMX::MMX()>:
c0025866:	83 ec 0c             	sub    esp,0xc
c0025869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002586d:	83 ec 08             	sub    esp,0x8
c0025870:	68 d4 ce 02 c0       	push   0xc002ced4
c0025875:	50                   	push   eax
c0025876:	e8 83 e9 fe ff       	call   c00141fe <FPU::FPU(char const*)>
c002587b:	83 c4 10             	add    esp,0x10
c002587e:	ba e4 ce 02 c0       	mov    edx,0xc002cee4
c0025883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025887:	89 10                	mov    DWORD PTR [eax],edx
c0025889:	90                   	nop
c002588a:	83 c4 0c             	add    esp,0xc
c002588d:	c3                   	ret    

c002588e <SSE::open(int, int, void*)>:
c002588e:	83 ec 0c             	sub    esp,0xc
c0025891:	e8 5e 10 00 00       	call   c00268f4 <sseInit>
c0025896:	b8 00 00 00 00       	mov    eax,0x0
c002589b:	83 c4 0c             	add    esp,0xc
c002589e:	c3                   	ret    
c002589f:	90                   	nop

c00258a0 <SSE::close(int, int, void*)>:
c00258a0:	83 ec 0c             	sub    esp,0xc
c00258a3:	e8 5c 10 00 00       	call   c0026904 <sseClose>
c00258a8:	b8 00 00 00 00       	mov    eax,0x0
c00258ad:	83 c4 0c             	add    esp,0xc
c00258b0:	c3                   	ret    
c00258b1:	90                   	nop

c00258b2 <SSE::available()>:
c00258b2:	83 ec 1c             	sub    esp,0x1c
c00258b5:	e8 16 10 00 00       	call   c00268d0 <absolutelyNoChanceInHell>
c00258ba:	85 c0                	test   eax,eax
c00258bc:	0f 95 c0             	setne  al
c00258bf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00258c3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00258c7:	83 c4 1c             	add    esp,0x1c
c00258ca:	c3                   	ret    
c00258cb:	90                   	nop

c00258cc <SSE::save(void*)>:
c00258cc:	83 ec 0c             	sub    esp,0xc
c00258cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00258d3:	83 ec 0c             	sub    esp,0xc
c00258d6:	50                   	push   eax
c00258d7:	e8 0c 10 00 00       	call   c00268e8 <sseSave>
c00258dc:	83 c4 10             	add    esp,0x10
c00258df:	90                   	nop
c00258e0:	83 c4 0c             	add    esp,0xc
c00258e3:	c3                   	ret    

c00258e4 <SSE::load(void*)>:
c00258e4:	83 ec 0c             	sub    esp,0xc
c00258e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00258eb:	83 ec 0c             	sub    esp,0xc
c00258ee:	50                   	push   eax
c00258ef:	e8 fa 0f 00 00       	call   c00268ee <sseLoad>
c00258f4:	83 c4 10             	add    esp,0x10
c00258f7:	90                   	nop
c00258f8:	83 c4 0c             	add    esp,0xc
c00258fb:	c3                   	ret    

c00258fc <SSE::SSE()>:
c00258fc:	83 ec 0c             	sub    esp,0xc
c00258ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025903:	83 ec 08             	sub    esp,0x8
c0025906:	68 14 cf 02 c0       	push   0xc002cf14
c002590b:	50                   	push   eax
c002590c:	e8 ed e8 fe ff       	call   c00141fe <FPU::FPU(char const*)>
c0025911:	83 c4 10             	add    esp,0x10
c0025914:	ba 24 cf 02 c0       	mov    edx,0xc002cf24
c0025919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002591d:	89 10                	mov    DWORD PTR [eax],edx
c002591f:	90                   	nop
c0025920:	83 c4 0c             	add    esp,0xc
c0025923:	c3                   	ret    

c0025924 <x87::open(int, int, void*)>:
c0025924:	83 ec 0c             	sub    esp,0xc
c0025927:	e8 16 10 00 00       	call   c0026942 <x87Init>
c002592c:	b8 00 00 00 00       	mov    eax,0x0
c0025931:	83 c4 0c             	add    esp,0xc
c0025934:	c3                   	ret    
c0025935:	90                   	nop

c0025936 <x87::close(int, int, void*)>:
c0025936:	83 ec 0c             	sub    esp,0xc
c0025939:	e8 1e 10 00 00       	call   c002695c <x87Close>
c002593e:	b8 00 00 00 00       	mov    eax,0x0
c0025943:	83 c4 0c             	add    esp,0xc
c0025946:	c3                   	ret    
c0025947:	90                   	nop

c0025948 <x87::available()>:
c0025948:	83 ec 0c             	sub    esp,0xc
c002594b:	e8 c6 0f 00 00       	call   c0026916 <x87Detect>
c0025950:	85 c0                	test   eax,eax
c0025952:	0f 95 c0             	setne  al
c0025955:	83 c4 0c             	add    esp,0xc
c0025958:	c3                   	ret    
c0025959:	90                   	nop

c002595a <x87::save(void*)>:
c002595a:	83 ec 0c             	sub    esp,0xc
c002595d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025961:	83 ec 0c             	sub    esp,0xc
c0025964:	50                   	push   eax
c0025965:	e8 c7 0f 00 00       	call   c0026931 <x87Save>
c002596a:	83 c4 10             	add    esp,0x10
c002596d:	90                   	nop
c002596e:	83 c4 0c             	add    esp,0xc
c0025971:	c3                   	ret    

c0025972 <x87::load(void*)>:
c0025972:	83 ec 0c             	sub    esp,0xc
c0025975:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025979:	83 ec 0c             	sub    esp,0xc
c002597c:	50                   	push   eax
c002597d:	e8 b8 0f 00 00       	call   c002693a <x87Load>
c0025982:	83 c4 10             	add    esp,0x10
c0025985:	90                   	nop
c0025986:	83 c4 0c             	add    esp,0xc
c0025989:	c3                   	ret    

c002598a <x87::x87()>:
c002598a:	83 ec 0c             	sub    esp,0xc
c002598d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025991:	83 ec 08             	sub    esp,0x8
c0025994:	68 54 cf 02 c0       	push   0xc002cf54
c0025999:	50                   	push   eax
c002599a:	e8 5f e8 fe ff       	call   c00141fe <FPU::FPU(char const*)>
c002599f:	83 c4 10             	add    esp,0x10
c00259a2:	ba 64 cf 02 c0       	mov    edx,0xc002cf64
c00259a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259ab:	89 10                	mov    DWORD PTR [eax],edx
c00259ad:	90                   	nop
c00259ae:	83 c4 0c             	add    esp,0xc
c00259b1:	c3                   	ret    

c00259b2 <APIC::disable()>:
c00259b2:	90                   	nop
c00259b3:	c3                   	ret    

c00259b4 <APIC::close(int, int, void*)>:
c00259b4:	55                   	push   ebp
c00259b5:	89 e5                	mov    ebp,esp
c00259b7:	83 ec 08             	sub    esp,0x8
c00259ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00259bf:	83 c0 3c             	add    eax,0x3c
c00259c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00259c4:	83 ec 0c             	sub    esp,0xc
c00259c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259ca:	ff d0                	call   eax
c00259cc:	83 c4 10             	add    esp,0x10
c00259cf:	b8 00 00 00 00       	mov    eax,0x0
c00259d4:	c9                   	leave  
c00259d5:	c3                   	ret    

c00259d6 <IOAPIC::close(int, int, void*)>:
c00259d6:	b8 00 00 00 00       	mov    eax,0x0
c00259db:	c3                   	ret    

c00259dc <APIC::io_wait()>:
c00259dc:	eb 00                	jmp    c00259de <APIC::io_wait()+0x2>
c00259de:	eb 00                	jmp    c00259e0 <APIC::io_wait()+0x4>
c00259e0:	90                   	nop
c00259e1:	c3                   	ret    

c00259e2 <APIC::getBase()>:
c00259e2:	55                   	push   ebp
c00259e3:	89 e5                	mov    ebp,esp
c00259e5:	83 ec 18             	sub    esp,0x18
c00259e8:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00259ed:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00259f3:	83 e0 08             	and    eax,0x8
c00259f6:	84 c0                	test   al,al
c00259f8:	75 07                	jne    c0025a01 <APIC::getBase()+0x1f>
c00259fa:	b8 00 00 00 00       	mov    eax,0x0
c00259ff:	eb 21                	jmp    c0025a22 <APIC::getBase()+0x40>
c0025a01:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0025a06:	83 ec 08             	sub    esp,0x8
c0025a09:	6a 1b                	push   0x1b
c0025a0b:	50                   	push   eax
c0025a0c:	e8 71 93 fe ff       	call   c000ed82 <Computer::rdmsr(unsigned int)>
c0025a11:	83 c4 10             	add    esp,0x10
c0025a14:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025a17:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025a1a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025a1d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025a22:	c9                   	leave  
c0025a23:	c3                   	ret    

c0025a24 <APIC::eoi(unsigned char)>:
c0025a24:	55                   	push   ebp
c0025a25:	89 e5                	mov    ebp,esp
c0025a27:	83 ec 28             	sub    esp,0x28
c0025a2a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a2d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025a30:	83 ec 0c             	sub    esp,0xc
c0025a33:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a36:	e8 a7 ff ff ff       	call   c00259e2 <APIC::getBase()>
c0025a3b:	83 c4 10             	add    esp,0x10
c0025a3e:	05 b0 00 00 00       	add    eax,0xb0
c0025a43:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025a46:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025a49:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025a4f:	90                   	nop
c0025a50:	c9                   	leave  
c0025a51:	c3                   	ret    

c0025a52 <APIC::open(int, int, void*)>:
c0025a52:	55                   	push   ebp
c0025a53:	89 e5                	mov    ebp,esp
c0025a55:	57                   	push   edi
c0025a56:	56                   	push   esi
c0025a57:	53                   	push   ebx
c0025a58:	83 ec 2c             	sub    esp,0x2c
c0025a5b:	83 ec 0c             	sub    esp,0xc
c0025a5e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a61:	e8 7c ff ff ff       	call   c00259e2 <APIC::getBase()>
c0025a66:	83 c4 10             	add    esp,0x10
c0025a69:	89 c2                	mov    edx,eax
c0025a6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a6e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025a74:	0f b6 f8             	movzx  edi,al
c0025a77:	89 d0                	mov    eax,edx
c0025a79:	ba 00 00 00 00       	mov    edx,0x0
c0025a7e:	89 c1                	mov    ecx,eax
c0025a80:	80 e5 ff             	and    ch,0xff
c0025a83:	89 cb                	mov    ebx,ecx
c0025a85:	0f b6 f2             	movzx  esi,dl
c0025a88:	89 d8                	mov    eax,ebx
c0025a8a:	89 f2                	mov    edx,esi
c0025a8c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025a8f:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025a92:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025a96:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025a9a:	83 e0 00             	and    eax,0x0
c0025a9d:	09 d0                	or     eax,edx
c0025a9f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025aa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aa6:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025aac:	8d 50 01             	lea    edx,[eax+0x1]
c0025aaf:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025ab2:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025ab8:	0f b6 d0             	movzx  edx,al
c0025abb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025abe:	83 c2 08             	add    edx,0x8
c0025ac1:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025ac5:	0f b6 c9             	movzx  ecx,cl
c0025ac8:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025ace:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025ad2:	83 ec 0c             	sub    esp,0xc
c0025ad5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ad8:	e8 05 ff ff ff       	call   c00259e2 <APIC::getBase()>
c0025add:	83 c4 10             	add    esp,0x10
c0025ae0:	05 f0 00 00 00       	add    eax,0xf0
c0025ae5:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025ae8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025aeb:	8b 00                	mov    eax,DWORD PTR [eax]
c0025aed:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025af0:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025af7:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025afe:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025b01:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025b04:	89 10                	mov    DWORD PTR [eax],edx
c0025b06:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025b0d:	a1 b0 ec 02 c0       	mov    eax,ds:0xc002ecb0
c0025b12:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025b15:	7d 7c                	jge    c0025b93 <APIC::open(int, int, void*)+0x141>
c0025b17:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025b1a:	8b 04 85 c0 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1340]
c0025b21:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025b24:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025b27:	8b 04 85 c0 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1340]
c0025b2e:	c1 e8 08             	shr    eax,0x8
c0025b31:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025b35:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025b38:	8b 04 85 c0 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1340]
c0025b3f:	c1 e8 18             	shr    eax,0x18
c0025b42:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025b45:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025b49:	75 40                	jne    c0025b8b <APIC::open(int, int, void*)+0x139>
c0025b4b:	83 ec 0c             	sub    esp,0xc
c0025b4e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b51:	e8 8c fe ff ff       	call   c00259e2 <APIC::getBase()>
c0025b56:	83 c4 10             	add    esp,0x10
c0025b59:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025b5d:	75 07                	jne    c0025b66 <APIC::open(int, int, void*)+0x114>
c0025b5f:	ba 60 03 00 00       	mov    edx,0x360
c0025b64:	eb 05                	jmp    c0025b6b <APIC::open(int, int, void*)+0x119>
c0025b66:	ba 50 03 00 00       	mov    edx,0x350
c0025b6b:	01 d0                	add    eax,edx
c0025b6d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025b70:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025b73:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b75:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025b78:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025b7f:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025b83:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025b86:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025b89:	89 10                	mov    DWORD PTR [eax],edx
c0025b8b:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025b8e:	e9 7a ff ff ff       	jmp    c0025b0d <APIC::open(int, int, void*)+0xbb>
c0025b93:	b8 00 00 00 00       	mov    eax,0x0
c0025b98:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025b9b:	5b                   	pop    ebx
c0025b9c:	5e                   	pop    esi
c0025b9d:	5f                   	pop    edi
c0025b9e:	5d                   	pop    ebp
c0025b9f:	c3                   	ret    

c0025ba0 <IOAPIC::IOAPIC()>:
c0025ba0:	83 ec 0c             	sub    esp,0xc
c0025ba3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ba7:	83 ec 08             	sub    esp,0x8
c0025baa:	68 94 cf 02 c0       	push   0xc002cf94
c0025baf:	50                   	push   eax
c0025bb0:	e8 39 e3 fe ff       	call   c0013eee <Device::Device(char const*)>
c0025bb5:	83 c4 10             	add    esp,0x10
c0025bb8:	ba bc d0 02 c0       	mov    edx,0xc002d0bc
c0025bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bc1:	89 10                	mov    DWORD PTR [eax],edx
c0025bc3:	90                   	nop
c0025bc4:	83 c4 0c             	add    esp,0xc
c0025bc7:	c3                   	ret    

c0025bc8 <APIC::APIC()>:
c0025bc8:	53                   	push   ebx
c0025bc9:	83 ec 18             	sub    esp,0x18
c0025bcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025bd0:	83 ec 08             	sub    esp,0x8
c0025bd3:	68 9c cf 02 c0       	push   0xc002cf9c
c0025bd8:	50                   	push   eax
c0025bd9:	e8 7a ea fe ff       	call   c0014658 <InterruptController::InterruptController(char const*)>
c0025bde:	83 c4 10             	add    esp,0x10
c0025be1:	ba 74 d0 02 c0       	mov    edx,0xc002d074
c0025be6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025bea:	89 10                	mov    DWORD PTR [eax],edx
c0025bec:	a0 80 07 03 c0       	mov    al,ds:0xc0030780
c0025bf1:	83 f0 01             	xor    eax,0x1
c0025bf4:	84 c0                	test   al,al
c0025bf6:	0f 84 a1 00 00 00    	je     c0025c9d <APIC::APIC()+0xd5>
c0025bfc:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025c01:	a0 60 ed 02 c0       	mov    al,ds:0xc002ed60
c0025c06:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025c0a:	0f 83 86 00 00 00    	jae    c0025c96 <APIC::APIC()+0xce>
c0025c10:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025c18:	83 ec 0c             	sub    esp,0xc
c0025c1b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025c1f:	e8 35 9c fe ff       	call   c000f859 <malloc>
c0025c24:	83 c4 10             	add    esp,0x10
c0025c27:	89 c3                	mov    ebx,eax
c0025c29:	83 ec 0c             	sub    esp,0xc
c0025c2c:	53                   	push   ebx
c0025c2d:	e8 6e ff ff ff       	call   c0025ba0 <IOAPIC::IOAPIC()>
c0025c32:	83 c4 10             	add    esp,0x10
c0025c35:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025c39:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025c3e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025c42:	89 14 85 60 07 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf8a0],edx
c0025c49:	a1 40 07 03 c0       	mov    eax,ds:0xc0030740
c0025c4e:	40                   	inc    eax
c0025c4f:	a3 40 07 03 c0       	mov    ds:0xc0030740,eax
c0025c54:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0025c59:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025c5f:	83 ec 08             	sub    esp,0x8
c0025c62:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025c66:	50                   	push   eax
c0025c67:	e8 7e e0 fe ff       	call   c0013cea <Device::addChild(Device*)>
c0025c6c:	83 c4 10             	add    esp,0x10
c0025c6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025c73:	8b 00                	mov    eax,DWORD PTR [eax]
c0025c75:	83 c0 08             	add    eax,0x8
c0025c78:	8b 00                	mov    eax,DWORD PTR [eax]
c0025c7a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025c7f:	6a 00                	push   0x0
c0025c81:	6a 00                	push   0x0
c0025c83:	52                   	push   edx
c0025c84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025c88:	ff d0                	call   eax
c0025c8a:	83 c4 10             	add    esp,0x10
c0025c8d:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025c91:	e9 6b ff ff ff       	jmp    c0025c01 <APIC::APIC()+0x39>
c0025c96:	c6 05 80 07 03 c0 01 	mov    BYTE PTR ds:0xc0030780,0x1
c0025c9d:	90                   	nop
c0025c9e:	83 c4 18             	add    esp,0x18
c0025ca1:	5b                   	pop    ebx
c0025ca2:	c3                   	ret    
c0025ca3:	90                   	nop

c0025ca4 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025ca4:	55                   	push   ebp
c0025ca5:	89 e5                	mov    ebp,esp
c0025ca7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025caa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025cb0:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025cb3:	72 1d                	jb     c0025cd2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025cb8:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025cbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025cc1:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025cc7:	01 d0                	add    eax,edx
c0025cc9:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025ccc:	73 04                	jae    c0025cd2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025cce:	b0 01                	mov    al,0x1
c0025cd0:	eb 02                	jmp    c0025cd4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025cd2:	b0 00                	mov    al,0x0
c0025cd4:	5d                   	pop    ebp
c0025cd5:	c3                   	ret    

c0025cd6 <IOAPIC::read(int)>:
c0025cd6:	55                   	push   ebp
c0025cd7:	89 e5                	mov    ebp,esp
c0025cd9:	83 ec 10             	sub    esp,0x10
c0025cdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025cdf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025ce5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025ce8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ceb:	0f b6 d0             	movzx  edx,al
c0025cee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025cf1:	89 10                	mov    DWORD PTR [eax],edx
c0025cf3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025cf6:	83 c0 10             	add    eax,0x10
c0025cf9:	8b 00                	mov    eax,DWORD PTR [eax]
c0025cfb:	c9                   	leave  
c0025cfc:	c3                   	ret    
c0025cfd:	90                   	nop

c0025cfe <IOAPIC::open(int, int, void*)>:
c0025cfe:	55                   	push   ebp
c0025cff:	89 e5                	mov    ebp,esp
c0025d01:	57                   	push   edi
c0025d02:	56                   	push   esi
c0025d03:	53                   	push   ebx
c0025d04:	83 ec 0c             	sub    esp,0xc
c0025d07:	83 ec 0c             	sub    esp,0xc
c0025d0a:	68 c7 cf 02 c0       	push   0xc002cfc7
c0025d0f:	e8 9d cb fe ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0025d14:	83 c4 10             	add    esp,0x10
c0025d17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d1a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d1d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025d23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d26:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025d2c:	8b 14 85 a0 ed 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1260]
c0025d33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d36:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025d3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d3f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025d45:	8b 14 85 20 ee 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd11e0]
c0025d4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d4f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025d55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d58:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025d5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d61:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025d67:	0f b6 f8             	movzx  edi,al
c0025d6a:	89 d0                	mov    eax,edx
c0025d6c:	ba 00 00 00 00       	mov    edx,0x0
c0025d71:	89 c1                	mov    ecx,eax
c0025d73:	80 e5 ff             	and    ch,0xff
c0025d76:	89 cb                	mov    ebx,ecx
c0025d78:	0f b6 f2             	movzx  esi,dl
c0025d7b:	89 d8                	mov    eax,ebx
c0025d7d:	89 f2                	mov    edx,esi
c0025d7f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025d82:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025d85:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025d89:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025d8d:	83 e0 00             	and    eax,0x0
c0025d90:	09 d0                	or     eax,edx
c0025d92:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025d96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d99:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025d9f:	8d 50 01             	lea    edx,[eax+0x1]
c0025da2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025da5:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025dab:	0f b6 d0             	movzx  edx,al
c0025dae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025db1:	83 c2 08             	add    edx,0x8
c0025db4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025db8:	0f b6 c9             	movzx  ecx,cl
c0025dbb:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025dc1:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025dc5:	83 ec 08             	sub    esp,0x8
c0025dc8:	6a 01                	push   0x1
c0025dca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025dcd:	e8 04 ff ff ff       	call   c0025cd6 <IOAPIC::read(int)>
c0025dd2:	83 c4 10             	add    esp,0x10
c0025dd5:	c1 f8 10             	sar    eax,0x10
c0025dd8:	0f b6 c0             	movzx  eax,al
c0025ddb:	8d 50 01             	lea    edx,[eax+0x1]
c0025dde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025de1:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025de7:	b8 00 00 00 00       	mov    eax,0x0
c0025dec:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025def:	5b                   	pop    ebx
c0025df0:	5e                   	pop    esi
c0025df1:	5f                   	pop    edi
c0025df2:	5d                   	pop    ebp
c0025df3:	c3                   	ret    

c0025df4 <IOAPIC::write(int, int)>:
c0025df4:	55                   	push   ebp
c0025df5:	89 e5                	mov    ebp,esp
c0025df7:	83 ec 10             	sub    esp,0x10
c0025dfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025dfd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025e03:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025e06:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e09:	0f b6 d0             	movzx  edx,al
c0025e0c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025e0f:	89 10                	mov    DWORD PTR [eax],edx
c0025e11:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025e14:	8d 50 10             	lea    edx,[eax+0x10]
c0025e17:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025e1a:	89 02                	mov    DWORD PTR [edx],eax
c0025e1c:	90                   	nop
c0025e1d:	c9                   	leave  
c0025e1e:	c3                   	ret    
c0025e1f:	90                   	nop

c0025e20 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025e20:	55                   	push   ebp
c0025e21:	89 e5                	mov    ebp,esp
c0025e23:	53                   	push   ebx
c0025e24:	83 ec 2c             	sub    esp,0x2c
c0025e27:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e2a:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025e2d:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025e30:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025e33:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025e36:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025e39:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025e3c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025e3f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025e42:	88 d8                	mov    al,bl
c0025e44:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025e47:	88 c8                	mov    al,cl
c0025e49:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025e4c:	88 d0                	mov    al,dl
c0025e4e:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025e51:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025e55:	83 c0 08             	add    eax,0x8
c0025e58:	01 c0                	add    eax,eax
c0025e5a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025e5d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025e61:	83 c0 08             	add    eax,0x8
c0025e64:	01 c0                	add    eax,eax
c0025e66:	40                   	inc    eax
c0025e67:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025e6a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025e6d:	50                   	push   eax
c0025e6e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e71:	e8 60 fe ff ff       	call   c0025cd6 <IOAPIC::read(int)>
c0025e76:	83 c4 08             	add    esp,0x8
c0025e79:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025e7c:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025e83:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025e86:	c1 e0 18             	shl    eax,0x18
c0025e89:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025e8c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025e8f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025e92:	52                   	push   edx
c0025e93:	50                   	push   eax
c0025e94:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e97:	e8 58 ff ff ff       	call   c0025df4 <IOAPIC::write(int, int)>
c0025e9c:	83 c4 0c             	add    esp,0xc
c0025e9f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025ea2:	50                   	push   eax
c0025ea3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ea6:	e8 2b fe ff ff       	call   c0025cd6 <IOAPIC::read(int)>
c0025eab:	83 c4 08             	add    esp,0x8
c0025eae:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025eb1:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025eb8:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025ebf:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025ec6:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025eca:	74 09                	je     c0025ed5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025ecc:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025ed3:	eb 07                	jmp    c0025edc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025ed5:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025edc:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025ee0:	74 09                	je     c0025eeb <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025ee2:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025ee9:	eb 07                	jmp    c0025ef2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025eeb:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025ef2:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025ef9:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025efd:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025f00:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025f03:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025f06:	52                   	push   edx
c0025f07:	50                   	push   eax
c0025f08:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f0b:	e8 e4 fe ff ff       	call   c0025df4 <IOAPIC::write(int, int)>
c0025f10:	83 c4 0c             	add    esp,0xc
c0025f13:	90                   	nop
c0025f14:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025f17:	c9                   	leave  
c0025f18:	c3                   	ret    
c0025f19:	90                   	nop

c0025f1a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025f1a:	55                   	push   ebp
c0025f1b:	89 e5                	mov    ebp,esp
c0025f1d:	57                   	push   edi
c0025f1e:	56                   	push   esi
c0025f1f:	53                   	push   ebx
c0025f20:	83 ec 2c             	sub    esp,0x2c
c0025f23:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025f26:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025f29:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025f2d:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025f31:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025f35:	74 5a                	je     c0025f91 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025f37:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025f3b:	7f 44                	jg     c0025f81 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025f3d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f40:	05 60 d6 02 c0       	add    eax,0xc002d660
c0025f45:	8a 00                	mov    al,BYTE PTR [eax]
c0025f47:	0f b6 c0             	movzx  eax,al
c0025f4a:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025f4d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f50:	66 8b 84 00 40 ed 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd12c0]
c0025f58:	0f b7 c0             	movzx  eax,ax
c0025f5b:	83 e0 02             	and    eax,0x2
c0025f5e:	85 c0                	test   eax,eax
c0025f60:	74 04                	je     c0025f66 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025f62:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025f66:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f69:	66 8b 84 00 40 ed 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd12c0]
c0025f71:	0f b7 c0             	movzx  eax,ax
c0025f74:	83 e0 08             	and    eax,0x8
c0025f77:	85 c0                	test   eax,eax
c0025f79:	74 16                	je     c0025f91 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025f7b:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025f7f:	eb 10                	jmp    c0025f91 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025f81:	83 ec 0c             	sub    esp,0xc
c0025f84:	68 d8 cf 02 c0       	push   0xc002cfd8
c0025f89:	e8 91 42 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c0025f8e:	83 c4 10             	add    esp,0x10
c0025f91:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025f95:	a1 40 07 03 c0       	mov    eax,ds:0xc0030740
c0025f9a:	83 ec 08             	sub    esp,0x8
c0025f9d:	50                   	push   eax
c0025f9e:	68 10 d0 02 c0       	push   0xc002d010
c0025fa3:	e8 09 c9 fe ff       	call   c00128b1 <Dbg::kprintf(char const*, ...)>
c0025fa8:	83 c4 10             	add    esp,0x10
c0025fab:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025fb2:	a1 40 07 03 c0       	mov    eax,ds:0xc0030740
c0025fb7:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025fba:	7d 67                	jge    c0026023 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025fbc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025fbf:	8b 04 85 60 07 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf8a0]
c0025fc6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025fc9:	83 ec 08             	sub    esp,0x8
c0025fcc:	52                   	push   edx
c0025fcd:	50                   	push   eax
c0025fce:	e8 d1 fc ff ff       	call   c0025ca4 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025fd3:	83 c4 10             	add    esp,0x10
c0025fd6:	84 c0                	test   al,al
c0025fd8:	74 44                	je     c002601e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025fda:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025fdd:	8b 1c 85 60 07 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcf8a0]
c0025fe4:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025fe8:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025feb:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025fef:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ff2:	83 c0 20             	add    eax,0x20
c0025ff5:	0f b6 f0             	movzx  esi,al
c0025ff8:	b8 00 00 00 00       	mov    eax,0x0
c0025ffd:	99                   	cdq    
c0025ffe:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026001:	0f b6 c9             	movzx  ecx,cl
c0026004:	83 ec 04             	sub    esp,0x4
c0026007:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002600a:	57                   	push   edi
c002600b:	56                   	push   esi
c002600c:	52                   	push   edx
c002600d:	50                   	push   eax
c002600e:	51                   	push   ecx
c002600f:	53                   	push   ebx
c0026010:	e8 0b fe ff ff       	call   c0025e20 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0026015:	83 c4 20             	add    esp,0x20
c0026018:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c002601c:	eb 05                	jmp    c0026023 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002601e:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0026021:	eb 8f                	jmp    c0025fb2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0026023:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0026026:	83 f0 01             	xor    eax,0x1
c0026029:	84 c0                	test   al,al
c002602b:	74 10                	je     c002603d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002602d:	83 ec 0c             	sub    esp,0xc
c0026030:	68 27 d0 02 c0       	push   0xc002d027
c0026035:	e8 e5 41 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c002603a:	83 c4 10             	add    esp,0x10
c002603d:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0026041:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0026048:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002604c:	7f 65                	jg     c00260b3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c002604e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026051:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026054:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002605b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002605e:	01 ca                	add    edx,ecx
c0026060:	83 c2 54             	add    edx,0x54
c0026063:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0026067:	85 c0                	test   eax,eax
c0026069:	75 43                	jne    c00260ae <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c002606b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002606e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026071:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026078:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002607b:	01 ca                	add    edx,ecx
c002607d:	8d 4a 54             	lea    ecx,[edx+0x54]
c0026080:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0026083:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026087:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002608a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002608d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026094:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026097:	01 ca                	add    edx,ecx
c0026099:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c002609f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00260a2:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00260a6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00260a9:	83 e8 20             	sub    eax,0x20
c00260ac:	eb 1a                	jmp    c00260c8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00260ae:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00260b1:	eb 95                	jmp    c0026048 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00260b3:	83 ec 0c             	sub    esp,0xc
c00260b6:	68 34 d0 02 c0       	push   0xc002d034
c00260bb:	e8 5f 41 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c00260c0:	83 c4 10             	add    esp,0x10
c00260c3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00260c8:	8d 65 f4             	lea    esp,[ebp-0xc]
c00260cb:	5b                   	pop    ebx
c00260cc:	5e                   	pop    esi
c00260cd:	5f                   	pop    edi
c00260ce:	5d                   	pop    ebp
c00260cf:	c3                   	ret    

c00260d0 <PIC::disable()>:
c00260d0:	55                   	push   ebp
c00260d1:	89 e5                	mov    ebp,esp
c00260d3:	83 ec 10             	sub    esp,0x10
c00260d6:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00260dc:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00260e0:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00260e3:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00260e7:	ee                   	out    dx,al
c00260e8:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00260ee:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00260f2:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00260f5:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00260f9:	ee                   	out    dx,al
c00260fa:	90                   	nop
c00260fb:	c9                   	leave  
c00260fc:	c3                   	ret    
c00260fd:	90                   	nop

c00260fe <PIC::close(int, int, void*)>:
c00260fe:	55                   	push   ebp
c00260ff:	89 e5                	mov    ebp,esp
c0026101:	83 ec 08             	sub    esp,0x8
c0026104:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026107:	8b 00                	mov    eax,DWORD PTR [eax]
c0026109:	83 c0 3c             	add    eax,0x3c
c002610c:	8b 00                	mov    eax,DWORD PTR [eax]
c002610e:	83 ec 0c             	sub    esp,0xc
c0026111:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026114:	ff d0                	call   eax
c0026116:	83 c4 10             	add    esp,0x10
c0026119:	b8 00 00 00 00       	mov    eax,0x0
c002611e:	c9                   	leave  
c002611f:	c3                   	ret    

c0026120 <PIC::PIC()>:
c0026120:	83 ec 0c             	sub    esp,0xc
c0026123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026127:	83 ec 08             	sub    esp,0x8
c002612a:	68 e0 d0 02 c0       	push   0xc002d0e0
c002612f:	50                   	push   eax
c0026130:	e8 23 e5 fe ff       	call   c0014658 <InterruptController::InterruptController(char const*)>
c0026135:	83 c4 10             	add    esp,0x10
c0026138:	ba 0c d1 02 c0       	mov    edx,0xc002d10c
c002613d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026141:	89 10                	mov    DWORD PTR [eax],edx
c0026143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026147:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002614d:	0f b6 d0             	movzx  edx,al
c0026150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026154:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c002615b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002615f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026165:	0f b6 d0             	movzx  edx,al
c0026168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002616c:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026171:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026175:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002617b:	8d 50 01             	lea    edx,[eax+0x1]
c002617e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026182:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026188:	0f b6 d0             	movzx  edx,al
c002618b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002618f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026193:	83 e1 3f             	and    ecx,0x3f
c0026196:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002619a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002619e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00261a4:	0f b6 d0             	movzx  edx,al
c00261a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261ab:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00261b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261b6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00261bc:	0f b6 d0             	movzx  edx,al
c00261bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261c3:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00261c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261cc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00261d2:	8d 50 01             	lea    edx,[eax+0x1]
c00261d5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00261d9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00261df:	0f b6 d0             	movzx  edx,al
c00261e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261e6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00261ea:	83 e1 3f             	and    ecx,0x3f
c00261ed:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00261f1:	90                   	nop
c00261f2:	83 c4 0c             	add    esp,0xc
c00261f5:	c3                   	ret    

c00261f6 <PIC::ioWait()>:
c00261f6:	eb 00                	jmp    c00261f8 <PIC::ioWait()+0x2>
c00261f8:	eb 00                	jmp    c00261fa <PIC::ioWait()+0x4>
c00261fa:	90                   	nop
c00261fb:	c3                   	ret    

c00261fc <PIC::getIRQReg(int)>:
c00261fc:	55                   	push   ebp
c00261fd:	89 e5                	mov    ebp,esp
c00261ff:	83 ec 10             	sub    esp,0x10
c0026202:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026205:	0f b6 c0             	movzx  eax,al
c0026208:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002620e:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0026211:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026214:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026218:	ee                   	out    dx,al
c0026219:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002621c:	0f b6 c0             	movzx  eax,al
c002621f:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026225:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0026228:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002622b:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002622f:	ee                   	out    dx,al
c0026230:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0026236:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c002623a:	89 c2                	mov    edx,eax
c002623c:	ec                   	in     al,dx
c002623d:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026240:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026243:	0f b6 c0             	movzx  eax,al
c0026246:	c1 e0 08             	shl    eax,0x8
c0026249:	89 c1                	mov    ecx,eax
c002624b:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0026251:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0026255:	89 c2                	mov    edx,eax
c0026257:	ec                   	in     al,dx
c0026258:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c002625b:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002625e:	0f b6 c0             	movzx  eax,al
c0026261:	09 c8                	or     eax,ecx
c0026263:	c9                   	leave  
c0026264:	c3                   	ret    
c0026265:	90                   	nop

c0026266 <PIC::eoi(unsigned char)>:
c0026266:	55                   	push   ebp
c0026267:	89 e5                	mov    ebp,esp
c0026269:	83 ec 14             	sub    esp,0x14
c002626c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002626f:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026272:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026276:	75 1e                	jne    c0026296 <PIC::eoi(unsigned char)+0x30>
c0026278:	6a 0b                	push   0xb
c002627a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002627d:	e8 7a ff ff ff       	call   c00261fc <PIC::getIRQReg(int)>
c0026282:	83 c4 08             	add    esp,0x8
c0026285:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0026289:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c002628d:	25 80 00 00 00       	and    eax,0x80
c0026292:	85 c0                	test   eax,eax
c0026294:	74 5f                	je     c00262f5 <PIC::eoi(unsigned char)+0x8f>
c0026296:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c002629a:	75 2d                	jne    c00262c9 <PIC::eoi(unsigned char)+0x63>
c002629c:	6a 0b                	push   0xb
c002629e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00262a1:	e8 56 ff ff ff       	call   c00261fc <PIC::getIRQReg(int)>
c00262a6:	83 c4 08             	add    esp,0x8
c00262a9:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00262ad:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00262b0:	66 85 c0             	test   ax,ax
c00262b3:	78 14                	js     c00262c9 <PIC::eoi(unsigned char)+0x63>
c00262b5:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00262bb:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00262bf:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00262c2:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00262c6:	ee                   	out    dx,al
c00262c7:	eb 2d                	jmp    c00262f6 <PIC::eoi(unsigned char)+0x90>
c00262c9:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00262cd:	76 12                	jbe    c00262e1 <PIC::eoi(unsigned char)+0x7b>
c00262cf:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00262d5:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00262d9:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00262dc:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00262e0:	ee                   	out    dx,al
c00262e1:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00262e7:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00262eb:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00262ee:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00262f2:	ee                   	out    dx,al
c00262f3:	eb 01                	jmp    c00262f6 <PIC::eoi(unsigned char)+0x90>
c00262f5:	90                   	nop
c00262f6:	c9                   	leave  
c00262f7:	c3                   	ret    

c00262f8 <PIC::remap()>:
c00262f8:	55                   	push   ebp
c00262f9:	89 e5                	mov    ebp,esp
c00262fb:	83 ec 48             	sub    esp,0x48
c00262fe:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026305:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c002630c:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026312:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026315:	89 c2                	mov    edx,eax
c0026317:	ec                   	in     al,dx
c0026318:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002631b:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c002631e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026321:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026327:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002632a:	89 c2                	mov    edx,eax
c002632c:	ec                   	in     al,dx
c002632d:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026330:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026333:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026336:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c002633c:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026340:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026343:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026346:	ee                   	out    dx,al
c0026347:	83 ec 0c             	sub    esp,0xc
c002634a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002634d:	e8 a4 fe ff ff       	call   c00261f6 <PIC::ioWait()>
c0026352:	83 c4 10             	add    esp,0x10
c0026355:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c002635b:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c002635f:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026362:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026365:	ee                   	out    dx,al
c0026366:	83 ec 0c             	sub    esp,0xc
c0026369:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002636c:	e8 85 fe ff ff       	call   c00261f6 <PIC::ioWait()>
c0026371:	83 c4 10             	add    esp,0x10
c0026374:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026377:	0f b6 c0             	movzx  eax,al
c002637a:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026380:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026383:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026386:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026389:	ee                   	out    dx,al
c002638a:	83 ec 0c             	sub    esp,0xc
c002638d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026390:	e8 61 fe ff ff       	call   c00261f6 <PIC::ioWait()>
c0026395:	83 c4 10             	add    esp,0x10
c0026398:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002639b:	0f b6 c0             	movzx  eax,al
c002639e:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00263a4:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00263a7:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00263aa:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00263ad:	ee                   	out    dx,al
c00263ae:	83 ec 0c             	sub    esp,0xc
c00263b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263b4:	e8 3d fe ff ff       	call   c00261f6 <PIC::ioWait()>
c00263b9:	83 c4 10             	add    esp,0x10
c00263bc:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00263c2:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00263c6:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00263c9:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00263cc:	ee                   	out    dx,al
c00263cd:	83 ec 0c             	sub    esp,0xc
c00263d0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263d3:	e8 1e fe ff ff       	call   c00261f6 <PIC::ioWait()>
c00263d8:	83 c4 10             	add    esp,0x10
c00263db:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00263e1:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00263e5:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00263e8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00263eb:	ee                   	out    dx,al
c00263ec:	83 ec 0c             	sub    esp,0xc
c00263ef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263f2:	e8 ff fd ff ff       	call   c00261f6 <PIC::ioWait()>
c00263f7:	83 c4 10             	add    esp,0x10
c00263fa:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026400:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026404:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026407:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002640a:	ee                   	out    dx,al
c002640b:	83 ec 0c             	sub    esp,0xc
c002640e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026411:	e8 e0 fd ff ff       	call   c00261f6 <PIC::ioWait()>
c0026416:	83 c4 10             	add    esp,0x10
c0026419:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c002641f:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026423:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026426:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026429:	ee                   	out    dx,al
c002642a:	83 ec 0c             	sub    esp,0xc
c002642d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026430:	e8 c1 fd ff ff       	call   c00261f6 <PIC::ioWait()>
c0026435:	83 c4 10             	add    esp,0x10
c0026438:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c002643c:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026442:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026445:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026448:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002644b:	ee                   	out    dx,al
c002644c:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026450:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026456:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026459:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c002645c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002645f:	ee                   	out    dx,al
c0026460:	90                   	nop
c0026461:	c9                   	leave  
c0026462:	c3                   	ret    
c0026463:	90                   	nop

c0026464 <PIC::open(int, int, void*)>:
c0026464:	55                   	push   ebp
c0026465:	89 e5                	mov    ebp,esp
c0026467:	83 ec 18             	sub    esp,0x18
c002646a:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026470:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026474:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026477:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002647b:	ee                   	out    dx,al
c002647c:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026482:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026486:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026489:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002648d:	ee                   	out    dx,al
c002648e:	83 ec 0c             	sub    esp,0xc
c0026491:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026494:	e8 5f fe ff ff       	call   c00262f8 <PIC::remap()>
c0026499:	83 c4 10             	add    esp,0x10
c002649c:	b8 00 00 00 00       	mov    eax,0x0
c00264a1:	c9                   	leave  
c00264a2:	c3                   	ret    
c00264a3:	90                   	nop

c00264a4 <APICTimer::close(int, int, void*)>:
c00264a4:	b8 00 00 00 00       	mov    eax,0x0
c00264a9:	c3                   	ret    

c00264aa <apicTimerHandler(regs*, void*)>:
c00264aa:	83 ec 0c             	sub    esp,0xc
c00264ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00264b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00264b3:	99                   	cdq    
c00264b4:	52                   	push   edx
c00264b5:	50                   	push   eax
c00264b6:	6a 00                	push   0x0
c00264b8:	68 00 ca 9a 3b       	push   0x3b9aca00
c00264bd:	e8 92 07 00 00       	call   c0026c54 <__udivdi3>
c00264c2:	83 c4 10             	add    esp,0x10
c00264c5:	83 ec 08             	sub    esp,0x8
c00264c8:	52                   	push   edx
c00264c9:	50                   	push   eax
c00264ca:	e8 e6 02 ff ff       	call   c00167b5 <timerHandler(unsigned long long)>
c00264cf:	83 c4 10             	add    esp,0x10
c00264d2:	90                   	nop
c00264d3:	83 c4 0c             	add    esp,0xc
c00264d6:	c3                   	ret    
c00264d7:	90                   	nop

c00264d8 <APICTimer::write(int)>:
c00264d8:	53                   	push   ebx
c00264d9:	83 ec 28             	sub    esp,0x28
c00264dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00264e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00264e4:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00264ea:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00264ef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00264f5:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00264fb:	83 ec 0c             	sub    esp,0xc
c00264fe:	50                   	push   eax
c00264ff:	e8 de f4 ff ff       	call   c00259e2 <APIC::getBase()>
c0026504:	83 c4 10             	add    esp,0x10
c0026507:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002650b:	a1 70 ea 02 c0       	mov    eax,ds:0xc002ea70
c0026510:	8b 15 74 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea74
c0026516:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002651a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002651e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026522:	05 e0 03 00 00       	add    eax,0x3e0
c0026527:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002652d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026531:	05 80 03 00 00       	add    eax,0x380
c0026536:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c002653c:	fb                   	sti    
c002653d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026541:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026545:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c002654a:	83 d2 00             	adc    edx,0x0
c002654d:	89 c1                	mov    ecx,eax
c002654f:	89 d3                	mov    ebx,edx
c0026551:	a1 70 ea 02 c0       	mov    eax,ds:0xc002ea70
c0026556:	8b 15 74 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea74
c002655c:	39 c8                	cmp    eax,ecx
c002655e:	89 d0                	mov    eax,edx
c0026560:	19 d8                	sbb    eax,ebx
c0026562:	73 02                	jae    c0026566 <APICTimer::write(int)+0x8e>
c0026564:	eb d7                	jmp    c002653d <APICTimer::write(int)+0x65>
c0026566:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002656a:	05 20 03 00 00       	add    eax,0x320
c002656f:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026575:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026579:	05 90 03 00 00       	add    eax,0x390
c002657e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026580:	f7 d0                	not    eax
c0026582:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026586:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002658a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002658e:	ba 00 00 00 00       	mov    edx,0x0
c0026593:	f7 f3                	div    ebx
c0026595:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026599:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002659d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00265a3:	0d 00 00 02 00       	or     eax,0x20000
c00265a8:	89 c2                	mov    edx,eax
c00265aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00265ae:	05 20 03 00 00       	add    eax,0x320
c00265b3:	89 10                	mov    DWORD PTR [eax],edx
c00265b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00265b9:	05 e0 03 00 00       	add    eax,0x3e0
c00265be:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00265c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00265c8:	05 80 03 00 00       	add    eax,0x380
c00265cd:	89 c2                	mov    edx,eax
c00265cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00265d3:	89 02                	mov    DWORD PTR [edx],eax
c00265d5:	90                   	nop
c00265d6:	83 c4 28             	add    esp,0x28
c00265d9:	5b                   	pop    ebx
c00265da:	c3                   	ret    
c00265db:	90                   	nop

c00265dc <APICTimer::open(int, int, void*)>:
c00265dc:	57                   	push   edi
c00265dd:	56                   	push   esi
c00265de:	53                   	push   ebx
c00265df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00265e5:	83 c0 24             	add    eax,0x24
c00265e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00265ea:	83 ec 08             	sub    esp,0x8
c00265ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00265f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00265f5:	ff d0                	call   eax
c00265f7:	83 c4 10             	add    esp,0x10
c00265fa:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c00265ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026605:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002660b:	83 ec 0c             	sub    esp,0xc
c002660e:	50                   	push   eax
c002660f:	e8 ce f3 ff ff       	call   c00259e2 <APIC::getBase()>
c0026614:	83 c4 10             	add    esp,0x10
c0026617:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c002661d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026621:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026627:	0f b6 f8             	movzx  edi,al
c002662a:	89 d0                	mov    eax,edx
c002662c:	ba 00 00 00 00       	mov    edx,0x0
c0026631:	89 c1                	mov    ecx,eax
c0026633:	80 e5 ff             	and    ch,0xff
c0026636:	89 cb                	mov    ebx,ecx
c0026638:	0f b6 f2             	movzx  esi,dl
c002663b:	89 d8                	mov    eax,ebx
c002663d:	89 f2                	mov    edx,esi
c002663f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026643:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026646:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002664a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002664e:	83 e0 00             	and    eax,0x0
c0026651:	09 d0                	or     eax,edx
c0026653:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026657:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002665b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026661:	8d 50 01             	lea    edx,[eax+0x1]
c0026664:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026668:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002666e:	0f b6 d0             	movzx  edx,al
c0026671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026675:	83 c2 08             	add    edx,0x8
c0026678:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002667c:	0f b6 c9             	movzx  ecx,cl
c002667f:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026685:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002668d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026691:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002669b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002669f:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00266a5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00266a9:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00266af:	83 ec 0c             	sub    esp,0xc
c00266b2:	51                   	push   ecx
c00266b3:	6a 01                	push   0x1
c00266b5:	68 aa 64 02 c0       	push   0xc00264aa
c00266ba:	52                   	push   edx
c00266bb:	50                   	push   eax
c00266bc:	e8 a1 d5 fe ff       	call   c0013c62 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00266c1:	83 c4 20             	add    esp,0x20
c00266c4:	89 c2                	mov    edx,eax
c00266c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266ca:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00266d0:	b8 00 00 00 00       	mov    eax,0x0
c00266d5:	5b                   	pop    ebx
c00266d6:	5e                   	pop    esi
c00266d7:	5f                   	pop    edi
c00266d8:	c3                   	ret    
c00266d9:	90                   	nop

c00266da <APICTimer::APICTimer()>:
c00266da:	83 ec 0c             	sub    esp,0xc
c00266dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266e1:	83 ec 08             	sub    esp,0x8
c00266e4:	68 4c d1 02 c0       	push   0xc002d14c
c00266e9:	50                   	push   eax
c00266ea:	e8 37 00 ff ff       	call   c0016726 <Timer::Timer(char const*)>
c00266ef:	83 c4 10             	add    esp,0x10
c00266f2:	ba 60 d1 02 c0       	mov    edx,0xc002d160
c00266f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266fb:	89 10                	mov    DWORD PTR [eax],edx
c00266fd:	90                   	nop
c00266fe:	83 c4 0c             	add    esp,0xc
c0026701:	c3                   	ret    

c0026702 <PIT::write(int)>:
c0026702:	83 ec 10             	sub    esp,0x10
c0026705:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026709:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002670d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026713:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026717:	a3 84 07 03 c0       	mov    ds:0xc0030784,eax
c002671c:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026721:	99                   	cdq    
c0026722:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026726:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002672a:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026731:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026736:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002673a:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002673f:	ee                   	out    dx,al
c0026740:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026744:	0f b6 c0             	movzx  eax,al
c0026747:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002674e:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026752:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026756:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002675b:	ee                   	out    dx,al
c002675c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026760:	c1 f8 08             	sar    eax,0x8
c0026763:	0f b6 c0             	movzx  eax,al
c0026766:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002676d:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026771:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026775:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002677a:	ee                   	out    dx,al
c002677b:	90                   	nop
c002677c:	83 c4 10             	add    esp,0x10
c002677f:	c3                   	ret    

c0026780 <pitHandler(regs*, void*)>:
c0026780:	83 ec 0c             	sub    esp,0xc
c0026783:	a1 84 07 03 c0       	mov    eax,ds:0xc0030784
c0026788:	99                   	cdq    
c0026789:	52                   	push   edx
c002678a:	50                   	push   eax
c002678b:	6a 00                	push   0x0
c002678d:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026792:	e8 bd 04 00 00       	call   c0026c54 <__udivdi3>
c0026797:	83 c4 10             	add    esp,0x10
c002679a:	83 ec 08             	sub    esp,0x8
c002679d:	52                   	push   edx
c002679e:	50                   	push   eax
c002679f:	e8 11 00 ff ff       	call   c00167b5 <timerHandler(unsigned long long)>
c00267a4:	83 c4 10             	add    esp,0x10
c00267a7:	90                   	nop
c00267a8:	83 c4 0c             	add    esp,0xc
c00267ab:	c3                   	ret    

c00267ac <PIT::open(int, int, void*)>:
c00267ac:	83 ec 0c             	sub    esp,0xc
c00267af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00267b5:	83 c0 24             	add    eax,0x24
c00267b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00267ba:	83 ec 08             	sub    esp,0x8
c00267bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00267c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00267c5:	ff d0                	call   eax
c00267c7:	83 c4 10             	add    esp,0x10
c00267ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267ce:	83 ec 0c             	sub    esp,0xc
c00267d1:	6a 00                	push   0x0
c00267d3:	6a 01                	push   0x1
c00267d5:	68 80 67 02 c0       	push   0xc0026780
c00267da:	6a 00                	push   0x0
c00267dc:	50                   	push   eax
c00267dd:	e8 80 d4 fe ff       	call   c0013c62 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00267e2:	83 c4 20             	add    esp,0x20
c00267e5:	89 c2                	mov    edx,eax
c00267e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267eb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00267f1:	b8 00 00 00 00       	mov    eax,0x0
c00267f6:	83 c4 0c             	add    esp,0xc
c00267f9:	c3                   	ret    

c00267fa <PIT::close(int, int, void*)>:
c00267fa:	83 ec 0c             	sub    esp,0xc
c00267fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026801:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002680b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002680f:	6a 01                	push   0x1
c0026811:	68 80 67 02 c0       	push   0xc0026780
c0026816:	6a 00                	push   0x0
c0026818:	50                   	push   eax
c0026819:	e8 8e d4 fe ff       	call   c0013cac <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002681e:	83 c4 10             	add    esp,0x10
c0026821:	b8 00 00 00 00       	mov    eax,0x0
c0026826:	83 c4 0c             	add    esp,0xc
c0026829:	c3                   	ret    

c002682a <PIT::PIT()>:
c002682a:	83 ec 0c             	sub    esp,0xc
c002682d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026831:	83 ec 08             	sub    esp,0x8
c0026834:	68 88 d1 02 c0       	push   0xc002d188
c0026839:	50                   	push   eax
c002683a:	e8 e7 fe fe ff       	call   c0016726 <Timer::Timer(char const*)>
c002683f:	83 c4 10             	add    esp,0x10
c0026842:	ba b0 d1 02 c0       	mov    edx,0xc002d1b0
c0026847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002684b:	89 10                	mov    DWORD PTR [eax],edx
c002684d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026851:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026857:	0f b6 d0             	movzx  edx,al
c002685a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002685e:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026869:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002686f:	0f b6 d0             	movzx  edx,al
c0026872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026876:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002687b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002687f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026885:	8d 50 01             	lea    edx,[eax+0x1]
c0026888:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002688c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026892:	0f b6 d0             	movzx  edx,al
c0026895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026899:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002689d:	83 e1 3f             	and    ecx,0x3f
c00268a0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00268a4:	90                   	nop
c00268a5:	83 c4 0c             	add    esp,0xc
c00268a8:	c3                   	ret    
c00268a9:	66 90                	xchg   ax,ax
c00268ab:	66 90                	xchg   ax,ax
c00268ad:	66 90                	xchg   ax,ax
c00268af:	90                   	nop

c00268b0 <avxDetect>:
c00268b0:	b8 00 00 00 00       	mov    eax,0x0
c00268b5:	c3                   	ret    

c00268b6 <avxSave>:
c00268b6:	c3                   	ret    

c00268b7 <avxLoad>:
c00268b7:	c3                   	ret    

c00268b8 <avxInit>:
c00268b8:	c3                   	ret    

c00268b9 <avxClose>:
c00268b9:	c3                   	ret    

c00268ba <wouldSheSayYes>:
c00268ba:	c3                   	ret    
c00268bb:	49                   	dec    ecx
c00268bc:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00268c0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00268c4:	75 20                	jne    c00268e6 <sseDetect.noSSE+0x1>
c00268c6:	4e                   	dec    esi
c00268c7:	79 61                	jns    c002692a <x87Detect+0x14>
c00268c9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00268ce:	66 90                	xchg   ax,ax

c00268d0 <absolutelyNoChanceInHell>:
c00268d0:	b8 01 00 00 00       	mov    eax,0x1
c00268d5:	0f a2                	cpuid  
c00268d7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00268dd:	74 06                	je     c00268e5 <sseDetect.noSSE>
c00268df:	b8 01 00 00 00       	mov    eax,0x1
c00268e4:	c3                   	ret    

c00268e5 <sseDetect.noSSE>:
c00268e5:	31 c0                	xor    eax,eax
c00268e7:	c3                   	ret    

c00268e8 <sseSave>:
c00268e8:	0f ae 44 24 04       	fxsave [esp+0x4]
c00268ed:	c3                   	ret    

c00268ee <sseLoad>:
c00268ee:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c00268f3:	c3                   	ret    

c00268f4 <sseInit>:
c00268f4:	e8 49 00 00 00       	call   c0026942 <x87Init>
c00268f9:	0f 20 e0             	mov    eax,cr4
c00268fc:	66 0d 00 06          	or     ax,0x600
c0026900:	0f 22 e0             	mov    cr4,eax
c0026903:	c3                   	ret    

c0026904 <sseClose>:
c0026904:	c3                   	ret    
c0026905:	66 90                	xchg   ax,ax
c0026907:	66 90                	xchg   ax,ax
c0026909:	66 90                	xchg   ax,ax
c002690b:	66 90                	xchg   ax,ax
c002690d:	66 90                	xchg   ax,ax
c002690f:	90                   	nop

c0026910 <value_37F>:
c0026910:	7f 03                	jg     c0026915 <value_37A+0x1>

c0026912 <value_37E>:
c0026912:	7e 03                	jle    c0026917 <x87Detect+0x1>

c0026914 <value_37A>:
c0026914:	7a 03                	jp     c0026919 <x87Detect+0x3>

c0026916 <x87Detect>:
c0026916:	b8 01 00 00 00       	mov    eax,0x1
c002691b:	0f a2                	cpuid  
c002691d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026923:	74 06                	je     c002692b <x87Detect.nox87>
c0026925:	b8 01 00 00 00       	mov    eax,0x1
c002692a:	c3                   	ret    

c002692b <x87Detect.nox87>:
c002692b:	b8 00 00 00 00       	mov    eax,0x0
c0026930:	c3                   	ret    

c0026931 <x87Save>:
c0026931:	55                   	push   ebp
c0026932:	89 e5                	mov    ebp,esp
c0026934:	9b dd 75 08          	fsave  [ebp+0x8]
c0026938:	c9                   	leave  
c0026939:	c3                   	ret    

c002693a <x87Load>:
c002693a:	55                   	push   ebp
c002693b:	89 e5                	mov    ebp,esp
c002693d:	dd 65 08             	frstor [ebp+0x8]
c0026940:	c9                   	leave  
c0026941:	c3                   	ret    

c0026942 <x87Init>:
c0026942:	9b db e3             	finit  
c0026945:	0f 20 c0             	mov    eax,cr0
c0026948:	66 25 fb ff          	and    ax,0xfffb
c002694c:	66 0d 22 00          	or     ax,0x22
c0026950:	0f 22 c0             	mov    cr0,eax
c0026953:	0f 06                	clts   
c0026955:	d9 2d 14 69 02 c0    	fldcw  WORD PTR ds:0xc0026914
c002695b:	c3                   	ret    

c002695c <x87Close>:
c002695c:	c3                   	ret    
c002695d:	66 90                	xchg   ax,ax
c002695f:	90                   	nop

c0026960 <__do_global_ctors_aux>:
c0026960:	a1 54 95 02 c0       	mov    eax,ds:0xc0029554
c0026965:	83 f8 ff             	cmp    eax,0xffffffff
c0026968:	74 1a                	je     c0026984 <__do_global_ctors_aux+0x24>
c002696a:	55                   	push   ebp
c002696b:	89 e5                	mov    ebp,esp
c002696d:	53                   	push   ebx
c002696e:	52                   	push   edx
c002696f:	bb 54 95 02 c0       	mov    ebx,0xc0029554
c0026974:	ff d0                	call   eax
c0026976:	83 eb 04             	sub    ebx,0x4
c0026979:	8b 03                	mov    eax,DWORD PTR [ebx]
c002697b:	83 f8 ff             	cmp    eax,0xffffffff
c002697e:	75 f4                	jne    c0026974 <__do_global_ctors_aux+0x14>
c0026980:	58                   	pop    eax
c0026981:	5b                   	pop    ebx
c0026982:	5d                   	pop    ebp
c0026983:	c3                   	ret    
c0026984:	c3                   	ret    
c0026985:	66 90                	xchg   ax,ax
c0026987:	90                   	nop

c0026988 <__divdi3>:
c0026988:	55                   	push   ebp
c0026989:	57                   	push   edi
c002698a:	56                   	push   esi
c002698b:	53                   	push   ebx
c002698c:	83 ec 1c             	sub    esp,0x1c
c002698f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026993:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026997:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002699a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002699e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00269a2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00269a6:	85 db                	test   ebx,ebx
c00269a8:	0f 88 8e 00 00 00    	js     c0026a3c <__divdi3+0xb4>
c00269ae:	89 dd                	mov    ebp,ebx
c00269b0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00269b8:	89 d3                	mov    ebx,edx
c00269ba:	85 d2                	test   edx,edx
c00269bc:	79 0d                	jns    c00269cb <__divdi3+0x43>
c00269be:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00269c2:	f7 d8                	neg    eax
c00269c4:	83 d2 00             	adc    edx,0x0
c00269c7:	f7 da                	neg    edx
c00269c9:	89 d3                	mov    ebx,edx
c00269cb:	89 c7                	mov    edi,eax
c00269cd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00269d0:	85 db                	test   ebx,ebx
c00269d2:	75 48                	jne    c0026a1c <__divdi3+0x94>
c00269d4:	39 ef                	cmp    edi,ebp
c00269d6:	76 24                	jbe    c00269fc <__divdi3+0x74>
c00269d8:	89 ea                	mov    edx,ebp
c00269da:	f7 f7                	div    edi
c00269dc:	89 c1                	mov    ecx,eax
c00269de:	31 f6                	xor    esi,esi
c00269e0:	89 c8                	mov    eax,ecx
c00269e2:	89 f2                	mov    edx,esi
c00269e4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00269e8:	85 c9                	test   ecx,ecx
c00269ea:	74 07                	je     c00269f3 <__divdi3+0x6b>
c00269ec:	f7 d8                	neg    eax
c00269ee:	83 d2 00             	adc    edx,0x0
c00269f1:	f7 da                	neg    edx
c00269f3:	83 c4 1c             	add    esp,0x1c
c00269f6:	5b                   	pop    ebx
c00269f7:	5e                   	pop    esi
c00269f8:	5f                   	pop    edi
c00269f9:	5d                   	pop    ebp
c00269fa:	c3                   	ret    
c00269fb:	90                   	nop
c00269fc:	85 ff                	test   edi,edi
c00269fe:	75 0b                	jne    c0026a0b <__divdi3+0x83>
c0026a00:	b8 01 00 00 00       	mov    eax,0x1
c0026a05:	31 d2                	xor    edx,edx
c0026a07:	f7 f3                	div    ebx
c0026a09:	89 c7                	mov    edi,eax
c0026a0b:	31 d2                	xor    edx,edx
c0026a0d:	89 e8                	mov    eax,ebp
c0026a0f:	f7 f7                	div    edi
c0026a11:	89 c6                	mov    esi,eax
c0026a13:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026a16:	f7 f7                	div    edi
c0026a18:	89 c1                	mov    ecx,eax
c0026a1a:	eb c4                	jmp    c00269e0 <__divdi3+0x58>
c0026a1c:	39 eb                	cmp    ebx,ebp
c0026a1e:	77 3c                	ja     c0026a5c <__divdi3+0xd4>
c0026a20:	0f bd f3             	bsr    esi,ebx
c0026a23:	83 f6 1f             	xor    esi,0x1f
c0026a26:	75 40                	jne    c0026a68 <__divdi3+0xe0>
c0026a28:	39 eb                	cmp    ebx,ebp
c0026a2a:	72 09                	jb     c0026a35 <__divdi3+0xad>
c0026a2c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026a2f:	0f 87 97 00 00 00    	ja     c0026acc <__divdi3+0x144>
c0026a35:	b9 01 00 00 00       	mov    ecx,0x1
c0026a3a:	eb a4                	jmp    c00269e0 <__divdi3+0x58>
c0026a3c:	f7 d9                	neg    ecx
c0026a3e:	83 d3 00             	adc    ebx,0x0
c0026a41:	f7 db                	neg    ebx
c0026a43:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026a46:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026a4a:	89 dd                	mov    ebp,ebx
c0026a4c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026a54:	e9 5f ff ff ff       	jmp    c00269b8 <__divdi3+0x30>
c0026a59:	8d 76 00             	lea    esi,[esi+0x0]
c0026a5c:	31 f6                	xor    esi,esi
c0026a5e:	31 c9                	xor    ecx,ecx
c0026a60:	e9 7b ff ff ff       	jmp    c00269e0 <__divdi3+0x58>
c0026a65:	8d 76 00             	lea    esi,[esi+0x0]
c0026a68:	b8 20 00 00 00       	mov    eax,0x20
c0026a6d:	29 f0                	sub    eax,esi
c0026a6f:	89 f1                	mov    ecx,esi
c0026a71:	d3 e3                	shl    ebx,cl
c0026a73:	89 fa                	mov    edx,edi
c0026a75:	88 c1                	mov    cl,al
c0026a77:	d3 ea                	shr    edx,cl
c0026a79:	09 da                	or     edx,ebx
c0026a7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026a7f:	89 f1                	mov    ecx,esi
c0026a81:	d3 e7                	shl    edi,cl
c0026a83:	89 eb                	mov    ebx,ebp
c0026a85:	88 c1                	mov    cl,al
c0026a87:	d3 eb                	shr    ebx,cl
c0026a89:	89 f1                	mov    ecx,esi
c0026a8b:	d3 e5                	shl    ebp,cl
c0026a8d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026a90:	88 c1                	mov    cl,al
c0026a92:	d3 ea                	shr    edx,cl
c0026a94:	09 d5                	or     ebp,edx
c0026a96:	89 e8                	mov    eax,ebp
c0026a98:	89 da                	mov    edx,ebx
c0026a9a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026a9e:	89 d3                	mov    ebx,edx
c0026aa0:	89 c5                	mov    ebp,eax
c0026aa2:	f7 e7                	mul    edi
c0026aa4:	39 d3                	cmp    ebx,edx
c0026aa6:	72 18                	jb     c0026ac0 <__divdi3+0x138>
c0026aa8:	74 0a                	je     c0026ab4 <__divdi3+0x12c>
c0026aaa:	89 e9                	mov    ecx,ebp
c0026aac:	31 f6                	xor    esi,esi
c0026aae:	e9 2d ff ff ff       	jmp    c00269e0 <__divdi3+0x58>
c0026ab3:	90                   	nop
c0026ab4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026ab7:	89 f1                	mov    ecx,esi
c0026ab9:	d3 e7                	shl    edi,cl
c0026abb:	39 c7                	cmp    edi,eax
c0026abd:	73 eb                	jae    c0026aaa <__divdi3+0x122>
c0026abf:	90                   	nop
c0026ac0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026ac3:	31 f6                	xor    esi,esi
c0026ac5:	e9 16 ff ff ff       	jmp    c00269e0 <__divdi3+0x58>
c0026aca:	66 90                	xchg   ax,ax
c0026acc:	31 c9                	xor    ecx,ecx
c0026ace:	e9 0d ff ff ff       	jmp    c00269e0 <__divdi3+0x58>
c0026ad3:	90                   	nop

c0026ad4 <__moddi3>:
c0026ad4:	55                   	push   ebp
c0026ad5:	57                   	push   edi
c0026ad6:	56                   	push   esi
c0026ad7:	53                   	push   ebx
c0026ad8:	83 ec 2c             	sub    esp,0x2c
c0026adb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026adf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0026ae3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0026ae7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026aeb:	85 db                	test   ebx,ebx
c0026aed:	0f 88 85 00 00 00    	js     c0026b78 <__moddi3+0xa4>
c0026af3:	89 de                	mov    esi,ebx
c0026af5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026afd:	89 d7                	mov    edi,edx
c0026aff:	85 d2                	test   edx,edx
c0026b01:	79 09                	jns    c0026b0c <__moddi3+0x38>
c0026b03:	f7 d8                	neg    eax
c0026b05:	83 d2 00             	adc    edx,0x0
c0026b08:	f7 da                	neg    edx
c0026b0a:	89 d7                	mov    edi,edx
c0026b0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026b10:	89 cd                	mov    ebp,ecx
c0026b12:	85 ff                	test   edi,edi
c0026b14:	75 52                	jne    c0026b68 <__moddi3+0x94>
c0026b16:	89 c3                	mov    ebx,eax
c0026b18:	39 f0                	cmp    eax,esi
c0026b1a:	76 24                	jbe    c0026b40 <__moddi3+0x6c>
c0026b1c:	89 c8                	mov    eax,ecx
c0026b1e:	89 f2                	mov    edx,esi
c0026b20:	f7 f3                	div    ebx
c0026b22:	89 d6                	mov    esi,edx
c0026b24:	89 f0                	mov    eax,esi
c0026b26:	31 d2                	xor    edx,edx
c0026b28:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026b2c:	85 c9                	test   ecx,ecx
c0026b2e:	74 07                	je     c0026b37 <__moddi3+0x63>
c0026b30:	f7 d8                	neg    eax
c0026b32:	83 d2 00             	adc    edx,0x0
c0026b35:	f7 da                	neg    edx
c0026b37:	83 c4 2c             	add    esp,0x2c
c0026b3a:	5b                   	pop    ebx
c0026b3b:	5e                   	pop    esi
c0026b3c:	5f                   	pop    edi
c0026b3d:	5d                   	pop    ebp
c0026b3e:	c3                   	ret    
c0026b3f:	90                   	nop
c0026b40:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0026b44:	85 db                	test   ebx,ebx
c0026b46:	75 0d                	jne    c0026b55 <__moddi3+0x81>
c0026b48:	b8 01 00 00 00       	mov    eax,0x1
c0026b4d:	31 d2                	xor    edx,edx
c0026b4f:	f7 f7                	div    edi
c0026b51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026b55:	89 f0                	mov    eax,esi
c0026b57:	31 d2                	xor    edx,edx
c0026b59:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026b5d:	f7 f7                	div    edi
c0026b5f:	89 e8                	mov    eax,ebp
c0026b61:	f7 f7                	div    edi
c0026b63:	89 d6                	mov    esi,edx
c0026b65:	eb bd                	jmp    c0026b24 <__moddi3+0x50>
c0026b67:	90                   	nop
c0026b68:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026b6c:	39 f7                	cmp    edi,esi
c0026b6e:	76 20                	jbe    c0026b90 <__moddi3+0xbc>
c0026b70:	89 c8                	mov    eax,ecx
c0026b72:	89 f2                	mov    edx,esi
c0026b74:	eb b2                	jmp    c0026b28 <__moddi3+0x54>
c0026b76:	66 90                	xchg   ax,ax
c0026b78:	f7 d9                	neg    ecx
c0026b7a:	83 d3 00             	adc    ebx,0x0
c0026b7d:	f7 db                	neg    ebx
c0026b7f:	89 de                	mov    esi,ebx
c0026b81:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026b89:	e9 6f ff ff ff       	jmp    c0026afd <__moddi3+0x29>
c0026b8e:	66 90                	xchg   ax,ax
c0026b90:	0f bd c7             	bsr    eax,edi
c0026b93:	83 f0 1f             	xor    eax,0x1f
c0026b96:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026b9a:	75 24                	jne    c0026bc0 <__moddi3+0xec>
c0026b9c:	39 f7                	cmp    edi,esi
c0026b9e:	72 06                	jb     c0026ba6 <__moddi3+0xd2>
c0026ba0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026ba4:	77 0c                	ja     c0026bb2 <__moddi3+0xde>
c0026ba6:	89 e9                	mov    ecx,ebp
c0026ba8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026bac:	19 fe                	sbb    esi,edi
c0026bae:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026bb2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026bb6:	89 f2                	mov    edx,esi
c0026bb8:	e9 6b ff ff ff       	jmp    c0026b28 <__moddi3+0x54>
c0026bbd:	8d 76 00             	lea    esi,[esi+0x0]
c0026bc0:	b8 20 00 00 00       	mov    eax,0x20
c0026bc5:	89 c2                	mov    edx,eax
c0026bc7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026bcb:	29 da                	sub    edx,ebx
c0026bcd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026bd1:	88 d9                	mov    cl,bl
c0026bd3:	d3 e7                	shl    edi,cl
c0026bd5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026bd9:	88 d1                	mov    cl,dl
c0026bdb:	d3 e8                	shr    eax,cl
c0026bdd:	09 c7                	or     edi,eax
c0026bdf:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026be3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026be7:	89 d8                	mov    eax,ebx
c0026be9:	88 d9                	mov    cl,bl
c0026beb:	d3 e7                	shl    edi,cl
c0026bed:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026bf1:	89 f3                	mov    ebx,esi
c0026bf3:	88 d1                	mov    cl,dl
c0026bf5:	d3 eb                	shr    ebx,cl
c0026bf7:	89 c7                	mov    edi,eax
c0026bf9:	88 c1                	mov    cl,al
c0026bfb:	d3 e6                	shl    esi,cl
c0026bfd:	89 e8                	mov    eax,ebp
c0026bff:	88 d1                	mov    cl,dl
c0026c01:	d3 e8                	shr    eax,cl
c0026c03:	09 f0                	or     eax,esi
c0026c05:	89 f9                	mov    ecx,edi
c0026c07:	d3 e5                	shl    ebp,cl
c0026c09:	89 da                	mov    edx,ebx
c0026c0b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026c0f:	89 d3                	mov    ebx,edx
c0026c11:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026c15:	89 c6                	mov    esi,eax
c0026c17:	89 d1                	mov    ecx,edx
c0026c19:	39 d3                	cmp    ebx,edx
c0026c1b:	72 27                	jb     c0026c44 <__moddi3+0x170>
c0026c1d:	74 21                	je     c0026c40 <__moddi3+0x16c>
c0026c1f:	29 f5                	sub    ebp,esi
c0026c21:	19 cb                	sbb    ebx,ecx
c0026c23:	89 de                	mov    esi,ebx
c0026c25:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026c29:	d3 e6                	shl    esi,cl
c0026c2b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026c2f:	89 f9                	mov    ecx,edi
c0026c31:	d3 ed                	shr    ebp,cl
c0026c33:	09 ee                	or     esi,ebp
c0026c35:	89 f0                	mov    eax,esi
c0026c37:	d3 eb                	shr    ebx,cl
c0026c39:	89 da                	mov    edx,ebx
c0026c3b:	e9 e8 fe ff ff       	jmp    c0026b28 <__moddi3+0x54>
c0026c40:	39 c5                	cmp    ebp,eax
c0026c42:	73 db                	jae    c0026c1f <__moddi3+0x14b>
c0026c44:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026c48:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026c4c:	89 d1                	mov    ecx,edx
c0026c4e:	89 c6                	mov    esi,eax
c0026c50:	eb cd                	jmp    c0026c1f <__moddi3+0x14b>
c0026c52:	66 90                	xchg   ax,ax

c0026c54 <__udivdi3>:
c0026c54:	55                   	push   ebp
c0026c55:	57                   	push   edi
c0026c56:	56                   	push   esi
c0026c57:	53                   	push   ebx
c0026c58:	83 ec 1c             	sub    esp,0x1c
c0026c5b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026c5f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026c63:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026c67:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026c6b:	85 d2                	test   edx,edx
c0026c6d:	75 41                	jne    c0026cb0 <__udivdi3+0x5c>
c0026c6f:	39 f7                	cmp    edi,esi
c0026c71:	76 15                	jbe    c0026c88 <__udivdi3+0x34>
c0026c73:	89 e8                	mov    eax,ebp
c0026c75:	89 f2                	mov    edx,esi
c0026c77:	f7 f7                	div    edi
c0026c79:	31 db                	xor    ebx,ebx
c0026c7b:	89 da                	mov    edx,ebx
c0026c7d:	83 c4 1c             	add    esp,0x1c
c0026c80:	5b                   	pop    ebx
c0026c81:	5e                   	pop    esi
c0026c82:	5f                   	pop    edi
c0026c83:	5d                   	pop    ebp
c0026c84:	c3                   	ret    
c0026c85:	8d 76 00             	lea    esi,[esi+0x0]
c0026c88:	89 f9                	mov    ecx,edi
c0026c8a:	85 ff                	test   edi,edi
c0026c8c:	75 0b                	jne    c0026c99 <__udivdi3+0x45>
c0026c8e:	b8 01 00 00 00       	mov    eax,0x1
c0026c93:	31 d2                	xor    edx,edx
c0026c95:	f7 f7                	div    edi
c0026c97:	89 c1                	mov    ecx,eax
c0026c99:	31 d2                	xor    edx,edx
c0026c9b:	89 f0                	mov    eax,esi
c0026c9d:	f7 f1                	div    ecx
c0026c9f:	89 c3                	mov    ebx,eax
c0026ca1:	89 e8                	mov    eax,ebp
c0026ca3:	f7 f1                	div    ecx
c0026ca5:	89 da                	mov    edx,ebx
c0026ca7:	83 c4 1c             	add    esp,0x1c
c0026caa:	5b                   	pop    ebx
c0026cab:	5e                   	pop    esi
c0026cac:	5f                   	pop    edi
c0026cad:	5d                   	pop    ebp
c0026cae:	c3                   	ret    
c0026caf:	90                   	nop
c0026cb0:	39 f2                	cmp    edx,esi
c0026cb2:	77 1c                	ja     c0026cd0 <__udivdi3+0x7c>
c0026cb4:	0f bd da             	bsr    ebx,edx
c0026cb7:	83 f3 1f             	xor    ebx,0x1f
c0026cba:	75 24                	jne    c0026ce0 <__udivdi3+0x8c>
c0026cbc:	39 f2                	cmp    edx,esi
c0026cbe:	72 08                	jb     c0026cc8 <__udivdi3+0x74>
c0026cc0:	39 ef                	cmp    edi,ebp
c0026cc2:	0f 87 84 00 00 00    	ja     c0026d4c <__udivdi3+0xf8>
c0026cc8:	b8 01 00 00 00       	mov    eax,0x1
c0026ccd:	eb ac                	jmp    c0026c7b <__udivdi3+0x27>
c0026ccf:	90                   	nop
c0026cd0:	31 db                	xor    ebx,ebx
c0026cd2:	31 c0                	xor    eax,eax
c0026cd4:	89 da                	mov    edx,ebx
c0026cd6:	83 c4 1c             	add    esp,0x1c
c0026cd9:	5b                   	pop    ebx
c0026cda:	5e                   	pop    esi
c0026cdb:	5f                   	pop    edi
c0026cdc:	5d                   	pop    ebp
c0026cdd:	c3                   	ret    
c0026cde:	66 90                	xchg   ax,ax
c0026ce0:	b8 20 00 00 00       	mov    eax,0x20
c0026ce5:	29 d8                	sub    eax,ebx
c0026ce7:	88 d9                	mov    cl,bl
c0026ce9:	d3 e2                	shl    edx,cl
c0026ceb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026cef:	89 fa                	mov    edx,edi
c0026cf1:	88 c1                	mov    cl,al
c0026cf3:	d3 ea                	shr    edx,cl
c0026cf5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026cf9:	09 d1                	or     ecx,edx
c0026cfb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026cff:	88 d9                	mov    cl,bl
c0026d01:	d3 e7                	shl    edi,cl
c0026d03:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026d07:	89 f7                	mov    edi,esi
c0026d09:	88 c1                	mov    cl,al
c0026d0b:	d3 ef                	shr    edi,cl
c0026d0d:	88 d9                	mov    cl,bl
c0026d0f:	d3 e6                	shl    esi,cl
c0026d11:	89 ea                	mov    edx,ebp
c0026d13:	88 c1                	mov    cl,al
c0026d15:	d3 ea                	shr    edx,cl
c0026d17:	09 d6                	or     esi,edx
c0026d19:	89 f0                	mov    eax,esi
c0026d1b:	89 fa                	mov    edx,edi
c0026d1d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026d21:	89 d7                	mov    edi,edx
c0026d23:	89 c6                	mov    esi,eax
c0026d25:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026d29:	39 d7                	cmp    edi,edx
c0026d2b:	72 13                	jb     c0026d40 <__udivdi3+0xec>
c0026d2d:	74 09                	je     c0026d38 <__udivdi3+0xe4>
c0026d2f:	89 f0                	mov    eax,esi
c0026d31:	31 db                	xor    ebx,ebx
c0026d33:	e9 43 ff ff ff       	jmp    c0026c7b <__udivdi3+0x27>
c0026d38:	88 d9                	mov    cl,bl
c0026d3a:	d3 e5                	shl    ebp,cl
c0026d3c:	39 c5                	cmp    ebp,eax
c0026d3e:	73 ef                	jae    c0026d2f <__udivdi3+0xdb>
c0026d40:	8d 46 ff             	lea    eax,[esi-0x1]
c0026d43:	31 db                	xor    ebx,ebx
c0026d45:	e9 31 ff ff ff       	jmp    c0026c7b <__udivdi3+0x27>
c0026d4a:	66 90                	xchg   ax,ax
c0026d4c:	31 c0                	xor    eax,eax
c0026d4e:	e9 28 ff ff ff       	jmp    c0026c7b <__udivdi3+0x27>
c0026d53:	90                   	nop

c0026d54 <__umoddi3>:
c0026d54:	55                   	push   ebp
c0026d55:	57                   	push   edi
c0026d56:	56                   	push   esi
c0026d57:	53                   	push   ebx
c0026d58:	83 ec 1c             	sub    esp,0x1c
c0026d5b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026d5f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026d63:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026d67:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026d6b:	89 da                	mov    edx,ebx
c0026d6d:	85 c0                	test   eax,eax
c0026d6f:	75 37                	jne    c0026da8 <__umoddi3+0x54>
c0026d71:	39 df                	cmp    edi,ebx
c0026d73:	76 13                	jbe    c0026d88 <__umoddi3+0x34>
c0026d75:	89 f0                	mov    eax,esi
c0026d77:	f7 f7                	div    edi
c0026d79:	89 d0                	mov    eax,edx
c0026d7b:	31 d2                	xor    edx,edx
c0026d7d:	83 c4 1c             	add    esp,0x1c
c0026d80:	5b                   	pop    ebx
c0026d81:	5e                   	pop    esi
c0026d82:	5f                   	pop    edi
c0026d83:	5d                   	pop    ebp
c0026d84:	c3                   	ret    
c0026d85:	8d 76 00             	lea    esi,[esi+0x0]
c0026d88:	89 fd                	mov    ebp,edi
c0026d8a:	85 ff                	test   edi,edi
c0026d8c:	75 0b                	jne    c0026d99 <__umoddi3+0x45>
c0026d8e:	b8 01 00 00 00       	mov    eax,0x1
c0026d93:	31 d2                	xor    edx,edx
c0026d95:	f7 f7                	div    edi
c0026d97:	89 c5                	mov    ebp,eax
c0026d99:	89 d8                	mov    eax,ebx
c0026d9b:	31 d2                	xor    edx,edx
c0026d9d:	f7 f5                	div    ebp
c0026d9f:	89 f0                	mov    eax,esi
c0026da1:	f7 f5                	div    ebp
c0026da3:	89 d0                	mov    eax,edx
c0026da5:	eb d4                	jmp    c0026d7b <__umoddi3+0x27>
c0026da7:	90                   	nop
c0026da8:	89 f1                	mov    ecx,esi
c0026daa:	39 d8                	cmp    eax,ebx
c0026dac:	76 0a                	jbe    c0026db8 <__umoddi3+0x64>
c0026dae:	89 f0                	mov    eax,esi
c0026db0:	83 c4 1c             	add    esp,0x1c
c0026db3:	5b                   	pop    ebx
c0026db4:	5e                   	pop    esi
c0026db5:	5f                   	pop    edi
c0026db6:	5d                   	pop    ebp
c0026db7:	c3                   	ret    
c0026db8:	0f bd e8             	bsr    ebp,eax
c0026dbb:	83 f5 1f             	xor    ebp,0x1f
c0026dbe:	75 1c                	jne    c0026ddc <__umoddi3+0x88>
c0026dc0:	39 d8                	cmp    eax,ebx
c0026dc2:	72 04                	jb     c0026dc8 <__umoddi3+0x74>
c0026dc4:	39 f7                	cmp    edi,esi
c0026dc6:	77 08                	ja     c0026dd0 <__umoddi3+0x7c>
c0026dc8:	89 da                	mov    edx,ebx
c0026dca:	29 fe                	sub    esi,edi
c0026dcc:	19 c2                	sbb    edx,eax
c0026dce:	89 f1                	mov    ecx,esi
c0026dd0:	89 c8                	mov    eax,ecx
c0026dd2:	83 c4 1c             	add    esp,0x1c
c0026dd5:	5b                   	pop    ebx
c0026dd6:	5e                   	pop    esi
c0026dd7:	5f                   	pop    edi
c0026dd8:	5d                   	pop    ebp
c0026dd9:	c3                   	ret    
c0026dda:	66 90                	xchg   ax,ax
c0026ddc:	ba 20 00 00 00       	mov    edx,0x20
c0026de1:	29 ea                	sub    edx,ebp
c0026de3:	89 e9                	mov    ecx,ebp
c0026de5:	d3 e0                	shl    eax,cl
c0026de7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026deb:	89 f8                	mov    eax,edi
c0026ded:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026df1:	88 d1                	mov    cl,dl
c0026df3:	d3 e8                	shr    eax,cl
c0026df5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026df9:	09 c1                	or     ecx,eax
c0026dfb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026dff:	89 e9                	mov    ecx,ebp
c0026e01:	d3 e7                	shl    edi,cl
c0026e03:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026e07:	89 d8                	mov    eax,ebx
c0026e09:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026e0d:	88 d1                	mov    cl,dl
c0026e0f:	d3 e8                	shr    eax,cl
c0026e11:	89 c7                	mov    edi,eax
c0026e13:	89 e9                	mov    ecx,ebp
c0026e15:	d3 e3                	shl    ebx,cl
c0026e17:	89 f0                	mov    eax,esi
c0026e19:	88 d1                	mov    cl,dl
c0026e1b:	d3 e8                	shr    eax,cl
c0026e1d:	09 d8                	or     eax,ebx
c0026e1f:	89 e9                	mov    ecx,ebp
c0026e21:	d3 e6                	shl    esi,cl
c0026e23:	89 f3                	mov    ebx,esi
c0026e25:	89 fa                	mov    edx,edi
c0026e27:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026e2b:	89 d1                	mov    ecx,edx
c0026e2d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026e31:	89 c6                	mov    esi,eax
c0026e33:	89 d7                	mov    edi,edx
c0026e35:	39 d1                	cmp    ecx,edx
c0026e37:	72 27                	jb     c0026e60 <__umoddi3+0x10c>
c0026e39:	74 21                	je     c0026e5c <__umoddi3+0x108>
c0026e3b:	89 ca                	mov    edx,ecx
c0026e3d:	29 f3                	sub    ebx,esi
c0026e3f:	19 fa                	sbb    edx,edi
c0026e41:	89 d0                	mov    eax,edx
c0026e43:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026e47:	d3 e0                	shl    eax,cl
c0026e49:	89 e9                	mov    ecx,ebp
c0026e4b:	d3 eb                	shr    ebx,cl
c0026e4d:	09 d8                	or     eax,ebx
c0026e4f:	d3 ea                	shr    edx,cl
c0026e51:	83 c4 1c             	add    esp,0x1c
c0026e54:	5b                   	pop    ebx
c0026e55:	5e                   	pop    esi
c0026e56:	5f                   	pop    edi
c0026e57:	5d                   	pop    ebp
c0026e58:	c3                   	ret    
c0026e59:	8d 76 00             	lea    esi,[esi+0x0]
c0026e5c:	39 c3                	cmp    ebx,eax
c0026e5e:	73 db                	jae    c0026e3b <__umoddi3+0xe7>
c0026e60:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026e64:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026e68:	89 d7                	mov    edi,edx
c0026e6a:	89 c6                	mov    esi,eax
c0026e6c:	eb cd                	jmp    c0026e3b <__umoddi3+0xe7>

c0026e6e <__addsf3>:
c0026e6e:	55                   	push   ebp
c0026e6f:	89 e5                	mov    ebp,esp
c0026e71:	57                   	push   edi
c0026e72:	56                   	push   esi
c0026e73:	53                   	push   ebx
c0026e74:	83 ec 08             	sub    esp,0x8
c0026e77:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026e7a:	89 fa                	mov    edx,edi
c0026e7c:	89 f8                	mov    eax,edi
c0026e7e:	c1 f8 17             	sar    eax,0x17
c0026e81:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026e84:	c1 e2 08             	shl    edx,0x8
c0026e87:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026e8d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026e90:	89 de                	mov    esi,ebx
c0026e92:	c1 fe 17             	sar    esi,0x17
c0026e95:	c1 e3 08             	shl    ebx,0x8
c0026e98:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026e9e:	31 f0                	xor    eax,esi
c0026ea0:	0f 88 3b 01 00 00    	js     c0026fe1 <__addsf3+0x173>
c0026ea6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026ea9:	29 f1                	sub    ecx,esi
c0026eab:	85 c9                	test   ecx,ecx
c0026ead:	7e 54                	jle    c0026f03 <__addsf3+0x95>
c0026eaf:	89 f0                	mov    eax,esi
c0026eb1:	84 c0                	test   al,al
c0026eb3:	75 10                	jne    c0026ec5 <__addsf3+0x57>
c0026eb5:	85 db                	test   ebx,ebx
c0026eb7:	0f 84 aa 02 00 00    	je     c0027167 <__addsf3+0x2f9>
c0026ebd:	49                   	dec    ecx
c0026ebe:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026ec1:	74 38                	je     c0026efb <__addsf3+0x8d>
c0026ec3:	eb 13                	jmp    c0026ed8 <__addsf3+0x6a>
c0026ec5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026ec8:	f7 d0                	not    eax
c0026eca:	84 c0                	test   al,al
c0026ecc:	0f 84 95 02 00 00    	je     c0027167 <__addsf3+0x2f9>
c0026ed2:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026ed8:	83 f9 1f             	cmp    ecx,0x1f
c0026edb:	0f 8f 86 02 00 00    	jg     c0027167 <__addsf3+0x2f9>
c0026ee1:	89 de                	mov    esi,ebx
c0026ee3:	d3 ee                	shr    esi,cl
c0026ee5:	b8 20 00 00 00       	mov    eax,0x20
c0026eea:	29 c8                	sub    eax,ecx
c0026eec:	89 c1                	mov    ecx,eax
c0026eee:	d3 e3                	shl    ebx,cl
c0026ef0:	31 c0                	xor    eax,eax
c0026ef2:	85 db                	test   ebx,ebx
c0026ef4:	0f 95 c0             	setne  al
c0026ef7:	09 f0                	or     eax,esi
c0026ef9:	01 d0                	add    eax,edx
c0026efb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026efe:	e9 b6 00 00 00       	jmp    c0026fb9 <__addsf3+0x14b>
c0026f03:	74 5c                	je     c0026f61 <__addsf3+0xf3>
c0026f05:	89 f1                	mov    ecx,esi
c0026f07:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026f0a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026f0d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026f11:	75 14                	jne    c0026f27 <__addsf3+0xb9>
c0026f13:	85 d2                	test   edx,edx
c0026f15:	0f 84 4c 02 00 00    	je     c0027167 <__addsf3+0x2f9>
c0026f1b:	49                   	dec    ecx
c0026f1c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026f1f:	0f 84 94 00 00 00    	je     c0026fb9 <__addsf3+0x14b>
c0026f25:	eb 12                	jmp    c0026f39 <__addsf3+0xcb>
c0026f27:	89 f0                	mov    eax,esi
c0026f29:	f7 d0                	not    eax
c0026f2b:	84 c0                	test   al,al
c0026f2d:	0f 84 34 02 00 00    	je     c0027167 <__addsf3+0x2f9>
c0026f33:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026f39:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026f3c:	83 f9 1f             	cmp    ecx,0x1f
c0026f3f:	0f 8f 22 02 00 00    	jg     c0027167 <__addsf3+0x2f9>
c0026f45:	89 d7                	mov    edi,edx
c0026f47:	d3 ef                	shr    edi,cl
c0026f49:	b8 20 00 00 00       	mov    eax,0x20
c0026f4e:	29 c8                	sub    eax,ecx
c0026f50:	89 c1                	mov    ecx,eax
c0026f52:	d3 e2                	shl    edx,cl
c0026f54:	31 c0                	xor    eax,eax
c0026f56:	85 d2                	test   edx,edx
c0026f58:	0f 95 c0             	setne  al
c0026f5b:	09 f8                	or     eax,edi
c0026f5d:	01 d8                	add    eax,ebx
c0026f5f:	eb 58                	jmp    c0026fb9 <__addsf3+0x14b>
c0026f61:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026f64:	8d 70 01             	lea    esi,[eax+0x1]
c0026f67:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026f6d:	75 32                	jne    c0026fa1 <__addsf3+0x133>
c0026f6f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026f73:	75 1f                	jne    c0026f94 <__addsf3+0x126>
c0026f75:	85 d2                	test   edx,edx
c0026f77:	0f 84 e0 01 00 00    	je     c002715d <__addsf3+0x2ef>
c0026f7d:	85 db                	test   ebx,ebx
c0026f7f:	0f 84 e2 01 00 00    	je     c0027167 <__addsf3+0x2f9>
c0026f85:	89 d0                	mov    eax,edx
c0026f87:	01 d8                	add    eax,ebx
c0026f89:	0f 89 a9 01 00 00    	jns    c0027138 <__addsf3+0x2ca>
c0026f8f:	e9 9d 01 00 00       	jmp    c0027131 <__addsf3+0x2c3>
c0026f94:	85 d2                	test   edx,edx
c0026f96:	0f 85 cb 01 00 00    	jne    c0027167 <__addsf3+0x2f9>
c0026f9c:	e9 bc 01 00 00       	jmp    c002715d <__addsf3+0x2ef>
c0026fa1:	31 c0                	xor    eax,eax
c0026fa3:	89 f1                	mov    ecx,esi
c0026fa5:	f7 d1                	not    ecx
c0026fa7:	84 c9                	test   cl,cl
c0026fa9:	0f 84 90 01 00 00    	je     c002713f <__addsf3+0x2d1>
c0026faf:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026fb2:	d1 e8                	shr    eax,1
c0026fb4:	e9 86 01 00 00       	jmp    c002713f <__addsf3+0x2d1>
c0026fb9:	85 c0                	test   eax,eax
c0026fbb:	0f 89 7e 01 00 00    	jns    c002713f <__addsf3+0x2d1>
c0026fc1:	46                   	inc    esi
c0026fc2:	89 f2                	mov    edx,esi
c0026fc4:	f7 d2                	not    edx
c0026fc6:	84 d2                	test   dl,dl
c0026fc8:	0f 84 6f 01 00 00    	je     c002713d <__addsf3+0x2cf>
c0026fce:	89 c2                	mov    edx,eax
c0026fd0:	83 e2 01             	and    edx,0x1
c0026fd3:	d1 e8                	shr    eax,1
c0026fd5:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026fda:	09 d0                	or     eax,edx
c0026fdc:	e9 5e 01 00 00       	jmp    c002713f <__addsf3+0x2d1>
c0026fe1:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026fe5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026fe8:	89 f0                	mov    eax,esi
c0026fea:	0f b6 c0             	movzx  eax,al
c0026fed:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026ff0:	29 c1                	sub    ecx,eax
c0026ff2:	85 c9                	test   ecx,ecx
c0026ff4:	7e 55                	jle    c002704b <__addsf3+0x1dd>
c0026ff6:	85 c0                	test   eax,eax
c0026ff8:	75 11                	jne    c002700b <__addsf3+0x19d>
c0026ffa:	85 db                	test   ebx,ebx
c0026ffc:	0f 84 65 01 00 00    	je     c0027167 <__addsf3+0x2f9>
c0027002:	49                   	dec    ecx
c0027003:	75 19                	jne    c002701e <__addsf3+0x1b0>
c0027005:	89 d0                	mov    eax,edx
c0027007:	29 d8                	sub    eax,ebx
c0027009:	eb 38                	jmp    c0027043 <__addsf3+0x1d5>
c002700b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002700e:	f7 d0                	not    eax
c0027010:	84 c0                	test   al,al
c0027012:	0f 84 4f 01 00 00    	je     c0027167 <__addsf3+0x2f9>
c0027018:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002701e:	83 f9 1f             	cmp    ecx,0x1f
c0027021:	0f 8f 40 01 00 00    	jg     c0027167 <__addsf3+0x2f9>
c0027027:	89 de                	mov    esi,ebx
c0027029:	d3 ee                	shr    esi,cl
c002702b:	b8 20 00 00 00       	mov    eax,0x20
c0027030:	29 c8                	sub    eax,ecx
c0027032:	89 c1                	mov    ecx,eax
c0027034:	d3 e3                	shl    ebx,cl
c0027036:	31 c0                	xor    eax,eax
c0027038:	85 db                	test   ebx,ebx
c002703a:	0f 95 c0             	setne  al
c002703d:	09 f0                	or     eax,esi
c002703f:	29 c2                	sub    edx,eax
c0027041:	89 d0                	mov    eax,edx
c0027043:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027046:	e9 af 00 00 00       	jmp    c00270fa <__addsf3+0x28c>
c002704b:	74 5c                	je     c00270a9 <__addsf3+0x23b>
c002704d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0027050:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027053:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027057:	75 14                	jne    c002706d <__addsf3+0x1ff>
c0027059:	85 d2                	test   edx,edx
c002705b:	0f 84 06 01 00 00    	je     c0027167 <__addsf3+0x2f9>
c0027061:	48                   	dec    eax
c0027062:	75 1b                	jne    c002707f <__addsf3+0x211>
c0027064:	89 d8                	mov    eax,ebx
c0027066:	29 d0                	sub    eax,edx
c0027068:	e9 8d 00 00 00       	jmp    c00270fa <__addsf3+0x28c>
c002706d:	89 f1                	mov    ecx,esi
c002706f:	f7 d1                	not    ecx
c0027071:	84 c9                	test   cl,cl
c0027073:	0f 84 ee 00 00 00    	je     c0027167 <__addsf3+0x2f9>
c0027079:	81 ca 00 00 00 80    	or     edx,0x80000000
c002707f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027082:	83 f8 1f             	cmp    eax,0x1f
c0027085:	0f 8f dc 00 00 00    	jg     c0027167 <__addsf3+0x2f9>
c002708b:	89 d7                	mov    edi,edx
c002708d:	88 c1                	mov    cl,al
c002708f:	d3 ef                	shr    edi,cl
c0027091:	b9 20 00 00 00       	mov    ecx,0x20
c0027096:	29 c1                	sub    ecx,eax
c0027098:	d3 e2                	shl    edx,cl
c002709a:	31 c0                	xor    eax,eax
c002709c:	85 d2                	test   edx,edx
c002709e:	0f 95 c0             	setne  al
c00270a1:	09 f8                	or     eax,edi
c00270a3:	29 c3                	sub    ebx,eax
c00270a5:	89 d8                	mov    eax,ebx
c00270a7:	eb 51                	jmp    c00270fa <__addsf3+0x28c>
c00270a9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00270ac:	40                   	inc    eax
c00270ad:	a8 fe                	test   al,0xfe
c00270af:	75 3d                	jne    c00270ee <__addsf3+0x280>
c00270b1:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00270b5:	0f 85 a7 00 00 00    	jne    c0027162 <__addsf3+0x2f4>
c00270bb:	85 d2                	test   edx,edx
c00270bd:	75 12                	jne    c00270d1 <__addsf3+0x263>
c00270bf:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00270c2:	85 db                	test   ebx,ebx
c00270c4:	0f 85 9d 00 00 00    	jne    c0027167 <__addsf3+0x2f9>
c00270ca:	31 ff                	xor    edi,edi
c00270cc:	e9 96 00 00 00       	jmp    c0027167 <__addsf3+0x2f9>
c00270d1:	85 db                	test   ebx,ebx
c00270d3:	0f 84 8e 00 00 00    	je     c0027167 <__addsf3+0x2f9>
c00270d9:	89 d0                	mov    eax,edx
c00270db:	29 d8                	sub    eax,ebx
c00270dd:	79 06                	jns    c00270e5 <__addsf3+0x277>
c00270df:	89 d8                	mov    eax,ebx
c00270e1:	29 d0                	sub    eax,edx
c00270e3:	eb 5a                	jmp    c002713f <__addsf3+0x2d1>
c00270e5:	bf 00 00 00 00       	mov    edi,0x0
c00270ea:	74 7b                	je     c0027167 <__addsf3+0x2f9>
c00270ec:	eb 4a                	jmp    c0027138 <__addsf3+0x2ca>
c00270ee:	89 d0                	mov    eax,edx
c00270f0:	29 d8                	sub    eax,ebx
c00270f2:	79 12                	jns    c0027106 <__addsf3+0x298>
c00270f4:	89 d8                	mov    eax,ebx
c00270f6:	29 d0                	sub    eax,edx
c00270f8:	eb 09                	jmp    c0027103 <__addsf3+0x295>
c00270fa:	85 c0                	test   eax,eax
c00270fc:	79 41                	jns    c002713f <__addsf3+0x2d1>
c00270fe:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027103:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0027106:	31 f6                	xor    esi,esi
c0027108:	85 c0                	test   eax,eax
c002710a:	74 33                	je     c002713f <__addsf3+0x2d1>
c002710c:	0f bd c8             	bsr    ecx,eax
c002710f:	83 f1 1f             	xor    ecx,0x1f
c0027112:	d3 e0                	shl    eax,cl
c0027114:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0027118:	39 ca                	cmp    edx,ecx
c002711a:	7f 10                	jg     c002712c <__addsf3+0x2be>
c002711c:	29 d1                	sub    ecx,edx
c002711e:	41                   	inc    ecx
c002711f:	d3 e8                	shr    eax,cl
c0027121:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027124:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c002712a:	eb 13                	jmp    c002713f <__addsf3+0x2d1>
c002712c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002712f:	29 ce                	sub    esi,ecx
c0027131:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027136:	eb 07                	jmp    c002713f <__addsf3+0x2d1>
c0027138:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002713b:	eb 02                	jmp    c002713f <__addsf3+0x2d1>
c002713d:	31 c0                	xor    eax,eax
c002713f:	89 c2                	mov    edx,eax
c0027141:	c1 ea 08             	shr    edx,0x8
c0027144:	a8 7f                	test   al,0x7f
c0027146:	0f 95 c1             	setne  cl
c0027149:	09 d1                	or     ecx,edx
c002714b:	83 e1 01             	and    ecx,0x1
c002714e:	c1 e8 07             	shr    eax,0x7
c0027151:	21 c8                	and    eax,ecx
c0027153:	c1 e6 17             	shl    esi,0x17
c0027156:	09 d6                	or     esi,edx
c0027158:	8d 3c 30             	lea    edi,[eax+esi*1]
c002715b:	eb 0a                	jmp    c0027167 <__addsf3+0x2f9>
c002715d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027160:	eb 05                	jmp    c0027167 <__addsf3+0x2f9>
c0027162:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0027167:	89 f8                	mov    eax,edi
c0027169:	5a                   	pop    edx
c002716a:	59                   	pop    ecx
c002716b:	5b                   	pop    ebx
c002716c:	5e                   	pop    esi
c002716d:	5f                   	pop    edi
c002716e:	5d                   	pop    ebp
c002716f:	c3                   	ret    

c0027170 <__subsf3>:
c0027170:	55                   	push   ebp
c0027171:	89 e5                	mov    ebp,esp
c0027173:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027176:	05 00 00 00 80       	add    eax,0x80000000
c002717b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002717e:	5d                   	pop    ebp
c002717f:	e9 ea fc ff ff       	jmp    c0026e6e <__addsf3>

c0027184 <__negsf2>:
c0027184:	55                   	push   ebp
c0027185:	89 e5                	mov    ebp,esp
c0027187:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002718a:	05 00 00 00 80       	add    eax,0x80000000
c002718f:	5d                   	pop    ebp
c0027190:	c3                   	ret    

c0027191 <__mulsf3>:
c0027191:	55                   	push   ebp
c0027192:	89 e5                	mov    ebp,esp
c0027194:	57                   	push   edi
c0027195:	56                   	push   esi
c0027196:	53                   	push   ebx
c0027197:	83 ec 1c             	sub    esp,0x1c
c002719a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002719d:	89 f0                	mov    eax,esi
c002719f:	89 f1                	mov    ecx,esi
c00271a1:	c1 f9 17             	sar    ecx,0x17
c00271a4:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00271a7:	c1 e0 08             	shl    eax,0x8
c00271aa:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00271af:	89 c1                	mov    ecx,eax
c00271b1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00271b4:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00271b7:	89 c7                	mov    edi,eax
c00271b9:	c1 ff 17             	sar    edi,0x17
c00271bc:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00271c0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00271c3:	89 f8                	mov    eax,edi
c00271c5:	0f b6 c0             	movzx  eax,al
c00271c8:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00271cb:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c00271cf:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00271d2:	42                   	inc    edx
c00271d3:	80 e2 fe             	and    dl,0xfe
c00271d6:	75 7b                	jne    c0027253 <__mulsf3+0xc2>
c00271d8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00271dc:	74 54                	je     c0027232 <__mulsf3+0xa1>
c00271de:	85 c9                	test   ecx,ecx
c00271e0:	0f 85 64 01 00 00    	jne    c002734a <__mulsf3+0x1b9>
c00271e6:	8d 57 01             	lea    edx,[edi+0x1]
c00271e9:	80 e2 fe             	and    dl,0xfe
c00271ec:	75 1f                	jne    c002720d <__mulsf3+0x7c>
c00271ee:	85 c0                	test   eax,eax
c00271f0:	b8 00 00 00 00       	mov    eax,0x0
c00271f5:	74 29                	je     c0027220 <__mulsf3+0x8f>
c00271f7:	53                   	push   ebx
c00271f8:	53                   	push   ebx
c00271f9:	50                   	push   eax
c00271fa:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271fd:	e8 96 05 00 00       	call   c0027798 <__nesf2>
c0027202:	83 c4 10             	add    esp,0x10
c0027205:	85 c0                	test   eax,eax
c0027207:	0f 85 3a 01 00 00    	jne    c0027347 <__mulsf3+0x1b6>
c002720d:	85 ff                	test   edi,edi
c002720f:	0f 89 35 01 00 00    	jns    c002734a <__mulsf3+0x1b9>
c0027215:	81 c6 00 00 00 80    	add    esi,0x80000000
c002721b:	e9 2a 01 00 00       	jmp    c002734a <__mulsf3+0x1b9>
c0027220:	51                   	push   ecx
c0027221:	51                   	push   ecx
c0027222:	50                   	push   eax
c0027223:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027226:	e8 6d 05 00 00       	call   c0027798 <__nesf2>
c002722b:	83 c4 10             	add    esp,0x10
c002722e:	85 c0                	test   eax,eax
c0027230:	eb 15                	jmp    c0027247 <__mulsf3+0xb6>
c0027232:	85 c9                	test   ecx,ecx
c0027234:	74 0b                	je     c0027241 <__mulsf3+0xb0>
c0027236:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027239:	01 c9                	add    ecx,ecx
c002723b:	78 16                	js     c0027253 <__mulsf3+0xc2>
c002723d:	89 d3                	mov    ebx,edx
c002723f:	eb f5                	jmp    c0027236 <__mulsf3+0xa5>
c0027241:	89 f8                	mov    eax,edi
c0027243:	f7 d0                	not    eax
c0027245:	84 c0                	test   al,al
c0027247:	75 c4                	jne    c002720d <__mulsf3+0x7c>
c0027249:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c002724e:	e9 f7 00 00 00       	jmp    c002734a <__mulsf3+0x1b9>
c0027253:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027256:	c1 e6 08             	shl    esi,0x8
c0027259:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c002725f:	8d 57 01             	lea    edx,[edi+0x1]
c0027262:	80 e2 fe             	and    dl,0xfe
c0027265:	75 63                	jne    c00272ca <__mulsf3+0x139>
c0027267:	85 c0                	test   eax,eax
c0027269:	74 2f                	je     c002729a <__mulsf3+0x109>
c002726b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002726f:	0f 89 d2 00 00 00    	jns    c0027347 <__mulsf3+0x1b6>
c0027275:	52                   	push   edx
c0027276:	52                   	push   edx
c0027277:	6a 00                	push   0x0
c0027279:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002727c:	e8 dc 04 00 00       	call   c002775d <__eqsf2>
c0027281:	83 c4 10             	add    esp,0x10
c0027284:	85 c0                	test   eax,eax
c0027286:	0f 85 bb 00 00 00    	jne    c0027347 <__mulsf3+0x1b6>
c002728c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002728f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0027295:	e9 b0 00 00 00       	jmp    c002734a <__mulsf3+0x1b9>
c002729a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002729d:	50                   	push   eax
c002729e:	50                   	push   eax
c002729f:	6a 00                	push   0x0
c00272a1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272a4:	e8 b4 04 00 00       	call   c002775d <__eqsf2>
c00272a9:	83 c4 10             	add    esp,0x10
c00272ac:	85 c0                	test   eax,eax
c00272ae:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00272b1:	75 0c                	jne    c00272bf <__mulsf3+0x12e>
c00272b3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00272b7:	0f 89 8a 00 00 00    	jns    c0027347 <__mulsf3+0x1b6>
c00272bd:	eb cd                	jmp    c002728c <__mulsf3+0xfb>
c00272bf:	8d 43 ff             	lea    eax,[ebx-0x1]
c00272c2:	01 f6                	add    esi,esi
c00272c4:	78 04                	js     c00272ca <__mulsf3+0x139>
c00272c6:	89 c3                	mov    ebx,eax
c00272c8:	eb f5                	jmp    c00272bf <__mulsf3+0x12e>
c00272ca:	89 c8                	mov    eax,ecx
c00272cc:	0d 00 00 00 80       	or     eax,0x80000000
c00272d1:	81 ce 00 00 00 80    	or     esi,0x80000000
c00272d7:	f7 e6                	mul    esi
c00272d9:	85 c0                	test   eax,eax
c00272db:	0f 95 c0             	setne  al
c00272de:	0f b6 c0             	movzx  eax,al
c00272e1:	09 c2                	or     edx,eax
c00272e3:	78 03                	js     c00272e8 <__mulsf3+0x157>
c00272e5:	01 d2                	add    edx,edx
c00272e7:	4b                   	dec    ebx
c00272e8:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c00272ee:	7f 22                	jg     c0027312 <__mulsf3+0x181>
c00272f0:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00272f6:	85 db                	test   ebx,ebx
c00272f8:	7f 23                	jg     c002731d <__mulsf3+0x18c>
c00272fa:	83 fb e9             	cmp    ebx,0xffffffe9
c00272fd:	7c 1a                	jl     c0027319 <__mulsf3+0x188>
c00272ff:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027305:	b9 01 00 00 00       	mov    ecx,0x1
c002730a:	29 d9                	sub    ecx,ebx
c002730c:	d3 ea                	shr    edx,cl
c002730e:	31 db                	xor    ebx,ebx
c0027310:	eb 0b                	jmp    c002731d <__mulsf3+0x18c>
c0027312:	bb ff 00 00 00       	mov    ebx,0xff
c0027317:	eb 02                	jmp    c002731b <__mulsf3+0x18a>
c0027319:	31 db                	xor    ebx,ebx
c002731b:	31 d2                	xor    edx,edx
c002731d:	89 d0                	mov    eax,edx
c002731f:	c1 e8 08             	shr    eax,0x8
c0027322:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027325:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002732b:	09 fb                	or     ebx,edi
c002732d:	c1 e3 17             	shl    ebx,0x17
c0027330:	09 c3                	or     ebx,eax
c0027332:	f6 c2 7f             	test   dl,0x7f
c0027335:	0f 95 c1             	setne  cl
c0027338:	09 c8                	or     eax,ecx
c002733a:	83 e0 01             	and    eax,0x1
c002733d:	c1 ea 07             	shr    edx,0x7
c0027340:	21 c2                	and    edx,eax
c0027342:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027345:	eb 03                	jmp    c002734a <__mulsf3+0x1b9>
c0027347:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c002734a:	89 f0                	mov    eax,esi
c002734c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002734f:	5b                   	pop    ebx
c0027350:	5e                   	pop    esi
c0027351:	5f                   	pop    edi
c0027352:	5d                   	pop    ebp
c0027353:	c3                   	ret    

c0027354 <__divsf3>:
c0027354:	55                   	push   ebp
c0027355:	89 e5                	mov    ebp,esp
c0027357:	57                   	push   edi
c0027358:	56                   	push   esi
c0027359:	53                   	push   ebx
c002735a:	83 ec 1c             	sub    esp,0x1c
c002735d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027360:	89 d8                	mov    eax,ebx
c0027362:	89 d9                	mov    ecx,ebx
c0027364:	c1 f9 17             	sar    ecx,0x17
c0027367:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002736a:	c1 e0 08             	shl    eax,0x8
c002736d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027372:	89 c1                	mov    ecx,eax
c0027374:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027377:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002737a:	89 c7                	mov    edi,eax
c002737c:	c1 ff 17             	sar    edi,0x17
c002737f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027383:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027386:	89 f8                	mov    eax,edi
c0027388:	0f b6 c0             	movzx  eax,al
c002738b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002738e:	29 c6                	sub    esi,eax
c0027390:	83 c6 7f             	add    esi,0x7f
c0027393:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027396:	42                   	inc    edx
c0027397:	80 e2 fe             	and    dl,0xfe
c002739a:	0f 85 9c 00 00 00    	jne    c002743c <__divsf3+0xe8>
c00273a0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00273a4:	74 33                	je     c00273d9 <__divsf3+0x85>
c00273a6:	85 c9                	test   ecx,ecx
c00273a8:	0f 85 c7 01 00 00    	jne    c0027575 <__divsf3+0x221>
c00273ae:	8d 57 01             	lea    edx,[edi+0x1]
c00273b1:	80 e2 fe             	and    dl,0xfe
c00273b4:	75 2f                	jne    c00273e5 <__divsf3+0x91>
c00273b6:	85 c0                	test   eax,eax
c00273b8:	74 2b                	je     c00273e5 <__divsf3+0x91>
c00273ba:	51                   	push   ecx
c00273bb:	51                   	push   ecx
c00273bc:	6a 00                	push   0x0
c00273be:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00273c1:	e8 d2 03 00 00       	call   c0027798 <__nesf2>
c00273c6:	83 c4 10             	add    esp,0x10
c00273c9:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00273cc:	85 c0                	test   eax,eax
c00273ce:	0f 85 a1 01 00 00    	jne    c0027575 <__divsf3+0x221>
c00273d4:	e9 92 01 00 00       	jmp    c002756b <__divsf3+0x217>
c00273d9:	85 c9                	test   ecx,ecx
c00273db:	75 1b                	jne    c00273f8 <__divsf3+0xa4>
c00273dd:	8d 57 01             	lea    edx,[edi+0x1]
c00273e0:	80 e2 fe             	and    dl,0xfe
c00273e3:	74 1e                	je     c0027403 <__divsf3+0xaf>
c00273e5:	85 ff                	test   edi,edi
c00273e7:	0f 89 88 01 00 00    	jns    c0027575 <__divsf3+0x221>
c00273ed:	81 c3 00 00 00 80    	add    ebx,0x80000000
c00273f3:	e9 7d 01 00 00       	jmp    c0027575 <__divsf3+0x221>
c00273f8:	8d 56 ff             	lea    edx,[esi-0x1]
c00273fb:	01 c9                	add    ecx,ecx
c00273fd:	78 3d                	js     c002743c <__divsf3+0xe8>
c00273ff:	89 d6                	mov    esi,edx
c0027401:	eb f5                	jmp    c00273f8 <__divsf3+0xa4>
c0027403:	85 c0                	test   eax,eax
c0027405:	b8 00 00 00 00       	mov    eax,0x0
c002740a:	74 18                	je     c0027424 <__divsf3+0xd0>
c002740c:	52                   	push   edx
c002740d:	52                   	push   edx
c002740e:	50                   	push   eax
c002740f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027412:	e8 81 03 00 00       	call   c0027798 <__nesf2>
c0027417:	83 c4 10             	add    esp,0x10
c002741a:	85 c0                	test   eax,eax
c002741c:	0f 85 50 01 00 00    	jne    c0027572 <__divsf3+0x21e>
c0027422:	eb c1                	jmp    c00273e5 <__divsf3+0x91>
c0027424:	56                   	push   esi
c0027425:	56                   	push   esi
c0027426:	50                   	push   eax
c0027427:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002742a:	e8 69 03 00 00       	call   c0027798 <__nesf2>
c002742f:	83 c4 10             	add    esp,0x10
c0027432:	85 c0                	test   eax,eax
c0027434:	0f 84 31 01 00 00    	je     c002756b <__divsf3+0x217>
c002743a:	eb a9                	jmp    c00273e5 <__divsf3+0x91>
c002743c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c002743f:	c1 e3 08             	shl    ebx,0x8
c0027442:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027448:	8d 57 01             	lea    edx,[edi+0x1]
c002744b:	80 e2 fe             	and    dl,0xfe
c002744e:	75 71                	jne    c00274c1 <__divsf3+0x16d>
c0027450:	85 c0                	test   eax,eax
c0027452:	ba 00 00 00 00       	mov    edx,0x0
c0027457:	74 2f                	je     c0027488 <__divsf3+0x134>
c0027459:	51                   	push   ecx
c002745a:	51                   	push   ecx
c002745b:	52                   	push   edx
c002745c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002745f:	e8 f9 02 00 00       	call   c002775d <__eqsf2>
c0027464:	83 c4 10             	add    esp,0x10
c0027467:	85 c0                	test   eax,eax
c0027469:	0f 85 03 01 00 00    	jne    c0027572 <__divsf3+0x21e>
c002746f:	31 d2                	xor    edx,edx
c0027471:	89 d3                	mov    ebx,edx
c0027473:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027476:	31 f8                	xor    eax,edi
c0027478:	0f 89 f7 00 00 00    	jns    c0027575 <__divsf3+0x221>
c002747e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027483:	e9 ed 00 00 00       	jmp    c0027575 <__divsf3+0x221>
c0027488:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002748b:	50                   	push   eax
c002748c:	50                   	push   eax
c002748d:	52                   	push   edx
c002748e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027491:	e8 c7 02 00 00       	call   c002775d <__eqsf2>
c0027496:	83 c4 10             	add    esp,0x10
c0027499:	85 c0                	test   eax,eax
c002749b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002749e:	75 16                	jne    c00274b6 <__divsf3+0x162>
c00274a0:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00274a3:	31 fb                	xor    ebx,edi
c00274a5:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00274ab:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00274b1:	e9 bf 00 00 00       	jmp    c0027575 <__divsf3+0x221>
c00274b6:	8d 46 01             	lea    eax,[esi+0x1]
c00274b9:	01 db                	add    ebx,ebx
c00274bb:	78 04                	js     c00274c1 <__divsf3+0x16d>
c00274bd:	89 c6                	mov    esi,eax
c00274bf:	eb f5                	jmp    c00274b6 <__divsf3+0x162>
c00274c1:	89 c8                	mov    eax,ecx
c00274c3:	0d 00 00 00 80       	or     eax,0x80000000
c00274c8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00274ce:	31 d2                	xor    edx,edx
c00274d0:	39 d8                	cmp    eax,ebx
c00274d2:	72 07                	jb     c00274db <__divsf3+0x187>
c00274d4:	29 d8                	sub    eax,ebx
c00274d6:	ba 01 00 00 00       	mov    edx,0x1
c00274db:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c00274e2:	01 d2                	add    edx,edx
c00274e4:	89 c1                	mov    ecx,eax
c00274e6:	01 c0                	add    eax,eax
c00274e8:	85 c9                	test   ecx,ecx
c00274ea:	78 04                	js     c00274f0 <__divsf3+0x19c>
c00274ec:	39 c3                	cmp    ebx,eax
c00274ee:	77 05                	ja     c00274f5 <__divsf3+0x1a1>
c00274f0:	29 d8                	sub    eax,ebx
c00274f2:	83 ca 01             	or     edx,0x1
c00274f5:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c00274f8:	75 e8                	jne    c00274e2 <__divsf3+0x18e>
c00274fa:	85 c0                	test   eax,eax
c00274fc:	0f 95 c0             	setne  al
c00274ff:	0f b6 c0             	movzx  eax,al
c0027502:	c1 e2 06             	shl    edx,0x6
c0027505:	09 c2                	or     edx,eax
c0027507:	78 03                	js     c002750c <__divsf3+0x1b8>
c0027509:	01 d2                	add    edx,edx
c002750b:	4e                   	dec    esi
c002750c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027512:	7f 22                	jg     c0027536 <__divsf3+0x1e2>
c0027514:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002751a:	85 f6                	test   esi,esi
c002751c:	7f 23                	jg     c0027541 <__divsf3+0x1ed>
c002751e:	83 fe e9             	cmp    esi,0xffffffe9
c0027521:	7c 1a                	jl     c002753d <__divsf3+0x1e9>
c0027523:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027529:	b9 01 00 00 00       	mov    ecx,0x1
c002752e:	29 f1                	sub    ecx,esi
c0027530:	d3 ea                	shr    edx,cl
c0027532:	31 f6                	xor    esi,esi
c0027534:	eb 0b                	jmp    c0027541 <__divsf3+0x1ed>
c0027536:	be ff 00 00 00       	mov    esi,0xff
c002753b:	eb 02                	jmp    c002753f <__divsf3+0x1eb>
c002753d:	31 f6                	xor    esi,esi
c002753f:	31 d2                	xor    edx,edx
c0027541:	89 d0                	mov    eax,edx
c0027543:	c1 e8 08             	shr    eax,0x8
c0027546:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027549:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002754f:	09 fe                	or     esi,edi
c0027551:	c1 e6 17             	shl    esi,0x17
c0027554:	09 c6                	or     esi,eax
c0027556:	f6 c2 7f             	test   dl,0x7f
c0027559:	0f 95 c1             	setne  cl
c002755c:	09 c8                	or     eax,ecx
c002755e:	83 e0 01             	and    eax,0x1
c0027561:	c1 ea 07             	shr    edx,0x7
c0027564:	21 c2                	and    edx,eax
c0027566:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027569:	eb 0a                	jmp    c0027575 <__divsf3+0x221>
c002756b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027570:	eb 03                	jmp    c0027575 <__divsf3+0x221>
c0027572:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027575:	89 d8                	mov    eax,ebx
c0027577:	8d 65 f4             	lea    esp,[ebp-0xc]
c002757a:	5b                   	pop    ebx
c002757b:	5e                   	pop    esi
c002757c:	5f                   	pop    edi
c002757d:	5d                   	pop    ebp
c002757e:	c3                   	ret    

c002757f <__floatsisf>:
c002757f:	55                   	push   ebp
c0027580:	89 e5                	mov    ebp,esp
c0027582:	53                   	push   ebx
c0027583:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027586:	85 d2                	test   edx,edx
c0027588:	7e 2b                	jle    c00275b5 <__floatsisf+0x36>
c002758a:	0f bd ca             	bsr    ecx,edx
c002758d:	83 f1 1f             	xor    ecx,0x1f
c0027590:	d3 e2                	shl    edx,cl
c0027592:	89 d0                	mov    eax,edx
c0027594:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027599:	89 c3                	mov    ebx,eax
c002759b:	c1 eb 08             	shr    ebx,0x8
c002759e:	80 e2 7f             	and    dl,0x7f
c00275a1:	0f 95 c2             	setne  dl
c00275a4:	09 da                	or     edx,ebx
c00275a6:	83 e2 01             	and    edx,0x1
c00275a9:	c1 e8 07             	shr    eax,0x7
c00275ac:	21 c2                	and    edx,eax
c00275ae:	b8 9e 00 00 00       	mov    eax,0x9e
c00275b3:	eb 32                	jmp    c00275e7 <__floatsisf+0x68>
c00275b5:	b8 00 00 00 00       	mov    eax,0x0
c00275ba:	74 34                	je     c00275f0 <__floatsisf+0x71>
c00275bc:	f7 da                	neg    edx
c00275be:	0f bd ca             	bsr    ecx,edx
c00275c1:	83 f1 1f             	xor    ecx,0x1f
c00275c4:	d3 e2                	shl    edx,cl
c00275c6:	89 d0                	mov    eax,edx
c00275c8:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00275cd:	89 c3                	mov    ebx,eax
c00275cf:	c1 eb 08             	shr    ebx,0x8
c00275d2:	80 e2 7f             	and    dl,0x7f
c00275d5:	0f 95 c2             	setne  dl
c00275d8:	09 da                	or     edx,ebx
c00275da:	83 e2 01             	and    edx,0x1
c00275dd:	c1 e8 07             	shr    eax,0x7
c00275e0:	21 c2                	and    edx,eax
c00275e2:	b8 9e 01 00 00       	mov    eax,0x19e
c00275e7:	29 c8                	sub    eax,ecx
c00275e9:	c1 e0 17             	shl    eax,0x17
c00275ec:	09 d8                	or     eax,ebx
c00275ee:	01 d0                	add    eax,edx
c00275f0:	5b                   	pop    ebx
c00275f1:	5d                   	pop    ebp
c00275f2:	c3                   	ret    

c00275f3 <__floatunsisf>:
c00275f3:	55                   	push   ebp
c00275f4:	89 e5                	mov    ebp,esp
c00275f6:	53                   	push   ebx
c00275f7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00275fa:	31 c0                	xor    eax,eax
c00275fc:	85 d2                	test   edx,edx
c00275fe:	74 32                	je     c0027632 <__floatunsisf+0x3f>
c0027600:	0f bd ca             	bsr    ecx,edx
c0027603:	83 f1 1f             	xor    ecx,0x1f
c0027606:	d3 e2                	shl    edx,cl
c0027608:	89 d0                	mov    eax,edx
c002760a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002760f:	89 c3                	mov    ebx,eax
c0027611:	c1 eb 08             	shr    ebx,0x8
c0027614:	80 e2 7f             	and    dl,0x7f
c0027617:	0f 95 c2             	setne  dl
c002761a:	09 da                	or     edx,ebx
c002761c:	83 e2 01             	and    edx,0x1
c002761f:	c1 e8 07             	shr    eax,0x7
c0027622:	21 c2                	and    edx,eax
c0027624:	b8 9e 00 00 00       	mov    eax,0x9e
c0027629:	29 c8                	sub    eax,ecx
c002762b:	c1 e0 17             	shl    eax,0x17
c002762e:	09 d8                	or     eax,ebx
c0027630:	01 d0                	add    eax,edx
c0027632:	5b                   	pop    ebx
c0027633:	5d                   	pop    ebp
c0027634:	c3                   	ret    

c0027635 <__fixsfsi>:
c0027635:	55                   	push   ebp
c0027636:	89 e5                	mov    ebp,esp
c0027638:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002763b:	89 d1                	mov    ecx,edx
c002763d:	c1 e1 08             	shl    ecx,0x8
c0027640:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027646:	c1 fa 17             	sar    edx,0x17
c0027649:	78 1c                	js     c0027667 <__fixsfsi+0x32>
c002764b:	83 ea 7f             	sub    edx,0x7f
c002764e:	31 c0                	xor    eax,eax
c0027650:	83 fa 1e             	cmp    edx,0x1e
c0027653:	77 40                	ja     c0027695 <__fixsfsi+0x60>
c0027655:	89 c8                	mov    eax,ecx
c0027657:	0d 00 00 00 80       	or     eax,0x80000000
c002765c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027661:	29 d1                	sub    ecx,edx
c0027663:	d3 e8                	shr    eax,cl
c0027665:	eb 2e                	jmp    c0027695 <__fixsfsi+0x60>
c0027667:	31 c0                	xor    eax,eax
c0027669:	81 c2 81 00 00 00    	add    edx,0x81
c002766f:	78 24                	js     c0027695 <__fixsfsi+0x60>
c0027671:	83 fa 1e             	cmp    edx,0x1e
c0027674:	7e 09                	jle    c002767f <__fixsfsi+0x4a>
c0027676:	83 fa 1f             	cmp    edx,0x1f
c0027679:	75 18                	jne    c0027693 <__fixsfsi+0x5e>
c002767b:	85 c9                	test   ecx,ecx
c002767d:	75 14                	jne    c0027693 <__fixsfsi+0x5e>
c002767f:	89 c8                	mov    eax,ecx
c0027681:	0d 00 00 00 80       	or     eax,0x80000000
c0027686:	b9 1f 00 00 00       	mov    ecx,0x1f
c002768b:	29 d1                	sub    ecx,edx
c002768d:	d3 e8                	shr    eax,cl
c002768f:	f7 d8                	neg    eax
c0027691:	eb 02                	jmp    c0027695 <__fixsfsi+0x60>
c0027693:	31 c0                	xor    eax,eax
c0027695:	5d                   	pop    ebp
c0027696:	c3                   	ret    

c0027697 <__fixunssfsi>:
c0027697:	55                   	push   ebp
c0027698:	89 e5                	mov    ebp,esp
c002769a:	53                   	push   ebx
c002769b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002769e:	89 d3                	mov    ebx,edx
c00276a0:	c1 fb 17             	sar    ebx,0x17
c00276a3:	83 eb 7f             	sub    ebx,0x7f
c00276a6:	31 c0                	xor    eax,eax
c00276a8:	83 fb 1f             	cmp    ebx,0x1f
c00276ab:	77 18                	ja     c00276c5 <__fixunssfsi+0x2e>
c00276ad:	89 d0                	mov    eax,edx
c00276af:	c1 e0 08             	shl    eax,0x8
c00276b2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00276b7:	0d 00 00 00 80       	or     eax,0x80000000
c00276bc:	b9 1f 00 00 00       	mov    ecx,0x1f
c00276c1:	29 d9                	sub    ecx,ebx
c00276c3:	d3 e8                	shr    eax,cl
c00276c5:	5b                   	pop    ebx
c00276c6:	5d                   	pop    ebp
c00276c7:	c3                   	ret    

c00276c8 <__cmpsf2>:
c00276c8:	55                   	push   ebp
c00276c9:	89 e5                	mov    ebp,esp
c00276cb:	57                   	push   edi
c00276cc:	56                   	push   esi
c00276cd:	53                   	push   ebx
c00276ce:	83 ec 24             	sub    esp,0x24
c00276d1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00276d4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00276d7:	e8 4f 10 00 00       	call   c002872b <__truncdfsf2>
c00276dc:	5a                   	pop    edx
c00276dd:	59                   	pop    ecx
c00276de:	89 c3                	mov    ebx,eax
c00276e0:	c1 e8 17             	shr    eax,0x17
c00276e3:	0f b6 f0             	movzx  esi,al
c00276e6:	89 d8                	mov    eax,ebx
c00276e8:	c1 e8 1f             	shr    eax,0x1f
c00276eb:	31 c6                	xor    esi,eax
c00276ed:	c1 e3 08             	shl    ebx,0x8
c00276f0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00276f3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00276f6:	e8 30 10 00 00       	call   c002872b <__truncdfsf2>
c00276fb:	83 c4 10             	add    esp,0x10
c00276fe:	89 c1                	mov    ecx,eax
c0027700:	c1 e9 17             	shr    ecx,0x17
c0027703:	0f b6 c9             	movzx  ecx,cl
c0027706:	89 c7                	mov    edi,eax
c0027708:	c1 ef 1f             	shr    edi,0x1f
c002770b:	89 ca                	mov    edx,ecx
c002770d:	31 fa                	xor    edx,edi
c002770f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027712:	c1 e0 08             	shl    eax,0x8
c0027715:	89 c2                	mov    edx,eax
c0027717:	89 d8                	mov    eax,ebx
c0027719:	09 d0                	or     eax,edx
c002771b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027720:	09 f0                	or     eax,esi
c0027722:	75 08                	jne    c002772c <__cmpsf2+0x64>
c0027724:	31 c0                	xor    eax,eax
c0027726:	39 f9                	cmp    ecx,edi
c0027728:	75 0c                	jne    c0027736 <__cmpsf2+0x6e>
c002772a:	eb 29                	jmp    c0027755 <__cmpsf2+0x8d>
c002772c:	b8 01 00 00 00       	mov    eax,0x1
c0027731:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027734:	7f 1f                	jg     c0027755 <__cmpsf2+0x8d>
c0027736:	83 c8 ff             	or     eax,0xffffffff
c0027739:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002773c:	7c 17                	jl     c0027755 <__cmpsf2+0x8d>
c002773e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027744:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002774a:	b8 01 00 00 00       	mov    eax,0x1
c002774f:	39 d3                	cmp    ebx,edx
c0027751:	77 02                	ja     c0027755 <__cmpsf2+0x8d>
c0027753:	19 c0                	sbb    eax,eax
c0027755:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027758:	5b                   	pop    ebx
c0027759:	5e                   	pop    esi
c002775a:	5f                   	pop    edi
c002775b:	5d                   	pop    ebp
c002775c:	c3                   	ret    

c002775d <__eqsf2>:
c002775d:	55                   	push   ebp
c002775e:	89 e5                	mov    ebp,esp
c0027760:	83 ec 24             	sub    esp,0x24
c0027763:	6a 01                	push   0x1
c0027765:	83 ec 0c             	sub    esp,0xc
c0027768:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002776b:	e8 df 10 00 00       	call   c002884f <__extendsfdf2>
c0027770:	83 c4 10             	add    esp,0x10
c0027773:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027776:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027779:	52                   	push   edx
c002777a:	50                   	push   eax
c002777b:	50                   	push   eax
c002777c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002777f:	e8 cb 10 00 00       	call   c002884f <__extendsfdf2>
c0027784:	59                   	pop    ecx
c0027785:	59                   	pop    ecx
c0027786:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027789:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002778c:	52                   	push   edx
c002778d:	50                   	push   eax
c002778e:	e8 35 ff ff ff       	call   c00276c8 <__cmpsf2>
c0027793:	83 c4 20             	add    esp,0x20
c0027796:	c9                   	leave  
c0027797:	c3                   	ret    

c0027798 <__nesf2>:
c0027798:	eb c3                	jmp    c002775d <__eqsf2>

c002779a <__gtsf2>:
c002779a:	55                   	push   ebp
c002779b:	89 e5                	mov    ebp,esp
c002779d:	83 ec 24             	sub    esp,0x24
c00277a0:	6a ff                	push   0xffffffff
c00277a2:	83 ec 0c             	sub    esp,0xc
c00277a5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00277a8:	e8 a2 10 00 00       	call   c002884f <__extendsfdf2>
c00277ad:	83 c4 10             	add    esp,0x10
c00277b0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00277b3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00277b6:	52                   	push   edx
c00277b7:	50                   	push   eax
c00277b8:	50                   	push   eax
c00277b9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00277bc:	e8 8e 10 00 00       	call   c002884f <__extendsfdf2>
c00277c1:	59                   	pop    ecx
c00277c2:	59                   	pop    ecx
c00277c3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00277c6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00277c9:	52                   	push   edx
c00277ca:	50                   	push   eax
c00277cb:	e8 f8 fe ff ff       	call   c00276c8 <__cmpsf2>
c00277d0:	83 c4 20             	add    esp,0x20
c00277d3:	c9                   	leave  
c00277d4:	c3                   	ret    

c00277d5 <__gesf2>:
c00277d5:	eb c3                	jmp    c002779a <__gtsf2>

c00277d7 <__ltsf2>:
c00277d7:	eb 84                	jmp    c002775d <__eqsf2>

c00277d9 <__lesf2>:
c00277d9:	eb 82                	jmp    c002775d <__eqsf2>

c00277db <__adddf3>:
c00277db:	55                   	push   ebp
c00277dc:	89 e5                	mov    ebp,esp
c00277de:	57                   	push   edi
c00277df:	56                   	push   esi
c00277e0:	53                   	push   ebx
c00277e1:	83 ec 24             	sub    esp,0x24
c00277e4:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00277e7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00277ea:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00277ed:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00277f0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00277f3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00277f6:	89 c8                	mov    eax,ecx
c00277f8:	89 ce                	mov    esi,ecx
c00277fa:	c1 fe 14             	sar    esi,0x14
c00277fd:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027800:	89 fb                	mov    ebx,edi
c0027802:	89 fa                	mov    edx,edi
c0027804:	c1 e2 0b             	shl    edx,0xb
c0027807:	c1 e0 0b             	shl    eax,0xb
c002780a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002780f:	c1 eb 15             	shr    ebx,0x15
c0027812:	09 d8                	or     eax,ebx
c0027814:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027817:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002781a:	c1 fe 14             	sar    esi,0x14
c002781d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027820:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027823:	89 f3                	mov    ebx,esi
c0027825:	c1 e3 0b             	shl    ebx,0xb
c0027828:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002782b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002782e:	c1 e3 0b             	shl    ebx,0xb
c0027831:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027837:	c1 ee 15             	shr    esi,0x15
c002783a:	09 f3                	or     ebx,esi
c002783c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c002783f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027842:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027845:	0f 88 5f 02 00 00    	js     c0027aaa <__adddf3+0x2cf>
c002784b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002784e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027851:	85 db                	test   ebx,ebx
c0027853:	0f 8e c7 00 00 00    	jle    c0027920 <__adddf3+0x145>
c0027859:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027860:	75 1a                	jne    c002787c <__adddf3+0xa1>
c0027862:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027865:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027868:	0f 84 b2 05 00 00    	je     c0027e20 <__adddf3+0x645>
c002786e:	4b                   	dec    ebx
c002786f:	75 23                	jne    c0027894 <__adddf3+0xb9>
c0027871:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027874:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027877:	e9 99 00 00 00       	jmp    c0027915 <__adddf3+0x13a>
c002787c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002787f:	f7 d6                	not    esi
c0027881:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027887:	0f 84 93 05 00 00    	je     c0027e20 <__adddf3+0x645>
c002788d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027894:	83 fb 1f             	cmp    ebx,0x1f
c0027897:	7e 42                	jle    c00278db <__adddf3+0x100>
c0027899:	83 fb 3f             	cmp    ebx,0x3f
c002789c:	0f 8f 7e 05 00 00    	jg     c0027e20 <__adddf3+0x645>
c00278a2:	83 e3 1f             	and    ebx,0x1f
c00278a5:	89 d9                	mov    ecx,ebx
c00278a7:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00278aa:	d3 ef                	shr    edi,cl
c00278ac:	31 db                	xor    ebx,ebx
c00278ae:	85 c9                	test   ecx,ecx
c00278b0:	74 15                	je     c00278c7 <__adddf3+0xec>
c00278b2:	be 20 00 00 00       	mov    esi,0x20
c00278b7:	29 ce                	sub    esi,ecx
c00278b9:	89 f1                	mov    ecx,esi
c00278bb:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00278be:	d3 e6                	shl    esi,cl
c00278c0:	31 db                	xor    ebx,ebx
c00278c2:	85 f6                	test   esi,esi
c00278c4:	0f 95 c3             	setne  bl
c00278c7:	31 c9                	xor    ecx,ecx
c00278c9:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00278cd:	0f 95 c1             	setne  cl
c00278d0:	09 cf                	or     edi,ecx
c00278d2:	09 fb                	or     ebx,edi
c00278d4:	01 da                	add    edx,ebx
c00278d6:	83 d0 00             	adc    eax,0x0
c00278d9:	eb 3a                	jmp    c0027915 <__adddf3+0x13a>
c00278db:	bf 20 00 00 00       	mov    edi,0x20
c00278e0:	29 df                	sub    edi,ebx
c00278e2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278e5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00278e8:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00278eb:	d3 e6                	shl    esi,cl
c00278ed:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00278f0:	88 d9                	mov    cl,bl
c00278f2:	d3 ef                	shr    edi,cl
c00278f4:	09 fe                	or     esi,edi
c00278f6:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00278f9:	88 d9                	mov    cl,bl
c00278fb:	d3 ef                	shr    edi,cl
c00278fd:	89 fb                	mov    ebx,edi
c00278ff:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027902:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027905:	d3 e7                	shl    edi,cl
c0027907:	85 ff                	test   edi,edi
c0027909:	0f 95 c1             	setne  cl
c002790c:	0f b6 c9             	movzx  ecx,cl
c002790f:	09 ce                	or     esi,ecx
c0027911:	01 f2                	add    edx,esi
c0027913:	11 d8                	adc    eax,ebx
c0027915:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027918:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002791b:	e9 52 01 00 00       	jmp    c0027a72 <__adddf3+0x297>
c0027920:	0f 84 d5 00 00 00    	je     c00279fb <__adddf3+0x220>
c0027926:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027929:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c002792c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002792f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027932:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027939:	75 20                	jne    c002795b <__adddf3+0x180>
c002793b:	89 d6                	mov    esi,edx
c002793d:	09 c6                	or     esi,eax
c002793f:	0f 84 db 04 00 00    	je     c0027e20 <__adddf3+0x645>
c0027945:	4b                   	dec    ebx
c0027946:	75 29                	jne    c0027971 <__adddf3+0x196>
c0027948:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002794b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002794e:	01 d1                	add    ecx,edx
c0027950:	11 c6                	adc    esi,eax
c0027952:	89 f0                	mov    eax,esi
c0027954:	89 ca                	mov    edx,ecx
c0027956:	e9 17 01 00 00       	jmp    c0027a72 <__adddf3+0x297>
c002795b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002795e:	f7 d6                	not    esi
c0027960:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027966:	0f 84 b4 04 00 00    	je     c0027e20 <__adddf3+0x645>
c002796c:	0d 00 00 00 80       	or     eax,0x80000000
c0027971:	83 fb 1f             	cmp    ebx,0x1f
c0027974:	7e 48                	jle    c00279be <__adddf3+0x1e3>
c0027976:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027979:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002797c:	83 fb 3f             	cmp    ebx,0x3f
c002797f:	0f 8f 9b 04 00 00    	jg     c0027e20 <__adddf3+0x645>
c0027985:	83 e3 1f             	and    ebx,0x1f
c0027988:	89 d9                	mov    ecx,ebx
c002798a:	89 c7                	mov    edi,eax
c002798c:	d3 ef                	shr    edi,cl
c002798e:	31 db                	xor    ebx,ebx
c0027990:	85 c9                	test   ecx,ecx
c0027992:	74 12                	je     c00279a6 <__adddf3+0x1cb>
c0027994:	be 20 00 00 00       	mov    esi,0x20
c0027999:	29 ce                	sub    esi,ecx
c002799b:	89 f1                	mov    ecx,esi
c002799d:	d3 e0                	shl    eax,cl
c002799f:	31 db                	xor    ebx,ebx
c00279a1:	85 c0                	test   eax,eax
c00279a3:	0f 95 c3             	setne  bl
c00279a6:	31 c0                	xor    eax,eax
c00279a8:	85 d2                	test   edx,edx
c00279aa:	0f 95 c0             	setne  al
c00279ad:	09 c7                	or     edi,eax
c00279af:	09 fb                	or     ebx,edi
c00279b1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279b4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00279b7:	01 da                	add    edx,ebx
c00279b9:	83 d6 00             	adc    esi,0x0
c00279bc:	eb 39                	jmp    c00279f7 <__adddf3+0x21c>
c00279be:	be 20 00 00 00       	mov    esi,0x20
c00279c3:	29 de                	sub    esi,ebx
c00279c5:	89 c7                	mov    edi,eax
c00279c7:	89 f1                	mov    ecx,esi
c00279c9:	d3 e7                	shl    edi,cl
c00279cb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00279ce:	89 d7                	mov    edi,edx
c00279d0:	88 d9                	mov    cl,bl
c00279d2:	d3 ef                	shr    edi,cl
c00279d4:	89 f9                	mov    ecx,edi
c00279d6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279d9:	09 cf                	or     edi,ecx
c00279db:	88 d9                	mov    cl,bl
c00279dd:	d3 e8                	shr    eax,cl
c00279df:	89 f1                	mov    ecx,esi
c00279e1:	d3 e2                	shl    edx,cl
c00279e3:	85 d2                	test   edx,edx
c00279e5:	0f 95 c2             	setne  dl
c00279e8:	0f b6 d2             	movzx  edx,dl
c00279eb:	09 d7                	or     edi,edx
c00279ed:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279f0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00279f3:	01 fa                	add    edx,edi
c00279f5:	11 c6                	adc    esi,eax
c00279f7:	89 f0                	mov    eax,esi
c00279f9:	eb 77                	jmp    c0027a72 <__adddf3+0x297>
c00279fb:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00279fe:	46                   	inc    esi
c00279ff:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027a02:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027a08:	75 41                	jne    c0027a4b <__adddf3+0x270>
c0027a0a:	89 d3                	mov    ebx,edx
c0027a0c:	09 c3                	or     ebx,eax
c0027a0e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027a15:	75 27                	jne    c0027a3e <__adddf3+0x263>
c0027a17:	85 db                	test   ebx,ebx
c0027a19:	0f 84 fb 03 00 00    	je     c0027e1a <__adddf3+0x63f>
c0027a1f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027a22:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027a25:	0f 84 f5 03 00 00    	je     c0027e20 <__adddf3+0x645>
c0027a2b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027a2e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027a31:	85 c0                	test   eax,eax
c0027a33:	0f 89 91 03 00 00    	jns    c0027dca <__adddf3+0x5ef>
c0027a39:	e9 85 03 00 00       	jmp    c0027dc3 <__adddf3+0x5e8>
c0027a3e:	85 db                	test   ebx,ebx
c0027a40:	0f 85 da 03 00 00    	jne    c0027e20 <__adddf3+0x645>
c0027a46:	e9 cf 03 00 00       	jmp    c0027e1a <__adddf3+0x63f>
c0027a4b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027a4e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027a51:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027a54:	f7 d1                	not    ecx
c0027a56:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027a5c:	0f 84 70 03 00 00    	je     c0027dd2 <__adddf3+0x5f7>
c0027a62:	d1 ea                	shr    edx,1
c0027a64:	89 c1                	mov    ecx,eax
c0027a66:	c1 e1 1f             	shl    ecx,0x1f
c0027a69:	09 ca                	or     edx,ecx
c0027a6b:	d1 e8                	shr    eax,1
c0027a6d:	e9 6f 03 00 00       	jmp    c0027de1 <__adddf3+0x606>
c0027a72:	85 c0                	test   eax,eax
c0027a74:	0f 89 67 03 00 00    	jns    c0027de1 <__adddf3+0x606>
c0027a7a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027a7d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027a80:	f7 d1                	not    ecx
c0027a82:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027a88:	0f 84 44 03 00 00    	je     c0027dd2 <__adddf3+0x5f7>
c0027a8e:	89 d1                	mov    ecx,edx
c0027a90:	d1 e9                	shr    ecx,1
c0027a92:	83 e2 01             	and    edx,0x1
c0027a95:	09 ca                	or     edx,ecx
c0027a97:	89 c1                	mov    ecx,eax
c0027a99:	c1 e1 1f             	shl    ecx,0x1f
c0027a9c:	09 ca                	or     edx,ecx
c0027a9e:	d1 e8                	shr    eax,1
c0027aa0:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027aa5:	e9 37 03 00 00       	jmp    c0027de1 <__adddf3+0x606>
c0027aaa:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027aad:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027ab3:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027ab6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027ab9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027abf:	29 de                	sub    esi,ebx
c0027ac1:	85 f6                	test   esi,esi
c0027ac3:	0f 8e bd 00 00 00    	jle    c0027b86 <__adddf3+0x3ab>
c0027ac9:	85 db                	test   ebx,ebx
c0027acb:	75 17                	jne    c0027ae4 <__adddf3+0x309>
c0027acd:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027ad0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027ad3:	0f 84 47 03 00 00    	je     c0027e20 <__adddf3+0x645>
c0027ad9:	4e                   	dec    esi
c0027ada:	75 20                	jne    c0027afc <__adddf3+0x321>
c0027adc:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027adf:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027ae2:	eb 5b                	jmp    c0027b3f <__adddf3+0x364>
c0027ae4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027ae7:	f7 d3                	not    ebx
c0027ae9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027aef:	0f 84 2b 03 00 00    	je     c0027e20 <__adddf3+0x645>
c0027af5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027afc:	83 fe 1f             	cmp    esi,0x1f
c0027aff:	7e 49                	jle    c0027b4a <__adddf3+0x36f>
c0027b01:	83 fe 3f             	cmp    esi,0x3f
c0027b04:	0f 8f 16 03 00 00    	jg     c0027e20 <__adddf3+0x645>
c0027b0a:	83 e6 1f             	and    esi,0x1f
c0027b0d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027b10:	89 f1                	mov    ecx,esi
c0027b12:	d3 ef                	shr    edi,cl
c0027b14:	31 db                	xor    ebx,ebx
c0027b16:	85 f6                	test   esi,esi
c0027b18:	74 13                	je     c0027b2d <__adddf3+0x352>
c0027b1a:	b9 20 00 00 00       	mov    ecx,0x20
c0027b1f:	29 f1                	sub    ecx,esi
c0027b21:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027b24:	d3 e6                	shl    esi,cl
c0027b26:	31 db                	xor    ebx,ebx
c0027b28:	85 f6                	test   esi,esi
c0027b2a:	0f 95 c3             	setne  bl
c0027b2d:	31 c9                	xor    ecx,ecx
c0027b2f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027b33:	0f 95 c1             	setne  cl
c0027b36:	09 cf                	or     edi,ecx
c0027b38:	09 fb                	or     ebx,edi
c0027b3a:	29 da                	sub    edx,ebx
c0027b3c:	83 d8 00             	sbb    eax,0x0
c0027b3f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b42:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b45:	e9 aa 01 00 00       	jmp    c0027cf4 <__adddf3+0x519>
c0027b4a:	bf 20 00 00 00       	mov    edi,0x20
c0027b4f:	29 f7                	sub    edi,esi
c0027b51:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b54:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027b57:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027b5a:	d3 e3                	shl    ebx,cl
c0027b5c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027b5f:	89 f1                	mov    ecx,esi
c0027b61:	d3 ef                	shr    edi,cl
c0027b63:	09 fb                	or     ebx,edi
c0027b65:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027b68:	89 f1                	mov    ecx,esi
c0027b6a:	d3 ef                	shr    edi,cl
c0027b6c:	89 fe                	mov    esi,edi
c0027b6e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027b71:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027b74:	d3 e7                	shl    edi,cl
c0027b76:	85 ff                	test   edi,edi
c0027b78:	0f 95 c1             	setne  cl
c0027b7b:	0f b6 c9             	movzx  ecx,cl
c0027b7e:	09 cb                	or     ebx,ecx
c0027b80:	29 da                	sub    edx,ebx
c0027b82:	19 f0                	sbb    eax,esi
c0027b84:	eb b9                	jmp    c0027b3f <__adddf3+0x364>
c0027b86:	0f 84 cd 00 00 00    	je     c0027c59 <__adddf3+0x47e>
c0027b8c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027b8f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027b92:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027b95:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027b99:	75 1b                	jne    c0027bb6 <__adddf3+0x3db>
c0027b9b:	89 d6                	mov    esi,edx
c0027b9d:	09 c6                	or     esi,eax
c0027b9f:	0f 84 7b 02 00 00    	je     c0027e20 <__adddf3+0x645>
c0027ba5:	4b                   	dec    ebx
c0027ba6:	75 24                	jne    c0027bcc <__adddf3+0x3f1>
c0027ba8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027bab:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027bae:	29 d1                	sub    ecx,edx
c0027bb0:	19 c6                	sbb    esi,eax
c0027bb2:	89 ca                	mov    edx,ecx
c0027bb4:	eb 61                	jmp    c0027c17 <__adddf3+0x43c>
c0027bb6:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027bb9:	f7 d6                	not    esi
c0027bbb:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027bc1:	0f 84 59 02 00 00    	je     c0027e20 <__adddf3+0x645>
c0027bc7:	0d 00 00 00 80       	or     eax,0x80000000
c0027bcc:	83 fb 1f             	cmp    ebx,0x1f
c0027bcf:	7e 4d                	jle    c0027c1e <__adddf3+0x443>
c0027bd1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027bd4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027bd7:	83 fb 3f             	cmp    ebx,0x3f
c0027bda:	0f 8f 40 02 00 00    	jg     c0027e20 <__adddf3+0x645>
c0027be0:	83 e3 1f             	and    ebx,0x1f
c0027be3:	89 d9                	mov    ecx,ebx
c0027be5:	89 c7                	mov    edi,eax
c0027be7:	d3 ef                	shr    edi,cl
c0027be9:	31 db                	xor    ebx,ebx
c0027beb:	85 c9                	test   ecx,ecx
c0027bed:	74 12                	je     c0027c01 <__adddf3+0x426>
c0027bef:	be 20 00 00 00       	mov    esi,0x20
c0027bf4:	29 ce                	sub    esi,ecx
c0027bf6:	89 f1                	mov    ecx,esi
c0027bf8:	d3 e0                	shl    eax,cl
c0027bfa:	31 db                	xor    ebx,ebx
c0027bfc:	85 c0                	test   eax,eax
c0027bfe:	0f 95 c3             	setne  bl
c0027c01:	31 c0                	xor    eax,eax
c0027c03:	85 d2                	test   edx,edx
c0027c05:	0f 95 c0             	setne  al
c0027c08:	09 c7                	or     edi,eax
c0027c0a:	09 fb                	or     ebx,edi
c0027c0c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027c0f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027c12:	29 da                	sub    edx,ebx
c0027c14:	83 de 00             	sbb    esi,0x0
c0027c17:	89 f0                	mov    eax,esi
c0027c19:	e9 d6 00 00 00       	jmp    c0027cf4 <__adddf3+0x519>
c0027c1e:	be 20 00 00 00       	mov    esi,0x20
c0027c23:	29 de                	sub    esi,ebx
c0027c25:	89 c7                	mov    edi,eax
c0027c27:	89 f1                	mov    ecx,esi
c0027c29:	d3 e7                	shl    edi,cl
c0027c2b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027c2e:	89 d7                	mov    edi,edx
c0027c30:	88 d9                	mov    cl,bl
c0027c32:	d3 ef                	shr    edi,cl
c0027c34:	89 f9                	mov    ecx,edi
c0027c36:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c39:	09 cf                	or     edi,ecx
c0027c3b:	88 d9                	mov    cl,bl
c0027c3d:	d3 e8                	shr    eax,cl
c0027c3f:	89 f1                	mov    ecx,esi
c0027c41:	d3 e2                	shl    edx,cl
c0027c43:	85 d2                	test   edx,edx
c0027c45:	0f 95 c2             	setne  dl
c0027c48:	0f b6 d2             	movzx  edx,dl
c0027c4b:	09 d7                	or     edi,edx
c0027c4d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027c50:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027c53:	29 fa                	sub    edx,edi
c0027c55:	19 c6                	sbb    esi,eax
c0027c57:	eb be                	jmp    c0027c17 <__adddf3+0x43c>
c0027c59:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027c5c:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027c5f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027c65:	75 6a                	jne    c0027cd1 <__adddf3+0x4f6>
c0027c67:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027c6b:	75 58                	jne    c0027cc5 <__adddf3+0x4ea>
c0027c6d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027c70:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027c73:	89 d6                	mov    esi,edx
c0027c75:	09 c6                	or     esi,eax
c0027c77:	75 17                	jne    c0027c90 <__adddf3+0x4b5>
c0027c79:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027c7c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027c7f:	85 db                	test   ebx,ebx
c0027c81:	0f 85 99 01 00 00    	jne    c0027e20 <__adddf3+0x645>
c0027c87:	31 ff                	xor    edi,edi
c0027c89:	31 c9                	xor    ecx,ecx
c0027c8b:	e9 90 01 00 00       	jmp    c0027e20 <__adddf3+0x645>
c0027c90:	85 db                	test   ebx,ebx
c0027c92:	0f 84 88 01 00 00    	je     c0027e20 <__adddf3+0x645>
c0027c98:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027c9b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027c9e:	85 c0                	test   eax,eax
c0027ca0:	79 10                	jns    c0027cb2 <__adddf3+0x4d7>
c0027ca2:	31 c9                	xor    ecx,ecx
c0027ca4:	f7 da                	neg    edx
c0027ca6:	0f 95 c1             	setne  cl
c0027ca9:	01 c8                	add    eax,ecx
c0027cab:	f7 d8                	neg    eax
c0027cad:	e9 2f 01 00 00       	jmp    c0027de1 <__adddf3+0x606>
c0027cb2:	31 ff                	xor    edi,edi
c0027cb4:	31 c9                	xor    ecx,ecx
c0027cb6:	89 c3                	mov    ebx,eax
c0027cb8:	09 d3                	or     ebx,edx
c0027cba:	0f 84 60 01 00 00    	je     c0027e20 <__adddf3+0x645>
c0027cc0:	e9 05 01 00 00       	jmp    c0027dca <__adddf3+0x5ef>
c0027cc5:	31 ff                	xor    edi,edi
c0027cc7:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027ccc:	e9 4f 01 00 00       	jmp    c0027e20 <__adddf3+0x645>
c0027cd1:	89 c1                	mov    ecx,eax
c0027cd3:	89 d0                	mov    eax,edx
c0027cd5:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027cd8:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027cdb:	89 ca                	mov    edx,ecx
c0027cdd:	85 c9                	test   ecx,ecx
c0027cdf:	79 2c                	jns    c0027d0d <__adddf3+0x532>
c0027ce1:	31 c9                	xor    ecx,ecx
c0027ce3:	f7 d8                	neg    eax
c0027ce5:	0f 95 c1             	setne  cl
c0027ce8:	01 ca                	add    edx,ecx
c0027cea:	f7 da                	neg    edx
c0027cec:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027cef:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027cf2:	eb 19                	jmp    c0027d0d <__adddf3+0x532>
c0027cf4:	85 c0                	test   eax,eax
c0027cf6:	0f 89 e5 00 00 00    	jns    c0027de1 <__adddf3+0x606>
c0027cfc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027d01:	89 c1                	mov    ecx,eax
c0027d03:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027d06:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027d09:	89 d0                	mov    eax,edx
c0027d0b:	89 ca                	mov    edx,ecx
c0027d0d:	85 d2                	test   edx,edx
c0027d0f:	74 59                	je     c0027d6a <__adddf3+0x58f>
c0027d11:	0f bd da             	bsr    ebx,edx
c0027d14:	83 f3 1f             	xor    ebx,0x1f
c0027d17:	88 d9                	mov    cl,bl
c0027d19:	d3 e2                	shl    edx,cl
c0027d1b:	bf 20 00 00 00       	mov    edi,0x20
c0027d20:	89 f9                	mov    ecx,edi
c0027d22:	29 d9                	sub    ecx,ebx
c0027d24:	89 c6                	mov    esi,eax
c0027d26:	d3 ee                	shr    esi,cl
c0027d28:	09 d6                	or     esi,edx
c0027d2a:	88 d9                	mov    cl,bl
c0027d2c:	d3 e0                	shl    eax,cl
c0027d2e:	89 c2                	mov    edx,eax
c0027d30:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d33:	25 ff 07 00 00       	and    eax,0x7ff
c0027d38:	39 d8                	cmp    eax,ebx
c0027d3a:	7f 22                	jg     c0027d5e <__adddf3+0x583>
c0027d3c:	29 c3                	sub    ebx,eax
c0027d3e:	43                   	inc    ebx
c0027d3f:	88 d9                	mov    cl,bl
c0027d41:	d3 ea                	shr    edx,cl
c0027d43:	29 df                	sub    edi,ebx
c0027d45:	89 f9                	mov    ecx,edi
c0027d47:	89 f0                	mov    eax,esi
c0027d49:	d3 e0                	shl    eax,cl
c0027d4b:	09 c2                	or     edx,eax
c0027d4d:	89 f0                	mov    eax,esi
c0027d4f:	88 d9                	mov    cl,bl
c0027d51:	d3 e8                	shr    eax,cl
c0027d53:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027d56:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027d5c:	eb 6f                	jmp    c0027dcd <__adddf3+0x5f2>
c0027d5e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d61:	29 d8                	sub    eax,ebx
c0027d63:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d66:	89 f0                	mov    eax,esi
c0027d68:	eb 59                	jmp    c0027dc3 <__adddf3+0x5e8>
c0027d6a:	85 c0                	test   eax,eax
c0027d6c:	74 6a                	je     c0027dd8 <__adddf3+0x5fd>
c0027d6e:	0f bd c8             	bsr    ecx,eax
c0027d71:	83 f1 1f             	xor    ecx,0x1f
c0027d74:	d3 e0                	shl    eax,cl
c0027d76:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027d79:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027d7f:	83 c1 20             	add    ecx,0x20
c0027d82:	39 cb                	cmp    ebx,ecx
c0027d84:	7f 35                	jg     c0027dbb <__adddf3+0x5e0>
c0027d86:	29 d9                	sub    ecx,ebx
c0027d88:	8d 71 01             	lea    esi,[ecx+0x1]
c0027d8b:	83 fe 1f             	cmp    esi,0x1f
c0027d8e:	7e 09                	jle    c0027d99 <__adddf3+0x5be>
c0027d90:	83 e9 1f             	sub    ecx,0x1f
c0027d93:	d3 e8                	shr    eax,cl
c0027d95:	89 c3                	mov    ebx,eax
c0027d97:	eb 11                	jmp    c0027daa <__adddf3+0x5cf>
c0027d99:	b9 20 00 00 00       	mov    ecx,0x20
c0027d9e:	29 f1                	sub    ecx,esi
c0027da0:	89 c3                	mov    ebx,eax
c0027da2:	d3 e3                	shl    ebx,cl
c0027da4:	89 f1                	mov    ecx,esi
c0027da6:	d3 e8                	shr    eax,cl
c0027da8:	89 c2                	mov    edx,eax
c0027daa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027dad:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027db2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027db5:	89 d0                	mov    eax,edx
c0027db7:	89 da                	mov    edx,ebx
c0027db9:	eb 26                	jmp    c0027de1 <__adddf3+0x606>
c0027dbb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027dbe:	29 cf                	sub    edi,ecx
c0027dc0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027dc3:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027dc8:	eb 17                	jmp    c0027de1 <__adddf3+0x606>
c0027dca:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027dcd:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027dd0:	eb 0f                	jmp    c0027de1 <__adddf3+0x606>
c0027dd2:	31 d2                	xor    edx,edx
c0027dd4:	31 c0                	xor    eax,eax
c0027dd6:	eb 09                	jmp    c0027de1 <__adddf3+0x606>
c0027dd8:	89 c2                	mov    edx,eax
c0027dda:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027de1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027de4:	c1 e1 14             	shl    ecx,0x14
c0027de7:	89 c3                	mov    ebx,eax
c0027de9:	c1 eb 0b             	shr    ebx,0xb
c0027dec:	09 d9                	or     ecx,ebx
c0027dee:	89 d3                	mov    ebx,edx
c0027df0:	c1 eb 0b             	shr    ebx,0xb
c0027df3:	c1 e0 15             	shl    eax,0x15
c0027df6:	09 d8                	or     eax,ebx
c0027df8:	89 c7                	mov    edi,eax
c0027dfa:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027e00:	0f 95 c0             	setne  al
c0027e03:	89 c6                	mov    esi,eax
c0027e05:	09 f3                	or     ebx,esi
c0027e07:	83 e3 01             	and    ebx,0x1
c0027e0a:	c1 ea 0a             	shr    edx,0xa
c0027e0d:	21 da                	and    edx,ebx
c0027e0f:	89 f8                	mov    eax,edi
c0027e11:	01 d0                	add    eax,edx
c0027e13:	83 d1 00             	adc    ecx,0x0
c0027e16:	89 c7                	mov    edi,eax
c0027e18:	eb 06                	jmp    c0027e20 <__adddf3+0x645>
c0027e1a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027e1d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027e20:	89 f8                	mov    eax,edi
c0027e22:	89 ca                	mov    edx,ecx
c0027e24:	83 c4 24             	add    esp,0x24
c0027e27:	5b                   	pop    ebx
c0027e28:	5e                   	pop    esi
c0027e29:	5f                   	pop    edi
c0027e2a:	5d                   	pop    ebp
c0027e2b:	c3                   	ret    

c0027e2c <__subdf3>:
c0027e2c:	55                   	push   ebp
c0027e2d:	89 e5                	mov    ebp,esp
c0027e2f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027e32:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027e35:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027e3b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027e3e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027e41:	5d                   	pop    ebp
c0027e42:	e9 94 f9 ff ff       	jmp    c00277db <__adddf3>

c0027e47 <__negdf2>:
c0027e47:	55                   	push   ebp
c0027e48:	89 e5                	mov    ebp,esp
c0027e4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027e4d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027e50:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027e56:	5d                   	pop    ebp
c0027e57:	c3                   	ret    

c0027e58 <__muldf3>:
c0027e58:	55                   	push   ebp
c0027e59:	89 e5                	mov    ebp,esp
c0027e5b:	57                   	push   edi
c0027e5c:	56                   	push   esi
c0027e5d:	53                   	push   ebx
c0027e5e:	83 ec 24             	sub    esp,0x24
c0027e61:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027e64:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027e67:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e6a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027e6d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027e70:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027e73:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027e76:	89 c8                	mov    eax,ecx
c0027e78:	c1 f8 14             	sar    eax,0x14
c0027e7b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027e7e:	89 f8                	mov    eax,edi
c0027e80:	89 fb                	mov    ebx,edi
c0027e82:	c1 e3 0b             	shl    ebx,0xb
c0027e85:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027e88:	c1 e1 0b             	shl    ecx,0xb
c0027e8b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027e91:	c1 e8 15             	shr    eax,0x15
c0027e94:	09 c1                	or     ecx,eax
c0027e96:	89 d6                	mov    esi,edx
c0027e98:	89 d0                	mov    eax,edx
c0027e9a:	c1 f8 14             	sar    eax,0x14
c0027e9d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027ea0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027ea3:	89 c3                	mov    ebx,eax
c0027ea5:	c1 e3 0b             	shl    ebx,0xb
c0027ea8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027eab:	c1 e6 0b             	shl    esi,0xb
c0027eae:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027eb4:	c1 e8 15             	shr    eax,0x15
c0027eb7:	09 c6                	or     esi,eax
c0027eb9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ebc:	25 ff 07 00 00       	and    eax,0x7ff
c0027ec1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027ec4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ec7:	25 ff 07 00 00       	and    eax,0x7ff
c0027ecc:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027ecf:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027ed2:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027ed5:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027edc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027edf:	40                   	inc    eax
c0027ee0:	a9 fe 07 00 00       	test   eax,0x7fe
c0027ee5:	0f 85 8d 00 00 00    	jne    c0027f78 <__muldf3+0x120>
c0027eeb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027eee:	09 c8                	or     eax,ecx
c0027ef0:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027ef4:	74 44                	je     c0027f3a <__muldf3+0xe2>
c0027ef6:	85 c0                	test   eax,eax
c0027ef8:	0f 85 31 02 00 00    	jne    c002812f <__muldf3+0x2d7>
c0027efe:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027f01:	40                   	inc    eax
c0027f02:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f07:	75 13                	jne    c0027f1c <__muldf3+0xc4>
c0027f09:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027f0c:	09 f1                	or     ecx,esi
c0027f0e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027f12:	74 22                	je     c0027f36 <__muldf3+0xde>
c0027f14:	85 c9                	test   ecx,ecx
c0027f16:	0f 85 0d 02 00 00    	jne    c0028129 <__muldf3+0x2d1>
c0027f1c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027f20:	0f 89 09 02 00 00    	jns    c002812f <__muldf3+0x2d7>
c0027f26:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027f29:	05 00 00 00 80       	add    eax,0x80000000
c0027f2e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027f31:	e9 f9 01 00 00       	jmp    c002812f <__muldf3+0x2d7>
c0027f36:	85 c9                	test   ecx,ecx
c0027f38:	eb 2e                	jmp    c0027f68 <__muldf3+0x110>
c0027f3a:	85 c0                	test   eax,eax
c0027f3c:	74 20                	je     c0027f5e <__muldf3+0x106>
c0027f3e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027f41:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027f44:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f47:	c1 ef 1f             	shr    edi,0x1f
c0027f4a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027f4d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027f50:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027f53:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027f56:	09 f9                	or     ecx,edi
c0027f58:	78 1e                	js     c0027f78 <__muldf3+0x120>
c0027f5a:	89 c3                	mov    ebx,eax
c0027f5c:	eb e0                	jmp    c0027f3e <__muldf3+0xe6>
c0027f5e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027f61:	f7 d0                	not    eax
c0027f63:	a9 ff 07 00 00       	test   eax,0x7ff
c0027f68:	75 b2                	jne    c0027f1c <__muldf3+0xc4>
c0027f6a:	31 ff                	xor    edi,edi
c0027f6c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027f73:	e9 b7 01 00 00       	jmp    c002812f <__muldf3+0x2d7>
c0027f78:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027f7b:	40                   	inc    eax
c0027f7c:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f81:	75 57                	jne    c0027fda <__muldf3+0x182>
c0027f83:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027f86:	09 f0                	or     eax,esi
c0027f88:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027f8c:	74 23                	je     c0027fb1 <__muldf3+0x159>
c0027f8e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027f92:	0f 89 91 01 00 00    	jns    c0028129 <__muldf3+0x2d1>
c0027f98:	85 c0                	test   eax,eax
c0027f9a:	0f 85 89 01 00 00    	jne    c0028129 <__muldf3+0x2d1>
c0027fa0:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027fa3:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027fa9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027fac:	e9 7e 01 00 00       	jmp    c002812f <__muldf3+0x2d7>
c0027fb1:	85 c0                	test   eax,eax
c0027fb3:	75 0c                	jne    c0027fc1 <__muldf3+0x169>
c0027fb5:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027fb9:	0f 89 6a 01 00 00    	jns    c0028129 <__muldf3+0x2d1>
c0027fbf:	eb df                	jmp    c0027fa0 <__muldf3+0x148>
c0027fc1:	01 f6                	add    esi,esi
c0027fc3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027fc6:	c1 ea 1f             	shr    edx,0x1f
c0027fc9:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027fcc:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027fcf:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027fd2:	09 d6                	or     esi,edx
c0027fd4:	78 04                	js     c0027fda <__muldf3+0x182>
c0027fd6:	89 c3                	mov    ebx,eax
c0027fd8:	eb e7                	jmp    c0027fc1 <__muldf3+0x169>
c0027fda:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027fe0:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027fe6:	89 c8                	mov    eax,ecx
c0027fe8:	f7 e6                	mul    esi
c0027fea:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027fed:	89 c7                	mov    edi,eax
c0027fef:	89 c8                	mov    eax,ecx
c0027ff1:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027ff4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027ff7:	89 c1                	mov    ecx,eax
c0027ff9:	89 f0                	mov    eax,esi
c0027ffb:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027ffe:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0028001:	89 c6                	mov    esi,eax
c0028003:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028006:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028009:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002800c:	31 c0                	xor    eax,eax
c002800e:	01 f1                	add    ecx,esi
c0028010:	0f 92 c0             	setb   al
c0028013:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0028016:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0028019:	83 d6 00             	adc    esi,0x0
c002801c:	01 c7                	add    edi,eax
c002801e:	83 d6 00             	adc    esi,0x0
c0028021:	01 ca                	add    edx,ecx
c0028023:	0f 92 c1             	setb   cl
c0028026:	0f b6 c9             	movzx  ecx,cl
c0028029:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c002802c:	83 d6 00             	adc    esi,0x0
c002802f:	01 cf                	add    edi,ecx
c0028031:	83 d6 00             	adc    esi,0x0
c0028034:	31 c9                	xor    ecx,ecx
c0028036:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0028039:	0f 95 c1             	setne  cl
c002803c:	09 cf                	or     edi,ecx
c002803e:	85 f6                	test   esi,esi
c0028040:	78 0c                	js     c002804e <__muldf3+0x1f6>
c0028042:	01 f6                	add    esi,esi
c0028044:	89 f8                	mov    eax,edi
c0028046:	c1 e8 1f             	shr    eax,0x1f
c0028049:	09 c6                	or     esi,eax
c002804b:	01 ff                	add    edi,edi
c002804d:	4b                   	dec    ebx
c002804e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0028054:	0f 8f 85 00 00 00    	jg     c00280df <__muldf3+0x287>
c002805a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0028060:	85 db                	test   ebx,ebx
c0028062:	0f 8f 84 00 00 00    	jg     c00280ec <__muldf3+0x294>
c0028068:	83 fb cc             	cmp    ebx,0xffffffcc
c002806b:	7c 79                	jl     c00280e6 <__muldf3+0x28e>
c002806d:	ba 01 00 00 00       	mov    edx,0x1
c0028072:	29 da                	sub    edx,ebx
c0028074:	81 ce 00 00 00 80    	or     esi,0x80000000
c002807a:	83 fa 1f             	cmp    edx,0x1f
c002807d:	7e 30                	jle    c00280af <__muldf3+0x257>
c002807f:	83 fa 20             	cmp    edx,0x20
c0028082:	75 0b                	jne    c002808f <__muldf3+0x237>
c0028084:	31 c0                	xor    eax,eax
c0028086:	85 ff                	test   edi,edi
c0028088:	0f 95 c0             	setne  al
c002808b:	89 c7                	mov    edi,eax
c002808d:	eb 1a                	jmp    c00280a9 <__muldf3+0x251>
c002808f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0028092:	89 f0                	mov    eax,esi
c0028094:	d3 e0                	shl    eax,cl
c0028096:	09 f8                	or     eax,edi
c0028098:	0f 95 c0             	setne  al
c002809b:	0f b6 c0             	movzx  eax,al
c002809e:	89 c7                	mov    edi,eax
c00280a0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00280a5:	29 d9                	sub    ecx,ebx
c00280a7:	d3 ee                	shr    esi,cl
c00280a9:	09 f7                	or     edi,esi
c00280ab:	31 db                	xor    ebx,ebx
c00280ad:	eb 3b                	jmp    c00280ea <__muldf3+0x292>
c00280af:	83 c3 1f             	add    ebx,0x1f
c00280b2:	89 f0                	mov    eax,esi
c00280b4:	88 d9                	mov    cl,bl
c00280b6:	d3 e0                	shl    eax,cl
c00280b8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00280bb:	89 f8                	mov    eax,edi
c00280bd:	88 d1                	mov    cl,dl
c00280bf:	d3 e8                	shr    eax,cl
c00280c1:	89 c1                	mov    ecx,eax
c00280c3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00280c6:	09 c8                	or     eax,ecx
c00280c8:	88 d9                	mov    cl,bl
c00280ca:	d3 e7                	shl    edi,cl
c00280cc:	31 db                	xor    ebx,ebx
c00280ce:	85 ff                	test   edi,edi
c00280d0:	0f 95 c3             	setne  bl
c00280d3:	89 df                	mov    edi,ebx
c00280d5:	09 c7                	or     edi,eax
c00280d7:	88 d1                	mov    cl,dl
c00280d9:	d3 ee                	shr    esi,cl
c00280db:	31 db                	xor    ebx,ebx
c00280dd:	eb 0d                	jmp    c00280ec <__muldf3+0x294>
c00280df:	bb ff 07 00 00       	mov    ebx,0x7ff
c00280e4:	eb 02                	jmp    c00280e8 <__muldf3+0x290>
c00280e6:	31 db                	xor    ebx,ebx
c00280e8:	31 ff                	xor    edi,edi
c00280ea:	31 f6                	xor    esi,esi
c00280ec:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00280ef:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c00280f2:	25 00 f8 ff ff       	and    eax,0xfffff800
c00280f7:	09 c3                	or     ebx,eax
c00280f9:	c1 e3 14             	shl    ebx,0x14
c00280fc:	89 f0                	mov    eax,esi
c00280fe:	c1 e8 0b             	shr    eax,0xb
c0028101:	09 c3                	or     ebx,eax
c0028103:	89 f8                	mov    eax,edi
c0028105:	c1 e8 0b             	shr    eax,0xb
c0028108:	c1 e6 15             	shl    esi,0x15
c002810b:	09 c6                	or     esi,eax
c002810d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0028113:	0f 95 c1             	setne  cl
c0028116:	09 c8                	or     eax,ecx
c0028118:	83 e0 01             	and    eax,0x1
c002811b:	c1 ef 0a             	shr    edi,0xa
c002811e:	21 c7                	and    edi,eax
c0028120:	01 f7                	add    edi,esi
c0028122:	83 d3 00             	adc    ebx,0x0
c0028125:	89 da                	mov    edx,ebx
c0028127:	eb 03                	jmp    c002812c <__muldf3+0x2d4>
c0028129:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002812c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002812f:	89 f8                	mov    eax,edi
c0028131:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028134:	83 c4 24             	add    esp,0x24
c0028137:	5b                   	pop    ebx
c0028138:	5e                   	pop    esi
c0028139:	5f                   	pop    edi
c002813a:	5d                   	pop    ebp
c002813b:	c3                   	ret    

c002813c <__divdf3>:
c002813c:	55                   	push   ebp
c002813d:	89 e5                	mov    ebp,esp
c002813f:	57                   	push   edi
c0028140:	56                   	push   esi
c0028141:	53                   	push   ebx
c0028142:	83 ec 2c             	sub    esp,0x2c
c0028145:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028148:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002814b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002814e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0028151:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0028154:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028157:	89 ce                	mov    esi,ecx
c0028159:	89 c8                	mov    eax,ecx
c002815b:	c1 f8 14             	sar    eax,0x14
c002815e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028161:	89 f8                	mov    eax,edi
c0028163:	89 fb                	mov    ebx,edi
c0028165:	c1 e3 0b             	shl    ebx,0xb
c0028168:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002816b:	c1 e6 0b             	shl    esi,0xb
c002816e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028174:	c1 e8 15             	shr    eax,0x15
c0028177:	09 c6                	or     esi,eax
c0028179:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c002817c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002817f:	89 c2                	mov    edx,eax
c0028181:	c1 fa 14             	sar    edx,0x14
c0028184:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0028187:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002818a:	89 de                	mov    esi,ebx
c002818c:	c1 e6 0b             	shl    esi,0xb
c002818f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0028192:	c1 e0 0b             	shl    eax,0xb
c0028195:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002819a:	c1 eb 15             	shr    ebx,0x15
c002819d:	09 d8                	or     eax,ebx
c002819f:	89 c2                	mov    edx,eax
c00281a1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00281a4:	25 ff 07 00 00       	and    eax,0x7ff
c00281a9:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00281ac:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00281af:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00281b5:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c00281b8:	29 d8                	sub    eax,ebx
c00281ba:	05 ff 03 00 00       	add    eax,0x3ff
c00281bf:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00281c2:	46                   	inc    esi
c00281c3:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00281c9:	0f 85 a5 00 00 00    	jne    c0028274 <__divdf3+0x138>
c00281cf:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00281d2:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c00281d5:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c00281d9:	74 2a                	je     c0028205 <__divdf3+0xc9>
c00281db:	85 f6                	test   esi,esi
c00281dd:	0f 85 cc 02 00 00    	jne    c00284af <__divdf3+0x373>
c00281e3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00281e6:	40                   	inc    eax
c00281e7:	a9 fe 07 00 00       	test   eax,0x7fe
c00281ec:	75 26                	jne    c0028214 <__divdf3+0xd8>
c00281ee:	85 db                	test   ebx,ebx
c00281f0:	74 22                	je     c0028214 <__divdf3+0xd8>
c00281f2:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00281f5:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00281f8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00281fb:	09 d0                	or     eax,edx
c00281fd:	0f 85 ac 02 00 00    	jne    c00284af <__divdf3+0x373>
c0028203:	eb 63                	jmp    c0028268 <__divdf3+0x12c>
c0028205:	85 f6                	test   esi,esi
c0028207:	75 22                	jne    c002822b <__divdf3+0xef>
c0028209:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002820c:	40                   	inc    eax
c002820d:	a9 fe 07 00 00       	test   eax,0x7fe
c0028212:	74 36                	je     c002824a <__divdf3+0x10e>
c0028214:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028218:	0f 89 91 02 00 00    	jns    c00284af <__divdf3+0x373>
c002821e:	89 f8                	mov    eax,edi
c0028220:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028226:	e9 80 02 00 00       	jmp    c00284ab <__divdf3+0x36f>
c002822b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002822e:	01 f6                	add    esi,esi
c0028230:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028233:	c1 ef 1f             	shr    edi,0x1f
c0028236:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028239:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c002823c:	8d 48 ff             	lea    ecx,[eax-0x1]
c002823f:	09 f7                	or     edi,esi
c0028241:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0028244:	78 2e                	js     c0028274 <__divdf3+0x138>
c0028246:	89 c8                	mov    eax,ecx
c0028248:	eb e1                	jmp    c002822b <__divdf3+0xef>
c002824a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002824d:	09 d0                	or     eax,edx
c002824f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028253:	74 0f                	je     c0028264 <__divdf3+0x128>
c0028255:	85 c0                	test   eax,eax
c0028257:	74 bb                	je     c0028214 <__divdf3+0xd8>
c0028259:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002825c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002825f:	e9 4b 02 00 00       	jmp    c00284af <__divdf3+0x373>
c0028264:	85 c0                	test   eax,eax
c0028266:	75 ac                	jne    c0028214 <__divdf3+0xd8>
c0028268:	31 ff                	xor    edi,edi
c002826a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002826f:	e9 3b 02 00 00       	jmp    c00284af <__divdf3+0x373>
c0028274:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028277:	8d 4f 01             	lea    ecx,[edi+0x1]
c002827a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028280:	75 6b                	jne    c00282ed <__divdf3+0x1b1>
c0028282:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028285:	09 d6                	or     esi,edx
c0028287:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002828b:	74 28                	je     c00282b5 <__divdf3+0x179>
c002828d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028290:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028293:	85 f6                	test   esi,esi
c0028295:	0f 85 14 02 00 00    	jne    c00284af <__divdf3+0x373>
c002829b:	31 ff                	xor    edi,edi
c002829d:	31 c9                	xor    ecx,ecx
c002829f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00282a2:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00282a5:	0f 89 04 02 00 00    	jns    c00284af <__divdf3+0x373>
c00282ab:	b9 00 00 00 80       	mov    ecx,0x80000000
c00282b0:	e9 fa 01 00 00       	jmp    c00284af <__divdf3+0x373>
c00282b5:	85 f6                	test   esi,esi
c00282b7:	75 1b                	jne    c00282d4 <__divdf3+0x198>
c00282b9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00282bc:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00282bf:	25 00 00 00 80       	and    eax,0x80000000
c00282c4:	31 c9                	xor    ecx,ecx
c00282c6:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c00282cb:	89 cf                	mov    edi,ecx
c00282cd:	89 c1                	mov    ecx,eax
c00282cf:	e9 db 01 00 00       	jmp    c00284af <__divdf3+0x373>
c00282d4:	01 d2                	add    edx,edx
c00282d6:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00282d9:	c1 eb 1f             	shr    ebx,0x1f
c00282dc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00282df:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c00282e2:	8d 48 01             	lea    ecx,[eax+0x1]
c00282e5:	09 da                	or     edx,ebx
c00282e7:	78 04                	js     c00282ed <__divdf3+0x1b1>
c00282e9:	89 c8                	mov    eax,ecx
c00282eb:	eb e7                	jmp    c00282d4 <__divdf3+0x198>
c00282ed:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00282f0:	81 ce 00 00 00 80    	or     esi,0x80000000
c00282f6:	81 ca 00 00 00 80    	or     edx,0x80000000
c00282fc:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c00282ff:	39 d6                	cmp    esi,edx
c0028301:	77 0d                	ja     c0028310 <__divdf3+0x1d4>
c0028303:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028306:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028309:	72 1b                	jb     c0028326 <__divdf3+0x1ea>
c002830b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c002830e:	75 16                	jne    c0028326 <__divdf3+0x1ea>
c0028310:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028313:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028316:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028319:	83 de 00             	sbb    esi,0x0
c002831c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c002831f:	ba 01 00 00 00       	mov    edx,0x1
c0028324:	eb 02                	jmp    c0028328 <__divdf3+0x1ec>
c0028326:	31 d2                	xor    edx,edx
c0028328:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c002832f:	31 ff                	xor    edi,edi
c0028331:	01 ff                	add    edi,edi
c0028333:	89 d1                	mov    ecx,edx
c0028335:	c1 e9 1f             	shr    ecx,0x1f
c0028338:	09 cf                	or     edi,ecx
c002833a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c002833d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028340:	89 da                	mov    edx,ebx
c0028342:	89 f3                	mov    ebx,esi
c0028344:	8d 34 36             	lea    esi,[esi+esi*1]
c0028347:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002834a:	c1 e9 1f             	shr    ecx,0x1f
c002834d:	09 ce                	or     esi,ecx
c002834f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028352:	01 c9                	add    ecx,ecx
c0028354:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0028357:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002835a:	85 db                	test   ebx,ebx
c002835c:	78 29                	js     c0028387 <__divdf3+0x24b>
c002835e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028361:	72 07                	jb     c002836a <__divdf3+0x22e>
c0028363:	75 3c                	jne    c00283a1 <__divdf3+0x265>
c0028365:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028368:	77 37                	ja     c00283a1 <__divdf3+0x265>
c002836a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002836d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028370:	31 d2                	xor    edx,edx
c0028372:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028375:	0f 97 c2             	seta   dl
c0028378:	29 d6                	sub    esi,edx
c002837a:	89 d9                	mov    ecx,ebx
c002837c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c002837f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028382:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028385:	eb 17                	jmp    c002839e <__divdf3+0x262>
c0028387:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002838a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002838d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028390:	0f 97 c1             	seta   cl
c0028393:	0f b6 c9             	movzx  ecx,cl
c0028396:	29 ce                	sub    esi,ecx
c0028398:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c002839b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c002839e:	83 ca 01             	or     edx,0x1
c00283a1:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00283a4:	75 8b                	jne    c0028331 <__divdf3+0x1f5>
c00283a6:	c1 e7 09             	shl    edi,0x9
c00283a9:	89 d1                	mov    ecx,edx
c00283ab:	c1 e9 17             	shr    ecx,0x17
c00283ae:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00283b1:	09 f3                	or     ebx,esi
c00283b3:	0f 95 c3             	setne  bl
c00283b6:	0f b6 db             	movzx  ebx,bl
c00283b9:	c1 e2 09             	shl    edx,0x9
c00283bc:	09 d3                	or     ebx,edx
c00283be:	89 ca                	mov    edx,ecx
c00283c0:	09 fa                	or     edx,edi
c00283c2:	78 0c                	js     c00283d0 <__divdf3+0x294>
c00283c4:	01 d2                	add    edx,edx
c00283c6:	89 d9                	mov    ecx,ebx
c00283c8:	c1 e9 1f             	shr    ecx,0x1f
c00283cb:	09 ca                	or     edx,ecx
c00283cd:	01 db                	add    ebx,ebx
c00283cf:	48                   	dec    eax
c00283d0:	3d fe 07 00 00       	cmp    eax,0x7fe
c00283d5:	0f 8f 83 00 00 00    	jg     c002845e <__divdf3+0x322>
c00283db:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00283e1:	85 c0                	test   eax,eax
c00283e3:	0f 8f 82 00 00 00    	jg     c002846b <__divdf3+0x32f>
c00283e9:	83 f8 cc             	cmp    eax,0xffffffcc
c00283ec:	7c 77                	jl     c0028465 <__divdf3+0x329>
c00283ee:	be 01 00 00 00       	mov    esi,0x1
c00283f3:	29 c6                	sub    esi,eax
c00283f5:	81 ca 00 00 00 80    	or     edx,0x80000000
c00283fb:	83 fe 1f             	cmp    esi,0x1f
c00283fe:	7e 2f                	jle    c002842f <__divdf3+0x2f3>
c0028400:	83 fe 20             	cmp    esi,0x20
c0028403:	75 0a                	jne    c002840f <__divdf3+0x2d3>
c0028405:	85 db                	test   ebx,ebx
c0028407:	0f 95 c3             	setne  bl
c002840a:	0f b6 db             	movzx  ebx,bl
c002840d:	eb 1a                	jmp    c0028429 <__divdf3+0x2ed>
c002840f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0028412:	89 d7                	mov    edi,edx
c0028414:	d3 e7                	shl    edi,cl
c0028416:	89 f9                	mov    ecx,edi
c0028418:	09 d9                	or     ecx,ebx
c002841a:	0f 95 c3             	setne  bl
c002841d:	0f b6 db             	movzx  ebx,bl
c0028420:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028425:	29 c1                	sub    ecx,eax
c0028427:	d3 ea                	shr    edx,cl
c0028429:	09 d3                	or     ebx,edx
c002842b:	31 c0                	xor    eax,eax
c002842d:	eb 3a                	jmp    c0028469 <__divdf3+0x32d>
c002842f:	83 c0 1f             	add    eax,0x1f
c0028432:	89 d7                	mov    edi,edx
c0028434:	88 c1                	mov    cl,al
c0028436:	d3 e7                	shl    edi,cl
c0028438:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002843b:	89 df                	mov    edi,ebx
c002843d:	89 f1                	mov    ecx,esi
c002843f:	d3 ef                	shr    edi,cl
c0028441:	89 f9                	mov    ecx,edi
c0028443:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028446:	09 cf                	or     edi,ecx
c0028448:	88 c1                	mov    cl,al
c002844a:	d3 e3                	shl    ebx,cl
c002844c:	85 db                	test   ebx,ebx
c002844e:	0f 95 c3             	setne  bl
c0028451:	0f b6 db             	movzx  ebx,bl
c0028454:	09 fb                	or     ebx,edi
c0028456:	89 f1                	mov    ecx,esi
c0028458:	d3 ea                	shr    edx,cl
c002845a:	31 c0                	xor    eax,eax
c002845c:	eb 0d                	jmp    c002846b <__divdf3+0x32f>
c002845e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0028463:	eb 02                	jmp    c0028467 <__divdf3+0x32b>
c0028465:	31 c0                	xor    eax,eax
c0028467:	31 db                	xor    ebx,ebx
c0028469:	31 d2                	xor    edx,edx
c002846b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c002846e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028471:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028477:	09 c8                	or     eax,ecx
c0028479:	c1 e0 14             	shl    eax,0x14
c002847c:	89 d1                	mov    ecx,edx
c002847e:	c1 e9 0b             	shr    ecx,0xb
c0028481:	09 c8                	or     eax,ecx
c0028483:	89 c6                	mov    esi,eax
c0028485:	89 d9                	mov    ecx,ebx
c0028487:	c1 e9 0b             	shr    ecx,0xb
c002848a:	c1 e2 15             	shl    edx,0x15
c002848d:	09 ca                	or     edx,ecx
c002848f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028495:	0f 95 c0             	setne  al
c0028498:	09 c1                	or     ecx,eax
c002849a:	83 e1 01             	and    ecx,0x1
c002849d:	c1 eb 0a             	shr    ebx,0xa
c00284a0:	21 cb                	and    ebx,ecx
c00284a2:	01 d3                	add    ebx,edx
c00284a4:	89 d8                	mov    eax,ebx
c00284a6:	83 d6 00             	adc    esi,0x0
c00284a9:	89 f2                	mov    edx,esi
c00284ab:	89 c7                	mov    edi,eax
c00284ad:	89 d1                	mov    ecx,edx
c00284af:	89 f8                	mov    eax,edi
c00284b1:	89 ca                	mov    edx,ecx
c00284b3:	83 c4 2c             	add    esp,0x2c
c00284b6:	5b                   	pop    ebx
c00284b7:	5e                   	pop    esi
c00284b8:	5f                   	pop    edi
c00284b9:	5d                   	pop    ebp
c00284ba:	c3                   	ret    

c00284bb <__floatsidf>:
c00284bb:	55                   	push   ebp
c00284bc:	89 e5                	mov    ebp,esp
c00284be:	56                   	push   esi
c00284bf:	53                   	push   ebx
c00284c0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00284c3:	85 db                	test   ebx,ebx
c00284c5:	7e 15                	jle    c00284dc <__floatsidf+0x21>
c00284c7:	0f bd cb             	bsr    ecx,ebx
c00284ca:	83 f1 1f             	xor    ecx,0x1f
c00284cd:	d3 e3                	shl    ebx,cl
c00284cf:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00284d5:	b8 1e 04 00 00       	mov    eax,0x41e
c00284da:	eb 21                	jmp    c00284fd <__floatsidf+0x42>
c00284dc:	b8 00 00 00 00       	mov    eax,0x0
c00284e1:	ba 00 00 00 00       	mov    edx,0x0
c00284e6:	74 2a                	je     c0028512 <__floatsidf+0x57>
c00284e8:	f7 db                	neg    ebx
c00284ea:	0f bd cb             	bsr    ecx,ebx
c00284ed:	83 f1 1f             	xor    ecx,0x1f
c00284f0:	d3 e3                	shl    ebx,cl
c00284f2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00284f8:	b8 1e 0c 00 00       	mov    eax,0xc1e
c00284fd:	29 c8                	sub    eax,ecx
c00284ff:	c1 e0 14             	shl    eax,0x14
c0028502:	89 c1                	mov    ecx,eax
c0028504:	89 de                	mov    esi,ebx
c0028506:	c1 ee 0b             	shr    esi,0xb
c0028509:	09 f1                	or     ecx,esi
c002850b:	89 ca                	mov    edx,ecx
c002850d:	c1 e3 15             	shl    ebx,0x15
c0028510:	89 d8                	mov    eax,ebx
c0028512:	5b                   	pop    ebx
c0028513:	5e                   	pop    esi
c0028514:	5d                   	pop    ebp
c0028515:	c3                   	ret    

c0028516 <__floatunsidf>:
c0028516:	55                   	push   ebp
c0028517:	89 e5                	mov    ebp,esp
c0028519:	56                   	push   esi
c002851a:	53                   	push   ebx
c002851b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002851e:	85 db                	test   ebx,ebx
c0028520:	74 2a                	je     c002854c <__floatunsidf+0x36>
c0028522:	0f bd cb             	bsr    ecx,ebx
c0028525:	83 f1 1f             	xor    ecx,0x1f
c0028528:	d3 e3                	shl    ebx,cl
c002852a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028530:	b8 1e 04 00 00       	mov    eax,0x41e
c0028535:	29 c8                	sub    eax,ecx
c0028537:	c1 e0 14             	shl    eax,0x14
c002853a:	89 c1                	mov    ecx,eax
c002853c:	89 de                	mov    esi,ebx
c002853e:	c1 ee 0b             	shr    esi,0xb
c0028541:	09 f1                	or     ecx,esi
c0028543:	89 ca                	mov    edx,ecx
c0028545:	c1 e3 15             	shl    ebx,0x15
c0028548:	89 d8                	mov    eax,ebx
c002854a:	eb 04                	jmp    c0028550 <__floatunsidf+0x3a>
c002854c:	31 c0                	xor    eax,eax
c002854e:	31 d2                	xor    edx,edx
c0028550:	5b                   	pop    ebx
c0028551:	5e                   	pop    esi
c0028552:	5d                   	pop    ebp
c0028553:	c3                   	ret    

c0028554 <__fixdfsi>:
c0028554:	55                   	push   ebp
c0028555:	89 e5                	mov    ebp,esp
c0028557:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002855a:	89 d1                	mov    ecx,edx
c002855c:	c1 e1 0b             	shl    ecx,0xb
c002855f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028565:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028568:	c1 e8 15             	shr    eax,0x15
c002856b:	09 c1                	or     ecx,eax
c002856d:	c1 fa 14             	sar    edx,0x14
c0028570:	78 1f                	js     c0028591 <__fixdfsi+0x3d>
c0028572:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028578:	31 c0                	xor    eax,eax
c002857a:	83 fa 1e             	cmp    edx,0x1e
c002857d:	77 40                	ja     c00285bf <__fixdfsi+0x6b>
c002857f:	89 c8                	mov    eax,ecx
c0028581:	0d 00 00 00 80       	or     eax,0x80000000
c0028586:	b9 1f 00 00 00       	mov    ecx,0x1f
c002858b:	29 d1                	sub    ecx,edx
c002858d:	d3 e8                	shr    eax,cl
c002858f:	eb 2e                	jmp    c00285bf <__fixdfsi+0x6b>
c0028591:	31 c0                	xor    eax,eax
c0028593:	81 c2 01 04 00 00    	add    edx,0x401
c0028599:	78 24                	js     c00285bf <__fixdfsi+0x6b>
c002859b:	83 fa 1e             	cmp    edx,0x1e
c002859e:	7e 09                	jle    c00285a9 <__fixdfsi+0x55>
c00285a0:	83 fa 1f             	cmp    edx,0x1f
c00285a3:	75 18                	jne    c00285bd <__fixdfsi+0x69>
c00285a5:	85 c9                	test   ecx,ecx
c00285a7:	75 14                	jne    c00285bd <__fixdfsi+0x69>
c00285a9:	89 c8                	mov    eax,ecx
c00285ab:	0d 00 00 00 80       	or     eax,0x80000000
c00285b0:	b9 1f 00 00 00       	mov    ecx,0x1f
c00285b5:	29 d1                	sub    ecx,edx
c00285b7:	d3 e8                	shr    eax,cl
c00285b9:	f7 d8                	neg    eax
c00285bb:	eb 02                	jmp    c00285bf <__fixdfsi+0x6b>
c00285bd:	31 c0                	xor    eax,eax
c00285bf:	5d                   	pop    ebp
c00285c0:	c3                   	ret    

c00285c1 <__fixunsdfsi>:
c00285c1:	55                   	push   ebp
c00285c2:	89 e5                	mov    ebp,esp
c00285c4:	53                   	push   ebx
c00285c5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00285c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00285cb:	89 d3                	mov    ebx,edx
c00285cd:	c1 fb 14             	sar    ebx,0x14
c00285d0:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00285d6:	31 c0                	xor    eax,eax
c00285d8:	83 fb 1f             	cmp    ebx,0x1f
c00285db:	77 1d                	ja     c00285fa <__fixunsdfsi+0x39>
c00285dd:	89 d0                	mov    eax,edx
c00285df:	c1 e0 0b             	shl    eax,0xb
c00285e2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00285e7:	c1 e9 15             	shr    ecx,0x15
c00285ea:	09 c8                	or     eax,ecx
c00285ec:	0d 00 00 00 80       	or     eax,0x80000000
c00285f1:	b9 1f 00 00 00       	mov    ecx,0x1f
c00285f6:	29 d9                	sub    ecx,ebx
c00285f8:	d3 e8                	shr    eax,cl
c00285fa:	5b                   	pop    ebx
c00285fb:	5d                   	pop    ebp
c00285fc:	c3                   	ret    

c00285fd <__cmpdf2>:
c00285fd:	55                   	push   ebp
c00285fe:	89 e5                	mov    ebp,esp
c0028600:	57                   	push   edi
c0028601:	56                   	push   esi
c0028602:	53                   	push   ebx
c0028603:	83 ec 0c             	sub    esp,0xc
c0028606:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028609:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002860c:	89 ca                	mov    edx,ecx
c002860e:	c1 ea 14             	shr    edx,0x14
c0028611:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028617:	89 cb                	mov    ebx,ecx
c0028619:	c1 fb 1f             	sar    ebx,0x1f
c002861c:	31 da                	xor    edx,ebx
c002861e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028621:	89 df                	mov    edi,ebx
c0028623:	c1 e7 0b             	shl    edi,0xb
c0028626:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028629:	c1 e1 0b             	shl    ecx,0xb
c002862c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028632:	c1 eb 15             	shr    ebx,0x15
c0028635:	09 d9                	or     ecx,ebx
c0028637:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c002863a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002863d:	89 ce                	mov    esi,ecx
c002863f:	c1 ee 14             	shr    esi,0x14
c0028642:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028648:	89 cb                	mov    ebx,ecx
c002864a:	c1 fb 1f             	sar    ebx,0x1f
c002864d:	31 de                	xor    esi,ebx
c002864f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028652:	89 df                	mov    edi,ebx
c0028654:	c1 e7 0b             	shl    edi,0xb
c0028657:	c1 e1 0b             	shl    ecx,0xb
c002865a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028660:	c1 eb 15             	shr    ebx,0x15
c0028663:	09 d9                	or     ecx,ebx
c0028665:	89 d3                	mov    ebx,edx
c0028667:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002866d:	43                   	inc    ebx
c002866e:	83 fb 01             	cmp    ebx,0x1
c0028671:	77 08                	ja     c002867b <__cmpdf2+0x7e>
c0028673:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028676:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028679:	75 68                	jne    c00286e3 <__cmpdf2+0xe6>
c002867b:	89 f3                	mov    ebx,esi
c002867d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028683:	43                   	inc    ebx
c0028684:	83 fb 01             	cmp    ebx,0x1
c0028687:	77 06                	ja     c002868f <__cmpdf2+0x92>
c0028689:	89 fb                	mov    ebx,edi
c002868b:	09 cb                	or     ebx,ecx
c002868d:	75 54                	jne    c00286e3 <__cmpdf2+0xe6>
c002868f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028692:	09 f8                	or     eax,edi
c0028694:	09 c8                	or     eax,ecx
c0028696:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028699:	75 12                	jne    c00286ad <__cmpdf2+0xb0>
c002869b:	8d 42 01             	lea    eax,[edx+0x1]
c002869e:	83 f8 01             	cmp    eax,0x1
c00286a1:	77 0a                	ja     c00286ad <__cmpdf2+0xb0>
c00286a3:	8d 5e 01             	lea    ebx,[esi+0x1]
c00286a6:	31 c0                	xor    eax,eax
c00286a8:	83 fb 01             	cmp    ebx,0x1
c00286ab:	76 36                	jbe    c00286e3 <__cmpdf2+0xe6>
c00286ad:	b8 01 00 00 00       	mov    eax,0x1
c00286b2:	39 f2                	cmp    edx,esi
c00286b4:	7f 2d                	jg     c00286e3 <__cmpdf2+0xe6>
c00286b6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00286bb:	7c 26                	jl     c00286e3 <__cmpdf2+0xe6>
c00286bd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00286c0:	77 07                	ja     c00286c9 <__cmpdf2+0xcc>
c00286c2:	72 16                	jb     c00286da <__cmpdf2+0xdd>
c00286c4:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00286c7:	76 0a                	jbe    c00286d3 <__cmpdf2+0xd6>
c00286c9:	89 d0                	mov    eax,edx
c00286cb:	c1 f8 1f             	sar    eax,0x1f
c00286ce:	83 c8 01             	or     eax,0x1
c00286d1:	eb 10                	jmp    c00286e3 <__cmpdf2+0xe6>
c00286d3:	b8 00 00 00 00       	mov    eax,0x0
c00286d8:	73 09                	jae    c00286e3 <__cmpdf2+0xe6>
c00286da:	89 d0                	mov    eax,edx
c00286dc:	c1 f8 1f             	sar    eax,0x1f
c00286df:	83 e0 02             	and    eax,0x2
c00286e2:	48                   	dec    eax
c00286e3:	83 c4 0c             	add    esp,0xc
c00286e6:	5b                   	pop    ebx
c00286e7:	5e                   	pop    esi
c00286e8:	5f                   	pop    edi
c00286e9:	5d                   	pop    ebp
c00286ea:	c3                   	ret    

c00286eb <__eqdf2>:
c00286eb:	55                   	push   ebp
c00286ec:	89 e5                	mov    ebp,esp
c00286ee:	50                   	push   eax
c00286ef:	6a 01                	push   0x1
c00286f1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00286f4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00286f7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00286fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00286fd:	e8 fb fe ff ff       	call   c00285fd <__cmpdf2>
c0028702:	83 c4 18             	add    esp,0x18
c0028705:	c9                   	leave  
c0028706:	c3                   	ret    

c0028707 <__nedf2>:
c0028707:	eb e2                	jmp    c00286eb <__eqdf2>

c0028709 <__gtdf2>:
c0028709:	55                   	push   ebp
c002870a:	89 e5                	mov    ebp,esp
c002870c:	50                   	push   eax
c002870d:	6a ff                	push   0xffffffff
c002870f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028712:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028715:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028718:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002871b:	e8 dd fe ff ff       	call   c00285fd <__cmpdf2>
c0028720:	83 c4 18             	add    esp,0x18
c0028723:	c9                   	leave  
c0028724:	c3                   	ret    

c0028725 <__gedf2>:
c0028725:	eb e2                	jmp    c0028709 <__gtdf2>

c0028727 <__ltdf2>:
c0028727:	eb c2                	jmp    c00286eb <__eqdf2>

c0028729 <__ledf2>:
c0028729:	eb c0                	jmp    c00286eb <__eqdf2>

c002872b <__truncdfsf2>:
c002872b:	55                   	push   ebp
c002872c:	89 e5                	mov    ebp,esp
c002872e:	57                   	push   edi
c002872f:	56                   	push   esi
c0028730:	53                   	push   ebx
c0028731:	83 ec 0c             	sub    esp,0xc
c0028734:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028737:	89 d1                	mov    ecx,edx
c0028739:	c1 f9 14             	sar    ecx,0x14
c002873c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002873f:	89 df                	mov    edi,ebx
c0028741:	c1 e7 0b             	shl    edi,0xb
c0028744:	89 d0                	mov    eax,edx
c0028746:	c1 e0 0b             	shl    eax,0xb
c0028749:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002874e:	c1 eb 15             	shr    ebx,0x15
c0028751:	09 d8                	or     eax,ebx
c0028753:	89 cb                	mov    ebx,ecx
c0028755:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002875b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028761:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028767:	0f 86 9e 00 00 00    	jbe    c002880b <__truncdfsf2+0xe0>
c002876d:	85 db                	test   ebx,ebx
c002876f:	75 0a                	jne    c002877b <__truncdfsf2+0x50>
c0028771:	c1 fa 17             	sar    edx,0x17
c0028774:	30 d2                	xor    dl,dl
c0028776:	e9 84 00 00 00       	jmp    c00287ff <__truncdfsf2+0xd4>
c002877b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028781:	83 fe 83             	cmp    esi,0xffffff83
c0028784:	7d 4b                	jge    c00287d1 <__truncdfsf2+0xa6>
c0028786:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002878b:	29 f1                	sub    ecx,esi
c002878d:	83 f9 1f             	cmp    ecx,0x1f
c0028790:	7f 6b                	jg     c00287fd <__truncdfsf2+0xd2>
c0028792:	0d 00 00 00 80       	or     eax,0x80000000
c0028797:	89 c3                	mov    ebx,eax
c0028799:	d3 eb                	shr    ebx,cl
c002879b:	be 01 00 00 00       	mov    esi,0x1
c00287a0:	d3 e6                	shl    esi,cl
c00287a2:	4e                   	dec    esi
c00287a3:	21 f0                	and    eax,esi
c00287a5:	09 f8                	or     eax,edi
c00287a7:	0f 95 c0             	setne  al
c00287aa:	0f b6 c0             	movzx  eax,al
c00287ad:	09 c3                	or     ebx,eax
c00287af:	89 d9                	mov    ecx,ebx
c00287b1:	c1 e9 08             	shr    ecx,0x8
c00287b4:	f6 c3 7f             	test   bl,0x7f
c00287b7:	0f 95 c0             	setne  al
c00287ba:	09 c8                	or     eax,ecx
c00287bc:	83 e0 01             	and    eax,0x1
c00287bf:	c1 eb 07             	shr    ebx,0x7
c00287c2:	21 c3                	and    ebx,eax
c00287c4:	81 e2 00 00 00 80    	and    edx,0x80000000
c00287ca:	09 d1                	or     ecx,edx
c00287cc:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00287cf:	eb 76                	jmp    c0028847 <__truncdfsf2+0x11c>
c00287d1:	83 c6 80             	add    esi,0xffffff80
c00287d4:	7e 1d                	jle    c00287f3 <__truncdfsf2+0xc8>
c00287d6:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00287dc:	75 0b                	jne    c00287e9 <__truncdfsf2+0xbe>
c00287de:	09 f8                	or     eax,edi
c00287e0:	74 09                	je     c00287eb <__truncdfsf2+0xc0>
c00287e2:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00287e7:	eb 02                	jmp    c00287eb <__truncdfsf2+0xc0>
c00287e9:	31 c0                	xor    eax,eax
c00287eb:	c1 fa 17             	sar    edx,0x17
c00287ee:	80 ca ff             	or     dl,0xff
c00287f1:	eb 0e                	jmp    c0028801 <__truncdfsf2+0xd6>
c00287f3:	c1 fa 1f             	sar    edx,0x1f
c00287f6:	c1 e2 08             	shl    edx,0x8
c00287f9:	09 ca                	or     edx,ecx
c00287fb:	eb 04                	jmp    c0028801 <__truncdfsf2+0xd6>
c00287fd:	31 d2                	xor    edx,edx
c00287ff:	31 c0                	xor    eax,eax
c0028801:	c1 e2 17             	shl    edx,0x17
c0028804:	c1 e8 08             	shr    eax,0x8
c0028807:	09 d0                	or     eax,edx
c0028809:	eb 3c                	jmp    c0028847 <__truncdfsf2+0x11c>
c002880b:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028811:	89 ca                	mov    edx,ecx
c0028813:	c1 fa 0b             	sar    edx,0xb
c0028816:	c1 e2 08             	shl    edx,0x8
c0028819:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002881c:	31 db                	xor    ebx,ebx
c002881e:	85 ff                	test   edi,edi
c0028820:	0f 95 c3             	setne  bl
c0028823:	09 d8                	or     eax,ebx
c0028825:	89 c3                	mov    ebx,eax
c0028827:	c1 eb 08             	shr    ebx,0x8
c002882a:	a8 7f                	test   al,0x7f
c002882c:	0f 95 c2             	setne  dl
c002882f:	89 d6                	mov    esi,edx
c0028831:	09 de                	or     esi,ebx
c0028833:	83 e6 01             	and    esi,0x1
c0028836:	c1 e8 07             	shr    eax,0x7
c0028839:	21 f0                	and    eax,esi
c002883b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002883e:	09 ca                	or     edx,ecx
c0028840:	c1 e2 17             	shl    edx,0x17
c0028843:	09 da                	or     edx,ebx
c0028845:	01 d0                	add    eax,edx
c0028847:	83 c4 0c             	add    esp,0xc
c002884a:	5b                   	pop    ebx
c002884b:	5e                   	pop    esi
c002884c:	5f                   	pop    edi
c002884d:	5d                   	pop    ebp
c002884e:	c3                   	ret    

c002884f <__extendsfdf2>:
c002884f:	55                   	push   ebp
c0028850:	89 e5                	mov    ebp,esp
c0028852:	57                   	push   edi
c0028853:	56                   	push   esi
c0028854:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028857:	89 d1                	mov    ecx,edx
c0028859:	c1 f9 17             	sar    ecx,0x17
c002885c:	c1 e2 08             	shl    edx,0x8
c002885f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028865:	89 c8                	mov    eax,ecx
c0028867:	80 e4 f8             	and    ah,0xf8
c002886a:	8d 71 01             	lea    esi,[ecx+0x1]
c002886d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028873:	75 27                	jne    c002889c <__extendsfdf2+0x4d>
c0028875:	81 e1 ff 00 00 00    	and    ecx,0xff
c002887b:	75 18                	jne    c0028895 <__extendsfdf2+0x46>
c002887d:	85 d2                	test   edx,edx
c002887f:	74 20                	je     c00288a1 <__extendsfdf2+0x52>
c0028881:	41                   	inc    ecx
c0028882:	01 d2                	add    edx,edx
c0028884:	79 fb                	jns    c0028881 <__extendsfdf2+0x32>
c0028886:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002888c:	29 c8                	sub    eax,ecx
c002888e:	05 81 03 00 00       	add    eax,0x381
c0028893:	eb 0c                	jmp    c00288a1 <__extendsfdf2+0x52>
c0028895:	05 00 07 00 00       	add    eax,0x700
c002889a:	eb 05                	jmp    c00288a1 <__extendsfdf2+0x52>
c002889c:	05 80 03 00 00       	add    eax,0x380
c00288a1:	c1 e0 14             	shl    eax,0x14
c00288a4:	89 c1                	mov    ecx,eax
c00288a6:	89 d0                	mov    eax,edx
c00288a8:	c1 e8 0b             	shr    eax,0xb
c00288ab:	09 c1                	or     ecx,eax
c00288ad:	c1 e2 15             	shl    edx,0x15
c00288b0:	89 d0                	mov    eax,edx
c00288b2:	89 ca                	mov    edx,ecx
c00288b4:	5e                   	pop    esi
c00288b5:	5f                   	pop    edi
c00288b6:	5d                   	pop    ebp
c00288b7:	c3                   	ret    
c00288b8:	66 90                	xchg   ax,ax
c00288ba:	66 90                	xchg   ax,ax
c00288bc:	66 90                	xchg   ax,ax
c00288be:	66 90                	xchg   ax,ax

c00288c0 <fabs>:
c00288c0:	83 ec 0c             	sub    esp,0xc
c00288c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00288ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00288ce:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00288d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00288d7:	dd 04 24             	fld    QWORD PTR [esp]
c00288da:	83 c4 0c             	add    esp,0xc
c00288dd:	c3                   	ret    
c00288de:	66 90                	xchg   ax,ax

c00288e0 <lrint>:
c00288e0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00288e4:	83 ec 04             	sub    esp,0x4
c00288e7:	db 1c 24             	fistp  DWORD PTR [esp]
c00288ea:	58                   	pop    eax
c00288eb:	c3                   	ret    

c00288ec <lrintf>:
c00288ec:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00288f0:	83 ec 04             	sub    esp,0x4
c00288f3:	db 1c 24             	fistp  DWORD PTR [esp]
c00288f6:	58                   	pop    eax
c00288f7:	c3                   	ret    

Disassembly of section .init:

c00288f8 <_init>:
c00288f8:	55                   	push   ebp
c00288f9:	89 e5                	mov    ebp,esp
c00288fb:	e8 18 78 fd ff       	call   c0000118 <frame_dummy>
c0028900:	e8 5b e0 ff ff       	call   c0026960 <__do_global_ctors_aux>
c0028905:	5d                   	pop    ebp
c0028906:	c3                   	ret    

Disassembly of section .fini:

c0028907 <_fini>:
c0028907:	55                   	push   ebp
c0028908:	89 e5                	mov    ebp,esp
c002890a:	e8 99 77 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002890f:	5d                   	pop    ebp
c0028910:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028912 <Computer::~Computer()>:
c0028912:	83 ec 0c             	sub    esp,0xc
c0028915:	ba 9c a5 02 c0       	mov    edx,0xc002a59c
c002891a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002891e:	89 10                	mov    DWORD PTR [eax],edx
c0028920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028924:	83 ec 0c             	sub    esp,0xc
c0028927:	50                   	push   eax
c0028928:	e8 8b b2 fe ff       	call   c0013bb8 <Device::~Device()>
c002892d:	83 c4 10             	add    esp,0x10
c0028930:	90                   	nop
c0028931:	83 c4 0c             	add    esp,0xc
c0028934:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028936 <Computer::~Computer()>:
c0028936:	83 ec 0c             	sub    esp,0xc
c0028939:	83 ec 0c             	sub    esp,0xc
c002893c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028940:	e8 cd ff ff ff       	call   c0028912 <Computer::~Computer()>
c0028945:	83 c4 10             	add    esp,0x10
c0028948:	83 ec 08             	sub    esp,0x8
c002894b:	68 ec 01 00 00       	push   0x1ec
c0028950:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028954:	e8 80 9e fe ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c0028959:	83 c4 10             	add    esp,0x10
c002895c:	83 c4 0c             	add    esp,0xc
c002895f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028960 <idleCommon()>:
c0028960:	83 ec 0c             	sub    esp,0xc
c0028963:	fa                   	cli    
c0028964:	ff 05 08 f9 02 c0    	inc    DWORD PTR ds:0xc002f908
c002896a:	e8 42 54 ff ff       	call   c001ddb1 <schedule()>
c002896f:	a1 08 f9 02 c0       	mov    eax,ds:0xc002f908
c0028974:	48                   	dec    eax
c0028975:	a3 08 f9 02 c0       	mov    ds:0xc002f908,eax
c002897a:	75 01                	jne    c002897d <idleCommon()+0x1d>
c002897c:	fb                   	sti    
c002897d:	83 c4 0c             	add    esp,0xc
c0028980:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028982 <LinkedList<UnixFile>::~LinkedList()>:
c0028982:	90                   	nop
c0028983:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028984 <LinkedList<UnixFile>::LinkedList()>:
c0028984:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028988:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002898e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028992:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028999:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002899d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00289a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289a8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289b2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289bd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00289c4:	90                   	nop
c00289c5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00289c6 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00289c6:	83 ec 0c             	sub    esp,0xc
c00289c9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00289ce:	75 10                	jne    c00289e0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00289d0:	83 ec 0c             	sub    esp,0xc
c00289d3:	68 54 a8 02 c0       	push   0xc002a854
c00289d8:	e8 42 18 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c00289dd:	83 c4 10             	add    esp,0x10
c00289e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00289e6:	85 c0                	test   eax,eax
c00289e8:	74 34                	je     c0028a1e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00289ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289f1:	85 c0                	test   eax,eax
c00289f3:	74 29                	je     c0028a1e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00289f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a00:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a07:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a0b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a12:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a15:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a1c:	eb 65                	jmp    c0028a83 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a22:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a24:	85 c0                	test   eax,eax
c0028a26:	75 4b                	jne    c0028a73 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a2f:	85 c0                	test   eax,eax
c0028a31:	75 40                	jne    c0028a73 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028a33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a37:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a3b:	89 10                	mov    DWORD PTR [eax],edx
c0028a3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a41:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a45:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a4f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a5a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a5d:	85 c0                	test   eax,eax
c0028a5f:	74 22                	je     c0028a83 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028a61:	83 ec 0c             	sub    esp,0xc
c0028a64:	68 76 a8 02 c0       	push   0xc002a876
c0028a69:	e8 b1 17 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c0028a6e:	83 c4 10             	add    esp,0x10
c0028a71:	eb 10                	jmp    c0028a83 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028a73:	83 ec 0c             	sub    esp,0xc
c0028a76:	68 80 a8 02 c0       	push   0xc002a880
c0028a7b:	e8 9f 17 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c0028a80:	83 c4 10             	add    esp,0x10
c0028a83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a87:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a8a:	8d 50 01             	lea    edx,[eax+0x1]
c0028a8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a91:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a94:	90                   	nop
c0028a95:	83 c4 0c             	add    esp,0xc
c0028a98:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028a9a <LinkedList<UnixFile>::getFirstElement()>:
c0028a9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028aa0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0028aa2 <LinkedList<UnixFile>::removeFirst()>:
c0028aa2:	83 ec 0c             	sub    esp,0xc
c0028aa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa9:	8b 00                	mov    eax,DWORD PTR [eax]
c0028aab:	85 c0                	test   eax,eax
c0028aad:	75 12                	jne    c0028ac1 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028aaf:	83 ec 0c             	sub    esp,0xc
c0028ab2:	68 8c a8 02 c0       	push   0xc002a88c
c0028ab7:	e8 63 17 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c0028abc:	83 c4 10             	add    esp,0x10
c0028abf:	eb 7e                	jmp    c0028b3f <LinkedList<UnixFile>::removeFirst()+0x9d>
c0028ac1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ac8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028acb:	85 c0                	test   eax,eax
c0028acd:	74 10                	je     c0028adf <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028acf:	83 ec 0c             	sub    esp,0xc
c0028ad2:	68 d7 a8 02 c0       	push   0xc002a8d7
c0028ad7:	e8 43 17 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c0028adc:	83 c4 10             	add    esp,0x10
c0028adf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae3:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ae5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ae8:	85 c0                	test   eax,eax
c0028aea:	75 33                	jne    c0028b1f <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028afa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b05:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b08:	83 f8 01             	cmp    eax,0x1
c0028b0b:	74 21                	je     c0028b2e <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028b0d:	83 ec 0c             	sub    esp,0xc
c0028b10:	68 b0 a8 02 c0       	push   0xc002a8b0
c0028b15:	e8 05 17 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c0028b1a:	83 c4 10             	add    esp,0x10
c0028b1d:	eb 0f                	jmp    c0028b2e <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028b1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b23:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b25:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b2c:	89 10                	mov    DWORD PTR [eax],edx
c0028b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b32:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b35:	8d 50 ff             	lea    edx,[eax-0x1]
c0028b38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b3c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028b3f:	83 c4 0c             	add    esp,0xc
c0028b42:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0028b44 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0028b44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028b48:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b4b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028b4c <DriverlessDevice::~DriverlessDevice()>:
c0028b4c:	ba 7c b1 02 c0       	mov    edx,0xc002b17c
c0028b51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b55:	89 10                	mov    DWORD PTR [eax],edx
c0028b57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b5b:	50                   	push   eax
c0028b5c:	e8 57 b0 fe ff       	call   c0013bb8 <Device::~Device()>
c0028b61:	83 c4 04             	add    esp,0x4
c0028b64:	90                   	nop
c0028b65:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028b66 <DriverlessDevice::~DriverlessDevice()>:
c0028b66:	83 ec 0c             	sub    esp,0xc
c0028b69:	83 ec 0c             	sub    esp,0xc
c0028b6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b70:	e8 d7 ff ff ff       	call   c0028b4c <DriverlessDevice::~DriverlessDevice()>
c0028b75:	83 c4 10             	add    esp,0x10
c0028b78:	83 ec 08             	sub    esp,0x8
c0028b7b:	68 58 01 00 00       	push   0x158
c0028b80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b84:	e8 50 9c fe ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c0028b89:	83 c4 10             	add    esp,0x10
c0028b8c:	83 c4 0c             	add    esp,0xc
c0028b8f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028b90 <LinkedList<Device>::addElement(Device*)>:
c0028b90:	83 ec 0c             	sub    esp,0xc
c0028b93:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028b98:	75 10                	jne    c0028baa <LinkedList<Device>::addElement(Device*)+0x1a>
c0028b9a:	83 ec 0c             	sub    esp,0xc
c0028b9d:	68 54 a8 02 c0       	push   0xc002a854
c0028ba2:	e8 78 16 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c0028ba7:	83 c4 10             	add    esp,0x10
c0028baa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bb0:	85 c0                	test   eax,eax
c0028bb2:	74 3a                	je     c0028bee <LinkedList<Device>::addElement(Device*)+0x5e>
c0028bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bbb:	85 c0                	test   eax,eax
c0028bbd:	74 2f                	je     c0028bee <LinkedList<Device>::addElement(Device*)+0x5e>
c0028bbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bc6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bca:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028bd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bd8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bdf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028be2:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028bec:	eb 68                	jmp    c0028c56 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028bee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf2:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bf4:	85 c0                	test   eax,eax
c0028bf6:	75 4e                	jne    c0028c46 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028bf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bfc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bff:	85 c0                	test   eax,eax
c0028c01:	75 43                	jne    c0028c46 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028c03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c07:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c0b:	89 10                	mov    DWORD PTR [eax],edx
c0028c0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c11:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c15:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c1f:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028c29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c2d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c30:	85 c0                	test   eax,eax
c0028c32:	74 22                	je     c0028c56 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028c34:	83 ec 0c             	sub    esp,0xc
c0028c37:	68 76 a8 02 c0       	push   0xc002a876
c0028c3c:	e8 de 15 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c0028c41:	83 c4 10             	add    esp,0x10
c0028c44:	eb 10                	jmp    c0028c56 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028c46:	83 ec 0c             	sub    esp,0xc
c0028c49:	68 80 a8 02 c0       	push   0xc002a880
c0028c4e:	e8 cc 15 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c0028c53:	83 c4 10             	add    esp,0x10
c0028c56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c5a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c5d:	8d 50 01             	lea    edx,[eax+0x1]
c0028c60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c64:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028c67:	90                   	nop
c0028c68:	83 c4 0c             	add    esp,0xc
c0028c6b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028c6c <LinkedList<Device>::LinkedList()>:
c0028c6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c70:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028c76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c7a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028c81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c85:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028c8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c90:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028c96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c9a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ca1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ca5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028cac:	90                   	nop
c0028cad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028cae <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028cae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cb2:	8b 00                	mov    eax,DWORD PTR [eax]
c0028cb4:	85 c0                	test   eax,eax
c0028cb6:	75 0e                	jne    c0028cc6 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028cb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028cbf:	85 c0                	test   eax,eax
c0028cc1:	75 03                	jne    c0028cc6 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028cc3:	b0 01                	mov    al,0x1
c0028cc5:	c3                   	ret    
c0028cc6:	b0 00                	mov    al,0x0
c0028cc8:	90                   	nop
c0028cc9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028cca <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028cca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cce:	8b 00                	mov    eax,DWORD PTR [eax]
c0028cd0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028cd2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028cd2:	83 ec 0c             	sub    esp,0xc
c0028cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cd9:	8b 00                	mov    eax,DWORD PTR [eax]
c0028cdb:	85 c0                	test   eax,eax
c0028cdd:	75 15                	jne    c0028cf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028cdf:	83 ec 0c             	sub    esp,0xc
c0028ce2:	68 8c a8 02 c0       	push   0xc002a88c
c0028ce7:	e8 33 15 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c0028cec:	83 c4 10             	add    esp,0x10
c0028cef:	e9 88 00 00 00       	jmp    c0028d7c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cf8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028cfb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028cfe:	85 c0                	test   eax,eax
c0028d00:	0f 95 c0             	setne  al
c0028d03:	84 c0                	test   al,al
c0028d05:	74 10                	je     c0028d17 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028d07:	83 ec 0c             	sub    esp,0xc
c0028d0a:	68 d7 a8 02 c0       	push   0xc002a8d7
c0028d0f:	e8 0b 15 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c0028d14:	83 c4 10             	add    esp,0x10
c0028d17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028d1d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028d20:	85 c0                	test   eax,eax
c0028d22:	0f 94 c0             	sete   al
c0028d25:	84 c0                	test   al,al
c0028d27:	74 33                	je     c0028d5c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028d29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d2d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d37:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d42:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028d45:	83 f8 01             	cmp    eax,0x1
c0028d48:	74 21                	je     c0028d6b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028d4a:	83 ec 0c             	sub    esp,0xc
c0028d4d:	68 b0 a8 02 c0       	push   0xc002a8b0
c0028d52:	e8 c8 14 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c0028d57:	83 c4 10             	add    esp,0x10
c0028d5a:	eb 0f                	jmp    c0028d6b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028d5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d60:	8b 00                	mov    eax,DWORD PTR [eax]
c0028d62:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028d65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d69:	89 10                	mov    DWORD PTR [eax],edx
c0028d6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d6f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028d72:	8d 50 ff             	lea    edx,[eax-0x1]
c0028d75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d79:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028d7c:	83 c4 0c             	add    esp,0xc
c0028d7f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028d80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028d80:	83 ec 0c             	sub    esp,0xc
c0028d83:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028d88:	75 10                	jne    c0028d9a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028d8a:	83 ec 0c             	sub    esp,0xc
c0028d8d:	68 54 a8 02 c0       	push   0xc002a854
c0028d92:	e8 88 14 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c0028d97:	83 c4 10             	add    esp,0x10
c0028d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028da0:	85 c0                	test   eax,eax
c0028da2:	74 34                	je     c0028dd8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028da4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028da8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028dab:	85 c0                	test   eax,eax
c0028dad:	74 29                	je     c0028dd8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028daf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028db3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028db6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028dba:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028dbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028dc5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028dcf:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028dd6:	eb 65                	jmp    c0028e3d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028dd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ddc:	8b 00                	mov    eax,DWORD PTR [eax]
c0028dde:	85 c0                	test   eax,eax
c0028de0:	75 4b                	jne    c0028e2d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028de2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028de6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028de9:	85 c0                	test   eax,eax
c0028deb:	75 40                	jne    c0028e2d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028ded:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028df1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028df5:	89 10                	mov    DWORD PTR [eax],edx
c0028df7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dfb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028dff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028e02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028e09:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028e10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e14:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028e17:	85 c0                	test   eax,eax
c0028e19:	74 22                	je     c0028e3d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028e1b:	83 ec 0c             	sub    esp,0xc
c0028e1e:	68 76 a8 02 c0       	push   0xc002a876
c0028e23:	e8 f7 13 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c0028e28:	83 c4 10             	add    esp,0x10
c0028e2b:	eb 10                	jmp    c0028e3d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028e2d:	83 ec 0c             	sub    esp,0xc
c0028e30:	68 80 a8 02 c0       	push   0xc002a880
c0028e35:	e8 e5 13 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c0028e3a:	83 c4 10             	add    esp,0x10
c0028e3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e41:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028e44:	8d 50 01             	lea    edx,[eax+0x1]
c0028e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e4b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028e4e:	90                   	nop
c0028e4f:	83 c4 0c             	add    esp,0xc
c0028e52:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028e54 <ACPI::~ACPI()>:
c0028e54:	83 ec 0c             	sub    esp,0xc
c0028e57:	ba 10 bc 02 c0       	mov    edx,0xc002bc10
c0028e5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e60:	89 10                	mov    DWORD PTR [eax],edx
c0028e62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e66:	83 ec 0c             	sub    esp,0xc
c0028e69:	50                   	push   eax
c0028e6a:	e8 49 ad fe ff       	call   c0013bb8 <Device::~Device()>
c0028e6f:	83 c4 10             	add    esp,0x10
c0028e72:	90                   	nop
c0028e73:	83 c4 0c             	add    esp,0xc
c0028e76:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028e78 <ACPI::~ACPI()>:
c0028e78:	83 ec 0c             	sub    esp,0xc
c0028e7b:	83 ec 0c             	sub    esp,0xc
c0028e7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e82:	e8 cd ff ff ff       	call   c0028e54 <ACPI::~ACPI()>
c0028e87:	83 c4 10             	add    esp,0x10
c0028e8a:	83 ec 08             	sub    esp,0x8
c0028e8d:	68 64 12 00 00       	push   0x1264
c0028e92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e96:	e8 3e 99 fe ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c0028e9b:	83 c4 10             	add    esp,0x10
c0028e9e:	83 c4 0c             	add    esp,0xc
c0028ea1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0028ea2 <LinkedList<Device>::~LinkedList()>:
c0028ea2:	90                   	nop
c0028ea3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0028ea4 <LinkedList<Device>::isEmpty()>:
c0028ea4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ea8:	8b 00                	mov    eax,DWORD PTR [eax]
c0028eaa:	85 c0                	test   eax,eax
c0028eac:	75 0e                	jne    c0028ebc <LinkedList<Device>::isEmpty()+0x18>
c0028eae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028eb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028eb5:	85 c0                	test   eax,eax
c0028eb7:	75 03                	jne    c0028ebc <LinkedList<Device>::isEmpty()+0x18>
c0028eb9:	b0 01                	mov    al,0x1
c0028ebb:	c3                   	ret    
c0028ebc:	b0 00                	mov    al,0x0
c0028ebe:	90                   	nop
c0028ebf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0028ec0 <LinkedList<Device>::getFirstElement()>:
c0028ec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ec4:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ec6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0028ec8 <LinkedList<Device>::removeFirst()>:
c0028ec8:	83 ec 0c             	sub    esp,0xc
c0028ecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ecf:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ed1:	85 c0                	test   eax,eax
c0028ed3:	75 15                	jne    c0028eea <LinkedList<Device>::removeFirst()+0x22>
c0028ed5:	83 ec 0c             	sub    esp,0xc
c0028ed8:	68 8c a8 02 c0       	push   0xc002a88c
c0028edd:	e8 3d 13 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c0028ee2:	83 c4 10             	add    esp,0x10
c0028ee5:	e9 87 00 00 00       	jmp    c0028f71 <LinkedList<Device>::removeFirst()+0xa9>
c0028eea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ef1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028ef7:	85 c0                	test   eax,eax
c0028ef9:	74 10                	je     c0028f0b <LinkedList<Device>::removeFirst()+0x43>
c0028efb:	83 ec 0c             	sub    esp,0xc
c0028efe:	68 d7 a8 02 c0       	push   0xc002a8d7
c0028f03:	e8 17 13 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c0028f08:	83 c4 10             	add    esp,0x10
c0028f0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f11:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028f17:	85 c0                	test   eax,eax
c0028f19:	75 33                	jne    c0028f4e <LinkedList<Device>::removeFirst()+0x86>
c0028f1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f1f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028f25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f29:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028f30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028f37:	83 f8 01             	cmp    eax,0x1
c0028f3a:	74 24                	je     c0028f60 <LinkedList<Device>::removeFirst()+0x98>
c0028f3c:	83 ec 0c             	sub    esp,0xc
c0028f3f:	68 b0 a8 02 c0       	push   0xc002a8b0
c0028f44:	e8 d6 12 ff ff       	call   c001a21f <Krnl::panic(char const*)>
c0028f49:	83 c4 10             	add    esp,0x10
c0028f4c:	eb 12                	jmp    c0028f60 <LinkedList<Device>::removeFirst()+0x98>
c0028f4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f52:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f54:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0028f5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f5e:	89 10                	mov    DWORD PTR [eax],edx
c0028f60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f64:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028f67:	8d 50 ff             	lea    edx,[eax-0x1]
c0028f6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f6e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028f71:	83 c4 0c             	add    esp,0xc
c0028f74:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028f76 <CPU::~CPU()>:
c0028f76:	83 ec 0c             	sub    esp,0xc
c0028f79:	ba ac bf 02 c0       	mov    edx,0xc002bfac
c0028f7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f82:	89 10                	mov    DWORD PTR [eax],edx
c0028f84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f88:	83 ec 0c             	sub    esp,0xc
c0028f8b:	50                   	push   eax
c0028f8c:	e8 27 ac fe ff       	call   c0013bb8 <Device::~Device()>
c0028f91:	83 c4 10             	add    esp,0x10
c0028f94:	90                   	nop
c0028f95:	83 c4 0c             	add    esp,0xc
c0028f98:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028f9a <CPU::~CPU()>:
c0028f9a:	83 ec 0c             	sub    esp,0xc
c0028f9d:	83 ec 0c             	sub    esp,0xc
c0028fa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fa4:	e8 cd ff ff ff       	call   c0028f76 <CPU::~CPU()>
c0028fa9:	83 c4 10             	add    esp,0x10
c0028fac:	83 ec 08             	sub    esp,0x8
c0028faf:	68 98 11 00 00       	push   0x1198
c0028fb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fb8:	e8 1c 98 fe ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c0028fbd:	83 c4 10             	add    esp,0x10
c0028fc0:	83 c4 0c             	add    esp,0xc
c0028fc3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028fc4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028fc4:	90                   	nop
c0028fc5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028fc6 <ThreadControlBlock::ThreadControlBlock()>:
c0028fc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028fca:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028fd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028fd5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028fdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028fe0:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028fe7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028feb:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028ff2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ff6:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0028ffd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029001:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0029005:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029009:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c002900d:	90                   	nop
c002900e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0029010 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0029010:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029014:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002901a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002901e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029025:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029029:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029030:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029034:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002903a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002903e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029045:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029049:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029050:	90                   	nop
c0029051:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0029052 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0029052:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029056:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0029059:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c002905a <Vm::_FPUState::_FPUState()>:
c002905a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002905e:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0029065:	90                   	nop
c0029066:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0029068 <PCI::~PCI()>:
c0029068:	83 ec 0c             	sub    esp,0xc
c002906b:	ba f8 ca 02 c0       	mov    edx,0xc002caf8
c0029070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029074:	89 10                	mov    DWORD PTR [eax],edx
c0029076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002907a:	83 ec 0c             	sub    esp,0xc
c002907d:	50                   	push   eax
c002907e:	e8 05 a5 fe ff       	call   c0013588 <Bus::~Bus()>
c0029083:	83 c4 10             	add    esp,0x10
c0029086:	90                   	nop
c0029087:	83 c4 0c             	add    esp,0xc
c002908a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002908c <PCI::~PCI()>:
c002908c:	83 ec 0c             	sub    esp,0xc
c002908f:	83 ec 0c             	sub    esp,0xc
c0029092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029096:	e8 cd ff ff ff       	call   c0029068 <PCI::~PCI()>
c002909b:	83 c4 10             	add    esp,0x10
c002909e:	83 ec 08             	sub    esp,0x8
c00290a1:	68 5c 01 00 00       	push   0x15c
c00290a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290aa:	e8 2a 97 fe ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c00290af:	83 c4 10             	add    esp,0x10
c00290b2:	83 c4 0c             	add    esp,0xc
c00290b5:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00290b6 <IDE::~IDE()>:
c00290b6:	83 ec 0c             	sub    esp,0xc
c00290b9:	ba ac cb 02 c0       	mov    edx,0xc002cbac
c00290be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290c2:	89 10                	mov    DWORD PTR [eax],edx
c00290c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290c8:	83 ec 0c             	sub    esp,0xc
c00290cb:	50                   	push   eax
c00290cc:	e8 fd af fe ff       	call   c00140ce <HardDiskController::~HardDiskController()>
c00290d1:	83 c4 10             	add    esp,0x10
c00290d4:	90                   	nop
c00290d5:	83 c4 0c             	add    esp,0xc
c00290d8:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00290da <IDE::~IDE()>:
c00290da:	83 ec 0c             	sub    esp,0xc
c00290dd:	83 ec 0c             	sub    esp,0xc
c00290e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290e4:	e8 cd ff ff ff       	call   c00290b6 <IDE::~IDE()>
c00290e9:	83 c4 10             	add    esp,0x10
c00290ec:	83 ec 08             	sub    esp,0x8
c00290ef:	68 70 02 00 00       	push   0x270
c00290f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290f8:	e8 dc 96 fe ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c00290fd:	83 c4 10             	add    esp,0x10
c0029100:	83 c4 0c             	add    esp,0xc
c0029103:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0029104 <SATABus::~SATABus()>:
c0029104:	83 ec 0c             	sub    esp,0xc
c0029107:	ba 24 cc 02 c0       	mov    edx,0xc002cc24
c002910c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029110:	89 10                	mov    DWORD PTR [eax],edx
c0029112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029116:	83 ec 0c             	sub    esp,0xc
c0029119:	50                   	push   eax
c002911a:	e8 af af fe ff       	call   c00140ce <HardDiskController::~HardDiskController()>
c002911f:	83 c4 10             	add    esp,0x10
c0029122:	90                   	nop
c0029123:	83 c4 0c             	add    esp,0xc
c0029126:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0029128 <SATABus::~SATABus()>:
c0029128:	83 ec 0c             	sub    esp,0xc
c002912b:	83 ec 0c             	sub    esp,0xc
c002912e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029132:	e8 cd ff ff ff       	call   c0029104 <SATABus::~SATABus()>
c0029137:	83 c4 10             	add    esp,0x10
c002913a:	83 ec 08             	sub    esp,0x8
c002913d:	68 64 01 00 00       	push   0x164
c0029142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029146:	e8 8e 96 fe ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c002914b:	83 c4 10             	add    esp,0x10
c002914e:	83 c4 0c             	add    esp,0xc
c0029151:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0029152 <ATA::~ATA()>:
c0029152:	83 ec 0c             	sub    esp,0xc
c0029155:	ba 9c cc 02 c0       	mov    edx,0xc002cc9c
c002915a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002915e:	89 10                	mov    DWORD PTR [eax],edx
c0029160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029164:	83 ec 0c             	sub    esp,0xc
c0029167:	50                   	push   eax
c0029168:	e8 43 b0 fe ff       	call   c00141b0 <PhysicalDisk::~PhysicalDisk()>
c002916d:	83 c4 10             	add    esp,0x10
c0029170:	90                   	nop
c0029171:	83 c4 0c             	add    esp,0xc
c0029174:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0029176 <ATA::~ATA()>:
c0029176:	83 ec 0c             	sub    esp,0xc
c0029179:	83 ec 0c             	sub    esp,0xc
c002917c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029180:	e8 cd ff ff ff       	call   c0029152 <ATA::~ATA()>
c0029185:	83 c4 10             	add    esp,0x10
c0029188:	83 ec 08             	sub    esp,0x8
c002918b:	68 7c 01 00 00       	push   0x17c
c0029190:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029194:	e8 40 96 fe ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c0029199:	83 c4 10             	add    esp,0x10
c002919c:	83 c4 0c             	add    esp,0xc
c002919f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00291a0 <ATAPI::~ATAPI()>:
c00291a0:	83 ec 0c             	sub    esp,0xc
c00291a3:	ba d4 cc 02 c0       	mov    edx,0xc002ccd4
c00291a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291ac:	89 10                	mov    DWORD PTR [eax],edx
c00291ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291b2:	83 ec 0c             	sub    esp,0xc
c00291b5:	50                   	push   eax
c00291b6:	e8 f5 af fe ff       	call   c00141b0 <PhysicalDisk::~PhysicalDisk()>
c00291bb:	83 c4 10             	add    esp,0x10
c00291be:	90                   	nop
c00291bf:	83 c4 0c             	add    esp,0xc
c00291c2:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00291c4 <ATAPI::~ATAPI()>:
c00291c4:	83 ec 0c             	sub    esp,0xc
c00291c7:	83 ec 0c             	sub    esp,0xc
c00291ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291ce:	e8 cd ff ff ff       	call   c00291a0 <ATAPI::~ATAPI()>
c00291d3:	83 c4 10             	add    esp,0x10
c00291d6:	83 ec 08             	sub    esp,0x8
c00291d9:	68 80 01 00 00       	push   0x180
c00291de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291e2:	e8 f2 95 fe ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c00291e7:	83 c4 10             	add    esp,0x10
c00291ea:	83 c4 0c             	add    esp,0xc
c00291ed:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00291ee <SATA::~SATA()>:
c00291ee:	83 ec 0c             	sub    esp,0xc
c00291f1:	ba 88 cd 02 c0       	mov    edx,0xc002cd88
c00291f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291fa:	89 10                	mov    DWORD PTR [eax],edx
c00291fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029200:	83 ec 0c             	sub    esp,0xc
c0029203:	50                   	push   eax
c0029204:	e8 a7 af fe ff       	call   c00141b0 <PhysicalDisk::~PhysicalDisk()>
c0029209:	83 c4 10             	add    esp,0x10
c002920c:	90                   	nop
c002920d:	83 c4 0c             	add    esp,0xc
c0029210:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0029212 <SATA::~SATA()>:
c0029212:	83 ec 0c             	sub    esp,0xc
c0029215:	83 ec 0c             	sub    esp,0xc
c0029218:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002921c:	e8 cd ff ff ff       	call   c00291ee <SATA::~SATA()>
c0029221:	83 c4 10             	add    esp,0x10
c0029224:	83 ec 08             	sub    esp,0x8
c0029227:	68 7c 01 00 00       	push   0x17c
c002922c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029230:	e8 a4 95 fe ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c0029235:	83 c4 10             	add    esp,0x10
c0029238:	83 c4 0c             	add    esp,0xc
c002923b:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002923c <SATAPI::~SATAPI()>:
c002923c:	83 ec 0c             	sub    esp,0xc
c002923f:	ba 64 ce 02 c0       	mov    edx,0xc002ce64
c0029244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029248:	89 10                	mov    DWORD PTR [eax],edx
c002924a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002924e:	83 ec 0c             	sub    esp,0xc
c0029251:	50                   	push   eax
c0029252:	e8 59 af fe ff       	call   c00141b0 <PhysicalDisk::~PhysicalDisk()>
c0029257:	83 c4 10             	add    esp,0x10
c002925a:	90                   	nop
c002925b:	83 c4 0c             	add    esp,0xc
c002925e:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029260 <SATAPI::~SATAPI()>:
c0029260:	83 ec 0c             	sub    esp,0xc
c0029263:	83 ec 0c             	sub    esp,0xc
c0029266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002926a:	e8 cd ff ff ff       	call   c002923c <SATAPI::~SATAPI()>
c002926f:	83 c4 10             	add    esp,0x10
c0029272:	83 ec 08             	sub    esp,0x8
c0029275:	68 80 01 00 00       	push   0x180
c002927a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002927e:	e8 56 95 fe ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c0029283:	83 c4 10             	add    esp,0x10
c0029286:	83 c4 0c             	add    esp,0xc
c0029289:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c002928a <AVX::~AVX()>:
c002928a:	83 ec 0c             	sub    esp,0xc
c002928d:	ba a4 ce 02 c0       	mov    edx,0xc002cea4
c0029292:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029296:	89 10                	mov    DWORD PTR [eax],edx
c0029298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002929c:	83 ec 0c             	sub    esp,0xc
c002929f:	50                   	push   eax
c00292a0:	e8 8f af fe ff       	call   c0014234 <FPU::~FPU()>
c00292a5:	83 c4 10             	add    esp,0x10
c00292a8:	90                   	nop
c00292a9:	83 c4 0c             	add    esp,0xc
c00292ac:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c00292ae <AVX::~AVX()>:
c00292ae:	83 ec 0c             	sub    esp,0xc
c00292b1:	83 ec 0c             	sub    esp,0xc
c00292b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292b8:	e8 cd ff ff ff       	call   c002928a <AVX::~AVX()>
c00292bd:	83 c4 10             	add    esp,0x10
c00292c0:	83 ec 08             	sub    esp,0x8
c00292c3:	68 58 01 00 00       	push   0x158
c00292c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292cc:	e8 08 95 fe ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c00292d1:	83 c4 10             	add    esp,0x10
c00292d4:	83 c4 0c             	add    esp,0xc
c00292d7:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c00292d8 <MMX::~MMX()>:
c00292d8:	83 ec 0c             	sub    esp,0xc
c00292db:	ba e4 ce 02 c0       	mov    edx,0xc002cee4
c00292e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292e4:	89 10                	mov    DWORD PTR [eax],edx
c00292e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292ea:	83 ec 0c             	sub    esp,0xc
c00292ed:	50                   	push   eax
c00292ee:	e8 41 af fe ff       	call   c0014234 <FPU::~FPU()>
c00292f3:	83 c4 10             	add    esp,0x10
c00292f6:	90                   	nop
c00292f7:	83 c4 0c             	add    esp,0xc
c00292fa:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c00292fc <MMX::~MMX()>:
c00292fc:	83 ec 0c             	sub    esp,0xc
c00292ff:	83 ec 0c             	sub    esp,0xc
c0029302:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029306:	e8 cd ff ff ff       	call   c00292d8 <MMX::~MMX()>
c002930b:	83 c4 10             	add    esp,0x10
c002930e:	83 ec 08             	sub    esp,0x8
c0029311:	68 58 01 00 00       	push   0x158
c0029316:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002931a:	e8 ba 94 fe ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c002931f:	83 c4 10             	add    esp,0x10
c0029322:	83 c4 0c             	add    esp,0xc
c0029325:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0029326 <SSE::~SSE()>:
c0029326:	83 ec 0c             	sub    esp,0xc
c0029329:	ba 24 cf 02 c0       	mov    edx,0xc002cf24
c002932e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029332:	89 10                	mov    DWORD PTR [eax],edx
c0029334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029338:	83 ec 0c             	sub    esp,0xc
c002933b:	50                   	push   eax
c002933c:	e8 f3 ae fe ff       	call   c0014234 <FPU::~FPU()>
c0029341:	83 c4 10             	add    esp,0x10
c0029344:	90                   	nop
c0029345:	83 c4 0c             	add    esp,0xc
c0029348:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002934a <SSE::~SSE()>:
c002934a:	83 ec 0c             	sub    esp,0xc
c002934d:	83 ec 0c             	sub    esp,0xc
c0029350:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029354:	e8 cd ff ff ff       	call   c0029326 <SSE::~SSE()>
c0029359:	83 c4 10             	add    esp,0x10
c002935c:	83 ec 08             	sub    esp,0x8
c002935f:	68 58 01 00 00       	push   0x158
c0029364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029368:	e8 6c 94 fe ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c002936d:	83 c4 10             	add    esp,0x10
c0029370:	83 c4 0c             	add    esp,0xc
c0029373:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029374 <x87::~x87()>:
c0029374:	83 ec 0c             	sub    esp,0xc
c0029377:	ba 64 cf 02 c0       	mov    edx,0xc002cf64
c002937c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029380:	89 10                	mov    DWORD PTR [eax],edx
c0029382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029386:	83 ec 0c             	sub    esp,0xc
c0029389:	50                   	push   eax
c002938a:	e8 a5 ae fe ff       	call   c0014234 <FPU::~FPU()>
c002938f:	83 c4 10             	add    esp,0x10
c0029392:	90                   	nop
c0029393:	83 c4 0c             	add    esp,0xc
c0029396:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0029398 <x87::~x87()>:
c0029398:	83 ec 0c             	sub    esp,0xc
c002939b:	83 ec 0c             	sub    esp,0xc
c002939e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293a2:	e8 cd ff ff ff       	call   c0029374 <x87::~x87()>
c00293a7:	83 c4 10             	add    esp,0x10
c00293aa:	83 ec 08             	sub    esp,0x8
c00293ad:	68 58 01 00 00       	push   0x158
c00293b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293b6:	e8 1e 94 fe ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c00293bb:	83 c4 10             	add    esp,0x10
c00293be:	83 c4 0c             	add    esp,0xc
c00293c1:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00293c2 <IOAPIC::~IOAPIC()>:
c00293c2:	83 ec 0c             	sub    esp,0xc
c00293c5:	ba bc d0 02 c0       	mov    edx,0xc002d0bc
c00293ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293ce:	89 10                	mov    DWORD PTR [eax],edx
c00293d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293d4:	83 ec 0c             	sub    esp,0xc
c00293d7:	50                   	push   eax
c00293d8:	e8 db a7 fe ff       	call   c0013bb8 <Device::~Device()>
c00293dd:	83 c4 10             	add    esp,0x10
c00293e0:	90                   	nop
c00293e1:	83 c4 0c             	add    esp,0xc
c00293e4:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00293e6 <IOAPIC::~IOAPIC()>:
c00293e6:	83 ec 0c             	sub    esp,0xc
c00293e9:	83 ec 0c             	sub    esp,0xc
c00293ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293f0:	e8 cd ff ff ff       	call   c00293c2 <IOAPIC::~IOAPIC()>
c00293f5:	83 c4 10             	add    esp,0x10
c00293f8:	83 ec 08             	sub    esp,0x8
c00293fb:	68 68 01 00 00       	push   0x168
c0029400:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029404:	e8 d0 93 fe ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c0029409:	83 c4 10             	add    esp,0x10
c002940c:	83 c4 0c             	add    esp,0xc
c002940f:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029410 <APIC::~APIC()>:
c0029410:	83 ec 0c             	sub    esp,0xc
c0029413:	ba 74 d0 02 c0       	mov    edx,0xc002d074
c0029418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002941c:	89 10                	mov    DWORD PTR [eax],edx
c002941e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029422:	83 ec 0c             	sub    esp,0xc
c0029425:	50                   	push   eax
c0029426:	e8 d3 b2 fe ff       	call   c00146fe <InterruptController::~InterruptController()>
c002942b:	83 c4 10             	add    esp,0x10
c002942e:	90                   	nop
c002942f:	83 c4 0c             	add    esp,0xc
c0029432:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029434 <APIC::~APIC()>:
c0029434:	83 ec 0c             	sub    esp,0xc
c0029437:	83 ec 0c             	sub    esp,0xc
c002943a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002943e:	e8 cd ff ff ff       	call   c0029410 <APIC::~APIC()>
c0029443:	83 c4 10             	add    esp,0x10
c0029446:	83 ec 08             	sub    esp,0x8
c0029449:	68 58 21 00 00       	push   0x2158
c002944e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029452:	e8 82 93 fe ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c0029457:	83 c4 10             	add    esp,0x10
c002945a:	83 c4 0c             	add    esp,0xc
c002945d:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c002945e <PIC::~PIC()>:
c002945e:	83 ec 0c             	sub    esp,0xc
c0029461:	ba 0c d1 02 c0       	mov    edx,0xc002d10c
c0029466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002946a:	89 10                	mov    DWORD PTR [eax],edx
c002946c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029470:	83 ec 0c             	sub    esp,0xc
c0029473:	50                   	push   eax
c0029474:	e8 85 b2 fe ff       	call   c00146fe <InterruptController::~InterruptController()>
c0029479:	83 c4 10             	add    esp,0x10
c002947c:	90                   	nop
c002947d:	83 c4 0c             	add    esp,0xc
c0029480:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029482 <PIC::~PIC()>:
c0029482:	83 ec 0c             	sub    esp,0xc
c0029485:	83 ec 0c             	sub    esp,0xc
c0029488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002948c:	e8 cd ff ff ff       	call   c002945e <PIC::~PIC()>
c0029491:	83 c4 10             	add    esp,0x10
c0029494:	83 ec 08             	sub    esp,0x8
c0029497:	68 58 21 00 00       	push   0x2158
c002949c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294a0:	e8 34 93 fe ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c00294a5:	83 c4 10             	add    esp,0x10
c00294a8:	83 c4 0c             	add    esp,0xc
c00294ab:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00294ac <APICTimer::~APICTimer()>:
c00294ac:	83 ec 0c             	sub    esp,0xc
c00294af:	ba 60 d1 02 c0       	mov    edx,0xc002d160
c00294b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294b8:	89 10                	mov    DWORD PTR [eax],edx
c00294ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294be:	83 ec 0c             	sub    esp,0xc
c00294c1:	50                   	push   eax
c00294c2:	e8 95 d2 fe ff       	call   c001675c <Timer::~Timer()>
c00294c7:	83 c4 10             	add    esp,0x10
c00294ca:	90                   	nop
c00294cb:	83 c4 0c             	add    esp,0xc
c00294ce:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00294d0 <APICTimer::~APICTimer()>:
c00294d0:	83 ec 0c             	sub    esp,0xc
c00294d3:	83 ec 0c             	sub    esp,0xc
c00294d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294da:	e8 cd ff ff ff       	call   c00294ac <APICTimer::~APICTimer()>
c00294df:	83 c4 10             	add    esp,0x10
c00294e2:	83 ec 08             	sub    esp,0x8
c00294e5:	68 60 01 00 00       	push   0x160
c00294ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294ee:	e8 e6 92 fe ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c00294f3:	83 c4 10             	add    esp,0x10
c00294f6:	83 c4 0c             	add    esp,0xc
c00294f9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00294fa <PIT::~PIT()>:
c00294fa:	83 ec 0c             	sub    esp,0xc
c00294fd:	ba b0 d1 02 c0       	mov    edx,0xc002d1b0
c0029502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029506:	89 10                	mov    DWORD PTR [eax],edx
c0029508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002950c:	83 ec 0c             	sub    esp,0xc
c002950f:	50                   	push   eax
c0029510:	e8 47 d2 fe ff       	call   c001675c <Timer::~Timer()>
c0029515:	83 c4 10             	add    esp,0x10
c0029518:	90                   	nop
c0029519:	83 c4 0c             	add    esp,0xc
c002951c:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002951e <PIT::~PIT()>:
c002951e:	83 ec 0c             	sub    esp,0xc
c0029521:	83 ec 0c             	sub    esp,0xc
c0029524:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029528:	e8 cd ff ff ff       	call   c00294fa <PIT::~PIT()>
c002952d:	83 c4 10             	add    esp,0x10
c0029530:	83 ec 08             	sub    esp,0x8
c0029533:	68 5c 01 00 00       	push   0x15c
c0029538:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002953c:	e8 98 92 fe ff       	call   c00127d9 <operator delete(void*, unsigned long)>
c0029541:	83 c4 10             	add    esp,0x10
c0029544:	83 c4 0c             	add    esp,0xc
c0029547:	c3                   	ret    
