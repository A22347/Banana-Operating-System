
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 40 63 01 00       	call   c0016360 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 c4 45 03 c0       	mov    eax,0xc00345c4
c0000025:	3d c4 45 03 c0       	cmp    eax,0xc00345c4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 c4 45 03 c0       	push   0xc00345c4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 c4 45 03 c0       	mov    eax,0xc00345c4
c0000051:	2d c4 45 03 c0       	sub    eax,0xc00345c4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 c4 45 03 c0       	push   0xc00345c4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d a0 68 03 c0 00 	cmp    BYTE PTR ds:0xc00368a0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 2c f2 02 c0       	mov    ebx,0xc002f22c
c0000097:	81 eb 28 f2 02 c0    	sub    ebx,0xc002f228
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 28 f2 02 c0       	mov    esi,0xc002f228
c00000a6:	a1 a4 68 03 c0       	mov    eax,ds:0xc00368a4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 a4 68 03 c0       	mov    ds:0xc00368a4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 a4 68 03 c0       	mov    eax,ds:0xc00368a4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 c4 45 03 c0       	push   0xc00345c4
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 a0 68 03 c0 01 	mov    BYTE PTR ds:0xc00368a0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 a8 68 03 c0       	push   0xc00368a8
c0000108:	68 c4 45 03 c0       	push   0xc00345c4
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 df 46 02 00       	call   c002498c <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 58 8c 01 00       	call   c0018f1d <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 bd 46 02 00       	call   c002498c <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 ca 4b 02 00       	call   c0024eb8 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 6d 50 02 00       	call   c0025364 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c4 a9 03 c0 	lgdtd  ds:0xc003a9c4
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 ff fd 01 00       	jmp    c002017e <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 c0 68 03 c0       	mov    ds:0xc00368c0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 c0 68 03 c0    	mov    DWORD PTR ds:0xc00368c0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d c0 68 03 c0    	mov    ebx,DWORD PTR ds:0xc00368c0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 40 f2 02 c0 02 	test   BYTE PTR [edx-0x3ffd0dc0],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 40 f2 02 c0 01 	test   BYTE PTR [edx-0x3ffd0dc0],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 40 f2 02 c0 08 	test   BYTE PTR [edx-0x3ffd0dc0],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 40 f2 02 c0 04 	test   BYTE PTR [ecx-0x3ffd0dc0],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 40 f2 02 c0 01 	test   BYTE PTR [edx-0x3ffd0dc0],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <LWIP_PLATFORM_HTONS>:
c0000be8:	83 ec 04             	sub    esp,0x4
c0000beb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000bef:	66 89 04 24          	mov    WORD PTR [esp],ax
c0000bf3:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000bf7:	c1 e8 08             	shr    eax,0x8
c0000bfa:	89 c2                	mov    edx,eax
c0000bfc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000c00:	c1 e0 08             	shl    eax,0x8
c0000c03:	09 d0                	or     eax,edx
c0000c05:	83 c4 04             	add    esp,0x4
c0000c08:	c3                   	ret    
c0000c09:	8d 76 00             	lea    esi,[esi+0x0]

c0000c0c <LWIP_PLATFORM_HTONL>:
c0000c0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c10:	c1 e8 18             	shr    eax,0x18
c0000c13:	89 c2                	mov    edx,eax
c0000c15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c19:	c1 e8 08             	shr    eax,0x8
c0000c1c:	25 00 ff 00 00       	and    eax,0xff00
c0000c21:	09 c2                	or     edx,eax
c0000c23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c27:	c1 e0 08             	shl    eax,0x8
c0000c2a:	25 00 00 ff 00       	and    eax,0xff0000
c0000c2f:	09 c2                	or     edx,eax
c0000c31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c35:	c1 e0 18             	shl    eax,0x18
c0000c38:	09 d0                	or     eax,edx
c0000c3a:	c3                   	ret    
c0000c3b:	90                   	nop

c0000c3c <lwip_socket_init>:
c0000c3c:	90                   	nop
c0000c3d:	c3                   	ret    
c0000c3e:	66 90                	xchg   ax,ax

c0000c40 <sys_mutex_new>:
c0000c40:	90                   	nop
c0000c41:	c3                   	ret    
c0000c42:	66 90                	xchg   ax,ax

c0000c44 <sys_mutex_lock>:
c0000c44:	90                   	nop
c0000c45:	c3                   	ret    
c0000c46:	66 90                	xchg   ax,ax

c0000c48 <sys_mutex_unlock>:
c0000c48:	90                   	nop
c0000c49:	c3                   	ret    
c0000c4a:	66 90                	xchg   ax,ax

c0000c4c <tcpip_callback_with_block>:
c0000c4c:	90                   	nop
c0000c4d:	c3                   	ret    
c0000c4e:	66 90                	xchg   ax,ax

c0000c50 <sys_sem_new>:
c0000c50:	83 ec 1c             	sub    esp,0x1c
c0000c53:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000c57:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0000c5b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0000c60:	83 ec 08             	sub    esp,0x8
c0000c63:	50                   	push   eax
c0000c64:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0000c68:	e8 8f 0f 02 00       	call   c0021bfc <KeNetCreateSemaphore>
c0000c6d:	83 c4 10             	add    esp,0x10
c0000c70:	b0 00                	mov    al,0x0
c0000c72:	83 c4 1c             	add    esp,0x1c
c0000c75:	c3                   	ret    
c0000c76:	66 90                	xchg   ax,ax

c0000c78 <sys_sem_free>:
c0000c78:	83 ec 0c             	sub    esp,0xc
c0000c7b:	83 ec 0c             	sub    esp,0xc
c0000c7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000c82:	e8 ad 0f 02 00       	call   c0021c34 <KeNetFreeSemaphore>
c0000c87:	83 c4 10             	add    esp,0x10
c0000c8a:	90                   	nop
c0000c8b:	83 c4 0c             	add    esp,0xc
c0000c8e:	c3                   	ret    
c0000c8f:	90                   	nop

c0000c90 <sys_sem_signal>:
c0000c90:	83 ec 0c             	sub    esp,0xc
c0000c93:	83 ec 0c             	sub    esp,0xc
c0000c96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000c9a:	e8 b1 0f 02 00       	call   c0021c50 <KeNetSignalSemaphore>
c0000c9f:	83 c4 10             	add    esp,0x10
c0000ca2:	90                   	nop
c0000ca3:	83 c4 0c             	add    esp,0xc
c0000ca6:	c3                   	ret    
c0000ca7:	90                   	nop

c0000ca8 <sys_arch_sem_wait>:
c0000ca8:	83 ec 0c             	sub    esp,0xc
c0000cab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000caf:	83 ec 08             	sub    esp,0x8
c0000cb2:	50                   	push   eax
c0000cb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000cb7:	e8 b0 0f 02 00       	call   c0021c6c <KeNetWaitSemaphore>
c0000cbc:	83 c4 10             	add    esp,0x10
c0000cbf:	83 c4 0c             	add    esp,0xc
c0000cc2:	c3                   	ret    
c0000cc3:	90                   	nop

c0000cc4 <sys_mbox_new>:
c0000cc4:	b0 00                	mov    al,0x0
c0000cc6:	c3                   	ret    
c0000cc7:	90                   	nop

c0000cc8 <sys_mbox_free>:
c0000cc8:	90                   	nop
c0000cc9:	c3                   	ret    
c0000cca:	66 90                	xchg   ax,ax

c0000ccc <sys_mbox_post>:
c0000ccc:	90                   	nop
c0000ccd:	c3                   	ret    
c0000cce:	66 90                	xchg   ax,ax

c0000cd0 <sys_arch_mbox_fetch>:
c0000cd0:	b8 00 00 00 00       	mov    eax,0x0
c0000cd5:	c3                   	ret    
c0000cd6:	66 90                	xchg   ax,ax

c0000cd8 <sys_arch_mbox_tryfetch>:
c0000cd8:	b8 00 00 00 00       	mov    eax,0x0
c0000cdd:	c3                   	ret    
c0000cde:	66 90                	xchg   ax,ax

c0000ce0 <sys_mbox_trypost>:
c0000ce0:	90                   	nop
c0000ce1:	c3                   	ret    
c0000ce2:	66 90                	xchg   ax,ax

c0000ce4 <sys_thread_new>:
c0000ce4:	b8 00 00 00 00       	mov    eax,0x0
c0000ce9:	c3                   	ret    
c0000cea:	66 90                	xchg   ax,ax

c0000cec <sys_init>:
c0000cec:	90                   	nop
c0000ced:	c3                   	ret    

c0000cee <largebin_index>:
c0000cee:	89 c2                	mov    edx,eax
c0000cf0:	c1 ea 08             	shr    edx,0x8
c0000cf3:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000cf9:	77 10                	ja     c0000d0b <largebin_index+0x1d>
c0000cfb:	0f bd d2             	bsr    edx,edx
c0000cfe:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000d01:	d3 e8                	shr    eax,cl
c0000d03:	83 e0 03             	and    eax,0x3
c0000d06:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000d0a:	c3                   	ret    
c0000d0b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000d10:	c3                   	ret    

c0000d11 <malloc_init_state>:
c0000d11:	53                   	push   ebx
c0000d12:	8d 50 34             	lea    edx,[eax+0x34]
c0000d15:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000d1b:	89 d1                	mov    ecx,edx
c0000d1d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000d20:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000d23:	83 c2 08             	add    edx,0x8
c0000d26:	39 da                	cmp    edx,ebx
c0000d28:	75 f3                	jne    c0000d1d <malloc_init_state+0xc>
c0000d2a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000d2c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000d36:	83 e2 03             	and    edx,0x3
c0000d39:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000d43:	83 ca 48             	or     edx,0x48
c0000d46:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000d50:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000d5a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000d61:	89 10                	mov    DWORD PTR [eax],edx
c0000d63:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000d66:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000d70:	5b                   	pop    ebx
c0000d71:	c3                   	ret    

c0000d72 <malloc_consolidate>:
c0000d72:	8b 10                	mov    edx,DWORD PTR [eax]
c0000d74:	85 d2                	test   edx,edx
c0000d76:	0f 84 d8 00 00 00    	je     c0000e54 <malloc_consolidate+0xe2>
c0000d7c:	55                   	push   ebp
c0000d7d:	83 e2 fd             	and    edx,0xfffffffd
c0000d80:	57                   	push   edi
c0000d81:	89 c5                	mov    ebp,eax
c0000d83:	56                   	push   esi
c0000d84:	8d 78 34             	lea    edi,[eax+0x34]
c0000d87:	53                   	push   ebx
c0000d88:	83 ec 10             	sub    esp,0x10
c0000d8b:	89 10                	mov    DWORD PTR [eax],edx
c0000d8d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000d91:	c1 ea 03             	shr    edx,0x3
c0000d94:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000d98:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000d9c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d9f:	85 d2                	test   edx,edx
c0000da1:	0f 84 98 00 00 00    	je     c0000e3f <malloc_consolidate+0xcd>
c0000da7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000dae:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000db1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000db4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000db8:	89 f9                	mov    ecx,edi
c0000dba:	83 e1 fe             	and    ecx,0xfffffffe
c0000dbd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000dc0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000dc3:	83 e3 fc             	and    ebx,0xfffffffc
c0000dc6:	83 e7 01             	and    edi,0x1
c0000dc9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000dcc:	75 14                	jne    c0000de2 <malloc_consolidate+0x70>
c0000dce:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000dd0:	29 fa                	sub    edx,edi
c0000dd2:	01 f9                	add    ecx,edi
c0000dd4:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dd7:	89 fb                	mov    ebx,edi
c0000dd9:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000ddc:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000ddf:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000de2:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000de5:	74 40                	je     c0000e27 <malloc_consolidate+0xb5>
c0000de7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000dea:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ded:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000df1:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000df4:	83 e7 01             	and    edi,0x1
c0000df7:	75 0e                	jne    c0000e07 <malloc_consolidate+0x95>
c0000df9:	01 d9                	add    ecx,ebx
c0000dfb:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000dfe:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000e01:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000e04:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000e07:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000e0a:	89 ce                	mov    esi,ecx
c0000e0c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000e0f:	83 ce 01             	or     esi,0x1
c0000e12:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000e15:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000e18:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000e1b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000e1f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000e22:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000e25:	eb 0c                	jmp    c0000e33 <malloc_consolidate+0xc1>
c0000e27:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000e2a:	83 c9 01             	or     ecx,0x1
c0000e2d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e30:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000e33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000e37:	85 d2                	test   edx,edx
c0000e39:	0f 85 6f ff ff ff    	jne    c0000dae <malloc_consolidate+0x3c>
c0000e3f:	83 c5 04             	add    ebp,0x4
c0000e42:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000e46:	0f 85 50 ff ff ff    	jne    c0000d9c <malloc_consolidate+0x2a>
c0000e4c:	83 c4 10             	add    esp,0x10
c0000e4f:	5b                   	pop    ebx
c0000e50:	5e                   	pop    esi
c0000e51:	5f                   	pop    edi
c0000e52:	5d                   	pop    ebp
c0000e53:	c3                   	ret    
c0000e54:	e9 b8 fe ff ff       	jmp    c0000d11 <malloc_init_state>

c0000e59 <dlfree>:
c0000e59:	57                   	push   edi
c0000e5a:	56                   	push   esi
c0000e5b:	53                   	push   ebx
c0000e5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000e60:	85 db                	test   ebx,ebx
c0000e62:	0f 84 e2 00 00 00    	je     c0000f4a <dlfree+0xf1>
c0000e68:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000e6b:	8b 0d e0 68 03 c0    	mov    ecx,DWORD PTR ds:0xc00368e0
c0000e71:	89 f0                	mov    eax,esi
c0000e73:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000e76:	83 e0 fc             	and    eax,0xfffffffc
c0000e79:	39 c1                	cmp    ecx,eax
c0000e7b:	72 24                	jb     c0000ea1 <dlfree+0x48>
c0000e7d:	83 c9 03             	or     ecx,0x3
c0000e80:	c1 e8 03             	shr    eax,0x3
c0000e83:	89 0d e0 68 03 c0    	mov    DWORD PTR ds:0xc00368e0,ecx
c0000e89:	83 e8 02             	sub    eax,0x2
c0000e8c:	8b 0c 85 e4 68 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc971c]
c0000e93:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000e95:	89 14 85 e4 68 03 c0 	mov    DWORD PTR [eax*4-0x3ffc971c],edx
c0000e9c:	e9 a9 00 00 00       	jmp    c0000f4a <dlfree+0xf1>
c0000ea1:	83 e6 02             	and    esi,0x2
c0000ea4:	0f 85 a0 00 00 00    	jne    c0000f4a <dlfree+0xf1>
c0000eaa:	83 c9 01             	or     ecx,0x1
c0000ead:	8d 34 02             	lea    esi,[edx+eax*1]
c0000eb0:	89 0d e0 68 03 c0    	mov    DWORD PTR ds:0xc00368e0,ecx
c0000eb6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000eb9:	83 e1 fc             	and    ecx,0xfffffffc
c0000ebc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ec0:	75 13                	jne    c0000ed5 <dlfree+0x7c>
c0000ec2:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000ec5:	29 da                	sub    edx,ebx
c0000ec7:	01 d8                	add    eax,ebx
c0000ec9:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000ecc:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000ecf:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000ed2:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000ed5:	39 35 0c 69 03 c0    	cmp    DWORD PTR ds:0xc003690c,esi
c0000edb:	74 40                	je     c0000f1d <dlfree+0xc4>
c0000edd:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ee1:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000ee4:	80 e3 01             	and    bl,0x1
c0000ee7:	75 0e                	jne    c0000ef7 <dlfree+0x9e>
c0000ee9:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000eec:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000eef:	01 c8                	add    eax,ecx
c0000ef1:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000ef4:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000ef7:	8b 0d 1c 69 03 c0    	mov    ecx,DWORD PTR ds:0xc003691c
c0000efd:	c7 42 0c 14 69 03 c0 	mov    DWORD PTR [edx+0xc],0xc0036914
c0000f04:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000f07:	89 15 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,edx
c0000f0d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000f10:	89 c1                	mov    ecx,eax
c0000f12:	83 c9 01             	or     ecx,0x1
c0000f15:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f18:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000f1b:	eb 10                	jmp    c0000f2d <dlfree+0xd4>
c0000f1d:	01 c8                	add    eax,ecx
c0000f1f:	89 c1                	mov    ecx,eax
c0000f21:	83 c9 01             	or     ecx,0x1
c0000f24:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f27:	89 15 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,edx
c0000f2d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000f32:	76 16                	jbe    c0000f4a <dlfree+0xf1>
c0000f34:	f6 05 e0 68 03 c0 02 	test   BYTE PTR ds:0xc00368e0,0x2
c0000f3b:	74 0d                	je     c0000f4a <dlfree+0xf1>
c0000f3d:	5b                   	pop    ebx
c0000f3e:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0000f43:	5e                   	pop    esi
c0000f44:	5f                   	pop    edi
c0000f45:	e9 28 fe ff ff       	jmp    c0000d72 <malloc_consolidate>
c0000f4a:	5b                   	pop    ebx
c0000f4b:	5e                   	pop    esi
c0000f4c:	5f                   	pop    edi
c0000f4d:	c3                   	ret    

c0000f4e <sYSMALLOc>:
c0000f4e:	55                   	push   ebp
c0000f4f:	57                   	push   edi
c0000f50:	56                   	push   esi
c0000f51:	53                   	push   ebx
c0000f52:	89 d3                	mov    ebx,edx
c0000f54:	83 ec 2c             	sub    esp,0x2c
c0000f57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f5b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000f61:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000f64:	8d 42 ff             	lea    eax,[edx-0x1]
c0000f67:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000f6b:	74 1f                	je     c0000f8c <sYSMALLOc+0x3e>
c0000f6d:	89 d8                	mov    eax,ebx
c0000f6f:	e8 fe fd ff ff       	call   c0000d72 <malloc_consolidate>
c0000f74:	83 ec 0c             	sub    esp,0xc
c0000f77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000f7b:	83 e8 07             	sub    eax,0x7
c0000f7e:	50                   	push   eax
c0000f7f:	e8 2d 02 00 00       	call   c00011b1 <dlmalloc>
c0000f84:	83 c4 10             	add    esp,0x10
c0000f87:	e9 1d 02 00 00       	jmp    c00011a9 <sYSMALLOc+0x25b>
c0000f8c:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000f8f:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000f95:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000f98:	83 e0 fc             	and    eax,0xfffffffc
c0000f9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000fa3:	83 c0 10             	add    eax,0x10
c0000fa6:	01 c1                	add    ecx,eax
c0000fa8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000fac:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fb3:	74 04                	je     c0000fb9 <sYSMALLOc+0x6b>
c0000fb5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000fb9:	f7 da                	neg    edx
c0000fbb:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000fbf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000fc3:	21 d1                	and    ecx,edx
c0000fc5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000fc9:	7f 07                	jg     c0000fd2 <sYSMALLOc+0x84>
c0000fcb:	31 c0                	xor    eax,eax
c0000fcd:	e9 d7 01 00 00       	jmp    c00011a9 <sYSMALLOc+0x25b>
c0000fd2:	83 ec 0c             	sub    esp,0xc
c0000fd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000fd9:	e8 fa 51 01 00       	call   c00161d8 <sbrk>
c0000fde:	83 c4 10             	add    esp,0x10
c0000fe1:	89 c6                	mov    esi,eax
c0000fe3:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe6:	74 e3                	je     c0000fcb <sYSMALLOc+0x7d>
c0000fe8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000fec:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000fef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ff3:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ff9:	39 f1                	cmp    ecx,esi
c0000ffb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000fff:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0001005:	75 13                	jne    c000101a <sYSMALLOc+0xcc>
c0001007:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000100b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000100f:	83 c8 01             	or     eax,0x1
c0001012:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001015:	e9 37 01 00 00       	jmp    c0001151 <sYSMALLOc+0x203>
c000101a:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0001020:	89 d5                	mov    ebp,edx
c0001022:	83 e5 01             	and    ebp,0x1
c0001025:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000102a:	0f 95 c0             	setne  al
c000102d:	21 e8                	and    eax,ebp
c000102f:	39 f1                	cmp    ecx,esi
c0001031:	76 12                	jbe    c0001045 <sYSMALLOc+0xf7>
c0001033:	85 c0                	test   eax,eax
c0001035:	74 0e                	je     c0001045 <sYSMALLOc+0xf7>
c0001037:	83 e2 fe             	and    edx,0xfffffffe
c000103a:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0001040:	e9 82 00 00 00       	jmp    c00010c7 <sYSMALLOc+0x179>
c0001045:	85 ed                	test   ebp,ebp
c0001047:	74 7e                	je     c00010c7 <sYSMALLOc+0x179>
c0001049:	85 c0                	test   eax,eax
c000104b:	74 0e                	je     c000105b <sYSMALLOc+0x10d>
c000104d:	89 f0                	mov    eax,esi
c000104f:	29 c8                	sub    eax,ecx
c0001051:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0001055:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c000105b:	89 f2                	mov    edx,esi
c000105d:	83 e2 07             	and    edx,0x7
c0001060:	74 0c                	je     c000106e <sYSMALLOc+0x120>
c0001062:	b8 08 00 00 00       	mov    eax,0x8
c0001067:	29 d0                	sub    eax,edx
c0001069:	8d 2c 06             	lea    ebp,[esi+eax*1]
c000106c:	eb 04                	jmp    c0001072 <sYSMALLOc+0x124>
c000106e:	89 f5                	mov    ebp,esi
c0001070:	31 c0                	xor    eax,eax
c0001072:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0001076:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000107a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000107e:	01 c1                	add    ecx,eax
c0001080:	83 ec 0c             	sub    esp,0xc
c0001083:	01 f1                	add    ecx,esi
c0001085:	01 ca                	add    edx,ecx
c0001087:	29 c8                	sub    eax,ecx
c0001089:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c000108d:	01 c2                	add    edx,eax
c000108f:	52                   	push   edx
c0001090:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0001094:	e8 3f 51 01 00       	call   c00161d8 <sbrk>
c0001099:	83 c4 10             	add    esp,0x10
c000109c:	83 f8 ff             	cmp    eax,0xffffffff
c000109f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00010a3:	75 0f                	jne    c00010b4 <sYSMALLOc+0x166>
c00010a5:	83 ec 0c             	sub    esp,0xc
c00010a8:	6a 00                	push   0x0
c00010aa:	e8 29 51 01 00       	call   c00161d8 <sbrk>
c00010af:	83 c4 10             	add    esp,0x10
c00010b2:	eb 30                	jmp    c00010e4 <sYSMALLOc+0x196>
c00010b4:	39 c6                	cmp    esi,eax
c00010b6:	76 33                	jbe    c00010eb <sYSMALLOc+0x19d>
c00010b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00010bc:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c00010c3:	01 f0                	add    eax,esi
c00010c5:	eb 1d                	jmp    c00010e4 <sYSMALLOc+0x196>
c00010c7:	83 ec 0c             	sub    esp,0xc
c00010ca:	89 f5                	mov    ebp,esi
c00010cc:	6a 00                	push   0x0
c00010ce:	e8 05 51 01 00       	call   c00161d8 <sbrk>
c00010d3:	89 c2                	mov    edx,eax
c00010d5:	29 f2                	sub    edx,esi
c00010d7:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010db:	83 c4 10             	add    esp,0x10
c00010de:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010e4:	31 d2                	xor    edx,edx
c00010e6:	83 f8 ff             	cmp    eax,0xffffffff
c00010e9:	74 66                	je     c0001151 <sYSMALLOc+0x203>
c00010eb:	29 e8                	sub    eax,ebp
c00010ed:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c00010f0:	01 d0                	add    eax,edx
c00010f2:	83 c8 01             	or     eax,0x1
c00010f5:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00010f8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010fe:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001103:	74 4c                	je     c0001151 <sYSMALLOc+0x203>
c0001105:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001109:	83 e8 0c             	sub    eax,0xc
c000110c:	83 e0 f8             	and    eax,0xfffffff8
c000110f:	89 c2                	mov    edx,eax
c0001111:	83 ca 01             	or     edx,0x1
c0001114:	83 f8 0f             	cmp    eax,0xf
c0001117:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000111a:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001122:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c000112a:	76 25                	jbe    c0001151 <sYSMALLOc+0x203>
c000112c:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001132:	83 ec 0c             	sub    esp,0xc
c0001135:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000113f:	83 c7 08             	add    edi,0x8
c0001142:	57                   	push   edi
c0001143:	e8 11 fd ff ff       	call   c0000e59 <dlfree>
c0001148:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000114e:	83 c4 10             	add    esp,0x10
c0001151:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001157:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000115d:	73 06                	jae    c0001165 <sYSMALLOc+0x217>
c000115f:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001165:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000116b:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001171:	73 06                	jae    c0001179 <sYSMALLOc+0x22b>
c0001173:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001179:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000117c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000117f:	83 e2 fc             	and    edx,0xfffffffc
c0001182:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001186:	0f 82 3f fe ff ff    	jb     c0000fcb <sYSMALLOc+0x7d>
c000118c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001190:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001193:	29 fa                	sub    edx,edi
c0001195:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001198:	83 ca 01             	or     edx,0x1
c000119b:	89 fb                	mov    ebx,edi
c000119d:	83 c0 08             	add    eax,0x8
c00011a0:	83 cb 01             	or     ebx,0x1
c00011a3:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00011a6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00011a9:	83 c4 2c             	add    esp,0x2c
c00011ac:	5b                   	pop    ebx
c00011ad:	5e                   	pop    esi
c00011ae:	5f                   	pop    edi
c00011af:	5d                   	pop    ebp
c00011b0:	c3                   	ret    

c00011b1 <dlmalloc>:
c00011b1:	55                   	push   ebp
c00011b2:	57                   	push   edi
c00011b3:	56                   	push   esi
c00011b4:	53                   	push   ebx
c00011b5:	83 ec 1c             	sub    esp,0x1c
c00011b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00011bc:	83 f8 df             	cmp    eax,0xffffffdf
c00011bf:	0f 87 70 03 00 00    	ja     c0001535 <dlmalloc+0x384>
c00011c5:	83 c0 0b             	add    eax,0xb
c00011c8:	be 10 00 00 00       	mov    esi,0x10
c00011cd:	83 f8 0f             	cmp    eax,0xf
c00011d0:	76 05                	jbe    c00011d7 <dlmalloc+0x26>
c00011d2:	83 e0 f8             	and    eax,0xfffffff8
c00011d5:	89 c6                	mov    esi,eax
c00011d7:	8b 3d e0 68 03 c0    	mov    edi,DWORD PTR ds:0xc00368e0
c00011dd:	f7 c7 01 00 00 00    	test   edi,0x1
c00011e3:	75 17                	jne    c00011fc <dlmalloc+0x4b>
c00011e5:	85 ff                	test   edi,edi
c00011e7:	0f 85 05 03 00 00    	jne    c00014f2 <dlmalloc+0x341>
c00011ed:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c00011f2:	e8 7b fb ff ff       	call   c0000d72 <malloc_consolidate>
c00011f7:	e9 f6 02 00 00       	jmp    c00014f2 <dlmalloc+0x341>
c00011fc:	39 f7                	cmp    edi,esi
c00011fe:	72 1f                	jb     c000121f <dlmalloc+0x6e>
c0001200:	89 f2                	mov    edx,esi
c0001202:	c1 ea 03             	shr    edx,0x3
c0001205:	83 ea 02             	sub    edx,0x2
c0001208:	8b 04 95 e4 68 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc971c]
c000120f:	85 c0                	test   eax,eax
c0001211:	74 0c                	je     c000121f <dlmalloc+0x6e>
c0001213:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001216:	89 0c 95 e4 68 03 c0 	mov    DWORD PTR [edx*4-0x3ffc971c],ecx
c000121d:	eb 30                	jmp    c000124f <dlmalloc+0x9e>
c000121f:	89 f0                	mov    eax,esi
c0001221:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001227:	77 2e                	ja     c0001257 <dlmalloc+0xa6>
c0001229:	c1 e8 03             	shr    eax,0x3
c000122c:	8d 14 c5 14 69 03 c0 	lea    edx,[eax*8-0x3ffc96ec]
c0001233:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001237:	8d 5a f8             	lea    ebx,[edx-0x8]
c000123a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000123d:	39 c3                	cmp    ebx,eax
c000123f:	74 2e                	je     c000126f <dlmalloc+0xbe>
c0001241:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001244:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001249:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000124c:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000124f:	83 c0 08             	add    eax,0x8
c0001252:	e9 e0 02 00 00       	jmp    c0001537 <dlmalloc+0x386>
c0001257:	e8 92 fa ff ff       	call   c0000cee <largebin_index>
c000125c:	83 e7 02             	and    edi,0x2
c000125f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001263:	74 0a                	je     c000126f <dlmalloc+0xbe>
c0001265:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c000126a:	e8 03 fb ff ff       	call   c0000d72 <malloc_consolidate>
c000126f:	8d 46 10             	lea    eax,[esi+0x10]
c0001272:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001276:	8b 1d 20 69 03 c0    	mov    ebx,DWORD PTR ds:0xc0036920
c000127c:	81 fb 14 69 03 c0    	cmp    ebx,0xc0036914
c0001282:	0f 84 13 01 00 00    	je     c000139b <dlmalloc+0x1ea>
c0001288:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000128b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000128e:	83 e7 fc             	and    edi,0xfffffffc
c0001291:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001297:	77 4c                	ja     c00012e5 <dlmalloc+0x134>
c0001299:	3d 14 69 03 c0       	cmp    eax,0xc0036914
c000129e:	75 45                	jne    c00012e5 <dlmalloc+0x134>
c00012a0:	39 1d 10 69 03 c0    	cmp    DWORD PTR ds:0xc0036910,ebx
c00012a6:	75 3d                	jne    c00012e5 <dlmalloc+0x134>
c00012a8:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00012ac:	73 37                	jae    c00012e5 <dlmalloc+0x134>
c00012ae:	8d 04 33             	lea    eax,[ebx+esi*1]
c00012b1:	89 fa                	mov    edx,edi
c00012b3:	a3 1c 69 03 c0       	mov    ds:0xc003691c,eax
c00012b8:	a3 20 69 03 c0       	mov    ds:0xc0036920,eax
c00012bd:	a3 10 69 03 c0       	mov    ds:0xc0036910,eax
c00012c2:	29 f2                	sub    edx,esi
c00012c4:	c7 40 08 14 69 03 c0 	mov    DWORD PTR [eax+0x8],0xc0036914
c00012cb:	c7 40 0c 14 69 03 c0 	mov    DWORD PTR [eax+0xc],0xc0036914
c00012d2:	83 ce 01             	or     esi,0x1
c00012d5:	89 d1                	mov    ecx,edx
c00012d7:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00012da:	83 c9 01             	or     ecx,0x1
c00012dd:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00012e0:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00012e3:	eb 15                	jmp    c00012fa <dlmalloc+0x149>
c00012e5:	a3 20 69 03 c0       	mov    ds:0xc0036920,eax
c00012ea:	39 fe                	cmp    esi,edi
c00012ec:	c7 40 08 14 69 03 c0 	mov    DWORD PTR [eax+0x8],0xc0036914
c00012f3:	75 0d                	jne    c0001302 <dlmalloc+0x151>
c00012f5:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00012fa:	8d 43 08             	lea    eax,[ebx+0x8]
c00012fd:	e9 35 02 00 00       	jmp    c0001537 <dlmalloc+0x386>
c0001302:	89 f8                	mov    eax,edi
c0001304:	81 ff ff 00 00 00    	cmp    edi,0xff
c000130a:	77 19                	ja     c0001325 <dlmalloc+0x174>
c000130c:	c1 e8 03             	shr    eax,0x3
c000130f:	8d 14 00             	lea    edx,[eax+eax*1]
c0001312:	83 c2 0d             	add    edx,0xd
c0001315:	8d 2c 95 d8 68 03 c0 	lea    ebp,[edx*4-0x3ffc9728]
c000131c:	8b 14 95 e0 68 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9720]
c0001323:	eb 46                	jmp    c000136b <dlmalloc+0x1ba>
c0001325:	e8 c4 f9 ff ff       	call   c0000cee <largebin_index>
c000132a:	8d 14 00             	lea    edx,[eax+eax*1]
c000132d:	83 c2 0d             	add    edx,0xd
c0001330:	8d 0c 95 e0 68 03 c0 	lea    ecx,[edx*4-0x3ffc9720]
c0001337:	8b 14 95 e0 68 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9720]
c000133e:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001341:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001345:	89 d5                	mov    ebp,edx
c0001347:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000134b:	74 1e                	je     c000136b <dlmalloc+0x1ba>
c000134d:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001350:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001353:	77 12                	ja     c0001367 <dlmalloc+0x1b6>
c0001355:	83 cf 01             	or     edi,0x1
c0001358:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000135b:	76 05                	jbe    c0001362 <dlmalloc+0x1b1>
c000135d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001360:	eb f6                	jmp    c0001358 <dlmalloc+0x1a7>
c0001362:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001365:	eb 04                	jmp    c000136b <dlmalloc+0x1ba>
c0001367:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000136b:	89 c7                	mov    edi,eax
c000136d:	88 c1                	mov    cl,al
c000136f:	c1 ff 05             	sar    edi,0x5
c0001372:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001376:	bf 01 00 00 00       	mov    edi,0x1
c000137b:	d3 e7                	shl    edi,cl
c000137d:	89 f8                	mov    eax,edi
c000137f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001383:	09 04 bd 14 6c 03 c0 	or     DWORD PTR [edi*4-0x3ffc93ec],eax
c000138a:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c000138d:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001390:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001393:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001396:	e9 db fe ff ff       	jmp    c0001276 <dlmalloc+0xc5>
c000139b:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013a1:	76 78                	jbe    c000141b <dlmalloc+0x26a>
c00013a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00013a7:	8d 04 c5 14 69 03 c0 	lea    eax,[eax*8-0x3ffc96ec]
c00013ae:	8d 48 f8             	lea    ecx,[eax-0x8]
c00013b1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	74 63                	je     c000141b <dlmalloc+0x26a>
c00013b8:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00013bb:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00013be:	83 e3 fc             	and    ebx,0xfffffffc
c00013c1:	39 de                	cmp    esi,ebx
c00013c3:	77 52                	ja     c0001417 <dlmalloc+0x266>
c00013c5:	89 df                	mov    edi,ebx
c00013c7:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00013ca:	29 f7                	sub    edi,esi
c00013cc:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00013cf:	01 d3                	add    ebx,edx
c00013d1:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00013d4:	83 ff 0f             	cmp    edi,0xf
c00013d7:	8d 42 08             	lea    eax,[edx+0x8]
c00013da:	77 09                	ja     c00013e5 <dlmalloc+0x234>
c00013dc:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00013e0:	e9 52 01 00 00       	jmp    c0001537 <dlmalloc+0x386>
c00013e5:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00013e8:	83 ce 01             	or     esi,0x1
c00013eb:	89 0d 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,ecx
c00013f1:	89 0d 20 69 03 c0    	mov    DWORD PTR ds:0xc0036920,ecx
c00013f7:	c7 41 08 14 69 03 c0 	mov    DWORD PTR [ecx+0x8],0xc0036914
c00013fe:	c7 41 0c 14 69 03 c0 	mov    DWORD PTR [ecx+0xc],0xc0036914
c0001405:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001408:	89 fa                	mov    edx,edi
c000140a:	83 ca 01             	or     edx,0x1
c000140d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001410:	89 3b                	mov    DWORD PTR [ebx],edi
c0001412:	e9 20 01 00 00       	jmp    c0001537 <dlmalloc+0x386>
c0001417:	89 c2                	mov    edx,eax
c0001419:	eb 99                	jmp    c00013b4 <dlmalloc+0x203>
c000141b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000141f:	b8 01 00 00 00       	mov    eax,0x1
c0001424:	41                   	inc    ecx
c0001425:	89 cb                	mov    ebx,ecx
c0001427:	8d 14 cd 0c 69 03 c0 	lea    edx,[ecx*8-0x3ffc96f4]
c000142e:	c1 eb 05             	shr    ebx,0x5
c0001431:	d3 e0                	shl    eax,cl
c0001433:	8b 3c 9d 14 6c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc93ec]
c000143a:	39 f8                	cmp    eax,edi
c000143c:	77 04                	ja     c0001442 <dlmalloc+0x291>
c000143e:	85 c0                	test   eax,eax
c0001440:	75 26                	jne    c0001468 <dlmalloc+0x2b7>
c0001442:	43                   	inc    ebx
c0001443:	83 fb 02             	cmp    ebx,0x2
c0001446:	0f 87 a6 00 00 00    	ja     c00014f2 <dlmalloc+0x341>
c000144c:	8b 3c 9d 14 6c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc93ec]
c0001453:	85 ff                	test   edi,edi
c0001455:	74 eb                	je     c0001442 <dlmalloc+0x291>
c0001457:	89 d8                	mov    eax,ebx
c0001459:	c1 e0 06             	shl    eax,0x6
c000145c:	8d 14 85 0c 69 03 c0 	lea    edx,[eax*4-0x3ffc96f4]
c0001463:	b8 01 00 00 00       	mov    eax,0x1
c0001468:	85 f8                	test   eax,edi
c000146a:	75 07                	jne    c0001473 <dlmalloc+0x2c2>
c000146c:	83 c2 08             	add    edx,0x8
c000146f:	01 c0                	add    eax,eax
c0001471:	eb f5                	jmp    c0001468 <dlmalloc+0x2b7>
c0001473:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001476:	39 ca                	cmp    edx,ecx
c0001478:	75 14                	jne    c000148e <dlmalloc+0x2dd>
c000147a:	89 c1                	mov    ecx,eax
c000147c:	83 c2 08             	add    edx,0x8
c000147f:	f7 d1                	not    ecx
c0001481:	01 c0                	add    eax,eax
c0001483:	21 cf                	and    edi,ecx
c0001485:	89 3c 9d 14 6c 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc93ec],edi
c000148c:	eb ac                	jmp    c000143a <dlmalloc+0x289>
c000148e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001491:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001494:	83 e0 fc             	and    eax,0xfffffffc
c0001497:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000149a:	89 c3                	mov    ebx,eax
c000149c:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000149f:	29 f3                	sub    ebx,esi
c00014a1:	8d 14 01             	lea    edx,[ecx+eax*1]
c00014a4:	83 fb 0f             	cmp    ebx,0xf
c00014a7:	8d 41 08             	lea    eax,[ecx+0x8]
c00014aa:	77 09                	ja     c00014b5 <dlmalloc+0x304>
c00014ac:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00014b0:	e9 82 00 00 00       	jmp    c0001537 <dlmalloc+0x386>
c00014b5:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00014b8:	81 fe ff 00 00 00    	cmp    esi,0xff
c00014be:	89 3d 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,edi
c00014c4:	89 3d 20 69 03 c0    	mov    DWORD PTR ds:0xc0036920,edi
c00014ca:	c7 47 08 14 69 03 c0 	mov    DWORD PTR [edi+0x8],0xc0036914
c00014d1:	c7 47 0c 14 69 03 c0 	mov    DWORD PTR [edi+0xc],0xc0036914
c00014d8:	77 06                	ja     c00014e0 <dlmalloc+0x32f>
c00014da:	89 3d 10 69 03 c0    	mov    DWORD PTR ds:0xc0036910,edi
c00014e0:	83 ce 01             	or     esi,0x1
c00014e3:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00014e6:	89 d9                	mov    ecx,ebx
c00014e8:	83 c9 01             	or     ecx,0x1
c00014eb:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00014ee:	89 1a                	mov    DWORD PTR [edx],ebx
c00014f0:	eb 45                	jmp    c0001537 <dlmalloc+0x386>
c00014f2:	a1 0c 69 03 c0       	mov    eax,ds:0xc003690c
c00014f7:	8d 4e 10             	lea    ecx,[esi+0x10]
c00014fa:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00014fd:	83 e2 fc             	and    edx,0xfffffffc
c0001500:	39 d1                	cmp    ecx,edx
c0001502:	77 1e                	ja     c0001522 <dlmalloc+0x371>
c0001504:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001507:	89 f3                	mov    ebx,esi
c0001509:	89 0d 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,ecx
c000150f:	83 cb 01             	or     ebx,0x1
c0001512:	29 f2                	sub    edx,esi
c0001514:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001517:	83 ca 01             	or     edx,0x1
c000151a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000151d:	e9 2d fd ff ff       	jmp    c000124f <dlmalloc+0x9e>
c0001522:	83 c4 1c             	add    esp,0x1c
c0001525:	89 f0                	mov    eax,esi
c0001527:	5b                   	pop    ebx
c0001528:	ba e0 68 03 c0       	mov    edx,0xc00368e0
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	e9 19 fa ff ff       	jmp    c0000f4e <sYSMALLOc>
c0001535:	31 c0                	xor    eax,eax
c0001537:	83 c4 1c             	add    esp,0x1c
c000153a:	5b                   	pop    ebx
c000153b:	5e                   	pop    esi
c000153c:	5f                   	pop    edi
c000153d:	5d                   	pop    ebp
c000153e:	c3                   	ret    

c000153f <iALLOc>:
c000153f:	55                   	push   ebp
c0001540:	89 c5                	mov    ebp,eax
c0001542:	57                   	push   edi
c0001543:	56                   	push   esi
c0001544:	53                   	push   ebx
c0001545:	83 ec 2c             	sub    esp,0x2c
c0001548:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000154c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001550:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001554:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c000155b:	75 12                	jne    c000156f <iALLOc+0x30>
c000155d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001561:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001566:	e8 07 f8 ff ff       	call   c0000d72 <malloc_consolidate>
c000156b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000156f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001574:	74 12                	je     c0001588 <iALLOc+0x49>
c0001576:	85 ed                	test   ebp,ebp
c0001578:	0f 84 64 01 00 00    	je     c00016e2 <iALLOc+0x1a3>
c000157e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001586:	eb 33                	jmp    c00015bb <iALLOc+0x7c>
c0001588:	85 ed                	test   ebp,ebp
c000158a:	75 14                	jne    c00015a0 <iALLOc+0x61>
c000158c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001594:	83 c4 2c             	add    esp,0x2c
c0001597:	5b                   	pop    ebx
c0001598:	5e                   	pop    esi
c0001599:	5f                   	pop    edi
c000159a:	5d                   	pop    ebp
c000159b:	e9 11 fc ff ff       	jmp    c00011b1 <dlmalloc>
c00015a0:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00015a7:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00015af:	83 f8 0f             	cmp    eax,0xf
c00015b2:	76 07                	jbe    c00015bb <iALLOc+0x7c>
c00015b4:	83 e0 f8             	and    eax,0xfffffff8
c00015b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00015bb:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00015c0:	75 09                	jne    c00015cb <iALLOc+0x8c>
c00015c2:	89 d0                	mov    eax,edx
c00015c4:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00015c7:	31 f6                	xor    esi,esi
c00015c9:	eb 3b                	jmp    c0001606 <iALLOc+0xc7>
c00015cb:	8b 02                	mov    eax,DWORD PTR [edx]
c00015cd:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00015d5:	83 c0 0b             	add    eax,0xb
c00015d8:	83 f8 0f             	cmp    eax,0xf
c00015db:	76 07                	jbe    c00015e4 <iALLOc+0xa5>
c00015dd:	83 e0 f8             	and    eax,0xfffffff8
c00015e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00015e4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00015e8:	0f af f5             	imul   esi,ebp
c00015eb:	eb 25                	jmp    c0001612 <iALLOc+0xd3>
c00015ed:	8b 18                	mov    ebx,DWORD PTR [eax]
c00015ef:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00015f2:	bb 10 00 00 00       	mov    ebx,0x10
c00015f7:	83 f9 0f             	cmp    ecx,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0xc2>
c00015fc:	83 e1 f8             	and    ecx,0xfffffff8
c00015ff:	89 cb                	mov    ebx,ecx
c0001601:	01 de                	add    esi,ebx
c0001603:	83 c0 04             	add    eax,0x4
c0001606:	39 c7                	cmp    edi,eax
c0001608:	75 e3                	jne    c00015ed <iALLOc+0xae>
c000160a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001612:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001616:	8b 1d 34 6c 03 c0    	mov    ebx,DWORD PTR ds:0xc0036c34
c000161c:	83 ec 0c             	sub    esp,0xc
c000161f:	c7 05 34 6c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036c34,0x0
c0001629:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000162d:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001631:	50                   	push   eax
c0001632:	e8 7a fb ff ff       	call   c00011b1 <dlmalloc>
c0001637:	83 c4 10             	add    esp,0x10
c000163a:	89 1d 34 6c 03 c0    	mov    DWORD PTR ds:0xc0036c34,ebx
c0001640:	85 c0                	test   eax,eax
c0001642:	0f 84 92 00 00 00    	je     c00016da <iALLOc+0x19b>
c0001648:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000164b:	8d 78 f8             	lea    edi,[eax-0x8]
c000164e:	83 e3 fc             	and    ebx,0xfffffffc
c0001651:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001655:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000165a:	74 1e                	je     c000167a <iALLOc+0x13b>
c000165c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001660:	89 d9                	mov    ecx,ebx
c0001662:	52                   	push   edx
c0001663:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001667:	83 e9 04             	sub    ecx,0x4
c000166a:	51                   	push   ecx
c000166b:	6a 00                	push   0x0
c000166d:	50                   	push   eax
c000166e:	e8 7d ee ff ff       	call   c00004f0 <memset>
c0001673:	83 c4 10             	add    esp,0x10
c0001676:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000167a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000167f:	75 14                	jne    c0001695 <iALLOc+0x156>
c0001681:	8d 04 37             	lea    eax,[edi+esi*1]
c0001684:	29 f3                	sub    ebx,esi
c0001686:	8d 48 08             	lea    ecx,[eax+0x8]
c0001689:	83 cb 01             	or     ebx,0x1
c000168c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001690:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001693:	89 f3                	mov    ebx,esi
c0001695:	31 c0                	xor    eax,eax
c0001697:	4d                   	dec    ebp
c0001698:	8d 4f 08             	lea    ecx,[edi+0x8]
c000169b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000169f:	39 c5                	cmp    ebp,eax
c00016a1:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00016a4:	74 2c                	je     c00016d2 <iALLOc+0x193>
c00016a6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00016aa:	85 c9                	test   ecx,ecx
c00016ac:	75 15                	jne    c00016c3 <iALLOc+0x184>
c00016ae:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00016b1:	8d 71 0b             	lea    esi,[ecx+0xb]
c00016b4:	b9 10 00 00 00       	mov    ecx,0x10
c00016b9:	83 fe 0f             	cmp    esi,0xf
c00016bc:	76 05                	jbe    c00016c3 <iALLOc+0x184>
c00016be:	83 e6 f8             	and    esi,0xfffffff8
c00016c1:	89 f1                	mov    ecx,esi
c00016c3:	89 ce                	mov    esi,ecx
c00016c5:	29 cb                	sub    ebx,ecx
c00016c7:	83 ce 01             	or     esi,0x1
c00016ca:	40                   	inc    eax
c00016cb:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00016ce:	01 cf                	add    edi,ecx
c00016d0:	eb c6                	jmp    c0001698 <iALLOc+0x159>
c00016d2:	83 cb 01             	or     ebx,0x1
c00016d5:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00016d8:	eb 08                	jmp    c00016e2 <iALLOc+0x1a3>
c00016da:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00016e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e6:	83 c4 2c             	add    esp,0x2c
c00016e9:	5b                   	pop    ebx
c00016ea:	5e                   	pop    esi
c00016eb:	5f                   	pop    edi
c00016ec:	5d                   	pop    ebp
c00016ed:	c3                   	ret    

c00016ee <dlrealloc>:
c00016ee:	55                   	push   ebp
c00016ef:	57                   	push   edi
c00016f0:	56                   	push   esi
c00016f1:	53                   	push   ebx
c00016f2:	83 ec 1c             	sub    esp,0x1c
c00016f5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00016f9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00016fd:	85 db                	test   ebx,ebx
c00016ff:	75 10                	jne    c0001711 <dlrealloc+0x23>
c0001701:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001705:	83 c4 1c             	add    esp,0x1c
c0001708:	5b                   	pop    ebx
c0001709:	5e                   	pop    esi
c000170a:	5f                   	pop    edi
c000170b:	5d                   	pop    ebp
c000170c:	e9 a0 fa ff ff       	jmp    c00011b1 <dlmalloc>
c0001711:	83 f8 df             	cmp    eax,0xffffffdf
c0001714:	76 07                	jbe    c000171d <dlrealloc+0x2f>
c0001716:	31 db                	xor    ebx,ebx
c0001718:	e9 6a 01 00 00       	jmp    c0001887 <dlrealloc+0x199>
c000171d:	83 c0 0b             	add    eax,0xb
c0001720:	bd 10 00 00 00       	mov    ebp,0x10
c0001725:	83 f8 0f             	cmp    eax,0xf
c0001728:	76 05                	jbe    c000172f <dlrealloc+0x41>
c000172a:	83 e0 f8             	and    eax,0xfffffff8
c000172d:	89 c5                	mov    ebp,eax
c000172f:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001732:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001735:	89 c6                	mov    esi,eax
c0001737:	83 e6 fc             	and    esi,0xfffffffc
c000173a:	a8 02                	test   al,0x2
c000173c:	75 d8                	jne    c0001716 <dlrealloc+0x28>
c000173e:	39 f5                	cmp    ebp,esi
c0001740:	0f 86 04 01 00 00    	jbe    c000184a <dlrealloc+0x15c>
c0001746:	8d 14 37             	lea    edx,[edi+esi*1]
c0001749:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000174c:	39 15 0c 69 03 c0    	cmp    DWORD PTR ds:0xc003690c,edx
c0001752:	75 33                	jne    c0001787 <dlrealloc+0x99>
c0001754:	83 e1 fc             	and    ecx,0xfffffffc
c0001757:	01 f1                	add    ecx,esi
c0001759:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000175d:	8d 4d 10             	lea    ecx,[ebp+0x10]
c0001760:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0001764:	77 49                	ja     c00017af <dlrealloc+0xc1>
c0001766:	01 ef                	add    edi,ebp
c0001768:	83 e0 01             	and    eax,0x1
c000176b:	09 e8                	or     eax,ebp
c000176d:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001770:	89 3d 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,edi
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	29 e8                	sub    eax,ebp
c000177c:	83 c8 01             	or     eax,0x1
c000177f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001782:	e9 00 01 00 00       	jmp    c0001887 <dlrealloc+0x199>
c0001787:	89 c8                	mov    eax,ecx
c0001789:	83 e0 fe             	and    eax,0xfffffffe
c000178c:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001791:	75 1c                	jne    c00017af <dlrealloc+0xc1>
c0001793:	83 e1 fc             	and    ecx,0xfffffffc
c0001796:	01 f1                	add    ecx,esi
c0001798:	39 cd                	cmp    ebp,ecx
c000179a:	77 13                	ja     c00017af <dlrealloc+0xc1>
c000179c:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c000179f:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00017a2:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00017a5:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00017a8:	89 ce                	mov    esi,ecx
c00017aa:	e9 9b 00 00 00       	jmp    c000184a <dlrealloc+0x15c>
c00017af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00017b3:	8d 45 f9             	lea    eax,[ebp-0x7]
c00017b6:	83 ec 0c             	sub    esp,0xc
c00017b9:	50                   	push   eax
c00017ba:	e8 f2 f9 ff ff       	call   c00011b1 <dlmalloc>
c00017bf:	83 c4 10             	add    esp,0x10
c00017c2:	85 c0                	test   eax,eax
c00017c4:	0f 84 4c ff ff ff    	je     c0001716 <dlrealloc+0x28>
c00017ca:	8d 48 f8             	lea    ecx,[eax-0x8]
c00017cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017d1:	39 ca                	cmp    edx,ecx
c00017d3:	75 0a                	jne    c00017df <dlrealloc+0xf1>
c00017d5:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00017d8:	83 e0 fc             	and    eax,0xfffffffc
c00017db:	01 c6                	add    esi,eax
c00017dd:	eb 6b                	jmp    c000184a <dlrealloc+0x15c>
c00017df:	8d 4e fc             	lea    ecx,[esi-0x4]
c00017e2:	83 f9 27             	cmp    ecx,0x27
c00017e5:	76 08                	jbe    c00017ef <dlrealloc+0x101>
c00017e7:	89 de                	mov    esi,ebx
c00017e9:	89 c7                	mov    edi,eax
c00017eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00017ed:	eb 43                	jmp    c0001832 <dlrealloc+0x144>
c00017ef:	8b 13                	mov    edx,DWORD PTR [ebx]
c00017f1:	83 f9 13             	cmp    ecx,0x13
c00017f4:	89 10                	mov    DWORD PTR [eax],edx
c00017f6:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00017f9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00017fc:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00017ff:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001802:	76 2e                	jbe    c0001832 <dlrealloc+0x144>
c0001804:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001807:	83 f9 1b             	cmp    ecx,0x1b
c000180a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000180d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001810:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001813:	76 1d                	jbe    c0001832 <dlrealloc+0x144>
c0001815:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001818:	83 f9 23             	cmp    ecx,0x23
c000181b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000181e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001821:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001824:	76 0c                	jbe    c0001832 <dlrealloc+0x144>
c0001826:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001829:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000182c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000182f:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001832:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001836:	83 ec 0c             	sub    esp,0xc
c0001839:	53                   	push   ebx
c000183a:	e8 1a f6 ff ff       	call   c0000e59 <dlfree>
c000183f:	83 c4 10             	add    esp,0x10
c0001842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001846:	89 c3                	mov    ebx,eax
c0001848:	eb 3d                	jmp    c0001887 <dlrealloc+0x199>
c000184a:	89 f2                	mov    edx,esi
c000184c:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000184f:	29 ea                	sub    edx,ebp
c0001851:	83 e1 01             	and    ecx,0x1
c0001854:	8d 04 37             	lea    eax,[edi+esi*1]
c0001857:	83 fa 0f             	cmp    edx,0xf
c000185a:	77 0b                	ja     c0001867 <dlrealloc+0x179>
c000185c:	09 ce                	or     esi,ecx
c000185e:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001861:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001865:	eb 20                	jmp    c0001887 <dlrealloc+0x199>
c0001867:	01 ef                	add    edi,ebp
c0001869:	83 ec 0c             	sub    esp,0xc
c000186c:	09 cd                	or     ebp,ecx
c000186e:	83 ca 01             	or     edx,0x1
c0001871:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c0001874:	83 c7 08             	add    edi,0x8
c0001877:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c000187a:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000187e:	57                   	push   edi
c000187f:	e8 d5 f5 ff ff       	call   c0000e59 <dlfree>
c0001884:	83 c4 10             	add    esp,0x10
c0001887:	83 c4 1c             	add    esp,0x1c
c000188a:	89 d8                	mov    eax,ebx
c000188c:	5b                   	pop    ebx
c000188d:	5e                   	pop    esi
c000188e:	5f                   	pop    edi
c000188f:	5d                   	pop    ebp
c0001890:	c3                   	ret    

c0001891 <dlmemalign>:
c0001891:	55                   	push   ebp
c0001892:	57                   	push   edi
c0001893:	56                   	push   esi
c0001894:	53                   	push   ebx
c0001895:	83 ec 0c             	sub    esp,0xc
c0001898:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000189c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00018a0:	83 fa 08             	cmp    edx,0x8
c00018a3:	77 10                	ja     c00018b5 <dlmemalign+0x24>
c00018a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00018a9:	83 c4 0c             	add    esp,0xc
c00018ac:	5b                   	pop    ebx
c00018ad:	5e                   	pop    esi
c00018ae:	5f                   	pop    edi
c00018af:	5d                   	pop    ebp
c00018b0:	e9 fc f8 ff ff       	jmp    c00011b1 <dlmalloc>
c00018b5:	bf 10 00 00 00       	mov    edi,0x10
c00018ba:	83 fa 0f             	cmp    edx,0xf
c00018bd:	76 13                	jbe    c00018d2 <dlmemalign+0x41>
c00018bf:	8d 4a ff             	lea    ecx,[edx-0x1]
c00018c2:	85 d1                	test   ecx,edx
c00018c4:	75 04                	jne    c00018ca <dlmemalign+0x39>
c00018c6:	89 d7                	mov    edi,edx
c00018c8:	eb 08                	jmp    c00018d2 <dlmemalign+0x41>
c00018ca:	39 d7                	cmp    edi,edx
c00018cc:	73 04                	jae    c00018d2 <dlmemalign+0x41>
c00018ce:	01 ff                	add    edi,edi
c00018d0:	eb f8                	jmp    c00018ca <dlmemalign+0x39>
c00018d2:	83 f8 df             	cmp    eax,0xffffffdf
c00018d5:	76 07                	jbe    c00018de <dlmemalign+0x4d>
c00018d7:	31 c0                	xor    eax,eax
c00018d9:	e9 ce 00 00 00       	jmp    c00019ac <dlmemalign+0x11b>
c00018de:	83 c0 0b             	add    eax,0xb
c00018e1:	bd 10 00 00 00       	mov    ebp,0x10
c00018e6:	83 f8 0f             	cmp    eax,0xf
c00018e9:	76 05                	jbe    c00018f0 <dlmemalign+0x5f>
c00018eb:	83 e0 f8             	and    eax,0xfffffff8
c00018ee:	89 c5                	mov    ebp,eax
c00018f0:	83 ec 0c             	sub    esp,0xc
c00018f3:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00018f7:	50                   	push   eax
c00018f8:	e8 b4 f8 ff ff       	call   c00011b1 <dlmalloc>
c00018fd:	83 c4 10             	add    esp,0x10
c0001900:	89 c1                	mov    ecx,eax
c0001902:	85 c0                	test   eax,eax
c0001904:	74 d1                	je     c00018d7 <dlmemalign+0x46>
c0001906:	31 d2                	xor    edx,edx
c0001908:	8d 70 f8             	lea    esi,[eax-0x8]
c000190b:	f7 f7                	div    edi
c000190d:	85 d2                	test   edx,edx
c000190f:	74 62                	je     c0001973 <dlmemalign+0xe2>
c0001911:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001915:	89 f8                	mov    eax,edi
c0001917:	f7 d8                	neg    eax
c0001919:	21 c3                	and    ebx,eax
c000191b:	83 eb 08             	sub    ebx,0x8
c000191e:	89 d8                	mov    eax,ebx
c0001920:	29 f0                	sub    eax,esi
c0001922:	83 f8 0f             	cmp    eax,0xf
c0001925:	77 02                	ja     c0001929 <dlmemalign+0x98>
c0001927:	01 fb                	add    ebx,edi
c0001929:	89 d8                	mov    eax,ebx
c000192b:	29 f0                	sub    eax,esi
c000192d:	89 c6                	mov    esi,eax
c000192f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001932:	89 c2                	mov    edx,eax
c0001934:	83 e2 fc             	and    edx,0xfffffffc
c0001937:	29 f2                	sub    edx,esi
c0001939:	a8 02                	test   al,0x2
c000193b:	74 10                	je     c000194d <dlmemalign+0xbc>
c000193d:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001940:	83 ca 02             	or     edx,0x2
c0001943:	8d 43 08             	lea    eax,[ebx+0x8]
c0001946:	89 33                	mov    DWORD PTR [ebx],esi
c0001948:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000194b:	eb 5f                	jmp    c00019ac <dlmemalign+0x11b>
c000194d:	83 ec 0c             	sub    esp,0xc
c0001950:	89 d0                	mov    eax,edx
c0001952:	83 c8 01             	or     eax,0x1
c0001955:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001958:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000195d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001960:	83 e0 01             	and    eax,0x1
c0001963:	09 f0                	or     eax,esi
c0001965:	89 de                	mov    esi,ebx
c0001967:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000196a:	51                   	push   ecx
c000196b:	e8 e9 f4 ff ff       	call   c0000e59 <dlfree>
c0001970:	83 c4 10             	add    esp,0x10
c0001973:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001976:	a8 02                	test   al,0x2
c0001978:	75 2f                	jne    c00019a9 <dlmemalign+0x118>
c000197a:	83 e0 fc             	and    eax,0xfffffffc
c000197d:	8d 55 10             	lea    edx,[ebp+0x10]
c0001980:	39 c2                	cmp    edx,eax
c0001982:	73 25                	jae    c00019a9 <dlmemalign+0x118>
c0001984:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001987:	83 ec 0c             	sub    esp,0xc
c000198a:	29 e8                	sub    eax,ebp
c000198c:	83 c2 08             	add    edx,0x8
c000198f:	83 c8 01             	or     eax,0x1
c0001992:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001995:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001998:	83 e0 01             	and    eax,0x1
c000199b:	09 c5                	or     ebp,eax
c000199d:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00019a0:	52                   	push   edx
c00019a1:	e8 b3 f4 ff ff       	call   c0000e59 <dlfree>
c00019a6:	83 c4 10             	add    esp,0x10
c00019a9:	8d 46 08             	lea    eax,[esi+0x8]
c00019ac:	83 c4 0c             	add    esp,0xc
c00019af:	5b                   	pop    ebx
c00019b0:	5e                   	pop    esi
c00019b1:	5f                   	pop    edi
c00019b2:	5d                   	pop    ebp
c00019b3:	c3                   	ret    

c00019b4 <dlcalloc>:
c00019b4:	53                   	push   ebx
c00019b5:	83 ec 14             	sub    esp,0x14
c00019b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00019bc:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00019c1:	50                   	push   eax
c00019c2:	e8 ea f7 ff ff       	call   c00011b1 <dlmalloc>
c00019c7:	83 c4 10             	add    esp,0x10
c00019ca:	89 c3                	mov    ebx,eax
c00019cc:	85 c0                	test   eax,eax
c00019ce:	74 77                	je     c0001a47 <dlcalloc+0x93>
c00019d0:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00019d3:	89 d0                	mov    eax,edx
c00019d5:	83 e0 fc             	and    eax,0xfffffffc
c00019d8:	80 e2 02             	and    dl,0x2
c00019db:	75 5a                	jne    c0001a37 <dlcalloc+0x83>
c00019dd:	83 e8 04             	sub    eax,0x4
c00019e0:	83 f8 27             	cmp    eax,0x27
c00019e3:	76 03                	jbe    c00019e8 <dlcalloc+0x34>
c00019e5:	51                   	push   ecx
c00019e6:	eb 53                	jmp    c0001a3b <dlcalloc+0x87>
c00019e8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00019ee:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00019f5:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00019fc:	83 f8 13             	cmp    eax,0x13
c00019ff:	76 46                	jbe    c0001a47 <dlcalloc+0x93>
c0001a01:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001a08:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001a0f:	83 f8 1b             	cmp    eax,0x1b
c0001a12:	76 33                	jbe    c0001a47 <dlcalloc+0x93>
c0001a14:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001a1b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001a22:	83 f8 23             	cmp    eax,0x23
c0001a25:	76 20                	jbe    c0001a47 <dlcalloc+0x93>
c0001a27:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001a2e:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001a35:	eb 10                	jmp    c0001a47 <dlcalloc+0x93>
c0001a37:	83 e8 08             	sub    eax,0x8
c0001a3a:	52                   	push   edx
c0001a3b:	50                   	push   eax
c0001a3c:	6a 00                	push   0x0
c0001a3e:	53                   	push   ebx
c0001a3f:	e8 ac ea ff ff       	call   c00004f0 <memset>
c0001a44:	83 c4 10             	add    esp,0x10
c0001a47:	89 d8                	mov    eax,ebx
c0001a49:	83 c4 08             	add    esp,0x8
c0001a4c:	5b                   	pop    ebx
c0001a4d:	c3                   	ret    

c0001a4e <dlcfree>:
c0001a4e:	e9 06 f4 ff ff       	jmp    c0000e59 <dlfree>

c0001a53 <dlindependent_calloc>:
c0001a53:	83 ec 28             	sub    esp,0x28
c0001a56:	b9 03 00 00 00       	mov    ecx,0x3
c0001a5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001a5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001a63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001a67:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001a6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001a6f:	e8 cb fa ff ff       	call   c000153f <iALLOc>
c0001a74:	83 c4 2c             	add    esp,0x2c
c0001a77:	c3                   	ret    

c0001a78 <dlindependent_comalloc>:
c0001a78:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001a7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a80:	31 c9                	xor    ecx,ecx
c0001a82:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001a86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a8a:	e9 b0 fa ff ff       	jmp    c000153f <iALLOc>

c0001a8f <dlvalloc>:
c0001a8f:	83 ec 0c             	sub    esp,0xc
c0001a92:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001a99:	75 0a                	jne    c0001aa5 <dlvalloc+0x16>
c0001a9b:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001aa0:	e8 cd f2 ff ff       	call   c0000d72 <malloc_consolidate>
c0001aa5:	50                   	push   eax
c0001aa6:	50                   	push   eax
c0001aa7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001aab:	ff 35 3c 6c 03 c0    	push   DWORD PTR ds:0xc0036c3c
c0001ab1:	e8 db fd ff ff       	call   c0001891 <dlmemalign>
c0001ab6:	83 c4 1c             	add    esp,0x1c
c0001ab9:	c3                   	ret    

c0001aba <dlpvalloc>:
c0001aba:	83 ec 0c             	sub    esp,0xc
c0001abd:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001ac4:	75 0a                	jne    c0001ad0 <dlpvalloc+0x16>
c0001ac6:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001acb:	e8 a2 f2 ff ff       	call   c0000d72 <malloc_consolidate>
c0001ad0:	a1 3c 6c 03 c0       	mov    eax,ds:0xc0036c3c
c0001ad5:	89 c1                	mov    ecx,eax
c0001ad7:	52                   	push   edx
c0001ad8:	f7 d9                	neg    ecx
c0001ada:	52                   	push   edx
c0001adb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001adf:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001ae3:	21 ca                	and    edx,ecx
c0001ae5:	52                   	push   edx
c0001ae6:	50                   	push   eax
c0001ae7:	e8 a5 fd ff ff       	call   c0001891 <dlmemalign>
c0001aec:	83 c4 1c             	add    esp,0x1c
c0001aef:	c3                   	ret    

c0001af0 <dlmalloc_trim>:
c0001af0:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001af5:	e8 78 f2 ff ff       	call   c0000d72 <malloc_consolidate>
c0001afa:	31 c0                	xor    eax,eax
c0001afc:	c3                   	ret    

c0001afd <dlmalloc_usable_size>:
c0001afd:	53                   	push   ebx
c0001afe:	31 c0                	xor    eax,eax
c0001b00:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001b04:	85 c9                	test   ecx,ecx
c0001b06:	74 24                	je     c0001b2c <dlmalloc_usable_size+0x2f>
c0001b08:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001b0b:	f6 c2 02             	test   dl,0x2
c0001b0e:	74 08                	je     c0001b18 <dlmalloc_usable_size+0x1b>
c0001b10:	83 e2 fc             	and    edx,0xfffffffc
c0001b13:	8d 42 f8             	lea    eax,[edx-0x8]
c0001b16:	eb 14                	jmp    c0001b2c <dlmalloc_usable_size+0x2f>
c0001b18:	89 d3                	mov    ebx,edx
c0001b1a:	31 c0                	xor    eax,eax
c0001b1c:	83 e3 fe             	and    ebx,0xfffffffe
c0001b1f:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001b24:	74 06                	je     c0001b2c <dlmalloc_usable_size+0x2f>
c0001b26:	83 e2 fc             	and    edx,0xfffffffc
c0001b29:	8d 42 fc             	lea    eax,[edx-0x4]
c0001b2c:	5b                   	pop    ebx
c0001b2d:	c3                   	ret    

c0001b2e <dlmallinfo>:
c0001b2e:	55                   	push   ebp
c0001b2f:	57                   	push   edi
c0001b30:	56                   	push   esi
c0001b31:	53                   	push   ebx
c0001b32:	83 ec 08             	sub    esp,0x8
c0001b35:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001b39:	83 3d 0c 69 03 c0 00 	cmp    DWORD PTR ds:0xc003690c,0x0
c0001b40:	75 0a                	jne    c0001b4c <dlmallinfo+0x1e>
c0001b42:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001b47:	e8 26 f2 ff ff       	call   c0000d72 <malloc_consolidate>
c0001b4c:	a1 0c 69 03 c0       	mov    eax,ds:0xc003690c
c0001b51:	31 ed                	xor    ebp,ebp
c0001b53:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001b56:	31 c9                	xor    ecx,ecx
c0001b58:	83 e0 fc             	and    eax,0xfffffffc
c0001b5b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b5f:	31 c0                	xor    eax,eax
c0001b61:	8b 14 85 e4 68 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc971c]
c0001b68:	85 d2                	test   edx,edx
c0001b6a:	74 0e                	je     c0001b7a <dlmallinfo+0x4c>
c0001b6c:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001b6f:	45                   	inc    ebp
c0001b70:	83 e6 fc             	and    esi,0xfffffffc
c0001b73:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001b76:	01 f1                	add    ecx,esi
c0001b78:	eb ee                	jmp    c0001b68 <dlmallinfo+0x3a>
c0001b7a:	40                   	inc    eax
c0001b7b:	83 f8 0a             	cmp    eax,0xa
c0001b7e:	75 e1                	jne    c0001b61 <dlmallinfo+0x33>
c0001b80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b84:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b8b:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b8e:	b8 14 69 03 c0       	mov    eax,0xc0036914
c0001b93:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b96:	39 f0                	cmp    eax,esi
c0001b98:	74 10                	je     c0001baa <dlmallinfo+0x7c>
c0001b9a:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b9d:	ff 04 24             	inc    DWORD PTR [esp]
c0001ba0:	83 e7 fc             	and    edi,0xfffffffc
c0001ba3:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ba6:	01 fa                	add    edx,edi
c0001ba8:	eb ec                	jmp    c0001b96 <dlmallinfo+0x68>
c0001baa:	83 c0 08             	add    eax,0x8
c0001bad:	3d 0c 6c 03 c0       	cmp    eax,0xc0036c0c
c0001bb2:	75 df                	jne    c0001b93 <dlmallinfo+0x65>
c0001bb4:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001bb7:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001bba:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001bbd:	a1 48 6c 03 c0       	mov    eax,ds:0xc0036c48
c0001bc2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001bc5:	89 03                	mov    DWORD PTR [ebx],eax
c0001bc7:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001bca:	8b 35 30 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c30
c0001bd0:	29 d0                	sub    eax,edx
c0001bd2:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001bd5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001bd8:	8b 35 44 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c44
c0001bde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001be2:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001be5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001be8:	8b 35 54 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c54
c0001bee:	89 d8                	mov    eax,ebx
c0001bf0:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001bf3:	83 c4 08             	add    esp,0x8
c0001bf6:	5b                   	pop    ebx
c0001bf7:	5e                   	pop    esi
c0001bf8:	5f                   	pop    edi
c0001bf9:	5d                   	pop    ebp
c0001bfa:	c2 04 00             	ret    0x4

c0001bfd <dlmalloc_stats>:
c0001bfd:	83 ec 30             	sub    esp,0x30
c0001c00:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001c04:	50                   	push   eax
c0001c05:	e8 24 ff ff ff       	call   c0001b2e <dlmallinfo>
c0001c0a:	83 c4 30             	add    esp,0x30
c0001c0d:	c3                   	ret    

c0001c0e <dlmallopt>:
c0001c0e:	56                   	push   esi
c0001c0f:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001c14:	53                   	push   ebx
c0001c15:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001c19:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001c1d:	e8 50 f1 ff ff       	call   c0000d72 <malloc_consolidate>
c0001c22:	8d 46 04             	lea    eax,[esi+0x4]
c0001c25:	83 f8 05             	cmp    eax,0x5
c0001c28:	77 67                	ja     c0001c91 <dlmallopt+0x83>
c0001c2a:	ff 24 85 44 f3 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd0cbc]
c0001c31:	83 fb 50             	cmp    ebx,0x50
c0001c34:	77 5b                	ja     c0001c91 <dlmallopt+0x83>
c0001c36:	ba 08 00 00 00       	mov    edx,0x8
c0001c3b:	85 db                	test   ebx,ebx
c0001c3d:	74 12                	je     c0001c51 <dlmallopt+0x43>
c0001c3f:	83 c3 0b             	add    ebx,0xb
c0001c42:	ba 10 00 00 00       	mov    edx,0x10
c0001c47:	83 fb 0f             	cmp    ebx,0xf
c0001c4a:	76 05                	jbe    c0001c51 <dlmallopt+0x43>
c0001c4c:	89 da                	mov    edx,ebx
c0001c4e:	83 e2 f8             	and    edx,0xfffffff8
c0001c51:	a1 e0 68 03 c0       	mov    eax,ds:0xc00368e0
c0001c56:	83 e0 03             	and    eax,0x3
c0001c59:	09 d0                	or     eax,edx
c0001c5b:	a3 e0 68 03 c0       	mov    ds:0xc00368e0,eax
c0001c60:	eb 31                	jmp    c0001c93 <dlmallopt+0x85>
c0001c62:	89 1d 24 6c 03 c0    	mov    DWORD PTR ds:0xc0036c24,ebx
c0001c68:	eb 06                	jmp    c0001c70 <dlmallopt+0x62>
c0001c6a:	89 1d 28 6c 03 c0    	mov    DWORD PTR ds:0xc0036c28,ebx
c0001c70:	be 01 00 00 00       	mov    esi,0x1
c0001c75:	eb 1c                	jmp    c0001c93 <dlmallopt+0x85>
c0001c77:	89 1d 2c 6c 03 c0    	mov    DWORD PTR ds:0xc0036c2c,ebx
c0001c7d:	eb f1                	jmp    c0001c70 <dlmallopt+0x62>
c0001c7f:	31 f6                	xor    esi,esi
c0001c81:	85 db                	test   ebx,ebx
c0001c83:	75 0e                	jne    c0001c93 <dlmallopt+0x85>
c0001c85:	c7 05 34 6c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036c34,0x0
c0001c8f:	eb df                	jmp    c0001c70 <dlmallopt+0x62>
c0001c91:	31 f6                	xor    esi,esi
c0001c93:	89 f0                	mov    eax,esi
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	c3                   	ret    

c0001c98 <isblank>:
c0001c98:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c9d:	74 09                	je     c0001ca8 <isblank+0x10>
c0001c9f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ca4:	75 0a                	jne    c0001cb0 <isblank+0x18>
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <iscntrl>:
c0001cb8:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001cbd:	7e 09                	jle    c0001cc8 <iscntrl+0x10>
c0001cbf:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001cc4:	75 0a                	jne    c0001cd0 <iscntrl+0x18>
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 01 00 00 00       	mov    eax,0x1
c0001ccd:	c3                   	ret    
c0001cce:	66 90                	xchg   ax,ax
c0001cd0:	b8 00 00 00 00       	mov    eax,0x0
c0001cd5:	c3                   	ret    
c0001cd6:	66 90                	xchg   ax,ax

c0001cd8 <isdigit>:
c0001cd8:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001cdd:	7e 0d                	jle    c0001cec <isdigit+0x14>
c0001cdf:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001ce4:	7f 06                	jg     c0001cec <isdigit+0x14>
c0001ce6:	b8 01 00 00 00       	mov    eax,0x1
c0001ceb:	c3                   	ret    
c0001cec:	b8 00 00 00 00       	mov    eax,0x0
c0001cf1:	c3                   	ret    
c0001cf2:	66 90                	xchg   ax,ax

c0001cf4 <islower>:
c0001cf4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cf9:	7e 0d                	jle    c0001d08 <islower+0x14>
c0001cfb:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001d00:	7f 06                	jg     c0001d08 <islower+0x14>
c0001d02:	b8 01 00 00 00       	mov    eax,0x1
c0001d07:	c3                   	ret    
c0001d08:	b8 00 00 00 00       	mov    eax,0x0
c0001d0d:	c3                   	ret    
c0001d0e:	66 90                	xchg   ax,ax

c0001d10 <isspace>:
c0001d10:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d15:	7c 19                	jl     c0001d30 <isspace+0x20>
c0001d17:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001d1c:	7e 0a                	jle    c0001d28 <isspace+0x18>
c0001d1e:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d23:	75 0b                	jne    c0001d30 <isspace+0x20>
c0001d25:	8d 76 00             	lea    esi,[esi+0x0]
c0001d28:	b8 01 00 00 00       	mov    eax,0x1
c0001d2d:	c3                   	ret    
c0001d2e:	66 90                	xchg   ax,ax
c0001d30:	b8 00 00 00 00       	mov    eax,0x0
c0001d35:	c3                   	ret    
c0001d36:	66 90                	xchg   ax,ax

c0001d38 <isupper>:
c0001d38:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d3d:	7e 0d                	jle    c0001d4c <isupper+0x14>
c0001d3f:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001d44:	7f 06                	jg     c0001d4c <isupper+0x14>
c0001d46:	b8 01 00 00 00       	mov    eax,0x1
c0001d4b:	c3                   	ret    
c0001d4c:	b8 00 00 00 00       	mov    eax,0x0
c0001d51:	c3                   	ret    
c0001d52:	66 90                	xchg   ax,ax

c0001d54 <isalpha>:
c0001d54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d58:	e8 db ff ff ff       	call   c0001d38 <isupper>
c0001d5d:	83 c4 04             	add    esp,0x4
c0001d60:	85 c0                	test   eax,eax
c0001d62:	75 10                	jne    c0001d74 <isalpha+0x20>
c0001d64:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d68:	e8 87 ff ff ff       	call   c0001cf4 <islower>
c0001d6d:	83 c4 04             	add    esp,0x4
c0001d70:	85 c0                	test   eax,eax
c0001d72:	74 08                	je     c0001d7c <isalpha+0x28>
c0001d74:	b8 01 00 00 00       	mov    eax,0x1
c0001d79:	c3                   	ret    
c0001d7a:	66 90                	xchg   ax,ax
c0001d7c:	b8 00 00 00 00       	mov    eax,0x0
c0001d81:	c3                   	ret    
c0001d82:	66 90                	xchg   ax,ax

c0001d84 <isalnum>:
c0001d84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d88:	e8 c7 ff ff ff       	call   c0001d54 <isalpha>
c0001d8d:	83 c4 04             	add    esp,0x4
c0001d90:	85 c0                	test   eax,eax
c0001d92:	75 10                	jne    c0001da4 <isalnum+0x20>
c0001d94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d98:	e8 3b ff ff ff       	call   c0001cd8 <isdigit>
c0001d9d:	83 c4 04             	add    esp,0x4
c0001da0:	85 c0                	test   eax,eax
c0001da2:	74 08                	je     c0001dac <isalnum+0x28>
c0001da4:	b8 01 00 00 00       	mov    eax,0x1
c0001da9:	c3                   	ret    
c0001daa:	66 90                	xchg   ax,ax
c0001dac:	b8 00 00 00 00       	mov    eax,0x0
c0001db1:	c3                   	ret    
c0001db2:	66 90                	xchg   ax,ax

c0001db4 <ispunct>:
c0001db4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001db8:	e8 c7 ff ff ff       	call   c0001d84 <isalnum>
c0001dbd:	83 c4 04             	add    esp,0x4
c0001dc0:	85 c0                	test   eax,eax
c0001dc2:	75 28                	jne    c0001dec <ispunct+0x38>
c0001dc4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001dc8:	e8 43 ff ff ff       	call   c0001d10 <isspace>
c0001dcd:	83 c4 04             	add    esp,0x4
c0001dd0:	85 c0                	test   eax,eax
c0001dd2:	75 18                	jne    c0001dec <ispunct+0x38>
c0001dd4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001dd8:	e8 db fe ff ff       	call   c0001cb8 <iscntrl>
c0001ddd:	83 c4 04             	add    esp,0x4
c0001de0:	85 c0                	test   eax,eax
c0001de2:	75 08                	jne    c0001dec <ispunct+0x38>
c0001de4:	b8 01 00 00 00       	mov    eax,0x1
c0001de9:	c3                   	ret    
c0001dea:	66 90                	xchg   ax,ax
c0001dec:	b8 00 00 00 00       	mov    eax,0x0
c0001df1:	c3                   	ret    
c0001df2:	66 90                	xchg   ax,ax

c0001df4 <isgraph>:
c0001df4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001df8:	e8 87 ff ff ff       	call   c0001d84 <isalnum>
c0001dfd:	83 c4 04             	add    esp,0x4
c0001e00:	85 c0                	test   eax,eax
c0001e02:	75 10                	jne    c0001e14 <isgraph+0x20>
c0001e04:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e08:	e8 a7 ff ff ff       	call   c0001db4 <ispunct>
c0001e0d:	83 c4 04             	add    esp,0x4
c0001e10:	85 c0                	test   eax,eax
c0001e12:	74 08                	je     c0001e1c <isgraph+0x28>
c0001e14:	b8 01 00 00 00       	mov    eax,0x1
c0001e19:	c3                   	ret    
c0001e1a:	66 90                	xchg   ax,ax
c0001e1c:	b8 00 00 00 00       	mov    eax,0x0
c0001e21:	c3                   	ret    
c0001e22:	66 90                	xchg   ax,ax

c0001e24 <isprint>:
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 c7 ff ff ff       	call   c0001df4 <isgraph>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	75 08                	jne    c0001e3c <isprint+0x18>
c0001e34:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001e39:	75 09                	jne    c0001e44 <isprint+0x20>
c0001e3b:	90                   	nop
c0001e3c:	b8 01 00 00 00       	mov    eax,0x1
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax
c0001e44:	b8 00 00 00 00       	mov    eax,0x0
c0001e49:	c3                   	ret    
c0001e4a:	66 90                	xchg   ax,ax

c0001e4c <isxdigit>:
c0001e4c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e50:	e8 83 fe ff ff       	call   c0001cd8 <isdigit>
c0001e55:	83 c4 04             	add    esp,0x4
c0001e58:	85 c0                	test   eax,eax
c0001e5a:	75 20                	jne    c0001e7c <isxdigit+0x30>
c0001e5c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001e61:	7e 09                	jle    c0001e6c <isxdigit+0x20>
c0001e63:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001e68:	7e 12                	jle    c0001e7c <isxdigit+0x30>
c0001e6a:	66 90                	xchg   ax,ax
c0001e6c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001e71:	7e 11                	jle    c0001e84 <isxdigit+0x38>
c0001e73:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001e78:	7f 0a                	jg     c0001e84 <isxdigit+0x38>
c0001e7a:	66 90                	xchg   ax,ax
c0001e7c:	b8 01 00 00 00       	mov    eax,0x1
c0001e81:	c3                   	ret    
c0001e82:	66 90                	xchg   ax,ax
c0001e84:	b8 00 00 00 00       	mov    eax,0x0
c0001e89:	c3                   	ret    

c0001e8a <disk_status>:
c0001e8a:	31 c0                	xor    eax,eax
c0001e8c:	c3                   	ret    

c0001e8d <disk_initialize>:
c0001e8d:	31 c0                	xor    eax,eax
c0001e8f:	c3                   	ret    

c0001e90 <disk_read>:
c0001e90:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001e95:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0001e9d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ea1:	e9 da 69 02 00       	jmp    c0028880 <fatWrapperReadDisk>

c0001ea6 <disk_write>:
c0001ea6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001eab:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0001eb3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001eb7:	e9 04 6a 02 00       	jmp    c00288c0 <fatWrapperWriteDisk>

c0001ebc <disk_ioctl>:
c0001ebc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001ec1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001ec5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001eca:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0001ed2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ed6:	e9 25 6a 02 00       	jmp    c0028900 <fatWrapperIoctl>

c0001edb <ld_word>:
c0001edb:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001edf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ee2:	c1 e2 08             	shl    edx,0x8
c0001ee5:	09 d0                	or     eax,edx
c0001ee7:	c3                   	ret    

c0001ee8 <ld_dword>:
c0001ee8:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001eec:	89 d1                	mov    ecx,edx
c0001eee:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ef2:	c1 e1 08             	shl    ecx,0x8
c0001ef5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ef8:	09 ca                	or     edx,ecx
c0001efa:	c1 e2 08             	shl    edx,0x8
c0001efd:	09 d0                	or     eax,edx
c0001eff:	c3                   	ret    

c0001f00 <st_word>:
c0001f00:	66 89 10             	mov    WORD PTR [eax],dx
c0001f03:	c3                   	ret    

c0001f04 <st_dword>:
c0001f04:	89 10                	mov    DWORD PTR [eax],edx
c0001f06:	c3                   	ret    

c0001f07 <mem_cpy>:
c0001f07:	85 c9                	test   ecx,ecx
c0001f09:	74 10                	je     c0001f1b <mem_cpy+0x14>
c0001f0b:	57                   	push   edi
c0001f0c:	01 c1                	add    ecx,eax
c0001f0e:	56                   	push   esi
c0001f0f:	89 c7                	mov    edi,eax
c0001f11:	89 d6                	mov    esi,edx
c0001f13:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001f14:	39 f9                	cmp    ecx,edi
c0001f16:	75 fb                	jne    c0001f13 <mem_cpy+0xc>
c0001f18:	5e                   	pop    esi
c0001f19:	5f                   	pop    edi
c0001f1a:	c3                   	ret    
c0001f1b:	c3                   	ret    

c0001f1c <mem_set>:
c0001f1c:	01 c1                	add    ecx,eax
c0001f1e:	40                   	inc    eax
c0001f1f:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001f22:	39 c8                	cmp    eax,ecx
c0001f24:	75 f8                	jne    c0001f1e <mem_set+0x2>
c0001f26:	c3                   	ret    

c0001f27 <mem_cmp>:
c0001f27:	57                   	push   edi
c0001f28:	56                   	push   esi
c0001f29:	89 c6                	mov    esi,eax
c0001f2b:	53                   	push   ebx
c0001f2c:	46                   	inc    esi
c0001f2d:	42                   	inc    edx
c0001f2e:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001f32:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001f36:	29 fb                	sub    ebx,edi
c0001f38:	89 cf                	mov    edi,ecx
c0001f3a:	29 f7                	sub    edi,esi
c0001f3c:	01 c7                	add    edi,eax
c0001f3e:	74 04                	je     c0001f44 <mem_cmp+0x1d>
c0001f40:	85 db                	test   ebx,ebx
c0001f42:	74 e8                	je     c0001f2c <mem_cmp+0x5>
c0001f44:	89 d8                	mov    eax,ebx
c0001f46:	5b                   	pop    ebx
c0001f47:	5e                   	pop    esi
c0001f48:	5f                   	pop    edi
c0001f49:	c3                   	ret    

c0001f4a <chk_chr>:
c0001f4a:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001f4d:	85 c9                	test   ecx,ecx
c0001f4f:	74 07                	je     c0001f58 <chk_chr+0xe>
c0001f51:	39 d1                	cmp    ecx,edx
c0001f53:	74 03                	je     c0001f58 <chk_chr+0xe>
c0001f55:	40                   	inc    eax
c0001f56:	eb f2                	jmp    c0001f4a <chk_chr>
c0001f58:	89 c8                	mov    eax,ecx
c0001f5a:	c3                   	ret    

c0001f5b <dbc_1st>:
c0001f5b:	31 c0                	xor    eax,eax
c0001f5d:	c3                   	ret    

c0001f5e <dbc_2nd>:
c0001f5e:	31 c0                	xor    eax,eax
c0001f60:	c3                   	ret    

c0001f61 <tchar2uni>:
c0001f61:	57                   	push   edi
c0001f62:	56                   	push   esi
c0001f63:	53                   	push   ebx
c0001f64:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001f66:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001f68:	8d 73 01             	lea    esi,[ebx+0x1]
c0001f6b:	f6 c1 80             	test   cl,0x80
c0001f6e:	75 0a                	jne    c0001f7a <tchar2uni+0x19>
c0001f70:	0f b6 d1             	movzx  edx,cl
c0001f73:	89 f3                	mov    ebx,esi
c0001f75:	e9 b2 00 00 00       	jmp    c000202c <tchar2uni+0xcb>
c0001f7a:	89 ca                	mov    edx,ecx
c0001f7c:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001f82:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001f88:	89 ca                	mov    edx,ecx
c0001f8a:	75 0a                	jne    c0001f96 <tchar2uni+0x35>
c0001f8c:	83 e2 1f             	and    edx,0x1f
c0001f8f:	b9 01 00 00 00       	mov    ecx,0x1
c0001f94:	eb 37                	jmp    c0001fcd <tchar2uni+0x6c>
c0001f96:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001f9c:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001fa2:	75 0c                	jne    c0001fb0 <tchar2uni+0x4f>
c0001fa4:	89 ca                	mov    edx,ecx
c0001fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0001fab:	83 e2 0f             	and    edx,0xf
c0001fae:	eb 1d                	jmp    c0001fcd <tchar2uni+0x6c>
c0001fb0:	89 cf                	mov    edi,ecx
c0001fb2:	83 ca ff             	or     edx,0xffffffff
c0001fb5:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001fbb:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001fc1:	75 70                	jne    c0002033 <tchar2uni+0xd2>
c0001fc3:	89 ca                	mov    edx,ecx
c0001fc5:	b9 03 00 00 00       	mov    ecx,0x3
c0001fca:	83 e2 07             	and    edx,0x7
c0001fcd:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001fd1:	46                   	inc    esi
c0001fd2:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001fd5:	89 cf                	mov    edi,ecx
c0001fd7:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001fdd:	83 c7 80             	add    edi,0xffffff80
c0001fe0:	75 4e                	jne    c0002030 <tchar2uni+0xcf>
c0001fe2:	c1 e2 06             	shl    edx,0x6
c0001fe5:	83 e1 3f             	and    ecx,0x3f
c0001fe8:	09 ca                	or     edx,ecx
c0001fea:	39 de                	cmp    esi,ebx
c0001fec:	75 e3                	jne    c0001fd1 <tchar2uni+0x70>
c0001fee:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ff1:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ff7:	77 37                	ja     c0002030 <tchar2uni+0xcf>
c0001ff9:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001fff:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002005:	76 29                	jbe    c0002030 <tchar2uni+0xcf>
c0002007:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000200d:	76 1d                	jbe    c000202c <tchar2uni+0xcb>
c000200f:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0002015:	81 e2 ff 03 00 00    	and    edx,0x3ff
c000201b:	c1 e1 06             	shl    ecx,0x6
c000201e:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002024:	09 ca                	or     edx,ecx
c0002026:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c000202c:	89 18                	mov    DWORD PTR [eax],ebx
c000202e:	eb 03                	jmp    c0002033 <tchar2uni+0xd2>
c0002030:	83 ca ff             	or     edx,0xffffffff
c0002033:	5b                   	pop    ebx
c0002034:	89 d0                	mov    eax,edx
c0002036:	5e                   	pop    esi
c0002037:	5f                   	pop    edi
c0002038:	c3                   	ret    

c0002039 <put_utf>:
c0002039:	53                   	push   ebx
c000203a:	83 f8 7f             	cmp    eax,0x7f
c000203d:	89 c3                	mov    ebx,eax
c000203f:	b0 00                	mov    al,0x0
c0002041:	77 11                	ja     c0002054 <put_utf+0x1b>
c0002043:	85 c9                	test   ecx,ecx
c0002045:	0f 84 e5 00 00 00    	je     c0002130 <put_utf+0xf7>
c000204b:	88 1a                	mov    BYTE PTR [edx],bl
c000204d:	b0 01                	mov    al,0x1
c000204f:	e9 dc 00 00 00       	jmp    c0002130 <put_utf+0xf7>
c0002054:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000205a:	77 23                	ja     c000207f <put_utf+0x46>
c000205c:	83 f9 01             	cmp    ecx,0x1
c000205f:	0f 86 cb 00 00 00    	jbe    c0002130 <put_utf+0xf7>
c0002065:	89 d8                	mov    eax,ebx
c0002067:	83 e3 3f             	and    ebx,0x3f
c000206a:	c1 e8 06             	shr    eax,0x6
c000206d:	83 cb 80             	or     ebx,0xffffff80
c0002070:	83 c8 c0             	or     eax,0xffffffc0
c0002073:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0002076:	88 02                	mov    BYTE PTR [edx],al
c0002078:	b0 02                	mov    al,0x2
c000207a:	e9 b1 00 00 00       	jmp    c0002130 <put_utf+0xf7>
c000207f:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0002085:	77 40                	ja     c00020c7 <put_utf+0x8e>
c0002087:	83 f9 02             	cmp    ecx,0x2
c000208a:	0f 86 a0 00 00 00    	jbe    c0002130 <put_utf+0xf7>
c0002090:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0002096:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000209c:	0f 86 8e 00 00 00    	jbe    c0002130 <put_utf+0xf7>
c00020a2:	89 d8                	mov    eax,ebx
c00020a4:	c1 e8 0c             	shr    eax,0xc
c00020a7:	83 c8 e0             	or     eax,0xffffffe0
c00020aa:	88 02                	mov    BYTE PTR [edx],al
c00020ac:	89 d8                	mov    eax,ebx
c00020ae:	83 e3 3f             	and    ebx,0x3f
c00020b1:	c1 e8 06             	shr    eax,0x6
c00020b4:	83 cb 80             	or     ebx,0xffffff80
c00020b7:	83 e0 3f             	and    eax,0x3f
c00020ba:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00020bd:	83 c8 80             	or     eax,0xffffff80
c00020c0:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00020c3:	b0 03                	mov    al,0x3
c00020c5:	eb 69                	jmp    c0002130 <put_utf+0xf7>
c00020c7:	83 f9 03             	cmp    ecx,0x3
c00020ca:	76 64                	jbe    c0002130 <put_utf+0xf7>
c00020cc:	89 d9                	mov    ecx,ebx
c00020ce:	0f b7 c3             	movzx  eax,bx
c00020d1:	66 31 c9             	xor    cx,cx
c00020d4:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00020da:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00020e0:	c1 e9 06             	shr    ecx,0x6
c00020e3:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c00020e9:	77 43                	ja     c000212e <put_utf+0xf5>
c00020eb:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00020f1:	77 3b                	ja     c000212e <put_utf+0xf5>
c00020f3:	09 cb                	or     ebx,ecx
c00020f5:	81 c3 00 00 01 00    	add    ebx,0x10000
c00020fb:	89 d8                	mov    eax,ebx
c00020fd:	c1 e8 12             	shr    eax,0x12
c0002100:	83 c8 f0             	or     eax,0xfffffff0
c0002103:	88 02                	mov    BYTE PTR [edx],al
c0002105:	89 d8                	mov    eax,ebx
c0002107:	c1 e8 0c             	shr    eax,0xc
c000210a:	83 e0 3f             	and    eax,0x3f
c000210d:	83 c8 80             	or     eax,0xffffff80
c0002110:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002113:	89 d8                	mov    eax,ebx
c0002115:	83 e3 3f             	and    ebx,0x3f
c0002118:	c1 e8 06             	shr    eax,0x6
c000211b:	83 cb 80             	or     ebx,0xffffff80
c000211e:	83 e0 3f             	and    eax,0x3f
c0002121:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002124:	83 c8 80             	or     eax,0xffffff80
c0002127:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000212a:	b0 04                	mov    al,0x4
c000212c:	eb 02                	jmp    c0002130 <put_utf+0xf7>
c000212e:	31 c0                	xor    eax,eax
c0002130:	5b                   	pop    ebx
c0002131:	c3                   	ret    

c0002132 <clst2sect>:
c0002132:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002135:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002138:	83 ea 02             	sub    edx,0x2
c000213b:	39 ca                	cmp    edx,ecx
c000213d:	76 0d                	jbe    c000214c <clst2sect+0x1a>
c000213f:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002143:	0f af d1             	imul   edx,ecx
c0002146:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002149:	89 d0                	mov    eax,edx
c000214b:	c3                   	ret    
c000214c:	31 c0                	xor    eax,eax
c000214e:	c3                   	ret    

c000214f <pick_lfn>:
c000214f:	55                   	push   ebp
c0002150:	57                   	push   edi
c0002151:	89 c7                	mov    edi,eax
c0002153:	56                   	push   esi
c0002154:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002157:	53                   	push   ebx
c0002158:	89 d3                	mov    ebx,edx
c000215a:	e8 7c fd ff ff       	call   c0001edb <ld_word>
c000215f:	66 85 c0             	test   ax,ax
c0002162:	74 04                	je     c0002168 <pick_lfn+0x19>
c0002164:	31 c0                	xor    eax,eax
c0002166:	eb 62                	jmp    c00021ca <pick_lfn+0x7b>
c0002168:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000216b:	bd 01 00 00 00       	mov    ebp,0x1
c0002170:	83 e1 bf             	and    ecx,0xffffffbf
c0002173:	31 f6                	xor    esi,esi
c0002175:	49                   	dec    ecx
c0002176:	6b c9 0d             	imul   ecx,ecx,0xd
c0002179:	0f b6 86 a0 f4 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffd0b60]
c0002180:	01 d8                	add    eax,ebx
c0002182:	e8 54 fd ff ff       	call   c0001edb <ld_word>
c0002187:	66 85 ed             	test   bp,bp
c000218a:	74 11                	je     c000219d <pick_lfn+0x4e>
c000218c:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002192:	77 d0                	ja     c0002164 <pick_lfn+0x15>
c0002194:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002198:	89 c5                	mov    ebp,eax
c000219a:	41                   	inc    ecx
c000219b:	eb 0a                	jmp    c00021a7 <pick_lfn+0x58>
c000219d:	0f b7 c0             	movzx  eax,ax
c00021a0:	3d ff ff 00 00       	cmp    eax,0xffff
c00021a5:	75 bd                	jne    c0002164 <pick_lfn+0x15>
c00021a7:	46                   	inc    esi
c00021a8:	83 fe 0d             	cmp    esi,0xd
c00021ab:	75 cc                	jne    c0002179 <pick_lfn+0x2a>
c00021ad:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00021b0:	74 13                	je     c00021c5 <pick_lfn+0x76>
c00021b2:	66 85 ed             	test   bp,bp
c00021b5:	74 0e                	je     c00021c5 <pick_lfn+0x76>
c00021b7:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00021bd:	77 a5                	ja     c0002164 <pick_lfn+0x15>
c00021bf:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00021c5:	b8 01 00 00 00       	mov    eax,0x1
c00021ca:	5b                   	pop    ebx
c00021cb:	5e                   	pop    esi
c00021cc:	5f                   	pop    edi
c00021cd:	5d                   	pop    ebp
c00021ce:	c3                   	ret    

c00021cf <put_lfn>:
c00021cf:	55                   	push   ebp
c00021d0:	57                   	push   edi
c00021d1:	89 d7                	mov    edi,edx
c00021d3:	56                   	push   esi
c00021d4:	31 f6                	xor    esi,esi
c00021d6:	53                   	push   ebx
c00021d7:	83 ec 0c             	sub    esp,0xc
c00021da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00021de:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00021e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00021e6:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00021ec:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00021ef:	8d 42 1a             	lea    eax,[edx+0x1a]
c00021f2:	31 d2                	xor    edx,edx
c00021f4:	e8 07 fd ff ff       	call   c0001f00 <st_word>
c00021f9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002200:	0f b6 d9             	movzx  ebx,cl
c0002203:	4b                   	dec    ebx
c0002204:	6b db 0d             	imul   ebx,ebx,0xd
c0002207:	0f b7 c6             	movzx  eax,si
c000220a:	3d ff ff 00 00       	cmp    eax,0xffff
c000220f:	74 09                	je     c000221a <put_lfn+0x4b>
c0002211:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002215:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002219:	43                   	inc    ebx
c000221a:	0f b7 ee             	movzx  ebp,si
c000221d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002220:	89 ea                	mov    edx,ebp
c0002222:	0f b6 80 a0 f4 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd0b60]
c0002229:	01 f8                	add    eax,edi
c000222b:	e8 d0 fc ff ff       	call   c0001f00 <st_word>
c0002230:	85 ed                	test   ebp,ebp
c0002232:	75 05                	jne    c0002239 <put_lfn+0x6a>
c0002234:	be ff ff 00 00       	mov    esi,0xffff
c0002239:	ff 04 24             	inc    DWORD PTR [esp]
c000223c:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002240:	75 c5                	jne    c0002207 <put_lfn+0x38>
c0002242:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002248:	74 0b                	je     c0002255 <put_lfn+0x86>
c000224a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000224e:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002253:	75 07                	jne    c000225c <put_lfn+0x8d>
c0002255:	83 c9 40             	or     ecx,0x40
c0002258:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000225c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002260:	88 07                	mov    BYTE PTR [edi],al
c0002262:	83 c4 0c             	add    esp,0xc
c0002265:	5b                   	pop    ebx
c0002266:	5e                   	pop    esi
c0002267:	5f                   	pop    edi
c0002268:	5d                   	pop    ebp
c0002269:	c3                   	ret    

c000226a <gen_numname>:
c000226a:	57                   	push   edi
c000226b:	89 cf                	mov    edi,ecx
c000226d:	56                   	push   esi
c000226e:	b9 0b 00 00 00       	mov    ecx,0xb
c0002273:	53                   	push   ebx
c0002274:	89 c6                	mov    esi,eax
c0002276:	83 ec 10             	sub    esp,0x10
c0002279:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000227d:	e8 85 fc ff ff       	call   c0001f07 <mem_cpy>
c0002282:	83 fb 05             	cmp    ebx,0x5
c0002285:	76 30                	jbe    c00022b7 <gen_numname+0x4d>
c0002287:	66 8b 07             	mov    ax,WORD PTR [edi]
c000228a:	66 85 c0             	test   ax,ax
c000228d:	74 28                	je     c00022b7 <gen_numname+0x4d>
c000228f:	83 c7 02             	add    edi,0x2
c0002292:	ba 10 00 00 00       	mov    edx,0x10
c0002297:	01 db                	add    ebx,ebx
c0002299:	89 c1                	mov    ecx,eax
c000229b:	c1 e0 10             	shl    eax,0x10
c000229e:	83 e1 01             	and    ecx,0x1
c00022a1:	c1 e8 11             	shr    eax,0x11
c00022a4:	01 cb                	add    ebx,ecx
c00022a6:	0f ba e3 10          	bt     ebx,0x10
c00022aa:	73 06                	jae    c00022b2 <gen_numname+0x48>
c00022ac:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00022b2:	4a                   	dec    edx
c00022b3:	75 e2                	jne    c0002297 <gen_numname+0x2d>
c00022b5:	eb d0                	jmp    c0002287 <gen_numname+0x1d>
c00022b7:	b8 07 00 00 00       	mov    eax,0x7
c00022bc:	89 d9                	mov    ecx,ebx
c00022be:	83 e1 0f             	and    ecx,0xf
c00022c1:	8d 79 30             	lea    edi,[ecx+0x30]
c00022c4:	89 fa                	mov    edx,edi
c00022c6:	83 ff 39             	cmp    edi,0x39
c00022c9:	76 03                	jbe    c00022ce <gen_numname+0x64>
c00022cb:	8d 51 37             	lea    edx,[ecx+0x37]
c00022ce:	8d 48 ff             	lea    ecx,[eax-0x1]
c00022d1:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00022d5:	89 da                	mov    edx,ebx
c00022d7:	c1 ea 04             	shr    edx,0x4
c00022da:	83 fb 0f             	cmp    ebx,0xf
c00022dd:	76 06                	jbe    c00022e5 <gen_numname+0x7b>
c00022df:	89 c8                	mov    eax,ecx
c00022e1:	89 d3                	mov    ebx,edx
c00022e3:	eb d7                	jmp    c00022bc <gen_numname+0x52>
c00022e5:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00022ea:	31 d2                	xor    edx,edx
c00022ec:	8d 58 fe             	lea    ebx,[eax-0x2]
c00022ef:	8d 04 16             	lea    eax,[esi+edx*1]
c00022f2:	39 ca                	cmp    edx,ecx
c00022f4:	73 19                	jae    c000230f <gen_numname+0xa5>
c00022f6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00022f9:	83 f8 20             	cmp    eax,0x20
c00022fc:	74 11                	je     c000230f <gen_numname+0xa5>
c00022fe:	e8 58 fc ff ff       	call   c0001f5b <dbc_1st>
c0002303:	85 c0                	test   eax,eax
c0002305:	74 05                	je     c000230c <gen_numname+0xa2>
c0002307:	39 d3                	cmp    ebx,edx
c0002309:	74 04                	je     c000230f <gen_numname+0xa5>
c000230b:	42                   	inc    edx
c000230c:	42                   	inc    edx
c000230d:	eb e0                	jmp    c00022ef <gen_numname+0x85>
c000230f:	b0 20                	mov    al,0x20
c0002311:	83 f9 07             	cmp    ecx,0x7
c0002314:	77 05                	ja     c000231b <gen_numname+0xb1>
c0002316:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000231a:	41                   	inc    ecx
c000231b:	42                   	inc    edx
c000231c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002320:	83 fa 07             	cmp    edx,0x7
c0002323:	76 ea                	jbe    c000230f <gen_numname+0xa5>
c0002325:	83 c4 10             	add    esp,0x10
c0002328:	5b                   	pop    ebx
c0002329:	5e                   	pop    esi
c000232a:	5f                   	pop    edi
c000232b:	c3                   	ret    

c000232c <sum_sfn>:
c000232c:	53                   	push   ebx
c000232d:	31 c9                	xor    ecx,ecx
c000232f:	31 db                	xor    ebx,ebx
c0002331:	0f b6 d1             	movzx  edx,cl
c0002334:	c1 e1 07             	shl    ecx,0x7
c0002337:	d1 ea                	shr    edx,1
c0002339:	09 ca                	or     edx,ecx
c000233b:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000233e:	43                   	inc    ebx
c000233f:	01 ca                	add    edx,ecx
c0002341:	83 fb 0b             	cmp    ebx,0xb
c0002344:	88 d1                	mov    cl,dl
c0002346:	75 e9                	jne    c0002331 <sum_sfn+0x5>
c0002348:	88 d0                	mov    al,dl
c000234a:	5b                   	pop    ebx
c000234b:	c3                   	ret    

c000234c <get_ldnumber>:
c000234c:	8b 10                	mov    edx,DWORD PTR [eax]
c000234e:	85 d2                	test   edx,edx
c0002350:	74 14                	je     c0002366 <get_ldnumber+0x1a>
c0002352:	56                   	push   esi
c0002353:	53                   	push   ebx
c0002354:	89 d3                	mov    ebx,edx
c0002356:	43                   	inc    ebx
c0002357:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000235a:	80 f9 1f             	cmp    cl,0x1f
c000235d:	76 0d                	jbe    c000236c <get_ldnumber+0x20>
c000235f:	80 f9 3a             	cmp    cl,0x3a
c0002362:	75 f2                	jne    c0002356 <get_ldnumber+0xa>
c0002364:	eb 0a                	jmp    c0002370 <get_ldnumber+0x24>
c0002366:	83 c9 ff             	or     ecx,0xffffffff
c0002369:	89 c8                	mov    eax,ecx
c000236b:	c3                   	ret    
c000236c:	31 c9                	xor    ecx,ecx
c000236e:	eb 24                	jmp    c0002394 <get_ldnumber+0x48>
c0002370:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002373:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002376:	80 f9 09             	cmp    cl,0x9
c0002379:	77 16                	ja     c0002391 <get_ldnumber+0x45>
c000237b:	83 c2 02             	add    edx,0x2
c000237e:	83 c9 ff             	or     ecx,0xffffffff
c0002381:	39 d3                	cmp    ebx,edx
c0002383:	75 0f                	jne    c0002394 <get_ldnumber+0x48>
c0002385:	89 f2                	mov    edx,esi
c0002387:	89 18                	mov    DWORD PTR [eax],ebx
c0002389:	0f be ca             	movsx  ecx,dl
c000238c:	83 e9 30             	sub    ecx,0x30
c000238f:	eb 03                	jmp    c0002394 <get_ldnumber+0x48>
c0002391:	83 c9 ff             	or     ecx,0xffffffff
c0002394:	89 c8                	mov    eax,ecx
c0002396:	5b                   	pop    ebx
c0002397:	5e                   	pop    esi
c0002398:	c3                   	ret    

c0002399 <validate>:
c0002399:	56                   	push   esi
c000239a:	53                   	push   ebx
c000239b:	89 d6                	mov    esi,edx
c000239d:	51                   	push   ecx
c000239e:	85 c0                	test   eax,eax
c00023a0:	75 09                	jne    c00023ab <validate+0x12>
c00023a2:	b8 09 00 00 00       	mov    eax,0x9
c00023a7:	31 c9                	xor    ecx,ecx
c00023a9:	eb 2e                	jmp    c00023d9 <validate+0x40>
c00023ab:	89 c3                	mov    ebx,eax
c00023ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00023af:	85 c0                	test   eax,eax
c00023b1:	74 ef                	je     c00023a2 <validate+0x9>
c00023b3:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00023b6:	74 ea                	je     c00023a2 <validate+0x9>
c00023b8:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00023bb:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00023bf:	75 e1                	jne    c00023a2 <validate+0x9>
c00023c1:	83 ec 0c             	sub    esp,0xc
c00023c4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023c8:	50                   	push   eax
c00023c9:	e8 bc fa ff ff       	call   c0001e8a <disk_status>
c00023ce:	83 c4 10             	add    esp,0x10
c00023d1:	a8 01                	test   al,0x1
c00023d3:	75 cd                	jne    c00023a2 <validate+0x9>
c00023d5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023d7:	31 c0                	xor    eax,eax
c00023d9:	89 0e                	mov    DWORD PTR [esi],ecx
c00023db:	5a                   	pop    edx
c00023dc:	5b                   	pop    ebx
c00023dd:	5e                   	pop    esi
c00023de:	c3                   	ret    

c00023df <sync_window>:
c00023df:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023e3:	74 58                	je     c000243d <sync_window+0x5e>
c00023e5:	56                   	push   esi
c00023e6:	53                   	push   ebx
c00023e7:	8d 70 34             	lea    esi,[eax+0x34]
c00023ea:	51                   	push   ecx
c00023eb:	89 c3                	mov    ebx,eax
c00023ed:	6a 01                	push   0x1
c00023ef:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00023f2:	56                   	push   esi
c00023f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023f7:	50                   	push   eax
c00023f8:	e8 a9 fa ff ff       	call   c0001ea6 <disk_write>
c00023fd:	83 c4 10             	add    esp,0x10
c0002400:	ba 01 00 00 00       	mov    edx,0x1
c0002405:	85 c0                	test   eax,eax
c0002407:	75 2e                	jne    c0002437 <sync_window+0x58>
c0002409:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000240c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000240f:	89 c1                	mov    ecx,eax
c0002411:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002415:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002418:	39 d1                	cmp    ecx,edx
c000241a:	73 19                	jae    c0002435 <sync_window+0x56>
c000241c:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002420:	75 13                	jne    c0002435 <sync_window+0x56>
c0002422:	6a 01                	push   0x1
c0002424:	01 d0                	add    eax,edx
c0002426:	50                   	push   eax
c0002427:	56                   	push   esi
c0002428:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000242c:	50                   	push   eax
c000242d:	e8 74 fa ff ff       	call   c0001ea6 <disk_write>
c0002432:	83 c4 10             	add    esp,0x10
c0002435:	31 d2                	xor    edx,edx
c0002437:	89 d0                	mov    eax,edx
c0002439:	5a                   	pop    edx
c000243a:	5b                   	pop    ebx
c000243b:	5e                   	pop    esi
c000243c:	c3                   	ret    
c000243d:	31 d2                	xor    edx,edx
c000243f:	89 d0                	mov    eax,edx
c0002441:	c3                   	ret    

c0002442 <move_window>:
c0002442:	57                   	push   edi
c0002443:	56                   	push   esi
c0002444:	31 f6                	xor    esi,esi
c0002446:	53                   	push   ebx
c0002447:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000244a:	74 32                	je     c000247e <move_window+0x3c>
c000244c:	89 c3                	mov    ebx,eax
c000244e:	89 d7                	mov    edi,edx
c0002450:	e8 8a ff ff ff       	call   c00023df <sync_window>
c0002455:	89 c6                	mov    esi,eax
c0002457:	85 c0                	test   eax,eax
c0002459:	75 23                	jne    c000247e <move_window+0x3c>
c000245b:	6a 01                	push   0x1
c000245d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002460:	57                   	push   edi
c0002461:	50                   	push   eax
c0002462:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002466:	50                   	push   eax
c0002467:	e8 24 fa ff ff       	call   c0001e90 <disk_read>
c000246c:	83 c4 10             	add    esp,0x10
c000246f:	85 c0                	test   eax,eax
c0002471:	74 08                	je     c000247b <move_window+0x39>
c0002473:	be 01 00 00 00       	mov    esi,0x1
c0002478:	83 cf ff             	or     edi,0xffffffff
c000247b:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000247e:	89 f0                	mov    eax,esi
c0002480:	5b                   	pop    ebx
c0002481:	5e                   	pop    esi
c0002482:	5f                   	pop    edi
c0002483:	c3                   	ret    

c0002484 <check_fs>:
c0002484:	53                   	push   ebx
c0002485:	89 c3                	mov    ebx,eax
c0002487:	83 ec 08             	sub    esp,0x8
c000248a:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000248e:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002495:	e8 a8 ff ff ff       	call   c0002442 <move_window>
c000249a:	ba 04 00 00 00       	mov    edx,0x4
c000249f:	85 c0                	test   eax,eax
c00024a1:	75 68                	jne    c000250b <check_fs+0x87>
c00024a3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00024a9:	e8 2d fa ff ff       	call   c0001edb <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 52                	jne    c000250b <check_fs+0x87>
c00024b9:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00024bc:	8d 50 18             	lea    edx,[eax+0x18]
c00024bf:	80 fa 01             	cmp    dl,0x1
c00024c2:	76 09                	jbe    c00024cd <check_fs+0x49>
c00024c4:	ba 02 00 00 00       	mov    edx,0x2
c00024c9:	3c eb                	cmp    al,0xeb
c00024cb:	75 3e                	jne    c000250b <check_fs+0x87>
c00024cd:	ba c0 31 03 c0       	mov    edx,0xc00331c0
c00024d2:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00024d5:	b9 03 00 00 00       	mov    ecx,0x3
c00024da:	e8 48 fa ff ff       	call   c0001f27 <mem_cmp>
c00024df:	31 d2                	xor    edx,edx
c00024e1:	85 c0                	test   eax,eax
c00024e3:	74 26                	je     c000250b <check_fs+0x87>
c00024e5:	ba 5c f3 02 c0       	mov    edx,0xc002f35c
c00024ea:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00024f0:	b9 05 00 00 00       	mov    ecx,0x5
c00024f5:	e8 2d fa ff ff       	call   c0001f27 <mem_cmp>
c00024fa:	31 d2                	xor    edx,edx
c00024fc:	85 c0                	test   eax,eax
c00024fe:	74 0b                	je     c000250b <check_fs+0x87>
c0002500:	31 d2                	xor    edx,edx
c0002502:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002506:	0f 95 c2             	setne  dl
c0002509:	01 d2                	add    edx,edx
c000250b:	89 d0                	mov    eax,edx
c000250d:	83 c4 08             	add    esp,0x8
c0002510:	5b                   	pop    ebx
c0002511:	c3                   	ret    

c0002512 <find_volume>:
c0002512:	55                   	push   ebp
c0002513:	57                   	push   edi
c0002514:	56                   	push   esi
c0002515:	89 c6                	mov    esi,eax
c0002517:	53                   	push   ebx
c0002518:	89 d3                	mov    ebx,edx
c000251a:	83 ec 2c             	sub    esp,0x2c
c000251d:	31 d2                	xor    edx,edx
c000251f:	e8 60 ff ff ff       	call   c0002484 <check_fs>
c0002524:	83 f8 02             	cmp    eax,0x2
c0002527:	74 06                	je     c000252f <find_volume+0x1d>
c0002529:	77 62                	ja     c000258d <find_volume+0x7b>
c000252b:	85 db                	test   ebx,ebx
c000252d:	74 5e                	je     c000258d <find_volume+0x7b>
c000252f:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002533:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002539:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000253f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002543:	89 cf                	mov    edi,ecx
c0002545:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002549:	89 e8                	mov    eax,ebp
c000254b:	83 c5 10             	add    ebp,0x10
c000254e:	e8 95 f9 ff ff       	call   c0001ee8 <ld_dword>
c0002553:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002557:	89 01                	mov    DWORD PTR [ecx],eax
c0002559:	83 c1 04             	add    ecx,0x4
c000255c:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002560:	75 e3                	jne    c0002545 <find_volume+0x33>
c0002562:	31 ed                	xor    ebp,ebp
c0002564:	85 db                	test   ebx,ebx
c0002566:	74 03                	je     c000256b <find_volume+0x59>
c0002568:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000256b:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000256e:	b8 03 00 00 00       	mov    eax,0x3
c0002573:	85 d2                	test   edx,edx
c0002575:	74 0c                	je     c0002583 <find_volume+0x71>
c0002577:	89 f0                	mov    eax,esi
c0002579:	e8 06 ff ff ff       	call   c0002484 <check_fs>
c000257e:	83 f8 01             	cmp    eax,0x1
c0002581:	76 0a                	jbe    c000258d <find_volume+0x7b>
c0002583:	85 db                	test   ebx,ebx
c0002585:	75 06                	jne    c000258d <find_volume+0x7b>
c0002587:	45                   	inc    ebp
c0002588:	83 fd 03             	cmp    ebp,0x3
c000258b:	76 de                	jbe    c000256b <find_volume+0x59>
c000258d:	83 c4 2c             	add    esp,0x2c
c0002590:	5b                   	pop    ebx
c0002591:	5e                   	pop    esi
c0002592:	5f                   	pop    edi
c0002593:	5d                   	pop    ebp
c0002594:	c3                   	ret    

c0002595 <mount_volume>:
c0002595:	55                   	push   ebp
c0002596:	89 d5                	mov    ebp,edx
c0002598:	57                   	push   edi
c0002599:	89 cf                	mov    edi,ecx
c000259b:	56                   	push   esi
c000259c:	53                   	push   ebx
c000259d:	bb 0b 00 00 00       	mov    ebx,0xb
c00025a2:	83 ec 1c             	sub    esp,0x1c
c00025a5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025ab:	e8 9c fd ff ff       	call   c000234c <get_ldnumber>
c00025b0:	85 c0                	test   eax,eax
c00025b2:	0f 88 c4 02 00 00    	js     c000287c <mount_volume+0x2e7>
c00025b8:	8b 34 85 80 6c 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9380]
c00025bf:	89 c2                	mov    edx,eax
c00025c1:	bb 0c 00 00 00       	mov    ebx,0xc
c00025c6:	85 f6                	test   esi,esi
c00025c8:	0f 84 ae 02 00 00    	je     c000287c <mount_volume+0x2e7>
c00025ce:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00025d1:	83 e7 fe             	and    edi,0xfffffffe
c00025d4:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00025d7:	74 3a                	je     c0002613 <mount_volume+0x7e>
c00025d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00025dc:	83 ec 0c             	sub    esp,0xc
c00025df:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00025e3:	50                   	push   eax
c00025e4:	e8 a1 f8 ff ff       	call   c0001e8a <disk_status>
c00025e9:	83 c4 10             	add    esp,0x10
c00025ec:	a8 01                	test   al,0x1
c00025ee:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00025f1:	75 20                	jne    c0002613 <mount_volume+0x7e>
c00025f3:	31 db                	xor    ebx,ebx
c00025f5:	81 e7 fe 00 00 00    	and    edi,0xfe
c00025fb:	0f 84 7b 02 00 00    	je     c000287c <mount_volume+0x2e7>
c0002601:	a8 04                	test   al,0x4
c0002603:	0f 84 73 02 00 00    	je     c000287c <mount_volume+0x2e7>
c0002609:	bb 0a 00 00 00       	mov    ebx,0xa
c000260e:	e9 69 02 00 00       	jmp    c000287c <mount_volume+0x2e7>
c0002613:	83 ec 0c             	sub    esp,0xc
c0002616:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002619:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000261c:	0f b6 c2             	movzx  eax,dl
c000261f:	bb 03 00 00 00       	mov    ebx,0x3
c0002624:	50                   	push   eax
c0002625:	e8 63 f8 ff ff       	call   c0001e8d <disk_initialize>
c000262a:	83 c4 10             	add    esp,0x10
c000262d:	a8 01                	test   al,0x1
c000262f:	0f 85 47 02 00 00    	jne    c000287c <mount_volume+0x2e7>
c0002635:	81 e7 fe 00 00 00    	and    edi,0xfe
c000263b:	74 04                	je     c0002641 <mount_volume+0xac>
c000263d:	a8 04                	test   al,0x4
c000263f:	75 c8                	jne    c0002609 <mount_volume+0x74>
c0002641:	31 d2                	xor    edx,edx
c0002643:	89 f0                	mov    eax,esi
c0002645:	bb 01 00 00 00       	mov    ebx,0x1
c000264a:	e8 c3 fe ff ff       	call   c0002512 <find_volume>
c000264f:	83 f8 04             	cmp    eax,0x4
c0002652:	0f 84 24 02 00 00    	je     c000287c <mount_volume+0x2e7>
c0002658:	83 f8 01             	cmp    eax,0x1
c000265b:	76 0a                	jbe    c0002667 <mount_volume+0xd2>
c000265d:	bb 0d 00 00 00       	mov    ebx,0xd
c0002662:	e9 15 02 00 00       	jmp    c000287c <mount_volume+0x2e7>
c0002667:	8d 46 3f             	lea    eax,[esi+0x3f]
c000266a:	e8 6c f8 ff ff       	call   c0001edb <ld_word>
c000266f:	66 3d 00 02          	cmp    ax,0x200
c0002673:	75 e8                	jne    c000265d <mount_volume+0xc8>
c0002675:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002678:	e8 5e f8 ff ff       	call   c0001edb <ld_word>
c000267d:	0f b7 c0             	movzx  eax,ax
c0002680:	89 04 24             	mov    DWORD PTR [esp],eax
c0002683:	85 c0                	test   eax,eax
c0002685:	75 0b                	jne    c0002692 <mount_volume+0xfd>
c0002687:	8d 46 58             	lea    eax,[esi+0x58]
c000268a:	e8 59 f8 ff ff       	call   c0001ee8 <ld_dword>
c000268f:	89 04 24             	mov    DWORD PTR [esp],eax
c0002692:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002695:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002699:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000269c:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000269f:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c00026a2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00026a6:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00026a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026ad:	48                   	dec    eax
c00026ae:	3c 01                	cmp    al,0x1
c00026b0:	77 ab                	ja     c000265d <mount_volume+0xc8>
c00026b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00026b6:	89 c3                	mov    ebx,eax
c00026b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00026bc:	66 85 c0             	test   ax,ax
c00026bf:	74 9c                	je     c000265d <mount_volume+0xc8>
c00026c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00026c4:	85 d8                	test   eax,ebx
c00026c6:	75 95                	jne    c000265d <mount_volume+0xc8>
c00026c8:	8d 46 45             	lea    eax,[esi+0x45]
c00026cb:	e8 0b f8 ff ff       	call   c0001edb <ld_word>
c00026d0:	89 c7                	mov    edi,eax
c00026d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00026d6:	a8 0f                	test   al,0xf
c00026d8:	75 83                	jne    c000265d <mount_volume+0xc8>
c00026da:	8d 46 47             	lea    eax,[esi+0x47]
c00026dd:	e8 f9 f7 ff ff       	call   c0001edb <ld_word>
c00026e2:	0f b7 e8             	movzx  ebp,ax
c00026e5:	85 ed                	test   ebp,ebp
c00026e7:	75 0a                	jne    c00026f3 <mount_volume+0x15e>
c00026e9:	8d 46 54             	lea    eax,[esi+0x54]
c00026ec:	e8 f7 f7 ff ff       	call   c0001ee8 <ld_dword>
c00026f1:	89 c5                	mov    ebp,eax
c00026f3:	8d 46 42             	lea    eax,[esi+0x42]
c00026f6:	e8 e0 f7 ff ff       	call   c0001edb <ld_word>
c00026fb:	0f b7 c8             	movzx  ecx,ax
c00026fe:	85 c9                	test   ecx,ecx
c0002700:	0f 84 57 ff ff ff    	je     c000265d <mount_volume+0xc8>
c0002706:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000270b:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000270f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002713:	0f b7 c7             	movzx  eax,di
c0002716:	c1 e8 04             	shr    eax,0x4
c0002719:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000271d:	01 c8                	add    eax,ecx
c000271f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002723:	39 c5                	cmp    ebp,eax
c0002725:	0f 82 32 ff ff ff    	jb     c000265d <mount_volume+0xc8>
c000272b:	29 c5                	sub    ebp,eax
c000272d:	31 d2                	xor    edx,edx
c000272f:	89 e8                	mov    eax,ebp
c0002731:	f7 f3                	div    ebx
c0002733:	39 dd                	cmp    ebp,ebx
c0002735:	0f 82 22 ff ff ff    	jb     c000265d <mount_volume+0xc8>
c000273b:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002740:	0f 87 17 ff ff ff    	ja     c000265d <mount_volume+0xc8>
c0002746:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000274b:	0f 86 1c 01 00 00    	jbe    c000286d <mount_volume+0x2d8>
c0002751:	bb 03 00 00 00       	mov    ebx,0x3
c0002756:	8d 68 02             	lea    ebp,[eax+0x2]
c0002759:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000275d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002761:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002765:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002768:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000276b:	01 c8                	add    eax,ecx
c000276d:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002770:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002773:	83 fb 03             	cmp    ebx,0x3
c0002776:	75 23                	jne    c000279b <mount_volume+0x206>
c0002778:	8d 46 5e             	lea    eax,[esi+0x5e]
c000277b:	e8 5b f7 ff ff       	call   c0001edb <ld_word>
c0002780:	09 c7                	or     edi,eax
c0002782:	66 85 ff             	test   di,di
c0002785:	0f 85 d2 fe ff ff    	jne    c000265d <mount_volume+0xc8>
c000278b:	8d 46 60             	lea    eax,[esi+0x60]
c000278e:	c1 e5 02             	shl    ebp,0x2
c0002791:	e8 52 f7 ff ff       	call   c0001ee8 <ld_dword>
c0002796:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002799:	eb 24                	jmp    c00027bf <mount_volume+0x22a>
c000279b:	66 85 ff             	test   di,di
c000279e:	0f 84 b9 fe ff ff    	je     c000265d <mount_volume+0xc8>
c00027a4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00027a8:	83 fb 02             	cmp    ebx,0x2
c00027ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00027ae:	75 04                	jne    c00027b4 <mount_volume+0x21f>
c00027b0:	01 ed                	add    ebp,ebp
c00027b2:	eb 0b                	jmp    c00027bf <mount_volume+0x22a>
c00027b4:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00027b8:	83 e5 01             	and    ebp,0x1
c00027bb:	d1 e8                	shr    eax,1
c00027bd:	01 c5                	add    ebp,eax
c00027bf:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00027c5:	c1 ed 09             	shr    ebp,0x9
c00027c8:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00027cb:	0f 87 8c fe ff ff    	ja     c000265d <mount_volume+0xc8>
c00027d1:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00027d8:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00027df:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00027e3:	83 fb 03             	cmp    ebx,0x3
c00027e6:	75 6e                	jne    c0002856 <mount_volume+0x2c1>
c00027e8:	8d 46 64             	lea    eax,[esi+0x64]
c00027eb:	e8 eb f6 ff ff       	call   c0001edb <ld_word>
c00027f0:	66 48                	dec    ax
c00027f2:	75 62                	jne    c0002856 <mount_volume+0x2c1>
c00027f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00027f8:	89 f0                	mov    eax,esi
c00027fa:	42                   	inc    edx
c00027fb:	e8 42 fc ff ff       	call   c0002442 <move_window>
c0002800:	85 c0                	test   eax,eax
c0002802:	75 52                	jne    c0002856 <mount_volume+0x2c1>
c0002804:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002808:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000280e:	e8 c8 f6 ff ff       	call   c0001edb <ld_word>
c0002813:	66 3d 55 aa          	cmp    ax,0xaa55
c0002817:	75 3d                	jne    c0002856 <mount_volume+0x2c1>
c0002819:	8d 46 34             	lea    eax,[esi+0x34]
c000281c:	e8 c7 f6 ff ff       	call   c0001ee8 <ld_dword>
c0002821:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002826:	75 2e                	jne    c0002856 <mount_volume+0x2c1>
c0002828:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000282e:	e8 b5 f6 ff ff       	call   c0001ee8 <ld_dword>
c0002833:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002838:	75 1c                	jne    c0002856 <mount_volume+0x2c1>
c000283a:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002840:	e8 a3 f6 ff ff       	call   c0001ee8 <ld_dword>
c0002845:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002848:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000284e:	e8 95 f6 ff ff       	call   c0001ee8 <ld_dword>
c0002853:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002856:	66 a1 60 6c 03 c0    	mov    ax,ds:0xc0036c60
c000285c:	88 1e                	mov    BYTE PTR [esi],bl
c000285e:	40                   	inc    eax
c000285f:	31 db                	xor    ebx,ebx
c0002861:	66 a3 60 6c 03 c0    	mov    ds:0xc0036c60,ax
c0002867:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000286b:	eb 0f                	jmp    c000287c <mount_volume+0x2e7>
c000286d:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002872:	19 db                	sbb    ebx,ebx
c0002874:	83 c3 02             	add    ebx,0x2
c0002877:	e9 da fe ff ff       	jmp    c0002756 <mount_volume+0x1c1>
c000287c:	83 c4 1c             	add    esp,0x1c
c000287f:	89 d8                	mov    eax,ebx
c0002881:	5b                   	pop    ebx
c0002882:	5e                   	pop    esi
c0002883:	5f                   	pop    edi
c0002884:	5d                   	pop    ebp
c0002885:	c3                   	ret    

c0002886 <put_fat>:
c0002886:	55                   	push   ebp
c0002887:	bd 02 00 00 00       	mov    ebp,0x2
c000288c:	57                   	push   edi
c000288d:	56                   	push   esi
c000288e:	53                   	push   ebx
c000288f:	83 ec 1c             	sub    esp,0x1c
c0002892:	83 fa 01             	cmp    edx,0x1
c0002895:	0f 86 38 01 00 00    	jbe    c00029d3 <put_fat+0x14d>
c000289b:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000289e:	0f 86 2f 01 00 00    	jbe    c00029d3 <put_fat+0x14d>
c00028a4:	89 c6                	mov    esi,eax
c00028a6:	89 cf                	mov    edi,ecx
c00028a8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00028ab:	89 d3                	mov    ebx,edx
c00028ad:	83 f8 02             	cmp    eax,0x2
c00028b0:	0f 84 b1 00 00 00    	je     c0002967 <put_fat+0xe1>
c00028b6:	83 f8 03             	cmp    eax,0x3
c00028b9:	0f 84 d5 00 00 00    	je     c0002994 <put_fat+0x10e>
c00028bf:	48                   	dec    eax
c00028c0:	0f 85 0d 01 00 00    	jne    c00029d3 <put_fat+0x14d>
c00028c6:	89 d1                	mov    ecx,edx
c00028c8:	89 f0                	mov    eax,esi
c00028ca:	d1 e9                	shr    ecx,1
c00028cc:	01 d1                	add    ecx,edx
c00028ce:	89 ca                	mov    edx,ecx
c00028d0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00028d4:	c1 ea 09             	shr    edx,0x9
c00028d7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028da:	e8 63 fb ff ff       	call   c0002442 <move_window>
c00028df:	89 c5                	mov    ebp,eax
c00028e1:	85 c0                	test   eax,eax
c00028e3:	0f 85 ea 00 00 00    	jne    c00029d3 <put_fat+0x14d>
c00028e9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028ed:	8d 46 34             	lea    eax,[esi+0x34]
c00028f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00028f4:	8d 41 01             	lea    eax,[ecx+0x1]
c00028f7:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00028fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002901:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002905:	89 f8                	mov    eax,edi
c0002907:	83 e3 01             	and    ebx,0x1
c000290a:	74 11                	je     c000291d <put_fat+0x97>
c000290c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000290e:	89 f8                	mov    eax,edi
c0002910:	83 e2 0f             	and    edx,0xf
c0002913:	c1 e0 04             	shl    eax,0x4
c0002916:	25 f0 0f 00 00       	and    eax,0xff0
c000291b:	09 d0                	or     eax,edx
c000291d:	88 01                	mov    BYTE PTR [ecx],al
c000291f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002923:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002927:	c1 ea 09             	shr    edx,0x9
c000292a:	89 f0                	mov    eax,esi
c000292c:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000292f:	e8 0e fb ff ff       	call   c0002442 <move_window>
c0002934:	89 c5                	mov    ebp,eax
c0002936:	85 c0                	test   eax,eax
c0002938:	0f 85 95 00 00 00    	jne    c00029d3 <put_fat+0x14d>
c000293e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002942:	25 ff 01 00 00       	and    eax,0x1ff
c0002947:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000294b:	85 db                	test   ebx,ebx
c000294d:	74 07                	je     c0002956 <put_fat+0xd0>
c000294f:	c1 ef 04             	shr    edi,0x4
c0002952:	89 f9                	mov    ecx,edi
c0002954:	eb 0d                	jmp    c0002963 <put_fat+0xdd>
c0002956:	8a 08                	mov    cl,BYTE PTR [eax]
c0002958:	c1 ef 08             	shr    edi,0x8
c000295b:	83 e1 f0             	and    ecx,0xfffffff0
c000295e:	83 e7 0f             	and    edi,0xf
c0002961:	09 f9                	or     ecx,edi
c0002963:	88 08                	mov    BYTE PTR [eax],cl
c0002965:	eb 27                	jmp    c000298e <put_fat+0x108>
c0002967:	c1 ea 08             	shr    edx,0x8
c000296a:	89 f0                	mov    eax,esi
c000296c:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000296f:	e8 ce fa ff ff       	call   c0002442 <move_window>
c0002974:	89 c5                	mov    ebp,eax
c0002976:	85 c0                	test   eax,eax
c0002978:	75 59                	jne    c00029d3 <put_fat+0x14d>
c000297a:	01 db                	add    ebx,ebx
c000297c:	0f b7 d7             	movzx  edx,di
c000297f:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002985:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002989:	e8 72 f5 ff ff       	call   c0001f00 <st_word>
c000298e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002992:	eb 3f                	jmp    c00029d3 <put_fat+0x14d>
c0002994:	c1 ea 07             	shr    edx,0x7
c0002997:	89 f0                	mov    eax,esi
c0002999:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000299c:	e8 a1 fa ff ff       	call   c0002442 <move_window>
c00029a1:	89 c5                	mov    ebp,eax
c00029a3:	85 c0                	test   eax,eax
c00029a5:	75 2c                	jne    c00029d3 <put_fat+0x14d>
c00029a7:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00029ad:	c1 e3 02             	shl    ebx,0x2
c00029b0:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00029b6:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00029ba:	89 d8                	mov    eax,ebx
c00029bc:	e8 27 f5 ff ff       	call   c0001ee8 <ld_dword>
c00029c1:	25 00 00 00 f0       	and    eax,0xf0000000
c00029c6:	09 f8                	or     eax,edi
c00029c8:	89 c2                	mov    edx,eax
c00029ca:	89 d8                	mov    eax,ebx
c00029cc:	e8 33 f5 ff ff       	call   c0001f04 <st_dword>
c00029d1:	eb bb                	jmp    c000298e <put_fat+0x108>
c00029d3:	83 c4 1c             	add    esp,0x1c
c00029d6:	89 e8                	mov    eax,ebp
c00029d8:	5b                   	pop    ebx
c00029d9:	5e                   	pop    esi
c00029da:	5f                   	pop    edi
c00029db:	5d                   	pop    ebp
c00029dc:	c3                   	ret    

c00029dd <dir_clear>:
c00029dd:	55                   	push   ebp
c00029de:	57                   	push   edi
c00029df:	56                   	push   esi
c00029e0:	89 c6                	mov    esi,eax
c00029e2:	53                   	push   ebx
c00029e3:	83 ec 1c             	sub    esp,0x1c
c00029e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00029ea:	e8 f0 f9 ff ff       	call   c00023df <sync_window>
c00029ef:	85 c0                	test   eax,eax
c00029f1:	0f 85 c0 00 00 00    	jne    c0002ab7 <dir_clear+0xda>
c00029f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029fb:	89 f0                	mov    eax,esi
c00029fd:	e8 30 f7 ff ff       	call   c0002132 <clst2sect>
c0002a02:	31 d2                	xor    edx,edx
c0002a04:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002a07:	89 c5                	mov    ebp,eax
c0002a09:	b9 00 02 00 00       	mov    ecx,0x200
c0002a0e:	8d 46 34             	lea    eax,[esi+0x34]
c0002a11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a15:	e8 02 f5 ff ff       	call   c0001f1c <mem_set>
c0002a1a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002a1e:	c1 e3 09             	shl    ebx,0x9
c0002a21:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002a27:	76 1b                	jbe    c0002a44 <dir_clear+0x67>
c0002a29:	bb 00 80 00 00       	mov    ebx,0x8000
c0002a2e:	eb 14                	jmp    c0002a44 <dir_clear+0x67>
c0002a30:	83 ec 0c             	sub    esp,0xc
c0002a33:	53                   	push   ebx
c0002a34:	e8 eb 32 00 00       	call   c0005d24 <ff_memalloc>
c0002a39:	83 c4 10             	add    esp,0x10
c0002a3c:	89 c7                	mov    edi,eax
c0002a3e:	85 c0                	test   eax,eax
c0002a40:	75 7c                	jne    c0002abe <dir_clear+0xe1>
c0002a42:	d1 eb                	shr    ebx,1
c0002a44:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002a4a:	77 e4                	ja     c0002a30 <dir_clear+0x53>
c0002a4c:	31 db                	xor    ebx,ebx
c0002a4e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002a52:	39 d8                	cmp    eax,ebx
c0002a54:	76 53                	jbe    c0002aa9 <dir_clear+0xcc>
c0002a56:	6a 01                	push   0x1
c0002a58:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002a5b:	50                   	push   eax
c0002a5c:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002a60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002a64:	50                   	push   eax
c0002a65:	e8 3c f4 ff ff       	call   c0001ea6 <disk_write>
c0002a6a:	83 c4 10             	add    esp,0x10
c0002a6d:	85 c0                	test   eax,eax
c0002a6f:	75 38                	jne    c0002aa9 <dir_clear+0xcc>
c0002a71:	43                   	inc    ebx
c0002a72:	eb da                	jmp    c0002a4e <dir_clear+0x71>
c0002a74:	52                   	push   edx
c0002a75:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002a78:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002a7c:	50                   	push   eax
c0002a7d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002a81:	57                   	push   edi
c0002a82:	50                   	push   eax
c0002a83:	e8 1e f4 ff ff       	call   c0001ea6 <disk_write>
c0002a88:	83 c4 10             	add    esp,0x10
c0002a8b:	85 c0                	test   eax,eax
c0002a8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a91:	75 0a                	jne    c0002a9d <dir_clear+0xc0>
c0002a93:	01 d3                	add    ebx,edx
c0002a95:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002a99:	39 d8                	cmp    eax,ebx
c0002a9b:	77 d7                	ja     c0002a74 <dir_clear+0x97>
c0002a9d:	83 ec 0c             	sub    esp,0xc
c0002aa0:	57                   	push   edi
c0002aa1:	e8 96 32 00 00       	call   c0005d3c <ff_memfree>
c0002aa6:	83 c4 10             	add    esp,0x10
c0002aa9:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002aad:	39 d8                	cmp    eax,ebx
c0002aaf:	0f 95 c0             	setne  al
c0002ab2:	0f b6 c0             	movzx  eax,al
c0002ab5:	eb 19                	jmp    c0002ad0 <dir_clear+0xf3>
c0002ab7:	b8 01 00 00 00       	mov    eax,0x1
c0002abc:	eb 12                	jmp    c0002ad0 <dir_clear+0xf3>
c0002abe:	89 d9                	mov    ecx,ebx
c0002ac0:	31 d2                	xor    edx,edx
c0002ac2:	e8 55 f4 ff ff       	call   c0001f1c <mem_set>
c0002ac7:	89 da                	mov    edx,ebx
c0002ac9:	31 db                	xor    ebx,ebx
c0002acb:	c1 ea 09             	shr    edx,0x9
c0002ace:	eb c5                	jmp    c0002a95 <dir_clear+0xb8>
c0002ad0:	83 c4 1c             	add    esp,0x1c
c0002ad3:	5b                   	pop    ebx
c0002ad4:	5e                   	pop    esi
c0002ad5:	5f                   	pop    edi
c0002ad6:	5d                   	pop    ebp
c0002ad7:	c3                   	ret    

c0002ad8 <create_name>:
c0002ad8:	55                   	push   ebp
c0002ad9:	57                   	push   edi
c0002ada:	89 d7                	mov    edi,edx
c0002adc:	56                   	push   esi
c0002add:	31 f6                	xor    esi,esi
c0002adf:	53                   	push   ebx
c0002ae0:	83 ec 3c             	sub    esp,0x3c
c0002ae3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ae7:	8b 02                	mov    eax,DWORD PTR [edx]
c0002ae9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002af1:	8b 00                	mov    eax,DWORD PTR [eax]
c0002af3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002af6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002afa:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002afe:	e8 5e f4 ff ff       	call   c0001f61 <tchar2uni>
c0002b03:	89 c3                	mov    ebx,eax
c0002b05:	83 f8 ff             	cmp    eax,0xffffffff
c0002b08:	75 0a                	jne    c0002b14 <create_name+0x3c>
c0002b0a:	b8 06 00 00 00       	mov    eax,0x6
c0002b0f:	e9 93 02 00 00       	jmp    c0002da7 <create_name+0x2cf>
c0002b14:	3d ff ff 00 00       	cmp    eax,0xffff
c0002b19:	76 0c                	jbe    c0002b27 <create_name+0x4f>
c0002b1b:	c1 e8 10             	shr    eax,0x10
c0002b1e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b22:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002b26:	46                   	inc    esi
c0002b27:	0f b7 d3             	movzx  edx,bx
c0002b2a:	83 fa 1f             	cmp    edx,0x1f
c0002b2d:	76 4a                	jbe    c0002b79 <create_name+0xa1>
c0002b2f:	83 fa 5c             	cmp    edx,0x5c
c0002b32:	74 30                	je     c0002b64 <create_name+0x8c>
c0002b34:	83 fa 2f             	cmp    edx,0x2f
c0002b37:	74 2b                	je     c0002b64 <create_name+0x8c>
c0002b39:	83 fa 7f             	cmp    edx,0x7f
c0002b3c:	77 0e                	ja     c0002b4c <create_name+0x74>
c0002b3e:	b8 62 f3 02 c0       	mov    eax,0xc002f362
c0002b43:	e8 02 f4 ff ff       	call   c0001f4a <chk_chr>
c0002b48:	85 c0                	test   eax,eax
c0002b4a:	75 be                	jne    c0002b0a <create_name+0x32>
c0002b4c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002b52:	77 b6                	ja     c0002b0a <create_name+0x32>
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002b5c:	46                   	inc    esi
c0002b5d:	eb 9b                	jmp    c0002afa <create_name+0x22>
c0002b5f:	40                   	inc    eax
c0002b60:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002b64:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002b68:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002b6b:	83 fa 2f             	cmp    edx,0x2f
c0002b6e:	74 ef                	je     c0002b5f <create_name+0x87>
c0002b70:	83 fa 5c             	cmp    edx,0x5c
c0002b73:	74 ea                	je     c0002b5f <create_name+0x87>
c0002b75:	31 db                	xor    ebx,ebx
c0002b77:	eb 02                	jmp    c0002b7b <create_name+0xa3>
c0002b79:	b3 04                	mov    bl,0x4
c0002b7b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002b7f:	89 07                	mov    DWORD PTR [edi],eax
c0002b81:	85 f6                	test   esi,esi
c0002b83:	74 16                	je     c0002b9b <create_name+0xc3>
c0002b85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b89:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002b8e:	83 f8 20             	cmp    eax,0x20
c0002b91:	74 05                	je     c0002b98 <create_name+0xc0>
c0002b93:	83 f8 2e             	cmp    eax,0x2e
c0002b96:	75 03                	jne    c0002b9b <create_name+0xc3>
c0002b98:	4e                   	dec    esi
c0002b99:	eb e6                	jmp    c0002b81 <create_name+0xa9>
c0002b9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b9f:	31 ff                	xor    edi,edi
c0002ba1:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002ba7:	85 f6                	test   esi,esi
c0002ba9:	0f 84 5b ff ff ff    	je     c0002b0a <create_name+0x32>
c0002baf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002bb3:	8d 57 01             	lea    edx,[edi+0x1]
c0002bb6:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002bba:	83 f8 20             	cmp    eax,0x20
c0002bbd:	75 04                	jne    c0002bc3 <create_name+0xeb>
c0002bbf:	89 d7                	mov    edi,edx
c0002bc1:	eb ec                	jmp    c0002baf <create_name+0xd7>
c0002bc3:	85 ff                	test   edi,edi
c0002bc5:	75 05                	jne    c0002bcc <create_name+0xf4>
c0002bc7:	83 f8 2e             	cmp    eax,0x2e
c0002bca:	75 08                	jne    c0002bd4 <create_name+0xfc>
c0002bcc:	83 cb 03             	or     ebx,0x3
c0002bcf:	eb 03                	jmp    c0002bd4 <create_name+0xfc>
c0002bd1:	4e                   	dec    esi
c0002bd2:	74 0c                	je     c0002be0 <create_name+0x108>
c0002bd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002bd8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002bde:	75 f1                	jne    c0002bd1 <create_name+0xf9>
c0002be0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002be4:	b9 0b 00 00 00       	mov    ecx,0xb
c0002be9:	83 c0 20             	add    eax,0x20
c0002bec:	ba 20 00 00 00       	mov    edx,0x20
c0002bf1:	31 ed                	xor    ebp,ebp
c0002bf3:	e8 24 f3 ff ff       	call   c0001f1c <mem_set>
c0002bf8:	b9 08 00 00 00       	mov    ecx,0x8
c0002bfd:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002c02:	8d 47 01             	lea    eax,[edi+0x1]
c0002c05:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002c09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c0d:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c11:	89 c7                	mov    edi,eax
c0002c13:	85 c0                	test   eax,eax
c0002c15:	0f 84 25 01 00 00    	je     c0002d40 <create_name+0x268>
c0002c1b:	83 f8 20             	cmp    eax,0x20
c0002c1e:	74 0f                	je     c0002c2f <create_name+0x157>
c0002c20:	83 f8 2e             	cmp    eax,0x2e
c0002c23:	75 13                	jne    c0002c38 <create_name+0x160>
c0002c25:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002c29:	0f 84 6a 01 00 00    	je     c0002d99 <create_name+0x2c1>
c0002c2f:	83 cb 03             	or     ebx,0x3
c0002c32:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002c36:	eb ca                	jmp    c0002c02 <create_name+0x12a>
c0002c38:	39 cd                	cmp    ebp,ecx
c0002c3a:	73 0b                	jae    c0002c47 <create_name+0x16f>
c0002c3c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002c40:	75 3f                	jne    c0002c81 <create_name+0x1a9>
c0002c42:	e9 52 01 00 00       	jmp    c0002d99 <create_name+0x2c1>
c0002c47:	83 f9 0b             	cmp    ecx,0xb
c0002c4a:	75 0d                	jne    c0002c59 <create_name+0x181>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0002c54:	e9 e7 00 00 00       	jmp    c0002d40 <create_name+0x268>
c0002c59:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002c5d:	74 0d                	je     c0002c6c <create_name+0x194>
c0002c5f:	83 cb 03             	or     ebx,0x3
c0002c62:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002c66:	0f 87 d4 00 00 00    	ja     c0002d40 <create_name+0x268>
c0002c6c:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c71:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002c75:	b9 0b 00 00 00       	mov    ecx,0xb
c0002c7a:	bd 08 00 00 00       	mov    ebp,0x8
c0002c7f:	eb b1                	jmp    c0002c32 <create_name+0x15a>
c0002c81:	83 f8 7f             	cmp    eax,0x7f
c0002c84:	76 66                	jbe    c0002cec <create_name+0x214>
c0002c86:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002c8a:	89 d9                	mov    ecx,ebx
c0002c8c:	83 c9 02             	or     ecx,0x2
c0002c8f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c93:	52                   	push   edx
c0002c94:	52                   	push   edx
c0002c95:	68 b5 01 00 00       	push   0x1b5
c0002c9a:	50                   	push   eax
c0002c9b:	e8 b4 30 00 00       	call   c0005d54 <ff_uni2oem>
c0002ca0:	83 c4 10             	add    esp,0x10
c0002ca3:	89 c7                	mov    edi,eax
c0002ca5:	a8 80                	test   al,0x80
c0002ca7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002cab:	74 0c                	je     c0002cb9 <create_name+0x1e1>
c0002cad:	83 e7 7f             	and    edi,0x7f
c0002cb0:	0f b6 bf 20 f4 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffd0be0]
c0002cb7:	eb 2a                	jmp    c0002ce3 <create_name+0x20b>
c0002cb9:	0f b7 c0             	movzx  eax,ax
c0002cbc:	3d ff 00 00 00       	cmp    eax,0xff
c0002cc1:	76 20                	jbe    c0002ce3 <create_name+0x20b>
c0002cc3:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002cc6:	39 ea                	cmp    edx,ebp
c0002cc8:	77 0a                	ja     c0002cd4 <create_name+0x1fc>
c0002cca:	83 cb 03             	or     ebx,0x3
c0002ccd:	89 cd                	mov    ebp,ecx
c0002ccf:	e9 5e ff ff ff       	jmp    c0002c32 <create_name+0x15a>
c0002cd4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002cd8:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002cdc:	45                   	inc    ebp
c0002cdd:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002ce1:	eb 4d                	jmp    c0002d30 <create_name+0x258>
c0002ce3:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002ce7:	66 85 ff             	test   di,di
c0002cea:	74 19                	je     c0002d05 <create_name+0x22d>
c0002cec:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002cf0:	0f b7 d7             	movzx  edx,di
c0002cf3:	b8 6b f3 02 c0       	mov    eax,0xc002f36b
c0002cf8:	e8 4d f2 ff ff       	call   c0001f4a <chk_chr>
c0002cfd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002d01:	85 c0                	test   eax,eax
c0002d03:	74 0a                	je     c0002d0f <create_name+0x237>
c0002d05:	83 cb 03             	or     ebx,0x3
c0002d08:	bf 5f 00 00 00       	mov    edi,0x5f
c0002d0d:	eb 21                	jmp    c0002d30 <create_name+0x258>
c0002d0f:	8d 47 bf             	lea    eax,[edi-0x41]
c0002d12:	66 83 f8 19          	cmp    ax,0x19
c0002d16:	77 07                	ja     c0002d1f <create_name+0x247>
c0002d18:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002d1d:	eb 11                	jmp    c0002d30 <create_name+0x258>
c0002d1f:	8d 47 9f             	lea    eax,[edi-0x61]
c0002d22:	66 83 f8 19          	cmp    ax,0x19
c0002d26:	77 08                	ja     c0002d30 <create_name+0x258>
c0002d28:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002d2d:	83 ef 20             	sub    edi,0x20
c0002d30:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002d34:	89 f8                	mov    eax,edi
c0002d36:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002d3a:	45                   	inc    ebp
c0002d3b:	e9 f2 fe ff ff       	jmp    c0002c32 <create_name+0x15a>
c0002d40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002d44:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002d48:	75 04                	jne    c0002d4e <create_name+0x276>
c0002d4a:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002d4e:	83 f9 08             	cmp    ecx,0x8
c0002d51:	75 05                	jne    c0002d58 <create_name+0x280>
c0002d53:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5c:	83 e0 0c             	and    eax,0xc
c0002d5f:	83 f8 0c             	cmp    eax,0xc
c0002d62:	74 0c                	je     c0002d70 <create_name+0x298>
c0002d64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d68:	83 e0 03             	and    eax,0x3
c0002d6b:	83 f8 03             	cmp    eax,0x3
c0002d6e:	75 05                	jne    c0002d75 <create_name+0x29d>
c0002d70:	83 cb 02             	or     ebx,0x2
c0002d73:	eb 19                	jmp    c0002d8e <create_name+0x2b6>
c0002d75:	f6 c3 02             	test   bl,0x2
c0002d78:	75 14                	jne    c0002d8e <create_name+0x2b6>
c0002d7a:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002d7f:	74 03                	je     c0002d84 <create_name+0x2ac>
c0002d81:	83 cb 10             	or     ebx,0x10
c0002d84:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002d89:	74 03                	je     c0002d8e <create_name+0x2b6>
c0002d8b:	83 cb 08             	or     ebx,0x8
c0002d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002d92:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002d95:	31 c0                	xor    eax,eax
c0002d97:	eb 0e                	jmp    c0002da7 <create_name+0x2cf>
c0002d99:	83 f9 0b             	cmp    ecx,0xb
c0002d9c:	0f 85 ca fe ff ff    	jne    c0002c6c <create_name+0x194>
c0002da2:	e9 a5 fe ff ff       	jmp    c0002c4c <create_name+0x174>
c0002da7:	83 c4 3c             	add    esp,0x3c
c0002daa:	5b                   	pop    ebx
c0002dab:	5e                   	pop    esi
c0002dac:	5f                   	pop    edi
c0002dad:	5d                   	pop    ebp
c0002dae:	c3                   	ret    

c0002daf <cmp_lfn>:
c0002daf:	55                   	push   ebp
c0002db0:	57                   	push   edi
c0002db1:	89 d7                	mov    edi,edx
c0002db3:	56                   	push   esi
c0002db4:	53                   	push   ebx
c0002db5:	83 ec 1c             	sub    esp,0x1c
c0002db8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dbc:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002dbf:	e8 17 f1 ff ff       	call   c0001edb <ld_word>
c0002dc4:	66 85 c0             	test   ax,ax
c0002dc7:	74 07                	je     c0002dd0 <cmp_lfn+0x21>
c0002dc9:	31 c0                	xor    eax,eax
c0002dcb:	e9 a1 00 00 00       	jmp    c0002e71 <cmp_lfn+0xc2>
c0002dd0:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002dd2:	bd 01 00 00 00       	mov    ebp,0x1
c0002dd7:	83 e3 3f             	and    ebx,0x3f
c0002dda:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002de2:	4b                   	dec    ebx
c0002de3:	6b db 0d             	imul   ebx,ebx,0xd
c0002de6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002dea:	0f b6 80 a0 f4 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd0b60]
c0002df1:	01 f8                	add    eax,edi
c0002df3:	e8 e3 f0 ff ff       	call   c0001edb <ld_word>
c0002df8:	66 85 ed             	test   bp,bp
c0002dfb:	89 c6                	mov    esi,eax
c0002dfd:	74 3c                	je     c0002e3b <cmp_lfn+0x8c>
c0002dff:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002e05:	77 c2                	ja     c0002dc9 <cmp_lfn+0x1a>
c0002e07:	83 ec 0c             	sub    esp,0xc
c0002e0a:	0f b7 c0             	movzx  eax,ax
c0002e0d:	50                   	push   eax
c0002e0e:	e8 59 30 00 00       	call   c0005e6c <ff_wtoupper>
c0002e13:	89 c5                	mov    ebp,eax
c0002e15:	8d 43 01             	lea    eax,[ebx+0x1]
c0002e18:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002e1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002e20:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002e24:	89 04 24             	mov    DWORD PTR [esp],eax
c0002e27:	e8 40 30 00 00       	call   c0005e6c <ff_wtoupper>
c0002e2c:	83 c4 10             	add    esp,0x10
c0002e2f:	39 c5                	cmp    ebp,eax
c0002e31:	75 96                	jne    c0002dc9 <cmp_lfn+0x1a>
c0002e33:	89 f5                	mov    ebp,esi
c0002e35:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002e39:	eb 0b                	jmp    c0002e46 <cmp_lfn+0x97>
c0002e3b:	0f b7 c8             	movzx  ecx,ax
c0002e3e:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002e44:	75 83                	jne    c0002dc9 <cmp_lfn+0x1a>
c0002e46:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002e4a:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002e4f:	75 95                	jne    c0002de6 <cmp_lfn+0x37>
c0002e51:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002e54:	74 16                	je     c0002e6c <cmp_lfn+0xbd>
c0002e56:	66 85 ed             	test   bp,bp
c0002e59:	74 11                	je     c0002e6c <cmp_lfn+0xbd>
c0002e5b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e5f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002e64:	0f 94 c0             	sete   al
c0002e67:	0f b6 c0             	movzx  eax,al
c0002e6a:	eb 05                	jmp    c0002e71 <cmp_lfn+0xc2>
c0002e6c:	b8 01 00 00 00       	mov    eax,0x1
c0002e71:	83 c4 1c             	add    esp,0x1c
c0002e74:	5b                   	pop    ebx
c0002e75:	5e                   	pop    esi
c0002e76:	5f                   	pop    edi
c0002e77:	5d                   	pop    ebp
c0002e78:	c3                   	ret    

c0002e79 <sync_fs>:
c0002e79:	56                   	push   esi
c0002e7a:	53                   	push   ebx
c0002e7b:	53                   	push   ebx
c0002e7c:	89 c3                	mov    ebx,eax
c0002e7e:	e8 5c f5 ff ff       	call   c00023df <sync_window>
c0002e83:	85 c0                	test   eax,eax
c0002e85:	0f 85 9a 00 00 00    	jne    c0002f25 <sync_fs+0xac>
c0002e8b:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002e8e:	75 7b                	jne    c0002f0b <sync_fs+0x92>
c0002e90:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002e94:	75 75                	jne    c0002f0b <sync_fs+0x92>
c0002e96:	b9 00 02 00 00       	mov    ecx,0x200
c0002e9b:	8d 73 34             	lea    esi,[ebx+0x34]
c0002e9e:	31 d2                	xor    edx,edx
c0002ea0:	89 f0                	mov    eax,esi
c0002ea2:	e8 75 f0 ff ff       	call   c0001f1c <mem_set>
c0002ea7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ead:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002eb2:	e8 49 f0 ff ff       	call   c0001f00 <st_word>
c0002eb7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	e8 41 f0 ff ff       	call   c0001f04 <st_dword>
c0002ec3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002ec9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002ece:	e8 31 f0 ff ff       	call   c0001f04 <st_dword>
c0002ed3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ed6:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002edc:	e8 23 f0 ff ff       	call   c0001f04 <st_dword>
c0002ee1:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ee4:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002eea:	e8 15 f0 ff ff       	call   c0001f04 <st_dword>
c0002eef:	6a 01                	push   0x1
c0002ef1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002ef4:	40                   	inc    eax
c0002ef5:	50                   	push   eax
c0002ef6:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002ef9:	56                   	push   esi
c0002efa:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002efe:	50                   	push   eax
c0002eff:	e8 a2 ef ff ff       	call   c0001ea6 <disk_write>
c0002f04:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002f08:	83 c4 10             	add    esp,0x10
c0002f0b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002f0f:	51                   	push   ecx
c0002f10:	6a 00                	push   0x0
c0002f12:	6a 00                	push   0x0
c0002f14:	50                   	push   eax
c0002f15:	e8 a2 ef ff ff       	call   c0001ebc <disk_ioctl>
c0002f1a:	83 c4 10             	add    esp,0x10
c0002f1d:	85 c0                	test   eax,eax
c0002f1f:	0f 95 c0             	setne  al
c0002f22:	0f b6 c0             	movzx  eax,al
c0002f25:	5a                   	pop    edx
c0002f26:	5b                   	pop    ebx
c0002f27:	5e                   	pop    esi
c0002f28:	c3                   	ret    

c0002f29 <create_partition>:
c0002f29:	55                   	push   ebp
c0002f2a:	0f b6 c0             	movzx  eax,al
c0002f2d:	57                   	push   edi
c0002f2e:	56                   	push   esi
c0002f2f:	53                   	push   ebx
c0002f30:	83 ec 40             	sub    esp,0x40
c0002f33:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002f37:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002f3b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002f3f:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002f43:	50                   	push   eax
c0002f44:	6a 01                	push   0x1
c0002f46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002f4a:	e8 6d ef ff ff       	call   c0001ebc <disk_ioctl>
c0002f4f:	83 c4 10             	add    esp,0x10
c0002f52:	85 c0                	test   eax,eax
c0002f54:	0f 85 6a 01 00 00    	jne    c00030c4 <create_partition+0x19b>
c0002f5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002f5e:	b9 05 00 00 00       	mov    ecx,0x5
c0002f63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002f67:	be 08 00 00 00       	mov    esi,0x8
c0002f6c:	89 f0                	mov    eax,esi
c0002f6e:	31 d2                	xor    edx,edx
c0002f70:	0f b6 d8             	movzx  ebx,al
c0002f73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002f77:	f7 f3                	div    ebx
c0002f79:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002f7e:	76 0a                	jbe    c0002f8a <create_partition+0x61>
c0002f80:	d1 e6                	shl    esi,1
c0002f82:	49                   	dec    ecx
c0002f83:	75 e7                	jne    c0002f6c <create_partition+0x43>
c0002f85:	be ff ff ff ff       	mov    esi,0xffffffff
c0002f8a:	b9 00 02 00 00       	mov    ecx,0x200
c0002f8f:	31 d2                	xor    edx,edx
c0002f91:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002f95:	e8 82 ef ff ff       	call   c0001f1c <mem_set>
c0002f9a:	b9 64 00 00 00       	mov    ecx,0x64
c0002f9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002fa3:	31 d2                	xor    edx,edx
c0002fa5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002fad:	f7 f1                	div    ecx
c0002faf:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002fb4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002fb8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fbc:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002fc2:	89 f0                	mov    eax,esi
c0002fc4:	0f b6 c0             	movzx  eax,al
c0002fc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002fcb:	85 c9                	test   ecx,ecx
c0002fcd:	75 34                	jne    c0003003 <create_partition+0xda>
c0002fcf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fd3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fd8:	05 fe 01 00 00       	add    eax,0x1fe
c0002fdd:	e8 1e ef ff ff       	call   c0001f00 <st_word>
c0002fe2:	6a 01                	push   0x1
c0002fe4:	6a 00                	push   0x0
c0002fe6:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fee:	e8 b3 ee ff ff       	call   c0001ea6 <disk_write>
c0002ff3:	83 c4 10             	add    esp,0x10
c0002ff6:	85 c0                	test   eax,eax
c0002ff8:	0f 95 c0             	setne  al
c0002ffb:	0f b6 c0             	movzx  eax,al
c0002ffe:	e9 c6 00 00 00       	jmp    c00030c9 <create_partition+0x1a0>
c0003003:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0003007:	76 c6                	jbe    c0002fcf <create_partition+0xa6>
c0003009:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000300d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0003011:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0003014:	83 fe 64             	cmp    esi,0x64
c0003017:	77 0d                	ja     c0003026 <create_partition+0xfd>
c0003019:	74 07                	je     c0003022 <create_partition+0xf9>
c000301b:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003020:	eb 04                	jmp    c0003026 <create_partition+0xfd>
c0003022:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003026:	31 c0                	xor    eax,eax
c0003028:	89 f2                	mov    edx,esi
c000302a:	01 ca                	add    edx,ecx
c000302c:	0f 92 c0             	setb   al
c000302f:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0003033:	77 04                	ja     c0003039 <create_partition+0x110>
c0003035:	85 c0                	test   eax,eax
c0003037:	74 08                	je     c0003041 <create_partition+0x118>
c0003039:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000303d:	29 ce                	sub    esi,ecx
c000303f:	eb 04                	jmp    c0003045 <create_partition+0x11c>
c0003041:	85 f6                	test   esi,esi
c0003043:	74 8a                	je     c0002fcf <create_partition+0xa6>
c0003045:	89 ca                	mov    edx,ecx
c0003047:	89 d8                	mov    eax,ebx
c0003049:	bf 3f 00 00 00       	mov    edi,0x3f
c000304e:	e8 b1 ee ff ff       	call   c0001f04 <st_dword>
c0003053:	8d 43 04             	lea    eax,[ebx+0x4]
c0003056:	89 f2                	mov    edx,esi
c0003058:	83 c3 10             	add    ebx,0x10
c000305b:	e8 a4 ee ff ff       	call   c0001f04 <st_dword>
c0003060:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003064:	31 d2                	xor    edx,edx
c0003066:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0003069:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000306d:	89 c8                	mov    eax,ecx
c000306f:	01 f1                	add    ecx,esi
c0003071:	f7 f7                	div    edi
c0003073:	89 d5                	mov    ebp,edx
c0003075:	31 d2                	xor    edx,edx
c0003077:	45                   	inc    ebp
c0003078:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000307c:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c000307f:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003082:	89 c2                	mov    edx,eax
c0003084:	8d 41 ff             	lea    eax,[ecx-0x1]
c0003087:	c1 ea 02             	shr    edx,0x2
c000308a:	83 e2 c0             	and    edx,0xffffffc0
c000308d:	09 ea                	or     edx,ebp
c000308f:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0003092:	31 d2                	xor    edx,edx
c0003094:	f7 f7                	div    edi
c0003096:	89 d6                	mov    esi,edx
c0003098:	31 d2                	xor    edx,edx
c000309a:	46                   	inc    esi
c000309b:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000309f:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c00030a2:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c00030a5:	89 c7                	mov    edi,eax
c00030a7:	c1 ef 02             	shr    edi,0x2
c00030aa:	83 e7 c0             	and    edi,0xffffffc0
c00030ad:	09 fe                	or     esi,edi
c00030af:	89 f2                	mov    edx,esi
c00030b1:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c00030b4:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c00030b9:	0f 85 0c ff ff ff    	jne    c0002fcb <create_partition+0xa2>
c00030bf:	e9 0b ff ff ff       	jmp    c0002fcf <create_partition+0xa6>
c00030c4:	b8 01 00 00 00       	mov    eax,0x1
c00030c9:	83 c4 3c             	add    esp,0x3c
c00030cc:	5b                   	pop    ebx
c00030cd:	5e                   	pop    esi
c00030ce:	5f                   	pop    edi
c00030cf:	5d                   	pop    ebp
c00030d0:	c3                   	ret    

c00030d1 <get_fileinfo>:
c00030d1:	55                   	push   ebp
c00030d2:	57                   	push   edi
c00030d3:	56                   	push   esi
c00030d4:	53                   	push   ebx
c00030d5:	83 ec 1c             	sub    esp,0x1c
c00030d8:	8b 30                	mov    esi,DWORD PTR [eax]
c00030da:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00030de:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00030e2:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00030e6:	0f 84 d3 01 00 00    	je     c00032bf <get_fileinfo+0x1ee>
c00030ec:	89 d3                	mov    ebx,edx
c00030ee:	89 c6                	mov    esi,eax
c00030f0:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00030f4:	74 72                	je     c0003168 <get_fileinfo+0x97>
c00030f6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00030fe:	31 ed                	xor    ebp,ebp
c0003100:	31 ff                	xor    edi,edi
c0003102:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003106:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000310a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000310d:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003111:	89 c2                	mov    edx,eax
c0003113:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003117:	85 c0                	test   eax,eax
c0003119:	74 41                	je     c000315c <get_fileinfo+0x8b>
c000311b:	0f b7 c5             	movzx  eax,bp
c000311e:	85 c0                	test   eax,eax
c0003120:	75 0d                	jne    c000312f <get_fileinfo+0x5e>
c0003122:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003128:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000312d:	76 22                	jbe    c0003151 <get_fileinfo+0x80>
c000312f:	c1 e0 10             	shl    eax,0x10
c0003132:	b9 ff 00 00 00       	mov    ecx,0xff
c0003137:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000313b:	29 f9                	sub    ecx,edi
c000313d:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003141:	e8 f3 ee ff ff       	call   c0002039 <put_utf>
c0003146:	0f b6 c0             	movzx  eax,al
c0003149:	85 c0                	test   eax,eax
c000314b:	74 0d                	je     c000315a <get_fileinfo+0x89>
c000314d:	01 c7                	add    edi,eax
c000314f:	31 d2                	xor    edx,edx
c0003151:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003156:	89 d5                	mov    ebp,edx
c0003158:	eb a8                	jmp    c0003102 <get_fileinfo+0x31>
c000315a:	31 ff                	xor    edi,edi
c000315c:	66 85 ed             	test   bp,bp
c000315f:	74 02                	je     c0003163 <get_fileinfo+0x92>
c0003161:	31 ff                	xor    edi,edi
c0003163:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003168:	31 ff                	xor    edi,edi
c000316a:	31 c9                	xor    ecx,ecx
c000316c:	83 f9 0a             	cmp    ecx,0xa
c000316f:	0f 87 ac 00 00 00    	ja     c0003221 <get_fileinfo+0x150>
c0003175:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003178:	8d 69 01             	lea    ebp,[ecx+0x1]
c000317b:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000317f:	89 c2                	mov    edx,eax
c0003181:	83 f8 20             	cmp    eax,0x20
c0003184:	0f 84 90 00 00 00    	je     c000321a <get_fileinfo+0x149>
c000318a:	83 f8 05             	cmp    eax,0x5
c000318d:	75 05                	jne    c0003194 <get_fileinfo+0xc3>
c000318f:	ba e5 00 00 00       	mov    edx,0xe5
c0003194:	83 ff 0b             	cmp    edi,0xb
c0003197:	77 0b                	ja     c00031a4 <get_fileinfo+0xd3>
c0003199:	83 fd 09             	cmp    ebp,0x9
c000319c:	75 06                	jne    c00031a4 <get_fileinfo+0xd3>
c000319e:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00031a3:	47                   	inc    edi
c00031a4:	0f b7 c2             	movzx  eax,dx
c00031a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00031ab:	e8 ab ed ff ff       	call   c0001f5b <dbc_1st>
c00031b0:	85 c0                	test   eax,eax
c00031b2:	74 2f                	je     c00031e3 <get_fileinfo+0x112>
c00031b4:	83 fd 08             	cmp    ebp,0x8
c00031b7:	74 2a                	je     c00031e3 <get_fileinfo+0x112>
c00031b9:	83 fd 0b             	cmp    ebp,0xb
c00031bc:	74 25                	je     c00031e3 <get_fileinfo+0x112>
c00031be:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c1:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00031c5:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00031c9:	e8 90 ed ff ff       	call   c0001f5e <dbc_2nd>
c00031ce:	85 c0                	test   eax,eax
c00031d0:	74 11                	je     c00031e3 <get_fileinfo+0x112>
c00031d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00031d6:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00031db:	c1 e0 08             	shl    eax,0x8
c00031de:	8d 69 02             	lea    ebp,[ecx+0x2]
c00031e1:	09 c2                	or     edx,eax
c00031e3:	0f b7 d2             	movzx  edx,dx
c00031e6:	50                   	push   eax
c00031e7:	50                   	push   eax
c00031e8:	68 b5 01 00 00       	push   0x1b5
c00031ed:	52                   	push   edx
c00031ee:	e8 01 2c 00 00       	call   c0005df4 <ff_oem2uni>
c00031f3:	83 c4 10             	add    esp,0x10
c00031f6:	0f b7 c0             	movzx  eax,ax
c00031f9:	85 c0                	test   eax,eax
c00031fb:	75 04                	jne    c0003201 <get_fileinfo+0x130>
c00031fd:	31 ff                	xor    edi,edi
c00031ff:	eb 20                	jmp    c0003221 <get_fileinfo+0x150>
c0003201:	b9 0c 00 00 00       	mov    ecx,0xc
c0003206:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000320a:	29 f9                	sub    ecx,edi
c000320c:	e8 28 ee ff ff       	call   c0002039 <put_utf>
c0003211:	0f b6 c0             	movzx  eax,al
c0003214:	85 c0                	test   eax,eax
c0003216:	74 e5                	je     c00031fd <get_fileinfo+0x12c>
c0003218:	01 c7                	add    edi,eax
c000321a:	89 e9                	mov    ecx,ebp
c000321c:	e9 4b ff ff ff       	jmp    c000316c <get_fileinfo+0x9b>
c0003221:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003226:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000322a:	75 5f                	jne    c000328b <get_fileinfo+0x1ba>
c000322c:	85 ff                	test   edi,edi
c000322e:	75 0b                	jne    c000323b <get_fileinfo+0x16a>
c0003230:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003234:	ba 01 00 00 00       	mov    edx,0x1
c0003239:	eb 3e                	jmp    c0003279 <get_fileinfo+0x1a8>
c000323b:	bf 08 00 00 00       	mov    edi,0x8
c0003240:	31 d2                	xor    edx,edx
c0003242:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003248:	84 c0                	test   al,al
c000324a:	74 2d                	je     c0003279 <get_fileinfo+0x1a8>
c000324c:	66 83 f8 2e          	cmp    ax,0x2e
c0003250:	74 1b                	je     c000326d <get_fileinfo+0x19c>
c0003252:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003255:	66 83 f9 19          	cmp    cx,0x19
c0003259:	77 17                	ja     c0003272 <get_fileinfo+0x1a1>
c000325b:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000325e:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003261:	21 f9                	and    ecx,edi
c0003263:	80 e1 18             	and    cl,0x18
c0003266:	74 0a                	je     c0003272 <get_fileinfo+0x1a1>
c0003268:	83 c0 20             	add    eax,0x20
c000326b:	eb 05                	jmp    c0003272 <get_fileinfo+0x1a1>
c000326d:	bf 10 00 00 00       	mov    edi,0x10
c0003272:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003276:	42                   	inc    edx
c0003277:	eb c9                	jmp    c0003242 <get_fileinfo+0x171>
c0003279:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000327e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003281:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003285:	75 04                	jne    c000328b <get_fileinfo+0x1ba>
c0003287:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c000328b:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000328e:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0003291:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003294:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003297:	83 c0 1c             	add    eax,0x1c
c000329a:	e8 49 ec ff ff       	call   c0001ee8 <ld_dword>
c000329f:	89 03                	mov    DWORD PTR [ebx],eax
c00032a1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032a4:	83 c0 16             	add    eax,0x16
c00032a7:	e8 2f ec ff ff       	call   c0001edb <ld_word>
c00032ac:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00032b0:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032b3:	83 c0 18             	add    eax,0x18
c00032b6:	e8 20 ec ff ff       	call   c0001edb <ld_word>
c00032bb:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00032bf:	83 c4 1c             	add    esp,0x1c
c00032c2:	5b                   	pop    ebx
c00032c3:	5e                   	pop    esi
c00032c4:	5f                   	pop    edi
c00032c5:	5d                   	pop    ebp
c00032c6:	c3                   	ret    

c00032c7 <ld_clust.isra.0>:
c00032c7:	56                   	push   esi
c00032c8:	89 c6                	mov    esi,eax
c00032ca:	53                   	push   ebx
c00032cb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00032ce:	89 d3                	mov    ebx,edx
c00032d0:	e8 06 ec ff ff       	call   c0001edb <ld_word>
c00032d5:	0f b7 c8             	movzx  ecx,ax
c00032d8:	89 f0                	mov    eax,esi
c00032da:	3c 03                	cmp    al,0x3
c00032dc:	75 0d                	jne    c00032eb <ld_clust.isra.0+0x24>
c00032de:	8d 43 14             	lea    eax,[ebx+0x14]
c00032e1:	e8 f5 eb ff ff       	call   c0001edb <ld_word>
c00032e6:	c1 e0 10             	shl    eax,0x10
c00032e9:	09 c1                	or     ecx,eax
c00032eb:	89 c8                	mov    eax,ecx
c00032ed:	5b                   	pop    ebx
c00032ee:	5e                   	pop    esi
c00032ef:	c3                   	ret    

c00032f0 <st_clust.isra.1>:
c00032f0:	56                   	push   esi
c00032f1:	89 c6                	mov    esi,eax
c00032f3:	53                   	push   ebx
c00032f4:	89 d3                	mov    ebx,edx
c00032f6:	0f b7 d1             	movzx  edx,cx
c00032f9:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00032fc:	e8 ff eb ff ff       	call   c0001f00 <st_word>
c0003301:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003304:	75 0f                	jne    c0003315 <st_clust.isra.1+0x25>
c0003306:	c1 e9 10             	shr    ecx,0x10
c0003309:	8d 43 14             	lea    eax,[ebx+0x14]
c000330c:	89 ca                	mov    edx,ecx
c000330e:	5b                   	pop    ebx
c000330f:	5e                   	pop    esi
c0003310:	e9 eb eb ff ff       	jmp    c0001f00 <st_word>
c0003315:	5b                   	pop    ebx
c0003316:	5e                   	pop    esi
c0003317:	c3                   	ret    

c0003318 <get_fat.isra.2>:
c0003318:	b9 01 00 00 00       	mov    ecx,0x1
c000331d:	83 fa 01             	cmp    edx,0x1
c0003320:	0f 86 f3 00 00 00    	jbe    c0003419 <get_fat.isra.2+0x101>
c0003326:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003329:	0f 83 ea 00 00 00    	jae    c0003419 <get_fat.isra.2+0x101>
c000332f:	55                   	push   ebp
c0003330:	57                   	push   edi
c0003331:	89 c7                	mov    edi,eax
c0003333:	56                   	push   esi
c0003334:	89 d6                	mov    esi,edx
c0003336:	53                   	push   ebx
c0003337:	83 ec 0c             	sub    esp,0xc
c000333a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000333d:	83 f8 02             	cmp    eax,0x2
c0003340:	74 78                	je     c00033ba <get_fat.isra.2+0xa2>
c0003342:	83 f8 03             	cmp    eax,0x3
c0003345:	0f 84 96 00 00 00    	je     c00033e1 <get_fat.isra.2+0xc9>
c000334b:	48                   	dec    eax
c000334c:	0f 85 bd 00 00 00    	jne    c000340f <get_fat.isra.2+0xf7>
c0003352:	89 d3                	mov    ebx,edx
c0003354:	89 f8                	mov    eax,edi
c0003356:	d1 eb                	shr    ebx,1
c0003358:	01 d3                	add    ebx,edx
c000335a:	89 da                	mov    edx,ebx
c000335c:	c1 ea 09             	shr    edx,0x9
c000335f:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003362:	e8 db f0 ff ff       	call   c0002442 <move_window>
c0003367:	85 c0                	test   eax,eax
c0003369:	74 08                	je     c0003373 <get_fat.isra.2+0x5b>
c000336b:	83 c9 ff             	or     ecx,0xffffffff
c000336e:	e9 9c 00 00 00       	jmp    c000340f <get_fat.isra.2+0xf7>
c0003373:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003376:	89 f8                	mov    eax,edi
c0003378:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000337e:	89 ea                	mov    edx,ebp
c0003380:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003384:	c1 ea 09             	shr    edx,0x9
c0003387:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000338a:	e8 b3 f0 ff ff       	call   c0002442 <move_window>
c000338f:	85 c0                	test   eax,eax
c0003391:	75 d8                	jne    c000336b <get_fat.isra.2+0x53>
c0003393:	0f b6 c3             	movzx  eax,bl
c0003396:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000339c:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c00033a1:	c1 e3 08             	shl    ebx,0x8
c00033a4:	09 c3                	or     ebx,eax
c00033a6:	89 d9                	mov    ecx,ebx
c00033a8:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00033ae:	83 e6 01             	and    esi,0x1
c00033b1:	74 5c                	je     c000340f <get_fat.isra.2+0xf7>
c00033b3:	89 d9                	mov    ecx,ebx
c00033b5:	c1 e9 04             	shr    ecx,0x4
c00033b8:	eb 55                	jmp    c000340f <get_fat.isra.2+0xf7>
c00033ba:	c1 ea 08             	shr    edx,0x8
c00033bd:	89 f8                	mov    eax,edi
c00033bf:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00033c2:	e8 7b f0 ff ff       	call   c0002442 <move_window>
c00033c7:	85 c0                	test   eax,eax
c00033c9:	75 a0                	jne    c000336b <get_fat.isra.2+0x53>
c00033cb:	01 f6                	add    esi,esi
c00033cd:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00033d3:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00033d7:	e8 ff ea ff ff       	call   c0001edb <ld_word>
c00033dc:	0f b7 c8             	movzx  ecx,ax
c00033df:	eb 2e                	jmp    c000340f <get_fat.isra.2+0xf7>
c00033e1:	c1 ea 07             	shr    edx,0x7
c00033e4:	89 f8                	mov    eax,edi
c00033e6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00033e9:	e8 54 f0 ff ff       	call   c0002442 <move_window>
c00033ee:	85 c0                	test   eax,eax
c00033f0:	0f 85 75 ff ff ff    	jne    c000336b <get_fat.isra.2+0x53>
c00033f6:	c1 e6 02             	shl    esi,0x2
c00033f9:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00033ff:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c0003403:	e8 e0 ea ff ff       	call   c0001ee8 <ld_dword>
c0003408:	25 ff ff ff 0f       	and    eax,0xfffffff
c000340d:	89 c1                	mov    ecx,eax
c000340f:	83 c4 0c             	add    esp,0xc
c0003412:	89 c8                	mov    eax,ecx
c0003414:	5b                   	pop    ebx
c0003415:	5e                   	pop    esi
c0003416:	5f                   	pop    edi
c0003417:	5d                   	pop    ebp
c0003418:	c3                   	ret    
c0003419:	89 c8                	mov    eax,ecx
c000341b:	c3                   	ret    

c000341c <dir_sdi>:
c000341c:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003422:	0f 87 b6 00 00 00    	ja     c00034de <dir_sdi+0xc2>
c0003428:	55                   	push   ebp
c0003429:	57                   	push   edi
c000342a:	56                   	push   esi
c000342b:	53                   	push   ebx
c000342c:	89 d3                	mov    ebx,edx
c000342e:	83 ec 1c             	sub    esp,0x1c
c0003431:	f6 c2 1f             	test   dl,0x1f
c0003434:	74 0a                	je     c0003440 <dir_sdi+0x24>
c0003436:	b8 02 00 00 00       	mov    eax,0x2
c000343b:	e9 96 00 00 00       	jmp    c00034d6 <dir_sdi+0xba>
c0003440:	89 c6                	mov    esi,eax
c0003442:	8b 38                	mov    edi,DWORD PTR [eax]
c0003444:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003447:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000344a:	85 c9                	test   ecx,ecx
c000344c:	75 23                	jne    c0003471 <dir_sdi+0x55>
c000344e:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003451:	76 07                	jbe    c000345a <dir_sdi+0x3e>
c0003453:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003456:	85 c0                	test   eax,eax
c0003458:	75 15                	jne    c000346f <dir_sdi+0x53>
c000345a:	89 da                	mov    edx,ebx
c000345c:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003460:	c1 ea 05             	shr    edx,0x5
c0003463:	39 c2                	cmp    edx,eax
c0003465:	73 cf                	jae    c0003436 <dir_sdi+0x1a>
c0003467:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000346a:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000346d:	eb 3d                	jmp    c00034ac <dir_sdi+0x90>
c000346f:	89 c1                	mov    ecx,eax
c0003471:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003475:	c1 e5 09             	shl    ebp,0x9
c0003478:	89 ca                	mov    edx,ecx
c000347a:	39 eb                	cmp    ebx,ebp
c000347c:	72 1c                	jb     c000349a <dir_sdi+0x7e>
c000347e:	8b 06                	mov    eax,DWORD PTR [esi]
c0003480:	e8 93 fe ff ff       	call   c0003318 <get_fat.isra.2>
c0003485:	89 c1                	mov    ecx,eax
c0003487:	83 f8 ff             	cmp    eax,0xffffffff
c000348a:	74 45                	je     c00034d1 <dir_sdi+0xb5>
c000348c:	83 f8 01             	cmp    eax,0x1
c000348f:	76 a5                	jbe    c0003436 <dir_sdi+0x1a>
c0003491:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003494:	76 a0                	jbe    c0003436 <dir_sdi+0x1a>
c0003496:	29 eb                	sub    ebx,ebp
c0003498:	eb de                	jmp    c0003478 <dir_sdi+0x5c>
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 f8                	mov    eax,edi
c00034a0:	e8 8d ec ff ff       	call   c0002132 <clst2sect>
c00034a5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034a9:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00034ac:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00034af:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00034b2:	85 d2                	test   edx,edx
c00034b4:	74 80                	je     c0003436 <dir_sdi+0x1a>
c00034b6:	89 d8                	mov    eax,ebx
c00034b8:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00034be:	c1 e8 09             	shr    eax,0x9
c00034c1:	01 d0                	add    eax,edx
c00034c3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00034c6:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00034ca:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00034cd:	31 c0                	xor    eax,eax
c00034cf:	eb 05                	jmp    c00034d6 <dir_sdi+0xba>
c00034d1:	b8 01 00 00 00       	mov    eax,0x1
c00034d6:	83 c4 1c             	add    esp,0x1c
c00034d9:	5b                   	pop    ebx
c00034da:	5e                   	pop    esi
c00034db:	5f                   	pop    edi
c00034dc:	5d                   	pop    ebp
c00034dd:	c3                   	ret    
c00034de:	b8 02 00 00 00       	mov    eax,0x2
c00034e3:	c3                   	ret    

c00034e4 <create_chain>:
c00034e4:	55                   	push   ebp
c00034e5:	89 c5                	mov    ebp,eax
c00034e7:	57                   	push   edi
c00034e8:	89 d7                	mov    edi,edx
c00034ea:	56                   	push   esi
c00034eb:	53                   	push   ebx
c00034ec:	83 ec 1c             	sub    esp,0x1c
c00034ef:	85 d2                	test   edx,edx
c00034f1:	8b 30                	mov    esi,DWORD PTR [eax]
c00034f3:	75 0e                	jne    c0003503 <create_chain+0x1f>
c00034f5:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00034f8:	85 c9                	test   ecx,ecx
c00034fa:	74 34                	je     c0003530 <create_chain+0x4c>
c00034fc:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00034ff:	77 34                	ja     c0003535 <create_chain+0x51>
c0003501:	eb 2d                	jmp    c0003530 <create_chain+0x4c>
c0003503:	89 f0                	mov    eax,esi
c0003505:	e8 0e fe ff ff       	call   c0003318 <get_fat.isra.2>
c000350a:	89 c3                	mov    ebx,eax
c000350c:	83 f8 01             	cmp    eax,0x1
c000350f:	77 0a                	ja     c000351b <create_chain+0x37>
c0003511:	bb 01 00 00 00       	mov    ebx,0x1
c0003516:	e9 fe 00 00 00       	jmp    c0003619 <create_chain+0x135>
c000351b:	83 f8 ff             	cmp    eax,0xffffffff
c000351e:	0f 84 f2 00 00 00    	je     c0003616 <create_chain+0x132>
c0003524:	89 f9                	mov    ecx,edi
c0003526:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003529:	76 0a                	jbe    c0003535 <create_chain+0x51>
c000352b:	e9 e9 00 00 00       	jmp    c0003619 <create_chain+0x135>
c0003530:	b9 01 00 00 00       	mov    ecx,0x1
c0003535:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003539:	75 07                	jne    c0003542 <create_chain+0x5e>
c000353b:	31 db                	xor    ebx,ebx
c000353d:	e9 d7 00 00 00       	jmp    c0003619 <create_chain+0x135>
c0003542:	39 f9                	cmp    ecx,edi
c0003544:	75 46                	jne    c000358c <create_chain+0xa8>
c0003546:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003549:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000354c:	77 05                	ja     c0003553 <create_chain+0x6f>
c000354e:	bb 02 00 00 00       	mov    ebx,0x2
c0003553:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003557:	89 da                	mov    edx,ebx
c0003559:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000355c:	e8 b7 fd ff ff       	call   c0003318 <get_fat.isra.2>
c0003561:	83 f8 01             	cmp    eax,0x1
c0003564:	74 ab                	je     c0003511 <create_chain+0x2d>
c0003566:	83 f8 ff             	cmp    eax,0xffffffff
c0003569:	0f 84 a7 00 00 00    	je     c0003616 <create_chain+0x132>
c000356f:	85 c0                	test   eax,eax
c0003571:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003575:	74 11                	je     c0003588 <create_chain+0xa4>
c0003577:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000357a:	83 f8 01             	cmp    eax,0x1
c000357d:	76 0d                	jbe    c000358c <create_chain+0xa8>
c000357f:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003582:	73 08                	jae    c000358c <create_chain+0xa8>
c0003584:	89 c1                	mov    ecx,eax
c0003586:	eb 04                	jmp    c000358c <create_chain+0xa8>
c0003588:	85 db                	test   ebx,ebx
c000358a:	75 3d                	jne    c00035c9 <create_chain+0xe5>
c000358c:	89 cb                	mov    ebx,ecx
c000358e:	43                   	inc    ebx
c000358f:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003592:	77 0a                	ja     c000359e <create_chain+0xba>
c0003594:	83 f9 01             	cmp    ecx,0x1
c0003597:	76 a2                	jbe    c000353b <create_chain+0x57>
c0003599:	bb 02 00 00 00       	mov    ebx,0x2
c000359e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00035a2:	89 da                	mov    edx,ebx
c00035a4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00035a7:	e8 6c fd ff ff       	call   c0003318 <get_fat.isra.2>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	74 19                	je     c00035c9 <create_chain+0xe5>
c00035b0:	83 f8 01             	cmp    eax,0x1
c00035b3:	0f 84 58 ff ff ff    	je     c0003511 <create_chain+0x2d>
c00035b9:	40                   	inc    eax
c00035ba:	74 5a                	je     c0003616 <create_chain+0x132>
c00035bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00035c0:	39 cb                	cmp    ebx,ecx
c00035c2:	75 ca                	jne    c000358e <create_chain+0xaa>
c00035c4:	e9 72 ff ff ff       	jmp    c000353b <create_chain+0x57>
c00035c9:	83 c9 ff             	or     ecx,0xffffffff
c00035cc:	89 da                	mov    edx,ebx
c00035ce:	89 f0                	mov    eax,esi
c00035d0:	e8 b1 f2 ff ff       	call   c0002886 <put_fat>
c00035d5:	85 c0                	test   eax,eax
c00035d7:	75 36                	jne    c000360f <create_chain+0x12b>
c00035d9:	85 ff                	test   edi,edi
c00035db:	75 16                	jne    c00035f3 <create_chain+0x10f>
c00035dd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00035e0:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00035e3:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00035e6:	8d 57 fe             	lea    edx,[edi-0x2]
c00035e9:	39 d0                	cmp    eax,edx
c00035eb:	77 17                	ja     c0003604 <create_chain+0x120>
c00035ed:	48                   	dec    eax
c00035ee:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00035f1:	eb 11                	jmp    c0003604 <create_chain+0x120>
c00035f3:	89 d9                	mov    ecx,ebx
c00035f5:	89 fa                	mov    edx,edi
c00035f7:	89 f0                	mov    eax,esi
c00035f9:	e8 88 f2 ff ff       	call   c0002886 <put_fat>
c00035fe:	85 c0                	test   eax,eax
c0003600:	74 db                	je     c00035dd <create_chain+0xf9>
c0003602:	eb 0b                	jmp    c000360f <create_chain+0x12b>
c0003604:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003607:	83 c8 01             	or     eax,0x1
c000360a:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000360d:	eb 0a                	jmp    c0003619 <create_chain+0x135>
c000360f:	48                   	dec    eax
c0003610:	0f 85 fb fe ff ff    	jne    c0003511 <create_chain+0x2d>
c0003616:	83 cb ff             	or     ebx,0xffffffff
c0003619:	83 c4 1c             	add    esp,0x1c
c000361c:	89 d8                	mov    eax,ebx
c000361e:	5b                   	pop    ebx
c000361f:	5e                   	pop    esi
c0003620:	5f                   	pop    edi
c0003621:	5d                   	pop    ebp
c0003622:	c3                   	ret    

c0003623 <remove_chain>:
c0003623:	55                   	push   ebp
c0003624:	57                   	push   edi
c0003625:	56                   	push   esi
c0003626:	89 d6                	mov    esi,edx
c0003628:	53                   	push   ebx
c0003629:	83 ec 0c             	sub    esp,0xc
c000362c:	83 fa 01             	cmp    edx,0x1
c000362f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003631:	76 6a                	jbe    c000369d <remove_chain+0x7a>
c0003633:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003636:	76 65                	jbe    c000369d <remove_chain+0x7a>
c0003638:	89 c5                	mov    ebp,eax
c000363a:	89 ca                	mov    edx,ecx
c000363c:	85 c9                	test   ecx,ecx
c000363e:	74 0e                	je     c000364e <remove_chain+0x2b>
c0003640:	83 c9 ff             	or     ecx,0xffffffff
c0003643:	89 d8                	mov    eax,ebx
c0003645:	e8 3c f2 ff ff       	call   c0002886 <put_fat>
c000364a:	85 c0                	test   eax,eax
c000364c:	75 5b                	jne    c00036a9 <remove_chain+0x86>
c000364e:	89 f2                	mov    edx,esi
c0003650:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003653:	e8 c0 fc ff ff       	call   c0003318 <get_fat.isra.2>
c0003658:	89 c7                	mov    edi,eax
c000365a:	85 c0                	test   eax,eax
c000365c:	75 04                	jne    c0003662 <remove_chain+0x3f>
c000365e:	31 c0                	xor    eax,eax
c0003660:	eb 47                	jmp    c00036a9 <remove_chain+0x86>
c0003662:	83 f8 01             	cmp    eax,0x1
c0003665:	74 36                	je     c000369d <remove_chain+0x7a>
c0003667:	83 f8 ff             	cmp    eax,0xffffffff
c000366a:	74 38                	je     c00036a4 <remove_chain+0x81>
c000366c:	31 c9                	xor    ecx,ecx
c000366e:	89 f2                	mov    edx,esi
c0003670:	89 d8                	mov    eax,ebx
c0003672:	e8 0f f2 ff ff       	call   c0002886 <put_fat>
c0003677:	85 c0                	test   eax,eax
c0003679:	75 2e                	jne    c00036a9 <remove_chain+0x86>
c000367b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000367e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003681:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003684:	39 c8                	cmp    eax,ecx
c0003686:	73 0d                	jae    c0003695 <remove_chain+0x72>
c0003688:	40                   	inc    eax
c0003689:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000368c:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000368f:	83 c8 01             	or     eax,0x1
c0003692:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003695:	89 fe                	mov    esi,edi
c0003697:	39 fa                	cmp    edx,edi
c0003699:	77 b3                	ja     c000364e <remove_chain+0x2b>
c000369b:	eb c1                	jmp    c000365e <remove_chain+0x3b>
c000369d:	b8 02 00 00 00       	mov    eax,0x2
c00036a2:	eb 05                	jmp    c00036a9 <remove_chain+0x86>
c00036a4:	b8 01 00 00 00       	mov    eax,0x1
c00036a9:	83 c4 0c             	add    esp,0xc
c00036ac:	5b                   	pop    ebx
c00036ad:	5e                   	pop    esi
c00036ae:	5f                   	pop    edi
c00036af:	5d                   	pop    ebp
c00036b0:	c3                   	ret    

c00036b1 <dir_next>:
c00036b1:	55                   	push   ebp
c00036b2:	57                   	push   edi
c00036b3:	56                   	push   esi
c00036b4:	53                   	push   ebx
c00036b5:	83 ec 1c             	sub    esp,0x1c
c00036b8:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00036bb:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036bd:	83 c7 20             	add    edi,0x20
c00036c0:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00036c6:	76 07                	jbe    c00036cf <dir_next+0x1e>
c00036c8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00036cf:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00036d2:	b9 04 00 00 00       	mov    ecx,0x4
c00036d7:	85 f6                	test   esi,esi
c00036d9:	0f 84 cd 00 00 00    	je     c00037ac <dir_next+0xfb>
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	89 d1                	mov    ecx,edx
c00036e3:	89 f8                	mov    eax,edi
c00036e5:	25 ff 01 00 00       	and    eax,0x1ff
c00036ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00036ee:	0f 85 a8 00 00 00    	jne    c000379c <dir_next+0xeb>
c00036f4:	46                   	inc    esi
c00036f5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00036f8:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00036fb:	85 d2                	test   edx,edx
c00036fd:	75 22                	jne    c0003721 <dir_next+0x70>
c00036ff:	89 fa                	mov    edx,edi
c0003701:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003705:	c1 ea 05             	shr    edx,0x5
c0003708:	39 c2                	cmp    edx,eax
c000370a:	0f 82 8c 00 00 00    	jb     c000379c <dir_next+0xeb>
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	b9 04 00 00 00       	mov    ecx,0x4
c000371c:	e9 8b 00 00 00       	jmp    c00037ac <dir_next+0xfb>
c0003721:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003725:	89 fe                	mov    esi,edi
c0003727:	48                   	dec    eax
c0003728:	c1 ee 09             	shr    esi,0x9
c000372b:	85 f0                	test   eax,esi
c000372d:	75 6d                	jne    c000379c <dir_next+0xeb>
c000372f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 de fb ff ff       	call   c0003318 <get_fat.isra.2>
c000373a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000373e:	89 c6                	mov    esi,eax
c0003740:	83 f8 01             	cmp    eax,0x1
c0003743:	77 07                	ja     c000374c <dir_next+0x9b>
c0003745:	b9 02 00 00 00       	mov    ecx,0x2
c000374a:	eb 60                	jmp    c00037ac <dir_next+0xfb>
c000374c:	83 f8 ff             	cmp    eax,0xffffffff
c000374f:	75 07                	jne    c0003758 <dir_next+0xa7>
c0003751:	b9 01 00 00 00       	mov    ecx,0x1
c0003756:	eb 54                	jmp    c00037ac <dir_next+0xfb>
c0003758:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c000375b:	77 30                	ja     c000378d <dir_next+0xdc>
c000375d:	85 c9                	test   ecx,ecx
c000375f:	74 af                	je     c0003710 <dir_next+0x5f>
c0003761:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003764:	89 d8                	mov    eax,ebx
c0003766:	e8 79 fd ff ff       	call   c00034e4 <create_chain>
c000376b:	b9 07 00 00 00       	mov    ecx,0x7
c0003770:	89 c6                	mov    esi,eax
c0003772:	85 c0                	test   eax,eax
c0003774:	74 36                	je     c00037ac <dir_next+0xfb>
c0003776:	83 f8 01             	cmp    eax,0x1
c0003779:	74 ca                	je     c0003745 <dir_next+0x94>
c000377b:	83 f8 ff             	cmp    eax,0xffffffff
c000377e:	74 d1                	je     c0003751 <dir_next+0xa0>
c0003780:	89 c2                	mov    edx,eax
c0003782:	89 e8                	mov    eax,ebp
c0003784:	e8 54 f2 ff ff       	call   c00029dd <dir_clear>
c0003789:	85 c0                	test   eax,eax
c000378b:	75 c4                	jne    c0003751 <dir_next+0xa0>
c000378d:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003790:	89 f2                	mov    edx,esi
c0003792:	89 e8                	mov    eax,ebp
c0003794:	e8 99 e9 ff ff       	call   c0002132 <clst2sect>
c0003799:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000379c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037a0:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00037a3:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00037a7:	31 c9                	xor    ecx,ecx
c00037a9:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00037ac:	83 c4 1c             	add    esp,0x1c
c00037af:	89 c8                	mov    eax,ecx
c00037b1:	5b                   	pop    ebx
c00037b2:	5e                   	pop    esi
c00037b3:	5f                   	pop    edi
c00037b4:	5d                   	pop    ebp
c00037b5:	c3                   	ret    

c00037b6 <dir_alloc>:
c00037b6:	55                   	push   ebp
c00037b7:	89 c5                	mov    ebp,eax
c00037b9:	57                   	push   edi
c00037ba:	89 d7                	mov    edi,edx
c00037bc:	56                   	push   esi
c00037bd:	31 d2                	xor    edx,edx
c00037bf:	53                   	push   ebx
c00037c0:	83 ec 0c             	sub    esp,0xc
c00037c3:	8b 30                	mov    esi,DWORD PTR [eax]
c00037c5:	e8 52 fc ff ff       	call   c000341c <dir_sdi>
c00037ca:	85 c0                	test   eax,eax
c00037cc:	75 3b                	jne    c0003809 <dir_alloc+0x53>
c00037ce:	31 db                	xor    ebx,ebx
c00037d0:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00037d3:	89 f0                	mov    eax,esi
c00037d5:	e8 68 ec ff ff       	call   c0002442 <move_window>
c00037da:	85 c0                	test   eax,eax
c00037dc:	75 2b                	jne    c0003809 <dir_alloc+0x53>
c00037de:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00037e1:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00037e4:	85 d2                	test   edx,edx
c00037e6:	74 08                	je     c00037f0 <dir_alloc+0x3a>
c00037e8:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00037ee:	75 07                	jne    c00037f7 <dir_alloc+0x41>
c00037f0:	43                   	inc    ebx
c00037f1:	39 fb                	cmp    ebx,edi
c00037f3:	75 04                	jne    c00037f9 <dir_alloc+0x43>
c00037f5:	eb 1c                	jmp    c0003813 <dir_alloc+0x5d>
c00037f7:	31 db                	xor    ebx,ebx
c00037f9:	ba 01 00 00 00       	mov    edx,0x1
c00037fe:	89 e8                	mov    eax,ebp
c0003800:	e8 ac fe ff ff       	call   c00036b1 <dir_next>
c0003805:	85 c0                	test   eax,eax
c0003807:	74 c7                	je     c00037d0 <dir_alloc+0x1a>
c0003809:	83 f8 04             	cmp    eax,0x4
c000380c:	75 05                	jne    c0003813 <dir_alloc+0x5d>
c000380e:	b8 07 00 00 00       	mov    eax,0x7
c0003813:	83 c4 0c             	add    esp,0xc
c0003816:	5b                   	pop    ebx
c0003817:	5e                   	pop    esi
c0003818:	5f                   	pop    edi
c0003819:	5d                   	pop    ebp
c000381a:	c3                   	ret    

c000381b <dir_read>:
c000381b:	55                   	push   ebp
c000381c:	57                   	push   edi
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	56                   	push   esi
c0003823:	be 04 00 00 00       	mov    esi,0x4
c0003828:	53                   	push   ebx
c0003829:	89 c3                	mov    ebx,eax
c000382b:	83 ec 1c             	sub    esp,0x1c
c000382e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003832:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003834:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003839:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000383c:	85 d2                	test   edx,edx
c000383e:	0f 84 e3 00 00 00    	je     c0003927 <dir_read+0x10c>
c0003844:	89 e8                	mov    eax,ebp
c0003846:	e8 f7 eb ff ff       	call   c0002442 <move_window>
c000384b:	89 c6                	mov    esi,eax
c000384d:	85 c0                	test   eax,eax
c000384f:	0f 85 dd 00 00 00    	jne    c0003932 <dir_read+0x117>
c0003855:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003858:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c000385b:	88 04 24             	mov    BYTE PTR [esp],al
c000385e:	85 c0                	test   eax,eax
c0003860:	0f 84 c7 00 00 00    	je     c000392d <dir_read+0x112>
c0003866:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003869:	83 e1 3f             	and    ecx,0x3f
c000386c:	83 f8 2e             	cmp    eax,0x2e
c000386f:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003872:	0f 84 95 00 00 00    	je     c000390d <dir_read+0xf2>
c0003878:	3d e5 00 00 00       	cmp    eax,0xe5
c000387d:	0f 84 8a 00 00 00    	je     c000390d <dir_read+0xf2>
c0003883:	0f b6 c9             	movzx  ecx,cl
c0003886:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000388a:	83 e1 df             	and    ecx,0xffffffdf
c000388d:	83 f9 08             	cmp    ecx,0x8
c0003890:	0f 94 c1             	sete   cl
c0003893:	0f b6 c9             	movzx  ecx,cl
c0003896:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000389a:	75 71                	jne    c000390d <dir_read+0xf2>
c000389c:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00038a1:	75 4a                	jne    c00038ed <dir_read+0xd2>
c00038a3:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00038a7:	74 16                	je     c00038bf <dir_read+0xa4>
c00038a9:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00038ac:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00038b3:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00038b7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038ba:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00038bd:	eb 0e                	jmp    c00038cd <dir_read+0xb2>
c00038bf:	89 f9                	mov    ecx,edi
c00038c1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c6:	0f b6 c9             	movzx  ecx,cl
c00038c9:	39 c1                	cmp    ecx,eax
c00038cb:	75 45                	jne    c0003912 <dir_read+0xf7>
c00038cd:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00038d1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038d6:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00038d9:	75 37                	jne    c0003912 <dir_read+0xf7>
c00038db:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00038de:	e8 6c e8 ff ff       	call   c000214f <pick_lfn>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	74 2b                	je     c0003912 <dir_read+0xf7>
c00038e7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00038ea:	4f                   	dec    edi
c00038eb:	eb 25                	jmp    c0003912 <dir_read+0xf7>
c00038ed:	89 f8                	mov    eax,edi
c00038ef:	84 c0                	test   al,al
c00038f1:	75 11                	jne    c0003904 <dir_read+0xe9>
c00038f3:	89 d0                	mov    eax,edx
c00038f5:	e8 32 ea ff ff       	call   c000232c <sum_sfn>
c00038fa:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00038fe:	75 04                	jne    c0003904 <dir_read+0xe9>
c0003900:	31 f6                	xor    esi,esi
c0003902:	eb 35                	jmp    c0003939 <dir_read+0x11e>
c0003904:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000390b:	eb 2c                	jmp    c0003939 <dir_read+0x11e>
c000390d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003912:	31 d2                	xor    edx,edx
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 96 fd ff ff       	call   c00036b1 <dir_next>
c000391b:	89 c6                	mov    esi,eax
c000391d:	85 c0                	test   eax,eax
c000391f:	0f 84 14 ff ff ff    	je     c0003839 <dir_read+0x1e>
c0003925:	eb 0b                	jmp    c0003932 <dir_read+0x117>
c0003927:	85 f6                	test   esi,esi
c0003929:	74 d5                	je     c0003900 <dir_read+0xe5>
c000392b:	eb 05                	jmp    c0003932 <dir_read+0x117>
c000392d:	be 04 00 00 00       	mov    esi,0x4
c0003932:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003939:	83 c4 1c             	add    esp,0x1c
c000393c:	89 f0                	mov    eax,esi
c000393e:	5b                   	pop    ebx
c000393f:	5e                   	pop    esi
c0003940:	5f                   	pop    edi
c0003941:	5d                   	pop    ebp
c0003942:	c3                   	ret    

c0003943 <dir_remove>:
c0003943:	57                   	push   edi
c0003944:	56                   	push   esi
c0003945:	53                   	push   ebx
c0003946:	89 c3                	mov    ebx,eax
c0003948:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000394b:	8b 30                	mov    esi,DWORD PTR [eax]
c000394d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003950:	83 fa ff             	cmp    edx,0xffffffff
c0003953:	74 09                	je     c000395e <dir_remove+0x1b>
c0003955:	e8 c2 fa ff ff       	call   c000341c <dir_sdi>
c000395a:	85 c0                	test   eax,eax
c000395c:	75 34                	jne    c0003992 <dir_remove+0x4f>
c000395e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003961:	89 f0                	mov    eax,esi
c0003963:	e8 da ea ff ff       	call   c0002442 <move_window>
c0003968:	85 c0                	test   eax,eax
c000396a:	75 1c                	jne    c0003988 <dir_remove+0x45>
c000396c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000396f:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003972:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003976:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003979:	73 17                	jae    c0003992 <dir_remove+0x4f>
c000397b:	31 d2                	xor    edx,edx
c000397d:	89 d8                	mov    eax,ebx
c000397f:	e8 2d fd ff ff       	call   c00036b1 <dir_next>
c0003984:	85 c0                	test   eax,eax
c0003986:	74 d6                	je     c000395e <dir_remove+0x1b>
c0003988:	83 f8 04             	cmp    eax,0x4
c000398b:	75 05                	jne    c0003992 <dir_remove+0x4f>
c000398d:	b8 02 00 00 00       	mov    eax,0x2
c0003992:	5b                   	pop    ebx
c0003993:	5e                   	pop    esi
c0003994:	5f                   	pop    edi
c0003995:	c3                   	ret    

c0003996 <dir_find>:
c0003996:	55                   	push   ebp
c0003997:	31 d2                	xor    edx,edx
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	53                   	push   ebx
c000399c:	89 c3                	mov    ebx,eax
c000399e:	83 ec 1c             	sub    esp,0x1c
c00039a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00039a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039a7:	89 d8                	mov    eax,ebx
c00039a9:	e8 6e fa ff ff       	call   c000341c <dir_sdi>
c00039ae:	89 c6                	mov    esi,eax
c00039b0:	85 c0                	test   eax,eax
c00039b2:	0f 85 1d 01 00 00    	jne    c0003ad5 <dir_find+0x13f>
c00039b8:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039bf:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00039c4:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039c9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00039cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039d0:	e8 6d ea ff ff       	call   c0002442 <move_window>
c00039d5:	89 c6                	mov    esi,eax
c00039d7:	85 c0                	test   eax,eax
c00039d9:	0f 85 f6 00 00 00    	jne    c0003ad5 <dir_find+0x13f>
c00039df:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00039e2:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00039e6:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00039ea:	85 c9                	test   ecx,ecx
c00039ec:	0f 84 de 00 00 00    	je     c0003ad0 <dir_find+0x13a>
c00039f2:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00039f5:	89 d0                	mov    eax,edx
c00039f7:	83 e0 3f             	and    eax,0x3f
c00039fa:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003a00:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a03:	0f 84 a6 00 00 00    	je     c0003aaf <dir_find+0x119>
c0003a09:	80 e2 08             	and    dl,0x8
c0003a0c:	0f b6 c0             	movzx  eax,al
c0003a0f:	74 0b                	je     c0003a1c <dir_find+0x86>
c0003a11:	83 f8 0f             	cmp    eax,0xf
c0003a14:	0f 85 95 00 00 00    	jne    c0003aaf <dir_find+0x119>
c0003a1a:	eb 05                	jmp    c0003a21 <dir_find+0x8b>
c0003a1c:	83 f8 0f             	cmp    eax,0xf
c0003a1f:	75 62                	jne    c0003a83 <dir_find+0xed>
c0003a21:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003a25:	0f 85 90 00 00 00    	jne    c0003abb <dir_find+0x125>
c0003a2b:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003a30:	74 17                	je     c0003a49 <dir_find+0xb3>
c0003a32:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003a35:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003a3d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003a41:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a44:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003a47:	eb 13                	jmp    c0003a5c <dir_find+0xc6>
c0003a49:	89 f8                	mov    eax,edi
c0003a4b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a50:	0f b6 d0             	movzx  edx,al
c0003a53:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003a58:	39 c2                	cmp    edx,eax
c0003a5a:	75 5f                	jne    c0003abb <dir_find+0x125>
c0003a5c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003a60:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a65:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003a68:	75 51                	jne    c0003abb <dir_find+0x125>
c0003a6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a6e:	89 ea                	mov    edx,ebp
c0003a70:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a73:	e8 37 f3 ff ff       	call   c0002daf <cmp_lfn>
c0003a78:	85 c0                	test   eax,eax
c0003a7a:	74 3f                	je     c0003abb <dir_find+0x125>
c0003a7c:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003a80:	4f                   	dec    edi
c0003a81:	eb 38                	jmp    c0003abb <dir_find+0x125>
c0003a83:	89 f8                	mov    eax,edi
c0003a85:	84 c0                	test   al,al
c0003a87:	75 0d                	jne    c0003a96 <dir_find+0x100>
c0003a89:	89 e8                	mov    eax,ebp
c0003a8b:	e8 9c e8 ff ff       	call   c000232c <sum_sfn>
c0003a90:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003a94:	74 3f                	je     c0003ad5 <dir_find+0x13f>
c0003a96:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003a9a:	75 13                	jne    c0003aaf <dir_find+0x119>
c0003a9c:	8d 53 20             	lea    edx,[ebx+0x20]
c0003a9f:	b9 0b 00 00 00       	mov    ecx,0xb
c0003aa4:	89 e8                	mov    eax,ebp
c0003aa6:	e8 7c e4 ff ff       	call   c0001f27 <mem_cmp>
c0003aab:	85 c0                	test   eax,eax
c0003aad:	74 26                	je     c0003ad5 <dir_find+0x13f>
c0003aaf:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003ab6:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003abb:	31 d2                	xor    edx,edx
c0003abd:	89 d8                	mov    eax,ebx
c0003abf:	e8 ed fb ff ff       	call   c00036b1 <dir_next>
c0003ac4:	89 c6                	mov    esi,eax
c0003ac6:	85 c0                	test   eax,eax
c0003ac8:	0f 84 fb fe ff ff    	je     c00039c9 <dir_find+0x33>
c0003ace:	eb 05                	jmp    c0003ad5 <dir_find+0x13f>
c0003ad0:	be 04 00 00 00       	mov    esi,0x4
c0003ad5:	83 c4 1c             	add    esp,0x1c
c0003ad8:	89 f0                	mov    eax,esi
c0003ada:	5b                   	pop    ebx
c0003adb:	5e                   	pop    esi
c0003adc:	5f                   	pop    edi
c0003add:	5d                   	pop    ebp
c0003ade:	c3                   	ret    

c0003adf <follow_path>:
c0003adf:	56                   	push   esi
c0003ae0:	53                   	push   ebx
c0003ae1:	89 c3                	mov    ebx,eax
c0003ae3:	83 ec 14             	sub    esp,0x14
c0003ae6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003aea:	8b 30                	mov    esi,DWORD PTR [eax]
c0003aec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003af0:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003af3:	83 fa 5c             	cmp    edx,0x5c
c0003af6:	75 07                	jne    c0003aff <follow_path+0x20>
c0003af8:	40                   	inc    eax
c0003af9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003afd:	eb ed                	jmp    c0003aec <follow_path+0xd>
c0003aff:	83 fa 2f             	cmp    edx,0x2f
c0003b02:	74 f4                	je     c0003af8 <follow_path+0x19>
c0003b04:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003b0b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003b0e:	77 3e                	ja     c0003b4e <follow_path+0x6f>
c0003b10:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003b14:	31 d2                	xor    edx,edx
c0003b16:	89 d8                	mov    eax,ebx
c0003b18:	e8 ff f8 ff ff       	call   c000341c <dir_sdi>
c0003b1d:	eb 4f                	jmp    c0003b6e <follow_path+0x8f>
c0003b1f:	89 d8                	mov    eax,ebx
c0003b21:	e8 70 fe ff ff       	call   c0003996 <dir_find>
c0003b26:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003b29:	85 c0                	test   eax,eax
c0003b2b:	75 32                	jne    c0003b5f <follow_path+0x80>
c0003b2d:	80 e2 04             	and    dl,0x4
c0003b30:	75 3c                	jne    c0003b6e <follow_path+0x8f>
c0003b32:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003b36:	74 31                	je     c0003b69 <follow_path+0x8a>
c0003b38:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b3b:	25 ff 01 00 00       	and    eax,0x1ff
c0003b40:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003b44:	8a 06                	mov    al,BYTE PTR [esi]
c0003b46:	e8 7c f7 ff ff       	call   c00032c7 <ld_clust.isra.0>
c0003b4b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003b4e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003b52:	89 d8                	mov    eax,ebx
c0003b54:	e8 7f ef ff ff       	call   c0002ad8 <create_name>
c0003b59:	85 c0                	test   eax,eax
c0003b5b:	74 c2                	je     c0003b1f <follow_path+0x40>
c0003b5d:	eb 0f                	jmp    c0003b6e <follow_path+0x8f>
c0003b5f:	83 f8 04             	cmp    eax,0x4
c0003b62:	75 0a                	jne    c0003b6e <follow_path+0x8f>
c0003b64:	80 e2 04             	and    dl,0x4
c0003b67:	75 05                	jne    c0003b6e <follow_path+0x8f>
c0003b69:	b8 05 00 00 00       	mov    eax,0x5
c0003b6e:	83 c4 14             	add    esp,0x14
c0003b71:	5b                   	pop    ebx
c0003b72:	5e                   	pop    esi
c0003b73:	c3                   	ret    

c0003b74 <dir_register>:
c0003b74:	55                   	push   ebp
c0003b75:	57                   	push   edi
c0003b76:	56                   	push   esi
c0003b77:	be 06 00 00 00       	mov    esi,0x6
c0003b7c:	53                   	push   ebx
c0003b7d:	83 ec 2c             	sub    esp,0x2c
c0003b80:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003b83:	80 e2 a0             	and    dl,0xa0
c0003b86:	0f 85 66 01 00 00    	jne    c0003cf2 <dir_register+0x17e>
c0003b8c:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b8e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003b96:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003b99:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003b9d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ba2:	74 06                	je     c0003baa <dir_register+0x36>
c0003ba4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003ba8:	eb ef                	jmp    c0003b99 <dir_register+0x25>
c0003baa:	89 c3                	mov    ebx,eax
c0003bac:	b9 0c 00 00 00       	mov    ecx,0xc
c0003bb1:	8d 40 20             	lea    eax,[eax+0x20]
c0003bb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003bb8:	89 c2                	mov    edx,eax
c0003bba:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003bbe:	e8 44 e3 ff ff       	call   c0001f07 <mem_cpy>
c0003bc3:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003bc8:	74 48                	je     c0003c12 <dir_register+0x9e>
c0003bca:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003bce:	bd 01 00 00 00       	mov    ebp,0x1
c0003bd3:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003bd6:	55                   	push   ebp
c0003bd7:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003bdb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bdf:	e8 86 e6 ff ff       	call   c000226a <gen_numname>
c0003be4:	58                   	pop    eax
c0003be5:	89 d8                	mov    eax,ebx
c0003be7:	e8 aa fd ff ff       	call   c0003996 <dir_find>
c0003bec:	89 c6                	mov    esi,eax
c0003bee:	85 c0                	test   eax,eax
c0003bf0:	75 10                	jne    c0003c02 <dir_register+0x8e>
c0003bf2:	45                   	inc    ebp
c0003bf3:	83 fd 64             	cmp    ebp,0x64
c0003bf6:	75 db                	jne    c0003bd3 <dir_register+0x5f>
c0003bf8:	be 07 00 00 00       	mov    esi,0x7
c0003bfd:	e9 f0 00 00 00       	jmp    c0003cf2 <dir_register+0x17e>
c0003c02:	83 f8 04             	cmp    eax,0x4
c0003c05:	0f 85 e7 00 00 00    	jne    c0003cf2 <dir_register+0x17e>
c0003c0b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003c0f:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003c12:	bd 01 00 00 00       	mov    ebp,0x1
c0003c17:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003c1c:	74 13                	je     c0003c31 <dir_register+0xbd>
c0003c1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c22:	b9 0d 00 00 00       	mov    ecx,0xd
c0003c27:	83 c0 0c             	add    eax,0xc
c0003c2a:	31 d2                	xor    edx,edx
c0003c2c:	f7 f1                	div    ecx
c0003c2e:	8d 68 01             	lea    ebp,[eax+0x1]
c0003c31:	89 ea                	mov    edx,ebp
c0003c33:	89 d8                	mov    eax,ebx
c0003c35:	e8 7c fb ff ff       	call   c00037b6 <dir_alloc>
c0003c3a:	89 c6                	mov    esi,eax
c0003c3c:	85 c0                	test   eax,eax
c0003c3e:	0f 85 ae 00 00 00    	jne    c0003cf2 <dir_register+0x17e>
c0003c44:	4d                   	dec    ebp
c0003c45:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003c49:	74 67                	je     c0003cb2 <dir_register+0x13e>
c0003c4b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003c4e:	89 e8                	mov    eax,ebp
c0003c50:	c1 e0 05             	shl    eax,0x5
c0003c53:	29 c2                	sub    edx,eax
c0003c55:	89 d8                	mov    eax,ebx
c0003c57:	e8 c0 f7 ff ff       	call   c000341c <dir_sdi>
c0003c5c:	89 c6                	mov    esi,eax
c0003c5e:	85 c0                	test   eax,eax
c0003c60:	0f 85 8c 00 00 00    	jne    c0003cf2 <dir_register+0x17e>
c0003c66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c6a:	e8 bd e6 ff ff       	call   c000232c <sum_sfn>
c0003c6f:	0f b6 e8             	movzx  ebp,al
c0003c72:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003c75:	89 f8                	mov    eax,edi
c0003c77:	e8 c6 e7 ff ff       	call   c0002442 <move_window>
c0003c7c:	89 c6                	mov    esi,eax
c0003c7e:	85 c0                	test   eax,eax
c0003c80:	75 70                	jne    c0003cf2 <dir_register+0x17e>
c0003c82:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003c87:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c8a:	83 ec 0c             	sub    esp,0xc
c0003c8d:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003c90:	55                   	push   ebp
c0003c91:	e8 39 e5 ff ff       	call   c00021cf <put_lfn>
c0003c96:	31 d2                	xor    edx,edx
c0003c98:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c9c:	89 d8                	mov    eax,ebx
c0003c9e:	e8 0e fa ff ff       	call   c00036b1 <dir_next>
c0003ca3:	83 c4 10             	add    esp,0x10
c0003ca6:	89 c6                	mov    esi,eax
c0003ca8:	85 c0                	test   eax,eax
c0003caa:	75 46                	jne    c0003cf2 <dir_register+0x17e>
c0003cac:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003cb0:	75 c0                	jne    c0003c72 <dir_register+0xfe>
c0003cb2:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003cb5:	89 f8                	mov    eax,edi
c0003cb7:	e8 86 e7 ff ff       	call   c0002442 <move_window>
c0003cbc:	89 c6                	mov    esi,eax
c0003cbe:	85 c0                	test   eax,eax
c0003cc0:	75 30                	jne    c0003cf2 <dir_register+0x17e>
c0003cc2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003cc5:	b9 20 00 00 00       	mov    ecx,0x20
c0003cca:	31 d2                	xor    edx,edx
c0003ccc:	e8 4b e2 ff ff       	call   c0001f1c <mem_set>
c0003cd1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003cd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003cd8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cdd:	e8 25 e2 ff ff       	call   c0001f07 <mem_cpy>
c0003ce2:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003ce5:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003ce8:	83 e0 18             	and    eax,0x18
c0003ceb:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003cee:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003cf2:	83 c4 2c             	add    esp,0x2c
c0003cf5:	89 f0                	mov    eax,esi
c0003cf7:	5b                   	pop    ebx
c0003cf8:	5e                   	pop    esi
c0003cf9:	5f                   	pop    edi
c0003cfa:	5d                   	pop    ebp
c0003cfb:	c3                   	ret    

c0003cfc <f_mount>:
c0003cfc:	53                   	push   ebx
c0003cfd:	83 ec 18             	sub    esp,0x18
c0003d00:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003d04:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003d08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d0c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003d10:	e8 37 e6 ff ff       	call   c000234c <get_ldnumber>
c0003d15:	89 c2                	mov    edx,eax
c0003d17:	b8 0b 00 00 00       	mov    eax,0xb
c0003d1c:	85 d2                	test   edx,edx
c0003d1e:	78 39                	js     c0003d59 <f_mount+0x5d>
c0003d20:	8b 04 95 80 6c 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc9380]
c0003d27:	85 c0                	test   eax,eax
c0003d29:	74 03                	je     c0003d2e <f_mount+0x32>
c0003d2b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003d2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003d32:	85 c0                	test   eax,eax
c0003d34:	74 03                	je     c0003d39 <f_mount+0x3d>
c0003d36:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003d39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003d3d:	89 04 95 80 6c 03 c0 	mov    DWORD PTR [edx*4-0x3ffc9380],eax
c0003d44:	31 c0                	xor    eax,eax
c0003d46:	84 db                	test   bl,bl
c0003d48:	74 0f                	je     c0003d59 <f_mount+0x5d>
c0003d4a:	31 c9                	xor    ecx,ecx
c0003d4c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003d50:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003d54:	e8 3c e8 ff ff       	call   c0002595 <mount_volume>
c0003d59:	83 c4 18             	add    esp,0x18
c0003d5c:	5b                   	pop    ebx
c0003d5d:	c3                   	ret    

c0003d5e <f_open>:
c0003d5e:	55                   	push   ebp
c0003d5f:	b8 09 00 00 00       	mov    eax,0x9
c0003d64:	57                   	push   edi
c0003d65:	56                   	push   esi
c0003d66:	53                   	push   ebx
c0003d67:	83 ec 5c             	sub    esp,0x5c
c0003d6a:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003d6e:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003d72:	85 db                	test   ebx,ebx
c0003d74:	0f 84 9f 02 00 00    	je     c0004019 <f_open+0x2bb>
c0003d7a:	89 fd                	mov    ebp,edi
c0003d7c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003d80:	83 e5 3f             	and    ebp,0x3f
c0003d83:	89 e8                	mov    eax,ebp
c0003d85:	89 ee                	mov    esi,ebp
c0003d87:	0f b6 c8             	movzx  ecx,al
c0003d8a:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003d8e:	e8 02 e8 ff ff       	call   c0002595 <mount_volume>
c0003d93:	85 c0                	test   eax,eax
c0003d95:	0f 85 78 02 00 00    	jne    c0004013 <f_open+0x2b5>
c0003d9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9f:	83 ec 0c             	sub    esp,0xc
c0003da2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003da6:	68 00 02 00 00       	push   0x200
c0003dab:	e8 74 1f 00 00       	call   c0005d24 <ff_memalloc>
c0003db0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003db4:	83 c4 10             	add    esp,0x10
c0003db7:	b8 11 00 00 00       	mov    eax,0x11
c0003dbc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003dc1:	0f 84 52 02 00 00    	je     c0004019 <f_open+0x2bb>
c0003dc7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dcb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003dcf:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003dd3:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003dd6:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003dda:	e8 00 fd ff ff       	call   c0003adf <follow_path>
c0003ddf:	85 c0                	test   eax,eax
c0003de1:	75 0c                	jne    c0003def <f_open+0x91>
c0003de3:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003de8:	74 05                	je     c0003def <f_open+0x91>
c0003dea:	b8 06 00 00 00       	mov    eax,0x6
c0003def:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003df5:	0f 84 d5 00 00 00    	je     c0003ed0 <f_open+0x172>
c0003dfb:	85 c0                	test   eax,eax
c0003dfd:	74 21                	je     c0003e20 <f_open+0xc2>
c0003dff:	83 f8 04             	cmp    eax,0x4
c0003e02:	0f 85 f0 01 00 00    	jne    c0003ff8 <f_open+0x29a>
c0003e08:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003e0c:	e8 63 fd ff ff       	call   c0003b74 <dir_register>
c0003e11:	85 c0                	test   eax,eax
c0003e13:	0f 85 df 01 00 00    	jne    c0003ff8 <f_open+0x29a>
c0003e19:	83 cd 08             	or     ebp,0x8
c0003e1c:	89 ee                	mov    esi,ebp
c0003e1e:	eb 2c                	jmp    c0003e4c <f_open+0xee>
c0003e20:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e24:	b8 07 00 00 00       	mov    eax,0x7
c0003e29:	80 e2 11             	and    dl,0x11
c0003e2c:	0f 85 c6 01 00 00    	jne    c0003ff8 <f_open+0x29a>
c0003e32:	b8 08 00 00 00       	mov    eax,0x8
c0003e37:	f7 c7 04 00 00 00    	test   edi,0x4
c0003e3d:	0f 85 b5 01 00 00    	jne    c0003ff8 <f_open+0x29a>
c0003e43:	83 e7 08             	and    edi,0x8
c0003e46:	0f 84 b1 00 00 00    	je     c0003efd <f_open+0x19f>
c0003e4c:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003e50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e54:	89 ea                	mov    edx,ebp
c0003e56:	8a 00                	mov    al,BYTE PTR [eax]
c0003e58:	e8 6a f4 ff ff       	call   c00032c7 <ld_clust.isra.0>
c0003e5d:	ba 00 00 21 50       	mov    edx,0x50210000
c0003e62:	89 c7                	mov    edi,eax
c0003e64:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003e67:	e8 98 e0 ff ff       	call   c0001f04 <st_dword>
c0003e6c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003e70:	31 c9                	xor    ecx,ecx
c0003e72:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003e76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e7a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003e7e:	e8 6d f4 ff ff       	call   c00032f0 <st_clust.isra.1>
c0003e83:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003e87:	31 d2                	xor    edx,edx
c0003e89:	83 c0 1c             	add    eax,0x1c
c0003e8c:	e8 73 e0 ff ff       	call   c0001f04 <st_dword>
c0003e91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e95:	85 ff                	test   edi,edi
c0003e97:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003e9b:	74 60                	je     c0003efd <f_open+0x19f>
c0003e9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ea1:	31 c9                	xor    ecx,ecx
c0003ea3:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003ea6:	89 fa                	mov    edx,edi
c0003ea8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003eac:	e8 72 f7 ff ff       	call   c0003623 <remove_chain>
c0003eb1:	85 c0                	test   eax,eax
c0003eb3:	0f 85 3f 01 00 00    	jne    c0003ff8 <f_open+0x29a>
c0003eb9:	89 ea                	mov    edx,ebp
c0003ebb:	4f                   	dec    edi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	e8 7d e5 ff ff       	call   c0002442 <move_window>
c0003ec5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003ec9:	85 c0                	test   eax,eax
c0003ecb:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003ece:	eb 27                	jmp    c0003ef7 <f_open+0x199>
c0003ed0:	85 c0                	test   eax,eax
c0003ed2:	0f 85 20 01 00 00    	jne    c0003ff8 <f_open+0x29a>
c0003ed8:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003edc:	b8 04 00 00 00       	mov    eax,0x4
c0003ee1:	f6 c2 10             	test   dl,0x10
c0003ee4:	0f 85 0e 01 00 00    	jne    c0003ff8 <f_open+0x29a>
c0003eea:	83 e7 02             	and    edi,0x2
c0003eed:	74 0e                	je     c0003efd <f_open+0x19f>
c0003eef:	b8 07 00 00 00       	mov    eax,0x7
c0003ef4:	80 e2 01             	and    dl,0x1
c0003ef7:	0f 85 fb 00 00 00    	jne    c0003ff8 <f_open+0x29a>
c0003efd:	f7 c6 08 00 00 00    	test   esi,0x8
c0003f03:	74 03                	je     c0003f08 <f_open+0x1aa>
c0003f05:	83 ce 40             	or     esi,0x40
c0003f08:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f0c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003f10:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003f13:	89 fa                	mov    edx,edi
c0003f15:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003f18:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003f1b:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003f1e:	e8 a4 f3 ff ff       	call   c00032c7 <ld_clust.isra.0>
c0003f23:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003f26:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003f29:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003f2c:	e8 b7 df ff ff       	call   c0001ee8 <ld_dword>
c0003f31:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003f33:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003f36:	31 d2                	xor    edx,edx
c0003f38:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003f3c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f41:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003f45:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003f49:	89 f0                	mov    eax,esi
c0003f4b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003f52:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003f55:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003f5c:	89 f8                	mov    eax,edi
c0003f5e:	e8 b9 df ff ff       	call   c0001f1c <mem_set>
c0003f63:	83 e6 20             	and    esi,0x20
c0003f66:	75 07                	jne    c0003f6f <f_open+0x211>
c0003f68:	31 c0                	xor    eax,eax
c0003f6a:	e9 89 00 00 00       	jmp    c0003ff8 <f_open+0x29a>
c0003f6f:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003f72:	85 ed                	test   ebp,ebp
c0003f74:	74 f2                	je     c0003f68 <f_open+0x20a>
c0003f76:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003f79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f7d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003f80:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003f84:	c1 e6 09             	shl    esi,0x9
c0003f87:	39 ee                	cmp    esi,ebp
c0003f89:	73 1c                	jae    c0003fa7 <f_open+0x249>
c0003f8b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f8d:	29 f5                	sub    ebp,esi
c0003f8f:	e8 84 f3 ff ff       	call   c0003318 <get_fat.isra.2>
c0003f94:	89 c2                	mov    edx,eax
c0003f96:	83 f8 01             	cmp    eax,0x1
c0003f99:	76 10                	jbe    c0003fab <f_open+0x24d>
c0003f9b:	83 f8 ff             	cmp    eax,0xffffffff
c0003f9e:	75 e7                	jne    c0003f87 <f_open+0x229>
c0003fa0:	b8 01 00 00 00       	mov    eax,0x1
c0003fa5:	eb 09                	jmp    c0003fb0 <f_open+0x252>
c0003fa7:	31 c0                	xor    eax,eax
c0003fa9:	eb 05                	jmp    c0003fb0 <f_open+0x252>
c0003fab:	b8 02 00 00 00       	mov    eax,0x2
c0003fb0:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003fb3:	85 c0                	test   eax,eax
c0003fb5:	75 41                	jne    c0003ff8 <f_open+0x29a>
c0003fb7:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003fbd:	74 a9                	je     c0003f68 <f_open+0x20a>
c0003fbf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003fc3:	89 f0                	mov    eax,esi
c0003fc5:	e8 68 e1 ff ff       	call   c0002132 <clst2sect>
c0003fca:	89 c2                	mov    edx,eax
c0003fcc:	b8 02 00 00 00       	mov    eax,0x2
c0003fd1:	85 d2                	test   edx,edx
c0003fd3:	74 23                	je     c0003ff8 <f_open+0x29a>
c0003fd5:	c1 ed 09             	shr    ebp,0x9
c0003fd8:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003fdc:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fdf:	6a 01                	push   0x1
c0003fe1:	50                   	push   eax
c0003fe2:	57                   	push   edi
c0003fe3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003fe7:	50                   	push   eax
c0003fe8:	e8 a3 de ff ff       	call   c0001e90 <disk_read>
c0003fed:	83 c4 10             	add    esp,0x10
c0003ff0:	85 c0                	test   eax,eax
c0003ff2:	0f 95 c0             	setne  al
c0003ff5:	0f b6 c0             	movzx  eax,al
c0003ff8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ffc:	83 ec 0c             	sub    esp,0xc
c0003fff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0004003:	e8 34 1d 00 00       	call   c0005d3c <ff_memfree>
c0004008:	83 c4 10             	add    esp,0x10
c000400b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000400f:	85 c0                	test   eax,eax
c0004011:	74 06                	je     c0004019 <f_open+0x2bb>
c0004013:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004019:	83 c4 5c             	add    esp,0x5c
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	c3                   	ret    

c0004021 <f_read>:
c0004021:	55                   	push   ebp
c0004022:	57                   	push   edi
c0004023:	56                   	push   esi
c0004024:	53                   	push   ebx
c0004025:	83 ec 2c             	sub    esp,0x2c
c0004028:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000402c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004030:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004036:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000403a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000403e:	89 d8                	mov    eax,ebx
c0004040:	e8 54 e3 ff ff       	call   c0002399 <validate>
c0004045:	89 c5                	mov    ebp,eax
c0004047:	85 c0                	test   eax,eax
c0004049:	0f 85 c7 01 00 00    	jne    c0004216 <f_read+0x1f5>
c000404f:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004053:	85 ed                	test   ebp,ebp
c0004055:	0f 85 bb 01 00 00    	jne    c0004216 <f_read+0x1f5>
c000405b:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c000405f:	0f 84 ac 01 00 00    	je     c0004211 <f_read+0x1f0>
c0004065:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004068:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c000406b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000406f:	39 f0                	cmp    eax,esi
c0004071:	0f 86 b0 00 00 00    	jbe    c0004127 <f_read+0x106>
c0004077:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000407b:	e9 a7 00 00 00       	jmp    c0004127 <f_read+0x106>
c0004080:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004083:	a9 ff 01 00 00       	test   eax,0x1ff
c0004088:	0f 85 56 01 00 00    	jne    c00041e4 <f_read+0x1c3>
c000408e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004092:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0004096:	89 c2                	mov    edx,eax
c0004098:	4f                   	dec    edi
c0004099:	c1 ea 09             	shr    edx,0x9
c000409c:	21 d7                	and    edi,edx
c000409e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00040a2:	0f 84 8f 00 00 00    	je     c0004137 <f_read+0x116>
c00040a8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00040ac:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00040af:	89 c8                	mov    eax,ecx
c00040b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00040b5:	e8 78 e0 ff ff       	call   c0002132 <clst2sect>
c00040ba:	85 c0                	test   eax,eax
c00040bc:	0f 84 8d 00 00 00    	je     c000414f <f_read+0x12e>
c00040c2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00040c6:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c00040ce:	8d 3c 01             	lea    edi,[ecx+eax*1]
c00040d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00040d5:	0f 86 bf 00 00 00    	jbe    c000419a <f_read+0x179>
c00040db:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040e3:	c1 ee 09             	shr    esi,0x9
c00040e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040ea:	01 f2                	add    edx,esi
c00040ec:	39 c2                	cmp    edx,eax
c00040ee:	76 06                	jbe    c00040f6 <f_read+0xd5>
c00040f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040f4:	89 c6                	mov    esi,eax
c00040f6:	56                   	push   esi
c00040f7:	57                   	push   edi
c00040f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004100:	50                   	push   eax
c0004101:	e8 8a dd ff ff       	call   c0001e90 <disk_read>
c0004106:	83 c4 10             	add    esp,0x10
c0004109:	85 c0                	test   eax,eax
c000410b:	75 55                	jne    c0004162 <f_read+0x141>
c000410d:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004111:	75 65                	jne    c0004178 <f_read+0x157>
c0004113:	c1 e6 09             	shl    esi,0x9
c0004116:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000411a:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000411e:	01 30                	add    DWORD PTR [eax],esi
c0004120:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004124:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004127:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000412c:	0f 85 4e ff ff ff    	jne    c0004080 <f_read+0x5f>
c0004132:	e9 df 00 00 00       	jmp    c0004216 <f_read+0x1f5>
c0004137:	85 c0                	test   eax,eax
c0004139:	75 05                	jne    c0004140 <f_read+0x11f>
c000413b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000413e:	eb 0a                	jmp    c000414a <f_read+0x129>
c0004140:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004143:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004145:	e8 ce f1 ff ff       	call   c0003318 <get_fat.isra.2>
c000414a:	83 f8 01             	cmp    eax,0x1
c000414d:	77 0e                	ja     c000415d <f_read+0x13c>
c000414f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004153:	bd 02 00 00 00       	mov    ebp,0x2
c0004158:	e9 b9 00 00 00       	jmp    c0004216 <f_read+0x1f5>
c000415d:	83 f8 ff             	cmp    eax,0xffffffff
c0004160:	75 0e                	jne    c0004170 <f_read+0x14f>
c0004162:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004166:	bd 01 00 00 00       	mov    ebp,0x1
c000416b:	e9 a6 00 00 00       	jmp    c0004216 <f_read+0x1f5>
c0004170:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004173:	e9 30 ff ff ff       	jmp    c00040a8 <f_read+0x87>
c0004178:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000417b:	29 f8                	sub    eax,edi
c000417d:	39 f0                	cmp    eax,esi
c000417f:	73 92                	jae    c0004113 <f_read+0xf2>
c0004181:	c1 e0 09             	shl    eax,0x9
c0004184:	8d 53 28             	lea    edx,[ebx+0x28]
c0004187:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000418b:	b9 00 02 00 00       	mov    ecx,0x200
c0004190:	e8 72 dd ff ff       	call   c0001f07 <mem_cpy>
c0004195:	e9 79 ff ff ff       	jmp    c0004113 <f_read+0xf2>
c000419a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000419d:	39 f8                	cmp    eax,edi
c000419f:	74 40                	je     c00041e1 <f_read+0x1c0>
c00041a1:	8d 73 28             	lea    esi,[ebx+0x28]
c00041a4:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a8:	74 1e                	je     c00041c8 <f_read+0x1a7>
c00041aa:	6a 01                	push   0x1
c00041ac:	50                   	push   eax
c00041ad:	56                   	push   esi
c00041ae:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041b2:	50                   	push   eax
c00041b3:	e8 ee dc ff ff       	call   c0001ea6 <disk_write>
c00041b8:	83 c4 10             	add    esp,0x10
c00041bb:	85 c0                	test   eax,eax
c00041bd:	75 a3                	jne    c0004162 <f_read+0x141>
c00041bf:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00041c2:	83 e0 7f             	and    eax,0x7f
c00041c5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00041c8:	6a 01                	push   0x1
c00041ca:	57                   	push   edi
c00041cb:	56                   	push   esi
c00041cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00041d0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00041d4:	50                   	push   eax
c00041d5:	e8 b6 dc ff ff       	call   c0001e90 <disk_read>
c00041da:	83 c4 10             	add    esp,0x10
c00041dd:	85 c0                	test   eax,eax
c00041df:	75 81                	jne    c0004162 <f_read+0x141>
c00041e1:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041e4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041e7:	ba 00 02 00 00       	mov    edx,0x200
c00041ec:	25 ff 01 00 00       	and    eax,0x1ff
c00041f1:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00041f5:	29 c2                	sub    edx,eax
c00041f7:	39 d6                	cmp    esi,edx
c00041f9:	76 02                	jbe    c00041fd <f_read+0x1dc>
c00041fb:	89 d6                	mov    esi,edx
c00041fd:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0004201:	89 f1                	mov    ecx,esi
c0004203:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004207:	e8 fb dc ff ff       	call   c0001f07 <mem_cpy>
c000420c:	e9 05 ff ff ff       	jmp    c0004116 <f_read+0xf5>
c0004211:	bd 07 00 00 00       	mov    ebp,0x7
c0004216:	83 c4 2c             	add    esp,0x2c
c0004219:	89 e8                	mov    eax,ebp
c000421b:	5b                   	pop    ebx
c000421c:	5e                   	pop    esi
c000421d:	5f                   	pop    edi
c000421e:	5d                   	pop    ebp
c000421f:	c3                   	ret    

c0004220 <f_write>:
c0004220:	55                   	push   ebp
c0004221:	57                   	push   edi
c0004222:	56                   	push   esi
c0004223:	53                   	push   ebx
c0004224:	83 ec 2c             	sub    esp,0x2c
c0004227:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000422b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000422f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004235:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004239:	89 d8                	mov    eax,ebx
c000423b:	e8 59 e1 ff ff       	call   c0002399 <validate>
c0004240:	89 c5                	mov    ebp,eax
c0004242:	85 c0                	test   eax,eax
c0004244:	0f 85 14 02 00 00    	jne    c000445e <f_write+0x23e>
c000424a:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000424e:	85 ed                	test   ebp,ebp
c0004250:	0f 85 08 02 00 00    	jne    c000445e <f_write+0x23e>
c0004256:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000425a:	0f 84 f9 01 00 00    	je     c0004459 <f_write+0x239>
c0004260:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004263:	89 c7                	mov    edi,eax
c0004265:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004269:	0f 83 ef 00 00 00    	jae    c000435e <f_write+0x13e>
c000426f:	f7 d0                	not    eax
c0004271:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004275:	e9 e4 00 00 00       	jmp    c000435e <f_write+0x13e>
c000427a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000427d:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0004283:	0f 85 9a 01 00 00    	jne    c0004423 <f_write+0x203>
c0004289:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000428d:	89 d1                	mov    ecx,edx
c000428f:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0004293:	c1 e9 09             	shr    ecx,0x9
c0004296:	48                   	dec    eax
c0004297:	21 c8                	and    eax,ecx
c0004299:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000429d:	0f 84 c8 00 00 00    	je     c000436b <f_write+0x14b>
c00042a3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00042a7:	0f 85 22 01 00 00    	jne    c00043cf <f_write+0x1af>
c00042ad:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00042b1:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042b4:	89 c8                	mov    eax,ecx
c00042b6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00042ba:	e8 73 de ff ff       	call   c0002132 <clst2sect>
c00042bf:	85 c0                	test   eax,eax
c00042c1:	0f 84 d2 00 00 00    	je     c0004399 <f_write+0x179>
c00042c7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00042cb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00042cf:	01 c7                	add    edi,eax
c00042d1:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00042d9:	0f 86 1c 01 00 00    	jbe    c00043fb <f_write+0x1db>
c00042df:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00042e3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00042e7:	c1 ee 09             	shr    esi,0x9
c00042ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00042ee:	01 f2                	add    edx,esi
c00042f0:	39 c2                	cmp    edx,eax
c00042f2:	76 06                	jbe    c00042fa <f_write+0xda>
c00042f4:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00042f8:	89 c6                	mov    esi,eax
c00042fa:	56                   	push   esi
c00042fb:	57                   	push   edi
c00042fc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004300:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 9c db ff ff       	call   c0001ea6 <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	0f 85 97 00 00 00    	jne    c00043ac <f_write+0x18c>
c0004315:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004318:	29 fa                	sub    edx,edi
c000431a:	39 f2                	cmp    edx,esi
c000431c:	73 1d                	jae    c000433b <f_write+0x11b>
c000431e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004321:	c1 e2 09             	shl    edx,0x9
c0004324:	b9 00 02 00 00       	mov    ecx,0x200
c0004329:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000432d:	e8 d5 db ff ff       	call   c0001f07 <mem_cpy>
c0004332:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004335:	83 e0 7f             	and    eax,0x7f
c0004338:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000433b:	c1 e6 09             	shl    esi,0x9
c000433e:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004342:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004346:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000434a:	01 30                	add    DWORD PTR [eax],esi
c000434c:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000434f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004352:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004355:	39 f0                	cmp    eax,esi
c0004357:	73 02                	jae    c000435b <f_write+0x13b>
c0004359:	89 f0                	mov    eax,esi
c000435b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000435e:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004363:	0f 85 11 ff ff ff    	jne    c000427a <f_write+0x5a>
c0004369:	eb 1b                	jmp    c0004386 <f_write+0x166>
c000436b:	85 d2                	test   edx,edx
c000436d:	75 09                	jne    c0004378 <f_write+0x158>
c000436f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004372:	85 c0                	test   eax,eax
c0004374:	75 1e                	jne    c0004394 <f_write+0x174>
c0004376:	eb 03                	jmp    c000437b <f_write+0x15b>
c0004378:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000437b:	89 d8                	mov    eax,ebx
c000437d:	e8 62 f1 ff ff       	call   c00034e4 <create_chain>
c0004382:	85 c0                	test   eax,eax
c0004384:	75 0e                	jne    c0004394 <f_write+0x174>
c0004386:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004389:	83 c8 40             	or     eax,0x40
c000438c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000438f:	e9 ca 00 00 00       	jmp    c000445e <f_write+0x23e>
c0004394:	83 f8 01             	cmp    eax,0x1
c0004397:	75 0e                	jne    c00043a7 <f_write+0x187>
c0004399:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000439d:	bd 02 00 00 00       	mov    ebp,0x2
c00043a2:	e9 b7 00 00 00       	jmp    c000445e <f_write+0x23e>
c00043a7:	83 f8 ff             	cmp    eax,0xffffffff
c00043aa:	75 0e                	jne    c00043ba <f_write+0x19a>
c00043ac:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b0:	bd 01 00 00 00       	mov    ebp,0x1
c00043b5:	e9 a4 00 00 00       	jmp    c000445e <f_write+0x23e>
c00043ba:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043bd:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00043c1:	0f 85 dc fe ff ff    	jne    c00042a3 <f_write+0x83>
c00043c7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043ca:	e9 d4 fe ff ff       	jmp    c00042a3 <f_write+0x83>
c00043cf:	6a 01                	push   0x1
c00043d1:	8d 43 28             	lea    eax,[ebx+0x28]
c00043d4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043d7:	50                   	push   eax
c00043d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00043dc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043e0:	50                   	push   eax
c00043e1:	e8 c0 da ff ff       	call   c0001ea6 <disk_write>
c00043e6:	83 c4 10             	add    esp,0x10
c00043e9:	85 c0                	test   eax,eax
c00043eb:	75 bf                	jne    c00043ac <f_write+0x18c>
c00043ed:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043f0:	83 e0 7f             	and    eax,0x7f
c00043f3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043f6:	e9 b2 fe ff ff       	jmp    c00042ad <f_write+0x8d>
c00043fb:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00043fe:	74 20                	je     c0004420 <f_write+0x200>
c0004400:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004403:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004406:	76 18                	jbe    c0004420 <f_write+0x200>
c0004408:	6a 01                	push   0x1
c000440a:	8d 43 28             	lea    eax,[ebx+0x28]
c000440d:	57                   	push   edi
c000440e:	50                   	push   eax
c000440f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004413:	50                   	push   eax
c0004414:	e8 77 da ff ff       	call   c0001e90 <disk_read>
c0004419:	83 c4 10             	add    esp,0x10
c000441c:	85 c0                	test   eax,eax
c000441e:	75 8c                	jne    c00043ac <f_write+0x18c>
c0004420:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004423:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004426:	ba 00 02 00 00       	mov    edx,0x200
c000442b:	25 ff 01 00 00       	and    eax,0x1ff
c0004430:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004434:	29 c2                	sub    edx,eax
c0004436:	39 d6                	cmp    esi,edx
c0004438:	76 02                	jbe    c000443c <f_write+0x21c>
c000443a:	89 d6                	mov    esi,edx
c000443c:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004440:	89 f1                	mov    ecx,esi
c0004442:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004446:	e8 bc da ff ff       	call   c0001f07 <mem_cpy>
c000444b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000444e:	83 c8 80             	or     eax,0xffffff80
c0004451:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004454:	e9 e5 fe ff ff       	jmp    c000433e <f_write+0x11e>
c0004459:	bd 07 00 00 00       	mov    ebp,0x7
c000445e:	83 c4 2c             	add    esp,0x2c
c0004461:	89 e8                	mov    eax,ebp
c0004463:	5b                   	pop    ebx
c0004464:	5e                   	pop    esi
c0004465:	5f                   	pop    edi
c0004466:	5d                   	pop    ebp
c0004467:	c3                   	ret    

c0004468 <f_sync>:
c0004468:	56                   	push   esi
c0004469:	53                   	push   ebx
c000446a:	83 ec 14             	sub    esp,0x14
c000446d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004471:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004475:	89 d8                	mov    eax,ebx
c0004477:	e8 1d df ff ff       	call   c0002399 <validate>
c000447c:	85 c0                	test   eax,eax
c000447e:	0f 85 a3 00 00 00    	jne    c0004527 <f_sync+0xbf>
c0004484:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004487:	f6 c2 40             	test   dl,0x40
c000448a:	0f 84 97 00 00 00    	je     c0004527 <f_sync+0xbf>
c0004490:	80 e2 80             	and    dl,0x80
c0004493:	74 2e                	je     c00044c3 <f_sync+0x5b>
c0004495:	6a 01                	push   0x1
c0004497:	8d 43 28             	lea    eax,[ebx+0x28]
c000449a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000449d:	50                   	push   eax
c000449e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00044a2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044a6:	50                   	push   eax
c00044a7:	e8 fa d9 ff ff       	call   c0001ea6 <disk_write>
c00044ac:	83 c4 10             	add    esp,0x10
c00044af:	89 c2                	mov    edx,eax
c00044b1:	b8 01 00 00 00       	mov    eax,0x1
c00044b6:	85 d2                	test   edx,edx
c00044b8:	75 6d                	jne    c0004527 <f_sync+0xbf>
c00044ba:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044bd:	83 e0 7f             	and    eax,0x7f
c00044c0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044c3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00044c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00044ca:	e8 73 df ff ff       	call   c0002442 <move_window>
c00044cf:	85 c0                	test   eax,eax
c00044d1:	75 54                	jne    c0004527 <f_sync+0xbf>
c00044d3:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00044d6:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00044d9:	89 f2                	mov    edx,esi
c00044db:	83 c8 20             	or     eax,0x20
c00044de:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00044e1:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00044e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00044e6:	e8 05 ee ff ff       	call   c00032f0 <st_clust.isra.1>
c00044eb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00044ee:	8d 46 1c             	lea    eax,[esi+0x1c]
c00044f1:	e8 0e da ff ff       	call   c0001f04 <st_dword>
c00044f6:	8d 46 16             	lea    eax,[esi+0x16]
c00044f9:	ba 00 00 21 50       	mov    edx,0x50210000
c00044fe:	e8 01 da ff ff       	call   c0001f04 <st_dword>
c0004503:	31 d2                	xor    edx,edx
c0004505:	8d 46 12             	lea    eax,[esi+0x12]
c0004508:	e8 f3 d9 ff ff       	call   c0001f00 <st_word>
c000450d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004511:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004515:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004519:	e8 5b e9 ff ff       	call   c0002e79 <sync_fs>
c000451e:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004521:	83 e2 bf             	and    edx,0xffffffbf
c0004524:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004527:	83 c4 14             	add    esp,0x14
c000452a:	5b                   	pop    ebx
c000452b:	5e                   	pop    esi
c000452c:	c3                   	ret    

c000452d <f_close>:
c000452d:	53                   	push   ebx
c000452e:	83 ec 24             	sub    esp,0x24
c0004531:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004535:	53                   	push   ebx
c0004536:	e8 2d ff ff ff       	call   c0004468 <f_sync>
c000453b:	83 c4 10             	add    esp,0x10
c000453e:	85 c0                	test   eax,eax
c0004540:	75 15                	jne    c0004557 <f_close+0x2a>
c0004542:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004546:	89 d8                	mov    eax,ebx
c0004548:	e8 4c de ff ff       	call   c0002399 <validate>
c000454d:	85 c0                	test   eax,eax
c000454f:	75 06                	jne    c0004557 <f_close+0x2a>
c0004551:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004557:	83 c4 18             	add    esp,0x18
c000455a:	5b                   	pop    ebx
c000455b:	c3                   	ret    

c000455c <f_lseek>:
c000455c:	55                   	push   ebp
c000455d:	57                   	push   edi
c000455e:	56                   	push   esi
c000455f:	53                   	push   ebx
c0004560:	83 ec 2c             	sub    esp,0x2c
c0004563:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004567:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000456b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000456f:	89 d8                	mov    eax,ebx
c0004571:	e8 23 de ff ff       	call   c0002399 <validate>
c0004576:	89 c5                	mov    ebp,eax
c0004578:	85 c0                	test   eax,eax
c000457a:	0f 85 83 01 00 00    	jne    c0004703 <f_lseek+0x1a7>
c0004580:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004584:	85 ed                	test   ebp,ebp
c0004586:	0f 85 77 01 00 00    	jne    c0004703 <f_lseek+0x1a7>
c000458c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000458f:	39 f0                	cmp    eax,esi
c0004591:	73 08                	jae    c000459b <f_lseek+0x3f>
c0004593:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004597:	75 02                	jne    c000459b <f_lseek+0x3f>
c0004599:	89 c6                	mov    esi,eax
c000459b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000459e:	85 f6                	test   esi,esi
c00045a0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00045a7:	75 07                	jne    c00045b0 <f_lseek+0x54>
c00045a9:	31 f6                	xor    esi,esi
c00045ab:	e9 e2 00 00 00       	jmp    c0004692 <f_lseek+0x136>
c00045b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045b4:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00045b8:	c1 e7 09             	shl    edi,0x9
c00045bb:	85 c9                	test   ecx,ecx
c00045bd:	74 28                	je     c00045e7 <f_lseek+0x8b>
c00045bf:	49                   	dec    ecx
c00045c0:	31 d2                	xor    edx,edx
c00045c2:	8d 46 ff             	lea    eax,[esi-0x1]
c00045c5:	f7 f7                	div    edi
c00045c7:	31 d2                	xor    edx,edx
c00045c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00045cd:	89 c8                	mov    eax,ecx
c00045cf:	f7 f7                	div    edi
c00045d1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00045d5:	72 10                	jb     c00045e7 <f_lseek+0x8b>
c00045d7:	89 f8                	mov    eax,edi
c00045d9:	f7 d8                	neg    eax
c00045db:	21 c1                	and    ecx,eax
c00045dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00045e0:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00045e3:	29 ce                	sub    esi,ecx
c00045e5:	eb 3c                	jmp    c0004623 <f_lseek+0xc7>
c00045e7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00045ea:	85 c0                	test   eax,eax
c00045ec:	75 32                	jne    c0004620 <f_lseek+0xc4>
c00045ee:	31 d2                	xor    edx,edx
c00045f0:	89 d8                	mov    eax,ebx
c00045f2:	e8 ed ee ff ff       	call   c00034e4 <create_chain>
c00045f7:	83 f8 01             	cmp    eax,0x1
c00045fa:	75 0e                	jne    c000460a <f_lseek+0xae>
c00045fc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004600:	bd 02 00 00 00       	mov    ebp,0x2
c0004605:	e9 f9 00 00 00       	jmp    c0004703 <f_lseek+0x1a7>
c000460a:	83 f8 ff             	cmp    eax,0xffffffff
c000460d:	75 0e                	jne    c000461d <f_lseek+0xc1>
c000460f:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004613:	bd 01 00 00 00       	mov    ebp,0x1
c0004618:	e9 e6 00 00 00       	jmp    c0004703 <f_lseek+0x1a7>
c000461d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004620:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004623:	85 c0                	test   eax,eax
c0004625:	74 82                	je     c00045a9 <f_lseek+0x4d>
c0004627:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000462a:	39 fe                	cmp    esi,edi
c000462c:	76 3d                	jbe    c000466b <f_lseek+0x10f>
c000462e:	01 fa                	add    edx,edi
c0004630:	29 fe                	sub    esi,edi
c0004632:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004635:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004639:	89 c2                	mov    edx,eax
c000463b:	74 0d                	je     c000464a <f_lseek+0xee>
c000463d:	89 d8                	mov    eax,ebx
c000463f:	e8 a0 ee ff ff       	call   c00034e4 <create_chain>
c0004644:	85 c0                	test   eax,eax
c0004646:	75 09                	jne    c0004651 <f_lseek+0xf5>
c0004648:	eb 1f                	jmp    c0004669 <f_lseek+0x10d>
c000464a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000464c:	e8 c7 ec ff ff       	call   c0003318 <get_fat.isra.2>
c0004651:	83 f8 ff             	cmp    eax,0xffffffff
c0004654:	74 b9                	je     c000460f <f_lseek+0xb3>
c0004656:	83 f8 01             	cmp    eax,0x1
c0004659:	76 a1                	jbe    c00045fc <f_lseek+0xa0>
c000465b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000465f:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004662:	76 98                	jbe    c00045fc <f_lseek+0xa0>
c0004664:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004667:	eb be                	jmp    c0004627 <f_lseek+0xcb>
c0004669:	31 f6                	xor    esi,esi
c000466b:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000466e:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004674:	0f 84 2f ff ff ff    	je     c00045a9 <f_lseek+0x4d>
c000467a:	89 c2                	mov    edx,eax
c000467c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004680:	e8 ad da ff ff       	call   c0002132 <clst2sect>
c0004685:	85 c0                	test   eax,eax
c0004687:	0f 84 6f ff ff ff    	je     c00045fc <f_lseek+0xa0>
c000468d:	c1 ee 09             	shr    esi,0x9
c0004690:	01 c6                	add    esi,eax
c0004692:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004695:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004698:	76 0c                	jbe    c00046a6 <f_lseek+0x14a>
c000469a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000469d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00046a0:	83 ca 40             	or     edx,0x40
c00046a3:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00046a6:	a9 ff 01 00 00       	test   eax,0x1ff
c00046ab:	74 56                	je     c0004703 <f_lseek+0x1a7>
c00046ad:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00046b0:	39 f0                	cmp    eax,esi
c00046b2:	74 4f                	je     c0004703 <f_lseek+0x1a7>
c00046b4:	8d 7b 28             	lea    edi,[ebx+0x28]
c00046b7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00046bb:	74 26                	je     c00046e3 <f_lseek+0x187>
c00046bd:	6a 01                	push   0x1
c00046bf:	50                   	push   eax
c00046c0:	57                   	push   edi
c00046c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00046c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00046c9:	50                   	push   eax
c00046ca:	e8 d7 d7 ff ff       	call   c0001ea6 <disk_write>
c00046cf:	83 c4 10             	add    esp,0x10
c00046d2:	85 c0                	test   eax,eax
c00046d4:	0f 85 35 ff ff ff    	jne    c000460f <f_lseek+0xb3>
c00046da:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00046dd:	83 e0 7f             	and    eax,0x7f
c00046e0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00046e3:	6a 01                	push   0x1
c00046e5:	56                   	push   esi
c00046e6:	57                   	push   edi
c00046e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00046eb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00046ef:	50                   	push   eax
c00046f0:	e8 9b d7 ff ff       	call   c0001e90 <disk_read>
c00046f5:	83 c4 10             	add    esp,0x10
c00046f8:	85 c0                	test   eax,eax
c00046fa:	0f 85 0f ff ff ff    	jne    c000460f <f_lseek+0xb3>
c0004700:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004703:	83 c4 2c             	add    esp,0x2c
c0004706:	89 e8                	mov    eax,ebp
c0004708:	5b                   	pop    ebx
c0004709:	5e                   	pop    esi
c000470a:	5f                   	pop    edi
c000470b:	5d                   	pop    ebp
c000470c:	c3                   	ret    

c000470d <f_opendir>:
c000470d:	56                   	push   esi
c000470e:	b8 09 00 00 00       	mov    eax,0x9
c0004713:	53                   	push   ebx
c0004714:	83 ec 24             	sub    esp,0x24
c0004717:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000471b:	85 db                	test   ebx,ebx
c000471d:	0f 84 af 00 00 00    	je     c00047d2 <f_opendir+0xc5>
c0004723:	31 c9                	xor    ecx,ecx
c0004725:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004729:	8d 44 24 34          	lea    eax,[esp+0x34]
c000472d:	e8 63 de ff ff       	call   c0002595 <mount_volume>
c0004732:	85 c0                	test   eax,eax
c0004734:	0f 85 92 00 00 00    	jne    c00047cc <f_opendir+0xbf>
c000473a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000473e:	83 ec 0c             	sub    esp,0xc
c0004741:	89 03                	mov    DWORD PTR [ebx],eax
c0004743:	68 00 02 00 00       	push   0x200
c0004748:	e8 d7 15 00 00       	call   c0005d24 <ff_memalloc>
c000474d:	83 c4 10             	add    esp,0x10
c0004750:	89 c6                	mov    esi,eax
c0004752:	b8 11 00 00 00       	mov    eax,0x11
c0004757:	85 f6                	test   esi,esi
c0004759:	74 77                	je     c00047d2 <f_opendir+0xc5>
c000475b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000475f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004763:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004766:	89 d8                	mov    eax,ebx
c0004768:	e8 72 f3 ff ff       	call   c0003adf <follow_path>
c000476d:	85 c0                	test   eax,eax
c000476f:	75 37                	jne    c00047a8 <f_opendir+0x9b>
c0004771:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004775:	75 1c                	jne    c0004793 <f_opendir+0x86>
c0004777:	b8 05 00 00 00       	mov    eax,0x5
c000477c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004780:	74 26                	je     c00047a8 <f_opendir+0x9b>
c0004782:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004785:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004789:	8a 00                	mov    al,BYTE PTR [eax]
c000478b:	e8 37 eb ff ff       	call   c00032c7 <ld_clust.isra.0>
c0004790:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004793:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004797:	31 d2                	xor    edx,edx
c0004799:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000479d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00047a1:	89 d8                	mov    eax,ebx
c00047a3:	e8 74 ec ff ff       	call   c000341c <dir_sdi>
c00047a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00047ac:	83 ec 0c             	sub    esp,0xc
c00047af:	56                   	push   esi
c00047b0:	e8 87 15 00 00       	call   c0005d3c <ff_memfree>
c00047b5:	83 c4 10             	add    esp,0x10
c00047b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047bc:	83 f8 04             	cmp    eax,0x4
c00047bf:	74 06                	je     c00047c7 <f_opendir+0xba>
c00047c1:	85 c0                	test   eax,eax
c00047c3:	74 0d                	je     c00047d2 <f_opendir+0xc5>
c00047c5:	eb 05                	jmp    c00047cc <f_opendir+0xbf>
c00047c7:	b8 05 00 00 00       	mov    eax,0x5
c00047cc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00047d2:	83 c4 24             	add    esp,0x24
c00047d5:	5b                   	pop    ebx
c00047d6:	5e                   	pop    esi
c00047d7:	c3                   	ret    

c00047d8 <f_closedir>:
c00047d8:	53                   	push   ebx
c00047d9:	83 ec 18             	sub    esp,0x18
c00047dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047e0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047e4:	89 d8                	mov    eax,ebx
c00047e6:	e8 ae db ff ff       	call   c0002399 <validate>
c00047eb:	85 c0                	test   eax,eax
c00047ed:	75 06                	jne    c00047f5 <f_closedir+0x1d>
c00047ef:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00047f5:	83 c4 18             	add    esp,0x18
c00047f8:	5b                   	pop    ebx
c00047f9:	c3                   	ret    

c00047fa <f_readdir>:
c00047fa:	57                   	push   edi
c00047fb:	56                   	push   esi
c00047fc:	53                   	push   ebx
c00047fd:	83 ec 20             	sub    esp,0x20
c0004800:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004804:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004808:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000480c:	89 d8                	mov    eax,ebx
c000480e:	e8 86 db ff ff       	call   c0002399 <validate>
c0004813:	85 c0                	test   eax,eax
c0004815:	75 6e                	jne    c0004885 <f_readdir+0x8b>
c0004817:	85 ff                	test   edi,edi
c0004819:	75 0b                	jne    c0004826 <f_readdir+0x2c>
c000481b:	31 d2                	xor    edx,edx
c000481d:	89 d8                	mov    eax,ebx
c000481f:	e8 f8 eb ff ff       	call   c000341c <dir_sdi>
c0004824:	eb 5f                	jmp    c0004885 <f_readdir+0x8b>
c0004826:	83 ec 0c             	sub    esp,0xc
c0004829:	68 00 02 00 00       	push   0x200
c000482e:	e8 f1 14 00 00       	call   c0005d24 <ff_memalloc>
c0004833:	83 c4 10             	add    esp,0x10
c0004836:	89 c6                	mov    esi,eax
c0004838:	b8 11 00 00 00       	mov    eax,0x11
c000483d:	85 f6                	test   esi,esi
c000483f:	74 44                	je     c0004885 <f_readdir+0x8b>
c0004841:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004845:	31 d2                	xor    edx,edx
c0004847:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000484a:	89 d8                	mov    eax,ebx
c000484c:	e8 ca ef ff ff       	call   c000381b <dir_read>
c0004851:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004856:	75 19                	jne    c0004871 <f_readdir+0x77>
c0004858:	89 fa                	mov    edx,edi
c000485a:	89 d8                	mov    eax,ebx
c000485c:	e8 70 e8 ff ff       	call   c00030d1 <get_fileinfo>
c0004861:	31 d2                	xor    edx,edx
c0004863:	89 d8                	mov    eax,ebx
c0004865:	e8 47 ee ff ff       	call   c00036b1 <dir_next>
c000486a:	83 f8 04             	cmp    eax,0x4
c000486d:	75 02                	jne    c0004871 <f_readdir+0x77>
c000486f:	31 c0                	xor    eax,eax
c0004871:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004875:	83 ec 0c             	sub    esp,0xc
c0004878:	56                   	push   esi
c0004879:	e8 be 14 00 00       	call   c0005d3c <ff_memfree>
c000487e:	83 c4 10             	add    esp,0x10
c0004881:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004885:	83 c4 20             	add    esp,0x20
c0004888:	5b                   	pop    ebx
c0004889:	5e                   	pop    esi
c000488a:	5f                   	pop    edi
c000488b:	c3                   	ret    

c000488c <f_stat>:
c000488c:	57                   	push   edi
c000488d:	31 c9                	xor    ecx,ecx
c000488f:	56                   	push   esi
c0004890:	53                   	push   ebx
c0004891:	83 ec 30             	sub    esp,0x30
c0004894:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004898:	89 e2                	mov    edx,esp
c000489a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000489e:	e8 f2 dc ff ff       	call   c0002595 <mount_volume>
c00048a3:	89 c3                	mov    ebx,eax
c00048a5:	85 c0                	test   eax,eax
c00048a7:	75 59                	jne    c0004902 <f_stat+0x76>
c00048a9:	83 ec 0c             	sub    esp,0xc
c00048ac:	bb 11 00 00 00       	mov    ebx,0x11
c00048b1:	68 00 02 00 00       	push   0x200
c00048b6:	e8 69 14 00 00       	call   c0005d24 <ff_memalloc>
c00048bb:	83 c4 10             	add    esp,0x10
c00048be:	89 c6                	mov    esi,eax
c00048c0:	85 c0                	test   eax,eax
c00048c2:	74 3e                	je     c0004902 <f_stat+0x76>
c00048c4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048c7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00048cb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00048ce:	89 e0                	mov    eax,esp
c00048d0:	e8 0a f2 ff ff       	call   c0003adf <follow_path>
c00048d5:	89 c3                	mov    ebx,eax
c00048d7:	85 c0                	test   eax,eax
c00048d9:	75 1b                	jne    c00048f6 <f_stat+0x6a>
c00048db:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00048e0:	75 0f                	jne    c00048f1 <f_stat+0x65>
c00048e2:	85 ff                	test   edi,edi
c00048e4:	74 10                	je     c00048f6 <f_stat+0x6a>
c00048e6:	89 fa                	mov    edx,edi
c00048e8:	89 e0                	mov    eax,esp
c00048ea:	e8 e2 e7 ff ff       	call   c00030d1 <get_fileinfo>
c00048ef:	eb 05                	jmp    c00048f6 <f_stat+0x6a>
c00048f1:	bb 06 00 00 00       	mov    ebx,0x6
c00048f6:	83 ec 0c             	sub    esp,0xc
c00048f9:	56                   	push   esi
c00048fa:	e8 3d 14 00 00       	call   c0005d3c <ff_memfree>
c00048ff:	83 c4 10             	add    esp,0x10
c0004902:	83 c4 30             	add    esp,0x30
c0004905:	89 d8                	mov    eax,ebx
c0004907:	5b                   	pop    ebx
c0004908:	5e                   	pop    esi
c0004909:	5f                   	pop    edi
c000490a:	c3                   	ret    

c000490b <f_getfree>:
c000490b:	55                   	push   ebp
c000490c:	31 c9                	xor    ecx,ecx
c000490e:	57                   	push   edi
c000490f:	56                   	push   esi
c0004910:	53                   	push   ebx
c0004911:	83 ec 2c             	sub    esp,0x2c
c0004914:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004918:	8d 44 24 40          	lea    eax,[esp+0x40]
c000491c:	e8 74 dc ff ff       	call   c0002595 <mount_volume>
c0004921:	89 c7                	mov    edi,eax
c0004923:	85 c0                	test   eax,eax
c0004925:	0f 85 df 00 00 00    	jne    c0004a0a <f_getfree+0xff>
c000492b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000492f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004933:	89 30                	mov    DWORD PTR [eax],esi
c0004935:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004938:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c000493b:	8d 55 fe             	lea    edx,[ebp-0x2]
c000493e:	39 d0                	cmp    eax,edx
c0004940:	77 0b                	ja     c000494d <f_getfree+0x42>
c0004942:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004946:	89 01                	mov    DWORD PTR [ecx],eax
c0004948:	e9 bd 00 00 00       	jmp    c0004a0a <f_getfree+0xff>
c000494d:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004950:	75 29                	jne    c000497b <f_getfree+0x70>
c0004952:	bd 02 00 00 00       	mov    ebp,0x2
c0004957:	31 db                	xor    ebx,ebx
c0004959:	89 ea                	mov    edx,ebp
c000495b:	89 f0                	mov    eax,esi
c000495d:	e8 b6 e9 ff ff       	call   c0003318 <get_fat.isra.2>
c0004962:	83 f8 ff             	cmp    eax,0xffffffff
c0004965:	74 7d                	je     c00049e4 <f_getfree+0xd9>
c0004967:	83 f8 01             	cmp    eax,0x1
c000496a:	74 7f                	je     c00049eb <f_getfree+0xe0>
c000496c:	83 d3 00             	adc    ebx,0x0
c000496f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004973:	45                   	inc    ebp
c0004974:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004977:	77 e0                	ja     c0004959 <f_getfree+0x4e>
c0004979:	eb 79                	jmp    c00049f4 <f_getfree+0xe9>
c000497b:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000497e:	31 db                	xor    ebx,ebx
c0004980:	31 f6                	xor    esi,esi
c0004982:	85 f6                	test   esi,esi
c0004984:	75 18                	jne    c000499e <f_getfree+0x93>
c0004986:	8d 42 01             	lea    eax,[edx+0x1]
c0004989:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000498d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004991:	e8 ac da ff ff       	call   c0002442 <move_window>
c0004996:	85 c0                	test   eax,eax
c0004998:	75 58                	jne    c00049f2 <f_getfree+0xe7>
c000499a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000499e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00049a2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00049a6:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00049aa:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00049ad:	75 13                	jne    c00049c2 <f_getfree+0xb7>
c00049af:	e8 27 d5 ff ff       	call   c0001edb <ld_word>
c00049b4:	0f b7 c0             	movzx  eax,ax
c00049b7:	83 f8 01             	cmp    eax,0x1
c00049ba:	83 d3 00             	adc    ebx,0x0
c00049bd:	83 c6 02             	add    esi,0x2
c00049c0:	eb 13                	jmp    c00049d5 <f_getfree+0xca>
c00049c2:	e8 21 d5 ff ff       	call   c0001ee8 <ld_dword>
c00049c7:	25 ff ff ff 0f       	and    eax,0xfffffff
c00049cc:	83 f8 01             	cmp    eax,0x1
c00049cf:	83 d3 00             	adc    ebx,0x0
c00049d2:	83 c6 04             	add    esi,0x4
c00049d5:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00049db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00049df:	4d                   	dec    ebp
c00049e0:	75 a0                	jne    c0004982 <f_getfree+0x77>
c00049e2:	eb 10                	jmp    c00049f4 <f_getfree+0xe9>
c00049e4:	bf 01 00 00 00       	mov    edi,0x1
c00049e9:	eb 09                	jmp    c00049f4 <f_getfree+0xe9>
c00049eb:	bf 02 00 00 00       	mov    edi,0x2
c00049f0:	eb 02                	jmp    c00049f4 <f_getfree+0xe9>
c00049f2:	89 c7                	mov    edi,eax
c00049f4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00049f8:	89 18                	mov    DWORD PTR [eax],ebx
c00049fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049fe:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004a01:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004a04:	83 ca 01             	or     edx,0x1
c0004a07:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004a0a:	83 c4 2c             	add    esp,0x2c
c0004a0d:	89 f8                	mov    eax,edi
c0004a0f:	5b                   	pop    ebx
c0004a10:	5e                   	pop    esi
c0004a11:	5f                   	pop    edi
c0004a12:	5d                   	pop    ebp
c0004a13:	c3                   	ret    

c0004a14 <f_truncate>:
c0004a14:	56                   	push   esi
c0004a15:	53                   	push   ebx
c0004a16:	83 ec 14             	sub    esp,0x14
c0004a19:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004a1d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004a21:	89 d8                	mov    eax,ebx
c0004a23:	e8 71 d9 ff ff       	call   c0002399 <validate>
c0004a28:	89 c6                	mov    esi,eax
c0004a2a:	85 c0                	test   eax,eax
c0004a2c:	0f 85 c4 00 00 00    	jne    c0004af6 <f_truncate+0xe2>
c0004a32:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004a36:	85 f6                	test   esi,esi
c0004a38:	0f 85 b8 00 00 00    	jne    c0004af6 <f_truncate+0xe2>
c0004a3e:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004a42:	0f 84 a9 00 00 00    	je     c0004af1 <f_truncate+0xdd>
c0004a48:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004a4b:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004a4e:	0f 83 a2 00 00 00    	jae    c0004af6 <f_truncate+0xe2>
c0004a54:	85 c0                	test   eax,eax
c0004a56:	75 15                	jne    c0004a6d <f_truncate+0x59>
c0004a58:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004a5b:	31 c9                	xor    ecx,ecx
c0004a5d:	89 d8                	mov    eax,ebx
c0004a5f:	e8 bf eb ff ff       	call   c0003623 <remove_chain>
c0004a64:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004a6b:	eb 35                	jmp    c0004aa2 <f_truncate+0x8e>
c0004a6d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004a70:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004a72:	e8 a1 e8 ff ff       	call   c0003318 <get_fat.isra.2>
c0004a77:	89 c2                	mov    edx,eax
c0004a79:	b8 01 00 00 00       	mov    eax,0x1
c0004a7e:	83 fa ff             	cmp    edx,0xffffffff
c0004a81:	74 1f                	je     c0004aa2 <f_truncate+0x8e>
c0004a83:	b8 02 00 00 00       	mov    eax,0x2
c0004a88:	83 fa 01             	cmp    edx,0x1
c0004a8b:	74 15                	je     c0004aa2 <f_truncate+0x8e>
c0004a8d:	31 c0                	xor    eax,eax
c0004a8f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004a93:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004a96:	76 0a                	jbe    c0004aa2 <f_truncate+0x8e>
c0004a98:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004a9b:	89 d8                	mov    eax,ebx
c0004a9d:	e8 81 eb ff ff       	call   c0003623 <remove_chain>
c0004aa2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004aa5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004aa8:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004aab:	83 ca 40             	or     edx,0x40
c0004aae:	85 c0                	test   eax,eax
c0004ab0:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004ab3:	75 35                	jne    c0004aea <f_truncate+0xd6>
c0004ab5:	80 e2 80             	and    dl,0x80
c0004ab8:	74 3c                	je     c0004af6 <f_truncate+0xe2>
c0004aba:	6a 01                	push   0x1
c0004abc:	8d 43 28             	lea    eax,[ebx+0x28]
c0004abf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004ac2:	50                   	push   eax
c0004ac3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004ac7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004acb:	50                   	push   eax
c0004acc:	e8 d5 d3 ff ff       	call   c0001ea6 <disk_write>
c0004ad1:	83 c4 10             	add    esp,0x10
c0004ad4:	85 c0                	test   eax,eax
c0004ad6:	75 0d                	jne    c0004ae5 <f_truncate+0xd1>
c0004ad8:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004adb:	31 f6                	xor    esi,esi
c0004add:	83 e0 7f             	and    eax,0x7f
c0004ae0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004ae3:	eb 11                	jmp    c0004af6 <f_truncate+0xe2>
c0004ae5:	b8 01 00 00 00       	mov    eax,0x1
c0004aea:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004aed:	89 c6                	mov    esi,eax
c0004aef:	eb 05                	jmp    c0004af6 <f_truncate+0xe2>
c0004af1:	be 07 00 00 00       	mov    esi,0x7
c0004af6:	89 f0                	mov    eax,esi
c0004af8:	83 c4 14             	add    esp,0x14
c0004afb:	5b                   	pop    ebx
c0004afc:	5e                   	pop    esi
c0004afd:	c3                   	ret    

c0004afe <f_unlink>:
c0004afe:	55                   	push   ebp
c0004aff:	b9 02 00 00 00       	mov    ecx,0x2
c0004b04:	57                   	push   edi
c0004b05:	56                   	push   esi
c0004b06:	53                   	push   ebx
c0004b07:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004b0d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b11:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004b18:	e8 78 da ff ff       	call   c0002595 <mount_volume>
c0004b1d:	85 c0                	test   eax,eax
c0004b1f:	0f 85 f0 00 00 00    	jne    c0004c15 <f_unlink+0x117>
c0004b25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b29:	83 ec 0c             	sub    esp,0xc
c0004b2c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b30:	68 00 02 00 00       	push   0x200
c0004b35:	e8 ea 11 00 00       	call   c0005d24 <ff_memalloc>
c0004b3a:	83 c4 10             	add    esp,0x10
c0004b3d:	89 c3                	mov    ebx,eax
c0004b3f:	b8 11 00 00 00       	mov    eax,0x11
c0004b44:	85 db                	test   ebx,ebx
c0004b46:	0f 84 c9 00 00 00    	je     c0004c15 <f_unlink+0x117>
c0004b4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b50:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004b57:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004b5a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b5e:	e8 7c ef ff ff       	call   c0003adf <follow_path>
c0004b63:	85 c0                	test   eax,eax
c0004b65:	0f 85 96 00 00 00    	jne    c0004c01 <f_unlink+0x103>
c0004b6b:	b8 06 00 00 00       	mov    eax,0x6
c0004b70:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004b75:	0f 85 86 00 00 00    	jne    c0004c01 <f_unlink+0x103>
c0004b7b:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004b80:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004b86:	74 07                	je     c0004b8f <f_unlink+0x91>
c0004b88:	b8 07 00 00 00       	mov    eax,0x7
c0004b8d:	eb 72                	jmp    c0004c01 <f_unlink+0x103>
c0004b8f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004b93:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b97:	8a 07                	mov    al,BYTE PTR [edi]
c0004b99:	e8 29 e7 ff ff       	call   c00032c7 <ld_clust.isra.0>
c0004b9e:	83 e5 10             	and    ebp,0x10
c0004ba1:	89 c6                	mov    esi,eax
c0004ba3:	75 0f                	jne    c0004bb4 <f_unlink+0xb6>
c0004ba5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ba9:	e8 95 ed ff ff       	call   c0003943 <dir_remove>
c0004bae:	85 c0                	test   eax,eax
c0004bb0:	74 2f                	je     c0004be1 <f_unlink+0xe3>
c0004bb2:	eb 4d                	jmp    c0004c01 <f_unlink+0x103>
c0004bb4:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004bb8:	31 d2                	xor    edx,edx
c0004bba:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004bbe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004bc2:	e8 55 e8 ff ff       	call   c000341c <dir_sdi>
c0004bc7:	85 c0                	test   eax,eax
c0004bc9:	75 36                	jne    c0004c01 <f_unlink+0x103>
c0004bcb:	31 d2                	xor    edx,edx
c0004bcd:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004bd1:	e8 45 ec ff ff       	call   c000381b <dir_read>
c0004bd6:	85 c0                	test   eax,eax
c0004bd8:	74 ae                	je     c0004b88 <f_unlink+0x8a>
c0004bda:	83 f8 04             	cmp    eax,0x4
c0004bdd:	75 22                	jne    c0004c01 <f_unlink+0x103>
c0004bdf:	eb c4                	jmp    c0004ba5 <f_unlink+0xa7>
c0004be1:	85 f6                	test   esi,esi
c0004be3:	75 0b                	jne    c0004bf0 <f_unlink+0xf2>
c0004be5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004be9:	e8 8b e2 ff ff       	call   c0002e79 <sync_fs>
c0004bee:	eb 11                	jmp    c0004c01 <f_unlink+0x103>
c0004bf0:	31 c9                	xor    ecx,ecx
c0004bf2:	89 f2                	mov    edx,esi
c0004bf4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bf8:	e8 26 ea ff ff       	call   c0003623 <remove_chain>
c0004bfd:	85 c0                	test   eax,eax
c0004bff:	74 e4                	je     c0004be5 <f_unlink+0xe7>
c0004c01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c05:	83 ec 0c             	sub    esp,0xc
c0004c08:	53                   	push   ebx
c0004c09:	e8 2e 11 00 00       	call   c0005d3c <ff_memfree>
c0004c0e:	83 c4 10             	add    esp,0x10
c0004c11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c15:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004c1b:	5b                   	pop    ebx
c0004c1c:	5e                   	pop    esi
c0004c1d:	5f                   	pop    edi
c0004c1e:	5d                   	pop    ebp
c0004c1f:	c3                   	ret    

c0004c20 <f_mkdir>:
c0004c20:	57                   	push   edi
c0004c21:	b9 02 00 00 00       	mov    ecx,0x2
c0004c26:	56                   	push   esi
c0004c27:	53                   	push   ebx
c0004c28:	83 ec 50             	sub    esp,0x50
c0004c2b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c2f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004c33:	e8 5d d9 ff ff       	call   c0002595 <mount_volume>
c0004c38:	89 c3                	mov    ebx,eax
c0004c3a:	85 c0                	test   eax,eax
c0004c3c:	0f 85 70 01 00 00    	jne    c0004db2 <f_mkdir+0x192>
c0004c42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c46:	bb 11 00 00 00       	mov    ebx,0x11
c0004c4b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004c4f:	83 ec 0c             	sub    esp,0xc
c0004c52:	68 00 02 00 00       	push   0x200
c0004c57:	e8 c8 10 00 00       	call   c0005d24 <ff_memalloc>
c0004c5c:	83 c4 10             	add    esp,0x10
c0004c5f:	89 c7                	mov    edi,eax
c0004c61:	85 c0                	test   eax,eax
c0004c63:	0f 84 49 01 00 00    	je     c0004db2 <f_mkdir+0x192>
c0004c69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c6d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004c71:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004c74:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c78:	e8 62 ee ff ff       	call   c0003adf <follow_path>
c0004c7d:	89 c3                	mov    ebx,eax
c0004c7f:	85 c0                	test   eax,eax
c0004c81:	74 3e                	je     c0004cc1 <f_mkdir+0xa1>
c0004c83:	83 f8 04             	cmp    eax,0x4
c0004c86:	75 3e                	jne    c0004cc6 <f_mkdir+0xa6>
c0004c88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c8c:	31 d2                	xor    edx,edx
c0004c8e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004c92:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004c96:	e8 49 e8 ff ff       	call   c00034e4 <create_chain>
c0004c9b:	89 c6                	mov    esi,eax
c0004c9d:	85 c0                	test   eax,eax
c0004c9f:	74 0c                	je     c0004cad <f_mkdir+0x8d>
c0004ca1:	bb 02 00 00 00       	mov    ebx,0x2
c0004ca6:	83 f8 01             	cmp    eax,0x1
c0004ca9:	74 07                	je     c0004cb2 <f_mkdir+0x92>
c0004cab:	eb 2a                	jmp    c0004cd7 <f_mkdir+0xb7>
c0004cad:	bb 07 00 00 00       	mov    ebx,0x7
c0004cb2:	31 c9                	xor    ecx,ecx
c0004cb4:	89 f2                	mov    edx,esi
c0004cb6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004cba:	e8 64 e9 ff ff       	call   c0003623 <remove_chain>
c0004cbf:	eb 05                	jmp    c0004cc6 <f_mkdir+0xa6>
c0004cc1:	bb 08 00 00 00       	mov    ebx,0x8
c0004cc6:	83 ec 0c             	sub    esp,0xc
c0004cc9:	57                   	push   edi
c0004cca:	e8 6d 10 00 00       	call   c0005d3c <ff_memfree>
c0004ccf:	83 c4 10             	add    esp,0x10
c0004cd2:	e9 db 00 00 00       	jmp    c0004db2 <f_mkdir+0x192>
c0004cd7:	bb 01 00 00 00       	mov    ebx,0x1
c0004cdc:	83 f8 ff             	cmp    eax,0xffffffff
c0004cdf:	74 d1                	je     c0004cb2 <f_mkdir+0x92>
c0004ce1:	89 f2                	mov    edx,esi
c0004ce3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ce7:	e8 f1 dc ff ff       	call   c00029dd <dir_clear>
c0004cec:	89 c3                	mov    ebx,eax
c0004cee:	85 c0                	test   eax,eax
c0004cf0:	75 c0                	jne    c0004cb2 <f_mkdir+0x92>
c0004cf2:	b9 0b 00 00 00       	mov    ecx,0xb
c0004cf7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cfb:	ba 20 00 00 00       	mov    edx,0x20
c0004d00:	83 c0 34             	add    eax,0x34
c0004d03:	e8 14 d2 ff ff       	call   c0001f1c <mem_set>
c0004d08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d0c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004d11:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004d15:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004d19:	83 c0 4a             	add    eax,0x4a
c0004d1c:	e8 e3 d1 ff ff       	call   c0001f04 <st_dword>
c0004d21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d25:	89 f1                	mov    ecx,esi
c0004d27:	8d 50 34             	lea    edx,[eax+0x34]
c0004d2a:	e8 c1 e5 ff ff       	call   c00032f0 <st_clust.isra.1>
c0004d2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d33:	b9 20 00 00 00       	mov    ecx,0x20
c0004d38:	8d 50 34             	lea    edx,[eax+0x34]
c0004d3b:	83 c0 54             	add    eax,0x54
c0004d3e:	e8 c4 d1 ff ff       	call   c0001f07 <mem_cpy>
c0004d43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d47:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004d4b:	8d 50 54             	lea    edx,[eax+0x54]
c0004d4e:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004d52:	e8 99 e5 ff ff       	call   c00032f0 <st_clust.isra.1>
c0004d57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d5f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d63:	e8 0c ee ff ff       	call   c0003b74 <dir_register>
c0004d68:	89 c3                	mov    ebx,eax
c0004d6a:	85 c0                	test   eax,eax
c0004d6c:	0f 85 40 ff ff ff    	jne    c0004cb2 <f_mkdir+0x92>
c0004d72:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d76:	ba 00 00 21 50       	mov    edx,0x50210000
c0004d7b:	83 c0 16             	add    eax,0x16
c0004d7e:	e8 81 d1 ff ff       	call   c0001f04 <st_dword>
c0004d83:	89 f1                	mov    ecx,esi
c0004d85:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004d89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d8d:	e8 5e e5 ff ff       	call   c00032f0 <st_clust.isra.1>
c0004d92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d96:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004da2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004da6:	e8 ce e0 ff ff       	call   c0002e79 <sync_fs>
c0004dab:	89 c3                	mov    ebx,eax
c0004dad:	e9 14 ff ff ff       	jmp    c0004cc6 <f_mkdir+0xa6>
c0004db2:	83 c4 50             	add    esp,0x50
c0004db5:	89 d8                	mov    eax,ebx
c0004db7:	5b                   	pop    ebx
c0004db8:	5e                   	pop    esi
c0004db9:	5f                   	pop    edi
c0004dba:	c3                   	ret    

c0004dbb <f_rename>:
c0004dbb:	57                   	push   edi
c0004dbc:	56                   	push   esi
c0004dbd:	53                   	push   ebx
c0004dbe:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004dc4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004dcb:	e8 7c d5 ff ff       	call   c000234c <get_ldnumber>
c0004dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0004dd5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004dd9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004de0:	e8 b0 d7 ff ff       	call   c0002595 <mount_volume>
c0004de5:	85 c0                	test   eax,eax
c0004de7:	0f 85 7c 01 00 00    	jne    c0004f69 <f_rename+0x1ae>
c0004ded:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df1:	83 ec 0c             	sub    esp,0xc
c0004df4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004df8:	68 00 02 00 00       	push   0x200
c0004dfd:	e8 22 0f 00 00       	call   c0005d24 <ff_memalloc>
c0004e02:	83 c4 10             	add    esp,0x10
c0004e05:	89 c6                	mov    esi,eax
c0004e07:	b8 11 00 00 00       	mov    eax,0x11
c0004e0c:	85 f6                	test   esi,esi
c0004e0e:	0f 84 55 01 00 00    	je     c0004f69 <f_rename+0x1ae>
c0004e14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e18:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004e1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004e22:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e26:	e8 b4 ec ff ff       	call   c0003adf <follow_path>
c0004e2b:	85 c0                	test   eax,eax
c0004e2d:	0f 85 22 01 00 00    	jne    c0004f55 <f_rename+0x19a>
c0004e33:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004e37:	b8 06 00 00 00       	mov    eax,0x6
c0004e3c:	80 e2 a0             	and    dl,0xa0
c0004e3f:	0f 85 10 01 00 00    	jne    c0004f55 <f_rename+0x19a>
c0004e45:	b9 20 00 00 00       	mov    ecx,0x20
c0004e4a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004e4e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e52:	e8 b0 d0 ff ff       	call   c0001f07 <mem_cpy>
c0004e57:	b9 30 00 00 00       	mov    ecx,0x30
c0004e5c:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004e60:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e64:	e8 9e d0 ff ff       	call   c0001f07 <mem_cpy>
c0004e69:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004e70:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e74:	e8 66 ec ff ff       	call   c0003adf <follow_path>
c0004e79:	85 c0                	test   eax,eax
c0004e7b:	75 20                	jne    c0004e9d <f_rename+0xe2>
c0004e7d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004e81:	b8 08 00 00 00       	mov    eax,0x8
c0004e86:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004e8a:	0f 85 c5 00 00 00    	jne    c0004f55 <f_rename+0x19a>
c0004e90:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004e94:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004e9b:	eb 03                	jmp    c0004ea0 <f_rename+0xe5>
c0004e9d:	83 f8 04             	cmp    eax,0x4
c0004ea0:	0f 85 af 00 00 00    	jne    c0004f55 <f_rename+0x19a>
c0004ea6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004eaa:	e8 c5 ec ff ff       	call   c0003b74 <dir_register>
c0004eaf:	85 c0                	test   eax,eax
c0004eb1:	0f 85 9e 00 00 00    	jne    c0004f55 <f_rename+0x19a>
c0004eb7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004ebe:	b9 13 00 00 00       	mov    ecx,0x13
c0004ec3:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004ec6:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004eca:	e8 38 d0 ff ff       	call   c0001f07 <mem_cpy>
c0004ecf:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004ed3:	a8 10                	test   al,0x10
c0004ed5:	75 03                	jne    c0004eda <f_rename+0x11f>
c0004ed7:	83 c8 20             	or     eax,0x20
c0004eda:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004edd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ee5:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004ee9:	74 54                	je     c0004f3f <f_rename+0x184>
c0004eeb:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004eef:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004ef3:	74 4a                	je     c0004f3f <f_rename+0x184>
c0004ef5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ef9:	89 da                	mov    edx,ebx
c0004efb:	8a 07                	mov    al,BYTE PTR [edi]
c0004efd:	e8 c5 e3 ff ff       	call   c00032c7 <ld_clust.isra.0>
c0004f02:	89 c2                	mov    edx,eax
c0004f04:	89 f8                	mov    eax,edi
c0004f06:	e8 27 d2 ff ff       	call   c0002132 <clst2sect>
c0004f0b:	89 c2                	mov    edx,eax
c0004f0d:	b8 02 00 00 00       	mov    eax,0x2
c0004f12:	85 d2                	test   edx,edx
c0004f14:	74 3f                	je     c0004f55 <f_rename+0x19a>
c0004f16:	89 f8                	mov    eax,edi
c0004f18:	e8 25 d5 ff ff       	call   c0002442 <move_window>
c0004f1d:	85 c0                	test   eax,eax
c0004f1f:	75 34                	jne    c0004f55 <f_rename+0x19a>
c0004f21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f25:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004f29:	75 14                	jne    c0004f3f <f_rename+0x184>
c0004f2b:	8d 50 54             	lea    edx,[eax+0x54]
c0004f2e:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004f32:	e8 b9 e3 ff ff       	call   c00032f0 <st_clust.isra.1>
c0004f37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f3b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f3f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f43:	e8 fb e9 ff ff       	call   c0003943 <dir_remove>
c0004f48:	85 c0                	test   eax,eax
c0004f4a:	75 09                	jne    c0004f55 <f_rename+0x19a>
c0004f4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f50:	e8 24 df ff ff       	call   c0002e79 <sync_fs>
c0004f55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f59:	83 ec 0c             	sub    esp,0xc
c0004f5c:	56                   	push   esi
c0004f5d:	e8 da 0d 00 00       	call   c0005d3c <ff_memfree>
c0004f62:	83 c4 10             	add    esp,0x10
c0004f65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f69:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004f6f:	5b                   	pop    ebx
c0004f70:	5e                   	pop    esi
c0004f71:	5f                   	pop    edi
c0004f72:	c3                   	ret    

c0004f73 <f_chmod>:
c0004f73:	57                   	push   edi
c0004f74:	b9 02 00 00 00       	mov    ecx,0x2
c0004f79:	56                   	push   esi
c0004f7a:	53                   	push   ebx
c0004f7b:	83 ec 50             	sub    esp,0x50
c0004f7e:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004f82:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004f86:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f8a:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f8e:	e8 02 d6 ff ff       	call   c0002595 <mount_volume>
c0004f93:	85 c0                	test   eax,eax
c0004f95:	0f 85 81 00 00 00    	jne    c000501c <f_chmod+0xa9>
c0004f9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f9f:	83 ec 0c             	sub    esp,0xc
c0004fa2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004fa6:	68 00 02 00 00       	push   0x200
c0004fab:	e8 74 0d 00 00       	call   c0005d24 <ff_memalloc>
c0004fb0:	83 c4 10             	add    esp,0x10
c0004fb3:	89 c6                	mov    esi,eax
c0004fb5:	b8 11 00 00 00       	mov    eax,0x11
c0004fba:	85 f6                	test   esi,esi
c0004fbc:	74 5e                	je     c000501c <f_chmod+0xa9>
c0004fbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fc2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004fc6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004fc9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004fcd:	e8 0d eb ff ff       	call   c0003adf <follow_path>
c0004fd2:	85 c0                	test   eax,eax
c0004fd4:	75 32                	jne    c0005008 <f_chmod+0x95>
c0004fd6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fda:	b8 06 00 00 00       	mov    eax,0x6
c0004fdf:	80 e2 a0             	and    dl,0xa0
c0004fe2:	75 24                	jne    c0005008 <f_chmod+0x95>
c0004fe4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fe8:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004feb:	31 d7                	xor    edi,edx
c0004fed:	21 fb                	and    ebx,edi
c0004fef:	83 e3 27             	and    ebx,0x27
c0004ff2:	31 d3                	xor    ebx,edx
c0004ff4:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ff7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005003:	e8 71 de ff ff       	call   c0002e79 <sync_fs>
c0005008:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000500c:	83 ec 0c             	sub    esp,0xc
c000500f:	56                   	push   esi
c0005010:	e8 27 0d 00 00       	call   c0005d3c <ff_memfree>
c0005015:	83 c4 10             	add    esp,0x10
c0005018:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000501c:	83 c4 50             	add    esp,0x50
c000501f:	5b                   	pop    ebx
c0005020:	5e                   	pop    esi
c0005021:	5f                   	pop    edi
c0005022:	c3                   	ret    

c0005023 <f_utime>:
c0005023:	56                   	push   esi
c0005024:	b9 02 00 00 00       	mov    ecx,0x2
c0005029:	53                   	push   ebx
c000502a:	83 ec 54             	sub    esp,0x54
c000502d:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005031:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005035:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005039:	e8 57 d5 ff ff       	call   c0002595 <mount_volume>
c000503e:	85 c0                	test   eax,eax
c0005040:	0f 85 87 00 00 00    	jne    c00050cd <f_utime+0xaa>
c0005046:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000504a:	83 ec 0c             	sub    esp,0xc
c000504d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005051:	68 00 02 00 00       	push   0x200
c0005056:	e8 c9 0c 00 00       	call   c0005d24 <ff_memalloc>
c000505b:	83 c4 10             	add    esp,0x10
c000505e:	89 c3                	mov    ebx,eax
c0005060:	b8 11 00 00 00       	mov    eax,0x11
c0005065:	85 db                	test   ebx,ebx
c0005067:	74 64                	je     c00050cd <f_utime+0xaa>
c0005069:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000506d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005071:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005074:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005078:	e8 62 ea ff ff       	call   c0003adf <follow_path>
c000507d:	85 c0                	test   eax,eax
c000507f:	75 38                	jne    c00050b9 <f_utime+0x96>
c0005081:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005085:	b8 06 00 00 00       	mov    eax,0x6
c000508a:	80 e2 a0             	and    dl,0xa0
c000508d:	75 2a                	jne    c00050b9 <f_utime+0x96>
c000508f:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005093:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0005097:	c1 e2 10             	shl    edx,0x10
c000509a:	09 c2                	or     edx,eax
c000509c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050a0:	83 c0 16             	add    eax,0x16
c00050a3:	e8 5c ce ff ff       	call   c0001f04 <st_dword>
c00050a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050b4:	e8 c0 dd ff ff       	call   c0002e79 <sync_fs>
c00050b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050bd:	83 ec 0c             	sub    esp,0xc
c00050c0:	53                   	push   ebx
c00050c1:	e8 76 0c 00 00       	call   c0005d3c <ff_memfree>
c00050c6:	83 c4 10             	add    esp,0x10
c00050c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050cd:	83 c4 54             	add    esp,0x54
c00050d0:	5b                   	pop    ebx
c00050d1:	5e                   	pop    esi
c00050d2:	c3                   	ret    

c00050d3 <f_getlabel>:
c00050d3:	55                   	push   ebp
c00050d4:	31 c9                	xor    ecx,ecx
c00050d6:	57                   	push   edi
c00050d7:	56                   	push   esi
c00050d8:	53                   	push   ebx
c00050d9:	83 ec 5c             	sub    esp,0x5c
c00050dc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00050e0:	8d 44 24 70          	lea    eax,[esp+0x70]
c00050e4:	e8 ac d4 ff ff       	call   c0002595 <mount_volume>
c00050e9:	89 c6                	mov    esi,eax
c00050eb:	85 c0                	test   eax,eax
c00050ed:	0f 85 27 01 00 00    	jne    c000521a <f_getlabel+0x147>
c00050f3:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c00050f8:	0f 84 d0 00 00 00    	je     c00051ce <f_getlabel+0xfb>
c00050fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005102:	31 d2                	xor    edx,edx
c0005104:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005108:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005110:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005114:	e8 03 e3 ff ff       	call   c000341c <dir_sdi>
c0005119:	85 c0                	test   eax,eax
c000511b:	0f 85 a1 00 00 00    	jne    c00051c2 <f_getlabel+0xef>
c0005121:	ba 01 00 00 00       	mov    edx,0x1
c0005126:	8d 44 24 20          	lea    eax,[esp+0x20]
c000512a:	e8 ec e6 ff ff       	call   c000381b <dir_read>
c000512f:	85 c0                	test   eax,eax
c0005131:	0f 85 8b 00 00 00    	jne    c00051c2 <f_getlabel+0xef>
c0005137:	31 db                	xor    ebx,ebx
c0005139:	31 c9                	xor    ecx,ecx
c000513b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000513f:	8d 79 01             	lea    edi,[ecx+0x1]
c0005142:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005147:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c000514c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005150:	e8 06 ce ff ff       	call   c0001f5b <dbc_1st>
c0005155:	85 c0                	test   eax,eax
c0005157:	74 16                	je     c000516f <f_getlabel+0x9c>
c0005159:	83 ff 0b             	cmp    edi,0xb
c000515c:	74 11                	je     c000516f <f_getlabel+0x9c>
c000515e:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0005163:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005167:	8d 79 02             	lea    edi,[ecx+0x2]
c000516a:	c1 e0 08             	shl    eax,0x8
c000516d:	09 c2                	or     edx,eax
c000516f:	0f b7 d2             	movzx  edx,dx
c0005172:	50                   	push   eax
c0005173:	50                   	push   eax
c0005174:	68 b5 01 00 00       	push   0x1b5
c0005179:	52                   	push   edx
c000517a:	e8 75 0c 00 00       	call   c0005df4 <ff_oem2uni>
c000517f:	83 c4 10             	add    esp,0x10
c0005182:	0f b7 c0             	movzx  eax,ax
c0005185:	85 c0                	test   eax,eax
c0005187:	74 22                	je     c00051ab <f_getlabel+0xd8>
c0005189:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000518d:	b9 04 00 00 00       	mov    ecx,0x4
c0005192:	01 da                	add    edx,ebx
c0005194:	e8 a0 ce ff ff       	call   c0002039 <put_utf>
c0005199:	0f b6 c0             	movzx  eax,al
c000519c:	85 c0                	test   eax,eax
c000519e:	74 0b                	je     c00051ab <f_getlabel+0xd8>
c00051a0:	01 c3                	add    ebx,eax
c00051a2:	83 ff 0b             	cmp    edi,0xb
c00051a5:	74 06                	je     c00051ad <f_getlabel+0xda>
c00051a7:	89 f9                	mov    ecx,edi
c00051a9:	eb 90                	jmp    c000513b <f_getlabel+0x68>
c00051ab:	31 db                	xor    ebx,ebx
c00051ad:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00051b1:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00051b4:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00051b8:	74 14                	je     c00051ce <f_getlabel+0xfb>
c00051ba:	4b                   	dec    ebx
c00051bb:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00051be:	74 f1                	je     c00051b1 <f_getlabel+0xde>
c00051c0:	eb 0c                	jmp    c00051ce <f_getlabel+0xfb>
c00051c2:	83 f8 04             	cmp    eax,0x4
c00051c5:	75 51                	jne    c0005218 <f_getlabel+0x145>
c00051c7:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00051cb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00051ce:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00051d3:	74 45                	je     c000521a <f_getlabel+0x147>
c00051d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051d9:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00051dc:	e8 61 d2 ff ff       	call   c0002442 <move_window>
c00051e1:	89 c6                	mov    esi,eax
c00051e3:	85 c0                	test   eax,eax
c00051e5:	75 33                	jne    c000521a <f_getlabel+0x147>
c00051e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051eb:	b8 43 00 00 00       	mov    eax,0x43
c00051f0:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00051f3:	83 f9 03             	cmp    ecx,0x3
c00051f6:	74 0f                	je     c0005207 <f_getlabel+0x134>
c00051f8:	31 c0                	xor    eax,eax
c00051fa:	83 f9 04             	cmp    ecx,0x4
c00051fd:	0f 94 c0             	sete   al
c0005200:	48                   	dec    eax
c0005201:	83 e0 c3             	and    eax,0xffffffc3
c0005204:	83 c0 64             	add    eax,0x64
c0005207:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c000520b:	e8 d8 cc ff ff       	call   c0001ee8 <ld_dword>
c0005210:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005214:	89 07                	mov    DWORD PTR [edi],eax
c0005216:	eb 02                	jmp    c000521a <f_getlabel+0x147>
c0005218:	89 c6                	mov    esi,eax
c000521a:	83 c4 5c             	add    esp,0x5c
c000521d:	89 f0                	mov    eax,esi
c000521f:	5b                   	pop    ebx
c0005220:	5e                   	pop    esi
c0005221:	5f                   	pop    edi
c0005222:	5d                   	pop    ebp
c0005223:	c3                   	ret    

c0005224 <f_setlabel>:
c0005224:	57                   	push   edi
c0005225:	b9 02 00 00 00       	mov    ecx,0x2
c000522a:	56                   	push   esi
c000522b:	53                   	push   ebx
c000522c:	83 ec 50             	sub    esp,0x50
c000522f:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005233:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005237:	e8 59 d3 ff ff       	call   c0002595 <mount_volume>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	0f 85 65 01 00 00    	jne    c00053ab <f_setlabel+0x187>
c0005246:	b9 0b 00 00 00       	mov    ecx,0xb
c000524b:	ba 20 00 00 00       	mov    edx,0x20
c0005250:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005254:	31 db                	xor    ebx,ebx
c0005256:	e8 c1 cc ff ff       	call   c0001f1c <mem_set>
c000525b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000525f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005262:	76 5d                	jbe    c00052c1 <f_setlabel+0x9d>
c0005264:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005268:	e8 f4 cc ff ff       	call   c0001f61 <tchar2uni>
c000526d:	3d ff ff 00 00       	cmp    eax,0xffff
c0005272:	76 0a                	jbe    c000527e <f_setlabel+0x5a>
c0005274:	be 06 00 00 00       	mov    esi,0x6
c0005279:	e9 2d 01 00 00       	jmp    c00053ab <f_setlabel+0x187>
c000527e:	83 ec 0c             	sub    esp,0xc
c0005281:	50                   	push   eax
c0005282:	e8 e5 0b 00 00       	call   c0005e6c <ff_wtoupper>
c0005287:	5a                   	pop    edx
c0005288:	59                   	pop    ecx
c0005289:	68 b5 01 00 00       	push   0x1b5
c000528e:	50                   	push   eax
c000528f:	e8 c0 0a 00 00       	call   c0005d54 <ff_uni2oem>
c0005294:	83 c4 10             	add    esp,0x10
c0005297:	0f b7 f0             	movzx  esi,ax
c000529a:	89 f7                	mov    edi,esi
c000529c:	85 f6                	test   esi,esi
c000529e:	74 d4                	je     c0005274 <f_setlabel+0x50>
c00052a0:	89 f2                	mov    edx,esi
c00052a2:	b8 f0 f3 02 c0       	mov    eax,0xc002f3f0
c00052a7:	e8 9e cc ff ff       	call   c0001f4a <chk_chr>
c00052ac:	85 c0                	test   eax,eax
c00052ae:	75 c4                	jne    c0005274 <f_setlabel+0x50>
c00052b0:	81 fe ff 00 00 00    	cmp    esi,0xff
c00052b6:	0f 87 c9 00 00 00    	ja     c0005385 <f_setlabel+0x161>
c00052bc:	e9 e0 00 00 00       	jmp    c00053a1 <f_setlabel+0x17d>
c00052c1:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00052c6:	74 ac                	je     c0005274 <f_setlabel+0x50>
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	74 0e                	je     c00052da <f_setlabel+0xb6>
c00052cc:	8d 43 ff             	lea    eax,[ebx-0x1]
c00052cf:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00052d4:	75 04                	jne    c00052da <f_setlabel+0xb6>
c00052d6:	89 c3                	mov    ebx,eax
c00052d8:	eb ee                	jmp    c00052c8 <f_setlabel+0xa4>
c00052da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00052de:	31 d2                	xor    edx,edx
c00052e0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00052e4:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00052ec:	8d 44 24 20          	lea    eax,[esp+0x20]
c00052f0:	e8 27 e1 ff ff       	call   c000341c <dir_sdi>
c00052f5:	89 c6                	mov    esi,eax
c00052f7:	85 c0                	test   eax,eax
c00052f9:	0f 85 ac 00 00 00    	jne    c00053ab <f_setlabel+0x187>
c00052ff:	ba 01 00 00 00       	mov    edx,0x1
c0005304:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005308:	e8 0e e5 ff ff       	call   c000381b <dir_read>
c000530d:	85 c0                	test   eax,eax
c000530f:	75 18                	jne    c0005329 <f_setlabel+0x105>
c0005311:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005315:	85 db                	test   ebx,ebx
c0005317:	74 0b                	je     c0005324 <f_setlabel+0x100>
c0005319:	b9 0b 00 00 00       	mov    ecx,0xb
c000531e:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005322:	eb 47                	jmp    c000536b <f_setlabel+0x147>
c0005324:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005327:	eb 47                	jmp    c0005370 <f_setlabel+0x14c>
c0005329:	83 f8 04             	cmp    eax,0x4
c000532c:	75 53                	jne    c0005381 <f_setlabel+0x15d>
c000532e:	85 db                	test   ebx,ebx
c0005330:	74 79                	je     c00053ab <f_setlabel+0x187>
c0005332:	ba 01 00 00 00       	mov    edx,0x1
c0005337:	8d 44 24 20          	lea    eax,[esp+0x20]
c000533b:	e8 76 e4 ff ff       	call   c00037b6 <dir_alloc>
c0005340:	89 c6                	mov    esi,eax
c0005342:	85 c0                	test   eax,eax
c0005344:	75 65                	jne    c00053ab <f_setlabel+0x187>
c0005346:	b9 20 00 00 00       	mov    ecx,0x20
c000534b:	31 d2                	xor    edx,edx
c000534d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005351:	e8 c6 cb ff ff       	call   c0001f1c <mem_set>
c0005356:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000535a:	b9 0b 00 00 00       	mov    ecx,0xb
c000535f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005363:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005367:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000536b:	e8 97 cb ff ff       	call   c0001f07 <mem_cpy>
c0005370:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005374:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005378:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000537c:	e8 f8 da ff ff       	call   c0002e79 <sync_fs>
c0005381:	89 c6                	mov    esi,eax
c0005383:	eb 26                	jmp    c00053ab <f_setlabel+0x187>
c0005385:	83 fb 09             	cmp    ebx,0x9
c0005388:	0f 87 e6 fe ff ff    	ja     c0005274 <f_setlabel+0x50>
c000538e:	89 f0                	mov    eax,esi
c0005390:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005394:	43                   	inc    ebx
c0005395:	89 f8                	mov    eax,edi
c0005397:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000539b:	43                   	inc    ebx
c000539c:	e9 ba fe ff ff       	jmp    c000525b <f_setlabel+0x37>
c00053a1:	83 fb 0a             	cmp    ebx,0xa
c00053a4:	76 ef                	jbe    c0005395 <f_setlabel+0x171>
c00053a6:	e9 c9 fe ff ff       	jmp    c0005274 <f_setlabel+0x50>
c00053ab:	83 c4 50             	add    esp,0x50
c00053ae:	89 f0                	mov    eax,esi
c00053b0:	5b                   	pop    ebx
c00053b1:	5e                   	pop    esi
c00053b2:	5f                   	pop    edi
c00053b3:	c3                   	ret    

c00053b4 <f_expand>:
c00053b4:	55                   	push   ebp
c00053b5:	57                   	push   edi
c00053b6:	56                   	push   esi
c00053b7:	53                   	push   ebx
c00053b8:	83 ec 2c             	sub    esp,0x2c
c00053bb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00053bf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00053c7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053cb:	89 d8                	mov    eax,ebx
c00053cd:	e8 c7 cf ff ff       	call   c0002399 <validate>
c00053d2:	89 c6                	mov    esi,eax
c00053d4:	85 c0                	test   eax,eax
c00053d6:	0f 85 3b 01 00 00    	jne    c0005517 <f_expand+0x163>
c00053dc:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00053e0:	85 f6                	test   esi,esi
c00053e2:	0f 85 2f 01 00 00    	jne    c0005517 <f_expand+0x163>
c00053e8:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00053ed:	75 0a                	jne    c00053f9 <f_expand+0x45>
c00053ef:	be 07 00 00 00       	mov    esi,0x7
c00053f4:	e9 1e 01 00 00       	jmp    c0005517 <f_expand+0x163>
c00053f9:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00053fd:	75 f0                	jne    c00053ef <f_expand+0x3b>
c00053ff:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005403:	74 ea                	je     c00053ef <f_expand+0x3b>
c0005405:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005409:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000540d:	c1 e1 09             	shl    ecx,0x9
c0005410:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005413:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005417:	0f 95 c0             	setne  al
c000541a:	31 d2                	xor    edx,edx
c000541c:	0f b6 c0             	movzx  eax,al
c000541f:	89 c7                	mov    edi,eax
c0005421:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005425:	f7 f1                	div    ecx
c0005427:	01 f8                	add    eax,edi
c0005429:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c000542c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005430:	83 ff 01             	cmp    edi,0x1
c0005433:	76 05                	jbe    c000543a <f_expand+0x86>
c0005435:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005438:	77 05                	ja     c000543f <f_expand+0x8b>
c000543a:	bf 02 00 00 00       	mov    edi,0x2
c000543f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005442:	89 fd                	mov    ebp,edi
c0005444:	31 c9                	xor    ecx,ecx
c0005446:	89 ea                	mov    edx,ebp
c0005448:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000544c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000544e:	45                   	inc    ebp
c000544f:	e8 c4 de ff ff       	call   c0003318 <get_fat.isra.2>
c0005454:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005458:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000545c:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000545f:	77 05                	ja     c0005466 <f_expand+0xb2>
c0005461:	bd 02 00 00 00       	mov    ebp,0x2
c0005466:	83 f8 01             	cmp    eax,0x1
c0005469:	74 20                	je     c000548b <f_expand+0xd7>
c000546b:	83 f8 ff             	cmp    eax,0xffffffff
c000546e:	74 25                	je     c0005495 <f_expand+0xe1>
c0005470:	85 c0                	test   eax,eax
c0005472:	75 09                	jne    c000547d <f_expand+0xc9>
c0005474:	41                   	inc    ecx
c0005475:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005479:	75 07                	jne    c0005482 <f_expand+0xce>
c000547b:	eb 1f                	jmp    c000549c <f_expand+0xe8>
c000547d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005480:	31 c9                	xor    ecx,ecx
c0005482:	39 fd                	cmp    ebp,edi
c0005484:	75 c0                	jne    c0005446 <f_expand+0x92>
c0005486:	e9 64 ff ff ff       	jmp    c00053ef <f_expand+0x3b>
c000548b:	be 02 00 00 00       	mov    esi,0x2
c0005490:	e9 82 00 00 00       	jmp    c0005517 <f_expand+0x163>
c0005495:	be 01 00 00 00       	mov    esi,0x1
c000549a:	eb 7b                	jmp    c0005517 <f_expand+0x163>
c000549c:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00054a1:	74 2b                	je     c00054ce <f_expand+0x11a>
c00054a3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00054a6:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00054aa:	85 ed                	test   ebp,ebp
c00054ac:	74 24                	je     c00054d2 <f_expand+0x11e>
c00054ae:	83 c9 ff             	or     ecx,0xffffffff
c00054b1:	83 fd 01             	cmp    ebp,0x1
c00054b4:	74 03                	je     c00054b9 <f_expand+0x105>
c00054b6:	8d 4f 01             	lea    ecx,[edi+0x1]
c00054b9:	89 fa                	mov    edx,edi
c00054bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054bf:	e8 c2 d3 ff ff       	call   c0002886 <put_fat>
c00054c4:	85 c0                	test   eax,eax
c00054c6:	75 4d                	jne    c0005515 <f_expand+0x161>
c00054c8:	89 f8                	mov    eax,edi
c00054ca:	4d                   	dec    ebp
c00054cb:	47                   	inc    edi
c00054cc:	eb dc                	jmp    c00054aa <f_expand+0xf6>
c00054ce:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00054d1:	48                   	dec    eax
c00054d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00054d6:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00054db:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00054de:	74 37                	je     c0005517 <f_expand+0x163>
c00054e0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00054e3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00054e6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00054ea:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00054ed:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00054f0:	83 c8 40             	or     eax,0x40
c00054f3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00054f6:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00054f9:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00054fc:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00054ff:	39 c8                	cmp    eax,ecx
c0005501:	77 14                	ja     c0005517 <f_expand+0x163>
c0005503:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005507:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000550a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c000550d:	83 c8 01             	or     eax,0x1
c0005510:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005513:	eb 02                	jmp    c0005517 <f_expand+0x163>
c0005515:	89 c6                	mov    esi,eax
c0005517:	83 c4 2c             	add    esp,0x2c
c000551a:	89 f0                	mov    eax,esi
c000551c:	5b                   	pop    ebx
c000551d:	5e                   	pop    esi
c000551e:	5f                   	pop    edi
c000551f:	5d                   	pop    ebp
c0005520:	c3                   	ret    

c0005521 <f_mkfs>:
c0005521:	55                   	push   ebp
c0005522:	57                   	push   edi
c0005523:	56                   	push   esi
c0005524:	be 0b 00 00 00       	mov    esi,0xb
c0005529:	53                   	push   ebx
c000552a:	83 ec 5c             	sub    esp,0x5c
c000552d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005531:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005535:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005539:	e8 0e ce ff ff       	call   c000234c <get_ldnumber>
c000553e:	85 c0                	test   eax,eax
c0005540:	0f 88 d1 07 00 00    	js     c0005d17 <f_mkfs+0x7f6>
c0005546:	8b 14 85 80 6c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9380]
c000554d:	85 d2                	test   edx,edx
c000554f:	74 03                	je     c0005554 <f_mkfs+0x33>
c0005551:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005554:	85 db                	test   ebx,ebx
c0005556:	75 05                	jne    c000555d <f_mkfs+0x3c>
c0005558:	bb e0 f3 02 c0       	mov    ebx,0xc002f3e0
c000555d:	83 ec 0c             	sub    esp,0xc
c0005560:	0f b6 c0             	movzx  eax,al
c0005563:	be 03 00 00 00       	mov    esi,0x3
c0005568:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000556c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005570:	e8 18 c9 ff ff       	call   c0001e8d <disk_initialize>
c0005575:	83 c4 10             	add    esp,0x10
c0005578:	a8 01                	test   al,0x1
c000557a:	0f 85 97 07 00 00    	jne    c0005d17 <f_mkfs+0x7f6>
c0005580:	be 0a 00 00 00       	mov    esi,0xa
c0005585:	a8 04                	test   al,0x4
c0005587:	0f 85 8a 07 00 00    	jne    c0005d17 <f_mkfs+0x7f6>
c000558d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005594:	85 c0                	test   eax,eax
c0005596:	75 20                	jne    c00055b8 <f_mkfs+0x97>
c0005598:	51                   	push   ecx
c0005599:	8d 44 24 44          	lea    eax,[esp+0x44]
c000559d:	50                   	push   eax
c000559e:	6a 03                	push   0x3
c00055a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a4:	e8 13 c9 ff ff       	call   c0001ebc <disk_ioctl>
c00055a9:	83 c4 10             	add    esp,0x10
c00055ac:	85 c0                	test   eax,eax
c00055ae:	74 08                	je     c00055b8 <f_mkfs+0x97>
c00055b0:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00055b8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00055bc:	8d 42 ff             	lea    eax,[edx-0x1]
c00055bf:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00055c4:	77 04                	ja     c00055ca <f_mkfs+0xa9>
c00055c6:	85 c2                	test   edx,eax
c00055c8:	74 08                	je     c00055d2 <f_mkfs+0xb1>
c00055ca:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00055d2:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00055d5:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00055d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00055dd:	48                   	dec    eax
c00055de:	3c 01                	cmp    al,0x1
c00055e0:	76 05                	jbe    c00055e7 <f_mkfs+0xc6>
c00055e2:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00055e7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00055ee:	48                   	dec    eax
c00055ef:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00055f4:	77 07                	ja     c00055fd <f_mkfs+0xdc>
c00055f6:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00055fb:	74 08                	je     c0005605 <f_mkfs+0xe4>
c00055fd:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005605:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005608:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000560e:	77 07                	ja     c0005617 <f_mkfs+0xf6>
c0005610:	8d 47 ff             	lea    eax,[edi-0x1]
c0005613:	85 f8                	test   eax,edi
c0005615:	74 02                	je     c0005619 <f_mkfs+0xf8>
c0005617:	31 ff                	xor    edi,edi
c0005619:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005621:	77 0a                	ja     c000562d <f_mkfs+0x10c>
c0005623:	be 11 00 00 00       	mov    esi,0x11
c0005628:	e9 ea 06 00 00       	jmp    c0005d17 <f_mkfs+0x7f6>
c000562d:	8b 33                	mov    esi,DWORD PTR [ebx]
c000562f:	85 ed                	test   ebp,ebp
c0005631:	89 eb                	mov    ebx,ebp
c0005633:	75 1e                	jne    c0005653 <f_mkfs+0x132>
c0005635:	83 ec 0c             	sub    esp,0xc
c0005638:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000563f:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005644:	50                   	push   eax
c0005645:	e8 da 06 00 00       	call   c0005d24 <ff_memalloc>
c000564a:	83 c4 10             	add    esp,0x10
c000564d:	89 c3                	mov    ebx,eax
c000564f:	85 c0                	test   eax,eax
c0005651:	74 d0                	je     c0005623 <f_mkfs+0x102>
c0005653:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000565b:	52                   	push   edx
c000565c:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005660:	50                   	push   eax
c0005661:	6a 01                	push   0x1
c0005663:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005667:	e8 50 c8 ff ff       	call   c0001ebc <disk_ioctl>
c000566c:	83 c4 10             	add    esp,0x10
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 49 06 00 00    	jne    c0005cc0 <f_mkfs+0x79f>
c0005677:	89 f0                	mov    eax,esi
c0005679:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005681:	83 e0 08             	and    eax,0x8
c0005684:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005688:	75 18                	jne    c00056a2 <f_mkfs+0x181>
c000568a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000568e:	83 f8 3f             	cmp    eax,0x3f
c0005691:	76 0f                	jbe    c00056a2 <f_mkfs+0x181>
c0005693:	83 e8 3f             	sub    eax,0x3f
c0005696:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000569e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00056a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00056a6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00056aa:	83 f8 7f             	cmp    eax,0x7f
c00056ad:	0f 86 5b 02 00 00    	jbe    c000590e <f_mkfs+0x3ed>
c00056b3:	b9 80 00 00 00       	mov    ecx,0x80
c00056b8:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00056be:	77 05                	ja     c00056c5 <f_mkfs+0x1a4>
c00056c0:	c1 ef 09             	shr    edi,0x9
c00056c3:	89 f9                	mov    ecx,edi
c00056c5:	89 f0                	mov    eax,esi
c00056c7:	89 f7                	mov    edi,esi
c00056c9:	83 e0 01             	and    eax,0x1
c00056cc:	83 e7 02             	and    edi,0x2
c00056cf:	0f b6 c0             	movzx  eax,al
c00056d2:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00056d6:	74 0a                	je     c00056e2 <f_mkfs+0x1c1>
c00056d8:	85 c0                	test   eax,eax
c00056da:	0f 84 4f 01 00 00    	je     c000582f <f_mkfs+0x30e>
c00056e0:	eb 37                	jmp    c0005719 <f_mkfs+0x1f8>
c00056e2:	be 13 00 00 00       	mov    esi,0x13
c00056e7:	85 c0                	test   eax,eax
c00056e9:	75 2e                	jne    c0005719 <f_mkfs+0x1f8>
c00056eb:	e9 e7 05 00 00       	jmp    c0005cd7 <f_mkfs+0x7b6>
c00056f0:	83 f8 02             	cmp    eax,0x2
c00056f3:	0f 85 0d 02 00 00    	jne    c0005906 <f_mkfs+0x3e5>
c00056f9:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00056ff:	0f 86 e4 01 00 00    	jbe    c00058e9 <f_mkfs+0x3c8>
c0005705:	85 c9                	test   ecx,ecx
c0005707:	0f 85 dc 05 00 00    	jne    c0005ce9 <f_mkfs+0x7c8>
c000570d:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005710:	83 f9 40             	cmp    ecx,0x40
c0005713:	0f 87 e0 05 00 00    	ja     c0005cf9 <f_mkfs+0x7d8>
c0005719:	89 cf                	mov    edi,ecx
c000571b:	85 c9                	test   ecx,ecx
c000571d:	75 1c                	jne    c000573b <f_mkfs+0x21a>
c000571f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005723:	b8 c0 f3 02 c0       	mov    eax,0xc002f3c0
c0005728:	c1 ee 0c             	shr    esi,0xc
c000572b:	bf 01 00 00 00       	mov    edi,0x1
c0005730:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005733:	85 d2                	test   edx,edx
c0005735:	0f 85 63 01 00 00    	jne    c000589e <f_mkfs+0x37d>
c000573b:	31 d2                	xor    edx,edx
c000573d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005741:	f7 f7                	div    edi
c0005743:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005748:	0f 86 62 01 00 00    	jbe    c00058b0 <f_mkfs+0x38f>
c000574e:	83 c0 02             	add    eax,0x2
c0005751:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005756:	01 c0                	add    eax,eax
c0005758:	05 ff 01 00 00       	add    eax,0x1ff
c000575d:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005765:	c1 e8 09             	shr    eax,0x9
c0005768:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000576c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005770:	c1 e0 05             	shl    eax,0x5
c0005773:	c1 e8 09             	shr    eax,0x9
c0005776:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000577a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000577f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005787:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c000578b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000578f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005793:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005798:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000579c:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00057a0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00057a4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00057a8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00057ac:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00057b0:	f7 d8                	neg    eax
c00057b2:	21 c6                	and    esi,eax
c00057b4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00057b9:	29 d6                	sub    esi,edx
c00057bb:	83 f8 03             	cmp    eax,0x3
c00057be:	0f 85 ff 00 00 00    	jne    c00058c3 <f_mkfs+0x3a2>
c00057c4:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00057c8:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00057cc:	89 f8                	mov    eax,edi
c00057ce:	c1 e0 04             	shl    eax,0x4
c00057d1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00057d5:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00057d9:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00057dd:	0f 82 2b 01 00 00    	jb     c000590e <f_mkfs+0x3ed>
c00057e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00057e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00057eb:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00057ef:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00057f4:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00057f8:	29 d0                	sub    eax,edx
c00057fa:	31 d2                	xor    edx,edx
c00057fc:	f7 f7                	div    edi
c00057fe:	89 c6                	mov    esi,eax
c0005800:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005805:	83 f8 03             	cmp    eax,0x3
c0005808:	0f 85 e2 fe ff ff    	jne    c00056f0 <f_mkfs+0x1cf>
c000580e:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005814:	0f 87 03 01 00 00    	ja     c000591d <f_mkfs+0x3fc>
c000581a:	85 c9                	test   ecx,ecx
c000581c:	0f 85 ec 00 00 00    	jne    c000590e <f_mkfs+0x3ed>
c0005822:	83 ff 01             	cmp    edi,0x1
c0005825:	0f 86 e3 00 00 00    	jbe    c000590e <f_mkfs+0x3ed>
c000582b:	d1 ef                	shr    edi,1
c000582d:	89 f9                	mov    ecx,edi
c000582f:	89 ce                	mov    esi,ecx
c0005831:	85 c9                	test   ecx,ecx
c0005833:	75 25                	jne    c000585a <f_mkfs+0x339>
c0005835:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005839:	b8 d0 f3 02 c0       	mov    eax,0xc002f3d0
c000583e:	c1 ee 11             	shr    esi,0x11
c0005841:	b9 01 00 00 00       	mov    ecx,0x1
c0005846:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005849:	85 d2                	test   edx,edx
c000584b:	74 0b                	je     c0005858 <f_mkfs+0x337>
c000584d:	83 c0 02             	add    eax,0x2
c0005850:	39 f2                	cmp    edx,esi
c0005852:	77 04                	ja     c0005858 <f_mkfs+0x337>
c0005854:	01 c9                	add    ecx,ecx
c0005856:	eb ee                	jmp    c0005846 <f_mkfs+0x325>
c0005858:	31 f6                	xor    esi,esi
c000585a:	31 d2                	xor    edx,edx
c000585c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005860:	f7 f1                	div    ecx
c0005862:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005869:	2d f6 ff 00 00       	sub    eax,0xfff6
c000586e:	c1 ea 09             	shr    edx,0x9
c0005871:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005876:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000587a:	0f 87 8e 00 00 00    	ja     c000590e <f_mkfs+0x3ed>
c0005880:	89 cf                	mov    edi,ecx
c0005882:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000588a:	89 f1                	mov    ecx,esi
c000588c:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005894:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005899:	e9 dc fe ff ff       	jmp    c000577a <f_mkfs+0x259>
c000589e:	83 c0 02             	add    eax,0x2
c00058a1:	39 f2                	cmp    edx,esi
c00058a3:	0f 87 92 fe ff ff    	ja     c000573b <f_mkfs+0x21a>
c00058a9:	01 ff                	add    edi,edi
c00058ab:	e9 80 fe ff ff       	jmp    c0005730 <f_mkfs+0x20f>
c00058b0:	8d 04 40             	lea    eax,[eax+eax*2]
c00058b3:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00058b8:	40                   	inc    eax
c00058b9:	d1 e8                	shr    eax,1
c00058bb:	83 c0 03             	add    eax,0x3
c00058be:	e9 95 fe ff ff       	jmp    c0005758 <f_mkfs+0x237>
c00058c3:	31 d2                	xor    edx,edx
c00058c5:	89 f0                	mov    eax,esi
c00058c7:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00058cb:	85 d2                	test   edx,edx
c00058cd:	74 09                	je     c00058d8 <f_mkfs+0x3b7>
c00058cf:	4e                   	dec    esi
c00058d0:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00058d4:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00058d8:	89 f0                	mov    eax,esi
c00058da:	31 d2                	xor    edx,edx
c00058dc:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00058e0:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00058e4:	e9 e3 fe ff ff       	jmp    c00057cc <f_mkfs+0x2ab>
c00058e9:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00058ef:	77 2c                	ja     c000591d <f_mkfs+0x3fc>
c00058f1:	85 c9                	test   ecx,ecx
c00058f3:	75 19                	jne    c000590e <f_mkfs+0x3ed>
c00058f5:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00058f8:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00058fe:	0f 86 15 fe ff ff    	jbe    c0005719 <f_mkfs+0x1f8>
c0005904:	eb 08                	jmp    c000590e <f_mkfs+0x3ed>
c0005906:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000590c:	76 0a                	jbe    c0005918 <f_mkfs+0x3f7>
c000590e:	be 0e 00 00 00       	mov    esi,0xe
c0005913:	e9 bf 03 00 00       	jmp    c0005cd7 <f_mkfs+0x7b6>
c0005918:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000591d:	31 d2                	xor    edx,edx
c000591f:	b9 00 02 00 00       	mov    ecx,0x200
c0005924:	89 d8                	mov    eax,ebx
c0005926:	e8 f1 c5 ff ff       	call   c0001f1c <mem_set>
c000592b:	b9 0b 00 00 00       	mov    ecx,0xb
c0005930:	ba 72 f3 02 c0       	mov    edx,0xc002f372
c0005935:	89 d8                	mov    eax,ebx
c0005937:	e8 cb c5 ff ff       	call   c0001f07 <mem_cpy>
c000593c:	8d 43 0b             	lea    eax,[ebx+0xb]
c000593f:	ba 00 02 00 00       	mov    edx,0x200
c0005944:	e8 b7 c5 ff ff       	call   c0001f00 <st_word>
c0005949:	89 f8                	mov    eax,edi
c000594b:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005950:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005953:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005956:	e8 a5 c5 ff ff       	call   c0001f00 <st_word>
c000595b:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000595f:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005962:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005967:	83 f8 03             	cmp    eax,0x3
c000596a:	75 08                	jne    c0005974 <f_mkfs+0x453>
c000596c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005974:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005978:	8d 43 11             	lea    eax,[ebx+0x11]
c000597b:	e8 80 c5 ff ff       	call   c0001f00 <st_word>
c0005980:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005984:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000598a:	77 0a                	ja     c0005996 <f_mkfs+0x475>
c000598c:	8d 43 13             	lea    eax,[ebx+0x13]
c000598f:	e8 6c c5 ff ff       	call   c0001f00 <st_word>
c0005994:	eb 08                	jmp    c000599e <f_mkfs+0x47d>
c0005996:	8d 43 20             	lea    eax,[ebx+0x20]
c0005999:	e8 66 c5 ff ff       	call   c0001f04 <st_dword>
c000599e:	8d 43 18             	lea    eax,[ebx+0x18]
c00059a1:	ba 3f 00 00 00       	mov    edx,0x3f
c00059a6:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00059aa:	e8 51 c5 ff ff       	call   c0001f00 <st_word>
c00059af:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00059b2:	ba ff 00 00 00       	mov    edx,0xff
c00059b7:	e8 44 c5 ff ff       	call   c0001f00 <st_word>
c00059bc:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00059bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00059c3:	e8 3c c5 ff ff       	call   c0001f04 <st_dword>
c00059c8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059cd:	83 f8 03             	cmp    eax,0x3
c00059d0:	75 57                	jne    c0005a29 <f_mkfs+0x508>
c00059d2:	8d 43 43             	lea    eax,[ebx+0x43]
c00059d5:	ba 00 00 21 50       	mov    edx,0x50210000
c00059da:	e8 25 c5 ff ff       	call   c0001f04 <st_dword>
c00059df:	8d 43 24             	lea    eax,[ebx+0x24]
c00059e2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00059e6:	e8 19 c5 ff ff       	call   c0001f04 <st_dword>
c00059eb:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00059ee:	ba 02 00 00 00       	mov    edx,0x2
c00059f3:	e8 0c c5 ff ff       	call   c0001f04 <st_dword>
c00059f8:	8d 43 30             	lea    eax,[ebx+0x30]
c00059fb:	ba 01 00 00 00       	mov    edx,0x1
c0005a00:	e8 fb c4 ff ff       	call   c0001f00 <st_word>
c0005a05:	8d 43 32             	lea    eax,[ebx+0x32]
c0005a08:	ba 06 00 00 00       	mov    edx,0x6
c0005a0d:	e8 ee c4 ff ff       	call   c0001f00 <st_word>
c0005a12:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005a16:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005a1a:	8d 43 47             	lea    eax,[ebx+0x47]
c0005a1d:	b9 13 00 00 00       	mov    ecx,0x13
c0005a22:	ba 7e f3 02 c0       	mov    edx,0xc002f37e
c0005a27:	eb 2f                	jmp    c0005a58 <f_mkfs+0x537>
c0005a29:	8d 43 27             	lea    eax,[ebx+0x27]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	e8 ce c4 ff ff       	call   c0001f04 <st_dword>
c0005a36:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005a3b:	8d 43 16             	lea    eax,[ebx+0x16]
c0005a3e:	e8 bd c4 ff ff       	call   c0001f00 <st_word>
c0005a43:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005a47:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005a4b:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005a4e:	b9 13 00 00 00       	mov    ecx,0x13
c0005a53:	ba 92 f3 02 c0       	mov    edx,0xc002f392
c0005a58:	e8 aa c4 ff ff       	call   c0001f07 <mem_cpy>
c0005a5d:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a63:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a68:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005a6c:	e8 8f c4 ff ff       	call   c0001f00 <st_word>
c0005a71:	6a 01                	push   0x1
c0005a73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005a77:	53                   	push   ebx
c0005a78:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a7c:	e8 25 c4 ff ff       	call   c0001ea6 <disk_write>
c0005a81:	83 c4 10             	add    esp,0x10
c0005a84:	85 c0                	test   eax,eax
c0005a86:	0f 85 34 02 00 00    	jne    c0005cc0 <f_mkfs+0x79f>
c0005a8c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a91:	83 f8 03             	cmp    eax,0x3
c0005a94:	0f 85 98 00 00 00    	jne    c0005b32 <f_mkfs+0x611>
c0005a9a:	6a 01                	push   0x1
c0005a9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005aa0:	83 c0 06             	add    eax,0x6
c0005aa3:	50                   	push   eax
c0005aa4:	53                   	push   ebx
c0005aa5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005aa9:	e8 f8 c3 ff ff       	call   c0001ea6 <disk_write>
c0005aae:	b9 00 02 00 00       	mov    ecx,0x200
c0005ab3:	31 d2                	xor    edx,edx
c0005ab5:	89 d8                	mov    eax,ebx
c0005ab7:	e8 60 c4 ff ff       	call   c0001f1c <mem_set>
c0005abc:	ba 52 52 61 41       	mov    edx,0x41615252
c0005ac1:	89 d8                	mov    eax,ebx
c0005ac3:	e8 3c c4 ff ff       	call   c0001f04 <st_dword>
c0005ac8:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005ace:	ba 72 72 41 61       	mov    edx,0x61417272
c0005ad3:	e8 2c c4 ff ff       	call   c0001f04 <st_dword>
c0005ad8:	8d 56 ff             	lea    edx,[esi-0x1]
c0005adb:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005ae1:	e8 1e c4 ff ff       	call   c0001f04 <st_dword>
c0005ae6:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005aec:	ba 02 00 00 00       	mov    edx,0x2
c0005af1:	e8 0e c4 ff ff       	call   c0001f04 <st_dword>
c0005af6:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005afb:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b01:	e8 fa c3 ff ff       	call   c0001f00 <st_word>
c0005b06:	6a 01                	push   0x1
c0005b08:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005b0c:	83 c0 07             	add    eax,0x7
c0005b0f:	50                   	push   eax
c0005b10:	53                   	push   ebx
c0005b11:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005b15:	e8 8c c3 ff ff       	call   c0001ea6 <disk_write>
c0005b1a:	83 c4 20             	add    esp,0x20
c0005b1d:	6a 01                	push   0x1
c0005b1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b23:	40                   	inc    eax
c0005b24:	50                   	push   eax
c0005b25:	53                   	push   ebx
c0005b26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b2a:	e8 77 c3 ff ff       	call   c0001ea6 <disk_write>
c0005b2f:	83 c4 10             	add    esp,0x10
c0005b32:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005b36:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005b3a:	c1 e8 09             	shr    eax,0x9
c0005b3d:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005b43:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b47:	31 d2                	xor    edx,edx
c0005b49:	89 d8                	mov    eax,ebx
c0005b4b:	e8 cc c3 ff ff       	call   c0001f1c <mem_set>
c0005b50:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b55:	31 c9                	xor    ecx,ecx
c0005b57:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005b5f:	83 f8 01             	cmp    eax,0x1
c0005b62:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005b66:	0f 94 c1             	sete   cl
c0005b69:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005b6d:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005b71:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005b79:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005b81:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005b86:	75 21                	jne    c0005ba9 <f_mkfs+0x688>
c0005b88:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005b8d:	89 d8                	mov    eax,ebx
c0005b8f:	e8 70 c3 ff ff       	call   c0001f04 <st_dword>
c0005b94:	8d 43 04             	lea    eax,[ebx+0x4]
c0005b97:	83 ca ff             	or     edx,0xffffffff
c0005b9a:	e8 65 c3 ff ff       	call   c0001f04 <st_dword>
c0005b9f:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ba2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005ba7:	eb 06                	jmp    c0005baf <f_mkfs+0x68e>
c0005ba9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005bad:	89 d8                	mov    eax,ebx
c0005baf:	e8 50 c3 ff ff       	call   c0001f04 <st_dword>
c0005bb4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005bb8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005bbc:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005bc0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc4:	39 ce                	cmp    esi,ecx
c0005bc6:	76 02                	jbe    c0005bca <f_mkfs+0x6a9>
c0005bc8:	89 ce                	mov    esi,ecx
c0005bca:	56                   	push   esi
c0005bcb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005bcf:	53                   	push   ebx
c0005bd0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bd4:	e8 cd c2 ff ff       	call   c0001ea6 <disk_write>
c0005bd9:	83 c4 10             	add    esp,0x10
c0005bdc:	85 c0                	test   eax,eax
c0005bde:	0f 85 dc 00 00 00    	jne    c0005cc0 <f_mkfs+0x79f>
c0005be4:	31 d2                	xor    edx,edx
c0005be6:	b9 00 02 00 00       	mov    ecx,0x200
c0005beb:	89 d8                	mov    eax,ebx
c0005bed:	e8 2a c3 ff ff       	call   c0001f1c <mem_set>
c0005bf2:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005bf6:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005bfa:	75 c0                	jne    c0005bbc <f_mkfs+0x69b>
c0005bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005c00:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005c08:	40                   	inc    eax
c0005c09:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005c0d:	0f 87 6e ff ff ff    	ja     c0005b81 <f_mkfs+0x660>
c0005c13:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c18:	83 f8 03             	cmp    eax,0x3
c0005c1b:	74 04                	je     c0005c21 <f_mkfs+0x700>
c0005c1d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005c21:	89 fe                	mov    esi,edi
c0005c23:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005c27:	76 04                	jbe    c0005c2d <f_mkfs+0x70c>
c0005c29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c2d:	56                   	push   esi
c0005c2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005c32:	53                   	push   ebx
c0005c33:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c37:	e8 6a c2 ff ff       	call   c0001ea6 <disk_write>
c0005c3c:	83 c4 10             	add    esp,0x10
c0005c3f:	85 c0                	test   eax,eax
c0005c41:	75 7d                	jne    c0005cc0 <f_mkfs+0x79f>
c0005c43:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005c47:	29 f7                	sub    edi,esi
c0005c49:	75 d6                	jne    c0005c21 <f_mkfs+0x700>
c0005c4b:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c50:	b9 0c 00 00 00       	mov    ecx,0xc
c0005c55:	83 f8 03             	cmp    eax,0x3
c0005c58:	74 1e                	je     c0005c78 <f_mkfs+0x757>
c0005c5a:	b9 06 00 00 00       	mov    ecx,0x6
c0005c5f:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005c67:	77 0f                	ja     c0005c78 <f_mkfs+0x757>
c0005c69:	b9 04 00 00 00       	mov    ecx,0x4
c0005c6e:	83 f8 02             	cmp    eax,0x2
c0005c71:	74 05                	je     c0005c78 <f_mkfs+0x757>
c0005c73:	b9 01 00 00 00       	mov    ecx,0x1
c0005c78:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005c7d:	75 2a                	jne    c0005ca9 <f_mkfs+0x788>
c0005c7f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005c83:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005c8b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005c8f:	83 ec 0c             	sub    esp,0xc
c0005c92:	53                   	push   ebx
c0005c93:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c9b:	e8 89 d2 ff ff       	call   c0002f29 <create_partition>
c0005ca0:	83 c4 10             	add    esp,0x10
c0005ca3:	89 c6                	mov    esi,eax
c0005ca5:	85 c0                	test   eax,eax
c0005ca7:	75 2e                	jne    c0005cd7 <f_mkfs+0x7b6>
c0005ca9:	31 f6                	xor    esi,esi
c0005cab:	50                   	push   eax
c0005cac:	6a 00                	push   0x0
c0005cae:	6a 00                	push   0x0
c0005cb0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cb4:	e8 03 c2 ff ff       	call   c0001ebc <disk_ioctl>
c0005cb9:	83 c4 10             	add    esp,0x10
c0005cbc:	85 c0                	test   eax,eax
c0005cbe:	74 17                	je     c0005cd7 <f_mkfs+0x7b6>
c0005cc0:	85 ed                	test   ebp,ebp
c0005cc2:	75 0c                	jne    c0005cd0 <f_mkfs+0x7af>
c0005cc4:	83 ec 0c             	sub    esp,0xc
c0005cc7:	53                   	push   ebx
c0005cc8:	e8 6f 00 00 00       	call   c0005d3c <ff_memfree>
c0005ccd:	83 c4 10             	add    esp,0x10
c0005cd0:	be 01 00 00 00       	mov    esi,0x1
c0005cd5:	eb 40                	jmp    c0005d17 <f_mkfs+0x7f6>
c0005cd7:	85 ed                	test   ebp,ebp
c0005cd9:	75 3c                	jne    c0005d17 <f_mkfs+0x7f6>
c0005cdb:	83 ec 0c             	sub    esp,0xc
c0005cde:	53                   	push   ebx
c0005cdf:	e8 58 00 00 00       	call   c0005d3c <ff_memfree>
c0005ce4:	83 c4 10             	add    esp,0x10
c0005ce7:	eb 2e                	jmp    c0005d17 <f_mkfs+0x7f6>
c0005ce9:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005cee:	0f 85 3b fb ff ff    	jne    c000582f <f_mkfs+0x30e>
c0005cf4:	e9 15 fc ff ff       	jmp    c000590e <f_mkfs+0x3ed>
c0005cf9:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005cfe:	0f 85 31 fb ff ff    	jne    c0005835 <f_mkfs+0x314>
c0005d04:	89 cf                	mov    edi,ecx
c0005d06:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005d0c:	0f 86 29 fa ff ff    	jbe    c000573b <f_mkfs+0x21a>
c0005d12:	e9 f7 fb ff ff       	jmp    c000590e <f_mkfs+0x3ed>
c0005d17:	83 c4 5c             	add    esp,0x5c
c0005d1a:	89 f0                	mov    eax,esi
c0005d1c:	5b                   	pop    ebx
c0005d1d:	5e                   	pop    esi
c0005d1e:	5f                   	pop    edi
c0005d1f:	5d                   	pop    ebp
c0005d20:	c3                   	ret    
c0005d21:	66 90                	xchg   ax,ax
c0005d23:	90                   	nop

c0005d24 <ff_memalloc>:
c0005d24:	83 ec 0c             	sub    esp,0xc
c0005d27:	83 ec 0c             	sub    esp,0xc
c0005d2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005d2e:	e8 d3 05 01 00       	call   c0016306 <malloc>
c0005d33:	83 c4 10             	add    esp,0x10
c0005d36:	83 c4 0c             	add    esp,0xc
c0005d39:	c3                   	ret    
c0005d3a:	66 90                	xchg   ax,ax

c0005d3c <ff_memfree>:
c0005d3c:	83 ec 0c             	sub    esp,0xc
c0005d3f:	83 ec 0c             	sub    esp,0xc
c0005d42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005d46:	e8 cb 05 01 00       	call   c0016316 <free>
c0005d4b:	83 c4 10             	add    esp,0x10
c0005d4e:	90                   	nop
c0005d4f:	83 c4 0c             	add    esp,0xc
c0005d52:	c3                   	ret    
c0005d53:	90                   	nop

c0005d54 <ff_uni2oem>:
c0005d54:	83 ec 14             	sub    esp,0x14
c0005d57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d5b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d5f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005d66:	c7 44 24 0c c0 f7 02 c0 	mov    DWORD PTR [esp+0xc],0xc002f7c0
c0005d6e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005d73:	77 0b                	ja     c0005d80 <ff_uni2oem+0x2c>
c0005d75:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005d79:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d7e:	eb 68                	jmp    c0005de8 <ff_uni2oem+0x94>
c0005d80:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005d88:	77 5e                	ja     c0005de8 <ff_uni2oem+0x94>
c0005d8a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d8e:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d93:	75 53                	jne    c0005de8 <ff_uni2oem+0x94>
c0005d95:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005d9c:	eb 12                	jmp    c0005db0 <ff_uni2oem+0x5c>
c0005d9e:	66 90                	xchg   ax,ax
c0005da0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005da5:	83 c0 01             	add    eax,0x1
c0005da8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005dad:	8d 76 00             	lea    esi,[esi+0x0]
c0005db0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005db5:	83 f8 7f             	cmp    eax,0x7f
c0005db8:	77 1e                	ja     c0005dd8 <ff_uni2oem+0x84>
c0005dba:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005dbf:	01 c0                	add    eax,eax
c0005dc1:	89 c2                	mov    edx,eax
c0005dc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dc7:	01 d0                	add    eax,edx
c0005dc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005dcc:	0f b7 c0             	movzx  eax,ax
c0005dcf:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005dd3:	75 cb                	jne    c0005da0 <ff_uni2oem+0x4c>
c0005dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ddd:	83 e8 80             	sub    eax,0xffffff80
c0005de0:	0f b6 c0             	movzx  eax,al
c0005de3:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005de8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ded:	83 c4 14             	add    esp,0x14
c0005df0:	c3                   	ret    
c0005df1:	8d 76 00             	lea    esi,[esi+0x0]

c0005df4 <ff_oem2uni>:
c0005df4:	83 ec 18             	sub    esp,0x18
c0005df7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005dfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005dff:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005e04:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e08:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005e0f:	c7 44 24 10 c0 f7 02 c0 	mov    DWORD PTR [esp+0x10],0xc002f7c0
c0005e17:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e1c:	83 f8 7f             	cmp    eax,0x7f
c0005e1f:	77 0b                	ja     c0005e2c <ff_oem2uni+0x38>
c0005e21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005e25:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005e2a:	eb 34                	jmp    c0005e60 <ff_oem2uni+0x6c>
c0005e2c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e30:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e35:	75 29                	jne    c0005e60 <ff_oem2uni+0x6c>
c0005e37:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e3c:	3d ff 00 00 00       	cmp    eax,0xff
c0005e41:	77 1d                	ja     c0005e60 <ff_oem2uni+0x6c>
c0005e43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e48:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005e4d:	01 c0                	add    eax,eax
c0005e4f:	89 c2                	mov    edx,eax
c0005e51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005e55:	01 d0                	add    eax,edx
c0005e57:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e5a:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005e5f:	90                   	nop
c0005e60:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005e65:	83 c4 18             	add    esp,0x18
c0005e68:	c3                   	ret    
c0005e69:	8d 76 00             	lea    esi,[esi+0x0]

c0005e6c <ff_wtoupper>:
c0005e6c:	83 ec 10             	sub    esp,0x10
c0005e6f:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005e77:	0f 87 ab 01 00 00    	ja     c0006028 <ff_wtoupper+0x1bc>
c0005e7d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005e81:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e86:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e8b:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005e90:	77 0a                	ja     c0005e9c <ff_wtoupper+0x30>
c0005e92:	b8 c0 f5 02 c0       	mov    eax,0xc002f5c0
c0005e97:	eb 0b                	jmp    c0005ea4 <ff_wtoupper+0x38>
c0005e99:	8d 76 00             	lea    esi,[esi+0x0]
c0005e9c:	b8 00 f5 02 c0       	mov    eax,0xc002f500
c0005ea1:	8d 76 00             	lea    esi,[esi+0x0]
c0005ea4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005ea8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eac:	8d 50 02             	lea    edx,[eax+0x2]
c0005eaf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005eb3:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005eb6:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005ebb:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005ec0:	85 c0                	test   eax,eax
c0005ec2:	0f 84 54 01 00 00    	je     c000601c <ff_wtoupper+0x1b0>
c0005ec8:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005ecd:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005ed2:	39 c2                	cmp    edx,eax
c0005ed4:	0f 82 42 01 00 00    	jb     c000601c <ff_wtoupper+0x1b0>
c0005eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ede:	8d 50 02             	lea    edx,[eax+0x2]
c0005ee1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ee5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ee8:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005eed:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005ef2:	c1 e8 08             	shr    eax,0x8
c0005ef5:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005efa:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005eff:	0f b6 c0             	movzx  eax,al
c0005f02:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005f07:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f0c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005f11:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005f16:	01 ca                	add    edx,ecx
c0005f18:	39 d0                	cmp    eax,edx
c0005f1a:	0f 8d d8 00 00 00    	jge    c0005ff8 <ff_wtoupper+0x18c>
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	83 f8 08             	cmp    eax,0x8
c0005f28:	0f 87 ea 00 00 00    	ja     c0006018 <ff_wtoupper+0x1ac>
c0005f2e:	8b 04 85 c0 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b40]
c0005f35:	ff e0                	jmp    eax
c0005f37:	90                   	nop
c0005f38:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005f3d:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005f42:	29 c2                	sub    edx,eax
c0005f44:	89 d0                	mov    eax,edx
c0005f46:	01 c0                	add    eax,eax
c0005f48:	89 c2                	mov    edx,eax
c0005f4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f4e:	01 d0                	add    eax,edx
c0005f50:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f53:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f58:	e9 97 00 00 00       	jmp    c0005ff4 <ff_wtoupper+0x188>
c0005f5d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f60:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005f65:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005f69:	89 d1                	mov    ecx,edx
c0005f6b:	29 c1                	sub    ecx,eax
c0005f6d:	89 c8                	mov    eax,ecx
c0005f6f:	83 e0 01             	and    eax,0x1
c0005f72:	89 c2                	mov    edx,eax
c0005f74:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f79:	29 d0                	sub    eax,edx
c0005f7b:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f80:	eb 72                	jmp    c0005ff4 <ff_wtoupper+0x188>
c0005f82:	66 90                	xchg   ax,ax
c0005f84:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f89:	83 e8 10             	sub    eax,0x10
c0005f8c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f91:	eb 61                	jmp    c0005ff4 <ff_wtoupper+0x188>
c0005f93:	90                   	nop
c0005f94:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f99:	83 e8 20             	sub    eax,0x20
c0005f9c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005fa1:	eb 51                	jmp    c0005ff4 <ff_wtoupper+0x188>
c0005fa3:	90                   	nop
c0005fa4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005fa9:	83 e8 30             	sub    eax,0x30
c0005fac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005fb1:	eb 41                	jmp    c0005ff4 <ff_wtoupper+0x188>
c0005fb3:	90                   	nop
c0005fb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005fb9:	83 e8 1a             	sub    eax,0x1a
c0005fbc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005fc1:	eb 31                	jmp    c0005ff4 <ff_wtoupper+0x188>
c0005fc3:	90                   	nop
c0005fc4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005fc9:	83 c0 08             	add    eax,0x8
c0005fcc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005fd1:	eb 21                	jmp    c0005ff4 <ff_wtoupper+0x188>
c0005fd3:	90                   	nop
c0005fd4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005fd9:	83 e8 50             	sub    eax,0x50
c0005fdc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005fe1:	eb 11                	jmp    c0005ff4 <ff_wtoupper+0x188>
c0005fe3:	90                   	nop
c0005fe4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005fe9:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005fee:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ff3:	90                   	nop
c0005ff4:	eb 22                	jmp    c0006018 <ff_wtoupper+0x1ac>
c0005ff6:	66 90                	xchg   ax,ax
c0005ff8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ffd:	85 c0                	test   eax,eax
c0005fff:	0f 85 a3 fe ff ff    	jne    c0005ea8 <ff_wtoupper+0x3c>
c0006005:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000600a:	01 c0                	add    eax,eax
c000600c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006010:	e9 93 fe ff ff       	jmp    c0005ea8 <ff_wtoupper+0x3c>
c0006015:	8d 76 00             	lea    esi,[esi+0x0]
c0006018:	90                   	nop
c0006019:	8d 76 00             	lea    esi,[esi+0x0]
c000601c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006021:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006025:	8d 76 00             	lea    esi,[esi+0x0]
c0006028:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000602c:	83 c4 10             	add    esp,0x10
c000602f:	c3                   	ret    

c0006030 <utf2ucs>:
c0006030:	57                   	push   edi
c0006031:	31 c9                	xor    ecx,ecx
c0006033:	56                   	push   esi
c0006034:	89 d7                	mov    edi,edx
c0006036:	53                   	push   ebx
c0006037:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c000603b:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c000603f:	89 de                	mov    esi,ebx
c0006041:	c1 fe 08             	sar    esi,0x8
c0006044:	89 f2                	mov    edx,esi
c0006046:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0006049:	41                   	inc    ecx
c000604a:	85 db                	test   ebx,ebx
c000604c:	75 e9                	jne    c0006037 <utf2ucs+0x7>
c000604e:	5b                   	pop    ebx
c000604f:	5e                   	pop    esi
c0006050:	5f                   	pop    edi
c0006051:	c3                   	ret    

c0006052 <ucs2utfn>:
c0006052:	83 e1 fe             	and    ecx,0xfffffffe
c0006055:	01 d1                	add    ecx,edx
c0006057:	39 d1                	cmp    ecx,edx
c0006059:	75 04                	jne    c000605f <ucs2utfn+0xd>
c000605b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000605e:	c3                   	ret    
c000605f:	57                   	push   edi
c0006060:	56                   	push   esi
c0006061:	53                   	push   ebx
c0006062:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006065:	83 c2 02             	add    edx,0x2
c0006068:	89 de                	mov    esi,ebx
c000606a:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c000606e:	c1 e6 08             	shl    esi,0x8
c0006071:	09 f3                	or     ebx,esi
c0006073:	83 fb 3b             	cmp    ebx,0x3b
c0006076:	74 50                	je     c00060c8 <ucs2utfn+0x76>
c0006078:	83 fb 7f             	cmp    ebx,0x7f
c000607b:	7f 05                	jg     c0006082 <ucs2utfn+0x30>
c000607d:	88 18                	mov    BYTE PTR [eax],bl
c000607f:	40                   	inc    eax
c0006080:	eb 42                	jmp    c00060c4 <ucs2utfn+0x72>
c0006082:	89 de                	mov    esi,ebx
c0006084:	89 df                	mov    edi,ebx
c0006086:	c1 fe 06             	sar    esi,0x6
c0006089:	83 e7 3f             	and    edi,0x3f
c000608c:	83 cf 80             	or     edi,0xffffff80
c000608f:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006095:	7f 12                	jg     c00060a9 <ucs2utfn+0x57>
c0006097:	83 ce c0             	or     esi,0xffffffc0
c000609a:	83 c0 02             	add    eax,0x2
c000609d:	89 f3                	mov    ebx,esi
c000609f:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00060a2:	89 fb                	mov    ebx,edi
c00060a4:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00060a7:	eb 1b                	jmp    c00060c4 <ucs2utfn+0x72>
c00060a9:	c1 fb 0c             	sar    ebx,0xc
c00060ac:	83 e6 3f             	and    esi,0x3f
c00060af:	83 cb e0             	or     ebx,0xffffffe0
c00060b2:	83 ce 80             	or     esi,0xffffff80
c00060b5:	88 18                	mov    BYTE PTR [eax],bl
c00060b7:	89 f3                	mov    ebx,esi
c00060b9:	83 c0 03             	add    eax,0x3
c00060bc:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00060bf:	89 fb                	mov    ebx,edi
c00060c1:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00060c4:	39 d1                	cmp    ecx,edx
c00060c6:	75 9a                	jne    c0006062 <ucs2utfn+0x10>
c00060c8:	5b                   	pop    ebx
c00060c9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00060cc:	5e                   	pop    esi
c00060cd:	5f                   	pop    edi
c00060ce:	c3                   	ret    

c00060cf <isjoliet>:
c00060cf:	31 d2                	xor    edx,edx
c00060d1:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00060d4:	75 26                	jne    c00060fc <isjoliet+0x2d>
c00060d6:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00060da:	75 20                	jne    c00060fc <isjoliet+0x2d>
c00060dc:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00060e0:	ba 02 00 00 00       	mov    edx,0x2
c00060e5:	83 f8 43             	cmp    eax,0x43
c00060e8:	74 12                	je     c00060fc <isjoliet+0x2d>
c00060ea:	ba 03 00 00 00       	mov    edx,0x3
c00060ef:	83 f8 45             	cmp    eax,0x45
c00060f2:	74 08                	je     c00060fc <isjoliet+0x2d>
c00060f4:	31 d2                	xor    edx,edx
c00060f6:	83 f8 40             	cmp    eax,0x40
c00060f9:	0f 94 c2             	sete   dl
c00060fc:	89 d0                	mov    eax,edx
c00060fe:	c3                   	ret    

c00060ff <htohl_32>:
c00060ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0006101:	c3                   	ret    

c0006102 <iso_733>:
c0006102:	eb fb                	jmp    c00060ff <htohl_32>

c0006104 <bgrad_cache>:
c0006104:	83 fa 0e             	cmp    edx,0xe
c0006107:	77 16                	ja     c000611f <bgrad_cache+0x1b>
c0006109:	53                   	push   ebx
c000610a:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c000610d:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006111:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006114:	42                   	inc    edx
c0006115:	83 fa 0f             	cmp    edx,0xf
c0006118:	75 f3                	jne    c000610d <bgrad_cache+0x9>
c000611a:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c000611d:	5b                   	pop    ebx
c000611e:	c3                   	ret    
c000611f:	c3                   	ret    

c0006120 <ucscompare>:
c0006120:	55                   	push   ebp
c0006121:	57                   	push   edi
c0006122:	89 c7                	mov    edi,eax
c0006124:	56                   	push   esi
c0006125:	89 d6                	mov    esi,edx
c0006127:	53                   	push   ebx
c0006128:	31 d2                	xor    edx,edx
c000612a:	83 ec 1c             	sub    esp,0x1c
c000612d:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006131:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006136:	c1 e3 08             	shl    ebx,0x8
c0006139:	09 c3                	or     ebx,eax
c000613b:	39 ca                	cmp    edx,ecx
c000613d:	7d 42                	jge    c0006181 <ucscompare+0x61>
c000613f:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006143:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006148:	c1 e0 08             	shl    eax,0x8
c000614b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000614f:	09 e8                	or     eax,ebp
c0006151:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006155:	83 f8 3b             	cmp    eax,0x3b
c0006158:	74 27                	je     c0006181 <ucscompare+0x61>
c000615a:	83 ec 0c             	sub    esp,0xc
c000615d:	50                   	push   eax
c000615e:	e8 ed a7 ff ff       	call   c0000950 <tolower>
c0006163:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006166:	89 c5                	mov    ebp,eax
c0006168:	e8 e3 a7 ff ff       	call   c0000950 <tolower>
c000616d:	83 c4 10             	add    esp,0x10
c0006170:	39 c5                	cmp    ebp,eax
c0006172:	75 20                	jne    c0006194 <ucscompare+0x74>
c0006174:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006178:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000617c:	83 c2 02             	add    edx,0x2
c000617f:	eb ac                	jmp    c000612d <ucscompare+0xd>
c0006181:	85 db                	test   ebx,ebx
c0006183:	0f 95 c2             	setne  dl
c0006186:	31 c0                	xor    eax,eax
c0006188:	83 fb 2f             	cmp    ebx,0x2f
c000618b:	0f 95 c0             	setne  al
c000618e:	21 d0                	and    eax,edx
c0006190:	f7 d8                	neg    eax
c0006192:	eb 03                	jmp    c0006197 <ucscompare+0x77>
c0006194:	83 c8 ff             	or     eax,0xffffffff
c0006197:	83 c4 1c             	add    esp,0x1c
c000619a:	5b                   	pop    ebx
c000619b:	5e                   	pop    esi
c000619c:	5f                   	pop    edi
c000619d:	5d                   	pop    ebp
c000619e:	c3                   	ret    

c000619f <fncompare>:
c000619f:	55                   	push   ebp
c00061a0:	57                   	push   edi
c00061a1:	89 c7                	mov    edi,eax
c00061a3:	56                   	push   esi
c00061a4:	89 ce                	mov    esi,ecx
c00061a6:	53                   	push   ebx
c00061a7:	31 db                	xor    ebx,ebx
c00061a9:	83 ec 1c             	sub    esp,0x1c
c00061ac:	39 d3                	cmp    ebx,edx
c00061ae:	7d 45                	jge    c00061f5 <fncompare+0x56>
c00061b0:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00061b4:	83 f8 3b             	cmp    eax,0x3b
c00061b7:	74 3c                	je     c00061f5 <fncompare+0x56>
c00061b9:	83 f8 2e             	cmp    eax,0x2e
c00061bc:	75 0e                	jne    c00061cc <fncompare+0x2d>
c00061be:	8d 4a ff             	lea    ecx,[edx-0x1]
c00061c1:	39 d9                	cmp    ecx,ebx
c00061c3:	74 30                	je     c00061f5 <fncompare+0x56>
c00061c5:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00061ca:	74 29                	je     c00061f5 <fncompare+0x56>
c00061cc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	50                   	push   eax
c00061d4:	e8 77 a7 ff ff       	call   c0000950 <tolower>
c00061d9:	89 c5                	mov    ebp,eax
c00061db:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00061df:	89 04 24             	mov    DWORD PTR [esp],eax
c00061e2:	e8 69 a7 ff ff       	call   c0000950 <tolower>
c00061e7:	83 c4 10             	add    esp,0x10
c00061ea:	39 c5                	cmp    ebp,eax
c00061ec:	75 1e                	jne    c000620c <fncompare+0x6d>
c00061ee:	43                   	inc    ebx
c00061ef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00061f3:	eb b7                	jmp    c00061ac <fncompare+0xd>
c00061f5:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00061f9:	85 d2                	test   edx,edx
c00061fb:	0f 95 c1             	setne  cl
c00061fe:	31 c0                	xor    eax,eax
c0006200:	83 fa 2f             	cmp    edx,0x2f
c0006203:	0f 95 c0             	setne  al
c0006206:	21 c8                	and    eax,ecx
c0006208:	f7 d8                	neg    eax
c000620a:	eb 03                	jmp    c000620f <fncompare+0x70>
c000620c:	83 c8 ff             	or     eax,0xffffffff
c000620f:	83 c4 1c             	add    esp,0x1c
c0006212:	5b                   	pop    ebx
c0006213:	5e                   	pop    esi
c0006214:	5f                   	pop    edi
c0006215:	5d                   	pop    ebp
c0006216:	c3                   	ret    

c0006217 <bclear_cache>:
c0006217:	83 ec 18             	sub    esp,0x18
c000621a:	68 c0 f8 02 c0       	push   0xc002f8c0
c000621f:	e8 f8 2f 02 00       	call   c002921c <iso_kprintf>
c0006224:	83 c4 10             	add    esp,0x10
c0006227:	31 c0                	xor    eax,eax
c0006229:	8b 14 85 20 60 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9fe0]
c0006230:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006236:	8b 14 85 80 60 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9f80]
c000623d:	40                   	inc    eax
c000623e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006244:	83 f8 10             	cmp    eax,0x10
c0006247:	75 e0                	jne    c0006229 <bclear_cache+0x12>
c0006249:	83 c4 0c             	add    esp,0xc
c000624c:	c3                   	ret    

c000624d <bclear>:
c000624d:	eb c8                	jmp    c0006217 <bclear_cache>

c000624f <iso_break_all>:
c000624f:	83 ec 18             	sub    esp,0x18
c0006252:	68 ce f8 02 c0       	push   0xc002f8ce
c0006257:	e8 c0 2f 02 00       	call   c002921c <iso_kprintf>
c000625c:	83 c4 10             	add    esp,0x10
c000625f:	31 c0                	xor    eax,eax
c0006261:	c7 80 b0 6d 03 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffc9250],0x1
c000626b:	05 94 00 00 00       	add    eax,0x94
c0006270:	3d 40 09 00 00       	cmp    eax,0x940
c0006275:	75 ea                	jne    c0006261 <iso_break_all+0x12>
c0006277:	83 c4 0c             	add    esp,0xc
c000627a:	c3                   	ret    

c000627b <isoReadDiscSector>:
c000627b:	83 ec 0c             	sub    esp,0xc
c000627e:	0f be 05 60 60 03 c0 	movsx  eax,BYTE PTR ds:0xc0036060
c0006285:	50                   	push   eax
c0006286:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000628a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000628e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006292:	e8 29 2f 02 00       	call   c00291c0 <isoReadDiscSectorHelper>
c0006297:	83 c4 1c             	add    esp,0x1c
c000629a:	c3                   	ret    

c000629b <bread_cache>:
c000629b:	55                   	push   ebp
c000629c:	57                   	push   edi
c000629d:	89 d7                	mov    edi,edx
c000629f:	56                   	push   esi
c00062a0:	ba 0f 00 00 00       	mov    edx,0xf
c00062a5:	53                   	push   ebx
c00062a6:	89 c6                	mov    esi,eax
c00062a8:	83 ec 0c             	sub    esp,0xc
c00062ab:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00062ae:	39 38                	cmp    DWORD PTR [eax],edi
c00062b0:	74 3c                	je     c00062ee <bread_cache+0x53>
c00062b2:	4a                   	dec    edx
c00062b3:	83 fa ff             	cmp    edx,0xffffffff
c00062b6:	75 f3                	jne    c00062ab <bread_cache+0x10>
c00062b8:	31 db                	xor    ebx,ebx
c00062ba:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00062bd:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00062c0:	74 08                	je     c00062ca <bread_cache+0x2f>
c00062c2:	43                   	inc    ebx
c00062c3:	83 fb 10             	cmp    ebx,0x10
c00062c6:	75 f2                	jne    c00062ba <bread_cache+0x1f>
c00062c8:	31 db                	xor    ebx,ebx
c00062ca:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00062cd:	50                   	push   eax
c00062ce:	6a 01                	push   0x1
c00062d0:	57                   	push   edi
c00062d1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00062d4:	83 c0 04             	add    eax,0x4
c00062d7:	50                   	push   eax
c00062d8:	e8 9e ff ff ff       	call   c000627b <isoReadDiscSector>
c00062dd:	83 c4 10             	add    esp,0x10
c00062e0:	83 c9 ff             	or     ecx,0xffffffff
c00062e3:	85 c0                	test   eax,eax
c00062e5:	78 13                	js     c00062fa <bread_cache+0x5f>
c00062e7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00062ea:	89 da                	mov    edx,ebx
c00062ec:	89 38                	mov    DWORD PTR [eax],edi
c00062ee:	89 f0                	mov    eax,esi
c00062f0:	e8 0f fe ff ff       	call   c0006104 <bgrad_cache>
c00062f5:	b9 0f 00 00 00       	mov    ecx,0xf
c00062fa:	83 c4 0c             	add    esp,0xc
c00062fd:	89 c8                	mov    eax,ecx
c00062ff:	5b                   	pop    ebx
c0006300:	5e                   	pop    esi
c0006301:	5f                   	pop    edi
c0006302:	5d                   	pop    ebp
c0006303:	c3                   	ret    

c0006304 <biread>:
c0006304:	89 c2                	mov    edx,eax
c0006306:	b8 80 60 03 c0       	mov    eax,0xc0036080
c000630b:	eb 8e                	jmp    c000629b <bread_cache>

c000630d <bdread>:
c000630d:	89 c2                	mov    edx,eax
c000630f:	b8 20 60 03 c0       	mov    eax,0xc0036020
c0006314:	eb 85                	jmp    c000629b <bread_cache>

c0006316 <strnicmp>:
c0006316:	55                   	push   ebp
c0006317:	57                   	push   edi
c0006318:	31 ff                	xor    edi,edi
c000631a:	56                   	push   esi
c000631b:	53                   	push   ebx
c000631c:	83 ec 0c             	sub    esp,0xc
c000631f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006323:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006327:	74 43                	je     c000636c <strnicmp+0x56>
c0006329:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000632d:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006331:	85 c0                	test   eax,eax
c0006333:	74 37                	je     c000636c <strnicmp+0x56>
c0006335:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006339:	85 d2                	test   edx,edx
c000633b:	74 2f                	je     c000636c <strnicmp+0x56>
c000633d:	39 d0                	cmp    eax,edx
c000633f:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006342:	75 04                	jne    c0006348 <strnicmp+0x32>
c0006344:	89 ef                	mov    edi,ebp
c0006346:	eb db                	jmp    c0006323 <strnicmp+0xd>
c0006348:	83 ec 0c             	sub    esp,0xc
c000634b:	50                   	push   eax
c000634c:	e8 ff a5 ff ff       	call   c0000950 <tolower>
c0006351:	89 c3                	mov    ebx,eax
c0006353:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006357:	89 ef                	mov    edi,ebp
c0006359:	89 04 24             	mov    DWORD PTR [esp],eax
c000635c:	e8 ef a5 ff ff       	call   c0000950 <tolower>
c0006361:	83 c4 10             	add    esp,0x10
c0006364:	29 c3                	sub    ebx,eax
c0006366:	89 d8                	mov    eax,ebx
c0006368:	74 b9                	je     c0006323 <strnicmp+0xd>
c000636a:	eb 02                	jmp    c000636e <strnicmp+0x58>
c000636c:	31 c0                	xor    eax,eax
c000636e:	83 c4 0c             	add    esp,0xc
c0006371:	5b                   	pop    ebx
c0006372:	5e                   	pop    esi
c0006373:	5f                   	pop    edi
c0006374:	5d                   	pop    ebp
c0006375:	c3                   	ret    

c0006376 <find_object>:
c0006376:	55                   	push   ebp
c0006377:	57                   	push   edi
c0006378:	89 c7                	mov    edi,eax
c000637a:	56                   	push   esi
c000637b:	53                   	push   ebx
c000637c:	89 d3                	mov    ebx,edx
c000637e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006384:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000638b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000638f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006393:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c000639a:	74 0b                	je     c00063a7 <find_object+0x31>
c000639c:	89 fa                	mov    edx,edi
c000639e:	8d 44 24 20          	lea    eax,[esp+0x20]
c00063a2:	e8 89 fc ff ff       	call   c0006030 <utf2ucs>
c00063a7:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00063aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00063ae:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00063b3:	7e 11                	jle    c00063c6 <find_object+0x50>
c00063b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00063b9:	e8 46 ff ff ff       	call   c0006304 <biread>
c00063be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00063c2:	85 c0                	test   eax,eax
c00063c4:	79 07                	jns    c00063cd <find_object+0x57>
c00063c6:	31 db                	xor    ebx,ebx
c00063c8:	e9 56 01 00 00       	jmp    c0006523 <find_object+0x1ad>
c00063cd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00063d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00063d9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00063dd:	8b 04 85 80 60 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9f80]
c00063e4:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00063e8:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00063eb:	85 f6                	test   esi,esi
c00063ed:	75 0e                	jne    c00063fd <find_object+0x87>
c00063ef:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00063f3:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00063fb:	eb b1                	jmp    c00063ae <find_object+0x38>
c00063fd:	8b 2d 94 76 03 c0    	mov    ebp,DWORD PTR ds:0xc0037694
c0006403:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006407:	85 ed                	test   ebp,ebp
c0006409:	89 c8                	mov    eax,ecx
c000640b:	74 2b                	je     c0006438 <find_object+0xc2>
c000640d:	8d 43 21             	lea    eax,[ebx+0x21]
c0006410:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006414:	e8 07 fd ff ff       	call   c0006120 <ucscompare>
c0006419:	85 c0                	test   eax,eax
c000641b:	0f 84 bf 00 00 00    	je     c00064e0 <find_object+0x16a>
c0006421:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006424:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006428:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c0006430:	0f 8e da 00 00 00    	jle    c0006510 <find_object+0x19a>
c0006436:	eb b7                	jmp    c00063ef <find_object+0x79>
c0006438:	29 ce                	sub    esi,ecx
c000643a:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000643e:	a8 01                	test   al,0x1
c0006440:	74 05                	je     c0006447 <find_object+0xd1>
c0006442:	83 ee 21             	sub    esi,0x21
c0006445:	eb 5a                	jmp    c00064a1 <find_object+0x12b>
c0006447:	42                   	inc    edx
c0006448:	83 ee 22             	sub    esi,0x22
c000644b:	eb 54                	jmp    c00064a1 <find_object+0x12b>
c000644d:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006450:	48                   	dec    eax
c0006451:	3c 01                	cmp    al,0x1
c0006453:	77 51                	ja     c00064a6 <find_object+0x130>
c0006455:	50                   	push   eax
c0006456:	6a 02                	push   0x2
c0006458:	68 dd f8 02 c0       	push   0xc002f8dd
c000645d:	52                   	push   edx
c000645e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0006462:	e8 79 a3 ff ff       	call   c00007e0 <strncmp>
c0006467:	83 c4 10             	add    esp,0x10
c000646a:	85 c0                	test   eax,eax
c000646c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006470:	75 27                	jne    c0006499 <find_object+0x123>
c0006472:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006476:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006479:	50                   	push   eax
c000647a:	8d 42 05             	lea    eax,[edx+0x5]
c000647d:	55                   	push   ebp
c000647e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006482:	50                   	push   eax
c0006483:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006487:	50                   	push   eax
c0006488:	e8 f3 a1 ff ff       	call   c0000680 <strncpy>
c000648d:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c0006492:	83 c4 10             	add    esp,0x10
c0006495:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006499:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000649d:	29 c6                	sub    esi,eax
c000649f:	01 c2                	add    edx,eax
c00064a1:	83 fe 03             	cmp    esi,0x3
c00064a4:	7f a7                	jg     c000644d <find_object+0xd7>
c00064a6:	85 ed                	test   ebp,ebp
c00064a8:	7e 40                	jle    c00064ea <find_object+0x174>
c00064aa:	51                   	push   ecx
c00064ab:	51                   	push   ecx
c00064ac:	6a 2f                	push   0x2f
c00064ae:	57                   	push   edi
c00064af:	e8 ec a2 ff ff       	call   c00007a0 <strchr>
c00064b4:	83 c4 10             	add    esp,0x10
c00064b7:	85 c0                	test   eax,eax
c00064b9:	74 04                	je     c00064bf <find_object+0x149>
c00064bb:	29 f8                	sub    eax,edi
c00064bd:	eb 0c                	jmp    c00064cb <find_object+0x155>
c00064bf:	83 ec 0c             	sub    esp,0xc
c00064c2:	57                   	push   edi
c00064c3:	e8 a8 a0 ff ff       	call   c0000570 <strlen>
c00064c8:	83 c4 10             	add    esp,0x10
c00064cb:	52                   	push   edx
c00064cc:	50                   	push   eax
c00064cd:	57                   	push   edi
c00064ce:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00064d2:	50                   	push   eax
c00064d3:	e8 3e fe ff ff       	call   c0006316 <strnicmp>
c00064d8:	83 c4 10             	add    esp,0x10
c00064db:	e9 39 ff ff ff       	jmp    c0006419 <find_object+0xa3>
c00064e0:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00064e4:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00064e8:	eb 1e                	jmp    c0006508 <find_object+0x192>
c00064ea:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00064ee:	8d 43 21             	lea    eax,[ebx+0x21]
c00064f1:	89 f9                	mov    ecx,edi
c00064f3:	e8 a7 fc ff ff       	call   c000619f <fncompare>
c00064f8:	85 c0                	test   eax,eax
c00064fa:	0f 85 21 ff ff ff    	jne    c0006421 <find_object+0xab>
c0006500:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006504:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006508:	0f 85 13 ff ff ff    	jne    c0006421 <find_object+0xab>
c000650e:	eb 13                	jmp    c0006523 <find_object+0x1ad>
c0006510:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006514:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006518:	0f 8f b7 fe ff ff    	jg     c00063d5 <find_object+0x5f>
c000651e:	e9 cc fe ff ff       	jmp    c00063ef <find_object+0x79>
c0006523:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006529:	89 d8                	mov    eax,ebx
c000652b:	5b                   	pop    ebx
c000652c:	5e                   	pop    esi
c000652d:	5f                   	pop    edi
c000652e:	5d                   	pop    ebp
c000652f:	c3                   	ret    

c0006530 <find_object_path>:
c0006530:	55                   	push   ebp
c0006531:	57                   	push   edi
c0006532:	89 d7                	mov    edi,edx
c0006534:	56                   	push   esi
c0006535:	89 c6                	mov    esi,eax
c0006537:	53                   	push   ebx
c0006538:	89 cb                	mov    ebx,ecx
c000653a:	83 ec 0c             	sub    esp,0xc
c000653d:	50                   	push   eax
c000653e:	50                   	push   eax
c000653f:	6a 2f                	push   0x2f
c0006541:	56                   	push   esi
c0006542:	e8 59 a2 ff ff       	call   c00007a0 <strchr>
c0006547:	83 c4 10             	add    esp,0x10
c000654a:	89 c5                	mov    ebp,eax
c000654c:	85 c0                	test   eax,eax
c000654e:	74 3a                	je     c000658a <find_object_path+0x5a>
c0006550:	39 ee                	cmp    esi,ebp
c0006552:	74 31                	je     c0006585 <find_object_path+0x55>
c0006554:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006557:	e8 a6 fb ff ff       	call   c0006102 <iso_733>
c000655c:	89 c2                	mov    edx,eax
c000655e:	8d 43 02             	lea    eax,[ebx+0x2]
c0006561:	e8 9c fb ff ff       	call   c0006102 <iso_733>
c0006566:	83 ec 0c             	sub    esp,0xc
c0006569:	89 c1                	mov    ecx,eax
c000656b:	52                   	push   edx
c000656c:	89 f0                	mov    eax,esi
c000656e:	ba 01 00 00 00       	mov    edx,0x1
c0006573:	e8 fe fd ff ff       	call   c0006376 <find_object>
c0006578:	83 c4 10             	add    esp,0x10
c000657b:	89 c3                	mov    ebx,eax
c000657d:	85 c0                	test   eax,eax
c000657f:	75 04                	jne    c0006585 <find_object_path+0x55>
c0006581:	31 db                	xor    ebx,ebx
c0006583:	eb 36                	jmp    c00065bb <find_object_path+0x8b>
c0006585:	8d 75 01             	lea    esi,[ebp+0x1]
c0006588:	eb b3                	jmp    c000653d <find_object_path+0xd>
c000658a:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000658d:	74 28                	je     c00065b7 <find_object_path+0x87>
c000658f:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006592:	e8 6b fb ff ff       	call   c0006102 <iso_733>
c0006597:	89 c2                	mov    edx,eax
c0006599:	8d 43 02             	lea    eax,[ebx+0x2]
c000659c:	e8 61 fb ff ff       	call   c0006102 <iso_733>
c00065a1:	83 ec 0c             	sub    esp,0xc
c00065a4:	89 c1                	mov    ecx,eax
c00065a6:	52                   	push   edx
c00065a7:	89 f0                	mov    eax,esi
c00065a9:	89 fa                	mov    edx,edi
c00065ab:	e8 c6 fd ff ff       	call   c0006376 <find_object>
c00065b0:	83 c4 10             	add    esp,0x10
c00065b3:	89 c3                	mov    ebx,eax
c00065b5:	eb 04                	jmp    c00065bb <find_object_path+0x8b>
c00065b7:	85 ff                	test   edi,edi
c00065b9:	74 c6                	je     c0006581 <find_object_path+0x51>
c00065bb:	83 c4 0c             	add    esp,0xc
c00065be:	89 d8                	mov    eax,ebx
c00065c0:	5b                   	pop    ebx
c00065c1:	5e                   	pop    esi
c00065c2:	5f                   	pop    edi
c00065c3:	5d                   	pop    ebp
c00065c4:	c3                   	ret    

c00065c5 <stricmp>:
c00065c5:	57                   	push   edi
c00065c6:	56                   	push   esi
c00065c7:	31 f6                	xor    esi,esi
c00065c9:	53                   	push   ebx
c00065ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00065ce:	83 ec 0c             	sub    esp,0xc
c00065d1:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00065d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065d9:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00065dd:	50                   	push   eax
c00065de:	e8 4d a3 ff ff       	call   c0000930 <toupper>
c00065e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00065e6:	e8 65 a3 ff ff       	call   c0000950 <tolower>
c00065eb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00065ee:	89 c3                	mov    ebx,eax
c00065f0:	e8 3b a3 ff ff       	call   c0000930 <toupper>
c00065f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00065f8:	e8 53 a3 ff ff       	call   c0000950 <tolower>
c00065fd:	83 c4 10             	add    esp,0x10
c0006600:	39 c3                	cmp    ebx,eax
c0006602:	75 05                	jne    c0006609 <stricmp+0x44>
c0006604:	46                   	inc    esi
c0006605:	85 db                	test   ebx,ebx
c0006607:	75 c1                	jne    c00065ca <stricmp+0x5>
c0006609:	29 c3                	sub    ebx,eax
c000660b:	89 d8                	mov    eax,ebx
c000660d:	5b                   	pop    ebx
c000660e:	5e                   	pop    esi
c000660f:	5f                   	pop    edi
c0006610:	c3                   	ret    

c0006611 <iso_open>:
c0006611:	57                   	push   edi
c0006612:	31 c0                	xor    eax,eax
c0006614:	56                   	push   esi
c0006615:	b9 60 76 03 c0       	mov    ecx,0xc0037660
c000661a:	53                   	push   ebx
c000661b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006620:	0f 95 c0             	setne  al
c0006623:	89 c2                	mov    edx,eax
c0006625:	89 c6                	mov    esi,eax
c0006627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000662b:	e8 00 ff ff ff       	call   c0006530 <find_object_path>
c0006630:	83 ca ff             	or     edx,0xffffffff
c0006633:	85 c0                	test   eax,eax
c0006635:	74 5e                	je     c0006695 <iso_open+0x84>
c0006637:	89 c1                	mov    ecx,eax
c0006639:	31 d2                	xor    edx,edx
c000663b:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006641:	83 bf 20 6d 03 c0 00 	cmp    DWORD PTR [edi-0x3ffc92e0],0x0
c0006648:	75 42                	jne    c000668c <iso_open+0x7b>
c000664a:	8d 41 02             	lea    eax,[ecx+0x2]
c000664d:	c7 87 20 6d 03 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffc92e0],0xffffffff
c0006657:	e8 a6 fa ff ff       	call   c0006102 <iso_733>
c000665c:	89 b7 24 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92dc],esi
c0006662:	89 87 20 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92e0],eax
c0006668:	c7 87 28 6d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc92d8],0x0
c0006672:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006675:	e8 88 fa ff ff       	call   c0006102 <iso_733>
c000667a:	c7 87 b0 6d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc9250],0x0
c0006684:	89 87 2c 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92d4],eax
c000668a:	eb 09                	jmp    c0006695 <iso_open+0x84>
c000668c:	42                   	inc    edx
c000668d:	83 fa 10             	cmp    edx,0x10
c0006690:	75 a9                	jne    c000663b <iso_open+0x2a>
c0006692:	83 ca ff             	or     edx,0xffffffff
c0006695:	5b                   	pop    ebx
c0006696:	89 d0                	mov    eax,edx
c0006698:	5e                   	pop    esi
c0006699:	5f                   	pop    edi
c000669a:	c3                   	ret    

c000669b <iso_close>:
c000669b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000669f:	83 f8 0f             	cmp    eax,0xf
c00066a2:	7f 10                	jg     c00066b4 <iso_close+0x19>
c00066a4:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00066aa:	c7 80 20 6d 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc92e0],0x0
c00066b4:	e9 5e fb ff ff       	jmp    c0006217 <bclear_cache>

c00066b9 <iso_read>:
c00066b9:	55                   	push   ebp
c00066ba:	57                   	push   edi
c00066bb:	56                   	push   esi
c00066bc:	53                   	push   ebx
c00066bd:	83 ec 1c             	sub    esp,0x1c
c00066c0:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00066c4:	83 fd 0f             	cmp    ebp,0xf
c00066c7:	7e 0a                	jle    c00066d3 <iso_read+0x1a>
c00066c9:	83 c8 ff             	or     eax,0xffffffff
c00066cc:	89 c2                	mov    edx,eax
c00066ce:	e9 f4 00 00 00       	jmp    c00067c7 <iso_read+0x10e>
c00066d3:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00066d9:	83 bd 20 6d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc92e0],0x0
c00066e0:	74 e7                	je     c00066c9 <iso_read+0x10>
c00066e2:	8b 95 b0 6d 03 c0    	mov    edx,DWORD PTR [ebp-0x3ffc9250]
c00066e8:	85 d2                	test   edx,edx
c00066ea:	75 dd                	jne    c00066c9 <iso_read+0x10>
c00066ec:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00066f1:	0f 84 cd 00 00 00    	je     c00067c4 <iso_read+0x10b>
c00066f7:	8b 85 28 6d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc92d8]
c00066fd:	8b 8d 2c 6d 03 c0    	mov    ecx,DWORD PTR [ebp-0x3ffc92d4]
c0006703:	29 c1                	sub    ecx,eax
c0006705:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006709:	76 04                	jbe    c000670f <iso_read+0x56>
c000670b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000670f:	85 c9                	test   ecx,ecx
c0006711:	0f 84 ad 00 00 00    	je     c00067c4 <iso_read+0x10b>
c0006717:	89 c6                	mov    esi,eax
c0006719:	bb 00 08 00 00       	mov    ebx,0x800
c000671e:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006724:	c1 e8 0b             	shr    eax,0xb
c0006727:	29 f3                	sub    ebx,esi
c0006729:	03 85 20 6d 03 c0    	add    eax,DWORD PTR [ebp-0x3ffc92e0]
c000672f:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006735:	7e 3f                	jle    c0006776 <iso_read+0xbd>
c0006737:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000673d:	75 37                	jne    c0006776 <iso_read+0xbd>
c000673f:	be 20 00 00 00       	mov    esi,0x20
c0006744:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000674a:	7f 05                	jg     c0006751 <iso_read+0x98>
c000674c:	89 ce                	mov    esi,ecx
c000674e:	c1 fe 0b             	sar    esi,0xb
c0006751:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006755:	89 f3                	mov    ebx,esi
c0006757:	c1 e3 0b             	shl    ebx,0xb
c000675a:	52                   	push   edx
c000675b:	56                   	push   esi
c000675c:	50                   	push   eax
c000675d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006761:	e8 15 fb ff ff       	call   c000627b <isoReadDiscSector>
c0006766:	83 c4 10             	add    esp,0x10
c0006769:	85 c0                	test   eax,eax
c000676b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000676f:	7f 3e                	jg     c00067af <iso_read+0xf6>
c0006771:	e9 53 ff ff ff       	jmp    c00066c9 <iso_read+0x10>
c0006776:	39 cb                	cmp    ebx,ecx
c0006778:	7e 02                	jle    c000677c <iso_read+0xc3>
c000677a:	89 cb                	mov    ebx,ecx
c000677c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006780:	e8 88 fb ff ff       	call   c000630d <bdread>
c0006785:	85 c0                	test   eax,eax
c0006787:	0f 88 3c ff ff ff    	js     c00066c9 <iso_read+0x10>
c000678d:	8b 0c 85 20 60 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc9fe0]
c0006794:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006798:	8b 85 28 6d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc92d8]
c000679e:	25 ff 07 00 00       	and    eax,0x7ff
c00067a3:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00067a7:	89 d9                	mov    ecx,ebx
c00067a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00067ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00067af:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00067b3:	01 9d 28 6d 03 c0    	add    DWORD PTR [ebp-0x3ffc92d8],ebx
c00067b9:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00067bd:	01 da                	add    edx,ebx
c00067bf:	e9 28 ff ff ff       	jmp    c00066ec <iso_read+0x33>
c00067c4:	89 d0                	mov    eax,edx
c00067c6:	99                   	cdq    
c00067c7:	83 c4 1c             	add    esp,0x1c
c00067ca:	5b                   	pop    ebx
c00067cb:	5e                   	pop    esi
c00067cc:	5f                   	pop    edi
c00067cd:	5d                   	pop    ebp
c00067ce:	c3                   	ret    

c00067cf <iso_seek>:
c00067cf:	55                   	push   ebp
c00067d0:	83 c8 ff             	or     eax,0xffffffff
c00067d3:	57                   	push   edi
c00067d4:	89 c2                	mov    edx,eax
c00067d6:	56                   	push   esi
c00067d7:	53                   	push   ebx
c00067d8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00067dc:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00067e0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00067e4:	83 fe 0f             	cmp    esi,0xf
c00067e7:	7f 65                	jg     c000684e <iso_seek+0x7f>
c00067e9:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00067ef:	8d 8d 20 6d 03 c0    	lea    ecx,[ebp-0x3ffc92e0]
c00067f5:	83 bd 20 6d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc92e0],0x0
c00067fc:	74 50                	je     c000684e <iso_seek+0x7f>
c00067fe:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006805:	75 47                	jne    c000684e <iso_seek+0x7f>
c0006807:	83 fb 01             	cmp    ebx,0x1
c000680a:	74 0e                	je     c000681a <iso_seek+0x4b>
c000680c:	83 fb 02             	cmp    ebx,0x2
c000680f:	74 0e                	je     c000681f <iso_seek+0x50>
c0006811:	85 db                	test   ebx,ebx
c0006813:	75 39                	jne    c000684e <iso_seek+0x7f>
c0006815:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006818:	eb 0d                	jmp    c0006827 <iso_seek+0x58>
c000681a:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c000681d:	eb 08                	jmp    c0006827 <iso_seek+0x58>
c000681f:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006822:	01 f8                	add    eax,edi
c0006824:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006827:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c000682d:	8b 88 2c 6d 03 c0    	mov    ecx,DWORD PTR [eax-0x3ffc92d4]
c0006833:	05 20 6d 03 c0       	add    eax,0xc0036d20
c0006838:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000683b:	76 03                	jbe    c0006840 <iso_seek+0x71>
c000683d:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006840:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006846:	8b 82 28 6d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc92d8]
c000684c:	31 d2                	xor    edx,edx
c000684e:	5b                   	pop    ebx
c000684f:	5e                   	pop    esi
c0006850:	5f                   	pop    edi
c0006851:	5d                   	pop    ebp
c0006852:	c3                   	ret    

c0006853 <iso_tell>:
c0006853:	83 c8 ff             	or     eax,0xffffffff
c0006856:	53                   	push   ebx
c0006857:	89 c2                	mov    edx,eax
c0006859:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000685d:	83 f9 0f             	cmp    ecx,0xf
c0006860:	7f 20                	jg     c0006882 <iso_tell+0x2f>
c0006862:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006868:	83 bb 20 6d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc92e0],0x0
c000686f:	74 11                	je     c0006882 <iso_tell+0x2f>
c0006871:	83 bb b0 6d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc9250],0x0
c0006878:	75 08                	jne    c0006882 <iso_tell+0x2f>
c000687a:	8b 83 28 6d 03 c0    	mov    eax,DWORD PTR [ebx-0x3ffc92d8]
c0006880:	31 d2                	xor    edx,edx
c0006882:	5b                   	pop    ebx
c0006883:	c3                   	ret    

c0006884 <iso_total>:
c0006884:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006888:	83 c8 ff             	or     eax,0xffffffff
c000688b:	83 fa 0f             	cmp    edx,0xf
c000688e:	7f 1e                	jg     c00068ae <iso_total+0x2a>
c0006890:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006896:	83 ba 20 6d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc92e0],0x0
c000689d:	74 0f                	je     c00068ae <iso_total+0x2a>
c000689f:	83 ba b0 6d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc9250],0x0
c00068a6:	75 06                	jne    c00068ae <iso_total+0x2a>
c00068a8:	8b 82 2c 6d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc92d4]
c00068ae:	c3                   	ret    

c00068af <fn_postprocess>:
c00068af:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00068b3:	89 d0                	mov    eax,edx
c00068b5:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00068b8:	83 f9 3b             	cmp    ecx,0x3b
c00068bb:	74 07                	je     c00068c4 <fn_postprocess+0x15>
c00068bd:	85 c9                	test   ecx,ecx
c00068bf:	74 03                	je     c00068c4 <fn_postprocess+0x15>
c00068c1:	40                   	inc    eax
c00068c2:	eb f1                	jmp    c00068b5 <fn_postprocess+0x6>
c00068c4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00068c7:	39 d0                	cmp    eax,edx
c00068c9:	76 0a                	jbe    c00068d5 <fn_postprocess+0x26>
c00068cb:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00068cf:	75 04                	jne    c00068d5 <fn_postprocess+0x26>
c00068d1:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00068d5:	c3                   	ret    

c00068d6 <iso_readdir>:
c00068d6:	55                   	push   ebp
c00068d7:	57                   	push   edi
c00068d8:	56                   	push   esi
c00068d9:	53                   	push   ebx
c00068da:	83 ec 1c             	sub    esp,0x1c
c00068dd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00068e1:	83 fb 0f             	cmp    ebx,0xf
c00068e4:	7f 28                	jg     c000690e <iso_readdir+0x38>
c00068e6:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00068ec:	8d b8 20 6d 03 c0    	lea    edi,[eax-0x3ffc92e0]
c00068f2:	83 b8 20 6d 03 c0 00 	cmp    DWORD PTR [eax-0x3ffc92e0],0x0
c00068f9:	74 13                	je     c000690e <iso_readdir+0x38>
c00068fb:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00068ff:	74 0d                	je     c000690e <iso_readdir+0x38>
c0006901:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006908:	0f 84 b1 00 00 00    	je     c00069bf <iso_readdir+0xe9>
c000690e:	83 ec 0c             	sub    esp,0xc
c0006911:	68 e0 f8 02 c0       	push   0xc002f8e0
c0006916:	e8 01 29 02 00       	call   c002921c <iso_kprintf>
c000691b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000691e:	e8 15 29 02 00       	call   c0029238 <iso_kprintfd>
c0006923:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006929:	c7 04 24 e5 f8 02 c0 	mov    DWORD PTR [esp],0xc002f8e5
c0006930:	e8 e7 28 02 00       	call   c002921c <iso_kprintf>
c0006935:	5d                   	pop    ebp
c0006936:	ff b3 20 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc92e0]
c000693c:	e8 f7 28 02 00       	call   c0029238 <iso_kprintfd>
c0006941:	c7 04 24 eb f8 02 c0 	mov    DWORD PTR [esp],0xc002f8eb
c0006948:	e8 cf 28 02 00       	call   c002921c <iso_kprintf>
c000694d:	58                   	pop    eax
c000694e:	ff b3 24 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc92dc]
c0006954:	e8 df 28 02 00       	call   c0029238 <iso_kprintfd>
c0006959:	c7 04 24 f1 f8 02 c0 	mov    DWORD PTR [esp],0xc002f8f1
c0006960:	e8 b7 28 02 00       	call   c002921c <iso_kprintf>
c0006965:	58                   	pop    eax
c0006966:	ff b3 b0 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc9250]
c000696c:	e8 c7 28 02 00       	call   c0029238 <iso_kprintfd>
c0006971:	83 c4 10             	add    esp,0x10
c0006974:	eb 42                	jmp    c00069b8 <iso_readdir+0xe2>
c0006976:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006979:	8b 34 85 80 60 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9f80]
c0006980:	89 d1                	mov    ecx,edx
c0006982:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006988:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c000698c:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000698f:	75 35                	jne    c00069c6 <iso_readdir+0xf0>
c0006991:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006997:	81 c2 00 08 00 00    	add    edx,0x800
c000699d:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00069a0:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00069a3:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00069a6:	73 1e                	jae    c00069c6 <iso_readdir+0xf0>
c00069a8:	c1 ea 0b             	shr    edx,0xb
c00069ab:	8b 07                	mov    eax,DWORD PTR [edi]
c00069ad:	01 d0                	add    eax,edx
c00069af:	e8 50 f9 ff ff       	call   c0006304 <biread>
c00069b4:	85 c0                	test   eax,eax
c00069b6:	79 be                	jns    c0006976 <iso_readdir+0xa0>
c00069b8:	31 c0                	xor    eax,eax
c00069ba:	e9 66 01 00 00       	jmp    c0006b25 <iso_readdir+0x24f>
c00069bf:	31 f6                	xor    esi,esi
c00069c1:	83 c8 ff             	or     eax,0xffffffff
c00069c4:	eb da                	jmp    c00069a0 <iso_readdir+0xca>
c00069c6:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00069cc:	8b ba 28 6d 03 c0    	mov    edi,DWORD PTR [edx-0x3ffc92d8]
c00069d2:	81 c2 20 6d 03 c0    	add    edx,0xc0036d20
c00069d8:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00069db:	73 db                	jae    c00069b8 <iso_readdir+0xe2>
c00069dd:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00069e1:	75 34                	jne    c0006a17 <iso_readdir+0x141>
c00069e3:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00069e7:	75 2e                	jne    c0006a17 <iso_readdir+0x141>
c00069e9:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00069ec:	8b 34 85 80 60 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9f80]
c00069f3:	01 f9                	add    ecx,edi
c00069f5:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00069f8:	89 c8                	mov    eax,ecx
c00069fa:	25 ff 07 00 00       	and    eax,0x7ff
c00069ff:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006a04:	01 c8                	add    eax,ecx
c0006a06:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006a09:	25 ff 07 00 00       	and    eax,0x7ff
c0006a0e:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006a12:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a15:	74 a1                	je     c00069b8 <iso_readdir+0xe2>
c0006a17:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006a1d:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006a21:	8d 56 21             	lea    edx,[esi+0x21]
c0006a24:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006a28:	8d a8 38 6d 03 c0    	lea    ebp,[eax-0x3ffc92c8]
c0006a2e:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006a35:	74 0c                	je     c0006a43 <iso_readdir+0x16d>
c0006a37:	89 e8                	mov    eax,ebp
c0006a39:	e8 14 f6 ff ff       	call   c0006052 <ucs2utfn>
c0006a3e:	e9 a6 00 00 00       	jmp    c0006ae9 <iso_readdir+0x213>
c0006a43:	57                   	push   edi
c0006a44:	51                   	push   ecx
c0006a45:	52                   	push   edx
c0006a46:	55                   	push   ebp
c0006a47:	e8 34 9c ff ff       	call   c0000680 <strncpy>
c0006a4c:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006a50:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006a56:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006a59:	c6 84 01 38 6d 03 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffc92c8],0x0
c0006a61:	e8 49 fe ff ff       	call   c00068af <fn_postprocess>
c0006a66:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006a6a:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a6d:	83 c4 10             	add    esp,0x10
c0006a70:	29 d0                	sub    eax,edx
c0006a72:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006a76:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006a7a:	74 05                	je     c0006a81 <iso_readdir+0x1ab>
c0006a7c:	83 e8 21             	sub    eax,0x21
c0006a7f:	eb 04                	jmp    c0006a85 <iso_readdir+0x1af>
c0006a81:	47                   	inc    edi
c0006a82:	83 e8 22             	sub    eax,0x22
c0006a85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006a89:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006a8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a93:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006a98:	7e 4f                	jle    c0006ae9 <iso_readdir+0x213>
c0006a9a:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006a9d:	48                   	dec    eax
c0006a9e:	3c 01                	cmp    al,0x1
c0006aa0:	77 47                	ja     c0006ae9 <iso_readdir+0x213>
c0006aa2:	52                   	push   edx
c0006aa3:	6a 02                	push   0x2
c0006aa5:	68 dd f8 02 c0       	push   0xc002f8dd
c0006aaa:	57                   	push   edi
c0006aab:	e8 30 9d ff ff       	call   c00007e0 <strncmp>
c0006ab0:	83 c4 10             	add    esp,0x10
c0006ab3:	85 c0                	test   eax,eax
c0006ab5:	75 26                	jne    c0006add <iso_readdir+0x207>
c0006ab7:	50                   	push   eax
c0006ab8:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006abc:	83 e8 05             	sub    eax,0x5
c0006abf:	50                   	push   eax
c0006ac0:	8d 47 05             	lea    eax,[edi+0x5]
c0006ac3:	50                   	push   eax
c0006ac4:	55                   	push   ebp
c0006ac5:	e8 b6 9b ff ff       	call   c0000680 <strncpy>
c0006aca:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006ace:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006ad2:	83 c4 10             	add    esp,0x10
c0006ad5:	c6 84 08 33 6d 03 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffc92cd],0x0
c0006add:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006ae1:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006ae5:	01 c7                	add    edi,eax
c0006ae7:	eb aa                	jmp    c0006a93 <iso_readdir+0x1bd>
c0006ae9:	83 c8 ff             	or     eax,0xffffffff
c0006aec:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006af0:	89 c2                	mov    edx,eax
c0006af2:	75 0a                	jne    c0006afe <iso_readdir+0x228>
c0006af4:	8d 46 0a             	lea    eax,[esi+0xa]
c0006af7:	e8 06 f6 ff ff       	call   c0006102 <iso_733>
c0006afc:	31 d2                	xor    edx,edx
c0006afe:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006b04:	89 83 30 6d 03 c0    	mov    DWORD PTR [ebx-0x3ffc92d0],eax
c0006b0a:	89 93 34 6d 03 c0    	mov    DWORD PTR [ebx-0x3ffc92cc],edx
c0006b10:	81 c3 20 6d 03 c0    	add    ebx,0xc0036d20
c0006b16:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b19:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006b1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006b20:	05 30 6d 03 c0       	add    eax,0xc0036d30
c0006b25:	83 c4 1c             	add    esp,0x1c
c0006b28:	5b                   	pop    ebx
c0006b29:	5e                   	pop    esi
c0006b2a:	5f                   	pop    edi
c0006b2b:	5d                   	pop    ebp
c0006b2c:	c3                   	ret    

c0006b2d <iso_reset>:
c0006b2d:	83 ec 18             	sub    esp,0x18
c0006b30:	68 fa f8 02 c0       	push   0xc002f8fa
c0006b35:	e8 e2 26 02 00       	call   c002921c <iso_kprintf>
c0006b3a:	e8 10 f7 ff ff       	call   c000624f <iso_break_all>
c0006b3f:	e8 09 f7 ff ff       	call   c000624d <bclear>
c0006b44:	31 c0                	xor    eax,eax
c0006b46:	83 c4 1c             	add    esp,0x1c
c0006b49:	c3                   	ret    

c0006b4a <init_percd>:
c0006b4a:	57                   	push   edi
c0006b4b:	56                   	push   esi
c0006b4c:	53                   	push   ebx
c0006b4d:	bb 01 00 00 00       	mov    ebx,0x1
c0006b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b56:	a2 60 60 03 c0       	mov    ds:0xc0036060,al
c0006b5b:	e8 cd ff ff ff       	call   c0006b2d <iso_reset>
c0006b60:	c7 05 94 76 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037694,0x0
c0006b6a:	a1 8c 76 03 c0       	mov    eax,ds:0xc003768c
c0006b6f:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006b73:	e8 8c f7 ff ff       	call   c0006304 <biread>
c0006b78:	89 c6                	mov    esi,eax
c0006b7a:	85 c0                	test   eax,eax
c0006b7c:	0f 88 ba 00 00 00    	js     c0006c3c <init_percd+0xf2>
c0006b82:	8b 04 85 80 60 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9f80]
c0006b89:	83 c0 04             	add    eax,0x4
c0006b8c:	52                   	push   edx
c0006b8d:	6a 06                	push   0x6
c0006b8f:	68 05 f9 02 c0       	push   0xc002f905
c0006b94:	50                   	push   eax
c0006b95:	e8 e6 97 ff ff       	call   c0000380 <memcmp>
c0006b9a:	83 c4 10             	add    esp,0x10
c0006b9d:	85 c0                	test   eax,eax
c0006b9f:	74 08                	je     c0006ba9 <init_percd+0x5f>
c0006ba1:	43                   	inc    ebx
c0006ba2:	83 fb 04             	cmp    ebx,0x4
c0006ba5:	75 c3                	jne    c0006b6a <init_percd+0x20>
c0006ba7:	eb 1a                	jmp    c0006bc3 <init_percd+0x79>
c0006ba9:	8b 04 b5 80 60 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc9f80]
c0006bb0:	83 c0 5c             	add    eax,0x5c
c0006bb3:	e8 17 f5 ff ff       	call   c00060cf <isjoliet>
c0006bb8:	a3 94 76 03 c0       	mov    ds:0xc0037694,eax
c0006bbd:	85 c0                	test   eax,eax
c0006bbf:	74 e0                	je     c0006ba1 <init_percd+0x57>
c0006bc1:	eb 3e                	jmp    c0006c01 <init_percd+0xb7>
c0006bc3:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006bca:	75 35                	jne    c0006c01 <init_percd+0xb7>
c0006bcc:	a1 8c 76 03 c0       	mov    eax,ds:0xc003768c
c0006bd1:	83 c0 10             	add    eax,0x10
c0006bd4:	e8 2b f7 ff ff       	call   c0006304 <biread>
c0006bd9:	89 c6                	mov    esi,eax
c0006bdb:	85 c0                	test   eax,eax
c0006bdd:	78 5f                	js     c0006c3e <init_percd+0xf4>
c0006bdf:	83 cb ff             	or     ebx,0xffffffff
c0006be2:	50                   	push   eax
c0006be3:	8b 04 b5 80 60 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc9f80]
c0006bea:	6a 06                	push   0x6
c0006bec:	83 c0 04             	add    eax,0x4
c0006bef:	68 0c f9 02 c0       	push   0xc002f90c
c0006bf4:	50                   	push   eax
c0006bf5:	e8 86 97 ff ff       	call   c0000380 <memcmp>
c0006bfa:	83 c4 10             	add    esp,0x10
c0006bfd:	85 c0                	test   eax,eax
c0006bff:	75 3d                	jne    c0006c3e <init_percd+0xf4>
c0006c01:	8b 34 b5 80 60 03 c0 	mov    esi,DWORD PTR [esi*4-0x3ffc9f80]
c0006c08:	bf 60 76 03 c0       	mov    edi,0xc0037660
c0006c0d:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006c13:	b9 22 00 00 00       	mov    ecx,0x22
c0006c18:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006c1a:	b8 62 76 03 c0       	mov    eax,0xc0037662
c0006c1f:	31 db                	xor    ebx,ebx
c0006c21:	e8 dc f4 ff ff       	call   c0006102 <iso_733>
c0006c26:	a3 88 76 03 c0       	mov    ds:0xc0037688,eax
c0006c2b:	b8 6a 76 03 c0       	mov    eax,0xc003766a
c0006c30:	e8 cd f4 ff ff       	call   c0006102 <iso_733>
c0006c35:	a3 84 76 03 c0       	mov    ds:0xc0037684,eax
c0006c3a:	eb 02                	jmp    c0006c3e <init_percd+0xf4>
c0006c3c:	89 c3                	mov    ebx,eax
c0006c3e:	89 d8                	mov    eax,ebx
c0006c40:	5b                   	pop    ebx
c0006c41:	5e                   	pop    esi
c0006c42:	5f                   	pop    edi
c0006c43:	c3                   	ret    

c0006c44 <iso_ioctl>:
c0006c44:	83 ec 18             	sub    esp,0x18
c0006c47:	68 13 f9 02 c0       	push   0xc002f913
c0006c4c:	e8 cb 25 02 00       	call   c002921c <iso_kprintf>
c0006c51:	e8 d7 fe ff ff       	call   c0006b2d <iso_reset>
c0006c56:	31 c0                	xor    eax,eax
c0006c58:	83 c4 1c             	add    esp,0x1c
c0006c5b:	c3                   	ret    

c0006c5c <fs_iso9660_init>:
c0006c5c:	53                   	push   ebx
c0006c5d:	31 db                	xor    ebx,ebx
c0006c5f:	83 ec 14             	sub    esp,0x14
c0006c62:	68 1e f9 02 c0       	push   0xc002f91e
c0006c67:	e8 b0 25 02 00       	call   c002921c <iso_kprintf>
c0006c6c:	83 c4 0c             	add    esp,0xc
c0006c6f:	68 40 09 00 00       	push   0x940
c0006c74:	6a 00                	push   0x0
c0006c76:	68 20 6d 03 c0       	push   0xc0036d20
c0006c7b:	e8 70 98 ff ff       	call   c00004f0 <memset>
c0006c80:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006c87:	c7 05 20 6d 03 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0036d20,0xffffffff
c0006c91:	e8 70 f6 00 00       	call   c0016306 <malloc>
c0006c96:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006c9d:	a3 90 76 03 c0       	mov    ds:0xc0037690,eax
c0006ca2:	e8 5f f6 00 00       	call   c0016306 <malloc>
c0006ca7:	83 c4 10             	add    esp,0x10
c0006caa:	a3 00 6d 03 c0       	mov    ds:0xc0036d00,eax
c0006caf:	83 ec 0c             	sub    esp,0xc
c0006cb2:	68 04 08 00 00       	push   0x804
c0006cb7:	e8 4a f6 00 00       	call   c0016306 <malloc>
c0006cbc:	89 04 9d 80 60 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc9f80],eax
c0006cc3:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006cc9:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006cd0:	e8 31 f6 00 00       	call   c0016306 <malloc>
c0006cd5:	83 c4 10             	add    esp,0x10
c0006cd8:	89 04 9d 20 60 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc9fe0],eax
c0006cdf:	43                   	inc    ebx
c0006ce0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006ce6:	83 fb 10             	cmp    ebx,0x10
c0006ce9:	75 c4                	jne    c0006caf <fs_iso9660_init+0x53>
c0006ceb:	31 c0                	xor    eax,eax
c0006ced:	83 c4 08             	add    esp,0x8
c0006cf0:	5b                   	pop    ebx
c0006cf1:	c3                   	ret    

c0006cf2 <fs_iso9660_shutdown>:
c0006cf2:	53                   	push   ebx
c0006cf3:	31 db                	xor    ebx,ebx
c0006cf5:	83 ec 08             	sub    esp,0x8
c0006cf8:	83 ec 0c             	sub    esp,0xc
c0006cfb:	ff 34 9d 80 60 03 c0 	push   DWORD PTR [ebx*4-0x3ffc9f80]
c0006d02:	e8 0f f6 00 00       	call   c0016316 <free>
c0006d07:	58                   	pop    eax
c0006d08:	ff 34 9d 20 60 03 c0 	push   DWORD PTR [ebx*4-0x3ffc9fe0]
c0006d0f:	43                   	inc    ebx
c0006d10:	e8 01 f6 00 00       	call   c0016316 <free>
c0006d15:	83 c4 10             	add    esp,0x10
c0006d18:	83 fb 10             	cmp    ebx,0x10
c0006d1b:	75 db                	jne    c0006cf8 <fs_iso9660_shutdown+0x6>
c0006d1d:	a1 90 76 03 c0       	mov    eax,ds:0xc0037690
c0006d22:	85 c0                	test   eax,eax
c0006d24:	74 0c                	je     c0006d32 <fs_iso9660_shutdown+0x40>
c0006d26:	83 ec 0c             	sub    esp,0xc
c0006d29:	50                   	push   eax
c0006d2a:	e8 e7 f5 00 00       	call   c0016316 <free>
c0006d2f:	83 c4 10             	add    esp,0x10
c0006d32:	a1 00 6d 03 c0       	mov    eax,ds:0xc0036d00
c0006d37:	85 c0                	test   eax,eax
c0006d39:	74 0c                	je     c0006d47 <fs_iso9660_shutdown+0x55>
c0006d3b:	83 ec 0c             	sub    esp,0xc
c0006d3e:	50                   	push   eax
c0006d3f:	e8 d2 f5 00 00       	call   c0016316 <free>
c0006d44:	83 c4 10             	add    esp,0x10
c0006d47:	c7 05 00 6d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036d00,0x0
c0006d51:	c7 05 90 76 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037690,0x0
c0006d5b:	31 c0                	xor    eax,eax
c0006d5d:	83 c4 08             	add    esp,0x8
c0006d60:	5b                   	pop    ebx
c0006d61:	c3                   	ret    
c0006d62:	66 90                	xchg   ax,ax

c0006d64 <lwip_init>:
c0006d64:	83 ec 0c             	sub    esp,0xc
c0006d67:	e8 44 2c 00 00       	call   c00099b0 <stats_init>
c0006d6c:	e8 7b 9f ff ff       	call   c0000cec <sys_init>
c0006d71:	e8 ae 01 00 00       	call   c0006f24 <mem_init>
c0006d76:	e8 01 0a 00 00       	call   c000777c <memp_init>
c0006d7b:	e8 e4 0c 00 00       	call   c0007a64 <netif_init>
c0006d80:	e8 b7 9e ff ff       	call   c0000c3c <lwip_socket_init>
c0006d85:	e8 72 9d 00 00       	call   c0010afc <sys_timeouts_init>
c0006d8a:	90                   	nop
c0006d8b:	83 c4 0c             	add    esp,0xc
c0006d8e:	c3                   	ret    
c0006d8f:	90                   	nop

c0006d90 <plug_holes>:
c0006d90:	83 ec 1c             	sub    esp,0x1c
c0006d93:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006d98:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006d9c:	73 16                	jae    c0006db4 <plug_holes+0x24>
c0006d9e:	83 ec 08             	sub    esp,0x8
c0006da1:	68 2f f9 02 c0       	push   0xc002f92f
c0006da6:	68 46 f9 02 c0       	push   0xc002f946
c0006dab:	e8 2c 8d 01 00       	call   c001fadc <CPrintf>
c0006db0:	83 c4 10             	add    esp,0x10
c0006db3:	90                   	nop
c0006db4:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006db9:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006dbd:	72 15                	jb     c0006dd4 <plug_holes+0x44>
c0006dbf:	83 ec 08             	sub    esp,0x8
c0006dc2:	68 53 f9 02 c0       	push   0xc002f953
c0006dc7:	68 46 f9 02 c0       	push   0xc002f946
c0006dcc:	e8 0b 8d 01 00       	call   c001fadc <CPrintf>
c0006dd1:	83 c4 10             	add    esp,0x10
c0006dd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006dd8:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0006ddb:	0f b6 c0             	movzx  eax,al
c0006dde:	85 c0                	test   eax,eax
c0006de0:	74 16                	je     c0006df8 <plug_holes+0x68>
c0006de2:	83 ec 08             	sub    esp,0x8
c0006de5:	68 6d f9 02 c0       	push   0xc002f96d
c0006dea:	68 46 f9 02 c0       	push   0xc002f946
c0006def:	e8 e8 8c 01 00       	call   c001fadc <CPrintf>
c0006df4:	83 c4 10             	add    esp,0x10
c0006df7:	90                   	nop
c0006df8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006dfc:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006dff:	0f b7 c0             	movzx  eax,ax
c0006e02:	3d 40 06 00 00       	cmp    eax,0x640
c0006e07:	76 17                	jbe    c0006e20 <plug_holes+0x90>
c0006e09:	83 ec 08             	sub    esp,0x8
c0006e0c:	68 00 fa 02 c0       	push   0xc002fa00
c0006e11:	68 46 f9 02 c0       	push   0xc002f946
c0006e16:	e8 c1 8c 01 00       	call   c001fadc <CPrintf>
c0006e1b:	83 c4 10             	add    esp,0x10
c0006e1e:	66 90                	xchg   ax,ax
c0006e20:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0006e26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e2a:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006e2d:	0f b7 c0             	movzx  eax,ax
c0006e30:	01 d0                	add    eax,edx
c0006e32:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e3a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006e3e:	74 64                	je     c0006ea4 <plug_holes+0x114>
c0006e40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e44:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0006e47:	0f b6 c0             	movzx  eax,al
c0006e4a:	85 c0                	test   eax,eax
c0006e4c:	75 56                	jne    c0006ea4 <plug_holes+0x114>
c0006e4e:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006e53:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006e57:	74 4b                	je     c0006ea4 <plug_holes+0x114>
c0006e59:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0006e5e:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006e62:	75 0c                	jne    c0006e70 <plug_holes+0xe0>
c0006e64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e68:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0006e6d:	8d 76 00             	lea    esi,[esi+0x0]
c0006e70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e74:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006e77:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0006e7b:	66 89 02             	mov    WORD PTR [edx],ax
c0006e7e:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006e83:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0006e87:	29 c2                	sub    edx,eax
c0006e89:	8b 0d a4 76 03 c0    	mov    ecx,DWORD PTR ds:0xc00376a4
c0006e8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e93:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006e96:	0f b7 c0             	movzx  eax,ax
c0006e99:	01 c1                	add    ecx,eax
c0006e9b:	89 d0                	mov    eax,edx
c0006e9d:	66 89 41 02          	mov    WORD PTR [ecx+0x2],ax
c0006ea1:	8d 76 00             	lea    esi,[esi+0x0]
c0006ea4:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0006eaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006eae:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0006eb2:	0f b7 c0             	movzx  eax,ax
c0006eb5:	01 d0                	add    eax,edx
c0006eb7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006ebb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ebf:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0006ec3:	74 57                	je     c0006f1c <plug_holes+0x18c>
c0006ec5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ec9:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0006ecc:	0f b6 c0             	movzx  eax,al
c0006ecf:	85 c0                	test   eax,eax
c0006ed1:	75 49                	jne    c0006f1c <plug_holes+0x18c>
c0006ed3:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0006ed8:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006edc:	75 0a                	jne    c0006ee8 <plug_holes+0x158>
c0006ede:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ee2:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0006ee7:	90                   	nop
c0006ee8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006eec:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006eef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ef3:	66 89 02             	mov    WORD PTR [edx],ax
c0006ef6:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006efb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006eff:	29 c2                	sub    edx,eax
c0006f01:	8b 0d a4 76 03 c0    	mov    ecx,DWORD PTR ds:0xc00376a4
c0006f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006f0b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006f0e:	0f b7 c0             	movzx  eax,ax
c0006f11:	01 c1                	add    ecx,eax
c0006f13:	89 d0                	mov    eax,edx
c0006f15:	66 89 41 02          	mov    WORD PTR [ecx+0x2],ax
c0006f19:	8d 76 00             	lea    esi,[esi+0x0]
c0006f1c:	90                   	nop
c0006f1d:	83 c4 1c             	add    esp,0x1c
c0006f20:	c3                   	ret    
c0006f21:	8d 76 00             	lea    esi,[esi+0x0]

c0006f24 <mem_init>:
c0006f24:	83 ec 1c             	sub    esp,0x1c
c0006f27:	c7 05 a4 76 03 c0 c0 60 03 c0 	mov    DWORD PTR ds:0xc00376a4,0xc00360c0
c0006f31:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006f36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006f3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f3e:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c0006f43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f47:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c0006f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f51:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0006f55:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006f5a:	05 40 06 00 00       	add    eax,0x640
c0006f5f:	a3 a0 76 03 c0       	mov    ds:0xc00376a0,eax
c0006f64:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006f69:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c0006f6d:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006f72:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c0006f77:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006f7c:	66 c7 40 02 40 06    	mov    WORD PTR [eax+0x2],0x640
c0006f82:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006f87:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0006f8c:	66 c7 05 c8 67 03 c0 40 06 	mov    WORD PTR ds:0xc00367c8,0x640
c0006f95:	83 ec 0c             	sub    esp,0xc
c0006f98:	68 98 76 03 c0       	push   0xc0037698
c0006f9d:	e8 9e 9c ff ff       	call   c0000c40 <sys_mutex_new>
c0006fa2:	83 c4 10             	add    esp,0x10
c0006fa5:	0f be c0             	movsx  eax,al
c0006fa8:	85 c0                	test   eax,eax
c0006faa:	74 18                	je     c0006fc4 <mem_init+0xa0>
c0006fac:	83 ec 08             	sub    esp,0x8
c0006faf:	68 88 f9 02 c0       	push   0xc002f988
c0006fb4:	68 46 f9 02 c0       	push   0xc002f946
c0006fb9:	e8 1e 8b 01 00       	call   c001fadc <CPrintf>
c0006fbe:	83 c4 10             	add    esp,0x10
c0006fc1:	8d 76 00             	lea    esi,[esi+0x0]
c0006fc4:	90                   	nop
c0006fc5:	83 c4 1c             	add    esp,0x1c
c0006fc8:	c3                   	ret    
c0006fc9:	8d 76 00             	lea    esi,[esi+0x0]

c0006fcc <mem_free>:
c0006fcc:	83 ec 1c             	sub    esp,0x1c
c0006fcf:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0006fd4:	0f 84 0e 01 00 00    	je     c00070e8 <mem_free+0x11c>
c0006fda:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006fdf:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006fe3:	72 0b                	jb     c0006ff0 <mem_free+0x24>
c0006fe5:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006fea:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006fee:	72 18                	jb     c0007008 <mem_free+0x3c>
c0006ff0:	83 ec 08             	sub    esp,0x8
c0006ff3:	68 a3 f9 02 c0       	push   0xc002f9a3
c0006ff8:	68 46 f9 02 c0       	push   0xc002f946
c0006ffd:	e8 da 8a 01 00       	call   c001fadc <CPrintf>
c0007002:	83 c4 10             	add    esp,0x10
c0007005:	8d 76 00             	lea    esi,[esi+0x0]
c0007008:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000700d:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007011:	72 0d                	jb     c0007020 <mem_free+0x54>
c0007013:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007018:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000701c:	72 22                	jb     c0007040 <mem_free+0x74>
c000701e:	66 90                	xchg   ax,ax
c0007020:	e8 a7 8a 01 00       	call   c001facc <CLockScheduler>
c0007025:	66 a1 d0 67 03 c0    	mov    ax,ds:0xc00367d0
c000702b:	83 c0 01             	add    eax,0x1
c000702e:	66 a3 d0 67 03 c0    	mov    ds:0xc00367d0,ax
c0007034:	e8 77 8a 01 00       	call   c001fab0 <CUnlockScheduler>
c0007039:	e9 ae 00 00 00       	jmp    c00070ec <mem_free+0x120>
c000703e:	66 90                	xchg   ax,ax
c0007040:	83 ec 0c             	sub    esp,0xc
c0007043:	68 98 76 03 c0       	push   0xc0037698
c0007048:	e8 f7 9b ff ff       	call   c0000c44 <sys_mutex_lock>
c000704d:	83 c4 10             	add    esp,0x10
c0007050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007054:	83 e8 06             	sub    eax,0x6
c0007057:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000705b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000705f:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007062:	0f b6 c0             	movzx  eax,al
c0007065:	85 c0                	test   eax,eax
c0007067:	75 17                	jne    c0007080 <mem_free+0xb4>
c0007069:	83 ec 08             	sub    esp,0x8
c000706c:	68 ba f9 02 c0       	push   0xc002f9ba
c0007071:	68 46 f9 02 c0       	push   0xc002f946
c0007076:	e8 61 8a 01 00       	call   c001fadc <CPrintf>
c000707b:	83 c4 10             	add    esp,0x10
c000707e:	66 90                	xchg   ax,ax
c0007080:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007084:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007088:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c000708d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0007091:	73 09                	jae    c000709c <mem_free+0xd0>
c0007093:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007097:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c000709c:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00070a2:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00070a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00070ac:	29 d1                	sub    ecx,edx
c00070ae:	89 ca                	mov    edx,ecx
c00070b0:	89 d1                	mov    ecx,edx
c00070b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00070b6:	66 8b 12             	mov    dx,WORD PTR [edx]
c00070b9:	29 d1                	sub    ecx,edx
c00070bb:	89 ca                	mov    edx,ecx
c00070bd:	01 d0                	add    eax,edx
c00070bf:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c00070c5:	83 ec 0c             	sub    esp,0xc
c00070c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070cc:	e8 bf fc ff ff       	call   c0006d90 <plug_holes>
c00070d1:	83 c4 10             	add    esp,0x10
c00070d4:	83 ec 0c             	sub    esp,0xc
c00070d7:	68 98 76 03 c0       	push   0xc0037698
c00070dc:	e8 67 9b ff ff       	call   c0000c48 <sys_mutex_unlock>
c00070e1:	83 c4 10             	add    esp,0x10
c00070e4:	eb 06                	jmp    c00070ec <mem_free+0x120>
c00070e6:	66 90                	xchg   ax,ax
c00070e8:	90                   	nop
c00070e9:	8d 76 00             	lea    esi,[esi+0x0]
c00070ec:	83 c4 1c             	add    esp,0x1c
c00070ef:	c3                   	ret    

c00070f0 <mem_trim>:
c00070f0:	83 ec 2c             	sub    esp,0x2c
c00070f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00070f7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00070fc:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007101:	83 f8 0b             	cmp    eax,0xb
c0007104:	77 0a                	ja     c0007110 <mem_trim+0x20>
c0007106:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c000710d:	8d 76 00             	lea    esi,[esi+0x0]
c0007110:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007115:	3d 40 06 00 00       	cmp    eax,0x640
c000711a:	76 0c                	jbe    c0007128 <mem_trim+0x38>
c000711c:	b8 00 00 00 00       	mov    eax,0x0
c0007121:	e9 d2 02 00 00       	jmp    c00073f8 <mem_trim+0x308>
c0007126:	66 90                	xchg   ax,ax
c0007128:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000712d:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007131:	72 0d                	jb     c0007140 <mem_trim+0x50>
c0007133:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007138:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000713c:	72 1a                	jb     c0007158 <mem_trim+0x68>
c000713e:	66 90                	xchg   ax,ax
c0007140:	83 ec 08             	sub    esp,0x8
c0007143:	68 ce f9 02 c0       	push   0xc002f9ce
c0007148:	68 46 f9 02 c0       	push   0xc002f946
c000714d:	e8 8a 89 01 00       	call   c001fadc <CPrintf>
c0007152:	83 c4 10             	add    esp,0x10
c0007155:	8d 76 00             	lea    esi,[esi+0x0]
c0007158:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000715d:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007161:	72 0d                	jb     c0007170 <mem_trim+0x80>
c0007163:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007168:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000716c:	72 26                	jb     c0007194 <mem_trim+0xa4>
c000716e:	66 90                	xchg   ax,ax
c0007170:	e8 57 89 01 00       	call   c001facc <CLockScheduler>
c0007175:	66 a1 d0 67 03 c0    	mov    ax,ds:0xc00367d0
c000717b:	83 c0 01             	add    eax,0x1
c000717e:	66 a3 d0 67 03 c0    	mov    ds:0xc00367d0,ax
c0007184:	e8 27 89 01 00       	call   c001fab0 <CUnlockScheduler>
c0007189:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000718d:	e9 66 02 00 00       	jmp    c00073f8 <mem_trim+0x308>
c0007192:	66 90                	xchg   ax,ax
c0007194:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007198:	83 e8 06             	sub    eax,0x6
c000719b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000719f:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00071a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00071a8:	29 c2                	sub    edx,eax
c00071aa:	89 d0                	mov    eax,edx
c00071ac:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00071b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00071b5:	66 8b 10             	mov    dx,WORD PTR [eax]
c00071b8:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00071bd:	89 d1                	mov    ecx,edx
c00071bf:	29 c1                	sub    ecx,eax
c00071c1:	89 c8                	mov    eax,ecx
c00071c3:	83 e8 06             	sub    eax,0x6
c00071c6:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00071cb:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00071d0:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00071d5:	39 c2                	cmp    edx,eax
c00071d7:	76 17                	jbe    c00071f0 <mem_trim+0x100>
c00071d9:	83 ec 08             	sub    esp,0x8
c00071dc:	68 2c fa 02 c0       	push   0xc002fa2c
c00071e1:	68 46 f9 02 c0       	push   0xc002f946
c00071e6:	e8 f1 88 01 00       	call   c001fadc <CPrintf>
c00071eb:	83 c4 10             	add    esp,0x10
c00071ee:	66 90                	xchg   ax,ax
c00071f0:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00071f5:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00071fa:	39 c2                	cmp    edx,eax
c00071fc:	76 0a                	jbe    c0007208 <mem_trim+0x118>
c00071fe:	b8 00 00 00 00       	mov    eax,0x0
c0007203:	e9 f0 01 00 00       	jmp    c00073f8 <mem_trim+0x308>
c0007208:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000720d:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0007212:	39 c2                	cmp    edx,eax
c0007214:	75 0a                	jne    c0007220 <mem_trim+0x130>
c0007216:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000721a:	e9 d9 01 00 00       	jmp    c00073f8 <mem_trim+0x308>
c000721f:	90                   	nop
c0007220:	83 ec 0c             	sub    esp,0xc
c0007223:	68 98 76 03 c0       	push   0xc0037698
c0007228:	e8 17 9a ff ff       	call   c0000c44 <sys_mutex_lock>
c000722d:	83 c4 10             	add    esp,0x10
c0007230:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007236:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000723a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000723d:	0f b7 c0             	movzx  eax,ax
c0007240:	01 d0                	add    eax,edx
c0007242:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007246:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000724a:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000724d:	0f b6 c0             	movzx  eax,al
c0007250:	85 c0                	test   eax,eax
c0007252:	0f 85 c4 00 00 00    	jne    c000731c <mem_trim+0x22c>
c0007258:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000725c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000725f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0007264:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0007269:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000726d:	01 d0                	add    eax,edx
c000726f:	83 c0 06             	add    eax,0x6
c0007272:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c0007277:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c000727c:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007280:	75 12                	jne    c0007294 <mem_trim+0x1a4>
c0007282:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007288:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c000728d:	01 d0                	add    eax,edx
c000728f:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0007294:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000729a:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c000729f:	01 d0                	add    eax,edx
c00072a1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00072a9:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00072ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00072b1:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00072b6:	66 89 02             	mov    WORD PTR [edx],ax
c00072b9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00072bd:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00072c2:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00072c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00072ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072ce:	66 89 02             	mov    WORD PTR [edx],ax
c00072d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00072d5:	66 8b 00             	mov    ax,WORD PTR [eax]
c00072d8:	0f b7 c0             	movzx  eax,ax
c00072db:	3d 40 06 00 00       	cmp    eax,0x640
c00072e0:	74 1a                	je     c00072fc <mem_trim+0x20c>
c00072e2:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00072e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00072ec:	66 8b 00             	mov    ax,WORD PTR [eax]
c00072ef:	0f b7 c0             	movzx  eax,ax
c00072f2:	01 c2                	add    edx,eax
c00072f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072f8:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00072fc:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007302:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007306:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000730a:	29 d1                	sub    ecx,edx
c000730c:	89 ca                	mov    edx,ecx
c000730e:	01 d0                	add    eax,edx
c0007310:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c0007316:	e9 c9 00 00 00       	jmp    c00073e4 <mem_trim+0x2f4>
c000731b:	90                   	nop
c000731c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007321:	8d 50 12             	lea    edx,[eax+0x12]
c0007324:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0007329:	39 c2                	cmp    edx,eax
c000732b:	0f 87 b3 00 00 00    	ja     c00073e4 <mem_trim+0x2f4>
c0007331:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0007336:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000733a:	01 d0                	add    eax,edx
c000733c:	83 c0 06             	add    eax,0x6
c000733f:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c0007344:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000734a:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c000734f:	01 d0                	add    eax,edx
c0007351:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007355:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c000735a:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000735e:	73 0c                	jae    c000736c <mem_trim+0x27c>
c0007360:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007364:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0007369:	8d 76 00             	lea    esi,[esi+0x0]
c000736c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007370:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007374:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007378:	66 8b 00             	mov    ax,WORD PTR [eax]
c000737b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000737f:	66 89 02             	mov    WORD PTR [edx],ax
c0007382:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007386:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000738b:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000738f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007397:	66 89 02             	mov    WORD PTR [edx],ax
c000739a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000739e:	66 8b 00             	mov    ax,WORD PTR [eax]
c00073a1:	0f b7 c0             	movzx  eax,ax
c00073a4:	3d 40 06 00 00       	cmp    eax,0x640
c00073a9:	74 1d                	je     c00073c8 <mem_trim+0x2d8>
c00073ab:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00073b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00073b5:	66 8b 00             	mov    ax,WORD PTR [eax]
c00073b8:	0f b7 c0             	movzx  eax,ax
c00073bb:	01 c2                	add    edx,eax
c00073bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00073c1:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00073c5:	8d 76 00             	lea    esi,[esi+0x0]
c00073c8:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00073ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00073d2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00073d6:	29 d1                	sub    ecx,edx
c00073d8:	89 ca                	mov    edx,ecx
c00073da:	01 d0                	add    eax,edx
c00073dc:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c00073e2:	66 90                	xchg   ax,ax
c00073e4:	83 ec 0c             	sub    esp,0xc
c00073e7:	68 98 76 03 c0       	push   0xc0037698
c00073ec:	e8 57 98 ff ff       	call   c0000c48 <sys_mutex_unlock>
c00073f1:	83 c4 10             	add    esp,0x10
c00073f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00073f8:	83 c4 2c             	add    esp,0x2c
c00073fb:	c3                   	ret    

c00073fc <mem_malloc>:
c00073fc:	53                   	push   ebx
c00073fd:	83 ec 28             	sub    esp,0x28
c0007400:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007404:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0007409:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000740e:	85 c0                	test   eax,eax
c0007410:	75 0a                	jne    c000741c <mem_malloc+0x20>
c0007412:	b8 00 00 00 00       	mov    eax,0x0
c0007417:	e9 f4 02 00 00       	jmp    c0007710 <mem_malloc+0x314>
c000741c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007421:	83 f8 0b             	cmp    eax,0xb
c0007424:	77 0a                	ja     c0007430 <mem_malloc+0x34>
c0007426:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c000742d:	8d 76 00             	lea    esi,[esi+0x0]
c0007430:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007435:	3d 40 06 00 00       	cmp    eax,0x640
c000743a:	76 0c                	jbe    c0007448 <mem_malloc+0x4c>
c000743c:	b8 00 00 00 00       	mov    eax,0x0
c0007441:	e9 ca 02 00 00       	jmp    c0007710 <mem_malloc+0x314>
c0007446:	66 90                	xchg   ax,ax
c0007448:	83 ec 0c             	sub    esp,0xc
c000744b:	68 98 76 03 c0       	push   0xc0037698
c0007450:	e8 ef 97 ff ff       	call   c0000c44 <sys_mutex_lock>
c0007455:	83 c4 10             	add    esp,0x10
c0007458:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c000745e:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007463:	29 c2                	sub    edx,eax
c0007465:	89 d0                	mov    eax,edx
c0007467:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000746c:	e9 5f 02 00 00       	jmp    c00076d0 <mem_malloc+0x2d4>
c0007471:	8d 76 00             	lea    esi,[esi+0x0]
c0007474:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000747a:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000747f:	01 d0                	add    eax,edx
c0007481:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007485:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007489:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000748c:	0f b6 c0             	movzx  eax,al
c000748f:	85 c0                	test   eax,eax
c0007491:	0f 85 21 02 00 00    	jne    c00076b8 <mem_malloc+0x2bc>
c0007497:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000749b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000749e:	0f b7 d0             	movzx  edx,ax
c00074a1:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00074a6:	29 c2                	sub    edx,eax
c00074a8:	89 d0                	mov    eax,edx
c00074aa:	8d 50 fa             	lea    edx,[eax-0x6]
c00074ad:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00074b2:	39 c2                	cmp    edx,eax
c00074b4:	0f 82 fe 01 00 00    	jb     c00076b8 <mem_malloc+0x2bc>
c00074ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074be:	66 8b 00             	mov    ax,WORD PTR [eax]
c00074c1:	0f b7 d0             	movzx  edx,ax
c00074c4:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00074c9:	29 c2                	sub    edx,eax
c00074cb:	89 d0                	mov    eax,edx
c00074cd:	8d 50 fa             	lea    edx,[eax-0x6]
c00074d0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00074d5:	83 c0 12             	add    eax,0x12
c00074d8:	39 c2                	cmp    edx,eax
c00074da:	0f 82 c4 00 00 00    	jb     c00075a4 <mem_malloc+0x1a8>
c00074e0:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c00074e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00074e9:	01 d0                	add    eax,edx
c00074eb:	83 c0 06             	add    eax,0x6
c00074ee:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00074f3:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00074f9:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c00074fe:	01 d0                	add    eax,edx
c0007500:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007508:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000750c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007510:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007513:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007517:	66 89 02             	mov    WORD PTR [edx],ax
c000751a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000751e:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0007523:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007527:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000752b:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0007530:	66 89 02             	mov    WORD PTR [edx],ax
c0007533:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007537:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c000753b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000753f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007542:	0f b7 c0             	movzx  eax,ax
c0007545:	3d 40 06 00 00       	cmp    eax,0x640
c000754a:	74 1c                	je     c0007568 <mem_malloc+0x16c>
c000754c:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007556:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007559:	0f b7 c0             	movzx  eax,ax
c000755c:	01 c2                	add    edx,eax
c000755e:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0007563:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007567:	90                   	nop
c0007568:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c000756e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007572:	01 d0                	add    eax,edx
c0007574:	83 c0 06             	add    eax,0x6
c0007577:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c000757d:	66 8b 15 cc 67 03 c0 	mov    dx,WORD PTR ds:0xc00367cc
c0007584:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c000758a:	0f b7 d2             	movzx  edx,dx
c000758d:	0f b7 c0             	movzx  eax,ax
c0007590:	39 c2                	cmp    edx,eax
c0007592:	73 60                	jae    c00075f4 <mem_malloc+0x1f8>
c0007594:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c000759a:	66 a3 cc 67 03 c0    	mov    ds:0xc00367cc,ax
c00075a0:	eb 52                	jmp    c00075f4 <mem_malloc+0x1f8>
c00075a2:	66 90                	xchg   ax,ax
c00075a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00075a8:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c00075ac:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00075b2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00075b6:	66 8b 12             	mov    dx,WORD PTR [edx]
c00075b9:	8b 0d a4 76 03 c0    	mov    ecx,DWORD PTR ds:0xc00376a4
c00075bf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00075c3:	29 cb                	sub    ebx,ecx
c00075c5:	89 d9                	mov    ecx,ebx
c00075c7:	29 ca                	sub    edx,ecx
c00075c9:	01 d0                	add    eax,edx
c00075cb:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c00075d1:	66 8b 15 cc 67 03 c0 	mov    dx,WORD PTR ds:0xc00367cc
c00075d8:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00075de:	0f b7 d2             	movzx  edx,dx
c00075e1:	0f b7 c0             	movzx  eax,ax
c00075e4:	39 c2                	cmp    edx,eax
c00075e6:	73 0c                	jae    c00075f4 <mem_malloc+0x1f8>
c00075e8:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00075ee:	66 a3 cc 67 03 c0    	mov    ds:0xc00367cc,ax
c00075f4:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00075f9:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00075fd:	75 71                	jne    c0007670 <mem_malloc+0x274>
c00075ff:	eb 1b                	jmp    c000761c <mem_malloc+0x220>
c0007601:	8d 76 00             	lea    esi,[esi+0x0]
c0007604:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000760a:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c000760f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007612:	0f b7 c0             	movzx  eax,ax
c0007615:	01 d0                	add    eax,edx
c0007617:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c000761c:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007621:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007624:	0f b6 c0             	movzx  eax,al
c0007627:	85 c0                	test   eax,eax
c0007629:	74 11                	je     c000763c <mem_malloc+0x240>
c000762b:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c0007631:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007636:	39 c2                	cmp    edx,eax
c0007638:	75 ca                	jne    c0007604 <mem_malloc+0x208>
c000763a:	66 90                	xchg   ax,ax
c000763c:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c0007642:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007647:	39 c2                	cmp    edx,eax
c0007649:	74 25                	je     c0007670 <mem_malloc+0x274>
c000764b:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007650:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007653:	0f b6 c0             	movzx  eax,al
c0007656:	85 c0                	test   eax,eax
c0007658:	74 16                	je     c0007670 <mem_malloc+0x274>
c000765a:	83 ec 08             	sub    esp,0x8
c000765d:	68 e5 f9 02 c0       	push   0xc002f9e5
c0007662:	68 46 f9 02 c0       	push   0xc002f946
c0007667:	e8 70 84 01 00       	call   c001fadc <CPrintf>
c000766c:	83 c4 10             	add    esp,0x10
c000766f:	90                   	nop
c0007670:	83 ec 0c             	sub    esp,0xc
c0007673:	68 98 76 03 c0       	push   0xc0037698
c0007678:	e8 cb 95 ff ff       	call   c0000c48 <sys_mutex_unlock>
c000767d:	83 c4 10             	add    esp,0x10
c0007680:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007685:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007689:	01 d0                	add    eax,edx
c000768b:	8d 50 06             	lea    edx,[eax+0x6]
c000768e:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007693:	39 c2                	cmp    edx,eax
c0007695:	76 15                	jbe    c00076ac <mem_malloc+0x2b0>
c0007697:	83 ec 08             	sub    esp,0x8
c000769a:	68 4c fa 02 c0       	push   0xc002fa4c
c000769f:	68 46 f9 02 c0       	push   0xc002f946
c00076a4:	e8 33 84 01 00       	call   c001fadc <CPrintf>
c00076a9:	83 c4 10             	add    esp,0x10
c00076ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076b0:	83 c0 06             	add    eax,0x6
c00076b3:	eb 5b                	jmp    c0007710 <mem_malloc+0x314>
c00076b5:	8d 76 00             	lea    esi,[esi+0x0]
c00076b8:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00076be:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00076c3:	01 d0                	add    eax,edx
c00076c5:	66 8b 00             	mov    ax,WORD PTR [eax]
c00076c8:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00076cd:	8d 76 00             	lea    esi,[esi+0x0]
c00076d0:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00076d5:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00076da:	b9 40 06 00 00       	mov    ecx,0x640
c00076df:	29 d1                	sub    ecx,edx
c00076e1:	89 ca                	mov    edx,ecx
c00076e3:	39 d0                	cmp    eax,edx
c00076e5:	0f 8c 89 fd ff ff    	jl     c0007474 <mem_malloc+0x78>
c00076eb:	66 a1 ce 67 03 c0    	mov    ax,ds:0xc00367ce
c00076f1:	83 c0 01             	add    eax,0x1
c00076f4:	66 a3 ce 67 03 c0    	mov    ds:0xc00367ce,ax
c00076fa:	83 ec 0c             	sub    esp,0xc
c00076fd:	68 98 76 03 c0       	push   0xc0037698
c0007702:	e8 41 95 ff ff       	call   c0000c48 <sys_mutex_unlock>
c0007707:	83 c4 10             	add    esp,0x10
c000770a:	b8 00 00 00 00       	mov    eax,0x0
c000770f:	90                   	nop
c0007710:	83 c4 28             	add    esp,0x28
c0007713:	5b                   	pop    ebx
c0007714:	c3                   	ret    
c0007715:	8d 76 00             	lea    esi,[esi+0x0]

c0007718 <mem_calloc>:
c0007718:	83 ec 2c             	sub    esp,0x2c
c000771b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000771f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007723:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0007728:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000772d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007731:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007735:	0f af c2             	imul   eax,edx
c0007738:	0f b7 c0             	movzx  eax,ax
c000773b:	83 ec 0c             	sub    esp,0xc
c000773e:	50                   	push   eax
c000773f:	e8 b8 fc ff ff       	call   c00073fc <mem_malloc>
c0007744:	83 c4 10             	add    esp,0x10
c0007747:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000774b:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0007750:	74 22                	je     c0007774 <mem_calloc+0x5c>
c0007752:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007757:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000775c:	0f af c2             	imul   eax,edx
c000775f:	83 ec 04             	sub    esp,0x4
c0007762:	50                   	push   eax
c0007763:	6a 00                	push   0x0
c0007765:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007769:	e8 82 8d ff ff       	call   c00004f0 <memset>
c000776e:	83 c4 10             	add    esp,0x10
c0007771:	8d 76 00             	lea    esi,[esi+0x0]
c0007774:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007778:	83 c4 2c             	add    esp,0x2c
c000777b:	c3                   	ret    

c000777c <memp_init>:
c000777c:	83 ec 10             	sub    esp,0x10
c000777f:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c0007786:	eb 78                	jmp    c0007800 <memp_init+0x84>
c0007788:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000778d:	89 d0                	mov    eax,edx
c000778f:	c1 e0 02             	shl    eax,0x2
c0007792:	01 d0                	add    eax,edx
c0007794:	01 c0                	add    eax,eax
c0007796:	05 d4 67 03 c0       	add    eax,0xc00367d4
c000779b:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c00077a0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00077a5:	89 d0                	mov    eax,edx
c00077a7:	c1 e0 02             	shl    eax,0x2
c00077aa:	01 d0                	add    eax,edx
c00077ac:	01 c0                	add    eax,eax
c00077ae:	05 d6 67 03 c0       	add    eax,0xc00367d6
c00077b3:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c00077b8:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00077bd:	89 d0                	mov    eax,edx
c00077bf:	c1 e0 02             	shl    eax,0x2
c00077c2:	01 d0                	add    eax,edx
c00077c4:	01 c0                	add    eax,eax
c00077c6:	05 d8 67 03 c0       	add    eax,0xc00367d8
c00077cb:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c00077d0:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00077d5:	0f b7 4c 24 0a       	movzx  ecx,WORD PTR [esp+0xa]
c00077da:	66 8b 94 00 9c fa 02 c0 	mov    dx,WORD PTR [eax+eax*1-0x3ffd0564]
c00077e2:	89 c8                	mov    eax,ecx
c00077e4:	c1 e0 02             	shl    eax,0x2
c00077e7:	01 c8                	add    eax,ecx
c00077e9:	01 c0                	add    eax,eax
c00077eb:	05 d2 67 03 c0       	add    eax,0xc00367d2
c00077f0:	66 89 10             	mov    WORD PTR [eax],dx
c00077f3:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00077f8:	83 c0 01             	add    eax,0x1
c00077fb:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0007800:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007805:	83 f8 0d             	cmp    eax,0xd
c0007808:	0f 86 7a ff ff ff    	jbe    c0007788 <memp_init+0xc>
c000780e:	c7 44 24 0c c0 76 03 c0 	mov    DWORD PTR [esp+0xc],0xc00376c0
c0007816:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c000781d:	e9 8a 00 00 00       	jmp    c00078ac <memp_init+0x130>
c0007822:	66 90                	xchg   ax,ax
c0007824:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007829:	c7 04 85 60 a8 03 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffc57a0],0x0
c0007834:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c000783b:	eb 47                	jmp    c0007884 <memp_init+0x108>
c000783d:	8d 76 00             	lea    esi,[esi+0x0]
c0007840:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007845:	8b 14 85 60 a8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc57a0]
c000784c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007850:	89 10                	mov    DWORD PTR [eax],edx
c0007852:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007857:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000785b:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c0007862:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007867:	66 8b 84 00 b8 fa 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd0548]
c000786f:	0f b7 c0             	movzx  eax,ax
c0007872:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0007876:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000787a:	83 c0 01             	add    eax,0x1
c000787d:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0007882:	66 90                	xchg   ax,ax
c0007884:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007889:	66 8b 84 00 9c fa 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd0564]
c0007891:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0007896:	0f b7 c0             	movzx  eax,ax
c0007899:	39 c2                	cmp    edx,eax
c000789b:	72 a3                	jb     c0007840 <memp_init+0xc4>
c000789d:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00078a2:	83 c0 01             	add    eax,0x1
c00078a5:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00078aa:	66 90                	xchg   ax,ax
c00078ac:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00078b1:	83 f8 0d             	cmp    eax,0xd
c00078b4:	0f 86 6a ff ff ff    	jbe    c0007824 <memp_init+0xa8>
c00078ba:	90                   	nop
c00078bb:	83 c4 10             	add    esp,0x10
c00078be:	c3                   	ret    
c00078bf:	90                   	nop

c00078c0 <memp_malloc>:
c00078c0:	83 ec 1c             	sub    esp,0x1c
c00078c3:	83 7c 24 20 0d       	cmp    DWORD PTR [esp+0x20],0xd
c00078c8:	76 22                	jbe    c00078ec <memp_malloc+0x2c>
c00078ca:	83 ec 08             	sub    esp,0x8
c00078cd:	68 7c fa 02 c0       	push   0xc002fa7c
c00078d2:	68 46 f9 02 c0       	push   0xc002f946
c00078d7:	e8 00 82 01 00       	call   c001fadc <CPrintf>
c00078dc:	83 c4 10             	add    esp,0x10
c00078df:	b8 00 00 00 00       	mov    eax,0x0
c00078e4:	e9 ff 00 00 00       	jmp    c00079e8 <memp_malloc+0x128>
c00078e9:	8d 76 00             	lea    esi,[esi+0x0]
c00078ec:	e8 db 81 01 00       	call   c001facc <CLockScheduler>
c00078f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00078f5:	8b 04 85 60 a8 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc57a0]
c00078fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007900:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007905:	0f 84 a1 00 00 00    	je     c00079ac <memp_malloc+0xec>
c000790b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000790f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007911:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007915:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c000791c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007920:	89 d0                	mov    eax,edx
c0007922:	c1 e0 02             	shl    eax,0x2
c0007925:	01 d0                	add    eax,edx
c0007927:	01 c0                	add    eax,eax
c0007929:	05 d4 67 03 c0       	add    eax,0xc00367d4
c000792e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007931:	83 c0 01             	add    eax,0x1
c0007934:	89 c2                	mov    edx,eax
c0007936:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000793a:	89 c8                	mov    eax,ecx
c000793c:	c1 e0 02             	shl    eax,0x2
c000793f:	01 c8                	add    eax,ecx
c0007941:	01 c0                	add    eax,eax
c0007943:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007948:	66 89 10             	mov    WORD PTR [eax],dx
c000794b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000794f:	89 d0                	mov    eax,edx
c0007951:	c1 e0 02             	shl    eax,0x2
c0007954:	01 d0                	add    eax,edx
c0007956:	01 c0                	add    eax,eax
c0007958:	05 d6 67 03 c0       	add    eax,0xc00367d6
c000795d:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007960:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007964:	89 c8                	mov    eax,ecx
c0007966:	c1 e0 02             	shl    eax,0x2
c0007969:	01 c8                	add    eax,ecx
c000796b:	01 c0                	add    eax,eax
c000796d:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007972:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007975:	0f b7 d2             	movzx  edx,dx
c0007978:	0f b7 c0             	movzx  eax,ax
c000797b:	39 c2                	cmp    edx,eax
c000797d:	73 5d                	jae    c00079dc <memp_malloc+0x11c>
c000797f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007983:	89 d0                	mov    eax,edx
c0007985:	c1 e0 02             	shl    eax,0x2
c0007988:	01 d0                	add    eax,edx
c000798a:	01 c0                	add    eax,eax
c000798c:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007991:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007994:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007998:	89 c8                	mov    eax,ecx
c000799a:	c1 e0 02             	shl    eax,0x2
c000799d:	01 c8                	add    eax,ecx
c000799f:	01 c0                	add    eax,eax
c00079a1:	05 d6 67 03 c0       	add    eax,0xc00367d6
c00079a6:	66 89 10             	mov    WORD PTR [eax],dx
c00079a9:	eb 31                	jmp    c00079dc <memp_malloc+0x11c>
c00079ab:	90                   	nop
c00079ac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00079b0:	89 d0                	mov    eax,edx
c00079b2:	c1 e0 02             	shl    eax,0x2
c00079b5:	01 d0                	add    eax,edx
c00079b7:	01 c0                	add    eax,eax
c00079b9:	05 d8 67 03 c0       	add    eax,0xc00367d8
c00079be:	66 8b 00             	mov    ax,WORD PTR [eax]
c00079c1:	83 c0 01             	add    eax,0x1
c00079c4:	89 c2                	mov    edx,eax
c00079c6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079ca:	89 c8                	mov    eax,ecx
c00079cc:	c1 e0 02             	shl    eax,0x2
c00079cf:	01 c8                	add    eax,ecx
c00079d1:	01 c0                	add    eax,eax
c00079d3:	05 d8 67 03 c0       	add    eax,0xc00367d8
c00079d8:	66 89 10             	mov    WORD PTR [eax],dx
c00079db:	90                   	nop
c00079dc:	e8 cf 80 01 00       	call   c001fab0 <CUnlockScheduler>
c00079e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079e5:	8d 76 00             	lea    esi,[esi+0x0]
c00079e8:	83 c4 1c             	add    esp,0x1c
c00079eb:	c3                   	ret    

c00079ec <memp_free>:
c00079ec:	83 ec 1c             	sub    esp,0x1c
c00079ef:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00079f4:	74 66                	je     c0007a5c <memp_free+0x70>
c00079f6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00079fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00079fe:	e8 c9 80 01 00       	call   c001facc <CLockScheduler>
c0007a03:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007a07:	89 d0                	mov    eax,edx
c0007a09:	c1 e0 02             	shl    eax,0x2
c0007a0c:	01 d0                	add    eax,edx
c0007a0e:	01 c0                	add    eax,eax
c0007a10:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007a15:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007a18:	83 e8 01             	sub    eax,0x1
c0007a1b:	89 c2                	mov    edx,eax
c0007a1d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a21:	89 c8                	mov    eax,ecx
c0007a23:	c1 e0 02             	shl    eax,0x2
c0007a26:	01 c8                	add    eax,ecx
c0007a28:	01 c0                	add    eax,eax
c0007a2a:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007a2f:	66 89 10             	mov    WORD PTR [eax],dx
c0007a32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a36:	8b 14 85 60 a8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc57a0]
c0007a3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a41:	89 10                	mov    DWORD PTR [eax],edx
c0007a43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a47:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007a4b:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c0007a52:	e8 59 80 01 00       	call   c001fab0 <CUnlockScheduler>
c0007a57:	eb 07                	jmp    c0007a60 <memp_free+0x74>
c0007a59:	8d 76 00             	lea    esi,[esi+0x0]
c0007a5c:	90                   	nop
c0007a5d:	8d 76 00             	lea    esi,[esi+0x0]
c0007a60:	83 c4 1c             	add    esp,0x1c
c0007a63:	c3                   	ret    

c0007a64 <netif_init>:
c0007a64:	90                   	nop
c0007a65:	c3                   	ret    
c0007a66:	66 90                	xchg   ax,ax

c0007a68 <netif_find>:
c0007a68:	83 ec 10             	sub    esp,0x10
c0007a6b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007a70:	75 0a                	jne    c0007a7c <netif_find+0x14>
c0007a72:	b8 00 00 00 00       	mov    eax,0x0
c0007a77:	e9 80 00 00 00       	jmp    c0007afc <netif_find+0x94>
c0007a7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007a80:	83 c0 02             	add    eax,0x2
c0007a83:	8a 00                	mov    al,BYTE PTR [eax]
c0007a85:	83 e8 30             	sub    eax,0x30
c0007a88:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0007a8c:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007a91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007a95:	eb 59                	jmp    c0007af0 <netif_find+0x88>
c0007a97:	90                   	nop
c0007a98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a9c:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0007a9f:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c0007aa4:	0f b6 c0             	movzx  eax,al
c0007aa7:	39 c2                	cmp    edx,eax
c0007aa9:	75 39                	jne    c0007ae4 <netif_find+0x7c>
c0007aab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007aaf:	8a 10                	mov    dl,BYTE PTR [eax]
c0007ab1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ab5:	8a 40 2a             	mov    al,BYTE PTR [eax+0x2a]
c0007ab8:	0f be d2             	movsx  edx,dl
c0007abb:	0f be c0             	movsx  eax,al
c0007abe:	39 c2                	cmp    edx,eax
c0007ac0:	75 22                	jne    c0007ae4 <netif_find+0x7c>
c0007ac2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007ac6:	83 c0 01             	add    eax,0x1
c0007ac9:	8a 10                	mov    dl,BYTE PTR [eax]
c0007acb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007acf:	8a 40 2b             	mov    al,BYTE PTR [eax+0x2b]
c0007ad2:	0f be d2             	movsx  edx,dl
c0007ad5:	0f be c0             	movsx  eax,al
c0007ad8:	39 c2                	cmp    edx,eax
c0007ada:	75 08                	jne    c0007ae4 <netif_find+0x7c>
c0007adc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ae0:	eb 1a                	jmp    c0007afc <netif_find+0x94>
c0007ae2:	66 90                	xchg   ax,ax
c0007ae4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ae8:	8b 00                	mov    eax,DWORD PTR [eax]
c0007aea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007aee:	66 90                	xchg   ax,ax
c0007af0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007af5:	75 a1                	jne    c0007a98 <netif_find+0x30>
c0007af7:	b8 00 00 00 00       	mov    eax,0x0
c0007afc:	83 c4 10             	add    esp,0x10
c0007aff:	c3                   	ret    

c0007b00 <netif_set_ipaddr>:
c0007b00:	83 ec 1c             	sub    esp,0x1c
c0007b03:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007b07:	8b 10                	mov    edx,DWORD PTR [eax]
c0007b09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b0d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007b10:	39 c2                	cmp    edx,eax
c0007b12:	0f 84 bc 00 00 00    	je     c0007bd4 <netif_set_ipaddr+0xd4>
c0007b18:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0007b1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b21:	eb 45                	jmp    c0007b68 <netif_set_ipaddr+0x68>
c0007b23:	90                   	nop
c0007b24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b28:	8b 10                	mov    edx,DWORD PTR [eax]
c0007b2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007b31:	39 c2                	cmp    edx,eax
c0007b33:	75 27                	jne    c0007b5c <netif_set_ipaddr+0x5c>
c0007b35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b39:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007b3c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007b40:	83 ec 0c             	sub    esp,0xc
c0007b43:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007b47:	e8 7c 36 00 00       	call   c000b1c8 <tcp_abort>
c0007b4c:	83 c4 10             	add    esp,0x10
c0007b4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007b53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b57:	eb 0f                	jmp    c0007b68 <netif_set_ipaddr+0x68>
c0007b59:	8d 76 00             	lea    esi,[esi+0x0]
c0007b5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b60:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007b63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b67:	90                   	nop
c0007b68:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007b6d:	75 b5                	jne    c0007b24 <netif_set_ipaddr+0x24>
c0007b6f:	a1 78 68 03 c0       	mov    eax,ds:0xc0036878
c0007b74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b78:	eb 52                	jmp    c0007bcc <netif_set_ipaddr+0xcc>
c0007b7a:	66 90                	xchg   ax,ax
c0007b7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b80:	85 c0                	test   eax,eax
c0007b82:	74 3c                	je     c0007bc0 <netif_set_ipaddr+0xc0>
c0007b84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b88:	8b 00                	mov    eax,DWORD PTR [eax]
c0007b8a:	85 c0                	test   eax,eax
c0007b8c:	74 32                	je     c0007bc0 <netif_set_ipaddr+0xc0>
c0007b8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b92:	8b 10                	mov    edx,DWORD PTR [eax]
c0007b94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007b9b:	39 c2                	cmp    edx,eax
c0007b9d:	75 21                	jne    c0007bc0 <netif_set_ipaddr+0xc0>
c0007b9f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007ba4:	74 0a                	je     c0007bb0 <netif_set_ipaddr+0xb0>
c0007ba6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007baa:	8b 00                	mov    eax,DWORD PTR [eax]
c0007bac:	eb 0a                	jmp    c0007bb8 <netif_set_ipaddr+0xb8>
c0007bae:	66 90                	xchg   ax,ax
c0007bb0:	b8 00 00 00 00       	mov    eax,0x0
c0007bb5:	8d 76 00             	lea    esi,[esi+0x0]
c0007bb8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007bbc:	89 02                	mov    DWORD PTR [edx],eax
c0007bbe:	66 90                	xchg   ax,ax
c0007bc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007bc7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bcb:	90                   	nop
c0007bcc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007bd1:	75 a9                	jne    c0007b7c <netif_set_ipaddr+0x7c>
c0007bd3:	90                   	nop
c0007bd4:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007bd9:	74 09                	je     c0007be4 <netif_set_ipaddr+0xe4>
c0007bdb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007bdf:	8b 00                	mov    eax,DWORD PTR [eax]
c0007be1:	eb 09                	jmp    c0007bec <netif_set_ipaddr+0xec>
c0007be3:	90                   	nop
c0007be4:	b8 00 00 00 00       	mov    eax,0x0
c0007be9:	8d 76 00             	lea    esi,[esi+0x0]
c0007bec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007bf0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0007bf3:	90                   	nop
c0007bf4:	83 c4 1c             	add    esp,0x1c
c0007bf7:	c3                   	ret    

c0007bf8 <netif_set_gw>:
c0007bf8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007bfd:	74 09                	je     c0007c08 <netif_set_gw+0x10>
c0007bff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c03:	8b 00                	mov    eax,DWORD PTR [eax]
c0007c05:	eb 09                	jmp    c0007c10 <netif_set_gw+0x18>
c0007c07:	90                   	nop
c0007c08:	b8 00 00 00 00       	mov    eax,0x0
c0007c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0007c10:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007c14:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0007c17:	90                   	nop
c0007c18:	c3                   	ret    
c0007c19:	8d 76 00             	lea    esi,[esi+0x0]

c0007c1c <netif_set_netmask>:
c0007c1c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007c21:	74 09                	je     c0007c2c <netif_set_netmask+0x10>
c0007c23:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c27:	8b 00                	mov    eax,DWORD PTR [eax]
c0007c29:	eb 09                	jmp    c0007c34 <netif_set_netmask+0x18>
c0007c2b:	90                   	nop
c0007c2c:	b8 00 00 00 00       	mov    eax,0x0
c0007c31:	8d 76 00             	lea    esi,[esi+0x0]
c0007c34:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007c38:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0007c3b:	90                   	nop
c0007c3c:	c3                   	ret    
c0007c3d:	8d 76 00             	lea    esi,[esi+0x0]

c0007c40 <netif_set_addr>:
c0007c40:	83 ec 0c             	sub    esp,0xc
c0007c43:	83 ec 08             	sub    esp,0x8
c0007c46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007c4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007c4e:	e8 ad fe ff ff       	call   c0007b00 <netif_set_ipaddr>
c0007c53:	83 c4 10             	add    esp,0x10
c0007c56:	83 ec 08             	sub    esp,0x8
c0007c59:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007c5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007c61:	e8 b6 ff ff ff       	call   c0007c1c <netif_set_netmask>
c0007c66:	83 c4 10             	add    esp,0x10
c0007c69:	83 ec 08             	sub    esp,0x8
c0007c6c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007c70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007c74:	e8 7f ff ff ff       	call   c0007bf8 <netif_set_gw>
c0007c79:	83 c4 10             	add    esp,0x10
c0007c7c:	90                   	nop
c0007c7d:	83 c4 0c             	add    esp,0xc
c0007c80:	c3                   	ret    
c0007c81:	8d 76 00             	lea    esi,[esi+0x0]

c0007c84 <netif_add>:
c0007c84:	83 ec 0c             	sub    esp,0xc
c0007c87:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007c8c:	75 16                	jne    c0007ca4 <netif_add+0x20>
c0007c8e:	83 ec 08             	sub    esp,0x8
c0007c91:	68 d4 fa 02 c0       	push   0xc002fad4
c0007c96:	68 46 f9 02 c0       	push   0xc002f946
c0007c9b:	e8 3c 7e 01 00       	call   c001fadc <CPrintf>
c0007ca0:	83 c4 10             	add    esp,0x10
c0007ca3:	90                   	nop
c0007ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ca8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0007caf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cb3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0007cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cbe:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0007cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cc9:	c6 40 29 00          	mov    BYTE PTR [eax+0x29],0x0
c0007ccd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cd1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007cd5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0007cd8:	a0 98 a8 03 c0       	mov    al,ds:0xc003a898
c0007cdd:	8d 50 01             	lea    edx,[eax+0x1]
c0007ce0:	88 15 98 a8 03 c0    	mov    BYTE PTR ds:0xc003a898,dl
c0007ce6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007cea:	88 42 2c             	mov    BYTE PTR [edx+0x2c],al
c0007ced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cf1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007cf5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0007cf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007cfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d08:	e8 33 ff ff ff       	call   c0007c40 <netif_set_addr>
c0007d0d:	83 c4 10             	add    esp,0x10
c0007d10:	83 ec 0c             	sub    esp,0xc
c0007d13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d17:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007d1b:	ff d0                	call   eax
c0007d1d:	83 c4 10             	add    esp,0x10
c0007d20:	0f be c0             	movsx  eax,al
c0007d23:	85 c0                	test   eax,eax
c0007d25:	74 09                	je     c0007d30 <netif_add+0xac>
c0007d27:	b8 00 00 00 00       	mov    eax,0x0
c0007d2c:	eb 1e                	jmp    c0007d4c <netif_add+0xc8>
c0007d2e:	66 90                	xchg   ax,ax
c0007d30:	8b 15 10 67 03 c0    	mov    edx,DWORD PTR ds:0xc0036710
c0007d36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d3a:	89 10                	mov    DWORD PTR [eax],edx
c0007d3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d40:	a3 10 67 03 c0       	mov    ds:0xc0036710,eax
c0007d45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d49:	8d 76 00             	lea    esi,[esi+0x0]
c0007d4c:	83 c4 0c             	add    esp,0xc
c0007d4f:	c3                   	ret    

c0007d50 <netif_set_default>:
c0007d50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d54:	a3 14 67 03 c0       	mov    ds:0xc0036714,eax
c0007d59:	90                   	nop
c0007d5a:	c3                   	ret    
c0007d5b:	90                   	nop

c0007d5c <netif_set_up>:
c0007d5c:	83 ec 0c             	sub    esp,0xc
c0007d5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d63:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007d66:	0f b6 c0             	movzx  eax,al
c0007d69:	83 e0 01             	and    eax,0x1
c0007d6c:	75 4a                	jne    c0007db8 <netif_set_up+0x5c>
c0007d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d72:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007d75:	83 c8 01             	or     eax,0x1
c0007d78:	88 c2                	mov    dl,al
c0007d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d7e:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007d81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d85:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007d88:	0f b6 c0             	movzx  eax,al
c0007d8b:	83 e0 10             	and    eax,0x10
c0007d8e:	74 28                	je     c0007db8 <netif_set_up+0x5c>
c0007d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d94:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007d97:	0f b6 c0             	movzx  eax,al
c0007d9a:	83 e0 20             	and    eax,0x20
c0007d9d:	74 19                	je     c0007db8 <netif_set_up+0x5c>
c0007d9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007da3:	83 c0 04             	add    eax,0x4
c0007da6:	83 ec 08             	sub    esp,0x8
c0007da9:	50                   	push   eax
c0007daa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dae:	e8 bd a5 00 00       	call   c0012370 <etharp_request>
c0007db3:	83 c4 10             	add    esp,0x10
c0007db6:	66 90                	xchg   ax,ax
c0007db8:	90                   	nop
c0007db9:	83 c4 0c             	add    esp,0xc
c0007dbc:	c3                   	ret    
c0007dbd:	8d 76 00             	lea    esi,[esi+0x0]

c0007dc0 <netif_set_down>:
c0007dc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dc4:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007dc7:	0f b6 c0             	movzx  eax,al
c0007dca:	83 e0 01             	and    eax,0x1
c0007dcd:	74 15                	je     c0007de4 <netif_set_down+0x24>
c0007dcf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dd3:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007dd6:	83 e0 fe             	and    eax,0xfffffffe
c0007dd9:	88 c2                	mov    dl,al
c0007ddb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ddf:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007de2:	66 90                	xchg   ax,ax
c0007de4:	90                   	nop
c0007de5:	c3                   	ret    
c0007de6:	66 90                	xchg   ax,ax

c0007de8 <netif_remove>:
c0007de8:	83 ec 10             	sub    esp,0x10
c0007deb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007df0:	0f 84 92 00 00 00    	je     c0007e88 <netif_remove+0xa0>
c0007df6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007dfa:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007dfd:	83 e0 01             	and    eax,0x1
c0007e00:	0f b6 c0             	movzx  eax,al
c0007e03:	85 c0                	test   eax,eax
c0007e05:	74 0d                	je     c0007e14 <netif_remove+0x2c>
c0007e07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e0b:	e8 b0 ff ff ff       	call   c0007dc0 <netif_set_down>
c0007e10:	83 c4 04             	add    esp,0x4
c0007e13:	90                   	nop
c0007e14:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007e19:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007e1d:	75 0d                	jne    c0007e2c <netif_remove+0x44>
c0007e1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007e23:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e25:	a3 10 67 03 c0       	mov    ds:0xc0036710,eax
c0007e2a:	eb 44                	jmp    c0007e70 <netif_remove+0x88>
c0007e2c:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007e31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007e35:	eb 29                	jmp    c0007e60 <netif_remove+0x78>
c0007e37:	90                   	nop
c0007e38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e3e:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007e42:	75 10                	jne    c0007e54 <netif_remove+0x6c>
c0007e44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007e48:	8b 10                	mov    edx,DWORD PTR [eax]
c0007e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e4e:	89 10                	mov    DWORD PTR [eax],edx
c0007e50:	eb 16                	jmp    c0007e68 <netif_remove+0x80>
c0007e52:	66 90                	xchg   ax,ax
c0007e54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e58:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007e5e:	66 90                	xchg   ax,ax
c0007e60:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007e65:	75 d1                	jne    c0007e38 <netif_remove+0x50>
c0007e67:	90                   	nop
c0007e68:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007e6d:	74 1d                	je     c0007e8c <netif_remove+0xa4>
c0007e6f:	90                   	nop
c0007e70:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0007e75:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007e79:	75 15                	jne    c0007e90 <netif_remove+0xa8>
c0007e7b:	6a 00                	push   0x0
c0007e7d:	e8 ce fe ff ff       	call   c0007d50 <netif_set_default>
c0007e82:	83 c4 04             	add    esp,0x4
c0007e85:	eb 09                	jmp    c0007e90 <netif_remove+0xa8>
c0007e87:	90                   	nop
c0007e88:	90                   	nop
c0007e89:	eb 05                	jmp    c0007e90 <netif_remove+0xa8>
c0007e8b:	90                   	nop
c0007e8c:	90                   	nop
c0007e8d:	8d 76 00             	lea    esi,[esi+0x0]
c0007e90:	83 c4 10             	add    esp,0x10
c0007e93:	c3                   	ret    

c0007e94 <netif_set_link_up>:
c0007e94:	83 ec 0c             	sub    esp,0xc
c0007e97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e9b:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e9e:	0f b6 c0             	movzx  eax,al
c0007ea1:	83 e0 10             	and    eax,0x10
c0007ea4:	75 4a                	jne    c0007ef0 <netif_set_link_up+0x5c>
c0007ea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007eaa:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007ead:	83 c8 10             	or     eax,0x10
c0007eb0:	88 c2                	mov    dl,al
c0007eb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007eb6:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007eb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ebd:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007ec0:	0f b6 c0             	movzx  eax,al
c0007ec3:	83 e0 01             	and    eax,0x1
c0007ec6:	74 28                	je     c0007ef0 <netif_set_link_up+0x5c>
c0007ec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ecc:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007ecf:	0f b6 c0             	movzx  eax,al
c0007ed2:	83 e0 20             	and    eax,0x20
c0007ed5:	74 19                	je     c0007ef0 <netif_set_link_up+0x5c>
c0007ed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007edb:	83 c0 04             	add    eax,0x4
c0007ede:	83 ec 08             	sub    esp,0x8
c0007ee1:	50                   	push   eax
c0007ee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ee6:	e8 85 a4 00 00       	call   c0012370 <etharp_request>
c0007eeb:	83 c4 10             	add    esp,0x10
c0007eee:	66 90                	xchg   ax,ax
c0007ef0:	90                   	nop
c0007ef1:	83 c4 0c             	add    esp,0xc
c0007ef4:	c3                   	ret    
c0007ef5:	8d 76 00             	lea    esi,[esi+0x0]

c0007ef8 <netif_set_link_down>:
c0007ef8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007efc:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007eff:	0f b6 c0             	movzx  eax,al
c0007f02:	83 e0 10             	and    eax,0x10
c0007f05:	74 15                	je     c0007f1c <netif_set_link_down+0x24>
c0007f07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f0b:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007f0e:	83 e0 ef             	and    eax,0xffffffef
c0007f11:	88 c2                	mov    dl,al
c0007f13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f17:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007f1a:	66 90                	xchg   ax,ax
c0007f1c:	90                   	nop
c0007f1d:	c3                   	ret    
c0007f1e:	66 90                	xchg   ax,ax

c0007f20 <pbuf_free_ooseq>:
c0007f20:	83 ec 1c             	sub    esp,0x1c
c0007f23:	e8 a4 7b 01 00       	call   c001facc <CLockScheduler>
c0007f28:	c6 05 99 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a899,0x0
c0007f2f:	e8 7c 7b 01 00       	call   c001fab0 <CUnlockScheduler>
c0007f34:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0007f39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f3d:	eb 41                	jmp    c0007f80 <pbuf_free_ooseq+0x60>
c0007f3f:	90                   	nop
c0007f40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f44:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c0007f4a:	85 c0                	test   eax,eax
c0007f4c:	74 26                	je     c0007f74 <pbuf_free_ooseq+0x54>
c0007f4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f52:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c0007f58:	83 ec 0c             	sub    esp,0xc
c0007f5b:	50                   	push   eax
c0007f5c:	e8 03 20 00 00       	call   c0009f64 <tcp_segs_free>
c0007f61:	83 c4 10             	add    esp,0x10
c0007f64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f68:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c0007f72:	eb 14                	jmp    c0007f88 <pbuf_free_ooseq+0x68>
c0007f74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f78:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007f7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f7f:	90                   	nop
c0007f80:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007f85:	75 b9                	jne    c0007f40 <pbuf_free_ooseq+0x20>
c0007f87:	90                   	nop
c0007f88:	83 c4 1c             	add    esp,0x1c
c0007f8b:	c3                   	ret    

c0007f8c <pbuf_pool_is_empty>:
c0007f8c:	83 ec 1c             	sub    esp,0x1c
c0007f8f:	e8 38 7b 01 00       	call   c001facc <CLockScheduler>
c0007f94:	a0 99 a8 03 c0       	mov    al,ds:0xc003a899
c0007f99:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0007f9d:	c6 05 99 a8 03 c0 01 	mov    BYTE PTR ds:0xc003a899,0x1
c0007fa4:	e8 07 7b 01 00       	call   c001fab0 <CUnlockScheduler>
c0007fa9:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0007fae:	85 c0                	test   eax,eax
c0007fb0:	75 2e                	jne    c0007fe0 <pbuf_pool_is_empty+0x54>
c0007fb2:	83 ec 04             	sub    esp,0x4
c0007fb5:	6a 00                	push   0x0
c0007fb7:	6a 00                	push   0x0
c0007fb9:	68 20 7f 00 c0       	push   0xc0007f20
c0007fbe:	e8 89 8c ff ff       	call   c0000c4c <tcpip_callback_with_block>
c0007fc3:	83 c4 10             	add    esp,0x10
c0007fc6:	0f be c0             	movsx  eax,al
c0007fc9:	85 c0                	test   eax,eax
c0007fcb:	74 13                	je     c0007fe0 <pbuf_pool_is_empty+0x54>
c0007fcd:	e8 fa 7a 01 00       	call   c001facc <CLockScheduler>
c0007fd2:	c6 05 99 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a899,0x0
c0007fd9:	e8 d2 7a 01 00       	call   c001fab0 <CUnlockScheduler>
c0007fde:	66 90                	xchg   ax,ax
c0007fe0:	90                   	nop
c0007fe1:	83 c4 1c             	add    esp,0x1c
c0007fe4:	c3                   	ret    
c0007fe5:	8d 76 00             	lea    esi,[esi+0x0]

c0007fe8 <pbuf_alloced_custom>:
c0007fe8:	83 ec 2c             	sub    esp,0x2c
c0007feb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0007fef:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0007ff3:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0007ff8:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0007ffd:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c0008004:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0008009:	74 29                	je     c0008034 <pbuf_alloced_custom+0x4c>
c000800b:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008010:	74 12                	je     c0008024 <pbuf_alloced_custom+0x3c>
c0008012:	83 7c 24 30 02       	cmp    DWORD PTR [esp+0x30],0x2
c0008017:	74 2b                	je     c0008044 <pbuf_alloced_custom+0x5c>
c0008019:	83 7c 24 30 03       	cmp    DWORD PTR [esp+0x30],0x3
c000801e:	74 54                	je     c0008074 <pbuf_alloced_custom+0x8c>
c0008020:	eb 32                	jmp    c0008054 <pbuf_alloced_custom+0x6c>
c0008022:	66 90                	xchg   ax,ax
c0008024:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008029:	83 c0 14             	add    eax,0x14
c000802c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008031:	8d 76 00             	lea    esi,[esi+0x0]
c0008034:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008039:	83 c0 14             	add    eax,0x14
c000803c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008041:	8d 76 00             	lea    esi,[esi+0x0]
c0008044:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008049:	83 c0 0e             	add    eax,0xe
c000804c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008051:	eb 25                	jmp    c0008078 <pbuf_alloced_custom+0x90>
c0008053:	90                   	nop
c0008054:	83 ec 08             	sub    esp,0x8
c0008057:	68 ec fa 02 c0       	push   0xc002faec
c000805c:	68 46 f9 02 c0       	push   0xc002f946
c0008061:	e8 76 7a 01 00       	call   c001fadc <CPrintf>
c0008066:	83 c4 10             	add    esp,0x10
c0008069:	b8 00 00 00 00       	mov    eax,0x0
c000806e:	e9 95 00 00 00       	jmp    c0008108 <pbuf_alloced_custom+0x120>
c0008073:	90                   	nop
c0008074:	90                   	nop
c0008075:	8d 76 00             	lea    esi,[esi+0x0]
c0008078:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000807d:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0008082:	01 c2                	add    edx,eax
c0008084:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008089:	39 c2                	cmp    edx,eax
c000808b:	7d 07                	jge    c0008094 <pbuf_alloced_custom+0xac>
c000808d:	b8 00 00 00 00       	mov    eax,0x0
c0008092:	eb 74                	jmp    c0008108 <pbuf_alloced_custom+0x120>
c0008094:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008098:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000809e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00080a3:	74 17                	je     c00080bc <pbuf_alloced_custom+0xd4>
c00080a5:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00080aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080ae:	01 c2                	add    edx,eax
c00080b0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00080b4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00080b7:	eb 0f                	jmp    c00080c8 <pbuf_alloced_custom+0xe0>
c00080b9:	8d 76 00             	lea    esi,[esi+0x0]
c00080bc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00080c0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00080c7:	90                   	nop
c00080c8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00080cc:	c6 40 0d 02          	mov    BYTE PTR [eax+0xd],0x2
c00080d0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00080d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00080d8:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c00080dc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00080e0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00080e3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00080e7:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00080eb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00080ef:	88 c2                	mov    dl,al
c00080f1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00080f5:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00080f8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00080fc:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c0008102:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008106:	66 90                	xchg   ax,ax
c0008108:	83 c4 2c             	add    esp,0x2c
c000810b:	c3                   	ret    

c000810c <pbuf_header>:
c000810c:	83 ec 2c             	sub    esp,0x2c
c000810f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008113:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008118:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000811d:	75 15                	jne    c0008134 <pbuf_header+0x28>
c000811f:	83 ec 08             	sub    esp,0x8
c0008122:	68 76 fd 02 c0       	push   0xc002fd76
c0008127:	68 46 f9 02 c0       	push   0xc002f946
c000812c:	e8 ab 79 01 00       	call   c001fadc <CPrintf>
c0008131:	83 c4 10             	add    esp,0x10
c0008134:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c0008139:	85 c0                	test   eax,eax
c000813b:	74 07                	je     c0008144 <pbuf_header+0x38>
c000813d:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008142:	75 08                	jne    c000814c <pbuf_header+0x40>
c0008144:	b0 00                	mov    al,0x0
c0008146:	e9 59 01 00 00       	jmp    c00082a4 <pbuf_header+0x198>
c000814b:	90                   	nop
c000814c:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c0008151:	85 c0                	test   eax,eax
c0008153:	79 3b                	jns    c0008190 <pbuf_header+0x84>
c0008155:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008159:	f7 d8                	neg    eax
c000815b:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008160:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008164:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008168:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000816d:	0f b7 c0             	movzx  eax,ax
c0008170:	39 c2                	cmp    edx,eax
c0008172:	76 28                	jbe    c000819c <pbuf_header+0x90>
c0008174:	83 ec 08             	sub    esp,0x8
c0008177:	68 c7 fc 02 c0       	push   0xc002fcc7
c000817c:	68 46 f9 02 c0       	push   0xc002f946
c0008181:	e8 56 79 01 00       	call   c001fadc <CPrintf>
c0008186:	83 c4 10             	add    esp,0x10
c0008189:	b0 01                	mov    al,0x1
c000818b:	e9 14 01 00 00       	jmp    c00082a4 <pbuf_header+0x198>
c0008190:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008194:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008199:	8d 76 00             	lea    esi,[esi+0x0]
c000819c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00081a0:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00081a3:	0f b6 c0             	movzx  eax,al
c00081a6:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c00081ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00081af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00081b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00081b6:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00081bb:	85 c0                	test   eax,eax
c00081bd:	74 0d                	je     c00081cc <pbuf_header+0xc0>
c00081bf:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00081c4:	83 f8 03             	cmp    eax,0x3
c00081c7:	75 3f                	jne    c0008208 <pbuf_header+0xfc>
c00081c9:	8d 76 00             	lea    esi,[esi+0x0]
c00081cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00081d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00081d3:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c00081d8:	f7 da                	neg    edx
c00081da:	01 c2                	add    edx,eax
c00081dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00081e0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00081e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00081e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00081ea:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00081ee:	83 c2 10             	add    edx,0x10
c00081f1:	39 d0                	cmp    eax,edx
c00081f3:	73 7f                	jae    c0008274 <pbuf_header+0x168>
c00081f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00081f9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00081fd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008200:	b0 01                	mov    al,0x1
c0008202:	e9 9d 00 00 00       	jmp    c00082a4 <pbuf_header+0x198>
c0008207:	90                   	nop
c0008208:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000820d:	83 f8 02             	cmp    eax,0x2
c0008210:	74 0a                	je     c000821c <pbuf_header+0x110>
c0008212:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008217:	83 f8 01             	cmp    eax,0x1
c000821a:	75 3c                	jne    c0008258 <pbuf_header+0x14c>
c000821c:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c0008221:	85 c0                	test   eax,eax
c0008223:	79 2f                	jns    c0008254 <pbuf_header+0x148>
c0008225:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008229:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000822d:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0008232:	0f b7 c0             	movzx  eax,ax
c0008235:	39 c2                	cmp    edx,eax
c0008237:	77 1b                	ja     c0008254 <pbuf_header+0x148>
c0008239:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000823d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008240:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c0008245:	f7 da                	neg    edx
c0008247:	01 c2                	add    edx,eax
c0008249:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000824d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008250:	eb 22                	jmp    c0008274 <pbuf_header+0x168>
c0008252:	66 90                	xchg   ax,ax
c0008254:	b0 01                	mov    al,0x1
c0008256:	eb 4c                	jmp    c00082a4 <pbuf_header+0x198>
c0008258:	83 ec 08             	sub    esp,0x8
c000825b:	68 e5 fc 02 c0       	push   0xc002fce5
c0008260:	68 46 f9 02 c0       	push   0xc002f946
c0008265:	e8 72 78 01 00       	call   c001fadc <CPrintf>
c000826a:	83 c4 10             	add    esp,0x10
c000826d:	b0 01                	mov    al,0x1
c000826f:	eb 33                	jmp    c00082a4 <pbuf_header+0x198>
c0008271:	8d 76 00             	lea    esi,[esi+0x0]
c0008274:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008278:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000827c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008280:	01 d0                	add    eax,edx
c0008282:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008286:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c000828a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000828e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008291:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008295:	01 d0                	add    eax,edx
c0008297:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000829b:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000829f:	b0 00                	mov    al,0x0
c00082a1:	8d 76 00             	lea    esi,[esi+0x0]
c00082a4:	83 c4 2c             	add    esp,0x2c
c00082a7:	c3                   	ret    

c00082a8 <pbuf_free>:
c00082a8:	83 ec 1c             	sub    esp,0x1c
c00082ab:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00082b0:	75 26                	jne    c00082d8 <pbuf_free+0x30>
c00082b2:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00082b7:	75 17                	jne    c00082d0 <pbuf_free+0x28>
c00082b9:	83 ec 08             	sub    esp,0x8
c00082bc:	68 76 fd 02 c0       	push   0xc002fd76
c00082c1:	68 46 f9 02 c0       	push   0xc002f946
c00082c6:	e8 11 78 01 00       	call   c001fadc <CPrintf>
c00082cb:	83 c4 10             	add    esp,0x10
c00082ce:	66 90                	xchg   ax,ax
c00082d0:	b0 00                	mov    al,0x0
c00082d2:	e9 a5 01 00 00       	jmp    c000847c <pbuf_free+0x1d4>
c00082d7:	90                   	nop
c00082d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082dc:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00082df:	0f b6 c0             	movzx  eax,al
c00082e2:	85 c0                	test   eax,eax
c00082e4:	74 42                	je     c0008328 <pbuf_free+0x80>
c00082e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082ea:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00082ed:	0f b6 c0             	movzx  eax,al
c00082f0:	83 f8 01             	cmp    eax,0x1
c00082f3:	74 33                	je     c0008328 <pbuf_free+0x80>
c00082f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082f9:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00082fc:	0f b6 c0             	movzx  eax,al
c00082ff:	83 f8 02             	cmp    eax,0x2
c0008302:	74 24                	je     c0008328 <pbuf_free+0x80>
c0008304:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008308:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c000830b:	0f b6 c0             	movzx  eax,al
c000830e:	83 f8 03             	cmp    eax,0x3
c0008311:	74 15                	je     c0008328 <pbuf_free+0x80>
c0008313:	83 ec 08             	sub    esp,0x8
c0008316:	68 f3 fc 02 c0       	push   0xc002fcf3
c000831b:	68 46 f9 02 c0       	push   0xc002f946
c0008320:	e8 b7 77 01 00       	call   c001fadc <CPrintf>
c0008325:	83 c4 10             	add    esp,0x10
c0008328:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000832d:	e9 3a 01 00 00       	jmp    c000846c <pbuf_free+0x1c4>
c0008332:	66 90                	xchg   ax,ax
c0008334:	e8 93 77 01 00       	call   c001facc <CLockScheduler>
c0008339:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000833d:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008341:	0f b7 c0             	movzx  eax,ax
c0008344:	85 c0                	test   eax,eax
c0008346:	75 18                	jne    c0008360 <pbuf_free+0xb8>
c0008348:	83 ec 08             	sub    esp,0x8
c000834b:	68 08 fd 02 c0       	push   0xc002fd08
c0008350:	68 46 f9 02 c0       	push   0xc002f946
c0008355:	e8 82 77 01 00       	call   c001fadc <CPrintf>
c000835a:	83 c4 10             	add    esp,0x10
c000835d:	8d 76 00             	lea    esi,[esi+0x0]
c0008360:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008364:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008368:	83 e8 01             	sub    eax,0x1
c000836b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000836f:	66 89 42 0e          	mov    WORD PTR [edx+0xe],ax
c0008373:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008377:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000837b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008380:	e8 2b 77 01 00       	call   c001fab0 <CUnlockScheduler>
c0008385:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000838a:	85 c0                	test   eax,eax
c000838c:	0f 85 d2 00 00 00    	jne    c0008464 <pbuf_free+0x1bc>
c0008392:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008396:	8b 00                	mov    eax,DWORD PTR [eax]
c0008398:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000839c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083a0:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00083a3:	0f b6 c0             	movzx  eax,al
c00083a6:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083af:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00083b2:	0f b6 c0             	movzx  eax,al
c00083b5:	83 e0 02             	and    eax,0x2
c00083b8:	74 3a                	je     c00083f4 <pbuf_free+0x14c>
c00083ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083be:	89 04 24             	mov    DWORD PTR [esp],eax
c00083c1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083c4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00083c7:	85 c0                	test   eax,eax
c00083c9:	75 15                	jne    c00083e0 <pbuf_free+0x138>
c00083cb:	83 ec 08             	sub    esp,0x8
c00083ce:	68 10 fb 02 c0       	push   0xc002fb10
c00083d3:	68 46 f9 02 c0       	push   0xc002f946
c00083d8:	e8 ff 76 01 00       	call   c001fadc <CPrintf>
c00083dd:	83 c4 10             	add    esp,0x10
c00083e0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00083e6:	83 ec 0c             	sub    esp,0xc
c00083e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00083ed:	ff d0                	call   eax
c00083ef:	83 c4 10             	add    esp,0x10
c00083f2:	eb 58                	jmp    c000844c <pbuf_free+0x1a4>
c00083f4:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00083f9:	83 f8 03             	cmp    eax,0x3
c00083fc:	75 16                	jne    c0008414 <pbuf_free+0x16c>
c00083fe:	83 ec 08             	sub    esp,0x8
c0008401:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008405:	6a 0d                	push   0xd
c0008407:	e8 e0 f5 ff ff       	call   c00079ec <memp_free>
c000840c:	83 c4 10             	add    esp,0x10
c000840f:	eb 3b                	jmp    c000844c <pbuf_free+0x1a4>
c0008411:	8d 76 00             	lea    esi,[esi+0x0]
c0008414:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008419:	83 f8 01             	cmp    eax,0x1
c000841c:	74 0a                	je     c0008428 <pbuf_free+0x180>
c000841e:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008423:	83 f8 02             	cmp    eax,0x2
c0008426:	75 14                	jne    c000843c <pbuf_free+0x194>
c0008428:	83 ec 08             	sub    esp,0x8
c000842b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000842f:	6a 0c                	push   0xc
c0008431:	e8 b6 f5 ff ff       	call   c00079ec <memp_free>
c0008436:	83 c4 10             	add    esp,0x10
c0008439:	eb 11                	jmp    c000844c <pbuf_free+0x1a4>
c000843b:	90                   	nop
c000843c:	83 ec 0c             	sub    esp,0xc
c000843f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008443:	e8 84 eb ff ff       	call   c0006fcc <mem_free>
c0008448:	83 c4 10             	add    esp,0x10
c000844b:	90                   	nop
c000844c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008450:	83 c0 01             	add    eax,0x1
c0008453:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008457:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000845b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000845f:	eb 0b                	jmp    c000846c <pbuf_free+0x1c4>
c0008461:	8d 76 00             	lea    esi,[esi+0x0]
c0008464:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000846c:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008471:	0f 85 bd fe ff ff    	jne    c0008334 <pbuf_free+0x8c>
c0008477:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000847b:	90                   	nop
c000847c:	83 c4 1c             	add    esp,0x1c
c000847f:	c3                   	ret    

c0008480 <pbuf_alloc>:
c0008480:	83 ec 3c             	sub    esp,0x3c
c0008483:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0008487:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000848c:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c0008493:	83 7c 24 40 01       	cmp    DWORD PTR [esp+0x40],0x1
c0008498:	74 2a                	je     c00084c4 <pbuf_alloc+0x44>
c000849a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000849f:	74 13                	je     c00084b4 <pbuf_alloc+0x34>
c00084a1:	83 7c 24 40 02       	cmp    DWORD PTR [esp+0x40],0x2
c00084a6:	74 2c                	je     c00084d4 <pbuf_alloc+0x54>
c00084a8:	83 7c 24 40 03       	cmp    DWORD PTR [esp+0x40],0x3
c00084ad:	74 55                	je     c0008504 <pbuf_alloc+0x84>
c00084af:	eb 33                	jmp    c00084e4 <pbuf_alloc+0x64>
c00084b1:	8d 76 00             	lea    esi,[esi+0x0]
c00084b4:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00084b9:	83 c0 14             	add    eax,0x14
c00084bc:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c00084c1:	8d 76 00             	lea    esi,[esi+0x0]
c00084c4:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00084c9:	83 c0 14             	add    eax,0x14
c00084cc:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c00084d1:	8d 76 00             	lea    esi,[esi+0x0]
c00084d4:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00084d9:	83 c0 0e             	add    eax,0xe
c00084dc:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c00084e1:	eb 25                	jmp    c0008508 <pbuf_alloc+0x88>
c00084e3:	90                   	nop
c00084e4:	83 ec 08             	sub    esp,0x8
c00084e7:	68 1e fd 02 c0       	push   0xc002fd1e
c00084ec:	68 46 f9 02 c0       	push   0xc002f946
c00084f1:	e8 e6 75 01 00       	call   c001fadc <CPrintf>
c00084f6:	83 c4 10             	add    esp,0x10
c00084f9:	b8 00 00 00 00       	mov    eax,0x0
c00084fe:	e9 71 03 00 00       	jmp    c0008874 <pbuf_alloc+0x3f4>
c0008503:	90                   	nop
c0008504:	90                   	nop
c0008505:	8d 76 00             	lea    esi,[esi+0x0]
c0008508:	83 7c 24 48 02       	cmp    DWORD PTR [esp+0x48],0x2
c000850d:	77 11                	ja     c0008520 <pbuf_alloc+0xa0>
c000850f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0008514:	0f 85 c6 02 00 00    	jne    c00087e0 <pbuf_alloc+0x360>
c000851a:	e9 41 02 00 00       	jmp    c0008760 <pbuf_alloc+0x2e0>
c000851f:	90                   	nop
c0008520:	83 7c 24 48 03       	cmp    DWORD PTR [esp+0x48],0x3
c0008525:	0f 85 15 03 00 00    	jne    c0008840 <pbuf_alloc+0x3c0>
c000852b:	83 ec 0c             	sub    esp,0xc
c000852e:	6a 0d                	push   0xd
c0008530:	e8 8b f3 ff ff       	call   c00078c0 <memp_malloc>
c0008535:	83 c4 10             	add    esp,0x10
c0008538:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000853c:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0008541:	75 11                	jne    c0008554 <pbuf_alloc+0xd4>
c0008543:	e8 44 fa ff ff       	call   c0007f8c <pbuf_pool_is_empty>
c0008548:	b8 00 00 00 00       	mov    eax,0x0
c000854d:	e9 22 03 00 00       	jmp    c0008874 <pbuf_alloc+0x3f4>
c0008552:	66 90                	xchg   ax,ax
c0008554:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008558:	88 c2                	mov    dl,al
c000855a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000855e:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008561:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008565:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000856b:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008570:	8d 50 10             	lea    edx,[eax+0x10]
c0008573:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008577:	01 c2                	add    edx,eax
c0008579:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000857d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008580:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008584:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008588:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000858c:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008591:	ba 4e 02 00 00       	mov    edx,0x24e
c0008596:	29 c2                	sub    edx,eax
c0008598:	89 d0                	mov    eax,edx
c000859a:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000859f:	39 d0                	cmp    eax,edx
c00085a1:	7e 05                	jle    c00085a8 <pbuf_alloc+0x128>
c00085a3:	89 d0                	mov    eax,edx
c00085a5:	8d 76 00             	lea    esi,[esi+0x0]
c00085a8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00085ac:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00085b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00085b4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00085b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00085bb:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00085bf:	0f b7 c0             	movzx  eax,ax
c00085c2:	01 c2                	add    edx,eax
c00085c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00085c8:	05 5e 02 00 00       	add    eax,0x25e
c00085cd:	39 c2                	cmp    edx,eax
c00085cf:	76 17                	jbe    c00085e8 <pbuf_alloc+0x168>
c00085d1:	83 ec 08             	sub    esp,0x8
c00085d4:	68 34 fb 02 c0       	push   0xc002fb34
c00085d9:	68 46 f9 02 c0       	push   0xc002f946
c00085de:	e8 f9 74 01 00       	call   c001fadc <CPrintf>
c00085e3:	83 c4 10             	add    esp,0x10
c00085e6:	66 90                	xchg   ax,ax
c00085e8:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00085ed:	ba 4e 02 00 00       	mov    edx,0x24e
c00085f2:	29 c2                	sub    edx,eax
c00085f4:	89 d0                	mov    eax,edx
c00085f6:	85 c0                	test   eax,eax
c00085f8:	7f 16                	jg     c0008610 <pbuf_alloc+0x190>
c00085fa:	83 ec 08             	sub    esp,0x8
c00085fd:	68 68 fb 02 c0       	push   0xc002fb68
c0008602:	68 46 f9 02 c0       	push   0xc002f946
c0008607:	e8 d0 74 01 00       	call   c001fadc <CPrintf>
c000860c:	83 c4 10             	add    esp,0x10
c000860f:	90                   	nop
c0008610:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008614:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c000861a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000861e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0008622:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008627:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000862b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000862f:	0f b7 c0             	movzx  eax,ax
c0008632:	29 c2                	sub    edx,eax
c0008634:	89 d0                	mov    eax,edx
c0008636:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000863a:	e9 11 01 00 00       	jmp    c0008750 <pbuf_alloc+0x2d0>
c000863f:	90                   	nop
c0008640:	83 ec 0c             	sub    esp,0xc
c0008643:	6a 0d                	push   0xd
c0008645:	e8 76 f2 ff ff       	call   c00078c0 <memp_malloc>
c000864a:	83 c4 10             	add    esp,0x10
c000864d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008651:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008656:	75 20                	jne    c0008678 <pbuf_alloc+0x1f8>
c0008658:	e8 2f f9 ff ff       	call   c0007f8c <pbuf_pool_is_empty>
c000865d:	83 ec 0c             	sub    esp,0xc
c0008660:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008664:	e8 3f fc ff ff       	call   c00082a8 <pbuf_free>
c0008669:	83 c4 10             	add    esp,0x10
c000866c:	b8 00 00 00 00       	mov    eax,0x0
c0008671:	e9 fe 01 00 00       	jmp    c0008874 <pbuf_alloc+0x3f4>
c0008676:	66 90                	xchg   ax,ax
c0008678:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000867c:	88 c2                	mov    dl,al
c000867e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008682:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008685:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008689:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c000868d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008691:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008697:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000869b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000869f:	89 10                	mov    DWORD PTR [eax],edx
c00086a1:	81 7c 24 20 fe ff 00 00 	cmp    DWORD PTR [esp+0x20],0xfffe
c00086a9:	7e 15                	jle    c00086c0 <pbuf_alloc+0x240>
c00086ab:	83 ec 08             	sub    esp,0x8
c00086ae:	68 39 fd 02 c0       	push   0xc002fd39
c00086b3:	68 46 f9 02 c0       	push   0xc002f946
c00086b8:	e8 1f 74 01 00       	call   c001fadc <CPrintf>
c00086bd:	83 c4 10             	add    esp,0x10
c00086c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00086c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00086c8:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c00086cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00086d0:	0f b7 d0             	movzx  edx,ax
c00086d3:	81 fa 4e 02 00 00    	cmp    edx,0x24e
c00086d9:	76 05                	jbe    c00086e0 <pbuf_alloc+0x260>
c00086db:	b8 4e 02 00 00       	mov    eax,0x24e
c00086e0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00086e4:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00086e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00086ec:	8d 50 10             	lea    edx,[eax+0x10]
c00086ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00086f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00086f6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00086fa:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00086fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008701:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008705:	0f b7 c0             	movzx  eax,ax
c0008708:	01 c2                	add    edx,eax
c000870a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000870e:	05 5e 02 00 00       	add    eax,0x25e
c0008713:	39 c2                	cmp    edx,eax
c0008715:	76 15                	jbe    c000872c <pbuf_alloc+0x2ac>
c0008717:	83 ec 08             	sub    esp,0x8
c000871a:	68 34 fb 02 c0       	push   0xc002fb34
c000871f:	68 46 f9 02 c0       	push   0xc002f946
c0008724:	e8 b3 73 01 00       	call   c001fadc <CPrintf>
c0008729:	83 c4 10             	add    esp,0x10
c000872c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008730:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c0008736:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000873a:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000873e:	0f b7 c0             	movzx  eax,ax
c0008741:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c0008745:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008749:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000874d:	8d 76 00             	lea    esi,[esi+0x0]
c0008750:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008755:	0f 8f e5 fe ff ff    	jg     c0008640 <pbuf_alloc+0x1c0>
c000875b:	e9 fc 00 00 00       	jmp    c000885c <pbuf_alloc+0x3dc>
c0008760:	66 8b 54 24 26       	mov    dx,WORD PTR [esp+0x26]
c0008765:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008769:	01 d0                	add    eax,edx
c000876b:	83 c0 10             	add    eax,0x10
c000876e:	0f b7 c0             	movzx  eax,ax
c0008771:	83 ec 0c             	sub    esp,0xc
c0008774:	50                   	push   eax
c0008775:	e8 82 ec ff ff       	call   c00073fc <mem_malloc>
c000877a:	83 c4 10             	add    esp,0x10
c000877d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0008781:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0008786:	75 0c                	jne    c0008794 <pbuf_alloc+0x314>
c0008788:	b8 00 00 00 00       	mov    eax,0x0
c000878d:	e9 e2 00 00 00       	jmp    c0008874 <pbuf_alloc+0x3f4>
c0008792:	66 90                	xchg   ax,ax
c0008794:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008799:	8d 50 10             	lea    edx,[eax+0x10]
c000879c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087a0:	01 c2                	add    edx,eax
c00087a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087a6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00087a9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00087ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087b1:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c00087b5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087b9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00087bc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00087c0:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00087c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087c8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00087ce:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00087d2:	88 c2                	mov    dl,al
c00087d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087d8:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00087db:	eb 7f                	jmp    c000885c <pbuf_alloc+0x3dc>
c00087dd:	8d 76 00             	lea    esi,[esi+0x0]
c00087e0:	83 ec 0c             	sub    esp,0xc
c00087e3:	6a 0c                	push   0xc
c00087e5:	e8 d6 f0 ff ff       	call   c00078c0 <memp_malloc>
c00087ea:	83 c4 10             	add    esp,0x10
c00087ed:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00087f1:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00087f6:	75 08                	jne    c0008800 <pbuf_alloc+0x380>
c00087f8:	b8 00 00 00 00       	mov    eax,0x0
c00087fd:	eb 75                	jmp    c0008874 <pbuf_alloc+0x3f4>
c00087ff:	90                   	nop
c0008800:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008804:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000880b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000880f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008813:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008817:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000881b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000881e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008822:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008826:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000882a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008830:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008834:	88 c2                	mov    dl,al
c0008836:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000883a:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c000883d:	eb 1d                	jmp    c000885c <pbuf_alloc+0x3dc>
c000883f:	90                   	nop
c0008840:	83 ec 08             	sub    esp,0x8
c0008843:	68 4d fd 02 c0       	push   0xc002fd4d
c0008848:	68 46 f9 02 c0       	push   0xc002f946
c000884d:	e8 8a 72 01 00       	call   c001fadc <CPrintf>
c0008852:	83 c4 10             	add    esp,0x10
c0008855:	b8 00 00 00 00       	mov    eax,0x0
c000885a:	eb 18                	jmp    c0008874 <pbuf_alloc+0x3f4>
c000885c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008860:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c0008866:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000886a:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c000886e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008872:	66 90                	xchg   ax,ax
c0008874:	83 c4 3c             	add    esp,0x3c
c0008877:	c3                   	ret    

c0008878 <pbuf_realloc>:
c0008878:	83 ec 2c             	sub    esp,0x2c
c000887b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000887f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008884:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008889:	75 15                	jne    c00088a0 <pbuf_realloc+0x28>
c000888b:	83 ec 08             	sub    esp,0x8
c000888e:	68 68 fd 02 c0       	push   0xc002fd68
c0008893:	68 46 f9 02 c0       	push   0xc002f946
c0008898:	e8 3f 72 01 00       	call   c001fadc <CPrintf>
c000889d:	83 c4 10             	add    esp,0x10
c00088a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00088a4:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00088a7:	0f b6 c0             	movzx  eax,al
c00088aa:	83 f8 03             	cmp    eax,0x3
c00088ad:	74 41                	je     c00088f0 <pbuf_realloc+0x78>
c00088af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00088b3:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00088b6:	0f b6 c0             	movzx  eax,al
c00088b9:	83 f8 01             	cmp    eax,0x1
c00088bc:	74 32                	je     c00088f0 <pbuf_realloc+0x78>
c00088be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00088c2:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00088c5:	0f b6 c0             	movzx  eax,al
c00088c8:	85 c0                	test   eax,eax
c00088ca:	74 24                	je     c00088f0 <pbuf_realloc+0x78>
c00088cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00088d0:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00088d3:	0f b6 c0             	movzx  eax,al
c00088d6:	83 f8 02             	cmp    eax,0x2
c00088d9:	74 15                	je     c00088f0 <pbuf_realloc+0x78>
c00088db:	83 ec 08             	sub    esp,0x8
c00088de:	68 80 fd 02 c0       	push   0xc002fd80
c00088e3:	68 46 f9 02 c0       	push   0xc002f946
c00088e8:	e8 ef 71 01 00       	call   c001fadc <CPrintf>
c00088ed:	83 c4 10             	add    esp,0x10
c00088f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00088f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00088f7:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00088fc:	0f b7 c0             	movzx  eax,ax
c00088ff:	39 c2                	cmp    edx,eax
c0008901:	0f 83 6d 01 00 00    	jae    c0008a74 <pbuf_realloc+0x1fc>
c0008907:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000890c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008910:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008913:	0f b7 c0             	movzx  eax,ax
c0008916:	29 c2                	sub    edx,eax
c0008918:	89 d0                	mov    eax,edx
c000891a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000891e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008922:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0008927:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000892b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000892f:	eb 77                	jmp    c00089a8 <pbuf_realloc+0x130>
c0008931:	8d 76 00             	lea    esi,[esi+0x0]
c0008934:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008938:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000893c:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0008941:	89 d1                	mov    ecx,edx
c0008943:	29 c1                	sub    ecx,eax
c0008945:	89 c8                	mov    eax,ecx
c0008947:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000894c:	81 7c 24 14 fe ff 00 00 	cmp    DWORD PTR [esp+0x14],0xfffe
c0008954:	7e 16                	jle    c000896c <pbuf_realloc+0xf4>
c0008956:	83 ec 08             	sub    esp,0x8
c0008959:	68 9b fd 02 c0       	push   0xc002fd9b
c000895e:	68 46 f9 02 c0       	push   0xc002f946
c0008963:	e8 74 71 01 00       	call   c001fadc <CPrintf>
c0008968:	83 c4 10             	add    esp,0x10
c000896b:	90                   	nop
c000896c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008970:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008973:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008977:	01 d0                	add    eax,edx
c0008979:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000897d:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008981:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008985:	8b 00                	mov    eax,DWORD PTR [eax]
c0008987:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000898b:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008990:	75 16                	jne    c00089a8 <pbuf_realloc+0x130>
c0008992:	83 ec 08             	sub    esp,0x8
c0008995:	68 ac fd 02 c0       	push   0xc002fdac
c000899a:	68 46 f9 02 c0       	push   0xc002f946
c000899f:	e8 38 71 01 00       	call   c001fadc <CPrintf>
c00089a4:	83 c4 10             	add    esp,0x10
c00089a7:	90                   	nop
c00089a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089ac:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00089b0:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c00089b5:	0f b7 c0             	movzx  eax,ax
c00089b8:	39 c2                	cmp    edx,eax
c00089ba:	0f 87 74 ff ff ff    	ja     c0008934 <pbuf_realloc+0xbc>
c00089c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089c4:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00089c7:	0f b6 c0             	movzx  eax,al
c00089ca:	85 c0                	test   eax,eax
c00089cc:	75 5e                	jne    c0008a2c <pbuf_realloc+0x1b4>
c00089ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089d2:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00089d6:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c00089db:	0f b7 c0             	movzx  eax,ax
c00089de:	39 c2                	cmp    edx,eax
c00089e0:	74 4a                	je     c0008a2c <pbuf_realloc+0x1b4>
c00089e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00089e9:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c00089ed:	89 c2                	mov    edx,eax
c00089ef:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00089f4:	01 d0                	add    eax,edx
c00089f6:	0f b7 c0             	movzx  eax,ax
c00089f9:	83 ec 08             	sub    esp,0x8
c00089fc:	50                   	push   eax
c00089fd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008a01:	e8 ea e6 ff ff       	call   c00070f0 <mem_trim>
c0008a06:	83 c4 10             	add    esp,0x10
c0008a09:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008a0d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008a12:	75 18                	jne    c0008a2c <pbuf_realloc+0x1b4>
c0008a14:	83 ec 08             	sub    esp,0x8
c0008a17:	68 c4 fd 02 c0       	push   0xc002fdc4
c0008a1c:	68 46 f9 02 c0       	push   0xc002f946
c0008a21:	e8 b6 70 01 00       	call   c001fadc <CPrintf>
c0008a26:	83 c4 10             	add    esp,0x10
c0008a29:	8d 76 00             	lea    esi,[esi+0x0]
c0008a2c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008a30:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0008a35:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008a39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a3d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008a41:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008a45:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008a49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0008a4f:	85 c0                	test   eax,eax
c0008a51:	74 15                	je     c0008a68 <pbuf_realloc+0x1f0>
c0008a53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a57:	8b 00                	mov    eax,DWORD PTR [eax]
c0008a59:	83 ec 0c             	sub    esp,0xc
c0008a5c:	50                   	push   eax
c0008a5d:	e8 46 f8 ff ff       	call   c00082a8 <pbuf_free>
c0008a62:	83 c4 10             	add    esp,0x10
c0008a65:	8d 76 00             	lea    esi,[esi+0x0]
c0008a68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a6c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a72:	eb 04                	jmp    c0008a78 <pbuf_realloc+0x200>
c0008a74:	90                   	nop
c0008a75:	8d 76 00             	lea    esi,[esi+0x0]
c0008a78:	83 c4 2c             	add    esp,0x2c
c0008a7b:	c3                   	ret    

c0008a7c <pbuf_clen>:
c0008a7c:	83 ec 10             	sub    esp,0x10
c0008a7f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008a84:	eb 1a                	jmp    c0008aa0 <pbuf_clen+0x24>
c0008a86:	66 90                	xchg   ax,ax
c0008a88:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008a8c:	83 c0 01             	add    eax,0x1
c0008a8f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008a93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0008a99:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0008aa0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008aa5:	75 e1                	jne    c0008a88 <pbuf_clen+0xc>
c0008aa7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008aab:	83 c4 10             	add    esp,0x10
c0008aae:	c3                   	ret    
c0008aaf:	90                   	nop

c0008ab0 <pbuf_ref>:
c0008ab0:	83 ec 0c             	sub    esp,0xc
c0008ab3:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0008ab8:	74 1e                	je     c0008ad8 <pbuf_ref+0x28>
c0008aba:	e8 0d 70 01 00       	call   c001facc <CLockScheduler>
c0008abf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ac3:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008ac7:	83 c0 01             	add    eax,0x1
c0008aca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008ace:	66 89 42 0e          	mov    WORD PTR [edx+0xe],ax
c0008ad2:	e8 d9 6f 01 00       	call   c001fab0 <CUnlockScheduler>
c0008ad7:	90                   	nop
c0008ad8:	90                   	nop
c0008ad9:	83 c4 0c             	add    esp,0xc
c0008adc:	c3                   	ret    
c0008add:	8d 76 00             	lea    esi,[esi+0x0]

c0008ae0 <pbuf_cat>:
c0008ae0:	83 ec 1c             	sub    esp,0x1c
c0008ae3:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008ae8:	74 0a                	je     c0008af4 <pbuf_cat+0x14>
c0008aea:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008aef:	75 1f                	jne    c0008b10 <pbuf_cat+0x30>
c0008af1:	8d 76 00             	lea    esi,[esi+0x0]
c0008af4:	83 ec 08             	sub    esp,0x8
c0008af7:	68 9c fb 02 c0       	push   0xc002fb9c
c0008afc:	68 46 f9 02 c0       	push   0xc002f946
c0008b01:	e8 d6 6f 01 00       	call   c001fadc <CPrintf>
c0008b06:	83 c4 10             	add    esp,0x10
c0008b09:	e9 ae 00 00 00       	jmp    c0008bbc <pbuf_cat+0xdc>
c0008b0e:	66 90                	xchg   ax,ax
c0008b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008b18:	eb 26                	jmp    c0008b40 <pbuf_cat+0x60>
c0008b1a:	66 90                	xchg   ax,ax
c0008b1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b20:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008b23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008b27:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008b2a:	01 d0                	add    eax,edx
c0008b2c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008b30:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008b34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b38:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008b3e:	66 90                	xchg   ax,ax
c0008b40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b44:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b46:	85 c0                	test   eax,eax
c0008b48:	75 d2                	jne    c0008b1c <pbuf_cat+0x3c>
c0008b4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b4e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008b51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b55:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008b59:	0f b7 d2             	movzx  edx,dx
c0008b5c:	0f b7 c0             	movzx  eax,ax
c0008b5f:	39 c2                	cmp    edx,eax
c0008b61:	74 15                	je     c0008b78 <pbuf_cat+0x98>
c0008b63:	83 ec 08             	sub    esp,0x8
c0008b66:	68 d4 fb 02 c0       	push   0xc002fbd4
c0008b6b:	68 46 f9 02 c0       	push   0xc002f946
c0008b70:	e8 67 6f 01 00       	call   c001fadc <CPrintf>
c0008b75:	83 c4 10             	add    esp,0x10
c0008b78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b7e:	85 c0                	test   eax,eax
c0008b80:	74 16                	je     c0008b98 <pbuf_cat+0xb8>
c0008b82:	83 ec 08             	sub    esp,0x8
c0008b85:	68 e0 fd 02 c0       	push   0xc002fde0
c0008b8a:	68 46 f9 02 c0       	push   0xc002f946
c0008b8f:	e8 48 6f 01 00       	call   c001fadc <CPrintf>
c0008b94:	83 c4 10             	add    esp,0x10
c0008b97:	90                   	nop
c0008b98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b9c:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008b9f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008ba3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008ba6:	01 d0                	add    eax,edx
c0008ba8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008bac:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008bb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008bb4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008bb8:	89 10                	mov    DWORD PTR [eax],edx
c0008bba:	66 90                	xchg   ax,ax
c0008bbc:	83 c4 1c             	add    esp,0x1c
c0008bbf:	c3                   	ret    

c0008bc0 <pbuf_chain>:
c0008bc0:	83 ec 0c             	sub    esp,0xc
c0008bc3:	83 ec 08             	sub    esp,0x8
c0008bc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008bca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008bce:	e8 0d ff ff ff       	call   c0008ae0 <pbuf_cat>
c0008bd3:	83 c4 10             	add    esp,0x10
c0008bd6:	83 ec 0c             	sub    esp,0xc
c0008bd9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008bdd:	e8 ce fe ff ff       	call   c0008ab0 <pbuf_ref>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	90                   	nop
c0008be6:	83 c4 0c             	add    esp,0xc
c0008be9:	c3                   	ret    
c0008bea:	66 90                	xchg   ax,ax

c0008bec <pbuf_dechain>:
c0008bec:	83 ec 1c             	sub    esp,0x1c
c0008bef:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0008bf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008bf8:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008bfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008c03:	0f 84 8b 00 00 00    	je     c0008c94 <pbuf_dechain+0xa8>
c0008c09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008c0d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008c10:	0f b7 d0             	movzx  edx,ax
c0008c13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c17:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008c1a:	0f b7 c8             	movzx  ecx,ax
c0008c1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c21:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c25:	0f b7 c0             	movzx  eax,ax
c0008c28:	29 c1                	sub    ecx,eax
c0008c2a:	89 c8                	mov    eax,ecx
c0008c2c:	39 c2                	cmp    edx,eax
c0008c2e:	74 18                	je     c0008c48 <pbuf_dechain+0x5c>
c0008c30:	83 ec 08             	sub    esp,0x8
c0008c33:	68 04 fc 02 c0       	push   0xc002fc04
c0008c38:	68 46 f9 02 c0       	push   0xc002f946
c0008c3d:	e8 9a 6e 01 00       	call   c001fadc <CPrintf>
c0008c42:	83 c4 10             	add    esp,0x10
c0008c45:	8d 76 00             	lea    esi,[esi+0x0]
c0008c48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c4c:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008c4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c53:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c57:	89 d1                	mov    ecx,edx
c0008c59:	29 c1                	sub    ecx,eax
c0008c5b:	89 c8                	mov    eax,ecx
c0008c5d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008c61:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008c65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c69:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c73:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c77:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008c7b:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008c7f:	83 ec 0c             	sub    esp,0xc
c0008c82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c86:	e8 1d f6 ff ff       	call   c00082a8 <pbuf_free>
c0008c8b:	83 c4 10             	add    esp,0x10
c0008c8e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008c92:	66 90                	xchg   ax,ax
c0008c94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008c9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c9f:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008ca3:	0f b7 d2             	movzx  edx,dx
c0008ca6:	0f b7 c0             	movzx  eax,ax
c0008ca9:	39 c2                	cmp    edx,eax
c0008cab:	74 17                	je     c0008cc4 <pbuf_dechain+0xd8>
c0008cad:	83 ec 08             	sub    esp,0x8
c0008cb0:	68 f0 fd 02 c0       	push   0xc002fdf0
c0008cb5:	68 46 f9 02 c0       	push   0xc002f946
c0008cba:	e8 1d 6e 01 00       	call   c001fadc <CPrintf>
c0008cbf:	83 c4 10             	add    esp,0x10
c0008cc2:	66 90                	xchg   ax,ax
c0008cc4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0008cc9:	85 c0                	test   eax,eax
c0008ccb:	75 07                	jne    c0008cd4 <pbuf_dechain+0xe8>
c0008ccd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008cd1:	eb 09                	jmp    c0008cdc <pbuf_dechain+0xf0>
c0008cd3:	90                   	nop
c0008cd4:	b8 00 00 00 00       	mov    eax,0x0
c0008cd9:	8d 76 00             	lea    esi,[esi+0x0]
c0008cdc:	83 c4 1c             	add    esp,0x1c
c0008cdf:	c3                   	ret    

c0008ce0 <pbuf_copy>:
c0008ce0:	53                   	push   ebx
c0008ce1:	83 ec 18             	sub    esp,0x18
c0008ce4:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0008ceb:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0008cf2:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008cf7:	74 1f                	je     c0008d18 <pbuf_copy+0x38>
c0008cf9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008cfe:	74 18                	je     c0008d18 <pbuf_copy+0x38>
c0008d00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d04:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008d07:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008d0b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008d0e:	0f b7 d2             	movzx  edx,dx
c0008d11:	0f b7 c0             	movzx  eax,ax
c0008d14:	39 c2                	cmp    edx,eax
c0008d16:	73 1c                	jae    c0008d34 <pbuf_copy+0x54>
c0008d18:	83 ec 08             	sub    esp,0x8
c0008d1b:	68 28 fc 02 c0       	push   0xc002fc28
c0008d20:	68 46 f9 02 c0       	push   0xc002f946
c0008d25:	e8 b2 6d 01 00       	call   c001fadc <CPrintf>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	b0 f2                	mov    al,0xf2
c0008d2f:	e9 0c 02 00 00       	jmp    c0008f40 <pbuf_copy+0x260>
c0008d34:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008d39:	75 15                	jne    c0008d50 <pbuf_copy+0x70>
c0008d3b:	83 ec 08             	sub    esp,0x8
c0008d3e:	68 05 fe 02 c0       	push   0xc002fe05
c0008d43:	68 46 f9 02 c0       	push   0xc002f946
c0008d48:	e8 8f 6d 01 00       	call   c001fadc <CPrintf>
c0008d4d:	83 c4 10             	add    esp,0x10
c0008d50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d54:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008d58:	0f b7 d0             	movzx  edx,ax
c0008d5b:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0008d60:	89 d1                	mov    ecx,edx
c0008d62:	29 c1                	sub    ecx,eax
c0008d64:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008d68:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008d6c:	0f b7 d0             	movzx  edx,ax
c0008d6f:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0008d74:	29 c2                	sub    edx,eax
c0008d76:	89 d0                	mov    eax,edx
c0008d78:	39 c1                	cmp    ecx,eax
c0008d7a:	7c 1c                	jl     c0008d98 <pbuf_copy+0xb8>
c0008d7c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008d80:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008d84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d88:	89 d3                	mov    ebx,edx
c0008d8a:	29 c3                	sub    ebx,eax
c0008d8c:	89 d8                	mov    eax,ebx
c0008d8e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008d93:	eb 1b                	jmp    c0008db0 <pbuf_copy+0xd0>
c0008d95:	8d 76 00             	lea    esi,[esi+0x0]
c0008d98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d9c:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008da0:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0008da5:	89 d3                	mov    ebx,edx
c0008da7:	29 c3                	sub    ebx,eax
c0008da9:	89 d8                	mov    eax,ebx
c0008dab:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008db0:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008db5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008db9:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0008dbc:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008dc1:	01 d1                	add    ecx,edx
c0008dc3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008dc7:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0008dca:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0008dcf:	01 da                	add    edx,ebx
c0008dd1:	83 ec 04             	sub    esp,0x4
c0008dd4:	50                   	push   eax
c0008dd5:	51                   	push   ecx
c0008dd6:	52                   	push   edx
c0008dd7:	e8 9e 75 ff ff       	call   c000037a <memcpy>
c0008ddc:	83 c4 10             	add    esp,0x10
c0008ddf:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0008de4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008de9:	01 d0                	add    eax,edx
c0008deb:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0008df0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008df4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008df9:	01 d0                	add    eax,edx
c0008dfb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008e00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e04:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e08:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0008e0d:	0f b7 c0             	movzx  eax,ax
c0008e10:	39 c2                	cmp    edx,eax
c0008e12:	76 18                	jbe    c0008e2c <pbuf_copy+0x14c>
c0008e14:	83 ec 08             	sub    esp,0x8
c0008e17:	68 12 fe 02 c0       	push   0xc002fe12
c0008e1c:	68 46 f9 02 c0       	push   0xc002f946
c0008e21:	e8 b6 6c 01 00       	call   c001fadc <CPrintf>
c0008e26:	83 c4 10             	add    esp,0x10
c0008e29:	8d 76 00             	lea    esi,[esi+0x0]
c0008e2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e30:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e34:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0008e39:	0f b7 c0             	movzx  eax,ax
c0008e3c:	39 c2                	cmp    edx,eax
c0008e3e:	75 14                	jne    c0008e54 <pbuf_copy+0x174>
c0008e40:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0008e47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e4d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008e51:	8d 76 00             	lea    esi,[esi+0x0]
c0008e54:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008e58:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e5c:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008e61:	0f b7 c0             	movzx  eax,ax
c0008e64:	39 c2                	cmp    edx,eax
c0008e66:	76 18                	jbe    c0008e80 <pbuf_copy+0x1a0>
c0008e68:	83 ec 08             	sub    esp,0x8
c0008e6b:	68 29 fe 02 c0       	push   0xc002fe29
c0008e70:	68 46 f9 02 c0       	push   0xc002f946
c0008e75:	e8 62 6c 01 00       	call   c001fadc <CPrintf>
c0008e7a:	83 c4 10             	add    esp,0x10
c0008e7d:	8d 76 00             	lea    esi,[esi+0x0]
c0008e80:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008e84:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e88:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008e8d:	0f b7 c0             	movzx  eax,ax
c0008e90:	39 c2                	cmp    edx,eax
c0008e92:	72 14                	jb     c0008ea8 <pbuf_copy+0x1c8>
c0008e94:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0008e9b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008e9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ea1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008ea5:	8d 76 00             	lea    esi,[esi+0x0]
c0008ea8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008ead:	74 3d                	je     c0008eec <pbuf_copy+0x20c>
c0008eaf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008eb3:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008eb7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008ebb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008ebe:	0f b7 d2             	movzx  edx,dx
c0008ec1:	0f b7 c0             	movzx  eax,ax
c0008ec4:	39 c2                	cmp    edx,eax
c0008ec6:	75 24                	jne    c0008eec <pbuf_copy+0x20c>
c0008ec8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008ecc:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ece:	85 c0                	test   eax,eax
c0008ed0:	74 1a                	je     c0008eec <pbuf_copy+0x20c>
c0008ed2:	83 ec 08             	sub    esp,0x8
c0008ed5:	68 58 fc 02 c0       	push   0xc002fc58
c0008eda:	68 46 f9 02 c0       	push   0xc002f946
c0008edf:	e8 f8 6b 01 00       	call   c001fadc <CPrintf>
c0008ee4:	83 c4 10             	add    esp,0x10
c0008ee7:	b0 fa                	mov    al,0xfa
c0008ee9:	eb 55                	jmp    c0008f40 <pbuf_copy+0x260>
c0008eeb:	90                   	nop
c0008eec:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008ef1:	74 3d                	je     c0008f30 <pbuf_copy+0x250>
c0008ef3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ef7:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008efb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008eff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008f02:	0f b7 d2             	movzx  edx,dx
c0008f05:	0f b7 c0             	movzx  eax,ax
c0008f08:	39 c2                	cmp    edx,eax
c0008f0a:	75 24                	jne    c0008f30 <pbuf_copy+0x250>
c0008f0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f10:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f12:	85 c0                	test   eax,eax
c0008f14:	74 1a                	je     c0008f30 <pbuf_copy+0x250>
c0008f16:	83 ec 08             	sub    esp,0x8
c0008f19:	68 58 fc 02 c0       	push   0xc002fc58
c0008f1e:	68 46 f9 02 c0       	push   0xc002f946
c0008f23:	e8 b4 6b 01 00       	call   c001fadc <CPrintf>
c0008f28:	83 c4 10             	add    esp,0x10
c0008f2b:	b0 fa                	mov    al,0xfa
c0008f2d:	eb 11                	jmp    c0008f40 <pbuf_copy+0x260>
c0008f2f:	90                   	nop
c0008f30:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008f35:	0f 85 f9 fd ff ff    	jne    c0008d34 <pbuf_copy+0x54>
c0008f3b:	b0 00                	mov    al,0x0
c0008f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0008f40:	83 c4 18             	add    esp,0x18
c0008f43:	5b                   	pop    ebx
c0008f44:	c3                   	ret    
c0008f45:	8d 76 00             	lea    esi,[esi+0x0]

c0008f48 <pbuf_copy_partial>:
c0008f48:	53                   	push   ebx
c0008f49:	83 ec 28             	sub    esp,0x28
c0008f4c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008f50:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008f54:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0008f59:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008f5e:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008f65:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008f6a:	75 20                	jne    c0008f8c <pbuf_copy_partial+0x44>
c0008f6c:	83 ec 08             	sub    esp,0x8
c0008f6f:	68 84 fc 02 c0       	push   0xc002fc84
c0008f74:	68 46 f9 02 c0       	push   0xc002f946
c0008f79:	e8 5e 6b 01 00       	call   c001fadc <CPrintf>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	b8 00 00 00 00       	mov    eax,0x0
c0008f86:	e9 59 01 00 00       	jmp    c00090e4 <pbuf_copy_partial+0x19c>
c0008f8b:	90                   	nop
c0008f8c:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0008f91:	75 21                	jne    c0008fb4 <pbuf_copy_partial+0x6c>
c0008f93:	83 ec 08             	sub    esp,0x8
c0008f96:	68 a4 fc 02 c0       	push   0xc002fca4
c0008f9b:	68 46 f9 02 c0       	push   0xc002f946
c0008fa0:	e8 37 6b 01 00       	call   c001fadc <CPrintf>
c0008fa5:	83 c4 10             	add    esp,0x10
c0008fa8:	b8 00 00 00 00       	mov    eax,0x0
c0008fad:	e9 32 01 00 00       	jmp    c00090e4 <pbuf_copy_partial+0x19c>
c0008fb2:	66 90                	xchg   ax,ax
c0008fb4:	66 c7 44 24 1a 00 00 	mov    WORD PTR [esp+0x1a],0x0
c0008fbb:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008fc0:	74 0a                	je     c0008fcc <pbuf_copy_partial+0x84>
c0008fc2:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0008fc7:	75 0f                	jne    c0008fd8 <pbuf_copy_partial+0x90>
c0008fc9:	8d 76 00             	lea    esi,[esi+0x0]
c0008fcc:	b8 00 00 00 00       	mov    eax,0x0
c0008fd1:	e9 0e 01 00 00       	jmp    c00090e4 <pbuf_copy_partial+0x19c>
c0008fd6:	66 90                	xchg   ax,ax
c0008fd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008fdc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fe0:	e9 e3 00 00 00       	jmp    c00090c8 <pbuf_copy_partial+0x180>
c0008fe5:	8d 76 00             	lea    esi,[esi+0x0]
c0008fe8:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008fed:	85 c0                	test   eax,eax
c0008fef:	74 33                	je     c0009024 <pbuf_copy_partial+0xdc>
c0008ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ff5:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008ff9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0008ffe:	0f b7 c0             	movzx  eax,ax
c0009001:	39 c2                	cmp    edx,eax
c0009003:	72 1f                	jb     c0009024 <pbuf_copy_partial+0xdc>
c0009005:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009009:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000900d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009011:	89 d3                	mov    ebx,edx
c0009013:	29 c3                	sub    ebx,eax
c0009015:	89 d8                	mov    eax,ebx
c0009017:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000901c:	e9 9b 00 00 00       	jmp    c00090bc <pbuf_copy_partial+0x174>
c0009021:	8d 76 00             	lea    esi,[esi+0x0]
c0009024:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009028:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000902c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009030:	89 d1                	mov    ecx,edx
c0009032:	29 c1                	sub    ecx,eax
c0009034:	89 c8                	mov    eax,ecx
c0009036:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c000903b:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0009040:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009045:	39 c2                	cmp    edx,eax
c0009047:	76 0b                	jbe    c0009054 <pbuf_copy_partial+0x10c>
c0009049:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000904d:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0009052:	66 90                	xchg   ax,ax
c0009054:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0009059:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000905d:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0009060:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0009065:	01 d1                	add    ecx,edx
c0009067:	0f b7 5c 24 1a       	movzx  ebx,WORD PTR [esp+0x1a]
c000906c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009070:	01 da                	add    edx,ebx
c0009072:	83 ec 04             	sub    esp,0x4
c0009075:	50                   	push   eax
c0009076:	51                   	push   ecx
c0009077:	52                   	push   edx
c0009078:	e8 fd 72 ff ff       	call   c000037a <memcpy>
c000907d:	83 c4 10             	add    esp,0x10
c0009080:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009085:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009089:	01 d0                	add    eax,edx
c000908b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009090:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0009095:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009099:	01 d0                	add    eax,edx
c000909b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00090a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00090a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00090a8:	89 d3                	mov    ebx,edx
c00090aa:	29 c3                	sub    ebx,eax
c00090ac:	89 d8                	mov    eax,ebx
c00090ae:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00090b3:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00090ba:	66 90                	xchg   ax,ax
c00090bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00090c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00090c2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00090c6:	66 90                	xchg   ax,ax
c00090c8:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00090cd:	85 c0                	test   eax,eax
c00090cf:	74 0b                	je     c00090dc <pbuf_copy_partial+0x194>
c00090d1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00090d6:	0f 85 0c ff ff ff    	jne    c0008fe8 <pbuf_copy_partial+0xa0>
c00090dc:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00090e1:	8d 76 00             	lea    esi,[esi+0x0]
c00090e4:	83 c4 28             	add    esp,0x28
c00090e7:	5b                   	pop    ebx
c00090e8:	c3                   	ret    
c00090e9:	8d 76 00             	lea    esi,[esi+0x0]

c00090ec <pbuf_take>:
c00090ec:	83 ec 2c             	sub    esp,0x2c
c00090ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00090f3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00090f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00090fc:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0009101:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0009108:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000910d:	75 1d                	jne    c000912c <pbuf_take+0x40>
c000910f:	83 ec 08             	sub    esp,0x8
c0009112:	68 44 fe 02 c0       	push   0xc002fe44
c0009117:	68 46 f9 02 c0       	push   0xc002f946
c000911c:	e8 bb 69 01 00       	call   c001fadc <CPrintf>
c0009121:	83 c4 10             	add    esp,0x10
c0009124:	b0 00                	mov    al,0x0
c0009126:	e9 3d 01 00 00       	jmp    c0009268 <pbuf_take+0x17c>
c000912b:	90                   	nop
c000912c:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009131:	75 1d                	jne    c0009150 <pbuf_take+0x64>
c0009133:	83 ec 08             	sub    esp,0x8
c0009136:	68 5b fe 02 c0       	push   0xc002fe5b
c000913b:	68 46 f9 02 c0       	push   0xc002f946
c0009140:	e8 97 69 01 00       	call   c001fadc <CPrintf>
c0009145:	83 c4 10             	add    esp,0x10
c0009148:	b0 00                	mov    al,0x0
c000914a:	e9 19 01 00 00       	jmp    c0009268 <pbuf_take+0x17c>
c000914f:	90                   	nop
c0009150:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0009155:	74 1d                	je     c0009174 <pbuf_take+0x88>
c0009157:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000915c:	74 16                	je     c0009174 <pbuf_take+0x88>
c000915e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009162:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009165:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000916a:	0f b7 c0             	movzx  eax,ax
c000916d:	39 c2                	cmp    edx,eax
c000916f:	76 0b                	jbe    c000917c <pbuf_take+0x90>
c0009171:	8d 76 00             	lea    esi,[esi+0x0]
c0009174:	b0 f2                	mov    al,0xf2
c0009176:	e9 ed 00 00 00       	jmp    c0009268 <pbuf_take+0x17c>
c000917b:	90                   	nop
c000917c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009180:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009184:	e9 9f 00 00 00       	jmp    c0009228 <pbuf_take+0x13c>
c0009189:	8d 76 00             	lea    esi,[esi+0x0]
c000918c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009191:	75 15                	jne    c00091a8 <pbuf_take+0xbc>
c0009193:	83 ec 08             	sub    esp,0x8
c0009196:	68 76 fe 02 c0       	push   0xc002fe76
c000919b:	68 46 f9 02 c0       	push   0xc002f946
c00091a0:	e8 37 69 01 00       	call   c001fadc <CPrintf>
c00091a5:	83 c4 10             	add    esp,0x10
c00091a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00091ac:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00091b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00091b5:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00091b9:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c00091be:	0f b7 c0             	movzx  eax,ax
c00091c1:	39 c2                	cmp    edx,eax
c00091c3:	76 0f                	jbe    c00091d4 <pbuf_take+0xe8>
c00091c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00091c9:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00091cd:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00091d2:	66 90                	xchg   ax,ax
c00091d4:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c00091d9:	0f b7 4c 24 16       	movzx  ecx,WORD PTR [esp+0x16]
c00091de:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00091e2:	01 c1                	add    ecx,eax
c00091e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00091e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091eb:	83 ec 04             	sub    esp,0x4
c00091ee:	52                   	push   edx
c00091ef:	51                   	push   ecx
c00091f0:	50                   	push   eax
c00091f1:	e8 84 71 ff ff       	call   c000037a <memcpy>
c00091f6:	83 c4 10             	add    esp,0x10
c00091f9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00091fd:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0009202:	89 d1                	mov    ecx,edx
c0009204:	29 c1                	sub    ecx,eax
c0009206:	89 c8                	mov    eax,ecx
c0009208:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c000920d:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009212:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0009217:	01 d0                	add    eax,edx
c0009219:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000921e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009222:	8b 00                	mov    eax,DWORD PTR [eax]
c0009224:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009228:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c000922d:	85 c0                	test   eax,eax
c000922f:	0f 85 57 ff ff ff    	jne    c000918c <pbuf_take+0xa0>
c0009235:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c000923a:	85 c0                	test   eax,eax
c000923c:	75 0e                	jne    c000924c <pbuf_take+0x160>
c000923e:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c0009243:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009248:	39 c2                	cmp    edx,eax
c000924a:	74 18                	je     c0009264 <pbuf_take+0x178>
c000924c:	83 ec 08             	sub    esp,0x8
c000924f:	68 8e fe 02 c0       	push   0xc002fe8e
c0009254:	68 46 f9 02 c0       	push   0xc002f946
c0009259:	e8 7e 68 01 00       	call   c001fadc <CPrintf>
c000925e:	83 c4 10             	add    esp,0x10
c0009261:	8d 76 00             	lea    esi,[esi+0x0]
c0009264:	b0 00                	mov    al,0x0
c0009266:	66 90                	xchg   ax,ax
c0009268:	83 c4 2c             	add    esp,0x2c
c000926b:	c3                   	ret    

c000926c <pbuf_coalesce>:
c000926c:	83 ec 1c             	sub    esp,0x1c
c000926f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009273:	8b 00                	mov    eax,DWORD PTR [eax]
c0009275:	85 c0                	test   eax,eax
c0009277:	75 07                	jne    c0009280 <pbuf_coalesce+0x14>
c0009279:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000927d:	eb 7d                	jmp    c00092fc <pbuf_coalesce+0x90>
c000927f:	90                   	nop
c0009280:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009284:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009287:	0f b7 c0             	movzx  eax,ax
c000928a:	83 ec 04             	sub    esp,0x4
c000928d:	6a 00                	push   0x0
c000928f:	50                   	push   eax
c0009290:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009294:	e8 e7 f1 ff ff       	call   c0008480 <pbuf_alloc>
c0009299:	83 c4 10             	add    esp,0x10
c000929c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00092a0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00092a5:	75 09                	jne    c00092b0 <pbuf_coalesce+0x44>
c00092a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092ab:	eb 4f                	jmp    c00092fc <pbuf_coalesce+0x90>
c00092ad:	8d 76 00             	lea    esi,[esi+0x0]
c00092b0:	83 ec 08             	sub    esp,0x8
c00092b3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00092b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00092bb:	e8 20 fa ff ff       	call   c0008ce0 <pbuf_copy>
c00092c0:	83 c4 10             	add    esp,0x10
c00092c3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00092c7:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c00092cc:	85 c0                	test   eax,eax
c00092ce:	74 18                	je     c00092e8 <pbuf_coalesce+0x7c>
c00092d0:	83 ec 08             	sub    esp,0x8
c00092d3:	68 a4 fe 02 c0       	push   0xc002fea4
c00092d8:	68 46 f9 02 c0       	push   0xc002f946
c00092dd:	e8 fa 67 01 00       	call   c001fadc <CPrintf>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	8d 76 00             	lea    esi,[esi+0x0]
c00092e8:	83 ec 0c             	sub    esp,0xc
c00092eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00092ef:	e8 b4 ef ff ff       	call   c00082a8 <pbuf_free>
c00092f4:	83 c4 10             	add    esp,0x10
c00092f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00092fb:	90                   	nop
c00092fc:	83 c4 1c             	add    esp,0x1c
c00092ff:	c3                   	ret    

c0009300 <pbuf_get_at>:
c0009300:	83 ec 14             	sub    esp,0x14
c0009303:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009307:	66 89 04 24          	mov    WORD PTR [esp],ax
c000930b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000930e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0009313:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009317:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000931b:	eb 27                	jmp    c0009344 <pbuf_get_at+0x44>
c000931d:	8d 76 00             	lea    esi,[esi+0x0]
c0009320:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009324:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009328:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c000932d:	89 d1                	mov    ecx,edx
c000932f:	29 c1                	sub    ecx,eax
c0009331:	89 c8                	mov    eax,ecx
c0009333:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0009338:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000933c:	8b 00                	mov    eax,DWORD PTR [eax]
c000933e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009342:	66 90                	xchg   ax,ax
c0009344:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009349:	74 15                	je     c0009360 <pbuf_get_at+0x60>
c000934b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000934f:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009353:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c0009358:	0f b7 c0             	movzx  eax,ax
c000935b:	39 c2                	cmp    edx,eax
c000935d:	73 c1                	jae    c0009320 <pbuf_get_at+0x20>
c000935f:	90                   	nop
c0009360:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009365:	74 29                	je     c0009390 <pbuf_get_at+0x90>
c0009367:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000936b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000936f:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c0009374:	0f b7 c0             	movzx  eax,ax
c0009377:	39 c2                	cmp    edx,eax
c0009379:	73 15                	jae    c0009390 <pbuf_get_at+0x90>
c000937b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000937f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009382:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0009387:	01 d0                	add    eax,edx
c0009389:	8a 00                	mov    al,BYTE PTR [eax]
c000938b:	eb 07                	jmp    c0009394 <pbuf_get_at+0x94>
c000938d:	8d 76 00             	lea    esi,[esi+0x0]
c0009390:	b0 00                	mov    al,0x0
c0009392:	66 90                	xchg   ax,ax
c0009394:	83 c4 14             	add    esp,0x14
c0009397:	c3                   	ret    

c0009398 <pbuf_memcmp>:
c0009398:	83 ec 18             	sub    esp,0x18
c000939b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000939f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00093a3:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00093a8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00093ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00093b0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00093b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00093b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093bd:	eb 25                	jmp    c00093e4 <pbuf_memcmp+0x4c>
c00093bf:	90                   	nop
c00093c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093c4:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00093c8:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00093cd:	89 d1                	mov    ecx,edx
c00093cf:	29 c1                	sub    ecx,eax
c00093d1:	89 c8                	mov    eax,ecx
c00093d3:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00093d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00093de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e2:	66 90                	xchg   ax,ax
c00093e4:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00093e9:	74 15                	je     c0009400 <pbuf_memcmp+0x68>
c00093eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093ef:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00093f3:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c00093f8:	0f b7 c0             	movzx  eax,ax
c00093fb:	39 c2                	cmp    edx,eax
c00093fd:	73 c1                	jae    c00093c0 <pbuf_memcmp+0x28>
c00093ff:	90                   	nop
c0009400:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0009405:	0f 84 8d 00 00 00    	je     c0009498 <pbuf_memcmp+0x100>
c000940b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000940f:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009413:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c0009418:	0f b7 c0             	movzx  eax,ax
c000941b:	39 c2                	cmp    edx,eax
c000941d:	73 79                	jae    c0009498 <pbuf_memcmp+0x100>
c000941f:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0009426:	eb 5c                	jmp    c0009484 <pbuf_memcmp+0xec>
c0009428:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000942d:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0009432:	01 d0                	add    eax,edx
c0009434:	0f b7 c0             	movzx  eax,ax
c0009437:	50                   	push   eax
c0009438:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000943c:	e8 bf fe ff ff       	call   c0009300 <pbuf_get_at>
c0009441:	83 c4 08             	add    esp,0x8
c0009444:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0009448:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000944d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009451:	01 d0                	add    eax,edx
c0009453:	8a 00                	mov    al,BYTE PTR [eax]
c0009455:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009459:	0f b6 54 24 0d       	movzx  edx,BYTE PTR [esp+0xd]
c000945e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0009463:	39 c2                	cmp    edx,eax
c0009465:	74 0d                	je     c0009474 <pbuf_memcmp+0xdc>
c0009467:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000946c:	83 c0 01             	add    eax,0x1
c000946f:	eb 2f                	jmp    c00094a0 <pbuf_memcmp+0x108>
c0009471:	8d 76 00             	lea    esi,[esi+0x0]
c0009474:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0009479:	83 c0 01             	add    eax,0x1
c000947c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0009481:	8d 76 00             	lea    esi,[esi+0x0]
c0009484:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009489:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c000948d:	39 c2                	cmp    edx,eax
c000948f:	72 97                	jb     c0009428 <pbuf_memcmp+0x90>
c0009491:	b8 00 00 00 00       	mov    eax,0x0
c0009496:	eb 08                	jmp    c00094a0 <pbuf_memcmp+0x108>
c0009498:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000949d:	8d 76 00             	lea    esi,[esi+0x0]
c00094a0:	83 c4 18             	add    esp,0x18
c00094a3:	c3                   	ret    

c00094a4 <pbuf_memfind>:
c00094a4:	83 ec 18             	sub    esp,0x18
c00094a7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00094ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00094af:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00094b4:	66 89 04 24          	mov    WORD PTR [esp],ax
c00094b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00094bc:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00094bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094c3:	89 d1                	mov    ecx,edx
c00094c5:	29 c1                	sub    ecx,eax
c00094c7:	89 c8                	mov    eax,ecx
c00094c9:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c00094ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00094d2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00094d5:	0f b7 c0             	movzx  eax,ax
c00094d8:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c00094dd:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c00094e1:	01 ca                	add    edx,ecx
c00094e3:	39 d0                	cmp    eax,edx
c00094e5:	7c 65                	jl     c000954c <pbuf_memfind+0xa8>
c00094e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00094ea:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00094ef:	eb 4b                	jmp    c000953c <pbuf_memfind+0x98>
c00094f1:	8d 76 00             	lea    esi,[esi+0x0]
c00094f4:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c00094f9:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c00094fe:	52                   	push   edx
c00094ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009503:	50                   	push   eax
c0009504:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009508:	e8 8b fe ff ff       	call   c0009398 <pbuf_memcmp>
c000950d:	83 c4 10             	add    esp,0x10
c0009510:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0009515:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000951a:	85 c0                	test   eax,eax
c000951c:	75 0a                	jne    c0009528 <pbuf_memfind+0x84>
c000951e:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0009523:	eb 2f                	jmp    c0009554 <pbuf_memfind+0xb0>
c0009525:	8d 76 00             	lea    esi,[esi+0x0]
c0009528:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000952d:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0009532:	01 d0                	add    eax,edx
c0009534:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009539:	8d 76 00             	lea    esi,[esi+0x0]
c000953c:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c0009541:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0009546:	39 c2                	cmp    edx,eax
c0009548:	76 aa                	jbe    c00094f4 <pbuf_memfind+0x50>
c000954a:	66 90                	xchg   ax,ax
c000954c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009551:	8d 76 00             	lea    esi,[esi+0x0]
c0009554:	83 c4 18             	add    esp,0x18
c0009557:	c3                   	ret    

c0009558 <pbuf_strstr>:
c0009558:	83 ec 1c             	sub    esp,0x1c
c000955b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0009560:	74 1e                	je     c0009580 <pbuf_strstr+0x28>
c0009562:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009566:	8a 00                	mov    al,BYTE PTR [eax]
c0009568:	0f be c0             	movsx  eax,al
c000956b:	85 c0                	test   eax,eax
c000956d:	74 11                	je     c0009580 <pbuf_strstr+0x28>
c000956f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009573:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009576:	0f b7 c0             	movzx  eax,ax
c0009579:	3d ff ff 00 00       	cmp    eax,0xffff
c000957e:	75 08                	jne    c0009588 <pbuf_strstr+0x30>
c0009580:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009585:	eb 41                	jmp    c00095c8 <pbuf_strstr+0x70>
c0009587:	90                   	nop
c0009588:	83 ec 0c             	sub    esp,0xc
c000958b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000958f:	e8 dc 6f ff ff       	call   c0000570 <strlen>
c0009594:	83 c4 10             	add    esp,0x10
c0009597:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000959b:	81 7c 24 0c fe ff 00 00 	cmp    DWORD PTR [esp+0xc],0xfffe
c00095a3:	76 07                	jbe    c00095ac <pbuf_strstr+0x54>
c00095a5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00095aa:	eb 1c                	jmp    c00095c8 <pbuf_strstr+0x70>
c00095ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095b0:	0f b7 c0             	movzx  eax,ax
c00095b3:	6a 00                	push   0x0
c00095b5:	50                   	push   eax
c00095b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00095ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00095be:	e8 e1 fe ff ff       	call   c00094a4 <pbuf_memfind>
c00095c3:	83 c4 10             	add    esp,0x10
c00095c6:	66 90                	xchg   ax,ax
c00095c8:	83 c4 1c             	add    esp,0x1c
c00095cb:	c3                   	ret    

c00095cc <raw_input>:
c00095cc:	83 ec 2c             	sub    esp,0x2c
c00095cf:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00095d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00095d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00095db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095e3:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c00095e6:	0f b6 c0             	movzx  eax,al
c00095e9:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00095ee:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00095f6:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c00095fb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00095ff:	e9 b8 00 00 00       	jmp    c00096bc <raw_input+0xf0>
c0009604:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009608:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c000960b:	0f b6 d0             	movzx  edx,al
c000960e:	0f bf 44 24 0e       	movsx  eax,WORD PTR [esp+0xe]
c0009613:	39 c2                	cmp    edx,eax
c0009615:	0f 85 8d 00 00 00    	jne    c00096a8 <raw_input+0xdc>
c000961b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000961f:	85 c0                	test   eax,eax
c0009621:	74 19                	je     c000963c <raw_input+0x70>
c0009623:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009627:	8b 00                	mov    eax,DWORD PTR [eax]
c0009629:	85 c0                	test   eax,eax
c000962b:	74 0f                	je     c000963c <raw_input+0x70>
c000962d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009631:	8b 10                	mov    edx,DWORD PTR [eax]
c0009633:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0009638:	39 c2                	cmp    edx,eax
c000963a:	75 6c                	jne    c00096a8 <raw_input+0xdc>
c000963c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009640:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0009643:	85 c0                	test   eax,eax
c0009645:	74 61                	je     c00096a8 <raw_input+0xdc>
c0009647:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000964b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000964e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009652:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c0009655:	68 90 68 03 c0       	push   0xc0036890
c000965a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000965e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009662:	52                   	push   edx
c0009663:	ff d0                	call   eax
c0009665:	83 c4 10             	add    esp,0x10
c0009668:	0f b6 c0             	movzx  eax,al
c000966b:	85 c0                	test   eax,eax
c000966d:	74 39                	je     c00096a8 <raw_input+0xdc>
c000966f:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0009677:	c6 44 24 17 01       	mov    BYTE PTR [esp+0x17],0x1
c000967c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0009681:	74 25                	je     c00096a8 <raw_input+0xdc>
c0009683:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009687:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000968a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000968e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009691:	8b 15 9c a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a89c
c0009697:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000969b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000969e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096a2:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c00096a7:	90                   	nop
c00096a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00096b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00096b7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00096bb:	90                   	nop
c00096bc:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00096c1:	85 c0                	test   eax,eax
c00096c3:	75 0b                	jne    c00096d0 <raw_input+0x104>
c00096c5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00096ca:	0f 85 34 ff ff ff    	jne    c0009604 <raw_input+0x38>
c00096d0:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00096d4:	83 c4 2c             	add    esp,0x2c
c00096d7:	c3                   	ret    

c00096d8 <raw_bind>:
c00096d8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00096dd:	74 09                	je     c00096e8 <raw_bind+0x10>
c00096df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00096e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00096e5:	eb 09                	jmp    c00096f0 <raw_bind+0x18>
c00096e7:	90                   	nop
c00096e8:	b8 00 00 00 00       	mov    eax,0x0
c00096ed:	8d 76 00             	lea    esi,[esi+0x0]
c00096f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00096f4:	89 02                	mov    DWORD PTR [edx],eax
c00096f6:	b0 00                	mov    al,0x0
c00096f8:	c3                   	ret    
c00096f9:	8d 76 00             	lea    esi,[esi+0x0]

c00096fc <raw_connect>:
c00096fc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009701:	74 09                	je     c000970c <raw_connect+0x10>
c0009703:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009707:	8b 00                	mov    eax,DWORD PTR [eax]
c0009709:	eb 09                	jmp    c0009714 <raw_connect+0x18>
c000970b:	90                   	nop
c000970c:	b8 00 00 00 00       	mov    eax,0x0
c0009711:	8d 76 00             	lea    esi,[esi+0x0]
c0009714:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009718:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000971b:	b0 00                	mov    al,0x0
c000971d:	c3                   	ret    
c000971e:	66 90                	xchg   ax,ax

c0009720 <raw_recv>:
c0009720:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009724:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009728:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000972b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000972f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009733:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0009736:	90                   	nop
c0009737:	c3                   	ret    

c0009738 <raw_sendto>:
c0009738:	83 ec 1c             	sub    esp,0x1c
c000973b:	83 ec 08             	sub    esp,0x8
c000973e:	6a 14                	push   0x14
c0009740:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009744:	e8 c3 e9 ff ff       	call   c000810c <pbuf_header>
c0009749:	83 c4 10             	add    esp,0x10
c000974c:	0f b6 c0             	movzx  eax,al
c000974f:	85 c0                	test   eax,eax
c0009751:	74 49                	je     c000979c <raw_sendto+0x64>
c0009753:	83 ec 04             	sub    esp,0x4
c0009756:	6a 00                	push   0x0
c0009758:	6a 00                	push   0x0
c000975a:	6a 01                	push   0x1
c000975c:	e8 1f ed ff ff       	call   c0008480 <pbuf_alloc>
c0009761:	83 c4 10             	add    esp,0x10
c0009764:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009768:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000976d:	75 09                	jne    c0009778 <raw_sendto+0x40>
c000976f:	b0 ff                	mov    al,0xff
c0009771:	e9 2a 01 00 00       	jmp    c00098a0 <raw_sendto+0x168>
c0009776:	66 90                	xchg   ax,ax
c0009778:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000977c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000977f:	0f b7 c0             	movzx  eax,ax
c0009782:	85 c0                	test   eax,eax
c0009784:	74 52                	je     c00097d8 <raw_sendto+0xa0>
c0009786:	83 ec 08             	sub    esp,0x8
c0009789:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000978d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009791:	e8 2a f4 ff ff       	call   c0008bc0 <pbuf_chain>
c0009796:	83 c4 10             	add    esp,0x10
c0009799:	eb 3d                	jmp    c00097d8 <raw_sendto+0xa0>
c000979b:	90                   	nop
c000979c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00097a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097a4:	83 ec 08             	sub    esp,0x8
c00097a7:	6a ec                	push   0xffffffec
c00097a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097ad:	e8 5a e9 ff ff       	call   c000810c <pbuf_header>
c00097b2:	83 c4 10             	add    esp,0x10
c00097b5:	0f b6 c0             	movzx  eax,al
c00097b8:	85 c0                	test   eax,eax
c00097ba:	74 1c                	je     c00097d8 <raw_sendto+0xa0>
c00097bc:	83 ec 08             	sub    esp,0x8
c00097bf:	68 b8 fe 02 c0       	push   0xc002feb8
c00097c4:	68 46 f9 02 c0       	push   0xc002f946
c00097c9:	e8 0e 63 01 00       	call   c001fadc <CPrintf>
c00097ce:	83 c4 10             	add    esp,0x10
c00097d1:	b0 ff                	mov    al,0xff
c00097d3:	e9 c8 00 00 00       	jmp    c00098a0 <raw_sendto+0x168>
c00097d8:	83 ec 0c             	sub    esp,0xc
c00097db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097df:	e8 6c 9d 00 00       	call   c0013550 <ip_route>
c00097e4:	83 c4 10             	add    esp,0x10
c00097e7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00097eb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00097f0:	75 22                	jne    c0009814 <raw_sendto+0xdc>
c00097f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097f6:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c00097fa:	74 10                	je     c000980c <raw_sendto+0xd4>
c00097fc:	83 ec 0c             	sub    esp,0xc
c00097ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009803:	e8 a0 ea ff ff       	call   c00082a8 <pbuf_free>
c0009808:	83 c4 10             	add    esp,0x10
c000980b:	90                   	nop
c000980c:	b0 fc                	mov    al,0xfc
c000980e:	e9 8d 00 00 00       	jmp    c00098a0 <raw_sendto+0x168>
c0009813:	90                   	nop
c0009814:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009818:	85 c0                	test   eax,eax
c000981a:	74 0c                	je     c0009828 <raw_sendto+0xf0>
c000981c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009820:	8b 00                	mov    eax,DWORD PTR [eax]
c0009822:	85 c0                	test   eax,eax
c0009824:	75 12                	jne    c0009838 <raw_sendto+0x100>
c0009826:	66 90                	xchg   ax,ax
c0009828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000982c:	83 c0 04             	add    eax,0x4
c000982f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009833:	eb 0b                	jmp    c0009840 <raw_sendto+0x108>
c0009835:	8d 76 00             	lea    esi,[esi+0x0]
c0009838:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000983c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009840:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009844:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0009847:	0f b6 c8             	movzx  ecx,al
c000984a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000984e:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0009851:	0f b6 d0             	movzx  edx,al
c0009854:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009858:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000985b:	0f b6 c0             	movzx  eax,al
c000985e:	83 ec 04             	sub    esp,0x4
c0009861:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009865:	51                   	push   ecx
c0009866:	52                   	push   edx
c0009867:	50                   	push   eax
c0009868:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000986c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009870:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009874:	e8 af a1 00 00       	call   c0013a28 <ip_output_if>
c0009879:	83 c4 20             	add    esp,0x20
c000987c:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0009880:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009884:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0009888:	74 12                	je     c000989c <raw_sendto+0x164>
c000988a:	83 ec 0c             	sub    esp,0xc
c000988d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009891:	e8 12 ea ff ff       	call   c00082a8 <pbuf_free>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	8d 76 00             	lea    esi,[esi+0x0]
c000989c:	8a 44 24 03          	mov    al,BYTE PTR [esp+0x3]
c00098a0:	83 c4 1c             	add    esp,0x1c
c00098a3:	c3                   	ret    

c00098a4 <raw_send>:
c00098a4:	83 ec 0c             	sub    esp,0xc
c00098a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098ab:	83 c0 04             	add    eax,0x4
c00098ae:	83 ec 04             	sub    esp,0x4
c00098b1:	50                   	push   eax
c00098b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098ba:	e8 79 fe ff ff       	call   c0009738 <raw_sendto>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	83 c4 0c             	add    esp,0xc
c00098c5:	c3                   	ret    
c00098c6:	66 90                	xchg   ax,ax

c00098c8 <raw_remove>:
c00098c8:	83 ec 1c             	sub    esp,0x1c
c00098cb:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c00098d0:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00098d4:	75 12                	jne    c00098e8 <raw_remove+0x20>
c00098d6:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c00098db:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098de:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c00098e3:	eb 4b                	jmp    c0009930 <raw_remove+0x68>
c00098e5:	8d 76 00             	lea    esi,[esi+0x0]
c00098e8:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c00098ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00098f1:	eb 35                	jmp    c0009928 <raw_remove+0x60>
c00098f3:	90                   	nop
c00098f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098f8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098fb:	85 c0                	test   eax,eax
c00098fd:	74 1d                	je     c000991c <raw_remove+0x54>
c00098ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009903:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009906:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000990a:	75 10                	jne    c000991c <raw_remove+0x54>
c000990c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009910:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0009913:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009917:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000991a:	66 90                	xchg   ax,ax
c000991c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009920:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009923:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009927:	90                   	nop
c0009928:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000992d:	75 c5                	jne    c00098f4 <raw_remove+0x2c>
c000992f:	90                   	nop
c0009930:	83 ec 08             	sub    esp,0x8
c0009933:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009937:	6a 00                	push   0x0
c0009939:	e8 ae e0 ff ff       	call   c00079ec <memp_free>
c000993e:	83 c4 10             	add    esp,0x10
c0009941:	90                   	nop
c0009942:	83 c4 1c             	add    esp,0x1c
c0009945:	c3                   	ret    
c0009946:	66 90                	xchg   ax,ax

c0009948 <raw_new>:
c0009948:	83 ec 2c             	sub    esp,0x2c
c000994b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000994f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009953:	83 ec 0c             	sub    esp,0xc
c0009956:	6a 00                	push   0x0
c0009958:	e8 63 df ff ff       	call   c00078c0 <memp_malloc>
c000995d:	83 c4 10             	add    esp,0x10
c0009960:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009964:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009969:	74 3d                	je     c00099a8 <raw_new+0x60>
c000996b:	83 ec 04             	sub    esp,0x4
c000996e:	6a 1c                	push   0x1c
c0009970:	6a 00                	push   0x0
c0009972:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009976:	e8 75 6b ff ff       	call   c00004f0 <memset>
c000997b:	83 c4 10             	add    esp,0x10
c000997e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009982:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009986:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c0009989:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000998d:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c0009991:	8b 15 9c a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a89c
c0009997:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000999b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000999e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00099a2:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c00099a7:	90                   	nop
c00099a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00099ac:	83 c4 2c             	add    esp,0x2c
c00099af:	c3                   	ret    

c00099b0 <stats_init>:
c00099b0:	90                   	nop
c00099b1:	c3                   	ret    
c00099b2:	66 90                	xchg   ax,ax

c00099b4 <sys_msleep>:
c00099b4:	83 ec 1c             	sub    esp,0x1c
c00099b7:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00099bc:	74 46                	je     c0009a04 <sys_msleep+0x50>
c00099be:	83 ec 08             	sub    esp,0x8
c00099c1:	6a 00                	push   0x0
c00099c3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00099c7:	50                   	push   eax
c00099c8:	e8 83 72 ff ff       	call   c0000c50 <sys_sem_new>
c00099cd:	83 c4 10             	add    esp,0x10
c00099d0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00099d4:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00099d9:	85 c0                	test   eax,eax
c00099db:	75 27                	jne    c0009a04 <sys_msleep+0x50>
c00099dd:	83 ec 08             	sub    esp,0x8
c00099e0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00099e4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00099e8:	50                   	push   eax
c00099e9:	e8 ba 72 ff ff       	call   c0000ca8 <sys_arch_sem_wait>
c00099ee:	83 c4 10             	add    esp,0x10
c00099f1:	83 ec 0c             	sub    esp,0xc
c00099f4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00099f8:	50                   	push   eax
c00099f9:	e8 7a 72 ff ff       	call   c0000c78 <sys_sem_free>
c00099fe:	83 c4 10             	add    esp,0x10
c0009a01:	8d 76 00             	lea    esi,[esi+0x0]
c0009a04:	90                   	nop
c0009a05:	83 c4 1c             	add    esp,0x1c
c0009a08:	c3                   	ret    
c0009a09:	66 90                	xchg   ax,ax
c0009a0b:	90                   	nop

c0009a0c <tcp_accept_null>:
c0009a0c:	83 ec 04             	sub    esp,0x4
c0009a0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009a13:	88 04 24             	mov    BYTE PTR [esp],al
c0009a16:	b0 f6                	mov    al,0xf6
c0009a18:	83 c4 04             	add    esp,0x4
c0009a1b:	c3                   	ret    

c0009a1c <tcp_listen_with_backlog>:
c0009a1c:	83 ec 2c             	sub    esp,0x2c
c0009a1f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a23:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009a27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009a2e:	85 c0                	test   eax,eax
c0009a30:	74 22                	je     c0009a54 <tcp_listen_with_backlog+0x38>
c0009a32:	83 ec 08             	sub    esp,0x8
c0009a35:	68 e0 fe 02 c0       	push   0xc002fee0
c0009a3a:	68 46 f9 02 c0       	push   0xc002f946
c0009a3f:	e8 98 60 01 00       	call   c001fadc <CPrintf>
c0009a44:	83 c4 10             	add    esp,0x10
c0009a47:	b8 00 00 00 00       	mov    eax,0x0
c0009a4c:	e9 77 01 00 00       	jmp    c0009bc8 <tcp_listen_with_backlog+0x1ac>
c0009a51:	8d 76 00             	lea    esi,[esi+0x0]
c0009a54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a58:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009a5b:	83 f8 01             	cmp    eax,0x1
c0009a5e:	75 0c                	jne    c0009a6c <tcp_listen_with_backlog+0x50>
c0009a60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a64:	e9 5f 01 00 00       	jmp    c0009bc8 <tcp_listen_with_backlog+0x1ac>
c0009a69:	8d 76 00             	lea    esi,[esi+0x0]
c0009a6c:	83 ec 0c             	sub    esp,0xc
c0009a6f:	6a 03                	push   0x3
c0009a71:	e8 4a de ff ff       	call   c00078c0 <memp_malloc>
c0009a76:	83 c4 10             	add    esp,0x10
c0009a79:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009a7d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009a82:	75 0c                	jne    c0009a90 <tcp_listen_with_backlog+0x74>
c0009a84:	b8 00 00 00 00       	mov    eax,0x0
c0009a89:	e9 3a 01 00 00       	jmp    c0009bc8 <tcp_listen_with_backlog+0x1ac>
c0009a8e:	66 90                	xchg   ax,ax
c0009a90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a94:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0009a97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a9b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0009a9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009aa2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009aa5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009aa9:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c0009aad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ab1:	c7 40 10 01 00 00 00 	mov    DWORD PTR [eax+0x10],0x1
c0009ab8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009abc:	8a 50 14             	mov    dl,BYTE PTR [eax+0x14]
c0009abf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ac3:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c0009ac6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009aca:	8a 50 08             	mov    dl,BYTE PTR [eax+0x8]
c0009acd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ad1:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009ad4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ad8:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c0009adb:	83 c8 02             	or     eax,0x2
c0009ade:	88 c2                	mov    dl,al
c0009ae0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ae4:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009ae7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009aeb:	8a 50 0a             	mov    dl,BYTE PTR [eax+0xa]
c0009aee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009af2:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c0009af5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009af9:	8a 50 09             	mov    dl,BYTE PTR [eax+0x9]
c0009afc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b00:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0009b03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b07:	8b 10                	mov    edx,DWORD PTR [eax]
c0009b09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b0d:	89 10                	mov    DWORD PTR [eax],edx
c0009b0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b13:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009b16:	0f b7 c0             	movzx  eax,ax
c0009b19:	85 c0                	test   eax,eax
c0009b1b:	74 6f                	je     c0009b8c <tcp_listen_with_backlog+0x170>
c0009b1d:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009b22:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009b26:	75 10                	jne    c0009b38 <tcp_listen_with_backlog+0x11c>
c0009b28:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009b2d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b30:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c0009b35:	eb 49                	jmp    c0009b80 <tcp_listen_with_backlog+0x164>
c0009b37:	90                   	nop
c0009b38:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009b3d:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c0009b42:	eb 30                	jmp    c0009b74 <tcp_listen_with_backlog+0x158>
c0009b44:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009b49:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b4c:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009b50:	75 12                	jne    c0009b64 <tcp_listen_with_backlog+0x148>
c0009b52:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009b57:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009b5b:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009b5e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009b61:	eb 1d                	jmp    c0009b80 <tcp_listen_with_backlog+0x164>
c0009b63:	90                   	nop
c0009b64:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009b69:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b6c:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c0009b71:	8d 76 00             	lea    esi,[esi+0x0]
c0009b74:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009b79:	85 c0                	test   eax,eax
c0009b7b:	75 c7                	jne    c0009b44 <tcp_listen_with_backlog+0x128>
c0009b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0009b80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b84:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0009b8b:	90                   	nop
c0009b8c:	83 ec 08             	sub    esp,0x8
c0009b8f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009b93:	6a 02                	push   0x2
c0009b95:	e8 52 de ff ff       	call   c00079ec <memp_free>
c0009b9a:	83 c4 10             	add    esp,0x10
c0009b9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ba1:	c7 40 1c 0c 9a 00 c0 	mov    DWORD PTR [eax+0x1c],0xc0009a0c
c0009ba8:	8b 15 78 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036878
c0009bae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bb2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009bb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bb9:	a3 78 68 03 c0       	mov    ds:0xc0036878,eax
c0009bbe:	e8 a5 6e 00 00       	call   c0010a68 <tcp_timer_needed>
c0009bc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bc7:	90                   	nop
c0009bc8:	83 c4 2c             	add    esp,0x2c
c0009bcb:	c3                   	ret    

c0009bcc <tcp_update_rcv_ann_wnd>:
c0009bcc:	83 ec 1c             	sub    esp,0x1c
c0009bcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bd3:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009bd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bda:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009bdd:	0f b7 c0             	movzx  eax,ax
c0009be0:	01 d0                	add    eax,edx
c0009be2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009be6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bea:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009bed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bf1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bf4:	0f b7 c8             	movzx  ecx,ax
c0009bf7:	81 f9 30 04 00 00    	cmp    ecx,0x430
c0009bfd:	76 05                	jbe    c0009c04 <tcp_update_rcv_ann_wnd+0x38>
c0009bff:	b8 30 04 00 00       	mov    eax,0x430
c0009c04:	0f b7 c0             	movzx  eax,ax
c0009c07:	01 c2                	add    edx,eax
c0009c09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009c0d:	29 d0                	sub    eax,edx
c0009c0f:	78 23                	js     c0009c34 <tcp_update_rcv_ann_wnd+0x68>
c0009c11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c15:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009c18:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009c1c:	66 89 42 2e          	mov    WORD PTR [edx+0x2e],ax
c0009c20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c24:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009c27:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c2b:	29 c2                	sub    edx,eax
c0009c2d:	89 d0                	mov    eax,edx
c0009c2f:	eb 73                	jmp    c0009ca4 <tcp_update_rcv_ann_wnd+0xd8>
c0009c31:	8d 76 00             	lea    esi,[esi+0x0]
c0009c34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c38:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009c3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c3f:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009c42:	29 c2                	sub    edx,eax
c0009c44:	89 d0                	mov    eax,edx
c0009c46:	85 c0                	test   eax,eax
c0009c48:	7e 0e                	jle    c0009c58 <tcp_update_rcv_ann_wnd+0x8c>
c0009c4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c4e:	66 c7 40 2e 00 00    	mov    WORD PTR [eax+0x2e],0x0
c0009c54:	eb 46                	jmp    c0009c9c <tcp_update_rcv_ann_wnd+0xd0>
c0009c56:	66 90                	xchg   ax,ax
c0009c58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c5c:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009c5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c63:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0009c66:	29 c2                	sub    edx,eax
c0009c68:	89 d0                	mov    eax,edx
c0009c6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6e:	81 7c 24 08 ff ff 00 00 	cmp    DWORD PTR [esp+0x8],0xffff
c0009c76:	76 18                	jbe    c0009c90 <tcp_update_rcv_ann_wnd+0xc4>
c0009c78:	83 ec 08             	sub    esp,0x8
c0009c7b:	68 14 01 03 c0       	push   0xc0030114
c0009c80:	68 46 f9 02 c0       	push   0xc002f946
c0009c85:	e8 52 5e 01 00       	call   c001fadc <CPrintf>
c0009c8a:	83 c4 10             	add    esp,0x10
c0009c8d:	8d 76 00             	lea    esi,[esi+0x0]
c0009c90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c94:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009c98:	66 89 42 2e          	mov    WORD PTR [edx+0x2e],ax
c0009c9c:	b8 00 00 00 00       	mov    eax,0x0
c0009ca1:	8d 76 00             	lea    esi,[esi+0x0]
c0009ca4:	83 c4 1c             	add    esp,0x1c
c0009ca7:	c3                   	ret    

c0009ca8 <tcp_recved>:
c0009ca8:	83 ec 2c             	sub    esp,0x2c
c0009cab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009caf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009cb4:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009cb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cbd:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009cc0:	0f b7 c0             	movzx  eax,ax
c0009cc3:	b9 ff ff 00 00       	mov    ecx,0xffff
c0009cc8:	29 c1                	sub    ecx,eax
c0009cca:	89 c8                	mov    eax,ecx
c0009ccc:	39 c2                	cmp    edx,eax
c0009cce:	7e 18                	jle    c0009ce8 <tcp_recved+0x40>
c0009cd0:	83 ec 08             	sub    esp,0x8
c0009cd3:	68 04 ff 02 c0       	push   0xc002ff04
c0009cd8:	68 46 f9 02 c0       	push   0xc002f946
c0009cdd:	e8 fa 5d 01 00       	call   c001fadc <CPrintf>
c0009ce2:	83 c4 10             	add    esp,0x10
c0009ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0009ce8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cec:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009cef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009cf3:	01 d0                	add    eax,edx
c0009cf5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009cf9:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c0009cfd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d01:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009d04:	0f b7 c0             	movzx  eax,ax
c0009d07:	3d 60 08 00 00       	cmp    eax,0x860
c0009d0c:	76 0a                	jbe    c0009d18 <tcp_recved+0x70>
c0009d0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d12:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c0009d18:	83 ec 0c             	sub    esp,0xc
c0009d1b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009d1f:	e8 a8 fe ff ff       	call   c0009bcc <tcp_update_rcv_ann_wnd>
c0009d24:	83 c4 10             	add    esp,0x10
c0009d27:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009d2b:	81 7c 24 1c 17 02 00 00 	cmp    DWORD PTR [esp+0x1c],0x217
c0009d33:	7e 23                	jle    c0009d58 <tcp_recved+0xb0>
c0009d35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d39:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0009d3c:	83 c8 02             	or     eax,0x2
c0009d3f:	88 c2                	mov    dl,al
c0009d41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d45:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0009d48:	83 ec 0c             	sub    esp,0xc
c0009d4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009d4f:	e8 84 60 00 00       	call   c000fdd8 <tcp_output>
c0009d54:	83 c4 10             	add    esp,0x10
c0009d57:	90                   	nop
c0009d58:	90                   	nop
c0009d59:	83 c4 2c             	add    esp,0x2c
c0009d5c:	c3                   	ret    
c0009d5d:	8d 76 00             	lea    esi,[esi+0x0]

c0009d60 <tcp_new_port>:
c0009d60:	83 ec 10             	sub    esp,0x10
c0009d63:	90                   	nop
c0009d64:	66 a1 00 3a 03 c0    	mov    ax,ds:0xc0033a00
c0009d6a:	8d 50 01             	lea    edx,[eax+0x1]
c0009d6d:	66 89 15 00 3a 03 c0 	mov    WORD PTR ds:0xc0033a00,dx
c0009d74:	0f b7 c0             	movzx  eax,ax
c0009d77:	3d ff ff 00 00       	cmp    eax,0xffff
c0009d7c:	75 0a                	jne    c0009d88 <tcp_new_port+0x28>
c0009d7e:	66 c7 05 00 3a 03 c0 00 c0 	mov    WORD PTR ds:0xc0033a00,0xc000
c0009d87:	90                   	nop
c0009d88:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009d90:	eb 4a                	jmp    c0009ddc <tcp_new_port+0x7c>
c0009d92:	66 90                	xchg   ax,ax
c0009d94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009d98:	8b 04 85 20 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfde0]
c0009d9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009da1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009da5:	eb 29                	jmp    c0009dd0 <tcp_new_port+0x70>
c0009da7:	90                   	nop
c0009da8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009dac:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0009daf:	66 a1 00 3a 03 c0    	mov    ax,ds:0xc0033a00
c0009db5:	0f b7 d2             	movzx  edx,dx
c0009db8:	0f b7 c0             	movzx  eax,ax
c0009dbb:	39 c2                	cmp    edx,eax
c0009dbd:	75 05                	jne    c0009dc4 <tcp_new_port+0x64>
c0009dbf:	eb a3                	jmp    c0009d64 <tcp_new_port+0x4>
c0009dc1:	8d 76 00             	lea    esi,[esi+0x0]
c0009dc4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009dc8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009dcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009dcf:	90                   	nop
c0009dd0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009dd5:	75 d1                	jne    c0009da8 <tcp_new_port+0x48>
c0009dd7:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0009ddc:	83 7c 24 0c 03       	cmp    DWORD PTR [esp+0xc],0x3
c0009de1:	7e b1                	jle    c0009d94 <tcp_new_port+0x34>
c0009de3:	66 a1 00 3a 03 c0    	mov    ax,ds:0xc0033a00
c0009de9:	83 c4 10             	add    esp,0x10
c0009dec:	c3                   	ret    
c0009ded:	8d 76 00             	lea    esi,[esi+0x0]

c0009df0 <tcp_bind>:
c0009df0:	83 ec 2c             	sub    esp,0x2c
c0009df3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009df7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009dfc:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0009e04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e08:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009e0b:	85 c0                	test   eax,eax
c0009e0d:	74 1d                	je     c0009e2c <tcp_bind+0x3c>
c0009e0f:	83 ec 08             	sub    esp,0x8
c0009e12:	68 28 ff 02 c0       	push   0xc002ff28
c0009e17:	68 46 f9 02 c0       	push   0xc002f946
c0009e1c:	e8 bb 5c 01 00       	call   c001fadc <CPrintf>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	b0 fa                	mov    al,0xfa
c0009e26:	e9 f1 00 00 00       	jmp    c0009f1c <tcp_bind+0x12c>
c0009e2b:	90                   	nop
c0009e2c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009e31:	85 c0                	test   eax,eax
c0009e33:	75 0b                	jne    c0009e40 <tcp_bind+0x50>
c0009e35:	e8 26 ff ff ff       	call   c0009d60 <tcp_new_port>
c0009e3a:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009e3f:	90                   	nop
c0009e40:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009e48:	eb 7a                	jmp    c0009ec4 <tcp_bind+0xd4>
c0009e4a:	66 90                	xchg   ax,ax
c0009e4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e50:	8b 04 85 20 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfde0]
c0009e57:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e59:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e5d:	eb 59                	jmp    c0009eb8 <tcp_bind+0xc8>
c0009e5f:	90                   	nop
c0009e60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e64:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009e67:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009e6c:	0f b7 c0             	movzx  eax,ax
c0009e6f:	39 c2                	cmp    edx,eax
c0009e71:	75 39                	jne    c0009eac <tcp_bind+0xbc>
c0009e73:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e77:	85 c0                	test   eax,eax
c0009e79:	74 2d                	je     c0009ea8 <tcp_bind+0xb8>
c0009e7b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e81:	85 c0                	test   eax,eax
c0009e83:	74 23                	je     c0009ea8 <tcp_bind+0xb8>
c0009e85:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009e8a:	74 1c                	je     c0009ea8 <tcp_bind+0xb8>
c0009e8c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e90:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e92:	85 c0                	test   eax,eax
c0009e94:	74 12                	je     c0009ea8 <tcp_bind+0xb8>
c0009e96:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0009e9c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009ea0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ea2:	39 c2                	cmp    edx,eax
c0009ea4:	75 06                	jne    c0009eac <tcp_bind+0xbc>
c0009ea6:	66 90                	xchg   ax,ax
c0009ea8:	b0 f8                	mov    al,0xf8
c0009eaa:	eb 70                	jmp    c0009f1c <tcp_bind+0x12c>
c0009eac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009eb0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009eb3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009eb7:	90                   	nop
c0009eb8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0009ebd:	75 a1                	jne    c0009e60 <tcp_bind+0x70>
c0009ebf:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ec4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ec8:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c0009ecc:	0f 8c 7a ff ff ff    	jl     c0009e4c <tcp_bind+0x5c>
c0009ed2:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009ed7:	74 17                	je     c0009ef0 <tcp_bind+0x100>
c0009ed9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009edd:	8b 00                	mov    eax,DWORD PTR [eax]
c0009edf:	85 c0                	test   eax,eax
c0009ee1:	74 0d                	je     c0009ef0 <tcp_bind+0x100>
c0009ee3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ee7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009eeb:	8b 12                	mov    edx,DWORD PTR [edx]
c0009eed:	89 10                	mov    DWORD PTR [eax],edx
c0009eef:	90                   	nop
c0009ef0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009ef4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ef8:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c0009efc:	8b 15 80 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036880
c0009f02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f06:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009f09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f0d:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c0009f12:	e8 51 6b 00 00       	call   c0010a68 <tcp_timer_needed>
c0009f17:	b0 00                	mov    al,0x0
c0009f19:	8d 76 00             	lea    esi,[esi+0x0]
c0009f1c:	83 c4 2c             	add    esp,0x2c
c0009f1f:	c3                   	ret    

c0009f20 <tcp_seg_free>:
c0009f20:	83 ec 0c             	sub    esp,0xc
c0009f23:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0009f28:	74 32                	je     c0009f5c <tcp_seg_free+0x3c>
c0009f2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009f31:	85 c0                	test   eax,eax
c0009f33:	74 13                	je     c0009f48 <tcp_seg_free+0x28>
c0009f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f39:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009f3c:	83 ec 0c             	sub    esp,0xc
c0009f3f:	50                   	push   eax
c0009f40:	e8 63 e3 ff ff       	call   c00082a8 <pbuf_free>
c0009f45:	83 c4 10             	add    esp,0x10
c0009f48:	83 ec 08             	sub    esp,0x8
c0009f4b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009f4f:	6a 04                	push   0x4
c0009f51:	e8 96 da ff ff       	call   c00079ec <memp_free>
c0009f56:	83 c4 10             	add    esp,0x10
c0009f59:	8d 76 00             	lea    esi,[esi+0x0]
c0009f5c:	90                   	nop
c0009f5d:	83 c4 0c             	add    esp,0xc
c0009f60:	c3                   	ret    
c0009f61:	8d 76 00             	lea    esi,[esi+0x0]

c0009f64 <tcp_segs_free>:
c0009f64:	83 ec 1c             	sub    esp,0x1c
c0009f67:	eb 27                	jmp    c0009f90 <tcp_segs_free+0x2c>
c0009f69:	8d 76 00             	lea    esi,[esi+0x0]
c0009f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f70:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f72:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f76:	83 ec 0c             	sub    esp,0xc
c0009f79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f7d:	e8 9e ff ff ff       	call   c0009f20 <tcp_seg_free>
c0009f82:	83 c4 10             	add    esp,0x10
c0009f85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009f8d:	8d 76 00             	lea    esi,[esi+0x0]
c0009f90:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0009f95:	75 d5                	jne    c0009f6c <tcp_segs_free+0x8>
c0009f97:	90                   	nop
c0009f98:	83 c4 1c             	add    esp,0x1c
c0009f9b:	c3                   	ret    

c0009f9c <tcp_setprio>:
c0009f9c:	83 ec 04             	sub    esp,0x4
c0009f9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009fa3:	88 04 24             	mov    BYTE PTR [esp],al
c0009fa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009faa:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0009fad:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c0009fb0:	90                   	nop
c0009fb1:	83 c4 04             	add    esp,0x4
c0009fb4:	c3                   	ret    
c0009fb5:	8d 76 00             	lea    esi,[esi+0x0]

c0009fb8 <tcp_seg_copy>:
c0009fb8:	83 ec 1c             	sub    esp,0x1c
c0009fbb:	83 ec 0c             	sub    esp,0xc
c0009fbe:	6a 04                	push   0x4
c0009fc0:	e8 fb d8 ff ff       	call   c00078c0 <memp_malloc>
c0009fc5:	83 c4 10             	add    esp,0x10
c0009fc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009fcc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009fd1:	75 09                	jne    c0009fdc <tcp_seg_copy+0x24>
c0009fd3:	b8 00 00 00 00       	mov    eax,0x0
c0009fd8:	eb 2e                	jmp    c000a008 <tcp_seg_copy+0x50>
c0009fda:	66 90                	xchg   ax,ax
c0009fdc:	83 ec 04             	sub    esp,0x4
c0009fdf:	6a 10                	push   0x10
c0009fe1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009fe5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009fe9:	e8 8c 63 ff ff       	call   c000037a <memcpy>
c0009fee:	83 c4 10             	add    esp,0x10
c0009ff1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ff5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009ff8:	83 ec 0c             	sub    esp,0xc
c0009ffb:	50                   	push   eax
c0009ffc:	e8 af ea ff ff       	call   c0008ab0 <pbuf_ref>
c000a001:	83 c4 10             	add    esp,0x10
c000a004:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a008:	83 c4 1c             	add    esp,0x1c
c000a00b:	c3                   	ret    

c000a00c <tcp_arg>:
c000a00c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a010:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a014:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a017:	90                   	nop
c000a018:	c3                   	ret    
c000a019:	8d 76 00             	lea    esi,[esi+0x0]

c000a01c <tcp_recv>:
c000a01c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a020:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a024:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
c000a02a:	90                   	nop
c000a02b:	c3                   	ret    

c000a02c <tcp_sent>:
c000a02c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a030:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a034:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
c000a03a:	90                   	nop
c000a03b:	c3                   	ret    

c000a03c <tcp_err>:
c000a03c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a040:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a044:	89 90 98 00 00 00    	mov    DWORD PTR [eax+0x98],edx
c000a04a:	90                   	nop
c000a04b:	c3                   	ret    

c000a04c <tcp_accept>:
c000a04c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a050:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a054:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000a057:	90                   	nop
c000a058:	c3                   	ret    
c000a059:	8d 76 00             	lea    esi,[esi+0x0]

c000a05c <tcp_poll>:
c000a05c:	83 ec 04             	sub    esp,0x4
c000a05f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a063:	88 04 24             	mov    BYTE PTR [esp],al
c000a066:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a06a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a06e:	89 90 94 00 00 00    	mov    DWORD PTR [eax+0x94],edx
c000a074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a078:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000a07b:	88 50 39             	mov    BYTE PTR [eax+0x39],dl
c000a07e:	90                   	nop
c000a07f:	83 c4 04             	add    esp,0x4
c000a082:	c3                   	ret    
c000a083:	90                   	nop

c000a084 <tcp_pcb_purge>:
c000a084:	83 ec 0c             	sub    esp,0xc
c000a087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a08b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a08e:	85 c0                	test   eax,eax
c000a090:	0f 84 ca 00 00 00    	je     c000a160 <tcp_pcb_purge+0xdc>
c000a096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a09a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a09d:	83 f8 0a             	cmp    eax,0xa
c000a0a0:	0f 84 ba 00 00 00    	je     c000a160 <tcp_pcb_purge+0xdc>
c000a0a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0aa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0ad:	83 f8 01             	cmp    eax,0x1
c000a0b0:	0f 84 aa 00 00 00    	je     c000a160 <tcp_pcb_purge+0xdc>
c000a0b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0ba:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a0c0:	85 c0                	test   eax,eax
c000a0c2:	74 24                	je     c000a0e8 <tcp_pcb_purge+0x64>
c000a0c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0c8:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a0ce:	83 ec 0c             	sub    esp,0xc
c000a0d1:	50                   	push   eax
c000a0d2:	e8 d1 e1 ff ff       	call   c00082a8 <pbuf_free>
c000a0d7:	83 c4 10             	add    esp,0x10
c000a0da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0de:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000a0e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0ec:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a0f2:	83 ec 0c             	sub    esp,0xc
c000a0f5:	50                   	push   eax
c000a0f6:	e8 69 fe ff ff       	call   c0009f64 <tcp_segs_free>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a102:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a10c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a110:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000a116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a11a:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000a11d:	83 ec 0c             	sub    esp,0xc
c000a120:	50                   	push   eax
c000a121:	e8 3e fe ff ff       	call   c0009f64 <tcp_segs_free>
c000a126:	83 c4 10             	add    esp,0x10
c000a129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a12d:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a130:	83 ec 0c             	sub    esp,0xc
c000a133:	50                   	push   eax
c000a134:	e8 2b fe ff ff       	call   c0009f64 <tcp_segs_free>
c000a139:	83 c4 10             	add    esp,0x10
c000a13c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a140:	c7 40 78 00 00 00 00 	mov    DWORD PTR [eax+0x78],0x0
c000a147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a14b:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c000a14e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a152:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000a155:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a159:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000a15f:	90                   	nop
c000a160:	90                   	nop
c000a161:	83 c4 0c             	add    esp,0xc
c000a164:	c3                   	ret    
c000a165:	8d 76 00             	lea    esi,[esi+0x0]

c000a168 <tcp_slowtmr>:
c000a168:	57                   	push   edi
c000a169:	56                   	push   esi
c000a16a:	53                   	push   ebx
c000a16b:	83 ec 20             	sub    esp,0x20
c000a16e:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a173:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000a178:	83 c0 01             	add    eax,0x1
c000a17b:	a3 74 68 03 c0       	mov    ds:0xc0036874,eax
c000a180:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a188:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a18d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a191:	e9 16 06 00 00       	jmp    c000a7ac <tcp_slowtmr+0x644>
c000a196:	66 90                	xchg   ax,ax
c000a198:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a19c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a19f:	85 c0                	test   eax,eax
c000a1a1:	75 15                	jne    c000a1b8 <tcp_slowtmr+0x50>
c000a1a3:	83 ec 08             	sub    esp,0x8
c000a1a6:	68 50 ff 02 c0       	push   0xc002ff50
c000a1ab:	68 46 f9 02 c0       	push   0xc002f946
c000a1b0:	e8 27 59 01 00       	call   c001fadc <CPrintf>
c000a1b5:	83 c4 10             	add    esp,0x10
c000a1b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a1bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a1bf:	83 f8 01             	cmp    eax,0x1
c000a1c2:	75 18                	jne    c000a1dc <tcp_slowtmr+0x74>
c000a1c4:	83 ec 08             	sub    esp,0x8
c000a1c7:	68 7c ff 02 c0       	push   0xc002ff7c
c000a1cc:	68 46 f9 02 c0       	push   0xc002f946
c000a1d1:	e8 06 59 01 00       	call   c001fadc <CPrintf>
c000a1d6:	83 c4 10             	add    esp,0x10
c000a1d9:	8d 76 00             	lea    esi,[esi+0x0]
c000a1dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a1e0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a1e3:	83 f8 0a             	cmp    eax,0xa
c000a1e6:	75 18                	jne    c000a200 <tcp_slowtmr+0x98>
c000a1e8:	83 ec 08             	sub    esp,0x8
c000a1eb:	68 a8 ff 02 c0       	push   0xc002ffa8
c000a1f0:	68 46 f9 02 c0       	push   0xc002f946
c000a1f5:	e8 e2 58 01 00       	call   c001fadc <CPrintf>
c000a1fa:	83 c4 10             	add    esp,0x10
c000a1fd:	8d 76 00             	lea    esi,[esi+0x0]
c000a200:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a205:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000a20a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a20e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a211:	83 f8 02             	cmp    eax,0x2
c000a214:	75 22                	jne    c000a238 <tcp_slowtmr+0xd0>
c000a216:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a21a:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a21d:	0f b6 c0             	movzx  eax,al
c000a220:	83 f8 06             	cmp    eax,0x6
c000a223:	75 13                	jne    c000a238 <tcp_slowtmr+0xd0>
c000a225:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a229:	83 c0 01             	add    eax,0x1
c000a22c:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a230:	e9 df 01 00 00       	jmp    c000a414 <tcp_slowtmr+0x2ac>
c000a235:	8d 76 00             	lea    esi,[esi+0x0]
c000a238:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a23c:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a23f:	0f b6 c0             	movzx  eax,al
c000a242:	83 f8 0c             	cmp    eax,0xc
c000a245:	75 11                	jne    c000a258 <tcp_slowtmr+0xf0>
c000a247:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a24b:	83 c0 01             	add    eax,0x1
c000a24e:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a252:	e9 bd 01 00 00       	jmp    c000a414 <tcp_slowtmr+0x2ac>
c000a257:	90                   	nop
c000a258:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a25c:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a262:	0f b6 c0             	movzx  eax,al
c000a265:	85 c0                	test   eax,eax
c000a267:	0f 84 8f 00 00 00    	je     c000a2fc <tcp_slowtmr+0x194>
c000a26d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a271:	8b 80 a0 00 00 00    	mov    eax,DWORD PTR [eax+0xa0]
c000a277:	8d 50 01             	lea    edx,[eax+0x1]
c000a27a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a27e:	89 90 a0 00 00 00    	mov    DWORD PTR [eax+0xa0],edx
c000a284:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a288:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [eax+0xa0]
c000a28e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a292:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a298:	0f b6 c0             	movzx  eax,al
c000a29b:	83 e8 01             	sub    eax,0x1
c000a29e:	8a 80 30 02 03 c0    	mov    al,BYTE PTR [eax-0x3ffcfdd0]
c000a2a4:	0f b6 c0             	movzx  eax,al
c000a2a7:	39 c2                	cmp    edx,eax
c000a2a9:	0f 82 65 01 00 00    	jb     c000a414 <tcp_slowtmr+0x2ac>
c000a2af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2b3:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c000a2bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2c1:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a2c7:	0f b6 c0             	movzx  eax,al
c000a2ca:	83 f8 06             	cmp    eax,0x6
c000a2cd:	77 19                	ja     c000a2e8 <tcp_slowtmr+0x180>
c000a2cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2d3:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a2d9:	83 c0 01             	add    eax,0x1
c000a2dc:	88 c2                	mov    dl,al
c000a2de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2e2:	88 90 a4 00 00 00    	mov    BYTE PTR [eax+0xa4],dl
c000a2e8:	83 ec 0c             	sub    esp,0xc
c000a2eb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a2ef:	e8 e8 63 00 00       	call   c00106dc <tcp_zero_window_probe>
c000a2f4:	83 c4 10             	add    esp,0x10
c000a2f7:	e9 18 01 00 00       	jmp    c000a414 <tcp_slowtmr+0x2ac>
c000a2fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a300:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a304:	98                   	cwde   
c000a305:	85 c0                	test   eax,eax
c000a307:	78 13                	js     c000a31c <tcp_slowtmr+0x1b4>
c000a309:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a30d:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a311:	83 c0 01             	add    eax,0x1
c000a314:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a318:	66 89 42 3a          	mov    WORD PTR [edx+0x3a],ax
c000a31c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a320:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a323:	85 c0                	test   eax,eax
c000a325:	0f 84 e9 00 00 00    	je     c000a414 <tcp_slowtmr+0x2ac>
c000a32b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a32f:	66 8b 50 3a          	mov    dx,WORD PTR [eax+0x3a]
c000a333:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a337:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a33a:	0f bf d2             	movsx  edx,dx
c000a33d:	98                   	cwde   
c000a33e:	39 c2                	cmp    edx,eax
c000a340:	0f 8c ce 00 00 00    	jl     c000a414 <tcp_slowtmr+0x2ac>
c000a346:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a34a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a34d:	83 f8 02             	cmp    eax,0x2
c000a350:	74 3a                	je     c000a38c <tcp_slowtmr+0x224>
c000a352:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a356:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000a359:	98                   	cwde   
c000a35a:	c1 f8 03             	sar    eax,0x3
c000a35d:	0f bf d0             	movsx  edx,ax
c000a360:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a364:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000a368:	98                   	cwde   
c000a369:	01 c2                	add    edx,eax
c000a36b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a36f:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a372:	0f b6 c0             	movzx  eax,al
c000a375:	8a 80 38 02 03 c0    	mov    al,BYTE PTR [eax-0x3ffcfdc8]
c000a37b:	0f b6 c0             	movzx  eax,al
c000a37e:	88 c1                	mov    cl,al
c000a380:	d3 e2                	shl    edx,cl
c000a382:	89 d0                	mov    eax,edx
c000a384:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a388:	66 89 42 4c          	mov    WORD PTR [edx+0x4c],ax
c000a38c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a390:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000a396:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a39a:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000a39d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a3a1:	66 8b 52 56          	mov    dx,WORD PTR [edx+0x56]
c000a3a5:	0f b7 d8             	movzx  ebx,ax
c000a3a8:	0f b7 ca             	movzx  ecx,dx
c000a3ab:	39 cb                	cmp    ebx,ecx
c000a3ad:	76 05                	jbe    c000a3b4 <tcp_slowtmr+0x24c>
c000a3af:	89 d0                	mov    eax,edx
c000a3b1:	8d 76 00             	lea    esi,[esi+0x0]
c000a3b4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000a3b9:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000a3be:	d1 e8                	shr    eax,1
c000a3c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a3c4:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000a3c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3cc:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000a3cf:	0f b7 d0             	movzx  edx,ax
c000a3d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3d6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a3d9:	0f b7 c0             	movzx  eax,ax
c000a3dc:	01 c0                	add    eax,eax
c000a3de:	39 c2                	cmp    edx,eax
c000a3e0:	7d 12                	jge    c000a3f4 <tcp_slowtmr+0x28c>
c000a3e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3e6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a3e9:	d1 e0                	shl    eax,1
c000a3eb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a3ef:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000a3f3:	90                   	nop
c000a3f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3f8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a3fb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a3ff:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000a403:	83 ec 0c             	sub    esp,0xc
c000a406:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a40a:	e8 c9 5f 00 00       	call   c00103d8 <tcp_rexmit_rto>
c000a40f:	83 c4 10             	add    esp,0x10
c000a412:	66 90                	xchg   ax,ax
c000a414:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a418:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a41b:	83 f8 06             	cmp    eax,0x6
c000a41e:	75 24                	jne    c000a444 <tcp_slowtmr+0x2dc>
c000a420:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a426:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a42a:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a42d:	29 c2                	sub    edx,eax
c000a42f:	89 d0                	mov    eax,edx
c000a431:	83 f8 28             	cmp    eax,0x28
c000a434:	76 0e                	jbe    c000a444 <tcp_slowtmr+0x2dc>
c000a436:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a43a:	83 c0 01             	add    eax,0x1
c000a43d:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a441:	8d 76 00             	lea    esi,[esi+0x0]
c000a444:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a448:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000a44b:	0f b6 c0             	movzx  eax,al
c000a44e:	83 e0 08             	and    eax,0x8
c000a451:	0f 84 e1 00 00 00    	je     c000a538 <tcp_slowtmr+0x3d0>
c000a457:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a45b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a45e:	83 f8 04             	cmp    eax,0x4
c000a461:	74 11                	je     c000a474 <tcp_slowtmr+0x30c>
c000a463:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a467:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a46a:	83 f8 07             	cmp    eax,0x7
c000a46d:	0f 85 c5 00 00 00    	jne    c000a538 <tcp_slowtmr+0x3d0>
c000a473:	90                   	nop
c000a474:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a47a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a47e:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a481:	89 d1                	mov    ecx,edx
c000a483:	29 c1                	sub    ecx,eax
c000a485:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a489:	8b 80 9c 00 00 00    	mov    eax,DWORD PTR [eax+0x9c]
c000a48f:	05 b8 4c 0a 00       	add    eax,0xa4cb8
c000a494:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a499:	f7 e2                	mul    edx
c000a49b:	89 d0                	mov    eax,edx
c000a49d:	c1 e8 05             	shr    eax,0x5
c000a4a0:	39 c1                	cmp    ecx,eax
c000a4a2:	76 18                	jbe    c000a4bc <tcp_slowtmr+0x354>
c000a4a4:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a4a8:	83 c0 01             	add    eax,0x1
c000a4ab:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a4af:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c000a4b3:	83 c0 01             	add    eax,0x1
c000a4b6:	88 44 24 16          	mov    BYTE PTR [esp+0x16],al
c000a4ba:	eb 7c                	jmp    c000a538 <tcp_slowtmr+0x3d0>
c000a4bc:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a4c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4c6:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a4c9:	89 d3                	mov    ebx,edx
c000a4cb:	29 c3                	sub    ebx,eax
c000a4cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4d1:	8b 88 9c 00 00 00    	mov    ecx,DWORD PTR [eax+0x9c]
c000a4d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4db:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a4e1:	0f b6 d0             	movzx  edx,al
c000a4e4:	89 d0                	mov    eax,edx
c000a4e6:	c1 e0 03             	shl    eax,0x3
c000a4e9:	01 d0                	add    eax,edx
c000a4eb:	c1 e0 03             	shl    eax,0x3
c000a4ee:	01 d0                	add    eax,edx
c000a4f0:	c1 e0 02             	shl    eax,0x2
c000a4f3:	01 d0                	add    eax,edx
c000a4f5:	c1 e0 05             	shl    eax,0x5
c000a4f8:	29 d0                	sub    eax,edx
c000a4fa:	c1 e0 03             	shl    eax,0x3
c000a4fd:	01 c8                	add    eax,ecx
c000a4ff:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a504:	f7 e2                	mul    edx
c000a506:	89 d0                	mov    eax,edx
c000a508:	c1 e8 05             	shr    eax,0x5
c000a50b:	39 c3                	cmp    ebx,eax
c000a50d:	76 29                	jbe    c000a538 <tcp_slowtmr+0x3d0>
c000a50f:	83 ec 0c             	sub    esp,0xc
c000a512:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a516:	e8 f9 60 00 00       	call   c0010614 <tcp_keepalive>
c000a51b:	83 c4 10             	add    esp,0x10
c000a51e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a522:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a528:	83 c0 01             	add    eax,0x1
c000a52b:	88 c2                	mov    dl,al
c000a52d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a531:	88 90 a5 00 00 00    	mov    BYTE PTR [eax+0xa5],dl
c000a537:	90                   	nop
c000a538:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a53c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a542:	85 c0                	test   eax,eax
c000a544:	74 4e                	je     c000a594 <tcp_slowtmr+0x42c>
c000a546:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a54c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a550:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a553:	89 d1                	mov    ecx,edx
c000a555:	29 c1                	sub    ecx,eax
c000a557:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a55b:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a55e:	0f bf d0             	movsx  edx,ax
c000a561:	89 d0                	mov    eax,edx
c000a563:	01 c0                	add    eax,eax
c000a565:	01 d0                	add    eax,edx
c000a567:	01 c0                	add    eax,eax
c000a569:	39 c1                	cmp    ecx,eax
c000a56b:	72 27                	jb     c000a594 <tcp_slowtmr+0x42c>
c000a56d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a571:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a577:	83 ec 0c             	sub    esp,0xc
c000a57a:	50                   	push   eax
c000a57b:	e8 e4 f9 ff ff       	call   c0009f64 <tcp_segs_free>
c000a580:	83 c4 10             	add    esp,0x10
c000a583:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a587:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a591:	8d 76 00             	lea    esi,[esi+0x0]
c000a594:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a598:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a59b:	83 f8 03             	cmp    eax,0x3
c000a59e:	75 24                	jne    c000a5c4 <tcp_slowtmr+0x45c>
c000a5a0:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a5a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5aa:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a5ad:	29 c2                	sub    edx,eax
c000a5af:	89 d0                	mov    eax,edx
c000a5b1:	83 f8 28             	cmp    eax,0x28
c000a5b4:	76 0e                	jbe    c000a5c4 <tcp_slowtmr+0x45c>
c000a5b6:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a5ba:	83 c0 01             	add    eax,0x1
c000a5bd:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a5c1:	8d 76 00             	lea    esi,[esi+0x0]
c000a5c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5c8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a5cb:	83 f8 09             	cmp    eax,0x9
c000a5ce:	75 24                	jne    c000a5f4 <tcp_slowtmr+0x48c>
c000a5d0:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a5d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5da:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a5dd:	29 c2                	sub    edx,eax
c000a5df:	89 d0                	mov    eax,edx
c000a5e1:	3d f0 00 00 00       	cmp    eax,0xf0
c000a5e6:	76 0c                	jbe    c000a5f4 <tcp_slowtmr+0x48c>
c000a5e8:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a5ec:	83 c0 01             	add    eax,0x1
c000a5ef:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a5f3:	90                   	nop
c000a5f4:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000a5f9:	85 c0                	test   eax,eax
c000a5fb:	0f 84 13 01 00 00    	je     c000a714 <tcp_slowtmr+0x5ac>
c000a601:	83 ec 0c             	sub    esp,0xc
c000a604:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a608:	e8 77 fa ff ff       	call   c000a084 <tcp_pcb_purge>
c000a60d:	83 c4 10             	add    esp,0x10
c000a610:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a615:	74 31                	je     c000a648 <tcp_slowtmr+0x4e0>
c000a617:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a61c:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a620:	75 16                	jne    c000a638 <tcp_slowtmr+0x4d0>
c000a622:	83 ec 08             	sub    esp,0x8
c000a625:	68 d8 ff 02 c0       	push   0xc002ffd8
c000a62a:	68 46 f9 02 c0       	push   0xc002f946
c000a62f:	e8 a8 54 01 00       	call   c001fadc <CPrintf>
c000a634:	83 c4 10             	add    esp,0x10
c000a637:	90                   	nop
c000a638:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a63c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a63f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a643:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a646:	eb 2c                	jmp    c000a674 <tcp_slowtmr+0x50c>
c000a648:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a64d:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a651:	74 15                	je     c000a668 <tcp_slowtmr+0x500>
c000a653:	83 ec 08             	sub    esp,0x8
c000a656:	68 04 00 03 c0       	push   0xc0030004
c000a65b:	68 46 f9 02 c0       	push   0xc002f946
c000a660:	e8 77 54 01 00       	call   c001fadc <CPrintf>
c000a665:	83 c4 10             	add    esp,0x10
c000a668:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a66c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a66f:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000a674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a678:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a67e:	85 c0                	test   eax,eax
c000a680:	74 1e                	je     c000a6a0 <tcp_slowtmr+0x538>
c000a682:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a686:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a68c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a690:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a693:	83 ec 08             	sub    esp,0x8
c000a696:	6a f6                	push   0xfffffff6
c000a698:	52                   	push   edx
c000a699:	ff d0                	call   eax
c000a69b:	83 c4 10             	add    esp,0x10
c000a69e:	66 90                	xchg   ax,ax
c000a6a0:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000a6a5:	85 c0                	test   eax,eax
c000a6a7:	74 3f                	je     c000a6e8 <tcp_slowtmr+0x580>
c000a6a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6ad:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000a6b1:	0f b7 f0             	movzx  esi,ax
c000a6b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6b8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a6bb:	0f b7 d8             	movzx  ebx,ax
c000a6be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6c2:	8d 78 04             	lea    edi,[eax+0x4]
c000a6c5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a6c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6cd:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a6d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6d4:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000a6d7:	83 ec 08             	sub    esp,0x8
c000a6da:	56                   	push   esi
c000a6db:	53                   	push   ebx
c000a6dc:	57                   	push   edi
c000a6dd:	51                   	push   ecx
c000a6de:	52                   	push   edx
c000a6df:	50                   	push   eax
c000a6e0:	e8 7f 5b 00 00       	call   c0010264 <tcp_rst>
c000a6e5:	83 c4 20             	add    esp,0x20
c000a6e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a6f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6f4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a6f7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a6fb:	83 ec 08             	sub    esp,0x8
c000a6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a702:	6a 02                	push   0x2
c000a704:	e8 e3 d2 ff ff       	call   c00079ec <memp_free>
c000a709:	83 c4 10             	add    esp,0x10
c000a70c:	e9 9b 00 00 00       	jmp    c000a7ac <tcp_slowtmr+0x644>
c000a711:	8d 76 00             	lea    esi,[esi+0x0]
c000a714:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a718:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a71c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a720:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a723:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a727:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a72b:	8a 40 38             	mov    al,BYTE PTR [eax+0x38]
c000a72e:	83 c0 01             	add    eax,0x1
c000a731:	88 c2                	mov    dl,al
c000a733:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a737:	88 50 38             	mov    BYTE PTR [eax+0x38],dl
c000a73a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a73e:	8a 50 38             	mov    dl,BYTE PTR [eax+0x38]
c000a741:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a745:	8a 40 39             	mov    al,BYTE PTR [eax+0x39]
c000a748:	0f b6 d2             	movzx  edx,dl
c000a74b:	0f b6 c0             	movzx  eax,al
c000a74e:	39 c2                	cmp    edx,eax
c000a750:	72 5a                	jb     c000a7ac <tcp_slowtmr+0x644>
c000a752:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a756:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000a75a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a75e:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a764:	85 c0                	test   eax,eax
c000a766:	74 24                	je     c000a78c <tcp_slowtmr+0x624>
c000a768:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a76c:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a772:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a776:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a779:	83 ec 08             	sub    esp,0x8
c000a77c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000a780:	52                   	push   edx
c000a781:	ff d0                	call   eax
c000a783:	83 c4 10             	add    esp,0x10
c000a786:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000a78a:	eb 08                	jmp    c000a794 <tcp_slowtmr+0x62c>
c000a78c:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a791:	8d 76 00             	lea    esi,[esi+0x0]
c000a794:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c000a799:	85 c0                	test   eax,eax
c000a79b:	75 0f                	jne    c000a7ac <tcp_slowtmr+0x644>
c000a79d:	83 ec 0c             	sub    esp,0xc
c000a7a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a7a4:	e8 2f 56 00 00       	call   c000fdd8 <tcp_output>
c000a7a9:	83 c4 10             	add    esp,0x10
c000a7ac:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000a7b1:	0f 85 e1 f9 ff ff    	jne    c000a198 <tcp_slowtmr+0x30>
c000a7b7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a7bf:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000a7c4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a7c8:	e9 0b 01 00 00       	jmp    c000a8d8 <tcp_slowtmr+0x770>
c000a7cd:	8d 76 00             	lea    esi,[esi+0x0]
c000a7d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a7d7:	83 f8 0a             	cmp    eax,0xa
c000a7da:	74 18                	je     c000a7f4 <tcp_slowtmr+0x68c>
c000a7dc:	83 ec 08             	sub    esp,0x8
c000a7df:	68 30 00 03 c0       	push   0xc0030030
c000a7e4:	68 46 f9 02 c0       	push   0xc002f946
c000a7e9:	e8 ee 52 01 00       	call   c001fadc <CPrintf>
c000a7ee:	83 c4 10             	add    esp,0x10
c000a7f1:	8d 76 00             	lea    esi,[esi+0x0]
c000a7f4:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a7f9:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a7ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a803:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a806:	29 c2                	sub    edx,eax
c000a808:	89 d0                	mov    eax,edx
c000a80a:	3d f0 00 00 00       	cmp    eax,0xf0
c000a80f:	76 0b                	jbe    c000a81c <tcp_slowtmr+0x6b4>
c000a811:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a815:	83 c0 01             	add    eax,0x1
c000a818:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a81c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000a821:	85 c0                	test   eax,eax
c000a823:	0f 84 9b 00 00 00    	je     c000a8c4 <tcp_slowtmr+0x75c>
c000a829:	83 ec 0c             	sub    esp,0xc
c000a82c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a830:	e8 4f f8 ff ff       	call   c000a084 <tcp_pcb_purge>
c000a835:	83 c4 10             	add    esp,0x10
c000a838:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a83d:	74 31                	je     c000a870 <tcp_slowtmr+0x708>
c000a83f:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000a844:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a848:	75 16                	jne    c000a860 <tcp_slowtmr+0x6f8>
c000a84a:	83 ec 08             	sub    esp,0x8
c000a84d:	68 60 00 03 c0       	push   0xc0030060
c000a852:	68 46 f9 02 c0       	push   0xc002f946
c000a857:	e8 80 52 01 00       	call   c001fadc <CPrintf>
c000a85c:	83 c4 10             	add    esp,0x10
c000a85f:	90                   	nop
c000a860:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a864:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a867:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a86b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a86e:	eb 2c                	jmp    c000a89c <tcp_slowtmr+0x734>
c000a870:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000a875:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a879:	74 15                	je     c000a890 <tcp_slowtmr+0x728>
c000a87b:	83 ec 08             	sub    esp,0x8
c000a87e:	68 88 00 03 c0       	push   0xc0030088
c000a883:	68 46 f9 02 c0       	push   0xc002f946
c000a888:	e8 4f 52 01 00       	call   c001fadc <CPrintf>
c000a88d:	83 c4 10             	add    esp,0x10
c000a890:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a894:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a897:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000a89c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a8a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a8ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8af:	83 ec 08             	sub    esp,0x8
c000a8b2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a8b6:	6a 02                	push   0x2
c000a8b8:	e8 2f d1 ff ff       	call   c00079ec <memp_free>
c000a8bd:	83 c4 10             	add    esp,0x10
c000a8c0:	eb 16                	jmp    c000a8d8 <tcp_slowtmr+0x770>
c000a8c2:	66 90                	xchg   ax,ax
c000a8c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8c8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a8cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8d0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a8d3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8d7:	90                   	nop
c000a8d8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000a8dd:	0f 85 ed fe ff ff    	jne    c000a7d0 <tcp_slowtmr+0x668>
c000a8e3:	90                   	nop
c000a8e4:	83 c4 20             	add    esp,0x20
c000a8e7:	5b                   	pop    ebx
c000a8e8:	5e                   	pop    esi
c000a8e9:	5f                   	pop    edi
c000a8ea:	c3                   	ret    
c000a8eb:	90                   	nop

c000a8ec <tcp_pcb_remove>:
c000a8ec:	83 ec 0c             	sub    esp,0xc
c000a8ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8f3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a8f5:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000a8f9:	75 11                	jne    c000a90c <tcp_pcb_remove+0x20>
c000a8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8ff:	8b 00                	mov    eax,DWORD PTR [eax]
c000a901:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a908:	89 10                	mov    DWORD PTR [eax],edx
c000a90a:	eb 4c                	jmp    c000a958 <tcp_pcb_remove+0x6c>
c000a90c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a910:	8b 00                	mov    eax,DWORD PTR [eax]
c000a912:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000a917:	eb 33                	jmp    c000a94c <tcp_pcb_remove+0x60>
c000a919:	8d 76 00             	lea    esi,[esi+0x0]
c000a91c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000a921:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a924:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000a928:	75 12                	jne    c000a93c <tcp_pcb_remove+0x50>
c000a92a:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000a92f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a933:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a936:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a939:	eb 1d                	jmp    c000a958 <tcp_pcb_remove+0x6c>
c000a93b:	90                   	nop
c000a93c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000a941:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a944:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000a949:	8d 76 00             	lea    esi,[esi+0x0]
c000a94c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000a951:	85 c0                	test   eax,eax
c000a953:	75 c7                	jne    c000a91c <tcp_pcb_remove+0x30>
c000a955:	8d 76 00             	lea    esi,[esi+0x0]
c000a958:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a95c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000a963:	83 ec 0c             	sub    esp,0xc
c000a966:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000a96a:	e8 15 f7 ff ff       	call   c000a084 <tcp_pcb_purge>
c000a96f:	83 c4 10             	add    esp,0x10
c000a972:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a976:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a979:	83 f8 0a             	cmp    eax,0xa
c000a97c:	74 3e                	je     c000a9bc <tcp_pcb_remove+0xd0>
c000a97e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a982:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a985:	83 f8 01             	cmp    eax,0x1
c000a988:	74 32                	je     c000a9bc <tcp_pcb_remove+0xd0>
c000a98a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a98e:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000a991:	0f b6 c0             	movzx  eax,al
c000a994:	83 e0 01             	and    eax,0x1
c000a997:	74 23                	je     c000a9bc <tcp_pcb_remove+0xd0>
c000a999:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a99d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000a9a0:	83 c8 02             	or     eax,0x2
c000a9a3:	88 c2                	mov    dl,al
c000a9a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a9a9:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000a9ac:	83 ec 0c             	sub    esp,0xc
c000a9af:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000a9b3:	e8 20 54 00 00       	call   c000fdd8 <tcp_output>
c000a9b8:	83 c4 10             	add    esp,0x10
c000a9bb:	90                   	nop
c000a9bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a9c0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a9c3:	83 f8 01             	cmp    eax,0x1
c000a9c6:	74 64                	je     c000aa2c <tcp_pcb_remove+0x140>
c000a9c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a9cc:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000a9cf:	85 c0                	test   eax,eax
c000a9d1:	74 15                	je     c000a9e8 <tcp_pcb_remove+0xfc>
c000a9d3:	83 ec 08             	sub    esp,0x8
c000a9d6:	68 2e 01 03 c0       	push   0xc003012e
c000a9db:	68 46 f9 02 c0       	push   0xc002f946
c000a9e0:	e8 f7 50 01 00       	call   c001fadc <CPrintf>
c000a9e5:	83 c4 10             	add    esp,0x10
c000a9e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a9ec:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a9ef:	85 c0                	test   eax,eax
c000a9f1:	74 15                	je     c000aa08 <tcp_pcb_remove+0x11c>
c000a9f3:	83 ec 08             	sub    esp,0x8
c000a9f6:	68 46 01 03 c0       	push   0xc0030146
c000a9fb:	68 46 f9 02 c0       	push   0xc002f946
c000aa00:	e8 d7 50 01 00       	call   c001fadc <CPrintf>
c000aa05:	83 c4 10             	add    esp,0x10
c000aa08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa0c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000aa12:	85 c0                	test   eax,eax
c000aa14:	74 16                	je     c000aa2c <tcp_pcb_remove+0x140>
c000aa16:	83 ec 08             	sub    esp,0x8
c000aa19:	68 5f 01 03 c0       	push   0xc003015f
c000aa1e:	68 46 f9 02 c0       	push   0xc002f946
c000aa23:	e8 b4 50 01 00       	call   c001fadc <CPrintf>
c000aa28:	83 c4 10             	add    esp,0x10
c000aa2b:	90                   	nop
c000aa2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa30:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000aa37:	90                   	nop
c000aa38:	83 c4 0c             	add    esp,0xc
c000aa3b:	c3                   	ret    

c000aa3c <tcp_close_shutdown>:
c000aa3c:	57                   	push   edi
c000aa3d:	56                   	push   esi
c000aa3e:	53                   	push   ebx
c000aa3f:	83 ec 20             	sub    esp,0x20
c000aa42:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aa46:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000aa4a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000aa4f:	85 c0                	test   eax,eax
c000aa51:	0f 84 41 01 00 00    	je     c000ab98 <tcp_close_shutdown+0x15c>
c000aa57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa5b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aa5e:	83 f8 01             	cmp    eax,0x1
c000aa61:	0f 84 31 01 00 00    	je     c000ab98 <tcp_close_shutdown+0x15c>
c000aa67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa6b:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000aa71:	85 c0                	test   eax,eax
c000aa73:	75 17                	jne    c000aa8c <tcp_close_shutdown+0x50>
c000aa75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa79:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000aa7c:	0f b7 c0             	movzx  eax,ax
c000aa7f:	3d 60 08 00 00       	cmp    eax,0x860
c000aa84:	0f 84 0e 01 00 00    	je     c000ab98 <tcp_close_shutdown+0x15c>
c000aa8a:	66 90                	xchg   ax,ax
c000aa8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa90:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000aa93:	0f b6 c0             	movzx  eax,al
c000aa96:	83 e0 10             	and    eax,0x10
c000aa99:	75 15                	jne    c000aab0 <tcp_close_shutdown+0x74>
c000aa9b:	83 ec 08             	sub    esp,0x8
c000aa9e:	68 76 01 03 c0       	push   0xc0030176
c000aaa3:	68 46 f9 02 c0       	push   0xc002f946
c000aaa8:	e8 2f 50 01 00       	call   c001fadc <CPrintf>
c000aaad:	83 c4 10             	add    esp,0x10
c000aab0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aab4:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000aab8:	0f b7 f0             	movzx  esi,ax
c000aabb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aabf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000aac2:	0f b7 d8             	movzx  ebx,ax
c000aac5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aac9:	8d 78 04             	lea    edi,[eax+0x4]
c000aacc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000aad0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aad4:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000aad7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aadb:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000aade:	83 ec 08             	sub    esp,0x8
c000aae1:	56                   	push   esi
c000aae2:	53                   	push   ebx
c000aae3:	57                   	push   edi
c000aae4:	51                   	push   ecx
c000aae5:	52                   	push   edx
c000aae6:	50                   	push   eax
c000aae7:	e8 78 57 00 00       	call   c0010264 <tcp_rst>
c000aaec:	83 c4 20             	add    esp,0x20
c000aaef:	83 ec 0c             	sub    esp,0xc
c000aaf2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aaf6:	e8 89 f5 ff ff       	call   c000a084 <tcp_pcb_purge>
c000aafb:	83 c4 10             	add    esp,0x10
c000aafe:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ab03:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ab07:	75 0f                	jne    c000ab18 <tcp_close_shutdown+0xdc>
c000ab09:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ab0e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab11:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000ab16:	eb 48                	jmp    c000ab60 <tcp_close_shutdown+0x124>
c000ab18:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ab1d:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ab22:	eb 30                	jmp    c000ab54 <tcp_close_shutdown+0x118>
c000ab24:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab29:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab2c:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ab30:	75 12                	jne    c000ab44 <tcp_close_shutdown+0x108>
c000ab32:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab37:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ab3b:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ab3e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ab41:	eb 1d                	jmp    c000ab60 <tcp_close_shutdown+0x124>
c000ab43:	90                   	nop
c000ab44:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab49:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab4c:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ab51:	8d 76 00             	lea    esi,[esi+0x0]
c000ab54:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab59:	85 c0                	test   eax,eax
c000ab5b:	75 c7                	jne    c000ab24 <tcp_close_shutdown+0xe8>
c000ab5d:	8d 76 00             	lea    esi,[esi+0x0]
c000ab60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab64:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ab6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab6f:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000ab76:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000ab7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab80:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ab83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab87:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000ab8c:	e8 d7 5e 00 00       	call   c0010a68 <tcp_timer_needed>
c000ab91:	b0 00                	mov    al,0x0
c000ab93:	e9 f4 01 00 00       	jmp    c000ad8c <tcp_close_shutdown+0x350>
c000ab98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab9c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab9f:	83 f8 07             	cmp    eax,0x7
c000aba2:	0f 87 a4 01 00 00    	ja     c000ad4c <tcp_close_shutdown+0x310>
c000aba8:	8b 04 85 00 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfe00]
c000abaf:	ff e0                	jmp    eax
c000abb1:	8d 76 00             	lea    esi,[esi+0x0]
c000abb4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000abb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000abbd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000abc0:	0f b7 c0             	movzx  eax,ax
c000abc3:	85 c0                	test   eax,eax
c000abc5:	74 71                	je     c000ac38 <tcp_close_shutdown+0x1fc>
c000abc7:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000abcc:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000abd0:	75 12                	jne    c000abe4 <tcp_close_shutdown+0x1a8>
c000abd2:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000abd7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000abda:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000abdf:	eb 4b                	jmp    c000ac2c <tcp_close_shutdown+0x1f0>
c000abe1:	8d 76 00             	lea    esi,[esi+0x0]
c000abe4:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000abe9:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000abee:	eb 30                	jmp    c000ac20 <tcp_close_shutdown+0x1e4>
c000abf0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000abf5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000abf8:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000abfc:	75 12                	jne    c000ac10 <tcp_close_shutdown+0x1d4>
c000abfe:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ac03:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ac07:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ac0a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ac0d:	eb 1d                	jmp    c000ac2c <tcp_close_shutdown+0x1f0>
c000ac0f:	90                   	nop
c000ac10:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ac15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ac18:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ac1d:	8d 76 00             	lea    esi,[esi+0x0]
c000ac20:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ac25:	85 c0                	test   eax,eax
c000ac27:	75 c7                	jne    c000abf0 <tcp_close_shutdown+0x1b4>
c000ac29:	8d 76 00             	lea    esi,[esi+0x0]
c000ac2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac30:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ac37:	90                   	nop
c000ac38:	83 ec 08             	sub    esp,0x8
c000ac3b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ac3f:	6a 02                	push   0x2
c000ac41:	e8 a6 cd ff ff       	call   c00079ec <memp_free>
c000ac46:	83 c4 10             	add    esp,0x10
c000ac49:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ac51:	e9 12 01 00 00       	jmp    c000ad68 <tcp_close_shutdown+0x32c>
c000ac56:	66 90                	xchg   ax,ax
c000ac58:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ac5d:	83 ec 08             	sub    esp,0x8
c000ac60:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ac64:	68 78 68 03 c0       	push   0xc0036878
c000ac69:	e8 7e fc ff ff       	call   c000a8ec <tcp_pcb_remove>
c000ac6e:	83 c4 10             	add    esp,0x10
c000ac71:	83 ec 08             	sub    esp,0x8
c000ac74:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ac78:	6a 03                	push   0x3
c000ac7a:	e8 6d cd ff ff       	call   c00079ec <memp_free>
c000ac7f:	83 c4 10             	add    esp,0x10
c000ac82:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ac8a:	e9 d9 00 00 00       	jmp    c000ad68 <tcp_close_shutdown+0x32c>
c000ac8f:	90                   	nop
c000ac90:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ac95:	83 ec 08             	sub    esp,0x8
c000ac98:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ac9c:	68 70 68 03 c0       	push   0xc0036870
c000aca1:	e8 46 fc ff ff       	call   c000a8ec <tcp_pcb_remove>
c000aca6:	83 c4 10             	add    esp,0x10
c000aca9:	83 ec 08             	sub    esp,0x8
c000acac:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000acb0:	6a 02                	push   0x2
c000acb2:	e8 35 cd ff ff       	call   c00079ec <memp_free>
c000acb7:	83 c4 10             	add    esp,0x10
c000acba:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000acc2:	e9 a1 00 00 00       	jmp    c000ad68 <tcp_close_shutdown+0x32c>
c000acc7:	90                   	nop
c000acc8:	83 ec 0c             	sub    esp,0xc
c000accb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000accf:	e8 54 4d 00 00       	call   c000fa28 <tcp_send_fin>
c000acd4:	83 c4 10             	add    esp,0x10
c000acd7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000acdb:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000ace0:	85 c0                	test   eax,eax
c000ace2:	75 78                	jne    c000ad5c <tcp_close_shutdown+0x320>
c000ace4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ace8:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000acef:	eb 6b                	jmp    c000ad5c <tcp_close_shutdown+0x320>
c000acf1:	8d 76 00             	lea    esi,[esi+0x0]
c000acf4:	83 ec 0c             	sub    esp,0xc
c000acf7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000acfb:	e8 28 4d 00 00       	call   c000fa28 <tcp_send_fin>
c000ad00:	83 c4 10             	add    esp,0x10
c000ad03:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000ad07:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000ad0c:	85 c0                	test   eax,eax
c000ad0e:	75 50                	jne    c000ad60 <tcp_close_shutdown+0x324>
c000ad10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad14:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000ad1b:	eb 43                	jmp    c000ad60 <tcp_close_shutdown+0x324>
c000ad1d:	8d 76 00             	lea    esi,[esi+0x0]
c000ad20:	83 ec 0c             	sub    esp,0xc
c000ad23:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ad27:	e8 fc 4c 00 00       	call   c000fa28 <tcp_send_fin>
c000ad2c:	83 c4 10             	add    esp,0x10
c000ad2f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000ad33:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000ad38:	85 c0                	test   eax,eax
c000ad3a:	75 28                	jne    c000ad64 <tcp_close_shutdown+0x328>
c000ad3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad40:	c7 40 10 09 00 00 00 	mov    DWORD PTR [eax+0x10],0x9
c000ad47:	eb 1b                	jmp    c000ad64 <tcp_close_shutdown+0x328>
c000ad49:	8d 76 00             	lea    esi,[esi+0x0]
c000ad4c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ad51:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ad59:	eb 0d                	jmp    c000ad68 <tcp_close_shutdown+0x32c>
c000ad5b:	90                   	nop
c000ad5c:	90                   	nop
c000ad5d:	eb 09                	jmp    c000ad68 <tcp_close_shutdown+0x32c>
c000ad5f:	90                   	nop
c000ad60:	90                   	nop
c000ad61:	eb 05                	jmp    c000ad68 <tcp_close_shutdown+0x32c>
c000ad63:	90                   	nop
c000ad64:	90                   	nop
c000ad65:	8d 76 00             	lea    esi,[esi+0x0]
c000ad68:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000ad6d:	74 19                	je     c000ad88 <tcp_close_shutdown+0x34c>
c000ad6f:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000ad74:	85 c0                	test   eax,eax
c000ad76:	75 10                	jne    c000ad88 <tcp_close_shutdown+0x34c>
c000ad78:	83 ec 0c             	sub    esp,0xc
c000ad7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ad7f:	e8 54 50 00 00       	call   c000fdd8 <tcp_output>
c000ad84:	83 c4 10             	add    esp,0x10
c000ad87:	90                   	nop
c000ad88:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000ad8c:	83 c4 20             	add    esp,0x20
c000ad8f:	5b                   	pop    ebx
c000ad90:	5e                   	pop    esi
c000ad91:	5f                   	pop    edi
c000ad92:	c3                   	ret    
c000ad93:	90                   	nop

c000ad94 <tcp_close>:
c000ad94:	83 ec 0c             	sub    esp,0xc
c000ad97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad9b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ad9e:	83 f8 01             	cmp    eax,0x1
c000ada1:	74 15                	je     c000adb8 <tcp_close+0x24>
c000ada3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ada7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000adaa:	83 c8 10             	or     eax,0x10
c000adad:	88 c2                	mov    dl,al
c000adaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adb3:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000adb6:	66 90                	xchg   ax,ax
c000adb8:	83 ec 08             	sub    esp,0x8
c000adbb:	6a 01                	push   0x1
c000adbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000adc1:	e8 76 fc ff ff       	call   c000aa3c <tcp_close_shutdown>
c000adc6:	83 c4 10             	add    esp,0x10
c000adc9:	83 c4 0c             	add    esp,0xc
c000adcc:	c3                   	ret    
c000adcd:	8d 76 00             	lea    esi,[esi+0x0]

c000add0 <tcp_recv_null>:
c000add0:	83 ec 1c             	sub    esp,0x1c
c000add3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000add7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000addb:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000ade0:	74 2e                	je     c000ae10 <tcp_recv_null+0x40>
c000ade2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ade6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ade9:	0f b7 c0             	movzx  eax,ax
c000adec:	83 ec 08             	sub    esp,0x8
c000adef:	50                   	push   eax
c000adf0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000adf4:	e8 af ee ff ff       	call   c0009ca8 <tcp_recved>
c000adf9:	83 c4 10             	add    esp,0x10
c000adfc:	83 ec 0c             	sub    esp,0xc
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	e8 a0 d4 ff ff       	call   c00082a8 <pbuf_free>
c000ae08:	83 c4 10             	add    esp,0x10
c000ae0b:	eb 1f                	jmp    c000ae2c <tcp_recv_null+0x5c>
c000ae0d:	8d 76 00             	lea    esi,[esi+0x0]
c000ae10:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c000ae15:	85 c0                	test   eax,eax
c000ae17:	75 13                	jne    c000ae2c <tcp_recv_null+0x5c>
c000ae19:	83 ec 0c             	sub    esp,0xc
c000ae1c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ae20:	e8 6f ff ff ff       	call   c000ad94 <tcp_close>
c000ae25:	83 c4 10             	add    esp,0x10
c000ae28:	eb 06                	jmp    c000ae30 <tcp_recv_null+0x60>
c000ae2a:	66 90                	xchg   ax,ax
c000ae2c:	b0 00                	mov    al,0x0
c000ae2e:	66 90                	xchg   ax,ax
c000ae30:	83 c4 1c             	add    esp,0x1c
c000ae33:	c3                   	ret    

c000ae34 <tcp_fasttmr>:
c000ae34:	83 ec 1c             	sub    esp,0x1c
c000ae37:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ae3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ae40:	e9 03 01 00 00       	jmp    c000af48 <tcp_fasttmr+0x114>
c000ae45:	8d 76 00             	lea    esi,[esi+0x0]
c000ae48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ae4c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae4f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ae53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ae57:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000ae5d:	85 c0                	test   eax,eax
c000ae5f:	0f 84 8f 00 00 00    	je     c000aef4 <tcp_fasttmr+0xc0>
c000ae65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ae69:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000ae6f:	85 c0                	test   eax,eax
c000ae71:	74 31                	je     c000aea4 <tcp_fasttmr+0x70>
c000ae73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ae77:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000ae7d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ae81:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000ae87:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ae8b:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000ae8e:	6a 00                	push   0x0
c000ae90:	51                   	push   ecx
c000ae91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae95:	52                   	push   edx
c000ae96:	ff d0                	call   eax
c000ae98:	83 c4 10             	add    esp,0x10
c000ae9b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ae9f:	eb 23                	jmp    c000aec4 <tcp_fasttmr+0x90>
c000aea1:	8d 76 00             	lea    esi,[esi+0x0]
c000aea4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aea8:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000aeae:	6a 00                	push   0x0
c000aeb0:	50                   	push   eax
c000aeb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeb5:	6a 00                	push   0x0
c000aeb7:	e8 14 ff ff ff       	call   c000add0 <tcp_recv_null>
c000aebc:	83 c4 10             	add    esp,0x10
c000aebf:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000aec3:	90                   	nop
c000aec4:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000aec9:	85 c0                	test   eax,eax
c000aecb:	75 13                	jne    c000aee0 <tcp_fasttmr+0xac>
c000aecd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aed1:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000aedb:	eb 17                	jmp    c000aef4 <tcp_fasttmr+0xc0>
c000aedd:	8d 76 00             	lea    esi,[esi+0x0]
c000aee0:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000aee5:	83 f8 f6             	cmp    eax,0xfffffff6
c000aee8:	75 0a                	jne    c000aef4 <tcp_fasttmr+0xc0>
c000aeea:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aef2:	66 90                	xchg   ax,ax
c000aef4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000aef9:	74 45                	je     c000af40 <tcp_fasttmr+0x10c>
c000aefb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aeff:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000af02:	0f b6 c0             	movzx  eax,al
c000af05:	83 e0 01             	and    eax,0x1
c000af08:	74 36                	je     c000af40 <tcp_fasttmr+0x10c>
c000af0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af0e:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000af11:	83 c8 02             	or     eax,0x2
c000af14:	88 c2                	mov    dl,al
c000af16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af1a:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000af1d:	83 ec 0c             	sub    esp,0xc
c000af20:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000af24:	e8 af 4e 00 00       	call   c000fdd8 <tcp_output>
c000af29:	83 c4 10             	add    esp,0x10
c000af2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af30:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000af33:	83 e0 fc             	and    eax,0xfffffffc
c000af36:	88 c2                	mov    dl,al
c000af38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af3c:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000af3f:	90                   	nop
c000af40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af44:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000af48:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000af4d:	0f 85 f5 fe ff ff    	jne    c000ae48 <tcp_fasttmr+0x14>
c000af53:	90                   	nop
c000af54:	83 c4 1c             	add    esp,0x1c
c000af57:	c3                   	ret    

c000af58 <tcp_tmr>:
c000af58:	83 ec 0c             	sub    esp,0xc
c000af5b:	e8 d4 fe ff ff       	call   c000ae34 <tcp_fasttmr>
c000af60:	a0 a0 a8 03 c0       	mov    al,ds:0xc003a8a0
c000af65:	83 c0 01             	add    eax,0x1
c000af68:	a2 a0 a8 03 c0       	mov    ds:0xc003a8a0,al
c000af6d:	a0 a0 a8 03 c0       	mov    al,ds:0xc003a8a0
c000af72:	0f b6 c0             	movzx  eax,al
c000af75:	83 e0 01             	and    eax,0x1
c000af78:	74 06                	je     c000af80 <tcp_tmr+0x28>
c000af7a:	e8 e9 f1 ff ff       	call   c000a168 <tcp_slowtmr>
c000af7f:	90                   	nop
c000af80:	90                   	nop
c000af81:	83 c4 0c             	add    esp,0xc
c000af84:	c3                   	ret    
c000af85:	8d 76 00             	lea    esi,[esi+0x0]

c000af88 <tcp_shutdown>:
c000af88:	83 ec 0c             	sub    esp,0xc
c000af8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af8f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000af92:	83 f8 01             	cmp    eax,0x1
c000af95:	75 09                	jne    c000afa0 <tcp_shutdown+0x18>
c000af97:	b0 f3                	mov    al,0xf3
c000af99:	e9 92 00 00 00       	jmp    c000b030 <tcp_shutdown+0xa8>
c000af9e:	66 90                	xchg   ax,ax
c000afa0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000afa5:	74 49                	je     c000aff0 <tcp_shutdown+0x68>
c000afa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afab:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000afb1:	85 c0                	test   eax,eax
c000afb3:	74 27                	je     c000afdc <tcp_shutdown+0x54>
c000afb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afb9:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000afbf:	83 ec 0c             	sub    esp,0xc
c000afc2:	50                   	push   eax
c000afc3:	e8 e0 d2 ff ff       	call   c00082a8 <pbuf_free>
c000afc8:	83 c4 10             	add    esp,0x10
c000afcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afcf:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000afd9:	8d 76 00             	lea    esi,[esi+0x0]
c000afdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afe0:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000afe3:	83 c8 10             	or     eax,0x10
c000afe6:	88 c2                	mov    dl,al
c000afe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afec:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000afef:	90                   	nop
c000aff0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000aff5:	74 2d                	je     c000b024 <tcp_shutdown+0x9c>
c000aff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000affb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000affe:	83 f8 03             	cmp    eax,0x3
c000b001:	72 25                	jb     c000b028 <tcp_shutdown+0xa0>
c000b003:	83 f8 04             	cmp    eax,0x4
c000b006:	76 08                	jbe    c000b010 <tcp_shutdown+0x88>
c000b008:	83 f8 07             	cmp    eax,0x7
c000b00b:	75 1b                	jne    c000b028 <tcp_shutdown+0xa0>
c000b00d:	8d 76 00             	lea    esi,[esi+0x0]
c000b010:	83 ec 08             	sub    esp,0x8
c000b013:	6a 00                	push   0x0
c000b015:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b019:	e8 1e fa ff ff       	call   c000aa3c <tcp_close_shutdown>
c000b01e:	83 c4 10             	add    esp,0x10
c000b021:	eb 0d                	jmp    c000b030 <tcp_shutdown+0xa8>
c000b023:	90                   	nop
c000b024:	90                   	nop
c000b025:	eb 05                	jmp    c000b02c <tcp_shutdown+0xa4>
c000b027:	90                   	nop
c000b028:	90                   	nop
c000b029:	8d 76 00             	lea    esi,[esi+0x0]
c000b02c:	b0 00                	mov    al,0x0
c000b02e:	66 90                	xchg   ax,ax
c000b030:	83 c4 0c             	add    esp,0xc
c000b033:	c3                   	ret    

c000b034 <tcp_abandon>:
c000b034:	83 ec 2c             	sub    esp,0x2c
c000b037:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b03b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b03e:	83 f8 01             	cmp    eax,0x1
c000b041:	75 15                	jne    c000b058 <tcp_abandon+0x24>
c000b043:	83 ec 08             	sub    esp,0x8
c000b046:	68 b0 00 03 c0       	push   0xc00300b0
c000b04b:	68 46 f9 02 c0       	push   0xc002f946
c000b050:	e8 87 4a 01 00       	call   c001fadc <CPrintf>
c000b055:	83 c4 10             	add    esp,0x10
c000b058:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b05c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b05f:	83 f8 0a             	cmp    eax,0xa
c000b062:	75 2c                	jne    c000b090 <tcp_abandon+0x5c>
c000b064:	83 ec 08             	sub    esp,0x8
c000b067:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b06b:	68 84 68 03 c0       	push   0xc0036884
c000b070:	e8 77 f8 ff ff       	call   c000a8ec <tcp_pcb_remove>
c000b075:	83 c4 10             	add    esp,0x10
c000b078:	83 ec 08             	sub    esp,0x8
c000b07b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b07f:	6a 02                	push   0x2
c000b081:	e8 66 c9 ff ff       	call   c00079ec <memp_free>
c000b086:	83 c4 10             	add    esp,0x10
c000b089:	e9 32 01 00 00       	jmp    c000b1c0 <tcp_abandon+0x18c>
c000b08e:	66 90                	xchg   ax,ax
c000b090:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b094:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000b097:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b09b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b09f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b0a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b0a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0aa:	8b 00                	mov    eax,DWORD PTR [eax]
c000b0ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b0b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b0bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0bf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b0c2:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000b0c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0cb:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000b0cf:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c000b0d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0d8:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000b0de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b0e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0e6:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000b0e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b0ed:	83 ec 08             	sub    esp,0x8
c000b0f0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b0f4:	68 70 68 03 c0       	push   0xc0036870
c000b0f9:	e8 ee f7 ff ff       	call   c000a8ec <tcp_pcb_remove>
c000b0fe:	83 c4 10             	add    esp,0x10
c000b101:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b105:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b108:	85 c0                	test   eax,eax
c000b10a:	74 14                	je     c000b120 <tcp_abandon+0xec>
c000b10c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b110:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b113:	83 ec 0c             	sub    esp,0xc
c000b116:	50                   	push   eax
c000b117:	e8 48 ee ff ff       	call   c0009f64 <tcp_segs_free>
c000b11c:	83 c4 10             	add    esp,0x10
c000b11f:	90                   	nop
c000b120:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b124:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b127:	85 c0                	test   eax,eax
c000b129:	74 15                	je     c000b140 <tcp_abandon+0x10c>
c000b12b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b12f:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b132:	83 ec 0c             	sub    esp,0xc
c000b135:	50                   	push   eax
c000b136:	e8 29 ee ff ff       	call   c0009f64 <tcp_segs_free>
c000b13b:	83 c4 10             	add    esp,0x10
c000b13e:	66 90                	xchg   ax,ax
c000b140:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b144:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b14a:	85 c0                	test   eax,eax
c000b14c:	74 16                	je     c000b164 <tcp_abandon+0x130>
c000b14e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b152:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b158:	83 ec 0c             	sub    esp,0xc
c000b15b:	50                   	push   eax
c000b15c:	e8 03 ee ff ff       	call   c0009f64 <tcp_segs_free>
c000b161:	83 c4 10             	add    esp,0x10
c000b164:	83 ec 08             	sub    esp,0x8
c000b167:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b16b:	6a 02                	push   0x2
c000b16d:	e8 7a c8 ff ff       	call   c00079ec <memp_free>
c000b172:	83 c4 10             	add    esp,0x10
c000b175:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000b17a:	74 14                	je     c000b190 <tcp_abandon+0x15c>
c000b17c:	83 ec 08             	sub    esp,0x8
c000b17f:	6a f6                	push   0xfffffff6
c000b181:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b185:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b189:	ff d0                	call   eax
c000b18b:	83 c4 10             	add    esp,0x10
c000b18e:	66 90                	xchg   ax,ax
c000b190:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b195:	74 29                	je     c000b1c0 <tcp_abandon+0x18c>
c000b197:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c000b19c:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c000b1a1:	83 ec 08             	sub    esp,0x8
c000b1a4:	52                   	push   edx
c000b1a5:	50                   	push   eax
c000b1a6:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b1aa:	50                   	push   eax
c000b1ab:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b1af:	50                   	push   eax
c000b1b0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b1b4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b1b8:	e8 a7 50 00 00       	call   c0010264 <tcp_rst>
c000b1bd:	83 c4 20             	add    esp,0x20
c000b1c0:	90                   	nop
c000b1c1:	83 c4 2c             	add    esp,0x2c
c000b1c4:	c3                   	ret    
c000b1c5:	8d 76 00             	lea    esi,[esi+0x0]

c000b1c8 <tcp_abort>:
c000b1c8:	83 ec 0c             	sub    esp,0xc
c000b1cb:	83 ec 08             	sub    esp,0x8
c000b1ce:	6a 01                	push   0x1
c000b1d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b1d4:	e8 5b fe ff ff       	call   c000b034 <tcp_abandon>
c000b1d9:	83 c4 10             	add    esp,0x10
c000b1dc:	90                   	nop
c000b1dd:	83 c4 0c             	add    esp,0xc
c000b1e0:	c3                   	ret    
c000b1e1:	8d 76 00             	lea    esi,[esi+0x0]

c000b1e4 <tcp_kill_prio>:
c000b1e4:	83 ec 2c             	sub    esp,0x2c
c000b1e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1eb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b1ef:	c6 44 24 13 7f       	mov    BYTE PTR [esp+0x13],0x7f
c000b1f4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b1fc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b204:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000b209:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b20d:	eb 75                	jmp    c000b284 <tcp_kill_prio+0xa0>
c000b20f:	90                   	nop
c000b210:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b214:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b217:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c000b21c:	0f b6 c0             	movzx  eax,al
c000b21f:	39 c2                	cmp    edx,eax
c000b221:	72 55                	jb     c000b278 <tcp_kill_prio+0x94>
c000b223:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b227:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b22a:	0f b6 54 24 13       	movzx  edx,BYTE PTR [esp+0x13]
c000b22f:	0f b6 c0             	movzx  eax,al
c000b232:	39 c2                	cmp    edx,eax
c000b234:	72 42                	jb     c000b278 <tcp_kill_prio+0x94>
c000b236:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b23c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b240:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b243:	29 c2                	sub    edx,eax
c000b245:	89 d0                	mov    eax,edx
c000b247:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000b24b:	77 2b                	ja     c000b278 <tcp_kill_prio+0x94>
c000b24d:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b253:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b257:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b25a:	29 c2                	sub    edx,eax
c000b25c:	89 d0                	mov    eax,edx
c000b25e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b262:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b266:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b26a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b26e:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b271:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b275:	8d 76 00             	lea    esi,[esi+0x0]
c000b278:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b27c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b27f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b283:	90                   	nop
c000b284:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b289:	75 85                	jne    c000b210 <tcp_kill_prio+0x2c>
c000b28b:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b290:	74 12                	je     c000b2a4 <tcp_kill_prio+0xc0>
c000b292:	83 ec 0c             	sub    esp,0xc
c000b295:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b299:	e8 2a ff ff ff       	call   c000b1c8 <tcp_abort>
c000b29e:	83 c4 10             	add    esp,0x10
c000b2a1:	8d 76 00             	lea    esi,[esi+0x0]
c000b2a4:	90                   	nop
c000b2a5:	83 c4 2c             	add    esp,0x2c
c000b2a8:	c3                   	ret    
c000b2a9:	8d 76 00             	lea    esi,[esi+0x0]

c000b2ac <tcp_kill_timewait>:
c000b2ac:	83 ec 1c             	sub    esp,0x1c
c000b2af:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b2b7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000b2bf:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000b2c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b2c8:	eb 42                	jmp    c000b30c <tcp_kill_timewait+0x60>
c000b2ca:	66 90                	xchg   ax,ax
c000b2cc:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b2d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b2d6:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b2d9:	29 c2                	sub    edx,eax
c000b2db:	89 d0                	mov    eax,edx
c000b2dd:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b2e1:	77 1d                	ja     c000b300 <tcp_kill_timewait+0x54>
c000b2e3:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b2e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b2ed:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b2f0:	29 c2                	sub    edx,eax
c000b2f2:	89 d0                	mov    eax,edx
c000b2f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b2f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b2fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b300:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b304:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b307:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b30b:	90                   	nop
c000b30c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b311:	75 b9                	jne    c000b2cc <tcp_kill_timewait+0x20>
c000b313:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b318:	74 12                	je     c000b32c <tcp_kill_timewait+0x80>
c000b31a:	83 ec 0c             	sub    esp,0xc
c000b31d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b321:	e8 a2 fe ff ff       	call   c000b1c8 <tcp_abort>
c000b326:	83 c4 10             	add    esp,0x10
c000b329:	8d 76 00             	lea    esi,[esi+0x0]
c000b32c:	90                   	nop
c000b32d:	83 c4 1c             	add    esp,0x1c
c000b330:	c3                   	ret    
c000b331:	8d 76 00             	lea    esi,[esi+0x0]

c000b334 <tcp_next_iss>:
c000b334:	8b 15 fc 39 03 c0    	mov    edx,DWORD PTR ds:0xc00339fc
c000b33a:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000b33f:	01 d0                	add    eax,edx
c000b341:	a3 fc 39 03 c0       	mov    ds:0xc00339fc,eax
c000b346:	a1 fc 39 03 c0       	mov    eax,ds:0xc00339fc
c000b34b:	c3                   	ret    

c000b34c <tcp_alloc>:
c000b34c:	83 ec 2c             	sub    esp,0x2c
c000b34f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b353:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b357:	83 ec 0c             	sub    esp,0xc
c000b35a:	6a 02                	push   0x2
c000b35c:	e8 5f c5 ff ff       	call   c00078c0 <memp_malloc>
c000b361:	83 c4 10             	add    esp,0x10
c000b364:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b368:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b36d:	75 6d                	jne    c000b3dc <tcp_alloc+0x90>
c000b36f:	e8 38 ff ff ff       	call   c000b2ac <tcp_kill_timewait>
c000b374:	83 ec 0c             	sub    esp,0xc
c000b377:	6a 02                	push   0x2
c000b379:	e8 42 c5 ff ff       	call   c00078c0 <memp_malloc>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b385:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b38a:	75 38                	jne    c000b3c4 <tcp_alloc+0x78>
c000b38c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000b391:	83 ec 0c             	sub    esp,0xc
c000b394:	50                   	push   eax
c000b395:	e8 4a fe ff ff       	call   c000b1e4 <tcp_kill_prio>
c000b39a:	83 c4 10             	add    esp,0x10
c000b39d:	83 ec 0c             	sub    esp,0xc
c000b3a0:	6a 02                	push   0x2
c000b3a2:	e8 19 c5 ff ff       	call   c00078c0 <memp_malloc>
c000b3a7:	83 c4 10             	add    esp,0x10
c000b3aa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b3ae:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b3b3:	74 0f                	je     c000b3c4 <tcp_alloc+0x78>
c000b3b5:	66 a1 ec 67 03 c0    	mov    ax,ds:0xc00367ec
c000b3bb:	83 e8 01             	sub    eax,0x1
c000b3be:	66 a3 ec 67 03 c0    	mov    ds:0xc00367ec,ax
c000b3c4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b3c9:	74 11                	je     c000b3dc <tcp_alloc+0x90>
c000b3cb:	66 a1 ec 67 03 c0    	mov    ax,ds:0xc00367ec
c000b3d1:	83 e8 01             	sub    eax,0x1
c000b3d4:	66 a3 ec 67 03 c0    	mov    ds:0xc00367ec,ax
c000b3da:	66 90                	xchg   ax,ax
c000b3dc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b3e1:	0f 84 09 01 00 00    	je     c000b4f0 <tcp_alloc+0x1a4>
c000b3e7:	83 ec 04             	sub    esp,0x4
c000b3ea:	68 a8 00 00 00       	push   0xa8
c000b3ef:	6a 00                	push   0x0
c000b3f1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b3f5:	e8 f6 50 ff ff       	call   c00004f0 <memset>
c000b3fa:	83 c4 10             	add    esp,0x10
c000b3fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b401:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000b405:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c000b408:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b40c:	66 c7 40 72 00 01    	mov    WORD PTR [eax+0x72],0x100
c000b412:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b416:	66 c7 40 74 00 00    	mov    WORD PTR [eax+0x74],0x0
c000b41c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b420:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b426:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b42a:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b430:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b434:	c6 40 09 00          	mov    BYTE PTR [eax+0x9],0x0
c000b438:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b43c:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c000b440:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b444:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b44a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b44e:	66 c7 40 4c 06 00    	mov    WORD PTR [eax+0x4c],0x6
c000b454:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b458:	66 c7 40 48 00 00    	mov    WORD PTR [eax+0x48],0x0
c000b45e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b462:	66 c7 40 4a 06 00    	mov    WORD PTR [eax+0x4a],0x6
c000b468:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b46c:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000b472:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b476:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b47c:	e8 b3 fe ff ff       	call   c000b334 <tcp_next_iss>
c000b481:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b485:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b489:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b48d:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000b490:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b494:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b498:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b49b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b49f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b4a3:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b4a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4aa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b4ae:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b4b1:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b4b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4bb:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000b4be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4c2:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000b4c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4ca:	c7 80 8c 00 00 00 d0 ad 00 c0 	mov    DWORD PTR [eax+0x8c],0xc000add0
c000b4d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4d8:	c7 80 9c 00 00 00 00 dd 6d 00 	mov    DWORD PTR [eax+0x9c],0x6ddd00
c000b4e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4e6:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000b4ed:	8d 76 00             	lea    esi,[esi+0x0]
c000b4f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4f4:	83 c4 2c             	add    esp,0x2c
c000b4f7:	c3                   	ret    

c000b4f8 <tcp_new>:
c000b4f8:	83 ec 0c             	sub    esp,0xc
c000b4fb:	83 ec 0c             	sub    esp,0xc
c000b4fe:	6a 40                	push   0x40
c000b500:	e8 47 fe ff ff       	call   c000b34c <tcp_alloc>
c000b505:	83 c4 10             	add    esp,0x10
c000b508:	83 c4 0c             	add    esp,0xc
c000b50b:	c3                   	ret    

c000b50c <tcp_eff_send_mss>:
c000b50c:	53                   	push   ebx
c000b50d:	83 ec 28             	sub    esp,0x28
c000b510:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b514:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b519:	83 ec 0c             	sub    esp,0xc
c000b51c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b520:	e8 2b 80 00 00       	call   c0013550 <ip_route>
c000b525:	83 c4 10             	add    esp,0x10
c000b528:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b52c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b531:	74 3d                	je     c000b570 <tcp_eff_send_mss+0x64>
c000b533:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b537:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b53a:	0f b7 c0             	movzx  eax,ax
c000b53d:	85 c0                	test   eax,eax
c000b53f:	74 2f                	je     c000b570 <tcp_eff_send_mss+0x64>
c000b541:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b545:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b548:	83 e8 28             	sub    eax,0x28
c000b54b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b550:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b554:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000b559:	0f b7 d8             	movzx  ebx,ax
c000b55c:	0f b7 ca             	movzx  ecx,dx
c000b55f:	39 cb                	cmp    ebx,ecx
c000b561:	76 05                	jbe    c000b568 <tcp_eff_send_mss+0x5c>
c000b563:	89 d0                	mov    eax,edx
c000b565:	8d 76 00             	lea    esi,[esi+0x0]
c000b568:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b56d:	8d 76 00             	lea    esi,[esi+0x0]
c000b570:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b574:	83 c4 28             	add    esp,0x28
c000b577:	5b                   	pop    ebx
c000b578:	c3                   	ret    
c000b579:	8d 76 00             	lea    esi,[esi+0x0]

c000b57c <tcp_connect>:
c000b57c:	83 ec 2c             	sub    esp,0x2c
c000b57f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b583:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b588:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b58c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b58f:	85 c0                	test   eax,eax
c000b591:	74 1d                	je     c000b5b0 <tcp_connect+0x34>
c000b593:	83 ec 08             	sub    esp,0x8
c000b596:	68 e4 00 03 c0       	push   0xc00300e4
c000b59b:	68 46 f9 02 c0       	push   0xc002f946
c000b5a0:	e8 37 45 01 00       	call   c001fadc <CPrintf>
c000b5a5:	83 c4 10             	add    esp,0x10
c000b5a8:	b0 f7                	mov    al,0xf7
c000b5aa:	e9 39 02 00 00       	jmp    c000b7e8 <tcp_connect+0x26c>
c000b5af:	90                   	nop
c000b5b0:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b5b5:	74 25                	je     c000b5dc <tcp_connect+0x60>
c000b5b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5bb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b5bf:	8b 12                	mov    edx,DWORD PTR [edx]
c000b5c1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b5c4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b5c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b5cc:	66 89 42 22          	mov    WORD PTR [edx+0x22],ax
c000b5d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5d4:	85 c0                	test   eax,eax
c000b5d6:	74 18                	je     c000b5f0 <tcp_connect+0x74>
c000b5d8:	eb 0a                	jmp    c000b5e4 <tcp_connect+0x68>
c000b5da:	66 90                	xchg   ax,ax
c000b5dc:	b0 fa                	mov    al,0xfa
c000b5de:	e9 05 02 00 00       	jmp    c000b7e8 <tcp_connect+0x26c>
c000b5e3:	90                   	nop
c000b5e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5e8:	8b 00                	mov    eax,DWORD PTR [eax]
c000b5ea:	85 c0                	test   eax,eax
c000b5ec:	75 3a                	jne    c000b628 <tcp_connect+0xac>
c000b5ee:	66 90                	xchg   ax,ax
c000b5f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5f4:	83 c0 04             	add    eax,0x4
c000b5f7:	83 ec 0c             	sub    esp,0xc
c000b5fa:	50                   	push   eax
c000b5fb:	e8 50 7f 00 00       	call   c0013550 <ip_route>
c000b600:	83 c4 10             	add    esp,0x10
c000b603:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b607:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b60c:	75 0a                	jne    c000b618 <tcp_connect+0x9c>
c000b60e:	b0 fc                	mov    al,0xfc
c000b610:	e9 d3 01 00 00       	jmp    c000b7e8 <tcp_connect+0x26c>
c000b615:	8d 76 00             	lea    esi,[esi+0x0]
c000b618:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b61c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b61f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b623:	89 10                	mov    DWORD PTR [eax],edx
c000b625:	8d 76 00             	lea    esi,[esi+0x0]
c000b628:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b62c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b62f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b634:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b638:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b63b:	0f b7 c0             	movzx  eax,ax
c000b63e:	85 c0                	test   eax,eax
c000b640:	75 0e                	jne    c000b650 <tcp_connect+0xd4>
c000b642:	e8 19 e7 ff ff       	call   c0009d60 <tcp_new_port>
c000b647:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b64b:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c000b64f:	90                   	nop
c000b650:	e8 df fc ff ff       	call   c000b334 <tcp_next_iss>
c000b655:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b659:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b65d:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c000b664:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b668:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b66c:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b66f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b673:	8d 50 ff             	lea    edx,[eax-0x1]
c000b676:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b67a:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b67d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b681:	8d 50 ff             	lea    edx,[eax-0x1]
c000b684:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b688:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b68b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b68f:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b695:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b699:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b69f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6a3:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000b6a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6aa:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000b6ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6b1:	66 c7 40 60 60 08    	mov    WORD PTR [eax+0x60],0x860
c000b6b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6bb:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b6c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6c5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b6c8:	0f b7 c0             	movzx  eax,ax
c000b6cb:	83 ec 08             	sub    esp,0x8
c000b6ce:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b6d2:	50                   	push   eax
c000b6d3:	e8 34 fe ff ff       	call   c000b50c <tcp_eff_send_mss>
c000b6d8:	83 c4 10             	add    esp,0x10
c000b6db:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b6df:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000b6e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6e7:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b6ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6f1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b6f4:	89 c2                	mov    edx,eax
c000b6f6:	c1 e2 02             	shl    edx,0x2
c000b6f9:	01 d0                	add    eax,edx
c000b6fb:	d1 e0                	shl    eax,1
c000b6fd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b701:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000b705:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b709:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b70d:	89 90 90 00 00 00    	mov    DWORD PTR [eax+0x90],edx
c000b713:	83 ec 08             	sub    esp,0x8
c000b716:	6a 02                	push   0x2
c000b718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b71c:	e8 1b 40 00 00       	call   c000f73c <tcp_enqueue_flags>
c000b721:	83 c4 10             	add    esp,0x10
c000b724:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b728:	0f be 44 24 13       	movsx  eax,BYTE PTR [esp+0x13]
c000b72d:	85 c0                	test   eax,eax
c000b72f:	0f 85 af 00 00 00    	jne    c000b7e4 <tcp_connect+0x268>
c000b735:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b739:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b740:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c000b745:	85 c0                	test   eax,eax
c000b747:	74 6f                	je     c000b7b8 <tcp_connect+0x23c>
c000b749:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b74e:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b752:	75 10                	jne    c000b764 <tcp_connect+0x1e8>
c000b754:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b759:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b75c:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000b761:	eb 49                	jmp    c000b7ac <tcp_connect+0x230>
c000b763:	90                   	nop
c000b764:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b769:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000b76e:	eb 30                	jmp    c000b7a0 <tcp_connect+0x224>
c000b770:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b775:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b778:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b77c:	75 12                	jne    c000b790 <tcp_connect+0x214>
c000b77e:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b783:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b787:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000b78a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b78d:	eb 1d                	jmp    c000b7ac <tcp_connect+0x230>
c000b78f:	90                   	nop
c000b790:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b795:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b798:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000b79d:	8d 76 00             	lea    esi,[esi+0x0]
c000b7a0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b7a5:	85 c0                	test   eax,eax
c000b7a7:	75 c7                	jne    c000b770 <tcp_connect+0x1f4>
c000b7a9:	8d 76 00             	lea    esi,[esi+0x0]
c000b7ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7b0:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000b7b7:	90                   	nop
c000b7b8:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000b7be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7c2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b7c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7c9:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000b7ce:	e8 95 52 00 00       	call   c0010a68 <tcp_timer_needed>
c000b7d3:	83 ec 0c             	sub    esp,0xc
c000b7d6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b7da:	e8 f9 45 00 00       	call   c000fdd8 <tcp_output>
c000b7df:	83 c4 10             	add    esp,0x10
c000b7e2:	66 90                	xchg   ax,ax
c000b7e4:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c000b7e8:	83 c4 2c             	add    esp,0x2c
c000b7eb:	c3                   	ret    

c000b7ec <tcp_debug_state_str>:
c000b7ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7f0:	8b 04 85 60 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfda0]
c000b7f7:	c3                   	ret    

c000b7f8 <tcp_timewait_input>:
c000b7f8:	53                   	push   ebx
c000b7f9:	83 ec 08             	sub    esp,0x8
c000b7fc:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000b801:	0f b6 c0             	movzx  eax,al
c000b804:	83 e0 04             	and    eax,0x4
c000b807:	74 07                	je     c000b810 <tcp_timewait_input+0x18>
c000b809:	b0 00                	mov    al,0x0
c000b80b:	e9 e8 00 00 00       	jmp    c000b8f8 <tcp_timewait_input+0x100>
c000b810:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000b815:	0f b6 c0             	movzx  eax,al
c000b818:	83 e0 02             	and    eax,0x2
c000b81b:	0f 84 83 00 00 00    	je     c000b8a4 <tcp_timewait_input+0xac>
c000b821:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000b827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b82b:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b82e:	29 c2                	sub    edx,eax
c000b830:	89 d0                	mov    eax,edx
c000b832:	0f 88 88 00 00 00    	js     c000b8c0 <tcp_timewait_input+0xc8>
c000b838:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000b83e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b842:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000b845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b849:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000b84c:	0f b7 c0             	movzx  eax,ax
c000b84f:	01 c8                	add    eax,ecx
c000b851:	29 c2                	sub    edx,eax
c000b853:	89 d0                	mov    eax,edx
c000b855:	85 c0                	test   eax,eax
c000b857:	7f 67                	jg     c000b8c0 <tcp_timewait_input+0xc8>
c000b859:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000b85e:	66 8b 00             	mov    ax,WORD PTR [eax]
c000b861:	0f b7 c8             	movzx  ecx,ax
c000b864:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000b869:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000b86d:	0f b7 d0             	movzx  edx,ax
c000b870:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000b876:	0f b7 d8             	movzx  ebx,ax
c000b879:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000b87e:	01 c3                	add    ebx,eax
c000b880:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000b885:	83 ec 08             	sub    esp,0x8
c000b888:	51                   	push   ecx
c000b889:	52                   	push   edx
c000b88a:	68 90 68 03 c0       	push   0xc0036890
c000b88f:	68 98 68 03 c0       	push   0xc0036898
c000b894:	53                   	push   ebx
c000b895:	50                   	push   eax
c000b896:	e8 c9 49 00 00       	call   c0010264 <tcp_rst>
c000b89b:	83 c4 20             	add    esp,0x20
c000b89e:	b0 00                	mov    al,0x0
c000b8a0:	eb 56                	jmp    c000b8f8 <tcp_timewait_input+0x100>
c000b8a2:	66 90                	xchg   ax,ax
c000b8a4:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000b8a9:	0f b6 c0             	movzx  eax,al
c000b8ac:	83 e0 01             	and    eax,0x1
c000b8af:	74 0f                	je     c000b8c0 <tcp_timewait_input+0xc8>
c000b8b1:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b8b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8bb:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000b8be:	66 90                	xchg   ax,ax
c000b8c0:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000b8c6:	0f b7 c0             	movzx  eax,ax
c000b8c9:	85 c0                	test   eax,eax
c000b8cb:	74 27                	je     c000b8f4 <tcp_timewait_input+0xfc>
c000b8cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8d1:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b8d4:	83 c8 02             	or     eax,0x2
c000b8d7:	88 c2                	mov    dl,al
c000b8d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8dd:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b8e0:	83 ec 0c             	sub    esp,0xc
c000b8e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e7:	e8 ec 44 00 00       	call   c000fdd8 <tcp_output>
c000b8ec:	83 c4 10             	add    esp,0x10
c000b8ef:	eb 07                	jmp    c000b8f8 <tcp_timewait_input+0x100>
c000b8f1:	8d 76 00             	lea    esi,[esi+0x0]
c000b8f4:	b0 00                	mov    al,0x0
c000b8f6:	66 90                	xchg   ax,ax
c000b8f8:	83 c4 08             	add    esp,0x8
c000b8fb:	5b                   	pop    ebx
c000b8fc:	c3                   	ret    
c000b8fd:	8d 76 00             	lea    esi,[esi+0x0]

c000b900 <tcp_oos_insert_segment>:
c000b900:	53                   	push   ebx
c000b901:	83 ec 18             	sub    esp,0x18
c000b904:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b908:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b90b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000b90f:	0f b7 c0             	movzx  eax,ax
c000b912:	83 ec 0c             	sub    esp,0xc
c000b915:	50                   	push   eax
c000b916:	e8 cd 52 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000b91b:	83 c4 10             	add    esp,0x10
c000b91e:	0f b7 c0             	movzx  eax,ax
c000b921:	83 e0 01             	and    eax,0x1
c000b924:	0f 84 8e 00 00 00    	je     c000b9b8 <tcp_oos_insert_segment+0xb8>
c000b92a:	83 ec 0c             	sub    esp,0xc
c000b92d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b931:	e8 2e e6 ff ff       	call   c0009f64 <tcp_segs_free>
c000b936:	83 c4 10             	add    esp,0x10
c000b939:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000b941:	e9 16 01 00 00       	jmp    c000ba5c <tcp_oos_insert_segment+0x15c>
c000b946:	66 90                	xchg   ax,ax
c000b948:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b94c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b94f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000b953:	0f b7 c0             	movzx  eax,ax
c000b956:	83 ec 0c             	sub    esp,0xc
c000b959:	50                   	push   eax
c000b95a:	e8 89 52 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000b95f:	83 c4 10             	add    esp,0x10
c000b962:	0f b7 c0             	movzx  eax,ax
c000b965:	83 e0 01             	and    eax,0x1
c000b968:	74 2a                	je     c000b994 <tcp_oos_insert_segment+0x94>
c000b96a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b96e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b971:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000b975:	83 ec 0c             	sub    esp,0xc
c000b978:	6a 01                	push   0x1
c000b97a:	e8 69 52 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000b97f:	83 c4 10             	add    esp,0x10
c000b982:	89 c1                	mov    ecx,eax
c000b984:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b988:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000b98b:	89 d8                	mov    eax,ebx
c000b98d:	09 c8                	or     eax,ecx
c000b98f:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000b993:	90                   	nop
c000b994:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b998:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b99c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b9a0:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9a2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b9a6:	83 ec 0c             	sub    esp,0xc
c000b9a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b9ad:	e8 6e e5 ff ff       	call   c0009f20 <tcp_seg_free>
c000b9b2:	83 c4 10             	add    esp,0x10
c000b9b5:	8d 76 00             	lea    esi,[esi+0x0]
c000b9b8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b9bd:	74 35                	je     c000b9f4 <tcp_oos_insert_segment+0xf4>
c000b9bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9c3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b9c6:	0f b7 d0             	movzx  edx,ax
c000b9c9:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000b9ce:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b9d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b9d5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9d8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b9db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b9df:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b9e2:	0f b7 c0             	movzx  eax,ax
c000b9e5:	01 d0                	add    eax,edx
c000b9e7:	29 c1                	sub    ecx,eax
c000b9e9:	89 c8                	mov    eax,ecx
c000b9eb:	0f 89 57 ff ff ff    	jns    c000b948 <tcp_oos_insert_segment+0x48>
c000b9f1:	8d 76 00             	lea    esi,[esi+0x0]
c000b9f4:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b9f9:	74 61                	je     c000ba5c <tcp_oos_insert_segment+0x15c>
c000b9fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ba02:	0f b7 d0             	movzx  edx,ax
c000ba05:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ba0a:	01 c2                	add    edx,eax
c000ba0c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ba10:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ba13:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ba16:	29 c2                	sub    edx,eax
c000ba18:	89 d0                	mov    eax,edx
c000ba1a:	85 c0                	test   eax,eax
c000ba1c:	7e 3e                	jle    c000ba5c <tcp_oos_insert_segment+0x15c>
c000ba1e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ba22:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ba25:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ba28:	89 c2                	mov    edx,eax
c000ba2a:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ba2f:	89 d3                	mov    ebx,edx
c000ba31:	29 c3                	sub    ebx,eax
c000ba33:	89 d8                	mov    eax,ebx
c000ba35:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ba39:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000ba3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba41:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ba44:	0f b7 d0             	movzx  edx,ax
c000ba47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba4b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ba4e:	83 ec 08             	sub    esp,0x8
c000ba51:	52                   	push   edx
c000ba52:	50                   	push   eax
c000ba53:	e8 20 ce ff ff       	call   c0008878 <pbuf_realloc>
c000ba58:	83 c4 10             	add    esp,0x10
c000ba5b:	90                   	nop
c000ba5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba60:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ba64:	89 10                	mov    DWORD PTR [eax],edx
c000ba66:	90                   	nop
c000ba67:	83 c4 18             	add    esp,0x18
c000ba6a:	5b                   	pop    ebx
c000ba6b:	c3                   	ret    

c000ba6c <tcp_receive>:
c000ba6c:	57                   	push   edi
c000ba6d:	56                   	push   esi
c000ba6e:	53                   	push   ebx
c000ba6f:	83 ec 30             	sub    esp,0x30
c000ba72:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ba7a:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000ba7f:	0f b6 c0             	movzx  eax,al
c000ba82:	83 e0 10             	and    eax,0x10
c000ba85:	0f 84 e5 07 00 00    	je     c000c270 <tcp_receive+0x804>
c000ba8b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ba8f:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000ba92:	0f b7 d0             	movzx  edx,ax
c000ba95:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ba99:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000ba9c:	01 d0                	add    eax,edx
c000ba9e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000baa2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000baa6:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000baa9:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000baae:	29 c2                	sub    edx,eax
c000bab0:	89 d0                	mov    eax,edx
c000bab2:	78 50                	js     c000bb04 <tcp_receive+0x98>
c000bab4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bab8:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000babb:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bac0:	39 c2                	cmp    edx,eax
c000bac2:	75 14                	jne    c000bad8 <tcp_receive+0x6c>
c000bac4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bac8:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bacb:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bad0:	29 c2                	sub    edx,eax
c000bad2:	89 d0                	mov    eax,edx
c000bad4:	78 2e                	js     c000bb04 <tcp_receive+0x98>
c000bad6:	66 90                	xchg   ax,ax
c000bad8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000badc:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000badf:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bae4:	39 c2                	cmp    edx,eax
c000bae6:	75 74                	jne    c000bb5c <tcp_receive+0xf0>
c000bae8:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000baed:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000baf1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000baf5:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000baf8:	0f b7 d2             	movzx  edx,dx
c000bafb:	0f b7 c0             	movzx  eax,ax
c000bafe:	39 c2                	cmp    edx,eax
c000bb00:	76 5a                	jbe    c000bb5c <tcp_receive+0xf0>
c000bb02:	66 90                	xchg   ax,ax
c000bb04:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bb09:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000bb0d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bb11:	66 89 42 60          	mov    WORD PTR [edx+0x60],ax
c000bb15:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000bb1b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb1f:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000bb22:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bb28:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb2c:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000bb2f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb33:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bb36:	0f b7 c0             	movzx  eax,ax
c000bb39:	85 c0                	test   eax,eax
c000bb3b:	74 1f                	je     c000bb5c <tcp_receive+0xf0>
c000bb3d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb41:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000bb47:	0f b6 c0             	movzx  eax,al
c000bb4a:	85 c0                	test   eax,eax
c000bb4c:	74 0e                	je     c000bb5c <tcp_receive+0xf0>
c000bb4e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb52:	c6 80 a4 00 00 00 00 	mov    BYTE PTR [eax+0xa4],0x0
c000bb59:	8d 76 00             	lea    esi,[esi+0x0]
c000bb5c:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bb62:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb66:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bb69:	29 c2                	sub    edx,eax
c000bb6b:	89 d0                	mov    eax,edx
c000bb6d:	85 c0                	test   eax,eax
c000bb6f:	0f 8f ff 00 00 00    	jg     c000bc74 <tcp_receive+0x208>
c000bb75:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb79:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000bb7f:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000bb85:	0f b7 c0             	movzx  eax,ax
c000bb88:	85 c0                	test   eax,eax
c000bb8a:	0f 85 cc 00 00 00    	jne    c000bc5c <tcp_receive+0x1f0>
c000bb90:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb94:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bb97:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb9b:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bb9e:	0f b7 c0             	movzx  eax,ax
c000bba1:	01 d0                	add    eax,edx
c000bba3:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000bba7:	0f 85 af 00 00 00    	jne    c000bc5c <tcp_receive+0x1f0>
c000bbad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbb1:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000bbb5:	98                   	cwde   
c000bbb6:	85 c0                	test   eax,eax
c000bbb8:	0f 88 9e 00 00 00    	js     c000bc5c <tcp_receive+0x1f0>
c000bbbe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbc2:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000bbc5:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bbca:	39 c2                	cmp    edx,eax
c000bbcc:	0f 85 8a 00 00 00    	jne    c000bc5c <tcp_receive+0x1f0>
c000bbd2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000bbda:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbde:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000bbe1:	83 c0 01             	add    eax,0x1
c000bbe4:	88 c2                	mov    dl,al
c000bbe6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbea:	88 50 54             	mov    BYTE PTR [eax+0x54],dl
c000bbed:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbf1:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000bbf4:	0f b6 c0             	movzx  eax,al
c000bbf7:	83 f8 03             	cmp    eax,0x3
c000bbfa:	76 40                	jbe    c000bc3c <tcp_receive+0x1d0>
c000bbfc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc00:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bc04:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc08:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bc0b:	01 d0                	add    eax,edx
c000bc0d:	89 c2                	mov    edx,eax
c000bc0f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc13:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000bc17:	0f b7 d2             	movzx  edx,dx
c000bc1a:	0f b7 c0             	movzx  eax,ax
c000bc1d:	39 c2                	cmp    edx,eax
c000bc1f:	76 3b                	jbe    c000bc5c <tcp_receive+0x1f0>
c000bc21:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc25:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bc29:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc2d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bc30:	01 d0                	add    eax,edx
c000bc32:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bc36:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000bc3a:	eb 20                	jmp    c000bc5c <tcp_receive+0x1f0>
c000bc3c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc40:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000bc43:	0f b6 c0             	movzx  eax,al
c000bc46:	83 f8 03             	cmp    eax,0x3
c000bc49:	75 11                	jne    c000bc5c <tcp_receive+0x1f0>
c000bc4b:	83 ec 0c             	sub    esp,0xc
c000bc4e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bc52:	e8 d9 48 00 00       	call   c0010530 <tcp_rexmit_fast>
c000bc57:	83 c4 10             	add    esp,0x10
c000bc5a:	66 90                	xchg   ax,ax
c000bc5c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bc61:	0f 85 99 04 00 00    	jne    c000c100 <tcp_receive+0x694>
c000bc67:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc6b:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bc6f:	e9 8c 04 00 00       	jmp    c000c100 <tcp_receive+0x694>
c000bc74:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bc7a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc7e:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bc81:	29 c2                	sub    edx,eax
c000bc83:	89 d0                	mov    eax,edx
c000bc85:	83 e8 01             	sub    eax,0x1
c000bc88:	0f 88 4a 03 00 00    	js     c000bfd8 <tcp_receive+0x56c>
c000bc8e:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bc94:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc98:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000bc9b:	29 c2                	sub    edx,eax
c000bc9d:	89 d0                	mov    eax,edx
c000bc9f:	85 c0                	test   eax,eax
c000bca1:	0f 8f 31 03 00 00    	jg     c000bfd8 <tcp_receive+0x56c>
c000bca7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcab:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bcae:	0f b6 c0             	movzx  eax,al
c000bcb1:	83 e0 04             	and    eax,0x4
c000bcb4:	74 22                	je     c000bcd8 <tcp_receive+0x26c>
c000bcb6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcba:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bcbd:	83 e0 fb             	and    eax,0xfffffffb
c000bcc0:	88 c2                	mov    dl,al
c000bcc2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcc6:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000bcc9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bccd:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000bcd0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bcd4:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000bcd8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcdc:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000bce0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bce4:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000bce7:	98                   	cwde   
c000bce8:	c1 f8 03             	sar    eax,0x3
c000bceb:	89 c2                	mov    edx,eax
c000bced:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcf1:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000bcf5:	01 d0                	add    eax,edx
c000bcf7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bcfb:	66 89 42 4c          	mov    WORD PTR [edx+0x4c],ax
c000bcff:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bd04:	89 c2                	mov    edx,eax
c000bd06:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd0a:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bd0d:	89 d7                	mov    edi,edx
c000bd0f:	29 c7                	sub    edi,eax
c000bd11:	89 f8                	mov    eax,edi
c000bd13:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bd17:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000bd1b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd1f:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000bd23:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd27:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000bd2a:	01 d0                	add    eax,edx
c000bd2c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bd30:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000bd34:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd38:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bd3c:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bd42:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd46:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000bd49:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd4d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bd50:	83 f8 03             	cmp    eax,0x3
c000bd53:	0f 86 db 01 00 00    	jbe    c000bf34 <tcp_receive+0x4c8>
c000bd59:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd5d:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bd61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd65:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000bd68:	0f b7 d2             	movzx  edx,dx
c000bd6b:	0f b7 c0             	movzx  eax,ax
c000bd6e:	39 c2                	cmp    edx,eax
c000bd70:	73 4a                	jae    c000bdbc <tcp_receive+0x350>
c000bd72:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd76:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bd7a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd7e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bd81:	01 d0                	add    eax,edx
c000bd83:	89 c2                	mov    edx,eax
c000bd85:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd89:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000bd8d:	0f b7 d2             	movzx  edx,dx
c000bd90:	0f b7 c0             	movzx  eax,ax
c000bd93:	39 c2                	cmp    edx,eax
c000bd95:	0f 86 99 01 00 00    	jbe    c000bf34 <tcp_receive+0x4c8>
c000bd9b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd9f:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bda3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bda7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bdaa:	01 d0                	add    eax,edx
c000bdac:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bdb0:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000bdb4:	e9 7b 01 00 00       	jmp    c000bf34 <tcp_receive+0x4c8>
c000bdb9:	8d 76 00             	lea    esi,[esi+0x0]
c000bdbc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdc0:	66 8b 48 56          	mov    cx,WORD PTR [eax+0x56]
c000bdc4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdc8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bdcb:	0f b7 d0             	movzx  edx,ax
c000bdce:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdd2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bdd5:	0f b7 c0             	movzx  eax,ax
c000bdd8:	0f af d0             	imul   edx,eax
c000bddb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bddf:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000bde3:	0f b7 d8             	movzx  ebx,ax
c000bde6:	89 d0                	mov    eax,edx
c000bde8:	89 c2                	mov    edx,eax
c000bdea:	c1 fa 1f             	sar    edx,0x1f
c000bded:	f7 fb                	idiv   ebx
c000bdef:	01 c8                	add    eax,ecx
c000bdf1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000bdf6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdfa:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000bdfe:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c000be03:	0f b7 c0             	movzx  eax,ax
c000be06:	39 c2                	cmp    edx,eax
c000be08:	0f 86 26 01 00 00    	jbe    c000bf34 <tcp_receive+0x4c8>
c000be0e:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000be12:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000be17:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000be1b:	e9 14 01 00 00       	jmp    c000bf34 <tcp_receive+0x4c8>
c000be20:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be24:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000be27:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be2b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be2f:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000be32:	8b 10                	mov    edx,DWORD PTR [eax]
c000be34:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be38:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000be3b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be3f:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000be42:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000be46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000be49:	83 ec 0c             	sub    esp,0xc
c000be4c:	50                   	push   eax
c000be4d:	e8 2a cc ff ff       	call   c0008a7c <pbuf_clen>
c000be52:	83 c4 10             	add    esp,0x10
c000be55:	0f b6 c0             	movzx  eax,al
c000be58:	0f b7 d3             	movzx  edx,bx
c000be5b:	0f b7 c0             	movzx  eax,ax
c000be5e:	39 c2                	cmp    edx,eax
c000be60:	73 16                	jae    c000be78 <tcp_receive+0x40c>
c000be62:	83 ec 08             	sub    esp,0x8
c000be65:	68 8c 02 03 c0       	push   0xc003028c
c000be6a:	68 46 f9 02 c0       	push   0xc002f946
c000be6f:	e8 68 3c 01 00       	call   c001fadc <CPrintf>
c000be74:	83 c4 10             	add    esp,0x10
c000be77:	90                   	nop
c000be78:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be7c:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000be7f:	0f b7 c0             	movzx  eax,ax
c000be82:	85 c0                	test   eax,eax
c000be84:	74 36                	je     c000bebc <tcp_receive+0x450>
c000be86:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000be8a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000be8d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000be91:	0f b7 c0             	movzx  eax,ax
c000be94:	83 ec 0c             	sub    esp,0xc
c000be97:	50                   	push   eax
c000be98:	e8 4b 4d ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000be9d:	83 c4 10             	add    esp,0x10
c000bea0:	0f b7 c0             	movzx  eax,ax
c000bea3:	83 e0 01             	and    eax,0x1
c000bea6:	74 14                	je     c000bebc <tcp_receive+0x450>
c000bea8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000beac:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000beaf:	83 e8 01             	sub    eax,0x1
c000beb2:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000beb6:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000beba:	66 90                	xchg   ax,ax
c000bebc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bec0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bec3:	83 ec 0c             	sub    esp,0xc
c000bec6:	50                   	push   eax
c000bec7:	e8 b0 cb ff ff       	call   c0008a7c <pbuf_clen>
c000becc:	83 c4 10             	add    esp,0x10
c000becf:	88 c1                	mov    cl,al
c000bed1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bed5:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000bed8:	0f b6 c1             	movzx  eax,cl
c000bedb:	89 d7                	mov    edi,edx
c000bedd:	29 c7                	sub    edi,eax
c000bedf:	89 f8                	mov    eax,edi
c000bee1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bee5:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000bee9:	83 ec 0c             	sub    esp,0xc
c000beec:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000bef0:	e8 2b e0 ff ff       	call   c0009f20 <tcp_seg_free>
c000bef5:	83 c4 10             	add    esp,0x10
c000bef8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000befc:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000beff:	0f b7 c0             	movzx  eax,ax
c000bf02:	85 c0                	test   eax,eax
c000bf04:	74 2e                	je     c000bf34 <tcp_receive+0x4c8>
c000bf06:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf0a:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bf0d:	85 c0                	test   eax,eax
c000bf0f:	75 23                	jne    c000bf34 <tcp_receive+0x4c8>
c000bf11:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf15:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000bf18:	85 c0                	test   eax,eax
c000bf1a:	75 18                	jne    c000bf34 <tcp_receive+0x4c8>
c000bf1c:	83 ec 08             	sub    esp,0x8
c000bf1f:	68 b4 02 03 c0       	push   0xc00302b4
c000bf24:	68 46 f9 02 c0       	push   0xc002f946
c000bf29:	e8 ae 3b 01 00       	call   c001fadc <CPrintf>
c000bf2e:	83 c4 10             	add    esp,0x10
c000bf31:	8d 76 00             	lea    esi,[esi+0x0]
c000bf34:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf38:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bf3b:	85 c0                	test   eax,eax
c000bf3d:	74 69                	je     c000bfa8 <tcp_receive+0x53c>
c000bf3f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf43:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bf46:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bf49:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bf4c:	83 ec 0c             	sub    esp,0xc
c000bf4f:	50                   	push   eax
c000bf50:	e8 b7 4c ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000bf55:	83 c4 10             	add    esp,0x10
c000bf58:	89 c3                	mov    ebx,eax
c000bf5a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf5e:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bf61:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bf64:	0f b7 f0             	movzx  esi,ax
c000bf67:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf6b:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bf6e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bf71:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000bf75:	0f b7 c0             	movzx  eax,ax
c000bf78:	83 ec 0c             	sub    esp,0xc
c000bf7b:	50                   	push   eax
c000bf7c:	e8 67 4c ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000bf81:	83 c4 10             	add    esp,0x10
c000bf84:	0f b7 c0             	movzx  eax,ax
c000bf87:	83 e0 03             	and    eax,0x3
c000bf8a:	0f 95 c0             	setne  al
c000bf8d:	0f b6 c0             	movzx  eax,al
c000bf90:	01 f0                	add    eax,esi
c000bf92:	8d 14 03             	lea    edx,[ebx+eax*1]
c000bf95:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bf9a:	29 c2                	sub    edx,eax
c000bf9c:	89 d0                	mov    eax,edx
c000bf9e:	85 c0                	test   eax,eax
c000bfa0:	0f 8e 7a fe ff ff    	jle    c000be20 <tcp_receive+0x3b4>
c000bfa6:	66 90                	xchg   ax,ax
c000bfa8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfac:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bfaf:	85 c0                	test   eax,eax
c000bfb1:	75 0d                	jne    c000bfc0 <tcp_receive+0x554>
c000bfb3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfb7:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000bfbd:	eb 0d                	jmp    c000bfcc <tcp_receive+0x560>
c000bfbf:	90                   	nop
c000bfc0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfc4:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000bfca:	66 90                	xchg   ax,ax
c000bfcc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfd0:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000bfd4:	eb 0e                	jmp    c000bfe4 <tcp_receive+0x578>
c000bfd6:	66 90                	xchg   ax,ax
c000bfd8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfdc:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000bfe2:	66 90                	xchg   ax,ax
c000bfe4:	e9 17 01 00 00       	jmp    c000c100 <tcp_receive+0x694>
c000bfe9:	8d 76 00             	lea    esi,[esi+0x0]
c000bfec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bff0:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000bff3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bff7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bffb:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000bffe:	8b 10                	mov    edx,DWORD PTR [eax]
c000c000:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c004:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000c007:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c00b:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000c00e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c012:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c015:	83 ec 0c             	sub    esp,0xc
c000c018:	50                   	push   eax
c000c019:	e8 5e ca ff ff       	call   c0008a7c <pbuf_clen>
c000c01e:	83 c4 10             	add    esp,0x10
c000c021:	0f b6 c0             	movzx  eax,al
c000c024:	0f b7 d3             	movzx  edx,bx
c000c027:	0f b7 c0             	movzx  eax,ax
c000c02a:	39 c2                	cmp    edx,eax
c000c02c:	73 16                	jae    c000c044 <tcp_receive+0x5d8>
c000c02e:	83 ec 08             	sub    esp,0x8
c000c031:	68 8c 02 03 c0       	push   0xc003028c
c000c036:	68 46 f9 02 c0       	push   0xc002f946
c000c03b:	e8 9c 3a 01 00       	call   c001fadc <CPrintf>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	90                   	nop
c000c044:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c048:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c04b:	0f b7 c0             	movzx  eax,ax
c000c04e:	85 c0                	test   eax,eax
c000c050:	74 36                	je     c000c088 <tcp_receive+0x61c>
c000c052:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c056:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c059:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c05d:	0f b7 c0             	movzx  eax,ax
c000c060:	83 ec 0c             	sub    esp,0xc
c000c063:	50                   	push   eax
c000c064:	e8 7f 4b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c069:	83 c4 10             	add    esp,0x10
c000c06c:	0f b7 c0             	movzx  eax,ax
c000c06f:	83 e0 01             	and    eax,0x1
c000c072:	74 14                	je     c000c088 <tcp_receive+0x61c>
c000c074:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c078:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c07b:	83 e8 01             	sub    eax,0x1
c000c07e:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c082:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000c086:	66 90                	xchg   ax,ax
c000c088:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c08c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c08f:	83 ec 0c             	sub    esp,0xc
c000c092:	50                   	push   eax
c000c093:	e8 e4 c9 ff ff       	call   c0008a7c <pbuf_clen>
c000c098:	83 c4 10             	add    esp,0x10
c000c09b:	88 c1                	mov    cl,al
c000c09d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0a1:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000c0a4:	0f b6 c1             	movzx  eax,cl
c000c0a7:	89 d6                	mov    esi,edx
c000c0a9:	29 c6                	sub    esi,eax
c000c0ab:	89 f0                	mov    eax,esi
c000c0ad:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c0b1:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000c0b5:	83 ec 0c             	sub    esp,0xc
c000c0b8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c0bc:	e8 5f de ff ff       	call   c0009f20 <tcp_seg_free>
c000c0c1:	83 c4 10             	add    esp,0x10
c000c0c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0c8:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000c0cb:	0f b7 c0             	movzx  eax,ax
c000c0ce:	85 c0                	test   eax,eax
c000c0d0:	74 2e                	je     c000c100 <tcp_receive+0x694>
c000c0d2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0d6:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c0d9:	85 c0                	test   eax,eax
c000c0db:	75 23                	jne    c000c100 <tcp_receive+0x694>
c000c0dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0e1:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c0e4:	85 c0                	test   eax,eax
c000c0e6:	75 18                	jne    c000c100 <tcp_receive+0x694>
c000c0e8:	83 ec 08             	sub    esp,0x8
c000c0eb:	68 b4 02 03 c0       	push   0xc00302b4
c000c0f0:	68 46 f9 02 c0       	push   0xc002f946
c000c0f5:	e8 e2 39 01 00       	call   c001fadc <CPrintf>
c000c0fa:	83 c4 10             	add    esp,0x10
c000c0fd:	8d 76 00             	lea    esi,[esi+0x0]
c000c100:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c104:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c107:	85 c0                	test   eax,eax
c000c109:	74 7d                	je     c000c188 <tcp_receive+0x71c>
c000c10b:	8b 1d b0 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8b0
c000c111:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c115:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c118:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c11b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c11e:	83 ec 0c             	sub    esp,0xc
c000c121:	50                   	push   eax
c000c122:	e8 e5 4a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000c127:	83 c4 10             	add    esp,0x10
c000c12a:	89 c6                	mov    esi,eax
c000c12c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c130:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c133:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c136:	0f b7 f8             	movzx  edi,ax
c000c139:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c13d:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c140:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c143:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c147:	0f b7 c0             	movzx  eax,ax
c000c14a:	83 ec 0c             	sub    esp,0xc
c000c14d:	50                   	push   eax
c000c14e:	e8 95 4a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c153:	83 c4 10             	add    esp,0x10
c000c156:	0f b7 c0             	movzx  eax,ax
c000c159:	83 e0 03             	and    eax,0x3
c000c15c:	0f 95 c0             	setne  al
c000c15f:	0f b6 c0             	movzx  eax,al
c000c162:	01 f8                	add    eax,edi
c000c164:	01 f0                	add    eax,esi
c000c166:	29 c3                	sub    ebx,eax
c000c168:	89 d8                	mov    eax,ebx
c000c16a:	78 1c                	js     c000c188 <tcp_receive+0x71c>
c000c16c:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000c172:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c176:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000c179:	29 c2                	sub    edx,eax
c000c17b:	89 d0                	mov    eax,edx
c000c17d:	85 c0                	test   eax,eax
c000c17f:	0f 8e 67 fe ff ff    	jle    c000bfec <tcp_receive+0x580>
c000c185:	8d 76 00             	lea    esi,[esi+0x0]
c000c188:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c18c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c18f:	85 c0                	test   eax,eax
c000c191:	0f 84 d9 00 00 00    	je     c000c270 <tcp_receive+0x804>
c000c197:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c19b:	8b 50 44             	mov    edx,DWORD PTR [eax+0x44]
c000c19e:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000c1a3:	29 c2                	sub    edx,eax
c000c1a5:	89 d0                	mov    eax,edx
c000c1a7:	0f 89 c3 00 00 00    	jns    c000c270 <tcp_receive+0x804>
c000c1ad:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000c1b2:	89 c2                	mov    edx,eax
c000c1b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1b8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c1bb:	89 d7                	mov    edi,edx
c000c1bd:	29 c7                	sub    edi,eax
c000c1bf:	89 f8                	mov    eax,edi
c000c1c1:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c1c6:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c1cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1cf:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c1d2:	98                   	cwde   
c000c1d3:	c1 f8 03             	sar    eax,0x3
c000c1d6:	89 d6                	mov    esi,edx
c000c1d8:	29 c6                	sub    esi,eax
c000c1da:	89 f0                	mov    eax,esi
c000c1dc:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c1e1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1e5:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c1e8:	89 c2                	mov    edx,eax
c000c1ea:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c1ef:	01 d0                	add    eax,edx
c000c1f1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c1f5:	66 89 42 48          	mov    WORD PTR [edx+0x48],ax
c000c1f9:	0f bf 44 24 1e       	movsx  eax,WORD PTR [esp+0x1e]
c000c1fe:	85 c0                	test   eax,eax
c000c200:	79 0e                	jns    c000c210 <tcp_receive+0x7a4>
c000c202:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c207:	f7 d8                	neg    eax
c000c209:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c20e:	66 90                	xchg   ax,ax
c000c210:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c215:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c219:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c21d:	98                   	cwde   
c000c21e:	c1 f8 02             	sar    eax,0x2
c000c221:	89 d7                	mov    edi,edx
c000c223:	29 c7                	sub    edi,eax
c000c225:	89 f8                	mov    eax,edi
c000c227:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c22c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c230:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c234:	89 c2                	mov    edx,eax
c000c236:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c23b:	01 d0                	add    eax,edx
c000c23d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c241:	66 89 42 4a          	mov    WORD PTR [edx+0x4a],ax
c000c245:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c249:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c24c:	98                   	cwde   
c000c24d:	c1 f8 03             	sar    eax,0x3
c000c250:	89 c2                	mov    edx,eax
c000c252:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c256:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c25a:	01 d0                	add    eax,edx
c000c25c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c260:	66 89 42 4c          	mov    WORD PTR [edx+0x4c],ax
c000c264:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c268:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c000c26f:	90                   	nop
c000c270:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c276:	0f b7 c0             	movzx  eax,ax
c000c279:	85 c0                	test   eax,eax
c000c27b:	0f 84 2f 0e 00 00    	je     c000d0b0 <tcp_receive+0x1644>
c000c281:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c285:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c288:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c28d:	29 c2                	sub    edx,eax
c000c28f:	89 d0                	mov    eax,edx
c000c291:	83 e8 01             	sub    eax,0x1
c000c294:	0f 88 c6 01 00 00    	js     c000c460 <tcp_receive+0x9f4>
c000c29a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c29e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c2a1:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c2a7:	0f b7 c8             	movzx  ecx,ax
c000c2aa:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c2af:	01 c8                	add    eax,ecx
c000c2b1:	29 c2                	sub    edx,eax
c000c2b3:	89 d0                	mov    eax,edx
c000c2b5:	83 c0 01             	add    eax,0x1
c000c2b8:	85 c0                	test   eax,eax
c000c2ba:	0f 8f a0 01 00 00    	jg     c000c460 <tcp_receive+0x9f4>
c000c2c0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2c4:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c2c7:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c2cc:	29 c2                	sub    edx,eax
c000c2ce:	89 d0                	mov    eax,edx
c000c2d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c2d4:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c2d9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c2dd:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c2e2:	85 c0                	test   eax,eax
c000c2e4:	75 16                	jne    c000c2fc <tcp_receive+0x890>
c000c2e6:	83 ec 08             	sub    esp,0x8
c000c2e9:	68 b1 04 03 c0       	push   0xc00304b1
c000c2ee:	68 46 f9 02 c0       	push   0xc002f946
c000c2f3:	e8 e4 37 01 00       	call   c001fadc <CPrintf>
c000c2f8:	83 c4 10             	add    esp,0x10
c000c2fb:	90                   	nop
c000c2fc:	81 7c 24 20 fe 7f 00 00 	cmp    DWORD PTR [esp+0x20],0x7ffe
c000c304:	7e 16                	jle    c000c31c <tcp_receive+0x8b0>
c000c306:	83 ec 08             	sub    esp,0x8
c000c309:	68 c1 04 03 c0       	push   0xc00304c1
c000c30e:	68 46 f9 02 c0       	push   0xc002f946
c000c313:	e8 c4 37 01 00       	call   c001fadc <CPrintf>
c000c318:	83 c4 10             	add    esp,0x10
c000c31b:	90                   	nop
c000c31c:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c321:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c325:	0f b7 c0             	movzx  eax,ax
c000c328:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c32c:	0f 8e b6 00 00 00    	jle    c000c3e8 <tcp_receive+0x97c>
c000c332:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c337:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c33a:	0f b7 c0             	movzx  eax,ax
c000c33d:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c341:	7e 15                	jle    c000c358 <tcp_receive+0x8ec>
c000c343:	83 ec 08             	sub    esp,0x8
c000c346:	68 d0 04 03 c0       	push   0xc00304d0
c000c34b:	68 46 f9 02 c0       	push   0xc002f946
c000c350:	e8 87 37 01 00       	call   c001fadc <CPrintf>
c000c355:	83 c4 10             	add    esp,0x10
c000c358:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c35d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c360:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c364:	29 d0                	sub    eax,edx
c000c366:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c000c36b:	eb 33                	jmp    c000c3a0 <tcp_receive+0x934>
c000c36d:	8d 76 00             	lea    esi,[esi+0x0]
c000c370:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c374:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c378:	0f b7 c0             	movzx  eax,ax
c000c37b:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c000c37f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c387:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000c38b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c38f:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c000c395:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c399:	8b 00                	mov    eax,DWORD PTR [eax]
c000c39b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c39f:	90                   	nop
c000c3a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c3a4:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c3a8:	0f b7 c0             	movzx  eax,ax
c000c3ab:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c3af:	7f bf                	jg     c000c370 <tcp_receive+0x904>
c000c3b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c3b5:	f7 d8                	neg    eax
c000c3b7:	98                   	cwde   
c000c3b8:	83 ec 08             	sub    esp,0x8
c000c3bb:	50                   	push   eax
c000c3bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c3c0:	e8 47 bd ff ff       	call   c000810c <pbuf_header>
c000c3c5:	83 c4 10             	add    esp,0x10
c000c3c8:	0f b6 c0             	movzx  eax,al
c000c3cb:	85 c0                	test   eax,eax
c000c3cd:	74 51                	je     c000c420 <tcp_receive+0x9b4>
c000c3cf:	83 ec 08             	sub    esp,0x8
c000c3d2:	68 e0 04 03 c0       	push   0xc00304e0
c000c3d7:	68 46 f9 02 c0       	push   0xc002f946
c000c3dc:	e8 fb 36 01 00       	call   c001fadc <CPrintf>
c000c3e1:	83 c4 10             	add    esp,0x10
c000c3e4:	eb 3a                	jmp    c000c420 <tcp_receive+0x9b4>
c000c3e6:	66 90                	xchg   ax,ax
c000c3e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c3ec:	f7 d8                	neg    eax
c000c3ee:	0f bf d0             	movsx  edx,ax
c000c3f1:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c3f6:	83 ec 08             	sub    esp,0x8
c000c3f9:	52                   	push   edx
c000c3fa:	50                   	push   eax
c000c3fb:	e8 0c bd ff ff       	call   c000810c <pbuf_header>
c000c400:	83 c4 10             	add    esp,0x10
c000c403:	0f b6 c0             	movzx  eax,al
c000c406:	85 c0                	test   eax,eax
c000c408:	74 16                	je     c000c420 <tcp_receive+0x9b4>
c000c40a:	83 ec 08             	sub    esp,0x8
c000c40d:	68 e0 04 03 c0       	push   0xc00304e0
c000c412:	68 46 f9 02 c0       	push   0xc002f946
c000c417:	e8 c0 36 01 00       	call   c001fadc <CPrintf>
c000c41c:	83 c4 10             	add    esp,0x10
c000c41f:	90                   	nop
c000c420:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c425:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c42b:	89 d1                	mov    ecx,edx
c000c42d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c431:	8b 52 28             	mov    edx,DWORD PTR [edx+0x28]
c000c434:	89 ce                	mov    esi,ecx
c000c436:	29 d6                	sub    esi,edx
c000c438:	89 f2                	mov    edx,esi
c000c43a:	01 d0                	add    eax,edx
c000c43c:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c446:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c449:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000c44e:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c453:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c459:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000c45c:	eb 2a                	jmp    c000c488 <tcp_receive+0xa1c>
c000c45e:	66 90                	xchg   ax,ax
c000c460:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c466:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c46a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c46d:	29 c2                	sub    edx,eax
c000c46f:	89 d0                	mov    eax,edx
c000c471:	79 15                	jns    c000c488 <tcp_receive+0xa1c>
c000c473:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c477:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000c47a:	83 c8 02             	or     eax,0x2
c000c47d:	88 c2                	mov    dl,al
c000c47f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c483:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000c486:	66 90                	xchg   ax,ax
c000c488:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c48e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c492:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c495:	29 c2                	sub    edx,eax
c000c497:	89 d0                	mov    eax,edx
c000c499:	0f 88 fd 0b 00 00    	js     c000d09c <tcp_receive+0x1630>
c000c49f:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c4a5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4a9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000c4ac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4b0:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c4b3:	0f b7 c0             	movzx  eax,ax
c000c4b6:	01 c8                	add    eax,ecx
c000c4b8:	29 c2                	sub    edx,eax
c000c4ba:	89 d0                	mov    eax,edx
c000c4bc:	83 c0 01             	add    eax,0x1
c000c4bf:	85 c0                	test   eax,eax
c000c4c1:	0f 8f d5 0b 00 00    	jg     c000d09c <tcp_receive+0x1630>
c000c4c7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4cb:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c4ce:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c4d3:	39 c2                	cmp    edx,eax
c000c4d5:	0f 85 1d 07 00 00    	jne    c000cbf8 <tcp_receive+0x118c>
c000c4db:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c4e1:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c4e6:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c4ea:	0f b7 c0             	movzx  eax,ax
c000c4ed:	83 ec 0c             	sub    esp,0xc
c000c4f0:	50                   	push   eax
c000c4f1:	e8 f2 46 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c4f6:	83 c4 10             	add    esp,0x10
c000c4f9:	0f b7 c0             	movzx  eax,ax
c000c4fc:	83 e0 03             	and    eax,0x3
c000c4ff:	0f 95 c0             	setne  al
c000c502:	0f b6 c0             	movzx  eax,al
c000c505:	01 d8                	add    eax,ebx
c000c507:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c50d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c511:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c514:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c51a:	0f b7 d2             	movzx  edx,dx
c000c51d:	0f b7 c0             	movzx  eax,ax
c000c520:	39 c2                	cmp    edx,eax
c000c522:	0f 83 2c 01 00 00    	jae    c000c654 <tcp_receive+0xbe8>
c000c528:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c52d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c531:	0f b7 c0             	movzx  eax,ax
c000c534:	83 ec 0c             	sub    esp,0xc
c000c537:	50                   	push   eax
c000c538:	e8 ab 46 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c53d:	83 c4 10             	add    esp,0x10
c000c540:	0f b7 c0             	movzx  eax,ax
c000c543:	83 e0 01             	and    eax,0x1
c000c546:	74 44                	je     c000c58c <tcp_receive+0xb20>
c000c548:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c54d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c551:	80 e4 c0             	and    ah,0xc0
c000c554:	89 c3                	mov    ebx,eax
c000c556:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c55b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c55f:	0f b7 c0             	movzx  eax,ax
c000c562:	83 ec 0c             	sub    esp,0xc
c000c565:	50                   	push   eax
c000c566:	e8 7d 46 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c56b:	83 c4 10             	add    esp,0x10
c000c56e:	0f b7 c0             	movzx  eax,ax
c000c571:	83 e0 3e             	and    eax,0x3e
c000c574:	83 ec 0c             	sub    esp,0xc
c000c577:	50                   	push   eax
c000c578:	e8 6b 46 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c57d:	83 c4 10             	add    esp,0x10
c000c580:	09 d8                	or     eax,ebx
c000c582:	8b 15 cc a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8cc
c000c588:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000c58c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c590:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c593:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c599:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c59e:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c5a2:	0f b7 c0             	movzx  eax,ax
c000c5a5:	83 ec 0c             	sub    esp,0xc
c000c5a8:	50                   	push   eax
c000c5a9:	e8 3a 46 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c5ae:	83 c4 10             	add    esp,0x10
c000c5b1:	0f b7 c0             	movzx  eax,ax
c000c5b4:	83 e0 02             	and    eax,0x2
c000c5b7:	74 0f                	je     c000c5c8 <tcp_receive+0xb5c>
c000c5b9:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c5be:	83 e8 01             	sub    eax,0x1
c000c5c1:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c5c7:	90                   	nop
c000c5c8:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c5cd:	0f b7 d0             	movzx  edx,ax
c000c5d0:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c5d5:	83 ec 08             	sub    esp,0x8
c000c5d8:	52                   	push   edx
c000c5d9:	50                   	push   eax
c000c5da:	e8 99 c2 ff ff       	call   c0008878 <pbuf_realloc>
c000c5df:	83 c4 10             	add    esp,0x10
c000c5e2:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c5e8:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c5ed:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c5f1:	0f b7 c0             	movzx  eax,ax
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	50                   	push   eax
c000c5f8:	e8 eb 45 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c5fd:	83 c4 10             	add    esp,0x10
c000c600:	0f b7 c0             	movzx  eax,ax
c000c603:	83 e0 03             	and    eax,0x3
c000c606:	0f 95 c0             	setne  al
c000c609:	0f b6 c0             	movzx  eax,al
c000c60c:	01 d8                	add    eax,ebx
c000c60e:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c614:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c61a:	0f b7 d0             	movzx  edx,ax
c000c61d:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c622:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000c625:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c629:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c62c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c630:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c633:	0f b7 c0             	movzx  eax,ax
c000c636:	01 d0                	add    eax,edx
c000c638:	39 c1                	cmp    ecx,eax
c000c63a:	74 18                	je     c000c654 <tcp_receive+0xbe8>
c000c63c:	83 ec 08             	sub    esp,0x8
c000c63f:	68 d4 02 03 c0       	push   0xc00302d4
c000c644:	68 46 f9 02 c0       	push   0xc002f946
c000c649:	e8 8e 34 01 00       	call   c001fadc <CPrintf>
c000c64e:	83 c4 10             	add    esp,0x10
c000c651:	8d 76 00             	lea    esi,[esi+0x0]
c000c654:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c658:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c65e:	85 c0                	test   eax,eax
c000c660:	0f 84 7e 02 00 00    	je     c000c8e4 <tcp_receive+0xe78>
c000c666:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c66b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c66f:	0f b7 c0             	movzx  eax,ax
c000c672:	83 ec 0c             	sub    esp,0xc
c000c675:	50                   	push   eax
c000c676:	e8 6d 45 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c67b:	83 c4 10             	add    esp,0x10
c000c67e:	0f b7 c0             	movzx  eax,ax
c000c681:	83 e0 01             	and    eax,0x1
c000c684:	74 4a                	je     c000c6d0 <tcp_receive+0xc64>
c000c686:	eb 34                	jmp    c000c6bc <tcp_receive+0xc50>
c000c688:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c68c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c692:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c696:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c69a:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c6a0:	8b 10                	mov    edx,DWORD PTR [eax]
c000c6a2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6a6:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000c6ac:	83 ec 0c             	sub    esp,0xc
c000c6af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c6b3:	e8 68 d8 ff ff       	call   c0009f20 <tcp_seg_free>
c000c6b8:	83 c4 10             	add    esp,0x10
c000c6bb:	90                   	nop
c000c6bc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6c0:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c6c6:	85 c0                	test   eax,eax
c000c6c8:	75 be                	jne    c000c688 <tcp_receive+0xc1c>
c000c6ca:	e9 15 02 00 00       	jmp    c000c8e4 <tcp_receive+0xe78>
c000c6cf:	90                   	nop
c000c6d0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6d4:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c6da:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c6de:	e9 bd 00 00 00       	jmp    c000c7a0 <tcp_receive+0xd34>
c000c6e3:	90                   	nop
c000c6e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6e8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c6eb:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c6ef:	0f b7 c0             	movzx  eax,ax
c000c6f2:	83 ec 0c             	sub    esp,0xc
c000c6f5:	50                   	push   eax
c000c6f6:	e8 ed 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c6fb:	83 c4 10             	add    esp,0x10
c000c6fe:	0f b7 c0             	movzx  eax,ax
c000c701:	83 e0 01             	and    eax,0x1
c000c704:	74 76                	je     c000c77c <tcp_receive+0xd10>
c000c706:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c70b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c70f:	0f b7 c0             	movzx  eax,ax
c000c712:	83 ec 0c             	sub    esp,0xc
c000c715:	50                   	push   eax
c000c716:	e8 cd 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c71b:	83 c4 10             	add    esp,0x10
c000c71e:	0f b7 c0             	movzx  eax,ax
c000c721:	83 e0 02             	and    eax,0x2
c000c724:	75 56                	jne    c000c77c <tcp_receive+0xd10>
c000c726:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c72b:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000c72f:	83 ec 0c             	sub    esp,0xc
c000c732:	6a 01                	push   0x1
c000c734:	e8 af 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c739:	83 c4 10             	add    esp,0x10
c000c73c:	8b 15 cc a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8cc
c000c742:	09 d8                	or     eax,ebx
c000c744:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000c748:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c74e:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c753:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c757:	0f b7 c0             	movzx  eax,ax
c000c75a:	83 ec 0c             	sub    esp,0xc
c000c75d:	50                   	push   eax
c000c75e:	e8 85 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c763:	83 c4 10             	add    esp,0x10
c000c766:	0f b7 c0             	movzx  eax,ax
c000c769:	83 e0 03             	and    eax,0x3
c000c76c:	0f 95 c0             	setne  al
c000c76f:	0f b6 c0             	movzx  eax,al
c000c772:	01 d8                	add    eax,ebx
c000c774:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c77a:	66 90                	xchg   ax,ax
c000c77c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c780:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c784:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c788:	8b 00                	mov    eax,DWORD PTR [eax]
c000c78a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c78e:	83 ec 0c             	sub    esp,0xc
c000c791:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c795:	e8 86 d7 ff ff       	call   c0009f20 <tcp_seg_free>
c000c79a:	83 c4 10             	add    esp,0x10
c000c79d:	8d 76 00             	lea    esi,[esi+0x0]
c000c7a0:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000c7a5:	74 31                	je     c000c7d8 <tcp_receive+0xd6c>
c000c7a7:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c7ad:	0f b7 d0             	movzx  edx,ax
c000c7b0:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c7b5:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000c7b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7bc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c7bf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000c7c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7c6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c7c9:	0f b7 c0             	movzx  eax,ax
c000c7cc:	01 d0                	add    eax,edx
c000c7ce:	29 c1                	sub    ecx,eax
c000c7d0:	89 c8                	mov    eax,ecx
c000c7d2:	0f 89 0c ff ff ff    	jns    c000c6e4 <tcp_receive+0xc78>
c000c7d8:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000c7dd:	0f 84 f1 00 00 00    	je     c000c8d4 <tcp_receive+0xe68>
c000c7e3:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c7e9:	0f b7 d0             	movzx  edx,ax
c000c7ec:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c7f1:	01 c2                	add    edx,eax
c000c7f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c7fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c7fd:	29 c2                	sub    edx,eax
c000c7ff:	89 d0                	mov    eax,edx
c000c801:	85 c0                	test   eax,eax
c000c803:	0f 8e cb 00 00 00    	jle    c000c8d4 <tcp_receive+0xe68>
c000c809:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c80d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c810:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c813:	89 c2                	mov    edx,eax
c000c815:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c81a:	89 d7                	mov    edi,edx
c000c81c:	29 c7                	sub    edi,eax
c000c81e:	89 f8                	mov    eax,edi
c000c820:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c826:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c82b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c82f:	0f b7 c0             	movzx  eax,ax
c000c832:	83 ec 0c             	sub    esp,0xc
c000c835:	50                   	push   eax
c000c836:	e8 ad 43 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c83b:	83 c4 10             	add    esp,0x10
c000c83e:	0f b7 c0             	movzx  eax,ax
c000c841:	83 e0 02             	and    eax,0x2
c000c844:	74 0e                	je     c000c854 <tcp_receive+0xde8>
c000c846:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c84b:	83 e8 01             	sub    eax,0x1
c000c84e:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c854:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c859:	0f b7 d0             	movzx  edx,ax
c000c85c:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c861:	83 ec 08             	sub    esp,0x8
c000c864:	52                   	push   edx
c000c865:	50                   	push   eax
c000c866:	e8 0d c0 ff ff       	call   c0008878 <pbuf_realloc>
c000c86b:	83 c4 10             	add    esp,0x10
c000c86e:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c874:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c879:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c87d:	0f b7 c0             	movzx  eax,ax
c000c880:	83 ec 0c             	sub    esp,0xc
c000c883:	50                   	push   eax
c000c884:	e8 5f 43 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c889:	83 c4 10             	add    esp,0x10
c000c88c:	0f b7 c0             	movzx  eax,ax
c000c88f:	83 e0 03             	and    eax,0x3
c000c892:	0f 95 c0             	setne  al
c000c895:	0f b6 c0             	movzx  eax,al
c000c898:	01 d8                	add    eax,ebx
c000c89a:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c8a0:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c8a6:	0f b7 d0             	movzx  edx,ax
c000c8a9:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c8ae:	01 c2                	add    edx,eax
c000c8b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c8b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c8b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c8ba:	39 c2                	cmp    edx,eax
c000c8bc:	74 16                	je     c000c8d4 <tcp_receive+0xe68>
c000c8be:	83 ec 08             	sub    esp,0x8
c000c8c1:	68 0c 03 03 c0       	push   0xc003030c
c000c8c6:	68 46 f9 02 c0       	push   0xc002f946
c000c8cb:	e8 0c 32 01 00       	call   c001fadc <CPrintf>
c000c8d0:	83 c4 10             	add    esp,0x10
c000c8d3:	90                   	nop
c000c8d4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8d8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c8dc:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000c8e2:	66 90                	xchg   ax,ax
c000c8e4:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c8ea:	0f b7 d0             	movzx  edx,ax
c000c8ed:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c8f2:	01 c2                	add    edx,eax
c000c8f4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8f8:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000c8fb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8ff:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c902:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c908:	0f b7 d2             	movzx  edx,dx
c000c90b:	0f b7 c0             	movzx  eax,ax
c000c90e:	39 c2                	cmp    edx,eax
c000c910:	73 16                	jae    c000c928 <tcp_receive+0xebc>
c000c912:	83 ec 08             	sub    esp,0x8
c000c915:	68 48 03 03 c0       	push   0xc0030348
c000c91a:	68 46 f9 02 c0       	push   0xc002f946
c000c91f:	e8 b8 31 01 00       	call   c001fadc <CPrintf>
c000c924:	83 c4 10             	add    esp,0x10
c000c927:	90                   	nop
c000c928:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c92c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c92f:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c935:	89 d6                	mov    esi,edx
c000c937:	29 c6                	sub    esi,eax
c000c939:	89 f0                	mov    eax,esi
c000c93b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c93f:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c000c943:	83 ec 0c             	sub    esp,0xc
c000c946:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c94a:	e8 7d d2 ff ff       	call   c0009bcc <tcp_update_rcv_ann_wnd>
c000c94f:	83 c4 10             	add    esp,0x10
c000c952:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c957:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c95a:	0f b7 c0             	movzx  eax,ax
c000c95d:	85 c0                	test   eax,eax
c000c95f:	74 17                	je     c000c978 <tcp_receive+0xf0c>
c000c961:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c966:	a3 a4 a8 03 c0       	mov    ds:0xc003a8a4,eax
c000c96b:	c7 05 c4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c4,0x0
c000c975:	8d 76 00             	lea    esi,[esi+0x0]
c000c978:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c97d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c981:	0f b7 c0             	movzx  eax,ax
c000c984:	83 ec 0c             	sub    esp,0xc
c000c987:	50                   	push   eax
c000c988:	e8 5b 42 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c98d:	83 c4 10             	add    esp,0x10
c000c990:	0f b7 c0             	movzx  eax,ax
c000c993:	83 e0 01             	and    eax,0x1
c000c996:	0f 84 d8 01 00 00    	je     c000cb74 <tcp_receive+0x1108>
c000c99c:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000c9a1:	83 c8 20             	or     eax,0x20
c000c9a4:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000c9a9:	e9 c6 01 00 00       	jmp    c000cb74 <tcp_receive+0x1108>
c000c9ae:	66 90                	xchg   ax,ax
c000c9b0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c9b4:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c9ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c9c2:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c9c8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c9cb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c9ce:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000c9d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c9da:	0f b7 d8             	movzx  ebx,ax
c000c9dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9e1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c9e4:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c9e8:	0f b7 c0             	movzx  eax,ax
c000c9eb:	83 ec 0c             	sub    esp,0xc
c000c9ee:	50                   	push   eax
c000c9ef:	e8 f4 41 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c9f4:	83 c4 10             	add    esp,0x10
c000c9f7:	0f b7 c0             	movzx  eax,ax
c000c9fa:	83 e0 03             	and    eax,0x3
c000c9fd:	0f 95 c0             	setne  al
c000ca00:	0f b6 c0             	movzx  eax,al
c000ca03:	8d 14 03             	lea    edx,[ebx+eax*1]
c000ca06:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca0a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000ca0d:	01 c2                	add    edx,eax
c000ca0f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca13:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000ca16:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca1a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ca1d:	0f b7 d8             	movzx  ebx,ax
c000ca20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca24:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ca27:	0f b7 f0             	movzx  esi,ax
c000ca2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca2e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca31:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ca35:	0f b7 c0             	movzx  eax,ax
c000ca38:	83 ec 0c             	sub    esp,0xc
c000ca3b:	50                   	push   eax
c000ca3c:	e8 a7 41 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ca41:	83 c4 10             	add    esp,0x10
c000ca44:	0f b7 c0             	movzx  eax,ax
c000ca47:	83 e0 03             	and    eax,0x3
c000ca4a:	0f 95 c0             	setne  al
c000ca4d:	0f b6 c0             	movzx  eax,al
c000ca50:	01 f0                	add    eax,esi
c000ca52:	39 c3                	cmp    ebx,eax
c000ca54:	7d 16                	jge    c000ca6c <tcp_receive+0x1000>
c000ca56:	83 ec 08             	sub    esp,0x8
c000ca59:	68 68 03 03 c0       	push   0xc0030368
c000ca5e:	68 46 f9 02 c0       	push   0xc002f946
c000ca63:	e8 74 30 01 00       	call   c001fadc <CPrintf>
c000ca68:	83 c4 10             	add    esp,0x10
c000ca6b:	90                   	nop
c000ca6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca70:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ca73:	0f b7 d8             	movzx  ebx,ax
c000ca76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca7a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca7d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ca81:	0f b7 c0             	movzx  eax,ax
c000ca84:	83 ec 0c             	sub    esp,0xc
c000ca87:	50                   	push   eax
c000ca88:	e8 5b 41 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ca8d:	83 c4 10             	add    esp,0x10
c000ca90:	0f b7 c0             	movzx  eax,ax
c000ca93:	83 e0 03             	and    eax,0x3
c000ca96:	0f 95 c0             	setne  al
c000ca99:	0f b6 c0             	movzx  eax,al
c000ca9c:	8d 14 03             	lea    edx,[ebx+eax*1]
c000ca9f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000caa3:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000caa6:	29 d0                	sub    eax,edx
c000caa8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000caac:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c000cab0:	83 ec 0c             	sub    esp,0xc
c000cab3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cab7:	e8 10 d1 ff ff       	call   c0009bcc <tcp_update_rcv_ann_wnd>
c000cabc:	83 c4 10             	add    esp,0x10
c000cabf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cac3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cac6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cac9:	0f b7 c0             	movzx  eax,ax
c000cacc:	85 c0                	test   eax,eax
c000cace:	74 3c                	je     c000cb0c <tcp_receive+0x10a0>
c000cad0:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000cad5:	85 c0                	test   eax,eax
c000cad7:	74 1b                	je     c000caf4 <tcp_receive+0x1088>
c000cad9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cadd:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cae0:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000cae5:	83 ec 08             	sub    esp,0x8
c000cae8:	52                   	push   edx
c000cae9:	50                   	push   eax
c000caea:	e8 f1 bf ff ff       	call   c0008ae0 <pbuf_cat>
c000caef:	83 c4 10             	add    esp,0x10
c000caf2:	eb 0c                	jmp    c000cb00 <tcp_receive+0x1094>
c000caf4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000caf8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cafb:	a3 a4 a8 03 c0       	mov    ds:0xc003a8a4,eax
c000cb00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb04:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cb0b:	90                   	nop
c000cb0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb10:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cb13:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cb17:	0f b7 c0             	movzx  eax,ax
c000cb1a:	83 ec 0c             	sub    esp,0xc
c000cb1d:	50                   	push   eax
c000cb1e:	e8 c5 40 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cb23:	83 c4 10             	add    esp,0x10
c000cb26:	0f b7 c0             	movzx  eax,ax
c000cb29:	83 e0 01             	and    eax,0x1
c000cb2c:	74 26                	je     c000cb54 <tcp_receive+0x10e8>
c000cb2e:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000cb33:	83 c8 20             	or     eax,0x20
c000cb36:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000cb3b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb3f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000cb42:	83 f8 04             	cmp    eax,0x4
c000cb45:	75 0d                	jne    c000cb54 <tcp_receive+0x10e8>
c000cb47:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb4b:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000cb52:	66 90                	xchg   ax,ax
c000cb54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb58:	8b 10                	mov    edx,DWORD PTR [eax]
c000cb5a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb5e:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cb64:	83 ec 0c             	sub    esp,0xc
c000cb67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb6b:	e8 b0 d3 ff ff       	call   c0009f20 <tcp_seg_free>
c000cb70:	83 c4 10             	add    esp,0x10
c000cb73:	90                   	nop
c000cb74:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb78:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	74 22                	je     c000cba4 <tcp_receive+0x1138>
c000cb82:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb86:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cb8c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cb8f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cb92:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb96:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000cb99:	39 c2                	cmp    edx,eax
c000cb9b:	0f 84 0f fe ff ff    	je     c000c9b0 <tcp_receive+0xf44>
c000cba1:	8d 76 00             	lea    esi,[esi+0x0]
c000cba4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cba8:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cbab:	0f b6 c0             	movzx  eax,al
c000cbae:	83 e0 01             	and    eax,0x1
c000cbb1:	74 2d                	je     c000cbe0 <tcp_receive+0x1174>
c000cbb3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbb7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cbba:	83 e0 fe             	and    eax,0xfffffffe
c000cbbd:	88 c2                	mov    dl,al
c000cbbf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbc3:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000cbc6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbca:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cbcd:	83 c8 02             	or     eax,0x2
c000cbd0:	88 c2                	mov    dl,al
c000cbd2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbd6:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000cbd9:	e9 22 05 00 00       	jmp    c000d100 <tcp_receive+0x1694>
c000cbde:	66 90                	xchg   ax,ax
c000cbe0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbe4:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cbe7:	83 c8 01             	or     eax,0x1
c000cbea:	88 c2                	mov    dl,al
c000cbec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbf0:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000cbf3:	e9 08 05 00 00       	jmp    c000d100 <tcp_receive+0x1694>
c000cbf8:	83 ec 0c             	sub    esp,0xc
c000cbfb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cbff:	e8 c4 2e 00 00       	call   c000fac8 <tcp_send_empty_ack>
c000cc04:	83 c4 10             	add    esp,0x10
c000cc07:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc0b:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc11:	85 c0                	test   eax,eax
c000cc13:	75 23                	jne    c000cc38 <tcp_receive+0x11cc>
c000cc15:	83 ec 0c             	sub    esp,0xc
c000cc18:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cc1d:	e8 96 d3 ff ff       	call   c0009fb8 <tcp_seg_copy>
c000cc22:	83 c4 10             	add    esp,0x10
c000cc25:	89 c2                	mov    edx,eax
c000cc27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc2b:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cc31:	e9 ca 04 00 00       	jmp    c000d100 <tcp_receive+0x1694>
c000cc36:	66 90                	xchg   ax,ax
c000cc38:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000cc40:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc44:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc4a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc4e:	e9 21 04 00 00       	jmp    c000d074 <tcp_receive+0x1608>
c000cc53:	90                   	nop
c000cc54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cc58:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cc5b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cc5e:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cc63:	39 c2                	cmp    edx,eax
c000cc65:	75 75                	jne    c000ccdc <tcp_receive+0x1270>
c000cc67:	8b 15 c8 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8c8
c000cc6d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cc71:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cc74:	0f b7 d2             	movzx  edx,dx
c000cc77:	0f b7 c0             	movzx  eax,ax
c000cc7a:	39 c2                	cmp    edx,eax
c000cc7c:	0f 86 02 04 00 00    	jbe    c000d084 <tcp_receive+0x1618>
c000cc82:	83 ec 0c             	sub    esp,0xc
c000cc85:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cc8a:	e8 29 d3 ff ff       	call   c0009fb8 <tcp_seg_copy>
c000cc8f:	83 c4 10             	add    esp,0x10
c000cc92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc96:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cc9b:	0f 84 e7 03 00 00    	je     c000d088 <tcp_receive+0x161c>
c000cca1:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cca6:	74 0c                	je     c000ccb4 <tcp_receive+0x1248>
c000cca8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ccac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ccb0:	89 10                	mov    DWORD PTR [eax],edx
c000ccb2:	eb 10                	jmp    c000ccc4 <tcp_receive+0x1258>
c000ccb4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ccb8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ccbc:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000ccc2:	66 90                	xchg   ax,ax
c000ccc4:	83 ec 08             	sub    esp,0x8
c000ccc7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cccb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cccf:	e8 2c ec ff ff       	call   c000b900 <tcp_oos_insert_segment>
c000ccd4:	83 c4 10             	add    esp,0x10
c000ccd7:	e9 ac 03 00 00       	jmp    c000d088 <tcp_receive+0x161c>
c000ccdc:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cce1:	75 61                	jne    c000cd44 <tcp_receive+0x12d8>
c000cce3:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cce9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cced:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ccf0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ccf3:	29 c2                	sub    edx,eax
c000ccf5:	89 d0                	mov    eax,edx
c000ccf7:	0f 89 27 01 00 00    	jns    c000ce24 <tcp_receive+0x13b8>
c000ccfd:	83 ec 0c             	sub    esp,0xc
c000cd00:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cd05:	e8 ae d2 ff ff       	call   c0009fb8 <tcp_seg_copy>
c000cd0a:	83 c4 10             	add    esp,0x10
c000cd0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd11:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cd16:	0f 84 70 03 00 00    	je     c000d08c <tcp_receive+0x1620>
c000cd1c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd24:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cd2a:	83 ec 08             	sub    esp,0x8
c000cd2d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd35:	e8 c6 eb ff ff       	call   c000b900 <tcp_oos_insert_segment>
c000cd3a:	83 c4 10             	add    esp,0x10
c000cd3d:	e9 4a 03 00 00       	jmp    c000d08c <tcp_receive+0x1620>
c000cd42:	66 90                	xchg   ax,ax
c000cd44:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cd4a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cd4e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cd51:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cd54:	29 c2                	sub    edx,eax
c000cd56:	89 d0                	mov    eax,edx
c000cd58:	83 e8 01             	sub    eax,0x1
c000cd5b:	0f 88 c3 00 00 00    	js     c000ce24 <tcp_receive+0x13b8>
c000cd61:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cd67:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cd6b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cd6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cd71:	29 c2                	sub    edx,eax
c000cd73:	89 d0                	mov    eax,edx
c000cd75:	83 c0 01             	add    eax,0x1
c000cd78:	85 c0                	test   eax,eax
c000cd7a:	0f 8f a4 00 00 00    	jg     c000ce24 <tcp_receive+0x13b8>
c000cd80:	83 ec 0c             	sub    esp,0xc
c000cd83:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cd88:	e8 2b d2 ff ff       	call   c0009fb8 <tcp_seg_copy>
c000cd8d:	83 c4 10             	add    esp,0x10
c000cd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd94:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cd99:	0f 84 f1 02 00 00    	je     c000d090 <tcp_receive+0x1624>
c000cd9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cda3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cda6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cda9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cdad:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cdb0:	0f b7 c0             	movzx  eax,ax
c000cdb3:	01 c2                	add    edx,eax
c000cdb5:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cdba:	29 c2                	sub    edx,eax
c000cdbc:	89 d0                	mov    eax,edx
c000cdbe:	85 c0                	test   eax,eax
c000cdc0:	7e 3e                	jle    c000ce00 <tcp_receive+0x1394>
c000cdc2:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cdc7:	89 c2                	mov    edx,eax
c000cdc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cdcd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cdd0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cdd3:	89 d7                	mov    edi,edx
c000cdd5:	29 c7                	sub    edi,eax
c000cdd7:	89 f8                	mov    eax,edi
c000cdd9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cddd:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000cde1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cde5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cde8:	0f b7 d0             	movzx  edx,ax
c000cdeb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cdef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cdf2:	83 ec 08             	sub    esp,0x8
c000cdf5:	52                   	push   edx
c000cdf6:	50                   	push   eax
c000cdf7:	e8 7c ba ff ff       	call   c0008878 <pbuf_realloc>
c000cdfc:	83 c4 10             	add    esp,0x10
c000cdff:	90                   	nop
c000ce00:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce08:	89 10                	mov    DWORD PTR [eax],edx
c000ce0a:	83 ec 08             	sub    esp,0x8
c000ce0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce15:	e8 e6 ea ff ff       	call   c000b900 <tcp_oos_insert_segment>
c000ce1a:	83 c4 10             	add    esp,0x10
c000ce1d:	e9 6e 02 00 00       	jmp    c000d090 <tcp_receive+0x1624>
c000ce22:	66 90                	xchg   ax,ax
c000ce24:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce28:	8b 00                	mov    eax,DWORD PTR [eax]
c000ce2a:	85 c0                	test   eax,eax
c000ce2c:	0f 85 2e 02 00 00    	jne    c000d060 <tcp_receive+0x15f4>
c000ce32:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000ce38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce3c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce3f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ce42:	29 c2                	sub    edx,eax
c000ce44:	89 d0                	mov    eax,edx
c000ce46:	85 c0                	test   eax,eax
c000ce48:	0f 8e 12 02 00 00    	jle    c000d060 <tcp_receive+0x15f4>
c000ce4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce52:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce55:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ce59:	0f b7 c0             	movzx  eax,ax
c000ce5c:	83 ec 0c             	sub    esp,0xc
c000ce5f:	50                   	push   eax
c000ce60:	e8 83 3d ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ce65:	83 c4 10             	add    esp,0x10
c000ce68:	0f b7 c0             	movzx  eax,ax
c000ce6b:	83 e0 01             	and    eax,0x1
c000ce6e:	0f 85 20 02 00 00    	jne    c000d094 <tcp_receive+0x1628>
c000ce74:	83 ec 0c             	sub    esp,0xc
c000ce77:	68 c0 a8 03 c0       	push   0xc003a8c0
c000ce7c:	e8 37 d1 ff ff       	call   c0009fb8 <tcp_seg_copy>
c000ce81:	83 c4 10             	add    esp,0x10
c000ce84:	89 c2                	mov    edx,eax
c000ce86:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce8a:	89 10                	mov    DWORD PTR [eax],edx
c000ce8c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce90:	8b 00                	mov    eax,DWORD PTR [eax]
c000ce92:	85 c0                	test   eax,eax
c000ce94:	0f 84 fe 01 00 00    	je     c000d098 <tcp_receive+0x162c>
c000ce9a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce9e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cea1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cea4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cea8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ceab:	0f b7 c0             	movzx  eax,ax
c000ceae:	01 c2                	add    edx,eax
c000ceb0:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ceb5:	29 c2                	sub    edx,eax
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	85 c0                	test   eax,eax
c000cebb:	7e 3f                	jle    c000cefc <tcp_receive+0x1490>
c000cebd:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cec2:	89 c2                	mov    edx,eax
c000cec4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cec8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cecb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cece:	89 d6                	mov    esi,edx
c000ced0:	29 c6                	sub    esi,eax
c000ced2:	89 f0                	mov    eax,esi
c000ced4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ced8:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000cedc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cee0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cee3:	0f b7 d0             	movzx  edx,ax
c000cee6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ceea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ceed:	83 ec 08             	sub    esp,0x8
c000cef0:	52                   	push   edx
c000cef1:	50                   	push   eax
c000cef2:	e8 81 b9 ff ff       	call   c0008878 <pbuf_realloc>
c000cef7:	83 c4 10             	add    esp,0x10
c000cefa:	66 90                	xchg   ax,ax
c000cefc:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000cf02:	0f b7 d0             	movzx  edx,ax
c000cf05:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cf0a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000cf0d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cf11:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000cf14:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cf18:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000cf1b:	0f b7 c0             	movzx  eax,ax
c000cf1e:	01 d0                	add    eax,edx
c000cf20:	39 c1                	cmp    ecx,eax
c000cf22:	0f 86 70 01 00 00    	jbe    c000d098 <tcp_receive+0x162c>
c000cf28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf2c:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf2e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf31:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cf35:	0f b7 c0             	movzx  eax,ax
c000cf38:	83 ec 0c             	sub    esp,0xc
c000cf3b:	50                   	push   eax
c000cf3c:	e8 a7 3c ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cf41:	83 c4 10             	add    esp,0x10
c000cf44:	0f b7 c0             	movzx  eax,ax
c000cf47:	83 e0 01             	and    eax,0x1
c000cf4a:	74 50                	je     c000cf9c <tcp_receive+0x1530>
c000cf4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf50:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf52:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf55:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cf59:	80 e4 c0             	and    ah,0xc0
c000cf5c:	89 c3                	mov    ebx,eax
c000cf5e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf62:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf64:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf67:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cf6b:	0f b7 c0             	movzx  eax,ax
c000cf6e:	83 ec 0c             	sub    esp,0xc
c000cf71:	50                   	push   eax
c000cf72:	e8 71 3c ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cf77:	83 c4 10             	add    esp,0x10
c000cf7a:	0f b7 c0             	movzx  eax,ax
c000cf7d:	83 e0 3e             	and    eax,0x3e
c000cf80:	83 ec 0c             	sub    esp,0xc
c000cf83:	50                   	push   eax
c000cf84:	e8 5f 3c ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cf89:	83 c4 10             	add    esp,0x10
c000cf8c:	09 d8                	or     eax,ebx
c000cf8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cf92:	8b 12                	mov    edx,DWORD PTR [edx]
c000cf94:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000cf97:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000cf9b:	90                   	nop
c000cf9c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cfa0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000cfa3:	89 c2                	mov    edx,eax
c000cfa5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cfa9:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000cfac:	01 d0                	add    eax,edx
c000cfae:	89 c3                	mov    ebx,eax
c000cfb0:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cfb5:	89 c1                	mov    ecx,eax
c000cfb7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfbb:	8b 10                	mov    edx,DWORD PTR [eax]
c000cfbd:	89 d8                	mov    eax,ebx
c000cfbf:	29 c8                	sub    eax,ecx
c000cfc1:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000cfc5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfc9:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfcb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cfce:	0f b7 d0             	movzx  edx,ax
c000cfd1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfd5:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfd7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cfda:	83 ec 08             	sub    esp,0x8
c000cfdd:	52                   	push   edx
c000cfde:	50                   	push   eax
c000cfdf:	e8 94 b8 ff ff       	call   c0008878 <pbuf_realloc>
c000cfe4:	83 c4 10             	add    esp,0x10
c000cfe7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfeb:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfed:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
c000cff0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cff4:	8b 00                	mov    eax,DWORD PTR [eax]
c000cff6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cff9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cffd:	0f b7 c0             	movzx  eax,ax
c000d000:	83 ec 0c             	sub    esp,0xc
c000d003:	50                   	push   eax
c000d004:	e8 df 3b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d009:	83 c4 10             	add    esp,0x10
c000d00c:	0f b7 c0             	movzx  eax,ax
c000d00f:	83 e0 03             	and    eax,0x3
c000d012:	0f 95 c0             	setne  al
c000d015:	0f b6 c0             	movzx  eax,al
c000d018:	01 d8                	add    eax,ebx
c000d01a:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000d020:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d026:	0f b7 d0             	movzx  edx,ax
c000d029:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d02e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d031:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d035:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d038:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d03c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d03f:	0f b7 c0             	movzx  eax,ax
c000d042:	01 d0                	add    eax,edx
c000d044:	39 c1                	cmp    ecx,eax
c000d046:	74 50                	je     c000d098 <tcp_receive+0x162c>
c000d048:	83 ec 08             	sub    esp,0x8
c000d04b:	68 d4 02 03 c0       	push   0xc00302d4
c000d050:	68 46 f9 02 c0       	push   0xc002f946
c000d055:	e8 82 2a 01 00       	call   c001fadc <CPrintf>
c000d05a:	83 c4 10             	add    esp,0x10
c000d05d:	eb 39                	jmp    c000d098 <tcp_receive+0x162c>
c000d05f:	90                   	nop
c000d060:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d064:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d068:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d06c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d06e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d072:	66 90                	xchg   ax,ax
c000d074:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000d079:	0f 85 d5 fb ff ff    	jne    c000cc54 <tcp_receive+0x11e8>
c000d07f:	eb 7f                	jmp    c000d100 <tcp_receive+0x1694>
c000d081:	8d 76 00             	lea    esi,[esi+0x0]
c000d084:	90                   	nop
c000d085:	eb 79                	jmp    c000d100 <tcp_receive+0x1694>
c000d087:	90                   	nop
c000d088:	90                   	nop
c000d089:	eb 75                	jmp    c000d100 <tcp_receive+0x1694>
c000d08b:	90                   	nop
c000d08c:	90                   	nop
c000d08d:	eb 71                	jmp    c000d100 <tcp_receive+0x1694>
c000d08f:	90                   	nop
c000d090:	90                   	nop
c000d091:	eb 6d                	jmp    c000d100 <tcp_receive+0x1694>
c000d093:	90                   	nop
c000d094:	90                   	nop
c000d095:	eb 69                	jmp    c000d100 <tcp_receive+0x1694>
c000d097:	90                   	nop
c000d098:	90                   	nop
c000d099:	eb 65                	jmp    c000d100 <tcp_receive+0x1694>
c000d09b:	90                   	nop
c000d09c:	83 ec 0c             	sub    esp,0xc
c000d09f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d0a3:	e8 20 2a 00 00       	call   c000fac8 <tcp_send_empty_ack>
c000d0a8:	83 c4 10             	add    esp,0x10
c000d0ab:	eb 53                	jmp    c000d100 <tcp_receive+0x1694>
c000d0ad:	8d 76 00             	lea    esi,[esi+0x0]
c000d0b0:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d0b6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d0ba:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d0bd:	29 c2                	sub    edx,eax
c000d0bf:	89 d0                	mov    eax,edx
c000d0c1:	78 25                	js     c000d0e8 <tcp_receive+0x167c>
c000d0c3:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d0c9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d0cd:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d0d0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d0d4:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d0d7:	0f b7 c0             	movzx  eax,ax
c000d0da:	01 c8                	add    eax,ecx
c000d0dc:	29 c2                	sub    edx,eax
c000d0de:	89 d0                	mov    eax,edx
c000d0e0:	83 c0 01             	add    eax,0x1
c000d0e3:	85 c0                	test   eax,eax
c000d0e5:	7e 19                	jle    c000d100 <tcp_receive+0x1694>
c000d0e7:	90                   	nop
c000d0e8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d0ec:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d0ef:	83 c8 02             	or     eax,0x2
c000d0f2:	88 c2                	mov    dl,al
c000d0f4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d0f8:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d0fb:	eb 03                	jmp    c000d100 <tcp_receive+0x1694>
c000d0fd:	8d 76 00             	lea    esi,[esi+0x0]
c000d100:	90                   	nop
c000d101:	83 c4 30             	add    esp,0x30
c000d104:	5b                   	pop    ebx
c000d105:	5e                   	pop    esi
c000d106:	5f                   	pop    edi
c000d107:	c3                   	ret    

c000d108 <tcp_parseopt>:
c000d108:	83 ec 1c             	sub    esp,0x1c
c000d10b:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d110:	83 c0 14             	add    eax,0x14
c000d113:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d117:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d11c:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d120:	0f b7 c0             	movzx  eax,ax
c000d123:	83 ec 0c             	sub    esp,0xc
c000d126:	50                   	push   eax
c000d127:	e8 bc 3a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d12c:	83 c4 10             	add    esp,0x10
c000d12f:	0f b7 c0             	movzx  eax,ax
c000d132:	c1 e8 0c             	shr    eax,0xc
c000d135:	0f b7 c0             	movzx  eax,ax
c000d138:	83 f8 05             	cmp    eax,0x5
c000d13b:	0f 86 6f 01 00 00    	jbe    c000d2b0 <tcp_parseopt+0x1a8>
c000d141:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d146:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d14a:	0f b7 c0             	movzx  eax,ax
c000d14d:	83 ec 0c             	sub    esp,0xc
c000d150:	50                   	push   eax
c000d151:	e8 92 3a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d156:	83 c4 10             	add    esp,0x10
c000d159:	0f b7 c0             	movzx  eax,ax
c000d15c:	c1 e8 0c             	shr    eax,0xc
c000d15f:	83 e8 05             	sub    eax,0x5
c000d162:	c1 e0 02             	shl    eax,0x2
c000d165:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000d16a:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c000d171:	e9 1e 01 00 00       	jmp    c000d294 <tcp_parseopt+0x18c>
c000d176:	66 90                	xchg   ax,ax
c000d178:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d17d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d181:	01 d0                	add    eax,edx
c000d183:	8a 00                	mov    al,BYTE PTR [eax]
c000d185:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000d189:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c000d18e:	83 f8 01             	cmp    eax,0x1
c000d191:	74 15                	je     c000d1a8 <tcp_parseopt+0xa0>
c000d193:	83 f8 02             	cmp    eax,0x2
c000d196:	74 24                	je     c000d1bc <tcp_parseopt+0xb4>
c000d198:	85 c0                	test   eax,eax
c000d19a:	0f 85 bc 00 00 00    	jne    c000d25c <tcp_parseopt+0x154>
c000d1a0:	e9 0b 01 00 00       	jmp    c000d2b0 <tcp_parseopt+0x1a8>
c000d1a5:	8d 76 00             	lea    esi,[esi+0x0]
c000d1a8:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d1ad:	83 c0 01             	add    eax,0x1
c000d1b0:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d1b5:	e9 da 00 00 00       	jmp    c000d294 <tcp_parseopt+0x18c>
c000d1ba:	66 90                	xchg   ax,ax
c000d1bc:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d1c1:	8d 50 01             	lea    edx,[eax+0x1]
c000d1c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1c8:	01 d0                	add    eax,edx
c000d1ca:	8a 00                	mov    al,BYTE PTR [eax]
c000d1cc:	0f b6 c0             	movzx  eax,al
c000d1cf:	83 f8 04             	cmp    eax,0x4
c000d1d2:	0f 85 d0 00 00 00    	jne    c000d2a8 <tcp_parseopt+0x1a0>
c000d1d8:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d1dd:	8d 50 03             	lea    edx,[eax+0x3]
c000d1e0:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d1e5:	39 c2                	cmp    edx,eax
c000d1e7:	0f 8d bb 00 00 00    	jge    c000d2a8 <tcp_parseopt+0x1a0>
c000d1ed:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d1f2:	8d 50 02             	lea    edx,[eax+0x2]
c000d1f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1f9:	01 d0                	add    eax,edx
c000d1fb:	8a 00                	mov    al,BYTE PTR [eax]
c000d1fd:	0f b6 c0             	movzx  eax,al
c000d200:	c1 e0 08             	shl    eax,0x8
c000d203:	89 c2                	mov    edx,eax
c000d205:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d20a:	8d 48 03             	lea    ecx,[eax+0x3]
c000d20d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d211:	01 c8                	add    eax,ecx
c000d213:	8a 00                	mov    al,BYTE PTR [eax]
c000d215:	0f b6 c0             	movzx  eax,al
c000d218:	09 d0                	or     eax,edx
c000d21a:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c000d21f:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d224:	3d 18 02 00 00       	cmp    eax,0x218
c000d229:	77 11                	ja     c000d23c <tcp_parseopt+0x134>
c000d22b:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d230:	85 c0                	test   eax,eax
c000d232:	74 08                	je     c000d23c <tcp_parseopt+0x134>
c000d234:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c000d239:	eb 09                	jmp    c000d244 <tcp_parseopt+0x13c>
c000d23b:	90                   	nop
c000d23c:	b8 18 02 00 00       	mov    eax,0x218
c000d241:	8d 76 00             	lea    esi,[esi+0x0]
c000d244:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d248:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d24c:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d251:	83 c0 04             	add    eax,0x4
c000d254:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d259:	eb 39                	jmp    c000d294 <tcp_parseopt+0x18c>
c000d25b:	90                   	nop
c000d25c:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d261:	8d 50 01             	lea    edx,[eax+0x1]
c000d264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d268:	01 d0                	add    eax,edx
c000d26a:	8a 00                	mov    al,BYTE PTR [eax]
c000d26c:	0f b6 c0             	movzx  eax,al
c000d26f:	85 c0                	test   eax,eax
c000d271:	74 39                	je     c000d2ac <tcp_parseopt+0x1a4>
c000d273:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d278:	8d 50 01             	lea    edx,[eax+0x1]
c000d27b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d27f:	01 d0                	add    eax,edx
c000d281:	8a 00                	mov    al,BYTE PTR [eax]
c000d283:	0f b6 c0             	movzx  eax,al
c000d286:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c000d28b:	01 d0                	add    eax,edx
c000d28d:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d292:	66 90                	xchg   ax,ax
c000d294:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d299:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d29e:	39 c2                	cmp    edx,eax
c000d2a0:	0f 82 d2 fe ff ff    	jb     c000d178 <tcp_parseopt+0x70>
c000d2a6:	eb 08                	jmp    c000d2b0 <tcp_parseopt+0x1a8>
c000d2a8:	90                   	nop
c000d2a9:	eb 05                	jmp    c000d2b0 <tcp_parseopt+0x1a8>
c000d2ab:	90                   	nop
c000d2ac:	90                   	nop
c000d2ad:	8d 76 00             	lea    esi,[esi+0x0]
c000d2b0:	83 c4 1c             	add    esp,0x1c
c000d2b3:	c3                   	ret    

c000d2b4 <tcp_listen_input>:
c000d2b4:	53                   	push   ebx
c000d2b5:	83 ec 18             	sub    esp,0x18
c000d2b8:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d2bd:	0f b6 c0             	movzx  eax,al
c000d2c0:	83 e0 10             	and    eax,0x10
c000d2c3:	74 4f                	je     c000d314 <tcp_listen_input+0x60>
c000d2c5:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d2ca:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d2cd:	0f b7 c8             	movzx  ecx,ax
c000d2d0:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d2d5:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000d2d9:	0f b7 d0             	movzx  edx,ax
c000d2dc:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d2e2:	0f b7 d8             	movzx  ebx,ax
c000d2e5:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d2ea:	01 c3                	add    ebx,eax
c000d2ec:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d2f1:	83 c0 01             	add    eax,0x1
c000d2f4:	83 ec 08             	sub    esp,0x8
c000d2f7:	51                   	push   ecx
c000d2f8:	52                   	push   edx
c000d2f9:	68 90 68 03 c0       	push   0xc0036890
c000d2fe:	68 98 68 03 c0       	push   0xc0036898
c000d303:	53                   	push   ebx
c000d304:	50                   	push   eax
c000d305:	e8 5a 2f 00 00       	call   c0010264 <tcp_rst>
c000d30a:	83 c4 20             	add    esp,0x20
c000d30d:	e9 a2 01 00 00       	jmp    c000d4b4 <tcp_listen_input+0x200>
c000d312:	66 90                	xchg   ax,ax
c000d314:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d319:	0f b6 c0             	movzx  eax,al
c000d31c:	83 e0 02             	and    eax,0x2
c000d31f:	0f 84 8f 01 00 00    	je     c000d4b4 <tcp_listen_input+0x200>
c000d325:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d329:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000d32c:	0f b6 c0             	movzx  eax,al
c000d32f:	83 ec 0c             	sub    esp,0xc
c000d332:	50                   	push   eax
c000d333:	e8 14 e0 ff ff       	call   c000b34c <tcp_alloc>
c000d338:	83 c4 10             	add    esp,0x10
c000d33b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d33f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d344:	75 16                	jne    c000d35c <tcp_listen_input+0xa8>
c000d346:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000d34c:	83 c0 01             	add    eax,0x1
c000d34f:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000d355:	b0 ff                	mov    al,0xff
c000d357:	e9 5c 01 00 00       	jmp    c000d4b8 <tcp_listen_input+0x204>
c000d35c:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c000d362:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d366:	89 10                	mov    DWORD PTR [eax],edx
c000d368:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d36c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d36f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d373:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c000d377:	8b 15 90 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036890
c000d37d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d381:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d384:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d389:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d38c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d390:	66 89 42 22          	mov    WORD PTR [edx+0x22],ax
c000d394:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d398:	c7 40 10 03 00 00 00 	mov    DWORD PTR [eax+0x10],0x3
c000d39f:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d3a4:	8d 50 01             	lea    edx,[eax+0x1]
c000d3a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3ab:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d3ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3b2:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d3b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3b9:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d3bc:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d3c1:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000d3c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d3c9:	66 89 42 60          	mov    WORD PTR [edx+0x60],ax
c000d3cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3d1:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000d3d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d3d8:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000d3dc:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d3e1:	8d 50 ff             	lea    edx,[eax-0x1]
c000d3e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3e8:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d3eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3ef:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000d3f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3f6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000d3f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3fd:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
c000d400:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d404:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000d407:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d40b:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000d40e:	83 e0 8c             	and    eax,0xffffff8c
c000d411:	88 c2                	mov    dl,al
c000d413:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d417:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c000d41a:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000d420:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d424:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d427:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d42b:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000d430:	e8 33 36 00 00       	call   c0010a68 <tcp_timer_needed>
c000d435:	83 ec 0c             	sub    esp,0xc
c000d438:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d43c:	e8 c7 fc ff ff       	call   c000d108 <tcp_parseopt>
c000d441:	83 c4 10             	add    esp,0x10
c000d444:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d448:	8d 50 04             	lea    edx,[eax+0x4]
c000d44b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d44f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d452:	0f b7 c0             	movzx  eax,ax
c000d455:	83 ec 08             	sub    esp,0x8
c000d458:	52                   	push   edx
c000d459:	50                   	push   eax
c000d45a:	e8 ad e0 ff ff       	call   c000b50c <tcp_eff_send_mss>
c000d45f:	83 c4 10             	add    esp,0x10
c000d462:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d466:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d46a:	83 ec 08             	sub    esp,0x8
c000d46d:	6a 12                	push   0x12
c000d46f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d473:	e8 c4 22 00 00       	call   c000f73c <tcp_enqueue_flags>
c000d478:	83 c4 10             	add    esp,0x10
c000d47b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000d47f:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000d484:	85 c0                	test   eax,eax
c000d486:	74 18                	je     c000d4a0 <tcp_listen_input+0x1ec>
c000d488:	83 ec 08             	sub    esp,0x8
c000d48b:	6a 00                	push   0x0
c000d48d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d491:	e8 9e db ff ff       	call   c000b034 <tcp_abandon>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000d49d:	eb 19                	jmp    c000d4b8 <tcp_listen_input+0x204>
c000d49f:	90                   	nop
c000d4a0:	83 ec 0c             	sub    esp,0xc
c000d4a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d4a7:	e8 2c 29 00 00       	call   c000fdd8 <tcp_output>
c000d4ac:	83 c4 10             	add    esp,0x10
c000d4af:	eb 07                	jmp    c000d4b8 <tcp_listen_input+0x204>
c000d4b1:	8d 76 00             	lea    esi,[esi+0x0]
c000d4b4:	b0 00                	mov    al,0x0
c000d4b6:	66 90                	xchg   ax,ax
c000d4b8:	83 c4 18             	add    esp,0x18
c000d4bb:	5b                   	pop    ebx
c000d4bc:	c3                   	ret    
c000d4bd:	8d 76 00             	lea    esi,[esi+0x0]

c000d4c0 <tcp_process>:
c000d4c0:	53                   	push   ebx
c000d4c1:	83 ec 18             	sub    esp,0x18
c000d4c4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000d4c9:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000d4ce:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d4d3:	0f b6 c0             	movzx  eax,al
c000d4d6:	83 e0 04             	and    eax,0x4
c000d4d9:	0f 84 bd 00 00 00    	je     c000d59c <tcp_process+0xdc>
c000d4df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d4e6:	83 f8 02             	cmp    eax,0x2
c000d4e9:	75 19                	jne    c000d504 <tcp_process+0x44>
c000d4eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4ef:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000d4f2:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d4f7:	39 c2                	cmp    edx,eax
c000d4f9:	75 45                	jne    c000d540 <tcp_process+0x80>
c000d4fb:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d500:	eb 3e                	jmp    c000d540 <tcp_process+0x80>
c000d502:	66 90                	xchg   ax,ax
c000d504:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d50a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d50e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d511:	29 c2                	sub    edx,eax
c000d513:	89 d0                	mov    eax,edx
c000d515:	78 29                	js     c000d540 <tcp_process+0x80>
c000d517:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d51d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d521:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d524:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d528:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d52b:	0f b7 c0             	movzx  eax,ax
c000d52e:	01 c8                	add    eax,ecx
c000d530:	29 c2                	sub    edx,eax
c000d532:	89 d0                	mov    eax,edx
c000d534:	85 c0                	test   eax,eax
c000d536:	7f 08                	jg     c000d540 <tcp_process+0x80>
c000d538:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d53d:	8d 76 00             	lea    esi,[esi+0x0]
c000d540:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000d545:	85 c0                	test   eax,eax
c000d547:	74 4b                	je     c000d594 <tcp_process+0xd4>
c000d549:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d54d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d550:	85 c0                	test   eax,eax
c000d552:	75 18                	jne    c000d56c <tcp_process+0xac>
c000d554:	83 ec 08             	sub    esp,0x8
c000d557:	68 90 03 03 c0       	push   0xc0030390
c000d55c:	68 46 f9 02 c0       	push   0xc002f946
c000d561:	e8 76 25 01 00       	call   c001fadc <CPrintf>
c000d566:	83 c4 10             	add    esp,0x10
c000d569:	8d 76 00             	lea    esi,[esi+0x0]
c000d56c:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000d571:	83 c8 08             	or     eax,0x8
c000d574:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000d579:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d57d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d580:	83 e0 fe             	and    eax,0xfffffffe
c000d583:	88 c2                	mov    dl,al
c000d585:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d589:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d58c:	b0 f5                	mov    al,0xf5
c000d58e:	e9 bd 08 00 00       	jmp    c000de50 <tcp_process+0x990>
c000d593:	90                   	nop
c000d594:	b0 00                	mov    al,0x0
c000d596:	e9 b5 08 00 00       	jmp    c000de50 <tcp_process+0x990>
c000d59b:	90                   	nop
c000d59c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d5a1:	0f b6 c0             	movzx  eax,al
c000d5a4:	83 e0 02             	and    eax,0x2
c000d5a7:	74 33                	je     c000d5dc <tcp_process+0x11c>
c000d5a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5ad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d5b0:	83 f8 02             	cmp    eax,0x2
c000d5b3:	74 27                	je     c000d5dc <tcp_process+0x11c>
c000d5b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d5bc:	83 f8 03             	cmp    eax,0x3
c000d5bf:	74 1b                	je     c000d5dc <tcp_process+0x11c>
c000d5c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5c5:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d5c8:	83 c8 02             	or     eax,0x2
c000d5cb:	88 c2                	mov    dl,al
c000d5cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5d1:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d5d4:	b0 00                	mov    al,0x0
c000d5d6:	e9 75 08 00 00       	jmp    c000de50 <tcp_process+0x990>
c000d5db:	90                   	nop
c000d5dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5e0:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d5e3:	0f b6 c0             	movzx  eax,al
c000d5e6:	83 e0 10             	and    eax,0x10
c000d5e9:	75 0d                	jne    c000d5f8 <tcp_process+0x138>
c000d5eb:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000d5f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5f5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000d5f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5fc:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000d603:	83 ec 0c             	sub    esp,0xc
c000d606:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d60a:	e8 f9 fa ff ff       	call   c000d108 <tcp_parseopt>
c000d60f:	83 c4 10             	add    esp,0x10
c000d612:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d616:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d619:	83 f8 09             	cmp    eax,0x9
c000d61c:	0f 87 0a 08 00 00    	ja     c000de2c <tcp_process+0x96c>
c000d622:	8b 04 85 38 05 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfac8]
c000d629:	ff e0                	jmp    eax
c000d62b:	90                   	nop
c000d62c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d631:	0f b6 c0             	movzx  eax,al
c000d634:	83 e0 10             	and    eax,0x10
c000d637:	0f 84 ff 01 00 00    	je     c000d83c <tcp_process+0x37c>
c000d63d:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d642:	0f b6 c0             	movzx  eax,al
c000d645:	83 e0 02             	and    eax,0x2
c000d648:	0f 84 ee 01 00 00    	je     c000d83c <tcp_process+0x37c>
c000d64e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d652:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d655:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d658:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d65b:	83 ec 0c             	sub    esp,0xc
c000d65e:	50                   	push   eax
c000d65f:	e8 a8 35 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000d664:	83 c4 10             	add    esp,0x10
c000d667:	8d 50 01             	lea    edx,[eax+0x1]
c000d66a:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d66f:	39 c2                	cmp    edx,eax
c000d671:	0f 85 c5 01 00 00    	jne    c000d83c <tcp_process+0x37c>
c000d677:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d67b:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000d67f:	83 c0 01             	add    eax,0x1
c000d682:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d686:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000d68a:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d68f:	8d 50 01             	lea    edx,[eax+0x1]
c000d692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d696:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d699:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d69d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d6a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6a4:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d6a7:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d6ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6b1:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000d6b4:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d6b9:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000d6bd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d6c1:	66 89 42 60          	mov    WORD PTR [edx+0x60],ax
c000d6c5:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d6ca:	8d 50 ff             	lea    edx,[eax-0x1]
c000d6cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6d1:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d6d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6d8:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d6df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6e3:	8d 50 04             	lea    edx,[eax+0x4]
c000d6e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d6ed:	0f b7 c0             	movzx  eax,ax
c000d6f0:	83 ec 08             	sub    esp,0x8
c000d6f3:	52                   	push   edx
c000d6f4:	50                   	push   eax
c000d6f5:	e8 12 de ff ff       	call   c000b50c <tcp_eff_send_mss>
c000d6fa:	83 c4 10             	add    esp,0x10
c000d6fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d701:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d705:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d709:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d70c:	89 c2                	mov    edx,eax
c000d70e:	c1 e2 02             	shl    edx,0x2
c000d711:	01 d0                	add    eax,edx
c000d713:	d1 e0                	shl    eax,1
c000d715:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d719:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000d71d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d721:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000d725:	0f b7 c0             	movzx  eax,ax
c000d728:	83 f8 01             	cmp    eax,0x1
c000d72b:	75 0b                	jne    c000d738 <tcp_process+0x278>
c000d72d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d731:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d734:	d1 e0                	shl    eax,1
c000d736:	eb 08                	jmp    c000d740 <tcp_process+0x280>
c000d738:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d73c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d73f:	90                   	nop
c000d740:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d744:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000d748:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d74c:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000d74f:	0f b7 c0             	movzx  eax,ax
c000d752:	85 c0                	test   eax,eax
c000d754:	75 16                	jne    c000d76c <tcp_process+0x2ac>
c000d756:	83 ec 08             	sub    esp,0x8
c000d759:	68 f3 04 03 c0       	push   0xc00304f3
c000d75e:	68 46 f9 02 c0       	push   0xc002f946
c000d763:	e8 74 23 01 00       	call   c001fadc <CPrintf>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	90                   	nop
c000d76c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d770:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000d773:	83 e8 01             	sub    eax,0x1
c000d776:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d77a:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000d77e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d782:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d785:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d78d:	8b 10                	mov    edx,DWORD PTR [eax]
c000d78f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d793:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000d796:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d79a:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d79d:	85 c0                	test   eax,eax
c000d79f:	75 0f                	jne    c000d7b0 <tcp_process+0x2f0>
c000d7a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7a5:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000d7ab:	eb 17                	jmp    c000d7c4 <tcp_process+0x304>
c000d7ad:	8d 76 00             	lea    esi,[esi+0x0]
c000d7b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7b4:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000d7ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7be:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000d7c2:	66 90                	xchg   ax,ax
c000d7c4:	83 ec 0c             	sub    esp,0xc
c000d7c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7cb:	e8 50 c7 ff ff       	call   c0009f20 <tcp_seg_free>
c000d7d0:	83 c4 10             	add    esp,0x10
c000d7d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7d7:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000d7dd:	85 c0                	test   eax,eax
c000d7df:	74 27                	je     c000d808 <tcp_process+0x348>
c000d7e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7e5:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000d7eb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d7ef:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000d7f2:	83 ec 04             	sub    esp,0x4
c000d7f5:	6a 00                	push   0x0
c000d7f7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d7fb:	52                   	push   edx
c000d7fc:	ff d0                	call   eax
c000d7fe:	83 c4 10             	add    esp,0x10
c000d801:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d805:	eb 09                	jmp    c000d810 <tcp_process+0x350>
c000d807:	90                   	nop
c000d808:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000d80d:	8d 76 00             	lea    esi,[esi+0x0]
c000d810:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000d815:	83 f8 f6             	cmp    eax,0xfffffff6
c000d818:	75 0a                	jne    c000d824 <tcp_process+0x364>
c000d81a:	b0 f6                	mov    al,0xf6
c000d81c:	e9 2f 06 00 00       	jmp    c000de50 <tcp_process+0x990>
c000d821:	8d 76 00             	lea    esi,[esi+0x0]
c000d824:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d828:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d82b:	83 c8 02             	or     eax,0x2
c000d82e:	88 c2                	mov    dl,al
c000d830:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d834:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d837:	e9 f4 05 00 00       	jmp    c000de30 <tcp_process+0x970>
c000d83c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d841:	0f b6 c0             	movzx  eax,al
c000d844:	83 e0 10             	and    eax,0x10
c000d847:	0f 84 e3 05 00 00    	je     c000de30 <tcp_process+0x970>
c000d84d:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d852:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d855:	0f b7 c8             	movzx  ecx,ax
c000d858:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d85d:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000d861:	0f b7 d0             	movzx  edx,ax
c000d864:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d86a:	0f b7 d8             	movzx  ebx,ax
c000d86d:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d872:	01 c3                	add    ebx,eax
c000d874:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d879:	83 ec 08             	sub    esp,0x8
c000d87c:	51                   	push   ecx
c000d87d:	52                   	push   edx
c000d87e:	68 90 68 03 c0       	push   0xc0036890
c000d883:	68 98 68 03 c0       	push   0xc0036898
c000d888:	53                   	push   ebx
c000d889:	50                   	push   eax
c000d88a:	e8 d5 29 00 00       	call   c0010264 <tcp_rst>
c000d88f:	83 c4 20             	add    esp,0x20
c000d892:	e9 99 05 00 00       	jmp    c000de30 <tcp_process+0x970>
c000d897:	90                   	nop
c000d898:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d89d:	0f b6 c0             	movzx  eax,al
c000d8a0:	83 e0 10             	and    eax,0x10
c000d8a3:	0f 84 a7 01 00 00    	je     c000da50 <tcp_process+0x590>
c000d8a9:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d8af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8b3:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000d8b6:	29 c2                	sub    edx,eax
c000d8b8:	89 d0                	mov    eax,edx
c000d8ba:	83 e8 01             	sub    eax,0x1
c000d8bd:	0f 88 41 01 00 00    	js     c000da04 <tcp_process+0x544>
c000d8c3:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d8c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8cd:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000d8d0:	29 c2                	sub    edx,eax
c000d8d2:	89 d0                	mov    eax,edx
c000d8d4:	85 c0                	test   eax,eax
c000d8d6:	0f 8f 28 01 00 00    	jg     c000da04 <tcp_process+0x544>
c000d8dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8e0:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d8e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8eb:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000d8ee:	85 c0                	test   eax,eax
c000d8f0:	75 16                	jne    c000d908 <tcp_process+0x448>
c000d8f2:	83 ec 08             	sub    esp,0x8
c000d8f5:	68 09 05 03 c0       	push   0xc0030509
c000d8fa:	68 46 f9 02 c0       	push   0xc002f946
c000d8ff:	e8 d8 21 01 00       	call   c001fadc <CPrintf>
c000d904:	83 c4 10             	add    esp,0x10
c000d907:	90                   	nop
c000d908:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d90c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000d90f:	85 c0                	test   eax,eax
c000d911:	74 25                	je     c000d938 <tcp_process+0x478>
c000d913:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d917:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000d91a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d91e:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000d921:	83 ec 04             	sub    esp,0x4
c000d924:	6a 00                	push   0x0
c000d926:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d92a:	52                   	push   edx
c000d92b:	ff d0                	call   eax
c000d92d:	83 c4 10             	add    esp,0x10
c000d930:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d934:	eb 0a                	jmp    c000d940 <tcp_process+0x480>
c000d936:	66 90                	xchg   ax,ax
c000d938:	c6 44 24 0e f2       	mov    BYTE PTR [esp+0xe],0xf2
c000d93d:	8d 76 00             	lea    esi,[esi+0x0]
c000d940:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000d945:	85 c0                	test   eax,eax
c000d947:	74 23                	je     c000d96c <tcp_process+0x4ac>
c000d949:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000d94e:	83 f8 f6             	cmp    eax,0xfffffff6
c000d951:	74 11                	je     c000d964 <tcp_process+0x4a4>
c000d953:	83 ec 0c             	sub    esp,0xc
c000d956:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d95a:	e8 69 d8 ff ff       	call   c000b1c8 <tcp_abort>
c000d95f:	83 c4 10             	add    esp,0x10
c000d962:	66 90                	xchg   ax,ax
c000d964:	b0 f6                	mov    al,0xf6
c000d966:	e9 e5 04 00 00       	jmp    c000de50 <tcp_process+0x990>
c000d96b:	90                   	nop
c000d96c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d970:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000d974:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000d979:	83 ec 0c             	sub    esp,0xc
c000d97c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d980:	e8 e7 e0 ff ff       	call   c000ba6c <tcp_receive>
c000d985:	83 c4 10             	add    esp,0x10
c000d988:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d98c:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000d98f:	0f b7 c0             	movzx  eax,ax
c000d992:	85 c0                	test   eax,eax
c000d994:	74 12                	je     c000d9a8 <tcp_process+0x4e8>
c000d996:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d99a:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000d99d:	83 e8 01             	sub    eax,0x1
c000d9a0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d9a4:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000d9a8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d9ad:	83 f8 01             	cmp    eax,0x1
c000d9b0:	75 0e                	jne    c000d9c0 <tcp_process+0x500>
c000d9b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9b6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d9b9:	d1 e0                	shl    eax,1
c000d9bb:	eb 0b                	jmp    c000d9c8 <tcp_process+0x508>
c000d9bd:	8d 76 00             	lea    esi,[esi+0x0]
c000d9c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9c4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d9c7:	90                   	nop
c000d9c8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d9cc:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000d9d0:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000d9d5:	0f b6 c0             	movzx  eax,al
c000d9d8:	83 e0 20             	and    eax,0x20
c000d9db:	0f 84 ab 00 00 00    	je     c000da8c <tcp_process+0x5cc>
c000d9e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9e5:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d9e8:	83 c8 02             	or     eax,0x2
c000d9eb:	88 c2                	mov    dl,al
c000d9ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9f1:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d9f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9f8:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000d9ff:	e9 88 00 00 00       	jmp    c000da8c <tcp_process+0x5cc>
c000da04:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000da09:	66 8b 00             	mov    ax,WORD PTR [eax]
c000da0c:	0f b7 c8             	movzx  ecx,ax
c000da0f:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000da14:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000da18:	0f b7 d0             	movzx  edx,ax
c000da1b:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000da21:	0f b7 d8             	movzx  ebx,ax
c000da24:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000da29:	01 c3                	add    ebx,eax
c000da2b:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000da30:	83 ec 08             	sub    esp,0x8
c000da33:	51                   	push   ecx
c000da34:	52                   	push   edx
c000da35:	68 90 68 03 c0       	push   0xc0036890
c000da3a:	68 98 68 03 c0       	push   0xc0036898
c000da3f:	53                   	push   ebx
c000da40:	50                   	push   eax
c000da41:	e8 1e 28 00 00       	call   c0010264 <tcp_rst>
c000da46:	83 c4 20             	add    esp,0x20
c000da49:	e9 e6 03 00 00       	jmp    c000de34 <tcp_process+0x974>
c000da4e:	66 90                	xchg   ax,ax
c000da50:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000da55:	0f b6 c0             	movzx  eax,al
c000da58:	83 e0 02             	and    eax,0x2
c000da5b:	0f 84 d3 03 00 00    	je     c000de34 <tcp_process+0x974>
c000da61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da65:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000da68:	8d 50 ff             	lea    edx,[eax-0x1]
c000da6b:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000da70:	39 c2                	cmp    edx,eax
c000da72:	0f 85 bc 03 00 00    	jne    c000de34 <tcp_process+0x974>
c000da78:	83 ec 0c             	sub    esp,0xc
c000da7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da7f:	e8 e4 29 00 00       	call   c0010468 <tcp_rexmit>
c000da84:	83 c4 10             	add    esp,0x10
c000da87:	e9 a8 03 00 00       	jmp    c000de34 <tcp_process+0x974>
c000da8c:	90                   	nop
c000da8d:	e9 a2 03 00 00       	jmp    c000de34 <tcp_process+0x974>
c000da92:	66 90                	xchg   ax,ax
c000da94:	83 ec 0c             	sub    esp,0xc
c000da97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da9b:	e8 cc df ff ff       	call   c000ba6c <tcp_receive>
c000daa0:	83 c4 10             	add    esp,0x10
c000daa3:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000daa8:	0f b6 c0             	movzx  eax,al
c000daab:	83 e0 20             	and    eax,0x20
c000daae:	0f 84 84 03 00 00    	je     c000de38 <tcp_process+0x978>
c000dab4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dab8:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dabb:	83 c8 02             	or     eax,0x2
c000dabe:	88 c2                	mov    dl,al
c000dac0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dac4:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dac7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dacb:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000dad2:	e9 61 03 00 00       	jmp    c000de38 <tcp_process+0x978>
c000dad7:	90                   	nop
c000dad8:	83 ec 0c             	sub    esp,0xc
c000dadb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dadf:	e8 88 df ff ff       	call   c000ba6c <tcp_receive>
c000dae4:	83 c4 10             	add    esp,0x10
c000dae7:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000daec:	0f b6 c0             	movzx  eax,al
c000daef:	83 e0 20             	and    eax,0x20
c000daf2:	0f 84 08 01 00 00    	je     c000dc00 <tcp_process+0x740>
c000daf8:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dafd:	0f b6 c0             	movzx  eax,al
c000db00:	83 e0 10             	and    eax,0x10
c000db03:	0f 84 d3 00 00 00    	je     c000dbdc <tcp_process+0x71c>
c000db09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db0d:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000db10:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000db15:	39 c2                	cmp    edx,eax
c000db17:	0f 85 bf 00 00 00    	jne    c000dbdc <tcp_process+0x71c>
c000db1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db21:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000db24:	83 c8 02             	or     eax,0x2
c000db27:	88 c2                	mov    dl,al
c000db29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db2d:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000db30:	83 ec 0c             	sub    esp,0xc
c000db33:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db37:	e8 48 c5 ff ff       	call   c000a084 <tcp_pcb_purge>
c000db3c:	83 c4 10             	add    esp,0x10
c000db3f:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000db44:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000db48:	75 12                	jne    c000db5c <tcp_process+0x69c>
c000db4a:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000db4f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000db52:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000db57:	eb 4b                	jmp    c000dba4 <tcp_process+0x6e4>
c000db59:	8d 76 00             	lea    esi,[esi+0x0]
c000db5c:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000db61:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000db66:	eb 30                	jmp    c000db98 <tcp_process+0x6d8>
c000db68:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000db6d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000db70:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000db74:	75 12                	jne    c000db88 <tcp_process+0x6c8>
c000db76:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000db7b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000db7f:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000db82:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000db85:	eb 1d                	jmp    c000dba4 <tcp_process+0x6e4>
c000db87:	90                   	nop
c000db88:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000db8d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000db90:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000db95:	8d 76 00             	lea    esi,[esi+0x0]
c000db98:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000db9d:	85 c0                	test   eax,eax
c000db9f:	75 c7                	jne    c000db68 <tcp_process+0x6a8>
c000dba1:	8d 76 00             	lea    esi,[esi+0x0]
c000dba4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dba8:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000dbaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbb3:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000dbba:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000dbc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbc4:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dbc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbcb:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000dbd0:	e8 93 2e 00 00       	call   c0010a68 <tcp_timer_needed>
c000dbd5:	e9 62 02 00 00       	jmp    c000de3c <tcp_process+0x97c>
c000dbda:	66 90                	xchg   ax,ax
c000dbdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbe0:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dbe3:	83 c8 02             	or     eax,0x2
c000dbe6:	88 c2                	mov    dl,al
c000dbe8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbec:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dbef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbf3:	c7 40 10 08 00 00 00 	mov    DWORD PTR [eax+0x10],0x8
c000dbfa:	e9 3d 02 00 00       	jmp    c000de3c <tcp_process+0x97c>
c000dbff:	90                   	nop
c000dc00:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dc05:	0f b6 c0             	movzx  eax,al
c000dc08:	83 e0 10             	and    eax,0x10
c000dc0b:	0f 84 2b 02 00 00    	je     c000de3c <tcp_process+0x97c>
c000dc11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc15:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000dc18:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dc1d:	39 c2                	cmp    edx,eax
c000dc1f:	0f 85 17 02 00 00    	jne    c000de3c <tcp_process+0x97c>
c000dc25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc29:	c7 40 10 06 00 00 00 	mov    DWORD PTR [eax+0x10],0x6
c000dc30:	e9 07 02 00 00       	jmp    c000de3c <tcp_process+0x97c>
c000dc35:	8d 76 00             	lea    esi,[esi+0x0]
c000dc38:	83 ec 0c             	sub    esp,0xc
c000dc3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dc3f:	e8 28 de ff ff       	call   c000ba6c <tcp_receive>
c000dc44:	83 c4 10             	add    esp,0x10
c000dc47:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dc4c:	0f b6 c0             	movzx  eax,al
c000dc4f:	83 e0 20             	and    eax,0x20
c000dc52:	0f 84 e8 01 00 00    	je     c000de40 <tcp_process+0x980>
c000dc58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc5c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dc5f:	83 c8 02             	or     eax,0x2
c000dc62:	88 c2                	mov    dl,al
c000dc64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc68:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dc6b:	83 ec 0c             	sub    esp,0xc
c000dc6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dc72:	e8 0d c4 ff ff       	call   c000a084 <tcp_pcb_purge>
c000dc77:	83 c4 10             	add    esp,0x10
c000dc7a:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dc7f:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dc83:	75 0f                	jne    c000dc94 <tcp_process+0x7d4>
c000dc85:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dc8a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dc8d:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000dc92:	eb 48                	jmp    c000dcdc <tcp_process+0x81c>
c000dc94:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dc99:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dc9e:	eb 30                	jmp    c000dcd0 <tcp_process+0x810>
c000dca0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dca5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dca8:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dcac:	75 12                	jne    c000dcc0 <tcp_process+0x800>
c000dcae:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dcb3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dcb7:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000dcba:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dcbd:	eb 1d                	jmp    c000dcdc <tcp_process+0x81c>
c000dcbf:	90                   	nop
c000dcc0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dcc5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dcc8:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dccd:	8d 76 00             	lea    esi,[esi+0x0]
c000dcd0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dcd5:	85 c0                	test   eax,eax
c000dcd7:	75 c7                	jne    c000dca0 <tcp_process+0x7e0>
c000dcd9:	8d 76 00             	lea    esi,[esi+0x0]
c000dcdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dce0:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000dce7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dceb:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000dcf2:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000dcf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcfc:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dcff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd03:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000dd08:	e8 5b 2d 00 00       	call   c0010a68 <tcp_timer_needed>
c000dd0d:	e9 2e 01 00 00       	jmp    c000de40 <tcp_process+0x980>
c000dd12:	66 90                	xchg   ax,ax
c000dd14:	83 ec 0c             	sub    esp,0xc
c000dd17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd1b:	e8 4c dd ff ff       	call   c000ba6c <tcp_receive>
c000dd20:	83 c4 10             	add    esp,0x10
c000dd23:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dd28:	0f b6 c0             	movzx  eax,al
c000dd2b:	83 e0 10             	and    eax,0x10
c000dd2e:	0f 84 10 01 00 00    	je     c000de44 <tcp_process+0x984>
c000dd34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd38:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000dd3b:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dd40:	39 c2                	cmp    edx,eax
c000dd42:	0f 85 fc 00 00 00    	jne    c000de44 <tcp_process+0x984>
c000dd48:	83 ec 0c             	sub    esp,0xc
c000dd4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd4f:	e8 30 c3 ff ff       	call   c000a084 <tcp_pcb_purge>
c000dd54:	83 c4 10             	add    esp,0x10
c000dd57:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dd5c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dd60:	75 12                	jne    c000dd74 <tcp_process+0x8b4>
c000dd62:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dd67:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dd6a:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000dd6f:	eb 4b                	jmp    c000ddbc <tcp_process+0x8fc>
c000dd71:	8d 76 00             	lea    esi,[esi+0x0]
c000dd74:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dd79:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dd7e:	eb 30                	jmp    c000ddb0 <tcp_process+0x8f0>
c000dd80:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dd85:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dd88:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dd8c:	75 12                	jne    c000dda0 <tcp_process+0x8e0>
c000dd8e:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dd93:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dd97:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000dd9a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dd9d:	eb 1d                	jmp    c000ddbc <tcp_process+0x8fc>
c000dd9f:	90                   	nop
c000dda0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dda5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dda8:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ddad:	8d 76 00             	lea    esi,[esi+0x0]
c000ddb0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ddb5:	85 c0                	test   eax,eax
c000ddb7:	75 c7                	jne    c000dd80 <tcp_process+0x8c0>
c000ddb9:	8d 76 00             	lea    esi,[esi+0x0]
c000ddbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddc0:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ddc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddcb:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000ddd2:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000ddd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dddc:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dddf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dde3:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000dde8:	e8 7b 2c 00 00       	call   c0010a68 <tcp_timer_needed>
c000dded:	eb 55                	jmp    c000de44 <tcp_process+0x984>
c000ddef:	90                   	nop
c000ddf0:	83 ec 0c             	sub    esp,0xc
c000ddf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddf7:	e8 70 dc ff ff       	call   c000ba6c <tcp_receive>
c000ddfc:	83 c4 10             	add    esp,0x10
c000ddff:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000de04:	0f b6 c0             	movzx  eax,al
c000de07:	83 e0 10             	and    eax,0x10
c000de0a:	74 3c                	je     c000de48 <tcp_process+0x988>
c000de0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de10:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000de13:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000de18:	39 c2                	cmp    edx,eax
c000de1a:	75 2c                	jne    c000de48 <tcp_process+0x988>
c000de1c:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000de21:	83 c8 10             	or     eax,0x10
c000de24:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000de29:	eb 1d                	jmp    c000de48 <tcp_process+0x988>
c000de2b:	90                   	nop
c000de2c:	90                   	nop
c000de2d:	eb 1d                	jmp    c000de4c <tcp_process+0x98c>
c000de2f:	90                   	nop
c000de30:	90                   	nop
c000de31:	eb 19                	jmp    c000de4c <tcp_process+0x98c>
c000de33:	90                   	nop
c000de34:	90                   	nop
c000de35:	eb 15                	jmp    c000de4c <tcp_process+0x98c>
c000de37:	90                   	nop
c000de38:	90                   	nop
c000de39:	eb 11                	jmp    c000de4c <tcp_process+0x98c>
c000de3b:	90                   	nop
c000de3c:	90                   	nop
c000de3d:	eb 0d                	jmp    c000de4c <tcp_process+0x98c>
c000de3f:	90                   	nop
c000de40:	90                   	nop
c000de41:	eb 09                	jmp    c000de4c <tcp_process+0x98c>
c000de43:	90                   	nop
c000de44:	90                   	nop
c000de45:	eb 05                	jmp    c000de4c <tcp_process+0x98c>
c000de47:	90                   	nop
c000de48:	90                   	nop
c000de49:	8d 76 00             	lea    esi,[esi+0x0]
c000de4c:	b0 00                	mov    al,0x0
c000de4e:	66 90                	xchg   ax,ax
c000de50:	83 c4 18             	add    esp,0x18
c000de53:	5b                   	pop    ebx
c000de54:	c3                   	ret    
c000de55:	8d 76 00             	lea    esi,[esi+0x0]

c000de58 <tcp_input>:
c000de58:	53                   	push   ebx
c000de59:	83 ec 18             	sub    esp,0x18
c000de5c:	66 a1 b2 67 03 c0    	mov    ax,ds:0xc00367b2
c000de62:	83 c0 01             	add    eax,0x1
c000de65:	66 a3 b2 67 03 c0    	mov    ds:0xc00367b2,ax
c000de6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de6f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000de72:	a3 b8 a8 03 c0       	mov    ds:0xc003a8b8,eax
c000de77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de7b:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000de7e:	a1 b8 a8 03 c0       	mov    eax,ds:0xc003a8b8
c000de83:	66 8b 00             	mov    ax,WORD PTR [eax]
c000de86:	0f b7 c0             	movzx  eax,ax
c000de89:	83 ec 0c             	sub    esp,0xc
c000de8c:	50                   	push   eax
c000de8d:	e8 56 2d ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000de92:	83 c4 10             	add    esp,0x10
c000de95:	0f b7 c0             	movzx  eax,ax
c000de98:	c1 e8 08             	shr    eax,0x8
c000de9b:	0f b7 c0             	movzx  eax,ax
c000de9e:	83 e0 0f             	and    eax,0xf
c000dea1:	c1 e0 02             	shl    eax,0x2
c000dea4:	01 d8                	add    eax,ebx
c000dea6:	a3 bc a8 03 c0       	mov    ds:0xc003a8bc,eax
c000deab:	a1 b8 a8 03 c0       	mov    eax,ds:0xc003a8b8
c000deb0:	66 8b 00             	mov    ax,WORD PTR [eax]
c000deb3:	0f b7 c0             	movzx  eax,ax
c000deb6:	83 ec 0c             	sub    esp,0xc
c000deb9:	50                   	push   eax
c000deba:	e8 29 2d ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000debf:	83 c4 10             	add    esp,0x10
c000dec2:	0f b7 c0             	movzx  eax,ax
c000dec5:	c1 e8 08             	shr    eax,0x8
c000dec8:	83 e0 0f             	and    eax,0xf
c000decb:	c1 e0 02             	shl    eax,0x2
c000dece:	f7 d8                	neg    eax
c000ded0:	98                   	cwde   
c000ded1:	83 ec 08             	sub    esp,0x8
c000ded4:	50                   	push   eax
c000ded5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ded9:	e8 2e a2 ff ff       	call   c000810c <pbuf_header>
c000dede:	83 c4 10             	add    esp,0x10
c000dee1:	0f b6 c0             	movzx  eax,al
c000dee4:	85 c0                	test   eax,eax
c000dee6:	75 10                	jne    c000def8 <tcp_input+0xa0>
c000dee8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000deec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000deef:	0f b7 c0             	movzx  eax,ax
c000def2:	83 f8 13             	cmp    eax,0x13
c000def5:	77 35                	ja     c000df2c <tcp_input+0xd4>
c000def7:	90                   	nop
c000def8:	66 a1 ba 67 03 c0    	mov    ax,ds:0xc00367ba
c000defe:	83 c0 01             	add    eax,0x1
c000df01:	66 a3 ba 67 03 c0    	mov    ds:0xc00367ba,ax
c000df07:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000df0d:	83 c0 01             	add    eax,0x1
c000df10:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000df16:	83 ec 0c             	sub    esp,0xc
c000df19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df1d:	e8 86 a3 ff ff       	call   c00082a8 <pbuf_free>
c000df22:	83 c4 10             	add    esp,0x10
c000df25:	e9 fa 09 00 00       	jmp    c000e924 <tcp_input+0xacc>
c000df2a:	66 90                	xchg   ax,ax
c000df2c:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000df31:	83 ec 08             	sub    esp,0x8
c000df34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df38:	50                   	push   eax
c000df39:	e8 5e 5e 00 00       	call   c0013d9c <ip4_addr_isbroadcast>
c000df3e:	83 c4 10             	add    esp,0x10
c000df41:	0f b6 c0             	movzx  eax,al
c000df44:	85 c0                	test   eax,eax
c000df46:	75 14                	jne    c000df5c <tcp_input+0x104>
c000df48:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000df4d:	25 f0 00 00 00       	and    eax,0xf0
c000df52:	3d e0 00 00 00       	cmp    eax,0xe0
c000df57:	75 37                	jne    c000df90 <tcp_input+0x138>
c000df59:	8d 76 00             	lea    esi,[esi+0x0]
c000df5c:	66 a1 c0 67 03 c0    	mov    ax,ds:0xc00367c0
c000df62:	83 c0 01             	add    eax,0x1
c000df65:	66 a3 c0 67 03 c0    	mov    ds:0xc00367c0,ax
c000df6b:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000df71:	83 c0 01             	add    eax,0x1
c000df74:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000df7a:	83 ec 0c             	sub    esp,0xc
c000df7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df81:	e8 22 a3 ff ff       	call   c00082a8 <pbuf_free>
c000df86:	83 c4 10             	add    esp,0x10
c000df89:	e9 96 09 00 00       	jmp    c000e924 <tcp_input+0xacc>
c000df8e:	66 90                	xchg   ax,ax
c000df90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df94:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000df97:	0f b7 c0             	movzx  eax,ax
c000df9a:	83 ec 0c             	sub    esp,0xc
c000df9d:	50                   	push   eax
c000df9e:	6a 06                	push   0x6
c000dfa0:	68 98 68 03 c0       	push   0xc0036898
c000dfa5:	68 90 68 03 c0       	push   0xc0036890
c000dfaa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dfae:	e8 11 51 00 00       	call   c00130c4 <inet_chksum_pseudo>
c000dfb3:	83 c4 20             	add    esp,0x20
c000dfb6:	0f b7 c0             	movzx  eax,ax
c000dfb9:	85 c0                	test   eax,eax
c000dfbb:	74 33                	je     c000dff0 <tcp_input+0x198>
c000dfbd:	66 a1 b8 67 03 c0    	mov    ax,ds:0xc00367b8
c000dfc3:	83 c0 01             	add    eax,0x1
c000dfc6:	66 a3 b8 67 03 c0    	mov    ds:0xc00367b8,ax
c000dfcc:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000dfd2:	83 c0 01             	add    eax,0x1
c000dfd5:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000dfdb:	83 ec 0c             	sub    esp,0xc
c000dfde:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dfe2:	e8 c1 a2 ff ff       	call   c00082a8 <pbuf_free>
c000dfe7:	83 c4 10             	add    esp,0x10
c000dfea:	e9 35 09 00 00       	jmp    c000e924 <tcp_input+0xacc>
c000dfef:	90                   	nop
c000dff0:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000dff5:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000dff9:	0f b7 c0             	movzx  eax,ax
c000dffc:	83 ec 0c             	sub    esp,0xc
c000dfff:	50                   	push   eax
c000e000:	e8 e3 2b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e005:	83 c4 10             	add    esp,0x10
c000e008:	0f b7 c0             	movzx  eax,ax
c000e00b:	c1 e8 0c             	shr    eax,0xc
c000e00e:	88 44 24 02          	mov    BYTE PTR [esp+0x2],al
c000e012:	0f b6 44 24 02       	movzx  eax,BYTE PTR [esp+0x2]
c000e017:	ba 00 00 00 00       	mov    edx,0x0
c000e01c:	89 d1                	mov    ecx,edx
c000e01e:	29 c1                	sub    ecx,eax
c000e020:	89 c8                	mov    eax,ecx
c000e022:	c1 e0 02             	shl    eax,0x2
c000e025:	98                   	cwde   
c000e026:	83 ec 08             	sub    esp,0x8
c000e029:	50                   	push   eax
c000e02a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e02e:	e8 d9 a0 ff ff       	call   c000810c <pbuf_header>
c000e033:	83 c4 10             	add    esp,0x10
c000e036:	0f b6 c0             	movzx  eax,al
c000e039:	85 c0                	test   eax,eax
c000e03b:	74 33                	je     c000e070 <tcp_input+0x218>
c000e03d:	66 a1 ba 67 03 c0    	mov    ax,ds:0xc00367ba
c000e043:	83 c0 01             	add    eax,0x1
c000e046:	66 a3 ba 67 03 c0    	mov    ds:0xc00367ba,ax
c000e04c:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e052:	83 c0 01             	add    eax,0x1
c000e055:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e05b:	83 ec 0c             	sub    esp,0xc
c000e05e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e062:	e8 41 a2 ff ff       	call   c00082a8 <pbuf_free>
c000e067:	83 c4 10             	add    esp,0x10
c000e06a:	e9 b5 08 00 00       	jmp    c000e924 <tcp_input+0xacc>
c000e06f:	90                   	nop
c000e070:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e075:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e078:	0f b7 c0             	movzx  eax,ax
c000e07b:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e081:	83 ec 0c             	sub    esp,0xc
c000e084:	50                   	push   eax
c000e085:	e8 5e 2b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e08a:	83 c4 10             	add    esp,0x10
c000e08d:	66 89 03             	mov    WORD PTR [ebx],ax
c000e090:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e095:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e099:	0f b7 c0             	movzx  eax,ax
c000e09c:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e0a2:	83 ec 0c             	sub    esp,0xc
c000e0a5:	50                   	push   eax
c000e0a6:	e8 3d 2b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e0ab:	83 c4 10             	add    esp,0x10
c000e0ae:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000e0b2:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e0b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e0ba:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e0c0:	83 ec 0c             	sub    esp,0xc
c000e0c3:	50                   	push   eax
c000e0c4:	e8 43 2b ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000e0c9:	83 c4 10             	add    esp,0x10
c000e0cc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e0cf:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e0d2:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000e0d7:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e0dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e0df:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e0e5:	83 ec 0c             	sub    esp,0xc
c000e0e8:	50                   	push   eax
c000e0e9:	e8 1e 2b ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000e0ee:	83 c4 10             	add    esp,0x10
c000e0f1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000e0f4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e0f7:	a3 b0 a8 03 c0       	mov    ds:0xc003a8b0,eax
c000e0fc:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e101:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000e105:	0f b7 c0             	movzx  eax,ax
c000e108:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e10e:	83 ec 0c             	sub    esp,0xc
c000e111:	50                   	push   eax
c000e112:	e8 d1 2a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e117:	83 c4 10             	add    esp,0x10
c000e11a:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000e11e:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e123:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e127:	0f b7 c0             	movzx  eax,ax
c000e12a:	83 ec 0c             	sub    esp,0xc
c000e12d:	50                   	push   eax
c000e12e:	e8 b5 2a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e133:	83 c4 10             	add    esp,0x10
c000e136:	83 e0 3f             	and    eax,0x3f
c000e139:	a2 ac a8 03 c0       	mov    ds:0xc003a8ac,al
c000e13e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e142:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000e145:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e14a:	0f b6 c0             	movzx  eax,al
c000e14d:	83 e0 03             	and    eax,0x3
c000e150:	0f 95 c0             	setne  al
c000e153:	0f b6 c0             	movzx  eax,al
c000e156:	01 d0                	add    eax,edx
c000e158:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000e15e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e166:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000e16b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e16f:	e9 50 01 00 00       	jmp    c000e2c4 <tcp_input+0x46c>
c000e174:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e178:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e17b:	85 c0                	test   eax,eax
c000e17d:	75 15                	jne    c000e194 <tcp_input+0x33c>
c000e17f:	83 ec 08             	sub    esp,0x8
c000e182:	68 b0 03 03 c0       	push   0xc00303b0
c000e187:	68 46 f9 02 c0       	push   0xc002f946
c000e18c:	e8 4b 19 01 00       	call   c001fadc <CPrintf>
c000e191:	83 c4 10             	add    esp,0x10
c000e194:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e198:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e19b:	83 f8 0a             	cmp    eax,0xa
c000e19e:	75 18                	jne    c000e1b8 <tcp_input+0x360>
c000e1a0:	83 ec 08             	sub    esp,0x8
c000e1a3:	68 d8 03 03 c0       	push   0xc00303d8
c000e1a8:	68 46 f9 02 c0       	push   0xc002f946
c000e1ad:	e8 2a 19 01 00       	call   c001fadc <CPrintf>
c000e1b2:	83 c4 10             	add    esp,0x10
c000e1b5:	8d 76 00             	lea    esi,[esi+0x0]
c000e1b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e1bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e1bf:	83 f8 01             	cmp    eax,0x1
c000e1c2:	75 18                	jne    c000e1dc <tcp_input+0x384>
c000e1c4:	83 ec 08             	sub    esp,0x8
c000e1c7:	68 04 04 03 c0       	push   0xc0030404
c000e1cc:	68 46 f9 02 c0       	push   0xc002f946
c000e1d1:	e8 06 19 01 00       	call   c001fadc <CPrintf>
c000e1d6:	83 c4 10             	add    esp,0x10
c000e1d9:	8d 76 00             	lea    esi,[esi+0x0]
c000e1dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e1e0:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e1e4:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e1e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e1ec:	0f b7 d2             	movzx  edx,dx
c000e1ef:	0f b7 c0             	movzx  eax,ax
c000e1f2:	39 c2                	cmp    edx,eax
c000e1f4:	0f 85 b6 00 00 00    	jne    c000e2b0 <tcp_input+0x458>
c000e1fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e1fe:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e201:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e206:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e20a:	0f b7 d2             	movzx  edx,dx
c000e20d:	0f b7 c0             	movzx  eax,ax
c000e210:	39 c2                	cmp    edx,eax
c000e212:	0f 85 98 00 00 00    	jne    c000e2b0 <tcp_input+0x458>
c000e218:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e21c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e21f:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c000e224:	39 c2                	cmp    edx,eax
c000e226:	0f 85 84 00 00 00    	jne    c000e2b0 <tcp_input+0x458>
c000e22c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e230:	8b 10                	mov    edx,DWORD PTR [eax]
c000e232:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e237:	39 c2                	cmp    edx,eax
c000e239:	75 75                	jne    c000e2b0 <tcp_input+0x458>
c000e23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e23f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e242:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e246:	75 18                	jne    c000e260 <tcp_input+0x408>
c000e248:	83 ec 08             	sub    esp,0x8
c000e24b:	68 2c 04 03 c0       	push   0xc003042c
c000e250:	68 46 f9 02 c0       	push   0xc002f946
c000e255:	e8 82 18 01 00       	call   c001fadc <CPrintf>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	8d 76 00             	lea    esi,[esi+0x0]
c000e260:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e265:	74 25                	je     c000e28c <tcp_input+0x434>
c000e267:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e26b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e26e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e272:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e275:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000e27b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e27f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e282:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e286:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000e28b:	90                   	nop
c000e28c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e290:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e293:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e297:	75 3b                	jne    c000e2d4 <tcp_input+0x47c>
c000e299:	83 ec 08             	sub    esp,0x8
c000e29c:	68 58 04 03 c0       	push   0xc0030458
c000e2a1:	68 46 f9 02 c0       	push   0xc002f946
c000e2a6:	e8 31 18 01 00       	call   c001fadc <CPrintf>
c000e2ab:	83 c4 10             	add    esp,0x10
c000e2ae:	eb 24                	jmp    c000e2d4 <tcp_input+0x47c>
c000e2b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e2b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2bc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e2bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e2c3:	90                   	nop
c000e2c4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e2c9:	0f 85 a5 fe ff ff    	jne    c000e174 <tcp_input+0x31c>
c000e2cf:	eb 07                	jmp    c000e2d8 <tcp_input+0x480>
c000e2d1:	8d 76 00             	lea    esi,[esi+0x0]
c000e2d4:	90                   	nop
c000e2d5:	8d 76 00             	lea    esi,[esi+0x0]
c000e2d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e2dd:	0f 85 89 01 00 00    	jne    c000e46c <tcp_input+0x614>
c000e2e3:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000e2e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e2ec:	e9 ab 00 00 00       	jmp    c000e39c <tcp_input+0x544>
c000e2f1:	8d 76 00             	lea    esi,[esi+0x0]
c000e2f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e2fb:	83 f8 0a             	cmp    eax,0xa
c000e2fe:	74 18                	je     c000e318 <tcp_input+0x4c0>
c000e300:	83 ec 08             	sub    esp,0x8
c000e303:	68 84 04 03 c0       	push   0xc0030484
c000e308:	68 46 f9 02 c0       	push   0xc002f946
c000e30d:	e8 ca 17 01 00       	call   c001fadc <CPrintf>
c000e312:	83 c4 10             	add    esp,0x10
c000e315:	8d 76 00             	lea    esi,[esi+0x0]
c000e318:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e31c:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e320:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e325:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e328:	0f b7 d2             	movzx  edx,dx
c000e32b:	0f b7 c0             	movzx  eax,ax
c000e32e:	39 c2                	cmp    edx,eax
c000e330:	75 5e                	jne    c000e390 <tcp_input+0x538>
c000e332:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e336:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e339:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e33e:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e342:	0f b7 d2             	movzx  edx,dx
c000e345:	0f b7 c0             	movzx  eax,ax
c000e348:	39 c2                	cmp    edx,eax
c000e34a:	75 44                	jne    c000e390 <tcp_input+0x538>
c000e34c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e350:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e353:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c000e358:	39 c2                	cmp    edx,eax
c000e35a:	75 34                	jne    c000e390 <tcp_input+0x538>
c000e35c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e360:	8b 10                	mov    edx,DWORD PTR [eax]
c000e362:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e367:	39 c2                	cmp    edx,eax
c000e369:	75 25                	jne    c000e390 <tcp_input+0x538>
c000e36b:	83 ec 0c             	sub    esp,0xc
c000e36e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e372:	e8 81 d4 ff ff       	call   c000b7f8 <tcp_timewait_input>
c000e377:	83 c4 10             	add    esp,0x10
c000e37a:	83 ec 0c             	sub    esp,0xc
c000e37d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e381:	e8 22 9f ff ff       	call   c00082a8 <pbuf_free>
c000e386:	83 c4 10             	add    esp,0x10
c000e389:	e9 96 05 00 00       	jmp    c000e924 <tcp_input+0xacc>
c000e38e:	66 90                	xchg   ax,ax
c000e390:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e394:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e397:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e39b:	90                   	nop
c000e39c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e3a1:	0f 85 4d ff ff ff    	jne    c000e2f4 <tcp_input+0x49c>
c000e3a7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e3af:	a1 78 68 03 c0       	mov    eax,ds:0xc0036878
c000e3b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e3b8:	eb 52                	jmp    c000e40c <tcp_input+0x5b4>
c000e3ba:	66 90                	xchg   ax,ax
c000e3bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3c0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e3c3:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e3c8:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e3cc:	0f b7 d2             	movzx  edx,dx
c000e3cf:	0f b7 c0             	movzx  eax,ax
c000e3d2:	39 c2                	cmp    edx,eax
c000e3d4:	75 22                	jne    c000e3f8 <tcp_input+0x5a0>
c000e3d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3da:	8b 10                	mov    edx,DWORD PTR [eax]
c000e3dc:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e3e1:	39 c2                	cmp    edx,eax
c000e3e3:	74 2f                	je     c000e414 <tcp_input+0x5bc>
c000e3e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3e9:	85 c0                	test   eax,eax
c000e3eb:	74 27                	je     c000e414 <tcp_input+0x5bc>
c000e3ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3f1:	8b 00                	mov    eax,DWORD PTR [eax]
c000e3f3:	85 c0                	test   eax,eax
c000e3f5:	74 1d                	je     c000e414 <tcp_input+0x5bc>
c000e3f7:	90                   	nop
c000e3f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e400:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e404:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e407:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e40b:	90                   	nop
c000e40c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e411:	75 a9                	jne    c000e3bc <tcp_input+0x564>
c000e413:	90                   	nop
c000e414:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e419:	74 51                	je     c000e46c <tcp_input+0x614>
c000e41b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e420:	74 26                	je     c000e448 <tcp_input+0x5f0>
c000e422:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e426:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e429:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e42d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e430:	8b 15 78 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036878
c000e436:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e43a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e43d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e441:	a3 78 68 03 c0       	mov    ds:0xc0036878,eax
c000e446:	66 90                	xchg   ax,ax
c000e448:	83 ec 0c             	sub    esp,0xc
c000e44b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e44f:	e8 60 ee ff ff       	call   c000d2b4 <tcp_listen_input>
c000e454:	83 c4 10             	add    esp,0x10
c000e457:	83 ec 0c             	sub    esp,0xc
c000e45a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e45e:	e8 45 9e ff ff       	call   c00082a8 <pbuf_free>
c000e463:	83 c4 10             	add    esp,0x10
c000e466:	e9 b9 04 00 00       	jmp    c000e924 <tcp_input+0xacc>
c000e46b:	90                   	nop
c000e46c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e471:	0f 84 19 04 00 00    	je     c000e890 <tcp_input+0xa38>
c000e477:	c7 05 c0 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c0,0x0
c000e481:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e485:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e488:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000e48e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e492:	a3 c4 a8 03 c0       	mov    ds:0xc003a8c4,eax
c000e497:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e49c:	a3 cc a8 03 c0       	mov    ds:0xc003a8cc,eax
c000e4a1:	c7 05 a4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8a4,0x0
c000e4ab:	c6 05 a8 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a8a8,0x0
c000e4b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4b6:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e4bc:	85 c0                	test   eax,eax
c000e4be:	0f 84 b4 00 00 00    	je     c000e578 <tcp_input+0x720>
c000e4c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4c8:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e4ce:	85 c0                	test   eax,eax
c000e4d0:	74 2e                	je     c000e500 <tcp_input+0x6a8>
c000e4d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4d6:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e4dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e4e0:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000e4e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e4ea:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e4ed:	6a 00                	push   0x0
c000e4ef:	51                   	push   ecx
c000e4f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e4f4:	52                   	push   edx
c000e4f5:	ff d0                	call   eax
c000e4f7:	83 c4 10             	add    esp,0x10
c000e4fa:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e4fe:	eb 20                	jmp    c000e520 <tcp_input+0x6c8>
c000e500:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e504:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e50a:	6a 00                	push   0x0
c000e50c:	50                   	push   eax
c000e50d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e511:	6a 00                	push   0x0
c000e513:	e8 b8 c8 ff ff       	call   c000add0 <tcp_recv_null>
c000e518:	83 c4 10             	add    esp,0x10
c000e51b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e51f:	90                   	nop
c000e520:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e525:	85 c0                	test   eax,eax
c000e527:	75 13                	jne    c000e53c <tcp_input+0x6e4>
c000e529:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e52d:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000e537:	eb 3f                	jmp    c000e578 <tcp_input+0x720>
c000e539:	8d 76 00             	lea    esi,[esi+0x0]
c000e53c:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e541:	83 f8 f6             	cmp    eax,0xfffffff6
c000e544:	74 0e                	je     c000e554 <tcp_input+0x6fc>
c000e546:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000e54c:	0f b7 c0             	movzx  eax,ax
c000e54f:	85 c0                	test   eax,eax
c000e551:	74 25                	je     c000e578 <tcp_input+0x720>
c000e553:	90                   	nop
c000e554:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e55a:	83 c0 01             	add    eax,0x1
c000e55d:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e563:	83 ec 0c             	sub    esp,0xc
c000e566:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e56a:	e8 39 9d ff ff       	call   c00082a8 <pbuf_free>
c000e56f:	83 c4 10             	add    esp,0x10
c000e572:	e9 ad 03 00 00       	jmp    c000e924 <tcp_input+0xacc>
c000e577:	90                   	nop
c000e578:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e57c:	a3 88 68 03 c0       	mov    ds:0xc0036888,eax
c000e581:	83 ec 0c             	sub    esp,0xc
c000e584:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e588:	e8 33 ef ff ff       	call   c000d4c0 <tcp_process>
c000e58d:	83 c4 10             	add    esp,0x10
c000e590:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e594:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e599:	83 f8 f6             	cmp    eax,0xfffffff6
c000e59c:	0f 84 9a 02 00 00    	je     c000e83c <tcp_input+0x9e4>
c000e5a2:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e5a7:	0f b6 c0             	movzx  eax,al
c000e5aa:	83 e0 08             	and    eax,0x8
c000e5ad:	74 59                	je     c000e608 <tcp_input+0x7b0>
c000e5af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5b3:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e5b9:	85 c0                	test   eax,eax
c000e5bb:	74 1f                	je     c000e5dc <tcp_input+0x784>
c000e5bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5c1:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e5c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e5cb:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e5ce:	83 ec 08             	sub    esp,0x8
c000e5d1:	6a f5                	push   0xfffffff5
c000e5d3:	52                   	push   edx
c000e5d4:	ff d0                	call   eax
c000e5d6:	83 c4 10             	add    esp,0x10
c000e5d9:	8d 76 00             	lea    esi,[esi+0x0]
c000e5dc:	83 ec 08             	sub    esp,0x8
c000e5df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e5e3:	68 70 68 03 c0       	push   0xc0036870
c000e5e8:	e8 ff c2 ff ff       	call   c000a8ec <tcp_pcb_remove>
c000e5ed:	83 c4 10             	add    esp,0x10
c000e5f0:	83 ec 08             	sub    esp,0x8
c000e5f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e5f7:	6a 02                	push   0x2
c000e5f9:	e8 ee 93 ff ff       	call   c00079ec <memp_free>
c000e5fe:	83 c4 10             	add    esp,0x10
c000e601:	e9 46 02 00 00       	jmp    c000e84c <tcp_input+0x9f4>
c000e606:	66 90                	xchg   ax,ax
c000e608:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e60d:	0f b6 c0             	movzx  eax,al
c000e610:	83 e0 10             	and    eax,0x10
c000e613:	74 2b                	je     c000e640 <tcp_input+0x7e8>
c000e615:	83 ec 08             	sub    esp,0x8
c000e618:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e61c:	68 70 68 03 c0       	push   0xc0036870
c000e621:	e8 c6 c2 ff ff       	call   c000a8ec <tcp_pcb_remove>
c000e626:	83 c4 10             	add    esp,0x10
c000e629:	83 ec 08             	sub    esp,0x8
c000e62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e630:	6a 02                	push   0x2
c000e632:	e8 b5 93 ff ff       	call   c00079ec <memp_free>
c000e637:	83 c4 10             	add    esp,0x10
c000e63a:	e9 0d 02 00 00       	jmp    c000e84c <tcp_input+0x9f4>
c000e63f:	90                   	nop
c000e640:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e645:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e649:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000e64c:	0f b7 c0             	movzx  eax,ax
c000e64f:	85 c0                	test   eax,eax
c000e651:	74 55                	je     c000e6a8 <tcp_input+0x850>
c000e653:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e657:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c000e65d:	85 c0                	test   eax,eax
c000e65f:	74 2f                	je     c000e690 <tcp_input+0x838>
c000e661:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e665:	8b 90 88 00 00 00    	mov    edx,DWORD PTR [eax+0x88]
c000e66b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e66f:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000e672:	0f b7 c8             	movzx  ecx,ax
c000e675:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e679:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000e67c:	83 ec 04             	sub    esp,0x4
c000e67f:	51                   	push   ecx
c000e680:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e684:	50                   	push   eax
c000e685:	ff d2                	call   edx
c000e687:	83 c4 10             	add    esp,0x10
c000e68a:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e68e:	eb 08                	jmp    c000e698 <tcp_input+0x840>
c000e690:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e695:	8d 76 00             	lea    esi,[esi+0x0]
c000e698:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e69d:	83 f8 f6             	cmp    eax,0xfffffff6
c000e6a0:	0f 84 9a 01 00 00    	je     c000e840 <tcp_input+0x9e8>
c000e6a6:	66 90                	xchg   ax,ax
c000e6a8:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e6ad:	85 c0                	test   eax,eax
c000e6af:	0f 84 f3 00 00 00    	je     c000e7a8 <tcp_input+0x950>
c000e6b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e6b9:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e6bf:	85 c0                	test   eax,eax
c000e6c1:	74 15                	je     c000e6d8 <tcp_input+0x880>
c000e6c3:	83 ec 08             	sub    esp,0x8
c000e6c6:	68 1d 05 03 c0       	push   0xc003051d
c000e6cb:	68 46 f9 02 c0       	push   0xc002f946
c000e6d0:	e8 07 14 01 00       	call   c001fadc <CPrintf>
c000e6d5:	83 c4 10             	add    esp,0x10
c000e6d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e6dc:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000e6df:	0f b6 c0             	movzx  eax,al
c000e6e2:	83 e0 10             	and    eax,0x10
c000e6e5:	74 25                	je     c000e70c <tcp_input+0x8b4>
c000e6e7:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e6ec:	83 ec 0c             	sub    esp,0xc
c000e6ef:	50                   	push   eax
c000e6f0:	e8 b3 9b ff ff       	call   c00082a8 <pbuf_free>
c000e6f5:	83 c4 10             	add    esp,0x10
c000e6f8:	83 ec 0c             	sub    esp,0xc
c000e6fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e6ff:	e8 c4 ca ff ff       	call   c000b1c8 <tcp_abort>
c000e704:	83 c4 10             	add    esp,0x10
c000e707:	e9 40 01 00 00       	jmp    c000e84c <tcp_input+0x9f4>
c000e70c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e711:	0f b6 c0             	movzx  eax,al
c000e714:	83 e0 08             	and    eax,0x8
c000e717:	74 13                	je     c000e72c <tcp_input+0x8d4>
c000e719:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e71e:	8a 50 0d             	mov    dl,BYTE PTR [eax+0xd]
c000e721:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e726:	83 ca 01             	or     edx,0x1
c000e729:	88 50 0d             	mov    BYTE PTR [eax+0xd],dl
c000e72c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e730:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e736:	85 c0                	test   eax,eax
c000e738:	74 2a                	je     c000e764 <tcp_input+0x90c>
c000e73a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e73e:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e744:	8b 0d a4 a8 03 c0    	mov    ecx,DWORD PTR ds:0xc003a8a4
c000e74a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e74e:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e751:	6a 00                	push   0x0
c000e753:	51                   	push   ecx
c000e754:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e758:	52                   	push   edx
c000e759:	ff d0                	call   eax
c000e75b:	83 c4 10             	add    esp,0x10
c000e75e:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e762:	eb 1c                	jmp    c000e780 <tcp_input+0x928>
c000e764:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e769:	6a 00                	push   0x0
c000e76b:	50                   	push   eax
c000e76c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e770:	6a 00                	push   0x0
c000e772:	e8 59 c6 ff ff       	call   c000add0 <tcp_recv_null>
c000e777:	83 c4 10             	add    esp,0x10
c000e77a:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e77e:	66 90                	xchg   ax,ax
c000e780:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e785:	83 f8 f6             	cmp    eax,0xfffffff6
c000e788:	0f 84 b6 00 00 00    	je     c000e844 <tcp_input+0x9ec>
c000e78e:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e793:	85 c0                	test   eax,eax
c000e795:	74 11                	je     c000e7a8 <tcp_input+0x950>
c000e797:	8b 15 a4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8a4
c000e79d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7a1:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
c000e7a7:	90                   	nop
c000e7a8:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e7ad:	0f b6 c0             	movzx  eax,al
c000e7b0:	83 e0 20             	and    eax,0x20
c000e7b3:	74 6b                	je     c000e820 <tcp_input+0x9c8>
c000e7b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7b9:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000e7bc:	0f b7 c0             	movzx  eax,ax
c000e7bf:	3d 60 08 00 00       	cmp    eax,0x860
c000e7c4:	74 12                	je     c000e7d8 <tcp_input+0x980>
c000e7c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7ca:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000e7cd:	83 c0 01             	add    eax,0x1
c000e7d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e7d4:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c000e7d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7dc:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e7e2:	85 c0                	test   eax,eax
c000e7e4:	74 26                	je     c000e80c <tcp_input+0x9b4>
c000e7e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7ea:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e7f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e7f4:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e7f7:	6a 00                	push   0x0
c000e7f9:	6a 00                	push   0x0
c000e7fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e7ff:	52                   	push   edx
c000e800:	ff d0                	call   eax
c000e802:	83 c4 10             	add    esp,0x10
c000e805:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e809:	eb 09                	jmp    c000e814 <tcp_input+0x9bc>
c000e80b:	90                   	nop
c000e80c:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e811:	8d 76 00             	lea    esi,[esi+0x0]
c000e814:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e819:	83 f8 f6             	cmp    eax,0xfffffff6
c000e81c:	74 2a                	je     c000e848 <tcp_input+0x9f0>
c000e81e:	66 90                	xchg   ax,ax
c000e820:	c7 05 88 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036888,0x0
c000e82a:	83 ec 0c             	sub    esp,0xc
c000e82d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e831:	e8 a2 15 00 00       	call   c000fdd8 <tcp_output>
c000e836:	83 c4 10             	add    esp,0x10
c000e839:	eb 11                	jmp    c000e84c <tcp_input+0x9f4>
c000e83b:	90                   	nop
c000e83c:	90                   	nop
c000e83d:	eb 0d                	jmp    c000e84c <tcp_input+0x9f4>
c000e83f:	90                   	nop
c000e840:	90                   	nop
c000e841:	eb 09                	jmp    c000e84c <tcp_input+0x9f4>
c000e843:	90                   	nop
c000e844:	90                   	nop
c000e845:	eb 05                	jmp    c000e84c <tcp_input+0x9f4>
c000e847:	90                   	nop
c000e848:	90                   	nop
c000e849:	8d 76 00             	lea    esi,[esi+0x0]
c000e84c:	c7 05 88 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036888,0x0
c000e856:	c7 05 a4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8a4,0x0
c000e860:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000e865:	85 c0                	test   eax,eax
c000e867:	0f 84 b7 00 00 00    	je     c000e924 <tcp_input+0xacc>
c000e86d:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000e872:	83 ec 0c             	sub    esp,0xc
c000e875:	50                   	push   eax
c000e876:	e8 2d 9a ff ff       	call   c00082a8 <pbuf_free>
c000e87b:	83 c4 10             	add    esp,0x10
c000e87e:	c7 05 c4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c4,0x0
c000e888:	e9 97 00 00 00       	jmp    c000e924 <tcp_input+0xacc>
c000e88d:	8d 76 00             	lea    esi,[esi+0x0]
c000e890:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e895:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e899:	0f b7 c0             	movzx  eax,ax
c000e89c:	83 ec 0c             	sub    esp,0xc
c000e89f:	50                   	push   eax
c000e8a0:	e8 43 23 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e8a5:	83 c4 10             	add    esp,0x10
c000e8a8:	0f b7 c0             	movzx  eax,ax
c000e8ab:	83 e0 04             	and    eax,0x4
c000e8ae:	75 64                	jne    c000e914 <tcp_input+0xabc>
c000e8b0:	66 a1 c0 67 03 c0    	mov    ax,ds:0xc00367c0
c000e8b6:	83 c0 01             	add    eax,0x1
c000e8b9:	66 a3 c0 67 03 c0    	mov    ds:0xc00367c0,ax
c000e8bf:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e8c5:	83 c0 01             	add    eax,0x1
c000e8c8:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e8ce:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e8d3:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e8d6:	0f b7 c8             	movzx  ecx,ax
c000e8d9:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e8de:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e8e2:	0f b7 d0             	movzx  edx,ax
c000e8e5:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000e8eb:	0f b7 d8             	movzx  ebx,ax
c000e8ee:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000e8f3:	01 c3                	add    ebx,eax
c000e8f5:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000e8fa:	83 ec 08             	sub    esp,0x8
c000e8fd:	51                   	push   ecx
c000e8fe:	52                   	push   edx
c000e8ff:	68 90 68 03 c0       	push   0xc0036890
c000e904:	68 98 68 03 c0       	push   0xc0036898
c000e909:	53                   	push   ebx
c000e90a:	50                   	push   eax
c000e90b:	e8 54 19 00 00       	call   c0010264 <tcp_rst>
c000e910:	83 c4 20             	add    esp,0x20
c000e913:	90                   	nop
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e91b:	e8 88 99 ff ff       	call   c00082a8 <pbuf_free>
c000e920:	83 c4 10             	add    esp,0x10
c000e923:	90                   	nop
c000e924:	83 c4 18             	add    esp,0x18
c000e927:	5b                   	pop    ebx
c000e928:	c3                   	ret    
c000e929:	66 90                	xchg   ax,ax
c000e92b:	90                   	nop

c000e92c <tcp_output_alloc_header>:
c000e92c:	83 ec 2c             	sub    esp,0x2c
c000e92f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e933:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e937:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000e93c:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e941:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e945:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e949:	01 d0                	add    eax,edx
c000e94b:	83 c0 14             	add    eax,0x14
c000e94e:	0f b7 c0             	movzx  eax,ax
c000e951:	83 ec 04             	sub    esp,0x4
c000e954:	6a 00                	push   0x0
c000e956:	50                   	push   eax
c000e957:	6a 01                	push   0x1
c000e959:	e8 22 9b ff ff       	call   c0008480 <pbuf_alloc>
c000e95e:	83 c4 10             	add    esp,0x10
c000e961:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e965:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000e96a:	0f 84 10 01 00 00    	je     c000ea80 <tcp_output_alloc_header+0x154>
c000e970:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000e975:	8d 50 13             	lea    edx,[eax+0x13]
c000e978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e97c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000e980:	0f b7 c0             	movzx  eax,ax
c000e983:	39 c2                	cmp    edx,eax
c000e985:	7c 15                	jl     c000e99c <tcp_output_alloc_header+0x70>
c000e987:	83 ec 08             	sub    esp,0x8
c000e98a:	68 60 05 03 c0       	push   0xc0030560
c000e98f:	68 46 f9 02 c0       	push   0xc002f946
c000e994:	e8 43 11 01 00       	call   c001fadc <CPrintf>
c000e999:	83 c4 10             	add    esp,0x10
c000e99c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e9a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e9a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e9a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9ab:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000e9ae:	0f b7 c0             	movzx  eax,ax
c000e9b1:	83 ec 0c             	sub    esp,0xc
c000e9b4:	50                   	push   eax
c000e9b5:	e8 2e 22 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e9ba:	83 c4 10             	add    esp,0x10
c000e9bd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e9c1:	66 89 02             	mov    WORD PTR [edx],ax
c000e9c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9c8:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000e9cc:	0f b7 c0             	movzx  eax,ax
c000e9cf:	83 ec 0c             	sub    esp,0xc
c000e9d2:	50                   	push   eax
c000e9d3:	e8 10 22 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e9d8:	83 c4 10             	add    esp,0x10
c000e9db:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e9df:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e9e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e9e7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e9eb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000e9ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9f2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e9f5:	83 ec 0c             	sub    esp,0xc
c000e9f8:	50                   	push   eax
c000e9f9:	e8 0e 22 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000e9fe:	83 c4 10             	add    esp,0x10
c000ea01:	89 c2                	mov    edx,eax
c000ea03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea07:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ea0a:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ea0f:	c1 e8 02             	shr    eax,0x2
c000ea12:	83 c0 05             	add    eax,0x5
c000ea15:	c1 e0 0c             	shl    eax,0xc
c000ea18:	83 c8 10             	or     eax,0x10
c000ea1b:	0f b7 c0             	movzx  eax,ax
c000ea1e:	83 ec 0c             	sub    esp,0xc
c000ea21:	50                   	push   eax
c000ea22:	e8 c1 21 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ea27:	83 c4 10             	add    esp,0x10
c000ea2a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ea2e:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000ea32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea36:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000ea3a:	0f b7 c0             	movzx  eax,ax
c000ea3d:	83 ec 0c             	sub    esp,0xc
c000ea40:	50                   	push   eax
c000ea41:	e8 a2 21 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ea46:	83 c4 10             	add    esp,0x10
c000ea49:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ea4d:	66 89 42 0e          	mov    WORD PTR [edx+0xe],ax
c000ea51:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea55:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000ea5b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea5f:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000ea65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea69:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ea6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea70:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000ea74:	0f b7 c0             	movzx  eax,ax
c000ea77:	01 c2                	add    edx,eax
c000ea79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea7d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000ea80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ea84:	83 c4 2c             	add    esp,0x2c
c000ea87:	c3                   	ret    

c000ea88 <tcp_create_segment>:
c000ea88:	53                   	push   ebx
c000ea89:	83 ec 28             	sub    esp,0x28
c000ea8c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ea90:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea94:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000ea98:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ea9c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000eaa1:	c1 e0 02             	shl    eax,0x2
c000eaa4:	83 e0 04             	and    eax,0x4
c000eaa7:	88 c2                	mov    dl,al
c000eaa9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000eaae:	83 e0 02             	and    eax,0x2
c000eab1:	74 05                	je     c000eab8 <tcp_create_segment+0x30>
c000eab3:	b0 0c                	mov    al,0xc
c000eab5:	eb 05                	jmp    c000eabc <tcp_create_segment+0x34>
c000eab7:	90                   	nop
c000eab8:	b0 00                	mov    al,0x0
c000eaba:	66 90                	xchg   ax,ax
c000eabc:	01 d0                	add    eax,edx
c000eabe:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000eac2:	83 ec 0c             	sub    esp,0xc
c000eac5:	6a 04                	push   0x4
c000eac7:	e8 f4 8d ff ff       	call   c00078c0 <memp_malloc>
c000eacc:	83 c4 10             	add    esp,0x10
c000eacf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ead3:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ead8:	75 1a                	jne    c000eaf4 <tcp_create_segment+0x6c>
c000eada:	83 ec 0c             	sub    esp,0xc
c000eadd:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eae1:	e8 c2 97 ff ff       	call   c00082a8 <pbuf_free>
c000eae6:	83 c4 10             	add    esp,0x10
c000eae9:	b8 00 00 00 00       	mov    eax,0x0
c000eaee:	e9 31 01 00 00       	jmp    c000ec24 <tcp_create_segment+0x19c>
c000eaf3:	90                   	nop
c000eaf4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eaf8:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c000eafc:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c000eaff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb03:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000eb09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb0d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eb11:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000eb14:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eb18:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000eb1b:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000eb20:	89 d1                	mov    ecx,edx
c000eb22:	29 c1                	sub    ecx,eax
c000eb24:	89 c8                	mov    eax,ecx
c000eb26:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eb2a:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000eb2e:	83 ec 08             	sub    esp,0x8
c000eb31:	6a 14                	push   0x14
c000eb33:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb37:	e8 d0 95 ff ff       	call   c000810c <pbuf_header>
c000eb3c:	83 c4 10             	add    esp,0x10
c000eb3f:	0f b6 c0             	movzx  eax,al
c000eb42:	85 c0                	test   eax,eax
c000eb44:	74 2a                	je     c000eb70 <tcp_create_segment+0xe8>
c000eb46:	66 a1 c4 67 03 c0    	mov    ax,ds:0xc00367c4
c000eb4c:	83 c0 01             	add    eax,0x1
c000eb4f:	66 a3 c4 67 03 c0    	mov    ds:0xc00367c4,ax
c000eb55:	83 ec 0c             	sub    esp,0xc
c000eb58:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eb5c:	e8 bf b3 ff ff       	call   c0009f20 <tcp_seg_free>
c000eb61:	83 c4 10             	add    esp,0x10
c000eb64:	b8 00 00 00 00       	mov    eax,0x0
c000eb69:	e9 b6 00 00 00       	jmp    c000ec24 <tcp_create_segment+0x19c>
c000eb6e:	66 90                	xchg   ax,ax
c000eb70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000eb77:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000eb7a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb7e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000eb81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb85:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000eb88:	0f b7 c0             	movzx  eax,ax
c000eb8b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eb8f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000eb92:	83 ec 0c             	sub    esp,0xc
c000eb95:	50                   	push   eax
c000eb96:	e8 4d 20 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000eb9b:	83 c4 10             	add    esp,0x10
c000eb9e:	66 89 03             	mov    WORD PTR [ebx],ax
c000eba1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eba5:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000eba9:	0f b7 c0             	movzx  eax,ax
c000ebac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ebb0:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ebb3:	83 ec 0c             	sub    esp,0xc
c000ebb6:	50                   	push   eax
c000ebb7:	e8 2c 20 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ebbc:	83 c4 10             	add    esp,0x10
c000ebbf:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000ebc3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ebc7:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ebca:	83 ec 0c             	sub    esp,0xc
c000ebcd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ebd1:	e8 36 20 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000ebd6:	83 c4 10             	add    esp,0x10
c000ebd9:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ebdc:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ebe1:	c1 e8 02             	shr    eax,0x2
c000ebe4:	0f b6 c0             	movzx  eax,al
c000ebe7:	83 c0 05             	add    eax,0x5
c000ebea:	c1 e0 0c             	shl    eax,0xc
c000ebed:	89 c2                	mov    edx,eax
c000ebef:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ebf4:	09 d0                	or     eax,edx
c000ebf6:	0f b7 c0             	movzx  eax,ax
c000ebf9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ebfd:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ec00:	83 ec 0c             	sub    esp,0xc
c000ec03:	50                   	push   eax
c000ec04:	e8 df 1f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ec09:	83 c4 10             	add    esp,0x10
c000ec0c:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c000ec10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec14:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ec17:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000ec1d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec21:	8d 76 00             	lea    esi,[esi+0x0]
c000ec24:	83 c4 28             	add    esp,0x28
c000ec27:	5b                   	pop    ebx
c000ec28:	c3                   	ret    
c000ec29:	8d 76 00             	lea    esi,[esi+0x0]

c000ec2c <tcp_pbuf_prealloc>:
c000ec2c:	53                   	push   ebx
c000ec2d:	83 ec 28             	sub    esp,0x28
c000ec30:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ec34:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ec38:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000ec3c:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000ec40:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000ec45:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ec4a:	88 d8                	mov    al,bl
c000ec4c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ec50:	88 c8                	mov    al,cl
c000ec52:	88 04 24             	mov    BYTE PTR [esp],al
c000ec55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec59:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000ec5e:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000ec63:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000ec68:	39 c2                	cmp    edx,eax
c000ec6a:	73 64                	jae    c000ecd0 <tcp_pbuf_prealloc+0xa4>
c000ec6c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ec71:	83 e0 02             	and    eax,0x2
c000ec74:	75 2e                	jne    c000eca4 <tcp_pbuf_prealloc+0x78>
c000ec76:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ec7a:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ec7d:	0f b6 c0             	movzx  eax,al
c000ec80:	83 e0 40             	and    eax,0x40
c000ec83:	75 4b                	jne    c000ecd0 <tcp_pbuf_prealloc+0xa4>
c000ec85:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000ec89:	85 c0                	test   eax,eax
c000ec8b:	74 17                	je     c000eca4 <tcp_pbuf_prealloc+0x78>
c000ec8d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ec91:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ec94:	85 c0                	test   eax,eax
c000ec96:	75 0c                	jne    c000eca4 <tcp_pbuf_prealloc+0x78>
c000ec98:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ec9c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ec9f:	85 c0                	test   eax,eax
c000eca1:	74 2d                	je     c000ecd0 <tcp_pbuf_prealloc+0xa4>
c000eca3:	90                   	nop
c000eca4:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000eca9:	8d 90 17 02 00 00    	lea    edx,[eax+0x217]
c000ecaf:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000ecb4:	39 c2                	cmp    edx,eax
c000ecb6:	7d 0c                	jge    c000ecc4 <tcp_pbuf_prealloc+0x98>
c000ecb8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecbc:	05 18 02 00 00       	add    eax,0x218
c000ecc1:	eb 05                	jmp    c000ecc8 <tcp_pbuf_prealloc+0x9c>
c000ecc3:	90                   	nop
c000ecc4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecc8:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000eccd:	8d 76 00             	lea    esi,[esi+0x0]
c000ecd0:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000ecd5:	83 ec 04             	sub    esp,0x4
c000ecd8:	6a 00                	push   0x0
c000ecda:	50                   	push   eax
c000ecdb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ecdf:	e8 9c 97 ff ff       	call   c0008480 <pbuf_alloc>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eceb:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ecf0:	75 0a                	jne    c000ecfc <tcp_pbuf_prealloc+0xd0>
c000ecf2:	b8 00 00 00 00       	mov    eax,0x0
c000ecf7:	eb 5b                	jmp    c000ed54 <tcp_pbuf_prealloc+0x128>
c000ecf9:	8d 76 00             	lea    esi,[esi+0x0]
c000ecfc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed00:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed02:	85 c0                	test   eax,eax
c000ed04:	74 16                	je     c000ed1c <tcp_pbuf_prealloc+0xf0>
c000ed06:	83 ec 08             	sub    esp,0x8
c000ed09:	68 e4 07 03 c0       	push   0xc00307e4
c000ed0e:	68 46 f9 02 c0       	push   0xc002f946
c000ed13:	e8 c4 0d 01 00       	call   c001fadc <CPrintf>
c000ed18:	83 c4 10             	add    esp,0x10
c000ed1b:	90                   	nop
c000ed1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed20:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000ed24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed28:	89 d1                	mov    ecx,edx
c000ed2a:	29 c1                	sub    ecx,eax
c000ed2c:	89 c8                	mov    eax,ecx
c000ed2e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ed32:	66 89 02             	mov    WORD PTR [edx],ax
c000ed35:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed3d:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000ed41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed45:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ed48:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed4c:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c000ed50:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed54:	83 c4 28             	add    esp,0x28
c000ed57:	5b                   	pop    ebx
c000ed58:	c3                   	ret    
c000ed59:	8d 76 00             	lea    esi,[esi+0x0]

c000ed5c <tcp_write_checks>:
c000ed5c:	83 ec 1c             	sub    esp,0x1c
c000ed5f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ed63:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ed68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed6c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ed6f:	83 f8 04             	cmp    eax,0x4
c000ed72:	74 2c                	je     c000eda0 <tcp_write_checks+0x44>
c000ed74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed78:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ed7b:	83 f8 07             	cmp    eax,0x7
c000ed7e:	74 20                	je     c000eda0 <tcp_write_checks+0x44>
c000ed80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed84:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ed87:	83 f8 02             	cmp    eax,0x2
c000ed8a:	74 14                	je     c000eda0 <tcp_write_checks+0x44>
c000ed8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed90:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ed93:	83 f8 03             	cmp    eax,0x3
c000ed96:	74 08                	je     c000eda0 <tcp_write_checks+0x44>
c000ed98:	b0 f3                	mov    al,0xf3
c000ed9a:	e9 f9 00 00 00       	jmp    c000ee98 <tcp_write_checks+0x13c>
c000ed9f:	90                   	nop
c000eda0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000eda5:	85 c0                	test   eax,eax
c000eda7:	75 07                	jne    c000edb0 <tcp_write_checks+0x54>
c000eda9:	b0 00                	mov    al,0x0
c000edab:	e9 e8 00 00 00       	jmp    c000ee98 <tcp_write_checks+0x13c>
c000edb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edb4:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000edb8:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000edbd:	0f b7 c0             	movzx  eax,ax
c000edc0:	39 c2                	cmp    edx,eax
c000edc2:	76 1c                	jbe    c000ede0 <tcp_write_checks+0x84>
c000edc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edc8:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000edcb:	83 c8 80             	or     eax,0xffffff80
c000edce:	88 c2                	mov    dl,al
c000edd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edd4:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000edd7:	b0 ff                	mov    al,0xff
c000edd9:	e9 ba 00 00 00       	jmp    c000ee98 <tcp_write_checks+0x13c>
c000edde:	66 90                	xchg   ax,ax
c000ede0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ede4:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000ede7:	0f b7 c0             	movzx  eax,ax
c000edea:	83 f8 01             	cmp    eax,0x1
c000eded:	77 11                	ja     c000ee00 <tcp_write_checks+0xa4>
c000edef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edf3:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000edf6:	0f b7 c0             	movzx  eax,ax
c000edf9:	3d fc ff 00 00       	cmp    eax,0xfffc
c000edfe:	76 28                	jbe    c000ee28 <tcp_write_checks+0xcc>
c000ee00:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000ee06:	83 c0 01             	add    eax,0x1
c000ee09:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000ee0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee13:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ee16:	83 c8 80             	or     eax,0xffffff80
c000ee19:	88 c2                	mov    dl,al
c000ee1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee1f:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ee22:	b0 ff                	mov    al,0xff
c000ee24:	eb 72                	jmp    c000ee98 <tcp_write_checks+0x13c>
c000ee26:	66 90                	xchg   ax,ax
c000ee28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee2c:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000ee2f:	0f b7 c0             	movzx  eax,ax
c000ee32:	85 c0                	test   eax,eax
c000ee34:	74 2e                	je     c000ee64 <tcp_write_checks+0x108>
c000ee36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee3a:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ee3d:	85 c0                	test   eax,eax
c000ee3f:	75 53                	jne    c000ee94 <tcp_write_checks+0x138>
c000ee41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee45:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ee48:	85 c0                	test   eax,eax
c000ee4a:	75 48                	jne    c000ee94 <tcp_write_checks+0x138>
c000ee4c:	83 ec 08             	sub    esp,0x8
c000ee4f:	68 90 05 03 c0       	push   0xc0030590
c000ee54:	68 46 f9 02 c0       	push   0xc002f946
c000ee59:	e8 7e 0c 01 00       	call   c001fadc <CPrintf>
c000ee5e:	83 c4 10             	add    esp,0x10
c000ee61:	eb 31                	jmp    c000ee94 <tcp_write_checks+0x138>
c000ee63:	90                   	nop
c000ee64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee68:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ee6b:	85 c0                	test   eax,eax
c000ee6d:	75 0d                	jne    c000ee7c <tcp_write_checks+0x120>
c000ee6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee73:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ee76:	85 c0                	test   eax,eax
c000ee78:	74 1a                	je     c000ee94 <tcp_write_checks+0x138>
c000ee7a:	66 90                	xchg   ax,ax
c000ee7c:	83 ec 08             	sub    esp,0x8
c000ee7f:	68 cc 05 03 c0       	push   0xc00305cc
c000ee84:	68 46 f9 02 c0       	push   0xc002f946
c000ee89:	e8 4e 0c 01 00       	call   c001fadc <CPrintf>
c000ee8e:	83 c4 10             	add    esp,0x10
c000ee91:	8d 76 00             	lea    esi,[esi+0x0]
c000ee94:	b0 00                	mov    al,0x0
c000ee96:	66 90                	xchg   ax,ax
c000ee98:	83 c4 1c             	add    esp,0x1c
c000ee9b:	c3                   	ret    

c000ee9c <tcp_write>:
c000ee9c:	56                   	push   esi
c000ee9d:	53                   	push   ebx
c000ee9e:	83 ec 54             	sub    esp,0x54
c000eea1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000eea5:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000eea9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000eeae:	88 d0                	mov    al,dl
c000eeb0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000eeb4:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000eebc:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000eec4:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000eecc:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000eed4:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000eedc:	66 c7 44 24 3a 00 00 	mov    WORD PTR [esp+0x3a],0x0
c000eee3:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000eee8:	c6 44 24 2a 00       	mov    BYTE PTR [esp+0x2a],0x0
c000eeed:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000eef4:	66 c7 44 24 36 00 00 	mov    WORD PTR [esp+0x36],0x0
c000eefb:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
c000ef00:	75 1e                	jne    c000ef20 <tcp_write+0x84>
c000ef02:	83 ec 08             	sub    esp,0x8
c000ef05:	68 00 06 03 c0       	push   0xc0030600
c000ef0a:	68 46 f9 02 c0       	push   0xc002f946
c000ef0f:	e8 c8 0b 01 00       	call   c001fadc <CPrintf>
c000ef14:	83 c4 10             	add    esp,0x10
c000ef17:	b0 f2                	mov    al,0xf2
c000ef19:	e9 16 08 00 00       	jmp    c000f734 <tcp_write+0x898>
c000ef1e:	66 90                	xchg   ax,ax
c000ef20:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ef25:	83 ec 08             	sub    esp,0x8
c000ef28:	50                   	push   eax
c000ef29:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ef2d:	e8 2a fe ff ff       	call   c000ed5c <tcp_write_checks>
c000ef32:	83 c4 10             	add    esp,0x10
c000ef35:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c000ef39:	0f be 44 24 29       	movsx  eax,BYTE PTR [esp+0x29]
c000ef3e:	85 c0                	test   eax,eax
c000ef40:	74 0a                	je     c000ef4c <tcp_write+0xb0>
c000ef42:	8a 44 24 29          	mov    al,BYTE PTR [esp+0x29]
c000ef46:	e9 e9 07 00 00       	jmp    c000f734 <tcp_write+0x898>
c000ef4b:	90                   	nop
c000ef4c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ef50:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000ef53:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000ef58:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ef5c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ef5f:	85 c0                	test   eax,eax
c000ef61:	0f 84 79 02 00 00    	je     c000f1e0 <tcp_write+0x344>
c000ef67:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ef6b:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ef6e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ef72:	eb 0c                	jmp    c000ef80 <tcp_write+0xe4>
c000ef74:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ef78:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef7a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ef7e:	66 90                	xchg   ax,ax
c000ef80:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ef84:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef86:	85 c0                	test   eax,eax
c000ef88:	75 ea                	jne    c000ef74 <tcp_write+0xd8>
c000ef8a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ef8e:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000ef91:	0f b6 c0             	movzx  eax,al
c000ef94:	c1 e0 02             	shl    eax,0x2
c000ef97:	83 e0 04             	and    eax,0x4
c000ef9a:	89 c2                	mov    edx,eax
c000ef9c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000efa0:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000efa3:	0f b6 c0             	movzx  eax,al
c000efa6:	83 e0 02             	and    eax,0x2
c000efa9:	74 09                	je     c000efb4 <tcp_write+0x118>
c000efab:	b8 0c 00 00 00       	mov    eax,0xc
c000efb0:	eb 0a                	jmp    c000efbc <tcp_write+0x120>
c000efb2:	66 90                	xchg   ax,ax
c000efb4:	b8 00 00 00 00       	mov    eax,0x0
c000efb9:	8d 76 00             	lea    esi,[esi+0x0]
c000efbc:	01 d0                	add    eax,edx
c000efbe:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000efc3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000efc7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000efca:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000efce:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000efd1:	66 8b 4c 24 26       	mov    cx,WORD PTR [esp+0x26]
c000efd6:	01 ca                	add    edx,ecx
c000efd8:	29 d0                	sub    eax,edx
c000efda:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000efdf:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000efe3:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000efe7:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000efec:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000eff1:	0f b7 c0             	movzx  eax,ax
c000eff4:	85 c0                	test   eax,eax
c000eff6:	0f 84 84 00 00 00    	je     c000f080 <tcp_write+0x1e4>
c000effc:	0f b7 54 24 36       	movzx  edx,WORD PTR [esp+0x36]
c000f001:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f006:	39 c2                	cmp    edx,eax
c000f008:	76 16                	jbe    c000f020 <tcp_write+0x184>
c000f00a:	83 ec 08             	sub    esp,0x8
c000f00d:	68 34 06 03 c0       	push   0xc0030634
c000f012:	68 46 f9 02 c0       	push   0xc002f946
c000f017:	e8 c0 0a 01 00       	call   c001fadc <CPrintf>
c000f01c:	83 c4 10             	add    esp,0x10
c000f01f:	90                   	nop
c000f020:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f024:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f028:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f02d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f031:	0f b7 d8             	movzx  ebx,ax
c000f034:	0f b7 ca             	movzx  ecx,dx
c000f037:	39 cb                	cmp    ebx,ecx
c000f039:	76 05                	jbe    c000f040 <tcp_write+0x1a4>
c000f03b:	89 d0                	mov    eax,edx
c000f03d:	8d 76 00             	lea    esi,[esi+0x0]
c000f040:	66 89 44 24 36       	mov    WORD PTR [esp+0x36],ax
c000f045:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f04a:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f04f:	01 d0                	add    eax,edx
c000f051:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f056:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f05b:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f060:	89 d6                	mov    esi,edx
c000f062:	29 c6                	sub    esi,eax
c000f064:	89 f0                	mov    eax,esi
c000f066:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f06b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000f06f:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f074:	89 d6                	mov    esi,edx
c000f076:	29 c6                	sub    esi,eax
c000f078:	89 f0                	mov    eax,esi
c000f07a:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f07f:	90                   	nop
c000f080:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f085:	0f b7 c0             	movzx  eax,ax
c000f088:	85 c0                	test   eax,eax
c000f08a:	74 24                	je     c000f0b0 <tcp_write+0x214>
c000f08c:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f091:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f096:	39 c2                	cmp    edx,eax
c000f098:	74 16                	je     c000f0b0 <tcp_write+0x214>
c000f09a:	83 ec 08             	sub    esp,0x8
c000f09d:	68 f8 07 03 c0       	push   0xc00307f8
c000f0a2:	68 46 f9 02 c0       	push   0xc002f946
c000f0a7:	e8 30 0a 01 00       	call   c001fadc <CPrintf>
c000f0ac:	83 c4 10             	add    esp,0x10
c000f0af:	90                   	nop
c000f0b0:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f0b5:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f0ba:	39 c2                	cmp    edx,eax
c000f0bc:	0f 83 ce 03 00 00    	jae    c000f490 <tcp_write+0x5f4>
c000f0c2:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f0c7:	85 c0                	test   eax,eax
c000f0c9:	0f 84 c1 03 00 00    	je     c000f490 <tcp_write+0x5f4>
c000f0cf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f0d3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f0d6:	0f b7 c0             	movzx  eax,ax
c000f0d9:	85 c0                	test   eax,eax
c000f0db:	0f 84 af 03 00 00    	je     c000f490 <tcp_write+0x5f4>
c000f0e1:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000f0e6:	0f b7 44 24 3a       	movzx  eax,WORD PTR [esp+0x3a]
c000f0eb:	29 c2                	sub    edx,eax
c000f0ed:	89 d0                	mov    eax,edx
c000f0ef:	0f b7 54 24 34       	movzx  edx,WORD PTR [esp+0x34]
c000f0f4:	39 d0                	cmp    eax,edx
c000f0f6:	7e 04                	jle    c000f0fc <tcp_write+0x260>
c000f0f8:	89 d0                	mov    eax,edx
c000f0fa:	66 90                	xchg   ax,ax
c000f0fc:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c000f101:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f105:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f109:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f10e:	83 e0 01             	and    eax,0x1
c000f111:	74 61                	je     c000f174 <tcp_write+0x2d8>
c000f113:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c000f118:	0f b7 54 24 34       	movzx  edx,WORD PTR [esp+0x34]
c000f11d:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f122:	83 ec 04             	sub    esp,0x4
c000f125:	6a 01                	push   0x1
c000f127:	51                   	push   ecx
c000f128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f12c:	8d 4c 24 26          	lea    ecx,[esp+0x26]
c000f130:	51                   	push   ecx
c000f131:	52                   	push   edx
c000f132:	50                   	push   eax
c000f133:	6a 03                	push   0x3
c000f135:	e8 f2 fa ff ff       	call   c000ec2c <tcp_pbuf_prealloc>
c000f13a:	83 c4 20             	add    esp,0x20
c000f13d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f141:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f146:	0f 84 44 05 00 00    	je     c000f690 <tcp_write+0x7f4>
c000f14c:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000f151:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f156:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f15a:	01 c1                	add    ecx,eax
c000f15c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f160:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f163:	83 ec 04             	sub    esp,0x4
c000f166:	52                   	push   edx
c000f167:	51                   	push   ecx
c000f168:	50                   	push   eax
c000f169:	e8 0c 12 ff ff       	call   c000037a <memcpy>
c000f16e:	83 c4 10             	add    esp,0x10
c000f171:	eb 39                	jmp    c000f1ac <tcp_write+0x310>
c000f173:	90                   	nop
c000f174:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f179:	83 ec 04             	sub    esp,0x4
c000f17c:	6a 01                	push   0x1
c000f17e:	50                   	push   eax
c000f17f:	6a 03                	push   0x3
c000f181:	e8 fa 92 ff ff       	call   c0008480 <pbuf_alloc>
c000f186:	83 c4 10             	add    esp,0x10
c000f189:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f18d:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f192:	0f 84 fc 04 00 00    	je     c000f694 <tcp_write+0x7f8>
c000f198:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f19d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f1a1:	01 c2                	add    edx,eax
c000f1a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f1a7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f1aa:	66 90                	xchg   ax,ax
c000f1ac:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f1b1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f1b5:	01 d0                	add    eax,edx
c000f1b7:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f1bc:	83 ec 0c             	sub    esp,0xc
c000f1bf:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f1c3:	e8 b4 98 ff ff       	call   c0008a7c <pbuf_clen>
c000f1c8:	83 c4 10             	add    esp,0x10
c000f1cb:	0f b6 c0             	movzx  eax,al
c000f1ce:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f1d2:	01 d0                	add    eax,edx
c000f1d4:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f1d9:	e9 b2 02 00 00       	jmp    c000f490 <tcp_write+0x5f4>
c000f1de:	66 90                	xchg   ax,ax
c000f1e0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f1e4:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f1e8:	0f b7 c0             	movzx  eax,ax
c000f1eb:	85 c0                	test   eax,eax
c000f1ed:	0f 84 9d 02 00 00    	je     c000f490 <tcp_write+0x5f4>
c000f1f3:	83 ec 08             	sub    esp,0x8
c000f1f6:	68 54 06 03 c0       	push   0xc0030654
c000f1fb:	68 46 f9 02 c0       	push   0xc002f946
c000f200:	e8 d7 08 01 00       	call   c001fadc <CPrintf>
c000f205:	83 c4 10             	add    esp,0x10
c000f208:	e9 83 02 00 00       	jmp    c000f490 <tcp_write+0x5f4>
c000f20d:	8d 76 00             	lea    esi,[esi+0x0]
c000f210:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f214:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c000f219:	89 d6                	mov    esi,edx
c000f21b:	29 c6                	sub    esi,eax
c000f21d:	89 f0                	mov    eax,esi
c000f21f:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c000f224:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f228:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000f22b:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f230:	89 d3                	mov    ebx,edx
c000f232:	29 c3                	sub    ebx,eax
c000f234:	89 d8                	mov    eax,ebx
c000f236:	66 89 44 24 20       	mov    WORD PTR [esp+0x20],ax
c000f23b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f23f:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c000f244:	0f b7 d8             	movzx  ebx,ax
c000f247:	0f b7 ca             	movzx  ecx,dx
c000f24a:	39 cb                	cmp    ebx,ecx
c000f24c:	76 02                	jbe    c000f250 <tcp_write+0x3b4>
c000f24e:	89 d0                	mov    eax,edx
c000f250:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000f255:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f25a:	83 e0 01             	and    eax,0x1
c000f25d:	0f 84 b1 00 00 00    	je     c000f314 <tcp_write+0x478>
c000f263:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f268:	0f 94 c0             	sete   al
c000f26b:	0f b6 f0             	movzx  esi,al
c000f26e:	0f b6 5c 24 08       	movzx  ebx,BYTE PTR [esp+0x8]
c000f273:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f277:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f27a:	0f b7 c8             	movzx  ecx,ax
c000f27d:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f282:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000f287:	01 d0                	add    eax,edx
c000f289:	0f b7 c0             	movzx  eax,ax
c000f28c:	83 ec 04             	sub    esp,0x4
c000f28f:	56                   	push   esi
c000f290:	53                   	push   ebx
c000f291:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f295:	8d 54 24 26          	lea    edx,[esp+0x26]
c000f299:	52                   	push   edx
c000f29a:	51                   	push   ecx
c000f29b:	50                   	push   eax
c000f29c:	6a 00                	push   0x0
c000f29e:	e8 89 f9 ff ff       	call   c000ec2c <tcp_pbuf_prealloc>
c000f2a3:	83 c4 20             	add    esp,0x20
c000f2a6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f2aa:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f2af:	0f 84 e3 03 00 00    	je     c000f698 <tcp_write+0x7fc>
c000f2b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f2b9:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f2bd:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000f2c2:	0f b7 c0             	movzx  eax,ax
c000f2c5:	39 c2                	cmp    edx,eax
c000f2c7:	76 17                	jbe    c000f2e0 <tcp_write+0x444>
c000f2c9:	83 ec 08             	sub    esp,0x8
c000f2cc:	68 84 06 03 c0       	push   0xc0030684
c000f2d1:	68 46 f9 02 c0       	push   0xc002f946
c000f2d6:	e8 01 08 01 00       	call   c001fadc <CPrintf>
c000f2db:	83 c4 10             	add    esp,0x10
c000f2de:	66 90                	xchg   ax,ax
c000f2e0:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f2e5:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f2ea:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000f2ee:	01 d1                	add    ecx,edx
c000f2f0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f2f4:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000f2f7:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000f2fc:	01 da                	add    edx,ebx
c000f2fe:	83 ec 04             	sub    esp,0x4
c000f301:	50                   	push   eax
c000f302:	51                   	push   ecx
c000f303:	52                   	push   edx
c000f304:	e8 71 10 ff ff       	call   c000037a <memcpy>
c000f309:	83 c4 10             	add    esp,0x10
c000f30c:	e9 a7 00 00 00       	jmp    c000f3b8 <tcp_write+0x51c>
c000f311:	8d 76 00             	lea    esi,[esi+0x0]
c000f314:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f319:	0f b7 c0             	movzx  eax,ax
c000f31c:	85 c0                	test   eax,eax
c000f31e:	74 18                	je     c000f338 <tcp_write+0x49c>
c000f320:	83 ec 08             	sub    esp,0x8
c000f323:	68 16 08 03 c0       	push   0xc0030816
c000f328:	68 46 f9 02 c0       	push   0xc002f946
c000f32d:	e8 aa 07 01 00       	call   c001fadc <CPrintf>
c000f332:	83 c4 10             	add    esp,0x10
c000f335:	8d 76 00             	lea    esi,[esi+0x0]
c000f338:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f33d:	83 ec 04             	sub    esp,0x4
c000f340:	6a 01                	push   0x1
c000f342:	50                   	push   eax
c000f343:	6a 00                	push   0x0
c000f345:	e8 36 91 ff ff       	call   c0008480 <pbuf_alloc>
c000f34a:	83 c4 10             	add    esp,0x10
c000f34d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f351:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f356:	0f 84 40 03 00 00    	je     c000f69c <tcp_write+0x800>
c000f35c:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f361:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f365:	01 c2                	add    edx,eax
c000f367:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f36b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f36e:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f373:	83 ec 04             	sub    esp,0x4
c000f376:	6a 00                	push   0x0
c000f378:	50                   	push   eax
c000f379:	6a 00                	push   0x0
c000f37b:	e8 00 91 ff ff       	call   c0008480 <pbuf_alloc>
c000f380:	83 c4 10             	add    esp,0x10
c000f383:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f387:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f38c:	75 16                	jne    c000f3a4 <tcp_write+0x508>
c000f38e:	83 ec 0c             	sub    esp,0xc
c000f391:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f395:	e8 0e 8f ff ff       	call   c00082a8 <pbuf_free>
c000f39a:	83 c4 10             	add    esp,0x10
c000f39d:	e9 02 03 00 00       	jmp    c000f6a4 <tcp_write+0x808>
c000f3a2:	66 90                	xchg   ax,ax
c000f3a4:	83 ec 08             	sub    esp,0x8
c000f3a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f3ab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f3af:	e8 2c 97 ff ff       	call   c0008ae0 <pbuf_cat>
c000f3b4:	83 c4 10             	add    esp,0x10
c000f3b7:	90                   	nop
c000f3b8:	83 ec 0c             	sub    esp,0xc
c000f3bb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f3bf:	e8 b8 96 ff ff       	call   c0008a7c <pbuf_clen>
c000f3c4:	83 c4 10             	add    esp,0x10
c000f3c7:	0f b6 c0             	movzx  eax,al
c000f3ca:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f3ce:	01 d0                	add    eax,edx
c000f3d0:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f3d5:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f3da:	83 f8 02             	cmp    eax,0x2
c000f3dd:	77 0d                	ja     c000f3ec <tcp_write+0x550>
c000f3df:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f3e4:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f3e9:	76 15                	jbe    c000f400 <tcp_write+0x564>
c000f3eb:	90                   	nop
c000f3ec:	83 ec 0c             	sub    esp,0xc
c000f3ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f3f3:	e8 b0 8e ff ff       	call   c00082a8 <pbuf_free>
c000f3f8:	83 c4 10             	add    esp,0x10
c000f3fb:	e9 a4 02 00 00       	jmp    c000f6a4 <tcp_write+0x808>
c000f400:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c000f405:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f409:	8b 4a 6c             	mov    ecx,DWORD PTR [edx+0x6c]
c000f40c:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f411:	01 ca                	add    edx,ecx
c000f413:	83 ec 0c             	sub    esp,0xc
c000f416:	50                   	push   eax
c000f417:	52                   	push   edx
c000f418:	6a 00                	push   0x0
c000f41a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f41e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000f422:	e8 61 f6 ff ff       	call   c000ea88 <tcp_create_segment>
c000f427:	83 c4 20             	add    esp,0x20
c000f42a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f42e:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f433:	0f 84 67 02 00 00    	je     c000f6a0 <tcp_write+0x804>
c000f439:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f43e:	75 0c                	jne    c000f44c <tcp_write+0x5b0>
c000f440:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f444:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f448:	eb 2a                	jmp    c000f474 <tcp_write+0x5d8>
c000f44a:	66 90                	xchg   ax,ax
c000f44c:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f451:	75 15                	jne    c000f468 <tcp_write+0x5cc>
c000f453:	83 ec 08             	sub    esp,0x8
c000f456:	68 24 08 03 c0       	push   0xc0030824
c000f45b:	68 46 f9 02 c0       	push   0xc002f946
c000f460:	e8 77 06 01 00       	call   c001fadc <CPrintf>
c000f465:	83 c4 10             	add    esp,0x10
c000f468:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f46c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f470:	89 10                	mov    DWORD PTR [eax],edx
c000f472:	66 90                	xchg   ax,ax
c000f474:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f478:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f47c:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f481:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000f486:	01 d0                	add    eax,edx
c000f488:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f48d:	8d 76 00             	lea    esi,[esi+0x0]
c000f490:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f495:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f49a:	39 c2                	cmp    edx,eax
c000f49c:	0f 82 6e fd ff ff    	jb     c000f210 <tcp_write+0x374>
c000f4a2:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c000f4a7:	85 c0                	test   eax,eax
c000f4a9:	0f 84 9d 00 00 00    	je     c000f54c <tcp_write+0x6b0>
c000f4af:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f4b3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f4b6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f4ba:	eb 70                	jmp    c000f52c <tcp_write+0x690>
c000f4bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4c0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f4c3:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f4c8:	01 d0                	add    eax,edx
c000f4ca:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f4ce:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000f4d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4d6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4d8:	85 c0                	test   eax,eax
c000f4da:	75 44                	jne    c000f520 <tcp_write+0x684>
c000f4dc:	0f b7 54 24 36       	movzx  edx,WORD PTR [esp+0x36]
c000f4e1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4e5:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000f4e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4ec:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f4f0:	0f b7 c0             	movzx  eax,ax
c000f4f3:	01 c8                	add    eax,ecx
c000f4f5:	83 ec 04             	sub    esp,0x4
c000f4f8:	52                   	push   edx
c000f4f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f4fd:	50                   	push   eax
c000f4fe:	e8 77 0e ff ff       	call   c000037a <memcpy>
c000f503:	83 c4 10             	add    esp,0x10
c000f506:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f50a:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f50e:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f513:	01 d0                	add    eax,edx
c000f515:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f519:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c000f51d:	8d 76 00             	lea    esi,[esi+0x0]
c000f520:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f524:	8b 00                	mov    eax,DWORD PTR [eax]
c000f526:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f52a:	66 90                	xchg   ax,ax
c000f52c:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000f531:	75 89                	jne    c000f4bc <tcp_write+0x620>
c000f533:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f537:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f53a:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f53f:	01 d0                	add    eax,edx
c000f541:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000f545:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000f549:	8d 76 00             	lea    esi,[esi+0x0]
c000f54c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f551:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f555:	66 89 42 76          	mov    WORD PTR [edx+0x76],ax
c000f559:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f55e:	74 4c                	je     c000f5ac <tcp_write+0x710>
c000f560:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f565:	75 15                	jne    c000f57c <tcp_write+0x6e0>
c000f567:	83 ec 08             	sub    esp,0x8
c000f56a:	68 c4 06 03 c0       	push   0xc00306c4
c000f56f:	68 46 f9 02 c0       	push   0xc002f946
c000f574:	e8 63 05 01 00       	call   c001fadc <CPrintf>
c000f579:	83 c4 10             	add    esp,0x10
c000f57c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f580:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f583:	83 ec 08             	sub    esp,0x8
c000f586:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000f58a:	50                   	push   eax
c000f58b:	e8 50 95 ff ff       	call   c0008ae0 <pbuf_cat>
c000f590:	83 c4 10             	add    esp,0x10
c000f593:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f597:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000f59a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f59e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f5a1:	01 d0                	add    eax,edx
c000f5a3:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000f5a7:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000f5ab:	90                   	nop
c000f5ac:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f5b1:	75 0d                	jne    c000f5c0 <tcp_write+0x724>
c000f5b3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f5b7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f5bb:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000f5be:	eb 0c                	jmp    c000f5cc <tcp_write+0x730>
c000f5c0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f5c4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f5c8:	89 10                	mov    DWORD PTR [eax],edx
c000f5ca:	66 90                	xchg   ax,ax
c000f5cc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f5d0:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000f5d3:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f5d8:	01 c2                	add    edx,eax
c000f5da:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f5de:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000f5e1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f5e5:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000f5e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f5ed:	89 d6                	mov    esi,edx
c000f5ef:	29 c6                	sub    esi,eax
c000f5f1:	89 f0                	mov    eax,esi
c000f5f3:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f5f7:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000f5fb:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f5ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f603:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000f607:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f60b:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f60e:	0f b7 c0             	movzx  eax,ax
c000f611:	85 c0                	test   eax,eax
c000f613:	74 2b                	je     c000f640 <tcp_write+0x7a4>
c000f615:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f619:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f61c:	85 c0                	test   eax,eax
c000f61e:	75 20                	jne    c000f640 <tcp_write+0x7a4>
c000f620:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f624:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f627:	85 c0                	test   eax,eax
c000f629:	75 15                	jne    c000f640 <tcp_write+0x7a4>
c000f62b:	83 ec 08             	sub    esp,0x8
c000f62e:	68 35 08 03 c0       	push   0xc0030835
c000f633:	68 46 f9 02 c0       	push   0xc002f946
c000f638:	e8 9f 04 01 00       	call   c001fadc <CPrintf>
c000f63d:	83 c4 10             	add    esp,0x10
c000f640:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f645:	74 41                	je     c000f688 <tcp_write+0x7ec>
c000f647:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f64b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f64e:	85 c0                	test   eax,eax
c000f650:	74 36                	je     c000f688 <tcp_write+0x7ec>
c000f652:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f657:	83 e0 02             	and    eax,0x2
c000f65a:	75 2c                	jne    c000f688 <tcp_write+0x7ec>
c000f65c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f660:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f663:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000f667:	83 ec 0c             	sub    esp,0xc
c000f66a:	6a 08                	push   0x8
c000f66c:	e8 77 15 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000f671:	83 c4 10             	add    esp,0x10
c000f674:	89 c1                	mov    ecx,eax
c000f676:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f67a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000f67d:	89 d8                	mov    eax,ebx
c000f67f:	09 c8                	or     eax,ecx
c000f681:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000f685:	8d 76 00             	lea    esi,[esi+0x0]
c000f688:	b0 00                	mov    al,0x0
c000f68a:	e9 a5 00 00 00       	jmp    c000f734 <tcp_write+0x898>
c000f68f:	90                   	nop
c000f690:	90                   	nop
c000f691:	eb 11                	jmp    c000f6a4 <tcp_write+0x808>
c000f693:	90                   	nop
c000f694:	90                   	nop
c000f695:	eb 0d                	jmp    c000f6a4 <tcp_write+0x808>
c000f697:	90                   	nop
c000f698:	90                   	nop
c000f699:	eb 09                	jmp    c000f6a4 <tcp_write+0x808>
c000f69b:	90                   	nop
c000f69c:	90                   	nop
c000f69d:	eb 05                	jmp    c000f6a4 <tcp_write+0x808>
c000f69f:	90                   	nop
c000f6a0:	90                   	nop
c000f6a1:	8d 76 00             	lea    esi,[esi+0x0]
c000f6a4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f6a8:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f6ab:	83 c8 80             	or     eax,0xffffff80
c000f6ae:	88 c2                	mov    dl,al
c000f6b0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f6b4:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f6b7:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f6bd:	83 c0 01             	add    eax,0x1
c000f6c0:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f6c6:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f6cb:	74 0f                	je     c000f6dc <tcp_write+0x840>
c000f6cd:	83 ec 0c             	sub    esp,0xc
c000f6d0:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f6d4:	e8 cf 8b ff ff       	call   c00082a8 <pbuf_free>
c000f6d9:	83 c4 10             	add    esp,0x10
c000f6dc:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f6e1:	74 11                	je     c000f6f4 <tcp_write+0x858>
c000f6e3:	83 ec 0c             	sub    esp,0xc
c000f6e6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f6ea:	e8 75 a8 ff ff       	call   c0009f64 <tcp_segs_free>
c000f6ef:	83 c4 10             	add    esp,0x10
c000f6f2:	66 90                	xchg   ax,ax
c000f6f4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f6f8:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f6fb:	0f b7 c0             	movzx  eax,ax
c000f6fe:	85 c0                	test   eax,eax
c000f700:	74 2e                	je     c000f730 <tcp_write+0x894>
c000f702:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f706:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f709:	85 c0                	test   eax,eax
c000f70b:	75 23                	jne    c000f730 <tcp_write+0x894>
c000f70d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f711:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f714:	85 c0                	test   eax,eax
c000f716:	75 18                	jne    c000f730 <tcp_write+0x894>
c000f718:	83 ec 08             	sub    esp,0x8
c000f71b:	68 35 08 03 c0       	push   0xc0030835
c000f720:	68 46 f9 02 c0       	push   0xc002f946
c000f725:	e8 b2 03 01 00       	call   c001fadc <CPrintf>
c000f72a:	83 c4 10             	add    esp,0x10
c000f72d:	8d 76 00             	lea    esi,[esi+0x0]
c000f730:	b0 ff                	mov    al,0xff
c000f732:	66 90                	xchg   ax,ax
c000f734:	83 c4 54             	add    esp,0x54
c000f737:	5b                   	pop    ebx
c000f738:	5e                   	pop    esi
c000f739:	c3                   	ret    
c000f73a:	66 90                	xchg   ax,ax

c000f73c <tcp_enqueue_flags>:
c000f73c:	83 ec 3c             	sub    esp,0x3c
c000f73f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f743:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000f747:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f74c:	c6 44 24 27 00       	mov    BYTE PTR [esp+0x27],0x0
c000f751:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f756:	83 e0 03             	and    eax,0x3
c000f759:	75 15                	jne    c000f770 <tcp_enqueue_flags+0x34>
c000f75b:	83 ec 08             	sub    esp,0x8
c000f75e:	68 fc 06 03 c0       	push   0xc00306fc
c000f763:	68 46 f9 02 c0       	push   0xc002f946
c000f768:	e8 6f 03 01 00       	call   c001fadc <CPrintf>
c000f76d:	83 c4 10             	add    esp,0x10
c000f770:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f774:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f777:	0f b7 c0             	movzx  eax,ax
c000f77a:	83 f8 01             	cmp    eax,0x1
c000f77d:	77 11                	ja     c000f790 <tcp_enqueue_flags+0x54>
c000f77f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f783:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f786:	0f b7 c0             	movzx  eax,ax
c000f789:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f78e:	76 2c                	jbe    c000f7bc <tcp_enqueue_flags+0x80>
c000f790:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f796:	83 c0 01             	add    eax,0x1
c000f799:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f79f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f7a3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f7a6:	83 c8 80             	or     eax,0xffffff80
c000f7a9:	88 c2                	mov    dl,al
c000f7ab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f7af:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f7b2:	b0 ff                	mov    al,0xff
c000f7b4:	e9 6b 02 00 00       	jmp    c000fa24 <tcp_enqueue_flags+0x2e8>
c000f7b9:	8d 76 00             	lea    esi,[esi+0x0]
c000f7bc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f7c1:	83 e0 02             	and    eax,0x2
c000f7c4:	74 06                	je     c000f7cc <tcp_enqueue_flags+0x90>
c000f7c6:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000f7cb:	90                   	nop
c000f7cc:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000f7d1:	c1 e0 02             	shl    eax,0x2
c000f7d4:	83 e0 04             	and    eax,0x4
c000f7d7:	88 c2                	mov    dl,al
c000f7d9:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000f7de:	83 e0 02             	and    eax,0x2
c000f7e1:	74 05                	je     c000f7e8 <tcp_enqueue_flags+0xac>
c000f7e3:	b0 0c                	mov    al,0xc
c000f7e5:	eb 05                	jmp    c000f7ec <tcp_enqueue_flags+0xb0>
c000f7e7:	90                   	nop
c000f7e8:	b0 00                	mov    al,0x0
c000f7ea:	66 90                	xchg   ax,ax
c000f7ec:	01 d0                	add    eax,edx
c000f7ee:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c000f7f2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f7f6:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000f7fa:	0f b7 c0             	movzx  eax,ax
c000f7fd:	85 c0                	test   eax,eax
c000f7ff:	75 17                	jne    c000f818 <tcp_enqueue_flags+0xdc>
c000f801:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f807:	83 c0 01             	add    eax,0x1
c000f80a:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f810:	b0 ff                	mov    al,0xff
c000f812:	e9 0d 02 00 00       	jmp    c000fa24 <tcp_enqueue_flags+0x2e8>
c000f817:	90                   	nop
c000f818:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000f81d:	83 ec 04             	sub    esp,0x4
c000f820:	6a 00                	push   0x0
c000f822:	50                   	push   eax
c000f823:	6a 00                	push   0x0
c000f825:	e8 56 8c ff ff       	call   c0008480 <pbuf_alloc>
c000f82a:	83 c4 10             	add    esp,0x10
c000f82d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f831:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000f836:	75 2c                	jne    c000f864 <tcp_enqueue_flags+0x128>
c000f838:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f83c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f83f:	83 c8 80             	or     eax,0xffffff80
c000f842:	88 c2                	mov    dl,al
c000f844:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f848:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f84b:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f851:	83 c0 01             	add    eax,0x1
c000f854:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f85a:	b0 ff                	mov    al,0xff
c000f85c:	e9 c3 01 00 00       	jmp    c000fa24 <tcp_enqueue_flags+0x2e8>
c000f861:	8d 76 00             	lea    esi,[esi+0x0]
c000f864:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f868:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000f86c:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000f871:	0f b7 d2             	movzx  edx,dx
c000f874:	0f b7 c0             	movzx  eax,ax
c000f877:	39 c2                	cmp    edx,eax
c000f879:	73 15                	jae    c000f890 <tcp_enqueue_flags+0x154>
c000f87b:	83 ec 08             	sub    esp,0x8
c000f87e:	68 54 07 03 c0       	push   0xc0030754
c000f883:	68 46 f9 02 c0       	push   0xc002f946
c000f888:	e8 4f 02 01 00       	call   c001fadc <CPrintf>
c000f88d:	83 c4 10             	add    esp,0x10
c000f890:	0f b6 4c 24 2f       	movzx  ecx,BYTE PTR [esp+0x2f]
c000f895:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f899:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000f89c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f8a1:	83 ec 0c             	sub    esp,0xc
c000f8a4:	51                   	push   ecx
c000f8a5:	52                   	push   edx
c000f8a6:	50                   	push   eax
c000f8a7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000f8ab:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000f8af:	e8 d4 f1 ff ff       	call   c000ea88 <tcp_create_segment>
c000f8b4:	83 c4 20             	add    esp,0x20
c000f8b7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f8bb:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000f8c0:	75 2a                	jne    c000f8ec <tcp_enqueue_flags+0x1b0>
c000f8c2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f8c6:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f8c9:	83 c8 80             	or     eax,0xffffff80
c000f8cc:	88 c2                	mov    dl,al
c000f8ce:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f8d2:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f8d5:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f8db:	83 c0 01             	add    eax,0x1
c000f8de:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f8e4:	b0 ff                	mov    al,0xff
c000f8e6:	e9 39 01 00 00       	jmp    c000fa24 <tcp_enqueue_flags+0x2e8>
c000f8eb:	90                   	nop
c000f8ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f8f0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f8f3:	0f b7 c0             	movzx  eax,ax
c000f8f6:	85 c0                	test   eax,eax
c000f8f8:	74 16                	je     c000f910 <tcp_enqueue_flags+0x1d4>
c000f8fa:	83 ec 08             	sub    esp,0x8
c000f8fd:	68 90 07 03 c0       	push   0xc0030790
c000f902:	68 46 f9 02 c0       	push   0xc002f946
c000f907:	e8 d0 01 01 00       	call   c001fadc <CPrintf>
c000f90c:	83 c4 10             	add    esp,0x10
c000f90f:	90                   	nop
c000f910:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f914:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f917:	85 c0                	test   eax,eax
c000f919:	75 0d                	jne    c000f928 <tcp_enqueue_flags+0x1ec>
c000f91b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f91f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f923:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000f926:	eb 30                	jmp    c000f958 <tcp_enqueue_flags+0x21c>
c000f928:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f92c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f92f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f933:	eb 0f                	jmp    c000f944 <tcp_enqueue_flags+0x208>
c000f935:	8d 76 00             	lea    esi,[esi+0x0]
c000f938:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f93c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f93e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f942:	66 90                	xchg   ax,ax
c000f944:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f948:	8b 00                	mov    eax,DWORD PTR [eax]
c000f94a:	85 c0                	test   eax,eax
c000f94c:	75 ea                	jne    c000f938 <tcp_enqueue_flags+0x1fc>
c000f94e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f952:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f956:	89 10                	mov    DWORD PTR [eax],edx
c000f958:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f95c:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000f962:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f967:	83 e0 02             	and    eax,0x2
c000f96a:	75 0c                	jne    c000f978 <tcp_enqueue_flags+0x23c>
c000f96c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f971:	83 e0 01             	and    eax,0x1
c000f974:	74 26                	je     c000f99c <tcp_enqueue_flags+0x260>
c000f976:	66 90                	xchg   ax,ax
c000f978:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f97c:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
c000f97f:	8d 50 01             	lea    edx,[eax+0x1]
c000f982:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f986:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000f989:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f98d:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000f991:	83 e8 01             	sub    eax,0x1
c000f994:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f998:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000f99c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f9a1:	83 e0 01             	and    eax,0x1
c000f9a4:	74 16                	je     c000f9bc <tcp_enqueue_flags+0x280>
c000f9a6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9aa:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f9ad:	83 c8 20             	or     eax,0x20
c000f9b0:	88 c2                	mov    dl,al
c000f9b2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9b6:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f9b9:	8d 76 00             	lea    esi,[esi+0x0]
c000f9bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f9c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f9c3:	83 ec 0c             	sub    esp,0xc
c000f9c6:	50                   	push   eax
c000f9c7:	e8 b0 90 ff ff       	call   c0008a7c <pbuf_clen>
c000f9cc:	83 c4 10             	add    esp,0x10
c000f9cf:	88 c1                	mov    cl,al
c000f9d1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9d5:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000f9d8:	0f b6 c1             	movzx  eax,cl
c000f9db:	01 d0                	add    eax,edx
c000f9dd:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f9e1:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000f9e5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9e9:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f9ec:	0f b7 c0             	movzx  eax,ax
c000f9ef:	85 c0                	test   eax,eax
c000f9f1:	74 2d                	je     c000fa20 <tcp_enqueue_flags+0x2e4>
c000f9f3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9f7:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f9fa:	85 c0                	test   eax,eax
c000f9fc:	75 22                	jne    c000fa20 <tcp_enqueue_flags+0x2e4>
c000f9fe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa02:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fa05:	85 c0                	test   eax,eax
c000fa07:	75 17                	jne    c000fa20 <tcp_enqueue_flags+0x2e4>
c000fa09:	83 ec 08             	sub    esp,0x8
c000fa0c:	68 bc 07 03 c0       	push   0xc00307bc
c000fa11:	68 46 f9 02 c0       	push   0xc002f946
c000fa16:	e8 c1 00 01 00       	call   c001fadc <CPrintf>
c000fa1b:	83 c4 10             	add    esp,0x10
c000fa1e:	66 90                	xchg   ax,ax
c000fa20:	b0 00                	mov    al,0x0
c000fa22:	66 90                	xchg   ax,ax
c000fa24:	83 c4 3c             	add    esp,0x3c
c000fa27:	c3                   	ret    

c000fa28 <tcp_send_fin>:
c000fa28:	53                   	push   ebx
c000fa29:	83 ec 18             	sub    esp,0x18
c000fa2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa30:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fa33:	85 c0                	test   eax,eax
c000fa35:	74 75                	je     c000faac <tcp_send_fin+0x84>
c000fa37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa3b:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fa3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa42:	eb 0c                	jmp    c000fa50 <tcp_send_fin+0x28>
c000fa44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa48:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa4e:	66 90                	xchg   ax,ax
c000fa50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa54:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa56:	85 c0                	test   eax,eax
c000fa58:	75 ea                	jne    c000fa44 <tcp_send_fin+0x1c>
c000fa5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa5e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fa61:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000fa65:	0f b7 c0             	movzx  eax,ax
c000fa68:	83 ec 0c             	sub    esp,0xc
c000fa6b:	50                   	push   eax
c000fa6c:	e8 77 11 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fa71:	83 c4 10             	add    esp,0x10
c000fa74:	0f b7 c0             	movzx  eax,ax
c000fa77:	83 e0 07             	and    eax,0x7
c000fa7a:	75 30                	jne    c000faac <tcp_send_fin+0x84>
c000fa7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa80:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fa83:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000fa87:	83 ec 0c             	sub    esp,0xc
c000fa8a:	6a 01                	push   0x1
c000fa8c:	e8 57 11 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fa91:	83 c4 10             	add    esp,0x10
c000fa94:	89 c1                	mov    ecx,eax
c000fa96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa9a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fa9d:	89 d8                	mov    eax,ebx
c000fa9f:	09 c8                	or     eax,ecx
c000faa1:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000faa5:	b0 00                	mov    al,0x0
c000faa7:	eb 17                	jmp    c000fac0 <tcp_send_fin+0x98>
c000faa9:	8d 76 00             	lea    esi,[esi+0x0]
c000faac:	83 ec 08             	sub    esp,0x8
c000faaf:	6a 01                	push   0x1
c000fab1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fab5:	e8 82 fc ff ff       	call   c000f73c <tcp_enqueue_flags>
c000faba:	83 c4 10             	add    esp,0x10
c000fabd:	8d 76 00             	lea    esi,[esi+0x0]
c000fac0:	83 c4 18             	add    esp,0x18
c000fac3:	5b                   	pop    ebx
c000fac4:	c3                   	ret    
c000fac5:	8d 76 00             	lea    esi,[esi+0x0]

c000fac8 <tcp_send_empty_ack>:
c000fac8:	53                   	push   ebx
c000fac9:	83 ec 18             	sub    esp,0x18
c000facc:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fad1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fad5:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000fad8:	83 ec 0c             	sub    esp,0xc
c000fadb:	50                   	push   eax
c000fadc:	e8 2b 11 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000fae1:	83 c4 10             	add    esp,0x10
c000fae4:	89 c2                	mov    edx,eax
c000fae6:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000faeb:	52                   	push   edx
c000faec:	6a 00                	push   0x0
c000faee:	50                   	push   eax
c000faef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000faf3:	e8 34 ee ff ff       	call   c000e92c <tcp_output_alloc_header>
c000faf8:	83 c4 10             	add    esp,0x10
c000fafb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000faff:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fb04:	75 0a                	jne    c000fb10 <tcp_send_empty_ack+0x48>
c000fb06:	b0 fe                	mov    al,0xfe
c000fb08:	e9 97 00 00 00       	jmp    c000fba4 <tcp_send_empty_ack+0xdc>
c000fb0d:	8d 76 00             	lea    esi,[esi+0x0]
c000fb10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fb14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fb17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fb1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb1f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fb22:	83 e0 fc             	and    eax,0xfffffffc
c000fb25:	88 c2                	mov    dl,al
c000fb27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb2b:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fb2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fb32:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fb35:	0f b7 d0             	movzx  edx,ax
c000fb38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb3c:	8d 48 04             	lea    ecx,[eax+0x4]
c000fb3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb43:	83 ec 0c             	sub    esp,0xc
c000fb46:	52                   	push   edx
c000fb47:	6a 06                	push   0x6
c000fb49:	51                   	push   ecx
c000fb4a:	50                   	push   eax
c000fb4b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fb4f:	e8 70 35 00 00       	call   c00130c4 <inet_chksum_pseudo>
c000fb54:	83 c4 20             	add    esp,0x20
c000fb57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000fb5b:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c000fb5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb63:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000fb66:	0f b6 c8             	movzx  ecx,al
c000fb69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb6d:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fb70:	0f b6 d0             	movzx  edx,al
c000fb73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb77:	8d 58 04             	lea    ebx,[eax+0x4]
c000fb7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb7e:	83 ec 08             	sub    esp,0x8
c000fb81:	6a 06                	push   0x6
c000fb83:	51                   	push   ecx
c000fb84:	52                   	push   edx
c000fb85:	53                   	push   ebx
c000fb86:	50                   	push   eax
c000fb87:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fb8b:	e8 68 41 00 00       	call   c0013cf8 <ip_output>
c000fb90:	83 c4 20             	add    esp,0x20
c000fb93:	83 ec 0c             	sub    esp,0xc
c000fb96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fb9a:	e8 09 87 ff ff       	call   c00082a8 <pbuf_free>
c000fb9f:	83 c4 10             	add    esp,0x10
c000fba2:	b0 00                	mov    al,0x0
c000fba4:	83 c4 18             	add    esp,0x18
c000fba7:	5b                   	pop    ebx
c000fba8:	c3                   	ret    
c000fba9:	8d 76 00             	lea    esi,[esi+0x0]

c000fbac <tcp_output_segment>:
c000fbac:	56                   	push   esi
c000fbad:	53                   	push   ebx
c000fbae:	83 ec 14             	sub    esp,0x14
c000fbb1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fbb5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000fbb8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fbbc:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fbbf:	83 ec 0c             	sub    esp,0xc
c000fbc2:	50                   	push   eax
c000fbc3:	e8 44 10 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000fbc8:	83 c4 10             	add    esp,0x10
c000fbcb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000fbce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fbd2:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fbd6:	0f b7 c0             	movzx  eax,ax
c000fbd9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fbdd:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fbe0:	83 ec 0c             	sub    esp,0xc
c000fbe3:	50                   	push   eax
c000fbe4:	e8 ff 0f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fbe9:	83 c4 10             	add    esp,0x10
c000fbec:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000fbf0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fbf4:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000fbf7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fbfb:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fbff:	0f b7 c0             	movzx  eax,ax
c000fc02:	01 c2                	add    edx,eax
c000fc04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc08:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000fc0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc0f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fc12:	83 c0 14             	add    eax,0x14
c000fc15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc1d:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fc20:	0f b6 c0             	movzx  eax,al
c000fc23:	83 e0 01             	and    eax,0x1
c000fc26:	74 10                	je     c000fc38 <tcp_output_segment+0x8c>
c000fc28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc2c:	c7 00 02 04 02 18    	mov    DWORD PTR [eax],0x18020402
c000fc32:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c000fc37:	90                   	nop
c000fc38:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc3c:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000fc40:	98                   	cwde   
c000fc41:	83 f8 ff             	cmp    eax,0xffffffff
c000fc44:	75 0a                	jne    c000fc50 <tcp_output_segment+0xa4>
c000fc46:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc4a:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000fc50:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc54:	85 c0                	test   eax,eax
c000fc56:	74 0c                	je     c000fc64 <tcp_output_segment+0xb8>
c000fc58:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc5c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc5e:	85 c0                	test   eax,eax
c000fc60:	75 32                	jne    c000fc94 <tcp_output_segment+0xe8>
c000fc62:	66 90                	xchg   ax,ax
c000fc64:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc68:	83 c0 04             	add    eax,0x4
c000fc6b:	83 ec 0c             	sub    esp,0xc
c000fc6e:	50                   	push   eax
c000fc6f:	e8 dc 38 00 00       	call   c0013550 <ip_route>
c000fc74:	83 c4 10             	add    esp,0x10
c000fc77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fc7b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fc80:	0f 84 46 01 00 00    	je     c000fdcc <tcp_output_segment+0x220>
c000fc86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fc8a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000fc8d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc91:	89 10                	mov    DWORD PTR [eax],edx
c000fc93:	90                   	nop
c000fc94:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc98:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fc9b:	85 c0                	test   eax,eax
c000fc9d:	75 2d                	jne    c000fccc <tcp_output_segment+0x120>
c000fc9f:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000fca5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fca9:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000fcac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcb0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fcb3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fcb6:	83 ec 0c             	sub    esp,0xc
c000fcb9:	50                   	push   eax
c000fcba:	e8 4d 0f ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000fcbf:	83 c4 10             	add    esp,0x10
c000fcc2:	89 c2                	mov    edx,eax
c000fcc4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcc8:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c000fccb:	90                   	nop
c000fccc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcd0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fcd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcd7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fcda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fcdd:	29 c2                	sub    edx,eax
c000fcdf:	89 d0                	mov    eax,edx
c000fce1:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000fce6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fced:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000fcf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcf5:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000fcf8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000fcfd:	89 d6                	mov    esi,edx
c000fcff:	29 c6                	sub    esi,eax
c000fd01:	89 f0                	mov    eax,esi
c000fd03:	66 89 41 0a          	mov    WORD PTR [ecx+0xa],ax
c000fd07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd0b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd0e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000fd11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd15:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000fd18:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000fd1d:	89 d6                	mov    esi,edx
c000fd1f:	29 c6                	sub    esi,eax
c000fd21:	89 f0                	mov    eax,esi
c000fd23:	66 89 41 08          	mov    WORD PTR [ecx+0x8],ax
c000fd27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd2b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd2e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fd32:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000fd35:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fd38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd3c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fd3f:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000fd45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd49:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd4c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fd4f:	0f b7 c8             	movzx  ecx,ax
c000fd52:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd56:	8d 70 04             	lea    esi,[eax+0x4]
c000fd59:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fd5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd61:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd64:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000fd68:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c000fd6b:	83 ec 0c             	sub    esp,0xc
c000fd6e:	51                   	push   ecx
c000fd6f:	6a 06                	push   0x6
c000fd71:	56                   	push   esi
c000fd72:	52                   	push   edx
c000fd73:	50                   	push   eax
c000fd74:	e8 4b 33 00 00       	call   c00130c4 <inet_chksum_pseudo>
c000fd79:	83 c4 20             	add    esp,0x20
c000fd7c:	66 89 43 10          	mov    WORD PTR [ebx+0x10],ax
c000fd80:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c000fd86:	83 c0 01             	add    eax,0x1
c000fd89:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c000fd8f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd93:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000fd96:	0f b6 d8             	movzx  ebx,al
c000fd99:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd9d:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fda0:	0f b6 c8             	movzx  ecx,al
c000fda3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fda7:	8d 70 04             	lea    esi,[eax+0x4]
c000fdaa:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fdae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fdb5:	83 ec 08             	sub    esp,0x8
c000fdb8:	6a 06                	push   0x6
c000fdba:	53                   	push   ebx
c000fdbb:	51                   	push   ecx
c000fdbc:	56                   	push   esi
c000fdbd:	52                   	push   edx
c000fdbe:	50                   	push   eax
c000fdbf:	e8 34 3f 00 00       	call   c0013cf8 <ip_output>
c000fdc4:	83 c4 20             	add    esp,0x20
c000fdc7:	eb 07                	jmp    c000fdd0 <tcp_output_segment+0x224>
c000fdc9:	8d 76 00             	lea    esi,[esi+0x0]
c000fdcc:	90                   	nop
c000fdcd:	8d 76 00             	lea    esi,[esi+0x0]
c000fdd0:	83 c4 14             	add    esp,0x14
c000fdd3:	5b                   	pop    ebx
c000fdd4:	5e                   	pop    esi
c000fdd5:	c3                   	ret    
c000fdd6:	66 90                	xchg   ax,ax

c000fdd8 <tcp_output>:
c000fdd8:	56                   	push   esi
c000fdd9:	53                   	push   ebx
c000fdda:	83 ec 24             	sub    esp,0x24
c000fddd:	a1 88 68 03 c0       	mov    eax,ds:0xc0036888
c000fde2:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000fde6:	75 08                	jne    c000fdf0 <tcp_output+0x18>
c000fde8:	b0 00                	mov    al,0x0
c000fdea:	e9 6d 04 00 00       	jmp    c001025c <tcp_output+0x484>
c000fdef:	90                   	nop
c000fdf0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fdf4:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000fdf8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fdfc:	8b 52 60             	mov    edx,DWORD PTR [edx+0x60]
c000fdff:	0f b7 d8             	movzx  ebx,ax
c000fe02:	0f b7 ca             	movzx  ecx,dx
c000fe05:	39 cb                	cmp    ebx,ecx
c000fe07:	76 03                	jbe    c000fe0c <tcp_output+0x34>
c000fe09:	89 d0                	mov    eax,edx
c000fe0b:	90                   	nop
c000fe0c:	0f b7 c0             	movzx  eax,ax
c000fe0f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fe13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fe17:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fe1a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fe1e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fe22:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fe25:	0f b6 c0             	movzx  eax,al
c000fe28:	83 e0 02             	and    eax,0x2
c000fe2b:	74 4f                	je     c000fe7c <tcp_output+0xa4>
c000fe2d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000fe32:	74 34                	je     c000fe68 <tcp_output+0x90>
c000fe34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fe38:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fe3b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe3e:	83 ec 0c             	sub    esp,0xc
c000fe41:	50                   	push   eax
c000fe42:	e8 c5 0d ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000fe47:	83 c4 10             	add    esp,0x10
c000fe4a:	89 c2                	mov    edx,eax
c000fe4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fe50:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000fe53:	29 c2                	sub    edx,eax
c000fe55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fe59:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fe5c:	0f b7 c0             	movzx  eax,ax
c000fe5f:	01 d0                	add    eax,edx
c000fe61:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000fe65:	73 15                	jae    c000fe7c <tcp_output+0xa4>
c000fe67:	90                   	nop
c000fe68:	83 ec 0c             	sub    esp,0xc
c000fe6b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000fe6f:	e8 54 fc ff ff       	call   c000fac8 <tcp_send_empty_ack>
c000fe74:	83 c4 10             	add    esp,0x10
c000fe77:	e9 e0 03 00 00       	jmp    c001025c <tcp_output+0x484>
c000fe7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fe80:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000fe83:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe87:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000fe8c:	0f 84 ea 02 00 00    	je     c001017c <tcp_output+0x3a4>
c000fe92:	eb 0c                	jmp    c000fea0 <tcp_output+0xc8>
c000fe94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fe98:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe9e:	66 90                	xchg   ax,ax
c000fea0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fea4:	8b 00                	mov    eax,DWORD PTR [eax]
c000fea6:	85 c0                	test   eax,eax
c000fea8:	75 ea                	jne    c000fe94 <tcp_output+0xbc>
c000feaa:	e9 cd 02 00 00       	jmp    c001017c <tcp_output+0x3a4>
c000feaf:	90                   	nop
c000feb0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000feb4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000feb7:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000febb:	0f b7 c0             	movzx  eax,ax
c000febe:	83 ec 0c             	sub    esp,0xc
c000fec1:	50                   	push   eax
c000fec2:	e8 21 0d ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fec7:	83 c4 10             	add    esp,0x10
c000feca:	0f b7 c0             	movzx  eax,ax
c000fecd:	83 e0 04             	and    eax,0x4
c000fed0:	74 16                	je     c000fee8 <tcp_output+0x110>
c000fed2:	83 ec 08             	sub    esp,0x8
c000fed5:	68 53 08 03 c0       	push   0xc0030853
c000feda:	68 46 f9 02 c0       	push   0xc002f946
c000fedf:	e8 f8 fb 00 00       	call   c001fadc <CPrintf>
c000fee4:	83 c4 10             	add    esp,0x10
c000fee7:	90                   	nop
c000fee8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000feec:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000feef:	85 c0                	test   eax,eax
c000fef1:	74 45                	je     c000ff38 <tcp_output+0x160>
c000fef3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fef7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fefa:	0f b6 c0             	movzx  eax,al
c000fefd:	83 e0 44             	and    eax,0x44
c000ff00:	75 36                	jne    c000ff38 <tcp_output+0x160>
c000ff02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff06:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ff09:	85 c0                	test   eax,eax
c000ff0b:	74 33                	je     c000ff40 <tcp_output+0x168>
c000ff0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff11:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ff14:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff16:	85 c0                	test   eax,eax
c000ff18:	75 1e                	jne    c000ff38 <tcp_output+0x160>
c000ff1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff1e:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ff21:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000ff24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff28:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ff2b:	0f b7 d2             	movzx  edx,dx
c000ff2e:	0f b7 c0             	movzx  eax,ax
c000ff31:	39 c2                	cmp    edx,eax
c000ff33:	72 0b                	jb     c000ff40 <tcp_output+0x168>
c000ff35:	8d 76 00             	lea    esi,[esi+0x0]
c000ff38:	b8 01 00 00 00       	mov    eax,0x1
c000ff3d:	eb 09                	jmp    c000ff48 <tcp_output+0x170>
c000ff3f:	90                   	nop
c000ff40:	b8 00 00 00 00       	mov    eax,0x0
c000ff45:	8d 76 00             	lea    esi,[esi+0x0]
c000ff48:	85 c0                	test   eax,eax
c000ff4a:	75 18                	jne    c000ff64 <tcp_output+0x18c>
c000ff4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff50:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ff53:	0f b6 c0             	movzx  eax,al
c000ff56:	25 a0 00 00 00       	and    eax,0xa0
c000ff5b:	0f 84 5b 02 00 00    	je     c00101bc <tcp_output+0x3e4>
c000ff61:	8d 76 00             	lea    esi,[esi+0x0]
c000ff64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff68:	8b 10                	mov    edx,DWORD PTR [eax]
c000ff6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff6e:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000ff71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff75:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ff78:	83 f8 02             	cmp    eax,0x2
c000ff7b:	74 3f                	je     c000ffbc <tcp_output+0x1e4>
c000ff7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff81:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ff84:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000ff88:	83 ec 0c             	sub    esp,0xc
c000ff8b:	6a 10                	push   0x10
c000ff8d:	e8 56 0c ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ff92:	83 c4 10             	add    esp,0x10
c000ff95:	89 c1                	mov    ecx,eax
c000ff97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff9b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ff9e:	89 d8                	mov    eax,ebx
c000ffa0:	09 c8                	or     eax,ecx
c000ffa2:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000ffa6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffaa:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ffad:	83 e0 fc             	and    eax,0xfffffffc
c000ffb0:	88 c2                	mov    dl,al
c000ffb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffb6:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ffb9:	8d 76 00             	lea    esi,[esi+0x0]
c000ffbc:	83 ec 08             	sub    esp,0x8
c000ffbf:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ffc3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ffc7:	e8 e0 fb ff ff       	call   c000fbac <tcp_output_segment>
c000ffcc:	83 c4 10             	add    esp,0x10
c000ffcf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ffd3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ffd6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ffd9:	83 ec 0c             	sub    esp,0xc
c000ffdc:	50                   	push   eax
c000ffdd:	e8 2a 0c ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000ffe2:	83 c4 10             	add    esp,0x10
c000ffe5:	89 c3                	mov    ebx,eax
c000ffe7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ffeb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ffee:	0f b7 f0             	movzx  esi,ax
c000fff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fff5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fff8:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000fffc:	0f b7 c0             	movzx  eax,ax
c000ffff:	83 ec 0c             	sub    esp,0xc
c0010002:	50                   	push   eax
c0010003:	e8 e0 0b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010008:	83 c4 10             	add    esp,0x10
c001000b:	0f b7 c0             	movzx  eax,ax
c001000e:	83 e0 03             	and    eax,0x3
c0010011:	0f 95 c0             	setne  al
c0010014:	0f b6 c0             	movzx  eax,al
c0010017:	01 f0                	add    eax,esi
c0010019:	01 d8                	add    eax,ebx
c001001b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001001f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010023:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c0010026:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001002a:	79 0c                	jns    c0010038 <tcp_output+0x260>
c001002c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010030:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010034:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c0010037:	90                   	nop
c0010038:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001003c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001003f:	0f b7 d8             	movzx  ebx,ax
c0010042:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010046:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010049:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c001004d:	0f b7 c0             	movzx  eax,ax
c0010050:	83 ec 0c             	sub    esp,0xc
c0010053:	50                   	push   eax
c0010054:	e8 8f 0b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010059:	83 c4 10             	add    esp,0x10
c001005c:	0f b7 c0             	movzx  eax,ax
c001005f:	83 e0 03             	and    eax,0x3
c0010062:	0f 95 c0             	setne  al
c0010065:	0f b6 c0             	movzx  eax,al
c0010068:	01 d8                	add    eax,ebx
c001006a:	85 c0                	test   eax,eax
c001006c:	0f 8e ee 00 00 00    	jle    c0010160 <tcp_output+0x388>
c0010072:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010076:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001007c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010080:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010083:	85 c0                	test   eax,eax
c0010085:	75 19                	jne    c00100a0 <tcp_output+0x2c8>
c0010087:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001008b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001008f:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c0010092:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010096:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001009a:	e9 d1 00 00 00       	jmp    c0010170 <tcp_output+0x398>
c001009f:	90                   	nop
c00100a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100a4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00100a7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00100aa:	83 ec 0c             	sub    esp,0xc
c00100ad:	50                   	push   eax
c00100ae:	e8 59 0b ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00100b3:	83 c4 10             	add    esp,0x10
c00100b6:	89 c3                	mov    ebx,eax
c00100b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00100bc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00100bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00100c2:	83 ec 0c             	sub    esp,0xc
c00100c5:	50                   	push   eax
c00100c6:	e8 41 0b ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00100cb:	83 c4 10             	add    esp,0x10
c00100ce:	29 c3                	sub    ebx,eax
c00100d0:	89 d8                	mov    eax,ebx
c00100d2:	79 74                	jns    c0010148 <tcp_output+0x370>
c00100d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100d8:	83 c0 7c             	add    eax,0x7c
c00100db:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00100df:	eb 0f                	jmp    c00100f0 <tcp_output+0x318>
c00100e1:	8d 76 00             	lea    esi,[esi+0x0]
c00100e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00100ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00100ee:	66 90                	xchg   ax,ax
c00100f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00100f6:	85 c0                	test   eax,eax
c00100f8:	74 36                	je     c0010130 <tcp_output+0x358>
c00100fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0010100:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010103:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010106:	83 ec 0c             	sub    esp,0xc
c0010109:	50                   	push   eax
c001010a:	e8 fd 0a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001010f:	83 c4 10             	add    esp,0x10
c0010112:	89 c3                	mov    ebx,eax
c0010114:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010118:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001011b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001011e:	83 ec 0c             	sub    esp,0xc
c0010121:	50                   	push   eax
c0010122:	e8 e5 0a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010127:	83 c4 10             	add    esp,0x10
c001012a:	29 c3                	sub    ebx,eax
c001012c:	89 d8                	mov    eax,ebx
c001012e:	78 b4                	js     c00100e4 <tcp_output+0x30c>
c0010130:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010134:	8b 10                	mov    edx,DWORD PTR [eax]
c0010136:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001013a:	89 10                	mov    DWORD PTR [eax],edx
c001013c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010140:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010144:	89 10                	mov    DWORD PTR [eax],edx
c0010146:	eb 28                	jmp    c0010170 <tcp_output+0x398>
c0010148:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001014c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010150:	89 10                	mov    DWORD PTR [eax],edx
c0010152:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010156:	8b 00                	mov    eax,DWORD PTR [eax]
c0010158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001015c:	eb 12                	jmp    c0010170 <tcp_output+0x398>
c001015e:	66 90                	xchg   ax,ax
c0010160:	83 ec 0c             	sub    esp,0xc
c0010163:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010167:	e8 b4 9d ff ff       	call   c0009f20 <tcp_seg_free>
c001016c:	83 c4 10             	add    esp,0x10
c001016f:	90                   	nop
c0010170:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010174:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010177:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001017b:	90                   	nop
c001017c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010181:	74 3d                	je     c00101c0 <tcp_output+0x3e8>
c0010183:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010187:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001018a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001018d:	83 ec 0c             	sub    esp,0xc
c0010190:	50                   	push   eax
c0010191:	e8 76 0a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010196:	83 c4 10             	add    esp,0x10
c0010199:	89 c2                	mov    edx,eax
c001019b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001019f:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c00101a2:	29 c2                	sub    edx,eax
c00101a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101a8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00101ab:	0f b7 c0             	movzx  eax,ax
c00101ae:	01 d0                	add    eax,edx
c00101b0:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00101b4:	0f 83 f6 fc ff ff    	jae    c000feb0 <tcp_output+0xd8>
c00101ba:	eb 04                	jmp    c00101c0 <tcp_output+0x3e8>
c00101bc:	90                   	nop
c00101bd:	8d 76 00             	lea    esi,[esi+0x0]
c00101c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101c4:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c00101c7:	85 c0                	test   eax,eax
c00101c9:	75 0d                	jne    c00101d8 <tcp_output+0x400>
c00101cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101cf:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c00101d5:	8d 76 00             	lea    esi,[esi+0x0]
c00101d8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00101dd:	74 65                	je     c0010244 <tcp_output+0x46c>
c00101df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101e3:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c00101e9:	0f b6 c0             	movzx  eax,al
c00101ec:	85 c0                	test   eax,eax
c00101ee:	75 54                	jne    c0010244 <tcp_output+0x46c>
c00101f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101f4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00101f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00101fa:	83 ec 0c             	sub    esp,0xc
c00101fd:	50                   	push   eax
c00101fe:	e8 09 0a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010203:	83 c4 10             	add    esp,0x10
c0010206:	89 c2                	mov    edx,eax
c0010208:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001020c:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c001020f:	29 c2                	sub    edx,eax
c0010211:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010215:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010218:	0f b7 c0             	movzx  eax,ax
c001021b:	01 c2                	add    edx,eax
c001021d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010221:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c0010224:	0f b7 c0             	movzx  eax,ax
c0010227:	39 c2                	cmp    edx,eax
c0010229:	76 19                	jbe    c0010244 <tcp_output+0x46c>
c001022b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001022f:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c0010239:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001023d:	c6 80 a4 00 00 00 01 	mov    BYTE PTR [eax+0xa4],0x1
c0010244:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010248:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001024b:	83 e0 7f             	and    eax,0x7f
c001024e:	88 c2                	mov    dl,al
c0010250:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010254:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0010257:	b0 00                	mov    al,0x0
c0010259:	8d 76 00             	lea    esi,[esi+0x0]
c001025c:	83 c4 24             	add    esp,0x24
c001025f:	5b                   	pop    ebx
c0010260:	5e                   	pop    esi
c0010261:	c3                   	ret    
c0010262:	66 90                	xchg   ax,ax

c0010264 <tcp_rst>:
c0010264:	83 ec 2c             	sub    esp,0x2c
c0010267:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001026b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001026f:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0010274:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0010279:	83 ec 04             	sub    esp,0x4
c001027c:	6a 00                	push   0x0
c001027e:	6a 14                	push   0x14
c0010280:	6a 01                	push   0x1
c0010282:	e8 f9 81 ff ff       	call   c0008480 <pbuf_alloc>
c0010287:	83 c4 10             	add    esp,0x10
c001028a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001028e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010293:	0f 84 37 01 00 00    	je     c00103d0 <tcp_rst+0x16c>
c0010299:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001029d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00102a1:	0f b7 c0             	movzx  eax,ax
c00102a4:	83 f8 13             	cmp    eax,0x13
c00102a7:	77 17                	ja     c00102c0 <tcp_rst+0x5c>
c00102a9:	83 ec 08             	sub    esp,0x8
c00102ac:	68 60 05 03 c0       	push   0xc0030560
c00102b1:	68 46 f9 02 c0       	push   0xc002f946
c00102b6:	e8 21 f8 00 00       	call   c001fadc <CPrintf>
c00102bb:	83 c4 10             	add    esp,0x10
c00102be:	66 90                	xchg   ax,ax
c00102c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00102c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00102cb:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00102d0:	83 ec 0c             	sub    esp,0xc
c00102d3:	50                   	push   eax
c00102d4:	e8 0f 09 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00102d9:	83 c4 10             	add    esp,0x10
c00102dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00102e0:	66 89 02             	mov    WORD PTR [edx],ax
c00102e3:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00102e8:	83 ec 0c             	sub    esp,0xc
c00102eb:	50                   	push   eax
c00102ec:	e8 f7 08 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00102f1:	83 c4 10             	add    esp,0x10
c00102f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00102f8:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00102fc:	83 ec 0c             	sub    esp,0xc
c00102ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010303:	e8 04 09 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010308:	83 c4 10             	add    esp,0x10
c001030b:	89 c2                	mov    edx,eax
c001030d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010311:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010314:	83 ec 0c             	sub    esp,0xc
c0010317:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001031b:	e8 ec 08 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010320:	83 c4 10             	add    esp,0x10
c0010323:	89 c2                	mov    edx,eax
c0010325:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010329:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001032c:	83 ec 0c             	sub    esp,0xc
c001032f:	68 14 50 00 00       	push   0x5014
c0010334:	e8 af 08 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010339:	83 c4 10             	add    esp,0x10
c001033c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010340:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c0010344:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010348:	66 c7 40 0e 08 60    	mov    WORD PTR [eax+0xe],0x6008
c001034e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010352:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c0010358:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001035c:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c0010362:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010366:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010369:	0f b7 c0             	movzx  eax,ax
c001036c:	83 ec 0c             	sub    esp,0xc
c001036f:	50                   	push   eax
c0010370:	6a 06                	push   0x6
c0010372:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0010376:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001037a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001037e:	e8 41 2d 00 00       	call   c00130c4 <inet_chksum_pseudo>
c0010383:	83 c4 20             	add    esp,0x20
c0010386:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001038a:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c001038e:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c0010394:	83 c0 01             	add    eax,0x1
c0010397:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c001039d:	83 ec 08             	sub    esp,0x8
c00103a0:	6a 06                	push   0x6
c00103a2:	6a 00                	push   0x0
c00103a4:	68 ff 00 00 00       	push   0xff
c00103a9:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00103ad:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00103b1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00103b5:	e8 3e 39 00 00       	call   c0013cf8 <ip_output>
c00103ba:	83 c4 20             	add    esp,0x20
c00103bd:	83 ec 0c             	sub    esp,0xc
c00103c0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00103c4:	e8 df 7e ff ff       	call   c00082a8 <pbuf_free>
c00103c9:	83 c4 10             	add    esp,0x10
c00103cc:	eb 06                	jmp    c00103d4 <tcp_rst+0x170>
c00103ce:	66 90                	xchg   ax,ax
c00103d0:	90                   	nop
c00103d1:	8d 76 00             	lea    esi,[esi+0x0]
c00103d4:	83 c4 2c             	add    esp,0x2c
c00103d7:	c3                   	ret    

c00103d8 <tcp_rexmit_rto>:
c00103d8:	83 ec 1c             	sub    esp,0x1c
c00103db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00103df:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00103e2:	85 c0                	test   eax,eax
c00103e4:	74 7a                	je     c0010460 <tcp_rexmit_rto+0x88>
c00103e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00103ea:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00103ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00103f1:	eb 0d                	jmp    c0010400 <tcp_rexmit_rto+0x28>
c00103f3:	90                   	nop
c00103f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00103f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00103fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00103fe:	66 90                	xchg   ax,ax
c0010400:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010404:	8b 00                	mov    eax,DWORD PTR [eax]
c0010406:	85 c0                	test   eax,eax
c0010408:	75 ea                	jne    c00103f4 <tcp_rexmit_rto+0x1c>
c001040a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001040e:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c0010411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010415:	89 10                	mov    DWORD PTR [eax],edx
c0010417:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001041b:	8b 50 7c             	mov    edx,DWORD PTR [eax+0x7c]
c001041e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010422:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c0010425:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010429:	c7 40 7c 00 00 00 00 	mov    DWORD PTR [eax+0x7c],0x0
c0010430:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010434:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c0010437:	83 c0 01             	add    eax,0x1
c001043a:	88 c2                	mov    dl,al
c001043c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010440:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c0010443:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010447:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001044e:	83 ec 0c             	sub    esp,0xc
c0010451:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010455:	e8 7e f9 ff ff       	call   c000fdd8 <tcp_output>
c001045a:	83 c4 10             	add    esp,0x10
c001045d:	eb 05                	jmp    c0010464 <tcp_rexmit_rto+0x8c>
c001045f:	90                   	nop
c0010460:	90                   	nop
c0010461:	8d 76 00             	lea    esi,[esi+0x0]
c0010464:	83 c4 1c             	add    esp,0x1c
c0010467:	c3                   	ret    

c0010468 <tcp_rexmit>:
c0010468:	53                   	push   ebx
c0010469:	83 ec 18             	sub    esp,0x18
c001046c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010470:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010473:	85 c0                	test   eax,eax
c0010475:	0f 84 a9 00 00 00    	je     c0010524 <tcp_rexmit+0xbc>
c001047b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001047f:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010482:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010486:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001048a:	8b 10                	mov    edx,DWORD PTR [eax]
c001048c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010490:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c0010493:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010497:	83 c0 78             	add    eax,0x78
c001049a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001049e:	eb 0c                	jmp    c00104ac <tcp_rexmit+0x44>
c00104a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00104a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00104aa:	66 90                	xchg   ax,ax
c00104ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00104b2:	85 c0                	test   eax,eax
c00104b4:	74 36                	je     c00104ec <tcp_rexmit+0x84>
c00104b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00104bc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00104bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00104c2:	83 ec 0c             	sub    esp,0xc
c00104c5:	50                   	push   eax
c00104c6:	e8 41 07 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00104cb:	83 c4 10             	add    esp,0x10
c00104ce:	89 c3                	mov    ebx,eax
c00104d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00104d4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00104d7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00104da:	83 ec 0c             	sub    esp,0xc
c00104dd:	50                   	push   eax
c00104de:	e8 29 07 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00104e3:	83 c4 10             	add    esp,0x10
c00104e6:	29 c3                	sub    ebx,eax
c00104e8:	89 d8                	mov    eax,ebx
c00104ea:	78 b4                	js     c00104a0 <tcp_rexmit+0x38>
c00104ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104f0:	8b 10                	mov    edx,DWORD PTR [eax]
c00104f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00104f6:	89 10                	mov    DWORD PTR [eax],edx
c00104f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010500:	89 10                	mov    DWORD PTR [eax],edx
c0010502:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010506:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c0010509:	83 c0 01             	add    eax,0x1
c001050c:	88 c2                	mov    dl,al
c001050e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010512:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c0010515:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010519:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0010520:	eb 06                	jmp    c0010528 <tcp_rexmit+0xc0>
c0010522:	66 90                	xchg   ax,ax
c0010524:	90                   	nop
c0010525:	8d 76 00             	lea    esi,[esi+0x0]
c0010528:	83 c4 18             	add    esp,0x18
c001052b:	5b                   	pop    ebx
c001052c:	c3                   	ret    
c001052d:	8d 76 00             	lea    esi,[esi+0x0]

c0010530 <tcp_rexmit_fast>:
c0010530:	83 ec 0c             	sub    esp,0xc
c0010533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010537:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001053a:	85 c0                	test   eax,eax
c001053c:	0f 84 ca 00 00 00    	je     c001060c <tcp_rexmit_fast+0xdc>
c0010542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010546:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010549:	0f b6 c0             	movzx  eax,al
c001054c:	83 e0 04             	and    eax,0x4
c001054f:	0f 85 b7 00 00 00    	jne    c001060c <tcp_rexmit_fast+0xdc>
c0010555:	83 ec 0c             	sub    esp,0xc
c0010558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001055c:	e8 07 ff ff ff       	call   c0010468 <tcp_rexmit>
c0010561:	83 c4 10             	add    esp,0x10
c0010564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010568:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c001056c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010570:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c0010573:	0f b7 d2             	movzx  edx,dx
c0010576:	0f b7 c0             	movzx  eax,ax
c0010579:	39 c2                	cmp    edx,eax
c001057b:	76 17                	jbe    c0010594 <tcp_rexmit_fast+0x64>
c001057d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010581:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c0010584:	0f b7 c0             	movzx  eax,ax
c0010587:	d1 e8                	shr    eax,1
c0010589:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001058d:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c0010591:	eb 19                	jmp    c00105ac <tcp_rexmit_fast+0x7c>
c0010593:	90                   	nop
c0010594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010598:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c001059c:	0f b7 c0             	movzx  eax,ax
c001059f:	d1 e8                	shr    eax,1
c00105a1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00105a5:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c00105a9:	8d 76 00             	lea    esi,[esi+0x0]
c00105ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105b0:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c00105b3:	0f b7 d0             	movzx  edx,ax
c00105b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105ba:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00105bd:	0f b7 c0             	movzx  eax,ax
c00105c0:	01 c0                	add    eax,eax
c00105c2:	39 c2                	cmp    edx,eax
c00105c4:	7d 12                	jge    c00105d8 <tcp_rexmit_fast+0xa8>
c00105c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105ca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00105cd:	d1 e0                	shl    eax,1
c00105cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00105d3:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c00105d7:	90                   	nop
c00105d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105dc:	8b 50 58             	mov    edx,DWORD PTR [eax+0x58]
c00105df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105e3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00105e6:	89 c1                	mov    ecx,eax
c00105e8:	d1 e1                	shl    ecx,1
c00105ea:	01 c8                	add    eax,ecx
c00105ec:	01 d0                	add    eax,edx
c00105ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00105f2:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c00105f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105fa:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00105fd:	83 c8 04             	or     eax,0x4
c0010600:	88 c2                	mov    dl,al
c0010602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010606:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0010609:	8d 76 00             	lea    esi,[esi+0x0]
c001060c:	90                   	nop
c001060d:	83 c4 0c             	add    esp,0xc
c0010610:	c3                   	ret    
c0010611:	8d 76 00             	lea    esi,[esi+0x0]

c0010614 <tcp_keepalive>:
c0010614:	83 ec 1c             	sub    esp,0x1c
c0010617:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001061b:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c001061e:	83 e8 01             	sub    eax,0x1
c0010621:	83 ec 0c             	sub    esp,0xc
c0010624:	50                   	push   eax
c0010625:	e8 e2 05 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001062a:	83 c4 10             	add    esp,0x10
c001062d:	50                   	push   eax
c001062e:	6a 00                	push   0x0
c0010630:	6a 00                	push   0x0
c0010632:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010636:	e8 f1 e2 ff ff       	call   c000e92c <tcp_output_alloc_header>
c001063b:	83 c4 10             	add    esp,0x10
c001063e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010642:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010647:	0f 84 87 00 00 00    	je     c00106d4 <tcp_keepalive+0xc0>
c001064d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010651:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010654:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010658:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001065c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001065f:	0f b7 d0             	movzx  edx,ax
c0010662:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010666:	8d 48 04             	lea    ecx,[eax+0x4]
c0010669:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001066d:	83 ec 0c             	sub    esp,0xc
c0010670:	52                   	push   edx
c0010671:	6a 06                	push   0x6
c0010673:	51                   	push   ecx
c0010674:	50                   	push   eax
c0010675:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010679:	e8 46 2a 00 00       	call   c00130c4 <inet_chksum_pseudo>
c001067e:	83 c4 20             	add    esp,0x20
c0010681:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010685:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c0010689:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c001068f:	83 c0 01             	add    eax,0x1
c0010692:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c0010698:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001069c:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c001069f:	0f b6 d0             	movzx  edx,al
c00106a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106a6:	8d 48 04             	lea    ecx,[eax+0x4]
c00106a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106ad:	83 ec 08             	sub    esp,0x8
c00106b0:	6a 06                	push   0x6
c00106b2:	6a 00                	push   0x0
c00106b4:	52                   	push   edx
c00106b5:	51                   	push   ecx
c00106b6:	50                   	push   eax
c00106b7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00106bb:	e8 38 36 00 00       	call   c0013cf8 <ip_output>
c00106c0:	83 c4 20             	add    esp,0x20
c00106c3:	83 ec 0c             	sub    esp,0xc
c00106c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00106ca:	e8 d9 7b ff ff       	call   c00082a8 <pbuf_free>
c00106cf:	83 c4 10             	add    esp,0x10
c00106d2:	eb 04                	jmp    c00106d8 <tcp_keepalive+0xc4>
c00106d4:	90                   	nop
c00106d5:	8d 76 00             	lea    esi,[esi+0x0]
c00106d8:	83 c4 1c             	add    esp,0x1c
c00106db:	c3                   	ret    

c00106dc <tcp_zero_window_probe>:
c00106dc:	53                   	push   ebx
c00106dd:	83 ec 28             	sub    esp,0x28
c00106e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00106e4:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00106e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00106eb:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00106f0:	75 0e                	jne    c0010700 <tcp_zero_window_probe+0x24>
c00106f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00106f6:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c00106f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00106fd:	8d 76 00             	lea    esi,[esi+0x0]
c0010700:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010705:	0f 84 95 01 00 00    	je     c00108a0 <tcp_zero_window_probe+0x1c4>
c001070b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001070f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010712:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010716:	0f b7 c0             	movzx  eax,ax
c0010719:	83 ec 0c             	sub    esp,0xc
c001071c:	50                   	push   eax
c001071d:	e8 c6 04 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010722:	83 c4 10             	add    esp,0x10
c0010725:	0f b7 c0             	movzx  eax,ax
c0010728:	83 e0 01             	and    eax,0x1
c001072b:	74 17                	je     c0010744 <tcp_zero_window_probe+0x68>
c001072d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010731:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010734:	0f b7 c0             	movzx  eax,ax
c0010737:	85 c0                	test   eax,eax
c0010739:	75 09                	jne    c0010744 <tcp_zero_window_probe+0x68>
c001073b:	b8 01 00 00 00       	mov    eax,0x1
c0010740:	eb 0a                	jmp    c001074c <tcp_zero_window_probe+0x70>
c0010742:	66 90                	xchg   ax,ax
c0010744:	b8 00 00 00 00       	mov    eax,0x0
c0010749:	8d 76 00             	lea    esi,[esi+0x0]
c001074c:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0010750:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0010755:	85 c0                	test   eax,eax
c0010757:	0f 94 c0             	sete   al
c001075a:	0f b6 c0             	movzx  eax,al
c001075d:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0010762:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010766:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010769:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001076c:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0010771:	52                   	push   edx
c0010772:	50                   	push   eax
c0010773:	6a 00                	push   0x0
c0010775:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010779:	e8 ae e1 ff ff       	call   c000e92c <tcp_output_alloc_header>
c001077e:	83 c4 10             	add    esp,0x10
c0010781:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010785:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001078a:	0f 84 14 01 00 00    	je     c00108a4 <tcp_zero_window_probe+0x1c8>
c0010790:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010794:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010797:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001079b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00107a0:	85 c0                	test   eax,eax
c00107a2:	74 28                	je     c00107cc <tcp_zero_window_probe+0xf0>
c00107a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107a8:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00107ac:	80 e4 c0             	and    ah,0xc0
c00107af:	89 c3                	mov    ebx,eax
c00107b1:	83 ec 0c             	sub    esp,0xc
c00107b4:	6a 11                	push   0x11
c00107b6:	e8 2d 04 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00107bb:	83 c4 10             	add    esp,0x10
c00107be:	09 d8                	or     eax,ebx
c00107c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00107c4:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c00107c8:	eb 5a                	jmp    c0010824 <tcp_zero_window_probe+0x148>
c00107ca:	66 90                	xchg   ax,ax
c00107cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00107d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00107d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00107d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00107da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00107de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00107e1:	83 c0 14             	add    eax,0x14
c00107e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00107e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00107ec:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00107f0:	0f b7 c0             	movzx  eax,ax
c00107f3:	83 ec 0c             	sub    esp,0xc
c00107f6:	50                   	push   eax
c00107f7:	e8 ec 03 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00107fc:	83 c4 10             	add    esp,0x10
c00107ff:	0f b7 c0             	movzx  eax,ax
c0010802:	c1 e8 0c             	shr    eax,0xc
c0010805:	c1 e0 02             	shl    eax,0x2
c0010808:	0f b7 d0             	movzx  edx,ax
c001080b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001080f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010812:	52                   	push   edx
c0010813:	6a 01                	push   0x1
c0010815:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010819:	50                   	push   eax
c001081a:	e8 29 87 ff ff       	call   c0008f48 <pbuf_copy_partial>
c001081f:	83 c4 10             	add    esp,0x10
c0010822:	66 90                	xchg   ax,ax
c0010824:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010828:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001082b:	0f b7 d0             	movzx  edx,ax
c001082e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010832:	8d 48 04             	lea    ecx,[eax+0x4]
c0010835:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010839:	83 ec 0c             	sub    esp,0xc
c001083c:	52                   	push   edx
c001083d:	6a 06                	push   0x6
c001083f:	51                   	push   ecx
c0010840:	50                   	push   eax
c0010841:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010845:	e8 7a 28 00 00       	call   c00130c4 <inet_chksum_pseudo>
c001084a:	83 c4 20             	add    esp,0x20
c001084d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010851:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c0010855:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c001085b:	83 c0 01             	add    eax,0x1
c001085e:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c0010864:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010868:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c001086b:	0f b6 d0             	movzx  edx,al
c001086e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010872:	8d 48 04             	lea    ecx,[eax+0x4]
c0010875:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010879:	83 ec 08             	sub    esp,0x8
c001087c:	6a 06                	push   0x6
c001087e:	6a 00                	push   0x0
c0010880:	52                   	push   edx
c0010881:	51                   	push   ecx
c0010882:	50                   	push   eax
c0010883:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010887:	e8 6c 34 00 00       	call   c0013cf8 <ip_output>
c001088c:	83 c4 20             	add    esp,0x20
c001088f:	83 ec 0c             	sub    esp,0xc
c0010892:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010896:	e8 0d 7a ff ff       	call   c00082a8 <pbuf_free>
c001089b:	83 c4 10             	add    esp,0x10
c001089e:	eb 08                	jmp    c00108a8 <tcp_zero_window_probe+0x1cc>
c00108a0:	90                   	nop
c00108a1:	eb 05                	jmp    c00108a8 <tcp_zero_window_probe+0x1cc>
c00108a3:	90                   	nop
c00108a4:	90                   	nop
c00108a5:	8d 76 00             	lea    esi,[esi+0x0]
c00108a8:	83 c4 28             	add    esp,0x28
c00108ab:	5b                   	pop    ebx
c00108ac:	c3                   	ret    
c00108ad:	66 90                	xchg   ax,ax
c00108af:	90                   	nop

c00108b0 <sys_timeout>:
c00108b0:	83 ec 1c             	sub    esp,0x1c
c00108b3:	83 ec 0c             	sub    esp,0xc
c00108b6:	6a 0b                	push   0xb
c00108b8:	e8 03 70 ff ff       	call   c00078c0 <memp_malloc>
c00108bd:	83 c4 10             	add    esp,0x10
c00108c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00108c4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00108c9:	75 25                	jne    c00108f0 <sys_timeout+0x40>
c00108cb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00108d0:	0f 85 3e 01 00 00    	jne    c0010a14 <sys_timeout+0x164>
c00108d6:	83 ec 08             	sub    esp,0x8
c00108d9:	68 6c 08 03 c0       	push   0xc003086c
c00108de:	68 46 f9 02 c0       	push   0xc002f946
c00108e3:	e8 f4 f1 00 00       	call   c001fadc <CPrintf>
c00108e8:	83 c4 10             	add    esp,0x10
c00108eb:	e9 24 01 00 00       	jmp    c0010a14 <sys_timeout+0x164>
c00108f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00108f4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00108fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00108fe:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010902:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010905:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010909:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001090d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010914:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010918:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001091b:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010920:	85 c0                	test   eax,eax
c0010922:	75 10                	jne    c0010934 <sys_timeout+0x84>
c0010924:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010928:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c001092d:	e9 e6 00 00 00       	jmp    c0010a18 <sys_timeout+0x168>
c0010932:	66 90                	xchg   ax,ax
c0010934:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010939:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001093c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0010940:	73 2e                	jae    c0010970 <sys_timeout+0xc0>
c0010942:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010947:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001094a:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c001094f:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0010953:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010956:	8b 15 d4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8d4
c001095c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010960:	89 10                	mov    DWORD PTR [eax],edx
c0010962:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010966:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c001096b:	e9 a8 00 00 00       	jmp    c0010a18 <sys_timeout+0x168>
c0010970:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010975:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010979:	e9 86 00 00 00       	jmp    c0010a04 <sys_timeout+0x154>
c001097e:	66 90                	xchg   ax,ax
c0010980:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010984:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010987:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001098b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001098e:	29 c2                	sub    edx,eax
c0010990:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010994:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010997:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001099b:	8b 00                	mov    eax,DWORD PTR [eax]
c001099d:	85 c0                	test   eax,eax
c001099f:	74 17                	je     c00109b8 <sys_timeout+0x108>
c00109a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00109a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00109a7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00109aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00109b1:	39 c2                	cmp    edx,eax
c00109b3:	76 43                	jbe    c00109f8 <sys_timeout+0x148>
c00109b5:	8d 76 00             	lea    esi,[esi+0x0]
c00109b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00109bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00109be:	85 c0                	test   eax,eax
c00109c0:	74 1e                	je     c00109e0 <sys_timeout+0x130>
c00109c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00109c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00109c8:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00109cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109cf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00109d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00109d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00109d8:	29 d1                	sub    ecx,edx
c00109da:	89 ca                	mov    edx,ecx
c00109dc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00109df:	90                   	nop
c00109e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00109e4:	8b 10                	mov    edx,DWORD PTR [eax]
c00109e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109ea:	89 10                	mov    DWORD PTR [eax],edx
c00109ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00109f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00109f4:	89 10                	mov    DWORD PTR [eax],edx
c00109f6:	eb 20                	jmp    c0010a18 <sys_timeout+0x168>
c00109f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00109fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00109fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010a02:	66 90                	xchg   ax,ax
c0010a04:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010a09:	0f 85 71 ff ff ff    	jne    c0010980 <sys_timeout+0xd0>
c0010a0f:	eb 07                	jmp    c0010a18 <sys_timeout+0x168>
c0010a11:	8d 76 00             	lea    esi,[esi+0x0]
c0010a14:	90                   	nop
c0010a15:	8d 76 00             	lea    esi,[esi+0x0]
c0010a18:	83 c4 1c             	add    esp,0x1c
c0010a1b:	c3                   	ret    

c0010a1c <tcpip_tcp_timer>:
c0010a1c:	83 ec 0c             	sub    esp,0xc
c0010a1f:	e8 34 a5 ff ff       	call   c000af58 <tcp_tmr>
c0010a24:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0010a29:	85 c0                	test   eax,eax
c0010a2b:	75 0b                	jne    c0010a38 <tcpip_tcp_timer+0x1c>
c0010a2d:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c0010a32:	85 c0                	test   eax,eax
c0010a34:	74 1e                	je     c0010a54 <tcpip_tcp_timer+0x38>
c0010a36:	66 90                	xchg   ax,ax
c0010a38:	83 ec 04             	sub    esp,0x4
c0010a3b:	6a 00                	push   0x0
c0010a3d:	68 1c 0a 01 c0       	push   0xc0010a1c
c0010a42:	68 fa 00 00 00       	push   0xfa
c0010a47:	e8 64 fe ff ff       	call   c00108b0 <sys_timeout>
c0010a4c:	83 c4 10             	add    esp,0x10
c0010a4f:	eb 0f                	jmp    c0010a60 <tcpip_tcp_timer+0x44>
c0010a51:	8d 76 00             	lea    esi,[esi+0x0]
c0010a54:	c7 05 d0 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8d0,0x0
c0010a5e:	66 90                	xchg   ax,ax
c0010a60:	90                   	nop
c0010a61:	83 c4 0c             	add    esp,0xc
c0010a64:	c3                   	ret    
c0010a65:	8d 76 00             	lea    esi,[esi+0x0]

c0010a68 <tcp_timer_needed>:
c0010a68:	83 ec 0c             	sub    esp,0xc
c0010a6b:	a1 d0 a8 03 c0       	mov    eax,ds:0xc003a8d0
c0010a70:	85 c0                	test   eax,eax
c0010a72:	75 38                	jne    c0010aac <tcp_timer_needed+0x44>
c0010a74:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0010a79:	85 c0                	test   eax,eax
c0010a7b:	75 0b                	jne    c0010a88 <tcp_timer_needed+0x20>
c0010a7d:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c0010a82:	85 c0                	test   eax,eax
c0010a84:	74 26                	je     c0010aac <tcp_timer_needed+0x44>
c0010a86:	66 90                	xchg   ax,ax
c0010a88:	c7 05 d0 a8 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003a8d0,0x1
c0010a92:	83 ec 04             	sub    esp,0x4
c0010a95:	6a 00                	push   0x0
c0010a97:	68 1c 0a 01 c0       	push   0xc0010a1c
c0010a9c:	68 fa 00 00 00       	push   0xfa
c0010aa1:	e8 0a fe ff ff       	call   c00108b0 <sys_timeout>
c0010aa6:	83 c4 10             	add    esp,0x10
c0010aa9:	8d 76 00             	lea    esi,[esi+0x0]
c0010aac:	90                   	nop
c0010aad:	83 c4 0c             	add    esp,0xc
c0010ab0:	c3                   	ret    
c0010ab1:	8d 76 00             	lea    esi,[esi+0x0]

c0010ab4 <ip_reass_timer>:
c0010ab4:	83 ec 0c             	sub    esp,0xc
c0010ab7:	e8 f0 3a 00 00       	call   c00145ac <ip_reass_tmr>
c0010abc:	83 ec 04             	sub    esp,0x4
c0010abf:	6a 00                	push   0x0
c0010ac1:	68 b4 0a 01 c0       	push   0xc0010ab4
c0010ac6:	68 e8 03 00 00       	push   0x3e8
c0010acb:	e8 e0 fd ff ff       	call   c00108b0 <sys_timeout>
c0010ad0:	83 c4 10             	add    esp,0x10
c0010ad3:	90                   	nop
c0010ad4:	83 c4 0c             	add    esp,0xc
c0010ad7:	c3                   	ret    

c0010ad8 <arp_timer>:
c0010ad8:	83 ec 0c             	sub    esp,0xc
c0010adb:	e8 60 0d 00 00       	call   c0011840 <etharp_tmr>
c0010ae0:	83 ec 04             	sub    esp,0x4
c0010ae3:	6a 00                	push   0x0
c0010ae5:	68 d8 0a 01 c0       	push   0xc0010ad8
c0010aea:	68 88 13 00 00       	push   0x1388
c0010aef:	e8 bc fd ff ff       	call   c00108b0 <sys_timeout>
c0010af4:	83 c4 10             	add    esp,0x10
c0010af7:	90                   	nop
c0010af8:	83 c4 0c             	add    esp,0xc
c0010afb:	c3                   	ret    

c0010afc <sys_timeouts_init>:
c0010afc:	83 ec 0c             	sub    esp,0xc
c0010aff:	83 ec 04             	sub    esp,0x4
c0010b02:	6a 00                	push   0x0
c0010b04:	68 b4 0a 01 c0       	push   0xc0010ab4
c0010b09:	68 e8 03 00 00       	push   0x3e8
c0010b0e:	e8 9d fd ff ff       	call   c00108b0 <sys_timeout>
c0010b13:	83 c4 10             	add    esp,0x10
c0010b16:	83 ec 04             	sub    esp,0x4
c0010b19:	6a 00                	push   0x0
c0010b1b:	68 d8 0a 01 c0       	push   0xc0010ad8
c0010b20:	68 88 13 00 00       	push   0x1388
c0010b25:	e8 86 fd ff ff       	call   c00108b0 <sys_timeout>
c0010b2a:	83 c4 10             	add    esp,0x10
c0010b2d:	90                   	nop
c0010b2e:	83 c4 0c             	add    esp,0xc
c0010b31:	c3                   	ret    
c0010b32:	66 90                	xchg   ax,ax

c0010b34 <sys_untimeout>:
c0010b34:	83 ec 1c             	sub    esp,0x1c
c0010b37:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010b3c:	85 c0                	test   eax,eax
c0010b3e:	0f 84 b4 00 00 00    	je     c0010bf8 <sys_untimeout+0xc4>
c0010b44:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010b49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010b4d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010b55:	e9 8e 00 00 00       	jmp    c0010be8 <sys_untimeout+0xb4>
c0010b5a:	66 90                	xchg   ax,ax
c0010b5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b60:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010b63:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0010b67:	75 6b                	jne    c0010bd4 <sys_untimeout+0xa0>
c0010b69:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b6d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010b70:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0010b74:	75 5e                	jne    c0010bd4 <sys_untimeout+0xa0>
c0010b76:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010b7b:	75 0f                	jne    c0010b8c <sys_untimeout+0x58>
c0010b7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b81:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b83:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010b88:	eb 0e                	jmp    c0010b98 <sys_untimeout+0x64>
c0010b8a:	66 90                	xchg   ax,ax
c0010b8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b90:	8b 10                	mov    edx,DWORD PTR [eax]
c0010b92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b96:	89 10                	mov    DWORD PTR [eax],edx
c0010b98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b9e:	85 c0                	test   eax,eax
c0010ba0:	74 1e                	je     c0010bc0 <sys_untimeout+0x8c>
c0010ba2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ba6:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ba8:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010bab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010baf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010bb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bb6:	8b 00                	mov    eax,DWORD PTR [eax]
c0010bb8:	01 ca                	add    edx,ecx
c0010bba:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bbd:	8d 76 00             	lea    esi,[esi+0x0]
c0010bc0:	83 ec 08             	sub    esp,0x8
c0010bc3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010bc7:	6a 0b                	push   0xb
c0010bc9:	e8 1e 6e ff ff       	call   c00079ec <memp_free>
c0010bce:	83 c4 10             	add    esp,0x10
c0010bd1:	eb 29                	jmp    c0010bfc <sys_untimeout+0xc8>
c0010bd3:	90                   	nop
c0010bd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bd8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010bdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010be0:	8b 00                	mov    eax,DWORD PTR [eax]
c0010be2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010be6:	66 90                	xchg   ax,ax
c0010be8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010bed:	0f 85 69 ff ff ff    	jne    c0010b5c <sys_untimeout+0x28>
c0010bf3:	90                   	nop
c0010bf4:	eb 06                	jmp    c0010bfc <sys_untimeout+0xc8>
c0010bf6:	66 90                	xchg   ax,ax
c0010bf8:	90                   	nop
c0010bf9:	8d 76 00             	lea    esi,[esi+0x0]
c0010bfc:	83 c4 1c             	add    esp,0x1c
c0010bff:	c3                   	ret    

c0010c00 <sys_timeouts_mbox_fetch>:
c0010c00:	83 ec 1c             	sub    esp,0x1c
c0010c03:	90                   	nop
c0010c04:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010c09:	85 c0                	test   eax,eax
c0010c0b:	75 1f                	jne    c0010c2c <sys_timeouts_mbox_fetch+0x2c>
c0010c0d:	83 ec 04             	sub    esp,0x4
c0010c10:	6a 00                	push   0x0
c0010c12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010c16:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010c1a:	e8 b1 00 ff ff       	call   c0000cd0 <sys_arch_mbox_fetch>
c0010c1f:	83 c4 10             	add    esp,0x10
c0010c22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010c26:	e9 cd 00 00 00       	jmp    c0010cf8 <sys_timeouts_mbox_fetch+0xf8>
c0010c2b:	90                   	nop
c0010c2c:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010c31:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c34:	85 c0                	test   eax,eax
c0010c36:	74 24                	je     c0010c5c <sys_timeouts_mbox_fetch+0x5c>
c0010c38:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010c3d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c40:	83 ec 04             	sub    esp,0x4
c0010c43:	50                   	push   eax
c0010c44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010c48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010c4c:	e8 7f 00 ff ff       	call   c0000cd0 <sys_arch_mbox_fetch>
c0010c51:	83 c4 10             	add    esp,0x10
c0010c54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010c58:	eb 0a                	jmp    c0010c64 <sys_timeouts_mbox_fetch+0x64>
c0010c5a:	66 90                	xchg   ax,ax
c0010c5c:	c7 44 24 0c ff ff ff ff 	mov    DWORD PTR [esp+0xc],0xffffffff
c0010c64:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c0010c69:	75 5d                	jne    c0010cc8 <sys_timeouts_mbox_fetch+0xc8>
c0010c6b:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010c70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010c74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c78:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c7a:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010c7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c83:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010c86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010c8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c8e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010c91:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c94:	83 ec 08             	sub    esp,0x8
c0010c97:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010c9b:	6a 0b                	push   0xb
c0010c9d:	e8 4a 6d ff ff       	call   c00079ec <memp_free>
c0010ca2:	83 c4 10             	add    esp,0x10
c0010ca5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0010caa:	0f 84 54 ff ff ff    	je     c0010c04 <sys_timeouts_mbox_fetch+0x4>
c0010cb0:	83 ec 0c             	sub    esp,0xc
c0010cb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010cb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010cbb:	ff d0                	call   eax
c0010cbd:	83 c4 10             	add    esp,0x10
c0010cc0:	e9 3f ff ff ff       	jmp    c0010c04 <sys_timeouts_mbox_fetch+0x4>
c0010cc5:	8d 76 00             	lea    esi,[esi+0x0]
c0010cc8:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010ccd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cd0:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0010cd4:	73 16                	jae    c0010cec <sys_timeouts_mbox_fetch+0xec>
c0010cd6:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010cdb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010cde:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010ce3:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010ce7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010cea:	eb 0c                	jmp    c0010cf8 <sys_timeouts_mbox_fetch+0xf8>
c0010cec:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010cf1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010cf8:	90                   	nop
c0010cf9:	83 c4 1c             	add    esp,0x1c
c0010cfc:	c3                   	ret    
c0010cfd:	66 90                	xchg   ax,ax
c0010cff:	90                   	nop

c0010d00 <udp_input>:
c0010d00:	53                   	push   ebx
c0010d01:	83 ec 28             	sub    esp,0x28
c0010d04:	66 a1 9a 67 03 c0    	mov    ax,ds:0xc003679a
c0010d0a:	83 c0 01             	add    eax,0x1
c0010d0d:	66 a3 9a 67 03 c0    	mov    ds:0xc003679a,ax
c0010d13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010d17:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d1e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010d22:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010d25:	0f b7 d8             	movzx  ebx,ax
c0010d28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010d2c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010d2f:	0f b7 c0             	movzx  eax,ax
c0010d32:	83 ec 0c             	sub    esp,0xc
c0010d35:	50                   	push   eax
c0010d36:	e8 ad fe fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010d3b:	83 c4 10             	add    esp,0x10
c0010d3e:	0f b7 c0             	movzx  eax,ax
c0010d41:	c1 e8 08             	shr    eax,0x8
c0010d44:	0f b7 c0             	movzx  eax,ax
c0010d47:	83 e0 0f             	and    eax,0xf
c0010d4a:	83 c0 02             	add    eax,0x2
c0010d4d:	c1 e0 02             	shl    eax,0x2
c0010d50:	39 c3                	cmp    ebx,eax
c0010d52:	7c 3c                	jl     c0010d90 <udp_input+0x90>
c0010d54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010d58:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010d5b:	0f b7 c0             	movzx  eax,ax
c0010d5e:	83 ec 0c             	sub    esp,0xc
c0010d61:	50                   	push   eax
c0010d62:	e8 81 fe fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010d67:	83 c4 10             	add    esp,0x10
c0010d6a:	0f b7 c0             	movzx  eax,ax
c0010d6d:	c1 e8 08             	shr    eax,0x8
c0010d70:	83 e0 0f             	and    eax,0xf
c0010d73:	c1 e0 02             	shl    eax,0x2
c0010d76:	f7 d8                	neg    eax
c0010d78:	98                   	cwde   
c0010d79:	83 ec 08             	sub    esp,0x8
c0010d7c:	50                   	push   eax
c0010d7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010d81:	e8 86 73 ff ff       	call   c000810c <pbuf_header>
c0010d86:	83 c4 10             	add    esp,0x10
c0010d89:	0f b6 c0             	movzx  eax,al
c0010d8c:	85 c0                	test   eax,eax
c0010d8e:	74 34                	je     c0010dc4 <udp_input+0xc4>
c0010d90:	66 a1 a2 67 03 c0    	mov    ax,ds:0xc00367a2
c0010d96:	83 c0 01             	add    eax,0x1
c0010d99:	66 a3 a2 67 03 c0    	mov    ds:0xc00367a2,ax
c0010d9f:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0010da5:	83 c0 01             	add    eax,0x1
c0010da8:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0010dae:	83 ec 0c             	sub    esp,0xc
c0010db1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010db5:	e8 ee 74 ff ff       	call   c00082a8 <pbuf_free>
c0010dba:	83 c4 10             	add    esp,0x10
c0010dbd:	e9 aa 03 00 00       	jmp    c001116c <udp_input+0x46c>
c0010dc2:	66 90                	xchg   ax,ax
c0010dc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010dc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010dcf:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0010dd4:	83 ec 08             	sub    esp,0x8
c0010dd7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010ddb:	50                   	push   eax
c0010ddc:	e8 bb 2f 00 00       	call   c0013d9c <ip4_addr_isbroadcast>
c0010de1:	83 c4 10             	add    esp,0x10
c0010de4:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0010de8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010dec:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010def:	0f b7 c0             	movzx  eax,ax
c0010df2:	83 ec 0c             	sub    esp,0xc
c0010df5:	50                   	push   eax
c0010df6:	e8 ed fd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010dfb:	83 c4 10             	add    esp,0x10
c0010dfe:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0010e03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e07:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0010e0b:	0f b7 c0             	movzx  eax,ax
c0010e0e:	83 ec 0c             	sub    esp,0xc
c0010e11:	50                   	push   eax
c0010e12:	e8 d1 fd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010e17:	83 c4 10             	add    esp,0x10
c0010e1a:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c0010e1f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0010e27:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0010e2c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010e34:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0010e39:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010e3d:	e9 0a 01 00 00       	jmp    c0010f4c <udp_input+0x24c>
c0010e42:	66 90                	xchg   ax,ax
c0010e44:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0010e49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e4d:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0010e51:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c0010e56:	0f b7 c0             	movzx  eax,ax
c0010e59:	39 c2                	cmp    edx,eax
c0010e5b:	75 57                	jne    c0010eb4 <udp_input+0x1b4>
c0010e5d:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0010e62:	85 c0                	test   eax,eax
c0010e64:	75 12                	jne    c0010e78 <udp_input+0x178>
c0010e66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e6a:	85 c0                	test   eax,eax
c0010e6c:	74 22                	je     c0010e90 <udp_input+0x190>
c0010e6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e72:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e74:	85 c0                	test   eax,eax
c0010e76:	74 18                	je     c0010e90 <udp_input+0x190>
c0010e78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e7c:	8b 10                	mov    edx,DWORD PTR [eax]
c0010e7e:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0010e83:	39 c2                	cmp    edx,eax
c0010e85:	74 09                	je     c0010e90 <udp_input+0x190>
c0010e87:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0010e8c:	85 c0                	test   eax,eax
c0010e8e:	74 24                	je     c0010eb4 <udp_input+0x1b4>
c0010e90:	c6 44 24 13 01       	mov    BYTE PTR [esp+0x13],0x1
c0010e95:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010e9a:	75 18                	jne    c0010eb4 <udp_input+0x1b4>
c0010e9c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ea0:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0010ea3:	0f b6 c0             	movzx  eax,al
c0010ea6:	83 e0 04             	and    eax,0x4
c0010ea9:	75 09                	jne    c0010eb4 <udp_input+0x1b4>
c0010eab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010eaf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010eb3:	90                   	nop
c0010eb4:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0010eb9:	85 c0                	test   eax,eax
c0010ebb:	74 7b                	je     c0010f38 <udp_input+0x238>
c0010ebd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ec1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010ec4:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0010ec9:	0f b7 c0             	movzx  eax,ax
c0010ecc:	39 c2                	cmp    edx,eax
c0010ece:	75 68                	jne    c0010f38 <udp_input+0x238>
c0010ed0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ed4:	83 c0 04             	add    eax,0x4
c0010ed7:	74 1b                	je     c0010ef4 <udp_input+0x1f4>
c0010ed9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010edd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ee0:	85 c0                	test   eax,eax
c0010ee2:	74 10                	je     c0010ef4 <udp_input+0x1f4>
c0010ee4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ee8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010eeb:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c0010ef0:	39 c2                	cmp    edx,eax
c0010ef2:	75 44                	jne    c0010f38 <udp_input+0x238>
c0010ef4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0010ef9:	74 29                	je     c0010f24 <udp_input+0x224>
c0010efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010eff:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010f02:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010f06:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010f09:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c0010f0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f13:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010f16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f1a:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c0010f1f:	eb 37                	jmp    c0010f58 <udp_input+0x258>
c0010f21:	8d 76 00             	lea    esi,[esi+0x0]
c0010f24:	66 a1 ae 67 03 c0    	mov    ax,ds:0xc00367ae
c0010f2a:	83 c0 01             	add    eax,0x1
c0010f2d:	66 a3 ae 67 03 c0    	mov    ds:0xc00367ae,ax
c0010f33:	eb 23                	jmp    c0010f58 <udp_input+0x258>
c0010f35:	8d 76 00             	lea    esi,[esi+0x0]
c0010f38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f3c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010f40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f44:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010f47:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010f4b:	90                   	nop
c0010f4c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010f51:	0f 85 ed fe ff ff    	jne    c0010e44 <udp_input+0x144>
c0010f57:	90                   	nop
c0010f58:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010f5d:	75 09                	jne    c0010f68 <udp_input+0x268>
c0010f5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010f63:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010f67:	90                   	nop
c0010f68:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010f6d:	75 15                	jne    c0010f84 <udp_input+0x284>
c0010f6f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010f73:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010f76:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0010f7b:	39 c2                	cmp    edx,eax
c0010f7d:	0f 85 d9 01 00 00    	jne    c001115c <udp_input+0x45c>
c0010f83:	90                   	nop
c0010f84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010f88:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0010f8c:	0f b7 c0             	movzx  eax,ax
c0010f8f:	85 c0                	test   eax,eax
c0010f91:	74 61                	je     c0010ff4 <udp_input+0x2f4>
c0010f93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010f97:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010f9a:	0f b7 c0             	movzx  eax,ax
c0010f9d:	83 ec 0c             	sub    esp,0xc
c0010fa0:	50                   	push   eax
c0010fa1:	6a 11                	push   0x11
c0010fa3:	68 98 68 03 c0       	push   0xc0036898
c0010fa8:	68 90 68 03 c0       	push   0xc0036890
c0010fad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010fb1:	e8 0e 21 00 00       	call   c00130c4 <inet_chksum_pseudo>
c0010fb6:	83 c4 20             	add    esp,0x20
c0010fb9:	0f b7 c0             	movzx  eax,ax
c0010fbc:	85 c0                	test   eax,eax
c0010fbe:	74 34                	je     c0010ff4 <udp_input+0x2f4>
c0010fc0:	66 a1 a0 67 03 c0    	mov    ax,ds:0xc00367a0
c0010fc6:	83 c0 01             	add    eax,0x1
c0010fc9:	66 a3 a0 67 03 c0    	mov    ds:0xc00367a0,ax
c0010fcf:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0010fd5:	83 c0 01             	add    eax,0x1
c0010fd8:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0010fde:	83 ec 0c             	sub    esp,0xc
c0010fe1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010fe5:	e8 be 72 ff ff       	call   c00082a8 <pbuf_free>
c0010fea:	83 c4 10             	add    esp,0x10
c0010fed:	e9 7a 01 00 00       	jmp    c001116c <udp_input+0x46c>
c0010ff2:	66 90                	xchg   ax,ax
c0010ff4:	83 ec 08             	sub    esp,0x8
c0010ff7:	6a f8                	push   0xfffffff8
c0010ff9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010ffd:	e8 0a 71 ff ff       	call   c000810c <pbuf_header>
c0011002:	83 c4 10             	add    esp,0x10
c0011005:	0f b6 c0             	movzx  eax,al
c0011008:	85 c0                	test   eax,eax
c001100a:	74 38                	je     c0011044 <udp_input+0x344>
c001100c:	83 ec 08             	sub    esp,0x8
c001100f:	68 a9 08 03 c0       	push   0xc00308a9
c0011014:	68 46 f9 02 c0       	push   0xc002f946
c0011019:	e8 be ea 00 00       	call   c001fadc <CPrintf>
c001101e:	83 c4 10             	add    esp,0x10
c0011021:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0011027:	83 c0 01             	add    eax,0x1
c001102a:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0011030:	83 ec 0c             	sub    esp,0xc
c0011033:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011037:	e8 6c 72 ff ff       	call   c00082a8 <pbuf_free>
c001103c:	83 c4 10             	add    esp,0x10
c001103f:	e9 28 01 00 00       	jmp    c001116c <udp_input+0x46c>
c0011044:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011049:	74 51                	je     c001109c <udp_input+0x39c>
c001104b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001104f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011052:	85 c0                	test   eax,eax
c0011054:	74 32                	je     c0011088 <udp_input+0x388>
c0011056:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001105a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001105d:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c0011062:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011066:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0011069:	83 ec 0c             	sub    esp,0xc
c001106c:	51                   	push   ecx
c001106d:	68 90 68 03 c0       	push   0xc0036890
c0011072:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011076:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001107a:	52                   	push   edx
c001107b:	ff d0                	call   eax
c001107d:	83 c4 20             	add    esp,0x20
c0011080:	e9 e7 00 00 00       	jmp    c001116c <udp_input+0x46c>
c0011085:	8d 76 00             	lea    esi,[esi+0x0]
c0011088:	83 ec 0c             	sub    esp,0xc
c001108b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001108f:	e8 14 72 ff ff       	call   c00082a8 <pbuf_free>
c0011094:	83 c4 10             	add    esp,0x10
c0011097:	e9 d0 00 00 00       	jmp    c001116c <udp_input+0x46c>
c001109c:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c00110a1:	85 c0                	test   eax,eax
c00110a3:	0f 85 83 00 00 00    	jne    c001112c <udp_input+0x42c>
c00110a9:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c00110ae:	25 f0 00 00 00       	and    eax,0xf0
c00110b3:	3d e0 00 00 00       	cmp    eax,0xe0
c00110b8:	74 72                	je     c001112c <udp_input+0x42c>
c00110ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00110be:	66 8b 00             	mov    ax,WORD PTR [eax]
c00110c1:	0f b7 c0             	movzx  eax,ax
c00110c4:	83 ec 0c             	sub    esp,0xc
c00110c7:	50                   	push   eax
c00110c8:	e8 1b fb fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00110cd:	83 c4 10             	add    esp,0x10
c00110d0:	0f b7 c0             	movzx  eax,ax
c00110d3:	c1 e8 08             	shr    eax,0x8
c00110d6:	0f b7 c0             	movzx  eax,ax
c00110d9:	83 e0 0f             	and    eax,0xf
c00110dc:	83 c0 02             	add    eax,0x2
c00110df:	c1 e0 02             	shl    eax,0x2
c00110e2:	98                   	cwde   
c00110e3:	83 ec 08             	sub    esp,0x8
c00110e6:	50                   	push   eax
c00110e7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00110eb:	e8 1c 70 ff ff       	call   c000810c <pbuf_header>
c00110f0:	83 c4 10             	add    esp,0x10
c00110f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00110f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110fa:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00110fe:	74 18                	je     c0011118 <udp_input+0x418>
c0011100:	83 ec 08             	sub    esp,0x8
c0011103:	68 bd 08 03 c0       	push   0xc00308bd
c0011108:	68 46 f9 02 c0       	push   0xc002f946
c001110d:	e8 ca e9 00 00       	call   c001fadc <CPrintf>
c0011112:	83 c4 10             	add    esp,0x10
c0011115:	8d 76 00             	lea    esi,[esi+0x0]
c0011118:	83 ec 08             	sub    esp,0x8
c001111b:	6a 03                	push   0x3
c001111d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011121:	e8 5e 1e 00 00       	call   c0012f84 <icmp_dest_unreach>
c0011126:	83 c4 10             	add    esp,0x10
c0011129:	8d 76 00             	lea    esi,[esi+0x0]
c001112c:	66 a1 a8 67 03 c0    	mov    ax,ds:0xc00367a8
c0011132:	83 c0 01             	add    eax,0x1
c0011135:	66 a3 a8 67 03 c0    	mov    ds:0xc00367a8,ax
c001113b:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0011141:	83 c0 01             	add    eax,0x1
c0011144:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c001114a:	83 ec 0c             	sub    esp,0xc
c001114d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011151:	e8 52 71 ff ff       	call   c00082a8 <pbuf_free>
c0011156:	83 c4 10             	add    esp,0x10
c0011159:	eb 11                	jmp    c001116c <udp_input+0x46c>
c001115b:	90                   	nop
c001115c:	83 ec 0c             	sub    esp,0xc
c001115f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011163:	e8 40 71 ff ff       	call   c00082a8 <pbuf_free>
c0011168:	83 c4 10             	add    esp,0x10
c001116b:	90                   	nop
c001116c:	90                   	nop
c001116d:	83 c4 28             	add    esp,0x28
c0011170:	5b                   	pop    ebx
c0011171:	c3                   	ret    
c0011172:	66 90                	xchg   ax,ax

c0011174 <udp_bind>:
c0011174:	83 ec 2c             	sub    esp,0x2c
c0011177:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001117b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011180:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c0011185:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c001118a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001118e:	e9 8d 00 00 00       	jmp    c0011220 <udp_bind+0xac>
c0011193:	90                   	nop
c0011194:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011198:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c001119c:	75 26                	jne    c00111c4 <udp_bind+0x50>
c001119e:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00111a3:	85 c0                	test   eax,eax
c00111a5:	74 15                	je     c00111bc <udp_bind+0x48>
c00111a7:	83 ec 08             	sub    esp,0x8
c00111aa:	68 d1 08 03 c0       	push   0xc00308d1
c00111af:	68 46 f9 02 c0       	push   0xc002f946
c00111b4:	e8 23 e9 00 00       	call   c001fadc <CPrintf>
c00111b9:	83 c4 10             	add    esp,0x10
c00111bc:	c6 44 24 1b 01       	mov    BYTE PTR [esp+0x1b],0x1
c00111c1:	eb 51                	jmp    c0011214 <udp_bind+0xa0>
c00111c3:	90                   	nop
c00111c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111c8:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00111cc:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00111d1:	0f b7 c0             	movzx  eax,ax
c00111d4:	39 c2                	cmp    edx,eax
c00111d6:	75 3c                	jne    c0011214 <udp_bind+0xa0>
c00111d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111dc:	85 c0                	test   eax,eax
c00111de:	74 2c                	je     c001120c <udp_bind+0x98>
c00111e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00111e6:	85 c0                	test   eax,eax
c00111e8:	74 22                	je     c001120c <udp_bind+0x98>
c00111ea:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00111ef:	74 1b                	je     c001120c <udp_bind+0x98>
c00111f1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00111f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00111f7:	85 c0                	test   eax,eax
c00111f9:	74 11                	je     c001120c <udp_bind+0x98>
c00111fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111ff:	8b 10                	mov    edx,DWORD PTR [eax]
c0011201:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011205:	8b 00                	mov    eax,DWORD PTR [eax]
c0011207:	39 c2                	cmp    edx,eax
c0011209:	75 09                	jne    c0011214 <udp_bind+0xa0>
c001120b:	90                   	nop
c001120c:	b0 f8                	mov    al,0xf8
c001120e:	e9 dd 00 00 00       	jmp    c00112f0 <udp_bind+0x17c>
c0011213:	90                   	nop
c0011214:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011218:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001121b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001121f:	90                   	nop
c0011220:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011225:	0f 85 69 ff ff ff    	jne    c0011194 <udp_bind+0x20>
c001122b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011230:	74 0a                	je     c001123c <udp_bind+0xc8>
c0011232:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011236:	8b 00                	mov    eax,DWORD PTR [eax]
c0011238:	eb 0a                	jmp    c0011244 <udp_bind+0xd0>
c001123a:	66 90                	xchg   ax,ax
c001123c:	b8 00 00 00 00       	mov    eax,0x0
c0011241:	8d 76 00             	lea    esi,[esi+0x0]
c0011244:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011248:	89 02                	mov    DWORD PTR [edx],eax
c001124a:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001124f:	85 c0                	test   eax,eax
c0011251:	75 6d                	jne    c00112c0 <udp_bind+0x14c>
c0011253:	66 c7 44 24 0c 00 c0 	mov    WORD PTR [esp+0xc],0xc000
c001125a:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c001125f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011263:	eb 3b                	jmp    c00112a0 <udp_bind+0x12c>
c0011265:	8d 76 00             	lea    esi,[esi+0x0]
c0011268:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001126c:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011270:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0011275:	0f b7 c0             	movzx  eax,ax
c0011278:	39 c2                	cmp    edx,eax
c001127a:	75 18                	jne    c0011294 <udp_bind+0x120>
c001127c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011280:	83 c0 01             	add    eax,0x1
c0011283:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011288:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c001128d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011291:	eb 0d                	jmp    c00112a0 <udp_bind+0x12c>
c0011293:	90                   	nop
c0011294:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011298:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001129b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001129f:	90                   	nop
c00112a0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00112a5:	74 0d                	je     c00112b4 <udp_bind+0x140>
c00112a7:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00112ac:	3d ff ff 00 00       	cmp    eax,0xffff
c00112b1:	75 b5                	jne    c0011268 <udp_bind+0xf4>
c00112b3:	90                   	nop
c00112b4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00112b9:	74 05                	je     c00112c0 <udp_bind+0x14c>
c00112bb:	b0 f8                	mov    al,0xf8
c00112bd:	eb 31                	jmp    c00112f0 <udp_bind+0x17c>
c00112bf:	90                   	nop
c00112c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00112c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112c8:	66 89 42 12          	mov    WORD PTR [edx+0x12],ax
c00112cc:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00112d1:	85 c0                	test   eax,eax
c00112d3:	75 17                	jne    c00112ec <udp_bind+0x178>
c00112d5:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c00112db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00112df:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00112e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00112e6:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c00112eb:	90                   	nop
c00112ec:	b0 00                	mov    al,0x0
c00112ee:	66 90                	xchg   ax,ax
c00112f0:	83 c4 2c             	add    esp,0x2c
c00112f3:	c3                   	ret    

c00112f4 <udp_sendto_if>:
c00112f4:	83 ec 2c             	sub    esp,0x2c
c00112f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00112fb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011300:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011304:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011308:	0f b7 c0             	movzx  eax,ax
c001130b:	85 c0                	test   eax,eax
c001130d:	75 39                	jne    c0011348 <udp_sendto_if+0x54>
c001130f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011313:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011317:	0f b7 d0             	movzx  edx,ax
c001131a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001131e:	83 ec 04             	sub    esp,0x4
c0011321:	52                   	push   edx
c0011322:	50                   	push   eax
c0011323:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011327:	e8 48 fe ff ff       	call   c0011174 <udp_bind>
c001132c:	83 c4 10             	add    esp,0x10
c001132f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0011333:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c0011338:	85 c0                	test   eax,eax
c001133a:	74 0c                	je     c0011348 <udp_sendto_if+0x54>
c001133c:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0011340:	e9 2b 02 00 00       	jmp    c0011570 <udp_sendto_if+0x27c>
c0011345:	8d 76 00             	lea    esi,[esi+0x0]
c0011348:	83 ec 08             	sub    esp,0x8
c001134b:	6a 08                	push   0x8
c001134d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011351:	e8 b6 6d ff ff       	call   c000810c <pbuf_header>
c0011356:	83 c4 10             	add    esp,0x10
c0011359:	0f b6 c0             	movzx  eax,al
c001135c:	85 c0                	test   eax,eax
c001135e:	74 48                	je     c00113a8 <udp_sendto_if+0xb4>
c0011360:	83 ec 04             	sub    esp,0x4
c0011363:	6a 00                	push   0x0
c0011365:	6a 08                	push   0x8
c0011367:	6a 01                	push   0x1
c0011369:	e8 12 71 ff ff       	call   c0008480 <pbuf_alloc>
c001136e:	83 c4 10             	add    esp,0x10
c0011371:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011375:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001137a:	75 08                	jne    c0011384 <udp_sendto_if+0x90>
c001137c:	b0 ff                	mov    al,0xff
c001137e:	e9 ed 01 00 00       	jmp    c0011570 <udp_sendto_if+0x27c>
c0011383:	90                   	nop
c0011384:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011388:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001138b:	0f b7 c0             	movzx  eax,ax
c001138e:	85 c0                	test   eax,eax
c0011390:	74 1e                	je     c00113b0 <udp_sendto_if+0xbc>
c0011392:	83 ec 08             	sub    esp,0x8
c0011395:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011399:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001139d:	e8 1e 78 ff ff       	call   c0008bc0 <pbuf_chain>
c00113a2:	83 c4 10             	add    esp,0x10
c00113a5:	eb 09                	jmp    c00113b0 <udp_sendto_if+0xbc>
c00113a7:	90                   	nop
c00113a8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00113ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00113b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00113b4:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00113b8:	0f b7 c0             	movzx  eax,ax
c00113bb:	83 f8 07             	cmp    eax,0x7
c00113be:	77 18                	ja     c00113d8 <udp_sendto_if+0xe4>
c00113c0:	83 ec 08             	sub    esp,0x8
c00113c3:	68 e0 08 03 c0       	push   0xc00308e0
c00113c8:	68 46 f9 02 c0       	push   0xc002f946
c00113cd:	e8 0a e7 00 00       	call   c001fadc <CPrintf>
c00113d2:	83 c4 10             	add    esp,0x10
c00113d5:	8d 76 00             	lea    esi,[esi+0x0]
c00113d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00113dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00113e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113e7:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00113eb:	0f b7 c0             	movzx  eax,ax
c00113ee:	83 ec 0c             	sub    esp,0xc
c00113f1:	50                   	push   eax
c00113f2:	e8 f1 f7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00113f7:	83 c4 10             	add    esp,0x10
c00113fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00113fe:	66 89 02             	mov    WORD PTR [edx],ax
c0011401:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011406:	83 ec 0c             	sub    esp,0xc
c0011409:	50                   	push   eax
c001140a:	e8 d9 f7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001140f:	83 c4 10             	add    esp,0x10
c0011412:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011416:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c001141a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001141e:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0011424:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011428:	85 c0                	test   eax,eax
c001142a:	74 0c                	je     c0011438 <udp_sendto_if+0x144>
c001142c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011430:	8b 00                	mov    eax,DWORD PTR [eax]
c0011432:	85 c0                	test   eax,eax
c0011434:	75 12                	jne    c0011448 <udp_sendto_if+0x154>
c0011436:	66 90                	xchg   ax,ax
c0011438:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001143c:	83 c0 04             	add    eax,0x4
c001143f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011443:	eb 47                	jmp    c001148c <udp_sendto_if+0x198>
c0011445:	8d 76 00             	lea    esi,[esi+0x0]
c0011448:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001144c:	8b 10                	mov    edx,DWORD PTR [eax]
c001144e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011452:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011455:	39 c2                	cmp    edx,eax
c0011457:	74 2b                	je     c0011484 <udp_sendto_if+0x190>
c0011459:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001145d:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0011461:	74 19                	je     c001147c <udp_sendto_if+0x188>
c0011463:	83 ec 0c             	sub    esp,0xc
c0011466:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001146a:	e8 39 6e ff ff       	call   c00082a8 <pbuf_free>
c001146f:	83 c4 10             	add    esp,0x10
c0011472:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001147a:	66 90                	xchg   ax,ax
c001147c:	b0 fa                	mov    al,0xfa
c001147e:	e9 ed 00 00 00       	jmp    c0011570 <udp_sendto_if+0x27c>
c0011483:	90                   	nop
c0011484:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011488:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001148c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011490:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011493:	0f b7 c0             	movzx  eax,ax
c0011496:	83 ec 0c             	sub    esp,0xc
c0011499:	50                   	push   eax
c001149a:	e8 49 f7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001149f:	83 c4 10             	add    esp,0x10
c00114a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00114a6:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00114aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00114ae:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00114b1:	0f b6 c0             	movzx  eax,al
c00114b4:	83 e0 01             	and    eax,0x1
c00114b7:	75 4b                	jne    c0011504 <udp_sendto_if+0x210>
c00114b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00114bd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00114c0:	0f b7 c0             	movzx  eax,ax
c00114c3:	83 ec 0c             	sub    esp,0xc
c00114c6:	50                   	push   eax
c00114c7:	6a 11                	push   0x11
c00114c9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00114cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00114d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00114d5:	e8 ea 1b 00 00       	call   c00130c4 <inet_chksum_pseudo>
c00114da:	83 c4 20             	add    esp,0x20
c00114dd:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00114e2:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c00114e7:	85 c0                	test   eax,eax
c00114e9:	75 09                	jne    c00114f4 <udp_sendto_if+0x200>
c00114eb:	66 c7 44 24 16 ff ff 	mov    WORD PTR [esp+0x16],0xffff
c00114f2:	66 90                	xchg   ax,ax
c00114f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00114f8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00114fd:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0011501:	8d 76 00             	lea    esi,[esi+0x0]
c0011504:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011508:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c001150b:	0f b6 d0             	movzx  edx,al
c001150e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011512:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0011515:	0f b6 c0             	movzx  eax,al
c0011518:	83 ec 04             	sub    esp,0x4
c001151b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001151f:	6a 11                	push   0x11
c0011521:	52                   	push   edx
c0011522:	50                   	push   eax
c0011523:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011527:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001152b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001152f:	e8 f4 24 00 00       	call   c0013a28 <ip_output_if>
c0011534:	83 c4 20             	add    esp,0x20
c0011537:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001153b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001153f:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0011543:	74 17                	je     c001155c <udp_sendto_if+0x268>
c0011545:	83 ec 0c             	sub    esp,0xc
c0011548:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001154c:	e8 57 6d ff ff       	call   c00082a8 <pbuf_free>
c0011551:	83 c4 10             	add    esp,0x10
c0011554:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001155c:	66 a1 98 67 03 c0    	mov    ax,ds:0xc0036798
c0011562:	83 c0 01             	add    eax,0x1
c0011565:	66 a3 98 67 03 c0    	mov    ds:0xc0036798,ax
c001156b:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c001156f:	90                   	nop
c0011570:	83 c4 2c             	add    esp,0x2c
c0011573:	c3                   	ret    

c0011574 <udp_sendto>:
c0011574:	83 ec 2c             	sub    esp,0x2c
c0011577:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001157b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011580:	83 ec 0c             	sub    esp,0xc
c0011583:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011587:	e8 c4 1f 00 00       	call   c0013550 <ip_route>
c001158c:	83 c4 10             	add    esp,0x10
c001158f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011593:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011598:	75 16                	jne    c00115b0 <udp_sendto+0x3c>
c001159a:	66 a1 a6 67 03 c0    	mov    ax,ds:0xc00367a6
c00115a0:	83 c0 01             	add    eax,0x1
c00115a3:	66 a3 a6 67 03 c0    	mov    ds:0xc00367a6,ax
c00115a9:	b0 fc                	mov    al,0xfc
c00115ab:	eb 27                	jmp    c00115d4 <udp_sendto+0x60>
c00115ad:	8d 76 00             	lea    esi,[esi+0x0]
c00115b0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00115b5:	83 ec 0c             	sub    esp,0xc
c00115b8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00115bc:	50                   	push   eax
c00115bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00115c1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00115c5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00115c9:	e8 26 fd ff ff       	call   c00112f4 <udp_sendto_if>
c00115ce:	83 c4 20             	add    esp,0x20
c00115d1:	8d 76 00             	lea    esi,[esi+0x0]
c00115d4:	83 c4 2c             	add    esp,0x2c
c00115d7:	c3                   	ret    

c00115d8 <udp_send>:
c00115d8:	83 ec 0c             	sub    esp,0xc
c00115db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115df:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00115e2:	0f b7 c0             	movzx  eax,ax
c00115e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00115e9:	83 c2 04             	add    edx,0x4
c00115ec:	50                   	push   eax
c00115ed:	52                   	push   edx
c00115ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115f6:	e8 79 ff ff ff       	call   c0011574 <udp_sendto>
c00115fb:	83 c4 10             	add    esp,0x10
c00115fe:	83 c4 0c             	add    esp,0xc
c0011601:	c3                   	ret    
c0011602:	66 90                	xchg   ax,ax

c0011604 <udp_connect>:
c0011604:	83 ec 2c             	sub    esp,0x2c
c0011607:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001160b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011610:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011614:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011618:	0f b7 c0             	movzx  eax,ax
c001161b:	85 c0                	test   eax,eax
c001161d:	75 39                	jne    c0011658 <udp_connect+0x54>
c001161f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011623:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011627:	0f b7 d0             	movzx  edx,ax
c001162a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001162e:	83 ec 04             	sub    esp,0x4
c0011631:	52                   	push   edx
c0011632:	50                   	push   eax
c0011633:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011637:	e8 38 fb ff ff       	call   c0011174 <udp_bind>
c001163c:	83 c4 10             	add    esp,0x10
c001163f:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0011643:	0f be 44 24 1b       	movsx  eax,BYTE PTR [esp+0x1b]
c0011648:	85 c0                	test   eax,eax
c001164a:	74 0c                	je     c0011658 <udp_connect+0x54>
c001164c:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0011650:	e9 8b 00 00 00       	jmp    c00116e0 <udp_connect+0xdc>
c0011655:	8d 76 00             	lea    esi,[esi+0x0]
c0011658:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001165d:	74 09                	je     c0011668 <udp_connect+0x64>
c001165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011663:	8b 00                	mov    eax,DWORD PTR [eax]
c0011665:	eb 09                	jmp    c0011670 <udp_connect+0x6c>
c0011667:	90                   	nop
c0011668:	b8 00 00 00 00       	mov    eax,0x0
c001166d:	8d 76 00             	lea    esi,[esi+0x0]
c0011670:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011674:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011677:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001167b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001167f:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0011683:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011687:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c001168a:	83 c8 04             	or     eax,0x4
c001168d:	88 c2                	mov    dl,al
c001168f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011693:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c0011696:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c001169b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001169f:	eb 1f                	jmp    c00116c0 <udp_connect+0xbc>
c00116a1:	8d 76 00             	lea    esi,[esi+0x0]
c00116a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116a8:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00116ac:	75 06                	jne    c00116b4 <udp_connect+0xb0>
c00116ae:	b0 00                	mov    al,0x0
c00116b0:	eb 2e                	jmp    c00116e0 <udp_connect+0xdc>
c00116b2:	66 90                	xchg   ax,ax
c00116b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00116b8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00116bb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00116bf:	90                   	nop
c00116c0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00116c5:	75 dd                	jne    c00116a4 <udp_connect+0xa0>
c00116c7:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c00116cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116d1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00116d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116d8:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c00116dd:	b0 00                	mov    al,0x0
c00116df:	90                   	nop
c00116e0:	83 c4 2c             	add    esp,0x2c
c00116e3:	c3                   	ret    

c00116e4 <udp_disconnect>:
c00116e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00116ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116f3:	66 c7 40 14 00 00    	mov    WORD PTR [eax+0x14],0x0
c00116f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116fd:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0011700:	83 e0 fb             	and    eax,0xfffffffb
c0011703:	88 c2                	mov    dl,al
c0011705:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011709:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c001170c:	90                   	nop
c001170d:	c3                   	ret    
c001170e:	66 90                	xchg   ax,ax

c0011710 <udp_recv>:
c0011710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011714:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011718:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001171b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001171f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011726:	90                   	nop
c0011727:	c3                   	ret    

c0011728 <udp_remove>:
c0011728:	83 ec 1c             	sub    esp,0x1c
c001172b:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011730:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0011734:	75 12                	jne    c0011748 <udp_remove+0x20>
c0011736:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c001173b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001173e:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c0011743:	eb 4b                	jmp    c0011790 <udp_remove+0x68>
c0011745:	8d 76 00             	lea    esi,[esi+0x0]
c0011748:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c001174d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011751:	eb 35                	jmp    c0011788 <udp_remove+0x60>
c0011753:	90                   	nop
c0011754:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011758:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001175b:	85 c0                	test   eax,eax
c001175d:	74 1d                	je     c001177c <udp_remove+0x54>
c001175f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011763:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011766:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c001176a:	75 10                	jne    c001177c <udp_remove+0x54>
c001176c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011770:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011773:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011777:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001177a:	66 90                	xchg   ax,ax
c001177c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011780:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011783:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011787:	90                   	nop
c0011788:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001178d:	75 c5                	jne    c0011754 <udp_remove+0x2c>
c001178f:	90                   	nop
c0011790:	83 ec 08             	sub    esp,0x8
c0011793:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011797:	6a 01                	push   0x1
c0011799:	e8 4e 62 ff ff       	call   c00079ec <memp_free>
c001179e:	83 c4 10             	add    esp,0x10
c00117a1:	90                   	nop
c00117a2:	83 c4 1c             	add    esp,0x1c
c00117a5:	c3                   	ret    
c00117a6:	66 90                	xchg   ax,ax

c00117a8 <udp_new>:
c00117a8:	83 ec 1c             	sub    esp,0x1c
c00117ab:	83 ec 0c             	sub    esp,0xc
c00117ae:	6a 01                	push   0x1
c00117b0:	e8 0b 61 ff ff       	call   c00078c0 <memp_malloc>
c00117b5:	83 c4 10             	add    esp,0x10
c00117b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00117bc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00117c1:	74 1d                	je     c00117e0 <udp_new+0x38>
c00117c3:	83 ec 04             	sub    esp,0x4
c00117c6:	6a 20                	push   0x20
c00117c8:	6a 00                	push   0x0
c00117ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00117ce:	e8 1d ed fe ff       	call   c00004f0 <memset>
c00117d3:	83 c4 10             	add    esp,0x10
c00117d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117da:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c00117de:	66 90                	xchg   ax,ax
c00117e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117e4:	83 c4 1c             	add    esp,0x1c
c00117e7:	c3                   	ret    

c00117e8 <free_entry>:
c00117e8:	83 ec 0c             	sub    esp,0xc
c00117eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117ef:	c1 e0 04             	shl    eax,0x4
c00117f2:	05 00 a9 03 c0       	add    eax,0xc003a900
c00117f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00117f9:	85 c0                	test   eax,eax
c00117fb:	74 2f                	je     c001182c <free_entry+0x44>
c00117fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011801:	c1 e0 04             	shl    eax,0x4
c0011804:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011809:	8b 00                	mov    eax,DWORD PTR [eax]
c001180b:	83 ec 0c             	sub    esp,0xc
c001180e:	50                   	push   eax
c001180f:	e8 94 6a ff ff       	call   c00082a8 <pbuf_free>
c0011814:	83 c4 10             	add    esp,0x10
c0011817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001181b:	c1 e0 04             	shl    eax,0x4
c001181e:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011823:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011829:	8d 76 00             	lea    esi,[esi+0x0]
c001182c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011830:	c1 e0 04             	shl    eax,0x4
c0011833:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011838:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001183b:	90                   	nop
c001183c:	83 c4 0c             	add    esp,0xc
c001183f:	c3                   	ret    

c0011840 <etharp_tmr>:
c0011840:	83 ec 1c             	sub    esp,0x1c
c0011843:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011848:	e9 a7 00 00 00       	jmp    c00118f4 <etharp_tmr+0xb4>
c001184d:	8d 76 00             	lea    esi,[esi+0x0]
c0011850:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011855:	c1 e0 04             	shl    eax,0x4
c0011858:	05 0e a9 03 c0       	add    eax,0xc003a90e
c001185d:	8a 00                	mov    al,BYTE PTR [eax]
c001185f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0011863:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0011868:	85 c0                	test   eax,eax
c001186a:	74 7c                	je     c00118e8 <etharp_tmr+0xa8>
c001186c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011871:	89 c2                	mov    edx,eax
c0011873:	c1 e2 04             	shl    edx,0x4
c0011876:	81 c2 0f a9 03 c0    	add    edx,0xc003a90f
c001187c:	8a 12                	mov    dl,BYTE PTR [edx]
c001187e:	83 c2 01             	add    edx,0x1
c0011881:	c1 e0 04             	shl    eax,0x4
c0011884:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011889:	88 10                	mov    BYTE PTR [eax],dl
c001188b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011890:	c1 e0 04             	shl    eax,0x4
c0011893:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011898:	8a 00                	mov    al,BYTE PTR [eax]
c001189a:	0f b6 c0             	movzx  eax,al
c001189d:	3d ef 00 00 00       	cmp    eax,0xef
c00118a2:	77 30                	ja     c00118d4 <etharp_tmr+0x94>
c00118a4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00118a9:	c1 e0 04             	shl    eax,0x4
c00118ac:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00118b1:	8a 00                	mov    al,BYTE PTR [eax]
c00118b3:	0f b6 c0             	movzx  eax,al
c00118b6:	83 f8 01             	cmp    eax,0x1
c00118b9:	75 2d                	jne    c00118e8 <etharp_tmr+0xa8>
c00118bb:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00118c0:	c1 e0 04             	shl    eax,0x4
c00118c3:	05 0f a9 03 c0       	add    eax,0xc003a90f
c00118c8:	8a 00                	mov    al,BYTE PTR [eax]
c00118ca:	0f b6 c0             	movzx  eax,al
c00118cd:	83 f8 01             	cmp    eax,0x1
c00118d0:	76 16                	jbe    c00118e8 <etharp_tmr+0xa8>
c00118d2:	66 90                	xchg   ax,ax
c00118d4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00118d9:	83 ec 0c             	sub    esp,0xc
c00118dc:	50                   	push   eax
c00118dd:	e8 06 ff ff ff       	call   c00117e8 <free_entry>
c00118e2:	83 c4 10             	add    esp,0x10
c00118e5:	8d 76 00             	lea    esi,[esi+0x0]
c00118e8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00118ec:	83 c0 01             	add    eax,0x1
c00118ef:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00118f3:	90                   	nop
c00118f4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00118f9:	83 f8 09             	cmp    eax,0x9
c00118fc:	0f 86 4e ff ff ff    	jbe    c0011850 <etharp_tmr+0x10>
c0011902:	90                   	nop
c0011903:	83 c4 1c             	add    esp,0x1c
c0011906:	c3                   	ret    
c0011907:	90                   	nop

c0011908 <find_entry>:
c0011908:	83 ec 2c             	sub    esp,0x2c
c001190b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001190f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011913:	c6 44 24 1f 0a       	mov    BYTE PTR [esp+0x1f],0xa
c0011918:	c6 44 24 1e 0a       	mov    BYTE PTR [esp+0x1e],0xa
c001191d:	c6 44 24 1d 0a       	mov    BYTE PTR [esp+0x1d],0xa
c0011922:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0011927:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c001192c:	c6 44 24 1a 00       	mov    BYTE PTR [esp+0x1a],0x0
c0011931:	c6 44 24 19 0a       	mov    BYTE PTR [esp+0x19],0xa
c0011936:	c6 44 24 18 00       	mov    BYTE PTR [esp+0x18],0x0
c001193b:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0011940:	e9 7f 01 00 00       	jmp    c0011ac4 <find_entry+0x1bc>
c0011945:	8d 76 00             	lea    esi,[esi+0x0]
c0011948:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001194d:	c1 e0 04             	shl    eax,0x4
c0011950:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011955:	8a 00                	mov    al,BYTE PTR [eax]
c0011957:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001195b:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011960:	83 f8 0a             	cmp    eax,0xa
c0011963:	75 17                	jne    c001197c <find_entry+0x74>
c0011965:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c001196a:	85 c0                	test   eax,eax
c001196c:	75 0e                	jne    c001197c <find_entry+0x74>
c001196e:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011972:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0011976:	e9 3d 01 00 00       	jmp    c0011ab8 <find_entry+0x1b0>
c001197b:	90                   	nop
c001197c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011981:	85 c0                	test   eax,eax
c0011983:	0f 84 2f 01 00 00    	je     c0011ab8 <find_entry+0x1b0>
c0011989:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c001198e:	83 f8 01             	cmp    eax,0x1
c0011991:	74 21                	je     c00119b4 <find_entry+0xac>
c0011993:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011998:	83 f8 02             	cmp    eax,0x2
c001199b:	74 17                	je     c00119b4 <find_entry+0xac>
c001199d:	83 ec 08             	sub    esp,0x8
c00119a0:	68 10 09 03 c0       	push   0xc0030910
c00119a5:	68 46 f9 02 c0       	push   0xc002f946
c00119aa:	e8 2d e1 00 00       	call   c001fadc <CPrintf>
c00119af:	83 c4 10             	add    esp,0x10
c00119b2:	66 90                	xchg   ax,ax
c00119b4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00119b9:	74 25                	je     c00119e0 <find_entry+0xd8>
c00119bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00119bf:	8b 10                	mov    edx,DWORD PTR [eax]
c00119c1:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00119c6:	c1 e0 04             	shl    eax,0x4
c00119c9:	05 04 a9 03 c0       	add    eax,0xc003a904
c00119ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00119d0:	39 c2                	cmp    edx,eax
c00119d2:	75 0c                	jne    c00119e0 <find_entry+0xd8>
c00119d4:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00119d8:	e9 53 02 00 00       	jmp    c0011c30 <find_entry+0x328>
c00119dd:	8d 76 00             	lea    esi,[esi+0x0]
c00119e0:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00119e5:	83 f8 01             	cmp    eax,0x1
c00119e8:	0f 85 8a 00 00 00    	jne    c0011a78 <find_entry+0x170>
c00119ee:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00119f3:	c1 e0 04             	shl    eax,0x4
c00119f6:	05 00 a9 03 c0       	add    eax,0xc003a900
c00119fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00119fd:	85 c0                	test   eax,eax
c00119ff:	74 3f                	je     c0011a40 <find_entry+0x138>
c0011a01:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011a06:	c1 e0 04             	shl    eax,0x4
c0011a09:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011a0e:	8a 00                	mov    al,BYTE PTR [eax]
c0011a10:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0011a15:	0f b6 c0             	movzx  eax,al
c0011a18:	39 c2                	cmp    edx,eax
c0011a1a:	0f 87 98 00 00 00    	ja     c0011ab8 <find_entry+0x1b0>
c0011a20:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011a24:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0011a28:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011a2d:	c1 e0 04             	shl    eax,0x4
c0011a30:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011a35:	8a 00                	mov    al,BYTE PTR [eax]
c0011a37:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0011a3b:	eb 7b                	jmp    c0011ab8 <find_entry+0x1b0>
c0011a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0011a40:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011a45:	c1 e0 04             	shl    eax,0x4
c0011a48:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011a4d:	8a 00                	mov    al,BYTE PTR [eax]
c0011a4f:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011a54:	0f b6 c0             	movzx  eax,al
c0011a57:	39 c2                	cmp    edx,eax
c0011a59:	77 5d                	ja     c0011ab8 <find_entry+0x1b0>
c0011a5b:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011a5f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011a63:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011a68:	c1 e0 04             	shl    eax,0x4
c0011a6b:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011a70:	8a 00                	mov    al,BYTE PTR [eax]
c0011a72:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0011a76:	eb 40                	jmp    c0011ab8 <find_entry+0x1b0>
c0011a78:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011a7d:	83 f8 02             	cmp    eax,0x2
c0011a80:	75 36                	jne    c0011ab8 <find_entry+0x1b0>
c0011a82:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011a87:	c1 e0 04             	shl    eax,0x4
c0011a8a:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011a8f:	8a 00                	mov    al,BYTE PTR [eax]
c0011a91:	0f b6 54 24 1a       	movzx  edx,BYTE PTR [esp+0x1a]
c0011a96:	0f b6 c0             	movzx  eax,al
c0011a99:	39 c2                	cmp    edx,eax
c0011a9b:	77 1b                	ja     c0011ab8 <find_entry+0x1b0>
c0011a9d:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011aa1:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0011aa5:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011aaa:	c1 e0 04             	shl    eax,0x4
c0011aad:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011ab2:	8a 00                	mov    al,BYTE PTR [eax]
c0011ab4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0011ab8:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011abc:	83 c0 01             	add    eax,0x1
c0011abf:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011ac3:	90                   	nop
c0011ac4:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011ac9:	83 f8 09             	cmp    eax,0x9
c0011acc:	0f 86 76 fe ff ff    	jbe    c0011948 <find_entry+0x40>
c0011ad2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011ad7:	83 e0 02             	and    eax,0x2
c0011ada:	75 14                	jne    c0011af0 <find_entry+0x1e8>
c0011adc:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011ae1:	83 f8 0a             	cmp    eax,0xa
c0011ae4:	75 12                	jne    c0011af8 <find_entry+0x1f0>
c0011ae6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011aeb:	83 e0 01             	and    eax,0x1
c0011aee:	75 08                	jne    c0011af8 <find_entry+0x1f0>
c0011af0:	b0 ff                	mov    al,0xff
c0011af2:	e9 39 01 00 00       	jmp    c0011c30 <find_entry+0x328>
c0011af7:	90                   	nop
c0011af8:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011afd:	83 f8 09             	cmp    eax,0x9
c0011b00:	7f 0e                	jg     c0011b10 <find_entry+0x208>
c0011b02:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0011b06:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011b0a:	e9 a1 00 00 00       	jmp    c0011bb0 <find_entry+0x2a8>
c0011b0f:	90                   	nop
c0011b10:	0f be 44 24 1e       	movsx  eax,BYTE PTR [esp+0x1e]
c0011b15:	83 f8 09             	cmp    eax,0x9
c0011b18:	7f 32                	jg     c0011b4c <find_entry+0x244>
c0011b1a:	8a 44 24 1e          	mov    al,BYTE PTR [esp+0x1e]
c0011b1e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011b22:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b27:	c1 e0 04             	shl    eax,0x4
c0011b2a:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011b2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b31:	85 c0                	test   eax,eax
c0011b33:	74 47                	je     c0011b7c <find_entry+0x274>
c0011b35:	83 ec 08             	sub    esp,0x8
c0011b38:	68 89 0a 03 c0       	push   0xc0030a89
c0011b3d:	68 46 f9 02 c0       	push   0xc002f946
c0011b42:	e8 95 df 00 00       	call   c001fadc <CPrintf>
c0011b47:	83 c4 10             	add    esp,0x10
c0011b4a:	eb 30                	jmp    c0011b7c <find_entry+0x274>
c0011b4c:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011b51:	83 f8 09             	cmp    eax,0x9
c0011b54:	7f 0a                	jg     c0011b60 <find_entry+0x258>
c0011b56:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011b5a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011b5e:	eb 1c                	jmp    c0011b7c <find_entry+0x274>
c0011b60:	0f be 44 24 19       	movsx  eax,BYTE PTR [esp+0x19]
c0011b65:	83 f8 09             	cmp    eax,0x9
c0011b68:	7f 0a                	jg     c0011b74 <find_entry+0x26c>
c0011b6a:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0011b6e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011b72:	eb 08                	jmp    c0011b7c <find_entry+0x274>
c0011b74:	b0 ff                	mov    al,0xff
c0011b76:	e9 b5 00 00 00       	jmp    c0011c30 <find_entry+0x328>
c0011b7b:	90                   	nop
c0011b7c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b81:	83 f8 09             	cmp    eax,0x9
c0011b84:	76 16                	jbe    c0011b9c <find_entry+0x294>
c0011b86:	83 ec 08             	sub    esp,0x8
c0011b89:	68 a0 0a 03 c0       	push   0xc0030aa0
c0011b8e:	68 46 f9 02 c0       	push   0xc002f946
c0011b93:	e8 44 df 00 00       	call   c001fadc <CPrintf>
c0011b98:	83 c4 10             	add    esp,0x10
c0011b9b:	90                   	nop
c0011b9c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011ba1:	83 ec 0c             	sub    esp,0xc
c0011ba4:	50                   	push   eax
c0011ba5:	e8 3e fc ff ff       	call   c00117e8 <free_entry>
c0011baa:	83 c4 10             	add    esp,0x10
c0011bad:	8d 76 00             	lea    esi,[esi+0x0]
c0011bb0:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011bb5:	83 f8 09             	cmp    eax,0x9
c0011bb8:	76 16                	jbe    c0011bd0 <find_entry+0x2c8>
c0011bba:	83 ec 08             	sub    esp,0x8
c0011bbd:	68 a0 0a 03 c0       	push   0xc0030aa0
c0011bc2:	68 46 f9 02 c0       	push   0xc002f946
c0011bc7:	e8 10 df 00 00       	call   c001fadc <CPrintf>
c0011bcc:	83 c4 10             	add    esp,0x10
c0011bcf:	90                   	nop
c0011bd0:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011bd5:	c1 e0 04             	shl    eax,0x4
c0011bd8:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011bdd:	8a 00                	mov    al,BYTE PTR [eax]
c0011bdf:	0f b6 c0             	movzx  eax,al
c0011be2:	85 c0                	test   eax,eax
c0011be4:	74 16                	je     c0011bfc <find_entry+0x2f4>
c0011be6:	83 ec 08             	sub    esp,0x8
c0011be9:	68 50 09 03 c0       	push   0xc0030950
c0011bee:	68 46 f9 02 c0       	push   0xc002f946
c0011bf3:	e8 e4 de 00 00       	call   c001fadc <CPrintf>
c0011bf8:	83 c4 10             	add    esp,0x10
c0011bfb:	90                   	nop
c0011bfc:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011c01:	74 19                	je     c0011c1c <find_entry+0x314>
c0011c03:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c0011c08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c0e:	c1 e2 04             	shl    edx,0x4
c0011c11:	81 c2 04 a9 03 c0    	add    edx,0xc003a904
c0011c17:	89 02                	mov    DWORD PTR [edx],eax
c0011c19:	8d 76 00             	lea    esi,[esi+0x0]
c0011c1c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c21:	c1 e0 04             	shl    eax,0x4
c0011c24:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011c29:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011c2c:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011c30:	83 c4 2c             	add    esp,0x2c
c0011c33:	c3                   	ret    

c0011c34 <etharp_send_ip>:
c0011c34:	83 ec 1c             	sub    esp,0x1c
c0011c37:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011c3b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011c3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011c46:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011c49:	0f b6 c0             	movzx  eax,al
c0011c4c:	83 f8 06             	cmp    eax,0x6
c0011c4f:	74 17                	je     c0011c68 <etharp_send_ip+0x34>
c0011c51:	83 ec 08             	sub    esp,0x8
c0011c54:	68 7c 09 03 c0       	push   0xc003097c
c0011c59:	68 46 f9 02 c0       	push   0xc002f946
c0011c5e:	e8 79 de 00 00       	call   c001fadc <CPrintf>
c0011c63:	83 c4 10             	add    esp,0x10
c0011c66:	66 90                	xchg   ax,ax
c0011c68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c6c:	83 ec 04             	sub    esp,0x4
c0011c6f:	6a 06                	push   0x6
c0011c71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011c75:	50                   	push   eax
c0011c76:	e8 ff e6 fe ff       	call   c000037a <memcpy>
c0011c7b:	83 c4 10             	add    esp,0x10
c0011c7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c82:	83 c0 06             	add    eax,0x6
c0011c85:	83 ec 04             	sub    esp,0x4
c0011c88:	6a 06                	push   0x6
c0011c8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011c8e:	50                   	push   eax
c0011c8f:	e8 e6 e6 fe ff       	call   c000037a <memcpy>
c0011c94:	83 c4 10             	add    esp,0x10
c0011c97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c9b:	66 c7 40 0c 08 00    	mov    WORD PTR [eax+0xc],0x8
c0011ca1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ca5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011ca8:	83 ec 08             	sub    esp,0x8
c0011cab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011caf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011cb3:	ff d0                	call   eax
c0011cb5:	83 c4 10             	add    esp,0x10
c0011cb8:	83 c4 1c             	add    esp,0x1c
c0011cbb:	c3                   	ret    

c0011cbc <update_arp_entry>:
c0011cbc:	83 ec 2c             	sub    esp,0x2c
c0011cbf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cc3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011cc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ccb:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011cce:	0f b6 c0             	movzx  eax,al
c0011cd1:	83 f8 06             	cmp    eax,0x6
c0011cd4:	74 16                	je     c0011cec <update_arp_entry+0x30>
c0011cd6:	83 ec 08             	sub    esp,0x8
c0011cd9:	68 c0 09 03 c0       	push   0xc00309c0
c0011cde:	68 46 f9 02 c0       	push   0xc002f946
c0011ce3:	e8 f4 dd 00 00       	call   c001fadc <CPrintf>
c0011ce8:	83 c4 10             	add    esp,0x10
c0011ceb:	90                   	nop
c0011cec:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011cf1:	74 39                	je     c0011d2c <update_arp_entry+0x70>
c0011cf3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011cf7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cf9:	85 c0                	test   eax,eax
c0011cfb:	74 2f                	je     c0011d2c <update_arp_entry+0x70>
c0011cfd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d01:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d03:	83 ec 08             	sub    esp,0x8
c0011d06:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011d0a:	50                   	push   eax
c0011d0b:	e8 8c 20 00 00       	call   c0013d9c <ip4_addr_isbroadcast>
c0011d10:	83 c4 10             	add    esp,0x10
c0011d13:	0f b6 c0             	movzx  eax,al
c0011d16:	85 c0                	test   eax,eax
c0011d18:	75 12                	jne    c0011d2c <update_arp_entry+0x70>
c0011d1a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d20:	25 f0 00 00 00       	and    eax,0xf0
c0011d25:	3d e0 00 00 00       	cmp    eax,0xe0
c0011d2a:	75 08                	jne    c0011d34 <update_arp_entry+0x78>
c0011d2c:	b0 f2                	mov    al,0xf2
c0011d2e:	e9 d9 00 00 00       	jmp    c0011e0c <update_arp_entry+0x150>
c0011d33:	90                   	nop
c0011d34:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011d39:	83 ec 08             	sub    esp,0x8
c0011d3c:	50                   	push   eax
c0011d3d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011d41:	e8 c2 fb ff ff       	call   c0011908 <find_entry>
c0011d46:	83 c4 10             	add    esp,0x10
c0011d49:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011d4d:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011d52:	85 c0                	test   eax,eax
c0011d54:	79 0a                	jns    c0011d60 <update_arp_entry+0xa4>
c0011d56:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011d5a:	e9 ad 00 00 00       	jmp    c0011e0c <update_arp_entry+0x150>
c0011d5f:	90                   	nop
c0011d60:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011d65:	c1 e0 04             	shl    eax,0x4
c0011d68:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011d6d:	c6 00 02             	mov    BYTE PTR [eax],0x2
c0011d70:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011d75:	c1 e0 04             	shl    eax,0x4
c0011d78:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011d7d:	83 c0 08             	add    eax,0x8
c0011d80:	83 ec 04             	sub    esp,0x4
c0011d83:	6a 06                	push   0x6
c0011d85:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011d89:	50                   	push   eax
c0011d8a:	e8 eb e5 fe ff       	call   c000037a <memcpy>
c0011d8f:	83 c4 10             	add    esp,0x10
c0011d92:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011d97:	c1 e0 04             	shl    eax,0x4
c0011d9a:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011d9f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011da2:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011da7:	c1 e0 04             	shl    eax,0x4
c0011daa:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011daf:	8b 00                	mov    eax,DWORD PTR [eax]
c0011db1:	85 c0                	test   eax,eax
c0011db3:	74 53                	je     c0011e08 <update_arp_entry+0x14c>
c0011db5:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011dba:	c1 e0 04             	shl    eax,0x4
c0011dbd:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011dc2:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011dc8:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011dcd:	c1 e0 04             	shl    eax,0x4
c0011dd0:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011dd5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011ddb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ddf:	83 c0 23             	add    eax,0x23
c0011de2:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011de6:	50                   	push   eax
c0011de7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011deb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011def:	e8 40 fe ff ff       	call   c0011c34 <etharp_send_ip>
c0011df4:	83 c4 10             	add    esp,0x10
c0011df7:	83 ec 0c             	sub    esp,0xc
c0011dfa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011dfe:	e8 a5 64 ff ff       	call   c00082a8 <pbuf_free>
c0011e03:	83 c4 10             	add    esp,0x10
c0011e06:	66 90                	xchg   ax,ax
c0011e08:	b0 00                	mov    al,0x0
c0011e0a:	66 90                	xchg   ax,ax
c0011e0c:	83 c4 2c             	add    esp,0x2c
c0011e0f:	c3                   	ret    

c0011e10 <etharp_find_addr>:
c0011e10:	83 ec 1c             	sub    esp,0x1c
c0011e13:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011e18:	74 0a                	je     c0011e24 <etharp_find_addr+0x14>
c0011e1a:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0011e1f:	75 1b                	jne    c0011e3c <etharp_find_addr+0x2c>
c0011e21:	8d 76 00             	lea    esi,[esi+0x0]
c0011e24:	83 ec 08             	sub    esp,0x8
c0011e27:	68 e8 09 03 c0       	push   0xc00309e8
c0011e2c:	68 46 f9 02 c0       	push   0xc002f946
c0011e31:	e8 a6 dc 00 00       	call   c001fadc <CPrintf>
c0011e36:	83 c4 10             	add    esp,0x10
c0011e39:	8d 76 00             	lea    esi,[esi+0x0]
c0011e3c:	83 ec 08             	sub    esp,0x8
c0011e3f:	6a 02                	push   0x2
c0011e41:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011e45:	e8 be fa ff ff       	call   c0011908 <find_entry>
c0011e4a:	83 c4 10             	add    esp,0x10
c0011e4d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011e51:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011e56:	85 c0                	test   eax,eax
c0011e58:	78 4a                	js     c0011ea4 <etharp_find_addr+0x94>
c0011e5a:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011e5f:	c1 e0 04             	shl    eax,0x4
c0011e62:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011e67:	8a 00                	mov    al,BYTE PTR [eax]
c0011e69:	0f b6 c0             	movzx  eax,al
c0011e6c:	83 f8 02             	cmp    eax,0x2
c0011e6f:	75 33                	jne    c0011ea4 <etharp_find_addr+0x94>
c0011e71:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011e76:	c1 e0 04             	shl    eax,0x4
c0011e79:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011e7e:	8d 50 08             	lea    edx,[eax+0x8]
c0011e81:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e85:	89 10                	mov    DWORD PTR [eax],edx
c0011e87:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011e8c:	c1 e0 04             	shl    eax,0x4
c0011e8f:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011e94:	8d 50 04             	lea    edx,[eax+0x4]
c0011e97:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e9b:	89 10                	mov    DWORD PTR [eax],edx
c0011e9d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011ea1:	eb 05                	jmp    c0011ea8 <etharp_find_addr+0x98>
c0011ea3:	90                   	nop
c0011ea4:	b0 ff                	mov    al,0xff
c0011ea6:	66 90                	xchg   ax,ax
c0011ea8:	83 c4 1c             	add    esp,0x1c
c0011eab:	c3                   	ret    

c0011eac <etharp_arp_input>:
c0011eac:	83 ec 2c             	sub    esp,0x2c
c0011eaf:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011eb4:	75 1a                	jne    c0011ed0 <etharp_arp_input+0x24>
c0011eb6:	83 ec 08             	sub    esp,0x8
c0011eb9:	68 b3 0a 03 c0       	push   0xc0030ab3
c0011ebe:	68 46 f9 02 c0       	push   0xc002f946
c0011ec3:	e8 14 dc 00 00       	call   c001fadc <CPrintf>
c0011ec8:	83 c4 10             	add    esp,0x10
c0011ecb:	e9 d0 02 00 00       	jmp    c00121a0 <etharp_arp_input+0x2f4>
c0011ed0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011ed4:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0011ed8:	0f b7 c0             	movzx  eax,ax
c0011edb:	83 f8 29             	cmp    eax,0x29
c0011ede:	77 34                	ja     c0011f14 <etharp_arp_input+0x68>
c0011ee0:	66 a1 42 67 03 c0    	mov    ax,ds:0xc0036742
c0011ee6:	83 c0 01             	add    eax,0x1
c0011ee9:	66 a3 42 67 03 c0    	mov    ds:0xc0036742,ax
c0011eef:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0011ef5:	83 c0 01             	add    eax,0x1
c0011ef8:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0011efe:	83 ec 0c             	sub    esp,0xc
c0011f01:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011f05:	e8 9e 63 ff ff       	call   c00082a8 <pbuf_free>
c0011f0a:	83 c4 10             	add    esp,0x10
c0011f0d:	e9 8e 02 00 00       	jmp    c00121a0 <etharp_arp_input+0x2f4>
c0011f12:	66 90                	xchg   ax,ax
c0011f14:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011f18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011f1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011f1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f23:	83 c0 0e             	add    eax,0xe
c0011f26:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011f2a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011f2e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0011f31:	0f b7 c0             	movzx  eax,ax
c0011f34:	3d 00 01 00 00       	cmp    eax,0x100
c0011f39:	75 31                	jne    c0011f6c <etharp_arp_input+0xc0>
c0011f3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011f3f:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0011f42:	0f b6 c0             	movzx  eax,al
c0011f45:	83 f8 06             	cmp    eax,0x6
c0011f48:	75 22                	jne    c0011f6c <etharp_arp_input+0xc0>
c0011f4a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011f4e:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
c0011f51:	0f b6 c0             	movzx  eax,al
c0011f54:	83 f8 04             	cmp    eax,0x4
c0011f57:	75 13                	jne    c0011f6c <etharp_arp_input+0xc0>
c0011f59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011f5d:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0011f61:	0f b7 c0             	movzx  eax,ax
c0011f64:	83 f8 08             	cmp    eax,0x8
c0011f67:	74 37                	je     c0011fa0 <etharp_arp_input+0xf4>
c0011f69:	8d 76 00             	lea    esi,[esi+0x0]
c0011f6c:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c0011f72:	83 c0 01             	add    eax,0x1
c0011f75:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c0011f7b:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0011f81:	83 c0 01             	add    eax,0x1
c0011f84:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0011f8a:	83 ec 0c             	sub    esp,0xc
c0011f8d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011f91:	e8 12 63 ff ff       	call   c00082a8 <pbuf_free>
c0011f96:	83 c4 10             	add    esp,0x10
c0011f99:	e9 02 02 00 00       	jmp    c00121a0 <etharp_arp_input+0x2f4>
c0011f9e:	66 90                	xchg   ax,ax
c0011fa0:	66 a1 3a 67 03 c0    	mov    ax,ds:0xc003673a
c0011fa6:	83 c0 01             	add    eax,0x1
c0011fa9:	66 a3 3a 67 03 c0    	mov    ds:0xc003673a,ax
c0011faf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011fb3:	83 c0 0e             	add    eax,0xe
c0011fb6:	83 ec 04             	sub    esp,0x4
c0011fb9:	6a 04                	push   0x4
c0011fbb:	50                   	push   eax
c0011fbc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0011fc0:	50                   	push   eax
c0011fc1:	e8 b4 e3 fe ff       	call   c000037a <memcpy>
c0011fc6:	83 c4 10             	add    esp,0x10
c0011fc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011fcd:	83 c0 18             	add    eax,0x18
c0011fd0:	83 ec 04             	sub    esp,0x4
c0011fd3:	6a 04                	push   0x4
c0011fd5:	50                   	push   eax
c0011fd6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011fda:	50                   	push   eax
c0011fdb:	e8 9a e3 fe ff       	call   c000037a <memcpy>
c0011fe0:	83 c4 10             	add    esp,0x10
c0011fe3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fe7:	83 c0 04             	add    eax,0x4
c0011fea:	74 0c                	je     c0011ff8 <etharp_arp_input+0x14c>
c0011fec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ff0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011ff3:	85 c0                	test   eax,eax
c0011ff5:	75 09                	jne    c0012000 <etharp_arp_input+0x154>
c0011ff7:	90                   	nop
c0011ff8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011ffd:	eb 15                	jmp    c0012014 <etharp_arp_input+0x168>
c0011fff:	90                   	nop
c0012000:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012004:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012008:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001200b:	39 c2                	cmp    edx,eax
c001200d:	0f 94 c0             	sete   al
c0012010:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012014:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0012019:	85 c0                	test   eax,eax
c001201b:	74 07                	je     c0012024 <etharp_arp_input+0x178>
c001201d:	b8 01 00 00 00       	mov    eax,0x1
c0012022:	eb 08                	jmp    c001202c <etharp_arp_input+0x180>
c0012024:	b8 02 00 00 00       	mov    eax,0x2
c0012029:	8d 76 00             	lea    esi,[esi+0x0]
c001202c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012030:	83 c2 08             	add    edx,0x8
c0012033:	50                   	push   eax
c0012034:	52                   	push   edx
c0012035:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012039:	50                   	push   eax
c001203a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001203e:	e8 79 fc ff ff       	call   c0011cbc <update_arp_entry>
c0012043:	83 c4 10             	add    esp,0x10
c0012046:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001204a:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c001204e:	0f b7 c0             	movzx  eax,ax
c0012051:	3d 00 01 00 00       	cmp    eax,0x100
c0012056:	74 10                	je     c0012068 <etharp_arp_input+0x1bc>
c0012058:	3d 00 02 00 00       	cmp    eax,0x200
c001205d:	0f 84 29 01 00 00    	je     c001218c <etharp_arp_input+0x2e0>
c0012063:	e9 10 01 00 00       	jmp    c0012178 <etharp_arp_input+0x2cc>
c0012068:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001206d:	85 c0                	test   eax,eax
c001206f:	0f 84 f7 00 00 00    	je     c001216c <etharp_arp_input+0x2c0>
c0012075:	83 ec 0c             	sub    esp,0xc
c0012078:	6a 02                	push   0x2
c001207a:	e8 69 eb fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001207f:	83 c4 10             	add    esp,0x10
c0012082:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012086:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c001208a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001208e:	8d 50 0e             	lea    edx,[eax+0xe]
c0012091:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012095:	83 c0 18             	add    eax,0x18
c0012098:	83 ec 04             	sub    esp,0x4
c001209b:	6a 04                	push   0x4
c001209d:	52                   	push   edx
c001209e:	50                   	push   eax
c001209f:	e8 d6 e2 fe ff       	call   c000037a <memcpy>
c00120a4:	83 c4 10             	add    esp,0x10
c00120a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120ab:	8d 50 04             	lea    edx,[eax+0x4]
c00120ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120b2:	83 c0 0e             	add    eax,0xe
c00120b5:	83 ec 04             	sub    esp,0x4
c00120b8:	6a 04                	push   0x4
c00120ba:	52                   	push   edx
c00120bb:	50                   	push   eax
c00120bc:	e8 b9 e2 fe ff       	call   c000037a <memcpy>
c00120c1:	83 c4 10             	add    esp,0x10
c00120c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120c8:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c00120cb:	0f b6 c0             	movzx  eax,al
c00120ce:	83 f8 06             	cmp    eax,0x6
c00120d1:	74 15                	je     c00120e8 <etharp_arp_input+0x23c>
c00120d3:	83 ec 08             	sub    esp,0x8
c00120d6:	68 7c 09 03 c0       	push   0xc003097c
c00120db:	68 46 f9 02 c0       	push   0xc002f946
c00120e0:	e8 f7 d9 00 00       	call   c001fadc <CPrintf>
c00120e5:	83 c4 10             	add    esp,0x10
c00120e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120ec:	8d 50 08             	lea    edx,[eax+0x8]
c00120ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120f3:	83 c0 12             	add    eax,0x12
c00120f6:	83 ec 04             	sub    esp,0x4
c00120f9:	6a 06                	push   0x6
c00120fb:	52                   	push   edx
c00120fc:	50                   	push   eax
c00120fd:	e8 78 e2 fe ff       	call   c000037a <memcpy>
c0012102:	83 c4 10             	add    esp,0x10
c0012105:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012109:	8d 50 08             	lea    edx,[eax+0x8]
c001210c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012110:	83 ec 04             	sub    esp,0x4
c0012113:	6a 06                	push   0x6
c0012115:	52                   	push   edx
c0012116:	50                   	push   eax
c0012117:	e8 5e e2 fe ff       	call   c000037a <memcpy>
c001211c:	83 c4 10             	add    esp,0x10
c001211f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012123:	83 c0 08             	add    eax,0x8
c0012126:	83 ec 04             	sub    esp,0x4
c0012129:	6a 06                	push   0x6
c001212b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001212f:	50                   	push   eax
c0012130:	e8 45 e2 fe ff       	call   c000037a <memcpy>
c0012135:	83 c4 10             	add    esp,0x10
c0012138:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001213c:	83 c0 06             	add    eax,0x6
c001213f:	83 ec 04             	sub    esp,0x4
c0012142:	6a 06                	push   0x6
c0012144:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012148:	50                   	push   eax
c0012149:	e8 2c e2 fe ff       	call   c000037a <memcpy>
c001214e:	83 c4 10             	add    esp,0x10
c0012151:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012155:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0012158:	83 ec 08             	sub    esp,0x8
c001215b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001215f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012163:	ff d0                	call   eax
c0012165:	83 c4 10             	add    esp,0x10
c0012168:	eb 26                	jmp    c0012190 <etharp_arp_input+0x2e4>
c001216a:	66 90                	xchg   ax,ax
c001216c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012170:	83 c0 04             	add    eax,0x4
c0012173:	eb 1b                	jmp    c0012190 <etharp_arp_input+0x2e4>
c0012175:	8d 76 00             	lea    esi,[esi+0x0]
c0012178:	66 a1 4c 67 03 c0    	mov    ax,ds:0xc003674c
c001217e:	83 c0 01             	add    eax,0x1
c0012181:	66 a3 4c 67 03 c0    	mov    ds:0xc003674c,ax
c0012187:	eb 07                	jmp    c0012190 <etharp_arp_input+0x2e4>
c0012189:	8d 76 00             	lea    esi,[esi+0x0]
c001218c:	90                   	nop
c001218d:	8d 76 00             	lea    esi,[esi+0x0]
c0012190:	83 ec 0c             	sub    esp,0xc
c0012193:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012197:	e8 0c 61 ff ff       	call   c00082a8 <pbuf_free>
c001219c:	83 c4 10             	add    esp,0x10
c001219f:	90                   	nop
c00121a0:	83 c4 2c             	add    esp,0x2c
c00121a3:	c3                   	ret    

c00121a4 <etharp_raw>:
c00121a4:	83 ec 2c             	sub    esp,0x2c
c00121a7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00121ab:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00121b0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00121b5:	83 ec 04             	sub    esp,0x4
c00121b8:	6a 00                	push   0x0
c00121ba:	6a 2a                	push   0x2a
c00121bc:	6a 03                	push   0x3
c00121be:	e8 bd 62 ff ff       	call   c0008480 <pbuf_alloc>
c00121c3:	83 c4 10             	add    esp,0x10
c00121c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00121ca:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00121cf:	75 17                	jne    c00121e8 <etharp_raw+0x44>
c00121d1:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c00121d7:	83 c0 01             	add    eax,0x1
c00121da:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c00121e0:	b0 ff                	mov    al,0xff
c00121e2:	e9 85 01 00 00       	jmp    c001236c <etharp_raw+0x1c8>
c00121e7:	90                   	nop
c00121e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00121ec:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00121f0:	0f b7 c0             	movzx  eax,ax
c00121f3:	83 f8 29             	cmp    eax,0x29
c00121f6:	77 18                	ja     c0012210 <etharp_raw+0x6c>
c00121f8:	83 ec 08             	sub    esp,0x8
c00121fb:	68 0c 0a 03 c0       	push   0xc0030a0c
c0012200:	68 46 f9 02 c0       	push   0xc002f946
c0012205:	e8 d2 d8 00 00       	call   c001fadc <CPrintf>
c001220a:	83 c4 10             	add    esp,0x10
c001220d:	8d 76 00             	lea    esi,[esi+0x0]
c0012210:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012214:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012217:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001221b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001221f:	83 c0 0e             	add    eax,0xe
c0012222:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012226:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001222b:	83 ec 0c             	sub    esp,0xc
c001222e:	50                   	push   eax
c001222f:	e8 b4 e9 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0012234:	83 c4 10             	add    esp,0x10
c0012237:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001223b:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c001223f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012243:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0012246:	0f b6 c0             	movzx  eax,al
c0012249:	83 f8 06             	cmp    eax,0x6
c001224c:	74 16                	je     c0012264 <etharp_raw+0xc0>
c001224e:	83 ec 08             	sub    esp,0x8
c0012251:	68 7c 09 03 c0       	push   0xc003097c
c0012256:	68 46 f9 02 c0       	push   0xc002f946
c001225b:	e8 7c d8 00 00       	call   c001fadc <CPrintf>
c0012260:	83 c4 10             	add    esp,0x10
c0012263:	90                   	nop
c0012264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012268:	83 c0 08             	add    eax,0x8
c001226b:	83 ec 04             	sub    esp,0x4
c001226e:	6a 06                	push   0x6
c0012270:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012274:	50                   	push   eax
c0012275:	e8 00 e1 fe ff       	call   c000037a <memcpy>
c001227a:	83 c4 10             	add    esp,0x10
c001227d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012281:	83 c0 12             	add    eax,0x12
c0012284:	83 ec 04             	sub    esp,0x4
c0012287:	6a 06                	push   0x6
c0012289:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001228d:	50                   	push   eax
c001228e:	e8 e7 e0 fe ff       	call   c000037a <memcpy>
c0012293:	83 c4 10             	add    esp,0x10
c0012296:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001229a:	83 ec 04             	sub    esp,0x4
c001229d:	6a 06                	push   0x6
c001229f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00122a3:	50                   	push   eax
c00122a4:	e8 d1 e0 fe ff       	call   c000037a <memcpy>
c00122a9:	83 c4 10             	add    esp,0x10
c00122ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122b0:	83 c0 06             	add    eax,0x6
c00122b3:	83 ec 04             	sub    esp,0x4
c00122b6:	6a 06                	push   0x6
c00122b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00122bc:	50                   	push   eax
c00122bd:	e8 b8 e0 fe ff       	call   c000037a <memcpy>
c00122c2:	83 c4 10             	add    esp,0x10
c00122c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122c9:	83 c0 0e             	add    eax,0xe
c00122cc:	83 ec 04             	sub    esp,0x4
c00122cf:	6a 04                	push   0x4
c00122d1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00122d5:	50                   	push   eax
c00122d6:	e8 9f e0 fe ff       	call   c000037a <memcpy>
c00122db:	83 c4 10             	add    esp,0x10
c00122de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122e2:	83 c0 18             	add    eax,0x18
c00122e5:	83 ec 04             	sub    esp,0x4
c00122e8:	6a 04                	push   0x4
c00122ea:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00122ee:	50                   	push   eax
c00122ef:	e8 86 e0 fe ff       	call   c000037a <memcpy>
c00122f4:	83 c4 10             	add    esp,0x10
c00122f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122fb:	66 c7 00 00 01       	mov    WORD PTR [eax],0x100
c0012300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012304:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c001230a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001230e:	c6 40 04 06          	mov    BYTE PTR [eax+0x4],0x6
c0012312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012316:	c6 40 05 04          	mov    BYTE PTR [eax+0x5],0x4
c001231a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001231e:	66 c7 40 0c 08 06    	mov    WORD PTR [eax+0xc],0x608
c0012324:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012328:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001232b:	83 ec 08             	sub    esp,0x8
c001232e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012332:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012336:	ff d0                	call   eax
c0012338:	83 c4 10             	add    esp,0x10
c001233b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001233f:	66 a1 38 67 03 c0    	mov    ax,ds:0xc0036738
c0012345:	83 c0 01             	add    eax,0x1
c0012348:	66 a3 38 67 03 c0    	mov    ds:0xc0036738,ax
c001234e:	83 ec 0c             	sub    esp,0xc
c0012351:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012355:	e8 4e 5f ff ff       	call   c00082a8 <pbuf_free>
c001235a:	83 c4 10             	add    esp,0x10
c001235d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012365:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012369:	8d 76 00             	lea    esi,[esi+0x0]
c001236c:	83 c4 2c             	add    esp,0x2c
c001236f:	c3                   	ret    

c0012370 <etharp_request>:
c0012370:	83 ec 0c             	sub    esp,0xc
c0012373:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012377:	8d 48 04             	lea    ecx,[eax+0x4]
c001237a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001237e:	8d 50 23             	lea    edx,[eax+0x23]
c0012381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012385:	83 c0 23             	add    eax,0x23
c0012388:	6a 01                	push   0x1
c001238a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001238e:	68 dc 0a 03 c0       	push   0xc0030adc
c0012393:	51                   	push   ecx
c0012394:	52                   	push   edx
c0012395:	68 e4 0a 03 c0       	push   0xc0030ae4
c001239a:	50                   	push   eax
c001239b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001239f:	e8 00 fe ff ff       	call   c00121a4 <etharp_raw>
c00123a4:	83 c4 20             	add    esp,0x20
c00123a7:	83 c4 0c             	add    esp,0xc
c00123aa:	c3                   	ret    
c00123ab:	90                   	nop

c00123ac <etharp_query>:
c00123ac:	83 ec 2c             	sub    esp,0x2c
c00123af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123b3:	83 c0 23             	add    eax,0x23
c00123b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00123ba:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c00123bf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00123c5:	83 ec 08             	sub    esp,0x8
c00123c8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00123cc:	50                   	push   eax
c00123cd:	e8 ca 19 00 00       	call   c0013d9c <ip4_addr_isbroadcast>
c00123d2:	83 c4 10             	add    esp,0x10
c00123d5:	0f b6 c0             	movzx  eax,al
c00123d8:	85 c0                	test   eax,eax
c00123da:	75 24                	jne    c0012400 <etharp_query+0x54>
c00123dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00123e2:	25 f0 00 00 00       	and    eax,0xf0
c00123e7:	3d e0 00 00 00       	cmp    eax,0xe0
c00123ec:	74 12                	je     c0012400 <etharp_query+0x54>
c00123ee:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00123f3:	74 0b                	je     c0012400 <etharp_query+0x54>
c00123f5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00123fb:	85 c0                	test   eax,eax
c00123fd:	75 09                	jne    c0012408 <etharp_query+0x5c>
c00123ff:	90                   	nop
c0012400:	b0 f2                	mov    al,0xf2
c0012402:	e9 dd 02 00 00       	jmp    c00126e4 <etharp_query+0x338>
c0012407:	90                   	nop
c0012408:	83 ec 08             	sub    esp,0x8
c001240b:	6a 01                	push   0x1
c001240d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012411:	e8 f2 f4 ff ff       	call   c0011908 <find_entry>
c0012416:	83 c4 10             	add    esp,0x10
c0012419:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001241d:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012422:	85 c0                	test   eax,eax
c0012424:	79 22                	jns    c0012448 <etharp_query+0x9c>
c0012426:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c001242b:	74 0f                	je     c001243c <etharp_query+0x90>
c001242d:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c0012433:	83 c0 01             	add    eax,0x1
c0012436:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c001243c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012440:	e9 9f 02 00 00       	jmp    c00126e4 <etharp_query+0x338>
c0012445:	8d 76 00             	lea    esi,[esi+0x0]
c0012448:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001244d:	c1 e0 04             	shl    eax,0x4
c0012450:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012455:	8a 00                	mov    al,BYTE PTR [eax]
c0012457:	0f b6 c0             	movzx  eax,al
c001245a:	85 c0                	test   eax,eax
c001245c:	75 12                	jne    c0012470 <etharp_query+0xc4>
c001245e:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012463:	c1 e0 04             	shl    eax,0x4
c0012466:	05 0e a9 03 c0       	add    eax,0xc003a90e
c001246b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001246e:	66 90                	xchg   ax,ax
c0012470:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012475:	c1 e0 04             	shl    eax,0x4
c0012478:	05 0e a9 03 c0       	add    eax,0xc003a90e
c001247d:	8a 00                	mov    al,BYTE PTR [eax]
c001247f:	0f b6 c0             	movzx  eax,al
c0012482:	83 f8 01             	cmp    eax,0x1
c0012485:	74 2d                	je     c00124b4 <etharp_query+0x108>
c0012487:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001248c:	c1 e0 04             	shl    eax,0x4
c001248f:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012494:	8a 00                	mov    al,BYTE PTR [eax]
c0012496:	0f b6 c0             	movzx  eax,al
c0012499:	83 f8 02             	cmp    eax,0x2
c001249c:	74 16                	je     c00124b4 <etharp_query+0x108>
c001249e:	83 ec 08             	sub    esp,0x8
c00124a1:	68 40 0a 03 c0       	push   0xc0030a40
c00124a6:	68 46 f9 02 c0       	push   0xc002f946
c00124ab:	e8 2c d6 00 00       	call   c001fadc <CPrintf>
c00124b0:	83 c4 10             	add    esp,0x10
c00124b3:	90                   	nop
c00124b4:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00124b9:	c1 e0 04             	shl    eax,0x4
c00124bc:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00124c1:	8a 00                	mov    al,BYTE PTR [eax]
c00124c3:	0f b6 c0             	movzx  eax,al
c00124c6:	83 f8 01             	cmp    eax,0x1
c00124c9:	74 09                	je     c00124d4 <etharp_query+0x128>
c00124cb:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00124d0:	75 2a                	jne    c00124fc <etharp_query+0x150>
c00124d2:	66 90                	xchg   ax,ax
c00124d4:	83 ec 08             	sub    esp,0x8
c00124d7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00124db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00124df:	e8 8c fe ff ff       	call   c0012370 <etharp_request>
c00124e4:	83 c4 10             	add    esp,0x10
c00124e7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00124eb:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00124f0:	75 0a                	jne    c00124fc <etharp_query+0x150>
c00124f2:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00124f6:	e9 e9 01 00 00       	jmp    c00126e4 <etharp_query+0x338>
c00124fb:	90                   	nop
c00124fc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0012501:	75 15                	jne    c0012518 <etharp_query+0x16c>
c0012503:	83 ec 08             	sub    esp,0x8
c0012506:	68 ba fd 02 c0       	push   0xc002fdba
c001250b:	68 46 f9 02 c0       	push   0xc002f946
c0012510:	e8 c7 d5 00 00       	call   c001fadc <CPrintf>
c0012515:	83 c4 10             	add    esp,0x10
c0012518:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001251d:	c1 e0 04             	shl    eax,0x4
c0012520:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012525:	8a 00                	mov    al,BYTE PTR [eax]
c0012527:	0f b6 c0             	movzx  eax,al
c001252a:	83 f8 02             	cmp    eax,0x2
c001252d:	75 39                	jne    c0012568 <etharp_query+0x1bc>
c001252f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012533:	a2 e0 a8 03 c0       	mov    ds:0xc003a8e0,al
c0012538:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001253d:	c1 e0 04             	shl    eax,0x4
c0012540:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012545:	83 c0 08             	add    eax,0x8
c0012548:	50                   	push   eax
c0012549:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001254d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012551:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012555:	e8 da f6 ff ff       	call   c0011c34 <etharp_send_ip>
c001255a:	83 c4 10             	add    esp,0x10
c001255d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012561:	e9 7a 01 00 00       	jmp    c00126e0 <etharp_query+0x334>
c0012566:	66 90                	xchg   ax,ax
c0012568:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001256d:	c1 e0 04             	shl    eax,0x4
c0012570:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012575:	8a 00                	mov    al,BYTE PTR [eax]
c0012577:	0f b6 c0             	movzx  eax,al
c001257a:	83 f8 01             	cmp    eax,0x1
c001257d:	0f 85 5d 01 00 00    	jne    c00126e0 <etharp_query+0x334>
c0012583:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001258b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001258f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012593:	eb 63                	jmp    c00125f8 <etharp_query+0x24c>
c0012595:	8d 76 00             	lea    esi,[esi+0x0]
c0012598:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001259c:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00125a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00125a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00125a7:	0f b7 d2             	movzx  edx,dx
c00125aa:	0f b7 c0             	movzx  eax,ax
c00125ad:	39 c2                	cmp    edx,eax
c00125af:	75 1f                	jne    c00125d0 <etharp_query+0x224>
c00125b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00125b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00125b7:	85 c0                	test   eax,eax
c00125b9:	74 15                	je     c00125d0 <etharp_query+0x224>
c00125bb:	83 ec 08             	sub    esp,0x8
c00125be:	68 c1 0a 03 c0       	push   0xc0030ac1
c00125c3:	68 46 f9 02 c0       	push   0xc002f946
c00125c8:	e8 0f d5 00 00       	call   c001fadc <CPrintf>
c00125cd:	83 c4 10             	add    esp,0x10
c00125d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00125d4:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00125d7:	0f b6 c0             	movzx  eax,al
c00125da:	83 f8 01             	cmp    eax,0x1
c00125dd:	74 0d                	je     c00125ec <etharp_query+0x240>
c00125df:	c7 44 24 14 01 00 00 00 	mov    DWORD PTR [esp+0x14],0x1
c00125e7:	eb 17                	jmp    c0012600 <etharp_query+0x254>
c00125e9:	8d 76 00             	lea    esi,[esi+0x0]
c00125ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00125f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00125f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00125f6:	66 90                	xchg   ax,ax
c00125f8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00125fd:	75 99                	jne    c0012598 <etharp_query+0x1ec>
c00125ff:	90                   	nop
c0012600:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012605:	74 59                	je     c0012660 <etharp_query+0x2b4>
c0012607:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001260b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001260e:	0f b7 c0             	movzx  eax,ax
c0012611:	83 ec 04             	sub    esp,0x4
c0012614:	6a 00                	push   0x0
c0012616:	50                   	push   eax
c0012617:	6a 03                	push   0x3
c0012619:	e8 62 5e ff ff       	call   c0008480 <pbuf_alloc>
c001261e:	83 c4 10             	add    esp,0x10
c0012621:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012625:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001262a:	74 4c                	je     c0012678 <etharp_query+0x2cc>
c001262c:	83 ec 08             	sub    esp,0x8
c001262f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012637:	e8 a4 66 ff ff       	call   c0008ce0 <pbuf_copy>
c001263c:	83 c4 10             	add    esp,0x10
c001263f:	0f be c0             	movsx  eax,al
c0012642:	85 c0                	test   eax,eax
c0012644:	74 32                	je     c0012678 <etharp_query+0x2cc>
c0012646:	83 ec 0c             	sub    esp,0xc
c0012649:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001264d:	e8 56 5c ff ff       	call   c00082a8 <pbuf_free>
c0012652:	83 c4 10             	add    esp,0x10
c0012655:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001265d:	eb 19                	jmp    c0012678 <etharp_query+0x2cc>
c001265f:	90                   	nop
c0012660:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012668:	83 ec 0c             	sub    esp,0xc
c001266b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001266f:	e8 3c 64 ff ff       	call   c0008ab0 <pbuf_ref>
c0012674:	83 c4 10             	add    esp,0x10
c0012677:	90                   	nop
c0012678:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001267d:	74 4d                	je     c00126cc <etharp_query+0x320>
c001267f:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012684:	c1 e0 04             	shl    eax,0x4
c0012687:	05 00 a9 03 c0       	add    eax,0xc003a900
c001268c:	8b 00                	mov    eax,DWORD PTR [eax]
c001268e:	85 c0                	test   eax,eax
c0012690:	74 1e                	je     c00126b0 <etharp_query+0x304>
c0012692:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012697:	c1 e0 04             	shl    eax,0x4
c001269a:	05 00 a9 03 c0       	add    eax,0xc003a900
c001269f:	8b 00                	mov    eax,DWORD PTR [eax]
c00126a1:	83 ec 0c             	sub    esp,0xc
c00126a4:	50                   	push   eax
c00126a5:	e8 fe 5b ff ff       	call   c00082a8 <pbuf_free>
c00126aa:	83 c4 10             	add    esp,0x10
c00126ad:	8d 76 00             	lea    esi,[esi+0x0]
c00126b0:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00126b5:	c1 e0 04             	shl    eax,0x4
c00126b8:	8d 90 00 a9 03 c0    	lea    edx,[eax-0x3ffc5700]
c00126be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00126c2:	89 02                	mov    DWORD PTR [edx],eax
c00126c4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00126c9:	eb 15                	jmp    c00126e0 <etharp_query+0x334>
c00126cb:	90                   	nop
c00126cc:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c00126d2:	83 c0 01             	add    eax,0x1
c00126d5:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c00126db:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c00126e0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00126e4:	83 c4 2c             	add    esp,0x2c
c00126e7:	c3                   	ret    

c00126e8 <etharp_output>:
c00126e8:	83 ec 1c             	sub    esp,0x1c
c00126eb:	83 ec 08             	sub    esp,0x8
c00126ee:	6a 0e                	push   0xe
c00126f0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00126f4:	e8 13 5a ff ff       	call   c000810c <pbuf_header>
c00126f9:	83 c4 10             	add    esp,0x10
c00126fc:	0f b6 c0             	movzx  eax,al
c00126ff:	85 c0                	test   eax,eax
c0012701:	74 19                	je     c001271c <etharp_output+0x34>
c0012703:	66 a1 2a 67 03 c0    	mov    ax,ds:0xc003672a
c0012709:	83 c0 01             	add    eax,0x1
c001270c:	66 a3 2a 67 03 c0    	mov    ds:0xc003672a,ax
c0012712:	b0 fe                	mov    al,0xfe
c0012714:	e9 8b 01 00 00       	jmp    c00128a4 <etharp_output+0x1bc>
c0012719:	8d 76 00             	lea    esi,[esi+0x0]
c001271c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012724:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012728:	8b 00                	mov    eax,DWORD PTR [eax]
c001272a:	83 ec 08             	sub    esp,0x8
c001272d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012731:	50                   	push   eax
c0012732:	e8 65 16 00 00       	call   c0013d9c <ip4_addr_isbroadcast>
c0012737:	83 c4 10             	add    esp,0x10
c001273a:	0f b6 c0             	movzx  eax,al
c001273d:	85 c0                	test   eax,eax
c001273f:	74 0f                	je     c0012750 <etharp_output+0x68>
c0012741:	c7 44 24 0c e4 0a 03 c0 	mov    DWORD PTR [esp+0xc],0xc0030ae4
c0012749:	e9 3a 01 00 00       	jmp    c0012888 <etharp_output+0x1a0>
c001274e:	66 90                	xchg   ax,ax
c0012750:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012754:	8b 00                	mov    eax,DWORD PTR [eax]
c0012756:	25 f0 00 00 00       	and    eax,0xf0
c001275b:	3d e0 00 00 00       	cmp    eax,0xe0
c0012760:	75 42                	jne    c00127a4 <etharp_output+0xbc>
c0012762:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c0012767:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c001276c:	c6 44 24 08 5e       	mov    BYTE PTR [esp+0x8],0x5e
c0012771:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012775:	83 c0 01             	add    eax,0x1
c0012778:	8a 00                	mov    al,BYTE PTR [eax]
c001277a:	83 e0 7f             	and    eax,0x7f
c001277d:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0012781:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012785:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0012788:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001278c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012790:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
c0012793:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012797:	8d 44 24 06          	lea    eax,[esp+0x6]
c001279b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001279f:	e9 e4 00 00 00       	jmp    c0012888 <etharp_output+0x1a0>
c00127a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00127a8:	8b 10                	mov    edx,DWORD PTR [eax]
c00127aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00127ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00127b1:	31 c2                	xor    edx,eax
c00127b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00127b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00127ba:	21 d0                	and    eax,edx
c00127bc:	74 3a                	je     c00127f8 <etharp_output+0x110>
c00127be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00127c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00127c4:	0f b7 c0             	movzx  eax,ax
c00127c7:	3d a9 fe 00 00       	cmp    eax,0xfea9
c00127cc:	74 2a                	je     c00127f8 <etharp_output+0x110>
c00127ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00127d2:	83 c0 0c             	add    eax,0xc
c00127d5:	74 19                	je     c00127f0 <etharp_output+0x108>
c00127d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00127db:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00127de:	85 c0                	test   eax,eax
c00127e0:	74 0e                	je     c00127f0 <etharp_output+0x108>
c00127e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00127e6:	83 c0 0c             	add    eax,0xc
c00127e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00127ed:	eb 09                	jmp    c00127f8 <etharp_output+0x110>
c00127ef:	90                   	nop
c00127f0:	b0 fc                	mov    al,0xfc
c00127f2:	e9 ad 00 00 00       	jmp    c00128a4 <etharp_output+0x1bc>
c00127f7:	90                   	nop
c00127f8:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c00127fd:	0f b6 c0             	movzx  eax,al
c0012800:	c1 e0 04             	shl    eax,0x4
c0012803:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012808:	8a 00                	mov    al,BYTE PTR [eax]
c001280a:	0f b6 c0             	movzx  eax,al
c001280d:	83 f8 02             	cmp    eax,0x2
c0012810:	75 5a                	jne    c001286c <etharp_output+0x184>
c0012812:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012816:	8b 10                	mov    edx,DWORD PTR [eax]
c0012818:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c001281d:	0f b6 c0             	movzx  eax,al
c0012820:	c1 e0 04             	shl    eax,0x4
c0012823:	05 04 a9 03 c0       	add    eax,0xc003a904
c0012828:	8b 00                	mov    eax,DWORD PTR [eax]
c001282a:	39 c2                	cmp    edx,eax
c001282c:	75 3e                	jne    c001286c <etharp_output+0x184>
c001282e:	66 a1 4e 67 03 c0    	mov    ax,ds:0xc003674e
c0012834:	83 c0 01             	add    eax,0x1
c0012837:	66 a3 4e 67 03 c0    	mov    ds:0xc003674e,ax
c001283d:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c0012842:	0f b6 c0             	movzx  eax,al
c0012845:	c1 e0 04             	shl    eax,0x4
c0012848:	05 00 a9 03 c0       	add    eax,0xc003a900
c001284d:	8d 50 08             	lea    edx,[eax+0x8]
c0012850:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012854:	83 c0 23             	add    eax,0x23
c0012857:	52                   	push   edx
c0012858:	50                   	push   eax
c0012859:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001285d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012861:	e8 ce f3 ff ff       	call   c0011c34 <etharp_send_ip>
c0012866:	83 c4 10             	add    esp,0x10
c0012869:	eb 39                	jmp    c00128a4 <etharp_output+0x1bc>
c001286b:	90                   	nop
c001286c:	83 ec 04             	sub    esp,0x4
c001286f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012873:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012877:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001287b:	e8 2c fb ff ff       	call   c00123ac <etharp_query>
c0012880:	83 c4 10             	add    esp,0x10
c0012883:	eb 1f                	jmp    c00128a4 <etharp_output+0x1bc>
c0012885:	8d 76 00             	lea    esi,[esi+0x0]
c0012888:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001288c:	83 c0 23             	add    eax,0x23
c001288f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0012893:	50                   	push   eax
c0012894:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012898:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001289c:	e8 93 f3 ff ff       	call   c0011c34 <etharp_send_ip>
c00128a1:	83 c4 10             	add    esp,0x10
c00128a4:	83 c4 1c             	add    esp,0x1c
c00128a7:	c3                   	ret    

c00128a8 <ethernet_input>:
c00128a8:	83 ec 1c             	sub    esp,0x1c
c00128ab:	66 c7 44 24 0e 0e 00 	mov    WORD PTR [esp+0xe],0xe
c00128b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00128b6:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00128ba:	0f b7 c0             	movzx  eax,ax
c00128bd:	83 f8 0e             	cmp    eax,0xe
c00128c0:	77 26                	ja     c00128e8 <ethernet_input+0x40>
c00128c2:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c00128c8:	83 c0 01             	add    eax,0x1
c00128cb:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c00128d1:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c00128d7:	83 c0 01             	add    eax,0x1
c00128da:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c00128e0:	e9 ef 00 00 00       	jmp    c00129d4 <ethernet_input+0x12c>
c00128e5:	8d 76 00             	lea    esi,[esi+0x0]
c00128e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00128ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00128ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00128f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00128f7:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00128fb:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0012900:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0012905:	83 f8 08             	cmp    eax,0x8
c0012908:	74 0e                	je     c0012918 <ethernet_input+0x70>
c001290a:	3d 08 06 00 00       	cmp    eax,0x608
c001290f:	74 6b                	je     c001297c <ethernet_input+0xd4>
c0012911:	e9 92 00 00 00       	jmp    c00129a8 <ethernet_input+0x100>
c0012916:	66 90                	xchg   ax,ax
c0012918:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001291c:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c001291f:	0f b6 c0             	movzx  eax,al
c0012922:	83 e0 20             	and    eax,0x20
c0012925:	0f 84 a1 00 00 00    	je     c00129cc <ethernet_input+0x124>
c001292b:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0012930:	f7 d8                	neg    eax
c0012932:	98                   	cwde   
c0012933:	83 ec 08             	sub    esp,0x8
c0012936:	50                   	push   eax
c0012937:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001293b:	e8 cc 57 ff ff       	call   c000810c <pbuf_header>
c0012940:	83 c4 10             	add    esp,0x10
c0012943:	0f b6 c0             	movzx  eax,al
c0012946:	85 c0                	test   eax,eax
c0012948:	74 1a                	je     c0012964 <ethernet_input+0xbc>
c001294a:	83 ec 08             	sub    esp,0x8
c001294d:	68 68 0a 03 c0       	push   0xc0030a68
c0012952:	68 46 f9 02 c0       	push   0xc002f946
c0012957:	e8 80 d1 00 00       	call   c001fadc <CPrintf>
c001295c:	83 c4 10             	add    esp,0x10
c001295f:	eb 73                	jmp    c00129d4 <ethernet_input+0x12c>
c0012961:	8d 76 00             	lea    esi,[esi+0x0]
c0012964:	83 ec 08             	sub    esp,0x8
c0012967:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001296b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001296f:	e8 70 0c 00 00       	call   c00135e4 <ip_input>
c0012974:	83 c4 10             	add    esp,0x10
c0012977:	eb 4f                	jmp    c00129c8 <ethernet_input+0x120>
c0012979:	8d 76 00             	lea    esi,[esi+0x0]
c001297c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012980:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0012983:	0f b6 c0             	movzx  eax,al
c0012986:	83 e0 20             	and    eax,0x20
c0012989:	74 45                	je     c00129d0 <ethernet_input+0x128>
c001298b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001298f:	83 c0 23             	add    eax,0x23
c0012992:	83 ec 04             	sub    esp,0x4
c0012995:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012999:	50                   	push   eax
c001299a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001299e:	e8 09 f5 ff ff       	call   c0011eac <etharp_arp_input>
c00129a3:	83 c4 10             	add    esp,0x10
c00129a6:	eb 20                	jmp    c00129c8 <ethernet_input+0x120>
c00129a8:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c00129ae:	83 c0 01             	add    eax,0x1
c00129b1:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c00129b7:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c00129bd:	83 c0 01             	add    eax,0x1
c00129c0:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c00129c6:	eb 0c                	jmp    c00129d4 <ethernet_input+0x12c>
c00129c8:	b0 00                	mov    al,0x0
c00129ca:	eb 1c                	jmp    c00129e8 <ethernet_input+0x140>
c00129cc:	90                   	nop
c00129cd:	eb 05                	jmp    c00129d4 <ethernet_input+0x12c>
c00129cf:	90                   	nop
c00129d0:	90                   	nop
c00129d1:	8d 76 00             	lea    esi,[esi+0x0]
c00129d4:	83 ec 0c             	sub    esp,0xc
c00129d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129db:	e8 c8 58 ff ff       	call   c00082a8 <pbuf_free>
c00129e0:	83 c4 10             	add    esp,0x10
c00129e3:	b0 00                	mov    al,0x0
c00129e5:	8d 76 00             	lea    esi,[esi+0x0]
c00129e8:	83 c4 1c             	add    esp,0x1c
c00129eb:	c3                   	ret    

c00129ec <icmp_input>:
c00129ec:	83 ec 2c             	sub    esp,0x2c
c00129ef:	66 a1 82 67 03 c0    	mov    ax,ds:0xc0036782
c00129f5:	83 c0 01             	add    eax,0x1
c00129f8:	66 a3 82 67 03 c0    	mov    ds:0xc0036782,ax
c00129fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012a05:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012a0d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0012a10:	0f b7 c0             	movzx  eax,ax
c0012a13:	83 ec 0c             	sub    esp,0xc
c0012a16:	50                   	push   eax
c0012a17:	e8 cc e1 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0012a1c:	83 c4 10             	add    esp,0x10
c0012a1f:	0f b7 c0             	movzx  eax,ax
c0012a22:	c1 e8 08             	shr    eax,0x8
c0012a25:	83 e0 0f             	and    eax,0xf
c0012a28:	c1 e0 02             	shl    eax,0x2
c0012a2b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0012a30:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012a35:	f7 d8                	neg    eax
c0012a37:	98                   	cwde   
c0012a38:	83 ec 08             	sub    esp,0x8
c0012a3b:	50                   	push   eax
c0012a3c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a40:	e8 c7 56 ff ff       	call   c000810c <pbuf_header>
c0012a45:	83 c4 10             	add    esp,0x10
c0012a48:	0f b6 c0             	movzx  eax,al
c0012a4b:	85 c0                	test   eax,eax
c0012a4d:	0f 85 a9 03 00 00    	jne    c0012dfc <icmp_input+0x410>
c0012a53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a57:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012a5a:	0f b7 c0             	movzx  eax,ax
c0012a5d:	83 f8 03             	cmp    eax,0x3
c0012a60:	0f 86 96 03 00 00    	jbe    c0012dfc <icmp_input+0x410>
c0012a66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012a6d:	8a 00                	mov    al,BYTE PTR [eax]
c0012a6f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012a73:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012a78:	85 c0                	test   eax,eax
c0012a7a:	0f 84 64 03 00 00    	je     c0012de4 <icmp_input+0x3f8>
c0012a80:	83 f8 08             	cmp    eax,0x8
c0012a83:	0f 85 3b 03 00 00    	jne    c0012dc4 <icmp_input+0x3d8>
c0012a89:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0012a91:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0012a96:	25 f0 00 00 00       	and    eax,0xf0
c0012a9b:	3d e0 00 00 00       	cmp    eax,0xe0
c0012aa0:	75 0a                	jne    c0012aac <icmp_input+0xc0>
c0012aa2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012aaa:	66 90                	xchg   ax,ax
c0012aac:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0012ab1:	83 ec 08             	sub    esp,0x8
c0012ab4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ab8:	50                   	push   eax
c0012ab9:	e8 de 12 00 00       	call   c0013d9c <ip4_addr_isbroadcast>
c0012abe:	83 c4 10             	add    esp,0x10
c0012ac1:	0f b6 c0             	movzx  eax,al
c0012ac4:	85 c0                	test   eax,eax
c0012ac6:	74 08                	je     c0012ad0 <icmp_input+0xe4>
c0012ac8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012ad0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012ad5:	75 25                	jne    c0012afc <icmp_input+0x110>
c0012ad7:	66 a1 94 67 03 c0    	mov    ax,ds:0xc0036794
c0012add:	83 c0 01             	add    eax,0x1
c0012ae0:	66 a3 94 67 03 c0    	mov    ds:0xc0036794,ax
c0012ae6:	83 ec 0c             	sub    esp,0xc
c0012ae9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012aed:	e8 b6 57 ff ff       	call   c00082a8 <pbuf_free>
c0012af2:	83 c4 10             	add    esp,0x10
c0012af5:	e9 4e 03 00 00       	jmp    c0012e48 <icmp_input+0x45c>
c0012afa:	66 90                	xchg   ax,ax
c0012afc:	90                   	nop
c0012afd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b01:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012b04:	0f b7 c0             	movzx  eax,ax
c0012b07:	83 f8 07             	cmp    eax,0x7
c0012b0a:	0f 86 f0 02 00 00    	jbe    c0012e00 <icmp_input+0x414>
c0012b10:	83 ec 0c             	sub    esp,0xc
c0012b13:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012b17:	e8 50 09 00 00       	call   c001346c <inet_chksum_pbuf>
c0012b1c:	83 c4 10             	add    esp,0x10
c0012b1f:	0f b7 c0             	movzx  eax,ax
c0012b22:	85 c0                	test   eax,eax
c0012b24:	74 26                	je     c0012b4c <icmp_input+0x160>
c0012b26:	83 ec 0c             	sub    esp,0xc
c0012b29:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012b2d:	e8 76 57 ff ff       	call   c00082a8 <pbuf_free>
c0012b32:	83 c4 10             	add    esp,0x10
c0012b35:	66 a1 88 67 03 c0    	mov    ax,ds:0xc0036788
c0012b3b:	83 c0 01             	add    eax,0x1
c0012b3e:	66 a3 88 67 03 c0    	mov    ds:0xc0036788,ax
c0012b44:	e9 ff 02 00 00       	jmp    c0012e48 <icmp_input+0x45c>
c0012b49:	8d 76 00             	lea    esi,[esi+0x0]
c0012b4c:	83 ec 08             	sub    esp,0x8
c0012b4f:	6a 22                	push   0x22
c0012b51:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012b55:	e8 b2 55 ff ff       	call   c000810c <pbuf_header>
c0012b5a:	83 c4 10             	add    esp,0x10
c0012b5d:	0f b6 c0             	movzx  eax,al
c0012b60:	85 c0                	test   eax,eax
c0012b62:	0f 84 24 01 00 00    	je     c0012c8c <icmp_input+0x2a0>
c0012b68:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012b6d:	83 ec 08             	sub    esp,0x8
c0012b70:	50                   	push   eax
c0012b71:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012b75:	e8 92 55 ff ff       	call   c000810c <pbuf_header>
c0012b7a:	83 c4 10             	add    esp,0x10
c0012b7d:	0f b6 c0             	movzx  eax,al
c0012b80:	85 c0                	test   eax,eax
c0012b82:	74 1c                	je     c0012ba0 <icmp_input+0x1b4>
c0012b84:	83 ec 08             	sub    esp,0x8
c0012b87:	68 ec 0a 03 c0       	push   0xc0030aec
c0012b8c:	68 46 f9 02 c0       	push   0xc002f946
c0012b91:	e8 46 cf 00 00       	call   c001fadc <CPrintf>
c0012b96:	83 c4 10             	add    esp,0x10
c0012b99:	e9 8a 02 00 00       	jmp    c0012e28 <icmp_input+0x43c>
c0012b9e:	66 90                	xchg   ax,ax
c0012ba0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ba4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012ba7:	0f b7 c0             	movzx  eax,ax
c0012baa:	83 ec 04             	sub    esp,0x4
c0012bad:	6a 00                	push   0x0
c0012baf:	50                   	push   eax
c0012bb0:	6a 02                	push   0x2
c0012bb2:	e8 c9 58 ff ff       	call   c0008480 <pbuf_alloc>
c0012bb7:	83 c4 10             	add    esp,0x10
c0012bba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012bbe:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012bc3:	0f 84 5b 02 00 00    	je     c0012e24 <icmp_input+0x438>
c0012bc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bcd:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012bd1:	0f b7 c0             	movzx  eax,ax
c0012bd4:	0f bf 54 24 16       	movsx  edx,WORD PTR [esp+0x16]
c0012bd9:	83 c2 08             	add    edx,0x8
c0012bdc:	39 d0                	cmp    eax,edx
c0012bde:	73 18                	jae    c0012bf8 <icmp_input+0x20c>
c0012be0:	83 ec 08             	sub    esp,0x8
c0012be3:	68 20 0b 03 c0       	push   0xc0030b20
c0012be8:	68 46 f9 02 c0       	push   0xc002f946
c0012bed:	e8 ea ce 00 00       	call   c001fadc <CPrintf>
c0012bf2:	83 c4 10             	add    esp,0x10
c0012bf5:	8d 76 00             	lea    esi,[esi+0x0]
c0012bf8:	83 ec 08             	sub    esp,0x8
c0012bfb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012bff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c03:	e8 d8 60 ff ff       	call   c0008ce0 <pbuf_copy>
c0012c08:	83 c4 10             	add    esp,0x10
c0012c0b:	0f be c0             	movsx  eax,al
c0012c0e:	85 c0                	test   eax,eax
c0012c10:	74 1a                	je     c0012c2c <icmp_input+0x240>
c0012c12:	83 ec 08             	sub    esp,0x8
c0012c15:	68 58 0b 03 c0       	push   0xc0030b58
c0012c1a:	68 46 f9 02 c0       	push   0xc002f946
c0012c1f:	e8 b8 ce 00 00       	call   c001fadc <CPrintf>
c0012c24:	83 c4 10             	add    esp,0x10
c0012c27:	e9 fc 01 00 00       	jmp    c0012e28 <icmp_input+0x43c>
c0012c2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c33:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c37:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012c3c:	f7 d8                	neg    eax
c0012c3e:	98                   	cwde   
c0012c3f:	83 ec 08             	sub    esp,0x8
c0012c42:	50                   	push   eax
c0012c43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c47:	e8 c0 54 ff ff       	call   c000810c <pbuf_header>
c0012c4c:	83 c4 10             	add    esp,0x10
c0012c4f:	0f b6 c0             	movzx  eax,al
c0012c52:	85 c0                	test   eax,eax
c0012c54:	74 1a                	je     c0012c70 <icmp_input+0x284>
c0012c56:	83 ec 08             	sub    esp,0x8
c0012c59:	68 80 0b 03 c0       	push   0xc0030b80
c0012c5e:	68 46 f9 02 c0       	push   0xc002f946
c0012c63:	e8 74 ce 00 00       	call   c001fadc <CPrintf>
c0012c68:	83 c4 10             	add    esp,0x10
c0012c6b:	e9 b8 01 00 00       	jmp    c0012e28 <icmp_input+0x43c>
c0012c70:	83 ec 0c             	sub    esp,0xc
c0012c73:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c77:	e8 2c 56 ff ff       	call   c00082a8 <pbuf_free>
c0012c7c:	83 c4 10             	add    esp,0x10
c0012c7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c83:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012c87:	eb 37                	jmp    c0012cc0 <icmp_input+0x2d4>
c0012c89:	8d 76 00             	lea    esi,[esi+0x0]
c0012c8c:	83 ec 08             	sub    esp,0x8
c0012c8f:	6a de                	push   0xffffffde
c0012c91:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c95:	e8 72 54 ff ff       	call   c000810c <pbuf_header>
c0012c9a:	83 c4 10             	add    esp,0x10
c0012c9d:	0f b6 c0             	movzx  eax,al
c0012ca0:	85 c0                	test   eax,eax
c0012ca2:	74 1c                	je     c0012cc0 <icmp_input+0x2d4>
c0012ca4:	83 ec 08             	sub    esp,0x8
c0012ca7:	68 80 0b 03 c0       	push   0xc0030b80
c0012cac:	68 46 f9 02 c0       	push   0xc002f946
c0012cb1:	e8 26 ce 00 00       	call   c001fadc <CPrintf>
c0012cb6:	83 c4 10             	add    esp,0x10
c0012cb9:	e9 6a 01 00 00       	jmp    c0012e28 <icmp_input+0x43c>
c0012cbe:	66 90                	xchg   ax,ax
c0012cc0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012cc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012ccb:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c0012cd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012cd5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012cd8:	8b 15 90 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036890
c0012cde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012ce2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012ce5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012ce9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012cec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012cf0:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012cf4:	0f b7 c0             	movzx  eax,ax
c0012cf7:	3d f6 ff 00 00       	cmp    eax,0xfff6
c0012cfc:	76 16                	jbe    c0012d14 <icmp_input+0x328>
c0012cfe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d02:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012d06:	83 c0 09             	add    eax,0x9
c0012d09:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012d0d:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0012d11:	eb 15                	jmp    c0012d28 <icmp_input+0x33c>
c0012d13:	90                   	nop
c0012d14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d18:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012d1c:	83 c0 08             	add    eax,0x8
c0012d1f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012d23:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0012d27:	90                   	nop
c0012d28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012d2c:	c6 40 08 ff          	mov    BYTE PTR [eax+0x8],0xff
c0012d30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012d34:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0012d3a:	83 ec 08             	sub    esp,0x8
c0012d3d:	6a 14                	push   0x14
c0012d3f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012d43:	e8 fc 06 00 00       	call   c0013444 <inet_chksum>
c0012d48:	83 c4 10             	add    esp,0x10
c0012d4b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012d4f:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0012d53:	66 a1 80 67 03 c0    	mov    ax,ds:0xc0036780
c0012d59:	83 c0 01             	add    eax,0x1
c0012d5c:	66 a3 80 67 03 c0    	mov    ds:0xc0036780,ax
c0012d62:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012d67:	83 ec 08             	sub    esp,0x8
c0012d6a:	50                   	push   eax
c0012d6b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d6f:	e8 98 53 ff ff       	call   c000810c <pbuf_header>
c0012d74:	83 c4 10             	add    esp,0x10
c0012d77:	0f b6 c0             	movzx  eax,al
c0012d7a:	85 c0                	test   eax,eax
c0012d7c:	74 1a                	je     c0012d98 <icmp_input+0x3ac>
c0012d7e:	83 ec 08             	sub    esp,0x8
c0012d81:	68 68 0a 03 c0       	push   0xc0030a68
c0012d86:	68 46 f9 02 c0       	push   0xc002f946
c0012d8b:	e8 4c cd 00 00       	call   c001fadc <CPrintf>
c0012d90:	83 c4 10             	add    esp,0x10
c0012d93:	eb 53                	jmp    c0012de8 <icmp_input+0x3fc>
c0012d95:	8d 76 00             	lea    esi,[esi+0x0]
c0012d98:	83 ec 04             	sub    esp,0x4
c0012d9b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012d9f:	6a 01                	push   0x1
c0012da1:	6a 00                	push   0x0
c0012da3:	68 ff 00 00 00       	push   0xff
c0012da8:	6a 00                	push   0x0
c0012daa:	68 98 68 03 c0       	push   0xc0036898
c0012daf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012db3:	e8 70 0c 00 00       	call   c0013a28 <ip_output_if>
c0012db8:	83 c4 20             	add    esp,0x20
c0012dbb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012dbf:	eb 27                	jmp    c0012de8 <icmp_input+0x3fc>
c0012dc1:	8d 76 00             	lea    esi,[esi+0x0]
c0012dc4:	66 a1 90 67 03 c0    	mov    ax,ds:0xc0036790
c0012dca:	83 c0 01             	add    eax,0x1
c0012dcd:	66 a3 90 67 03 c0    	mov    ds:0xc0036790,ax
c0012dd3:	66 a1 86 67 03 c0    	mov    ax,ds:0xc0036786
c0012dd9:	83 c0 01             	add    eax,0x1
c0012ddc:	66 a3 86 67 03 c0    	mov    ds:0xc0036786,ax
c0012de2:	eb 04                	jmp    c0012de8 <icmp_input+0x3fc>
c0012de4:	90                   	nop
c0012de5:	8d 76 00             	lea    esi,[esi+0x0]
c0012de8:	83 ec 0c             	sub    esp,0xc
c0012deb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012def:	e8 b4 54 ff ff       	call   c00082a8 <pbuf_free>
c0012df4:	83 c4 10             	add    esp,0x10
c0012df7:	eb 4f                	jmp    c0012e48 <icmp_input+0x45c>
c0012df9:	8d 76 00             	lea    esi,[esi+0x0]
c0012dfc:	90                   	nop
c0012dfd:	eb 05                	jmp    c0012e04 <icmp_input+0x418>
c0012dff:	90                   	nop
c0012e00:	90                   	nop
c0012e01:	8d 76 00             	lea    esi,[esi+0x0]
c0012e04:	83 ec 0c             	sub    esp,0xc
c0012e07:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012e0b:	e8 98 54 ff ff       	call   c00082a8 <pbuf_free>
c0012e10:	83 c4 10             	add    esp,0x10
c0012e13:	66 a1 8a 67 03 c0    	mov    ax,ds:0xc003678a
c0012e19:	83 c0 01             	add    eax,0x1
c0012e1c:	66 a3 8a 67 03 c0    	mov    ds:0xc003678a,ax
c0012e22:	eb 24                	jmp    c0012e48 <icmp_input+0x45c>
c0012e24:	90                   	nop
c0012e25:	8d 76 00             	lea    esi,[esi+0x0]
c0012e28:	83 ec 0c             	sub    esp,0xc
c0012e2b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012e2f:	e8 74 54 ff ff       	call   c00082a8 <pbuf_free>
c0012e34:	83 c4 10             	add    esp,0x10
c0012e37:	66 a1 94 67 03 c0    	mov    ax,ds:0xc0036794
c0012e3d:	83 c0 01             	add    eax,0x1
c0012e40:	66 a3 94 67 03 c0    	mov    ds:0xc0036794,ax
c0012e46:	90                   	nop
c0012e47:	90                   	nop
c0012e48:	83 c4 2c             	add    esp,0x2c
c0012e4b:	c3                   	ret    

c0012e4c <icmp_send_response>:
c0012e4c:	83 ec 2c             	sub    esp,0x2c
c0012e4f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012e53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012e57:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0012e5b:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0012e5f:	83 ec 04             	sub    esp,0x4
c0012e62:	6a 00                	push   0x0
c0012e64:	6a 24                	push   0x24
c0012e66:	6a 01                	push   0x1
c0012e68:	e8 13 56 ff ff       	call   c0008480 <pbuf_alloc>
c0012e6d:	83 c4 10             	add    esp,0x10
c0012e70:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012e74:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012e79:	0f 84 fd 00 00 00    	je     c0012f7c <icmp_send_response+0x130>
c0012e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e83:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012e87:	0f b7 c0             	movzx  eax,ax
c0012e8a:	83 f8 23             	cmp    eax,0x23
c0012e8d:	77 15                	ja     c0012ea4 <icmp_send_response+0x58>
c0012e8f:	83 ec 08             	sub    esp,0x8
c0012e92:	68 b4 0b 03 c0       	push   0xc0030bb4
c0012e97:	68 46 f9 02 c0       	push   0xc002f946
c0012e9c:	e8 3b cc 00 00       	call   c001fadc <CPrintf>
c0012ea1:	83 c4 10             	add    esp,0x10
c0012ea4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ea8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012eab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012eaf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012eb3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012eb6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012eba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012ebe:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012ec2:	88 10                	mov    BYTE PTR [eax],dl
c0012ec4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012ec8:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c0012ecc:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012ecf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012ed3:	66 c7 40 04 00 00    	mov    WORD PTR [eax+0x4],0x0
c0012ed9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012edd:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0012ee3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ee7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012eea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012eee:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0012ef1:	83 c2 08             	add    edx,0x8
c0012ef4:	83 ec 04             	sub    esp,0x4
c0012ef7:	6a 1c                	push   0x1c
c0012ef9:	50                   	push   eax
c0012efa:	52                   	push   edx
c0012efb:	e8 7a d4 fe ff       	call   c000037a <memcpy>
c0012f00:	83 c4 10             	add    esp,0x10
c0012f03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f07:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c0012f0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f11:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012f15:	0f b7 c0             	movzx  eax,ax
c0012f18:	83 ec 08             	sub    esp,0x8
c0012f1b:	50                   	push   eax
c0012f1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012f20:	e8 1f 05 00 00       	call   c0013444 <inet_chksum>
c0012f25:	83 c4 10             	add    esp,0x10
c0012f28:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012f2c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0012f30:	66 a1 80 67 03 c0    	mov    ax,ds:0xc0036780
c0012f36:	83 c0 01             	add    eax,0x1
c0012f39:	66 a3 80 67 03 c0    	mov    ds:0xc0036780,ax
c0012f3f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012f43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012f46:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012f4a:	83 ec 08             	sub    esp,0x8
c0012f4d:	6a 01                	push   0x1
c0012f4f:	6a 00                	push   0x0
c0012f51:	68 ff 00 00 00       	push   0xff
c0012f56:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012f5a:	50                   	push   eax
c0012f5b:	6a 00                	push   0x0
c0012f5d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012f61:	e8 92 0d 00 00       	call   c0013cf8 <ip_output>
c0012f66:	83 c4 20             	add    esp,0x20
c0012f69:	83 ec 0c             	sub    esp,0xc
c0012f6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012f70:	e8 33 53 ff ff       	call   c00082a8 <pbuf_free>
c0012f75:	83 c4 10             	add    esp,0x10
c0012f78:	eb 06                	jmp    c0012f80 <icmp_send_response+0x134>
c0012f7a:	66 90                	xchg   ax,ax
c0012f7c:	90                   	nop
c0012f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0012f80:	83 c4 2c             	add    esp,0x2c
c0012f83:	c3                   	ret    

c0012f84 <icmp_dest_unreach>:
c0012f84:	83 ec 0c             	sub    esp,0xc
c0012f87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f8b:	0f b6 c0             	movzx  eax,al
c0012f8e:	83 ec 04             	sub    esp,0x4
c0012f91:	50                   	push   eax
c0012f92:	6a 03                	push   0x3
c0012f94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f98:	e8 af fe ff ff       	call   c0012e4c <icmp_send_response>
c0012f9d:	83 c4 10             	add    esp,0x10
c0012fa0:	90                   	nop
c0012fa1:	83 c4 0c             	add    esp,0xc
c0012fa4:	c3                   	ret    
c0012fa5:	8d 76 00             	lea    esi,[esi+0x0]

c0012fa8 <icmp_time_exceeded>:
c0012fa8:	83 ec 0c             	sub    esp,0xc
c0012fab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012faf:	0f b6 c0             	movzx  eax,al
c0012fb2:	83 ec 04             	sub    esp,0x4
c0012fb5:	50                   	push   eax
c0012fb6:	6a 0b                	push   0xb
c0012fb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fbc:	e8 8b fe ff ff       	call   c0012e4c <icmp_send_response>
c0012fc1:	83 c4 10             	add    esp,0x10
c0012fc4:	90                   	nop
c0012fc5:	83 c4 0c             	add    esp,0xc
c0012fc8:	c3                   	ret    
c0012fc9:	66 90                	xchg   ax,ax
c0012fcb:	90                   	nop

c0012fcc <lwip_standard_chksum>:
c0012fcc:	83 ec 2c             	sub    esp,0x2c
c0012fcf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fd3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012fd7:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0012fde:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012fe6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fea:	83 e0 01             	and    eax,0x1
c0012fed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012ff1:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012ff6:	74 24                	je     c001301c <lwip_standard_chksum+0x50>
c0012ff8:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0012ffd:	7e 1d                	jle    c001301c <lwip_standard_chksum+0x50>
c0012fff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013003:	8d 42 01             	lea    eax,[edx+0x1]
c0013006:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001300a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001300e:	83 c0 01             	add    eax,0x1
c0013011:	8a 12                	mov    dl,BYTE PTR [edx]
c0013013:	88 10                	mov    BYTE PTR [eax],dl
c0013015:	83 6c 24 34 01       	sub    DWORD PTR [esp+0x34],0x1
c001301a:	66 90                	xchg   ax,ax
c001301c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013020:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013024:	eb 1e                	jmp    c0013044 <lwip_standard_chksum+0x78>
c0013026:	66 90                	xchg   ax,ax
c0013028:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001302c:	8d 50 02             	lea    edx,[eax+0x2]
c001302f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013033:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013036:	0f b7 c0             	movzx  eax,ax
c0013039:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c001303d:	83 6c 24 34 02       	sub    DWORD PTR [esp+0x34],0x2
c0013042:	66 90                	xchg   ax,ax
c0013044:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c0013049:	7f dd                	jg     c0013028 <lwip_standard_chksum+0x5c>
c001304b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0013050:	7e 0e                	jle    c0013060 <lwip_standard_chksum+0x94>
c0013052:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0013056:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001305a:	8a 12                	mov    dl,BYTE PTR [edx]
c001305c:	88 10                	mov    BYTE PTR [eax],dl
c001305e:	66 90                	xchg   ax,ax
c0013060:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0013065:	0f b7 c0             	movzx  eax,ax
c0013068:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c001306c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013070:	c1 e8 10             	shr    eax,0x10
c0013073:	89 c2                	mov    edx,eax
c0013075:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013079:	0f b7 c0             	movzx  eax,ax
c001307c:	01 d0                	add    eax,edx
c001307e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013082:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013086:	c1 e8 10             	shr    eax,0x10
c0013089:	89 c2                	mov    edx,eax
c001308b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001308f:	0f b7 c0             	movzx  eax,ax
c0013092:	01 d0                	add    eax,edx
c0013094:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013098:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001309d:	74 1d                	je     c00130bc <lwip_standard_chksum+0xf0>
c001309f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00130a3:	0f b7 c0             	movzx  eax,ax
c00130a6:	83 ec 0c             	sub    esp,0xc
c00130a9:	50                   	push   eax
c00130aa:	e8 39 db fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00130af:	83 c4 10             	add    esp,0x10
c00130b2:	0f b7 c0             	movzx  eax,ax
c00130b5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00130b9:	8d 76 00             	lea    esi,[esi+0x0]
c00130bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00130c0:	83 c4 2c             	add    esp,0x2c
c00130c3:	c3                   	ret    

c00130c4 <inet_chksum_pseudo>:
c00130c4:	83 ec 2c             	sub    esp,0x2c
c00130c7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00130cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00130cf:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00130d3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00130d8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00130e0:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00130e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00130e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00130ed:	e9 8a 00 00 00       	jmp    c001317c <inet_chksum_pseudo+0xb8>
c00130f2:	66 90                	xchg   ax,ax
c00130f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130f8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00130fc:	0f b7 d0             	movzx  edx,ax
c00130ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013103:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013106:	83 ec 08             	sub    esp,0x8
c0013109:	52                   	push   edx
c001310a:	50                   	push   eax
c001310b:	e8 bc fe ff ff       	call   c0012fcc <lwip_standard_chksum>
c0013110:	83 c4 10             	add    esp,0x10
c0013113:	0f b7 c0             	movzx  eax,ax
c0013116:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001311a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001311e:	c1 e8 10             	shr    eax,0x10
c0013121:	89 c2                	mov    edx,eax
c0013123:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013127:	0f b7 c0             	movzx  eax,ax
c001312a:	01 d0                	add    eax,edx
c001312c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013130:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013134:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013138:	83 e0 01             	and    eax,0x1
c001313b:	0f b7 c0             	movzx  eax,ax
c001313e:	85 c0                	test   eax,eax
c0013140:	74 2e                	je     c0013170 <inet_chksum_pseudo+0xac>
c0013142:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0013146:	ba 01 00 00 00       	mov    edx,0x1
c001314b:	29 c2                	sub    edx,eax
c001314d:	89 d0                	mov    eax,edx
c001314f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0013153:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013157:	0f b7 c0             	movzx  eax,ax
c001315a:	83 ec 0c             	sub    esp,0xc
c001315d:	50                   	push   eax
c001315e:	e8 85 da fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013163:	83 c4 10             	add    esp,0x10
c0013166:	0f b7 c0             	movzx  eax,ax
c0013169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001316d:	8d 76 00             	lea    esi,[esi+0x0]
c0013170:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013174:	8b 00                	mov    eax,DWORD PTR [eax]
c0013176:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001317a:	66 90                	xchg   ax,ax
c001317c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013181:	0f 85 6d ff ff ff    	jne    c00130f4 <inet_chksum_pseudo+0x30>
c0013187:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c001318c:	85 c0                	test   eax,eax
c001318e:	74 1c                	je     c00131ac <inet_chksum_pseudo+0xe8>
c0013190:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013194:	0f b7 c0             	movzx  eax,ax
c0013197:	83 ec 0c             	sub    esp,0xc
c001319a:	50                   	push   eax
c001319b:	e8 48 da fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00131a0:	83 c4 10             	add    esp,0x10
c00131a3:	0f b7 c0             	movzx  eax,ax
c00131a6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00131aa:	66 90                	xchg   ax,ax
c00131ac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00131b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00131b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00131b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131ba:	0f b7 c0             	movzx  eax,ax
c00131bd:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00131c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131c5:	c1 e8 10             	shr    eax,0x10
c00131c8:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00131cc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00131d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00131d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00131d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131da:	0f b7 c0             	movzx  eax,ax
c00131dd:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00131e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131e5:	c1 e8 10             	shr    eax,0x10
c00131e8:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00131ec:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00131f1:	83 ec 0c             	sub    esp,0xc
c00131f4:	50                   	push   eax
c00131f5:	e8 ee d9 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00131fa:	83 c4 10             	add    esp,0x10
c00131fd:	0f b7 c0             	movzx  eax,ax
c0013200:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013204:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0013209:	83 ec 0c             	sub    esp,0xc
c001320c:	50                   	push   eax
c001320d:	e8 d6 d9 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013212:	83 c4 10             	add    esp,0x10
c0013215:	0f b7 c0             	movzx  eax,ax
c0013218:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001321c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013220:	c1 e8 10             	shr    eax,0x10
c0013223:	89 c2                	mov    edx,eax
c0013225:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013229:	0f b7 c0             	movzx  eax,ax
c001322c:	01 d0                	add    eax,edx
c001322e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013232:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013236:	c1 e8 10             	shr    eax,0x10
c0013239:	89 c2                	mov    edx,eax
c001323b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001323f:	0f b7 c0             	movzx  eax,ax
c0013242:	01 d0                	add    eax,edx
c0013244:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013248:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001324c:	f7 d0                	not    eax
c001324e:	83 c4 2c             	add    esp,0x2c
c0013251:	c3                   	ret    
c0013252:	66 90                	xchg   ax,ax

c0013254 <inet_chksum_pseudo_partial>:
c0013254:	83 ec 2c             	sub    esp,0x2c
c0013257:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001325b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001325f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0013263:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013267:	66 89 54 24 08       	mov    WORD PTR [esp+0x8],dx
c001326c:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0013271:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013279:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001327e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013282:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013286:	e9 d9 00 00 00       	jmp    c0013364 <inet_chksum_pseudo_partial+0x110>
c001328b:	90                   	nop
c001328c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013290:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013294:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0013299:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c001329e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00132a3:	39 c2                	cmp    edx,eax
c00132a5:	76 09                	jbe    c00132b0 <inet_chksum_pseudo_partial+0x5c>
c00132a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132ab:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c00132b0:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c00132b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132b9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00132bc:	83 ec 08             	sub    esp,0x8
c00132bf:	52                   	push   edx
c00132c0:	50                   	push   eax
c00132c1:	e8 06 fd ff ff       	call   c0012fcc <lwip_standard_chksum>
c00132c6:	83 c4 10             	add    esp,0x10
c00132c9:	0f b7 c0             	movzx  eax,ax
c00132cc:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00132d0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00132d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132d8:	89 d1                	mov    ecx,edx
c00132da:	29 c1                	sub    ecx,eax
c00132dc:	89 c8                	mov    eax,ecx
c00132de:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00132e3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00132e8:	3d fe 7f 00 00       	cmp    eax,0x7ffe
c00132ed:	76 15                	jbe    c0013304 <inet_chksum_pseudo_partial+0xb0>
c00132ef:	83 ec 08             	sub    esp,0x8
c00132f2:	68 e0 0b 03 c0       	push   0xc0030be0
c00132f7:	68 46 f9 02 c0       	push   0xc002f946
c00132fc:	e8 db c7 00 00       	call   c001fadc <CPrintf>
c0013301:	83 c4 10             	add    esp,0x10
c0013304:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013308:	c1 e8 10             	shr    eax,0x10
c001330b:	89 c2                	mov    edx,eax
c001330d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013311:	0f b7 c0             	movzx  eax,ax
c0013314:	01 d0                	add    eax,edx
c0013316:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001331a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001331e:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013322:	83 e0 01             	and    eax,0x1
c0013325:	0f b7 c0             	movzx  eax,ax
c0013328:	85 c0                	test   eax,eax
c001332a:	74 2c                	je     c0013358 <inet_chksum_pseudo_partial+0x104>
c001332c:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0013330:	ba 01 00 00 00       	mov    edx,0x1
c0013335:	29 c2                	sub    edx,eax
c0013337:	89 d0                	mov    eax,edx
c0013339:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001333d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013341:	0f b7 c0             	movzx  eax,ax
c0013344:	83 ec 0c             	sub    esp,0xc
c0013347:	50                   	push   eax
c0013348:	e8 9b d8 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001334d:	83 c4 10             	add    esp,0x10
c0013350:	0f b7 c0             	movzx  eax,ax
c0013353:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013357:	90                   	nop
c0013358:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001335c:	8b 00                	mov    eax,DWORD PTR [eax]
c001335e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013362:	66 90                	xchg   ax,ax
c0013364:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013369:	74 0d                	je     c0013378 <inet_chksum_pseudo_partial+0x124>
c001336b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013370:	85 c0                	test   eax,eax
c0013372:	0f 85 14 ff ff ff    	jne    c001328c <inet_chksum_pseudo_partial+0x38>
c0013378:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c001337d:	85 c0                	test   eax,eax
c001337f:	74 1b                	je     c001339c <inet_chksum_pseudo_partial+0x148>
c0013381:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013385:	0f b7 c0             	movzx  eax,ax
c0013388:	83 ec 0c             	sub    esp,0xc
c001338b:	50                   	push   eax
c001338c:	e8 57 d8 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013391:	83 c4 10             	add    esp,0x10
c0013394:	0f b7 c0             	movzx  eax,ax
c0013397:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001339b:	90                   	nop
c001339c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00133a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00133a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00133a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133aa:	0f b7 c0             	movzx  eax,ax
c00133ad:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00133b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133b5:	c1 e8 10             	shr    eax,0x10
c00133b8:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00133bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00133c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00133c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00133c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133ca:	0f b7 c0             	movzx  eax,ax
c00133cd:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00133d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133d5:	c1 e8 10             	shr    eax,0x10
c00133d8:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00133dc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00133e1:	83 ec 0c             	sub    esp,0xc
c00133e4:	50                   	push   eax
c00133e5:	e8 fe d7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00133ea:	83 c4 10             	add    esp,0x10
c00133ed:	0f b7 c0             	movzx  eax,ax
c00133f0:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00133f4:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00133f9:	83 ec 0c             	sub    esp,0xc
c00133fc:	50                   	push   eax
c00133fd:	e8 e6 d7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013402:	83 c4 10             	add    esp,0x10
c0013405:	0f b7 c0             	movzx  eax,ax
c0013408:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001340c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013410:	c1 e8 10             	shr    eax,0x10
c0013413:	89 c2                	mov    edx,eax
c0013415:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013419:	0f b7 c0             	movzx  eax,ax
c001341c:	01 d0                	add    eax,edx
c001341e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013422:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013426:	c1 e8 10             	shr    eax,0x10
c0013429:	89 c2                	mov    edx,eax
c001342b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001342f:	0f b7 c0             	movzx  eax,ax
c0013432:	01 d0                	add    eax,edx
c0013434:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013438:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001343c:	f7 d0                	not    eax
c001343e:	83 c4 2c             	add    esp,0x2c
c0013441:	c3                   	ret    
c0013442:	66 90                	xchg   ax,ax

c0013444 <inet_chksum>:
c0013444:	83 ec 1c             	sub    esp,0x1c
c0013447:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001344b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0013450:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0013455:	83 ec 08             	sub    esp,0x8
c0013458:	50                   	push   eax
c0013459:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001345d:	e8 6a fb ff ff       	call   c0012fcc <lwip_standard_chksum>
c0013462:	83 c4 10             	add    esp,0x10
c0013465:	f7 d0                	not    eax
c0013467:	83 c4 1c             	add    esp,0x1c
c001346a:	c3                   	ret    
c001346b:	90                   	nop

c001346c <inet_chksum_pbuf>:
c001346c:	83 ec 1c             	sub    esp,0x1c
c001346f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013477:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c001347c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013480:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013484:	e9 8b 00 00 00       	jmp    c0013514 <inet_chksum_pbuf+0xa8>
c0013489:	8d 76 00             	lea    esi,[esi+0x0]
c001348c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013490:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013494:	0f b7 d0             	movzx  edx,ax
c0013497:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001349b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001349e:	83 ec 08             	sub    esp,0x8
c00134a1:	52                   	push   edx
c00134a2:	50                   	push   eax
c00134a3:	e8 24 fb ff ff       	call   c0012fcc <lwip_standard_chksum>
c00134a8:	83 c4 10             	add    esp,0x10
c00134ab:	0f b7 c0             	movzx  eax,ax
c00134ae:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00134b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00134b6:	c1 e8 10             	shr    eax,0x10
c00134b9:	89 c2                	mov    edx,eax
c00134bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00134bf:	0f b7 c0             	movzx  eax,ax
c00134c2:	01 d0                	add    eax,edx
c00134c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00134c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00134cc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00134d0:	83 e0 01             	and    eax,0x1
c00134d3:	0f b7 c0             	movzx  eax,ax
c00134d6:	85 c0                	test   eax,eax
c00134d8:	74 2e                	je     c0013508 <inet_chksum_pbuf+0x9c>
c00134da:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00134de:	ba 01 00 00 00       	mov    edx,0x1
c00134e3:	29 c2                	sub    edx,eax
c00134e5:	89 d0                	mov    eax,edx
c00134e7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00134eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00134ef:	0f b7 c0             	movzx  eax,ax
c00134f2:	83 ec 0c             	sub    esp,0xc
c00134f5:	50                   	push   eax
c00134f6:	e8 ed d6 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00134fb:	83 c4 10             	add    esp,0x10
c00134fe:	0f b7 c0             	movzx  eax,ax
c0013501:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013505:	8d 76 00             	lea    esi,[esi+0x0]
c0013508:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001350c:	8b 00                	mov    eax,DWORD PTR [eax]
c001350e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013512:	66 90                	xchg   ax,ax
c0013514:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013519:	0f 85 6d ff ff ff    	jne    c001348c <inet_chksum_pbuf+0x20>
c001351f:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0013524:	85 c0                	test   eax,eax
c0013526:	74 1c                	je     c0013544 <inet_chksum_pbuf+0xd8>
c0013528:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001352c:	0f b7 c0             	movzx  eax,ax
c001352f:	83 ec 0c             	sub    esp,0xc
c0013532:	50                   	push   eax
c0013533:	e8 b0 d6 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013538:	83 c4 10             	add    esp,0x10
c001353b:	0f b7 c0             	movzx  eax,ax
c001353e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013542:	66 90                	xchg   ax,ax
c0013544:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013548:	f7 d0                	not    eax
c001354a:	83 c4 1c             	add    esp,0x1c
c001354d:	c3                   	ret    
c001354e:	66 90                	xchg   ax,ax

c0013550 <ip_route>:
c0013550:	83 ec 10             	sub    esp,0x10
c0013553:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0013558:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001355c:	eb 42                	jmp    c00135a0 <ip_route+0x50>
c001355e:	66 90                	xchg   ax,ax
c0013560:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013564:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013567:	83 e0 01             	and    eax,0x1
c001356a:	0f b6 c0             	movzx  eax,al
c001356d:	85 c0                	test   eax,eax
c001356f:	74 23                	je     c0013594 <ip_route+0x44>
c0013571:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013575:	8b 10                	mov    edx,DWORD PTR [eax]
c0013577:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001357b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001357e:	31 c2                	xor    edx,eax
c0013580:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013584:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013587:	21 d0                	and    eax,edx
c0013589:	75 09                	jne    c0013594 <ip_route+0x44>
c001358b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001358f:	eb 4f                	jmp    c00135e0 <ip_route+0x90>
c0013591:	8d 76 00             	lea    esi,[esi+0x0]
c0013594:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013598:	8b 00                	mov    eax,DWORD PTR [eax]
c001359a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001359e:	66 90                	xchg   ax,ax
c00135a0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00135a5:	75 b9                	jne    c0013560 <ip_route+0x10>
c00135a7:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c00135ac:	85 c0                	test   eax,eax
c00135ae:	74 10                	je     c00135c0 <ip_route+0x70>
c00135b0:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c00135b5:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00135b8:	0f b6 c0             	movzx  eax,al
c00135bb:	83 e0 01             	and    eax,0x1
c00135be:	75 18                	jne    c00135d8 <ip_route+0x88>
c00135c0:	66 a1 76 67 03 c0    	mov    ax,ds:0xc0036776
c00135c6:	83 c0 01             	add    eax,0x1
c00135c9:	66 a3 76 67 03 c0    	mov    ds:0xc0036776,ax
c00135cf:	b8 00 00 00 00       	mov    eax,0x0
c00135d4:	eb 0a                	jmp    c00135e0 <ip_route+0x90>
c00135d6:	66 90                	xchg   ax,ax
c00135d8:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c00135dd:	8d 76 00             	lea    esi,[esi+0x0]
c00135e0:	83 c4 10             	add    esp,0x10
c00135e3:	c3                   	ret    

c00135e4 <ip_input>:
c00135e4:	83 ec 1c             	sub    esp,0x1c
c00135e7:	66 a1 6a 67 03 c0    	mov    ax,ds:0xc003676a
c00135ed:	83 c0 01             	add    eax,0x1
c00135f0:	66 a3 6a 67 03 c0    	mov    ds:0xc003676a,ax
c00135f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00135fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013601:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013605:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013608:	0f b7 c0             	movzx  eax,ax
c001360b:	83 ec 0c             	sub    esp,0xc
c001360e:	50                   	push   eax
c001360f:	e8 d4 d5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013614:	83 c4 10             	add    esp,0x10
c0013617:	0f b7 c0             	movzx  eax,ax
c001361a:	c1 e8 0c             	shr    eax,0xc
c001361d:	0f b7 c0             	movzx  eax,ax
c0013620:	83 f8 04             	cmp    eax,0x4
c0013623:	74 37                	je     c001365c <ip_input+0x78>
c0013625:	83 ec 0c             	sub    esp,0xc
c0013628:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001362c:	e8 77 4c ff ff       	call   c00082a8 <pbuf_free>
c0013631:	83 c4 10             	add    esp,0x10
c0013634:	66 a1 7c 67 03 c0    	mov    ax,ds:0xc003677c
c001363a:	83 c0 01             	add    eax,0x1
c001363d:	66 a3 7c 67 03 c0    	mov    ds:0xc003677c,ax
c0013643:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013649:	83 c0 01             	add    eax,0x1
c001364c:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013652:	b0 00                	mov    al,0x0
c0013654:	e9 cb 03 00 00       	jmp    c0013a24 <ip_input+0x440>
c0013659:	8d 76 00             	lea    esi,[esi+0x0]
c001365c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013660:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013663:	0f b7 c0             	movzx  eax,ax
c0013666:	83 ec 0c             	sub    esp,0xc
c0013669:	50                   	push   eax
c001366a:	e8 79 d5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001366f:	83 c4 10             	add    esp,0x10
c0013672:	0f b7 c0             	movzx  eax,ax
c0013675:	c1 e8 08             	shr    eax,0x8
c0013678:	83 e0 0f             	and    eax,0xf
c001367b:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c0013680:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c0013685:	c1 e0 02             	shl    eax,0x2
c0013688:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c001368d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013691:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0013695:	0f b7 c0             	movzx  eax,ax
c0013698:	83 ec 0c             	sub    esp,0xc
c001369b:	50                   	push   eax
c001369c:	e8 47 d5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00136a1:	83 c4 10             	add    esp,0x10
c00136a4:	66 89 04 24          	mov    WORD PTR [esp],ax
c00136a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136ac:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00136b0:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c00136b5:	0f b7 c0             	movzx  eax,ax
c00136b8:	39 c2                	cmp    edx,eax
c00136ba:	77 14                	ja     c00136d0 <ip_input+0xec>
c00136bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136c0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00136c3:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c00136c7:	0f b7 c0             	movzx  eax,ax
c00136ca:	39 c2                	cmp    edx,eax
c00136cc:	76 36                	jbe    c0013704 <ip_input+0x120>
c00136ce:	66 90                	xchg   ax,ax
c00136d0:	83 ec 0c             	sub    esp,0xc
c00136d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00136d7:	e8 cc 4b ff ff       	call   c00082a8 <pbuf_free>
c00136dc:	83 c4 10             	add    esp,0x10
c00136df:	66 a1 72 67 03 c0    	mov    ax,ds:0xc0036772
c00136e5:	83 c0 01             	add    eax,0x1
c00136e8:	66 a3 72 67 03 c0    	mov    ds:0xc0036772,ax
c00136ee:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c00136f4:	83 c0 01             	add    eax,0x1
c00136f7:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c00136fd:	b0 00                	mov    al,0x0
c00136ff:	e9 20 03 00 00       	jmp    c0013a24 <ip_input+0x440>
c0013704:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c0013709:	83 ec 08             	sub    esp,0x8
c001370c:	50                   	push   eax
c001370d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013711:	e8 2e fd ff ff       	call   c0013444 <inet_chksum>
c0013716:	83 c4 10             	add    esp,0x10
c0013719:	0f b7 c0             	movzx  eax,ax
c001371c:	85 c0                	test   eax,eax
c001371e:	74 34                	je     c0013754 <ip_input+0x170>
c0013720:	83 ec 0c             	sub    esp,0xc
c0013723:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013727:	e8 7c 4b ff ff       	call   c00082a8 <pbuf_free>
c001372c:	83 c4 10             	add    esp,0x10
c001372f:	66 a1 70 67 03 c0    	mov    ax,ds:0xc0036770
c0013735:	83 c0 01             	add    eax,0x1
c0013738:	66 a3 70 67 03 c0    	mov    ds:0xc0036770,ax
c001373e:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013744:	83 c0 01             	add    eax,0x1
c0013747:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c001374d:	b0 00                	mov    al,0x0
c001374f:	e9 d0 02 00 00       	jmp    c0013a24 <ip_input+0x440>
c0013754:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0013758:	83 ec 08             	sub    esp,0x8
c001375b:	50                   	push   eax
c001375c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013760:	e8 13 51 ff ff       	call   c0008878 <pbuf_realloc>
c0013765:	83 c4 10             	add    esp,0x10
c0013768:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001376c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001376f:	a3 98 68 03 c0       	mov    ds:0xc0036898,eax
c0013774:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013778:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001377b:	a3 90 68 03 c0       	mov    ds:0xc0036890,eax
c0013780:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0013788:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001378c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013790:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013794:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013797:	83 e0 01             	and    eax,0x1
c001379a:	0f b6 c0             	movzx  eax,al
c001379d:	85 c0                	test   eax,eax
c001379f:	74 43                	je     c00137e4 <ip_input+0x200>
c00137a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00137a5:	83 c0 04             	add    eax,0x4
c00137a8:	74 3a                	je     c00137e4 <ip_input+0x200>
c00137aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00137ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00137b1:	85 c0                	test   eax,eax
c00137b3:	74 2f                	je     c00137e4 <ip_input+0x200>
c00137b5:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c00137bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00137bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00137c2:	39 c2                	cmp    edx,eax
c00137c4:	74 66                	je     c001382c <ip_input+0x248>
c00137c6:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c00137cb:	83 ec 08             	sub    esp,0x8
c00137ce:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00137d2:	50                   	push   eax
c00137d3:	e8 c4 05 00 00       	call   c0013d9c <ip4_addr_isbroadcast>
c00137d8:	83 c4 10             	add    esp,0x10
c00137db:	0f b6 c0             	movzx  eax,al
c00137de:	85 c0                	test   eax,eax
c00137e0:	75 4a                	jne    c001382c <ip_input+0x248>
c00137e2:	66 90                	xchg   ax,ax
c00137e4:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00137e9:	74 15                	je     c0013800 <ip_input+0x21c>
c00137eb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00137f3:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c00137f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00137fc:	eb 0e                	jmp    c001380c <ip_input+0x228>
c00137fe:	66 90                	xchg   ax,ax
c0013800:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013804:	8b 00                	mov    eax,DWORD PTR [eax]
c0013806:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001380a:	66 90                	xchg   ax,ax
c001380c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013810:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0013814:	75 0a                	jne    c0013820 <ip_input+0x23c>
c0013816:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001381a:	8b 00                	mov    eax,DWORD PTR [eax]
c001381c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013820:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013825:	0f 85 65 ff ff ff    	jne    c0013790 <ip_input+0x1ac>
c001382b:	90                   	nop
c001382c:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c0013831:	83 ec 08             	sub    esp,0x8
c0013834:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013838:	50                   	push   eax
c0013839:	e8 5e 05 00 00       	call   c0013d9c <ip4_addr_isbroadcast>
c001383e:	83 c4 10             	add    esp,0x10
c0013841:	0f b6 c0             	movzx  eax,al
c0013844:	85 c0                	test   eax,eax
c0013846:	75 14                	jne    c001385c <ip_input+0x278>
c0013848:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c001384d:	25 f0 00 00 00       	and    eax,0xf0
c0013852:	3d e0 00 00 00       	cmp    eax,0xe0
c0013857:	75 2b                	jne    c0013884 <ip_input+0x2a0>
c0013859:	8d 76 00             	lea    esi,[esi+0x0]
c001385c:	83 ec 0c             	sub    esp,0xc
c001385f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013863:	e8 40 4a ff ff       	call   c00082a8 <pbuf_free>
c0013868:	83 c4 10             	add    esp,0x10
c001386b:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013871:	83 c0 01             	add    eax,0x1
c0013874:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c001387a:	b0 00                	mov    al,0x0
c001387c:	e9 a3 01 00 00       	jmp    c0013a24 <ip_input+0x440>
c0013881:	8d 76 00             	lea    esi,[esi+0x0]
c0013884:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013889:	75 19                	jne    c00138a4 <ip_input+0x2c0>
c001388b:	83 ec 0c             	sub    esp,0xc
c001388e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013892:	e8 11 4a ff ff       	call   c00082a8 <pbuf_free>
c0013897:	83 c4 10             	add    esp,0x10
c001389a:	b0 00                	mov    al,0x0
c001389c:	e9 83 01 00 00       	jmp    c0013a24 <ip_input+0x440>
c00138a1:	8d 76 00             	lea    esi,[esi+0x0]
c00138a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138a8:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00138ac:	0f b7 c0             	movzx  eax,ax
c00138af:	25 3f ff 00 00       	and    eax,0xff3f
c00138b4:	74 2e                	je     c00138e4 <ip_input+0x300>
c00138b6:	83 ec 0c             	sub    esp,0xc
c00138b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138bd:	e8 7a 13 00 00       	call   c0014c3c <ip_reass>
c00138c2:	83 c4 10             	add    esp,0x10
c00138c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00138c9:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00138ce:	75 08                	jne    c00138d8 <ip_input+0x2f4>
c00138d0:	b0 00                	mov    al,0x0
c00138d2:	e9 4d 01 00 00       	jmp    c0013a24 <ip_input+0x440>
c00138d7:	90                   	nop
c00138d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00138dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00138df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00138e3:	90                   	nop
c00138e4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00138e8:	a3 94 68 03 c0       	mov    ds:0xc0036894,eax
c00138ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138f1:	a3 9c 68 03 c0       	mov    ds:0xc003689c,eax
c00138f6:	83 ec 08             	sub    esp,0x8
c00138f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013901:	e8 c6 5c ff ff       	call   c00095cc <raw_input>
c0013906:	83 c4 10             	add    esp,0x10
c0013909:	0f b6 c0             	movzx  eax,al
c001390c:	85 c0                	test   eax,eax
c001390e:	0f 85 e0 00 00 00    	jne    c00139f4 <ip_input+0x410>
c0013914:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013918:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c001391b:	0f b6 c0             	movzx  eax,al
c001391e:	83 f8 06             	cmp    eax,0x6
c0013921:	74 25                	je     c0013948 <ip_input+0x364>
c0013923:	83 f8 11             	cmp    eax,0x11
c0013926:	74 08                	je     c0013930 <ip_input+0x34c>
c0013928:	83 f8 01             	cmp    eax,0x1
c001392b:	74 33                	je     c0013960 <ip_input+0x37c>
c001392d:	eb 49                	jmp    c0013978 <ip_input+0x394>
c001392f:	90                   	nop
c0013930:	83 ec 08             	sub    esp,0x8
c0013933:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013937:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001393b:	e8 c0 d3 ff ff       	call   c0010d00 <udp_input>
c0013940:	83 c4 10             	add    esp,0x10
c0013943:	e9 b0 00 00 00       	jmp    c00139f8 <ip_input+0x414>
c0013948:	83 ec 08             	sub    esp,0x8
c001394b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001394f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013953:	e8 00 a5 ff ff       	call   c000de58 <tcp_input>
c0013958:	83 c4 10             	add    esp,0x10
c001395b:	e9 98 00 00 00       	jmp    c00139f8 <ip_input+0x414>
c0013960:	83 ec 08             	sub    esp,0x8
c0013963:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013967:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001396b:	e8 7c f0 ff ff       	call   c00129ec <icmp_input>
c0013970:	83 c4 10             	add    esp,0x10
c0013973:	e9 80 00 00 00       	jmp    c00139f8 <ip_input+0x414>
c0013978:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c001397d:	83 ec 08             	sub    esp,0x8
c0013980:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013984:	50                   	push   eax
c0013985:	e8 12 04 00 00       	call   c0013d9c <ip4_addr_isbroadcast>
c001398a:	83 c4 10             	add    esp,0x10
c001398d:	0f b6 c0             	movzx  eax,al
c0013990:	85 c0                	test   eax,eax
c0013992:	75 30                	jne    c00139c4 <ip_input+0x3e0>
c0013994:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013999:	25 f0 00 00 00       	and    eax,0xf0
c001399e:	3d e0 00 00 00       	cmp    eax,0xe0
c00139a3:	74 1f                	je     c00139c4 <ip_input+0x3e0>
c00139a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00139a9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00139ad:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00139b0:	83 ec 08             	sub    esp,0x8
c00139b3:	6a 02                	push   0x2
c00139b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139b9:	e8 c6 f5 ff ff       	call   c0012f84 <icmp_dest_unreach>
c00139be:	83 c4 10             	add    esp,0x10
c00139c1:	8d 76 00             	lea    esi,[esi+0x0]
c00139c4:	83 ec 0c             	sub    esp,0xc
c00139c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139cb:	e8 d8 48 ff ff       	call   c00082a8 <pbuf_free>
c00139d0:	83 c4 10             	add    esp,0x10
c00139d3:	66 a1 78 67 03 c0    	mov    ax,ds:0xc0036778
c00139d9:	83 c0 01             	add    eax,0x1
c00139dc:	66 a3 78 67 03 c0    	mov    ds:0xc0036778,ax
c00139e2:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c00139e8:	83 c0 01             	add    eax,0x1
c00139eb:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c00139f1:	eb 05                	jmp    c00139f8 <ip_input+0x414>
c00139f3:	90                   	nop
c00139f4:	90                   	nop
c00139f5:	8d 76 00             	lea    esi,[esi+0x0]
c00139f8:	c7 05 94 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036894,0x0
c0013a02:	c7 05 9c 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003689c,0x0
c0013a0c:	c7 05 90 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036890,0x0
c0013a16:	c7 05 98 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036898,0x0
c0013a20:	b0 00                	mov    al,0x0
c0013a22:	66 90                	xchg   ax,ax
c0013a24:	83 c4 1c             	add    esp,0x1c
c0013a27:	c3                   	ret    

c0013a28 <ip_output_if>:
c0013a28:	83 ec 2c             	sub    esp,0x2c
c0013a2b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013a2f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013a33:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0013a37:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013a3b:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c0013a3f:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013a43:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013a4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013a4f:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0013a53:	0f b7 c0             	movzx  eax,ax
c0013a56:	83 f8 01             	cmp    eax,0x1
c0013a59:	74 15                	je     c0013a70 <ip_output_if+0x48>
c0013a5b:	83 ec 08             	sub    esp,0x8
c0013a5e:	68 ea 0b 03 c0       	push   0xc0030bea
c0013a63:	68 46 f9 02 c0       	push   0xc002f946
c0013a68:	e8 6f c0 00 00       	call   c001fadc <CPrintf>
c0013a6d:	83 c4 10             	add    esp,0x10
c0013a70:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0013a75:	0f 84 ed 01 00 00    	je     c0013c68 <ip_output_if+0x240>
c0013a7b:	66 c7 44 24 1a 14 00 	mov    WORD PTR [esp+0x1a],0x14
c0013a82:	83 ec 08             	sub    esp,0x8
c0013a85:	6a 14                	push   0x14
c0013a87:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013a8b:	e8 7c 46 ff ff       	call   c000810c <pbuf_header>
c0013a90:	83 c4 10             	add    esp,0x10
c0013a93:	0f b6 c0             	movzx  eax,al
c0013a96:	85 c0                	test   eax,eax
c0013a98:	74 16                	je     c0013ab0 <ip_output_if+0x88>
c0013a9a:	66 a1 7c 67 03 c0    	mov    ax,ds:0xc003677c
c0013aa0:	83 c0 01             	add    eax,0x1
c0013aa3:	66 a3 7c 67 03 c0    	mov    ds:0xc003677c,ax
c0013aa9:	b0 fe                	mov    al,0xfe
c0013aab:	e9 44 02 00 00       	jmp    c0013cf4 <ip_output_if+0x2cc>
c0013ab0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ab4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013ab7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013abb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013abf:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013ac3:	0f b7 c0             	movzx  eax,ax
c0013ac6:	83 f8 13             	cmp    eax,0x13
c0013ac9:	77 15                	ja     c0013ae0 <ip_output_if+0xb8>
c0013acb:	83 ec 08             	sub    esp,0x8
c0013ace:	68 f8 0b 03 c0       	push   0xc0030bf8
c0013ad3:	68 46 f9 02 c0       	push   0xc002f946
c0013ad8:	e8 ff bf 00 00       	call   c001fadc <CPrintf>
c0013add:	83 c4 10             	add    esp,0x10
c0013ae0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ae4:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013ae8:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0013aeb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013aef:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013af3:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0013af6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0013afb:	c1 e0 08             	shl    eax,0x8
c0013afe:	89 c2                	mov    edx,eax
c0013b00:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013b05:	09 d0                	or     eax,edx
c0013b07:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013b0b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013b0f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b11:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b15:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013b18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b1c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013b1f:	0f b7 c0             	movzx  eax,ax
c0013b22:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b2a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013b2d:	c1 e8 10             	shr    eax,0x10
c0013b30:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013b34:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c0013b39:	c1 e8 02             	shr    eax,0x2
c0013b3c:	0f b7 c0             	movzx  eax,ax
c0013b3f:	c1 e0 08             	shl    eax,0x8
c0013b42:	80 cc 40             	or     ah,0x40
c0013b45:	89 c2                	mov    edx,eax
c0013b47:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013b4c:	09 d0                	or     eax,edx
c0013b4e:	0f b7 c0             	movzx  eax,ax
c0013b51:	83 ec 0c             	sub    esp,0xc
c0013b54:	50                   	push   eax
c0013b55:	e8 8e d0 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013b5a:	83 c4 10             	add    esp,0x10
c0013b5d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013b61:	66 89 02             	mov    WORD PTR [edx],ax
c0013b64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b68:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013b6b:	0f b7 c0             	movzx  eax,ax
c0013b6e:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013b72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b76:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013b79:	0f b7 c0             	movzx  eax,ax
c0013b7c:	83 ec 0c             	sub    esp,0xc
c0013b7f:	50                   	push   eax
c0013b80:	e8 63 d0 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013b85:	83 c4 10             	add    esp,0x10
c0013b88:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013b8c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0013b90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b94:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0013b98:	0f b7 c0             	movzx  eax,ax
c0013b9b:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013b9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ba3:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0013ba9:	66 a1 a0 a9 03 c0    	mov    ax,ds:0xc003a9a0
c0013baf:	0f b7 c0             	movzx  eax,ax
c0013bb2:	83 ec 0c             	sub    esp,0xc
c0013bb5:	50                   	push   eax
c0013bb6:	e8 2d d0 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013bbb:	83 c4 10             	add    esp,0x10
c0013bbe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013bc2:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0013bc6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bca:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0013bce:	0f b7 c0             	movzx  eax,ax
c0013bd1:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013bd5:	66 a1 a0 a9 03 c0    	mov    ax,ds:0xc003a9a0
c0013bdb:	83 c0 01             	add    eax,0x1
c0013bde:	66 a3 a0 a9 03 c0    	mov    ds:0xc003a9a0,ax
c0013be4:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0013be9:	74 0d                	je     c0013bf8 <ip_output_if+0x1d0>
c0013beb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013bef:	8b 00                	mov    eax,DWORD PTR [eax]
c0013bf1:	85 c0                	test   eax,eax
c0013bf3:	75 13                	jne    c0013c08 <ip_output_if+0x1e0>
c0013bf5:	8d 76 00             	lea    esi,[esi+0x0]
c0013bf8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013bfc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0013bff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c03:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013c06:	eb 10                	jmp    c0013c18 <ip_output_if+0x1f0>
c0013c08:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013c0c:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c12:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013c15:	8d 76 00             	lea    esi,[esi+0x0]
c0013c18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c1c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013c1f:	0f b7 c0             	movzx  eax,ax
c0013c22:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013c26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013c2d:	c1 e8 10             	shr    eax,0x10
c0013c30:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c38:	c1 e8 10             	shr    eax,0x10
c0013c3b:	89 c2                	mov    edx,eax
c0013c3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c41:	0f b7 c0             	movzx  eax,ax
c0013c44:	01 d0                	add    eax,edx
c0013c46:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013c4a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c4e:	c1 e8 10             	shr    eax,0x10
c0013c51:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013c55:	f7 54 24 1c          	not    DWORD PTR [esp+0x1c]
c0013c59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c5d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013c61:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0013c65:	eb 21                	jmp    c0013c88 <ip_output_if+0x260>
c0013c67:	90                   	nop
c0013c68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013c6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013c73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c77:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013c7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013c7e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013c82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0013c86:	66 90                	xchg   ax,ax
c0013c88:	66 a1 68 67 03 c0    	mov    ax,ds:0xc0036768
c0013c8e:	83 c0 01             	add    eax,0x1
c0013c91:	66 a3 68 67 03 c0    	mov    ds:0xc0036768,ax
c0013c97:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013c9b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013c9e:	0f b7 c0             	movzx  eax,ax
c0013ca1:	85 c0                	test   eax,eax
c0013ca3:	74 33                	je     c0013cd8 <ip_output_if+0x2b0>
c0013ca5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ca9:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0013cac:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013cb0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013cb3:	0f b7 d2             	movzx  edx,dx
c0013cb6:	0f b7 c0             	movzx  eax,ax
c0013cb9:	39 c2                	cmp    edx,eax
c0013cbb:	76 1b                	jbe    c0013cd8 <ip_output_if+0x2b0>
c0013cbd:	83 ec 04             	sub    esp,0x4
c0013cc0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013cc4:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013cc8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013ccc:	e8 2b 14 00 00       	call   c00150fc <ip_frag>
c0013cd1:	83 c4 10             	add    esp,0x10
c0013cd4:	eb 1e                	jmp    c0013cf4 <ip_output_if+0x2cc>
c0013cd6:	66 90                	xchg   ax,ax
c0013cd8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013cdc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0013cdf:	83 ec 04             	sub    esp,0x4
c0013ce2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013ce6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0013cea:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013cee:	ff d0                	call   eax
c0013cf0:	83 c4 10             	add    esp,0x10
c0013cf3:	90                   	nop
c0013cf4:	83 c4 2c             	add    esp,0x2c
c0013cf7:	c3                   	ret    

c0013cf8 <ip_output>:
c0013cf8:	83 ec 2c             	sub    esp,0x2c
c0013cfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013cff:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013d03:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0013d07:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013d0b:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c0013d0f:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013d13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d17:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0013d1b:	0f b7 c0             	movzx  eax,ax
c0013d1e:	83 f8 01             	cmp    eax,0x1
c0013d21:	74 15                	je     c0013d38 <ip_output+0x40>
c0013d23:	83 ec 08             	sub    esp,0x8
c0013d26:	68 ea 0b 03 c0       	push   0xc0030bea
c0013d2b:	68 46 f9 02 c0       	push   0xc002f946
c0013d30:	e8 a7 bd 00 00       	call   c001fadc <CPrintf>
c0013d35:	83 c4 10             	add    esp,0x10
c0013d38:	83 ec 0c             	sub    esp,0xc
c0013d3b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0013d3f:	e8 0c f8 ff ff       	call   c0013550 <ip_route>
c0013d44:	83 c4 10             	add    esp,0x10
c0013d47:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d4b:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013d50:	75 16                	jne    c0013d68 <ip_output+0x70>
c0013d52:	66 a1 76 67 03 c0    	mov    ax,ds:0xc0036776
c0013d58:	83 c0 01             	add    eax,0x1
c0013d5b:	66 a3 76 67 03 c0    	mov    ds:0xc0036776,ax
c0013d61:	b0 fc                	mov    al,0xfc
c0013d63:	eb 33                	jmp    c0013d98 <ip_output+0xa0>
c0013d65:	8d 76 00             	lea    esi,[esi+0x0]
c0013d68:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0013d6d:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0013d72:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013d77:	83 ec 04             	sub    esp,0x4
c0013d7a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013d7e:	51                   	push   ecx
c0013d7f:	52                   	push   edx
c0013d80:	50                   	push   eax
c0013d81:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013d85:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013d89:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013d8d:	e8 96 fc ff ff       	call   c0013a28 <ip_output_if>
c0013d92:	83 c4 20             	add    esp,0x20
c0013d95:	8d 76 00             	lea    esi,[esi+0x0]
c0013d98:	83 c4 2c             	add    esp,0x2c
c0013d9b:	c3                   	ret    

c0013d9c <ip4_addr_isbroadcast>:
c0013d9c:	83 ec 10             	sub    esp,0x10
c0013d9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013da3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013da7:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0013dac:	74 0a                	je     c0013db8 <ip4_addr_isbroadcast+0x1c>
c0013dae:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0013db3:	75 07                	jne    c0013dbc <ip4_addr_isbroadcast+0x20>
c0013db5:	8d 76 00             	lea    esi,[esi+0x0]
c0013db8:	b0 01                	mov    al,0x1
c0013dba:	eb 64                	jmp    c0013e20 <ip4_addr_isbroadcast+0x84>
c0013dbc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013dc0:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013dc3:	0f b6 c0             	movzx  eax,al
c0013dc6:	83 e0 02             	and    eax,0x2
c0013dc9:	75 05                	jne    c0013dd0 <ip4_addr_isbroadcast+0x34>
c0013dcb:	b0 00                	mov    al,0x0
c0013dcd:	eb 51                	jmp    c0013e20 <ip4_addr_isbroadcast+0x84>
c0013dcf:	90                   	nop
c0013dd0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013dd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013dd7:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0013ddb:	75 07                	jne    c0013de4 <ip4_addr_isbroadcast+0x48>
c0013ddd:	b0 00                	mov    al,0x0
c0013ddf:	eb 3f                	jmp    c0013e20 <ip4_addr_isbroadcast+0x84>
c0013de1:	8d 76 00             	lea    esi,[esi+0x0]
c0013de4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013de8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013dec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013def:	31 c2                	xor    edx,eax
c0013df1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013df5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013df8:	21 d0                	and    eax,edx
c0013dfa:	75 20                	jne    c0013e1c <ip4_addr_isbroadcast+0x80>
c0013dfc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e00:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013e03:	f7 d0                	not    eax
c0013e05:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0013e09:	89 c2                	mov    edx,eax
c0013e0b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e0f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013e12:	f7 d0                	not    eax
c0013e14:	39 c2                	cmp    edx,eax
c0013e16:	75 04                	jne    c0013e1c <ip4_addr_isbroadcast+0x80>
c0013e18:	b0 01                	mov    al,0x1
c0013e1a:	eb 04                	jmp    c0013e20 <ip4_addr_isbroadcast+0x84>
c0013e1c:	b0 00                	mov    al,0x0
c0013e1e:	66 90                	xchg   ax,ax
c0013e20:	83 c4 10             	add    esp,0x10
c0013e23:	c3                   	ret    

c0013e24 <ip4_addr_netmask_valid>:
c0013e24:	83 ec 1c             	sub    esp,0x1c
c0013e27:	83 ec 0c             	sub    esp,0xc
c0013e2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e2e:	e8 d9 cd fe ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0013e33:	83 c4 10             	add    esp,0x10
c0013e36:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013e3a:	c7 44 24 0c 00 00 00 80 	mov    DWORD PTR [esp+0xc],0x80000000
c0013e42:	eb 10                	jmp    c0013e54 <ip4_addr_netmask_valid+0x30>
c0013e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013e48:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c0013e4c:	74 12                	je     c0013e60 <ip4_addr_netmask_valid+0x3c>
c0013e4e:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c0013e52:	66 90                	xchg   ax,ax
c0013e54:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013e59:	75 e9                	jne    c0013e44 <ip4_addr_netmask_valid+0x20>
c0013e5b:	eb 1b                	jmp    c0013e78 <ip4_addr_netmask_valid+0x54>
c0013e5d:	8d 76 00             	lea    esi,[esi+0x0]
c0013e60:	90                   	nop
c0013e61:	eb 15                	jmp    c0013e78 <ip4_addr_netmask_valid+0x54>
c0013e63:	90                   	nop
c0013e64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013e68:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c0013e6c:	74 06                	je     c0013e74 <ip4_addr_netmask_valid+0x50>
c0013e6e:	b0 00                	mov    al,0x0
c0013e70:	eb 12                	jmp    c0013e84 <ip4_addr_netmask_valid+0x60>
c0013e72:	66 90                	xchg   ax,ax
c0013e74:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c0013e78:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013e7d:	75 e5                	jne    c0013e64 <ip4_addr_netmask_valid+0x40>
c0013e7f:	b0 01                	mov    al,0x1
c0013e81:	8d 76 00             	lea    esi,[esi+0x0]
c0013e84:	83 c4 1c             	add    esp,0x1c
c0013e87:	c3                   	ret    

c0013e88 <ipaddr_aton>:
c0013e88:	83 ec 2c             	sub    esp,0x2c
c0013e8b:	8d 44 24 04          	lea    eax,[esp+0x4]
c0013e8f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e97:	8a 00                	mov    al,BYTE PTR [eax]
c0013e99:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0013e9d:	8d 76 00             	lea    esi,[esi+0x0]
c0013ea0:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013ea4:	0f b6 c0             	movzx  eax,al
c0013ea7:	83 f8 2f             	cmp    eax,0x2f
c0013eaa:	76 0c                	jbe    c0013eb8 <ipaddr_aton+0x30>
c0013eac:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013eb0:	0f b6 c0             	movzx  eax,al
c0013eb3:	83 f8 39             	cmp    eax,0x39
c0013eb6:	76 0c                	jbe    c0013ec4 <ipaddr_aton+0x3c>
c0013eb8:	b8 00 00 00 00       	mov    eax,0x0
c0013ebd:	e9 f2 02 00 00       	jmp    c00141b4 <ipaddr_aton+0x32c>
c0013ec2:	66 90                	xchg   ax,ax
c0013ec4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013ecc:	c6 44 24 1b 0a       	mov    BYTE PTR [esp+0x1b],0xa
c0013ed1:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013ed6:	83 f8 30             	cmp    eax,0x30
c0013ed9:	75 45                	jne    c0013f20 <ipaddr_aton+0x98>
c0013edb:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0013ee0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ee4:	8a 00                	mov    al,BYTE PTR [eax]
c0013ee6:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0013eea:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013eef:	83 f8 78             	cmp    eax,0x78
c0013ef2:	74 0c                	je     c0013f00 <ipaddr_aton+0x78>
c0013ef4:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013ef9:	83 f8 58             	cmp    eax,0x58
c0013efc:	75 1a                	jne    c0013f18 <ipaddr_aton+0x90>
c0013efe:	66 90                	xchg   ax,ax
c0013f00:	c6 44 24 1b 10       	mov    BYTE PTR [esp+0x1b],0x10
c0013f05:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0013f0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f0e:	8a 00                	mov    al,BYTE PTR [eax]
c0013f10:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0013f14:	eb 0a                	jmp    c0013f20 <ipaddr_aton+0x98>
c0013f16:	66 90                	xchg   ax,ax
c0013f18:	c6 44 24 1b 08       	mov    BYTE PTR [esp+0x1b],0x8
c0013f1d:	8d 76 00             	lea    esi,[esi+0x0]
c0013f20:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013f24:	0f b6 c0             	movzx  eax,al
c0013f27:	83 f8 2f             	cmp    eax,0x2f
c0013f2a:	76 3c                	jbe    c0013f68 <ipaddr_aton+0xe0>
c0013f2c:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013f30:	0f b6 c0             	movzx  eax,al
c0013f33:	83 f8 39             	cmp    eax,0x39
c0013f36:	77 30                	ja     c0013f68 <ipaddr_aton+0xe0>
c0013f38:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0013f3d:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0013f42:	89 c2                	mov    edx,eax
c0013f44:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013f49:	01 d0                	add    eax,edx
c0013f4b:	83 e8 30             	sub    eax,0x30
c0013f4e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013f52:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0013f57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f5b:	8a 00                	mov    al,BYTE PTR [eax]
c0013f5d:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0013f61:	e9 ae 00 00 00       	jmp    c0014014 <ipaddr_aton+0x18c>
c0013f66:	66 90                	xchg   ax,ax
c0013f68:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0013f6d:	83 f8 10             	cmp    eax,0x10
c0013f70:	0f 85 a6 00 00 00    	jne    c001401c <ipaddr_aton+0x194>
c0013f76:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013f7a:	0f b6 c0             	movzx  eax,al
c0013f7d:	83 f8 2f             	cmp    eax,0x2f
c0013f80:	76 0e                	jbe    c0013f90 <ipaddr_aton+0x108>
c0013f82:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013f86:	0f b6 c0             	movzx  eax,al
c0013f89:	83 f8 39             	cmp    eax,0x39
c0013f8c:	76 32                	jbe    c0013fc0 <ipaddr_aton+0x138>
c0013f8e:	66 90                	xchg   ax,ax
c0013f90:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013f94:	0f b6 c0             	movzx  eax,al
c0013f97:	83 f8 60             	cmp    eax,0x60
c0013f9a:	76 0c                	jbe    c0013fa8 <ipaddr_aton+0x120>
c0013f9c:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013fa0:	0f b6 c0             	movzx  eax,al
c0013fa3:	83 f8 66             	cmp    eax,0x66
c0013fa6:	76 18                	jbe    c0013fc0 <ipaddr_aton+0x138>
c0013fa8:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013fac:	0f b6 c0             	movzx  eax,al
c0013faf:	83 f8 40             	cmp    eax,0x40
c0013fb2:	76 68                	jbe    c001401c <ipaddr_aton+0x194>
c0013fb4:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013fb8:	0f b6 c0             	movzx  eax,al
c0013fbb:	83 f8 46             	cmp    eax,0x46
c0013fbe:	77 5c                	ja     c001401c <ipaddr_aton+0x194>
c0013fc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013fc4:	c1 e0 04             	shl    eax,0x4
c0013fc7:	89 c2                	mov    edx,eax
c0013fc9:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013fce:	8d 48 0a             	lea    ecx,[eax+0xa]
c0013fd1:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013fd5:	0f b6 c0             	movzx  eax,al
c0013fd8:	83 f8 60             	cmp    eax,0x60
c0013fdb:	76 13                	jbe    c0013ff0 <ipaddr_aton+0x168>
c0013fdd:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013fe1:	0f b6 c0             	movzx  eax,al
c0013fe4:	83 f8 7a             	cmp    eax,0x7a
c0013fe7:	77 07                	ja     c0013ff0 <ipaddr_aton+0x168>
c0013fe9:	b8 61 00 00 00       	mov    eax,0x61
c0013fee:	eb 08                	jmp    c0013ff8 <ipaddr_aton+0x170>
c0013ff0:	b8 41 00 00 00       	mov    eax,0x41
c0013ff5:	8d 76 00             	lea    esi,[esi+0x0]
c0013ff8:	29 c1                	sub    ecx,eax
c0013ffa:	89 c8                	mov    eax,ecx
c0013ffc:	09 d0                	or     eax,edx
c0013ffe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014002:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0014007:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001400b:	8a 00                	mov    al,BYTE PTR [eax]
c001400d:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014011:	8d 76 00             	lea    esi,[esi+0x0]
c0014014:	e9 07 ff ff ff       	jmp    c0013f20 <ipaddr_aton+0x98>
c0014019:	8d 76 00             	lea    esi,[esi+0x0]
c001401c:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014021:	83 f8 2e             	cmp    eax,0x2e
c0014024:	75 42                	jne    c0014068 <ipaddr_aton+0x1e0>
c0014026:	8d 44 24 04          	lea    eax,[esp+0x4]
c001402a:	83 c0 0c             	add    eax,0xc
c001402d:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0014031:	72 0d                	jb     c0014040 <ipaddr_aton+0x1b8>
c0014033:	b8 00 00 00 00       	mov    eax,0x0
c0014038:	e9 77 01 00 00       	jmp    c00141b4 <ipaddr_aton+0x32c>
c001403d:	8d 76 00             	lea    esi,[esi+0x0]
c0014040:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014044:	8d 50 04             	lea    edx,[eax+0x4]
c0014047:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001404b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001404f:	89 10                	mov    DWORD PTR [eax],edx
c0014051:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0014056:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001405a:	8a 00                	mov    al,BYTE PTR [eax]
c001405c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014060:	e9 3b fe ff ff       	jmp    c0013ea0 <ipaddr_aton+0x18>
c0014065:	8d 76 00             	lea    esi,[esi+0x0]
c0014068:	90                   	nop
c0014069:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001406e:	85 c0                	test   eax,eax
c0014070:	74 46                	je     c00140b8 <ipaddr_aton+0x230>
c0014072:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014077:	83 f8 20             	cmp    eax,0x20
c001407a:	74 3c                	je     c00140b8 <ipaddr_aton+0x230>
c001407c:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014081:	83 f8 0c             	cmp    eax,0xc
c0014084:	74 32                	je     c00140b8 <ipaddr_aton+0x230>
c0014086:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001408b:	83 f8 0a             	cmp    eax,0xa
c001408e:	74 28                	je     c00140b8 <ipaddr_aton+0x230>
c0014090:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014095:	83 f8 0d             	cmp    eax,0xd
c0014098:	74 1e                	je     c00140b8 <ipaddr_aton+0x230>
c001409a:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001409f:	83 f8 09             	cmp    eax,0x9
c00140a2:	74 14                	je     c00140b8 <ipaddr_aton+0x230>
c00140a4:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00140a9:	83 f8 0b             	cmp    eax,0xb
c00140ac:	74 0a                	je     c00140b8 <ipaddr_aton+0x230>
c00140ae:	b8 00 00 00 00       	mov    eax,0x0
c00140b3:	e9 fc 00 00 00       	jmp    c00141b4 <ipaddr_aton+0x32c>
c00140b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00140bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00140c0:	29 c2                	sub    edx,eax
c00140c2:	89 d0                	mov    eax,edx
c00140c4:	c1 f8 02             	sar    eax,0x2
c00140c7:	83 c0 01             	add    eax,0x1
c00140ca:	83 f8 04             	cmp    eax,0x4
c00140cd:	0f 87 9d 00 00 00    	ja     c0014170 <ipaddr_aton+0x2e8>
c00140d3:	8b 04 85 30 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf3d0]
c00140da:	ff e0                	jmp    eax
c00140dc:	b8 00 00 00 00       	mov    eax,0x0
c00140e1:	e9 ce 00 00 00       	jmp    c00141b4 <ipaddr_aton+0x32c>
c00140e6:	66 90                	xchg   ax,ax
c00140e8:	81 7c 24 1c ff ff ff 00 	cmp    DWORD PTR [esp+0x1c],0xffffff
c00140f0:	76 0a                	jbe    c00140fc <ipaddr_aton+0x274>
c00140f2:	b8 00 00 00 00       	mov    eax,0x0
c00140f7:	e9 b8 00 00 00       	jmp    c00141b4 <ipaddr_aton+0x32c>
c00140fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014100:	c1 e0 18             	shl    eax,0x18
c0014103:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c0014107:	e9 80 00 00 00       	jmp    c001418c <ipaddr_aton+0x304>
c001410c:	81 7c 24 1c ff ff 00 00 	cmp    DWORD PTR [esp+0x1c],0xffff
c0014114:	76 0a                	jbe    c0014120 <ipaddr_aton+0x298>
c0014116:	b8 00 00 00 00       	mov    eax,0x0
c001411b:	e9 94 00 00 00       	jmp    c00141b4 <ipaddr_aton+0x32c>
c0014120:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014124:	c1 e0 18             	shl    eax,0x18
c0014127:	89 c2                	mov    edx,eax
c0014129:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001412d:	c1 e0 10             	shl    eax,0x10
c0014130:	09 d0                	or     eax,edx
c0014132:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c0014136:	eb 54                	jmp    c001418c <ipaddr_aton+0x304>
c0014138:	81 7c 24 1c ff 00 00 00 	cmp    DWORD PTR [esp+0x1c],0xff
c0014140:	76 0a                	jbe    c001414c <ipaddr_aton+0x2c4>
c0014142:	b8 00 00 00 00       	mov    eax,0x0
c0014147:	eb 6b                	jmp    c00141b4 <ipaddr_aton+0x32c>
c0014149:	8d 76 00             	lea    esi,[esi+0x0]
c001414c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014150:	c1 e0 18             	shl    eax,0x18
c0014153:	89 c2                	mov    edx,eax
c0014155:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014159:	c1 e0 10             	shl    eax,0x10
c001415c:	09 c2                	or     edx,eax
c001415e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014162:	c1 e0 08             	shl    eax,0x8
c0014165:	09 d0                	or     eax,edx
c0014167:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c001416b:	eb 1f                	jmp    c001418c <ipaddr_aton+0x304>
c001416d:	8d 76 00             	lea    esi,[esi+0x0]
c0014170:	83 ec 08             	sub    esp,0x8
c0014173:	68 25 0c 03 c0       	push   0xc0030c25
c0014178:	68 46 f9 02 c0       	push   0xc002f946
c001417d:	e8 5a b9 00 00       	call   c001fadc <CPrintf>
c0014182:	83 c4 10             	add    esp,0x10
c0014185:	eb 05                	jmp    c001418c <ipaddr_aton+0x304>
c0014187:	90                   	nop
c0014188:	90                   	nop
c0014189:	8d 76 00             	lea    esi,[esi+0x0]
c001418c:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0014191:	74 19                	je     c00141ac <ipaddr_aton+0x324>
c0014193:	83 ec 0c             	sub    esp,0xc
c0014196:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001419a:	e8 6d ca fe ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001419f:	83 c4 10             	add    esp,0x10
c00141a2:	89 c2                	mov    edx,eax
c00141a4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00141a8:	89 10                	mov    DWORD PTR [eax],edx
c00141aa:	66 90                	xchg   ax,ax
c00141ac:	b8 01 00 00 00       	mov    eax,0x1
c00141b1:	8d 76 00             	lea    esi,[esi+0x0]
c00141b4:	83 c4 2c             	add    esp,0x2c
c00141b7:	c3                   	ret    

c00141b8 <ipaddr_addr>:
c00141b8:	83 ec 1c             	sub    esp,0x1c
c00141bb:	83 ec 08             	sub    esp,0x8
c00141be:	8d 44 24 14          	lea    eax,[esp+0x14]
c00141c2:	50                   	push   eax
c00141c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00141c7:	e8 bc fc ff ff       	call   c0013e88 <ipaddr_aton>
c00141cc:	83 c4 10             	add    esp,0x10
c00141cf:	85 c0                	test   eax,eax
c00141d1:	74 09                	je     c00141dc <ipaddr_addr+0x24>
c00141d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00141d7:	eb 0b                	jmp    c00141e4 <ipaddr_addr+0x2c>
c00141d9:	8d 76 00             	lea    esi,[esi+0x0]
c00141dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00141e1:	8d 76 00             	lea    esi,[esi+0x0]
c00141e4:	83 c4 1c             	add    esp,0x1c
c00141e7:	c3                   	ret    

c00141e8 <ipaddr_ntoa_r>:
c00141e8:	83 ec 20             	sub    esp,0x20
c00141eb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00141f3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00141f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00141f9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00141fd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014201:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014205:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001420d:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0014212:	e9 f9 00 00 00       	jmp    c0014310 <ipaddr_ntoa_r+0x128>
c0014217:	90                   	nop
c0014218:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c001421d:	8d 76 00             	lea    esi,[esi+0x0]
c0014220:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014224:	8a 00                	mov    al,BYTE PTR [eax]
c0014226:	0f b6 c8             	movzx  ecx,al
c0014229:	ba cd cc cc cc       	mov    edx,0xcccccccd
c001422e:	89 c8                	mov    eax,ecx
c0014230:	f7 e2                	mul    edx
c0014232:	c1 ea 03             	shr    edx,0x3
c0014235:	89 d0                	mov    eax,edx
c0014237:	c1 e0 02             	shl    eax,0x2
c001423a:	01 d0                	add    eax,edx
c001423c:	01 c0                	add    eax,eax
c001423e:	29 c1                	sub    ecx,eax
c0014240:	89 c8                	mov    eax,ecx
c0014242:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014246:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001424a:	8a 00                	mov    al,BYTE PTR [eax]
c001424c:	0f b6 c0             	movzx  eax,al
c001424f:	ba cd cc cc cc       	mov    edx,0xcccccccd
c0014254:	f7 e2                	mul    edx
c0014256:	89 d0                	mov    eax,edx
c0014258:	c1 e8 03             	shr    eax,0x3
c001425b:	88 c2                	mov    dl,al
c001425d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014261:	88 10                	mov    BYTE PTR [eax],dl
c0014263:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014267:	83 c0 30             	add    eax,0x30
c001426a:	88 c1                	mov    cl,al
c001426c:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c0014270:	8d 50 01             	lea    edx,[eax+0x1]
c0014273:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c0014277:	0f b6 c0             	movzx  eax,al
c001427a:	88 ca                	mov    dl,cl
c001427c:	88 54 04 05          	mov    BYTE PTR [esp+eax*1+0x5],dl
c0014280:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014284:	8a 00                	mov    al,BYTE PTR [eax]
c0014286:	0f b6 c0             	movzx  eax,al
c0014289:	85 c0                	test   eax,eax
c001428b:	75 93                	jne    c0014220 <ipaddr_ntoa_r+0x38>
c001428d:	eb 35                	jmp    c00142c4 <ipaddr_ntoa_r+0xdc>
c001428f:	90                   	nop
c0014290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014294:	8d 50 01             	lea    edx,[eax+0x1]
c0014297:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001429b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001429f:	7f 0b                	jg     c00142ac <ipaddr_ntoa_r+0xc4>
c00142a1:	b8 00 00 00 00       	mov    eax,0x0
c00142a6:	e9 85 00 00 00       	jmp    c0014330 <ipaddr_ntoa_r+0x148>
c00142ab:	90                   	nop
c00142ac:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c00142b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00142b5:	8d 48 01             	lea    ecx,[eax+0x1]
c00142b8:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00142bc:	8a 54 14 05          	mov    dl,BYTE PTR [esp+edx*1+0x5]
c00142c0:	88 10                	mov    BYTE PTR [eax],dl
c00142c2:	66 90                	xchg   ax,ax
c00142c4:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c00142c8:	8d 50 ff             	lea    edx,[eax-0x1]
c00142cb:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c00142cf:	0f b6 c0             	movzx  eax,al
c00142d2:	85 c0                	test   eax,eax
c00142d4:	75 ba                	jne    c0014290 <ipaddr_ntoa_r+0xa8>
c00142d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142da:	8d 50 01             	lea    edx,[eax+0x1]
c00142dd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142e1:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00142e5:	7f 09                	jg     c00142f0 <ipaddr_ntoa_r+0x108>
c00142e7:	b8 00 00 00 00       	mov    eax,0x0
c00142ec:	eb 42                	jmp    c0014330 <ipaddr_ntoa_r+0x148>
c00142ee:	66 90                	xchg   ax,ax
c00142f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00142f4:	8d 50 01             	lea    edx,[eax+0x1]
c00142f7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00142fb:	c6 00 2e             	mov    BYTE PTR [eax],0x2e
c00142fe:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0014303:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0014307:	83 c0 01             	add    eax,0x1
c001430a:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001430e:	66 90                	xchg   ax,ax
c0014310:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0014315:	83 f8 03             	cmp    eax,0x3
c0014318:	0f 86 fa fe ff ff    	jbe    c0014218 <ipaddr_ntoa_r+0x30>
c001431e:	83 6c 24 1c 01       	sub    DWORD PTR [esp+0x1c],0x1
c0014323:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014327:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001432a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001432e:	66 90                	xchg   ax,ax
c0014330:	83 c4 20             	add    esp,0x20
c0014333:	c3                   	ret    

c0014334 <ipaddr_ntoa>:
c0014334:	6a 10                	push   0x10
c0014336:	68 a4 a9 03 c0       	push   0xc003a9a4
c001433b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001433f:	e8 a4 fe ff ff       	call   c00141e8 <ipaddr_ntoa_r>
c0014344:	83 c4 0c             	add    esp,0xc
c0014347:	c3                   	ret    

c0014348 <ip_reass_dequeue_datagram>:
c0014348:	83 ec 0c             	sub    esp,0xc
c001434b:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014350:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0014354:	75 0e                	jne    c0014364 <ip_reass_dequeue_datagram+0x1c>
c0014356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001435a:	8b 00                	mov    eax,DWORD PTR [eax]
c001435c:	a3 b8 a9 03 c0       	mov    ds:0xc003a9b8,eax
c0014361:	eb 29                	jmp    c001438c <ip_reass_dequeue_datagram+0x44>
c0014363:	90                   	nop
c0014364:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014369:	75 15                	jne    c0014380 <ip_reass_dequeue_datagram+0x38>
c001436b:	83 ec 08             	sub    esp,0x8
c001436e:	68 4c 0c 03 c0       	push   0xc0030c4c
c0014373:	68 46 f9 02 c0       	push   0xc002f946
c0014378:	e8 5f b7 00 00       	call   c001fadc <CPrintf>
c001437d:	83 c4 10             	add    esp,0x10
c0014380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014384:	8b 10                	mov    edx,DWORD PTR [eax]
c0014386:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001438a:	89 10                	mov    DWORD PTR [eax],edx
c001438c:	83 ec 08             	sub    esp,0x8
c001438f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014393:	6a 05                	push   0x5
c0014395:	e8 52 36 ff ff       	call   c00079ec <memp_free>
c001439a:	83 c4 10             	add    esp,0x10
c001439d:	90                   	nop
c001439e:	83 c4 0c             	add    esp,0xc
c00143a1:	c3                   	ret    
c00143a2:	66 90                	xchg   ax,ax

c00143a4 <ip_reass_free_complete_datagram>:
c00143a4:	83 ec 2c             	sub    esp,0x2c
c00143a7:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c00143ae:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00143b2:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00143b6:	75 18                	jne    c00143d0 <ip_reass_free_complete_datagram+0x2c>
c00143b8:	83 ec 08             	sub    esp,0x8
c00143bb:	68 65 0c 03 c0       	push   0xc0030c65
c00143c0:	68 46 f9 02 c0       	push   0xc002f946
c00143c5:	e8 12 b7 00 00       	call   c001fadc <CPrintf>
c00143ca:	83 c4 10             	add    esp,0x10
c00143cd:	8d 76 00             	lea    esi,[esi+0x0]
c00143d0:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00143d5:	74 21                	je     c00143f8 <ip_reass_free_complete_datagram+0x54>
c00143d7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00143db:	8b 00                	mov    eax,DWORD PTR [eax]
c00143dd:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c00143e1:	74 15                	je     c00143f8 <ip_reass_free_complete_datagram+0x54>
c00143e3:	83 ec 08             	sub    esp,0x8
c00143e6:	68 71 0c 03 c0       	push   0xc0030c71
c00143eb:	68 46 f9 02 c0       	push   0xc002f946
c00143f0:	e8 e7 b6 00 00       	call   c001fadc <CPrintf>
c00143f5:	83 c4 10             	add    esp,0x10
c00143f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00143fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00143ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014402:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014406:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001440a:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001440e:	0f b7 c0             	movzx  eax,ax
c0014411:	85 c0                	test   eax,eax
c0014413:	0f 85 a3 00 00 00    	jne    c00144bc <ip_reass_free_complete_datagram+0x118>
c0014419:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001441d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014420:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014424:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014428:	8b 10                	mov    edx,DWORD PTR [eax]
c001442a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001442e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014431:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014435:	8d 50 08             	lea    edx,[eax+0x8]
c0014438:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001443c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001443f:	83 ec 04             	sub    esp,0x4
c0014442:	6a 14                	push   0x14
c0014444:	52                   	push   edx
c0014445:	50                   	push   eax
c0014446:	e8 2f bf fe ff       	call   c000037a <memcpy>
c001444b:	83 c4 10             	add    esp,0x10
c001444e:	83 ec 08             	sub    esp,0x8
c0014451:	6a 01                	push   0x1
c0014453:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014457:	e8 4c eb ff ff       	call   c0012fa8 <icmp_time_exceeded>
c001445c:	83 c4 10             	add    esp,0x10
c001445f:	83 ec 0c             	sub    esp,0xc
c0014462:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014466:	e8 11 46 ff ff       	call   c0008a7c <pbuf_clen>
c001446b:	83 c4 10             	add    esp,0x10
c001446e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0014472:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0014477:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c001447c:	01 d0                	add    eax,edx
c001447e:	3d ff ff 00 00       	cmp    eax,0xffff
c0014483:	7e 17                	jle    c001449c <ip_reass_free_complete_datagram+0xf8>
c0014485:	83 ec 08             	sub    esp,0x8
c0014488:	68 83 0c 03 c0       	push   0xc0030c83
c001448d:	68 46 f9 02 c0       	push   0xc002f946
c0014492:	e8 45 b6 00 00       	call   c001fadc <CPrintf>
c0014497:	83 c4 10             	add    esp,0x10
c001449a:	66 90                	xchg   ax,ax
c001449c:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00144a1:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c00144a6:	01 d0                	add    eax,edx
c00144a8:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00144ad:	83 ec 0c             	sub    esp,0xc
c00144b0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00144b4:	e8 ef 3d ff ff       	call   c00082a8 <pbuf_free>
c00144b9:	83 c4 10             	add    esp,0x10
c00144bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00144c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00144c7:	eb 7b                	jmp    c0014544 <ip_reass_free_complete_datagram+0x1a0>
c00144c9:	8d 76 00             	lea    esi,[esi+0x0]
c00144cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00144d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00144d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00144d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00144db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00144df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00144e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00144e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00144e9:	83 ec 0c             	sub    esp,0xc
c00144ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00144f0:	e8 87 45 ff ff       	call   c0008a7c <pbuf_clen>
c00144f5:	83 c4 10             	add    esp,0x10
c00144f8:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00144fc:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0014501:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014506:	01 d0                	add    eax,edx
c0014508:	3d ff ff 00 00       	cmp    eax,0xffff
c001450d:	7e 15                	jle    c0014524 <ip_reass_free_complete_datagram+0x180>
c001450f:	83 ec 08             	sub    esp,0x8
c0014512:	68 83 0c 03 c0       	push   0xc0030c83
c0014517:	68 46 f9 02 c0       	push   0xc002f946
c001451c:	e8 bb b5 00 00       	call   c001fadc <CPrintf>
c0014521:	83 c4 10             	add    esp,0x10
c0014524:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014529:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c001452e:	01 d0                	add    eax,edx
c0014530:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0014535:	83 ec 0c             	sub    esp,0xc
c0014538:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001453c:	e8 67 3d ff ff       	call   c00082a8 <pbuf_free>
c0014541:	83 c4 10             	add    esp,0x10
c0014544:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014549:	75 81                	jne    c00144cc <ip_reass_free_complete_datagram+0x128>
c001454b:	83 ec 08             	sub    esp,0x8
c001454e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014552:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014556:	e8 ed fd ff ff       	call   c0014348 <ip_reass_dequeue_datagram>
c001455b:	83 c4 10             	add    esp,0x10
c001455e:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014564:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0014569:	0f b7 c0             	movzx  eax,ax
c001456c:	39 c2                	cmp    edx,eax
c001456e:	76 18                	jbe    c0014588 <ip_reass_free_complete_datagram+0x1e4>
c0014570:	83 ec 08             	sub    esp,0x8
c0014573:	68 a0 0c 03 c0       	push   0xc0030ca0
c0014578:	68 46 f9 02 c0       	push   0xc002f946
c001457d:	e8 5a b5 00 00       	call   c001fadc <CPrintf>
c0014582:	83 c4 10             	add    esp,0x10
c0014585:	8d 76 00             	lea    esi,[esi+0x0]
c0014588:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c001458f:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0014594:	89 d1                	mov    ecx,edx
c0014596:	29 c1                	sub    ecx,eax
c0014598:	89 c8                	mov    eax,ecx
c001459a:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c00145a0:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00145a5:	83 c4 2c             	add    esp,0x2c
c00145a8:	c3                   	ret    
c00145a9:	8d 76 00             	lea    esi,[esi+0x0]

c00145ac <ip_reass_tmr>:
c00145ac:	83 ec 1c             	sub    esp,0x1c
c00145af:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00145b7:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c00145bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00145c0:	eb 62                	jmp    c0014624 <ip_reass_tmr+0x78>
c00145c2:	66 90                	xchg   ax,ax
c00145c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00145c8:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c00145cb:	0f b6 c0             	movzx  eax,al
c00145ce:	85 c0                	test   eax,eax
c00145d0:	74 2a                	je     c00145fc <ip_reass_tmr+0x50>
c00145d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00145d6:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c00145d9:	83 e8 01             	sub    eax,0x1
c00145dc:	88 c2                	mov    dl,al
c00145de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00145e2:	88 50 1f             	mov    BYTE PTR [eax+0x1f],dl
c00145e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00145e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00145ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00145f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00145f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00145f7:	eb 2b                	jmp    c0014624 <ip_reass_tmr+0x78>
c00145f9:	8d 76 00             	lea    esi,[esi+0x0]
c00145fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014600:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014604:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014608:	8b 00                	mov    eax,DWORD PTR [eax]
c001460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001460e:	83 ec 08             	sub    esp,0x8
c0014611:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014615:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014619:	e8 86 fd ff ff       	call   c00143a4 <ip_reass_free_complete_datagram>
c001461e:	83 c4 10             	add    esp,0x10
c0014621:	8d 76 00             	lea    esi,[esi+0x0]
c0014624:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014629:	75 99                	jne    c00145c4 <ip_reass_tmr+0x18>
c001462b:	90                   	nop
c001462c:	83 c4 1c             	add    esp,0x1c
c001462f:	c3                   	ret    

c0014630 <ip_reass_remove_oldest_datagram>:
c0014630:	83 ec 2c             	sub    esp,0x2c
c0014633:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001463b:	90                   	nop
c001463c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014644:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001464c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014654:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014659:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001465d:	e9 9a 00 00 00       	jmp    c00146fc <ip_reass_remove_oldest_datagram+0xcc>
c0014662:	66 90                	xchg   ax,ax
c0014664:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014668:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c001466b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001466f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014672:	39 c2                	cmp    edx,eax
c0014674:	75 2e                	jne    c00146a4 <ip_reass_remove_oldest_datagram+0x74>
c0014676:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001467a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001467d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014681:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014684:	39 c2                	cmp    edx,eax
c0014686:	75 1c                	jne    c00146a4 <ip_reass_remove_oldest_datagram+0x74>
c0014688:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001468c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001468f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014693:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014697:	0f b7 d2             	movzx  edx,dx
c001469a:	0f b7 c0             	movzx  eax,ax
c001469d:	39 c2                	cmp    edx,eax
c001469f:	74 3b                	je     c00146dc <ip_reass_remove_oldest_datagram+0xac>
c00146a1:	8d 76 00             	lea    esi,[esi+0x0]
c00146a4:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00146a9:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00146ae:	75 0c                	jne    c00146bc <ip_reass_remove_oldest_datagram+0x8c>
c00146b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00146b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00146b8:	eb 22                	jmp    c00146dc <ip_reass_remove_oldest_datagram+0xac>
c00146ba:	66 90                	xchg   ax,ax
c00146bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00146c0:	8a 50 1f             	mov    dl,BYTE PTR [eax+0x1f]
c00146c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00146c7:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c00146ca:	0f b6 d2             	movzx  edx,dl
c00146cd:	0f b6 c0             	movzx  eax,al
c00146d0:	39 c2                	cmp    edx,eax
c00146d2:	77 08                	ja     c00146dc <ip_reass_remove_oldest_datagram+0xac>
c00146d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00146d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00146dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00146e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00146e2:	85 c0                	test   eax,eax
c00146e4:	74 0a                	je     c00146f0 <ip_reass_remove_oldest_datagram+0xc0>
c00146e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00146ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00146ee:	66 90                	xchg   ax,ax
c00146f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00146f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00146f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00146fa:	66 90                	xchg   ax,ax
c00146fc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0014701:	0f 85 5d ff ff ff    	jne    c0014664 <ip_reass_remove_oldest_datagram+0x34>
c0014707:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001470c:	74 22                	je     c0014730 <ip_reass_remove_oldest_datagram+0x100>
c001470e:	83 ec 08             	sub    esp,0x8
c0014711:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014715:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014719:	e8 86 fc ff ff       	call   c00143a4 <ip_reass_free_complete_datagram>
c001471e:	83 c4 10             	add    esp,0x10
c0014721:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014725:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014729:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c001472d:	8d 76 00             	lea    esi,[esi+0x0]
c0014730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014734:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0014738:	7d 0e                	jge    c0014748 <ip_reass_remove_oldest_datagram+0x118>
c001473a:	83 7c 24 0c 01       	cmp    DWORD PTR [esp+0xc],0x1
c001473f:	0f 8f f7 fe ff ff    	jg     c001463c <ip_reass_remove_oldest_datagram+0xc>
c0014745:	8d 76 00             	lea    esi,[esi+0x0]
c0014748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001474c:	83 c4 2c             	add    esp,0x2c
c001474f:	c3                   	ret    

c0014750 <ip_reass_enqueue_new_datagram>:
c0014750:	83 ec 1c             	sub    esp,0x1c
c0014753:	83 ec 0c             	sub    esp,0xc
c0014756:	6a 05                	push   0x5
c0014758:	e8 63 31 ff ff       	call   c00078c0 <memp_malloc>
c001475d:	83 c4 10             	add    esp,0x10
c0014760:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014764:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014769:	75 4d                	jne    c00147b8 <ip_reass_enqueue_new_datagram+0x68>
c001476b:	83 ec 08             	sub    esp,0x8
c001476e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014772:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014776:	e8 b5 fe ff ff       	call   c0014630 <ip_reass_remove_oldest_datagram>
c001477b:	83 c4 10             	add    esp,0x10
c001477e:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0014782:	7f 14                	jg     c0014798 <ip_reass_enqueue_new_datagram+0x48>
c0014784:	83 ec 0c             	sub    esp,0xc
c0014787:	6a 05                	push   0x5
c0014789:	e8 32 31 ff ff       	call   c00078c0 <memp_malloc>
c001478e:	83 c4 10             	add    esp,0x10
c0014791:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014795:	8d 76 00             	lea    esi,[esi+0x0]
c0014798:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001479d:	75 19                	jne    c00147b8 <ip_reass_enqueue_new_datagram+0x68>
c001479f:	66 a1 5c 67 03 c0    	mov    ax,ds:0xc003675c
c00147a5:	83 c0 01             	add    eax,0x1
c00147a8:	66 a3 5c 67 03 c0    	mov    ds:0xc003675c,ax
c00147ae:	b8 00 00 00 00       	mov    eax,0x0
c00147b3:	eb 53                	jmp    c0014808 <ip_reass_enqueue_new_datagram+0xb8>
c00147b5:	8d 76 00             	lea    esi,[esi+0x0]
c00147b8:	83 ec 04             	sub    esp,0x4
c00147bb:	6a 20                	push   0x20
c00147bd:	6a 00                	push   0x0
c00147bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00147c3:	e8 28 bd fe ff       	call   c00004f0 <memset>
c00147c8:	83 c4 10             	add    esp,0x10
c00147cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00147cf:	c6 40 1f 03          	mov    BYTE PTR [eax+0x1f],0x3
c00147d3:	8b 15 b8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9b8
c00147d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00147dd:	89 10                	mov    DWORD PTR [eax],edx
c00147df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00147e3:	a3 b8 a9 03 c0       	mov    ds:0xc003a9b8,eax
c00147e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00147ec:	83 c0 08             	add    eax,0x8
c00147ef:	83 ec 04             	sub    esp,0x4
c00147f2:	6a 14                	push   0x14
c00147f4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00147f8:	50                   	push   eax
c00147f9:	e8 7c bb fe ff       	call   c000037a <memcpy>
c00147fe:	83 c4 10             	add    esp,0x10
c0014801:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014805:	8d 76 00             	lea    esi,[esi+0x0]
c0014808:	83 c4 1c             	add    esp,0x1c
c001480b:	c3                   	ret    

c001480c <ip_reass_chain_frag_into_datagram_and_validate>:
c001480c:	53                   	push   ebx
c001480d:	83 ec 28             	sub    esp,0x28
c0014810:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014818:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c0014820:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014824:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014827:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001482b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001482f:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0014833:	0f b7 c0             	movzx  eax,ax
c0014836:	83 ec 0c             	sub    esp,0xc
c0014839:	50                   	push   eax
c001483a:	e8 a9 c3 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001483f:	83 c4 10             	add    esp,0x10
c0014842:	89 c3                	mov    ebx,eax
c0014844:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014848:	66 8b 00             	mov    ax,WORD PTR [eax]
c001484b:	0f b7 c0             	movzx  eax,ax
c001484e:	83 ec 0c             	sub    esp,0xc
c0014851:	50                   	push   eax
c0014852:	e8 91 c3 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014857:	83 c4 10             	add    esp,0x10
c001485a:	0f b7 c0             	movzx  eax,ax
c001485d:	c1 e8 08             	shr    eax,0x8
c0014860:	83 e0 0f             	and    eax,0xf
c0014863:	c1 e0 02             	shl    eax,0x2
c0014866:	89 d9                	mov    ecx,ebx
c0014868:	29 c1                	sub    ecx,eax
c001486a:	89 c8                	mov    eax,ecx
c001486c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0014871:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014875:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014879:	0f b7 c0             	movzx  eax,ax
c001487c:	83 ec 0c             	sub    esp,0xc
c001487f:	50                   	push   eax
c0014880:	e8 63 c3 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014885:	83 c4 10             	add    esp,0x10
c0014888:	25 ff 1f 00 00       	and    eax,0x1fff
c001488d:	c1 e0 03             	shl    eax,0x3
c0014890:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0014895:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014899:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001489c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00148a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00148a4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00148aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00148ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00148b2:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00148b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00148ba:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00148bf:	01 d0                	add    eax,edx
c00148c1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00148c5:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00148c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00148cd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00148d0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00148d4:	e9 13 01 00 00       	jmp    c00149ec <ip_reass_chain_frag_into_datagram_and_validate+0x1e0>
c00148d9:	8d 76 00             	lea    esi,[esi+0x0]
c00148dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00148e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00148e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00148e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00148eb:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c00148ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00148f3:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00148f7:	0f b7 d2             	movzx  edx,dx
c00148fa:	0f b7 c0             	movzx  eax,ax
c00148fd:	39 c2                	cmp    edx,eax
c00148ff:	73 6f                	jae    c0014970 <ip_reass_chain_frag_into_datagram_and_validate+0x164>
c0014901:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014905:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014909:	89 10                	mov    DWORD PTR [eax],edx
c001490b:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014910:	74 4e                	je     c0014960 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
c0014912:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014916:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c001491a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001491e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014922:	0f b7 d2             	movzx  edx,dx
c0014925:	0f b7 c0             	movzx  eax,ax
c0014928:	39 c2                	cmp    edx,eax
c001492a:	0f 82 bc 02 00 00    	jb     c0014bec <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c0014930:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014934:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014938:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001493c:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014940:	0f b7 d2             	movzx  edx,dx
c0014943:	0f b7 c0             	movzx  eax,ax
c0014946:	39 c2                	cmp    edx,eax
c0014948:	0f 87 9e 02 00 00    	ja     c0014bec <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c001494e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014952:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014956:	89 10                	mov    DWORD PTR [eax],edx
c0014958:	e9 9b 00 00 00       	jmp    c00149f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c001495d:	8d 76 00             	lea    esi,[esi+0x0]
c0014960:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014964:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014968:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001496b:	e9 88 00 00 00       	jmp    c00149f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c0014970:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014974:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014978:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001497c:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014980:	0f b7 d2             	movzx  edx,dx
c0014983:	0f b7 c0             	movzx  eax,ax
c0014986:	39 c2                	cmp    edx,eax
c0014988:	0f 84 62 02 00 00    	je     c0014bf0 <ip_reass_chain_frag_into_datagram_and_validate+0x3e4>
c001498e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014992:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014996:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001499a:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c001499e:	0f b7 d2             	movzx  edx,dx
c00149a1:	0f b7 c0             	movzx  eax,ax
c00149a4:	39 c2                	cmp    edx,eax
c00149a6:	0f 82 48 02 00 00    	jb     c0014bf4 <ip_reass_chain_frag_into_datagram_and_validate+0x3e8>
c00149ac:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00149b1:	74 25                	je     c00149d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c00149b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00149b7:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00149bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00149bf:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00149c3:	0f b7 d2             	movzx  edx,dx
c00149c6:	0f b7 c0             	movzx  eax,ax
c00149c9:	39 c2                	cmp    edx,eax
c00149cb:	74 0b                	je     c00149d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c00149cd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00149d5:	8d 76 00             	lea    esi,[esi+0x0]
c00149d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00149dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00149de:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00149e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00149e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00149ea:	66 90                	xchg   ax,ax
c00149ec:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00149f1:	0f 85 e5 fe ff ff    	jne    c00148dc <ip_reass_chain_frag_into_datagram_and_validate+0xd0>
c00149f7:	90                   	nop
c00149f8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00149fd:	0f 85 95 00 00 00    	jne    c0014a98 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014a03:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014a08:	74 62                	je     c0014a6c <ip_reass_chain_frag_into_datagram_and_validate+0x260>
c0014a0a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a0e:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014a12:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a16:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014a1a:	0f b7 d2             	movzx  edx,dx
c0014a1d:	0f b7 c0             	movzx  eax,ax
c0014a20:	39 c2                	cmp    edx,eax
c0014a22:	76 18                	jbe    c0014a3c <ip_reass_chain_frag_into_datagram_and_validate+0x230>
c0014a24:	83 ec 08             	sub    esp,0x8
c0014a27:	68 bb 0c 03 c0       	push   0xc0030cbb
c0014a2c:	68 46 f9 02 c0       	push   0xc002f946
c0014a31:	e8 a6 b0 00 00       	call   c001fadc <CPrintf>
c0014a36:	83 c4 10             	add    esp,0x10
c0014a39:	8d 76 00             	lea    esi,[esi+0x0]
c0014a3c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a40:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014a44:	89 10                	mov    DWORD PTR [eax],edx
c0014a46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a4a:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014a4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a52:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014a56:	0f b7 d2             	movzx  edx,dx
c0014a59:	0f b7 c0             	movzx  eax,ax
c0014a5c:	39 c2                	cmp    edx,eax
c0014a5e:	74 38                	je     c0014a98 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014a60:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014a68:	eb 2e                	jmp    c0014a98 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014a6a:	66 90                	xchg   ax,ax
c0014a6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014a73:	85 c0                	test   eax,eax
c0014a75:	74 15                	je     c0014a8c <ip_reass_chain_frag_into_datagram_and_validate+0x280>
c0014a77:	83 ec 08             	sub    esp,0x8
c0014a7a:	68 fc 0c 03 c0       	push   0xc0030cfc
c0014a7f:	68 46 f9 02 c0       	push   0xc002f946
c0014a84:	e8 53 b0 00 00       	call   c001fadc <CPrintf>
c0014a89:	83 c4 10             	add    esp,0x10
c0014a8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a90:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014a94:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014a97:	90                   	nop
c0014a98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a9c:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c0014a9f:	0f b6 c0             	movzx  eax,al
c0014aa2:	83 e0 01             	and    eax,0x1
c0014aa5:	0f 84 39 01 00 00    	je     c0014be4 <ip_reass_chain_frag_into_datagram_and_validate+0x3d8>
c0014aab:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014ab0:	0f 84 26 01 00 00    	je     c0014bdc <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014ab6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014aba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014abd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014ac0:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014ac4:	0f b7 c0             	movzx  eax,ax
c0014ac7:	85 c0                	test   eax,eax
c0014ac9:	74 0d                	je     c0014ad8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>
c0014acb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014ad3:	e9 04 01 00 00       	jmp    c0014bdc <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014ad8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014adc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014ae0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014ae4:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ae6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014aea:	eb 44                	jmp    c0014b30 <ip_reass_chain_frag_into_datagram_and_validate+0x324>
c0014aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014af0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014af3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014af7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014afb:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014aff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b03:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014b07:	0f b7 d2             	movzx  edx,dx
c0014b0a:	0f b7 c0             	movzx  eax,ax
c0014b0d:	39 c2                	cmp    edx,eax
c0014b0f:	74 0b                	je     c0014b1c <ip_reass_chain_frag_into_datagram_and_validate+0x310>
c0014b11:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014b19:	eb 1d                	jmp    c0014b38 <ip_reass_chain_frag_into_datagram_and_validate+0x32c>
c0014b1b:	90                   	nop
c0014b1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b20:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014b24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b28:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b2a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b2e:	66 90                	xchg   ax,ax
c0014b30:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014b35:	75 b5                	jne    c0014aec <ip_reass_chain_frag_into_datagram_and_validate+0x2e0>
c0014b37:	90                   	nop
c0014b38:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014b3d:	0f 84 99 00 00 00    	je     c0014bdc <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014b43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b47:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b4a:	85 c0                	test   eax,eax
c0014b4c:	75 16                	jne    c0014b64 <ip_reass_chain_frag_into_datagram_and_validate+0x358>
c0014b4e:	83 ec 08             	sub    esp,0x8
c0014b51:	68 d9 0c 03 c0       	push   0xc0030cd9
c0014b56:	68 46 f9 02 c0       	push   0xc002f946
c0014b5b:	e8 7c af 00 00       	call   c001fadc <CPrintf>
c0014b60:	83 c4 10             	add    esp,0x10
c0014b63:	90                   	nop
c0014b64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b6b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b6e:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0014b72:	75 18                	jne    c0014b8c <ip_reass_chain_frag_into_datagram_and_validate+0x380>
c0014b74:	83 ec 08             	sub    esp,0x8
c0014b77:	68 d9 0c 03 c0       	push   0xc0030cd9
c0014b7c:	68 46 f9 02 c0       	push   0xc002f946
c0014b81:	e8 56 af 00 00       	call   c001fadc <CPrintf>
c0014b86:	83 c4 10             	add    esp,0x10
c0014b89:	8d 76 00             	lea    esi,[esi+0x0]
c0014b8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b90:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b92:	85 c0                	test   eax,eax
c0014b94:	74 16                	je     c0014bac <ip_reass_chain_frag_into_datagram_and_validate+0x3a0>
c0014b96:	83 ec 08             	sub    esp,0x8
c0014b99:	68 34 0d 03 c0       	push   0xc0030d34
c0014b9e:	68 46 f9 02 c0       	push   0xc002f946
c0014ba3:	e8 34 af 00 00       	call   c001fadc <CPrintf>
c0014ba8:	83 c4 10             	add    esp,0x10
c0014bab:	90                   	nop
c0014bac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bb0:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014bb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bb8:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014bbb:	0f b7 d2             	movzx  edx,dx
c0014bbe:	0f b7 c0             	movzx  eax,ax
c0014bc1:	39 c2                	cmp    edx,eax
c0014bc3:	74 17                	je     c0014bdc <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014bc5:	83 ec 08             	sub    esp,0x8
c0014bc8:	68 58 0d 03 c0       	push   0xc0030d58
c0014bcd:	68 46 f9 02 c0       	push   0xc002f946
c0014bd2:	e8 05 af 00 00       	call   c001fadc <CPrintf>
c0014bd7:	83 c4 10             	add    esp,0x10
c0014bda:	66 90                	xchg   ax,ax
c0014bdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014be0:	eb 52                	jmp    c0014c34 <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014be2:	66 90                	xchg   ax,ax
c0014be4:	b8 00 00 00 00       	mov    eax,0x0
c0014be9:	eb 49                	jmp    c0014c34 <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014beb:	90                   	nop
c0014bec:	90                   	nop
c0014bed:	eb 09                	jmp    c0014bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014bef:	90                   	nop
c0014bf0:	90                   	nop
c0014bf1:	eb 05                	jmp    c0014bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014bf3:	90                   	nop
c0014bf4:	90                   	nop
c0014bf5:	8d 76 00             	lea    esi,[esi+0x0]
c0014bf8:	83 ec 0c             	sub    esp,0xc
c0014bfb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014bff:	e8 78 3e ff ff       	call   c0008a7c <pbuf_clen>
c0014c04:	83 c4 10             	add    esp,0x10
c0014c07:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c0014c0e:	0f b6 c0             	movzx  eax,al
c0014c11:	89 d3                	mov    ebx,edx
c0014c13:	29 c3                	sub    ebx,eax
c0014c15:	89 d8                	mov    eax,ebx
c0014c17:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014c1d:	83 ec 0c             	sub    esp,0xc
c0014c20:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014c24:	e8 7f 36 ff ff       	call   c00082a8 <pbuf_free>
c0014c29:	83 c4 10             	add    esp,0x10
c0014c2c:	b8 00 00 00 00       	mov    eax,0x0
c0014c31:	8d 76 00             	lea    esi,[esi+0x0]
c0014c34:	83 c4 28             	add    esp,0x28
c0014c37:	5b                   	pop    ebx
c0014c38:	c3                   	ret    
c0014c39:	8d 76 00             	lea    esi,[esi+0x0]

c0014c3c <ip_reass>:
c0014c3c:	53                   	push   ebx
c0014c3d:	83 ec 28             	sub    esp,0x28
c0014c40:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014c48:	66 a1 52 67 03 c0    	mov    ax,ds:0xc0036752
c0014c4e:	83 c0 01             	add    eax,0x1
c0014c51:	66 a3 52 67 03 c0    	mov    ds:0xc0036752,ax
c0014c57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014c5e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014c62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c66:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014c69:	0f b7 c0             	movzx  eax,ax
c0014c6c:	83 ec 0c             	sub    esp,0xc
c0014c6f:	50                   	push   eax
c0014c70:	e8 73 bf fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014c75:	83 c4 10             	add    esp,0x10
c0014c78:	0f b7 c0             	movzx  eax,ax
c0014c7b:	c1 e8 08             	shr    eax,0x8
c0014c7e:	0f b7 c0             	movzx  eax,ax
c0014c81:	83 e0 0f             	and    eax,0xf
c0014c84:	c1 e0 02             	shl    eax,0x2
c0014c87:	83 f8 14             	cmp    eax,0x14
c0014c8a:	74 14                	je     c0014ca0 <ip_reass+0x64>
c0014c8c:	66 a1 64 67 03 c0    	mov    ax,ds:0xc0036764
c0014c92:	83 c0 01             	add    eax,0x1
c0014c95:	66 a3 64 67 03 c0    	mov    ds:0xc0036764,ax
c0014c9b:	e9 68 03 00 00       	jmp    c0015008 <ip_reass+0x3cc>
c0014ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ca4:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014ca8:	0f b7 c0             	movzx  eax,ax
c0014cab:	83 ec 0c             	sub    esp,0xc
c0014cae:	50                   	push   eax
c0014caf:	e8 34 bf fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014cb4:	83 c4 10             	add    esp,0x10
c0014cb7:	25 ff 1f 00 00       	and    eax,0x1fff
c0014cbc:	c1 e0 03             	shl    eax,0x3
c0014cbf:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0014cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014cc8:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0014ccc:	0f b7 c0             	movzx  eax,ax
c0014ccf:	83 ec 0c             	sub    esp,0xc
c0014cd2:	50                   	push   eax
c0014cd3:	e8 10 bf fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014cd8:	83 c4 10             	add    esp,0x10
c0014cdb:	89 c3                	mov    ebx,eax
c0014cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ce1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014ce4:	0f b7 c0             	movzx  eax,ax
c0014ce7:	83 ec 0c             	sub    esp,0xc
c0014cea:	50                   	push   eax
c0014ceb:	e8 f8 be fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014cf0:	83 c4 10             	add    esp,0x10
c0014cf3:	0f b7 c0             	movzx  eax,ax
c0014cf6:	c1 e8 08             	shr    eax,0x8
c0014cf9:	83 e0 0f             	and    eax,0xf
c0014cfc:	c1 e0 02             	shl    eax,0x2
c0014cff:	89 d9                	mov    ecx,ebx
c0014d01:	29 c1                	sub    ecx,eax
c0014d03:	89 c8                	mov    eax,ecx
c0014d05:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0014d0a:	83 ec 0c             	sub    esp,0xc
c0014d0d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014d11:	e8 66 3d ff ff       	call   c0008a7c <pbuf_clen>
c0014d16:	83 c4 10             	add    esp,0x10
c0014d19:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0014d1d:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014d23:	0f b7 d0             	movzx  edx,ax
c0014d26:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014d2b:	01 d0                	add    eax,edx
c0014d2d:	83 f8 0a             	cmp    eax,0xa
c0014d30:	7e 42                	jle    c0014d74 <ip_reass+0x138>
c0014d32:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014d37:	83 ec 08             	sub    esp,0x8
c0014d3a:	50                   	push   eax
c0014d3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d3f:	e8 ec f8 ff ff       	call   c0014630 <ip_reass_remove_oldest_datagram>
c0014d44:	83 c4 10             	add    esp,0x10
c0014d47:	85 c0                	test   eax,eax
c0014d49:	74 15                	je     c0014d60 <ip_reass+0x124>
c0014d4b:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014d51:	0f b7 d0             	movzx  edx,ax
c0014d54:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014d59:	01 d0                	add    eax,edx
c0014d5b:	83 f8 0a             	cmp    eax,0xa
c0014d5e:	7e 14                	jle    c0014d74 <ip_reass+0x138>
c0014d60:	66 a1 5c 67 03 c0    	mov    ax,ds:0xc003675c
c0014d66:	83 c0 01             	add    eax,0x1
c0014d69:	66 a3 5c 67 03 c0    	mov    ds:0xc003675c,ax
c0014d6f:	e9 94 02 00 00       	jmp    c0015008 <ip_reass+0x3cc>
c0014d74:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014d79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d7d:	eb 65                	jmp    c0014de4 <ip_reass+0x1a8>
c0014d7f:	90                   	nop
c0014d80:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d84:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c0014d87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d8b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014d8e:	39 c2                	cmp    edx,eax
c0014d90:	75 3e                	jne    c0014dd0 <ip_reass+0x194>
c0014d92:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d96:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014d99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d9d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014da0:	39 c2                	cmp    edx,eax
c0014da2:	75 2c                	jne    c0014dd0 <ip_reass+0x194>
c0014da4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014da8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014dab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014daf:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014db3:	0f b7 d2             	movzx  edx,dx
c0014db6:	0f b7 c0             	movzx  eax,ax
c0014db9:	39 c2                	cmp    edx,eax
c0014dbb:	75 13                	jne    c0014dd0 <ip_reass+0x194>
c0014dbd:	66 a1 66 67 03 c0    	mov    ax,ds:0xc0036766
c0014dc3:	83 c0 01             	add    eax,0x1
c0014dc6:	66 a3 66 67 03 c0    	mov    ds:0xc0036766,ax
c0014dcc:	eb 1e                	jmp    c0014dec <ip_reass+0x1b0>
c0014dce:	66 90                	xchg   ax,ax
c0014dd0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014dd4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014dd8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ddc:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dde:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014de2:	66 90                	xchg   ax,ax
c0014de4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014de9:	75 95                	jne    c0014d80 <ip_reass+0x144>
c0014deb:	90                   	nop
c0014dec:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014df1:	75 25                	jne    c0014e18 <ip_reass+0x1dc>
c0014df3:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014df8:	83 ec 08             	sub    esp,0x8
c0014dfb:	50                   	push   eax
c0014dfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e00:	e8 4b f9 ff ff       	call   c0014750 <ip_reass_enqueue_new_datagram>
c0014e05:	83 c4 10             	add    esp,0x10
c0014e08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014e0c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014e11:	75 61                	jne    c0014e74 <ip_reass+0x238>
c0014e13:	e9 f0 01 00 00       	jmp    c0015008 <ip_reass+0x3cc>
c0014e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e1c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014e20:	0f b7 c0             	movzx  eax,ax
c0014e23:	83 ec 0c             	sub    esp,0xc
c0014e26:	50                   	push   eax
c0014e27:	e8 bc bd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014e2c:	83 c4 10             	add    esp,0x10
c0014e2f:	0f b7 c0             	movzx  eax,ax
c0014e32:	25 ff 1f 00 00       	and    eax,0x1fff
c0014e37:	75 3b                	jne    c0014e74 <ip_reass+0x238>
c0014e39:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e3d:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0014e41:	0f b7 c0             	movzx  eax,ax
c0014e44:	83 ec 0c             	sub    esp,0xc
c0014e47:	50                   	push   eax
c0014e48:	e8 9b bd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014e4d:	83 c4 10             	add    esp,0x10
c0014e50:	0f b7 c0             	movzx  eax,ax
c0014e53:	25 ff 1f 00 00       	and    eax,0x1fff
c0014e58:	74 1a                	je     c0014e74 <ip_reass+0x238>
c0014e5a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e5e:	83 c0 08             	add    eax,0x8
c0014e61:	83 ec 04             	sub    esp,0x4
c0014e64:	6a 14                	push   0x14
c0014e66:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014e6a:	50                   	push   eax
c0014e6b:	e8 0a b5 fe ff       	call   c000037a <memcpy>
c0014e70:	83 c4 10             	add    esp,0x10
c0014e73:	90                   	nop
c0014e74:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c0014e79:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014e7f:	01 d0                	add    eax,edx
c0014e81:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014e87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e8b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014e8f:	0f b7 c0             	movzx  eax,ax
c0014e92:	83 e0 20             	and    eax,0x20
c0014e95:	75 29                	jne    c0014ec0 <ip_reass+0x284>
c0014e97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e9b:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c0014e9e:	83 c8 01             	or     eax,0x1
c0014ea1:	88 c2                	mov    dl,al
c0014ea3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ea7:	88 50 1e             	mov    BYTE PTR [eax+0x1e],dl
c0014eaa:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0014eaf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014eb3:	01 d0                	add    eax,edx
c0014eb5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014eb9:	66 89 42 1c          	mov    WORD PTR [edx+0x1c],ax
c0014ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0014ec0:	83 ec 08             	sub    esp,0x8
c0014ec3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0014ec7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014ecb:	e8 3c f9 ff ff       	call   c001480c <ip_reass_chain_frag_into_datagram_and_validate>
c0014ed0:	83 c4 10             	add    esp,0x10
c0014ed3:	85 c0                	test   eax,eax
c0014ed5:	0f 84 25 01 00 00    	je     c0015000 <ip_reass+0x3c4>
c0014edb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014edf:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014ee2:	83 c0 14             	add    eax,0x14
c0014ee5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014ee9:	66 89 42 1c          	mov    WORD PTR [edx+0x1c],ax
c0014eed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ef1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014ef4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014ef7:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ef9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014efd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f01:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014f04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014f07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014f0b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f0f:	83 c0 08             	add    eax,0x8
c0014f12:	83 ec 04             	sub    esp,0x4
c0014f15:	6a 14                	push   0x14
c0014f17:	50                   	push   eax
c0014f18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f1c:	e8 59 b4 fe ff       	call   c000037a <memcpy>
c0014f21:	83 c4 10             	add    esp,0x10
c0014f24:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f28:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014f2b:	0f b7 c0             	movzx  eax,ax
c0014f2e:	83 ec 0c             	sub    esp,0xc
c0014f31:	50                   	push   eax
c0014f32:	e8 b1 bc fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014f37:	83 c4 10             	add    esp,0x10
c0014f3a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014f3e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0014f42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f46:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0014f4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f50:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0014f56:	83 ec 08             	sub    esp,0x8
c0014f59:	6a 14                	push   0x14
c0014f5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f5f:	e8 e0 e4 ff ff       	call   c0013444 <inet_chksum>
c0014f64:	83 c4 10             	add    esp,0x10
c0014f67:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014f6b:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0014f6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f73:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014f76:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014f7a:	eb 3c                	jmp    c0014fb8 <ip_reass+0x37c>
c0014f7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014f80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014f83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014f87:	83 ec 08             	sub    esp,0x8
c0014f8a:	6a ec                	push   0xffffffec
c0014f8c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014f90:	e8 77 31 ff ff       	call   c000810c <pbuf_header>
c0014f95:	83 c4 10             	add    esp,0x10
c0014f98:	83 ec 08             	sub    esp,0x8
c0014f9b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014f9f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014fa3:	e8 38 3b ff ff       	call   c0008ae0 <pbuf_cat>
c0014fa8:	83 c4 10             	add    esp,0x10
c0014fab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014faf:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fb1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0014fb8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0014fbd:	75 bd                	jne    c0014f7c <ip_reass+0x340>
c0014fbf:	83 ec 08             	sub    esp,0x8
c0014fc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014fc6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014fca:	e8 79 f3 ff ff       	call   c0014348 <ip_reass_dequeue_datagram>
c0014fcf:	83 c4 10             	add    esp,0x10
c0014fd2:	83 ec 0c             	sub    esp,0xc
c0014fd5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014fd9:	e8 9e 3a ff ff       	call   c0008a7c <pbuf_clen>
c0014fde:	83 c4 10             	add    esp,0x10
c0014fe1:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c0014fe8:	0f b6 c0             	movzx  eax,al
c0014feb:	89 d3                	mov    ebx,edx
c0014fed:	29 c3                	sub    ebx,eax
c0014fef:	89 d8                	mov    eax,ebx
c0014ff1:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014ff7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ffb:	eb 2f                	jmp    c001502c <ip_reass+0x3f0>
c0014ffd:	8d 76 00             	lea    esi,[esi+0x0]
c0015000:	b8 00 00 00 00       	mov    eax,0x0
c0015005:	eb 25                	jmp    c001502c <ip_reass+0x3f0>
c0015007:	90                   	nop
c0015008:	66 a1 56 67 03 c0    	mov    ax,ds:0xc0036756
c001500e:	83 c0 01             	add    eax,0x1
c0015011:	66 a3 56 67 03 c0    	mov    ds:0xc0036756,ax
c0015017:	83 ec 0c             	sub    esp,0xc
c001501a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001501e:	e8 85 32 ff ff       	call   c00082a8 <pbuf_free>
c0015023:	83 c4 10             	add    esp,0x10
c0015026:	b8 00 00 00 00       	mov    eax,0x0
c001502b:	90                   	nop
c001502c:	83 c4 28             	add    esp,0x28
c001502f:	5b                   	pop    ebx
c0015030:	c3                   	ret    
c0015031:	8d 76 00             	lea    esi,[esi+0x0]

c0015034 <ip_frag_alloc_pbuf_custom_ref>:
c0015034:	83 ec 0c             	sub    esp,0xc
c0015037:	83 ec 0c             	sub    esp,0xc
c001503a:	6a 06                	push   0x6
c001503c:	e8 7f 28 ff ff       	call   c00078c0 <memp_malloc>
c0015041:	83 c4 10             	add    esp,0x10
c0015044:	83 c4 0c             	add    esp,0xc
c0015047:	c3                   	ret    

c0015048 <ip_frag_free_pbuf_custom_ref>:
c0015048:	83 ec 0c             	sub    esp,0xc
c001504b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0015050:	75 16                	jne    c0015068 <ip_frag_free_pbuf_custom_ref+0x20>
c0015052:	83 ec 08             	sub    esp,0x8
c0015055:	68 76 fd 02 c0       	push   0xc002fd76
c001505a:	68 46 f9 02 c0       	push   0xc002f946
c001505f:	e8 78 aa 00 00       	call   c001fadc <CPrintf>
c0015064:	83 c4 10             	add    esp,0x10
c0015067:	90                   	nop
c0015068:	83 ec 08             	sub    esp,0x8
c001506b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001506f:	6a 06                	push   0x6
c0015071:	e8 76 29 ff ff       	call   c00079ec <memp_free>
c0015076:	83 c4 10             	add    esp,0x10
c0015079:	90                   	nop
c001507a:	83 c4 0c             	add    esp,0xc
c001507d:	c3                   	ret    
c001507e:	66 90                	xchg   ax,ax

c0015080 <ipfrag_free_pbuf_custom>:
c0015080:	83 ec 1c             	sub    esp,0x1c
c0015083:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015087:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001508b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015090:	75 16                	jne    c00150a8 <ipfrag_free_pbuf_custom+0x28>
c0015092:	83 ec 08             	sub    esp,0x8
c0015095:	68 e6 0c 03 c0       	push   0xc0030ce6
c001509a:	68 46 f9 02 c0       	push   0xc002f946
c001509f:	e8 38 aa 00 00       	call   c001fadc <CPrintf>
c00150a4:	83 c4 10             	add    esp,0x10
c00150a7:	90                   	nop
c00150a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00150ac:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00150b0:	74 16                	je     c00150c8 <ipfrag_free_pbuf_custom+0x48>
c00150b2:	83 ec 08             	sub    esp,0x8
c00150b5:	68 f2 0c 03 c0       	push   0xc0030cf2
c00150ba:	68 46 f9 02 c0       	push   0xc002f946
c00150bf:	e8 18 aa 00 00       	call   c001fadc <CPrintf>
c00150c4:	83 c4 10             	add    esp,0x10
c00150c7:	90                   	nop
c00150c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00150cc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00150cf:	85 c0                	test   eax,eax
c00150d1:	74 15                	je     c00150e8 <ipfrag_free_pbuf_custom+0x68>
c00150d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00150d7:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00150da:	83 ec 0c             	sub    esp,0xc
c00150dd:	50                   	push   eax
c00150de:	e8 c5 31 ff ff       	call   c00082a8 <pbuf_free>
c00150e3:	83 c4 10             	add    esp,0x10
c00150e6:	66 90                	xchg   ax,ax
c00150e8:	83 ec 0c             	sub    esp,0xc
c00150eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00150ef:	e8 54 ff ff ff       	call   c0015048 <ip_frag_free_pbuf_custom_ref>
c00150f4:	83 c4 10             	add    esp,0x10
c00150f7:	90                   	nop
c00150f8:	83 c4 1c             	add    esp,0x1c
c00150fb:	c3                   	ret    

c00150fc <ip_frag>:
c00150fc:	53                   	push   ebx
c00150fd:	83 ec 38             	sub    esp,0x38
c0015100:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0015104:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015107:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c001510c:	66 c7 44 24 2a 14 00 	mov    WORD PTR [esp+0x2a],0x14
c0015113:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c001511a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001511e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015121:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015125:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015129:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001512d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015131:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0015135:	0f b7 c0             	movzx  eax,ax
c0015138:	83 ec 0c             	sub    esp,0xc
c001513b:	50                   	push   eax
c001513c:	e8 a7 ba fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0015141:	83 c4 10             	add    esp,0x10
c0015144:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c0015149:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001514d:	25 ff 1f 00 00       	and    eax,0x1fff
c0015152:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0015157:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001515b:	25 00 20 00 00       	and    eax,0x2000
c0015160:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0015165:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015169:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001516c:	83 e8 14             	sub    eax,0x14
c001516f:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0015174:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c0015179:	83 e8 14             	sub    eax,0x14
c001517c:	79 06                	jns    c0015184 <ip_frag+0x88>
c001517e:	83 c0 07             	add    eax,0x7
c0015181:	8d 76 00             	lea    esi,[esi+0x0]
c0015184:	c1 f8 03             	sar    eax,0x3
c0015187:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001518c:	e9 03 03 00 00       	jmp    c0015494 <ip_frag+0x398>
c0015191:	8d 76 00             	lea    esi,[esi+0x0]
c0015194:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c0015199:	8d 50 ed             	lea    edx,[eax-0x13]
c001519c:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c00151a1:	39 c2                	cmp    edx,eax
c00151a3:	0f 9f c0             	setg   al
c00151a6:	0f b6 c0             	movzx  eax,al
c00151a9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00151ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00151b2:	25 ff 1f 00 00       	and    eax,0x1fff
c00151b7:	89 c2                	mov    edx,eax
c00151b9:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00151be:	09 d0                	or     eax,edx
c00151c0:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c00151c5:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00151ca:	85 c0                	test   eax,eax
c00151cc:	75 0e                	jne    c00151dc <ip_frag+0xe0>
c00151ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00151d2:	80 cc 20             	or     ah,0x20
c00151d5:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c00151da:	66 90                	xchg   ax,ax
c00151dc:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00151e1:	85 c0                	test   eax,eax
c00151e3:	75 0b                	jne    c00151f0 <ip_frag+0xf4>
c00151e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00151e9:	c1 e0 03             	shl    eax,0x3
c00151ec:	eb 0a                	jmp    c00151f8 <ip_frag+0xfc>
c00151ee:	66 90                	xchg   ax,ax
c00151f0:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c00151f5:	8d 76 00             	lea    esi,[esi+0x0]
c00151f8:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c00151fd:	83 ec 04             	sub    esp,0x4
c0015200:	6a 00                	push   0x0
c0015202:	6a 14                	push   0x14
c0015204:	6a 02                	push   0x2
c0015206:	e8 75 32 ff ff       	call   c0008480 <pbuf_alloc>
c001520b:	83 c4 10             	add    esp,0x10
c001520e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015212:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015217:	75 07                	jne    c0015220 <ip_frag+0x124>
c0015219:	b0 ff                	mov    al,0xff
c001521b:	e9 84 02 00 00       	jmp    c00154a4 <ip_frag+0x3a8>
c0015220:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015224:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0015228:	0f b7 c0             	movzx  eax,ax
c001522b:	83 f8 13             	cmp    eax,0x13
c001522e:	77 18                	ja     c0015248 <ip_frag+0x14c>
c0015230:	83 ec 08             	sub    esp,0x8
c0015233:	68 88 0d 03 c0       	push   0xc0030d88
c0015238:	68 46 f9 02 c0       	push   0xc002f946
c001523d:	e8 9a a8 00 00       	call   c001fadc <CPrintf>
c0015242:	83 c4 10             	add    esp,0x10
c0015245:	8d 76 00             	lea    esi,[esi+0x0]
c0015248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001524c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001524f:	83 ec 04             	sub    esp,0x4
c0015252:	6a 14                	push   0x14
c0015254:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015258:	50                   	push   eax
c0015259:	e8 1c b1 fe ff       	call   c000037a <memcpy>
c001525e:	83 c4 10             	add    esp,0x10
c0015261:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015265:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015268:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001526c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015270:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015273:	0f b7 44 24 2a       	movzx  eax,WORD PTR [esp+0x2a]
c0015278:	01 c2                	add    edx,eax
c001527a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001527e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0015281:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015285:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0015289:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001528e:	89 d1                	mov    ecx,edx
c0015290:	29 c1                	sub    ecx,eax
c0015292:	89 c8                	mov    eax,ecx
c0015294:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015298:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c001529c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00152a0:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c00152a5:	e9 1a 01 00 00       	jmp    c00153c4 <ip_frag+0x2c8>
c00152aa:	66 90                	xchg   ax,ax
c00152ac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00152b0:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00152b4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00152b8:	0f b7 d8             	movzx  ebx,ax
c00152bb:	0f b7 ca             	movzx  ecx,dx
c00152be:	39 cb                	cmp    ebx,ecx
c00152c0:	76 02                	jbe    c00152c4 <ip_frag+0x1c8>
c00152c2:	89 d0                	mov    eax,edx
c00152c4:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c00152c9:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00152ce:	85 c0                	test   eax,eax
c00152d0:	75 12                	jne    c00152e4 <ip_frag+0x1e8>
c00152d2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00152d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00152dc:	e9 e3 00 00 00       	jmp    c00153c4 <ip_frag+0x2c8>
c00152e1:	8d 76 00             	lea    esi,[esi+0x0]
c00152e4:	e8 4b fd ff ff       	call   c0015034 <ip_frag_alloc_pbuf_custom_ref>
c00152e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00152ed:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00152f2:	75 18                	jne    c001530c <ip_frag+0x210>
c00152f4:	83 ec 0c             	sub    esp,0xc
c00152f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00152fb:	e8 a8 2f ff ff       	call   c00082a8 <pbuf_free>
c0015300:	83 c4 10             	add    esp,0x10
c0015303:	b0 ff                	mov    al,0xff
c0015305:	e9 9a 01 00 00       	jmp    c00154a4 <ip_frag+0x3a8>
c001530a:	66 90                	xchg   ax,ax
c001530c:	0f b7 5c 24 26       	movzx  ebx,WORD PTR [esp+0x26]
c0015311:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015315:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015318:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001531c:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0015321:	83 ec 08             	sub    esp,0x8
c0015324:	53                   	push   ebx
c0015325:	51                   	push   ecx
c0015326:	52                   	push   edx
c0015327:	6a 02                	push   0x2
c0015329:	50                   	push   eax
c001532a:	6a 03                	push   0x3
c001532c:	e8 b7 2c ff ff       	call   c0007fe8 <pbuf_alloced_custom>
c0015331:	83 c4 20             	add    esp,0x20
c0015334:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015338:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001533d:	75 25                	jne    c0015364 <ip_frag+0x268>
c001533f:	83 ec 0c             	sub    esp,0xc
c0015342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015346:	e8 fd fc ff ff       	call   c0015048 <ip_frag_free_pbuf_custom_ref>
c001534b:	83 c4 10             	add    esp,0x10
c001534e:	83 ec 0c             	sub    esp,0xc
c0015351:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015355:	e8 4e 2f ff ff       	call   c00082a8 <pbuf_free>
c001535a:	83 c4 10             	add    esp,0x10
c001535d:	b0 ff                	mov    al,0xff
c001535f:	e9 40 01 00 00       	jmp    c00154a4 <ip_frag+0x3a8>
c0015364:	83 ec 0c             	sub    esp,0xc
c0015367:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001536b:	e8 40 37 ff ff       	call   c0008ab0 <pbuf_ref>
c0015370:	83 c4 10             	add    esp,0x10
c0015373:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015377:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001537b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001537e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015382:	c7 40 10 80 50 01 c0 	mov    DWORD PTR [eax+0x10],0xc0015080
c0015389:	83 ec 08             	sub    esp,0x8
c001538c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015390:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015394:	e8 47 37 ff ff       	call   c0008ae0 <pbuf_cat>
c0015399:	83 c4 10             	add    esp,0x10
c001539c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00153a0:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00153a5:	89 d3                	mov    ebx,edx
c00153a7:	29 c3                	sub    ebx,eax
c00153a9:	89 d8                	mov    eax,ebx
c00153ab:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c00153b0:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c00153b5:	85 c0                	test   eax,eax
c00153b7:	74 0b                	je     c00153c4 <ip_frag+0x2c8>
c00153b9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00153bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00153bf:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00153c3:	90                   	nop
c00153c4:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c00153c9:	85 c0                	test   eax,eax
c00153cb:	0f 85 db fe ff ff    	jne    c00152ac <ip_frag+0x1b0>
c00153d1:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00153d6:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c00153db:	0f b7 44 24 28       	movzx  eax,WORD PTR [esp+0x28]
c00153e0:	83 ec 0c             	sub    esp,0xc
c00153e3:	50                   	push   eax
c00153e4:	e8 ff b7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00153e9:	83 c4 10             	add    esp,0x10
c00153ec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00153f0:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00153f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00153f8:	83 c0 14             	add    eax,0x14
c00153fb:	0f b7 c0             	movzx  eax,ax
c00153fe:	83 ec 0c             	sub    esp,0xc
c0015401:	50                   	push   eax
c0015402:	e8 e1 b7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0015407:	83 c4 10             	add    esp,0x10
c001540a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001540e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0015412:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015416:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c001541c:	83 ec 08             	sub    esp,0x8
c001541f:	6a 14                	push   0x14
c0015421:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015425:	e8 1a e0 ff ff       	call   c0013444 <inet_chksum>
c001542a:	83 c4 10             	add    esp,0x10
c001542d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015431:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0015435:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0015439:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001543c:	83 ec 04             	sub    esp,0x4
c001543f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015443:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015447:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001544b:	ff d0                	call   eax
c001544d:	83 c4 10             	add    esp,0x10
c0015450:	66 a1 50 67 03 c0    	mov    ax,ds:0xc0036750
c0015456:	83 c0 01             	add    eax,0x1
c0015459:	66 a3 50 67 03 c0    	mov    ds:0xc0036750,ax
c001545f:	83 ec 0c             	sub    esp,0xc
c0015462:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015466:	e8 3d 2e ff ff       	call   c00082a8 <pbuf_free>
c001546b:	83 c4 10             	add    esp,0x10
c001546e:	66 8b 54 24 2e       	mov    dx,WORD PTR [esp+0x2e]
c0015473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015477:	89 d1                	mov    ecx,edx
c0015479:	29 c1                	sub    ecx,eax
c001547b:	89 c8                	mov    eax,ecx
c001547d:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0015482:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015486:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001548a:	01 d0                	add    eax,edx
c001548c:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0015491:	8d 76 00             	lea    esi,[esi+0x0]
c0015494:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c0015499:	85 c0                	test   eax,eax
c001549b:	0f 85 f3 fc ff ff    	jne    c0015194 <ip_frag+0x98>
c00154a1:	b0 00                	mov    al,0x0
c00154a3:	90                   	nop
c00154a4:	83 c4 38             	add    esp,0x38
c00154a7:	5b                   	pop    ebx
c00154a8:	c3                   	ret    
c00154a9:	90                   	nop

c00154aa <Computer::close(int, int, void*)>:
c00154aa:	53                   	push   ebx
c00154ab:	83 ec 08             	sub    esp,0x8
c00154ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00154b2:	e8 b5 a4 00 00       	call   c001f96c <KeExecuteAtexit()>
c00154b7:	83 ec 0c             	sub    esp,0xc
c00154ba:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00154c0:	50                   	push   eax
c00154c1:	e8 b8 5f 00 00       	call   c001b47e <Device::closeAll()>
c00154c6:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00154cc:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00154d0:	8b 10                	mov    edx,DWORD PTR [eax]
c00154d2:	51                   	push   ecx
c00154d3:	68 0f 27 00 00       	push   0x270f
c00154d8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00154dc:	53                   	push   ebx
c00154dd:	50                   	push   eax
c00154de:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00154e1:	83 c4 14             	add    esp,0x14
c00154e4:	68 a8 0d 03 c0       	push   0xc0030da8
c00154e9:	e8 c0 ac 00 00       	call   c00201ae <KePanic(char const*)>
c00154ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00154f3:	83 c4 18             	add    esp,0x18
c00154f6:	5b                   	pop    ebx
c00154f7:	c3                   	ret    

c00154f8 <Krnl::firstTask()>:
c00154f8:	53                   	push   ebx
c00154f9:	83 ec 14             	sub    esp,0x14
c00154fc:	fb                   	sti    
c00154fd:	68 be 0d 03 c0       	push   0xc0030dbe
c0015502:	e8 44 a5 00 00       	call   c001fa4b <KeSetBootMessage(char const*)>
c0015507:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c001550e:	e8 f3 0d 00 00       	call   c0016306 <malloc>
c0015513:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001551a:	89 c3                	mov    ebx,eax
c001551c:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0015521:	50                   	push   eax
c0015522:	68 d7 0d 03 c0       	push   0xc0030dd7
c0015527:	6a 01                	push   0x1
c0015529:	53                   	push   ebx
c001552a:	e8 b5 f7 00 00       	call   c0024ce4 <Process::Process(bool, char const*, Process*, char**)>
c001552f:	83 c4 20             	add    esp,0x20
c0015532:	68 ff 00 00 00       	push   0xff
c0015537:	6a 00                	push   0x0
c0015539:	68 4d 5d 01 c0       	push   0xc0015d4d
c001553e:	53                   	push   ebx
c001553f:	e8 c8 f9 00 00       	call   c0024f0c <Process::createThread(void (*)(void*), void*, int)>
c0015544:	8b 15 f8 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401f8
c001554a:	6a 7a                	push   0x7a
c001554c:	6a 00                	push   0x0
c001554e:	68 d4 57 02 c0       	push   0xc00257d4
c0015553:	52                   	push   edx
c0015554:	e8 b3 f9 00 00       	call   c0024f0c <Process::createThread(void (*)(void*), void*, int)>
c0015559:	83 c4 14             	add    esp,0x14
c001555c:	a3 b0 01 04 c0       	mov    ds:0xc00401b0,eax
c0015561:	68 d4 0e 03 c0       	push   0xc0030ed4
c0015566:	e8 e0 a4 00 00       	call   c001fa4b <KeSetBootMessage(char const*)>
c001556b:	c6 05 c1 a9 03 c0 01 	mov    BYTE PTR ds:0xc003a9c1,0x1
c0015572:	e8 f0 ad 00 00       	call   c0020367 <KeInitRand()>
c0015577:	e8 ef 05 01 00       	call   c0025b6b <Vm::initialise8086()>
c001557c:	e8 f9 4a 00 00       	call   c001a07a <Fs::initVFS()>
c0015581:	c7 04 24 e4 0d 03 c0 	mov    DWORD PTR [esp],0xc0030de4
c0015588:	e8 be a4 00 00       	call   c001fa4b <KeSetBootMessage(char const*)>
c001558d:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0015592:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0015598:	8b 10                	mov    edx,DWORD PTR [eax]
c001559a:	6a 00                	push   0x0
c001559c:	6a 00                	push   0x0
c001559e:	6a 00                	push   0x0
c00155a0:	50                   	push   eax
c00155a1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00155a4:	83 c4 14             	add    esp,0x14
c00155a7:	68 d4 0e 03 c0       	push   0xc0030ed4
c00155ac:	e8 9a a4 00 00       	call   c001fa4b <KeSetBootMessage(char const*)>
c00155b1:	e8 5e 42 00 00       	call   c0019814 <KeInitialiseSymlinks()>
c00155b6:	e8 3b aa 00 00       	call   c001fff6 <KeLoadSystemEnv()>
c00155bb:	e8 b3 ac 00 00       	call   c0020273 <KeSetupPowerManager()>
c00155c0:	83 c4 0c             	add    esp,0xc
c00155c3:	6a 3a                	push   0x3a
c00155c5:	68 fe 0d 03 c0       	push   0xc0030dfe
c00155ca:	68 07 0e 03 c0       	push   0xc0030e07
c00155cf:	e8 c8 d8 00 00       	call   c0022e9c <Reg::readIntWithDefault(char*, char*, int)>
c00155d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00155d7:	e8 b8 56 00 00       	call   c001ac94 <User::loadClockSettings(int)>
c00155dc:	c7 04 24 f8 0e 03 c0 	mov    DWORD PTR [esp],0xc0030ef8
c00155e3:	e8 63 a4 00 00       	call   c001fa4b <KeSetBootMessage(char const*)>
c00155e8:	59                   	pop    ecx
c00155e9:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00155ee:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c00155f4:	53                   	push   ebx
c00155f5:	e8 38 5d 00 00       	call   c001b332 <Device::loadDriversForAll()>
c00155fa:	c7 04 24 0f 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e0f
c0015601:	e8 45 a4 00 00       	call   c001fa4b <KeSetBootMessage(char const*)>
c0015606:	58                   	pop    eax
c0015607:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001560d:	5a                   	pop    edx
c001560e:	6a 01                	push   0x1
c0015610:	68 20 0e 03 c0       	push   0xc0030e20
c0015615:	e8 bf f0 00 00       	call   c00246d9 <Thr::loadDLL(char const*, bool)>
c001561a:	59                   	pop    ecx
c001561b:	5a                   	pop    edx
c001561c:	53                   	push   ebx
c001561d:	50                   	push   eax
c001561e:	e8 08 f3 00 00       	call   c002492b <Thr::executeDLL(unsigned long, void*)>
c0015623:	83 c4 10             	add    esp,0x10
c0015626:	83 ec 0c             	sub    esp,0xc
c0015629:	6a 02                	push   0x2
c001562b:	e8 e8 fb 00 00       	call   c0025218 <blockTask(TaskState)>
c0015630:	83 c4 10             	add    esp,0x10
c0015633:	eb f1                	jmp    c0015626 <Krnl::firstTask()+0x12e>
c0015635:	90                   	nop

c0015636 <Computer::Computer()>:
c0015636:	83 ec 0c             	sub    esp,0xc
c0015639:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001563d:	83 ec 08             	sub    esp,0x8
c0015640:	68 3c 0e 03 c0       	push   0xc0030e3c
c0015645:	50                   	push   eax
c0015646:	e8 2d 5d 00 00       	call   c001b378 <Device::Device(char const*)>
c001564b:	83 c4 10             	add    esp,0x10
c001564e:	ba 44 0f 03 c0       	mov    edx,0xc0030f44
c0015653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015657:	89 10                	mov    DWORD PTR [eax],edx
c0015659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001565d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0015667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001566b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0015675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015679:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001567f:	83 ca 04             	or     edx,0x4
c0015682:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0015688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001568c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0015692:	0f b6 d0             	movzx  edx,al
c0015695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015699:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c00156a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156a4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00156aa:	0f b6 d0             	movzx  edx,al
c00156ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156b1:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00156b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156ba:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00156c0:	8d 50 01             	lea    edx,[eax+0x1]
c00156c3:	88 d1                	mov    cl,dl
c00156c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00156c9:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c00156cf:	0f b6 d0             	movzx  edx,al
c00156d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156d6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00156da:	83 e1 3f             	and    ecx,0x3f
c00156dd:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00156e1:	90                   	nop
c00156e2:	83 c4 0c             	add    esp,0xc
c00156e5:	c3                   	ret    

c00156e6 <Computer::setBootMessage(char const*)>:
c00156e6:	c3                   	ret    
c00156e7:	90                   	nop

c00156e8 <Computer::detectFeatures()>:
c00156e8:	55                   	push   ebp
c00156e9:	57                   	push   edi
c00156ea:	56                   	push   esi
c00156eb:	53                   	push   ebx
c00156ec:	83 ec 1c             	sub    esp,0x1c
c00156ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00156f3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00156f9:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c00156ff:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0015705:	e8 ef aa fe ff       	call   c00001f9 <detectCPUID>
c001570a:	31 d2                	xor    edx,edx
c001570c:	85 c0                	test   eax,eax
c001570e:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015714:	0f 95 c2             	setne  dl
c0015717:	83 e0 fd             	and    eax,0xfffffffd
c001571a:	d1 e2                	shl    edx,1
c001571c:	09 d0                	or     eax,edx
c001571e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015724:	a8 02                	test   al,0x2
c0015726:	75 51                	jne    c0015779 <Computer::detectFeatures()+0x91>
c0015728:	f6 05 d5 a9 03 c0 04 	test   BYTE PTR ds:0xc003a9d5,0x4
c001572f:	74 0f                	je     c0015740 <Computer::detectFeatures()+0x58>
c0015731:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015737:	83 e0 fb             	and    eax,0xfffffffb
c001573a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015740:	e8 e1 8a 01 00       	call   c002e226 <x87Detect>
c0015745:	83 e0 01             	and    eax,0x1
c0015748:	c1 e0 04             	shl    eax,0x4
c001574b:	89 c2                	mov    edx,eax
c001574d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015753:	83 e0 ef             	and    eax,0xffffffef
c0015756:	09 d0                	or     eax,edx
c0015758:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c001575e:	88 c2                	mov    dl,al
c0015760:	a8 10                	test   al,0x10
c0015762:	0f 85 33 01 00 00    	jne    c001589b <Computer::detectFeatures()+0x1b3>
c0015768:	80 e2 80             	and    dl,0x80
c001576b:	0f 85 4c 01 00 00    	jne    c00158bd <Computer::detectFeatures()+0x1d5>
c0015771:	83 c4 1c             	add    esp,0x1c
c0015774:	5b                   	pop    ebx
c0015775:	5e                   	pop    esi
c0015776:	5f                   	pop    edi
c0015777:	5d                   	pop    ebp
c0015778:	c3                   	ret    
c0015779:	83 ec 0c             	sub    esp,0xc
c001577c:	6a 20                	push   0x20
c001577e:	e8 01 97 00 00       	call   c001ee84 <CPU::cpuidCheckEDX(unsigned int)>
c0015783:	83 e0 01             	and    eax,0x1
c0015786:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001578d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015793:	83 e0 f7             	and    eax,0xfffffff7
c0015796:	09 d0                	or     eax,edx
c0015798:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c001579e:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c00157a5:	e8 da 96 00 00       	call   c001ee84 <CPU::cpuidCheckEDX(unsigned int)>
c00157aa:	89 c2                	mov    edx,eax
c00157ac:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00157b2:	83 e2 01             	and    edx,0x1
c00157b5:	83 e0 fe             	and    eax,0xfffffffe
c00157b8:	09 d0                	or     eax,edx
c00157ba:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00157c0:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c00157c7:	e8 b8 96 00 00       	call   c001ee84 <CPU::cpuidCheckEDX(unsigned int)>
c00157cc:	89 c2                	mov    edx,eax
c00157ce:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00157d4:	c1 e2 07             	shl    edx,0x7
c00157d7:	83 e0 7f             	and    eax,0x7f
c00157da:	09 d0                	or     eax,edx
c00157dc:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00157e2:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c00157e9:	e8 96 96 00 00       	call   c001ee84 <CPU::cpuidCheckEDX(unsigned int)>
c00157ee:	83 c4 10             	add    esp,0x10
c00157f1:	83 e0 01             	and    eax,0x1
c00157f4:	c1 e0 05             	shl    eax,0x5
c00157f7:	89 c2                	mov    edx,eax
c00157f9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00157ff:	83 e0 df             	and    eax,0xffffffdf
c0015802:	09 d0                	or     eax,edx
c0015804:	f7 05 d4 a9 03 c0 01 04 00 00 	test   DWORD PTR ds:0xc003a9d4,0x401
c001580e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015814:	0f 84 c9 00 00 00    	je     c00158e3 <Computer::detectFeatures()+0x1fb>
c001581a:	83 e0 fe             	and    eax,0xfffffffe
c001581d:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015823:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015829:	89 c2                	mov    edx,eax
c001582b:	83 e2 09             	and    edx,0x9
c001582e:	83 fa 01             	cmp    edx,0x1
c0015831:	75 09                	jne    c001583c <Computer::detectFeatures()+0x154>
c0015833:	83 e0 fe             	and    eax,0xfffffffe
c0015836:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c001583c:	83 ec 0c             	sub    esp,0xc
c001583f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0015843:	50                   	push   eax
c0015844:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0015848:	55                   	push   ebp
c0015849:	8d 7c 24 18          	lea    edi,[esp+0x18]
c001584d:	57                   	push   edi
c001584e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0015852:	56                   	push   esi
c0015853:	68 00 00 00 80       	push   0x80000000
c0015858:	e8 a3 95 00 00       	call   c001ee00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001585d:	83 c4 20             	add    esp,0x20
c0015860:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0015867:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001586b:	0f 86 b7 fe ff ff    	jbe    c0015728 <Computer::detectFeatures()+0x40>
c0015871:	83 ec 0c             	sub    esp,0xc
c0015874:	50                   	push   eax
c0015875:	55                   	push   ebp
c0015876:	57                   	push   edi
c0015877:	56                   	push   esi
c0015878:	68 01 00 00 80       	push   0x80000001
c001587d:	e8 7e 95 00 00       	call   c001ee00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015882:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0015888:	83 c4 20             	add    esp,0x20
c001588b:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0015890:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0015896:	e9 8d fe ff ff       	jmp    c0015728 <Computer::detectFeatures()+0x40>
c001589b:	e8 40 89 01 00       	call   c002e1e0 <sseDetect>
c00158a0:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c00158a6:	c1 e0 07             	shl    eax,0x7
c00158a9:	83 e2 7f             	and    edx,0x7f
c00158ac:	09 c2                	or     edx,eax
c00158ae:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c00158b4:	80 e2 80             	and    dl,0x80
c00158b7:	0f 84 b4 fe ff ff    	je     c0015771 <Computer::detectFeatures()+0x89>
c00158bd:	e8 ae 85 01 00       	call   c002de70 <avxDetect>
c00158c2:	83 e0 01             	and    eax,0x1
c00158c5:	c1 e0 05             	shl    eax,0x5
c00158c8:	89 c2                	mov    edx,eax
c00158ca:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00158d0:	83 e0 df             	and    eax,0xffffffdf
c00158d3:	09 d0                	or     eax,edx
c00158d5:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00158db:	83 c4 1c             	add    esp,0x1c
c00158de:	5b                   	pop    ebx
c00158df:	5e                   	pop    esi
c00158e0:	5f                   	pop    edi
c00158e1:	5d                   	pop    ebp
c00158e2:	c3                   	ret    
c00158e3:	83 ec 0c             	sub    esp,0xc
c00158e6:	68 00 02 00 00       	push   0x200
c00158eb:	e8 94 95 00 00       	call   c001ee84 <CPU::cpuidCheckEDX(unsigned int)>
c00158f0:	83 c4 10             	add    esp,0x10
c00158f3:	89 c2                	mov    edx,eax
c00158f5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00158fb:	83 e2 01             	and    edx,0x1
c00158fe:	83 e0 fe             	and    eax,0xfffffffe
c0015901:	09 d0                	or     eax,edx
c0015903:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015909:	e9 15 ff ff ff       	jmp    c0015823 <Computer::detectFeatures()+0x13b>

c001590e <Computer::displayFeatures()>:
c001590e:	c3                   	ret    
c001590f:	90                   	nop

c0015910 <Computer::rdmsr(unsigned int)>:
c0015910:	83 ec 0c             	sub    esp,0xc
c0015913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015917:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c001591e:	74 0a                	je     c001592a <Computer::rdmsr(unsigned int)+0x1a>
c0015920:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015924:	0f 32                	rdmsr  
c0015926:	83 c4 0c             	add    esp,0xc
c0015929:	c3                   	ret    
c001592a:	83 ec 0c             	sub    esp,0xc
c001592d:	68 45 0e 03 c0       	push   0xc0030e45
c0015932:	e8 77 a8 00 00       	call   c00201ae <KePanic(char const*)>
c0015937:	83 c4 10             	add    esp,0x10
c001593a:	eb e4                	jmp    c0015920 <Computer::rdmsr(unsigned int)+0x10>

c001593c <Computer::wrmsr(unsigned int, unsigned long long)>:
c001593c:	57                   	push   edi
c001593d:	56                   	push   esi
c001593e:	83 ec 04             	sub    esp,0x4
c0015941:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015945:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0015949:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001594d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0015954:	74 10                	je     c0015966 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0015956:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001595a:	89 f0                	mov    eax,esi
c001595c:	89 fa                	mov    edx,edi
c001595e:	0f 30                	wrmsr  
c0015960:	83 c4 04             	add    esp,0x4
c0015963:	5e                   	pop    esi
c0015964:	5f                   	pop    edi
c0015965:	c3                   	ret    
c0015966:	83 ec 0c             	sub    esp,0xc
c0015969:	68 4b 0e 03 c0       	push   0xc0030e4b
c001596e:	e8 3b a8 00 00       	call   c00201ae <KePanic(char const*)>
c0015973:	83 c4 10             	add    esp,0x10
c0015976:	eb de                	jmp    c0015956 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0015978 <Computer::shutdown()>:
c0015978:	83 ec 0c             	sub    esp,0xc
c001597b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001597f:	8b 10                	mov    edx,DWORD PTR [eax]
c0015981:	6a 00                	push   0x0
c0015983:	6a 00                	push   0x0
c0015985:	6a 00                	push   0x0
c0015987:	50                   	push   eax
c0015988:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001598b:	83 c4 1c             	add    esp,0x1c
c001598e:	c3                   	ret    
c001598f:	90                   	nop

c0015990 <Computer::restart()>:
c0015990:	83 ec 0c             	sub    esp,0xc
c0015993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015997:	8b 10                	mov    edx,DWORD PTR [eax]
c0015999:	6a 00                	push   0x0
c001599b:	6a 00                	push   0x0
c001599d:	6a 01                	push   0x1
c001599f:	50                   	push   eax
c00159a0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00159a3:	83 c4 1c             	add    esp,0x1c
c00159a6:	c3                   	ret    
c00159a7:	90                   	nop

c00159a8 <Computer::sleep()>:
c00159a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00159ac:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c00159b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00159b6:	e9 e1 8e 00 00       	jmp    c001e89c <ACPI::sleep()>
c00159bb:	90                   	nop

c00159bc <Computer::nmiEnabled()>:
c00159bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00159c0:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c00159c6:	c3                   	ret    
c00159c7:	90                   	nop

c00159c8 <Computer::readCMOS(unsigned char)>:
c00159c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00159cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00159d0:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c00159d7:	75 09                	jne    c00159e2 <Computer::readCMOS(unsigned char)+0x1a>
c00159d9:	b2 80                	mov    dl,0x80
c00159db:	09 d0                	or     eax,edx
c00159dd:	e6 70                	out    0x70,al
c00159df:	e4 71                	in     al,0x71
c00159e1:	c3                   	ret    
c00159e2:	31 d2                	xor    edx,edx
c00159e4:	eb f5                	jmp    c00159db <Computer::readCMOS(unsigned char)+0x13>

c00159e6 <Computer::enableNMI(bool)>:
c00159e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00159ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00159ee:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00159f4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00159fc:	eb ca                	jmp    c00159c8 <Computer::readCMOS(unsigned char)>

c00159fe <Computer::open(int, int, void*)>:
c00159fe:	56                   	push   esi
c00159ff:	53                   	push   ebx
c0015a00:	83 ec 10             	sub    esp,0x10
c0015a03:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015a07:	f6 05 d4 a9 03 c0 04 	test   BYTE PTR ds:0xc003a9d4,0x4
c0015a0e:	68 51 0e 03 c0       	push   0xc0030e51
c0015a13:	0f 94 05 20 3a 03 c0 	sete   BYTE PTR ds:0xc0033a20
c0015a1a:	e8 2c a0 00 00       	call   c001fa4b <KeSetBootMessage(char const*)>
c0015a1f:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0015a26:	e8 db 08 00 00       	call   c0016306 <malloc>
c0015a2b:	89 04 24             	mov    DWORD PTR [esp],eax
c0015a2e:	89 c6                	mov    esi,eax
c0015a30:	e8 db 89 00 00       	call   c001e410 <ACPI::ACPI()>
c0015a35:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0015a3b:	58                   	pop    eax
c0015a3c:	5a                   	pop    edx
c0015a3d:	56                   	push   esi
c0015a3e:	53                   	push   ebx
c0015a3f:	e8 d2 57 00 00       	call   c001b216 <Device::addChild(Device*)>
c0015a44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015a47:	e8 9c fc ff ff       	call   c00156e8 <Computer::detectFeatures()>
c0015a4c:	59                   	pop    ecx
c0015a4d:	5e                   	pop    esi
c0015a4e:	6a 01                	push   0x1
c0015a50:	53                   	push   ebx
c0015a51:	e8 90 ff ff ff       	call   c00159e6 <Computer::enableNMI(bool)>
c0015a56:	c7 04 24 69 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e69
c0015a5d:	e8 e9 9f 00 00       	call   c001fa4b <KeSetBootMessage(char const*)>
c0015a62:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0015a69:	e8 98 08 00 00       	call   c0016306 <malloc>
c0015a6e:	89 04 24             	mov    DWORD PTR [esp],eax
c0015a71:	89 c6                	mov    esi,eax
c0015a73:	e8 c4 94 00 00       	call   c001ef3c <CPU::CPU()>
c0015a78:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0015a7e:	58                   	pop    eax
c0015a7f:	5a                   	pop    edx
c0015a80:	56                   	push   esi
c0015a81:	53                   	push   ebx
c0015a82:	e8 8f 57 00 00       	call   c001b216 <Device::addChild(Device*)>
c0015a87:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015a8d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015a91:	8b 10                	mov    edx,DWORD PTR [eax]
c0015a93:	51                   	push   ecx
c0015a94:	6a 00                	push   0x0
c0015a96:	6a 00                	push   0x0
c0015a98:	50                   	push   eax
c0015a99:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015a9c:	83 c4 14             	add    esp,0x14
c0015a9f:	68 18 0f 03 c0       	push   0xc0030f18
c0015aa4:	e8 a2 9f 00 00       	call   c001fa4b <KeSetBootMessage(char const*)>
c0015aa9:	e8 fa 12 01 00       	call   c0026da8 <HalInitialiseCoprocessor()>
c0015aae:	c7 04 24 83 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e83
c0015ab5:	e8 91 9f 00 00       	call   c001fa4b <KeSetBootMessage(char const*)>
c0015aba:	c7 04 24 f8 54 01 c0 	mov    DWORD PTR [esp],0xc00154f8
c0015ac1:	e8 72 f5 00 00       	call   c0025038 <setupMultitasking(void (*)())>
c0015ac6:	83 c4 14             	add    esp,0x14
c0015ac9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015ace:	5b                   	pop    ebx
c0015acf:	5e                   	pop    esi
c0015ad0:	c3                   	ret    
c0015ad1:	90                   	nop

c0015ad2 <Computer::disableNMI()>:
c0015ad2:	6a 00                	push   0x0
c0015ad4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ad8:	50                   	push   eax
c0015ad9:	e8 08 ff ff ff       	call   c00159e6 <Computer::enableNMI(bool)>
c0015ade:	5a                   	pop    edx
c0015adf:	59                   	pop    ecx
c0015ae0:	c3                   	ret    
c0015ae1:	90                   	nop

c0015ae2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0015ae2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015ae6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015aea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015aee:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c0015af5:	75 0b                	jne    c0015b02 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c0015af7:	b1 80                	mov    cl,0x80
c0015af9:	09 c8                	or     eax,ecx
c0015afb:	e6 70                	out    0x70,al
c0015afd:	88 d0                	mov    al,dl
c0015aff:	e6 71                	out    0x71,al
c0015b01:	c3                   	ret    
c0015b02:	31 c9                	xor    ecx,ecx
c0015b04:	eb f3                	jmp    c0015af9 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c0015b06 <Computer::handleNMI()>:
c0015b06:	56                   	push   esi
c0015b07:	53                   	push   ebx
c0015b08:	83 ec 10             	sub    esp,0x10
c0015b0b:	e4 92                	in     al,0x92
c0015b0d:	89 c6                	mov    esi,eax
c0015b0f:	e4 61                	in     al,0x61
c0015b11:	68 9e 0e 03 c0       	push   0xc0030e9e
c0015b16:	88 c3                	mov    bl,al
c0015b18:	e8 78 36 00 00       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0015b1d:	83 c4 10             	add    esp,0x10
c0015b20:	83 e6 10             	and    esi,0x10
c0015b23:	75 10                	jne    c0015b35 <Computer::handleNMI()+0x2f>
c0015b25:	f6 c3 40             	test   bl,0x40
c0015b28:	75 20                	jne    c0015b4a <Computer::handleNMI()+0x44>
c0015b2a:	80 e3 80             	and    bl,0x80
c0015b2d:	75 30                	jne    c0015b5f <Computer::handleNMI()+0x59>
c0015b2f:	83 c4 04             	add    esp,0x4
c0015b32:	5b                   	pop    ebx
c0015b33:	5e                   	pop    esi
c0015b34:	c3                   	ret    
c0015b35:	83 ec 0c             	sub    esp,0xc
c0015b38:	68 af 0e 03 c0       	push   0xc0030eaf
c0015b3d:	e8 6c a6 00 00       	call   c00201ae <KePanic(char const*)>
c0015b42:	83 c4 10             	add    esp,0x10
c0015b45:	f6 c3 40             	test   bl,0x40
c0015b48:	74 e0                	je     c0015b2a <Computer::handleNMI()+0x24>
c0015b4a:	83 ec 0c             	sub    esp,0xc
c0015b4d:	68 bc 0e 03 c0       	push   0xc0030ebc
c0015b52:	e8 57 a6 00 00       	call   c00201ae <KePanic(char const*)>
c0015b57:	83 c4 10             	add    esp,0x10
c0015b5a:	80 e3 80             	and    bl,0x80
c0015b5d:	74 d0                	je     c0015b2f <Computer::handleNMI()+0x29>
c0015b5f:	c7 44 24 10 c6 0e 03 c0 	mov    DWORD PTR [esp+0x10],0xc0030ec6
c0015b67:	83 c4 04             	add    esp,0x4
c0015b6a:	5b                   	pop    ebx
c0015b6b:	5e                   	pop    esi
c0015b6c:	e9 3d a6 00 00       	jmp    c00201ae <KePanic(char const*)>
c0015b71:	90                   	nop

c0015b72 <GDTEntry::setBase(unsigned int)>:
c0015b72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015b76:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015b7a:	89 c1                	mov    ecx,eax
c0015b7c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0015b80:	c1 e9 10             	shr    ecx,0x10
c0015b83:	c1 e8 18             	shr    eax,0x18
c0015b86:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0015b89:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0015b8c:	c3                   	ret    
c0015b8d:	90                   	nop

c0015b8e <GDTEntry::setLimit(unsigned int)>:
c0015b8e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015b92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015b96:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0015b99:	66 89 01             	mov    WORD PTR [ecx],ax
c0015b9c:	83 e2 f0             	and    edx,0xfffffff0
c0015b9f:	c1 e8 10             	shr    eax,0x10
c0015ba2:	83 e0 0f             	and    eax,0xf
c0015ba5:	09 d0                	or     eax,edx
c0015ba7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0015baa:	c3                   	ret    
c0015bab:	90                   	nop

c0015bac <GDT::GDT()>:
c0015bac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015bb0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015bb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015bba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015bc0:	90                   	nop
c0015bc1:	c3                   	ret    

c0015bc2 <GDT::addEntry(GDTEntry)>:
c0015bc2:	53                   	push   ebx
c0015bc3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015bc7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015bcb:	8b 02                	mov    eax,DWORD PTR [edx]
c0015bcd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015bd1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0015bd5:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0015bd9:	8d 48 01             	lea    ecx,[eax+0x1]
c0015bdc:	c1 e0 03             	shl    eax,0x3
c0015bdf:	89 0a                	mov    DWORD PTR [edx],ecx
c0015be1:	5b                   	pop    ebx
c0015be2:	c3                   	ret    
c0015be3:	90                   	nop

c0015be4 <GDT::getNumberOfEntries()>:
c0015be4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015be8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bea:	c3                   	ret    
c0015beb:	90                   	nop

c0015bec <GDT::flush()>:
c0015bec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015bf0:	8b 10                	mov    edx,DWORD PTR [eax]
c0015bf2:	83 c0 04             	add    eax,0x4
c0015bf5:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0015bfc:	a3 c6 a9 03 c0       	mov    ds:0xc003a9c6,eax
c0015c01:	66 89 15 c4 a9 03 c0 	mov    WORD PTR ds:0xc003a9c4,dx
c0015c08:	e9 4d a7 fe ff       	jmp    c000035a <loadGDT>
c0015c0d:	90                   	nop

c0015c0e <GDT::setup()>:
c0015c0e:	57                   	push   edi
c0015c0f:	56                   	push   esi
c0015c10:	53                   	push   ebx
c0015c11:	83 ec 30             	sub    esp,0x30
c0015c14:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0015c18:	6a 00                	push   0x0
c0015c1a:	8d 74 24 14          	lea    esi,[esp+0x14]
c0015c1e:	56                   	push   esi
c0015c1f:	e8 4e ff ff ff       	call   c0015b72 <GDTEntry::setBase(unsigned int)>
c0015c24:	6a 00                	push   0x0
c0015c26:	56                   	push   esi
c0015c27:	e8 62 ff ff ff       	call   c0015b8e <GDTEntry::setLimit(unsigned int)>
c0015c2c:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0015c34:	6a 00                	push   0x0
c0015c36:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015c3a:	56                   	push   esi
c0015c3b:	e8 32 ff ff ff       	call   c0015b72 <GDTEntry::setBase(unsigned int)>
c0015c40:	68 ff ff ff 00       	push   0xffffff
c0015c45:	56                   	push   esi
c0015c46:	e8 43 ff ff ff       	call   c0015b8e <GDTEntry::setLimit(unsigned int)>
c0015c4b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0015c4f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015c53:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015c57:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0015c5b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0015c60:	0d 00 9a c0 00       	or     eax,0xc09a00
c0015c65:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015c69:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0015c6d:	89 f8                	mov    eax,edi
c0015c6f:	89 fa                	mov    edx,edi
c0015c71:	80 e4 f7             	and    ah,0xf7
c0015c74:	80 ce 60             	or     dh,0x60
c0015c77:	89 c7                	mov    edi,eax
c0015c79:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015c7d:	80 cc 60             	or     ah,0x60
c0015c80:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015c84:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015c88:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0015c8c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015c90:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015c94:	83 c4 20             	add    esp,0x20
c0015c97:	6a 00                	push   0x0
c0015c99:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015c9d:	50                   	push   eax
c0015c9e:	e8 cf fe ff ff       	call   c0015b72 <GDTEntry::setBase(unsigned int)>
c0015ca3:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0015ca7:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0015cab:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0015caf:	83 e0 3f             	and    eax,0x3f
c0015cb2:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015cb6:	6a 00                	push   0x0
c0015cb8:	8d 44 24 34          	lea    eax,[esp+0x34]
c0015cbc:	50                   	push   eax
c0015cbd:	e8 b0 fe ff ff       	call   c0015b72 <GDTEntry::setBase(unsigned int)>
c0015cc2:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0015cc6:	83 e0 3f             	and    eax,0x3f
c0015cc9:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0015ccd:	83 c4 0c             	add    esp,0xc
c0015cd0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015cd4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015cd8:	53                   	push   ebx
c0015cd9:	e8 e4 fe ff ff       	call   c0015bc2 <GDT::addEntry(GDTEntry)>
c0015cde:	83 c4 0c             	add    esp,0xc
c0015ce1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015ce5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015ce9:	53                   	push   ebx
c0015cea:	e8 d3 fe ff ff       	call   c0015bc2 <GDT::addEntry(GDTEntry)>
c0015cef:	83 c4 0c             	add    esp,0xc
c0015cf2:	57                   	push   edi
c0015cf3:	56                   	push   esi
c0015cf4:	53                   	push   ebx
c0015cf5:	e8 c8 fe ff ff       	call   c0015bc2 <GDT::addEntry(GDTEntry)>
c0015cfa:	83 c4 0c             	add    esp,0xc
c0015cfd:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015d01:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015d05:	53                   	push   ebx
c0015d06:	e8 b7 fe ff ff       	call   c0015bc2 <GDT::addEntry(GDTEntry)>
c0015d0b:	83 c4 0c             	add    esp,0xc
c0015d0e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015d12:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015d16:	53                   	push   ebx
c0015d17:	e8 a6 fe ff ff       	call   c0015bc2 <GDT::addEntry(GDTEntry)>
c0015d1c:	83 c4 0c             	add    esp,0xc
c0015d1f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015d23:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015d27:	53                   	push   ebx
c0015d28:	e8 95 fe ff ff       	call   c0015bc2 <GDT::addEntry(GDTEntry)>
c0015d2d:	83 c4 0c             	add    esp,0xc
c0015d30:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015d34:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015d38:	53                   	push   ebx
c0015d39:	e8 84 fe ff ff       	call   c0015bc2 <GDT::addEntry(GDTEntry)>
c0015d3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d41:	e8 a6 fe ff ff       	call   c0015bec <GDT::flush()>
c0015d46:	83 c4 40             	add    esp,0x40
c0015d49:	5b                   	pop    ebx
c0015d4a:	5e                   	pop    esi
c0015d4b:	5f                   	pop    edi
c0015d4c:	c3                   	ret    

c0015d4d <idleFunction(void*)>:
c0015d4d:	83 ec 0c             	sub    esp,0xc
c0015d50:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0015d55:	48                   	dec    eax
c0015d56:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0015d5b:	75 01                	jne    c0015d5e <idleFunction(void*)+0x11>
c0015d5d:	fb                   	sti    
c0015d5e:	e8 11 0d 01 00       	call   c0026a74 <HalSystemIdle()>
c0015d63:	e8 7a 8a 01 00       	call   c002e7e2 <idleCommon()>
c0015d68:	eb f4                	jmp    c0015d5e <idleFunction(void*)+0x11>
c0015d6a:	66 90                	xchg   ax,ax

c0015d6c <IDTEntry::IDTEntry(bool)>:
c0015d6c:	53                   	push   ebx
c0015d6d:	83 ec 04             	sub    esp,0x4
c0015d70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d74:	88 04 24             	mov    BYTE PTR [esp],al
c0015d77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d7b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0015d81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d85:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0015d89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d8d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015d90:	83 e2 f0             	and    edx,0xfffffff0
c0015d93:	83 ca 0e             	or     edx,0xe
c0015d96:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015d99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d9d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015da0:	83 e2 ef             	and    edx,0xffffffef
c0015da3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015da6:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0015daa:	85 c0                	test   eax,eax
c0015dac:	74 06                	je     c0015db4 <IDTEntry::IDTEntry(bool)+0x48>
c0015dae:	b2 03                	mov    dl,0x3
c0015db0:	eb 06                	jmp    c0015db8 <IDTEntry::IDTEntry(bool)+0x4c>
c0015db2:	66 90                	xchg   ax,ax
c0015db4:	b2 00                	mov    dl,0x0
c0015db6:	66 90                	xchg   ax,ax
c0015db8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015dbc:	83 e2 03             	and    edx,0x3
c0015dbf:	89 d3                	mov    ebx,edx
c0015dc1:	c1 e3 05             	shl    ebx,0x5
c0015dc4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015dc7:	83 e2 9f             	and    edx,0xffffff9f
c0015dca:	88 d1                	mov    cl,dl
c0015dcc:	88 da                	mov    dl,bl
c0015dce:	09 ca                	or     edx,ecx
c0015dd0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015dd3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015dd7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015dda:	83 ca 80             	or     edx,0xffffff80
c0015ddd:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015de0:	90                   	nop
c0015de1:	83 c4 04             	add    esp,0x4
c0015de4:	5b                   	pop    ebx
c0015de5:	c3                   	ret    

c0015de6 <IDTEntry::setOffset(unsigned int)>:
c0015de6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015dea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015dee:	66 89 02             	mov    WORD PTR [edx],ax
c0015df1:	c1 e8 10             	shr    eax,0x10
c0015df4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0015df8:	c3                   	ret    
c0015df9:	90                   	nop
c0015dfa:	66 90                	xchg   ax,ax

c0015dfc <IDT::IDT()>:
c0015dfc:	90                   	nop
c0015dfd:	c3                   	ret    

c0015dfe <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0015dfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e02:	83 c0 30             	add    eax,0x30
c0015e05:	c3                   	ret    

c0015e06 <IDT::addEntry(IDTEntry, int)>:
c0015e06:	53                   	push   ebx
c0015e07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e0b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015e0f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015e13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015e17:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c0015e1a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0015e1e:	5b                   	pop    ebx
c0015e1f:	c3                   	ret    

c0015e20 <IDT::addEntry(int, void (*)(), bool)>:
c0015e20:	53                   	push   ebx
c0015e21:	83 ec 10             	sub    esp,0x10
c0015e24:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0015e29:	50                   	push   eax
c0015e2a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0015e2e:	53                   	push   ebx
c0015e2f:	e8 38 ff ff ff       	call   c0015d6c <IDTEntry::IDTEntry(bool)>
c0015e34:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015e38:	53                   	push   ebx
c0015e39:	e8 a8 ff ff ff       	call   c0015de6 <IDTEntry::setOffset(unsigned int)>
c0015e3e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e42:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015e46:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015e4a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015e4e:	e8 b3 ff ff ff       	call   c0015e06 <IDT::addEntry(IDTEntry, int)>
c0015e53:	83 c4 30             	add    esp,0x30
c0015e56:	5b                   	pop    ebx
c0015e57:	c3                   	ret    

c0015e58 <IDT::flush()>:
c0015e58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e5c:	66 c7 05 cc a9 03 c0 ff 07 	mov    WORD PTR ds:0xc003a9cc,0x7ff
c0015e65:	a3 ce a9 03 c0       	mov    ds:0xc003a9ce,eax
c0015e6a:	0f 01 1d cc a9 03 c0 	lidtd  ds:0xc003a9cc
c0015e71:	c3                   	ret    

c0015e72 <IDT::setup()>:
c0015e72:	57                   	push   edi
c0015e73:	56                   	push   esi
c0015e74:	53                   	push   ebx
c0015e75:	83 ec 10             	sub    esp,0x10
c0015e78:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015e7c:	6a 00                	push   0x0
c0015e7e:	68 e0 de 02 c0       	push   0xc002dee0
c0015e83:	6a 00                	push   0x0
c0015e85:	53                   	push   ebx
c0015e86:	e8 95 ff ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c0015e8b:	6a 00                	push   0x0
c0015e8d:	68 f0 de 02 c0       	push   0xc002def0
c0015e92:	6a 01                	push   0x1
c0015e94:	53                   	push   ebx
c0015e95:	e8 86 ff ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c0015e9a:	83 c4 20             	add    esp,0x20
c0015e9d:	6a 00                	push   0x0
c0015e9f:	68 fa de 02 c0       	push   0xc002defa
c0015ea4:	6a 02                	push   0x2
c0015ea6:	53                   	push   ebx
c0015ea7:	e8 74 ff ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c0015eac:	6a 00                	push   0x0
c0015eae:	68 04 df 02 c0       	push   0xc002df04
c0015eb3:	6a 03                	push   0x3
c0015eb5:	53                   	push   ebx
c0015eb6:	e8 65 ff ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c0015ebb:	83 c4 20             	add    esp,0x20
c0015ebe:	6a 00                	push   0x0
c0015ec0:	68 0e df 02 c0       	push   0xc002df0e
c0015ec5:	6a 04                	push   0x4
c0015ec7:	53                   	push   ebx
c0015ec8:	e8 53 ff ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c0015ecd:	6a 00                	push   0x0
c0015ecf:	68 18 df 02 c0       	push   0xc002df18
c0015ed4:	6a 05                	push   0x5
c0015ed6:	53                   	push   ebx
c0015ed7:	e8 44 ff ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c0015edc:	83 c4 20             	add    esp,0x20
c0015edf:	6a 00                	push   0x0
c0015ee1:	68 22 df 02 c0       	push   0xc002df22
c0015ee6:	6a 06                	push   0x6
c0015ee8:	53                   	push   ebx
c0015ee9:	e8 32 ff ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c0015eee:	6a 00                	push   0x0
c0015ef0:	68 2c df 02 c0       	push   0xc002df2c
c0015ef5:	6a 07                	push   0x7
c0015ef7:	53                   	push   ebx
c0015ef8:	e8 23 ff ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c0015efd:	83 c4 20             	add    esp,0x20
c0015f00:	6a 00                	push   0x0
c0015f02:	68 36 df 02 c0       	push   0xc002df36
c0015f07:	6a 08                	push   0x8
c0015f09:	53                   	push   ebx
c0015f0a:	e8 11 ff ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c0015f0f:	6a 00                	push   0x0
c0015f11:	68 3e df 02 c0       	push   0xc002df3e
c0015f16:	6a 09                	push   0x9
c0015f18:	53                   	push   ebx
c0015f19:	e8 02 ff ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c0015f1e:	83 c4 20             	add    esp,0x20
c0015f21:	6a 00                	push   0x0
c0015f23:	68 48 df 02 c0       	push   0xc002df48
c0015f28:	6a 0a                	push   0xa
c0015f2a:	53                   	push   ebx
c0015f2b:	e8 f0 fe ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c0015f30:	6a 00                	push   0x0
c0015f32:	68 50 df 02 c0       	push   0xc002df50
c0015f37:	6a 0b                	push   0xb
c0015f39:	53                   	push   ebx
c0015f3a:	e8 e1 fe ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c0015f3f:	83 c4 20             	add    esp,0x20
c0015f42:	6a 00                	push   0x0
c0015f44:	68 58 df 02 c0       	push   0xc002df58
c0015f49:	6a 0c                	push   0xc
c0015f4b:	53                   	push   ebx
c0015f4c:	e8 cf fe ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c0015f51:	6a 00                	push   0x0
c0015f53:	68 60 df 02 c0       	push   0xc002df60
c0015f58:	6a 0d                	push   0xd
c0015f5a:	53                   	push   ebx
c0015f5b:	e8 c0 fe ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c0015f60:	83 c4 20             	add    esp,0x20
c0015f63:	6a 00                	push   0x0
c0015f65:	68 7a df 02 c0       	push   0xc002df7a
c0015f6a:	6a 0e                	push   0xe
c0015f6c:	53                   	push   ebx
c0015f6d:	e8 ae fe ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c0015f72:	6a 00                	push   0x0
c0015f74:	68 82 df 02 c0       	push   0xc002df82
c0015f79:	6a 0f                	push   0xf
c0015f7b:	53                   	push   ebx
c0015f7c:	e8 9f fe ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c0015f81:	83 c4 20             	add    esp,0x20
c0015f84:	6a 00                	push   0x0
c0015f86:	68 8c df 02 c0       	push   0xc002df8c
c0015f8b:	6a 10                	push   0x10
c0015f8d:	53                   	push   ebx
c0015f8e:	e8 8d fe ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c0015f93:	6a 00                	push   0x0
c0015f95:	68 96 df 02 c0       	push   0xc002df96
c0015f9a:	6a 11                	push   0x11
c0015f9c:	53                   	push   ebx
c0015f9d:	e8 7e fe ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c0015fa2:	83 c4 20             	add    esp,0x20
c0015fa5:	6a 00                	push   0x0
c0015fa7:	68 a0 df 02 c0       	push   0xc002dfa0
c0015fac:	6a 12                	push   0x12
c0015fae:	53                   	push   ebx
c0015faf:	e8 6c fe ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c0015fb4:	6a 01                	push   0x1
c0015fb6:	68 3a e0 02 c0       	push   0xc002e03a
c0015fbb:	6a 60                	push   0x60
c0015fbd:	53                   	push   ebx
c0015fbe:	e8 5d fe ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c0015fc3:	83 c4 20             	add    esp,0x20
c0015fc6:	6a 00                	push   0x0
c0015fc8:	68 41 e0 02 c0       	push   0xc002e041
c0015fcd:	6a 20                	push   0x20
c0015fcf:	53                   	push   ebx
c0015fd0:	e8 4b fe ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c0015fd5:	6a 00                	push   0x0
c0015fd7:	68 2c e0 02 c0       	push   0xc002e02c
c0015fdc:	6a 21                	push   0x21
c0015fde:	53                   	push   ebx
c0015fdf:	e8 3c fe ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c0015fe4:	83 c4 20             	add    esp,0x20
c0015fe7:	6a 00                	push   0x0
c0015fe9:	68 33 e0 02 c0       	push   0xc002e033
c0015fee:	6a 22                	push   0x22
c0015ff0:	53                   	push   ebx
c0015ff1:	e8 2a fe ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c0015ff6:	6a 00                	push   0x0
c0015ff8:	68 aa df 02 c0       	push   0xc002dfaa
c0015ffd:	6a 23                	push   0x23
c0015fff:	53                   	push   ebx
c0016000:	e8 1b fe ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c0016005:	83 c4 20             	add    esp,0x20
c0016008:	6a 00                	push   0x0
c001600a:	68 b4 df 02 c0       	push   0xc002dfb4
c001600f:	6a 24                	push   0x24
c0016011:	53                   	push   ebx
c0016012:	e8 09 fe ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c0016017:	6a 00                	push   0x0
c0016019:	68 be df 02 c0       	push   0xc002dfbe
c001601e:	6a 25                	push   0x25
c0016020:	53                   	push   ebx
c0016021:	e8 fa fd ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c0016026:	83 c4 20             	add    esp,0x20
c0016029:	6a 00                	push   0x0
c001602b:	68 c8 df 02 c0       	push   0xc002dfc8
c0016030:	6a 26                	push   0x26
c0016032:	53                   	push   ebx
c0016033:	e8 e8 fd ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c0016038:	6a 00                	push   0x0
c001603a:	68 d2 df 02 c0       	push   0xc002dfd2
c001603f:	6a 27                	push   0x27
c0016041:	53                   	push   ebx
c0016042:	e8 d9 fd ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c0016047:	83 c4 20             	add    esp,0x20
c001604a:	6a 00                	push   0x0
c001604c:	68 dc df 02 c0       	push   0xc002dfdc
c0016051:	6a 28                	push   0x28
c0016053:	53                   	push   ebx
c0016054:	e8 c7 fd ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c0016059:	6a 00                	push   0x0
c001605b:	68 e6 df 02 c0       	push   0xc002dfe6
c0016060:	6a 29                	push   0x29
c0016062:	53                   	push   ebx
c0016063:	e8 b8 fd ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c0016068:	83 c4 20             	add    esp,0x20
c001606b:	6a 00                	push   0x0
c001606d:	68 f0 df 02 c0       	push   0xc002dff0
c0016072:	6a 2a                	push   0x2a
c0016074:	53                   	push   ebx
c0016075:	e8 a6 fd ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c001607a:	6a 00                	push   0x0
c001607c:	68 fa df 02 c0       	push   0xc002dffa
c0016081:	6a 2b                	push   0x2b
c0016083:	53                   	push   ebx
c0016084:	e8 97 fd ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c0016089:	83 c4 20             	add    esp,0x20
c001608c:	6a 00                	push   0x0
c001608e:	68 04 e0 02 c0       	push   0xc002e004
c0016093:	6a 2c                	push   0x2c
c0016095:	53                   	push   ebx
c0016096:	e8 85 fd ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c001609b:	6a 00                	push   0x0
c001609d:	68 0e e0 02 c0       	push   0xc002e00e
c00160a2:	6a 2d                	push   0x2d
c00160a4:	53                   	push   ebx
c00160a5:	e8 76 fd ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c00160aa:	83 c4 20             	add    esp,0x20
c00160ad:	6a 00                	push   0x0
c00160af:	68 18 e0 02 c0       	push   0xc002e018
c00160b4:	6a 2e                	push   0x2e
c00160b6:	53                   	push   ebx
c00160b7:	e8 64 fd ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c00160bc:	6a 00                	push   0x0
c00160be:	68 22 e0 02 c0       	push   0xc002e022
c00160c3:	6a 2f                	push   0x2f
c00160c5:	53                   	push   ebx
c00160c6:	e8 55 fd ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c00160cb:	83 c4 20             	add    esp,0x20
c00160ce:	6a 00                	push   0x0
c00160d0:	68 7c e1 02 c0       	push   0xc002e17c
c00160d5:	6a 30                	push   0x30
c00160d7:	53                   	push   ebx
c00160d8:	e8 43 fd ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c00160dd:	6a 00                	push   0x0
c00160df:	68 86 e1 02 c0       	push   0xc002e186
c00160e4:	6a 31                	push   0x31
c00160e6:	53                   	push   ebx
c00160e7:	e8 34 fd ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c00160ec:	83 c4 20             	add    esp,0x20
c00160ef:	6a 00                	push   0x0
c00160f1:	68 90 e1 02 c0       	push   0xc002e190
c00160f6:	6a 32                	push   0x32
c00160f8:	53                   	push   ebx
c00160f9:	e8 22 fd ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c00160fe:	6a 00                	push   0x0
c0016100:	68 9a e1 02 c0       	push   0xc002e19a
c0016105:	6a 33                	push   0x33
c0016107:	53                   	push   ebx
c0016108:	e8 13 fd ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c001610d:	83 c4 20             	add    esp,0x20
c0016110:	6a 00                	push   0x0
c0016112:	68 a4 e1 02 c0       	push   0xc002e1a4
c0016117:	6a 34                	push   0x34
c0016119:	53                   	push   ebx
c001611a:	e8 01 fd ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c001611f:	6a 00                	push   0x0
c0016121:	68 ae e1 02 c0       	push   0xc002e1ae
c0016126:	6a 35                	push   0x35
c0016128:	53                   	push   ebx
c0016129:	e8 f2 fc ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c001612e:	83 c4 20             	add    esp,0x20
c0016131:	6a 00                	push   0x0
c0016133:	68 b8 e1 02 c0       	push   0xc002e1b8
c0016138:	6a 36                	push   0x36
c001613a:	53                   	push   ebx
c001613b:	e8 e0 fc ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c0016140:	6a 00                	push   0x0
c0016142:	68 c2 e1 02 c0       	push   0xc002e1c2
c0016147:	6a 37                	push   0x37
c0016149:	53                   	push   ebx
c001614a:	e8 d1 fc ff ff       	call   c0015e20 <IDT::addEntry(int, void (*)(), bool)>
c001614f:	83 c4 1c             	add    esp,0x1c
c0016152:	6a 03                	push   0x3
c0016154:	6a 02                	push   0x2
c0016156:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c001615c:	e8 13 25 00 00       	call   c0018674 <VAS::allocatePages(int, int)>
c0016161:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0016168:	89 c6                	mov    esi,eax
c001616a:	e8 97 01 00 00       	call   c0016306 <malloc>
c001616f:	81 c6 00 20 00 00    	add    esi,0x2000
c0016175:	89 04 24             	mov    DWORD PTR [esp],eax
c0016178:	89 c7                	mov    edi,eax
c001617a:	e8 15 16 00 00       	call   c0017794 <TSS::TSS()>
c001617f:	83 c4 0c             	add    esp,0xc
c0016182:	68 36 df 02 c0       	push   0xc002df36
c0016187:	56                   	push   esi
c0016188:	57                   	push   edi
c0016189:	e8 4a 16 00 00       	call   c00177d8 <TSS::setup(unsigned long, unsigned long)>
c001618e:	89 c6                	mov    esi,eax
c0016190:	58                   	pop    eax
c0016191:	5a                   	pop    edx
c0016192:	6a 00                	push   0x0
c0016194:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016198:	50                   	push   eax
c0016199:	e8 ce fb ff ff       	call   c0015d6c <IDTEntry::IDTEntry(bool)>
c001619e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00161a2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00161a7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00161ae:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c00161b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00161b8:	80 ce 05             	or     dh,0x5
c00161bb:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c00161be:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00161c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00161c6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00161c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00161cc:	e8 87 fc ff ff       	call   c0015e58 <IDT::flush()>
c00161d1:	83 c4 20             	add    esp,0x20
c00161d4:	5b                   	pop    ebx
c00161d5:	5e                   	pop    esi
c00161d6:	5f                   	pop    edi
c00161d7:	c3                   	ret    

c00161d8 <sbrk>:
c00161d8:	55                   	push   ebp
c00161d9:	57                   	push   edi
c00161da:	56                   	push   esi
c00161db:	53                   	push   ebx
c00161dc:	83 ec 1c             	sub    esp,0x1c
c00161df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00161e3:	85 c0                	test   eax,eax
c00161e5:	74 61                	je     c0016248 <sbrk+0x70>
c00161e7:	78 66                	js     c001624f <sbrk+0x77>
c00161e9:	8b 15 04 3a 03 c0    	mov    edx,DWORD PTR ds:0xc0033a04
c00161ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00161f3:	05 ff 0f 00 00       	add    eax,0xfff
c00161f8:	89 c5                	mov    ebp,eax
c00161fa:	78 6b                	js     c0016267 <sbrk+0x8f>
c00161fc:	c1 fd 0c             	sar    ebp,0xc
c00161ff:	bb 00 00 00 00       	mov    ebx,0x0
c0016204:	8b 35 b0 aa 03 c0    	mov    esi,DWORD PTR ds:0xc003aab0
c001620a:	8b 3d 04 3a 03 c0    	mov    edi,DWORD PTR ds:0xc0033a04
c0016210:	e8 fa 03 00 00       	call   c001660f <Phys::allocatePage()>
c0016215:	68 01 04 00 00       	push   0x401
c001621a:	57                   	push   edi
c001621b:	50                   	push   eax
c001621c:	56                   	push   esi
c001621d:	e8 4e 23 00 00       	call   c0018570 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016222:	81 05 04 3a 03 c0 00 10 00 00 	add    DWORD PTR ds:0xc0033a04,0x1000
c001622c:	83 c3 01             	add    ebx,0x1
c001622f:	83 c4 10             	add    esp,0x10
c0016232:	39 dd                	cmp    ebp,ebx
c0016234:	75 ce                	jne    c0016204 <sbrk+0x2c>
c0016236:	0f 20 d8             	mov    eax,cr3
c0016239:	0f 22 d8             	mov    cr3,eax
c001623c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016240:	83 c4 1c             	add    esp,0x1c
c0016243:	5b                   	pop    ebx
c0016244:	5e                   	pop    esi
c0016245:	5f                   	pop    edi
c0016246:	5d                   	pop    ebp
c0016247:	c3                   	ret    
c0016248:	a1 04 3a 03 c0       	mov    eax,ds:0xc0033a04
c001624d:	eb f1                	jmp    c0016240 <sbrk+0x68>
c001624f:	83 ec 08             	sub    esp,0x8
c0016252:	50                   	push   eax
c0016253:	68 68 0f 03 c0       	push   0xc0030f68
c0016258:	e8 38 2f 00 00       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c001625d:	83 c4 10             	add    esp,0x10
c0016260:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016265:	eb d9                	jmp    c0016240 <sbrk+0x68>
c0016267:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c001626d:	eb 8d                	jmp    c00161fc <sbrk+0x24>

c001626f <mmap>:
c001626f:	83 ec 18             	sub    esp,0x18
c0016272:	68 98 0f 03 c0       	push   0xc0030f98
c0016277:	e8 32 9f 00 00       	call   c00201ae <KePanic(char const*)>
c001627c:	b8 00 00 00 00       	mov    eax,0x0
c0016281:	83 c4 1c             	add    esp,0x1c
c0016284:	c3                   	ret    

c0016285 <munmap>:
c0016285:	83 ec 18             	sub    esp,0x18
c0016288:	68 9d 0f 03 c0       	push   0xc0030f9d
c001628d:	e8 1c 9f 00 00       	call   c00201ae <KePanic(char const*)>
c0016292:	b8 00 00 00 00       	mov    eax,0x0
c0016297:	83 c4 1c             	add    esp,0x1c
c001629a:	c3                   	ret    

c001629b <liballoc_lock()>:
c001629b:	fa                   	cli    
c001629c:	83 05 d0 01 04 c0 01 	add    DWORD PTR ds:0xc00401d0,0x1
c00162a3:	b8 00 00 00 00       	mov    eax,0x0
c00162a8:	c3                   	ret    

c00162a9 <liballoc_unlock()>:
c00162a9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00162ae:	83 e8 01             	sub    eax,0x1
c00162b1:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00162b6:	75 01                	jne    c00162b9 <liballoc_unlock()+0x10>
c00162b8:	fb                   	sti    
c00162b9:	b8 00 00 00 00       	mov    eax,0x0
c00162be:	c3                   	ret    

c00162bf <liballoc_alloc(int)>:
c00162bf:	83 ec 10             	sub    esp,0x10
c00162c2:	6a 01                	push   0x1
c00162c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00162c8:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c00162ce:	e8 a1 23 00 00       	call   c0018674 <VAS::allocatePages(int, int)>
c00162d3:	83 c4 1c             	add    esp,0x1c
c00162d6:	c3                   	ret    

c00162d7 <liballoc_free(void*, int)>:
c00162d7:	83 ec 14             	sub    esp,0x14
c00162da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00162de:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c00162e4:	e8 cf 1f 00 00       	call   c00182b8 <VAS::freeAllocatedPages(unsigned long)>
c00162e9:	b8 00 00 00 00       	mov    eax,0x0
c00162ee:	83 c4 1c             	add    esp,0x1c
c00162f1:	c3                   	ret    

c00162f2 <realloc>:
c00162f2:	83 ec 14             	sub    esp,0x14
c00162f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162fd:	e8 ec b3 fe ff       	call   c00016ee <dlrealloc>
c0016302:	83 c4 1c             	add    esp,0x1c
c0016305:	c3                   	ret    

c0016306 <malloc>:
c0016306:	83 ec 18             	sub    esp,0x18
c0016309:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001630d:	e8 9f ae fe ff       	call   c00011b1 <dlmalloc>
c0016312:	83 c4 1c             	add    esp,0x1c
c0016315:	c3                   	ret    

c0016316 <free>:
c0016316:	83 ec 18             	sub    esp,0x18
c0016319:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001631d:	e8 37 ab fe ff       	call   c0000e59 <dlfree>
c0016322:	83 c4 1c             	add    esp,0x1c
c0016325:	c3                   	ret    

c0016326 <rfree>:
c0016326:	83 ec 18             	sub    esp,0x18
c0016329:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001632d:	e8 27 ab fe ff       	call   c0000e59 <dlfree>
c0016332:	83 c4 1c             	add    esp,0x1c
c0016335:	c3                   	ret    

c0016336 <calloc>:
c0016336:	56                   	push   esi
c0016337:	53                   	push   ebx
c0016338:	83 ec 10             	sub    esp,0x10
c001633b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001633f:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0016344:	53                   	push   ebx
c0016345:	e8 bc ff ff ff       	call   c0016306 <malloc>
c001634a:	89 c6                	mov    esi,eax
c001634c:	83 c4 0c             	add    esp,0xc
c001634f:	53                   	push   ebx
c0016350:	6a 00                	push   0x0
c0016352:	50                   	push   eax
c0016353:	e8 98 a1 fe ff       	call   c00004f0 <memset>
c0016358:	89 f0                	mov    eax,esi
c001635a:	83 c4 14             	add    esp,0x14
c001635d:	5b                   	pop    ebx
c001635e:	5e                   	pop    esi
c001635f:	c3                   	ret    

c0016360 <KeEntryPoint>:
c0016360:	57                   	push   edi
c0016361:	bf f9 03 00 00       	mov    edi,0x3f9
c0016366:	56                   	push   esi
c0016367:	89 fa                	mov    edx,edi
c0016369:	53                   	push   ebx
c001636a:	31 f6                	xor    esi,esi
c001636c:	83 ec 2c             	sub    esp,0x2c
c001636f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0016374:	a3 d4 a9 03 c0       	mov    ds:0xc003a9d4,eax
c0016379:	89 f0                	mov    eax,esi
c001637b:	ee                   	out    dx,al
c001637c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0016381:	b0 80                	mov    al,0x80
c0016383:	89 da                	mov    edx,ebx
c0016385:	ee                   	out    dx,al
c0016386:	b1 03                	mov    cl,0x3
c0016388:	ba f8 03 00 00       	mov    edx,0x3f8
c001638d:	88 c8                	mov    al,cl
c001638f:	ee                   	out    dx,al
c0016390:	89 f0                	mov    eax,esi
c0016392:	89 fa                	mov    edx,edi
c0016394:	ee                   	out    dx,al
c0016395:	88 c8                	mov    al,cl
c0016397:	89 da                	mov    edx,ebx
c0016399:	ee                   	out    dx,al
c001639a:	b0 c7                	mov    al,0xc7
c001639c:	ba fa 03 00 00       	mov    edx,0x3fa
c00163a1:	ee                   	out    dx,al
c00163a2:	b0 0b                	mov    al,0xb
c00163a4:	ba fc 03 00 00       	mov    edx,0x3fc
c00163a9:	ee                   	out    dx,al
c00163aa:	68 a4 0f 03 c0       	push   0xc0030fa4
c00163af:	e8 e1 2d 00 00       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c00163b4:	e8 16 96 00 00       	call   c001f9cf <KeDisplaySplashScreen()>
c00163b9:	a1 24 05 00 00       	mov    eax,ds:0x524
c00163be:	05 ff 0f 00 00       	add    eax,0xfff
c00163c3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00163c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00163cb:	e8 ad 03 00 00       	call   c001677d <Phys::physicalMemorySetup(unsigned int)>
c00163d0:	e8 66 1c 00 00       	call   c001803b <Virt::virtualMemorySetup()>
c00163d5:	e8 3f 95 00 00       	call   c001f919 <KeInitialiseAtexit()>
c00163da:	58                   	pop    eax
c00163db:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c00163df:	53                   	push   ebx
c00163e0:	e8 53 1f 00 00       	call   c0018338 <VAS::VAS()>
c00163e5:	89 1d b0 aa 03 c0    	mov    DWORD PTR ds:0xc003aab0,ebx
c00163eb:	e8 8a 83 01 00       	call   c002e77a <_init>
c00163f0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00163f7:	e8 0a ff ff ff       	call   c0016306 <malloc>
c00163fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00163ff:	89 c6                	mov    esi,eax
c0016401:	e8 30 f2 ff ff       	call   c0015636 <Computer::Computer()>
c0016406:	53                   	push   ebx
c0016407:	89 35 bc a9 03 c0    	mov    DWORD PTR ds:0xc003a9bc,esi
c001640d:	6a 00                	push   0x0
c001640f:	6a 00                	push   0x0
c0016411:	56                   	push   esi
c0016412:	e8 e7 f5 ff ff       	call   c00159fe <Computer::open(int, int, void*)>
c0016417:	83 c4 14             	add    esp,0x14
c001641a:	53                   	push   ebx
c001641b:	e8 e2 1f 00 00       	call   c0018402 <VAS::~VAS()>
c0016420:	83 c4 30             	add    esp,0x30
c0016423:	5b                   	pop    ebx
c0016424:	5e                   	pop    esi
c0016425:	5f                   	pop    edi
c0016426:	c3                   	ret    

c0016427 <Phys::allocateDMA(unsigned long)>:
c0016427:	55                   	push   ebp
c0016428:	31 ed                	xor    ebp,ebp
c001642a:	57                   	push   edi
c001642b:	56                   	push   esi
c001642c:	53                   	push   ebx
c001642d:	31 db                	xor    ebx,ebx
c001642f:	83 ec 1c             	sub    esp,0x1c
c0016432:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016436:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001643e:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0016444:	31 c0                	xor    eax,eax
c0016446:	c1 ef 0c             	shr    edi,0xc
c0016449:	eb 1b                	jmp    c0016466 <Phys::allocateDMA(unsigned long)+0x3f>
c001644b:	85 c0                	test   eax,eax
c001644d:	75 06                	jne    c0016455 <Phys::allocateDMA(unsigned long)+0x2e>
c001644f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0016453:	89 dd                	mov    ebp,ebx
c0016455:	8d 70 01             	lea    esi,[eax+0x1]
c0016458:	39 f7                	cmp    edi,esi
c001645a:	74 37                	je     c0016493 <Phys::allocateDMA(unsigned long)+0x6c>
c001645c:	89 f0                	mov    eax,esi
c001645e:	83 c3 01             	add    ebx,0x1
c0016461:	83 fb 0f             	cmp    ebx,0xf
c0016464:	7f 13                	jg     c0016479 <Phys::allocateDMA(unsigned long)+0x52>
c0016466:	80 bb f0 a9 03 c0 00 	cmp    BYTE PTR [ebx-0x3ffc5610],0x0
c001646d:	74 dc                	je     c001644b <Phys::allocateDMA(unsigned long)+0x24>
c001646f:	31 c0                	xor    eax,eax
c0016471:	83 c3 01             	add    ebx,0x1
c0016474:	83 fb 0f             	cmp    ebx,0xf
c0016477:	7e ed                	jle    c0016466 <Phys::allocateDMA(unsigned long)+0x3f>
c0016479:	83 ec 0c             	sub    esp,0xc
c001647c:	68 bc 0f 03 c0       	push   0xc0030fbc
c0016481:	e8 28 9d 00 00       	call   c00201ae <KePanic(char const*)>
c0016486:	83 c4 10             	add    esp,0x10
c0016489:	31 c0                	xor    eax,eax
c001648b:	83 c4 1c             	add    esp,0x1c
c001648e:	5b                   	pop    ebx
c001648f:	5e                   	pop    esi
c0016490:	5f                   	pop    edi
c0016491:	5d                   	pop    ebp
c0016492:	c3                   	ret    
c0016493:	89 e9                	mov    ecx,ebp
c0016495:	c1 f9 04             	sar    ecx,0x4
c0016498:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001649c:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c00164a0:	89 ca                	mov    edx,ecx
c00164a2:	83 ea 01             	sub    edx,0x1
c00164a5:	79 03                	jns    c00164aa <Phys::allocateDMA(unsigned long)+0x83>
c00164a7:	8d 51 0e             	lea    edx,[ecx+0xe]
c00164aa:	c1 fa 04             	sar    edx,0x4
c00164ad:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c00164b1:	74 08                	je     c00164bb <Phys::allocateDMA(unsigned long)+0x94>
c00164b3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00164b7:	31 c0                	xor    eax,eax
c00164b9:	eb b6                	jmp    c0016471 <Phys::allocateDMA(unsigned long)+0x4a>
c00164bb:	85 f6                	test   esi,esi
c00164bd:	74 17                	je     c00164d6 <Phys::allocateDMA(unsigned long)+0xaf>
c00164bf:	8d 95 f0 a9 03 c0    	lea    edx,[ebp-0x3ffc5610]
c00164c5:	8d 84 05 f1 a9 03 c0 	lea    eax,[ebp+eax*1-0x3ffc560f]
c00164cc:	c6 02 01             	mov    BYTE PTR [edx],0x1
c00164cf:	83 c2 01             	add    edx,0x1
c00164d2:	39 d0                	cmp    eax,edx
c00164d4:	75 f6                	jne    c00164cc <Phys::allocateDMA(unsigned long)+0xa5>
c00164d6:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c00164db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00164df:	01 f8                	add    eax,edi
c00164e1:	85 d2                	test   edx,edx
c00164e3:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c00164e8:	74 17                	je     c0016501 <Phys::allocateDMA(unsigned long)+0xda>
c00164ea:	83 ec 0c             	sub    esp,0xc
c00164ed:	68 bc 0f 03 c0       	push   0xc0030fbc
c00164f2:	e8 b7 9c 00 00       	call   c00201ae <KePanic(char const*)>
c00164f7:	83 c4 10             	add    esp,0x10
c00164fa:	89 f0                	mov    eax,esi
c00164fc:	e9 5d ff ff ff       	jmp    c001645e <Phys::allocateDMA(unsigned long)+0x37>
c0016501:	c1 e5 0c             	shl    ebp,0xc
c0016504:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c001650a:	e9 7c ff ff ff       	jmp    c001648b <Phys::allocateDMA(unsigned long)+0x64>

c001650f <Phys::freeDMA(unsigned long, unsigned long)>:
c001650f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016513:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0016519:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c001651e:	c1 ea 0c             	shr    edx,0xc
c0016521:	29 d0                	sub    eax,edx
c0016523:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c0016528:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001652c:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0016531:	c1 e8 0c             	shr    eax,0xc
c0016534:	85 d2                	test   edx,edx
c0016536:	74 11                	je     c0016549 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0016538:	05 f0 a9 03 c0       	add    eax,0xc003a9f0
c001653d:	01 c2                	add    edx,eax
c001653f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0016542:	83 c0 01             	add    eax,0x1
c0016545:	39 d0                	cmp    eax,edx
c0016547:	75 f6                	jne    c001653f <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0016549:	c3                   	ret    

c001654a <Phys::setPageState(unsigned long, bool)>:
c001654a:	57                   	push   edi
c001654b:	56                   	push   esi
c001654c:	8b 35 08 3a 03 c0    	mov    esi,DWORD PTR ds:0xc0033a08
c0016552:	53                   	push   ebx
c0016553:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0016558:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001655c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016560:	0f b6 c0             	movzx  eax,al
c0016563:	89 ca                	mov    edx,ecx
c0016565:	83 e1 07             	and    ecx,0x7
c0016568:	c1 ea 03             	shr    edx,0x3
c001656b:	d3 c3                	rol    ebx,cl
c001656d:	01 d6                	add    esi,edx
c001656f:	d3 e0                	shl    eax,cl
c0016571:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0016574:	21 fb                	and    ebx,edi
c0016576:	88 1e                	mov    BYTE PTR [esi],bl
c0016578:	8b 1d 08 3a 03 c0    	mov    ebx,DWORD PTR ds:0xc0033a08
c001657e:	01 da                	add    edx,ebx
c0016580:	8a 0a                	mov    cl,BYTE PTR [edx]
c0016582:	09 c8                	or     eax,ecx
c0016584:	88 02                	mov    BYTE PTR [edx],al
c0016586:	5b                   	pop    ebx
c0016587:	5e                   	pop    esi
c0016588:	5f                   	pop    edi
c0016589:	c3                   	ret    

c001658a <Phys::getPageState(unsigned long)>:
c001658a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001658e:	8b 15 08 3a 03 c0    	mov    edx,DWORD PTR ds:0xc0033a08
c0016594:	89 c8                	mov    eax,ecx
c0016596:	83 e1 07             	and    ecx,0x7
c0016599:	c1 e8 03             	shr    eax,0x3
c001659c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c00165a0:	d3 f8                	sar    eax,cl
c00165a2:	83 e0 01             	and    eax,0x1
c00165a5:	c3                   	ret    

c00165a6 <Phys::freePage(unsigned long)>:
c00165a6:	53                   	push   ebx
c00165a7:	83 ec 08             	sub    esp,0x8
c00165aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165ae:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c00165b4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00165ba:	76 41                	jbe    c00165fd <Phys::freePage(unsigned long)+0x57>
c00165bc:	c1 e8 0c             	shr    eax,0xc
c00165bf:	50                   	push   eax
c00165c0:	89 c3                	mov    ebx,eax
c00165c2:	e8 c3 ff ff ff       	call   c001658a <Phys::getPageState(unsigned long)>
c00165c7:	5a                   	pop    edx
c00165c8:	84 c0                	test   al,al
c00165ca:	74 20                	je     c00165ec <Phys::freePage(unsigned long)+0x46>
c00165cc:	83 ec 08             	sub    esp,0x8
c00165cf:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c00165d4:	6a 00                	push   0x0
c00165d6:	83 e8 01             	sub    eax,0x1
c00165d9:	53                   	push   ebx
c00165da:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c00165df:	e8 66 ff ff ff       	call   c001654a <Phys::setPageState(unsigned long, bool)>
c00165e4:	83 c4 10             	add    esp,0x10
c00165e7:	83 c4 08             	add    esp,0x8
c00165ea:	5b                   	pop    ebx
c00165eb:	c3                   	ret    
c00165ec:	c7 44 24 10 61 10 03 c0 	mov    DWORD PTR [esp+0x10],0xc0031061
c00165f4:	83 c4 08             	add    esp,0x8
c00165f7:	5b                   	pop    ebx
c00165f8:	e9 b1 9b 00 00       	jmp    c00201ae <KePanic(char const*)>
c00165fd:	68 00 10 00 00       	push   0x1000
c0016602:	50                   	push   eax
c0016603:	e8 07 ff ff ff       	call   c001650f <Phys::freeDMA(unsigned long, unsigned long)>
c0016608:	59                   	pop    ecx
c0016609:	5b                   	pop    ebx
c001660a:	83 c4 08             	add    esp,0x8
c001660d:	5b                   	pop    ebx
c001660e:	c3                   	ret    

c001660f <Phys::allocatePage()>:
c001660f:	56                   	push   esi
c0016610:	53                   	push   ebx
c0016611:	83 ec 14             	sub    esp,0x14
c0016614:	8b 35 dc a9 03 c0    	mov    esi,DWORD PTR ds:0xc003a9dc
c001661a:	89 f3                	mov    ebx,esi
c001661c:	eb 0a                	jmp    c0016628 <Phys::allocatePage()+0x19>
c001661e:	89 1d dc a9 03 c0    	mov    DWORD PTR ds:0xc003a9dc,ebx
c0016624:	39 de                	cmp    esi,ebx
c0016626:	74 26                	je     c001664e <Phys::allocatePage()+0x3f>
c0016628:	53                   	push   ebx
c0016629:	e8 5c ff ff ff       	call   c001658a <Phys::getPageState(unsigned long)>
c001662e:	5a                   	pop    edx
c001662f:	84 c0                	test   al,al
c0016631:	74 67                	je     c001669a <Phys::allocatePage()+0x8b>
c0016633:	83 c3 01             	add    ebx,0x1
c0016636:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c001663c:	75 e0                	jne    c001661e <Phys::allocatePage()+0xf>
c001663e:	31 db                	xor    ebx,ebx
c0016640:	c7 05 dc a9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a9dc,0x0
c001664a:	39 de                	cmp    esi,ebx
c001664c:	75 da                	jne    c0016628 <Phys::allocatePage()+0x19>
c001664e:	83 ec 0c             	sub    esp,0xc
c0016651:	a0 00 aa 03 c0       	mov    al,ds:0xc003aa00
c0016656:	83 f0 01             	xor    eax,0x1
c0016659:	a2 00 aa 03 c0       	mov    ds:0xc003aa00,al
c001665e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016663:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016666:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001666c:	50                   	push   eax
c001666d:	e8 a8 27 00 00       	call   c0018e1a <VAS::scanForEviction()>
c0016672:	83 c4 10             	add    esp,0x10
c0016675:	85 c0                	test   eax,eax
c0016677:	75 48                	jne    c00166c1 <Phys::allocatePage()+0xb2>
c0016679:	83 ec 0c             	sub    esp,0xc
c001667c:	68 e4 0f 03 c0       	push   0xc0030fe4
c0016681:	e8 28 9b 00 00       	call   c00201ae <KePanic(char const*)>
c0016686:	83 c4 10             	add    esp,0x10
c0016689:	8b 1d dc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9dc
c001668f:	53                   	push   ebx
c0016690:	e8 f5 fe ff ff       	call   c001658a <Phys::getPageState(unsigned long)>
c0016695:	5a                   	pop    edx
c0016696:	84 c0                	test   al,al
c0016698:	75 99                	jne    c0016633 <Phys::allocatePage()+0x24>
c001669a:	6a 01                	push   0x1
c001669c:	53                   	push   ebx
c001669d:	e8 a8 fe ff ff       	call   c001654a <Phys::setPageState(unsigned long, bool)>
c00166a2:	8b 15 e8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9e8
c00166a8:	a1 dc a9 03 c0       	mov    eax,ds:0xc003a9dc
c00166ad:	83 c2 01             	add    edx,0x1
c00166b0:	59                   	pop    ecx
c00166b1:	89 15 e8 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e8,edx
c00166b7:	c1 e0 0c             	shl    eax,0xc
c00166ba:	5b                   	pop    ebx
c00166bb:	83 c4 14             	add    esp,0x14
c00166be:	5b                   	pop    ebx
c00166bf:	5e                   	pop    esi
c00166c0:	c3                   	ret    
c00166c1:	83 ec 08             	sub    esp,0x8
c00166c4:	89 c2                	mov    edx,eax
c00166c6:	6a 01                	push   0x1
c00166c8:	c1 ea 0c             	shr    edx,0xc
c00166cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00166cf:	52                   	push   edx
c00166d0:	e8 75 fe ff ff       	call   c001654a <Phys::setPageState(unsigned long, bool)>
c00166d5:	83 c4 10             	add    esp,0x10
c00166d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00166dc:	eb dd                	jmp    c00166bb <Phys::allocatePage()+0xac>

c00166de <Phys::allocateContiguousPages(int)>:
c00166de:	57                   	push   edi
c00166df:	56                   	push   esi
c00166e0:	53                   	push   ebx
c00166e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166e5:	fa                   	cli    
c00166e6:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00166eb:	31 db                	xor    ebx,ebx
c00166ed:	83 c0 01             	add    eax,0x1
c00166f0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00166f5:	85 db                	test   ebx,ebx
c00166f7:	75 11                	jne    c001670a <Phys::allocateContiguousPages(int)+0x2c>
c00166f9:	e8 11 ff ff ff       	call   c001660f <Phys::allocatePage()>
c00166fe:	83 fe 01             	cmp    esi,0x1
c0016701:	89 c7                	mov    edi,eax
c0016703:	74 21                	je     c0016726 <Phys::allocateContiguousPages(int)+0x48>
c0016705:	bb 01 00 00 00       	mov    ebx,0x1
c001670a:	e8 00 ff ff ff       	call   c001660f <Phys::allocatePage()>
c001670f:	89 da                	mov    edx,ebx
c0016711:	c1 e2 0c             	shl    edx,0xc
c0016714:	01 fa                	add    edx,edi
c0016716:	39 c2                	cmp    edx,eax
c0016718:	74 22                	je     c001673c <Phys::allocateContiguousPages(int)+0x5e>
c001671a:	bb 01 00 00 00       	mov    ebx,0x1
c001671f:	89 c7                	mov    edi,eax
c0016721:	83 fe 01             	cmp    esi,0x1
c0016724:	75 e4                	jne    c001670a <Phys::allocateContiguousPages(int)+0x2c>
c0016726:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001672b:	83 e8 01             	sub    eax,0x1
c001672e:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0016733:	75 01                	jne    c0016736 <Phys::allocateContiguousPages(int)+0x58>
c0016735:	fb                   	sti    
c0016736:	89 f8                	mov    eax,edi
c0016738:	5b                   	pop    ebx
c0016739:	5e                   	pop    esi
c001673a:	5f                   	pop    edi
c001673b:	c3                   	ret    
c001673c:	83 c3 01             	add    ebx,0x1
c001673f:	39 f3                	cmp    ebx,esi
c0016741:	75 b2                	jne    c00166f5 <Phys::allocateContiguousPages(int)+0x17>
c0016743:	eb e1                	jmp    c0016726 <Phys::allocateContiguousPages(int)+0x48>

c0016745 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0016745:	56                   	push   esi
c0016746:	53                   	push   ebx
c0016747:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001674b:	39 1d e0 a9 03 c0    	cmp    DWORD PTR ds:0xc003a9e0,ebx
c0016751:	73 06                	jae    c0016759 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0016753:	89 1d e0 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e0,ebx
c0016759:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001675d:	c1 eb 0c             	shr    ebx,0xc
c0016760:	c1 e8 0c             	shr    eax,0xc
c0016763:	39 d8                	cmp    eax,ebx
c0016765:	73 13                	jae    c001677a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0016767:	6a 00                	push   0x0
c0016769:	8d 70 01             	lea    esi,[eax+0x1]
c001676c:	50                   	push   eax
c001676d:	e8 d8 fd ff ff       	call   c001654a <Phys::setPageState(unsigned long, bool)>
c0016772:	5a                   	pop    edx
c0016773:	89 f0                	mov    eax,esi
c0016775:	59                   	pop    ecx
c0016776:	39 f3                	cmp    ebx,esi
c0016778:	75 ed                	jne    c0016767 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c001677a:	5b                   	pop    ebx
c001677b:	5e                   	pop    esi
c001677c:	c3                   	ret    

c001677d <Phys::physicalMemorySetup(unsigned int)>:
c001677d:	55                   	push   ebp
c001677e:	57                   	push   edi
c001677f:	56                   	push   esi
c0016780:	53                   	push   ebx
c0016781:	83 ec 40             	sub    esp,0x40
c0016784:	6a 10                	push   0x10
c0016786:	6a 00                	push   0x0
c0016788:	68 f0 a9 03 c0       	push   0xc003a9f0
c001678d:	e8 5e 9d fe ff       	call   c00004f0 <memset>
c0016792:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0016796:	25 00 f0 ff ff       	and    eax,0xfffff000
c001679b:	05 00 10 00 00       	add    eax,0x1000
c00167a0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00167a4:	5b                   	pop    ebx
c00167a5:	31 db                	xor    ebx,ebx
c00167a7:	5e                   	pop    esi
c00167a8:	50                   	push   eax
c00167a9:	68 77 10 03 c0       	push   0xc0031077
c00167ae:	e8 e2 29 00 00       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c00167b3:	83 c4 10             	add    esp,0x10
c00167b6:	83 ec 08             	sub    esp,0x8
c00167b9:	6a 01                	push   0x1
c00167bb:	53                   	push   ebx
c00167bc:	83 c3 01             	add    ebx,0x1
c00167bf:	e8 86 fd ff ff       	call   c001654a <Phys::setPageState(unsigned long, bool)>
c00167c4:	83 c4 10             	add    esp,0x10
c00167c7:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00167cd:	75 e7                	jne    c00167b6 <Phys::physicalMemorySetup(unsigned int)+0x39>
c00167cf:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c00167d6:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c00167dd:	c1 e0 08             	shl    eax,0x8
c00167e0:	09 c2                	or     edx,eax
c00167e2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00167e6:	0f 84 98 01 00 00    	je     c0016984 <Phys::physicalMemorySetup(unsigned int)+0x207>
c00167ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00167f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00167f8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00167fd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016801:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016809:	eb 1c                	jmp    c0016827 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c001680b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001680f:	83 c3 18             	add    ebx,0x18
c0016812:	83 c6 01             	add    esi,0x1
c0016815:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0016819:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001681d:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0016821:	0f 84 6d 01 00 00    	je     c0016994 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0016827:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001682a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001682d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0016830:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016834:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016838:	8b 33                	mov    esi,DWORD PTR [ebx]
c001683a:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c001683d:	01 f0                	add    eax,esi
c001683f:	55                   	push   ebp
c0016840:	11 fa                	adc    edx,edi
c0016842:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016846:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001684a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001684e:	51                   	push   ecx
c001684f:	56                   	push   esi
c0016850:	68 14 10 03 c0       	push   0xc0031014
c0016855:	e8 3b 29 00 00       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c001685a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001685e:	83 c4 10             	add    esp,0x10
c0016861:	09 f8                	or     eax,edi
c0016863:	0f 85 2b 01 00 00    	jne    c0016994 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0016869:	83 fd 01             	cmp    ebp,0x1
c001686c:	75 9d                	jne    c001680b <Phys::physicalMemorySetup(unsigned int)+0x8e>
c001686e:	ba 00 00 08 00       	mov    edx,0x80000
c0016873:	89 c1                	mov    ecx,eax
c0016875:	39 f2                	cmp    edx,esi
c0016877:	19 f9                	sbb    ecx,edi
c0016879:	0f 82 ab 00 00 00    	jb     c001692a <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c001687f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0016883:	89 c1                	mov    ecx,eax
c0016885:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0016889:	0f 83 9b 00 00 00    	jae    c001692a <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c001688f:	ba 00 00 0a 00       	mov    edx,0xa0000
c0016894:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016898:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001689c:	39 fa                	cmp    edx,edi
c001689e:	19 e8                	sbb    eax,ebp
c00168a0:	0f 82 b0 01 00 00    	jb     c0016a56 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c00168a6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00168aa:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00168ae:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00168b4:	ba ff 1f 00 00       	mov    edx,0x1fff
c00168b9:	83 d5 ff             	adc    ebp,0xffffffff
c00168bc:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00168c0:	31 c0                	xor    eax,eax
c00168c2:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00168c6:	39 fa                	cmp    edx,edi
c00168c8:	89 c1                	mov    ecx,eax
c00168ca:	19 e9                	sbb    ecx,ebp
c00168cc:	0f 83 39 ff ff ff    	jae    c001680b <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00168d2:	be 00 00 08 00       	mov    esi,0x80000
c00168d7:	83 ec 04             	sub    esp,0x4
c00168da:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00168de:	57                   	push   edi
c00168df:	56                   	push   esi
c00168e0:	68 38 10 03 c0       	push   0xc0031038
c00168e5:	e8 ab 28 00 00       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c00168ea:	5d                   	pop    ebp
c00168eb:	58                   	pop    eax
c00168ec:	57                   	push   edi
c00168ed:	56                   	push   esi
c00168ee:	e8 52 fe ff ff       	call   c0016745 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00168f3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00168f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00168fb:	83 c4 0c             	add    esp,0xc
c00168fe:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016902:	8b 15 ec a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9ec
c0016908:	01 d0                	add    eax,edx
c001690a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0016911:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016916:	52                   	push   edx
c0016917:	50                   	push   eax
c0016918:	68 9d 10 03 c0       	push   0xc003109d
c001691d:	e8 73 28 00 00       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0016922:	83 c4 10             	add    esp,0x10
c0016925:	e9 e1 fe ff ff       	jmp    c001680b <Phys::physicalMemorySetup(unsigned int)+0x8e>
c001692a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001692e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016932:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016936:	39 ea                	cmp    edx,ebp
c0016938:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c001693c:	0f 82 c9 fe ff ff    	jb     c001680b <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016942:	ba ff 1f 00 00       	mov    edx,0x1fff
c0016947:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c001694b:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c001694f:	0f 83 b6 fe ff ff    	jae    c001680b <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016955:	39 ee                	cmp    esi,ebp
c0016957:	89 f8                	mov    eax,edi
c0016959:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c001695d:	0f 83 74 ff ff ff    	jae    c00168d7 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0016963:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016967:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001696b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001696f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0016973:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0016977:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001697b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001697f:	e9 53 ff ff ff       	jmp    c00168d7 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0016984:	83 ec 0c             	sub    esp,0xc
c0016987:	68 8f 10 03 c0       	push   0xc003108f
c001698c:	e8 1d 98 00 00       	call   c00201ae <KePanic(char const*)>
c0016991:	83 c4 10             	add    esp,0x10
c0016994:	83 ec 08             	sub    esp,0x8
c0016997:	bb 60 00 00 00       	mov    ebx,0x60
c001699c:	6a 00                	push   0x0
c001699e:	6a 06                	push   0x6
c00169a0:	e8 a5 fb ff ff       	call   c001654a <Phys::setPageState(unsigned long, bool)>
c00169a5:	58                   	pop    eax
c00169a6:	5a                   	pop    edx
c00169a7:	6a 00                	push   0x0
c00169a9:	6a 07                	push   0x7
c00169ab:	e8 9a fb ff ff       	call   c001654a <Phys::setPageState(unsigned long, bool)>
c00169b0:	8b 0d ec a9 03 c0    	mov    ecx,DWORD PTR ds:0xc003a9ec
c00169b6:	83 c4 10             	add    esp,0x10
c00169b9:	83 c1 02             	add    ecx,0x2
c00169bc:	89 0d ec a9 03 c0    	mov    DWORD PTR ds:0xc003a9ec,ecx
c00169c2:	83 ec 08             	sub    esp,0x8
c00169c5:	6a 00                	push   0x0
c00169c7:	53                   	push   ebx
c00169c8:	83 c3 01             	add    ebx,0x1
c00169cb:	e8 7a fb ff ff       	call   c001654a <Phys::setPageState(unsigned long, bool)>
c00169d0:	83 c4 10             	add    esp,0x10
c00169d3:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00169d9:	75 e7                	jne    c00169c2 <Phys::physicalMemorySetup(unsigned int)+0x245>
c00169db:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c00169e0:	bb 40 01 00 00       	mov    ebx,0x140
c00169e5:	83 c0 20             	add    eax,0x20
c00169e8:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c00169ed:	eb 26                	jmp    c0016a15 <Phys::physicalMemorySetup(unsigned int)+0x298>
c00169ef:	83 ec 08             	sub    esp,0x8
c00169f2:	6a 00                	push   0x0
c00169f4:	53                   	push   ebx
c00169f5:	83 c3 01             	add    ebx,0x1
c00169f8:	e8 4d fb ff ff       	call   c001654a <Phys::setPageState(unsigned long, bool)>
c00169fd:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016a02:	83 c4 10             	add    esp,0x10
c0016a05:	83 c0 01             	add    eax,0x1
c0016a08:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0016a0e:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016a13:	74 07                	je     c0016a1c <Phys::physicalMemorySetup(unsigned int)+0x29f>
c0016a15:	3d ff 03 00 00       	cmp    eax,0x3ff
c0016a1a:	7e d3                	jle    c00169ef <Phys::physicalMemorySetup(unsigned int)+0x272>
c0016a1c:	bb d0 01 00 00       	mov    ebx,0x1d0
c0016a21:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016a26:	7f 26                	jg     c0016a4e <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c0016a28:	83 ec 08             	sub    esp,0x8
c0016a2b:	6a 00                	push   0x0
c0016a2d:	53                   	push   ebx
c0016a2e:	83 c3 01             	add    ebx,0x1
c0016a31:	e8 14 fb ff ff       	call   c001654a <Phys::setPageState(unsigned long, bool)>
c0016a36:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016a3b:	83 c4 10             	add    esp,0x10
c0016a3e:	83 c0 01             	add    eax,0x1
c0016a41:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0016a47:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016a4c:	75 d3                	jne    c0016a21 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c0016a4e:	83 c4 3c             	add    esp,0x3c
c0016a51:	5b                   	pop    ebx
c0016a52:	5e                   	pop    esi
c0016a53:	5f                   	pop    edi
c0016a54:	5d                   	pop    ebp
c0016a55:	c3                   	ret    
c0016a56:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0016a5e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016a66:	e9 3b fe ff ff       	jmp    c00168a6 <Phys::physicalMemorySetup(unsigned int)+0x129>
c0016a6b:	90                   	nop

c0016a6c <Pipe::isAtty()>:
c0016a6c:	31 c0                	xor    eax,eax
c0016a6e:	c3                   	ret    
c0016a6f:	90                   	nop

c0016a70 <Pipe::~Pipe()>:
c0016a70:	83 ec 0c             	sub    esp,0xc
c0016a73:	ba fc 10 03 c0       	mov    edx,0xc00310fc
c0016a78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a7c:	89 10                	mov    DWORD PTR [eax],edx
c0016a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a82:	83 ec 0c             	sub    esp,0xc
c0016a85:	50                   	push   eax
c0016a86:	e8 69 11 00 00       	call   c0017bf4 <UnixFile::~UnixFile()>
c0016a8b:	83 c4 10             	add    esp,0x10
c0016a8e:	90                   	nop
c0016a8f:	83 c4 0c             	add    esp,0xc
c0016a92:	c3                   	ret    
c0016a93:	90                   	nop

c0016a94 <Pipe::~Pipe()>:
c0016a94:	83 ec 0c             	sub    esp,0xc
c0016a97:	83 ec 0c             	sub    esp,0xc
c0016a9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a9e:	e8 cd ff ff ff       	call   c0016a70 <Pipe::~Pipe()>
c0016aa3:	83 c4 10             	add    esp,0x10
c0016aa6:	83 ec 08             	sub    esp,0x8
c0016aa9:	6a 20                	push   0x20
c0016aab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016aaf:	e8 b4 25 00 00       	call   c0019068 <operator delete(void*, unsigned long)>
c0016ab4:	83 c4 10             	add    esp,0x10
c0016ab7:	83 c4 0c             	add    esp,0xc
c0016aba:	c3                   	ret    
c0016abb:	90                   	nop

c0016abc <Pipe::write(unsigned long long, void*, int*)>:
c0016abc:	55                   	push   ebp
c0016abd:	57                   	push   edi
c0016abe:	56                   	push   esi
c0016abf:	53                   	push   ebx
c0016ac0:	83 ec 1c             	sub    esp,0x1c
c0016ac3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016ac7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016acb:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0016ace:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016ad2:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ad5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016ad9:	89 d8                	mov    eax,ebx
c0016adb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0016ade:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0016ae2:	89 d6                	mov    esi,edx
c0016ae4:	89 d7                	mov    edi,edx
c0016ae6:	c1 ff 1f             	sar    edi,0x1f
c0016ae9:	03 34 24             	add    esi,DWORD PTR [esp]
c0016aec:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0016af0:	c1 f8 1f             	sar    eax,0x1f
c0016af3:	39 f3                	cmp    ebx,esi
c0016af5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016af9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016afd:	19 f8                	sbb    eax,edi
c0016aff:	b8 01 00 00 00       	mov    eax,0x1
c0016b04:	72 6e                	jb     c0016b74 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0016b06:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016b09:	01 d0                	add    eax,edx
c0016b0b:	99                   	cdq    
c0016b0c:	f7 fb                	idiv   ebx
c0016b0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b12:	29 d3                	sub    ebx,edx
c0016b14:	89 d7                	mov    edi,edx
c0016b16:	89 de                	mov    esi,ebx
c0016b18:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0016b1b:	c1 fb 1f             	sar    ebx,0x1f
c0016b1e:	39 f2                	cmp    edx,esi
c0016b20:	19 d8                	sbb    eax,ebx
c0016b22:	b8 00 00 00 00       	mov    eax,0x0
c0016b27:	72 04                	jb     c0016b2d <Pipe::write(unsigned long long, void*, int*)+0x71>
c0016b29:	89 d0                	mov    eax,edx
c0016b2b:	29 f0                	sub    eax,esi
c0016b2d:	89 d3                	mov    ebx,edx
c0016b2f:	29 c3                	sub    ebx,eax
c0016b31:	74 0b                	je     c0016b3e <Pipe::write(unsigned long long, void*, int*)+0x82>
c0016b33:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0016b36:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016b3a:	89 d9                	mov    ecx,ebx
c0016b3c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016b3e:	85 c0                	test   eax,eax
c0016b40:	74 0d                	je     c0016b4f <Pipe::write(unsigned long long, void*, int*)+0x93>
c0016b42:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016b46:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016b49:	89 de                	mov    esi,ebx
c0016b4b:	89 c1                	mov    ecx,eax
c0016b4d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016b4f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0016b52:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016b57:	75 10                	jne    c0016b69 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0016b59:	83 ec 0c             	sub    esp,0xc
c0016b5c:	68 b9 10 03 c0       	push   0xc00310b9
c0016b61:	e8 48 96 00 00       	call   c00201ae <KePanic(char const*)>
c0016b66:	83 c4 10             	add    esp,0x10
c0016b69:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016b6d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016b70:	89 08                	mov    DWORD PTR [eax],ecx
c0016b72:	31 c0                	xor    eax,eax
c0016b74:	83 c4 1c             	add    esp,0x1c
c0016b77:	5b                   	pop    ebx
c0016b78:	5e                   	pop    esi
c0016b79:	5f                   	pop    edi
c0016b7a:	5d                   	pop    ebp
c0016b7b:	c3                   	ret    

c0016b7c <Pipe::read(unsigned long long, void*, int*)>:
c0016b7c:	55                   	push   ebp
c0016b7d:	57                   	push   edi
c0016b7e:	56                   	push   esi
c0016b7f:	53                   	push   ebx
c0016b80:	83 ec 1c             	sub    esp,0x1c
c0016b83:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016b87:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016b8b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0016b8f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0016b92:	89 c8                	mov    eax,ecx
c0016b94:	99                   	cdq    
c0016b95:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0016b99:	74 24                	je     c0016bbf <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016b9b:	39 f9                	cmp    ecx,edi
c0016b9d:	89 d1                	mov    ecx,edx
c0016b9f:	19 f1                	sbb    ecx,esi
c0016ba1:	73 1c                	jae    c0016bbf <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016ba3:	fa                   	cli    
c0016ba4:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0016baa:	e8 ad e5 00 00       	call   c002515c <schedule()>
c0016baf:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016bb4:	48                   	dec    eax
c0016bb5:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0016bba:	75 d3                	jne    c0016b8f <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016bbc:	fb                   	sti    
c0016bbd:	eb d0                	jmp    c0016b8f <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016bbf:	39 f8                	cmp    eax,edi
c0016bc1:	89 d1                	mov    ecx,edx
c0016bc3:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016bc6:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016bca:	19 f1                	sbb    ecx,esi
c0016bcc:	73 07                	jae    c0016bd5 <Pipe::read(unsigned long long, void*, int*)+0x59>
c0016bce:	89 04 24             	mov    DWORD PTR [esp],eax
c0016bd1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016bd5:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0016bd8:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0016bdb:	29 f7                	sub    edi,esi
c0016bdd:	89 f8                	mov    eax,edi
c0016bdf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016be3:	99                   	cdq    
c0016be4:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0016be7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016beb:	19 d0                	sbb    eax,edx
c0016bed:	73 07                	jae    c0016bf6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0016bef:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016bf2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016bf6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0016bf9:	89 ea                	mov    edx,ebp
c0016bfb:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0016bff:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016c04:	74 0d                	je     c0016c13 <Pipe::read(unsigned long long, void*, int*)+0x97>
c0016c06:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0016c09:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0016c0d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016c11:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016c13:	85 d2                	test   edx,edx
c0016c15:	74 11                	je     c0016c28 <Pipe::read(unsigned long long, void*, int*)+0xac>
c0016c17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016c1b:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0016c1e:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016c22:	89 d1                	mov    ecx,edx
c0016c24:	89 c7                	mov    edi,eax
c0016c26:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016c28:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016c2b:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0016c2e:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0016c31:	99                   	cdq    
c0016c32:	89 f7                	mov    edi,esi
c0016c34:	03 04 24             	add    eax,DWORD PTR [esp]
c0016c37:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0016c3b:	c1 ff 1f             	sar    edi,0x1f
c0016c3e:	57                   	push   edi
c0016c3f:	56                   	push   esi
c0016c40:	52                   	push   edx
c0016c41:	50                   	push   eax
c0016c42:	e8 19 7a 01 00       	call   c002e660 <__umoddi3>
c0016c47:	83 c4 10             	add    esp,0x10
c0016c4a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016c4d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016c52:	75 10                	jne    c0016c64 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0016c54:	83 ec 0c             	sub    esp,0xc
c0016c57:	68 d6 10 03 c0       	push   0xc00310d6
c0016c5c:	e8 4d 95 00 00       	call   c00201ae <KePanic(char const*)>
c0016c61:	83 c4 10             	add    esp,0x10
c0016c64:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016c68:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0016c6b:	89 10                	mov    DWORD PTR [eax],edx
c0016c6d:	83 c4 1c             	add    esp,0x1c
c0016c70:	31 c0                	xor    eax,eax
c0016c72:	5b                   	pop    ebx
c0016c73:	5e                   	pop    esi
c0016c74:	5f                   	pop    edi
c0016c75:	5d                   	pop    ebp
c0016c76:	c3                   	ret    
c0016c77:	90                   	nop

c0016c78 <Pipe::Pipe(int)>:
c0016c78:	83 ec 0c             	sub    esp,0xc
c0016c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c7f:	83 ec 08             	sub    esp,0x8
c0016c82:	6a 00                	push   0x0
c0016c84:	50                   	push   eax
c0016c85:	e8 84 0d 00 00       	call   c0017a0e <UnixFile::UnixFile(int)>
c0016c8a:	83 c4 10             	add    esp,0x10
c0016c8d:	ba fc 10 03 c0       	mov    edx,0xc00310fc
c0016c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c96:	89 10                	mov    DWORD PTR [eax],edx
c0016c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c9c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016ca0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016ca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ca7:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0016cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cb2:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0016cb9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016cbd:	83 ec 0c             	sub    esp,0xc
c0016cc0:	50                   	push   eax
c0016cc1:	e8 40 f6 ff ff       	call   c0016306 <malloc>
c0016cc6:	83 c4 10             	add    esp,0x10
c0016cc9:	89 c2                	mov    edx,eax
c0016ccb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ccf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cd6:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0016cda:	90                   	nop
c0016cdb:	83 c4 0c             	add    esp,0xc
c0016cde:	c3                   	ret    
c0016cdf:	90                   	nop

c0016ce0 <VgaText::isAtty()>:
c0016ce0:	b0 01                	mov    al,0x1
c0016ce2:	c3                   	ret    
c0016ce3:	90                   	nop

c0016ce4 <VgaText::~VgaText()>:
c0016ce4:	83 ec 0c             	sub    esp,0xc
c0016ce7:	ba 44 11 03 c0       	mov    edx,0xc0031144
c0016cec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cf0:	89 10                	mov    DWORD PTR [eax],edx
c0016cf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cf6:	83 ec 0c             	sub    esp,0xc
c0016cf9:	50                   	push   eax
c0016cfa:	e8 f5 0e 00 00       	call   c0017bf4 <UnixFile::~UnixFile()>
c0016cff:	83 c4 10             	add    esp,0x10
c0016d02:	90                   	nop
c0016d03:	83 c4 0c             	add    esp,0xc
c0016d06:	c3                   	ret    
c0016d07:	90                   	nop

c0016d08 <VgaText::~VgaText()>:
c0016d08:	83 ec 0c             	sub    esp,0xc
c0016d0b:	83 ec 0c             	sub    esp,0xc
c0016d0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d12:	e8 cd ff ff ff       	call   c0016ce4 <VgaText::~VgaText()>
c0016d17:	83 c4 10             	add    esp,0x10
c0016d1a:	83 ec 08             	sub    esp,0x8
c0016d1d:	68 84 01 00 00       	push   0x184
c0016d22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d26:	e8 3d 23 00 00       	call   c0019068 <operator delete(void*, unsigned long)>
c0016d2b:	83 c4 10             	add    esp,0x10
c0016d2e:	83 c4 0c             	add    esp,0xc
c0016d31:	c3                   	ret    

c0016d32 <VgaText::read(unsigned long long, void*, int*)>:
c0016d32:	83 ec 10             	sub    esp,0x10
c0016d35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016d39:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016d3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d41:	e8 ba 53 00 00       	call   c001c100 <readKeyboard(VgaText*, char*, unsigned long)>
c0016d46:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016d4a:	89 02                	mov    DWORD PTR [edx],eax
c0016d4c:	31 c0                	xor    eax,eax
c0016d4e:	83 c4 1c             	add    esp,0x1c
c0016d51:	c3                   	ret    

c0016d52 <setTerminalScrollLock(bool)>:
c0016d52:	c3                   	ret    

c0016d53 <doTerminalCycle()>:
c0016d53:	c3                   	ret    

c0016d54 <addToTerminalCycle(VgaText*)>:
c0016d54:	c3                   	ret    

c0016d55 <scrollTerminalScrollLock(int)>:
c0016d55:	c3                   	ret    

c0016d56 <VgaText::updateTitle()>:
c0016d56:	c3                   	ret    
c0016d57:	90                   	nop

c0016d58 <VgaText::load()>:
c0016d58:	c3                   	ret    
c0016d59:	90                   	nop

c0016d5a <VgaText::updateCursor()>:
c0016d5a:	83 ec 14             	sub    esp,0x14
c0016d5d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d61:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0016d64:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0016d67:	e8 fc 0e 01 00       	call   c0027c68 <HalConsoleCursorUpdate(int, int)>
c0016d6c:	83 c4 1c             	add    esp,0x1c
c0016d6f:	c3                   	ret    

c0016d70 <VgaText::doANSI_SGR(int)>:
c0016d70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016d74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d78:	85 d2                	test   edx,edx
c0016d7a:	75 0b                	jne    c0016d87 <VgaText::doANSI_SGR(int)+0x17>
c0016d7c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0016d7f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0016d82:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016d85:	eb 59                	jmp    c0016de0 <VgaText::doANSI_SGR(int)+0x70>
c0016d87:	83 fa 07             	cmp    edx,0x7
c0016d8a:	75 0b                	jne    c0016d97 <VgaText::doANSI_SGR(int)+0x27>
c0016d8c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0016d8f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0016d92:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0016d95:	eb 49                	jmp    c0016de0 <VgaText::doANSI_SGR(int)+0x70>
c0016d97:	83 fa 1b             	cmp    edx,0x1b
c0016d9a:	74 e0                	je     c0016d7c <VgaText::doANSI_SGR(int)+0xc>
c0016d9c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0016d9f:	83 f9 07             	cmp    ecx,0x7
c0016da2:	77 09                	ja     c0016dad <VgaText::doANSI_SGR(int)+0x3d>
c0016da4:	8b 14 8d 40 3a 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcc5c0]
c0016dab:	eb 20                	jmp    c0016dcd <VgaText::doANSI_SGR(int)+0x5d>
c0016dad:	8d 4a d8             	lea    ecx,[edx-0x28]
c0016db0:	83 f9 07             	cmp    ecx,0x7
c0016db3:	77 09                	ja     c0016dbe <VgaText::doANSI_SGR(int)+0x4e>
c0016db5:	8b 14 8d 40 3a 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcc5c0]
c0016dbc:	eb 22                	jmp    c0016de0 <VgaText::doANSI_SGR(int)+0x70>
c0016dbe:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0016dc1:	83 f9 07             	cmp    ecx,0x7
c0016dc4:	77 0b                	ja     c0016dd1 <VgaText::doANSI_SGR(int)+0x61>
c0016dc6:	8b 14 95 f8 38 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcc708]
c0016dcd:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0016dd0:	c3                   	ret    
c0016dd1:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0016dd4:	83 f9 07             	cmp    ecx,0x7
c0016dd7:	77 0a                	ja     c0016de3 <VgaText::doANSI_SGR(int)+0x73>
c0016dd9:	8b 14 95 d0 38 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcc730]
c0016de0:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0016de3:	c3                   	ret    

c0016de4 <VgaText::setDefaultBgColour(VgaColour)>:
c0016de4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016de8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016dec:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016def:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0016df2:	c3                   	ret    
c0016df3:	90                   	nop

c0016df4 <VgaText::setDefaultFgColour(VgaColour)>:
c0016df4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016df8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016dfc:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0016dff:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0016e02:	c3                   	ret    
c0016e03:	90                   	nop

c0016e04 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0016e04:	53                   	push   ebx
c0016e05:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016e09:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0016e0d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016e11:	51                   	push   ecx
c0016e12:	e8 cd ff ff ff       	call   c0016de4 <VgaText::setDefaultBgColour(VgaColour)>
c0016e17:	58                   	pop    eax
c0016e18:	5a                   	pop    edx
c0016e19:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0016e1d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016e21:	5b                   	pop    ebx
c0016e22:	eb d0                	jmp    c0016df4 <VgaText::setDefaultFgColour(VgaColour)>

c0016e24 <VgaText::setTitleTextColour(VgaColour)>:
c0016e24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016e2c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0016e2f:	c3                   	ret    

c0016e30 <VgaText::setTitleColour(VgaColour)>:
c0016e30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e34:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016e38:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016e3b:	c3                   	ret    

c0016e3c <VgaText::setTitle(char*)>:
c0016e3c:	c3                   	ret    
c0016e3d:	90                   	nop

c0016e3e <VgaText::combineColours(unsigned char, unsigned char)>:
c0016e3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e42:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0016e47:	83 e0 0f             	and    eax,0xf
c0016e4a:	c1 e2 04             	shl    edx,0x4
c0016e4d:	09 d0                	or     eax,edx
c0016e4f:	c3                   	ret    

c0016e50 <VgaText::scrollScreen()>:
c0016e50:	55                   	push   ebp
c0016e51:	57                   	push   edi
c0016e52:	56                   	push   esi
c0016e53:	be 01 00 00 00       	mov    esi,0x1
c0016e58:	53                   	push   ebx
c0016e59:	83 ec 0c             	sub    esp,0xc
c0016e5c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016e60:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0016e63:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0016e69:	31 ff                	xor    edi,edi
c0016e6b:	01 e9                	add    ecx,ebp
c0016e6d:	8a 01                	mov    al,BYTE PTR [ecx]
c0016e6f:	83 fe 18             	cmp    esi,0x18
c0016e72:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0016e78:	75 20                	jne    c0016e9a <VgaText::scrollScreen()+0x4a>
c0016e7a:	f7 c7 01 00 00 00    	test   edi,0x1
c0016e80:	74 15                	je     c0016e97 <VgaText::scrollScreen()+0x47>
c0016e82:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0016e86:	50                   	push   eax
c0016e87:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0016e8b:	50                   	push   eax
c0016e8c:	e8 ad ff ff ff       	call   c0016e3e <VgaText::combineColours(unsigned char, unsigned char)>
c0016e91:	5a                   	pop    edx
c0016e92:	5a                   	pop    edx
c0016e93:	88 01                	mov    BYTE PTR [ecx],al
c0016e95:	eb 03                	jmp    c0016e9a <VgaText::scrollScreen()+0x4a>
c0016e97:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0016e9a:	47                   	inc    edi
c0016e9b:	41                   	inc    ecx
c0016e9c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0016ea2:	75 c9                	jne    c0016e6d <VgaText::scrollScreen()+0x1d>
c0016ea4:	46                   	inc    esi
c0016ea5:	83 fe 19             	cmp    esi,0x19
c0016ea8:	75 b9                	jne    c0016e63 <VgaText::scrollScreen()+0x13>
c0016eaa:	39 1d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebx
c0016eb0:	75 1f                	jne    c0016ed1 <VgaText::scrollScreen()+0x81>
c0016eb2:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0016eb6:	74 05                	je     c0016ebd <VgaText::scrollScreen()+0x6d>
c0016eb8:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0016ebb:	eb 14                	jmp    c0016ed1 <VgaText::scrollScreen()+0x81>
c0016ebd:	50                   	push   eax
c0016ebe:	50                   	push   eax
c0016ebf:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0016ec3:	50                   	push   eax
c0016ec4:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0016ec8:	50                   	push   eax
c0016ec9:	e8 2e 0c 01 00       	call   c0027afc <HalConsoleScroll(int, int)>
c0016ece:	83 c4 10             	add    esp,0x10
c0016ed1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0016ed5:	83 c4 0c             	add    esp,0xc
c0016ed8:	5b                   	pop    ebx
c0016ed9:	5e                   	pop    esi
c0016eda:	5f                   	pop    edi
c0016edb:	5d                   	pop    ebp
c0016edc:	e9 79 fe ff ff       	jmp    c0016d5a <VgaText::updateCursor()>
c0016ee1:	90                   	nop

c0016ee2 <VgaText::combineCharAndColour(char, unsigned char)>:
c0016ee2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0016ee7:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0016eec:	c1 e0 08             	shl    eax,0x8
c0016eef:	09 d0                	or     eax,edx
c0016ef1:	c3                   	ret    

c0016ef2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0016ef2:	55                   	push   ebp
c0016ef3:	57                   	push   edi
c0016ef4:	56                   	push   esi
c0016ef5:	53                   	push   ebx
c0016ef6:	83 ec 1c             	sub    esp,0x1c
c0016ef9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016efd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016f01:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016f05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f09:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016f0d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016f11:	0f b6 c3             	movzx  eax,bl
c0016f14:	50                   	push   eax
c0016f15:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016f1a:	50                   	push   eax
c0016f1b:	e8 1e ff ff ff       	call   c0016e3e <VgaText::combineColours(unsigned char, unsigned char)>
c0016f20:	5a                   	pop    edx
c0016f21:	0f b6 c0             	movzx  eax,al
c0016f24:	59                   	pop    ecx
c0016f25:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0016f2a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016f2e:	50                   	push   eax
c0016f2f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016f33:	e8 aa ff ff ff       	call   c0016ee2 <VgaText::combineCharAndColour(char, unsigned char)>
c0016f38:	5a                   	pop    edx
c0016f39:	6b d7 50             	imul   edx,edi,0x50
c0016f3c:	59                   	pop    ecx
c0016f3d:	01 f2                	add    edx,esi
c0016f3f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0016f42:	0f b7 d2             	movzx  edx,dx
c0016f45:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0016f49:	39 2d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebp
c0016f4f:	75 28                	jne    c0016f79 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0016f51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f55:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0016f59:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0016f5d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0016f61:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016f65:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f69:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016f6d:	83 c4 1c             	add    esp,0x1c
c0016f70:	5b                   	pop    ebx
c0016f71:	5e                   	pop    esi
c0016f72:	5f                   	pop    edi
c0016f73:	5d                   	pop    ebp
c0016f74:	e9 8b 0c 01 00       	jmp    c0027c04 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0016f79:	83 c4 1c             	add    esp,0x1c
c0016f7c:	5b                   	pop    ebx
c0016f7d:	5e                   	pop    esi
c0016f7e:	5f                   	pop    edi
c0016f7f:	5d                   	pop    ebp
c0016f80:	c3                   	ret    
c0016f81:	90                   	nop

c0016f82 <VgaText::getCursorX()>:
c0016f82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f86:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0016f89:	c3                   	ret    

c0016f8a <VgaText::getCursorY()>:
c0016f8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f8e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0016f91:	c3                   	ret    

c0016f92 <VgaText::setCursor(int, int)>:
c0016f92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f96:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016f9a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0016f9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016fa1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016fa4:	e9 b1 fd ff ff       	jmp    c0016d5a <VgaText::updateCursor()>

c0016fa9 <setActiveTerminal(VgaText*)>:
c0016fa9:	53                   	push   ebx
c0016faa:	83 ec 08             	sub    esp,0x8
c0016fad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016fb1:	85 db                	test   ebx,ebx
c0016fb3:	75 11                	jne    c0016fc6 <setActiveTerminal(VgaText*)+0x1d>
c0016fb5:	c7 44 24 10 10 11 03 c0 	mov    DWORD PTR [esp+0x10],0xc0031110
c0016fbd:	83 c4 08             	add    esp,0x8
c0016fc0:	5b                   	pop    ebx
c0016fc1:	e9 e8 91 00 00       	jmp    c00201ae <KePanic(char const*)>
c0016fc6:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c0016fcb:	85 c0                	test   eax,eax
c0016fcd:	74 0c                	je     c0016fdb <setActiveTerminal(VgaText*)+0x32>
c0016fcf:	83 ec 0c             	sub    esp,0xc
c0016fd2:	50                   	push   eax
c0016fd3:	e8 82 fd ff ff       	call   c0016d5a <VgaText::updateCursor()>
c0016fd8:	83 c4 10             	add    esp,0x10
c0016fdb:	89 1d 08 aa 03 c0    	mov    DWORD PTR ds:0xc003aa08,ebx
c0016fe1:	50                   	push   eax
c0016fe2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0016fe5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0016fe8:	53                   	push   ebx
c0016fe9:	e8 a4 ff ff ff       	call   c0016f92 <VgaText::setCursor(int, int)>
c0016fee:	83 c4 18             	add    esp,0x18
c0016ff1:	5b                   	pop    ebx
c0016ff2:	c3                   	ret    
c0016ff3:	90                   	nop

c0016ff4 <VgaText::clearScreen()>:
c0016ff4:	57                   	push   edi
c0016ff5:	56                   	push   esi
c0016ff6:	31 f6                	xor    esi,esi
c0016ff8:	53                   	push   ebx
c0016ff9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016ffd:	52                   	push   edx
c0016ffe:	6a 00                	push   0x0
c0017000:	6a 00                	push   0x0
c0017002:	53                   	push   ebx
c0017003:	e8 8a ff ff ff       	call   c0016f92 <VgaText::setCursor(int, int)>
c0017008:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c001700f:	83 c4 10             	add    esp,0x10
c0017012:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0017015:	7e 20                	jle    c0017037 <VgaText::clearScreen()+0x43>
c0017017:	31 ff                	xor    edi,edi
c0017019:	50                   	push   eax
c001701a:	50                   	push   eax
c001701b:	56                   	push   esi
c001701c:	57                   	push   edi
c001701d:	47                   	inc    edi
c001701e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017021:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017024:	6a 20                	push   0x20
c0017026:	53                   	push   ebx
c0017027:	e8 c6 fe ff ff       	call   c0016ef2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001702c:	83 c4 20             	add    esp,0x20
c001702f:	83 ff 50             	cmp    edi,0x50
c0017032:	75 e5                	jne    c0017019 <VgaText::clearScreen()+0x25>
c0017034:	46                   	inc    esi
c0017035:	eb db                	jmp    c0017012 <VgaText::clearScreen()+0x1e>
c0017037:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001703e:	5b                   	pop    ebx
c001703f:	5e                   	pop    esi
c0017040:	5f                   	pop    edi
c0017041:	c3                   	ret    

c0017042 <VgaText::setCursorX(int)>:
c0017042:	83 ec 10             	sub    esp,0x10
c0017045:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017049:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001704c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017050:	50                   	push   eax
c0017051:	e8 3c ff ff ff       	call   c0016f92 <VgaText::setCursor(int, int)>
c0017056:	83 c4 1c             	add    esp,0x1c
c0017059:	c3                   	ret    

c001705a <VgaText::setCursorY(int)>:
c001705a:	83 ec 10             	sub    esp,0x10
c001705d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017061:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017065:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0017068:	50                   	push   eax
c0017069:	e8 24 ff ff ff       	call   c0016f92 <VgaText::setCursor(int, int)>
c001706e:	83 c4 1c             	add    esp,0x1c
c0017071:	c3                   	ret    

c0017072 <VgaText::incrementCursor(bool)>:
c0017072:	56                   	push   esi
c0017073:	53                   	push   ebx
c0017074:	51                   	push   ecx
c0017075:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017079:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001707d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017080:	40                   	inc    eax
c0017081:	83 f8 50             	cmp    eax,0x50
c0017084:	74 05                	je     c001708b <VgaText::incrementCursor(bool)+0x19>
c0017086:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017089:	eb 24                	jmp    c00170af <VgaText::incrementCursor(bool)+0x3d>
c001708b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001708e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017095:	8d 50 01             	lea    edx,[eax+0x1]
c0017098:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001709b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001709e:	75 0f                	jne    c00170af <VgaText::incrementCursor(bool)+0x3d>
c00170a0:	83 ec 0c             	sub    esp,0xc
c00170a3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00170a6:	53                   	push   ebx
c00170a7:	e8 a4 fd ff ff       	call   c0016e50 <VgaText::scrollScreen()>
c00170ac:	83 c4 10             	add    esp,0x10
c00170af:	89 f0                	mov    eax,esi
c00170b1:	84 c0                	test   al,al
c00170b3:	74 0c                	je     c00170c1 <VgaText::incrementCursor(bool)+0x4f>
c00170b5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00170b9:	5a                   	pop    edx
c00170ba:	5b                   	pop    ebx
c00170bb:	5e                   	pop    esi
c00170bc:	e9 99 fc ff ff       	jmp    c0016d5a <VgaText::updateCursor()>
c00170c1:	58                   	pop    eax
c00170c2:	5b                   	pop    ebx
c00170c3:	5e                   	pop    esi
c00170c4:	c3                   	ret    
c00170c5:	90                   	nop

c00170c6 <VgaText::decrementCursor(bool)>:
c00170c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00170ca:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00170ce:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00170d1:	85 c0                	test   eax,eax
c00170d3:	74 04                	je     c00170d9 <VgaText::decrementCursor(bool)+0x13>
c00170d5:	48                   	dec    eax
c00170d6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00170d9:	84 c9                	test   cl,cl
c00170db:	74 09                	je     c00170e6 <VgaText::decrementCursor(bool)+0x20>
c00170dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00170e1:	e9 74 fc ff ff       	jmp    c0016d5a <VgaText::updateCursor()>
c00170e6:	c3                   	ret    
c00170e7:	90                   	nop

c00170e8 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00170e8:	53                   	push   ebx
c00170e9:	83 ec 08             	sub    esp,0x8
c00170ec:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00170f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00170f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00170f9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00170fd:	83 f8 07             	cmp    eax,0x7
c0017100:	75 21                	jne    c0017123 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0017102:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001710a:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0017112:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c001711a:	83 c4 08             	add    esp,0x8
c001711d:	5b                   	pop    ebx
c001711e:	e9 18 3b 00 00       	jmp    c001ac3b <Krnl::beep(int, int, bool)>
c0017123:	83 f8 0d             	cmp    eax,0xd
c0017126:	75 09                	jne    c0017131 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c0017128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001712f:	eb 2d                	jmp    c001715e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0017131:	83 f8 0a             	cmp    eax,0xa
c0017134:	75 31                	jne    c0017167 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0017136:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017139:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017140:	8d 50 01             	lea    edx,[eax+0x1]
c0017143:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0017146:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0017149:	75 0f                	jne    c001715a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c001714b:	83 ec 0c             	sub    esp,0xc
c001714e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0017151:	53                   	push   ebx
c0017152:	e8 f9 fc ff ff       	call   c0016e50 <VgaText::scrollScreen()>
c0017157:	83 c4 10             	add    esp,0x10
c001715a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001715e:	83 c4 08             	add    esp,0x8
c0017161:	5b                   	pop    ebx
c0017162:	e9 f3 fb ff ff       	jmp    c0016d5a <VgaText::updateCursor()>
c0017167:	83 f8 08             	cmp    eax,0x8
c001716a:	75 25                	jne    c0017191 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c001716c:	50                   	push   eax
c001716d:	50                   	push   eax
c001716e:	6a 01                	push   0x1
c0017170:	53                   	push   ebx
c0017171:	e8 50 ff ff ff       	call   c00170c6 <VgaText::decrementCursor(bool)>
c0017176:	5a                   	pop    edx
c0017177:	59                   	pop    ecx
c0017178:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001717b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001717e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017181:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017184:	6a 20                	push   0x20
c0017186:	53                   	push   ebx
c0017187:	e8 66 fd ff ff       	call   c0016ef2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001718c:	83 c4 28             	add    esp,0x28
c001718f:	5b                   	pop    ebx
c0017190:	c3                   	ret    
c0017191:	83 ec 08             	sub    esp,0x8
c0017194:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017197:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001719a:	51                   	push   ecx
c001719b:	52                   	push   edx
c001719c:	50                   	push   eax
c001719d:	53                   	push   ebx
c001719e:	e8 4f fd ff ff       	call   c0016ef2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00171a3:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00171a7:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00171af:	83 c4 28             	add    esp,0x28
c00171b2:	5b                   	pop    ebx
c00171b3:	e9 ba fe ff ff       	jmp    c0017072 <VgaText::incrementCursor(bool)>

c00171b8 <VgaText::putchar(char)>:
c00171b8:	57                   	push   edi
c00171b9:	56                   	push   esi
c00171ba:	53                   	push   ebx
c00171bb:	83 ec 10             	sub    esp,0x10
c00171be:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00171c2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00171c6:	89 f8                	mov    eax,edi
c00171c8:	0f be c0             	movsx  eax,al
c00171cb:	83 f8 5b             	cmp    eax,0x5b
c00171ce:	75 18                	jne    c00171e8 <VgaText::putchar(char)+0x30>
c00171d0:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00171d4:	74 20                	je     c00171f6 <VgaText::putchar(char)+0x3e>
c00171d6:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00171dc:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00171e3:	e9 c1 00 00 00       	jmp    c00172a9 <VgaText::putchar(char)+0xf1>
c00171e8:	83 f8 1b             	cmp    eax,0x1b
c00171eb:	75 09                	jne    c00171f6 <VgaText::putchar(char)+0x3e>
c00171ed:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00171f1:	e9 b3 00 00 00       	jmp    c00172a9 <VgaText::putchar(char)+0xf1>
c00171f6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00171f9:	84 c9                	test   cl,cl
c00171fb:	0f 84 98 00 00 00    	je     c0017299 <VgaText::putchar(char)+0xe1>
c0017201:	8d 77 c0             	lea    esi,[edi-0x40]
c0017204:	89 f2                	mov    edx,esi
c0017206:	80 fa 3e             	cmp    dl,0x3e
c0017209:	77 78                	ja     c0017283 <VgaText::putchar(char)+0xcb>
c001720b:	83 f8 6d             	cmp    eax,0x6d
c001720e:	75 47                	jne    c0017257 <VgaText::putchar(char)+0x9f>
c0017210:	31 f6                	xor    esi,esi
c0017212:	31 d2                	xor    edx,edx
c0017214:	31 c0                	xor    eax,eax
c0017216:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0017219:	7e 2d                	jle    c0017248 <VgaText::putchar(char)+0x90>
c001721b:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0017220:	83 fa 3b             	cmp    edx,0x3b
c0017223:	75 17                	jne    c001723c <VgaText::putchar(char)+0x84>
c0017225:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0017229:	50                   	push   eax
c001722a:	53                   	push   ebx
c001722b:	e8 40 fb ff ff       	call   c0016d70 <VgaText::doANSI_SGR(int)>
c0017230:	59                   	pop    ecx
c0017231:	31 d2                	xor    edx,edx
c0017233:	5f                   	pop    edi
c0017234:	31 c0                	xor    eax,eax
c0017236:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001723a:	eb 09                	jmp    c0017245 <VgaText::putchar(char)+0x8d>
c001723c:	6b c0 0a             	imul   eax,eax,0xa
c001723f:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0017243:	88 ca                	mov    dl,cl
c0017245:	46                   	inc    esi
c0017246:	eb ce                	jmp    c0017216 <VgaText::putchar(char)+0x5e>
c0017248:	84 d2                	test   dl,dl
c001724a:	74 2f                	je     c001727b <VgaText::putchar(char)+0xc3>
c001724c:	50                   	push   eax
c001724d:	53                   	push   ebx
c001724e:	e8 1d fb ff ff       	call   c0016d70 <VgaText::doANSI_SGR(int)>
c0017253:	58                   	pop    eax
c0017254:	5a                   	pop    edx
c0017255:	eb 24                	jmp    c001727b <VgaText::putchar(char)+0xc3>
c0017257:	83 f8 4a             	cmp    eax,0x4a
c001725a:	75 1f                	jne    c001727b <VgaText::putchar(char)+0xc3>
c001725c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0017260:	75 19                	jne    c001727b <VgaText::putchar(char)+0xc3>
c0017262:	83 ec 0c             	sub    esp,0xc
c0017265:	53                   	push   ebx
c0017266:	e8 89 fd ff ff       	call   c0016ff4 <VgaText::clearScreen()>
c001726b:	83 c4 0c             	add    esp,0xc
c001726e:	6a 00                	push   0x0
c0017270:	6a 00                	push   0x0
c0017272:	53                   	push   ebx
c0017273:	e8 1a fd ff ff       	call   c0016f92 <VgaText::setCursor(int, int)>
c0017278:	83 c4 10             	add    esp,0x10
c001727b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0017281:	eb 26                	jmp    c00172a9 <VgaText::putchar(char)+0xf1>
c0017283:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0017286:	83 f8 0e             	cmp    eax,0xe
c0017289:	7f 1e                	jg     c00172a9 <VgaText::putchar(char)+0xf1>
c001728b:	8d 48 01             	lea    ecx,[eax+0x1]
c001728e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0017291:	89 f9                	mov    ecx,edi
c0017293:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0017297:	eb 10                	jmp    c00172a9 <VgaText::putchar(char)+0xf1>
c0017299:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001729c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001729f:	50                   	push   eax
c00172a0:	53                   	push   ebx
c00172a1:	e8 42 fe ff ff       	call   c00170e8 <VgaText::putchar(char, VgaColour, VgaColour)>
c00172a6:	83 c4 10             	add    esp,0x10
c00172a9:	83 c4 10             	add    esp,0x10
c00172ac:	5b                   	pop    ebx
c00172ad:	5e                   	pop    esi
c00172ae:	5f                   	pop    edi
c00172af:	c3                   	ret    

c00172b0 <VgaText::putx(unsigned int)>:
c00172b0:	57                   	push   edi
c00172b1:	b9 11 00 00 00       	mov    ecx,0x11
c00172b6:	56                   	push   esi
c00172b7:	be 1e 11 03 c0       	mov    esi,0xc003111e
c00172bc:	53                   	push   ebx
c00172bd:	83 ec 20             	sub    esp,0x20
c00172c0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00172c4:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00172c8:	fc                   	cld    
c00172c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00172cb:	be 08 00 00 00       	mov    esi,0x8
c00172d0:	50                   	push   eax
c00172d1:	50                   	push   eax
c00172d2:	89 d8                	mov    eax,ebx
c00172d4:	c1 e3 04             	shl    ebx,0x4
c00172d7:	c1 e8 1c             	shr    eax,0x1c
c00172da:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00172df:	50                   	push   eax
c00172e0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00172e4:	e8 cf fe ff ff       	call   c00171b8 <VgaText::putchar(char)>
c00172e9:	83 c4 10             	add    esp,0x10
c00172ec:	4e                   	dec    esi
c00172ed:	75 e1                	jne    c00172d0 <VgaText::putx(unsigned int)+0x20>
c00172ef:	83 c4 20             	add    esp,0x20
c00172f2:	5b                   	pop    ebx
c00172f3:	5e                   	pop    esi
c00172f4:	5f                   	pop    edi
c00172f5:	c3                   	ret    

c00172f6 <VgaText::puts(char const*)>:
c00172f6:	53                   	push   ebx
c00172f7:	83 ec 08             	sub    esp,0x8
c00172fa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00172fe:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017301:	85 c0                	test   eax,eax
c0017303:	74 12                	je     c0017317 <VgaText::puts(char const*)+0x21>
c0017305:	43                   	inc    ebx
c0017306:	51                   	push   ecx
c0017307:	51                   	push   ecx
c0017308:	50                   	push   eax
c0017309:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001730d:	e8 a6 fe ff ff       	call   c00171b8 <VgaText::putchar(char)>
c0017312:	83 c4 10             	add    esp,0x10
c0017315:	eb e7                	jmp    c00172fe <VgaText::puts(char const*)+0x8>
c0017317:	83 c4 08             	add    esp,0x8
c001731a:	5b                   	pop    ebx
c001731b:	c3                   	ret    

c001731c <VgaText::write(unsigned long long, void*, int*)>:
c001731c:	55                   	push   ebp
c001731d:	57                   	push   edi
c001731e:	56                   	push   esi
c001731f:	53                   	push   ebx
c0017320:	83 ec 0c             	sub    esp,0xc
c0017323:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0017327:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001732b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001732f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0017336:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0017339:	39 eb                	cmp    ebx,ebp
c001733b:	74 13                	je     c0017350 <VgaText::write(unsigned long long, void*, int*)+0x34>
c001733d:	43                   	inc    ebx
c001733e:	50                   	push   eax
c001733f:	50                   	push   eax
c0017340:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0017344:	50                   	push   eax
c0017345:	56                   	push   esi
c0017346:	e8 6d fe ff ff       	call   c00171b8 <VgaText::putchar(char)>
c001734b:	83 c4 10             	add    esp,0x10
c001734e:	eb e9                	jmp    c0017339 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0017350:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0017357:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001735b:	89 38                	mov    DWORD PTR [eax],edi
c001735d:	83 c4 0c             	add    esp,0xc
c0017360:	31 c0                	xor    eax,eax
c0017362:	5b                   	pop    ebx
c0017363:	5e                   	pop    esi
c0017364:	5f                   	pop    edi
c0017365:	5d                   	pop    ebp
c0017366:	c3                   	ret    
c0017367:	90                   	nop

c0017368 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0017368:	55                   	push   ebp
c0017369:	57                   	push   edi
c001736a:	56                   	push   esi
c001736b:	53                   	push   ebx
c001736c:	83 ec 0c             	sub    esp,0xc
c001736f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017373:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017378:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c001737f:	50                   	push   eax
c0017380:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017385:	50                   	push   eax
c0017386:	e8 b3 fa ff ff       	call   c0016e3e <VgaText::combineColours(unsigned char, unsigned char)>
c001738b:	5a                   	pop    edx
c001738c:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0017390:	59                   	pop    ecx
c0017391:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0017394:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0017398:	0f b7 f6             	movzx  esi,si
c001739b:	0f b6 e8             	movzx  ebp,al
c001739e:	01 f6                	add    esi,esi
c00173a0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00173a3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00173a6:	85 c0                	test   eax,eax
c00173a8:	0f 84 ef 00 00 00    	je     c001749d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c00173ae:	83 f8 0d             	cmp    eax,0xd
c00173b1:	75 0c                	jne    c00173bf <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c00173b3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00173ba:	e9 d8 00 00 00       	jmp    c0017497 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00173bf:	83 f8 0a             	cmp    eax,0xa
c00173c2:	75 44                	jne    c0017408 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c00173c4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00173c7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00173ce:	8d 48 01             	lea    ecx,[eax+0x1]
c00173d1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00173d4:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00173d7:	75 0f                	jne    c00173e8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c00173d9:	83 ec 0c             	sub    esp,0xc
c00173dc:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00173df:	53                   	push   ebx
c00173e0:	e8 6b fa ff ff       	call   c0016e50 <VgaText::scrollScreen()>
c00173e5:	83 c4 10             	add    esp,0x10
c00173e8:	83 ec 0c             	sub    esp,0xc
c00173eb:	53                   	push   ebx
c00173ec:	e8 69 f9 ff ff       	call   c0016d5a <VgaText::updateCursor()>
c00173f1:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c00173f5:	83 c4 10             	add    esp,0x10
c00173f8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00173fb:	0f b7 f6             	movzx  esi,si
c00173fe:	01 f6                	add    esi,esi
c0017400:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0017403:	e9 8f 00 00 00       	jmp    c0017497 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0017408:	83 f8 08             	cmp    eax,0x8
c001740b:	75 34                	jne    c0017441 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c001740d:	51                   	push   ecx
c001740e:	51                   	push   ecx
c001740f:	6a 01                	push   0x1
c0017411:	53                   	push   ebx
c0017412:	e8 af fc ff ff       	call   c00170c6 <VgaText::decrementCursor(bool)>
c0017417:	5e                   	pop    esi
c0017418:	58                   	pop    eax
c0017419:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001741c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001741f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017422:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017425:	6a 20                	push   0x20
c0017427:	53                   	push   ebx
c0017428:	e8 c5 fa ff ff       	call   c0016ef2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001742d:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0017431:	83 c4 20             	add    esp,0x20
c0017434:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0017437:	0f b7 f6             	movzx  esi,si
c001743a:	01 f6                	add    esi,esi
c001743c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001743f:	eb 56                	jmp    c0017497 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0017441:	52                   	push   edx
c0017442:	52                   	push   edx
c0017443:	55                   	push   ebp
c0017444:	50                   	push   eax
c0017445:	e8 98 fa ff ff       	call   c0016ee2 <VgaText::combineCharAndColour(char, unsigned char)>
c001744a:	83 c4 10             	add    esp,0x10
c001744d:	66 89 06             	mov    WORD PTR [esi],ax
c0017450:	39 1d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebx
c0017456:	75 1d                	jne    c0017475 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0017458:	83 ec 0c             	sub    esp,0xc
c001745b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001745e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017461:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017465:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017469:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001746c:	50                   	push   eax
c001746d:	e8 92 07 01 00       	call   c0027c04 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0017472:	83 c4 20             	add    esp,0x20
c0017475:	83 c6 02             	add    esi,0x2
c0017478:	50                   	push   eax
c0017479:	50                   	push   eax
c001747a:	6a 00                	push   0x0
c001747c:	53                   	push   ebx
c001747d:	e8 f0 fb ff ff       	call   c0017072 <VgaText::incrementCursor(bool)>
c0017482:	83 c4 10             	add    esp,0x10
c0017485:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0017489:	75 0c                	jne    c0017497 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c001748b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c001748f:	0f b7 f6             	movzx  esi,si
c0017492:	01 f6                	add    esi,esi
c0017494:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0017497:	47                   	inc    edi
c0017498:	e9 06 ff ff ff       	jmp    c00173a3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c001749d:	83 ec 0c             	sub    esp,0xc
c00174a0:	53                   	push   ebx
c00174a1:	e8 b4 f8 ff ff       	call   c0016d5a <VgaText::updateCursor()>
c00174a6:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00174ad:	83 c4 1c             	add    esp,0x1c
c00174b0:	5b                   	pop    ebx
c00174b1:	5e                   	pop    esi
c00174b2:	5f                   	pop    edi
c00174b3:	5d                   	pop    ebp
c00174b4:	c3                   	ret    
c00174b5:	90                   	nop

c00174b6 <VgaText::VgaText(char const*)>:
c00174b6:	56                   	push   esi
c00174b7:	53                   	push   ebx
c00174b8:	83 ec 04             	sub    esp,0x4
c00174bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174bf:	83 ec 08             	sub    esp,0x8
c00174c2:	6a 00                	push   0x0
c00174c4:	50                   	push   eax
c00174c5:	e8 44 05 00 00       	call   c0017a0e <UnixFile::UnixFile(int)>
c00174ca:	83 c4 10             	add    esp,0x10
c00174cd:	ba 44 11 03 c0       	mov    edx,0xc0031144
c00174d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174d6:	89 10                	mov    DWORD PTR [eax],edx
c00174d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174dc:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00174e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174e7:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00174ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174f2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00174f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174fa:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00174fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017502:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0017509:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001750d:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0017514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017518:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c001751f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017523:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c001752a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001752e:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0017535:	83 ec 0c             	sub    esp,0xc
c0017538:	6a 01                	push   0x1
c001753a:	e8 1e 09 00 00       	call   c0017e5d <Virt::allocateKernelVirtualPages(int)>
c001753f:	83 c4 10             	add    esp,0x10
c0017542:	89 c2                	mov    edx,eax
c0017544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017548:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001754b:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c0017551:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017555:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017558:	89 c6                	mov    esi,eax
c001755a:	e8 b0 f0 ff ff       	call   c001660f <Phys::allocatePage()>
c001755f:	68 05 0c 00 00       	push   0xc05
c0017564:	56                   	push   esi
c0017565:	50                   	push   eax
c0017566:	53                   	push   ebx
c0017567:	e8 04 10 00 00       	call   c0018570 <VAS::mapPage(unsigned long, unsigned long, int)>
c001756c:	83 c4 10             	add    esp,0x10
c001756f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017573:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017576:	83 ec 04             	sub    esp,0x4
c0017579:	68 a0 0f 00 00       	push   0xfa0
c001757e:	6a 00                	push   0x0
c0017580:	50                   	push   eax
c0017581:	e8 6a 8f fe ff       	call   c00004f0 <memset>
c0017586:	83 c4 10             	add    esp,0x10
c0017589:	83 ec 04             	sub    esp,0x4
c001758c:	6a 00                	push   0x0
c001758e:	6a 07                	push   0x7
c0017590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017594:	e8 6b f8 ff ff       	call   c0016e04 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017599:	83 c4 10             	add    esp,0x10
c001759c:	83 ec 04             	sub    esp,0x4
c001759f:	6a 00                	push   0x0
c00175a1:	6a 00                	push   0x0
c00175a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175a7:	e8 e6 f9 ff ff       	call   c0016f92 <VgaText::setCursor(int, int)>
c00175ac:	83 c4 10             	add    esp,0x10
c00175af:	83 ec 0c             	sub    esp,0xc
c00175b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175b6:	e8 39 fa ff ff       	call   c0016ff4 <VgaText::clearScreen()>
c00175bb:	83 c4 10             	add    esp,0x10
c00175be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175c2:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00175c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175ca:	05 82 00 00 00       	add    eax,0x82
c00175cf:	83 ec 04             	sub    esp,0x4
c00175d2:	68 80 00 00 00       	push   0x80
c00175d7:	6a 00                	push   0x0
c00175d9:	50                   	push   eax
c00175da:	e8 11 8f fe ff       	call   c00004f0 <memset>
c00175df:	83 c4 10             	add    esp,0x10
c00175e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175e6:	05 02 01 00 00       	add    eax,0x102
c00175eb:	83 ec 04             	sub    esp,0x4
c00175ee:	68 80 00 00 00       	push   0x80
c00175f3:	6a 00                	push   0x0
c00175f5:	50                   	push   eax
c00175f6:	e8 f5 8e fe ff       	call   c00004f0 <memset>
c00175fb:	83 c4 10             	add    esp,0x10
c00175fe:	90                   	nop
c00175ff:	83 c4 04             	add    esp,0x4
c0017602:	5b                   	pop    ebx
c0017603:	5e                   	pop    esi
c0017604:	c3                   	ret    
c0017605:	90                   	nop

c0017606 <VgaText::receiveKey(unsigned char)>:
c0017606:	55                   	push   ebp
c0017607:	57                   	push   edi
c0017608:	56                   	push   esi
c0017609:	53                   	push   ebx
c001760a:	83 ec 2c             	sub    esp,0x2c
c001760d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0017611:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017615:	89 ef                	mov    edi,ebp
c0017617:	81 e7 ff 00 00 00    	and    edi,0xff
c001761d:	0f 84 66 01 00 00    	je     c0017789 <VgaText::receiveKey(unsigned char)+0x183>
c0017623:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0017629:	83 ff 08             	cmp    edi,0x8
c001762c:	75 73                	jne    c00176a1 <VgaText::receiveKey(unsigned char)+0x9b>
c001762e:	83 ec 0c             	sub    esp,0xc
c0017631:	56                   	push   esi
c0017632:	e8 39 8f fe ff       	call   c0000570 <strlen>
c0017637:	83 c4 10             	add    esp,0x10
c001763a:	85 c0                	test   eax,eax
c001763c:	0f 84 02 01 00 00    	je     c0017744 <VgaText::receiveKey(unsigned char)+0x13e>
c0017642:	50                   	push   eax
c0017643:	50                   	push   eax
c0017644:	6a 08                	push   0x8
c0017646:	53                   	push   ebx
c0017647:	e8 6c fb ff ff       	call   c00171b8 <VgaText::putchar(char)>
c001764c:	89 34 24             	mov    DWORD PTR [esp],esi
c001764f:	e8 1c 8f fe ff       	call   c0000570 <strlen>
c0017654:	83 c4 10             	add    esp,0x10
c0017657:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c001765f:	83 fa 0d             	cmp    edx,0xd
c0017662:	89 d0                	mov    eax,edx
c0017664:	0f 95 c1             	setne  cl
c0017667:	83 fa 1f             	cmp    edx,0x1f
c001766a:	0f 9e c2             	setle  dl
c001766d:	0f b6 d2             	movzx  edx,dl
c0017670:	85 ca                	test   edx,ecx
c0017672:	74 17                	je     c001768b <VgaText::receiveKey(unsigned char)+0x85>
c0017674:	83 e8 08             	sub    eax,0x8
c0017677:	3c 02                	cmp    al,0x2
c0017679:	76 10                	jbe    c001768b <VgaText::receiveKey(unsigned char)+0x85>
c001767b:	55                   	push   ebp
c001767c:	55                   	push   ebp
c001767d:	68 2f 11 03 c0       	push   0xc003112f
c0017682:	53                   	push   ebx
c0017683:	e8 6e fc ff ff       	call   c00172f6 <VgaText::puts(char const*)>
c0017688:	83 c4 10             	add    esp,0x10
c001768b:	83 ec 0c             	sub    esp,0xc
c001768e:	56                   	push   esi
c001768f:	e8 dc 8e fe ff       	call   c0000570 <strlen>
c0017694:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c001769c:	e9 a0 00 00 00       	jmp    c0017741 <VgaText::receiveKey(unsigned char)+0x13b>
c00176a1:	83 ec 0c             	sub    esp,0xc
c00176a4:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c00176aa:	50                   	push   eax
c00176ab:	e8 c0 8e fe ff       	call   c0000570 <strlen>
c00176b0:	89 34 24             	mov    DWORD PTR [esp],esi
c00176b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00176b7:	e8 b4 8e fe ff       	call   c0000570 <strlen>
c00176bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00176c0:	83 c4 10             	add    esp,0x10
c00176c3:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c00176c7:	3d 80 00 00 00       	cmp    eax,0x80
c00176cc:	0f 87 b7 00 00 00    	ja     c0017789 <VgaText::receiveKey(unsigned char)+0x183>
c00176d2:	8d 45 ff             	lea    eax,[ebp-0x1]
c00176d5:	8d 55 f7             	lea    edx,[ebp-0x9]
c00176d8:	3c 1e                	cmp    al,0x1e
c00176da:	0f 96 c0             	setbe  al
c00176dd:	80 fa 01             	cmp    dl,0x1
c00176e0:	0f 97 c2             	seta   dl
c00176e3:	0f b6 d2             	movzx  edx,dl
c00176e6:	85 c2                	test   edx,eax
c00176e8:	74 2e                	je     c0017718 <VgaText::receiveKey(unsigned char)+0x112>
c00176ea:	83 ff 0d             	cmp    edi,0xd
c00176ed:	74 29                	je     c0017718 <VgaText::receiveKey(unsigned char)+0x112>
c00176ef:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00176f2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00176f5:	68 35 11 03 c0       	push   0xc0031135
c00176fa:	53                   	push   ebx
c00176fb:	e8 68 fc ff ff       	call   c0017368 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017700:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017703:	8d 45 40             	lea    eax,[ebp+0x40]
c0017706:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017709:	0f b6 c0             	movzx  eax,al
c001770c:	50                   	push   eax
c001770d:	53                   	push   ebx
c001770e:	e8 d5 f9 ff ff       	call   c00170e8 <VgaText::putchar(char, VgaColour, VgaColour)>
c0017713:	83 c4 20             	add    esp,0x20
c0017716:	eb 11                	jmp    c0017729 <VgaText::receiveKey(unsigned char)+0x123>
c0017718:	89 e8                	mov    eax,ebp
c001771a:	51                   	push   ecx
c001771b:	0f be c0             	movsx  eax,al
c001771e:	51                   	push   ecx
c001771f:	50                   	push   eax
c0017720:	53                   	push   ebx
c0017721:	e8 92 fa ff ff       	call   c00171b8 <VgaText::putchar(char)>
c0017726:	83 c4 10             	add    esp,0x10
c0017729:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001772e:	89 e8                	mov    eax,ebp
c0017730:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0017734:	52                   	push   edx
c0017735:	52                   	push   edx
c0017736:	8d 44 24 26          	lea    eax,[esp+0x26]
c001773a:	50                   	push   eax
c001773b:	56                   	push   esi
c001773c:	e8 ff 90 fe ff       	call   c0000840 <strcat>
c0017741:	83 c4 10             	add    esp,0x10
c0017744:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c001774a:	b0 01                	mov    al,0x1
c001774c:	83 ff 1c             	cmp    edi,0x1c
c001774f:	77 0e                	ja     c001775f <VgaText::receiveKey(unsigned char)+0x159>
c0017751:	b8 08 04 00 10       	mov    eax,0x10000408
c0017756:	89 f9                	mov    ecx,edi
c0017758:	d3 e8                	shr    eax,cl
c001775a:	f7 d0                	not    eax
c001775c:	83 e0 01             	and    eax,0x1
c001775f:	84 c0                	test   al,al
c0017761:	74 04                	je     c0017767 <VgaText::receiveKey(unsigned char)+0x161>
c0017763:	84 d2                	test   dl,dl
c0017765:	74 22                	je     c0017789 <VgaText::receiveKey(unsigned char)+0x183>
c0017767:	81 c3 02 01 00 00    	add    ebx,0x102
c001776d:	50                   	push   eax
c001776e:	50                   	push   eax
c001776f:	56                   	push   esi
c0017770:	53                   	push   ebx
c0017771:	e8 ca 90 fe ff       	call   c0000840 <strcat>
c0017776:	83 c4 0c             	add    esp,0xc
c0017779:	68 80 00 00 00       	push   0x80
c001777e:	6a 00                	push   0x0
c0017780:	56                   	push   esi
c0017781:	e8 6a 8d fe ff       	call   c00004f0 <memset>
c0017786:	83 c4 10             	add    esp,0x10
c0017789:	83 c4 2c             	add    esp,0x2c
c001778c:	5b                   	pop    ebx
c001778d:	5e                   	pop    esi
c001778e:	5f                   	pop    edi
c001778f:	5d                   	pop    ebp
c0017790:	c3                   	ret    
c0017791:	90                   	nop

c0017792 <VgaText::doUpdate()>:
c0017792:	c3                   	ret    
c0017793:	90                   	nop

c0017794 <TSS::TSS()>:
c0017794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017798:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001779f:	90                   	nop
c00177a0:	c3                   	ret    
c00177a1:	90                   	nop
c00177a2:	66 90                	xchg   ax,ax

c00177a4 <TSS::setESP(unsigned long)>:
c00177a4:	55                   	push   ebp
c00177a5:	89 e5                	mov    ebp,esp
c00177a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00177aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00177ad:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00177b0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00177b3:	90                   	nop
c00177b4:	5d                   	pop    ebp
c00177b5:	c3                   	ret    
c00177b6:	66 90                	xchg   ax,ax

c00177b8 <TSS::flush()>:
c00177b8:	55                   	push   ebp
c00177b9:	89 e5                	mov    ebp,esp
c00177bb:	83 ec 10             	sub    esp,0x10
c00177be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00177c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00177c3:	83 c8 03             	or     eax,0x3
c00177c6:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00177ca:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00177ce:	66 89 d0             	mov    ax,dx
c00177d1:	0f 00 d8             	ltr    ax
c00177d4:	90                   	nop
c00177d5:	c9                   	leave  
c00177d6:	c3                   	ret    
c00177d7:	90                   	nop

c00177d8 <TSS::setup(unsigned long, unsigned long)>:
c00177d8:	55                   	push   ebp
c00177d9:	89 e5                	mov    ebp,esp
c00177db:	83 ec 18             	sub    esp,0x18
c00177de:	83 ec 0c             	sub    esp,0xc
c00177e1:	6a 68                	push   0x68
c00177e3:	e8 1e eb ff ff       	call   c0016306 <malloc>
c00177e8:	83 c4 10             	add    esp,0x10
c00177eb:	89 c2                	mov    edx,eax
c00177ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00177f0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00177f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00177f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00177f9:	83 ec 04             	sub    esp,0x4
c00177fc:	6a 68                	push   0x68
c00177fe:	6a 00                	push   0x0
c0017800:	50                   	push   eax
c0017801:	e8 ea 8c fe ff       	call   c00004f0 <memset>
c0017806:	83 c4 10             	add    esp,0x10
c0017809:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001780c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001780f:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0017815:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017818:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001781b:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0017821:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017824:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017827:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001782a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001782d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017830:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017833:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0017839:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001783c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001783f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0017845:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017848:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001784b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0017851:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017854:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017857:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c001785d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017860:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017863:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0017869:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001786c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001786f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0017875:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017878:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001787b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001787e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0017881:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017884:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017887:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001788a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001788d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017890:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017893:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c001789a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001789d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178a0:	0f 20 da             	mov    edx,cr3
c00178a3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00178a6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00178a9:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00178ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178b2:	83 ec 08             	sub    esp,0x8
c00178b5:	50                   	push   eax
c00178b6:	8d 45 ec             	lea    eax,[ebp-0x14]
c00178b9:	50                   	push   eax
c00178ba:	e8 b3 e2 ff ff       	call   c0015b72 <GDTEntry::setBase(unsigned int)>
c00178bf:	83 c4 10             	add    esp,0x10
c00178c2:	83 ec 08             	sub    esp,0x8
c00178c5:	6a 68                	push   0x68
c00178c7:	8d 45 ec             	lea    eax,[ebp-0x14]
c00178ca:	50                   	push   eax
c00178cb:	e8 be e2 ff ff       	call   c0015b8e <GDTEntry::setLimit(unsigned int)>
c00178d0:	83 c4 10             	add    esp,0x10
c00178d3:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00178d7:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00178da:	83 e0 0f             	and    eax,0xf
c00178dd:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00178e0:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00178e3:	83 c8 40             	or     eax,0x40
c00178e6:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00178e9:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00178ee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00178f4:	05 78 01 00 00       	add    eax,0x178
c00178f9:	83 ec 04             	sub    esp,0x4
c00178fc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00178ff:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0017902:	50                   	push   eax
c0017903:	e8 ba e2 ff ff       	call   c0015bc2 <GDT::addEntry(GDTEntry)>
c0017908:	83 c4 10             	add    esp,0x10
c001790b:	89 c2                	mov    edx,eax
c001790d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017910:	89 10                	mov    DWORD PTR [eax],edx
c0017912:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0017917:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001791d:	05 78 01 00 00       	add    eax,0x178
c0017922:	83 ec 0c             	sub    esp,0xc
c0017925:	50                   	push   eax
c0017926:	e8 c1 e2 ff ff       	call   c0015bec <GDT::flush()>
c001792b:	83 c4 10             	add    esp,0x10
c001792e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017931:	8b 00                	mov    eax,DWORD PTR [eax]
c0017933:	c9                   	leave  
c0017934:	c3                   	ret    
c0017935:	90                   	nop

c0017936 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0017936:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001793a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001793e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017941:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0017946:	75 08                	jne    c0017950 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0017948:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001794e:	eb 38                	jmp    c0017988 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0017950:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0017955:	75 17                	jne    c001796e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0017957:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001795c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001795f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017965:	8b 10                	mov    edx,DWORD PTR [eax]
c0017967:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001796b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001796e:	89 c1                	mov    ecx,eax
c0017970:	83 e1 fd             	and    ecx,0xfffffffd
c0017973:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0017979:	74 cd                	je     c0017948 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001797b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0017980:	83 e0 ef             	and    eax,0xffffffef
c0017983:	83 f8 08             	cmp    eax,0x8
c0017986:	76 c0                	jbe    c0017948 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017988:	31 c0                	xor    eax,eax
c001798a:	c3                   	ret    
c001798b:	90                   	nop

c001798c <ReservedFilename::isAtty()>:
c001798c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017990:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017993:	31 c0                	xor    eax,eax
c0017995:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001799b:	74 09                	je     c00179a6 <ReservedFilename::isAtty()+0x1a>
c001799d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00179a3:	0f 94 c0             	sete   al
c00179a6:	c3                   	ret    
c00179a7:	90                   	nop

c00179a8 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00179a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00179ac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00179b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00179b7:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00179bc:	75 08                	jne    c00179c6 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00179be:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00179c4:	eb 3d                	jmp    c0017a03 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00179c6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00179cb:	75 17                	jne    c00179e4 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00179cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00179d2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00179d5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179db:	8b 10                	mov    edx,DWORD PTR [eax]
c00179dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00179e1:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00179e4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00179e9:	75 04                	jne    c00179ef <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00179eb:	89 0a                	mov    DWORD PTR [edx],ecx
c00179ed:	eb 14                	jmp    c0017a03 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00179ef:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00179f4:	74 c8                	je     c00179be <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00179f6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00179fb:	83 e0 ef             	and    eax,0xffffffef
c00179fe:	83 f8 08             	cmp    eax,0x8
c0017a01:	76 bb                	jbe    c00179be <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0017a03:	31 c0                	xor    eax,eax
c0017a05:	c3                   	ret    

c0017a06 <UnixFile::getFileDescriptor()>:
c0017a06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a0d:	c3                   	ret    

c0017a0e <UnixFile::UnixFile(int)>:
c0017a0e:	53                   	push   ebx
c0017a0f:	83 ec 28             	sub    esp,0x28
c0017a12:	ba 0c 12 03 c0       	mov    edx,0xc003120c
c0017a17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a1b:	89 10                	mov    DWORD PTR [eax],edx
c0017a1d:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0017a25:	0f 8f 90 01 00 00    	jg     c0017bbb <UnixFile::UnixFile(int)+0x1ad>
c0017a2b:	a1 80 3a 03 c0       	mov    eax,ds:0xc0033a80
c0017a30:	8d 50 01             	lea    edx,[eax+0x1]
c0017a33:	89 15 80 3a 03 c0    	mov    DWORD PTR ds:0xc0033a80,edx
c0017a39:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017a3d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017a40:	83 ec 08             	sub    esp,0x8
c0017a43:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017a47:	68 98 aa 03 c0       	push   0xc003aa98
c0017a4c:	e8 f7 6d 01 00       	call   c002e848 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017a51:	83 c4 10             	add    esp,0x10
c0017a54:	a0 94 aa 03 c0       	mov    al,ds:0xc003aa94
c0017a59:	83 f0 01             	xor    eax,0x1
c0017a5c:	0f b6 c0             	movzx  eax,al
c0017a5f:	85 c0                	test   eax,eax
c0017a61:	0f 84 55 01 00 00    	je     c0017bbc <UnixFile::UnixFile(int)+0x1ae>
c0017a67:	c6 05 94 aa 03 c0 01 	mov    BYTE PTR ds:0xc003aa94,0x1
c0017a6e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0017a76:	83 ec 0c             	sub    esp,0xc
c0017a79:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017a7d:	e8 84 e8 ff ff       	call   c0016306 <malloc>
c0017a82:	83 c4 10             	add    esp,0x10
c0017a85:	89 c3                	mov    ebx,eax
c0017a87:	83 ec 08             	sub    esp,0x8
c0017a8a:	68 03 ff ff 0f       	push   0xfffff03
c0017a8f:	53                   	push   ebx
c0017a90:	e8 2d 01 00 00       	call   c0017bc2 <ReservedFilename::ReservedFilename(int)>
c0017a95:	83 c4 10             	add    esp,0x10
c0017a98:	89 1d 8c aa 03 c0    	mov    DWORD PTR ds:0xc003aa8c,ebx
c0017a9e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0017aa6:	83 ec 0c             	sub    esp,0xc
c0017aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017aad:	e8 54 e8 ff ff       	call   c0016306 <malloc>
c0017ab2:	83 c4 10             	add    esp,0x10
c0017ab5:	89 c3                	mov    ebx,eax
c0017ab7:	83 ec 08             	sub    esp,0x8
c0017aba:	68 01 ff ff 0f       	push   0xfffff01
c0017abf:	53                   	push   ebx
c0017ac0:	e8 fd 00 00 00       	call   c0017bc2 <ReservedFilename::ReservedFilename(int)>
c0017ac5:	83 c4 10             	add    esp,0x10
c0017ac8:	89 1d 90 aa 03 c0    	mov    DWORD PTR ds:0xc003aa90,ebx
c0017ace:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0017ad6:	83 ec 0c             	sub    esp,0xc
c0017ad9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017add:	e8 24 e8 ff ff       	call   c0016306 <malloc>
c0017ae2:	83 c4 10             	add    esp,0x10
c0017ae5:	89 c3                	mov    ebx,eax
c0017ae7:	83 ec 08             	sub    esp,0x8
c0017aea:	68 00 ff ff 0f       	push   0xfffff00
c0017aef:	53                   	push   ebx
c0017af0:	e8 cd 00 00 00       	call   c0017bc2 <ReservedFilename::ReservedFilename(int)>
c0017af5:	83 c4 10             	add    esp,0x10
c0017af8:	89 1d 84 aa 03 c0    	mov    DWORD PTR ds:0xc003aa84,ebx
c0017afe:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0017b06:	83 ec 0c             	sub    esp,0xc
c0017b09:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017b0d:	e8 f4 e7 ff ff       	call   c0016306 <malloc>
c0017b12:	83 c4 10             	add    esp,0x10
c0017b15:	89 c3                	mov    ebx,eax
c0017b17:	83 ec 08             	sub    esp,0x8
c0017b1a:	68 02 ff ff 0f       	push   0xfffff02
c0017b1f:	53                   	push   ebx
c0017b20:	e8 9d 00 00 00       	call   c0017bc2 <ReservedFilename::ReservedFilename(int)>
c0017b25:	83 c4 10             	add    esp,0x10
c0017b28:	89 1d 88 aa 03 c0    	mov    DWORD PTR ds:0xc003aa88,ebx
c0017b2e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017b36:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0017b3b:	7f 7f                	jg     c0017bbc <UnixFile::UnixFile(int)+0x1ae>
c0017b3d:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0017b45:	83 ec 0c             	sub    esp,0xc
c0017b48:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b4c:	e8 b5 e7 ff ff       	call   c0016306 <malloc>
c0017b51:	83 c4 10             	add    esp,0x10
c0017b54:	89 c3                	mov    ebx,eax
c0017b56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b5a:	05 10 ff ff 0f       	add    eax,0xfffff10
c0017b5f:	83 ec 08             	sub    esp,0x8
c0017b62:	50                   	push   eax
c0017b63:	53                   	push   ebx
c0017b64:	e8 59 00 00 00       	call   c0017bc2 <ReservedFilename::ReservedFilename(int)>
c0017b69:	83 c4 10             	add    esp,0x10
c0017b6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b70:	89 1c 85 60 aa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc55a0],ebx
c0017b77:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0017b7f:	83 ec 0c             	sub    esp,0xc
c0017b82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017b86:	e8 7b e7 ff ff       	call   c0016306 <malloc>
c0017b8b:	83 c4 10             	add    esp,0x10
c0017b8e:	89 c3                	mov    ebx,eax
c0017b90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b94:	05 20 ff ff 0f       	add    eax,0xfffff20
c0017b99:	83 ec 08             	sub    esp,0x8
c0017b9c:	50                   	push   eax
c0017b9d:	53                   	push   ebx
c0017b9e:	e8 1f 00 00 00       	call   c0017bc2 <ReservedFilename::ReservedFilename(int)>
c0017ba3:	83 c4 10             	add    esp,0x10
c0017ba6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017baa:	89 1c 85 20 aa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc55e0],ebx
c0017bb1:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0017bb6:	e9 7b ff ff ff       	jmp    c0017b36 <UnixFile::UnixFile(int)+0x128>
c0017bbb:	90                   	nop
c0017bbc:	83 c4 28             	add    esp,0x28
c0017bbf:	5b                   	pop    ebx
c0017bc0:	c3                   	ret    
c0017bc1:	90                   	nop

c0017bc2 <ReservedFilename::ReservedFilename(int)>:
c0017bc2:	83 ec 0c             	sub    esp,0xc
c0017bc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bc9:	83 ec 08             	sub    esp,0x8
c0017bcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017bd0:	50                   	push   eax
c0017bd1:	e8 38 fe ff ff       	call   c0017a0e <UnixFile::UnixFile(int)>
c0017bd6:	83 c4 10             	add    esp,0x10
c0017bd9:	ba 28 12 03 c0       	mov    edx,0xc0031228
c0017bde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017be2:	89 10                	mov    DWORD PTR [eax],edx
c0017be4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017be8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017bec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017bef:	90                   	nop
c0017bf0:	83 c4 0c             	add    esp,0xc
c0017bf3:	c3                   	ret    

c0017bf4 <UnixFile::~UnixFile()>:
c0017bf4:	83 ec 1c             	sub    esp,0x1c
c0017bf7:	ba 0c 12 03 c0       	mov    edx,0xc003120c
c0017bfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c00:	89 10                	mov    DWORD PTR [eax],edx
c0017c02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c09:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0017c0e:	7f 76                	jg     c0017c86 <UnixFile::~UnixFile()+0x92>
c0017c10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017c18:	83 ec 0c             	sub    esp,0xc
c0017c1b:	68 98 aa 03 c0       	push   0xc003aa98
c0017c20:	e8 f7 6c 01 00       	call   c002e91c <LinkedList<UnixFile>::getFirstElement()>
c0017c25:	83 c4 10             	add    esp,0x10
c0017c28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017c2c:	83 ec 0c             	sub    esp,0xc
c0017c2f:	68 98 aa 03 c0       	push   0xc003aa98
c0017c34:	e8 eb 6c 01 00       	call   c002e924 <LinkedList<UnixFile>::removeFirst()>
c0017c39:	83 c4 10             	add    esp,0x10
c0017c3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c40:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0017c44:	74 43                	je     c0017c89 <UnixFile::~UnixFile()+0x95>
c0017c46:	83 ec 08             	sub    esp,0x8
c0017c49:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017c4d:	68 98 aa 03 c0       	push   0xc003aa98
c0017c52:	e8 f1 6b 01 00       	call   c002e848 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017c57:	83 c4 10             	add    esp,0x10
c0017c5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c5e:	8d 50 01             	lea    edx,[eax+0x1]
c0017c61:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017c65:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0017c6a:	0f 94 c0             	sete   al
c0017c6d:	0f b6 c0             	movzx  eax,al
c0017c70:	85 c0                	test   eax,eax
c0017c72:	74 a4                	je     c0017c18 <UnixFile::~UnixFile()+0x24>
c0017c74:	83 ec 0c             	sub    esp,0xc
c0017c77:	68 e4 11 03 c0       	push   0xc00311e4
c0017c7c:	e8 2d 85 00 00       	call   c00201ae <KePanic(char const*)>
c0017c81:	83 c4 10             	add    esp,0x10
c0017c84:	eb 92                	jmp    c0017c18 <UnixFile::~UnixFile()+0x24>
c0017c86:	90                   	nop
c0017c87:	eb 01                	jmp    c0017c8a <UnixFile::~UnixFile()+0x96>
c0017c89:	90                   	nop
c0017c8a:	90                   	nop
c0017c8b:	83 c4 1c             	add    esp,0x1c
c0017c8e:	c3                   	ret    
c0017c8f:	90                   	nop

c0017c90 <UnixFile::~UnixFile()>:
c0017c90:	83 ec 0c             	sub    esp,0xc
c0017c93:	83 ec 0c             	sub    esp,0xc
c0017c96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c9a:	e8 55 ff ff ff       	call   c0017bf4 <UnixFile::~UnixFile()>
c0017c9f:	83 c4 10             	add    esp,0x10
c0017ca2:	83 ec 08             	sub    esp,0x8
c0017ca5:	6a 0c                	push   0xc
c0017ca7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017cab:	e8 b8 13 00 00       	call   c0019068 <operator delete(void*, unsigned long)>
c0017cb0:	83 c4 10             	add    esp,0x10
c0017cb3:	83 c4 0c             	add    esp,0xc
c0017cb6:	c3                   	ret    
c0017cb7:	90                   	nop

c0017cb8 <ReservedFilename::~ReservedFilename()>:
c0017cb8:	83 ec 0c             	sub    esp,0xc
c0017cbb:	ba 28 12 03 c0       	mov    edx,0xc0031228
c0017cc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cc4:	89 10                	mov    DWORD PTR [eax],edx
c0017cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cca:	83 ec 0c             	sub    esp,0xc
c0017ccd:	50                   	push   eax
c0017cce:	e8 21 ff ff ff       	call   c0017bf4 <UnixFile::~UnixFile()>
c0017cd3:	83 c4 10             	add    esp,0x10
c0017cd6:	90                   	nop
c0017cd7:	83 c4 0c             	add    esp,0xc
c0017cda:	c3                   	ret    
c0017cdb:	90                   	nop

c0017cdc <ReservedFilename::~ReservedFilename()>:
c0017cdc:	83 ec 0c             	sub    esp,0xc
c0017cdf:	83 ec 0c             	sub    esp,0xc
c0017ce2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ce6:	e8 cd ff ff ff       	call   c0017cb8 <ReservedFilename::~ReservedFilename()>
c0017ceb:	83 c4 10             	add    esp,0x10
c0017cee:	83 ec 08             	sub    esp,0x8
c0017cf1:	6a 0c                	push   0xc
c0017cf3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017cf7:	e8 6c 13 00 00       	call   c0019068 <operator delete(void*, unsigned long)>
c0017cfc:	83 c4 10             	add    esp,0x10
c0017cff:	83 c4 0c             	add    esp,0xc
c0017d02:	c3                   	ret    

c0017d03 <KeGetFileFromDescriptor(int)>:
c0017d03:	53                   	push   ebx
c0017d04:	83 ec 08             	sub    esp,0x8
c0017d07:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017d0b:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0017d11:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0017d17:	7f 2c                	jg     c0017d45 <KeGetFileFromDescriptor(int)+0x42>
c0017d19:	83 ec 0c             	sub    esp,0xc
c0017d1c:	68 98 aa 03 c0       	push   0xc003aa98
c0017d21:	e8 f6 6b 01 00       	call   c002e91c <LinkedList<UnixFile>::getFirstElement()>
c0017d26:	83 c4 10             	add    esp,0x10
c0017d29:	85 c0                	test   eax,eax
c0017d2b:	75 04                	jne    c0017d31 <KeGetFileFromDescriptor(int)+0x2e>
c0017d2d:	31 c0                	xor    eax,eax
c0017d2f:	eb 6e                	jmp    c0017d9f <KeGetFileFromDescriptor(int)+0x9c>
c0017d31:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0017d34:	74 69                	je     c0017d9f <KeGetFileFromDescriptor(int)+0x9c>
c0017d36:	52                   	push   edx
c0017d37:	52                   	push   edx
c0017d38:	50                   	push   eax
c0017d39:	68 98 aa 03 c0       	push   0xc003aa98
c0017d3e:	e8 83 6c 01 00       	call   c002e9c6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0017d43:	eb e1                	jmp    c0017d26 <KeGetFileFromDescriptor(int)+0x23>
c0017d45:	a1 8c aa 03 c0       	mov    eax,ds:0xc003aa8c
c0017d4a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0017d50:	74 4d                	je     c0017d9f <KeGetFileFromDescriptor(int)+0x9c>
c0017d52:	a1 90 aa 03 c0       	mov    eax,ds:0xc003aa90
c0017d57:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0017d5d:	74 40                	je     c0017d9f <KeGetFileFromDescriptor(int)+0x9c>
c0017d5f:	a1 88 aa 03 c0       	mov    eax,ds:0xc003aa88
c0017d64:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0017d6a:	74 33                	je     c0017d9f <KeGetFileFromDescriptor(int)+0x9c>
c0017d6c:	a1 84 aa 03 c0       	mov    eax,ds:0xc003aa84
c0017d71:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0017d77:	74 26                	je     c0017d9f <KeGetFileFromDescriptor(int)+0x9c>
c0017d79:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0017d7f:	83 f8 08             	cmp    eax,0x8
c0017d82:	77 09                	ja     c0017d8d <KeGetFileFromDescriptor(int)+0x8a>
c0017d84:	8b 04 85 60 aa 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc55a0]
c0017d8b:	eb 12                	jmp    c0017d9f <KeGetFileFromDescriptor(int)+0x9c>
c0017d8d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0017d93:	83 fb 08             	cmp    ebx,0x8
c0017d96:	77 95                	ja     c0017d2d <KeGetFileFromDescriptor(int)+0x2a>
c0017d98:	8b 04 9d 20 aa 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc55e0]
c0017d9f:	83 c4 08             	add    esp,0x8
c0017da2:	5b                   	pop    ebx
c0017da3:	c3                   	ret    

c0017da4 <__static_initialization_and_destruction_0(int, int)>:
c0017da4:	83 ec 0c             	sub    esp,0xc
c0017da7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017dac:	75 34                	jne    c0017de2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0017dae:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0017db6:	75 2a                	jne    c0017de2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0017db8:	83 ec 0c             	sub    esp,0xc
c0017dbb:	68 98 aa 03 c0       	push   0xc003aa98
c0017dc0:	e8 41 6a 01 00       	call   c002e806 <LinkedList<UnixFile>::LinkedList()>
c0017dc5:	83 c4 10             	add    esp,0x10
c0017dc8:	83 ec 04             	sub    esp,0x4
c0017dcb:	68 f8 39 03 c0       	push   0xc00339f8
c0017dd0:	68 98 aa 03 c0       	push   0xc003aa98
c0017dd5:	68 04 e8 02 c0       	push   0xc002e804
c0017dda:	e8 39 12 00 00       	call   c0019018 <__cxa_atexit>
c0017ddf:	83 c4 10             	add    esp,0x10
c0017de2:	90                   	nop
c0017de3:	83 c4 0c             	add    esp,0xc
c0017de6:	c3                   	ret    

c0017de7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0017de7:	83 ec 0c             	sub    esp,0xc
c0017dea:	83 ec 08             	sub    esp,0x8
c0017ded:	68 ff ff 00 00       	push   0xffff
c0017df2:	6a 01                	push   0x1
c0017df4:	e8 ab ff ff ff       	call   c0017da4 <__static_initialization_and_destruction_0(int, int)>
c0017df9:	83 c4 10             	add    esp,0x10
c0017dfc:	83 c4 0c             	add    esp,0xc
c0017dff:	c3                   	ret    

c0017e00 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0017e00:	53                   	push   ebx
c0017e01:	8b 15 88 3a 03 c0    	mov    edx,DWORD PTR ds:0xc0033a88
c0017e07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e0b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017e0f:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0017e15:	89 d8                	mov    eax,ebx
c0017e17:	d1 e8                	shr    eax,1
c0017e19:	01 d0                	add    eax,edx
c0017e1b:	80 e3 01             	and    bl,0x1
c0017e1e:	8a 10                	mov    dl,BYTE PTR [eax]
c0017e20:	75 09                	jne    c0017e2b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0017e22:	83 e2 f0             	and    edx,0xfffffff0
c0017e25:	09 ca                	or     edx,ecx
c0017e27:	88 10                	mov    BYTE PTR [eax],dl
c0017e29:	5b                   	pop    ebx
c0017e2a:	c3                   	ret    
c0017e2b:	83 e2 0f             	and    edx,0xf
c0017e2e:	0f b6 c9             	movzx  ecx,cl
c0017e31:	c1 e1 04             	shl    ecx,0x4
c0017e34:	09 ca                	or     edx,ecx
c0017e36:	88 10                	mov    BYTE PTR [eax],dl
c0017e38:	5b                   	pop    ebx
c0017e39:	c3                   	ret    

c0017e3a <Virt::getPageState(unsigned long)>:
c0017e3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017e3e:	8b 0d 88 3a 03 c0    	mov    ecx,DWORD PTR ds:0xc0033a88
c0017e44:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0017e4a:	89 d0                	mov    eax,edx
c0017e4c:	d1 e8                	shr    eax,1
c0017e4e:	80 e2 01             	and    dl,0x1
c0017e51:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0017e54:	74 03                	je     c0017e59 <Virt::getPageState(unsigned long)+0x1f>
c0017e56:	c1 e8 04             	shr    eax,0x4
c0017e59:	83 e0 0f             	and    eax,0xf
c0017e5c:	c3                   	ret    

c0017e5d <Virt::allocateKernelVirtualPages(int)>:
c0017e5d:	55                   	push   ebp
c0017e5e:	31 ed                	xor    ebp,ebp
c0017e60:	57                   	push   edi
c0017e61:	31 ff                	xor    edi,edi
c0017e63:	56                   	push   esi
c0017e64:	53                   	push   ebx
c0017e65:	31 db                	xor    ebx,ebx
c0017e67:	83 ec 0c             	sub    esp,0xc
c0017e6a:	8b 35 84 3a 03 c0    	mov    esi,DWORD PTR ds:0xc0033a84
c0017e70:	56                   	push   esi
c0017e71:	e8 c4 ff ff ff       	call   c0017e3a <Virt::getPageState(unsigned long)>
c0017e76:	5a                   	pop    edx
c0017e77:	84 c0                	test   al,al
c0017e79:	75 41                	jne    c0017ebc <Virt::allocateKernelVirtualPages(int)+0x5f>
c0017e7b:	85 db                	test   ebx,ebx
c0017e7d:	75 02                	jne    c0017e81 <Virt::allocateKernelVirtualPages(int)+0x24>
c0017e7f:	89 f5                	mov    ebp,esi
c0017e81:	83 c3 01             	add    ebx,0x1
c0017e84:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0017e88:	74 5f                	je     c0017ee9 <Virt::allocateKernelVirtualPages(int)+0x8c>
c0017e8a:	83 c6 01             	add    esi,0x1
c0017e8d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0017e93:	76 34                	jbe    c0017ec9 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0017e95:	c7 05 84 3a 03 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0033a84,0xc8000
c0017e9f:	f7 c7 01 00 00 00    	test   edi,0x1
c0017ea5:	75 2a                	jne    c0017ed1 <Virt::allocateKernelVirtualPages(int)+0x74>
c0017ea7:	be 00 80 0c 00       	mov    esi,0xc8000
c0017eac:	bf 01 00 00 00       	mov    edi,0x1
c0017eb1:	56                   	push   esi
c0017eb2:	e8 83 ff ff ff       	call   c0017e3a <Virt::getPageState(unsigned long)>
c0017eb7:	5a                   	pop    edx
c0017eb8:	84 c0                	test   al,al
c0017eba:	74 bf                	je     c0017e7b <Virt::allocateKernelVirtualPages(int)+0x1e>
c0017ebc:	31 db                	xor    ebx,ebx
c0017ebe:	83 c6 01             	add    esi,0x1
c0017ec1:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0017ec7:	77 cc                	ja     c0017e95 <Virt::allocateKernelVirtualPages(int)+0x38>
c0017ec9:	89 35 84 3a 03 c0    	mov    DWORD PTR ds:0xc0033a84,esi
c0017ecf:	eb 9f                	jmp    c0017e70 <Virt::allocateKernelVirtualPages(int)+0x13>
c0017ed1:	83 ec 0c             	sub    esp,0xc
c0017ed4:	68 3c 12 03 c0       	push   0xc003123c
c0017ed9:	e8 d0 82 00 00       	call   c00201ae <KePanic(char const*)>
c0017ede:	8b 35 84 3a 03 c0    	mov    esi,DWORD PTR ds:0xc0033a84
c0017ee4:	83 c4 10             	add    esp,0x10
c0017ee7:	eb 87                	jmp    c0017e70 <Virt::allocateKernelVirtualPages(int)+0x13>
c0017ee9:	89 2d 84 3a 03 c0    	mov    DWORD PTR ds:0xc0033a84,ebp
c0017eef:	83 fb 01             	cmp    ebx,0x1
c0017ef2:	74 6f                	je     c0017f63 <Virt::allocateKernelVirtualPages(int)+0x106>
c0017ef4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017ef8:	85 c9                	test   ecx,ecx
c0017efa:	74 49                	je     c0017f45 <Virt::allocateKernelVirtualPages(int)+0xe8>
c0017efc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017f00:	89 e8                	mov    eax,ebp
c0017f02:	31 db                	xor    ebx,ebx
c0017f04:	8d 79 ff             	lea    edi,[ecx-0x1]
c0017f07:	eb 18                	jmp    c0017f21 <Virt::allocateKernelVirtualPages(int)+0xc4>
c0017f09:	6a 01                	push   0x1
c0017f0b:	83 c3 01             	add    ebx,0x1
c0017f0e:	50                   	push   eax
c0017f0f:	e8 ec fe ff ff       	call   c0017e00 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0017f14:	58                   	pop    eax
c0017f15:	5a                   	pop    edx
c0017f16:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0017f1a:	74 29                	je     c0017f45 <Virt::allocateKernelVirtualPages(int)+0xe8>
c0017f1c:	a1 84 3a 03 c0       	mov    eax,ds:0xc0033a84
c0017f21:	8d 50 01             	lea    edx,[eax+0x1]
c0017f24:	85 db                	test   ebx,ebx
c0017f26:	89 15 84 3a 03 c0    	mov    DWORD PTR ds:0xc0033a84,edx
c0017f2c:	74 24                	je     c0017f52 <Virt::allocateKernelVirtualPages(int)+0xf5>
c0017f2e:	39 df                	cmp    edi,ebx
c0017f30:	75 d7                	jne    c0017f09 <Virt::allocateKernelVirtualPages(int)+0xac>
c0017f32:	6a 03                	push   0x3
c0017f34:	83 c3 01             	add    ebx,0x1
c0017f37:	50                   	push   eax
c0017f38:	e8 c3 fe ff ff       	call   c0017e00 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0017f3d:	59                   	pop    ecx
c0017f3e:	5e                   	pop    esi
c0017f3f:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0017f43:	75 d7                	jne    c0017f1c <Virt::allocateKernelVirtualPages(int)+0xbf>
c0017f45:	83 c4 0c             	add    esp,0xc
c0017f48:	89 e8                	mov    eax,ebp
c0017f4a:	5b                   	pop    ebx
c0017f4b:	c1 e0 0c             	shl    eax,0xc
c0017f4e:	5e                   	pop    esi
c0017f4f:	5f                   	pop    edi
c0017f50:	5d                   	pop    ebp
c0017f51:	c3                   	ret    
c0017f52:	6a 02                	push   0x2
c0017f54:	bb 01 00 00 00       	mov    ebx,0x1
c0017f59:	50                   	push   eax
c0017f5a:	e8 a1 fe ff ff       	call   c0017e00 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0017f5f:	58                   	pop    eax
c0017f60:	5a                   	pop    edx
c0017f61:	eb b9                	jmp    c0017f1c <Virt::allocateKernelVirtualPages(int)+0xbf>
c0017f63:	6a 04                	push   0x4
c0017f65:	8d 45 01             	lea    eax,[ebp+0x1]
c0017f68:	55                   	push   ebp
c0017f69:	a3 84 3a 03 c0       	mov    ds:0xc0033a84,eax
c0017f6e:	e8 8d fe ff ff       	call   c0017e00 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0017f73:	5b                   	pop    ebx
c0017f74:	89 e8                	mov    eax,ebp
c0017f76:	5e                   	pop    esi
c0017f77:	c1 e0 0c             	shl    eax,0xc
c0017f7a:	83 c4 0c             	add    esp,0xc
c0017f7d:	5b                   	pop    ebx
c0017f7e:	5e                   	pop    esi
c0017f7f:	5f                   	pop    edi
c0017f80:	5d                   	pop    ebp
c0017f81:	c3                   	ret    

c0017f82 <Virt::freeSwapfilePage(unsigned long)>:
c0017f82:	53                   	push   ebx
c0017f83:	8b 15 ac aa 03 c0    	mov    edx,DWORD PTR ds:0xc003aaac
c0017f89:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017f8d:	b8 01 00 00 00       	mov    eax,0x1
c0017f92:	89 cb                	mov    ebx,ecx
c0017f94:	d3 e0                	shl    eax,cl
c0017f96:	c1 eb 05             	shr    ebx,0x5
c0017f99:	f7 d0                	not    eax
c0017f9b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0017f9e:	21 c1                	and    ecx,eax
c0017fa0:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0017fa3:	5b                   	pop    ebx
c0017fa4:	c3                   	ret    

c0017fa5 <Virt::swapIDToSector(unsigned long)>:
c0017fa5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017fa9:	8b 15 8c 3a 03 c0    	mov    edx,DWORD PTR ds:0xc0033a8c
c0017faf:	8b 0d 94 3a 03 c0    	mov    ecx,DWORD PTR ds:0xc0033a94
c0017fb5:	0f af c2             	imul   eax,edx
c0017fb8:	01 c8                	add    eax,ecx
c0017fba:	c3                   	ret    

c0017fbb <Virt::allocateSwapfilePage()>:
c0017fbb:	55                   	push   ebp
c0017fbc:	31 d2                	xor    edx,edx
c0017fbe:	57                   	push   edi
c0017fbf:	56                   	push   esi
c0017fc0:	53                   	push   ebx
c0017fc1:	83 ec 0c             	sub    esp,0xc
c0017fc4:	8b 0d 8c 3a 03 c0    	mov    ecx,DWORD PTR ds:0xc0033a8c
c0017fca:	a1 90 3a 03 c0       	mov    eax,ds:0xc0033a90
c0017fcf:	f7 f1                	div    ecx
c0017fd1:	39 0d 90 3a 03 c0    	cmp    DWORD PTR ds:0xc0033a90,ecx
c0017fd7:	72 2f                	jb     c0018008 <Virt::allocateSwapfilePage()+0x4d>
c0017fd9:	8b 35 ac aa 03 c0    	mov    esi,DWORD PTR ds:0xc003aaac
c0017fdf:	8b 16                	mov    edx,DWORD PTR [esi]
c0017fe1:	f6 c2 01             	test   dl,0x1
c0017fe4:	74 3e                	je     c0018024 <Virt::allocateSwapfilePage()+0x69>
c0017fe6:	31 c9                	xor    ecx,ecx
c0017fe8:	bf 01 00 00 00       	mov    edi,0x1
c0017fed:	eb 12                	jmp    c0018001 <Virt::allocateSwapfilePage()+0x46>
c0017fef:	89 fd                	mov    ebp,edi
c0017ff1:	89 ca                	mov    edx,ecx
c0017ff3:	d3 e5                	shl    ebp,cl
c0017ff5:	c1 ea 05             	shr    edx,0x5
c0017ff8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0017ffb:	8b 13                	mov    edx,DWORD PTR [ebx]
c0017ffd:	85 ea                	test   edx,ebp
c0017fff:	74 2c                	je     c001802d <Virt::allocateSwapfilePage()+0x72>
c0018001:	83 c1 01             	add    ecx,0x1
c0018004:	39 c8                	cmp    eax,ecx
c0018006:	77 e7                	ja     c0017fef <Virt::allocateSwapfilePage()+0x34>
c0018008:	83 ec 0c             	sub    esp,0xc
c001800b:	68 d0 14 03 c0       	push   0xc00314d0
c0018010:	e8 99 81 00 00       	call   c00201ae <KePanic(char const*)>
c0018015:	83 c4 10             	add    esp,0x10
c0018018:	31 c9                	xor    ecx,ecx
c001801a:	83 c4 0c             	add    esp,0xc
c001801d:	89 c8                	mov    eax,ecx
c001801f:	5b                   	pop    ebx
c0018020:	5e                   	pop    esi
c0018021:	5f                   	pop    edi
c0018022:	5d                   	pop    ebp
c0018023:	c3                   	ret    
c0018024:	89 f3                	mov    ebx,esi
c0018026:	bd 01 00 00 00       	mov    ebp,0x1
c001802b:	31 c9                	xor    ecx,ecx
c001802d:	09 ea                	or     edx,ebp
c001802f:	89 c8                	mov    eax,ecx
c0018031:	89 13                	mov    DWORD PTR [ebx],edx
c0018033:	83 c4 0c             	add    esp,0xc
c0018036:	5b                   	pop    ebx
c0018037:	5e                   	pop    esi
c0018038:	5f                   	pop    edi
c0018039:	5d                   	pop    ebp
c001803a:	c3                   	ret    

c001803b <Virt::virtualMemorySetup()>:
c001803b:	53                   	push   ebx
c001803c:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0018041:	6a 0f                	push   0xf
c0018043:	53                   	push   ebx
c0018044:	83 c3 01             	add    ebx,0x1
c0018047:	e8 b4 fd ff ff       	call   c0017e00 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001804c:	58                   	pop    eax
c001804d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0018053:	5a                   	pop    edx
c0018054:	75 eb                	jne    c0018041 <Virt::virtualMemorySetup()+0x6>
c0018056:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001805b:	6a 00                	push   0x0
c001805d:	53                   	push   ebx
c001805e:	83 c3 01             	add    ebx,0x1
c0018061:	e8 9a fd ff ff       	call   c0017e00 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018066:	59                   	pop    ecx
c0018067:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001806d:	58                   	pop    eax
c001806e:	75 eb                	jne    c001805b <Virt::virtualMemorySetup()+0x20>
c0018070:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0018075:	6a 0f                	push   0xf
c0018077:	53                   	push   ebx
c0018078:	83 c3 01             	add    ebx,0x1
c001807b:	e8 80 fd ff ff       	call   c0017e00 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018080:	58                   	pop    eax
c0018081:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0018087:	5a                   	pop    edx
c0018088:	75 eb                	jne    c0018075 <Virt::virtualMemorySetup()+0x3a>
c001808a:	5b                   	pop    ebx
c001808b:	c3                   	ret    

c001808c <Virt::setupPageSwapping(int)>:
c001808c:	53                   	push   ebx
c001808d:	83 ec 0c             	sub    esp,0xc
c0018090:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018094:	a1 88 f3 03 c0       	mov    eax,ds:0xc003f388
c0018099:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001809f:	8b 10                	mov    edx,DWORD PTR [eax]
c00180a1:	53                   	push   ebx
c00180a2:	c1 e3 0b             	shl    ebx,0xb
c00180a5:	68 e7 14 03 c0       	push   0xc00314e7
c00180aa:	50                   	push   eax
c00180ab:	ff 52 60             	call   DWORD PTR [edx+0x60]
c00180ae:	89 1d 90 3a 03 c0    	mov    DWORD PTR ds:0xc0033a90,ebx
c00180b4:	c6 05 98 3a 03 c0 43 	mov    BYTE PTR ds:0xc0033a98,0x43
c00180bb:	c1 eb 08             	shr    ebx,0x8
c00180be:	a3 94 3a 03 c0       	mov    ds:0xc0033a94,eax
c00180c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00180c6:	c7 05 8c 3a 03 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0033a8c,0x8
c00180d0:	e8 31 e2 ff ff       	call   c0016306 <malloc>
c00180d5:	83 c4 0c             	add    esp,0xc
c00180d8:	89 c1                	mov    ecx,eax
c00180da:	a3 ac aa 03 c0       	mov    ds:0xc003aaac,eax
c00180df:	31 d2                	xor    edx,edx
c00180e1:	a1 90 3a 03 c0       	mov    eax,ds:0xc0033a90
c00180e6:	f7 35 8c 3a 03 c0    	div    DWORD PTR ds:0xc0033a8c
c00180ec:	c1 e8 05             	shr    eax,0x5
c00180ef:	50                   	push   eax
c00180f0:	6a 00                	push   0x0
c00180f2:	51                   	push   ecx
c00180f3:	e8 f8 83 fe ff       	call   c00004f0 <memset>
c00180f8:	83 c4 18             	add    esp,0x18
c00180fb:	5b                   	pop    ebx
c00180fc:	c3                   	ret    
c00180fd:	90                   	nop

c00180fe <VAS::setCPUSpecific(unsigned long)>:
c00180fe:	c3                   	ret    
c00180ff:	90                   	nop

c0018100 <VAS::VAS(VAS*)>:
c0018100:	83 ec 0c             	sub    esp,0xc
c0018103:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018107:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001810e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018112:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018119:	83 ec 0c             	sub    esp,0xc
c001811c:	68 5c 12 03 c0       	push   0xc003125c
c0018121:	e8 88 80 00 00       	call   c00201ae <KePanic(char const*)>
c0018126:	83 c4 10             	add    esp,0x10
c0018129:	90                   	nop
c001812a:	83 c4 0c             	add    esp,0xc
c001812d:	c3                   	ret    

c001812e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001812e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018132:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0018137:	89 c2                	mov    edx,eax
c0018139:	c1 e8 0a             	shr    eax,0xa
c001813c:	c1 ea 16             	shr    edx,0x16
c001813f:	83 f9 01             	cmp    ecx,0x1
c0018142:	19 c9                	sbb    ecx,ecx
c0018144:	c1 e2 0c             	shl    edx,0xc
c0018147:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c001814d:	25 fc 0f 00 00       	and    eax,0xffc
c0018152:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0018159:	01 d0                	add    eax,edx
c001815b:	c3                   	ret    

c001815c <VAS::getPageTableEntry(unsigned long)>:
c001815c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018160:	89 ca                	mov    edx,ecx
c0018162:	c1 e9 0a             	shr    ecx,0xa
c0018165:	c1 ea 16             	shr    edx,0x16
c0018168:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c001816e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0018174:	c1 e0 0c             	shl    eax,0xc
c0018177:	8d 04 08             	lea    eax,[eax+ecx*1]
c001817a:	c3                   	ret    

c001817b <Virt::freeKernelVirtualPages(unsigned long)>:
c001817b:	55                   	push   ebp
c001817c:	57                   	push   edi
c001817d:	bf 01 00 00 00       	mov    edi,0x1
c0018182:	56                   	push   esi
c0018183:	53                   	push   ebx
c0018184:	83 ec 1c             	sub    esp,0x1c
c0018187:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001818b:	c1 ee 0c             	shr    esi,0xc
c001818e:	eb 48                	jmp    c00181d8 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0018190:	83 ec 08             	sub    esp,0x8
c0018193:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c0018198:	55                   	push   ebp
c0018199:	50                   	push   eax
c001819a:	e8 bd ff ff ff       	call   c001815c <VAS::getPageTableEntry(unsigned long)>
c001819f:	83 c4 10             	add    esp,0x10
c00181a2:	8b 10                	mov    edx,DWORD PTR [eax]
c00181a4:	f6 c6 04             	test   dh,0x4
c00181a7:	75 70                	jne    c0018219 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00181a9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00181af:	83 fb 04             	cmp    ebx,0x4
c00181b2:	0f 84 8a 00 00 00    	je     c0018242 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00181b8:	83 fb 02             	cmp    ebx,0x2
c00181bb:	0f 84 9a 00 00 00    	je     c001825b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c00181c1:	83 fb 03             	cmp    ebx,0x3
c00181c4:	0f 84 be 00 00 00    	je     c0018288 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c00181ca:	83 fb 01             	cmp    ebx,0x1
c00181cd:	0f 84 a2 00 00 00    	je     c0018275 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00181d3:	83 c6 01             	add    esi,0x1
c00181d6:	31 ff                	xor    edi,edi
c00181d8:	56                   	push   esi
c00181d9:	89 f5                	mov    ebp,esi
c00181db:	e8 5a fc ff ff       	call   c0017e3a <Virt::getPageState(unsigned long)>
c00181e0:	c1 e5 0c             	shl    ebp,0xc
c00181e3:	0f b6 d8             	movzx  ebx,al
c00181e6:	5a                   	pop    edx
c00181e7:	85 db                	test   ebx,ebx
c00181e9:	75 a5                	jne    c0018190 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c00181eb:	83 ec 0c             	sub    esp,0xc
c00181ee:	68 fe 14 03 c0       	push   0xc00314fe
c00181f3:	e8 b6 7f 00 00       	call   c00201ae <KePanic(char const*)>
c00181f8:	5a                   	pop    edx
c00181f9:	59                   	pop    ecx
c00181fa:	55                   	push   ebp
c00181fb:	8b 2d b0 aa 03 c0    	mov    ebp,DWORD PTR ds:0xc003aab0
c0018201:	55                   	push   ebp
c0018202:	e8 55 ff ff ff       	call   c001815c <VAS::getPageTableEntry(unsigned long)>
c0018207:	83 c4 10             	add    esp,0x10
c001820a:	8b 10                	mov    edx,DWORD PTR [eax]
c001820c:	f6 c6 04             	test   dh,0x4
c001820f:	75 08                	jne    c0018219 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0018211:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0018217:	eb ba                	jmp    c00181d3 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0018219:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001821d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0018223:	83 ec 0c             	sub    esp,0xc
c0018226:	52                   	push   edx
c0018227:	e8 7a e3 ff ff       	call   c00165a6 <Phys::freePage(unsigned long)>
c001822c:	83 c4 10             	add    esp,0x10
c001822f:	83 fb 04             	cmp    ebx,0x4
c0018232:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018236:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001823c:	0f 85 76 ff ff ff    	jne    c00181b8 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0018242:	83 e7 01             	and    edi,0x1
c0018245:	75 46                	jne    c001828d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c0018247:	c7 44 24 30 80 12 03 c0 	mov    DWORD PTR [esp+0x30],0xc0031280
c001824f:	83 c4 1c             	add    esp,0x1c
c0018252:	5b                   	pop    ebx
c0018253:	5e                   	pop    esi
c0018254:	5f                   	pop    edi
c0018255:	5d                   	pop    ebp
c0018256:	e9 53 7f 00 00       	jmp    c00201ae <KePanic(char const*)>
c001825b:	83 e7 01             	and    edi,0x1
c001825e:	75 15                	jne    c0018275 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0018260:	83 ec 0c             	sub    esp,0xc
c0018263:	68 1a 15 03 c0       	push   0xc003151a
c0018268:	e8 41 7f 00 00       	call   c00201ae <KePanic(char const*)>
c001826d:	83 c4 10             	add    esp,0x10
c0018270:	e9 5e ff ff ff       	jmp    c00181d3 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0018275:	83 ec 08             	sub    esp,0x8
c0018278:	6a 00                	push   0x0
c001827a:	56                   	push   esi
c001827b:	e8 80 fb ff ff       	call   c0017e00 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018280:	83 c4 10             	add    esp,0x10
c0018283:	e9 4b ff ff ff       	jmp    c00181d3 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0018288:	83 e7 01             	and    edi,0x1
c001828b:	75 16                	jne    c00182a3 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c001828d:	83 ec 08             	sub    esp,0x8
c0018290:	6a 00                	push   0x0
c0018292:	56                   	push   esi
c0018293:	e8 68 fb ff ff       	call   c0017e00 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018298:	83 c4 10             	add    esp,0x10
c001829b:	83 c4 1c             	add    esp,0x1c
c001829e:	5b                   	pop    ebx
c001829f:	5e                   	pop    esi
c00182a0:	5f                   	pop    edi
c00182a1:	5d                   	pop    ebp
c00182a2:	c3                   	ret    
c00182a3:	c7 44 24 30 36 15 03 c0 	mov    DWORD PTR [esp+0x30],0xc0031536
c00182ab:	83 c4 1c             	add    esp,0x1c
c00182ae:	5b                   	pop    ebx
c00182af:	5e                   	pop    esi
c00182b0:	5f                   	pop    edi
c00182b1:	5d                   	pop    ebp
c00182b2:	e9 f7 7e 00 00       	jmp    c00201ae <KePanic(char const*)>
c00182b7:	90                   	nop

c00182b8 <VAS::freeAllocatedPages(unsigned long)>:
c00182b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00182c0:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00182c4:	74 09                	je     c00182cf <VAS::freeAllocatedPages(unsigned long)+0x17>
c00182c6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00182ca:	e9 ac fe ff ff       	jmp    c001817b <Virt::freeKernelVirtualPages(unsigned long)>
c00182cf:	c7 44 24 04 a4 12 03 c0 	mov    DWORD PTR [esp+0x4],0xc00312a4
c00182d7:	e9 b9 0e 00 00       	jmp    c0019195 <Dbg::kprintf(char const*, ...)>

c00182dc <VAS::virtualToPhysical(unsigned long)>:
c00182dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00182e0:	50                   	push   eax
c00182e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00182e5:	52                   	push   edx
c00182e6:	e8 71 fe ff ff       	call   c001815c <VAS::getPageTableEntry(unsigned long)>
c00182eb:	59                   	pop    ecx
c00182ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00182ee:	5a                   	pop    edx
c00182ef:	25 00 f0 ff ff       	and    eax,0xfffff000
c00182f4:	c3                   	ret    
c00182f5:	90                   	nop

c00182f6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c00182f6:	55                   	push   ebp
c00182f7:	57                   	push   edi
c00182f8:	56                   	push   esi
c00182f9:	53                   	push   ebx
c00182fa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00182fe:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0018302:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018306:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001830a:	85 db                	test   ebx,ebx
c001830c:	7e 24                	jle    c0018332 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c001830e:	c1 e3 0c             	shl    ebx,0xc
c0018311:	01 f3                	add    ebx,esi
c0018313:	56                   	push   esi
c0018314:	81 c6 00 10 00 00    	add    esi,0x1000
c001831a:	55                   	push   ebp
c001831b:	e8 3c fe ff ff       	call   c001815c <VAS::getPageTableEntry(unsigned long)>
c0018320:	5a                   	pop    edx
c0018321:	59                   	pop    ecx
c0018322:	8b 08                	mov    ecx,DWORD PTR [eax]
c0018324:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018328:	21 f9                	and    ecx,edi
c001832a:	09 d1                	or     ecx,edx
c001832c:	39 f3                	cmp    ebx,esi
c001832e:	89 08                	mov    DWORD PTR [eax],ecx
c0018330:	75 e1                	jne    c0018313 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0018332:	5b                   	pop    ebx
c0018333:	5e                   	pop    esi
c0018334:	5f                   	pop    edi
c0018335:	5d                   	pop    ebp
c0018336:	c3                   	ret    
c0018337:	90                   	nop

c0018338 <VAS::VAS()>:
c0018338:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001833c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018343:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018347:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001834e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018352:	a3 b0 aa 03 c0       	mov    ds:0xc003aab0,eax
c0018357:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001835b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001835f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018363:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0018366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001836a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0018371:	ba 7d 50 03 c0       	mov    edx,0xc003507d
c0018376:	b8 00 50 03 c0       	mov    eax,0xc0035000
c001837b:	29 c2                	sub    edx,eax
c001837d:	89 d0                	mov    eax,edx
c001837f:	05 ff 0f 00 00       	add    eax,0xfff
c0018384:	c1 e8 0c             	shr    eax,0xc
c0018387:	89 c2                	mov    edx,eax
c0018389:	b8 00 50 03 c0       	mov    eax,0xc0035000
c001838e:	6a 04                	push   0x4
c0018390:	6a ff                	push   0xffffffff
c0018392:	52                   	push   edx
c0018393:	50                   	push   eax
c0018394:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018398:	e8 59 ff ff ff       	call   c00182f6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001839d:	83 c4 14             	add    esp,0x14
c00183a0:	90                   	nop
c00183a1:	c3                   	ret    

c00183a2 <VAS::setToWriteCombining(unsigned long, int)>:
c00183a2:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00183a7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00183ad:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c00183b4:	75 01                	jne    c00183b7 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00183b6:	c3                   	ret    
c00183b7:	68 80 00 00 00       	push   0x80
c00183bc:	6a ff                	push   0xffffffff
c00183be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00183c2:	50                   	push   eax
c00183c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00183c7:	52                   	push   edx
c00183c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00183cc:	51                   	push   ecx
c00183cd:	e8 24 ff ff ff       	call   c00182f6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00183d2:	83 c4 14             	add    esp,0x14
c00183d5:	c3                   	ret    

c00183d6 <VAS::mapOtherVASIn(bool, VAS*)>:
c00183d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00183da:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00183dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00183e1:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00183e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00183e9:	83 f8 01             	cmp    eax,0x1
c00183ec:	19 c0                	sbb    eax,eax
c00183ee:	83 ca 03             	or     edx,0x3
c00183f1:	83 e0 fc             	and    eax,0xfffffffc
c00183f4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00183fb:	0f 20 d8             	mov    eax,cr3
c00183fe:	0f 22 d8             	mov    cr3,eax
c0018401:	c3                   	ret    

c0018402 <VAS::~VAS()>:
c0018402:	83 ec 2c             	sub    esp,0x2c
c0018405:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001840d:	fa                   	cli    
c001840e:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0018413:	83 c0 01             	add    eax,0x1
c0018416:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001841b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018420:	8b 00                	mov    eax,DWORD PTR [eax]
c0018422:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018425:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001842b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001842f:	6a 01                	push   0x1
c0018431:	50                   	push   eax
c0018432:	e8 9f ff ff ff       	call   c00183d6 <VAS::mapOtherVASIn(bool, VAS*)>
c0018437:	83 c4 0c             	add    esp,0xc
c001843a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018442:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001844a:	0f 8f d8 00 00 00    	jg     c0018528 <VAS::~VAS()+0x126>
c0018450:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018454:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018457:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001845b:	c1 e2 02             	shl    edx,0x2
c001845e:	01 d0                	add    eax,edx
c0018460:	8b 00                	mov    eax,DWORD PTR [eax]
c0018462:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001846a:	83 e0 01             	and    eax,0x1
c001846d:	0f 84 ab 00 00 00    	je     c001851e <VAS::~VAS()+0x11c>
c0018473:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001847b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0018483:	7f 74                	jg     c00184f9 <VAS::~VAS()+0xf7>
c0018485:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018489:	c1 e0 0a             	shl    eax,0xa
c001848c:	89 c2                	mov    edx,eax
c001848e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018492:	01 d0                	add    eax,edx
c0018494:	c1 e0 0c             	shl    eax,0xc
c0018497:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001849b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00184a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00184a2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00184a5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00184ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00184af:	6a 01                	push   0x1
c00184b1:	50                   	push   eax
c00184b2:	e8 77 fc ff ff       	call   c001812e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00184b7:	83 c4 0c             	add    esp,0xc
c00184ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00184be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00184c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00184c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00184c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184cc:	25 01 04 00 00       	and    eax,0x401
c00184d1:	3d 01 04 00 00       	cmp    eax,0x401
c00184d6:	75 1a                	jne    c00184f2 <VAS::~VAS()+0xf0>
c00184d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184dc:	25 00 f0 ff ff       	and    eax,0xfffff000
c00184e1:	83 ec 0c             	sub    esp,0xc
c00184e4:	50                   	push   eax
c00184e5:	e8 bc e0 ff ff       	call   c00165a6 <Phys::freePage(unsigned long)>
c00184ea:	83 c4 10             	add    esp,0x10
c00184ed:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00184f2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c00184f7:	eb 82                	jmp    c001847b <VAS::~VAS()+0x79>
c00184f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184fd:	25 00 04 00 00       	and    eax,0x400
c0018502:	74 1a                	je     c001851e <VAS::~VAS()+0x11c>
c0018504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018508:	25 00 f0 ff ff       	and    eax,0xfffff000
c001850d:	83 ec 0c             	sub    esp,0xc
c0018510:	50                   	push   eax
c0018511:	e8 90 e0 ff ff       	call   c00165a6 <Phys::freePage(unsigned long)>
c0018516:	83 c4 10             	add    esp,0x10
c0018519:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001851e:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0018523:	e9 1a ff ff ff       	jmp    c0018442 <VAS::~VAS()+0x40>
c0018528:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001852c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001852f:	83 ec 0c             	sub    esp,0xc
c0018532:	50                   	push   eax
c0018533:	e8 43 fc ff ff       	call   c001817b <Virt::freeKernelVirtualPages(unsigned long)>
c0018538:	83 c4 10             	add    esp,0x10
c001853b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001853f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018542:	83 ec 0c             	sub    esp,0xc
c0018545:	50                   	push   eax
c0018546:	e8 5b e0 ff ff       	call   c00165a6 <Phys::freePage(unsigned long)>
c001854b:	83 c4 10             	add    esp,0x10
c001854e:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018553:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0018558:	83 e8 01             	sub    eax,0x1
c001855b:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0018560:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0018565:	85 c0                	test   eax,eax
c0018567:	75 01                	jne    c001856a <VAS::~VAS()+0x168>
c0018569:	fb                   	sti    
c001856a:	90                   	nop
c001856b:	83 c4 2c             	add    esp,0x2c
c001856e:	c3                   	ret    
c001856f:	90                   	nop

c0018570 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0018570:	55                   	push   ebp
c0018571:	57                   	push   edi
c0018572:	56                   	push   esi
c0018573:	53                   	push   ebx
c0018574:	83 ec 1c             	sub    esp,0x1c
c0018577:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001857b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001857f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0018585:	77 08                	ja     c001858f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0018587:	0f 20 d8             	mov    eax,cr3
c001858a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c001858d:	75 49                	jne    c00185d8 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c001858f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018593:	09 d8                	or     eax,ebx
c0018595:	a9 ff 0f 00 00       	test   eax,0xfff
c001859a:	75 59                	jne    c00185f5 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c001859c:	89 de                	mov    esi,ebx
c001859e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00185a1:	c1 ee 16             	shr    esi,0x16
c00185a4:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00185ab:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00185af:	74 56                	je     c0018607 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c00185b1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00185b5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00185b9:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00185bf:	c1 eb 0a             	shr    ebx,0xa
c00185c2:	c1 e6 0c             	shl    esi,0xc
c00185c5:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00185cb:	09 d0                	or     eax,edx
c00185cd:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00185d0:	83 c4 1c             	add    esp,0x1c
c00185d3:	5b                   	pop    ebx
c00185d4:	5e                   	pop    esi
c00185d5:	5f                   	pop    edi
c00185d6:	5d                   	pop    ebp
c00185d7:	c3                   	ret    
c00185d8:	83 ec 0c             	sub    esp,0xc
c00185db:	68 c8 12 03 c0       	push   0xc00312c8
c00185e0:	e8 b0 0b 00 00       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c00185e5:	83 c4 10             	add    esp,0x10
c00185e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00185ec:	09 d8                	or     eax,ebx
c00185ee:	a9 ff 0f 00 00       	test   eax,0xfff
c00185f3:	74 a7                	je     c001859c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00185f5:	83 ec 0c             	sub    esp,0xc
c00185f8:	68 30 13 03 c0       	push   0xc0031330
c00185fd:	e8 ac 7b 00 00       	call   c00201ae <KePanic(char const*)>
c0018602:	83 c4 10             	add    esp,0x10
c0018605:	eb 95                	jmp    c001859c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0018607:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001860b:	e8 ff df ff ff       	call   c001660f <Phys::allocatePage()>
c0018610:	83 ec 0c             	sub    esp,0xc
c0018613:	89 c5                	mov    ebp,eax
c0018615:	8b 0d b0 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aab0
c001861b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001861f:	6a 01                	push   0x1
c0018621:	e8 37 f8 ff ff       	call   c0017e5d <Virt::allocateKernelVirtualPages(int)>
c0018626:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001862d:	6a 01                	push   0x1
c001862f:	50                   	push   eax
c0018630:	55                   	push   ebp
c0018631:	81 cd 07 04 00 00    	or     ebp,0x407
c0018637:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001863b:	51                   	push   ecx
c001863c:	e8 29 01 00 00       	call   c001876a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018641:	83 c4 1c             	add    esp,0x1c
c0018644:	68 00 10 00 00       	push   0x1000
c0018649:	6a 00                	push   0x0
c001864b:	50                   	push   eax
c001864c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018650:	e8 9b 7e fe ff       	call   c00004f0 <memset>
c0018655:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0018659:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001865c:	e8 1a fb ff ff       	call   c001817b <Virt::freeKernelVirtualPages(unsigned long)>
c0018661:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018665:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018668:	83 c4 10             	add    esp,0x10
c001866b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c001866e:	e9 3e ff ff ff       	jmp    c00185b1 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0018673:	90                   	nop

c0018674 <VAS::allocatePages(int, int)>:
c0018674:	55                   	push   ebp
c0018675:	57                   	push   edi
c0018676:	56                   	push   esi
c0018677:	53                   	push   ebx
c0018678:	83 ec 1c             	sub    esp,0x1c
c001867b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001867f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0018683:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0018687:	75 71                	jne    c00186fa <VAS::allocatePages(int, int)+0x86>
c0018689:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001868c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018690:	85 c0                	test   eax,eax
c0018692:	74 4d                	je     c00186e1 <VAS::allocatePages(int, int)+0x6d>
c0018694:	89 dd                	mov    ebp,ebx
c0018696:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001869a:	c1 e5 0c             	shl    ebp,0xc
c001869d:	01 c5                	add    ebp,eax
c001869f:	85 db                	test   ebx,ebx
c00186a1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00186a4:	7e 29                	jle    c00186cf <VAS::allocatePages(int, int)+0x5b>
c00186a6:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00186aa:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00186ae:	81 cf 00 04 00 00    	or     edi,0x400
c00186b4:	e8 56 df ff ff       	call   c001660f <Phys::allocatePage()>
c00186b9:	57                   	push   edi
c00186ba:	53                   	push   ebx
c00186bb:	81 c3 00 10 00 00    	add    ebx,0x1000
c00186c1:	50                   	push   eax
c00186c2:	56                   	push   esi
c00186c3:	e8 a8 fe ff ff       	call   c0018570 <VAS::mapPage(unsigned long, unsigned long, int)>
c00186c8:	83 c4 10             	add    esp,0x10
c00186cb:	39 dd                	cmp    ebp,ebx
c00186cd:	75 e5                	jne    c00186b4 <VAS::allocatePages(int, int)+0x40>
c00186cf:	0f 20 d8             	mov    eax,cr3
c00186d2:	0f 22 d8             	mov    cr3,eax
c00186d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186d9:	83 c4 1c             	add    esp,0x1c
c00186dc:	5b                   	pop    ebx
c00186dd:	5e                   	pop    esi
c00186de:	5f                   	pop    edi
c00186df:	5d                   	pop    ebp
c00186e0:	c3                   	ret    
c00186e1:	83 ec 0c             	sub    esp,0xc
c00186e4:	68 54 13 03 c0       	push   0xc0031354
c00186e9:	e8 c0 7a 00 00       	call   c00201ae <KePanic(char const*)>
c00186ee:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00186f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00186f5:	83 c4 10             	add    esp,0x10
c00186f8:	eb 9a                	jmp    c0018694 <VAS::allocatePages(int, int)+0x20>
c00186fa:	83 ec 0c             	sub    esp,0xc
c00186fd:	53                   	push   ebx
c00186fe:	e8 5a f7 ff ff       	call   c0017e5d <Virt::allocateKernelVirtualPages(int)>
c0018703:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018707:	83 c4 10             	add    esp,0x10
c001870a:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001870f:	77 37                	ja     c0018748 <VAS::allocatePages(int, int)+0xd4>
c0018711:	85 db                	test   ebx,ebx
c0018713:	7e ba                	jle    c00186cf <VAS::allocatePages(int, int)+0x5b>
c0018715:	c1 e3 0c             	shl    ebx,0xc
c0018718:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001871c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0018720:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0018723:	81 cf 00 04 00 00    	or     edi,0x400
c0018729:	89 c3                	mov    ebx,eax
c001872b:	e8 df de ff ff       	call   c001660f <Phys::allocatePage()>
c0018730:	57                   	push   edi
c0018731:	53                   	push   ebx
c0018732:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018738:	50                   	push   eax
c0018739:	56                   	push   esi
c001873a:	e8 31 fe ff ff       	call   c0018570 <VAS::mapPage(unsigned long, unsigned long, int)>
c001873f:	83 c4 10             	add    esp,0x10
c0018742:	39 dd                	cmp    ebp,ebx
c0018744:	75 e5                	jne    c001872b <VAS::allocatePages(int, int)+0xb7>
c0018746:	eb 87                	jmp    c00186cf <VAS::allocatePages(int, int)+0x5b>
c0018748:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001874d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018753:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c001875a:	74 b5                	je     c0018711 <VAS::allocatePages(int, int)+0x9d>
c001875c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018760:	80 ce 01             	or     dh,0x1
c0018763:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0018767:	eb a8                	jmp    c0018711 <VAS::allocatePages(int, int)+0x9d>
c0018769:	90                   	nop

c001876a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001876a:	55                   	push   ebp
c001876b:	57                   	push   edi
c001876c:	56                   	push   esi
c001876d:	53                   	push   ebx
c001876e:	83 ec 0c             	sub    esp,0xc
c0018771:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018775:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018779:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001877d:	85 db                	test   ebx,ebx
c001877f:	7e 2f                	jle    c00187b0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0018781:	c1 e3 0c             	shl    ebx,0xc
c0018784:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018788:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001878c:	01 d3                	add    ebx,edx
c001878e:	55                   	push   ebp
c001878f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018793:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018797:	29 c2                	sub    edx,eax
c0018799:	01 f2                	add    edx,esi
c001879b:	52                   	push   edx
c001879c:	56                   	push   esi
c001879d:	81 c6 00 10 00 00    	add    esi,0x1000
c00187a3:	57                   	push   edi
c00187a4:	e8 c7 fd ff ff       	call   c0018570 <VAS::mapPage(unsigned long, unsigned long, int)>
c00187a9:	83 c4 10             	add    esp,0x10
c00187ac:	39 de                	cmp    esi,ebx
c00187ae:	75 de                	jne    c001878e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c00187b0:	0f 20 d8             	mov    eax,cr3
c00187b3:	0f 22 d8             	mov    cr3,eax
c00187b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00187ba:	83 c4 0c             	add    esp,0xc
c00187bd:	5b                   	pop    ebx
c00187be:	5e                   	pop    esi
c00187bf:	5f                   	pop    edi
c00187c0:	5d                   	pop    ebp
c00187c1:	c3                   	ret    

c00187c2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00187c2:	55                   	push   ebp
c00187c3:	57                   	push   edi
c00187c4:	56                   	push   esi
c00187c5:	53                   	push   ebx
c00187c6:	83 ec 1c             	sub    esp,0x1c
c00187c9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00187cd:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00187d1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00187d5:	09 f8                	or     eax,edi
c00187d7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00187db:	a9 ff 0f 00 00       	test   eax,0xfff
c00187e0:	75 4f                	jne    c0018831 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c00187e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00187e6:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00187e9:	c1 eb 16             	shr    ebx,0x16
c00187ec:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c00187f3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c00187f7:	74 52                	je     c001884b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c00187f9:	0f b6 f2             	movzx  esi,dl
c00187fc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018800:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0018804:	c1 e8 0a             	shr    eax,0xa
c0018807:	83 fe 01             	cmp    esi,0x1
c001880a:	19 d2                	sbb    edx,edx
c001880c:	c1 e3 0c             	shl    ebx,0xc
c001880f:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0018815:	25 fc 0f 00 00       	and    eax,0xffc
c001881a:	01 d8                	add    eax,ebx
c001881c:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0018820:	09 d9                	or     ecx,ebx
c0018822:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0018829:	83 c4 1c             	add    esp,0x1c
c001882c:	5b                   	pop    ebx
c001882d:	5e                   	pop    esi
c001882e:	5f                   	pop    edi
c001882f:	5d                   	pop    ebp
c0018830:	c3                   	ret    
c0018831:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018835:	83 ec 0c             	sub    esp,0xc
c0018838:	68 80 13 03 c0       	push   0xc0031380
c001883d:	e8 6c 79 00 00       	call   c00201ae <KePanic(char const*)>
c0018842:	83 c4 10             	add    esp,0x10
c0018845:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018849:	eb 97                	jmp    c00187e2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c001884b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001884f:	e8 bb dd ff ff       	call   c001660f <Phys::allocatePage()>
c0018854:	83 ec 0c             	sub    esp,0xc
c0018857:	89 c5                	mov    ebp,eax
c0018859:	8b 0d b0 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aab0
c001885f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0018863:	6a 01                	push   0x1
c0018865:	e8 f3 f5 ff ff       	call   c0017e5d <Virt::allocateKernelVirtualPages(int)>
c001886a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018871:	6a 01                	push   0x1
c0018873:	50                   	push   eax
c0018874:	55                   	push   ebp
c0018875:	81 cd 07 04 00 00    	or     ebp,0x407
c001887b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001887f:	51                   	push   ecx
c0018880:	e8 e5 fe ff ff       	call   c001876a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018885:	83 c4 1c             	add    esp,0x1c
c0018888:	68 00 10 00 00       	push   0x1000
c001888d:	6a 00                	push   0x0
c001888f:	50                   	push   eax
c0018890:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018894:	e8 57 7c fe ff       	call   c00004f0 <memset>
c0018899:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001889d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00188a0:	e8 d6 f8 ff ff       	call   c001817b <Virt::freeKernelVirtualPages(unsigned long)>
c00188a5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00188a8:	83 c4 10             	add    esp,0x10
c00188ab:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c00188ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00188b2:	e9 42 ff ff ff       	jmp    c00187f9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c00188b7:	90                   	nop

c00188b8 <VAS::VAS(bool)>:
c00188b8:	53                   	push   ebx
c00188b9:	83 ec 28             	sub    esp,0x28
c00188bc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00188c0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00188c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00188c8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00188cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00188d3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00188da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00188de:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00188e2:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00188e5:	e8 25 dd ff ff       	call   c001660f <Phys::allocatePage()>
c00188ea:	89 c2                	mov    edx,eax
c00188ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00188f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00188f3:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c00188f9:	83 ec 0c             	sub    esp,0xc
c00188fc:	6a 01                	push   0x1
c00188fe:	e8 5a f5 ff ff       	call   c0017e5d <Virt::allocateKernelVirtualPages(int)>
c0018903:	83 c4 10             	add    esp,0x10
c0018906:	89 c2                	mov    edx,eax
c0018908:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001890c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001890f:	83 ec 0c             	sub    esp,0xc
c0018912:	6a 03                	push   0x3
c0018914:	6a 01                	push   0x1
c0018916:	52                   	push   edx
c0018917:	50                   	push   eax
c0018918:	53                   	push   ebx
c0018919:	e8 4c fe ff ff       	call   c001876a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001891e:	83 c4 20             	add    esp,0x20
c0018921:	89 c2                	mov    edx,eax
c0018923:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018927:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001892a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018932:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001893a:	7f 1d                	jg     c0018959 <VAS::VAS(bool)+0xa1>
c001893c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018940:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018943:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018947:	c1 e2 02             	shl    edx,0x2
c001894a:	01 d0                	add    eax,edx
c001894c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0018952:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018957:	eb d9                	jmp    c0018932 <VAS::VAS(bool)+0x7a>
c0018959:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0018961:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0018969:	7f 7e                	jg     c00189e9 <VAS::VAS(bool)+0x131>
c001896b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001896f:	2d 00 02 00 00       	sub    eax,0x200
c0018974:	c1 e0 0c             	shl    eax,0xc
c0018977:	83 c8 05             	or     eax,0x5
c001897a:	89 c2                	mov    edx,eax
c001897c:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018981:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018987:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c001898d:	83 e0 10             	and    eax,0x10
c0018990:	0f b6 c0             	movzx  eax,al
c0018993:	85 c0                	test   eax,eax
c0018995:	74 07                	je     c001899e <VAS::VAS(bool)+0xe6>
c0018997:	b8 00 01 00 00       	mov    eax,0x100
c001899c:	eb 05                	jmp    c00189a3 <VAS::VAS(bool)+0xeb>
c001899e:	b8 00 00 00 00       	mov    eax,0x0
c00189a3:	09 d0                	or     eax,edx
c00189a5:	89 c1                	mov    ecx,eax
c00189a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189ab:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00189ae:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00189b2:	c1 e2 02             	shl    edx,0x2
c00189b5:	01 d0                	add    eax,edx
c00189b7:	89 ca                	mov    edx,ecx
c00189b9:	89 10                	mov    DWORD PTR [eax],edx
c00189bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00189bf:	2d 40 03 00 00       	sub    eax,0x340
c00189c4:	83 f8 7f             	cmp    eax,0x7f
c00189c7:	77 16                	ja     c00189df <VAS::VAS(bool)+0x127>
c00189c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189cd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00189d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00189d4:	c1 e2 02             	shl    edx,0x2
c00189d7:	01 d0                	add    eax,edx
c00189d9:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00189df:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00189e4:	e9 78 ff ff ff       	jmp    c0018961 <VAS::VAS(bool)+0xa9>
c00189e9:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00189ee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00189f4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c00189fa:	83 e0 10             	and    eax,0x10
c00189fd:	0f b6 c0             	movzx  eax,al
c0018a00:	85 c0                	test   eax,eax
c0018a02:	74 07                	je     c0018a0b <VAS::VAS(bool)+0x153>
c0018a04:	b8 03 41 00 00       	mov    eax,0x4103
c0018a09:	eb 05                	jmp    c0018a10 <VAS::VAS(bool)+0x158>
c0018a0b:	b8 03 40 00 00       	mov    eax,0x4003
c0018a10:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018a14:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0018a17:	81 c2 20 0c 00 00    	add    edx,0xc20
c0018a1d:	89 02                	mov    DWORD PTR [edx],eax
c0018a1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a23:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018a26:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018a2b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018a31:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018a37:	83 e0 10             	and    eax,0x10
c0018a3a:	0f b6 c0             	movzx  eax,al
c0018a3d:	85 c0                	test   eax,eax
c0018a3f:	74 07                	je     c0018a48 <VAS::VAS(bool)+0x190>
c0018a41:	b8 00 01 00 00       	mov    eax,0x100
c0018a46:	eb 05                	jmp    c0018a4d <VAS::VAS(bool)+0x195>
c0018a48:	b8 00 00 00 00       	mov    eax,0x0
c0018a4d:	09 c2                	or     edx,eax
c0018a4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a53:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018a56:	05 fc 0f 00 00       	add    eax,0xffc
c0018a5b:	83 ca 03             	or     edx,0x3
c0018a5e:	89 10                	mov    DWORD PTR [eax],edx
c0018a60:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018a65:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018a6b:	83 ec 0c             	sub    esp,0xc
c0018a6e:	50                   	push   eax
c0018a6f:	e8 00 2a 00 00       	call   c001b474 <Device::getName()>
c0018a74:	83 c4 10             	add    esp,0x10
c0018a77:	83 ec 08             	sub    esp,0x8
c0018a7a:	68 50 15 03 c0       	push   0xc0031550
c0018a7f:	50                   	push   eax
c0018a80:	e8 cb 7c fe ff       	call   c0000750 <strcmp>
c0018a85:	83 c4 10             	add    esp,0x10
c0018a88:	85 c0                	test   eax,eax
c0018a8a:	0f 94 c0             	sete   al
c0018a8d:	0f b6 c0             	movzx  eax,al
c0018a90:	85 c0                	test   eax,eax
c0018a92:	74 68                	je     c0018afc <VAS::VAS(bool)+0x244>
c0018a94:	fa                   	cli    
c0018a95:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018a9a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018aa0:	05 7c 09 00 00       	add    eax,0x97c
c0018aa5:	83 ec 0c             	sub    esp,0xc
c0018aa8:	50                   	push   eax
c0018aa9:	e8 50 d3 ff ff       	call   c0015dfe <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018aae:	83 c4 10             	add    esp,0x10
c0018ab1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018ab6:	89 c3                	mov    ebx,eax
c0018ab8:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018abd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018ac3:	05 7c 09 00 00       	add    eax,0x97c
c0018ac8:	83 ec 0c             	sub    esp,0xc
c0018acb:	50                   	push   eax
c0018acc:	e8 2d d3 ff ff       	call   c0015dfe <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018ad1:	83 c4 10             	add    esp,0x10
c0018ad4:	83 ec 08             	sub    esp,0x8
c0018ad7:	50                   	push   eax
c0018ad8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018adc:	e8 7b f6 ff ff       	call   c001815c <VAS::getPageTableEntry(unsigned long)>
c0018ae1:	83 c4 10             	add    esp,0x10
c0018ae4:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ae6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018aeb:	6a 11                	push   0x11
c0018aed:	53                   	push   ebx
c0018aee:	50                   	push   eax
c0018aef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018af3:	e8 78 fa ff ff       	call   c0018570 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018af8:	83 c4 10             	add    esp,0x10
c0018afb:	fb                   	sti    
c0018afc:	90                   	nop
c0018afd:	83 c4 28             	add    esp,0x28
c0018b00:	5b                   	pop    ebx
c0018b01:	c3                   	ret    

c0018b02 <VAS::evict(unsigned long)>:
c0018b02:	55                   	push   ebp
c0018b03:	57                   	push   edi
c0018b04:	56                   	push   esi
c0018b05:	53                   	push   ebx
c0018b06:	83 ec 1c             	sub    esp,0x1c
c0018b09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b0d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018b11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018b15:	e8 a1 f4 ff ff       	call   c0017fbb <Virt::allocateSwapfilePage()>
c0018b1a:	89 c7                	mov    edi,eax
c0018b1c:	a1 8c 3a 03 c0       	mov    eax,ds:0xc0033a8c
c0018b21:	85 c0                	test   eax,eax
c0018b23:	7e 40                	jle    c0018b65 <VAS::evict(unsigned long)+0x63>
c0018b25:	89 ee                	mov    esi,ebp
c0018b27:	31 db                	xor    ebx,ebx
c0018b29:	83 ec 0c             	sub    esp,0xc
c0018b2c:	57                   	push   edi
c0018b2d:	e8 73 f4 ff ff       	call   c0017fa5 <Virt::swapIDToSector(unsigned long)>
c0018b32:	89 34 24             	mov    DWORD PTR [esp],esi
c0018b35:	01 d8                	add    eax,ebx
c0018b37:	6a 01                	push   0x1
c0018b39:	31 d2                	xor    edx,edx
c0018b3b:	83 c3 01             	add    ebx,0x1
c0018b3e:	52                   	push   edx
c0018b3f:	81 c6 00 02 00 00    	add    esi,0x200
c0018b45:	50                   	push   eax
c0018b46:	0f be 05 98 3a 03 c0 	movsx  eax,BYTE PTR ds:0xc0033a98
c0018b4d:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0018b54:	50                   	push   eax
c0018b55:	e8 1a 3b 00 00       	call   c001c674 <LogicalDisk::write(unsigned long long, int, void*)>
c0018b5a:	83 c4 20             	add    esp,0x20
c0018b5d:	39 1d 8c 3a 03 c0    	cmp    DWORD PTR ds:0xc0033a8c,ebx
c0018b63:	7f c4                	jg     c0018b29 <VAS::evict(unsigned long)+0x27>
c0018b65:	83 ec 08             	sub    esp,0x8
c0018b68:	c1 e7 0c             	shl    edi,0xc
c0018b6b:	55                   	push   ebp
c0018b6c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018b70:	50                   	push   eax
c0018b71:	e8 e6 f5 ff ff       	call   c001815c <VAS::getPageTableEntry(unsigned long)>
c0018b76:	8b 10                	mov    edx,DWORD PTR [eax]
c0018b78:	89 d3                	mov    ebx,edx
c0018b7a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0018b80:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018b86:	09 d7                	or     edi,edx
c0018b88:	89 38                	mov    DWORD PTR [eax],edi
c0018b8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018b8d:	8b 15 a8 aa 03 c0    	mov    edx,DWORD PTR ds:0xc003aaa8
c0018b93:	83 c2 01             	add    edx,0x1
c0018b96:	89 15 a8 aa 03 c0    	mov    DWORD PTR ds:0xc003aaa8,edx
c0018b9c:	e8 05 da ff ff       	call   c00165a6 <Phys::freePage(unsigned long)>
c0018ba1:	0f 20 d8             	mov    eax,cr3
c0018ba4:	0f 22 d8             	mov    cr3,eax
c0018ba7:	8b 0d a8 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aaa8
c0018bad:	51                   	push   ecx
c0018bae:	55                   	push   ebp
c0018baf:	53                   	push   ebx
c0018bb0:	68 a4 13 03 c0       	push   0xc00313a4
c0018bb5:	e8 db 05 00 00       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0018bba:	a1 a4 aa 03 c0       	mov    eax,ds:0xc003aaa4
c0018bbf:	c7 44 24 50 5e 15 03 c0 	mov    DWORD PTR [esp+0x50],0xc003155e
c0018bc7:	8d 50 01             	lea    edx,[eax+0x1]
c0018bca:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0018bce:	89 15 a4 aa 03 c0    	mov    DWORD PTR ds:0xc003aaa4,edx
c0018bd4:	83 c4 3c             	add    esp,0x3c
c0018bd7:	5b                   	pop    ebx
c0018bd8:	5e                   	pop    esi
c0018bd9:	5f                   	pop    edi
c0018bda:	5d                   	pop    ebp
c0018bdb:	e9 b5 05 00 00       	jmp    c0019195 <Dbg::kprintf(char const*, ...)>

c0018be0 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0018be0:	55                   	push   ebp
c0018be1:	57                   	push   edi
c0018be2:	56                   	push   esi
c0018be3:	53                   	push   ebx
c0018be4:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0018bea:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c0018bf1:	89 f3                	mov    ebx,esi
c0018bf3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018bf9:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c0018bff:	77 22                	ja     c0018c23 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c0018c01:	83 ec 08             	sub    esp,0x8
c0018c04:	56                   	push   esi
c0018c05:	68 81 15 03 c0       	push   0xc0031581
c0018c0a:	e8 86 05 00 00       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0018c0f:	83 c4 10             	add    esp,0x10
c0018c12:	85 db                	test   ebx,ebx
c0018c14:	75 2a                	jne    c0018c40 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c0018c16:	31 c0                	xor    eax,eax
c0018c18:	81 c4 1c 10 00 00    	add    esp,0x101c
c0018c1e:	5b                   	pop    ebx
c0018c1f:	5e                   	pop    esi
c0018c20:	5f                   	pop    edi
c0018c21:	5d                   	pop    ebp
c0018c22:	c3                   	ret    
c0018c23:	83 ec 0c             	sub    esp,0xc
c0018c26:	68 6f 15 03 c0       	push   0xc003156f
c0018c2b:	e8 7e 75 00 00       	call   c00201ae <KePanic(char const*)>
c0018c30:	5f                   	pop    edi
c0018c31:	5d                   	pop    ebp
c0018c32:	56                   	push   esi
c0018c33:	68 81 15 03 c0       	push   0xc0031581
c0018c38:	e8 58 05 00 00       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0018c3d:	83 c4 10             	add    esp,0x10
c0018c40:	83 ec 08             	sub    esp,0x8
c0018c43:	53                   	push   ebx
c0018c44:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c0018c4b:	51                   	push   ecx
c0018c4c:	e8 0b f5 ff ff       	call   c001815c <VAS::getPageTableEntry(unsigned long)>
c0018c51:	83 c4 10             	add    esp,0x10
c0018c54:	89 c2                	mov    edx,eax
c0018c56:	85 c0                	test   eax,eax
c0018c58:	74 bc                	je     c0018c16 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c0018c5a:	8b 28                	mov    ebp,DWORD PTR [eax]
c0018c5c:	f7 c5 00 02 00 00    	test   ebp,0x200
c0018c62:	0f 85 c0 00 00 00    	jne    c0018d28 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c0018c68:	89 e8                	mov    eax,ebp
c0018c6a:	25 01 04 00 00       	and    eax,0x401
c0018c6f:	3d 00 04 00 00       	cmp    eax,0x400
c0018c74:	75 a0                	jne    c0018c16 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c0018c76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018c7a:	c1 ed 0c             	shr    ebp,0xc
c0018c7d:	e8 8d d9 ff ff       	call   c001660f <Phys::allocatePage()>
c0018c82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c86:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018c88:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0018c8e:	09 c1                	or     ecx,eax
c0018c90:	81 c9 01 08 00 00    	or     ecx,0x801
c0018c96:	89 0a                	mov    DWORD PTR [edx],ecx
c0018c98:	8b 15 8c 3a 03 c0    	mov    edx,DWORD PTR ds:0xc0033a8c
c0018c9e:	85 d2                	test   edx,edx
c0018ca0:	7e 40                	jle    c0018ce2 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c0018ca2:	89 df                	mov    edi,ebx
c0018ca4:	31 f6                	xor    esi,esi
c0018ca6:	83 ec 0c             	sub    esp,0xc
c0018ca9:	55                   	push   ebp
c0018caa:	e8 f6 f2 ff ff       	call   c0017fa5 <Virt::swapIDToSector(unsigned long)>
c0018caf:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018cb2:	01 f0                	add    eax,esi
c0018cb4:	6a 01                	push   0x1
c0018cb6:	31 d2                	xor    edx,edx
c0018cb8:	83 c6 01             	add    esi,0x1
c0018cbb:	52                   	push   edx
c0018cbc:	81 c7 00 02 00 00    	add    edi,0x200
c0018cc2:	50                   	push   eax
c0018cc3:	0f be 05 98 3a 03 c0 	movsx  eax,BYTE PTR ds:0xc0033a98
c0018cca:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0018cd1:	50                   	push   eax
c0018cd2:	e8 31 39 00 00       	call   c001c608 <LogicalDisk::read(unsigned long long, int, void*)>
c0018cd7:	83 c4 20             	add    esp,0x20
c0018cda:	39 35 8c 3a 03 c0    	cmp    DWORD PTR ds:0xc0033a8c,esi
c0018ce0:	7f c4                	jg     c0018ca6 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c0018ce2:	83 ec 04             	sub    esp,0x4
c0018ce5:	a1 a8 aa 03 c0       	mov    eax,ds:0xc003aaa8
c0018cea:	83 e8 01             	sub    eax,0x1
c0018ced:	50                   	push   eax
c0018cee:	a3 a8 aa 03 c0       	mov    ds:0xc003aaa8,eax
c0018cf3:	53                   	push   ebx
c0018cf4:	68 94 15 03 c0       	push   0xc0031594
c0018cf9:	e8 97 04 00 00       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0018cfe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018d01:	e8 7c f2 ff ff       	call   c0017f82 <Virt::freeSwapfilePage(unsigned long)>
c0018d06:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0018d0b:	83 c4 10             	add    esp,0x10
c0018d0e:	83 e8 01             	sub    eax,0x1
c0018d11:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0018d16:	85 c0                	test   eax,eax
c0018d18:	75 01                	jne    c0018d1b <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c0018d1a:	fb                   	sti    
c0018d1b:	0f 20 d8             	mov    eax,cr3
c0018d1e:	0f 22 d8             	mov    cr3,eax
c0018d21:	b0 01                	mov    al,0x1
c0018d23:	e9 f0 fe ff ff       	jmp    c0018c18 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c0018d28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018d2c:	bd 00 10 00 00       	mov    ebp,0x1000
c0018d31:	83 ec 0c             	sub    esp,0xc
c0018d34:	89 de                	mov    esi,ebx
c0018d36:	68 d4 13 03 c0       	push   0xc00313d4
c0018d3b:	e8 55 04 00 00       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0018d40:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0018d44:	e8 c6 d8 ff ff       	call   c001660f <Phys::allocatePage()>
c0018d49:	89 e9                	mov    ecx,ebp
c0018d4b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018d4d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018d51:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018d53:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0018d59:	09 c8                	or     eax,ecx
c0018d5b:	83 c8 02             	or     eax,0x2
c0018d5e:	89 02                	mov    DWORD PTR [edx],eax
c0018d60:	0f 20 d8             	mov    eax,cr3
c0018d63:	0f 22 d8             	mov    cr3,eax
c0018d66:	8d 74 24 20          	lea    esi,[esp+0x20]
c0018d6a:	89 df                	mov    edi,ebx
c0018d6c:	89 e9                	mov    ecx,ebp
c0018d6e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018d70:	b0 01                	mov    al,0x1
c0018d72:	83 c4 10             	add    esp,0x10
c0018d75:	e9 9e fe ff ff       	jmp    c0018c18 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c0018d7a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0018d7a:	55                   	push   ebp
c0018d7b:	57                   	push   edi
c0018d7c:	56                   	push   esi
c0018d7d:	53                   	push   ebx
c0018d7e:	83 ec 28             	sub    esp,0x28
c0018d81:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0018d85:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018d89:	50                   	push   eax
c0018d8a:	e8 ce f0 ff ff       	call   c0017e5d <Virt::allocateKernelVirtualPages(int)>
c0018d8f:	83 c4 0c             	add    esp,0xc
c0018d92:	89 c5                	mov    ebp,eax
c0018d94:	6a 07                	push   0x7
c0018d96:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018d9a:	52                   	push   edx
c0018d9b:	56                   	push   esi
c0018d9c:	e8 d3 f8 ff ff       	call   c0018674 <VAS::allocatePages(int, int)>
c0018da1:	83 c4 10             	add    esp,0x10
c0018da4:	89 c7                	mov    edi,eax
c0018da6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018daa:	85 c9                	test   ecx,ecx
c0018dac:	74 2f                	je     c0018ddd <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0018dae:	31 db                	xor    ebx,ebx
c0018db0:	e8 5a d8 ff ff       	call   c001660f <Phys::allocatePage()>
c0018db5:	83 c3 01             	add    ebx,0x1
c0018db8:	6a 03                	push   0x3
c0018dba:	55                   	push   ebp
c0018dbb:	50                   	push   eax
c0018dbc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018dc0:	56                   	push   esi
c0018dc1:	e8 aa f7 ff ff       	call   c0018570 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018dc6:	6a 07                	push   0x7
c0018dc8:	57                   	push   edi
c0018dc9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018dcd:	50                   	push   eax
c0018dce:	56                   	push   esi
c0018dcf:	e8 9c f7 ff ff       	call   c0018570 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018dd4:	83 c4 20             	add    esp,0x20
c0018dd7:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c0018ddb:	75 d3                	jne    c0018db0 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0018ddd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018de1:	89 28                	mov    DWORD PTR [eax],ebp
c0018de3:	83 c4 1c             	add    esp,0x1c
c0018de6:	89 f8                	mov    eax,edi
c0018de8:	5b                   	pop    ebx
c0018de9:	5e                   	pop    esi
c0018dea:	5f                   	pop    edi
c0018deb:	5d                   	pop    ebp
c0018dec:	c3                   	ret    
c0018ded:	90                   	nop

c0018dee <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0018dee:	53                   	push   ebx
c0018def:	83 ec 14             	sub    esp,0x14
c0018df2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018df6:	68 f4 13 03 c0       	push   0xc00313f4
c0018dfb:	e8 95 03 00 00       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0018e00:	c7 04 24 54 14 03 c0 	mov    DWORD PTR [esp],0xc0031454
c0018e07:	e8 89 03 00 00       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0018e0c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0018e10:	83 c4 18             	add    esp,0x18
c0018e13:	5b                   	pop    ebx
c0018e14:	e9 62 f3 ff ff       	jmp    c001817b <Virt::freeKernelVirtualPages(unsigned long)>
c0018e19:	90                   	nop

c0018e1a <VAS::scanForEviction()>:
c0018e1a:	57                   	push   edi
c0018e1b:	56                   	push   esi
c0018e1c:	31 f6                	xor    esi,esi
c0018e1e:	53                   	push   ebx
c0018e1f:	83 ec 10             	sub    esp,0x10
c0018e22:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018e26:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0018e29:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0018e2f:	75 0e                	jne    c0018e3f <VAS::scanForEviction()+0x25>
c0018e31:	89 da                	mov    edx,ebx
c0018e33:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018e36:	c1 ea 16             	shr    edx,0x16
c0018e39:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0018e3d:	74 57                	je     c0018e96 <VAS::scanForEviction()+0x7c>
c0018e3f:	53                   	push   ebx
c0018e40:	57                   	push   edi
c0018e41:	e8 16 f3 ff ff       	call   c001815c <VAS::getPageTableEntry(unsigned long)>
c0018e46:	5a                   	pop    edx
c0018e47:	8b 10                	mov    edx,DWORD PTR [eax]
c0018e49:	59                   	pop    ecx
c0018e4a:	89 d1                	mov    ecx,edx
c0018e4c:	c1 e9 0c             	shr    ecx,0xc
c0018e4f:	74 10                	je     c0018e61 <VAS::scanForEviction()+0x47>
c0018e51:	89 d1                	mov    ecx,edx
c0018e53:	81 e1 01 08 00 00    	and    ecx,0x801
c0018e59:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0018e5f:	74 40                	je     c0018ea1 <VAS::scanForEviction()+0x87>
c0018e61:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018e67:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0018e6d:	76 2d                	jbe    c0018e9c <VAS::scanForEviction()+0x82>
c0018e6f:	83 c6 01             	add    esi,0x1
c0018e72:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0018e79:	83 fe 03             	cmp    esi,0x3
c0018e7c:	74 32                	je     c0018eb0 <VAS::scanForEviction()+0x96>
c0018e7e:	31 db                	xor    ebx,ebx
c0018e80:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0018e86:	75 b7                	jne    c0018e3f <VAS::scanForEviction()+0x25>
c0018e88:	89 da                	mov    edx,ebx
c0018e8a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018e8d:	c1 ea 16             	shr    edx,0x16
c0018e90:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0018e94:	75 a9                	jne    c0018e3f <VAS::scanForEviction()+0x25>
c0018e96:	81 c3 00 00 40 00    	add    ebx,0x400000
c0018e9c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0018e9f:	eb 88                	jmp    c0018e29 <VAS::scanForEviction()+0xf>
c0018ea1:	f6 c2 20             	test   dl,0x20
c0018ea4:	74 13                	je     c0018eb9 <VAS::scanForEviction()+0x9f>
c0018ea6:	83 e2 df             	and    edx,0xffffffdf
c0018ea9:	89 10                	mov    DWORD PTR [eax],edx
c0018eab:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0018eae:	eb b1                	jmp    c0018e61 <VAS::scanForEviction()+0x47>
c0018eb0:	83 c4 10             	add    esp,0x10
c0018eb3:	31 c0                	xor    eax,eax
c0018eb5:	5b                   	pop    ebx
c0018eb6:	5e                   	pop    esi
c0018eb7:	5f                   	pop    edi
c0018eb8:	c3                   	ret    
c0018eb9:	83 ec 08             	sub    esp,0x8
c0018ebc:	89 d0                	mov    eax,edx
c0018ebe:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018ec3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018ec7:	53                   	push   ebx
c0018ec8:	68 a9 15 03 c0       	push   0xc00315a9
c0018ecd:	e8 c3 02 00 00       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0018ed2:	58                   	pop    eax
c0018ed3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0018ed6:	5a                   	pop    edx
c0018ed7:	51                   	push   ecx
c0018ed8:	57                   	push   edi
c0018ed9:	e8 24 fc ff ff       	call   c0018b02 <VAS::evict(unsigned long)>
c0018ede:	5b                   	pop    ebx
c0018edf:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0018ee2:	5e                   	pop    esi
c0018ee3:	50                   	push   eax
c0018ee4:	68 bd 15 03 c0       	push   0xc00315bd
c0018ee9:	e8 a7 02 00 00       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0018eee:	58                   	pop    eax
c0018eef:	5a                   	pop    edx
c0018ef0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ef4:	50                   	push   eax
c0018ef5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018ef9:	68 d0 15 03 c0       	push   0xc00315d0
c0018efe:	e8 92 02 00 00       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0018f03:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0018f06:	83 c4 10             	add    esp,0x10
c0018f09:	81 c1 00 10 00 00    	add    ecx,0x1000
c0018f0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018f13:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0018f16:	83 c4 10             	add    esp,0x10
c0018f19:	5b                   	pop    ebx
c0018f1a:	5e                   	pop    esi
c0018f1b:	5f                   	pop    edi
c0018f1c:	c3                   	ret    

c0018f1d <mapVASFirstTime>:
c0018f1d:	55                   	push   ebp
c0018f1e:	57                   	push   edi
c0018f1f:	56                   	push   esi
c0018f20:	53                   	push   ebx
c0018f21:	83 ec 0c             	sub    esp,0xc
c0018f24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f29:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018f2c:	83 fa 01             	cmp    edx,0x1
c0018f2f:	0f 84 cb 00 00 00    	je     c0019000 <mapVASFirstTime+0xe3>
c0018f35:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0018f38:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c0018f3b:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0018f40:	c1 e5 15             	shl    ebp,0x15
c0018f43:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0018f48:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c0018f4e:	29 eb                	sub    ebx,ebp
c0018f50:	29 ef                	sub    edi,ebp
c0018f52:	e8 b8 d6 ff ff       	call   c001660f <Phys::allocatePage()>
c0018f57:	83 ec 0c             	sub    esp,0xc
c0018f5a:	68 03 04 00 00       	push   0x403
c0018f5f:	6a 01                	push   0x1
c0018f61:	53                   	push   ebx
c0018f62:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0018f68:	50                   	push   eax
c0018f69:	56                   	push   esi
c0018f6a:	e8 fb f7 ff ff       	call   c001876a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018f6f:	83 c4 20             	add    esp,0x20
c0018f72:	39 fb                	cmp    ebx,edi
c0018f74:	75 dc                	jne    c0018f52 <mapVASFirstTime+0x35>
c0018f76:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0018f7b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0018f80:	29 eb                	sub    ebx,ebp
c0018f82:	29 ef                	sub    edi,ebp
c0018f84:	e8 86 d6 ff ff       	call   c001660f <Phys::allocatePage()>
c0018f89:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0018f8d:	83 fa 01             	cmp    edx,0x1
c0018f90:	19 d2                	sbb    edx,edx
c0018f92:	83 ec 0c             	sub    esp,0xc
c0018f95:	83 e2 04             	and    edx,0x4
c0018f98:	81 c2 03 04 00 00    	add    edx,0x403
c0018f9e:	52                   	push   edx
c0018f9f:	6a 01                	push   0x1
c0018fa1:	53                   	push   ebx
c0018fa2:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0018fa8:	50                   	push   eax
c0018fa9:	56                   	push   esi
c0018faa:	e8 bb f7 ff ff       	call   c001876a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018faf:	83 c4 20             	add    esp,0x20
c0018fb2:	39 df                	cmp    edi,ebx
c0018fb4:	75 ce                	jne    c0018f84 <mapVASFirstTime+0x67>
c0018fb6:	83 ec 0c             	sub    esp,0xc
c0018fb9:	bb 7c 60 03 c0       	mov    ebx,0xc003607c
c0018fbe:	6a 04                	push   0x4
c0018fc0:	81 eb 00 50 03 c0    	sub    ebx,0xc0035000
c0018fc6:	6a ff                	push   0xffffffff
c0018fc8:	c1 eb 0c             	shr    ebx,0xc
c0018fcb:	53                   	push   ebx
c0018fcc:	68 00 50 03 c0       	push   0xc0035000
c0018fd1:	56                   	push   esi
c0018fd2:	e8 1f f3 ff ff       	call   c00182f6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0018fd7:	83 c4 14             	add    esp,0x14
c0018fda:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c0018fdf:	6a 04                	push   0x4
c0018fe1:	6a ff                	push   0xffffffff
c0018fe3:	53                   	push   ebx
c0018fe4:	68 00 50 03 c0       	push   0xc0035000
c0018fe9:	50                   	push   eax
c0018fea:	e8 07 f3 ff ff       	call   c00182f6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0018fef:	0f 20 d8             	mov    eax,cr3
c0018ff2:	0f 22 d8             	mov    cr3,eax
c0018ff5:	83 c4 20             	add    esp,0x20
c0018ff8:	83 c4 0c             	add    esp,0xc
c0018ffb:	5b                   	pop    ebx
c0018ffc:	5e                   	pop    esi
c0018ffd:	5f                   	pop    edi
c0018ffe:	5d                   	pop    ebp
c0018fff:	c3                   	ret    
c0019000:	83 ec 0c             	sub    esp,0xc
c0019003:	68 dd 15 03 c0       	push   0xc00315dd
c0019008:	e8 88 01 00 00       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c001900d:	83 c4 10             	add    esp,0x10
c0019010:	83 c4 0c             	add    esp,0xc
c0019013:	5b                   	pop    ebx
c0019014:	5e                   	pop    esi
c0019015:	5f                   	pop    edi
c0019016:	5d                   	pop    ebp
c0019017:	c3                   	ret    

c0019018 <__cxa_atexit>:
c0019018:	31 c0                	xor    eax,eax
c001901a:	c3                   	ret    

c001901b <__cxa_finalize>:
c001901b:	c3                   	ret    

c001901c <__stack_chk_fail>:
c001901c:	55                   	push   ebp
c001901d:	89 e5                	mov    ebp,esp
c001901f:	83 ec 10             	sub    esp,0x10
c0019022:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019025:	68 f6 15 03 c0       	push   0xc00315f6
c001902a:	e8 66 01 00 00       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c001902f:	58                   	pop    eax
c0019030:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019033:	5a                   	pop    edx
c0019034:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019037:	68 f6 15 03 c0       	push   0xc00315f6
c001903c:	e8 54 01 00 00       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0019041:	c7 04 24 fe 15 03 c0 	mov    DWORD PTR [esp],0xc00315fe
c0019048:	e8 61 71 00 00       	call   c00201ae <KePanic(char const*)>
c001904d:	83 c4 10             	add    esp,0x10
c0019050:	c9                   	leave  
c0019051:	c3                   	ret    

c0019052 <__cxa_pure_virtual>:
c0019052:	83 ec 18             	sub    esp,0x18
c0019055:	68 16 16 03 c0       	push   0xc0031616
c001905a:	e8 4f 71 00 00       	call   c00201ae <KePanic(char const*)>
c001905f:	83 c4 1c             	add    esp,0x1c
c0019062:	c3                   	ret    

c0019063 <operator new[](unsigned long)>:
c0019063:	e9 9e d2 ff ff       	jmp    c0016306 <malloc>

c0019068 <operator delete(void*, unsigned long)>:
c0019068:	e9 b9 d2 ff ff       	jmp    c0016326 <rfree>

c001906d <operator delete[](void*)>:
c001906d:	e9 b4 d2 ff ff       	jmp    c0016326 <rfree>

c0019072 <operator delete[](void*, unsigned long)>:
c0019072:	e9 af d2 ff ff       	jmp    c0016326 <rfree>

c0019077 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0019077:	55                   	push   ebp
c0019078:	57                   	push   edi
c0019079:	56                   	push   esi
c001907a:	be 1f 11 03 c0       	mov    esi,0xc003111f
c001907f:	53                   	push   ebx
c0019080:	83 ec 20             	sub    esp,0x20
c0019083:	a0 1e 11 03 c0       	mov    al,ds:0xc003111e
c0019088:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001908c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019090:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0019094:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0019098:	b8 10 00 00 00       	mov    eax,0x10
c001909d:	f7 c7 02 00 00 00    	test   edi,0x2
c00190a3:	75 60                	jne    c0019105 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c00190a5:	89 c1                	mov    ecx,eax
c00190a7:	c1 e9 02             	shr    ecx,0x2
c00190aa:	fc                   	cld    
c00190ab:	31 d2                	xor    edx,edx
c00190ad:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00190af:	a8 02                	test   al,0x2
c00190b1:	74 0b                	je     c00190be <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c00190b3:	66 8b 16             	mov    dx,WORD PTR [esi]
c00190b6:	66 89 17             	mov    WORD PTR [edi],dx
c00190b9:	ba 02 00 00 00       	mov    edx,0x2
c00190be:	a8 01                	test   al,0x1
c00190c0:	74 06                	je     c00190c8 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c00190c2:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c00190c5:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c00190c8:	89 ee                	mov    esi,ebp
c00190ca:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00190ce:	eb 02                	jmp    c00190d2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c00190d0:	89 c6                	mov    esi,eax
c00190d2:	31 d2                	xor    edx,edx
c00190d4:	83 c1 01             	add    ecx,0x1
c00190d7:	89 f0                	mov    eax,esi
c00190d9:	f7 f3                	div    ebx
c00190db:	39 de                	cmp    esi,ebx
c00190dd:	73 f1                	jae    c00190d0 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c00190df:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00190e2:	eb 02                	jmp    c00190e6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c00190e4:	89 c5                	mov    ebp,eax
c00190e6:	31 d2                	xor    edx,edx
c00190e8:	83 e9 01             	sub    ecx,0x1
c00190eb:	89 e8                	mov    eax,ebp
c00190ed:	f7 f3                	div    ebx
c00190ef:	39 dd                	cmp    ebp,ebx
c00190f1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c00190f5:	88 11                	mov    BYTE PTR [ecx],dl
c00190f7:	73 eb                	jae    c00190e4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c00190f9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00190fd:	83 c4 20             	add    esp,0x20
c0019100:	5b                   	pop    ebx
c0019101:	5e                   	pop    esi
c0019102:	5f                   	pop    edi
c0019103:	5d                   	pop    ebp
c0019104:	c3                   	ret    
c0019105:	66 8b 16             	mov    dx,WORD PTR [esi]
c0019108:	83 c7 02             	add    edi,0x2
c001910b:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c001910f:	83 c6 02             	add    esi,0x2
c0019112:	83 e8 02             	sub    eax,0x2
c0019115:	eb 8e                	jmp    c00190a5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c0019117 <Dbg::logc(char)>:
c0019117:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001911b:	f6 05 d4 a9 03 c0 10 	test   BYTE PTR ds:0xc003a9d4,0x10
c0019122:	75 12                	jne    c0019136 <Dbg::logc(char)+0x1f>
c0019124:	ba fd 03 00 00       	mov    edx,0x3fd
c0019129:	ec                   	in     al,dx
c001912a:	a8 20                	test   al,0x20
c001912c:	74 fb                	je     c0019129 <Dbg::logc(char)+0x12>
c001912e:	ba f8 03 00 00       	mov    edx,0x3f8
c0019133:	88 c8                	mov    al,cl
c0019135:	ee                   	out    dx,al
c0019136:	c3                   	ret    

c0019137 <Dbg::logs(char*)>:
c0019137:	53                   	push   ebx
c0019138:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001913c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001913f:	85 c0                	test   eax,eax
c0019141:	74 11                	je     c0019154 <Dbg::logs(char*)+0x1d>
c0019143:	83 c3 01             	add    ebx,0x1
c0019146:	50                   	push   eax
c0019147:	e8 cb ff ff ff       	call   c0019117 <Dbg::logc(char)>
c001914c:	58                   	pop    eax
c001914d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019150:	85 c0                	test   eax,eax
c0019152:	75 ef                	jne    c0019143 <Dbg::logs(char*)+0xc>
c0019154:	5b                   	pop    ebx
c0019155:	c3                   	ret    

c0019156 <Dbg::logWriteInt(unsigned int)>:
c0019156:	83 ec 10             	sub    esp,0x10
c0019159:	6a 0a                	push   0xa
c001915b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001915f:	50                   	push   eax
c0019160:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019164:	50                   	push   eax
c0019165:	e8 0d ff ff ff       	call   c0019077 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001916a:	50                   	push   eax
c001916b:	e8 c7 ff ff ff       	call   c0019137 <Dbg::logs(char*)>
c0019170:	83 c4 20             	add    esp,0x20
c0019173:	c3                   	ret    

c0019174 <Dbg::logWriteIntBase(unsigned int, int)>:
c0019174:	83 ec 10             	sub    esp,0x10
c0019177:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001917b:	50                   	push   eax
c001917c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019180:	50                   	push   eax
c0019181:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019185:	52                   	push   edx
c0019186:	e8 ec fe ff ff       	call   c0019077 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001918b:	50                   	push   eax
c001918c:	e8 a6 ff ff ff       	call   c0019137 <Dbg::logs(char*)>
c0019191:	83 c4 20             	add    esp,0x20
c0019194:	c3                   	ret    

c0019195 <Dbg::kprintf(char const*, ...)>:
c0019195:	55                   	push   ebp
c0019196:	57                   	push   edi
c0019197:	56                   	push   esi
c0019198:	53                   	push   ebx
c0019199:	83 ec 0c             	sub    esp,0xc
c001919c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00191a0:	f6 05 d4 a9 03 c0 10 	test   BYTE PTR ds:0xc003a9d4,0x10
c00191a7:	74 08                	je     c00191b1 <Dbg::kprintf(char const*, ...)+0x1c>
c00191a9:	83 c4 0c             	add    esp,0xc
c00191ac:	5b                   	pop    ebx
c00191ad:	5e                   	pop    esi
c00191ae:	5f                   	pop    edi
c00191af:	5d                   	pop    ebp
c00191b0:	c3                   	ret    
c00191b1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00191b5:	31 ff                	xor    edi,edi
c00191b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00191bb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00191be:	85 c0                	test   eax,eax
c00191c0:	74 e7                	je     c00191a9 <Dbg::kprintf(char const*, ...)+0x14>
c00191c2:	8d 77 01             	lea    esi,[edi+0x1]
c00191c5:	83 f8 25             	cmp    eax,0x25
c00191c8:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c00191cb:	75 47                	jne    c0019214 <Dbg::kprintf(char const*, ...)+0x7f>
c00191cd:	83 c7 02             	add    edi,0x2
c00191d0:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00191d3:	8d 34 3b             	lea    esi,[ebx+edi*1]
c00191d6:	83 e8 25             	sub    eax,0x25
c00191d9:	0f b6 c0             	movzx  eax,al
c00191dc:	83 f8 53             	cmp    eax,0x53
c00191df:	0f 87 ce 00 00 00    	ja     c00192b3 <Dbg::kprintf(char const*, ...)+0x11e>
c00191e5:	ff 24 85 2c 16 03 c0 	jmp    DWORD PTR [eax*4-0x3ffce9d4]
c00191ec:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00191f0:	89 c8                	mov    eax,ecx
c00191f2:	83 c1 04             	add    ecx,0x4
c00191f5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00191f9:	8b 28                	mov    ebp,DWORD PTR [eax]
c00191fb:	55                   	push   ebp
c00191fc:	e8 55 ff ff ff       	call   c0019156 <Dbg::logWriteInt(unsigned int)>
c0019201:	58                   	pop    eax
c0019202:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0019205:	85 c0                	test   eax,eax
c0019207:	74 a0                	je     c00191a9 <Dbg::kprintf(char const*, ...)+0x14>
c0019209:	8d 77 01             	lea    esi,[edi+0x1]
c001920c:	83 f8 25             	cmp    eax,0x25
c001920f:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0019212:	74 b9                	je     c00191cd <Dbg::kprintf(char const*, ...)+0x38>
c0019214:	50                   	push   eax
c0019215:	89 f7                	mov    edi,esi
c0019217:	e8 fb fe ff ff       	call   c0019117 <Dbg::logc(char)>
c001921c:	89 ee                	mov    esi,ebp
c001921e:	58                   	pop    eax
c001921f:	eb e1                	jmp    c0019202 <Dbg::kprintf(char const*, ...)+0x6d>
c0019221:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019225:	89 c8                	mov    eax,ecx
c0019227:	83 c1 04             	add    ecx,0x4
c001922a:	8b 00                	mov    eax,DWORD PTR [eax]
c001922c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0019230:	50                   	push   eax
c0019231:	e8 01 ff ff ff       	call   c0019137 <Dbg::logs(char*)>
c0019236:	58                   	pop    eax
c0019237:	eb c9                	jmp    c0019202 <Dbg::kprintf(char const*, ...)+0x6d>
c0019239:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001923d:	89 d0                	mov    eax,edx
c001923f:	83 c2 04             	add    edx,0x4
c0019242:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019246:	8b 00                	mov    eax,DWORD PTR [eax]
c0019248:	50                   	push   eax
c0019249:	e8 08 ff ff ff       	call   c0019156 <Dbg::logWriteInt(unsigned int)>
c001924e:	58                   	pop    eax
c001924f:	eb b1                	jmp    c0019202 <Dbg::kprintf(char const*, ...)+0x6d>
c0019251:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019255:	89 d0                	mov    eax,edx
c0019257:	83 c2 04             	add    edx,0x4
c001925a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c001925d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019261:	50                   	push   eax
c0019262:	e8 b0 fe ff ff       	call   c0019117 <Dbg::logc(char)>
c0019267:	58                   	pop    eax
c0019268:	eb 98                	jmp    c0019202 <Dbg::kprintf(char const*, ...)+0x6d>
c001926a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001926e:	89 c8                	mov    eax,ecx
c0019270:	83 c1 04             	add    ecx,0x4
c0019273:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0019277:	6a 10                	push   0x10
c0019279:	8b 08                	mov    ecx,DWORD PTR [eax]
c001927b:	51                   	push   ecx
c001927c:	e8 f3 fe ff ff       	call   c0019174 <Dbg::logWriteIntBase(unsigned int, int)>
c0019281:	5d                   	pop    ebp
c0019282:	58                   	pop    eax
c0019283:	e9 7a ff ff ff       	jmp    c0019202 <Dbg::kprintf(char const*, ...)+0x6d>
c0019288:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001928c:	89 d0                	mov    eax,edx
c001928e:	83 c2 08             	add    edx,0x8
c0019291:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019295:	6a 10                	push   0x10
c0019297:	8b 00                	mov    eax,DWORD PTR [eax]
c0019299:	50                   	push   eax
c001929a:	e8 d5 fe ff ff       	call   c0019174 <Dbg::logWriteIntBase(unsigned int, int)>
c001929f:	58                   	pop    eax
c00192a0:	5a                   	pop    edx
c00192a1:	e9 5c ff ff ff       	jmp    c0019202 <Dbg::kprintf(char const*, ...)+0x6d>
c00192a6:	6a 25                	push   0x25
c00192a8:	e8 6a fe ff ff       	call   c0019117 <Dbg::logc(char)>
c00192ad:	5a                   	pop    edx
c00192ae:	e9 4f ff ff ff       	jmp    c0019202 <Dbg::kprintf(char const*, ...)+0x6d>
c00192b3:	6a 25                	push   0x25
c00192b5:	e8 5d fe ff ff       	call   c0019117 <Dbg::logc(char)>
c00192ba:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00192be:	50                   	push   eax
c00192bf:	e8 53 fe ff ff       	call   c0019117 <Dbg::logc(char)>
c00192c4:	5a                   	pop    edx
c00192c5:	59                   	pop    ecx
c00192c6:	e9 37 ff ff ff       	jmp    c0019202 <Dbg::kprintf(char const*, ...)+0x6d>
c00192cb:	90                   	nop

c00192cc <KiUbsanPrintDetails(char const*, void*)>:
c00192cc:	83 ec 1c             	sub    esp,0x1c
c00192cf:	83 ec 08             	sub    esp,0x8
c00192d2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00192d6:	68 7c 17 03 c0       	push   0xc003177c
c00192db:	e8 b5 fe ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c00192e0:	83 c4 10             	add    esp,0x10
c00192e3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00192e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00192eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00192ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00192f1:	83 ec 08             	sub    esp,0x8
c00192f4:	50                   	push   eax
c00192f5:	68 90 17 03 c0       	push   0xc0031790
c00192fa:	e8 96 fe ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c00192ff:	83 c4 10             	add    esp,0x10
c0019302:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019306:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019309:	83 ec 08             	sub    esp,0x8
c001930c:	50                   	push   eax
c001930d:	68 9a 17 03 c0       	push   0xc003179a
c0019312:	e8 7e fe ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0019317:	83 c4 10             	add    esp,0x10
c001931a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001931e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0019321:	83 ec 08             	sub    esp,0x8
c0019324:	50                   	push   eax
c0019325:	68 a4 17 03 c0       	push   0xc00317a4
c001932a:	e8 66 fe ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c001932f:	83 c4 10             	add    esp,0x10
c0019332:	90                   	nop
c0019333:	83 c4 1c             	add    esp,0x1c
c0019336:	c3                   	ret    
c0019337:	90                   	nop

c0019338 <__ubsan_handle_type_mismatch_v1>:
c0019338:	83 ec 0c             	sub    esp,0xc
c001933b:	83 ec 08             	sub    esp,0x8
c001933e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019342:	68 e8 18 03 c0       	push   0xc00318e8
c0019347:	e8 80 ff ff ff       	call   c00192cc <KiUbsanPrintDetails(char const*, void*)>
c001934c:	83 c4 10             	add    esp,0x10
c001934f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019354:	75 16                	jne    c001936c <__ubsan_handle_type_mismatch_v1+0x34>
c0019356:	83 ec 0c             	sub    esp,0xc
c0019359:	68 ae 17 03 c0       	push   0xc00317ae
c001935e:	e8 32 fe ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0019363:	83 c4 10             	add    esp,0x10
c0019366:	e9 91 00 00 00       	jmp    c00193fc <__ubsan_handle_type_mismatch_v1+0xc4>
c001936b:	90                   	nop
c001936c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019370:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019373:	85 c0                	test   eax,eax
c0019375:	74 29                	je     c00193a0 <__ubsan_handle_type_mismatch_v1+0x68>
c0019377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001937b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001937e:	83 e8 01             	sub    eax,0x1
c0019381:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019385:	75 19                	jne    c00193a0 <__ubsan_handle_type_mismatch_v1+0x68>
c0019387:	83 ec 08             	sub    esp,0x8
c001938a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001938e:	68 08 19 03 c0       	push   0xc0031908
c0019393:	e8 fd fd ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0019398:	83 c4 10             	add    esp,0x10
c001939b:	eb 5f                	jmp    c00193fc <__ubsan_handle_type_mismatch_v1+0xc4>
c001939d:	8d 76 00             	lea    esi,[esi+0x0]
c00193a0:	83 ec 0c             	sub    esp,0xc
c00193a3:	68 c3 17 03 c0       	push   0xc00317c3
c00193a8:	e8 e8 fd ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c00193ad:	83 c4 10             	add    esp,0x10
c00193b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193b4:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00193b7:	0f b6 c0             	movzx  eax,al
c00193ba:	83 ec 08             	sub    esp,0x8
c00193bd:	50                   	push   eax
c00193be:	68 dd 17 03 c0       	push   0xc00317dd
c00193c3:	e8 cd fd ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c00193c8:	83 c4 10             	add    esp,0x10
c00193cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193cf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00193d2:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00193d5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00193d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193dd:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00193e0:	0f b6 c0             	movzx  eax,al
c00193e3:	8b 04 85 a0 3a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcc560]
c00193ea:	51                   	push   ecx
c00193eb:	52                   	push   edx
c00193ec:	50                   	push   eax
c00193ed:	68 30 19 03 c0       	push   0xc0031930
c00193f2:	e8 9e fd ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c00193f7:	83 c4 10             	add    esp,0x10
c00193fa:	66 90                	xchg   ax,ax
c00193fc:	83 ec 0c             	sub    esp,0xc
c00193ff:	68 e8 18 03 c0       	push   0xc00318e8
c0019404:	e8 a5 6d 00 00       	call   c00201ae <KePanic(char const*)>
c0019409:	83 c4 10             	add    esp,0x10
c001940c:	90                   	nop
c001940d:	83 c4 0c             	add    esp,0xc
c0019410:	c3                   	ret    
c0019411:	8d 76 00             	lea    esi,[esi+0x0]

c0019414 <__ubsan_handle_pointer_overflow>:
c0019414:	83 ec 0c             	sub    esp,0xc
c0019417:	83 ec 08             	sub    esp,0x8
c001941a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001941e:	68 78 19 03 c0       	push   0xc0031978
c0019423:	e8 a4 fe ff ff       	call   c00192cc <KiUbsanPrintDetails(char const*, void*)>
c0019428:	83 c4 10             	add    esp,0x10
c001942b:	83 ec 0c             	sub    esp,0xc
c001942e:	68 78 19 03 c0       	push   0xc0031978
c0019433:	e8 76 6d 00 00       	call   c00201ae <KePanic(char const*)>
c0019438:	83 c4 10             	add    esp,0x10
c001943b:	90                   	nop
c001943c:	83 c4 0c             	add    esp,0xc
c001943f:	c3                   	ret    

c0019440 <__ubsan_handle_out_of_bounds>:
c0019440:	83 ec 0c             	sub    esp,0xc
c0019443:	83 ec 08             	sub    esp,0x8
c0019446:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001944a:	68 e8 17 03 c0       	push   0xc00317e8
c001944f:	e8 78 fe ff ff       	call   c00192cc <KiUbsanPrintDetails(char const*, void*)>
c0019454:	83 c4 10             	add    esp,0x10
c0019457:	83 ec 0c             	sub    esp,0xc
c001945a:	68 e8 17 03 c0       	push   0xc00317e8
c001945f:	e8 4a 6d 00 00       	call   c00201ae <KePanic(char const*)>
c0019464:	83 c4 10             	add    esp,0x10
c0019467:	90                   	nop
c0019468:	83 c4 0c             	add    esp,0xc
c001946b:	c3                   	ret    

c001946c <__ubsan_handle_add_overflow>:
c001946c:	83 ec 0c             	sub    esp,0xc
c001946f:	83 ec 08             	sub    esp,0x8
c0019472:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019476:	68 05 18 03 c0       	push   0xc0031805
c001947b:	e8 4c fe ff ff       	call   c00192cc <KiUbsanPrintDetails(char const*, void*)>
c0019480:	83 c4 10             	add    esp,0x10
c0019483:	83 ec 0c             	sub    esp,0xc
c0019486:	68 05 18 03 c0       	push   0xc0031805
c001948b:	e8 1e 6d 00 00       	call   c00201ae <KePanic(char const*)>
c0019490:	83 c4 10             	add    esp,0x10
c0019493:	90                   	nop
c0019494:	83 c4 0c             	add    esp,0xc
c0019497:	c3                   	ret    

c0019498 <__ubsan_handle_load_invalid_value>:
c0019498:	83 ec 0c             	sub    esp,0xc
c001949b:	83 ec 08             	sub    esp,0x8
c001949e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00194a2:	68 98 19 03 c0       	push   0xc0031998
c00194a7:	e8 20 fe ff ff       	call   c00192cc <KiUbsanPrintDetails(char const*, void*)>
c00194ac:	83 c4 10             	add    esp,0x10
c00194af:	83 ec 0c             	sub    esp,0xc
c00194b2:	68 98 19 03 c0       	push   0xc0031998
c00194b7:	e8 f2 6c 00 00       	call   c00201ae <KePanic(char const*)>
c00194bc:	83 c4 10             	add    esp,0x10
c00194bf:	90                   	nop
c00194c0:	83 c4 0c             	add    esp,0xc
c00194c3:	c3                   	ret    

c00194c4 <__ubsan_handle_divrem_overflow>:
c00194c4:	83 ec 0c             	sub    esp,0xc
c00194c7:	83 ec 08             	sub    esp,0x8
c00194ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00194ce:	68 bc 19 03 c0       	push   0xc00319bc
c00194d3:	e8 f4 fd ff ff       	call   c00192cc <KiUbsanPrintDetails(char const*, void*)>
c00194d8:	83 c4 10             	add    esp,0x10
c00194db:	83 ec 0c             	sub    esp,0xc
c00194de:	68 bc 19 03 c0       	push   0xc00319bc
c00194e3:	e8 c6 6c 00 00       	call   c00201ae <KePanic(char const*)>
c00194e8:	83 c4 10             	add    esp,0x10
c00194eb:	90                   	nop
c00194ec:	83 c4 0c             	add    esp,0xc
c00194ef:	c3                   	ret    

c00194f0 <__ubsan_handle_mul_overflow>:
c00194f0:	83 ec 0c             	sub    esp,0xc
c00194f3:	83 ec 08             	sub    esp,0x8
c00194f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00194fa:	68 21 18 03 c0       	push   0xc0031821
c00194ff:	e8 c8 fd ff ff       	call   c00192cc <KiUbsanPrintDetails(char const*, void*)>
c0019504:	83 c4 10             	add    esp,0x10
c0019507:	83 ec 0c             	sub    esp,0xc
c001950a:	68 21 18 03 c0       	push   0xc0031821
c001950f:	e8 9a 6c 00 00       	call   c00201ae <KePanic(char const*)>
c0019514:	83 c4 10             	add    esp,0x10
c0019517:	90                   	nop
c0019518:	83 c4 0c             	add    esp,0xc
c001951b:	c3                   	ret    

c001951c <__ubsan_handle_sub_overflow>:
c001951c:	83 ec 0c             	sub    esp,0xc
c001951f:	83 ec 08             	sub    esp,0x8
c0019522:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019526:	68 3d 18 03 c0       	push   0xc003183d
c001952b:	e8 9c fd ff ff       	call   c00192cc <KiUbsanPrintDetails(char const*, void*)>
c0019530:	83 c4 10             	add    esp,0x10
c0019533:	83 ec 0c             	sub    esp,0xc
c0019536:	68 3d 18 03 c0       	push   0xc003183d
c001953b:	e8 6e 6c 00 00       	call   c00201ae <KePanic(char const*)>
c0019540:	83 c4 10             	add    esp,0x10
c0019543:	90                   	nop
c0019544:	83 c4 0c             	add    esp,0xc
c0019547:	c3                   	ret    

c0019548 <__ubsan_handle_shift_out_of_bounds>:
c0019548:	83 ec 0c             	sub    esp,0xc
c001954b:	83 ec 08             	sub    esp,0x8
c001954e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019552:	68 dc 19 03 c0       	push   0xc00319dc
c0019557:	e8 70 fd ff ff       	call   c00192cc <KiUbsanPrintDetails(char const*, void*)>
c001955c:	83 c4 10             	add    esp,0x10
c001955f:	83 ec 0c             	sub    esp,0xc
c0019562:	68 dc 19 03 c0       	push   0xc00319dc
c0019567:	e8 42 6c 00 00       	call   c00201ae <KePanic(char const*)>
c001956c:	83 c4 10             	add    esp,0x10
c001956f:	90                   	nop
c0019570:	83 c4 0c             	add    esp,0xc
c0019573:	c3                   	ret    

c0019574 <__ubsan_handle_negate_overflow>:
c0019574:	83 ec 0c             	sub    esp,0xc
c0019577:	83 ec 08             	sub    esp,0x8
c001957a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001957e:	68 00 1a 03 c0       	push   0xc0031a00
c0019583:	e8 44 fd ff ff       	call   c00192cc <KiUbsanPrintDetails(char const*, void*)>
c0019588:	83 c4 10             	add    esp,0x10
c001958b:	83 ec 0c             	sub    esp,0xc
c001958e:	68 00 1a 03 c0       	push   0xc0031a00
c0019593:	e8 16 6c 00 00       	call   c00201ae <KePanic(char const*)>
c0019598:	83 c4 10             	add    esp,0x10
c001959b:	90                   	nop
c001959c:	83 c4 0c             	add    esp,0xc
c001959f:	c3                   	ret    

c00195a0 <KiIsHashInTable(unsigned short)>:
c00195a0:	0f b7 d0             	movzx  edx,ax
c00195a3:	83 e0 07             	and    eax,0x7
c00195a6:	c1 fa 03             	sar    edx,0x3
c00195a9:	88 c1                	mov    cl,al
c00195ab:	0f b6 92 00 af 03 c0 	movzx  edx,BYTE PTR [edx-0x3ffc5100]
c00195b2:	d3 fa                	sar    edx,cl
c00195b4:	89 d0                	mov    eax,edx
c00195b6:	83 e0 01             	and    eax,0x1
c00195b9:	c3                   	ret    

c00195ba <KiSetHashInTable(unsigned short, bool)>:
c00195ba:	56                   	push   esi
c00195bb:	53                   	push   ebx
c00195bc:	0f b7 d8             	movzx  ebx,ax
c00195bf:	83 e0 07             	and    eax,0x7
c00195c2:	c1 fb 03             	sar    ebx,0x3
c00195c5:	89 c1                	mov    ecx,eax
c00195c7:	0f b6 b3 00 af 03 c0 	movzx  esi,BYTE PTR [ebx-0x3ffc5100]
c00195ce:	b8 01 00 00 00       	mov    eax,0x1
c00195d3:	d3 e0                	shl    eax,cl
c00195d5:	84 d2                	test   dl,dl
c00195d7:	74 04                	je     c00195dd <KiSetHashInTable(unsigned short, bool)+0x23>
c00195d9:	09 f0                	or     eax,esi
c00195db:	eb 04                	jmp    c00195e1 <KiSetHashInTable(unsigned short, bool)+0x27>
c00195dd:	f7 d0                	not    eax
c00195df:	21 f0                	and    eax,esi
c00195e1:	88 83 00 af 03 c0    	mov    BYTE PTR [ebx-0x3ffc5100],al
c00195e7:	5b                   	pop    ebx
c00195e8:	5e                   	pop    esi
c00195e9:	c3                   	ret    

c00195ea <KiFlushSymlinkChanges()>:
c00195ea:	57                   	push   edi
c00195eb:	56                   	push   esi
c00195ec:	53                   	push   ebx
c00195ed:	83 ec 1c             	sub    esp,0x1c
c00195f0:	68 14 01 00 00       	push   0x114
c00195f5:	e8 0c cd ff ff       	call   c0016306 <malloc>
c00195fa:	83 c4 0c             	add    esp,0xc
c00195fd:	89 c3                	mov    ebx,eax
c00195ff:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019605:	68 1f 1a 03 c0       	push   0xc0031a1f
c001960a:	50                   	push   eax
c001960b:	e8 8c 0d 00 00       	call   c001a39c <File::File(char const*, Process*)>
c0019610:	83 c4 10             	add    esp,0x10
c0019613:	85 db                	test   ebx,ebx
c0019615:	75 10                	jne    c0019627 <KiFlushSymlinkChanges()+0x3d>
c0019617:	83 ec 0c             	sub    esp,0xc
c001961a:	68 3d 1a 03 c0       	push   0xc0031a3d
c001961f:	e8 8a 6b 00 00       	call   c00201ae <KePanic(char const*)>
c0019624:	83 c4 10             	add    esp,0x10
c0019627:	50                   	push   eax
c0019628:	50                   	push   eax
c0019629:	6a 06                	push   0x6
c001962b:	53                   	push   ebx
c001962c:	e8 89 0d 00 00       	call   c001a3ba <File::open(FileOpenMode)>
c0019631:	83 c4 10             	add    esp,0x10
c0019634:	85 c0                	test   eax,eax
c0019636:	74 10                	je     c0019648 <KiFlushSymlinkChanges()+0x5e>
c0019638:	83 ec 0c             	sub    esp,0xc
c001963b:	68 57 1a 03 c0       	push   0xc0031a57
c0019640:	e8 69 6b 00 00       	call   c00201ae <KePanic(char const*)>
c0019645:	83 c4 10             	add    esp,0x10
c0019648:	31 f6                	xor    esi,esi
c001964a:	39 35 c0 aa 03 c0    	cmp    DWORD PTR ds:0xc003aac0,esi
c0019650:	7e 70                	jle    c00196c2 <KiFlushSymlinkChanges()+0xd8>
c0019652:	83 ec 0c             	sub    esp,0xc
c0019655:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019657:	8d 7c 24 18          	lea    edi,[esp+0x18]
c001965b:	89 f0                	mov    eax,esi
c001965d:	57                   	push   edi
c001965e:	c1 e0 08             	shl    eax,0x8
c0019661:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019666:	50                   	push   eax
c0019667:	6a 00                	push   0x0
c0019669:	68 00 01 00 00       	push   0x100
c001966e:	53                   	push   ebx
c001966f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0019672:	83 c4 20             	add    esp,0x20
c0019675:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c001967d:	74 10                	je     c001968f <KiFlushSymlinkChanges()+0xa5>
c001967f:	83 ec 0c             	sub    esp,0xc
c0019682:	68 71 1a 03 c0       	push   0xc0031a71
c0019687:	e8 22 6b 00 00       	call   c00201ae <KePanic(char const*)>
c001968c:	83 c4 10             	add    esp,0x10
c001968f:	83 ec 0c             	sub    esp,0xc
c0019692:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019694:	8d 14 f5 e0 aa 03 c0 	lea    edx,[esi*8-0x3ffc5520]
c001969b:	57                   	push   edi
c001969c:	52                   	push   edx
c001969d:	6a 00                	push   0x0
c001969f:	6a 08                	push   0x8
c00196a1:	53                   	push   ebx
c00196a2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00196a5:	83 c4 20             	add    esp,0x20
c00196a8:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00196ad:	74 10                	je     c00196bf <KiFlushSymlinkChanges()+0xd5>
c00196af:	83 ec 0c             	sub    esp,0xc
c00196b2:	68 8b 1a 03 c0       	push   0xc0031a8b
c00196b7:	e8 f2 6a 00 00       	call   c00201ae <KePanic(char const*)>
c00196bc:	83 c4 10             	add    esp,0x10
c00196bf:	46                   	inc    esi
c00196c0:	eb 88                	jmp    c001964a <KiFlushSymlinkChanges()+0x60>
c00196c2:	83 ec 0c             	sub    esp,0xc
c00196c5:	53                   	push   ebx
c00196c6:	e8 4d 0d 00 00       	call   c001a418 <File::close()>
c00196cb:	83 c4 10             	add    esp,0x10
c00196ce:	85 db                	test   ebx,ebx
c00196d0:	74 0c                	je     c00196de <KiFlushSymlinkChanges()+0xf4>
c00196d2:	83 ec 0c             	sub    esp,0xc
c00196d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00196d7:	53                   	push   ebx
c00196d8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00196db:	83 c4 10             	add    esp,0x10
c00196de:	c7 05 c0 aa 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003aac0,0x0
c00196e8:	83 c4 10             	add    esp,0x10
c00196eb:	5b                   	pop    ebx
c00196ec:	5e                   	pop    esi
c00196ed:	5f                   	pop    edi
c00196ee:	c3                   	ret    

c00196ef <KiDeinitialiseSymlinks(void*)>:
c00196ef:	e9 f6 fe ff ff       	jmp    c00195ea <KiFlushSymlinkChanges()>

c00196f4 <KiGetSymlinkHash(char const*)>:
c00196f4:	53                   	push   ebx
c00196f5:	89 c3                	mov    ebx,eax
c00196f7:	83 ec 14             	sub    esp,0x14
c00196fa:	50                   	push   eax
c00196fb:	e8 70 6e fe ff       	call   c0000570 <strlen>
c0019700:	5a                   	pop    edx
c0019701:	59                   	pop    ecx
c0019702:	50                   	push   eax
c0019703:	53                   	push   ebx
c0019704:	e8 0c 64 00 00       	call   c001fb15 <KeCalculateCRC32(unsigned char*, int)>
c0019709:	83 c4 18             	add    esp,0x18
c001970c:	89 c2                	mov    edx,eax
c001970e:	5b                   	pop    ebx
c001970f:	c1 ea 10             	shr    edx,0x10
c0019712:	31 d0                	xor    eax,edx
c0019714:	c3                   	ret    

c0019715 <KiCreateSymlinkID()>:
c0019715:	55                   	push   ebp
c0019716:	57                   	push   edi
c0019717:	56                   	push   esi
c0019718:	53                   	push   ebx
c0019719:	31 db                	xor    ebx,ebx
c001971b:	83 ec 1c             	sub    esp,0x1c
c001971e:	e8 d9 6b 00 00       	call   c00202fc <KeRand()>
c0019723:	43                   	inc    ebx
c0019724:	8b 2d 00 cf 03 c0    	mov    ebp,DWORD PTR ds:0xc003cf00
c001972a:	31 d2                	xor    edx,edx
c001972c:	8d 4d 01             	lea    ecx,[ebp+0x1]
c001972f:	0f a4 c2 1f          	shld   edx,eax,0x1f
c0019733:	89 0d 00 cf 03 c0    	mov    DWORD PTR ds:0xc003cf00,ecx
c0019739:	c1 e0 1f             	shl    eax,0x1f
c001973c:	89 d7                	mov    edi,edx
c001973e:	89 c6                	mov    esi,eax
c0019740:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0019744:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001974c:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0019752:	75 10                	jne    c0019764 <KiCreateSymlinkID()+0x4f>
c0019754:	83 ec 0c             	sub    esp,0xc
c0019757:	68 a5 1a 03 c0       	push   0xc0031aa5
c001975c:	e8 4d 6a 00 00       	call   c00201ae <KePanic(char const*)>
c0019761:	83 c4 10             	add    esp,0x10
c0019764:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0019768:	75 04                	jne    c001976e <KiCreateSymlinkID()+0x59>
c001976a:	39 f5                	cmp    ebp,esi
c001976c:	74 b0                	je     c001971e <KiCreateSymlinkID()+0x9>
c001976e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019776:	31 f0                	xor    eax,esi
c0019778:	83 c4 1c             	add    esp,0x1c
c001977b:	31 fa                	xor    edx,edi
c001977d:	5b                   	pop    ebx
c001977e:	5e                   	pop    esi
c001977f:	5f                   	pop    edi
c0019780:	5d                   	pop    ebp
c0019781:	c3                   	ret    

c0019782 <KeRegisterSymlink(char const*, unsigned long long)>:
c0019782:	53                   	push   ebx
c0019783:	83 ec 0c             	sub    esp,0xc
c0019786:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001978a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001978e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019792:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c0019797:	68 00 01 00 00       	push   0x100
c001979c:	89 0c c5 e4 aa 03 c0 	mov    DWORD PTR [eax*8-0x3ffc551c],ecx
c00197a3:	6a 00                	push   0x0
c00197a5:	89 14 c5 e0 aa 03 c0 	mov    DWORD PTR [eax*8-0x3ffc5520],edx
c00197ac:	c1 e0 08             	shl    eax,0x8
c00197af:	05 00 ab 03 c0       	add    eax,0xc003ab00
c00197b4:	50                   	push   eax
c00197b5:	e8 36 6d fe ff       	call   c00004f0 <memset>
c00197ba:	58                   	pop    eax
c00197bb:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c00197c0:	5a                   	pop    edx
c00197c1:	c1 e0 08             	shl    eax,0x8
c00197c4:	53                   	push   ebx
c00197c5:	05 00 ab 03 c0       	add    eax,0xc003ab00
c00197ca:	50                   	push   eax
c00197cb:	e8 70 6e fe ff       	call   c0000640 <strcpy>
c00197d0:	89 d8                	mov    eax,ebx
c00197d2:	e8 1d ff ff ff       	call   c00196f4 <KiGetSymlinkHash(char const*)>
c00197d7:	59                   	pop    ecx
c00197d8:	0f b7 d8             	movzx  ebx,ax
c00197db:	58                   	pop    eax
c00197dc:	53                   	push   ebx
c00197dd:	68 ae 1a 03 c0       	push   0xc0031aae
c00197e2:	e8 ae f9 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c00197e7:	89 d8                	mov    eax,ebx
c00197e9:	ba 01 00 00 00       	mov    edx,0x1
c00197ee:	e8 c7 fd ff ff       	call   c00195ba <KiSetHashInTable(unsigned short, bool)>
c00197f3:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c00197f8:	83 c4 10             	add    esp,0x10
c00197fb:	40                   	inc    eax
c00197fc:	a3 c0 aa 03 c0       	mov    ds:0xc003aac0,eax
c0019801:	83 f8 03             	cmp    eax,0x3
c0019804:	7e 09                	jle    c001980f <KeRegisterSymlink(char const*, unsigned long long)+0x8d>
c0019806:	83 c4 08             	add    esp,0x8
c0019809:	5b                   	pop    ebx
c001980a:	e9 db fd ff ff       	jmp    c00195ea <KiFlushSymlinkChanges()>
c001980f:	83 c4 08             	add    esp,0x8
c0019812:	5b                   	pop    ebx
c0019813:	c3                   	ret    

c0019814 <KeInitialiseSymlinks()>:
c0019814:	57                   	push   edi
c0019815:	56                   	push   esi
c0019816:	53                   	push   ebx
c0019817:	81 ec 14 01 00 00    	sub    esp,0x114
c001981d:	c7 05 00 cf 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003cf00,0x0
c0019827:	68 00 20 00 00       	push   0x2000
c001982c:	c7 05 c0 aa 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003aac0,0x0
c0019836:	6a 00                	push   0x0
c0019838:	68 00 af 03 c0       	push   0xc003af00
c001983d:	e8 ae 6c fe ff       	call   c00004f0 <memset>
c0019842:	59                   	pop    ecx
c0019843:	5b                   	pop    ebx
c0019844:	ff 35 00 cf 03 c0    	push   DWORD PTR ds:0xc003cf00
c001984a:	68 c2 1a 03 c0       	push   0xc0031ac2
c001984f:	e8 41 f9 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0019854:	5e                   	pop    esi
c0019855:	5f                   	pop    edi
c0019856:	6a 00                	push   0x0
c0019858:	68 ef 96 01 c0       	push   0xc00196ef
c001985d:	e8 d6 60 00 00       	call   c001f938 <KeRegisterAtexit(void (*)(void*), void*)>
c0019862:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019869:	e8 98 ca ff ff       	call   c0016306 <malloc>
c001986e:	83 c4 0c             	add    esp,0xc
c0019871:	89 c3                	mov    ebx,eax
c0019873:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019879:	68 1f 1a 03 c0       	push   0xc0031a1f
c001987e:	50                   	push   eax
c001987f:	e8 18 0b 00 00       	call   c001a39c <File::File(char const*, Process*)>
c0019884:	83 c4 10             	add    esp,0x10
c0019887:	85 db                	test   ebx,ebx
c0019889:	75 10                	jne    c001989b <KeInitialiseSymlinks()+0x87>
c001988b:	83 ec 0c             	sub    esp,0xc
c001988e:	68 df 1a 03 c0       	push   0xc0031adf
c0019893:	e8 16 69 00 00       	call   c00201ae <KePanic(char const*)>
c0019898:	83 c4 10             	add    esp,0x10
c001989b:	83 ec 0c             	sub    esp,0xc
c001989e:	53                   	push   ebx
c001989f:	e8 da 0d 00 00       	call   c001a67e <File::exists()>
c00198a4:	83 c4 10             	add    esp,0x10
c00198a7:	84 c0                	test   al,al
c00198a9:	75 3a                	jne    c00198e5 <KeInitialiseSymlinks()+0xd1>
c00198ab:	52                   	push   edx
c00198ac:	52                   	push   edx
c00198ad:	6a 12                	push   0x12
c00198af:	53                   	push   ebx
c00198b0:	e8 05 0b 00 00       	call   c001a3ba <File::open(FileOpenMode)>
c00198b5:	83 c4 10             	add    esp,0x10
c00198b8:	85 c0                	test   eax,eax
c00198ba:	74 10                	je     c00198cc <KeInitialiseSymlinks()+0xb8>
c00198bc:	83 ec 0c             	sub    esp,0xc
c00198bf:	68 fc 1a 03 c0       	push   0xc0031afc
c00198c4:	e8 e5 68 00 00       	call   c00201ae <KePanic(char const*)>
c00198c9:	83 c4 10             	add    esp,0x10
c00198cc:	83 ec 0c             	sub    esp,0xc
c00198cf:	53                   	push   ebx
c00198d0:	e8 43 0b 00 00       	call   c001a418 <File::close()>
c00198d5:	83 c4 10             	add    esp,0x10
c00198d8:	85 db                	test   ebx,ebx
c00198da:	0f 84 9e 00 00 00    	je     c001997e <KeInitialiseSymlinks()+0x16a>
c00198e0:	e9 8d 00 00 00       	jmp    c0019972 <KeInitialiseSymlinks()+0x15e>
c00198e5:	50                   	push   eax
c00198e6:	50                   	push   eax
c00198e7:	6a 01                	push   0x1
c00198e9:	53                   	push   ebx
c00198ea:	e8 cb 0a 00 00       	call   c001a3ba <File::open(FileOpenMode)>
c00198ef:	83 c4 10             	add    esp,0x10
c00198f2:	85 c0                	test   eax,eax
c00198f4:	74 10                	je     c0019906 <KeInitialiseSymlinks()+0xf2>
c00198f6:	83 ec 0c             	sub    esp,0xc
c00198f9:	68 19 1b 03 c0       	push   0xc0031b19
c00198fe:	e8 ab 68 00 00       	call   c00201ae <KePanic(char const*)>
c0019903:	83 c4 10             	add    esp,0x10
c0019906:	83 ec 0c             	sub    esp,0xc
c0019909:	ff 05 00 cf 03 c0    	inc    DWORD PTR ds:0xc003cf00
c001990f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019913:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019915:	57                   	push   edi
c0019916:	8d 74 24 20          	lea    esi,[esp+0x20]
c001991a:	56                   	push   esi
c001991b:	6a 00                	push   0x0
c001991d:	68 00 01 00 00       	push   0x100
c0019922:	53                   	push   ebx
c0019923:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019926:	83 c4 20             	add    esp,0x20
c0019929:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0019931:	75 33                	jne    c0019966 <KeInitialiseSymlinks()+0x152>
c0019933:	83 ec 0c             	sub    esp,0xc
c0019936:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019938:	57                   	push   edi
c0019939:	8d 54 24 18          	lea    edx,[esp+0x18]
c001993d:	52                   	push   edx
c001993e:	6a 00                	push   0x0
c0019940:	6a 08                	push   0x8
c0019942:	53                   	push   ebx
c0019943:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019946:	83 c4 20             	add    esp,0x20
c0019949:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c001994e:	75 16                	jne    c0019966 <KeInitialiseSymlinks()+0x152>
c0019950:	89 f0                	mov    eax,esi
c0019952:	e8 9d fd ff ff       	call   c00196f4 <KiGetSymlinkHash(char const*)>
c0019957:	ba 01 00 00 00       	mov    edx,0x1
c001995c:	0f b7 c0             	movzx  eax,ax
c001995f:	e8 56 fc ff ff       	call   c00195ba <KiSetHashInTable(unsigned short, bool)>
c0019964:	eb a0                	jmp    c0019906 <KeInitialiseSymlinks()+0xf2>
c0019966:	83 ec 0c             	sub    esp,0xc
c0019969:	53                   	push   ebx
c001996a:	e8 a9 0a 00 00       	call   c001a418 <File::close()>
c001996f:	83 c4 10             	add    esp,0x10
c0019972:	83 ec 0c             	sub    esp,0xc
c0019975:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019977:	53                   	push   ebx
c0019978:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001997b:	83 c4 10             	add    esp,0x10
c001997e:	81 c4 10 01 00 00    	add    esp,0x110
c0019984:	5b                   	pop    ebx
c0019985:	5e                   	pop    esi
c0019986:	5f                   	pop    edi
c0019987:	c3                   	ret    

c0019988 <KiIsSymlinkRegistered(char const*)>:
c0019988:	55                   	push   ebp
c0019989:	57                   	push   edi
c001998a:	56                   	push   esi
c001998b:	53                   	push   ebx
c001998c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019992:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0019999:	89 f0                	mov    eax,esi
c001999b:	e8 54 fd ff ff       	call   c00196f4 <KiGetSymlinkHash(char const*)>
c00199a0:	0f b7 c0             	movzx  eax,ax
c00199a3:	53                   	push   ebx
c00199a4:	56                   	push   esi
c00199a5:	50                   	push   eax
c00199a6:	68 34 1b 03 c0       	push   0xc0031b34
c00199ab:	e8 e5 f7 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c00199b0:	89 f0                	mov    eax,esi
c00199b2:	e8 3d fd ff ff       	call   c00196f4 <KiGetSymlinkHash(char const*)>
c00199b7:	0f b7 c0             	movzx  eax,ax
c00199ba:	e8 e1 fb ff ff       	call   c00195a0 <KiIsHashInTable(unsigned short)>
c00199bf:	83 c4 10             	add    esp,0x10
c00199c2:	88 c1                	mov    cl,al
c00199c4:	31 d2                	xor    edx,edx
c00199c6:	31 c0                	xor    eax,eax
c00199c8:	84 c9                	test   cl,cl
c00199ca:	0f 84 31 01 00 00    	je     c0019b01 <KiIsSymlinkRegistered(char const*)+0x179>
c00199d0:	31 db                	xor    ebx,ebx
c00199d2:	39 1d c0 aa 03 c0    	cmp    DWORD PTR ds:0xc003aac0,ebx
c00199d8:	7e 30                	jle    c0019a0a <KiIsSymlinkRegistered(char const*)+0x82>
c00199da:	89 d8                	mov    eax,ebx
c00199dc:	51                   	push   ecx
c00199dd:	c1 e0 08             	shl    eax,0x8
c00199e0:	51                   	push   ecx
c00199e1:	05 00 ab 03 c0       	add    eax,0xc003ab00
c00199e6:	50                   	push   eax
c00199e7:	56                   	push   esi
c00199e8:	e8 63 6d fe ff       	call   c0000750 <strcmp>
c00199ed:	83 c4 10             	add    esp,0x10
c00199f0:	85 c0                	test   eax,eax
c00199f2:	75 13                	jne    c0019a07 <KiIsSymlinkRegistered(char const*)+0x7f>
c00199f4:	8b 04 dd e0 aa 03 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffc5520]
c00199fb:	8b 14 dd e4 aa 03 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffc551c]
c0019a02:	e9 fa 00 00 00       	jmp    c0019b01 <KiIsSymlinkRegistered(char const*)+0x179>
c0019a07:	43                   	inc    ebx
c0019a08:	eb c8                	jmp    c00199d2 <KiIsSymlinkRegistered(char const*)+0x4a>
c0019a0a:	83 ec 0c             	sub    esp,0xc
c0019a0d:	68 14 01 00 00       	push   0x114
c0019a12:	e8 ef c8 ff ff       	call   c0016306 <malloc>
c0019a17:	83 c4 0c             	add    esp,0xc
c0019a1a:	89 c3                	mov    ebx,eax
c0019a1c:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019a22:	68 1f 1a 03 c0       	push   0xc0031a1f
c0019a27:	50                   	push   eax
c0019a28:	e8 6f 09 00 00       	call   c001a39c <File::File(char const*, Process*)>
c0019a2d:	83 c4 10             	add    esp,0x10
c0019a30:	85 db                	test   ebx,ebx
c0019a32:	75 12                	jne    c0019a46 <KiIsSymlinkRegistered(char const*)+0xbe>
c0019a34:	83 ec 0c             	sub    esp,0xc
c0019a37:	68 49 1b 03 c0       	push   0xc0031b49
c0019a3c:	e8 6d 67 00 00       	call   c00201ae <KePanic(char const*)>
c0019a41:	83 c4 10             	add    esp,0x10
c0019a44:	eb 10                	jmp    c0019a56 <KiIsSymlinkRegistered(char const*)+0xce>
c0019a46:	83 ec 0c             	sub    esp,0xc
c0019a49:	53                   	push   ebx
c0019a4a:	e8 2f 0c 00 00       	call   c001a67e <File::exists()>
c0019a4f:	83 c4 10             	add    esp,0x10
c0019a52:	84 c0                	test   al,al
c0019a54:	74 de                	je     c0019a34 <KiIsSymlinkRegistered(char const*)+0xac>
c0019a56:	52                   	push   edx
c0019a57:	52                   	push   edx
c0019a58:	6a 01                	push   0x1
c0019a5a:	53                   	push   ebx
c0019a5b:	e8 5a 09 00 00       	call   c001a3ba <File::open(FileOpenMode)>
c0019a60:	83 c4 10             	add    esp,0x10
c0019a63:	85 c0                	test   eax,eax
c0019a65:	74 10                	je     c0019a77 <KiIsSymlinkRegistered(char const*)+0xef>
c0019a67:	83 ec 0c             	sub    esp,0xc
c0019a6a:	68 64 1b 03 c0       	push   0xc0031b64
c0019a6f:	e8 3a 67 00 00       	call   c00201ae <KePanic(char const*)>
c0019a74:	83 c4 10             	add    esp,0x10
c0019a77:	83 ec 0c             	sub    esp,0xc
c0019a7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a7c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0019a80:	55                   	push   ebp
c0019a81:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0019a85:	57                   	push   edi
c0019a86:	6a 00                	push   0x0
c0019a88:	68 00 01 00 00       	push   0x100
c0019a8d:	53                   	push   ebx
c0019a8e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019a91:	83 c4 20             	add    esp,0x20
c0019a94:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0019a9c:	75 4b                	jne    c0019ae9 <KiIsSymlinkRegistered(char const*)+0x161>
c0019a9e:	83 ec 0c             	sub    esp,0xc
c0019aa1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019aa3:	55                   	push   ebp
c0019aa4:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019aa8:	52                   	push   edx
c0019aa9:	6a 00                	push   0x0
c0019aab:	6a 08                	push   0x8
c0019aad:	53                   	push   ebx
c0019aae:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019ab1:	83 c4 20             	add    esp,0x20
c0019ab4:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019ab9:	75 2e                	jne    c0019ae9 <KiIsSymlinkRegistered(char const*)+0x161>
c0019abb:	50                   	push   eax
c0019abc:	50                   	push   eax
c0019abd:	57                   	push   edi
c0019abe:	56                   	push   esi
c0019abf:	e8 8c 6c fe ff       	call   c0000750 <strcmp>
c0019ac4:	83 c4 10             	add    esp,0x10
c0019ac7:	85 c0                	test   eax,eax
c0019ac9:	75 ac                	jne    c0019a77 <KiIsSymlinkRegistered(char const*)+0xef>
c0019acb:	83 ec 0c             	sub    esp,0xc
c0019ace:	53                   	push   ebx
c0019acf:	e8 44 09 00 00       	call   c001a418 <File::close()>
c0019ad4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ad6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ad9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019adc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019ae0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019ae4:	83 c4 10             	add    esp,0x10
c0019ae7:	eb 18                	jmp    c0019b01 <KiIsSymlinkRegistered(char const*)+0x179>
c0019ae9:	83 ec 0c             	sub    esp,0xc
c0019aec:	53                   	push   ebx
c0019aed:	e8 26 09 00 00       	call   c001a418 <File::close()>
c0019af2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019af4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019af7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019afa:	83 c4 10             	add    esp,0x10
c0019afd:	31 c0                	xor    eax,eax
c0019aff:	31 d2                	xor    edx,edx
c0019b01:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019b07:	5b                   	pop    ebx
c0019b08:	5e                   	pop    esi
c0019b09:	5f                   	pop    edi
c0019b0a:	5d                   	pop    ebp
c0019b0b:	c3                   	ret    

c0019b0c <KeDereferenceSymlink(char const*, char*)>:
c0019b0c:	55                   	push   ebp
c0019b0d:	57                   	push   edi
c0019b0e:	56                   	push   esi
c0019b0f:	53                   	push   ebx
c0019b10:	83 ec 48             	sub    esp,0x48
c0019b13:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0019b17:	56                   	push   esi
c0019b18:	e8 6b fe ff ff       	call   c0019988 <KiIsSymlinkRegistered(char const*)>
c0019b1d:	83 c4 10             	add    esp,0x10
c0019b20:	89 c7                	mov    edi,eax
c0019b22:	89 d0                	mov    eax,edx
c0019b24:	09 f8                	or     eax,edi
c0019b26:	75 07                	jne    c0019b2f <KeDereferenceSymlink(char const*, char*)+0x23>
c0019b28:	31 c0                	xor    eax,eax
c0019b2a:	e9 7c 01 00 00       	jmp    c0019cab <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019b2f:	83 ec 0c             	sub    esp,0xc
c0019b32:	89 d5                	mov    ebp,edx
c0019b34:	68 14 01 00 00       	push   0x114
c0019b39:	e8 c8 c7 ff ff       	call   c0016306 <malloc>
c0019b3e:	83 c4 0c             	add    esp,0xc
c0019b41:	89 c3                	mov    ebx,eax
c0019b43:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019b49:	56                   	push   esi
c0019b4a:	50                   	push   eax
c0019b4b:	e8 4c 08 00 00       	call   c001a39c <File::File(char const*, Process*)>
c0019b50:	83 c4 10             	add    esp,0x10
c0019b53:	85 db                	test   ebx,ebx
c0019b55:	0f 84 32 01 00 00    	je     c0019c8d <KeDereferenceSymlink(char const*, char*)+0x181>
c0019b5b:	56                   	push   esi
c0019b5c:	56                   	push   esi
c0019b5d:	6a 01                	push   0x1
c0019b5f:	53                   	push   ebx
c0019b60:	e8 55 08 00 00       	call   c001a3ba <File::open(FileOpenMode)>
c0019b65:	83 c4 10             	add    esp,0x10
c0019b68:	85 c0                	test   eax,eax
c0019b6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b6c:	74 09                	je     c0019b77 <KeDereferenceSymlink(char const*, char*)+0x6b>
c0019b6e:	83 ec 0c             	sub    esp,0xc
c0019b71:	53                   	push   ebx
c0019b72:	e9 10 01 00 00       	jmp    c0019c87 <KeDereferenceSymlink(char const*, char*)+0x17b>
c0019b77:	83 ec 0c             	sub    esp,0xc
c0019b7a:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019b7e:	56                   	push   esi
c0019b7f:	8d 54 24 37          	lea    edx,[esp+0x37]
c0019b83:	52                   	push   edx
c0019b84:	6a 00                	push   0x0
c0019b86:	6a 08                	push   0x8
c0019b88:	53                   	push   ebx
c0019b89:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019b8c:	83 c4 20             	add    esp,0x20
c0019b8f:	85 c0                	test   eax,eax
c0019b91:	0f 85 e2 00 00 00    	jne    c0019c79 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019b97:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019b9c:	0f 85 d7 00 00 00    	jne    c0019c79 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019ba2:	83 ec 0c             	sub    esp,0xc
c0019ba5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ba7:	56                   	push   esi
c0019ba8:	8d 54 24 20          	lea    edx,[esp+0x20]
c0019bac:	52                   	push   edx
c0019bad:	6a 00                	push   0x0
c0019baf:	6a 08                	push   0x8
c0019bb1:	53                   	push   ebx
c0019bb2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019bb5:	83 c4 20             	add    esp,0x20
c0019bb8:	85 c0                	test   eax,eax
c0019bba:	0f 85 b9 00 00 00    	jne    c0019c79 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019bc0:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019bc5:	0f 85 ae 00 00 00    	jne    c0019c79 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019bcb:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0019bcf:	0f 85 53 ff ff ff    	jne    c0019b28 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019bd5:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0019bd9:	0f 85 49 ff ff ff    	jne    c0019b28 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019bdf:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019be7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019bef:	51                   	push   ecx
c0019bf0:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0019bf4:	50                   	push   eax
c0019bf5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019bf9:	50                   	push   eax
c0019bfa:	53                   	push   ebx
c0019bfb:	e8 bc 0a 00 00       	call   c001a6bc <File::stat(unsigned long long*, bool*)>
c0019c00:	83 c4 10             	add    esp,0x10
c0019c03:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0019c08:	75 6f                	jne    c0019c79 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c0a:	31 c9                	xor    ecx,ecx
c0019c0c:	bf 0f 00 00 00       	mov    edi,0xf
c0019c11:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019c15:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019c19:	39 c7                	cmp    edi,eax
c0019c1b:	89 cf                	mov    edi,ecx
c0019c1d:	19 d7                	sbb    edi,edx
c0019c1f:	73 58                	jae    c0019c79 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c21:	83 c0 f0             	add    eax,0xfffffff0
c0019c24:	bf ff 00 00 00       	mov    edi,0xff
c0019c29:	83 d2 ff             	adc    edx,0xffffffff
c0019c2c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019c30:	39 c7                	cmp    edi,eax
c0019c32:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019c36:	19 d1                	sbb    ecx,edx
c0019c38:	72 53                	jb     c0019c8d <KeDereferenceSymlink(char const*, char*)+0x181>
c0019c3a:	40                   	inc    eax
c0019c3b:	52                   	push   edx
c0019c3c:	50                   	push   eax
c0019c3d:	6a 00                	push   0x0
c0019c3f:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0019c43:	e8 a8 68 fe ff       	call   c00004f0 <memset>
c0019c48:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c4a:	89 34 24             	mov    DWORD PTR [esp],esi
c0019c4d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0019c51:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019c55:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019c59:	53                   	push   ebx
c0019c5a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019c5d:	83 c4 20             	add    esp,0x20
c0019c60:	85 c0                	test   eax,eax
c0019c62:	75 15                	jne    c0019c79 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019c68:	89 c7                	mov    edi,eax
c0019c6a:	c1 ff 1f             	sar    edi,0x1f
c0019c6d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0019c71:	75 06                	jne    c0019c79 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c73:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0019c77:	74 19                	je     c0019c92 <KeDereferenceSymlink(char const*, char*)+0x186>
c0019c79:	83 ec 0c             	sub    esp,0xc
c0019c7c:	53                   	push   ebx
c0019c7d:	e8 96 07 00 00       	call   c001a418 <File::close()>
c0019c82:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c84:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c87:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019c8a:	83 c4 10             	add    esp,0x10
c0019c8d:	83 c8 ff             	or     eax,0xffffffff
c0019c90:	eb 19                	jmp    c0019cab <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019c92:	83 ec 0c             	sub    esp,0xc
c0019c95:	53                   	push   ebx
c0019c96:	e8 7d 07 00 00       	call   c001a418 <File::close()>
c0019c9b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c9d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ca0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019ca3:	83 c4 10             	add    esp,0x10
c0019ca6:	b8 01 00 00 00       	mov    eax,0x1
c0019cab:	83 c4 3c             	add    esp,0x3c
c0019cae:	5b                   	pop    ebx
c0019caf:	5e                   	pop    esi
c0019cb0:	5f                   	pop    edi
c0019cb1:	5d                   	pop    ebp
c0019cb2:	c3                   	ret    

c0019cb3 <KeCreateSymlink(char const*, char const*)>:
c0019cb3:	55                   	push   ebp
c0019cb4:	57                   	push   edi
c0019cb5:	56                   	push   esi
c0019cb6:	53                   	push   ebx
c0019cb7:	83 ec 38             	sub    esp,0x38
c0019cba:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0019cbe:	68 14 01 00 00       	push   0x114
c0019cc3:	e8 3e c6 ff ff       	call   c0016306 <malloc>
c0019cc8:	6a 00                	push   0x0
c0019cca:	89 c3                	mov    ebx,eax
c0019ccc:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019cd2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0019cd6:	50                   	push   eax
c0019cd7:	e8 e2 05 00 00       	call   c001a2be <File::File(char const*, Process*, bool)>
c0019cdc:	83 c4 20             	add    esp,0x20
c0019cdf:	b8 01 00 00 00       	mov    eax,0x1
c0019ce4:	85 db                	test   ebx,ebx
c0019ce6:	0f 84 19 01 00 00    	je     c0019e05 <KeCreateSymlink(char const*, char const*)+0x152>
c0019cec:	52                   	push   edx
c0019ced:	52                   	push   edx
c0019cee:	6a 12                	push   0x12
c0019cf0:	53                   	push   ebx
c0019cf1:	e8 c4 06 00 00       	call   c001a3ba <File::open(FileOpenMode)>
c0019cf6:	83 c4 10             	add    esp,0x10
c0019cf9:	85 c0                	test   eax,eax
c0019cfb:	74 0b                	je     c0019d08 <KeCreateSymlink(char const*, char const*)+0x55>
c0019cfd:	83 ec 0c             	sub    esp,0xc
c0019d00:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d02:	53                   	push   ebx
c0019d03:	e9 f2 00 00 00       	jmp    c0019dfa <KeCreateSymlink(char const*, char const*)+0x147>
c0019d08:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0019d0c:	be b1 1b 03 c0       	mov    esi,0xc0031bb1
c0019d11:	b9 09 00 00 00       	mov    ecx,0x9
c0019d16:	fc                   	cld    
c0019d17:	83 ec 0c             	sub    esp,0xc
c0019d1a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019d1c:	8d 74 24 10          	lea    esi,[esp+0x10]
c0019d20:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d22:	56                   	push   esi
c0019d23:	8d 54 24 27          	lea    edx,[esp+0x27]
c0019d27:	52                   	push   edx
c0019d28:	6a 00                	push   0x0
c0019d2a:	6a 08                	push   0x8
c0019d2c:	53                   	push   ebx
c0019d2d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019d30:	83 c4 20             	add    esp,0x20
c0019d33:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019d38:	0f 85 ae 00 00 00    	jne    c0019dec <KeCreateSymlink(char const*, char const*)+0x139>
c0019d3e:	85 c0                	test   eax,eax
c0019d40:	0f 85 a6 00 00 00    	jne    c0019dec <KeCreateSymlink(char const*, char const*)+0x139>
c0019d46:	e8 ca f9 ff ff       	call   c0019715 <KiCreateSymlinkID()>
c0019d4b:	83 ec 0c             	sub    esp,0xc
c0019d4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019d52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0019d56:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d58:	56                   	push   esi
c0019d59:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019d5d:	52                   	push   edx
c0019d5e:	6a 00                	push   0x0
c0019d60:	6a 08                	push   0x8
c0019d62:	53                   	push   ebx
c0019d63:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019d66:	83 c4 20             	add    esp,0x20
c0019d69:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019d6e:	75 7c                	jne    c0019dec <KeCreateSymlink(char const*, char const*)+0x139>
c0019d70:	85 c0                	test   eax,eax
c0019d72:	75 78                	jne    c0019dec <KeCreateSymlink(char const*, char const*)+0x139>
c0019d74:	83 ec 0c             	sub    esp,0xc
c0019d77:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d79:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019d7c:	55                   	push   ebp
c0019d7d:	e8 ee 67 fe ff       	call   c0000570 <strlen>
c0019d82:	89 34 24             	mov    DWORD PTR [esp],esi
c0019d85:	31 d2                	xor    edx,edx
c0019d87:	55                   	push   ebp
c0019d88:	52                   	push   edx
c0019d89:	50                   	push   eax
c0019d8a:	53                   	push   ebx
c0019d8b:	ff d7                	call   edi
c0019d8d:	83 c4 14             	add    esp,0x14
c0019d90:	89 c6                	mov    esi,eax
c0019d92:	55                   	push   ebp
c0019d93:	e8 d8 67 fe ff       	call   c0000570 <strlen>
c0019d98:	83 c4 10             	add    esp,0x10
c0019d9b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019d9f:	75 4b                	jne    c0019dec <KeCreateSymlink(char const*, char const*)+0x139>
c0019da1:	85 f6                	test   esi,esi
c0019da3:	75 47                	jne    c0019dec <KeCreateSymlink(char const*, char const*)+0x139>
c0019da5:	50                   	push   eax
c0019da6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019daa:	55                   	push   ebp
c0019dab:	68 7f 1b 03 c0       	push   0xc0031b7f
c0019db0:	e8 e0 f3 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0019db5:	83 c4 0c             	add    esp,0xc
c0019db8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019dbc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019dc0:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0019dc4:	e8 b9 f9 ff ff       	call   c0019782 <KeRegisterSymlink(char const*, unsigned long long)>
c0019dc9:	c7 04 24 a4 1b 03 c0 	mov    DWORD PTR [esp],0xc0031ba4
c0019dd0:	e8 c0 f3 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0019dd5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019dd8:	e8 3b 06 00 00       	call   c001a418 <File::close()>
c0019ddd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ddf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019de2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019de5:	83 c4 10             	add    esp,0x10
c0019de8:	31 c0                	xor    eax,eax
c0019dea:	eb 19                	jmp    c0019e05 <KeCreateSymlink(char const*, char const*)+0x152>
c0019dec:	83 ec 0c             	sub    esp,0xc
c0019def:	53                   	push   ebx
c0019df0:	e8 23 06 00 00       	call   c001a418 <File::close()>
c0019df5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019df7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019dfa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019dfd:	83 c4 10             	add    esp,0x10
c0019e00:	b8 01 00 00 00       	mov    eax,0x1
c0019e05:	83 c4 2c             	add    esp,0x2c
c0019e08:	5b                   	pop    ebx
c0019e09:	5e                   	pop    esi
c0019e0a:	5f                   	pop    edi
c0019e0b:	5d                   	pop    ebp
c0019e0c:	c3                   	ret    
c0019e0d:	90                   	nop

c0019e0e <File::read(unsigned long long, void*, int*)>:
c0019e0e:	53                   	push   ebx
c0019e0f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019e13:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019e17:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0019e1e:	83 f8 19             	cmp    eax,0x19
c0019e21:	77 35                	ja     c0019e58 <File::read(unsigned long long, void*, int*)+0x4a>
c0019e23:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0019e2a:	85 c0                	test   eax,eax
c0019e2c:	74 2a                	je     c0019e58 <File::read(unsigned long long, void*, int*)+0x4a>
c0019e2e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0019e34:	85 c0                	test   eax,eax
c0019e36:	74 20                	je     c0019e58 <File::read(unsigned long long, void*, int*)+0x4a>
c0019e38:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0019e3c:	74 21                	je     c0019e5f <File::read(unsigned long long, void*, int*)+0x51>
c0019e3e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019e40:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019e44:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0019e4a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019e4e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019e52:	5b                   	pop    ebx
c0019e53:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0019e56:	ff e0                	jmp    eax
c0019e58:	b8 0b 00 00 00       	mov    eax,0xb
c0019e5d:	eb 05                	jmp    c0019e64 <File::read(unsigned long long, void*, int*)+0x56>
c0019e5f:	b8 05 00 00 00       	mov    eax,0x5
c0019e64:	5b                   	pop    ebx
c0019e65:	c3                   	ret    

c0019e66 <File::write(unsigned long long, void*, int*)>:
c0019e66:	53                   	push   ebx
c0019e67:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019e6b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019e6f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0019e76:	83 f8 19             	cmp    eax,0x19
c0019e79:	77 35                	ja     c0019eb0 <File::write(unsigned long long, void*, int*)+0x4a>
c0019e7b:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0019e82:	85 c0                	test   eax,eax
c0019e84:	74 2a                	je     c0019eb0 <File::write(unsigned long long, void*, int*)+0x4a>
c0019e86:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0019e8c:	85 c0                	test   eax,eax
c0019e8e:	74 20                	je     c0019eb0 <File::write(unsigned long long, void*, int*)+0x4a>
c0019e90:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0019e94:	74 21                	je     c0019eb7 <File::write(unsigned long long, void*, int*)+0x51>
c0019e96:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019e98:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019e9c:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0019ea2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019ea6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019eaa:	5b                   	pop    ebx
c0019eab:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0019eae:	ff e0                	jmp    eax
c0019eb0:	b8 0b 00 00 00       	mov    eax,0xb
c0019eb5:	eb 05                	jmp    c0019ebc <File::write(unsigned long long, void*, int*)+0x56>
c0019eb7:	b8 05 00 00 00       	mov    eax,0x5
c0019ebc:	5b                   	pop    ebx
c0019ebd:	c3                   	ret    

c0019ebe <Directory::read(unsigned long long, void*, int*)>:
c0019ebe:	53                   	push   ebx
c0019ebf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ec3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019ec7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0019ece:	83 f8 19             	cmp    eax,0x19
c0019ed1:	77 35                	ja     c0019f08 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0019ed3:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0019eda:	85 c0                	test   eax,eax
c0019edc:	74 2a                	je     c0019f08 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0019ede:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0019ee4:	85 c0                	test   eax,eax
c0019ee6:	74 20                	je     c0019f08 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0019ee8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0019eec:	74 21                	je     c0019f0f <Directory::read(unsigned long long, void*, int*)+0x51>
c0019eee:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019ef0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019ef4:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0019efa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019efe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019f02:	5b                   	pop    ebx
c0019f03:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0019f06:	ff e0                	jmp    eax
c0019f08:	b8 0b 00 00 00       	mov    eax,0xb
c0019f0d:	eb 05                	jmp    c0019f14 <Directory::read(unsigned long long, void*, int*)+0x56>
c0019f0f:	b8 05 00 00 00       	mov    eax,0x5
c0019f14:	5b                   	pop    ebx
c0019f15:	c3                   	ret    

c0019f16 <Directory::write(unsigned long long, void*, int*)>:
c0019f16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f1a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0019f21:	b8 0b 00 00 00       	mov    eax,0xb
c0019f26:	83 fa 19             	cmp    edx,0x19
c0019f29:	77 18                	ja     c0019f43 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0019f2b:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c0019f32:	85 d2                	test   edx,edx
c0019f34:	74 0d                	je     c0019f43 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0019f36:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0019f3d:	19 c0                	sbb    eax,eax
c0019f3f:	83 e0 0a             	and    eax,0xa
c0019f42:	40                   	inc    eax
c0019f43:	c3                   	ret    

c0019f44 <File::isAtty()>:
c0019f44:	31 c0                	xor    eax,eax
c0019f46:	c3                   	ret    
c0019f47:	90                   	nop

c0019f48 <Directory::isAtty()>:
c0019f48:	31 c0                	xor    eax,eax
c0019f4a:	c3                   	ret    
c0019f4b:	90                   	nop

c0019f4c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019f4c:	b8 0a 00 00 00       	mov    eax,0xa
c0019f51:	c3                   	ret    

c0019f52 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0019f52:	b8 0a 00 00 00       	mov    eax,0xa
c0019f57:	c3                   	ret    

c0019f58 <Filesystem::allocateSwapfile(char const*, int)>:
c0019f58:	31 c0                	xor    eax,eax
c0019f5a:	31 d2                	xor    edx,edx
c0019f5c:	c3                   	ret    
c0019f5d:	90                   	nop

c0019f5e <File::~File()>:
c0019f5e:	83 ec 0c             	sub    esp,0xc
c0019f61:	ba 70 1c 03 c0       	mov    edx,0xc0031c70
c0019f66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f6a:	89 10                	mov    DWORD PTR [eax],edx
c0019f6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f70:	83 ec 0c             	sub    esp,0xc
c0019f73:	50                   	push   eax
c0019f74:	e8 7b dc ff ff       	call   c0017bf4 <UnixFile::~UnixFile()>
c0019f79:	83 c4 10             	add    esp,0x10
c0019f7c:	90                   	nop
c0019f7d:	83 c4 0c             	add    esp,0xc
c0019f80:	c3                   	ret    
c0019f81:	90                   	nop

c0019f82 <File::~File()>:
c0019f82:	83 ec 0c             	sub    esp,0xc
c0019f85:	83 ec 0c             	sub    esp,0xc
c0019f88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f8c:	e8 cd ff ff ff       	call   c0019f5e <File::~File()>
c0019f91:	83 c4 10             	add    esp,0x10
c0019f94:	83 ec 08             	sub    esp,0x8
c0019f97:	68 14 01 00 00       	push   0x114
c0019f9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fa0:	e8 c3 f0 ff ff       	call   c0019068 <operator delete(void*, unsigned long)>
c0019fa5:	83 c4 10             	add    esp,0x10
c0019fa8:	83 c4 0c             	add    esp,0xc
c0019fab:	c3                   	ret    

c0019fac <Directory::~Directory()>:
c0019fac:	83 ec 0c             	sub    esp,0xc
c0019faf:	ba 8c 1c 03 c0       	mov    edx,0xc0031c8c
c0019fb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fb8:	89 10                	mov    DWORD PTR [eax],edx
c0019fba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fbe:	83 ec 0c             	sub    esp,0xc
c0019fc1:	50                   	push   eax
c0019fc2:	e8 2d dc ff ff       	call   c0017bf4 <UnixFile::~UnixFile()>
c0019fc7:	83 c4 10             	add    esp,0x10
c0019fca:	90                   	nop
c0019fcb:	83 c4 0c             	add    esp,0xc
c0019fce:	c3                   	ret    
c0019fcf:	90                   	nop

c0019fd0 <Directory::~Directory()>:
c0019fd0:	83 ec 0c             	sub    esp,0xc
c0019fd3:	83 ec 0c             	sub    esp,0xc
c0019fd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fda:	e8 cd ff ff ff       	call   c0019fac <Directory::~Directory()>
c0019fdf:	83 c4 10             	add    esp,0x10
c0019fe2:	83 ec 08             	sub    esp,0x8
c0019fe5:	68 14 01 00 00       	push   0x114
c0019fea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fee:	e8 75 f0 ff ff       	call   c0019068 <operator delete(void*, unsigned long)>
c0019ff3:	83 c4 10             	add    esp,0x10
c0019ff6:	83 c4 0c             	add    esp,0xc
c0019ff9:	c3                   	ret    

c0019ffa <Filesystem::Filesystem()>:
c0019ffa:	ba 04 1c 03 c0       	mov    edx,0xc0031c04
c0019fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a003:	89 10                	mov    DWORD PTR [eax],edx
c001a005:	8b 15 04 cf 03 c0    	mov    edx,DWORD PTR ds:0xc003cf04
c001a00b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a00f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a012:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a016:	a3 04 cf 03 c0       	mov    ds:0xc003cf04,eax
c001a01b:	90                   	nop
c001a01c:	c3                   	ret    
c001a01d:	90                   	nop

c001a01e <Filesystem::~Filesystem()>:
c001a01e:	ba 04 1c 03 c0       	mov    edx,0xc0031c04
c001a023:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a027:	89 10                	mov    DWORD PTR [eax],edx
c001a029:	90                   	nop
c001a02a:	c3                   	ret    
c001a02b:	90                   	nop

c001a02c <Filesystem::~Filesystem()>:
c001a02c:	83 ec 0c             	sub    esp,0xc
c001a02f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a033:	e8 e6 ff ff ff       	call   c001a01e <Filesystem::~Filesystem()>
c001a038:	83 c4 04             	add    esp,0x4
c001a03b:	83 ec 08             	sub    esp,0x8
c001a03e:	6a 08                	push   0x8
c001a040:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a044:	e8 1f f0 ff ff       	call   c0019068 <operator delete(void*, unsigned long)>
c001a049:	83 c4 10             	add    esp,0x10
c001a04c:	83 c4 0c             	add    esp,0xc
c001a04f:	c3                   	ret    

c001a050 <Fs::getcwd(Process*, char*, int)>:
c001a050:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a054:	31 c0                	xor    eax,eax
c001a056:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001a059:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001a05d:	7d 15                	jge    c001a074 <Fs::getcwd(Process*, char*, int)+0x24>
c001a05f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001a063:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001a06a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001a06d:	84 c9                	test   cl,cl
c001a06f:	74 06                	je     c001a077 <Fs::getcwd(Process*, char*, int)+0x27>
c001a071:	40                   	inc    eax
c001a072:	eb e2                	jmp    c001a056 <Fs::getcwd(Process*, char*, int)+0x6>
c001a074:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001a077:	31 c0                	xor    eax,eax
c001a079:	c3                   	ret    

c001a07a <Fs::initVFS()>:
c001a07a:	83 ec 18             	sub    esp,0x18
c001a07d:	6a 08                	push   0x8
c001a07f:	e8 82 c2 ff ff       	call   c0016306 <malloc>
c001a084:	89 04 24             	mov    DWORD PTR [esp],eax
c001a087:	e8 90 e9 00 00       	call   c0028a1c <FAT::FAT()>
c001a08c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001a093:	e8 6e c2 ff ff       	call   c0016306 <malloc>
c001a098:	89 04 24             	mov    DWORD PTR [esp],eax
c001a09b:	e8 a8 f8 00 00       	call   c0029948 <ISO9660::ISO9660()>
c001a0a0:	83 c4 1c             	add    esp,0x1c
c001a0a3:	c3                   	ret    

c001a0a4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c001a0a4:	55                   	push   ebp
c001a0a5:	57                   	push   edi
c001a0a6:	56                   	push   esi
c001a0a7:	53                   	push   ebx
c001a0a8:	81 ec 10 04 00 00    	sub    esp,0x410
c001a0ae:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c001a0b5:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c001a0bc:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c001a0c4:	68 00 04 00 00       	push   0x400
c001a0c9:	6a 00                	push   0x0
c001a0cb:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a0cf:	57                   	push   edi
c001a0d0:	e8 1b 64 fe ff       	call   c00004f0 <memset>
c001a0d5:	83 c4 10             	add    esp,0x10
c001a0d8:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c001a0dc:	75 0b                	jne    c001a0e9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c001a0de:	50                   	push   eax
c001a0df:	50                   	push   eax
c001a0e0:	55                   	push   ebp
c001a0e1:	57                   	push   edi
c001a0e2:	e8 59 65 fe ff       	call   c0000640 <strcpy>
c001a0e7:	eb 51                	jmp    c001a13a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c001a0e9:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001a0ed:	83 f8 5c             	cmp    eax,0x5c
c001a0f0:	74 05                	je     c001a0f7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c001a0f2:	83 f8 2f             	cmp    eax,0x2f
c001a0f5:	75 1e                	jne    c001a115 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c001a0f7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001a0fe:	8a 00                	mov    al,BYTE PTR [eax]
c001a100:	3c 60                	cmp    al,0x60
c001a102:	7e 03                	jle    c001a107 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c001a104:	83 e8 20             	sub    eax,0x20
c001a107:	88 04 24             	mov    BYTE PTR [esp],al
c001a10a:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001a111:	50                   	push   eax
c001a112:	50                   	push   eax
c001a113:	eb 1e                	jmp    c001a133 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c001a115:	50                   	push   eax
c001a116:	50                   	push   eax
c001a117:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c001a11e:	57                   	push   edi
c001a11f:	e8 1c 65 fe ff       	call   c0000640 <strcpy>
c001a124:	58                   	pop    eax
c001a125:	5a                   	pop    edx
c001a126:	68 ff 2c 03 c0       	push   0xc0032cff
c001a12b:	57                   	push   edi
c001a12c:	e8 0f 67 fe ff       	call   c0000840 <strcat>
c001a131:	59                   	pop    ecx
c001a132:	58                   	pop    eax
c001a133:	55                   	push   ebp
c001a134:	57                   	push   edi
c001a135:	e8 06 67 fe ff       	call   c0000840 <strcat>
c001a13a:	83 c4 10             	add    esp,0x10
c001a13d:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a140:	3c 60                	cmp    al,0x60
c001a142:	7e 03                	jle    c001a147 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c001a144:	83 e8 20             	sub    eax,0x20
c001a147:	88 04 24             	mov    BYTE PTR [esp],al
c001a14a:	88 06                	mov    BYTE PTR [esi],al
c001a14c:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001a153:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c001a159:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c001a15d:	bf 03 00 00 00       	mov    edi,0x3
c001a162:	b8 03 00 00 00       	mov    eax,0x3
c001a167:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c001a16b:	89 e9                	mov    ecx,ebp
c001a16d:	85 ed                	test   ebp,ebp
c001a16f:	0f 84 97 00 00 00    	je     c001a20c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c001a175:	8d 57 01             	lea    edx,[edi+0x1]
c001a178:	83 fd 5c             	cmp    ebp,0x5c
c001a17b:	74 05                	je     c001a182 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c001a17d:	83 fd 2f             	cmp    ebp,0x2f
c001a180:	75 12                	jne    c001a194 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a182:	89 c5                	mov    ebp,eax
c001a184:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c001a189:	74 09                	je     c001a194 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a18b:	40                   	inc    eax
c001a18c:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c001a190:	89 d7                	mov    edi,edx
c001a192:	eb d3                	jmp    c001a167 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c001a194:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c001a199:	0f be e9             	movsx  ebp,cl
c001a19c:	75 5e                	jne    c001a1fc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c001a19e:	83 fd 2e             	cmp    ebp,0x2e
c001a1a1:	75 59                	jne    c001a1fc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c001a1a3:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c001a1a7:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c001a1ac:	74 18                	je     c001a1c6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c001a1ae:	83 fd 2e             	cmp    ebp,0x2e
c001a1b1:	74 53                	je     c001a206 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c001a1b3:	89 fa                	mov    edx,edi
c001a1b5:	42                   	inc    edx
c001a1b6:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c001a1ba:	83 f9 2f             	cmp    ecx,0x2f
c001a1bd:	74 f6                	je     c001a1b5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c001a1bf:	83 f9 5c             	cmp    ecx,0x5c
c001a1c2:	74 f1                	je     c001a1b5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c001a1c4:	eb ca                	jmp    c001a190 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a1c6:	83 fd 2e             	cmp    ebp,0x2e
c001a1c9:	74 3b                	je     c001a206 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c001a1cb:	83 f8 03             	cmp    eax,0x3
c001a1ce:	74 c0                	je     c001a190 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a1d0:	42                   	inc    edx
c001a1d1:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c001a1d5:	83 f9 5c             	cmp    ecx,0x5c
c001a1d8:	74 f6                	je     c001a1d0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c001a1da:	83 f9 2f             	cmp    ecx,0x2f
c001a1dd:	74 f1                	je     c001a1d0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c001a1df:	48                   	dec    eax
c001a1e0:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c001a1e4:	75 06                	jne    c001a1ec <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c001a1e6:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a1ea:	eb f3                	jmp    c001a1df <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c001a1ec:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c001a1f0:	74 07                	je     c001a1f9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c001a1f2:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a1f6:	48                   	dec    eax
c001a1f7:	eb f3                	jmp    c001a1ec <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c001a1f9:	40                   	inc    eax
c001a1fa:	eb 94                	jmp    c001a190 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a1fc:	83 fd 5c             	cmp    ebp,0x5c
c001a1ff:	74 8f                	je     c001a190 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a201:	83 fd 2f             	cmp    ebp,0x2f
c001a204:	74 8a                	je     c001a190 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a206:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c001a209:	40                   	inc    eax
c001a20a:	eb 84                	jmp    c001a190 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a20c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a210:	83 ec 0c             	sub    esp,0xc
c001a213:	56                   	push   esi
c001a214:	e8 57 63 fe ff       	call   c0000570 <strlen>
c001a219:	83 c4 10             	add    esp,0x10
c001a21c:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c001a221:	74 17                	je     c001a23a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c001a223:	83 ec 0c             	sub    esp,0xc
c001a226:	56                   	push   esi
c001a227:	e8 44 63 fe ff       	call   c0000570 <strlen>
c001a22c:	83 c4 10             	add    esp,0x10
c001a22f:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c001a234:	74 04                	je     c001a23a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c001a236:	31 ff                	xor    edi,edi
c001a238:	eb 5c                	jmp    c001a296 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c001a23a:	83 ec 0c             	sub    esp,0xc
c001a23d:	56                   	push   esi
c001a23e:	e8 2d 63 fe ff       	call   c0000570 <strlen>
c001a243:	83 c4 10             	add    esp,0x10
c001a246:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c001a24b:	74 e9                	je     c001a236 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c001a24d:	83 ec 0c             	sub    esp,0xc
c001a250:	56                   	push   esi
c001a251:	e8 1a 63 fe ff       	call   c0000570 <strlen>
c001a256:	83 c4 10             	add    esp,0x10
c001a259:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c001a25e:	eb b0                	jmp    c001a210 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c001a260:	52                   	push   edx
c001a261:	52                   	push   edx
c001a262:	56                   	push   esi
c001a263:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c001a267:	55                   	push   ebp
c001a268:	e8 d3 63 fe ff       	call   c0000640 <strcpy>
c001a26d:	59                   	pop    ecx
c001a26e:	58                   	pop    eax
c001a26f:	56                   	push   esi
c001a270:	55                   	push   ebp
c001a271:	e8 96 f8 ff ff       	call   c0019b0c <KeDereferenceSymlink(char const*, char*)>
c001a276:	83 c4 10             	add    esp,0x10
c001a279:	48                   	dec    eax
c001a27a:	75 37                	jne    c001a2b3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c001a27c:	50                   	push   eax
c001a27d:	56                   	push   esi
c001a27e:	55                   	push   ebp
c001a27f:	68 ba 1b 03 c0       	push   0xc0031bba
c001a284:	e8 0c ef ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c001a289:	83 c4 10             	add    esp,0x10
c001a28c:	8d 47 01             	lea    eax,[edi+0x1]
c001a28f:	83 ff 14             	cmp    edi,0x14
c001a292:	74 08                	je     c001a29c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c001a294:	89 c7                	mov    edi,eax
c001a296:	85 db                	test   ebx,ebx
c001a298:	75 c6                	jne    c001a260 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c001a29a:	eb 17                	jmp    c001a2b3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c001a29c:	83 ec 0c             	sub    esp,0xc
c001a29f:	bf 15 00 00 00       	mov    edi,0x15
c001a2a4:	68 d5 1b 03 c0       	push   0xc0031bd5
c001a2a9:	e8 00 5f 00 00       	call   c00201ae <KePanic(char const*)>
c001a2ae:	83 c4 10             	add    esp,0x10
c001a2b1:	eb e3                	jmp    c001a296 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c001a2b3:	81 c4 0c 04 00 00    	add    esp,0x40c
c001a2b9:	5b                   	pop    ebx
c001a2ba:	5e                   	pop    esi
c001a2bb:	5f                   	pop    edi
c001a2bc:	5d                   	pop    ebp
c001a2bd:	c3                   	ret    

c001a2be <File::File(char const*, Process*, bool)>:
c001a2be:	83 ec 1c             	sub    esp,0x1c
c001a2c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a2c5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a2c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a2cd:	83 ec 08             	sub    esp,0x8
c001a2d0:	6a 00                	push   0x0
c001a2d2:	50                   	push   eax
c001a2d3:	e8 36 d7 ff ff       	call   c0017a0e <UnixFile::UnixFile(int)>
c001a2d8:	83 c4 10             	add    esp,0x10
c001a2db:	ba 70 1c 03 c0       	mov    edx,0xc0031c70
c001a2e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a2e4:	89 10                	mov    DWORD PTR [eax],edx
c001a2e6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a2eb:	85 c0                	test   eax,eax
c001a2ed:	74 0f                	je     c001a2fe <File::File(char const*, Process*, bool)+0x40>
c001a2ef:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001a2f4:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a2f8:	74 04                	je     c001a2fe <File::File(char const*, Process*, bool)+0x40>
c001a2fa:	b0 01                	mov    al,0x1
c001a2fc:	eb 02                	jmp    c001a300 <File::File(char const*, Process*, bool)+0x42>
c001a2fe:	b0 00                	mov    al,0x0
c001a300:	0f b6 c0             	movzx  eax,al
c001a303:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a307:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001a30d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a311:	83 c2 0d             	add    edx,0xd
c001a314:	50                   	push   eax
c001a315:	51                   	push   ecx
c001a316:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a31a:	52                   	push   edx
c001a31b:	e8 84 fd ff ff       	call   c001a0a4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a320:	83 c4 10             	add    esp,0x10
c001a323:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a327:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001a32a:	83 e8 41             	sub    eax,0x41
c001a32d:	88 c2                	mov    dl,al
c001a32f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a333:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001a339:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a33d:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001a341:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a345:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a34b:	0f b6 c0             	movzx  eax,al
c001a34e:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a355:	85 c0                	test   eax,eax
c001a357:	74 3e                	je     c001a397 <File::File(char const*, Process*, bool)+0xd9>
c001a359:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a35d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a363:	0f b6 c0             	movzx  eax,al
c001a366:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a36d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a373:	85 c0                	test   eax,eax
c001a375:	75 20                	jne    c001a397 <File::File(char const*, Process*, bool)+0xd9>
c001a377:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a37b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a381:	0f b6 c0             	movzx  eax,al
c001a384:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a38b:	83 ec 0c             	sub    esp,0xc
c001a38e:	50                   	push   eax
c001a38f:	e8 b2 21 00 00       	call   c001c546 <LogicalDisk::mount()>
c001a394:	83 c4 10             	add    esp,0x10
c001a397:	90                   	nop
c001a398:	83 c4 1c             	add    esp,0x1c
c001a39b:	c3                   	ret    

c001a39c <File::File(char const*, Process*)>:
c001a39c:	83 ec 0c             	sub    esp,0xc
c001a39f:	6a 01                	push   0x1
c001a3a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3ad:	e8 0c ff ff ff       	call   c001a2be <File::File(char const*, Process*, bool)>
c001a3b2:	83 c4 10             	add    esp,0x10
c001a3b5:	90                   	nop
c001a3b6:	83 c4 0c             	add    esp,0xc
c001a3b9:	c3                   	ret    

c001a3ba <File::open(FileOpenMode)>:
c001a3ba:	53                   	push   ebx
c001a3bb:	b8 0b 00 00 00       	mov    eax,0xb
c001a3c0:	83 ec 08             	sub    esp,0x8
c001a3c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a3c7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001a3ce:	83 fa 19             	cmp    edx,0x19
c001a3d1:	77 40                	ja     c001a413 <File::open(FileOpenMode)+0x59>
c001a3d3:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a3da:	85 d2                	test   edx,edx
c001a3dc:	74 35                	je     c001a413 <File::open(FileOpenMode)+0x59>
c001a3de:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a3e4:	85 d2                	test   edx,edx
c001a3e6:	74 2b                	je     c001a413 <File::open(FileOpenMode)+0x59>
c001a3e8:	b8 06 00 00 00       	mov    eax,0x6
c001a3ed:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001a3f1:	75 20                	jne    c001a413 <File::open(FileOpenMode)+0x59>
c001a3f3:	8b 02                	mov    eax,DWORD PTR [edx]
c001a3f5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001a3fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a3ff:	51                   	push   ecx
c001a400:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001a403:	51                   	push   ecx
c001a404:	52                   	push   edx
c001a405:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a408:	83 c4 10             	add    esp,0x10
c001a40b:	85 c0                	test   eax,eax
c001a40d:	75 04                	jne    c001a413 <File::open(FileOpenMode)+0x59>
c001a40f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001a413:	83 c4 08             	add    esp,0x8
c001a416:	5b                   	pop    ebx
c001a417:	c3                   	ret    

c001a418 <File::close()>:
c001a418:	53                   	push   ebx
c001a419:	b8 0b 00 00 00       	mov    eax,0xb
c001a41e:	83 ec 08             	sub    esp,0x8
c001a421:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a425:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a42c:	83 f9 19             	cmp    ecx,0x19
c001a42f:	77 41                	ja     c001a472 <File::close()+0x5a>
c001a431:	8b 1c 8d 80 f3 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a438:	85 db                	test   ebx,ebx
c001a43a:	74 36                	je     c001a472 <File::close()+0x5a>
c001a43c:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001a443:	74 2d                	je     c001a472 <File::close()+0x5a>
c001a445:	b8 05 00 00 00       	mov    eax,0x5
c001a44a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a44e:	74 22                	je     c001a472 <File::close()+0x5a>
c001a450:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001a454:	8b 04 8d 80 f3 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc0c80]
c001a45b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a461:	53                   	push   ebx
c001a462:	53                   	push   ebx
c001a463:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a465:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a46b:	50                   	push   eax
c001a46c:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c001a46f:	83 c4 10             	add    esp,0x10
c001a472:	83 c4 08             	add    esp,0x8
c001a475:	5b                   	pop    ebx
c001a476:	c3                   	ret    
c001a477:	90                   	nop

c001a478 <File::seek(unsigned long long)>:
c001a478:	56                   	push   esi
c001a479:	53                   	push   ebx
c001a47a:	b8 0b 00 00 00       	mov    eax,0xb
c001a47f:	51                   	push   ecx
c001a480:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a484:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a488:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a48f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a493:	83 fa 19             	cmp    edx,0x19
c001a496:	77 31                	ja     c001a4c9 <File::seek(unsigned long long)+0x51>
c001a498:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a49f:	85 d2                	test   edx,edx
c001a4a1:	74 26                	je     c001a4c9 <File::seek(unsigned long long)+0x51>
c001a4a3:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a4a9:	85 d2                	test   edx,edx
c001a4ab:	74 1c                	je     c001a4c9 <File::seek(unsigned long long)+0x51>
c001a4ad:	b8 05 00 00 00       	mov    eax,0x5
c001a4b2:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a4b6:	74 11                	je     c001a4c9 <File::seek(unsigned long long)+0x51>
c001a4b8:	8b 02                	mov    eax,DWORD PTR [edx]
c001a4ba:	53                   	push   ebx
c001a4bb:	51                   	push   ecx
c001a4bc:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a4c2:	52                   	push   edx
c001a4c3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a4c6:	83 c4 10             	add    esp,0x10
c001a4c9:	5a                   	pop    edx
c001a4ca:	5b                   	pop    ebx
c001a4cb:	5e                   	pop    esi
c001a4cc:	c3                   	ret    
c001a4cd:	90                   	nop

c001a4ce <File::truncate(unsigned long long)>:
c001a4ce:	56                   	push   esi
c001a4cf:	53                   	push   ebx
c001a4d0:	b8 0b 00 00 00       	mov    eax,0xb
c001a4d5:	51                   	push   ecx
c001a4d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a4da:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a4de:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a4e5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a4e9:	83 fa 19             	cmp    edx,0x19
c001a4ec:	77 31                	ja     c001a51f <File::truncate(unsigned long long)+0x51>
c001a4ee:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a4f5:	85 d2                	test   edx,edx
c001a4f7:	74 26                	je     c001a51f <File::truncate(unsigned long long)+0x51>
c001a4f9:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a4ff:	85 d2                	test   edx,edx
c001a501:	74 1c                	je     c001a51f <File::truncate(unsigned long long)+0x51>
c001a503:	b8 05 00 00 00       	mov    eax,0x5
c001a508:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a50c:	74 11                	je     c001a51f <File::truncate(unsigned long long)+0x51>
c001a50e:	8b 02                	mov    eax,DWORD PTR [edx]
c001a510:	53                   	push   ebx
c001a511:	51                   	push   ecx
c001a512:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a518:	52                   	push   edx
c001a519:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001a51c:	83 c4 10             	add    esp,0x10
c001a51f:	5a                   	pop    edx
c001a520:	5b                   	pop    ebx
c001a521:	5e                   	pop    esi
c001a522:	c3                   	ret    
c001a523:	90                   	nop

c001a524 <File::tell(unsigned long long*)>:
c001a524:	83 ec 0c             	sub    esp,0xc
c001a527:	b8 0b 00 00 00       	mov    eax,0xb
c001a52c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a530:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001a537:	83 fa 19             	cmp    edx,0x19
c001a53a:	77 34                	ja     c001a570 <File::tell(unsigned long long*)+0x4c>
c001a53c:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a543:	85 d2                	test   edx,edx
c001a545:	74 29                	je     c001a570 <File::tell(unsigned long long*)+0x4c>
c001a547:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a54d:	85 d2                	test   edx,edx
c001a54f:	74 1f                	je     c001a570 <File::tell(unsigned long long*)+0x4c>
c001a551:	b8 05 00 00 00       	mov    eax,0x5
c001a556:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001a55a:	74 14                	je     c001a570 <File::tell(unsigned long long*)+0x4c>
c001a55c:	50                   	push   eax
c001a55d:	8b 02                	mov    eax,DWORD PTR [edx]
c001a55f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a563:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001a569:	52                   	push   edx
c001a56a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a56d:	83 c4 10             	add    esp,0x10
c001a570:	83 c4 0c             	add    esp,0xc
c001a573:	c3                   	ret    

c001a574 <File::rewind()>:
c001a574:	83 ec 10             	sub    esp,0x10
c001a577:	6a 00                	push   0x0
c001a579:	6a 00                	push   0x0
c001a57b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a57f:	e8 f4 fe ff ff       	call   c001a478 <File::seek(unsigned long long)>
c001a584:	83 c4 1c             	add    esp,0x1c
c001a587:	c3                   	ret    

c001a588 <File::unlink()>:
c001a588:	83 ec 0c             	sub    esp,0xc
c001a58b:	b8 0b 00 00 00       	mov    eax,0xb
c001a590:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a594:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a59b:	83 f9 19             	cmp    ecx,0x19
c001a59e:	77 2f                	ja     c001a5cf <File::unlink()+0x47>
c001a5a0:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a5a7:	85 c9                	test   ecx,ecx
c001a5a9:	74 24                	je     c001a5cf <File::unlink()+0x47>
c001a5ab:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a5b1:	85 c9                	test   ecx,ecx
c001a5b3:	74 1a                	je     c001a5cf <File::unlink()+0x47>
c001a5b5:	b8 06 00 00 00       	mov    eax,0x6
c001a5ba:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a5be:	75 0f                	jne    c001a5cf <File::unlink()+0x47>
c001a5c0:	83 c2 0d             	add    edx,0xd
c001a5c3:	50                   	push   eax
c001a5c4:	50                   	push   eax
c001a5c5:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a5c7:	52                   	push   edx
c001a5c8:	51                   	push   ecx
c001a5c9:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001a5cc:	83 c4 10             	add    esp,0x10
c001a5cf:	83 c4 0c             	add    esp,0xc
c001a5d2:	c3                   	ret    
c001a5d3:	90                   	nop

c001a5d4 <File::rename(char const*)>:
c001a5d4:	83 ec 0c             	sub    esp,0xc
c001a5d7:	b8 0b 00 00 00       	mov    eax,0xb
c001a5dc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a5e0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a5e7:	83 f9 19             	cmp    ecx,0x19
c001a5ea:	77 32                	ja     c001a61e <File::rename(char const*)+0x4a>
c001a5ec:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a5f3:	85 c9                	test   ecx,ecx
c001a5f5:	74 27                	je     c001a61e <File::rename(char const*)+0x4a>
c001a5f7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a5fd:	85 c9                	test   ecx,ecx
c001a5ff:	74 1d                	je     c001a61e <File::rename(char const*)+0x4a>
c001a601:	b8 06 00 00 00       	mov    eax,0x6
c001a606:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a60a:	75 12                	jne    c001a61e <File::rename(char const*)+0x4a>
c001a60c:	83 c2 0d             	add    edx,0xd
c001a60f:	50                   	push   eax
c001a610:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a612:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a616:	52                   	push   edx
c001a617:	51                   	push   ecx
c001a618:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001a61b:	83 c4 10             	add    esp,0x10
c001a61e:	83 c4 0c             	add    esp,0xc
c001a621:	c3                   	ret    

c001a622 <File::chfatattr(unsigned char, unsigned char)>:
c001a622:	57                   	push   edi
c001a623:	b8 0b 00 00 00       	mov    eax,0xb
c001a628:	56                   	push   esi
c001a629:	53                   	push   ebx
c001a62a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a62e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a632:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a639:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a63d:	83 f9 19             	cmp    ecx,0x19
c001a640:	77 37                	ja     c001a679 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a642:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a649:	85 c9                	test   ecx,ecx
c001a64b:	74 2c                	je     c001a679 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a64d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a653:	85 c9                	test   ecx,ecx
c001a655:	74 22                	je     c001a679 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a657:	b8 06 00 00 00       	mov    eax,0x6
c001a65c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a660:	75 17                	jne    c001a679 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a662:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a664:	89 f0                	mov    eax,esi
c001a666:	83 c2 0d             	add    edx,0xd
c001a669:	0f b6 f0             	movzx  esi,al
c001a66c:	0f b6 db             	movzx  ebx,bl
c001a66f:	56                   	push   esi
c001a670:	53                   	push   ebx
c001a671:	52                   	push   edx
c001a672:	51                   	push   ecx
c001a673:	ff 57 38             	call   DWORD PTR [edi+0x38]
c001a676:	83 c4 10             	add    esp,0x10
c001a679:	5b                   	pop    ebx
c001a67a:	5e                   	pop    esi
c001a67b:	5f                   	pop    edi
c001a67c:	c3                   	ret    
c001a67d:	90                   	nop

c001a67e <File::exists()>:
c001a67e:	83 ec 0c             	sub    esp,0xc
c001a681:	31 c0                	xor    eax,eax
c001a683:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a687:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a68e:	83 f9 19             	cmp    ecx,0x19
c001a691:	77 24                	ja     c001a6b7 <File::exists()+0x39>
c001a693:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a69a:	85 c9                	test   ecx,ecx
c001a69c:	74 19                	je     c001a6b7 <File::exists()+0x39>
c001a69e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a6a4:	85 c9                	test   ecx,ecx
c001a6a6:	74 0f                	je     c001a6b7 <File::exists()+0x39>
c001a6a8:	83 c2 0d             	add    edx,0xd
c001a6ab:	50                   	push   eax
c001a6ac:	50                   	push   eax
c001a6ad:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a6af:	52                   	push   edx
c001a6b0:	51                   	push   ecx
c001a6b1:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001a6b4:	83 c4 10             	add    esp,0x10
c001a6b7:	83 c4 0c             	add    esp,0xc
c001a6ba:	c3                   	ret    
c001a6bb:	90                   	nop

c001a6bc <File::stat(unsigned long long*, bool*)>:
c001a6bc:	56                   	push   esi
c001a6bd:	53                   	push   ebx
c001a6be:	50                   	push   eax
c001a6bf:	b8 0b 00 00 00       	mov    eax,0xb
c001a6c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a6c8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a6cc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a6d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a6d7:	83 f9 19             	cmp    ecx,0x19
c001a6da:	77 3d                	ja     c001a719 <File::stat(unsigned long long*, bool*)+0x5d>
c001a6dc:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a6e3:	85 c9                	test   ecx,ecx
c001a6e5:	74 32                	je     c001a719 <File::stat(unsigned long long*, bool*)+0x5d>
c001a6e7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a6ed:	85 c9                	test   ecx,ecx
c001a6ef:	74 28                	je     c001a719 <File::stat(unsigned long long*, bool*)+0x5d>
c001a6f1:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a6f3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a6f7:	74 13                	je     c001a70c <File::stat(unsigned long long*, bool*)+0x50>
c001a6f9:	83 ec 04             	sub    esp,0x4
c001a6fc:	56                   	push   esi
c001a6fd:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a703:	51                   	push   ecx
c001a704:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001a707:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001a70a:	eb 0a                	jmp    c001a716 <File::stat(unsigned long long*, bool*)+0x5a>
c001a70c:	53                   	push   ebx
c001a70d:	83 c2 0d             	add    edx,0xd
c001a710:	56                   	push   esi
c001a711:	52                   	push   edx
c001a712:	51                   	push   ecx
c001a713:	ff 50 34             	call   DWORD PTR [eax+0x34]
c001a716:	83 c4 10             	add    esp,0x10
c001a719:	5a                   	pop    edx
c001a71a:	5b                   	pop    ebx
c001a71b:	5e                   	pop    esi
c001a71c:	c3                   	ret    

c001a71d <Fs::setcwd(Process*, char*)>:
c001a71d:	55                   	push   ebp
c001a71e:	57                   	push   edi
c001a71f:	56                   	push   esi
c001a720:	53                   	push   ebx
c001a721:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a727:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c001a72e:	6a 00                	push   0x0
c001a730:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001a736:	57                   	push   edi
c001a737:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a73e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001a742:	56                   	push   esi
c001a743:	e8 5c f9 ff ff       	call   c001a0a4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a748:	89 34 24             	mov    DWORD PTR [esp],esi
c001a74b:	e8 20 5e fe ff       	call   c0000570 <strlen>
c001a750:	83 c4 10             	add    esp,0x10
c001a753:	83 f8 02             	cmp    eax,0x2
c001a756:	77 15                	ja     c001a76d <Fs::setcwd(Process*, char*)+0x50>
c001a758:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c001a75d:	83 eb 41             	sub    ebx,0x41
c001a760:	8b 04 9d 80 f3 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc0c80]
c001a767:	85 c0                	test   eax,eax
c001a769:	75 1c                	jne    c001a787 <Fs::setcwd(Process*, char*)+0x6a>
c001a76b:	eb 2f                	jmp    c001a79c <Fs::setcwd(Process*, char*)+0x7f>
c001a76d:	83 ec 0c             	sub    esp,0xc
c001a770:	56                   	push   esi
c001a771:	e8 fa 5d fe ff       	call   c0000570 <strlen>
c001a776:	83 c4 10             	add    esp,0x10
c001a779:	83 f8 03             	cmp    eax,0x3
c001a77c:	75 57                	jne    c001a7d5 <Fs::setcwd(Process*, char*)+0xb8>
c001a77e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001a783:	75 50                	jne    c001a7d5 <Fs::setcwd(Process*, char*)+0xb8>
c001a785:	eb d1                	jmp    c001a758 <Fs::setcwd(Process*, char*)+0x3b>
c001a787:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c001a78e:	75 0c                	jne    c001a79c <Fs::setcwd(Process*, char*)+0x7f>
c001a790:	83 ec 0c             	sub    esp,0xc
c001a793:	50                   	push   eax
c001a794:	e8 ad 1d 00 00       	call   c001c546 <LogicalDisk::mount()>
c001a799:	83 c4 10             	add    esp,0x10
c001a79c:	b8 03 00 00 00       	mov    eax,0x3
c001a7a1:	83 fb 19             	cmp    ebx,0x19
c001a7a4:	0f 87 c6 00 00 00    	ja     c001a870 <Fs::setcwd(Process*, char*)+0x153>
c001a7aa:	8b 14 9d 80 f3 03 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffc0c80]
c001a7b1:	b8 05 00 00 00       	mov    eax,0x5
c001a7b6:	85 d2                	test   edx,edx
c001a7b8:	0f 84 b2 00 00 00    	je     c001a870 <Fs::setcwd(Process*, char*)+0x153>
c001a7be:	b8 06 00 00 00       	mov    eax,0x6
c001a7c3:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c001a7ca:	0f 85 92 00 00 00    	jne    c001a862 <Fs::setcwd(Process*, char*)+0x145>
c001a7d0:	e9 9b 00 00 00       	jmp    c001a870 <Fs::setcwd(Process*, char*)+0x153>
c001a7d5:	83 ec 0c             	sub    esp,0xc
c001a7d8:	68 14 01 00 00       	push   0x114
c001a7dd:	e8 24 bb ff ff       	call   c0016306 <malloc>
c001a7e2:	83 c4 0c             	add    esp,0xc
c001a7e5:	89 c3                	mov    ebx,eax
c001a7e7:	55                   	push   ebp
c001a7e8:	56                   	push   esi
c001a7e9:	50                   	push   eax
c001a7ea:	e8 ad fb ff ff       	call   c001a39c <File::File(char const*, Process*)>
c001a7ef:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001a7f4:	83 c4 0c             	add    esp,0xc
c001a7f7:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001a7fb:	50                   	push   eax
c001a7fc:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a800:	50                   	push   eax
c001a801:	53                   	push   ebx
c001a802:	e8 b5 fe ff ff       	call   c001a6bc <File::stat(unsigned long long*, bool*)>
c001a807:	83 c4 10             	add    esp,0x10
c001a80a:	83 f8 02             	cmp    eax,0x2
c001a80d:	74 27                	je     c001a836 <Fs::setcwd(Process*, char*)+0x119>
c001a80f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001a814:	75 1c                	jne    c001a832 <Fs::setcwd(Process*, char*)+0x115>
c001a816:	b8 02 00 00 00       	mov    eax,0x2
c001a81b:	85 db                	test   ebx,ebx
c001a81d:	74 51                	je     c001a870 <Fs::setcwd(Process*, char*)+0x153>
c001a81f:	83 ec 0c             	sub    esp,0xc
c001a822:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a824:	53                   	push   ebx
c001a825:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a828:	83 c4 10             	add    esp,0x10
c001a82b:	b8 02 00 00 00       	mov    eax,0x2
c001a830:	eb 3e                	jmp    c001a870 <Fs::setcwd(Process*, char*)+0x153>
c001a832:	85 c0                	test   eax,eax
c001a834:	74 1c                	je     c001a852 <Fs::setcwd(Process*, char*)+0x135>
c001a836:	b8 01 00 00 00       	mov    eax,0x1
c001a83b:	85 db                	test   ebx,ebx
c001a83d:	74 31                	je     c001a870 <Fs::setcwd(Process*, char*)+0x153>
c001a83f:	83 ec 0c             	sub    esp,0xc
c001a842:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a844:	53                   	push   ebx
c001a845:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a848:	83 c4 10             	add    esp,0x10
c001a84b:	b8 01 00 00 00       	mov    eax,0x1
c001a850:	eb 1e                	jmp    c001a870 <Fs::setcwd(Process*, char*)+0x153>
c001a852:	85 db                	test   ebx,ebx
c001a854:	74 0c                	je     c001a862 <Fs::setcwd(Process*, char*)+0x145>
c001a856:	83 ec 0c             	sub    esp,0xc
c001a859:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a85b:	53                   	push   ebx
c001a85c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a85f:	83 c4 10             	add    esp,0x10
c001a862:	50                   	push   eax
c001a863:	50                   	push   eax
c001a864:	56                   	push   esi
c001a865:	57                   	push   edi
c001a866:	e8 d5 5d fe ff       	call   c0000640 <strcpy>
c001a86b:	83 c4 10             	add    esp,0x10
c001a86e:	31 c0                	xor    eax,eax
c001a870:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a876:	5b                   	pop    ebx
c001a877:	5e                   	pop    esi
c001a878:	5f                   	pop    edi
c001a879:	5d                   	pop    ebp
c001a87a:	c3                   	ret    
c001a87b:	90                   	nop

c001a87c <Directory::Directory(char const*, Process*)>:
c001a87c:	83 ec 0c             	sub    esp,0xc
c001a87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a883:	83 ec 08             	sub    esp,0x8
c001a886:	6a 00                	push   0x0
c001a888:	50                   	push   eax
c001a889:	e8 80 d1 ff ff       	call   c0017a0e <UnixFile::UnixFile(int)>
c001a88e:	83 c4 10             	add    esp,0x10
c001a891:	ba 8c 1c 03 c0       	mov    edx,0xc0031c8c
c001a896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a89a:	89 10                	mov    DWORD PTR [eax],edx
c001a89c:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001a8a1:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a8a5:	0f 95 c0             	setne  al
c001a8a8:	0f b6 c0             	movzx  eax,al
c001a8ab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a8af:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001a8b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a8b9:	83 c2 0d             	add    edx,0xd
c001a8bc:	50                   	push   eax
c001a8bd:	51                   	push   ecx
c001a8be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a8c2:	52                   	push   edx
c001a8c3:	e8 dc f7 ff ff       	call   c001a0a4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a8c8:	83 c4 10             	add    esp,0x10
c001a8cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8cf:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001a8d2:	83 e8 41             	sub    eax,0x41
c001a8d5:	88 c2                	mov    dl,al
c001a8d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8db:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001a8e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8e5:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001a8e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8ed:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a8f3:	0f b6 c0             	movzx  eax,al
c001a8f6:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a8fd:	85 c0                	test   eax,eax
c001a8ff:	74 3e                	je     c001a93f <Directory::Directory(char const*, Process*)+0xc3>
c001a901:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a905:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a90b:	0f b6 c0             	movzx  eax,al
c001a90e:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a915:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a91b:	85 c0                	test   eax,eax
c001a91d:	75 20                	jne    c001a93f <Directory::Directory(char const*, Process*)+0xc3>
c001a91f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a923:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a929:	0f b6 c0             	movzx  eax,al
c001a92c:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a933:	83 ec 0c             	sub    esp,0xc
c001a936:	50                   	push   eax
c001a937:	e8 0a 1c 00 00       	call   c001c546 <LogicalDisk::mount()>
c001a93c:	83 c4 10             	add    esp,0x10
c001a93f:	90                   	nop
c001a940:	83 c4 0c             	add    esp,0xc
c001a943:	c3                   	ret    

c001a944 <Directory::open()>:
c001a944:	53                   	push   ebx
c001a945:	b8 0b 00 00 00       	mov    eax,0xb
c001a94a:	83 ec 08             	sub    esp,0x8
c001a94d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a951:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001a958:	83 fa 19             	cmp    edx,0x19
c001a95b:	77 3d                	ja     c001a99a <Directory::open()+0x56>
c001a95d:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a964:	85 d2                	test   edx,edx
c001a966:	74 32                	je     c001a99a <Directory::open()+0x56>
c001a968:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a96e:	85 d2                	test   edx,edx
c001a970:	74 28                	je     c001a99a <Directory::open()+0x56>
c001a972:	b8 06 00 00 00       	mov    eax,0x6
c001a977:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001a97b:	75 1d                	jne    c001a99a <Directory::open()+0x56>
c001a97d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001a983:	50                   	push   eax
c001a984:	8b 02                	mov    eax,DWORD PTR [edx]
c001a986:	51                   	push   ecx
c001a987:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001a98a:	51                   	push   ecx
c001a98b:	52                   	push   edx
c001a98c:	ff 50 50             	call   DWORD PTR [eax+0x50]
c001a98f:	83 c4 10             	add    esp,0x10
c001a992:	85 c0                	test   eax,eax
c001a994:	75 04                	jne    c001a99a <Directory::open()+0x56>
c001a996:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001a99a:	83 c4 08             	add    esp,0x8
c001a99d:	5b                   	pop    ebx
c001a99e:	c3                   	ret    
c001a99f:	90                   	nop

c001a9a0 <Directory::close()>:
c001a9a0:	53                   	push   ebx
c001a9a1:	b8 0b 00 00 00       	mov    eax,0xb
c001a9a6:	83 ec 08             	sub    esp,0x8
c001a9a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a9ad:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a9b4:	83 f9 19             	cmp    ecx,0x19
c001a9b7:	77 41                	ja     c001a9fa <Directory::close()+0x5a>
c001a9b9:	8b 1c 8d 80 f3 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a9c0:	85 db                	test   ebx,ebx
c001a9c2:	74 36                	je     c001a9fa <Directory::close()+0x5a>
c001a9c4:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001a9cb:	74 2d                	je     c001a9fa <Directory::close()+0x5a>
c001a9cd:	b8 05 00 00 00       	mov    eax,0x5
c001a9d2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a9d6:	74 22                	je     c001a9fa <Directory::close()+0x5a>
c001a9d8:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001a9dc:	8b 04 8d 80 f3 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc0c80]
c001a9e3:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a9e9:	53                   	push   ebx
c001a9ea:	53                   	push   ebx
c001a9eb:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a9ed:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a9f3:	50                   	push   eax
c001a9f4:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c001a9f7:	83 c4 10             	add    esp,0x10
c001a9fa:	83 c4 08             	add    esp,0x8
c001a9fd:	5b                   	pop    ebx
c001a9fe:	c3                   	ret    
c001a9ff:	90                   	nop

c001aa00 <Directory::unlink()>:
c001aa00:	83 ec 0c             	sub    esp,0xc
c001aa03:	b8 0b 00 00 00       	mov    eax,0xb
c001aa08:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aa0c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aa13:	83 f9 19             	cmp    ecx,0x19
c001aa16:	77 2f                	ja     c001aa47 <Directory::unlink()+0x47>
c001aa18:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001aa1f:	85 c9                	test   ecx,ecx
c001aa21:	74 24                	je     c001aa47 <Directory::unlink()+0x47>
c001aa23:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001aa29:	85 c9                	test   ecx,ecx
c001aa2b:	74 1a                	je     c001aa47 <Directory::unlink()+0x47>
c001aa2d:	b8 06 00 00 00       	mov    eax,0x6
c001aa32:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001aa36:	75 0f                	jne    c001aa47 <Directory::unlink()+0x47>
c001aa38:	83 c2 0d             	add    edx,0xd
c001aa3b:	50                   	push   eax
c001aa3c:	50                   	push   eax
c001aa3d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001aa3f:	52                   	push   edx
c001aa40:	51                   	push   ecx
c001aa41:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001aa44:	83 c4 10             	add    esp,0x10
c001aa47:	83 c4 0c             	add    esp,0xc
c001aa4a:	c3                   	ret    
c001aa4b:	90                   	nop

c001aa4c <Directory::rename(char const*)>:
c001aa4c:	83 ec 0c             	sub    esp,0xc
c001aa4f:	b8 0b 00 00 00       	mov    eax,0xb
c001aa54:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aa58:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aa5f:	83 f9 19             	cmp    ecx,0x19
c001aa62:	77 32                	ja     c001aa96 <Directory::rename(char const*)+0x4a>
c001aa64:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001aa6b:	85 c9                	test   ecx,ecx
c001aa6d:	74 27                	je     c001aa96 <Directory::rename(char const*)+0x4a>
c001aa6f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001aa75:	85 c9                	test   ecx,ecx
c001aa77:	74 1d                	je     c001aa96 <Directory::rename(char const*)+0x4a>
c001aa79:	b8 06 00 00 00       	mov    eax,0x6
c001aa7e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001aa82:	75 12                	jne    c001aa96 <Directory::rename(char const*)+0x4a>
c001aa84:	83 c2 0d             	add    edx,0xd
c001aa87:	50                   	push   eax
c001aa88:	8b 01                	mov    eax,DWORD PTR [ecx]
c001aa8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001aa8e:	52                   	push   edx
c001aa8f:	51                   	push   ecx
c001aa90:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001aa93:	83 c4 10             	add    esp,0x10
c001aa96:	83 c4 0c             	add    esp,0xc
c001aa99:	c3                   	ret    

c001aa9a <Directory::exists()>:
c001aa9a:	83 ec 0c             	sub    esp,0xc
c001aa9d:	31 c0                	xor    eax,eax
c001aa9f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aaa3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aaaa:	83 f9 19             	cmp    ecx,0x19
c001aaad:	77 24                	ja     c001aad3 <Directory::exists()+0x39>
c001aaaf:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001aab6:	85 c9                	test   ecx,ecx
c001aab8:	74 19                	je     c001aad3 <Directory::exists()+0x39>
c001aaba:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001aac0:	85 c9                	test   ecx,ecx
c001aac2:	74 0f                	je     c001aad3 <Directory::exists()+0x39>
c001aac4:	83 c2 0d             	add    edx,0xd
c001aac7:	50                   	push   eax
c001aac8:	50                   	push   eax
c001aac9:	8b 01                	mov    eax,DWORD PTR [ecx]
c001aacb:	52                   	push   edx
c001aacc:	51                   	push   ecx
c001aacd:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001aad0:	83 c4 10             	add    esp,0x10
c001aad3:	83 c4 0c             	add    esp,0xc
c001aad6:	c3                   	ret    
c001aad7:	90                   	nop

c001aad8 <Directory::read(dirent*)>:
c001aad8:	83 ec 1c             	sub    esp,0x1c
c001aadb:	b8 0b 00 00 00       	mov    eax,0xb
c001aae0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001aae4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aaeb:	83 f9 19             	cmp    ecx,0x19
c001aaee:	77 30                	ja     c001ab20 <Directory::read(dirent*)+0x48>
c001aaf0:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001aaf7:	85 c9                	test   ecx,ecx
c001aaf9:	74 25                	je     c001ab20 <Directory::read(dirent*)+0x48>
c001aafb:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c001ab02:	74 1c                	je     c001ab20 <Directory::read(dirent*)+0x48>
c001ab04:	83 ec 0c             	sub    esp,0xc
c001ab07:	8b 02                	mov    eax,DWORD PTR [edx]
c001ab09:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001ab0d:	51                   	push   ecx
c001ab0e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ab12:	6a 00                	push   0x0
c001ab14:	68 10 01 00 00       	push   0x110
c001ab19:	52                   	push   edx
c001ab1a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ab1d:	83 c4 20             	add    esp,0x20
c001ab20:	83 c4 1c             	add    esp,0x1c
c001ab23:	c3                   	ret    

c001ab24 <Directory::create()>:
c001ab24:	83 ec 0c             	sub    esp,0xc
c001ab27:	b8 0b 00 00 00       	mov    eax,0xb
c001ab2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ab30:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ab37:	83 f9 19             	cmp    ecx,0x19
c001ab3a:	77 2f                	ja     c001ab6b <Directory::create()+0x47>
c001ab3c:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ab43:	85 c9                	test   ecx,ecx
c001ab45:	74 24                	je     c001ab6b <Directory::create()+0x47>
c001ab47:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ab4d:	85 c9                	test   ecx,ecx
c001ab4f:	74 1a                	je     c001ab6b <Directory::create()+0x47>
c001ab51:	b8 06 00 00 00       	mov    eax,0x6
c001ab56:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ab5a:	75 0f                	jne    c001ab6b <Directory::create()+0x47>
c001ab5c:	83 c2 0d             	add    edx,0xd
c001ab5f:	50                   	push   eax
c001ab60:	50                   	push   eax
c001ab61:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ab63:	52                   	push   edx
c001ab64:	51                   	push   ecx
c001ab65:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001ab68:	83 c4 10             	add    esp,0x10
c001ab6b:	83 c4 0c             	add    esp,0xc
c001ab6e:	c3                   	ret    
c001ab6f:	90                   	nop

c001ab70 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001ab70:	b8 0a 00 00 00       	mov    eax,0xa
c001ab75:	c3                   	ret    
c001ab76:	66 90                	xchg   ax,ax

c001ab78 <Bus::Bus(char const*)>:
c001ab78:	83 ec 0c             	sub    esp,0xc
c001ab7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab7f:	83 ec 08             	sub    esp,0x8
c001ab82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab86:	50                   	push   eax
c001ab87:	e8 ec 07 00 00       	call   c001b378 <Device::Device(char const*)>
c001ab8c:	83 c4 10             	add    esp,0x10
c001ab8f:	ba a8 1c 03 c0       	mov    edx,0xc0031ca8
c001ab94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab98:	89 10                	mov    DWORD PTR [eax],edx
c001ab9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab9e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001aba8:	90                   	nop
c001aba9:	83 c4 0c             	add    esp,0xc
c001abac:	c3                   	ret    
c001abad:	90                   	nop
c001abae:	66 90                	xchg   ax,ax

c001abb0 <Bus::~Bus()>:
c001abb0:	83 ec 0c             	sub    esp,0xc
c001abb3:	ba a8 1c 03 c0       	mov    edx,0xc0031ca8
c001abb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abbc:	89 10                	mov    DWORD PTR [eax],edx
c001abbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abc2:	83 ec 0c             	sub    esp,0xc
c001abc5:	50                   	push   eax
c001abc6:	e8 4d 05 00 00       	call   c001b118 <Device::~Device()>
c001abcb:	83 c4 10             	add    esp,0x10
c001abce:	90                   	nop
c001abcf:	83 c4 0c             	add    esp,0xc
c001abd2:	c3                   	ret    
c001abd3:	90                   	nop

c001abd4 <Bus::~Bus()>:
c001abd4:	83 ec 0c             	sub    esp,0xc
c001abd7:	83 ec 0c             	sub    esp,0xc
c001abda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abde:	e8 cd ff ff ff       	call   c001abb0 <Bus::~Bus()>
c001abe3:	83 c4 10             	add    esp,0x10
c001abe6:	83 ec 08             	sub    esp,0x8
c001abe9:	68 58 01 00 00       	push   0x158
c001abee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abf2:	e8 71 e4 ff ff       	call   c0019068 <operator delete(void*, unsigned long)>
c001abf7:	83 c4 10             	add    esp,0x10
c001abfa:	83 c4 0c             	add    esp,0xc
c001abfd:	c3                   	ret    

c001abfe <beepThread(void*)>:
c001abfe:	83 ec 0c             	sub    esp,0xc
c001ac01:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001ac06:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac0a:	48                   	dec    eax
c001ac0b:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001ac10:	75 01                	jne    c001ac13 <beepThread(void*)+0x15>
c001ac12:	fb                   	sti    
c001ac13:	83 ec 0c             	sub    esp,0xc
c001ac16:	6b c2 0a             	imul   eax,edx,0xa
c001ac19:	50                   	push   eax
c001ac1a:	e8 15 a7 00 00       	call   c0025334 <milliTenthSleep(unsigned int)>
c001ac1f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ac26:	e8 10 c5 00 00       	call   c002713b <HalMakeBeep(int)>
c001ac2b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001ac33:	83 c4 1c             	add    esp,0x1c
c001ac36:	e9 dd a5 00 00       	jmp    c0025218 <blockTask(TaskState)>

c001ac3b <Krnl::beep(int, int, bool)>:
c001ac3b:	56                   	push   esi
c001ac3c:	53                   	push   ebx
c001ac3d:	83 ec 10             	sub    esp,0x10
c001ac40:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ac44:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ac48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac4c:	e8 ea c4 00 00       	call   c002713b <HalMakeBeep(int)>
c001ac51:	83 c4 10             	add    esp,0x10
c001ac54:	89 f0                	mov    eax,esi
c001ac56:	84 c0                	test   al,al
c001ac58:	74 1e                	je     c001ac78 <Krnl::beep(int, int, bool)+0x3d>
c001ac5a:	83 ec 0c             	sub    esp,0xc
c001ac5d:	6b db 0a             	imul   ebx,ebx,0xa
c001ac60:	53                   	push   ebx
c001ac61:	e8 ce a6 00 00       	call   c0025334 <milliTenthSleep(unsigned int)>
c001ac66:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ac6e:	83 c4 14             	add    esp,0x14
c001ac71:	5b                   	pop    ebx
c001ac72:	5e                   	pop    esi
c001ac73:	e9 c3 c4 00 00       	jmp    c002713b <HalMakeBeep(int)>
c001ac78:	68 e6 00 00 00       	push   0xe6
c001ac7d:	53                   	push   ebx
c001ac7e:	68 fe ab 01 c0       	push   0xc001abfe
c001ac83:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001ac89:	e8 7e a2 00 00       	call   c0024f0c <Process::createThread(void (*)(void*), void*, int)>
c001ac8e:	83 c4 14             	add    esp,0x14
c001ac91:	5b                   	pop    ebx
c001ac92:	5e                   	pop    esi
c001ac93:	c3                   	ret    

c001ac94 <User::loadClockSettings(int)>:
c001ac94:	53                   	push   ebx
c001ac95:	83 ec 14             	sub    esp,0x14
c001ac98:	68 14 01 00 00       	push   0x114
c001ac9d:	e8 64 b6 ff ff       	call   c0016306 <malloc>
c001aca2:	83 c4 0c             	add    esp,0xc
c001aca5:	89 c3                	mov    ebx,eax
c001aca7:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001acad:	68 cc 1c 03 c0       	push   0xc0031ccc
c001acb2:	50                   	push   eax
c001acb3:	e8 e4 f6 ff ff       	call   c001a39c <File::File(char const*, Process*)>
c001acb8:	58                   	pop    eax
c001acb9:	5a                   	pop    edx
c001acba:	6a 01                	push   0x1
c001acbc:	53                   	push   ebx
c001acbd:	e8 f8 f6 ff ff       	call   c001a3ba <File::open(FileOpenMode)>
c001acc2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001acc5:	e8 4e f7 ff ff       	call   c001a418 <File::close()>
c001acca:	83 c4 10             	add    esp,0x10
c001accd:	85 db                	test   ebx,ebx
c001accf:	74 0f                	je     c001ace0 <User::loadClockSettings(int)+0x4c>
c001acd1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001acd3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001acd7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001acda:	83 c4 08             	add    esp,0x8
c001acdd:	5b                   	pop    ebx
c001acde:	ff e0                	jmp    eax
c001ace0:	83 c4 08             	add    esp,0x8
c001ace3:	5b                   	pop    ebx
c001ace4:	c3                   	ret    
c001ace5:	90                   	nop

c001ace6 <Clock::Clock(char const*)>:
c001ace6:	83 ec 0c             	sub    esp,0xc
c001ace9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aced:	83 ec 08             	sub    esp,0x8
c001acf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001acf4:	50                   	push   eax
c001acf5:	e8 7e 06 00 00       	call   c001b378 <Device::Device(char const*)>
c001acfa:	83 c4 10             	add    esp,0x10
c001acfd:	ba f4 1c 03 c0       	mov    edx,0xc0031cf4
c001ad02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad06:	89 10                	mov    DWORD PTR [eax],edx
c001ad08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad0c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001ad16:	90                   	nop
c001ad17:	83 c4 0c             	add    esp,0xc
c001ad1a:	c3                   	ret    
c001ad1b:	90                   	nop

c001ad1c <Clock::~Clock()>:
c001ad1c:	83 ec 0c             	sub    esp,0xc
c001ad1f:	ba f4 1c 03 c0       	mov    edx,0xc0031cf4
c001ad24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad28:	89 10                	mov    DWORD PTR [eax],edx
c001ad2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad2e:	83 ec 0c             	sub    esp,0xc
c001ad31:	50                   	push   eax
c001ad32:	e8 e1 03 00 00       	call   c001b118 <Device::~Device()>
c001ad37:	83 c4 10             	add    esp,0x10
c001ad3a:	90                   	nop
c001ad3b:	83 c4 0c             	add    esp,0xc
c001ad3e:	c3                   	ret    
c001ad3f:	90                   	nop

c001ad40 <Clock::~Clock()>:
c001ad40:	83 ec 0c             	sub    esp,0xc
c001ad43:	83 ec 0c             	sub    esp,0xc
c001ad46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad4a:	e8 cd ff ff ff       	call   c001ad1c <Clock::~Clock()>
c001ad4f:	83 c4 10             	add    esp,0x10
c001ad52:	83 ec 08             	sub    esp,0x8
c001ad55:	68 58 01 00 00       	push   0x158
c001ad5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad5e:	e8 05 e3 ff ff       	call   c0019068 <operator delete(void*, unsigned long)>
c001ad63:	83 c4 10             	add    esp,0x10
c001ad66:	83 c4 0c             	add    esp,0xc
c001ad69:	c3                   	ret    

c001ad6a <Clock::timeInSecondsLocal()>:
c001ad6a:	53                   	push   ebx
c001ad6b:	83 ec 14             	sub    esp,0x14
c001ad6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ad72:	8b 10                	mov    edx,DWORD PTR [eax]
c001ad74:	50                   	push   eax
c001ad75:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001ad78:	0f b6 0d 08 cf 03 c0 	movzx  ecx,BYTE PTR ds:0xc003cf08
c001ad7f:	03 0d 0c cf 03 c0    	add    ecx,DWORD PTR ds:0xc003cf0c
c001ad85:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001ad8b:	89 cb                	mov    ebx,ecx
c001ad8d:	c1 fb 1f             	sar    ebx,0x1f
c001ad90:	01 c8                	add    eax,ecx
c001ad92:	11 da                	adc    edx,ebx
c001ad94:	83 c4 10             	add    esp,0x10
c001ad97:	31 c9                	xor    ecx,ecx
c001ad99:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001ada0:	74 05                	je     c001ada7 <Clock::timeInSecondsLocal()+0x3d>
c001ada2:	b9 08 07 00 00       	mov    ecx,0x708
c001ada7:	31 db                	xor    ebx,ebx
c001ada9:	01 c8                	add    eax,ecx
c001adab:	11 da                	adc    edx,ebx
c001adad:	83 c4 08             	add    esp,0x8
c001adb0:	5b                   	pop    ebx
c001adb1:	c3                   	ret    

c001adb2 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001adb2:	57                   	push   edi
c001adb3:	56                   	push   esi
c001adb4:	53                   	push   ebx
c001adb5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001adb9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001adbd:	8b 01                	mov    eax,DWORD PTR [ecx]
c001adbf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001adc3:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001adc6:	0f b6 05 08 cf 03 c0 	movzx  eax,BYTE PTR ds:0xc003cf08
c001adcd:	03 05 0c cf 03 c0    	add    eax,DWORD PTR ds:0xc003cf0c
c001add3:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001add9:	99                   	cdq    
c001adda:	29 c6                	sub    esi,eax
c001addc:	19 d7                	sbb    edi,edx
c001adde:	89 f0                	mov    eax,esi
c001ade0:	89 fa                	mov    edx,edi
c001ade2:	31 f6                	xor    esi,esi
c001ade4:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001adeb:	74 05                	je     c001adf2 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001aded:	be 08 07 00 00       	mov    esi,0x708
c001adf2:	31 ff                	xor    edi,edi
c001adf4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001adf8:	29 f0                	sub    eax,esi
c001adfa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001adfe:	19 fa                	sbb    edx,edi
c001ae00:	89 d8                	mov    eax,ebx
c001ae02:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001ae06:	5b                   	pop    ebx
c001ae07:	5e                   	pop    esi
c001ae08:	5f                   	pop    edi
c001ae09:	ff e0                	jmp    eax

c001ae0b <datetimeToSeconds(datetime_t)>:
c001ae0b:	55                   	push   ebp
c001ae0c:	57                   	push   edi
c001ae0d:	56                   	push   esi
c001ae0e:	53                   	push   ebx
c001ae0f:	83 ec 0c             	sub    esp,0xc
c001ae12:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ae16:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ae1a:	89 d6                	mov    esi,edx
c001ae1c:	0f b6 c7             	movzx  eax,bh
c001ae1f:	c1 ee 10             	shr    esi,0x10
c001ae22:	6b e8 3c             	imul   ebp,eax,0x3c
c001ae25:	81 ee 6c 07 00 00    	sub    esi,0x76c
c001ae2b:	0f b6 ce             	movzx  ecx,dh
c001ae2e:	89 df                	mov    edi,ebx
c001ae30:	49                   	dec    ecx
c001ae31:	c1 ef 10             	shr    edi,0x10
c001ae34:	0f b6 db             	movzx  ebx,bl
c001ae37:	89 f8                	mov    eax,edi
c001ae39:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c001ae3f:	0f b6 f8             	movzx  edi,al
c001ae42:	0f b6 d2             	movzx  edx,dl
c001ae45:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c001ae49:	01 d8                	add    eax,ebx
c001ae4b:	0f b7 de             	movzx  ebx,si
c001ae4e:	89 04 24             	mov    DWORD PTR [esp],eax
c001ae51:	c1 f8 1f             	sar    eax,0x1f
c001ae54:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ae58:	0f b6 c1             	movzx  eax,cl
c001ae5b:	8b 0c 85 40 1d 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffce2c0]
c001ae62:	83 f8 01             	cmp    eax,0x1
c001ae65:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001ae69:	76 27                	jbe    c001ae92 <datetimeToSeconds(datetime_t)+0x87>
c001ae6b:	83 e6 03             	and    esi,0x3
c001ae6e:	75 22                	jne    c001ae92 <datetimeToSeconds(datetime_t)+0x87>
c001ae70:	31 d2                	xor    edx,edx
c001ae72:	be 64 00 00 00       	mov    esi,0x64
c001ae77:	89 d8                	mov    eax,ebx
c001ae79:	f7 f6                	div    esi
c001ae7b:	85 d2                	test   edx,edx
c001ae7d:	75 12                	jne    c001ae91 <datetimeToSeconds(datetime_t)+0x86>
c001ae7f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001ae85:	be 90 01 00 00       	mov    esi,0x190
c001ae8a:	99                   	cdq    
c001ae8b:	f7 fe                	idiv   esi
c001ae8d:	85 d2                	test   edx,edx
c001ae8f:	75 01                	jne    c001ae92 <datetimeToSeconds(datetime_t)+0x87>
c001ae91:	41                   	inc    ecx
c001ae92:	83 fb 46             	cmp    ebx,0x46
c001ae95:	76 48                	jbe    c001aedf <datetimeToSeconds(datetime_t)+0xd4>
c001ae97:	be 46 00 00 00       	mov    esi,0x46
c001ae9c:	bf 64 00 00 00       	mov    edi,0x64
c001aea1:	bd 90 01 00 00       	mov    ebp,0x190
c001aea6:	b8 6d 01 00 00       	mov    eax,0x16d
c001aeab:	f7 c6 03 00 00 00    	test   esi,0x3
c001aeb1:	75 23                	jne    c001aed6 <datetimeToSeconds(datetime_t)+0xcb>
c001aeb3:	89 f0                	mov    eax,esi
c001aeb5:	99                   	cdq    
c001aeb6:	f7 ff                	idiv   edi
c001aeb8:	b8 6e 01 00 00       	mov    eax,0x16e
c001aebd:	85 d2                	test   edx,edx
c001aebf:	75 15                	jne    c001aed6 <datetimeToSeconds(datetime_t)+0xcb>
c001aec1:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001aec7:	99                   	cdq    
c001aec8:	f7 fd                	idiv   ebp
c001aeca:	83 fa 01             	cmp    edx,0x1
c001aecd:	19 c0                	sbb    eax,eax
c001aecf:	f7 d0                	not    eax
c001aed1:	05 6e 01 00 00       	add    eax,0x16e
c001aed6:	01 c1                	add    ecx,eax
c001aed8:	46                   	inc    esi
c001aed9:	39 de                	cmp    esi,ebx
c001aedb:	7c c9                	jl     c001aea6 <datetimeToSeconds(datetime_t)+0x9b>
c001aedd:	eb 34                	jmp    c001af13 <datetimeToSeconds(datetime_t)+0x108>
c001aedf:	74 32                	je     c001af13 <datetimeToSeconds(datetime_t)+0x108>
c001aee1:	b8 45 00 00 00       	mov    eax,0x45
c001aee6:	89 c2                	mov    edx,eax
c001aee8:	83 e2 03             	and    edx,0x3
c001aeeb:	39 d8                	cmp    eax,ebx
c001aeed:	7e 0f                	jle    c001aefe <datetimeToSeconds(datetime_t)+0xf3>
c001aeef:	83 fa 01             	cmp    edx,0x1
c001aef2:	19 d2                	sbb    edx,edx
c001aef4:	48                   	dec    eax
c001aef5:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001aefc:	eb e8                	jmp    c001aee6 <datetimeToSeconds(datetime_t)+0xdb>
c001aefe:	b8 6d 01 00 00       	mov    eax,0x16d
c001af03:	85 d2                	test   edx,edx
c001af05:	75 0a                	jne    c001af11 <datetimeToSeconds(datetime_t)+0x106>
c001af07:	83 fb 01             	cmp    ebx,0x1
c001af0a:	19 c0                	sbb    eax,eax
c001af0c:	05 6e 01 00 00       	add    eax,0x16e
c001af11:	29 c1                	sub    ecx,eax
c001af13:	b8 80 51 01 00       	mov    eax,0x15180
c001af18:	f7 e9                	imul   ecx
c001af1a:	03 04 24             	add    eax,DWORD PTR [esp]
c001af1d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c001af21:	83 c4 0c             	add    esp,0xc
c001af24:	5b                   	pop    ebx
c001af25:	5e                   	pop    esi
c001af26:	5f                   	pop    edi
c001af27:	5d                   	pop    ebp
c001af28:	c3                   	ret    
c001af29:	90                   	nop

c001af2a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001af2a:	57                   	push   edi
c001af2b:	56                   	push   esi
c001af2c:	53                   	push   ebx
c001af2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001af31:	8b 06                	mov    eax,DWORD PTR [esi]
c001af33:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001af36:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af3a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af3e:	e8 c8 fe ff ff       	call   c001ae0b <datetimeToSeconds(datetime_t)>
c001af43:	59                   	pop    ecx
c001af44:	0f b6 0d 08 cf 03 c0 	movzx  ecx,BYTE PTR ds:0xc003cf08
c001af4b:	5b                   	pop    ebx
c001af4c:	03 0d 0c cf 03 c0    	add    ecx,DWORD PTR ds:0xc003cf0c
c001af52:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001af58:	89 cb                	mov    ebx,ecx
c001af5a:	c1 fb 1f             	sar    ebx,0x1f
c001af5d:	29 c8                	sub    eax,ecx
c001af5f:	19 da                	sbb    edx,ebx
c001af61:	31 c9                	xor    ecx,ecx
c001af63:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001af6a:	74 05                	je     c001af71 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001af6c:	b9 08 07 00 00       	mov    ecx,0x708
c001af71:	31 db                	xor    ebx,ebx
c001af73:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001af77:	29 c8                	sub    eax,ecx
c001af79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001af7d:	19 da                	sbb    edx,ebx
c001af7f:	89 f8                	mov    eax,edi
c001af81:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001af85:	5b                   	pop    ebx
c001af86:	5e                   	pop    esi
c001af87:	5f                   	pop    edi
c001af88:	ff e0                	jmp    eax

c001af8a <secondsToDatetime(unsigned long long)>:
c001af8a:	55                   	push   ebp
c001af8b:	57                   	push   edi
c001af8c:	56                   	push   esi
c001af8d:	53                   	push   ebx
c001af8e:	83 ec 1c             	sub    esp,0x1c
c001af91:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001af95:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001af99:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001af9d:	6a 00                	push   0x0
c001af9f:	68 80 51 01 00       	push   0x15180
c001afa4:	55                   	push   ebp
c001afa5:	57                   	push   edi
c001afa6:	e8 b5 35 01 00       	call   c002e560 <__udivdi3>
c001afab:	83 c4 10             	add    esp,0x10
c001afae:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001afb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001afb8:	6a 00                	push   0x0
c001afba:	68 80 51 01 00       	push   0x15180
c001afbf:	55                   	push   ebp
c001afc0:	57                   	push   edi
c001afc1:	bf 10 0e 00 00       	mov    edi,0xe10
c001afc6:	e8 95 36 01 00       	call   c002e660 <__umoddi3>
c001afcb:	83 c4 10             	add    esp,0x10
c001afce:	99                   	cdq    
c001afcf:	f7 ff                	idiv   edi
c001afd1:	bf 3c 00 00 00       	mov    edi,0x3c
c001afd6:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001afd9:	89 d0                	mov    eax,edx
c001afdb:	99                   	cdq    
c001afdc:	f7 ff                	idiv   edi
c001afde:	85 db                	test   ebx,ebx
c001afe0:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001afe3:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001afe6:	79 11                	jns    c001aff9 <secondsToDatetime(unsigned long long)+0x6f>
c001afe8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001afec:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001aff2:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001aff7:	eb 07                	jmp    c001b000 <secondsToDatetime(unsigned long long)+0x76>
c001aff9:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001affe:	89 d8                	mov    eax,ebx
c001b000:	bf b4 05 00 00       	mov    edi,0x5b4
c001b005:	99                   	cdq    
c001b006:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001b00b:	f7 f9                	idiv   ecx
c001b00d:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001b012:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b016:	31 d2                	xor    edx,edx
c001b018:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001b020:	01 c3                	add    ebx,eax
c001b022:	89 d8                	mov    eax,ebx
c001b024:	f7 f1                	div    ecx
c001b026:	31 d2                	xor    edx,edx
c001b028:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001b02b:	89 d8                	mov    eax,ebx
c001b02d:	f7 f7                	div    edi
c001b02f:	31 d2                	xor    edx,edx
c001b031:	29 c1                	sub    ecx,eax
c001b033:	89 d8                	mov    eax,ebx
c001b035:	f7 f5                	div    ebp
c001b037:	bd 6d 01 00 00       	mov    ebp,0x16d
c001b03c:	29 c1                	sub    ecx,eax
c001b03e:	31 d2                	xor    edx,edx
c001b040:	89 c8                	mov    eax,ecx
c001b042:	f7 f5                	div    ebp
c001b044:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001b049:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b04d:	31 d2                	xor    edx,edx
c001b04f:	89 c8                	mov    eax,ecx
c001b051:	f7 f5                	div    ebp
c001b053:	31 d2                	xor    edx,edx
c001b055:	01 c3                	add    ebx,eax
c001b057:	89 c8                	mov    eax,ecx
c001b059:	f7 f7                	div    edi
c001b05b:	bf 99 00 00 00       	mov    edi,0x99
c001b060:	29 c3                	sub    ebx,eax
c001b062:	31 d2                	xor    edx,edx
c001b064:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001b06c:	29 c3                	sub    ebx,eax
c001b06e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001b071:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001b074:	bb 05 00 00 00       	mov    ebx,0x5
c001b079:	83 c1 02             	add    ecx,0x2
c001b07c:	89 c8                	mov    eax,ecx
c001b07e:	f7 f7                	div    edi
c001b080:	31 d2                	xor    edx,edx
c001b082:	89 c7                	mov    edi,eax
c001b084:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001b08a:	83 c0 02             	add    eax,0x2
c001b08d:	f7 f3                	div    ebx
c001b08f:	89 eb                	mov    ebx,ebp
c001b091:	29 c3                	sub    ebx,eax
c001b093:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001b099:	88 1e                	mov    BYTE PTR [esi],bl
c001b09b:	19 c0                	sbb    eax,eax
c001b09d:	31 d2                	xor    edx,edx
c001b09f:	83 e0 0c             	and    eax,0xc
c001b0a2:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001b0a6:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001b0ae:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001b0b2:	83 f9 01             	cmp    ecx,0x1
c001b0b5:	0f 96 c2             	setbe  dl
c001b0b8:	41                   	inc    ecx
c001b0b9:	01 d0                	add    eax,edx
c001b0bb:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001b0be:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001b0c2:	83 c4 1c             	add    esp,0x1c
c001b0c5:	89 f0                	mov    eax,esi
c001b0c7:	5b                   	pop    ebx
c001b0c8:	5e                   	pop    esi
c001b0c9:	5f                   	pop    edi
c001b0ca:	5d                   	pop    ebp
c001b0cb:	c2 04 00             	ret    0x4

c001b0ce <Clock::timeInDatetimeLocal()>:
c001b0ce:	53                   	push   ebx
c001b0cf:	83 ec 14             	sub    esp,0x14
c001b0d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b0d6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b0da:	e8 8b fc ff ff       	call   c001ad6a <Clock::timeInSecondsLocal()>
c001b0df:	83 c4 0c             	add    esp,0xc
c001b0e2:	52                   	push   edx
c001b0e3:	50                   	push   eax
c001b0e4:	53                   	push   ebx
c001b0e5:	e8 a0 fe ff ff       	call   c001af8a <secondsToDatetime(unsigned long long)>
c001b0ea:	89 d8                	mov    eax,ebx
c001b0ec:	83 c4 14             	add    esp,0x14
c001b0ef:	5b                   	pop    ebx
c001b0f0:	c2 04 00             	ret    0x4
c001b0f3:	90                   	nop

c001b0f4 <Device::hibernate()>:
c001b0f4:	c3                   	ret    
c001b0f5:	90                   	nop

c001b0f6 <Device::wake()>:
c001b0f6:	c3                   	ret    
c001b0f7:	90                   	nop

c001b0f8 <Device::detect()>:
c001b0f8:	c3                   	ret    
c001b0f9:	90                   	nop

c001b0fa <Device::disableLegacy()>:
c001b0fa:	c3                   	ret    
c001b0fb:	90                   	nop

c001b0fc <Device::powerSaving(PowerSavingLevel)>:
c001b0fc:	c3                   	ret    
c001b0fd:	90                   	nop

c001b0fe <DriverlessDevice::close(int, int, void*)>:
c001b0fe:	31 c0                	xor    eax,eax
c001b100:	c3                   	ret    
c001b101:	90                   	nop

c001b102 <DriverlessDevice::detect()>:
c001b102:	c3                   	ret    
c001b103:	90                   	nop

c001b104 <DriverlessDevice::open(int, int, void*)>:
c001b104:	83 ec 18             	sub    esp,0x18
c001b107:	68 70 1d 03 c0       	push   0xc0031d70
c001b10c:	e8 9d 50 00 00       	call   c00201ae <KePanic(char const*)>
c001b111:	83 c8 ff             	or     eax,0xffffffff
c001b114:	83 c4 1c             	add    esp,0x1c
c001b117:	c3                   	ret    

c001b118 <Device::~Device()>:
c001b118:	ba dc 1d 03 c0       	mov    edx,0xc0031ddc
c001b11d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b121:	89 10                	mov    DWORD PTR [eax],edx
c001b123:	90                   	nop
c001b124:	c3                   	ret    
c001b125:	90                   	nop

c001b126 <Device::~Device()>:
c001b126:	83 ec 0c             	sub    esp,0xc
c001b129:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b12d:	e8 e6 ff ff ff       	call   c001b118 <Device::~Device()>
c001b132:	83 c4 04             	add    esp,0x4
c001b135:	83 ec 08             	sub    esp,0x8
c001b138:	68 58 01 00 00       	push   0x158
c001b13d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b141:	e8 22 df ff ff       	call   c0019068 <operator delete(void*, unsigned long)>
c001b146:	83 c4 10             	add    esp,0x10
c001b149:	83 c4 0c             	add    esp,0xc
c001b14c:	c3                   	ret    
c001b14d:	90                   	nop

c001b14e <Device::findAndLoadDriver()>:
c001b14e:	c7 44 24 04 8e 1d 03 c0 	mov    DWORD PTR [esp+0x4],0xc0031d8e
c001b156:	e9 3a e0 ff ff       	jmp    c0019195 <Dbg::kprintf(char const*, ...)>
c001b15b:	90                   	nop

c001b15c <Device::preOpenPCI(PCIDeviceInfo)>:
c001b15c:	57                   	push   edi
c001b15d:	b9 09 00 00 00       	mov    ecx,0x9
c001b162:	56                   	push   esi
c001b163:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b167:	8d 74 24 10          	lea    esi,[esp+0x10]
c001b16b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001b175:	81 c7 18 01 00 00    	add    edi,0x118
c001b17b:	fc                   	cld    
c001b17c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b17e:	5e                   	pop    esi
c001b17f:	5f                   	pop    edi
c001b180:	c3                   	ret    
c001b181:	90                   	nop

c001b182 <Device::preOpenACPI(void*, char*, char*)>:
c001b182:	57                   	push   edi
c001b183:	b9 1e 00 00 00       	mov    ecx,0x1e
c001b188:	56                   	push   esi
c001b189:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b18d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b191:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c001b19b:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c001b1a1:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c001b1a7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b1ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b1ad:	b9 0e 00 00 00       	mov    ecx,0xe
c001b1b2:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c001b1b8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b1bc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b1be:	5e                   	pop    esi
c001b1bf:	5f                   	pop    edi
c001b1c0:	c3                   	ret    
c001b1c1:	90                   	nop

c001b1c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b1c2:	53                   	push   ebx
c001b1c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b1c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b1cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b1cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b1d3:	0f b6 c0             	movzx  eax,al
c001b1d6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b1da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b1de:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b1e2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b1e6:	5b                   	pop    ebx
c001b1e7:	e9 c0 05 00 00       	jmp    c001b7ac <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c001b1ec <Device::getParent()>:
c001b1ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b1f0:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c001b1f6:	c3                   	ret    
c001b1f7:	90                   	nop

c001b1f8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b1f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b200:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001b205:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b209:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b20d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b211:	e9 fe 06 00 00       	jmp    c001b914 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c001b216 <Device::addChild(Device*)>:
c001b216:	53                   	push   ebx
c001b217:	83 ec 08             	sub    esp,0x8
c001b21a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b21e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b222:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001b228:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001b22e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b230:	85 d2                	test   edx,edx
c001b232:	74 04                	je     c001b238 <Device::addChild(Device*)+0x22>
c001b234:	89 d3                	mov    ebx,edx
c001b236:	eb f6                	jmp    c001b22e <Device::addChild(Device*)+0x18>
c001b238:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001b23b:	83 ec 0c             	sub    esp,0xc
c001b23e:	6a 08                	push   0x8
c001b240:	e8 c1 b0 ff ff       	call   c0016306 <malloc>
c001b245:	89 03                	mov    DWORD PTR [ebx],eax
c001b247:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b24d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b254:	83 c4 18             	add    esp,0x18
c001b257:	5b                   	pop    ebx
c001b258:	c3                   	ret    
c001b259:	90                   	nop

c001b25a <Device::removeAllChildren()>:
c001b25a:	56                   	push   esi
c001b25b:	53                   	push   ebx
c001b25c:	52                   	push   edx
c001b25d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b261:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001b267:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b26a:	74 17                	je     c001b283 <Device::removeAllChildren()+0x29>
c001b26c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001b26f:	85 c0                	test   eax,eax
c001b271:	74 0c                	je     c001b27f <Device::removeAllChildren()+0x25>
c001b273:	83 ec 0c             	sub    esp,0xc
c001b276:	8b 10                	mov    edx,DWORD PTR [eax]
c001b278:	50                   	push   eax
c001b279:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b27c:	83 c4 10             	add    esp,0x10
c001b27f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b281:	eb e4                	jmp    c001b267 <Device::removeAllChildren()+0xd>
c001b283:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b289:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b28f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b295:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b29c:	58                   	pop    eax
c001b29d:	5b                   	pop    ebx
c001b29e:	5e                   	pop    esi
c001b29f:	c3                   	ret    

c001b2a0 <Device::hibernateAll()>:
c001b2a0:	53                   	push   ebx
c001b2a1:	83 ec 14             	sub    esp,0x14
c001b2a4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b2a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2aa:	53                   	push   ebx
c001b2ab:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b2ae:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b2b4:	83 c4 10             	add    esp,0x10
c001b2b7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b2ba:	74 0f                	je     c001b2cb <Device::hibernateAll()+0x2b>
c001b2bc:	83 ec 0c             	sub    esp,0xc
c001b2bf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b2c2:	e8 d9 ff ff ff       	call   c001b2a0 <Device::hibernateAll()>
c001b2c7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b2c9:	eb e9                	jmp    c001b2b4 <Device::hibernateAll()+0x14>
c001b2cb:	83 c4 08             	add    esp,0x8
c001b2ce:	5b                   	pop    ebx
c001b2cf:	c3                   	ret    

c001b2d0 <Device::wakeAll()>:
c001b2d0:	53                   	push   ebx
c001b2d1:	83 ec 14             	sub    esp,0x14
c001b2d4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b2d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2da:	53                   	push   ebx
c001b2db:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001b2de:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b2e4:	83 c4 10             	add    esp,0x10
c001b2e7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b2ea:	74 0f                	je     c001b2fb <Device::wakeAll()+0x2b>
c001b2ec:	83 ec 0c             	sub    esp,0xc
c001b2ef:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b2f2:	e8 d9 ff ff ff       	call   c001b2d0 <Device::wakeAll()>
c001b2f7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b2f9:	eb e9                	jmp    c001b2e4 <Device::wakeAll()+0x14>
c001b2fb:	83 c4 08             	add    esp,0x8
c001b2fe:	5b                   	pop    ebx
c001b2ff:	c3                   	ret    

c001b300 <Device::detectAll()>:
c001b300:	53                   	push   ebx
c001b301:	83 ec 14             	sub    esp,0x14
c001b304:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b308:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b30a:	53                   	push   ebx
c001b30b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b30e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b314:	83 c4 10             	add    esp,0x10
c001b317:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b31a:	74 0f                	je     c001b32b <Device::detectAll()+0x2b>
c001b31c:	83 ec 0c             	sub    esp,0xc
c001b31f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b322:	e8 d9 ff ff ff       	call   c001b300 <Device::detectAll()>
c001b327:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b329:	eb e9                	jmp    c001b314 <Device::detectAll()+0x14>
c001b32b:	83 c4 08             	add    esp,0x8
c001b32e:	5b                   	pop    ebx
c001b32f:	c3                   	ret    

c001b330 <Device::disableLegacyAll()>:
c001b330:	c3                   	ret    
c001b331:	90                   	nop

c001b332 <Device::loadDriversForAll()>:
c001b332:	c3                   	ret    
c001b333:	90                   	nop

c001b334 <Device::powerSavingAll(PowerSavingLevel)>:
c001b334:	56                   	push   esi
c001b335:	53                   	push   ebx
c001b336:	83 ec 0c             	sub    esp,0xc
c001b339:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b33d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b341:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b343:	56                   	push   esi
c001b344:	53                   	push   ebx
c001b345:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001b348:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b34e:	83 c4 10             	add    esp,0x10
c001b351:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b354:	74 0f                	je     c001b365 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001b356:	52                   	push   edx
c001b357:	52                   	push   edx
c001b358:	56                   	push   esi
c001b359:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b35c:	e8 d3 ff ff ff       	call   c001b334 <Device::powerSavingAll(PowerSavingLevel)>
c001b361:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b363:	eb e9                	jmp    c001b34e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001b365:	58                   	pop    eax
c001b366:	5b                   	pop    ebx
c001b367:	5e                   	pop    esi
c001b368:	c3                   	ret    
c001b369:	90                   	nop

c001b36a <Device::setName(char const*)>:
c001b36a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001b372:	e9 c9 52 fe ff       	jmp    c0000640 <strcpy>
c001b377:	90                   	nop

c001b378 <Device::Device(char const*)>:
c001b378:	83 ec 1c             	sub    esp,0x1c
c001b37b:	ba dc 1d 03 c0       	mov    edx,0xc0031ddc
c001b380:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b384:	89 10                	mov    DWORD PTR [eax],edx
c001b386:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b38a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001b394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b398:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b3a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3a6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b3b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3b4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b3be:	83 ec 08             	sub    esp,0x8
c001b3c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b3c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b3c9:	e8 9c ff ff ff       	call   c001b36a <Device::setName(char const*)>
c001b3ce:	83 c4 10             	add    esp,0x10
c001b3d1:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001b3d9:	83 ec 0c             	sub    esp,0xc
c001b3dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b3e0:	e8 21 af ff ff       	call   c0016306 <malloc>
c001b3e5:	83 c4 10             	add    esp,0x10
c001b3e8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b3ee:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b3f5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b3f9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001b3ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b403:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b409:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b40f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b413:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b419:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b420:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b424:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001b42b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b42f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001b436:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b43a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b444:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b448:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b452:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b456:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b460:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b464:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c001b46e:	90                   	nop
c001b46f:	83 c4 1c             	add    esp,0x1c
c001b472:	c3                   	ret    
c001b473:	90                   	nop

c001b474 <Device::getName()>:
c001b474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b478:	05 d0 00 00 00       	add    eax,0xd0
c001b47d:	c3                   	ret    

c001b47e <Device::closeAll()>:
c001b47e:	53                   	push   ebx
c001b47f:	83 ec 08             	sub    esp,0x8
c001b482:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b486:	53                   	push   ebx
c001b487:	e8 e8 ff ff ff       	call   c001b474 <Device::getName()>
c001b48c:	52                   	push   edx
c001b48d:	50                   	push   eax
c001b48e:	68 c8 1d 03 c0       	push   0xc0031dc8
c001b493:	e8 fd dc ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c001b498:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b49a:	6a 00                	push   0x0
c001b49c:	6a 00                	push   0x0
c001b49e:	6a 00                	push   0x0
c001b4a0:	53                   	push   ebx
c001b4a1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b4a4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b4aa:	83 c4 20             	add    esp,0x20
c001b4ad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b4b0:	74 12                	je     c001b4c4 <Device::closeAll()+0x46>
c001b4b2:	83 ec 0c             	sub    esp,0xc
c001b4b5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b4b8:	e8 c1 ff ff ff       	call   c001b47e <Device::closeAll()>
c001b4bd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b4bf:	83 c4 10             	add    esp,0x10
c001b4c2:	eb e9                	jmp    c001b4ad <Device::closeAll()+0x2f>
c001b4c4:	83 c4 08             	add    esp,0x8
c001b4c7:	5b                   	pop    ebx
c001b4c8:	c3                   	ret    
c001b4c9:	90                   	nop

c001b4ca <DriverlessDevice::DriverlessDevice(char const*)>:
c001b4ca:	83 ec 0c             	sub    esp,0xc
c001b4cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4d1:	83 ec 08             	sub    esp,0x8
c001b4d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b4d8:	50                   	push   eax
c001b4d9:	e8 9a fe ff ff       	call   c001b378 <Device::Device(char const*)>
c001b4de:	83 c4 10             	add    esp,0x10
c001b4e1:	ba 08 1e 03 c0       	mov    edx,0xc0031e08
c001b4e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4ea:	89 10                	mov    DWORD PTR [eax],edx
c001b4ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4f0:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c001b4fa:	90                   	nop
c001b4fb:	83 c4 0c             	add    esp,0xc
c001b4fe:	c3                   	ret    
c001b4ff:	90                   	nop

c001b500 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001b500:	57                   	push   edi
c001b501:	56                   	push   esi
c001b502:	53                   	push   ebx
c001b503:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b507:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b50b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b50f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001b515:	75 0c                	jne    c001b523 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001b517:	52                   	push   edx
c001b518:	52                   	push   edx
c001b519:	53                   	push   ebx
c001b51a:	56                   	push   esi
c001b51b:	e8 f2 34 01 00       	call   c002ea12 <LinkedList<Device>::addElement(Device*)>
c001b520:	83 c4 10             	add    esp,0x10
c001b523:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b529:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b52c:	74 12                	je     c001b540 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001b52e:	50                   	push   eax
c001b52f:	57                   	push   edi
c001b530:	56                   	push   esi
c001b531:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b534:	e8 c7 ff ff ff       	call   c001b500 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b539:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b53b:	83 c4 10             	add    esp,0x10
c001b53e:	eb e9                	jmp    c001b529 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001b540:	5b                   	pop    ebx
c001b541:	5e                   	pop    esi
c001b542:	5f                   	pop    edi
c001b543:	c3                   	ret    

c001b544 <getDevicesOfType(DeviceType)>:
c001b544:	53                   	push   ebx
c001b545:	83 ec 14             	sub    esp,0x14
c001b548:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b54c:	53                   	push   ebx
c001b54d:	e8 9c 35 01 00       	call   c002eaee <LinkedList<Device>::LinkedList()>
c001b552:	83 c4 0c             	add    esp,0xc
c001b555:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b559:	53                   	push   ebx
c001b55a:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001b560:	e8 9b ff ff ff       	call   c001b500 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b565:	89 d8                	mov    eax,ebx
c001b567:	83 c4 18             	add    esp,0x18
c001b56a:	5b                   	pop    ebx
c001b56b:	c2 04 00             	ret    0x4
c001b56e:	66 90                	xchg   ax,ax

c001b570 <HardDiskController::HardDiskController(char const*)>:
c001b570:	83 ec 0c             	sub    esp,0xc
c001b573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b577:	83 ec 08             	sub    esp,0x8
c001b57a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b57e:	50                   	push   eax
c001b57f:	e8 f4 fd ff ff       	call   c001b378 <Device::Device(char const*)>
c001b584:	83 c4 10             	add    esp,0x10
c001b587:	ba 34 1e 03 c0       	mov    edx,0xc0031e34
c001b58c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b590:	89 10                	mov    DWORD PTR [eax],edx
c001b592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b596:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001b5a0:	90                   	nop
c001b5a1:	83 c4 0c             	add    esp,0xc
c001b5a4:	c3                   	ret    
c001b5a5:	90                   	nop
c001b5a6:	66 90                	xchg   ax,ax

c001b5a8 <HardDiskController::~HardDiskController()>:
c001b5a8:	83 ec 0c             	sub    esp,0xc
c001b5ab:	ba 34 1e 03 c0       	mov    edx,0xc0031e34
c001b5b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5b4:	89 10                	mov    DWORD PTR [eax],edx
c001b5b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5ba:	83 ec 0c             	sub    esp,0xc
c001b5bd:	50                   	push   eax
c001b5be:	e8 55 fb ff ff       	call   c001b118 <Device::~Device()>
c001b5c3:	83 c4 10             	add    esp,0x10
c001b5c6:	90                   	nop
c001b5c7:	83 c4 0c             	add    esp,0xc
c001b5ca:	c3                   	ret    
c001b5cb:	90                   	nop

c001b5cc <HardDiskController::~HardDiskController()>:
c001b5cc:	83 ec 0c             	sub    esp,0xc
c001b5cf:	83 ec 0c             	sub    esp,0xc
c001b5d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b5d6:	e8 cd ff ff ff       	call   c001b5a8 <HardDiskController::~HardDiskController()>
c001b5db:	83 c4 10             	add    esp,0x10
c001b5de:	83 ec 08             	sub    esp,0x8
c001b5e1:	68 58 01 00 00       	push   0x158
c001b5e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b5ea:	e8 79 da ff ff       	call   c0019068 <operator delete(void*, unsigned long)>
c001b5ef:	83 c4 10             	add    esp,0x10
c001b5f2:	83 c4 0c             	add    esp,0xc
c001b5f5:	c3                   	ret    

c001b5f6 <PhysicalDisk::eject()>:
c001b5f6:	83 c8 ff             	or     eax,0xffffffff
c001b5f9:	c3                   	ret    

c001b5fa <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001b5fa:	83 ec 0c             	sub    esp,0xc
c001b5fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b601:	83 ec 08             	sub    esp,0x8
c001b604:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b608:	50                   	push   eax
c001b609:	e8 6a fd ff ff       	call   c001b378 <Device::Device(char const*)>
c001b60e:	83 c4 10             	add    esp,0x10
c001b611:	ba 60 1e 03 c0       	mov    edx,0xc0031e60
c001b616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b61a:	89 10                	mov    DWORD PTR [eax],edx
c001b61c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b620:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001b627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b62b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001b632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b636:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001b640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b644:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b648:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b652:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b65c:	90                   	nop
c001b65d:	83 c4 0c             	add    esp,0xc
c001b660:	c3                   	ret    
c001b661:	90                   	nop

c001b662 <PhysicalDisk::startCache()>:
c001b662:	56                   	push   esi
c001b663:	53                   	push   ebx
c001b664:	83 ec 10             	sub    esp,0x10
c001b667:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b66b:	6a 44                	push   0x44
c001b66d:	e8 94 ac ff ff       	call   c0016306 <malloc>
c001b672:	89 c6                	mov    esi,eax
c001b674:	58                   	pop    eax
c001b675:	5a                   	pop    edx
c001b676:	53                   	push   ebx
c001b677:	56                   	push   esi
c001b678:	e8 6f 17 00 00       	call   c001cdec <VCache::VCache(PhysicalDisk*)>
c001b67d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001b683:	83 c4 14             	add    esp,0x14
c001b686:	5b                   	pop    ebx
c001b687:	5e                   	pop    esi
c001b688:	c3                   	ret    
c001b689:	90                   	nop

c001b68a <PhysicalDisk::~PhysicalDisk()>:
c001b68a:	83 ec 0c             	sub    esp,0xc
c001b68d:	ba 60 1e 03 c0       	mov    edx,0xc0031e60
c001b692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b696:	89 10                	mov    DWORD PTR [eax],edx
c001b698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b69c:	83 ec 0c             	sub    esp,0xc
c001b69f:	50                   	push   eax
c001b6a0:	e8 73 fa ff ff       	call   c001b118 <Device::~Device()>
c001b6a5:	83 c4 10             	add    esp,0x10
c001b6a8:	90                   	nop
c001b6a9:	83 c4 0c             	add    esp,0xc
c001b6ac:	c3                   	ret    
c001b6ad:	90                   	nop

c001b6ae <PhysicalDisk::~PhysicalDisk()>:
c001b6ae:	83 ec 0c             	sub    esp,0xc
c001b6b1:	83 ec 0c             	sub    esp,0xc
c001b6b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6b8:	e8 cd ff ff ff       	call   c001b68a <PhysicalDisk::~PhysicalDisk()>
c001b6bd:	83 c4 10             	add    esp,0x10
c001b6c0:	83 ec 08             	sub    esp,0x8
c001b6c3:	68 6c 01 00 00       	push   0x16c
c001b6c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6cc:	e8 97 d9 ff ff       	call   c0019068 <operator delete(void*, unsigned long)>
c001b6d1:	83 c4 10             	add    esp,0x10
c001b6d4:	83 c4 0c             	add    esp,0xc
c001b6d7:	c3                   	ret    

c001b6d8 <int_handler>:
c001b6d8:	55                   	push   ebp
c001b6d9:	57                   	push   edi
c001b6da:	56                   	push   esi
c001b6db:	53                   	push   ebx
c001b6dc:	83 ec 0c             	sub    esp,0xc
c001b6df:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b6e3:	80 3d 88 f9 03 c0 00 	cmp    BYTE PTR ds:0xc003f988,0x0
c001b6ea:	74 0b                	je     c001b6f7 <int_handler+0x1f>
c001b6ec:	fa                   	cli    
c001b6ed:	f4                   	hlt    
c001b6ee:	80 3d 88 f9 03 c0 00 	cmp    BYTE PTR ds:0xc003f988,0x0
c001b6f5:	75 f5                	jne    c001b6ec <int_handler+0x14>
c001b6f7:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001b6fa:	8d 46 e0             	lea    eax,[esi-0x20]
c001b6fd:	83 f8 17             	cmp    eax,0x17
c001b700:	76 40                	jbe    c001b742 <int_handler+0x6a>
c001b702:	c1 e6 04             	shl    esi,0x4
c001b705:	31 db                	xor    ebx,ebx
c001b707:	8d ae 20 df 03 c0    	lea    ebp,[esi-0x3ffc20e0]
c001b70d:	81 c6 20 cf 03 c0    	add    esi,0xc003cf20
c001b713:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001b717:	85 c0                	test   eax,eax
c001b719:	74 13                	je     c001b72e <int_handler+0x56>
c001b71b:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001b71e:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001b722:	74 2c                	je     c001b750 <int_handler+0x78>
c001b724:	83 ec 08             	sub    esp,0x8
c001b727:	52                   	push   edx
c001b728:	57                   	push   edi
c001b729:	ff d0                	call   eax
c001b72b:	83 c4 10             	add    esp,0x10
c001b72e:	83 c3 01             	add    ebx,0x1
c001b731:	83 fb 04             	cmp    ebx,0x4
c001b734:	75 dd                	jne    c001b713 <int_handler+0x3b>
c001b736:	83 c4 0c             	add    esp,0xc
c001b739:	31 c0                	xor    eax,eax
c001b73b:	5b                   	pop    ebx
c001b73c:	31 d2                	xor    edx,edx
c001b73e:	5e                   	pop    esi
c001b73f:	5f                   	pop    edi
c001b740:	5d                   	pop    ebp
c001b741:	c3                   	ret    
c001b742:	83 ec 0c             	sub    esp,0xc
c001b745:	50                   	push   eax
c001b746:	e8 2d ba 00 00       	call   c0027178 <HalEndOfInterrupt(int)>
c001b74b:	83 c4 10             	add    esp,0x10
c001b74e:	eb b2                	jmp    c001b702 <int_handler+0x2a>
c001b750:	83 ec 08             	sub    esp,0x8
c001b753:	52                   	push   edx
c001b754:	57                   	push   edi
c001b755:	ff d0                	call   eax
c001b757:	83 c4 10             	add    esp,0x10
c001b75a:	83 c4 0c             	add    esp,0xc
c001b75d:	5b                   	pop    ebx
c001b75e:	5e                   	pop    esi
c001b75f:	5f                   	pop    edi
c001b760:	5d                   	pop    ebp
c001b761:	c3                   	ret    

c001b762 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c001b762:	56                   	push   esi
c001b763:	31 c0                	xor    eax,eax
c001b765:	53                   	push   ebx
c001b766:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b76a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b76e:	89 ca                	mov    edx,ecx
c001b770:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b774:	c1 e2 04             	shl    edx,0x4
c001b777:	83 bc 82 20 df 03 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffc20e0],0x0
c001b77f:	74 17                	je     c001b798 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001b781:	83 c0 01             	add    eax,0x1
c001b784:	83 f8 04             	cmp    eax,0x4
c001b787:	75 ee                	jne    c001b777 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001b789:	c7 44 24 0c 90 1e 03 c0 	mov    DWORD PTR [esp+0xc],0xc0031e90
c001b791:	5b                   	pop    ebx
c001b792:	5e                   	pop    esi
c001b793:	e9 16 4a 00 00       	jmp    c00201ae <KePanic(char const*)>
c001b798:	8d 04 88             	lea    eax,[eax+ecx*4]
c001b79b:	89 1c 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],ebx
c001b7a2:	89 34 85 20 cf 03 c0 	mov    DWORD PTR [eax*4-0x3ffc30e0],esi
c001b7a9:	5b                   	pop    ebx
c001b7aa:	5e                   	pop    esi
c001b7ab:	c3                   	ret    

c001b7ac <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b7ac:	57                   	push   edi
c001b7ad:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001b7b3:	56                   	push   esi
c001b7b4:	53                   	push   ebx
c001b7b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b7b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b7bd:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001b7c4:	74 54                	je     c001b81a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c001b7c6:	89 c7                	mov    edi,eax
c001b7c8:	84 c0                	test   al,al
c001b7ca:	74 1d                	je     c001b7e9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c001b7cc:	83 fe 0f             	cmp    esi,0xf
c001b7cf:	0f 8f d5 00 00 00    	jg     c001b8aa <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c001b7d5:	0f b6 b6 c8 3a 03 c0 	movzx  esi,BYTE PTR [esi-0x3ffcc538]
c001b7dc:	0f b7 bc 36 c0 f6 03 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffc0940]
c001b7e4:	d1 ef                	shr    edi,1
c001b7e6:	83 e7 01             	and    edi,0x1
c001b7e9:	83 ec 08             	sub    esp,0x8
c001b7ec:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c001b7f1:	31 db                	xor    ebx,ebx
c001b7f3:	50                   	push   eax
c001b7f4:	68 9d 1e 03 c0       	push   0xc0031e9d
c001b7f9:	e8 97 d9 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c001b7fe:	83 c4 10             	add    esp,0x10
c001b801:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c001b806:	85 c0                	test   eax,eax
c001b808:	7f 55                	jg     c001b85f <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c001b80a:	83 ec 0c             	sub    esp,0xc
c001b80d:	68 b4 1e 03 c0       	push   0xc0031eb4
c001b812:	e8 97 49 00 00       	call   c00201ae <KePanic(char const*)>
c001b817:	83 c4 10             	add    esp,0x10
c001b81a:	8d 7e 20             	lea    edi,[esi+0x20]
c001b81d:	89 f8                	mov    eax,edi
c001b81f:	31 d2                	xor    edx,edx
c001b821:	c1 e0 04             	shl    eax,0x4
c001b824:	8b 8c 90 20 df 03 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffc20e0]
c001b82b:	85 c9                	test   ecx,ecx
c001b82d:	0f 84 8e 00 00 00    	je     c001b8c1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c001b833:	83 c2 01             	add    edx,0x1
c001b836:	83 fa 04             	cmp    edx,0x4
c001b839:	75 e9                	jne    c001b824 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c001b83b:	83 ec 0c             	sub    esp,0xc
c001b83e:	68 08 1f 03 c0       	push   0xc0031f08
c001b843:	e8 66 49 00 00       	call   c00201ae <KePanic(char const*)>
c001b848:	83 c4 10             	add    esp,0x10
c001b84b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b850:	5b                   	pop    ebx
c001b851:	5e                   	pop    esi
c001b852:	5f                   	pop    edi
c001b853:	c3                   	ret    
c001b854:	83 c3 01             	add    ebx,0x1
c001b857:	39 1d c0 0b 04 c0    	cmp    DWORD PTR ds:0xc0040bc0,ebx
c001b85d:	7e ab                	jle    c001b80a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c001b85f:	83 ec 08             	sub    esp,0x8
c001b862:	8b 04 9d e0 0b 04 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffbf420]
c001b869:	56                   	push   esi
c001b86a:	50                   	push   eax
c001b86b:	e8 e8 20 01 00       	call   c002d958 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001b870:	83 c4 10             	add    esp,0x10
c001b873:	84 c0                	test   al,al
c001b875:	74 dd                	je     c001b854 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c001b877:	83 ec 04             	sub    esp,0x4
c001b87a:	89 f8                	mov    eax,edi
c001b87c:	8b 1c 9d e0 0b 04 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffbf420]
c001b883:	0f b6 f8             	movzx  edi,al
c001b886:	57                   	push   edi
c001b887:	8d 7e 20             	lea    edi,[esi+0x20]
c001b88a:	6a 00                	push   0x0
c001b88c:	89 f8                	mov    eax,edi
c001b88e:	0f b6 c0             	movzx  eax,al
c001b891:	50                   	push   eax
c001b892:	89 f0                	mov    eax,esi
c001b894:	6a 00                	push   0x0
c001b896:	0f b6 c0             	movzx  eax,al
c001b899:	6a 00                	push   0x0
c001b89b:	50                   	push   eax
c001b89c:	53                   	push   ebx
c001b89d:	e8 22 22 01 00       	call   c002dac4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001b8a2:	83 c4 20             	add    esp,0x20
c001b8a5:	e9 73 ff ff ff       	jmp    c001b81d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c001b8aa:	83 ec 0c             	sub    esp,0xc
c001b8ad:	31 ff                	xor    edi,edi
c001b8af:	68 d0 1e 03 c0       	push   0xc0031ed0
c001b8b4:	e8 f5 48 00 00       	call   c00201ae <KePanic(char const*)>
c001b8b9:	83 c4 10             	add    esp,0x10
c001b8bc:	e9 28 ff ff ff       	jmp    c001b7e9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c001b8c1:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b8c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b8c8:	89 14 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],edx
c001b8cf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b8d3:	5b                   	pop    ebx
c001b8d4:	89 14 85 20 cf 03 c0 	mov    DWORD PTR [eax*4-0x3ffc30e0],edx
c001b8db:	89 f0                	mov    eax,esi
c001b8dd:	5e                   	pop    esi
c001b8de:	5f                   	pop    edi
c001b8df:	c3                   	ret    

c001b8e0 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c001b8e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8e4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b8e8:	c1 e0 04             	shl    eax,0x4
c001b8eb:	8d 50 10             	lea    edx,[eax+0x10]
c001b8ee:	39 88 20 df 03 c0    	cmp    DWORD PTR [eax-0x3ffc20e0],ecx
c001b8f4:	74 08                	je     c001b8fe <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001b8f6:	83 c0 04             	add    eax,0x4
c001b8f9:	39 d0                	cmp    eax,edx
c001b8fb:	75 f1                	jne    c001b8ee <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001b8fd:	c3                   	ret    
c001b8fe:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001b908:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001b912:	eb e2                	jmp    c001b8f6 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001b914 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b914:	53                   	push   ebx
c001b915:	83 ec 08             	sub    esp,0x8
c001b918:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b91c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b921:	74 0e                	je     c001b931 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001b923:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001b928:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c001b92f:	75 37                	jne    c001b968 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c001b931:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b935:	83 c0 20             	add    eax,0x20
c001b938:	c1 e0 04             	shl    eax,0x4
c001b93b:	8d 50 10             	lea    edx,[eax+0x10]
c001b93e:	39 98 20 df 03 c0    	cmp    DWORD PTR [eax-0x3ffc20e0],ebx
c001b944:	74 0c                	je     c001b952 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c001b946:	83 c0 04             	add    eax,0x4
c001b949:	39 d0                	cmp    eax,edx
c001b94b:	75 f1                	jne    c001b93e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c001b94d:	83 c4 08             	add    esp,0x8
c001b950:	5b                   	pop    ebx
c001b951:	c3                   	ret    
c001b952:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001b95c:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001b966:	eb de                	jmp    c001b946 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c001b968:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c001b96d:	7f 11                	jg     c001b980 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c001b96f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b973:	0f b6 80 c8 3a 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffcc538]
c001b97a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b97e:	eb b1                	jmp    c001b931 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001b980:	83 ec 0c             	sub    esp,0xc
c001b983:	68 c1 1e 03 c0       	push   0xc0031ec1
c001b988:	e8 21 48 00 00       	call   c00201ae <KePanic(char const*)>
c001b98d:	83 c4 10             	add    esp,0x10
c001b990:	eb 9f                	jmp    c001b931 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c001b992 <setupINTS()>:
c001b992:	31 c0                	xor    eax,eax
c001b994:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001b99e:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001b9a8:	c7 80 24 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20dc],0x0
c001b9b2:	c7 80 24 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30dc],0x0
c001b9bc:	c7 80 28 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20d8],0x0
c001b9c6:	c7 80 28 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30d8],0x0
c001b9d0:	c7 80 2c df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20d4],0x0
c001b9da:	c7 80 2c cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30d4],0x0
c001b9e4:	83 c0 10             	add    eax,0x10
c001b9e7:	3d 00 10 00 00       	cmp    eax,0x1000
c001b9ec:	75 a6                	jne    c001b994 <setupINTS()+0x2>
c001b9ee:	c3                   	ret    

c001b9ef <convertLegacyIRQNumber(int)>:
c001b9ef:	83 ec 0c             	sub    esp,0xc
c001b9f2:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001b9f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9fc:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001ba03:	74 0c                	je     c001ba11 <convertLegacyIRQNumber(int)+0x22>
c001ba05:	83 f8 0f             	cmp    eax,0xf
c001ba08:	7f 0b                	jg     c001ba15 <convertLegacyIRQNumber(int)+0x26>
c001ba0a:	0f b6 80 c8 3a 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffcc538]
c001ba11:	83 c4 0c             	add    esp,0xc
c001ba14:	c3                   	ret    
c001ba15:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ba19:	83 ec 0c             	sub    esp,0xc
c001ba1c:	68 d0 1e 03 c0       	push   0xc0031ed0
c001ba21:	e8 88 47 00 00       	call   c00201ae <KePanic(char const*)>
c001ba26:	83 c4 10             	add    esp,0x10
c001ba29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba2d:	83 c4 0c             	add    esp,0xc
c001ba30:	c3                   	ret    
c001ba31:	90                   	nop

c001ba32 <startGUI(void*)>:
c001ba32:	55                   	push   ebp
c001ba33:	89 e5                	mov    ebp,esp
c001ba35:	53                   	push   ebx
c001ba36:	83 ec 04             	sub    esp,0x4
c001ba39:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001ba3e:	83 e8 01             	sub    eax,0x1
c001ba41:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001ba46:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001ba4b:	85 c0                	test   eax,eax
c001ba4d:	75 01                	jne    c001ba50 <startGUI(void*)+0x1e>
c001ba4f:	fb                   	sti    
c001ba50:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001ba56:	83 ec 08             	sub    esp,0x8
c001ba59:	6a 01                	push   0x1
c001ba5b:	68 2d 1f 03 c0       	push   0xc0031f2d
c001ba60:	e8 74 8c 00 00       	call   c00246d9 <Thr::loadDLL(char const*, bool)>
c001ba65:	83 c4 10             	add    esp,0x10
c001ba68:	83 ec 08             	sub    esp,0x8
c001ba6b:	53                   	push   ebx
c001ba6c:	50                   	push   eax
c001ba6d:	e8 b9 8e 00 00       	call   c002492b <Thr::executeDLL(unsigned long, void*)>
c001ba72:	83 c4 10             	add    esp,0x10
c001ba75:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001ba7b:	83 ec 08             	sub    esp,0x8
c001ba7e:	6a 01                	push   0x1
c001ba80:	68 47 1f 03 c0       	push   0xc0031f47
c001ba85:	e8 4f 8c 00 00       	call   c00246d9 <Thr::loadDLL(char const*, bool)>
c001ba8a:	83 c4 10             	add    esp,0x10
c001ba8d:	83 ec 08             	sub    esp,0x8
c001ba90:	53                   	push   ebx
c001ba91:	50                   	push   eax
c001ba92:	e8 94 8e 00 00       	call   c002492b <Thr::executeDLL(unsigned long, void*)>
c001ba97:	83 c4 10             	add    esp,0x10
c001ba9a:	eb fe                	jmp    c001ba9a <startGUI(void*)+0x68>

c001ba9c <startGUIVESA(void*)>:
c001ba9c:	55                   	push   ebp
c001ba9d:	89 e5                	mov    ebp,esp
c001ba9f:	53                   	push   ebx
c001baa0:	83 ec 04             	sub    esp,0x4
c001baa3:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001baa8:	83 e8 01             	sub    eax,0x1
c001baab:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bab0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bab5:	85 c0                	test   eax,eax
c001bab7:	75 01                	jne    c001baba <startGUIVESA(void*)+0x1e>
c001bab9:	fb                   	sti    
c001baba:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bac0:	83 ec 08             	sub    esp,0x8
c001bac3:	6a 01                	push   0x1
c001bac5:	68 65 1f 03 c0       	push   0xc0031f65
c001baca:	e8 0a 8c 00 00       	call   c00246d9 <Thr::loadDLL(char const*, bool)>
c001bacf:	83 c4 10             	add    esp,0x10
c001bad2:	83 ec 08             	sub    esp,0x8
c001bad5:	53                   	push   ebx
c001bad6:	50                   	push   eax
c001bad7:	e8 4f 8e 00 00       	call   c002492b <Thr::executeDLL(unsigned long, void*)>
c001badc:	83 c4 10             	add    esp,0x10
c001badf:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bae5:	83 ec 08             	sub    esp,0x8
c001bae8:	6a 01                	push   0x1
c001baea:	68 47 1f 03 c0       	push   0xc0031f47
c001baef:	e8 e5 8b 00 00       	call   c00246d9 <Thr::loadDLL(char const*, bool)>
c001baf4:	83 c4 10             	add    esp,0x10
c001baf7:	83 ec 08             	sub    esp,0x8
c001bafa:	53                   	push   ebx
c001bafb:	50                   	push   eax
c001bafc:	e8 2a 8e 00 00       	call   c002492b <Thr::executeDLL(unsigned long, void*)>
c001bb01:	83 c4 10             	add    esp,0x10
c001bb04:	eb fe                	jmp    c001bb04 <startGUIVESA(void*)+0x68>

c001bb06 <sendKeyToTerminal(unsigned char)>:
c001bb06:	55                   	push   ebp
c001bb07:	89 e5                	mov    ebp,esp
c001bb09:	83 ec 28             	sub    esp,0x28
c001bb0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bb0f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001bb12:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c001bb17:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001bb1b:	83 ec 08             	sub    esp,0x8
c001bb1e:	52                   	push   edx
c001bb1f:	50                   	push   eax
c001bb20:	e8 e1 ba ff ff       	call   c0017606 <VgaText::receiveKey(unsigned char)>
c001bb25:	83 c4 10             	add    esp,0x10
c001bb28:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bb2c:	83 f8 0a             	cmp    eax,0xa
c001bb2f:	74 16                	je     c001bb47 <sendKeyToTerminal(unsigned char)+0x41>
c001bb31:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bb35:	83 f8 03             	cmp    eax,0x3
c001bb38:	74 0d                	je     c001bb47 <sendKeyToTerminal(unsigned char)+0x41>
c001bb3a:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bb3e:	83 f8 1c             	cmp    eax,0x1c
c001bb41:	0f 85 97 00 00 00    	jne    c001bbde <sendKeyToTerminal(unsigned char)+0xd8>
c001bb47:	fa                   	cli    
c001bb48:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bb4d:	83 c0 01             	add    eax,0x1
c001bb50:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bb55:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bb5a:	83 c0 01             	add    eax,0x1
c001bb5d:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001bb62:	a1 20 ef 03 c0       	mov    eax,ds:0xc003ef20
c001bb67:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bb6a:	c7 05 20 ef 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003ef20,0x0
c001bb74:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001bb78:	74 1f                	je     c001bb99 <sendKeyToTerminal(unsigned char)+0x93>
c001bb7a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001bb7d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001bb80:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bb83:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bb86:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bb89:	83 ec 0c             	sub    esp,0xc
c001bb8c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001bb8f:	e8 c0 98 00 00       	call   c0025454 <unblockTask(ThreadControlBlock*)>
c001bb94:	83 c4 10             	add    esp,0x10
c001bb97:	eb db                	jmp    c001bb74 <sendKeyToTerminal(unsigned char)+0x6e>
c001bb99:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bb9e:	83 e8 01             	sub    eax,0x1
c001bba1:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001bba6:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bbab:	85 c0                	test   eax,eax
c001bbad:	75 18                	jne    c001bbc7 <sendKeyToTerminal(unsigned char)+0xc1>
c001bbaf:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c001bbb4:	85 c0                	test   eax,eax
c001bbb6:	74 0f                	je     c001bbc7 <sendKeyToTerminal(unsigned char)+0xc1>
c001bbb8:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c001bbc2:	e8 95 95 00 00       	call   c002515c <schedule()>
c001bbc7:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bbcc:	83 e8 01             	sub    eax,0x1
c001bbcf:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bbd4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bbd9:	85 c0                	test   eax,eax
c001bbdb:	75 01                	jne    c001bbde <sendKeyToTerminal(unsigned char)+0xd8>
c001bbdd:	fb                   	sti    
c001bbde:	90                   	nop
c001bbdf:	c9                   	leave  
c001bbe0:	c3                   	ret    

c001bbe1 <sendKeyboardToken(KeyboardToken)>:
c001bbe1:	55                   	push   ebp
c001bbe2:	89 e5                	mov    ebp,esp
c001bbe4:	83 ec 18             	sub    esp,0x18
c001bbe7:	e8 12 46 00 00       	call   c00201fe <KeUserIOReceived()>
c001bbec:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001bbef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bbf2:	0f b7 c0             	movzx  eax,ax
c001bbf5:	83 f2 01             	xor    edx,0x1
c001bbf8:	88 90 40 ef 03 c0    	mov    BYTE PTR [eax-0x3ffc10c0],dl
c001bbfe:	a1 28 ef 03 c0       	mov    eax,ds:0xc003ef28
c001bc03:	85 c0                	test   eax,eax
c001bc05:	74 24                	je     c001bc2b <sendKeyboardToken(KeyboardToken)+0x4a>
c001bc07:	8b 0d 28 ef 03 c0    	mov    ecx,DWORD PTR ds:0xc003ef28
c001bc0d:	83 ec 04             	sub    esp,0x4
c001bc10:	68 40 ef 03 c0       	push   0xc003ef40
c001bc15:	83 ec 08             	sub    esp,0x8
c001bc18:	89 e2                	mov    edx,esp
c001bc1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bc1d:	89 02                	mov    DWORD PTR [edx],eax
c001bc1f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bc22:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001bc26:	ff d1                	call   ecx
c001bc28:	83 c4 10             	add    esp,0x10
c001bc2b:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001bc2f:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001bc32:	a0 48 f3 03 c0       	mov    al,ds:0xc003f348
c001bc37:	0f b6 d2             	movzx  edx,dl
c001bc3a:	0f b6 c0             	movzx  eax,al
c001bc3d:	39 c2                	cmp    edx,eax
c001bc3f:	74 1c                	je     c001bc5d <sendKeyboardToken(KeyboardToken)+0x7c>
c001bc41:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001bc44:	a2 48 f3 03 c0       	mov    ds:0xc003f348,al
c001bc49:	a0 48 f3 03 c0       	mov    al,ds:0xc003f348
c001bc4e:	0f b6 c0             	movzx  eax,al
c001bc51:	83 ec 0c             	sub    esp,0xc
c001bc54:	50                   	push   eax
c001bc55:	e8 f8 b0 ff ff       	call   c0016d52 <setTerminalScrollLock(bool)>
c001bc5a:	83 c4 10             	add    esp,0x10
c001bc5d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001bc60:	0f b6 c0             	movzx  eax,al
c001bc63:	85 c0                	test   eax,eax
c001bc65:	0f 84 da 00 00 00    	je     c001bd45 <sendKeyboardToken(KeyboardToken)+0x164>
c001bc6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bc6e:	0f b7 c0             	movzx  eax,ax
c001bc71:	3d 18 03 00 00       	cmp    eax,0x318
c001bc76:	75 06                	jne    c001bc7e <sendKeyboardToken(KeyboardToken)+0x9d>
c001bc78:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001bc7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bc81:	0f b7 c0             	movzx  eax,ax
c001bc84:	3d 19 03 00 00       	cmp    eax,0x319
c001bc89:	75 06                	jne    c001bc91 <sendKeyboardToken(KeyboardToken)+0xb0>
c001bc8b:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001bc91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bc94:	0f b7 c0             	movzx  eax,ax
c001bc97:	3d 1a 03 00 00       	cmp    eax,0x31a
c001bc9c:	75 06                	jne    c001bca4 <sendKeyboardToken(KeyboardToken)+0xc3>
c001bc9e:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001bca4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bca7:	0f b7 c0             	movzx  eax,ax
c001bcaa:	3d 1b 03 00 00       	cmp    eax,0x31b
c001bcaf:	75 06                	jne    c001bcb7 <sendKeyboardToken(KeyboardToken)+0xd6>
c001bcb1:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001bcb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bcba:	0f b7 c0             	movzx  eax,ax
c001bcbd:	3d 1c 03 00 00       	cmp    eax,0x31c
c001bcc2:	75 06                	jne    c001bcca <sendKeyboardToken(KeyboardToken)+0xe9>
c001bcc4:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001bcca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bccd:	0f b7 c0             	movzx  eax,ax
c001bcd0:	3d 1d 03 00 00       	cmp    eax,0x31d
c001bcd5:	75 06                	jne    c001bcdd <sendKeyboardToken(KeyboardToken)+0xfc>
c001bcd7:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001bcdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bce0:	0f b7 c0             	movzx  eax,ax
c001bce3:	3d 1e 03 00 00       	cmp    eax,0x31e
c001bce8:	75 06                	jne    c001bcf0 <sendKeyboardToken(KeyboardToken)+0x10f>
c001bcea:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001bcf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bcf3:	0f b7 c0             	movzx  eax,ax
c001bcf6:	3d 1f 03 00 00       	cmp    eax,0x31f
c001bcfb:	75 06                	jne    c001bd03 <sendKeyboardToken(KeyboardToken)+0x122>
c001bcfd:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001bd03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd06:	0f b7 c0             	movzx  eax,ax
c001bd09:	3d 20 03 00 00       	cmp    eax,0x320
c001bd0e:	75 06                	jne    c001bd16 <sendKeyboardToken(KeyboardToken)+0x135>
c001bd10:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001bd16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd19:	0f b7 c0             	movzx  eax,ax
c001bd1c:	3d 21 03 00 00       	cmp    eax,0x321
c001bd21:	75 06                	jne    c001bd29 <sendKeyboardToken(KeyboardToken)+0x148>
c001bd23:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001bd29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd2c:	0f b7 c0             	movzx  eax,ax
c001bd2f:	3d 22 03 00 00       	cmp    eax,0x322
c001bd34:	0f 85 f1 00 00 00    	jne    c001be2b <sendKeyboardToken(KeyboardToken)+0x24a>
c001bd3a:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001bd40:	e9 e6 00 00 00       	jmp    c001be2b <sendKeyboardToken(KeyboardToken)+0x24a>
c001bd45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd48:	0f b7 c0             	movzx  eax,ax
c001bd4b:	3d 18 03 00 00       	cmp    eax,0x318
c001bd50:	75 0a                	jne    c001bd5c <sendKeyboardToken(KeyboardToken)+0x17b>
c001bd52:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001bd58:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bd5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd5f:	0f b7 c0             	movzx  eax,ax
c001bd62:	3d 19 03 00 00       	cmp    eax,0x319
c001bd67:	75 0a                	jne    c001bd73 <sendKeyboardToken(KeyboardToken)+0x192>
c001bd69:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001bd6f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bd73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd76:	0f b7 c0             	movzx  eax,ax
c001bd79:	3d 1a 03 00 00       	cmp    eax,0x31a
c001bd7e:	75 0a                	jne    c001bd8a <sendKeyboardToken(KeyboardToken)+0x1a9>
c001bd80:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001bd86:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bd8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd8d:	0f b7 c0             	movzx  eax,ax
c001bd90:	3d 1b 03 00 00       	cmp    eax,0x31b
c001bd95:	75 0a                	jne    c001bda1 <sendKeyboardToken(KeyboardToken)+0x1c0>
c001bd97:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001bd9d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bda1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bda4:	0f b7 c0             	movzx  eax,ax
c001bda7:	3d 1c 03 00 00       	cmp    eax,0x31c
c001bdac:	75 0a                	jne    c001bdb8 <sendKeyboardToken(KeyboardToken)+0x1d7>
c001bdae:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001bdb4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bdb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdbb:	0f b7 c0             	movzx  eax,ax
c001bdbe:	3d 1d 03 00 00       	cmp    eax,0x31d
c001bdc3:	75 0a                	jne    c001bdcf <sendKeyboardToken(KeyboardToken)+0x1ee>
c001bdc5:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001bdcb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bdcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdd2:	0f b7 c0             	movzx  eax,ax
c001bdd5:	3d 1e 03 00 00       	cmp    eax,0x31e
c001bdda:	75 0a                	jne    c001bde6 <sendKeyboardToken(KeyboardToken)+0x205>
c001bddc:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001bde2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bde6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bde9:	0f b7 c0             	movzx  eax,ax
c001bdec:	3d 1f 03 00 00       	cmp    eax,0x31f
c001bdf1:	75 0a                	jne    c001bdfd <sendKeyboardToken(KeyboardToken)+0x21c>
c001bdf3:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001bdf9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bdfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be00:	0f b7 c0             	movzx  eax,ax
c001be03:	3d 20 03 00 00       	cmp    eax,0x320
c001be08:	75 0a                	jne    c001be14 <sendKeyboardToken(KeyboardToken)+0x233>
c001be0a:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001be10:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be17:	0f b7 c0             	movzx  eax,ax
c001be1a:	3d 21 03 00 00       	cmp    eax,0x321
c001be1f:	75 0a                	jne    c001be2b <sendKeyboardToken(KeyboardToken)+0x24a>
c001be21:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001be27:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be2e:	0f b7 c0             	movzx  eax,ax
c001be31:	3d 00 02 00 00       	cmp    eax,0x200
c001be36:	75 2f                	jne    c001be67 <sendKeyboardToken(KeyboardToken)+0x286>
c001be38:	a0 40 f3 03 c0       	mov    al,ds:0xc003f340
c001be3d:	83 f0 01             	xor    eax,0x1
c001be40:	0f b6 c0             	movzx  eax,al
c001be43:	85 c0                	test   eax,eax
c001be45:	74 20                	je     c001be67 <sendKeyboardToken(KeyboardToken)+0x286>
c001be47:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001be4c:	6a 01                	push   0x1
c001be4e:	6a 00                	push   0x0
c001be50:	68 32 ba 01 c0       	push   0xc001ba32
c001be55:	50                   	push   eax
c001be56:	e8 b1 90 00 00       	call   c0024f0c <Process::createThread(void (*)(void*), void*, int)>
c001be5b:	83 c4 10             	add    esp,0x10
c001be5e:	c6 05 40 f3 03 c0 01 	mov    BYTE PTR ds:0xc003f340,0x1
c001be65:	eb 3a                	jmp    c001bea1 <sendKeyboardToken(KeyboardToken)+0x2c0>
c001be67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be6a:	0f b7 c0             	movzx  eax,ax
c001be6d:	3d 01 02 00 00       	cmp    eax,0x201
c001be72:	75 2d                	jne    c001bea1 <sendKeyboardToken(KeyboardToken)+0x2c0>
c001be74:	a0 40 f3 03 c0       	mov    al,ds:0xc003f340
c001be79:	83 f0 01             	xor    eax,0x1
c001be7c:	0f b6 c0             	movzx  eax,al
c001be7f:	85 c0                	test   eax,eax
c001be81:	74 1e                	je     c001bea1 <sendKeyboardToken(KeyboardToken)+0x2c0>
c001be83:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001be88:	6a 01                	push   0x1
c001be8a:	6a 00                	push   0x0
c001be8c:	68 9c ba 01 c0       	push   0xc001ba9c
c001be91:	50                   	push   eax
c001be92:	e8 75 90 00 00       	call   c0024f0c <Process::createThread(void (*)(void*), void*, int)>
c001be97:	83 c4 10             	add    esp,0x10
c001be9a:	c6 05 40 f3 03 c0 01 	mov    BYTE PTR ds:0xc003f340,0x1
c001bea1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bea4:	0f b7 c0             	movzx  eax,ax
c001bea7:	3d 25 03 00 00       	cmp    eax,0x325
c001beac:	75 06                	jne    c001beb4 <sendKeyboardToken(KeyboardToken)+0x2d3>
c001beae:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001beb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001beb7:	0f b7 c0             	movzx  eax,ax
c001beba:	3d 24 03 00 00       	cmp    eax,0x324
c001bebf:	75 06                	jne    c001bec7 <sendKeyboardToken(KeyboardToken)+0x2e6>
c001bec1:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001bec7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001beca:	0f b7 c0             	movzx  eax,ax
c001becd:	3d 23 03 00 00       	cmp    eax,0x323
c001bed2:	75 06                	jne    c001beda <sendKeyboardToken(KeyboardToken)+0x2f9>
c001bed4:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001beda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bedd:	0f b7 c0             	movzx  eax,ax
c001bee0:	3d 26 03 00 00       	cmp    eax,0x326
c001bee5:	75 06                	jne    c001beed <sendKeyboardToken(KeyboardToken)+0x30c>
c001bee7:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001beed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bef0:	0f b7 c0             	movzx  eax,ax
c001bef3:	3d 27 03 00 00       	cmp    eax,0x327
c001bef8:	75 06                	jne    c001bf00 <sendKeyboardToken(KeyboardToken)+0x31f>
c001befa:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001bf00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf03:	0f b7 c0             	movzx  eax,ax
c001bf06:	3d 22 03 00 00       	cmp    eax,0x322
c001bf0b:	75 06                	jne    c001bf13 <sendKeyboardToken(KeyboardToken)+0x332>
c001bf0d:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001bf13:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001bf17:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001bf1a:	83 f0 01             	xor    eax,0x1
c001bf1d:	0f b6 c0             	movzx  eax,al
c001bf20:	85 c0                	test   eax,eax
c001bf22:	74 7c                	je     c001bfa0 <sendKeyboardToken(KeyboardToken)+0x3bf>
c001bf24:	a0 41 f0 03 c0       	mov    al,ds:0xc003f041
c001bf29:	0f b6 c0             	movzx  eax,al
c001bf2c:	85 c0                	test   eax,eax
c001bf2e:	74 43                	je     c001bf73 <sendKeyboardToken(KeyboardToken)+0x392>
c001bf30:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001bf34:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001bf38:	85 c0                	test   eax,eax
c001bf3a:	74 2b                	je     c001bf67 <sendKeyboardToken(KeyboardToken)+0x386>
c001bf3c:	8b 15 44 f3 03 c0    	mov    edx,DWORD PTR ds:0xc003f344
c001bf42:	89 d0                	mov    eax,edx
c001bf44:	c1 e0 02             	shl    eax,0x2
c001bf47:	01 d0                	add    eax,edx
c001bf49:	01 c0                	add    eax,eax
c001bf4b:	a3 44 f3 03 c0       	mov    ds:0xc003f344,eax
c001bf50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf53:	0f b7 c0             	movzx  eax,ax
c001bf56:	8d 50 d0             	lea    edx,[eax-0x30]
c001bf59:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001bf5e:	01 d0                	add    eax,edx
c001bf60:	a3 44 f3 03 c0       	mov    ds:0xc003f344,eax
c001bf65:	eb 71                	jmp    c001bfd8 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001bf67:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001bf71:	eb 65                	jmp    c001bfd8 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001bf73:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001bf78:	85 c0                	test   eax,eax
c001bf7a:	74 18                	je     c001bf94 <sendKeyboardToken(KeyboardToken)+0x3b3>
c001bf7c:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001bf81:	0f b6 c0             	movzx  eax,al
c001bf84:	83 ec 0c             	sub    esp,0xc
c001bf87:	50                   	push   eax
c001bf88:	e8 79 fb ff ff       	call   c001bb06 <sendKeyToTerminal(unsigned char)>
c001bf8d:	83 c4 10             	add    esp,0x10
c001bf90:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001bf94:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001bf9e:	eb 38                	jmp    c001bfd8 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001bfa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bfa3:	0f b7 c0             	movzx  eax,ax
c001bfa6:	3d 01 01 00 00       	cmp    eax,0x101
c001bfab:	75 2b                	jne    c001bfd8 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001bfad:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001bfb2:	85 c0                	test   eax,eax
c001bfb4:	74 18                	je     c001bfce <sendKeyboardToken(KeyboardToken)+0x3ed>
c001bfb6:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001bfbb:	0f b6 c0             	movzx  eax,al
c001bfbe:	83 ec 0c             	sub    esp,0xc
c001bfc1:	50                   	push   eax
c001bfc2:	e8 3f fb ff ff       	call   c001bb06 <sendKeyToTerminal(unsigned char)>
c001bfc7:	83 c4 10             	add    esp,0x10
c001bfca:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001bfce:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001bfd8:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001bfdb:	83 f0 01             	xor    eax,0x1
c001bfde:	0f b6 c0             	movzx  eax,al
c001bfe1:	85 c0                	test   eax,eax
c001bfe3:	74 5a                	je     c001c03f <sendKeyboardToken(KeyboardToken)+0x45e>
c001bfe5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001bfe8:	83 f0 01             	xor    eax,0x1
c001bfeb:	0f b6 c0             	movzx  eax,al
c001bfee:	85 c0                	test   eax,eax
c001bff0:	74 4d                	je     c001c03f <sendKeyboardToken(KeyboardToken)+0x45e>
c001bff2:	a0 40 f0 03 c0       	mov    al,ds:0xc003f040
c001bff7:	83 f0 01             	xor    eax,0x1
c001bffa:	0f b6 c0             	movzx  eax,al
c001bffd:	85 c0                	test   eax,eax
c001bfff:	74 3e                	je     c001c03f <sendKeyboardToken(KeyboardToken)+0x45e>
c001c001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c004:	0f b7 c0             	movzx  eax,ax
c001c007:	83 f8 1f             	cmp    eax,0x1f
c001c00a:	76 0b                	jbe    c001c017 <sendKeyboardToken(KeyboardToken)+0x436>
c001c00c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c00f:	0f b7 c0             	movzx  eax,ax
c001c012:	83 f8 7e             	cmp    eax,0x7e
c001c015:	76 16                	jbe    c001c02d <sendKeyboardToken(KeyboardToken)+0x44c>
c001c017:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c01a:	0f b7 c0             	movzx  eax,ax
c001c01d:	83 f8 0a             	cmp    eax,0xa
c001c020:	74 0b                	je     c001c02d <sendKeyboardToken(KeyboardToken)+0x44c>
c001c022:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c025:	0f b7 c0             	movzx  eax,ax
c001c028:	83 f8 08             	cmp    eax,0x8
c001c02b:	75 12                	jne    c001c03f <sendKeyboardToken(KeyboardToken)+0x45e>
c001c02d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c030:	0f b6 c0             	movzx  eax,al
c001c033:	83 ec 0c             	sub    esp,0xc
c001c036:	50                   	push   eax
c001c037:	e8 ca fa ff ff       	call   c001bb06 <sendKeyToTerminal(unsigned char)>
c001c03c:	83 c4 10             	add    esp,0x10
c001c03f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001c042:	83 f0 01             	xor    eax,0x1
c001c045:	0f b6 c0             	movzx  eax,al
c001c048:	85 c0                	test   eax,eax
c001c04a:	74 5d                	je     c001c0a9 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c04c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c04f:	83 f0 01             	xor    eax,0x1
c001c052:	0f b6 c0             	movzx  eax,al
c001c055:	85 c0                	test   eax,eax
c001c057:	74 50                	je     c001c0a9 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c059:	a0 40 f0 03 c0       	mov    al,ds:0xc003f040
c001c05e:	0f b6 c0             	movzx  eax,al
c001c061:	85 c0                	test   eax,eax
c001c063:	74 44                	je     c001c0a9 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c065:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c068:	0f b7 c0             	movzx  eax,ax
c001c06b:	83 f8 3f             	cmp    eax,0x3f
c001c06e:	76 39                	jbe    c001c0a9 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c070:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c073:	0f b7 c0             	movzx  eax,ax
c001c076:	83 f8 7f             	cmp    eax,0x7f
c001c079:	77 2e                	ja     c001c0a9 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c07b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c07e:	88 c2                	mov    dl,al
c001c080:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c083:	0f b7 c0             	movzx  eax,ax
c001c086:	83 f8 5f             	cmp    eax,0x5f
c001c089:	76 04                	jbe    c001c08f <sendKeyboardToken(KeyboardToken)+0x4ae>
c001c08b:	b0 20                	mov    al,0x20
c001c08d:	eb 02                	jmp    c001c091 <sendKeyboardToken(KeyboardToken)+0x4b0>
c001c08f:	b0 00                	mov    al,0x0
c001c091:	89 d1                	mov    ecx,edx
c001c093:	29 c1                	sub    ecx,eax
c001c095:	89 c8                	mov    eax,ecx
c001c097:	83 e8 40             	sub    eax,0x40
c001c09a:	0f b6 c0             	movzx  eax,al
c001c09d:	83 ec 0c             	sub    esp,0xc
c001c0a0:	50                   	push   eax
c001c0a1:	e8 60 fa ff ff       	call   c001bb06 <sendKeyToTerminal(unsigned char)>
c001c0a6:	83 c4 10             	add    esp,0x10
c001c0a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0ac:	0f b7 c0             	movzx  eax,ax
c001c0af:	3d 00 03 00 00       	cmp    eax,0x300
c001c0b4:	75 12                	jne    c001c0c8 <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c0b6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c0b9:	83 f0 01             	xor    eax,0x1
c001c0bc:	0f b6 c0             	movzx  eax,al
c001c0bf:	85 c0                	test   eax,eax
c001c0c1:	74 05                	je     c001c0c8 <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c0c3:	e8 8b ac ff ff       	call   c0016d53 <doTerminalCycle()>
c001c0c8:	90                   	nop
c001c0c9:	c9                   	leave  
c001c0ca:	c3                   	ret    

c001c0cb <clearInternalKeybuffer(VgaText*)>:
c001c0cb:	55                   	push   ebp
c001c0cc:	89 e5                	mov    ebp,esp
c001c0ce:	83 ec 08             	sub    esp,0x8
c001c0d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0d4:	05 02 01 00 00       	add    eax,0x102
c001c0d9:	83 ec 0c             	sub    esp,0xc
c001c0dc:	50                   	push   eax
c001c0dd:	e8 8e 44 fe ff       	call   c0000570 <strlen>
c001c0e2:	83 c4 10             	add    esp,0x10
c001c0e5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c0e8:	81 c2 02 01 00 00    	add    edx,0x102
c001c0ee:	83 ec 04             	sub    esp,0x4
c001c0f1:	50                   	push   eax
c001c0f2:	6a 00                	push   0x0
c001c0f4:	52                   	push   edx
c001c0f5:	e8 f6 43 fe ff       	call   c00004f0 <memset>
c001c0fa:	83 c4 10             	add    esp,0x10
c001c0fd:	90                   	nop
c001c0fe:	c9                   	leave  
c001c0ff:	c3                   	ret    

c001c100 <readKeyboard(VgaText*, char*, unsigned long)>:
c001c100:	55                   	push   ebp
c001c101:	89 e5                	mov    ebp,esp
c001c103:	83 ec 18             	sub    esp,0x18
c001c106:	a1 28 ef 03 c0       	mov    eax,ds:0xc003ef28
c001c10b:	85 c0                	test   eax,eax
c001c10d:	74 2a                	je     c001c139 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c001c10f:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c001c115:	8b 0d 28 ef 03 c0    	mov    ecx,DWORD PTR ds:0xc003ef28
c001c11b:	83 ec 04             	sub    esp,0x4
c001c11e:	68 40 ef 03 c0       	push   0xc003ef40
c001c123:	83 ec 08             	sub    esp,0x8
c001c126:	89 e2                	mov    edx,esp
c001c128:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001c12b:	89 02                	mov    DWORD PTR [edx],eax
c001c12d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001c130:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001c134:	ff d1                	call   ecx
c001c136:	83 c4 10             	add    esp,0x10
c001c139:	fb                   	sti    
c001c13a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001c141:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001c145:	0f 84 0d 01 00 00    	je     c001c258 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c001c14b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c14e:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c154:	0f be c0             	movsx  eax,al
c001c157:	85 c0                	test   eax,eax
c001c159:	75 2c                	jne    c001c187 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c001c15b:	fa                   	cli    
c001c15c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c161:	83 c0 01             	add    eax,0x1
c001c164:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001c169:	e8 ee 8f 00 00       	call   c002515c <schedule()>
c001c16e:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c173:	83 e8 01             	sub    eax,0x1
c001c176:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001c17b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c180:	85 c0                	test   eax,eax
c001c182:	75 c7                	jne    c001c14b <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c184:	fb                   	sti    
c001c185:	eb c4                	jmp    c001c14b <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c187:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c18a:	8d 50 01             	lea    edx,[eax+0x1]
c001c18d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c190:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c193:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c001c199:	88 10                	mov    BYTE PTR [eax],dl
c001c19b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c19e:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c1a4:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001c1a7:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c1ab:	83 f8 03             	cmp    eax,0x3
c001c1ae:	75 1e                	jne    c001c1ce <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c001c1b0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c1b5:	8b 00                	mov    eax,DWORD PTR [eax]
c001c1b7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c1ba:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c1c0:	83 ec 08             	sub    esp,0x8
c001c1c3:	6a 02                	push   0x2
c001c1c5:	50                   	push   eax
c001c1c6:	e8 9c 48 00 00       	call   c0020a67 <KeRaiseSignal(SigHandlerBlock*, int)>
c001c1cb:	83 c4 10             	add    esp,0x10
c001c1ce:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c1d2:	83 f8 1c             	cmp    eax,0x1c
c001c1d5:	75 1e                	jne    c001c1f5 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c001c1d7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c1dc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c1de:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c1e1:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c1e7:	83 ec 08             	sub    esp,0x8
c001c1ea:	6a 09                	push   0x9
c001c1ec:	50                   	push   eax
c001c1ed:	e8 75 48 00 00       	call   c0020a67 <KeRaiseSignal(SigHandlerBlock*, int)>
c001c1f2:	83 c4 10             	add    esp,0x10
c001c1f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1f8:	05 02 01 00 00       	add    eax,0x102
c001c1fd:	83 ec 0c             	sub    esp,0xc
c001c200:	50                   	push   eax
c001c201:	e8 6a 43 fe ff       	call   c0000570 <strlen>
c001c206:	83 c4 10             	add    esp,0x10
c001c209:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c20c:	81 c2 02 01 00 00    	add    edx,0x102
c001c212:	8d 4a 01             	lea    ecx,[edx+0x1]
c001c215:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c218:	81 c2 02 01 00 00    	add    edx,0x102
c001c21e:	83 ec 04             	sub    esp,0x4
c001c221:	50                   	push   eax
c001c222:	51                   	push   ecx
c001c223:	52                   	push   edx
c001c224:	e8 a7 41 fe ff       	call   c00003d0 <memmove>
c001c229:	83 c4 10             	add    esp,0x10
c001c22c:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c001c230:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c001c234:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c238:	83 f8 0a             	cmp    eax,0xa
c001c23b:	74 16                	je     c001c253 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c23d:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c241:	83 f8 03             	cmp    eax,0x3
c001c244:	74 0d                	je     c001c253 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c246:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c24a:	83 f8 1c             	cmp    eax,0x1c
c001c24d:	0f 85 ee fe ff ff    	jne    c001c141 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c001c253:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c256:	eb 03                	jmp    c001c25b <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c001c258:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c25b:	c9                   	leave  
c001c25c:	c3                   	ret    
c001c25d:	90                   	nop

c001c25e <Keyboard::Keyboard(char const*)>:
c001c25e:	83 ec 0c             	sub    esp,0xc
c001c261:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c265:	83 ec 08             	sub    esp,0x8
c001c268:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c26c:	50                   	push   eax
c001c26d:	e8 06 f1 ff ff       	call   c001b378 <Device::Device(char const*)>
c001c272:	83 c4 10             	add    esp,0x10
c001c275:	ba 88 1f 03 c0       	mov    edx,0xc0031f88
c001c27a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c27e:	89 10                	mov    DWORD PTR [eax],edx
c001c280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c284:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001c28e:	c6 05 24 ef 03 c0 01 	mov    BYTE PTR ds:0xc003ef24,0x1
c001c295:	90                   	nop
c001c296:	83 c4 0c             	add    esp,0xc
c001c299:	c3                   	ret    

c001c29a <Keyboard::~Keyboard()>:
c001c29a:	83 ec 0c             	sub    esp,0xc
c001c29d:	ba 88 1f 03 c0       	mov    edx,0xc0031f88
c001c2a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2a6:	89 10                	mov    DWORD PTR [eax],edx
c001c2a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2ac:	83 ec 0c             	sub    esp,0xc
c001c2af:	50                   	push   eax
c001c2b0:	e8 63 ee ff ff       	call   c001b118 <Device::~Device()>
c001c2b5:	83 c4 10             	add    esp,0x10
c001c2b8:	90                   	nop
c001c2b9:	83 c4 0c             	add    esp,0xc
c001c2bc:	c3                   	ret    
c001c2bd:	90                   	nop

c001c2be <Keyboard::~Keyboard()>:
c001c2be:	83 ec 0c             	sub    esp,0xc
c001c2c1:	83 ec 0c             	sub    esp,0xc
c001c2c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2c8:	e8 cd ff ff ff       	call   c001c29a <Keyboard::~Keyboard()>
c001c2cd:	83 c4 10             	add    esp,0x10
c001c2d0:	83 ec 08             	sub    esp,0x8
c001c2d3:	68 5c 01 00 00       	push   0x15c
c001c2d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2dc:	e8 87 cd ff ff       	call   c0019068 <operator delete(void*, unsigned long)>
c001c2e1:	83 c4 10             	add    esp,0x10
c001c2e4:	83 c4 0c             	add    esp,0xc
c001c2e7:	c3                   	ret    

c001c2e8 <LogicalDisk::close(int, int, void*)>:
c001c2e8:	83 c8 ff             	or     eax,0xffffffff
c001c2eb:	c3                   	ret    

c001c2ec <LogicalDisk::~LogicalDisk()>:
c001c2ec:	83 ec 0c             	sub    esp,0xc
c001c2ef:	ba 00 20 03 c0       	mov    edx,0xc0032000
c001c2f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2f8:	89 10                	mov    DWORD PTR [eax],edx
c001c2fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2fe:	83 ec 0c             	sub    esp,0xc
c001c301:	50                   	push   eax
c001c302:	e8 11 ee ff ff       	call   c001b118 <Device::~Device()>
c001c307:	83 c4 10             	add    esp,0x10
c001c30a:	90                   	nop
c001c30b:	83 c4 0c             	add    esp,0xc
c001c30e:	c3                   	ret    
c001c30f:	90                   	nop

c001c310 <LogicalDisk::~LogicalDisk()>:
c001c310:	83 ec 0c             	sub    esp,0xc
c001c313:	83 ec 0c             	sub    esp,0xc
c001c316:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c31a:	e8 cd ff ff ff       	call   c001c2ec <LogicalDisk::~LogicalDisk()>
c001c31f:	83 c4 10             	add    esp,0x10
c001c322:	83 ec 08             	sub    esp,0x8
c001c325:	68 78 01 00 00       	push   0x178
c001c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c32e:	e8 35 cd ff ff       	call   c0019068 <operator delete(void*, unsigned long)>
c001c333:	83 c4 10             	add    esp,0x10
c001c336:	83 c4 0c             	add    esp,0xc
c001c339:	c3                   	ret    

c001c33a <LogicalDisk::open(int, int, void*)>:
c001c33a:	83 ec 18             	sub    esp,0x18
c001c33d:	68 b4 1f 03 c0       	push   0xc0031fb4
c001c342:	e8 67 3e 00 00       	call   c00201ae <KePanic(char const*)>
c001c347:	83 c8 ff             	or     eax,0xffffffff
c001c34a:	83 c4 1c             	add    esp,0x1c
c001c34d:	c3                   	ret    

c001c34e <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001c34e:	53                   	push   ebx
c001c34f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c353:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c357:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c35b:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001c361:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001c367:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001c36d:	77 10                	ja     c001c37f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001c36f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001c375:	89 d3                	mov    ebx,edx
c001c377:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001c37d:	72 05                	jb     c001c384 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001c37f:	83 c8 ff             	or     eax,0xffffffff
c001c382:	89 c2                	mov    edx,eax
c001c384:	5b                   	pop    ebx
c001c385:	c3                   	ret    

c001c386 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001c386:	56                   	push   esi
c001c387:	83 c8 ff             	or     eax,0xffffffff
c001c38a:	53                   	push   ebx
c001c38b:	89 c2                	mov    edx,eax
c001c38d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c391:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001c395:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c399:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c39f:	77 27                	ja     c001c3c8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c3a1:	89 d8                	mov    eax,ebx
c001c3a3:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001c3a9:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001c3af:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c3b4:	89 c2                	mov    edx,eax
c001c3b6:	73 10                	jae    c001c3c8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c3b8:	89 c8                	mov    eax,ecx
c001c3ba:	89 da                	mov    edx,ebx
c001c3bc:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001c3c2:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001c3c8:	5b                   	pop    ebx
c001c3c9:	5e                   	pop    esi
c001c3ca:	c3                   	ret    
c001c3cb:	90                   	nop

c001c3cc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001c3cc:	83 ec 1c             	sub    esp,0x1c
c001c3cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c3d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c3d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c3db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c3df:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c3e3:	89 04 24             	mov    DWORD PTR [esp],eax
c001c3e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c3ea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c3ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c3f2:	83 ec 08             	sub    esp,0x8
c001c3f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c3f9:	50                   	push   eax
c001c3fa:	e8 79 ef ff ff       	call   c001b378 <Device::Device(char const*)>
c001c3ff:	83 c4 10             	add    esp,0x10
c001c402:	ba 00 20 03 c0       	mov    edx,0xc0032000
c001c407:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c40b:	89 10                	mov    DWORD PTR [eax],edx
c001c40d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c411:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c418:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c41c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001c423:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c427:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c42e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c432:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001c43c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c440:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c444:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c448:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001c44e:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001c454:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c458:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c45b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c45f:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001c465:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001c46b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c46f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c473:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001c479:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c47d:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c487:	90                   	nop
c001c488:	83 c4 1c             	add    esp,0x1c
c001c48b:	c3                   	ret    

c001c48c <LogicalDisk::assignDriveLetter()>:
c001c48c:	55                   	push   ebp
c001c48d:	57                   	push   edi
c001c48e:	56                   	push   esi
c001c48f:	53                   	push   ebx
c001c490:	83 ec 14             	sub    esp,0x14
c001c493:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c497:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001c49d:	b0 41                	mov    al,0x41
c001c49f:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c001c4a5:	84 d2                	test   dl,dl
c001c4a7:	75 02                	jne    c001c4ab <LogicalDisk::assignDriveLetter()+0x1f>
c001c4a9:	b0 43                	mov    al,0x43
c001c4ab:	8b 3d 60 f3 03 c0    	mov    edi,DWORD PTR ds:0xc003f360
c001c4b1:	0f b6 ca             	movzx  ecx,dl
c001c4b4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c4b8:	0f be e8             	movsx  ebp,al
c001c4bb:	8b 3d 64 f3 03 c0    	mov    edi,DWORD PTR ds:0xc003f364
c001c4c1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c4c5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001c4c9:	3c 43                	cmp    al,0x43
c001c4cb:	75 10                	jne    c001c4dd <LogicalDisk::assignDriveLetter()+0x51>
c001c4cd:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001c4d4:	75 5a                	jne    c001c530 <LogicalDisk::assignDriveLetter()+0xa4>
c001c4d6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c4db:	75 53                	jne    c001c530 <LogicalDisk::assignDriveLetter()+0xa4>
c001c4dd:	8d 75 bf             	lea    esi,[ebp-0x41]
c001c4e0:	ba 01 00 00 00       	mov    edx,0x1
c001c4e5:	89 34 24             	mov    DWORD PTR [esp],esi
c001c4e8:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c001c4eb:	d3 e2                	shl    edx,cl
c001c4ed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c4f1:	89 d7                	mov    edi,edx
c001c4f3:	89 d6                	mov    esi,edx
c001c4f5:	c1 ff 1f             	sar    edi,0x1f
c001c4f8:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c001c4fc:	21 f9                	and    ecx,edi
c001c4fe:	09 d1                	or     ecx,edx
c001c500:	75 2e                	jne    c001c530 <LogicalDisk::assignDriveLetter()+0xa4>
c001c502:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c506:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c50a:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001c510:	09 f2                	or     edx,esi
c001c512:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c515:	89 15 60 f3 03 c0    	mov    DWORD PTR ds:0xc003f360,edx
c001c51b:	89 1c b5 80 f3 03 c0 	mov    DWORD PTR [esi*4-0x3ffc0c80],ebx
c001c522:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c526:	09 fa                	or     edx,edi
c001c528:	89 15 64 f3 03 c0    	mov    DWORD PTR ds:0xc003f364,edx
c001c52e:	eb 0d                	jmp    c001c53d <LogicalDisk::assignDriveLetter()+0xb1>
c001c530:	8d 50 01             	lea    edx,[eax+0x1]
c001c533:	45                   	inc    ebp
c001c534:	88 d0                	mov    al,dl
c001c536:	80 fa 5b             	cmp    dl,0x5b
c001c539:	75 8e                	jne    c001c4c9 <LogicalDisk::assignDriveLetter()+0x3d>
c001c53b:	31 c0                	xor    eax,eax
c001c53d:	83 c4 14             	add    esp,0x14
c001c540:	5b                   	pop    ebx
c001c541:	5e                   	pop    esi
c001c542:	5f                   	pop    edi
c001c543:	5d                   	pop    ebp
c001c544:	c3                   	ret    
c001c545:	90                   	nop

c001c546 <LogicalDisk::mount()>:
c001c546:	56                   	push   esi
c001c547:	53                   	push   ebx
c001c548:	53                   	push   ebx
c001c549:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c54d:	8b 1d 04 cf 03 c0    	mov    ebx,DWORD PTR ds:0xc003cf04
c001c553:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c001c55d:	85 db                	test   ebx,ebx
c001c55f:	74 27                	je     c001c588 <LogicalDisk::mount()+0x42>
c001c561:	51                   	push   ecx
c001c562:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001c569:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c56b:	83 e8 41             	sub    eax,0x41
c001c56e:	50                   	push   eax
c001c56f:	56                   	push   esi
c001c570:	53                   	push   ebx
c001c571:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c574:	83 c4 10             	add    esp,0x10
c001c577:	84 c0                	test   al,al
c001c579:	74 08                	je     c001c583 <LogicalDisk::mount()+0x3d>
c001c57b:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c001c581:	eb 07                	jmp    c001c58a <LogicalDisk::mount()+0x44>
c001c583:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001c586:	eb d5                	jmp    c001c55d <LogicalDisk::mount()+0x17>
c001c588:	31 c0                	xor    eax,eax
c001c58a:	5a                   	pop    edx
c001c58b:	5b                   	pop    ebx
c001c58c:	5e                   	pop    esi
c001c58d:	c3                   	ret    

c001c58e <LogicalDisk::unmount()>:
c001c58e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c592:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c59c:	c3                   	ret    
c001c59d:	90                   	nop

c001c59e <LogicalDisk::eject()>:
c001c59e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5a2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c5a8:	8b 10                	mov    edx,DWORD PTR [eax]
c001c5aa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c5ae:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001c5b1:	90                   	nop

c001c5b2 <LogicalDisk::unassignDriveLetter()>:
c001c5b2:	57                   	push   edi
c001c5b3:	56                   	push   esi
c001c5b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c5b8:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001c5bf:	85 c9                	test   ecx,ecx
c001c5c1:	75 0f                	jne    c001c5d2 <LogicalDisk::unassignDriveLetter()+0x20>
c001c5c3:	c7 44 24 0c d8 1f 03 c0 	mov    DWORD PTR [esp+0xc],0xc0031fd8
c001c5cb:	5e                   	pop    esi
c001c5cc:	5f                   	pop    edi
c001c5cd:	e9 dc 3b 00 00       	jmp    c00201ae <KePanic(char const*)>
c001c5d2:	83 e9 41             	sub    ecx,0x41
c001c5d5:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001c5dc:	b8 01 00 00 00       	mov    eax,0x1
c001c5e1:	c7 04 8d 80 f3 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffc0c80],0x0
c001c5ec:	d3 e0                	shl    eax,cl
c001c5ee:	89 c7                	mov    edi,eax
c001c5f0:	f7 d0                	not    eax
c001c5f2:	c1 ff 1f             	sar    edi,0x1f
c001c5f5:	21 05 60 f3 03 c0    	and    DWORD PTR ds:0xc003f360,eax
c001c5fb:	89 fe                	mov    esi,edi
c001c5fd:	f7 d6                	not    esi
c001c5ff:	21 35 64 f3 03 c0    	and    DWORD PTR ds:0xc003f364,esi
c001c605:	5e                   	pop    esi
c001c606:	5f                   	pop    edi
c001c607:	c3                   	ret    

c001c608 <LogicalDisk::read(unsigned long long, int, void*)>:
c001c608:	57                   	push   edi
c001c609:	56                   	push   esi
c001c60a:	53                   	push   ebx
c001c60b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c60f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c613:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c617:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c61b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c621:	77 41                	ja     c001c664 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001c623:	99                   	cdq    
c001c624:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001c62a:	01 c8                	add    eax,ecx
c001c62c:	11 da                	adc    edx,ebx
c001c62e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001c634:	19 d7                	sbb    edi,edx
c001c636:	72 33                	jb     c001c66b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001c638:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001c63e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001c644:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c648:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c64c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001c652:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c658:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c65c:	5b                   	pop    ebx
c001c65d:	5e                   	pop    esi
c001c65e:	5f                   	pop    edi
c001c65f:	e9 c8 0a 00 00       	jmp    c001d12c <VCache::read(unsigned long long, int, void*)>
c001c664:	b8 05 00 00 00       	mov    eax,0x5
c001c669:	eb 05                	jmp    c001c670 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001c66b:	b8 07 00 00 00       	mov    eax,0x7
c001c670:	5b                   	pop    ebx
c001c671:	5e                   	pop    esi
c001c672:	5f                   	pop    edi
c001c673:	c3                   	ret    

c001c674 <LogicalDisk::write(unsigned long long, int, void*)>:
c001c674:	57                   	push   edi
c001c675:	56                   	push   esi
c001c676:	53                   	push   ebx
c001c677:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c67b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c67f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c683:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c687:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c68d:	77 41                	ja     c001c6d0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001c68f:	99                   	cdq    
c001c690:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001c696:	01 c8                	add    eax,ecx
c001c698:	11 da                	adc    edx,ebx
c001c69a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001c6a0:	19 d7                	sbb    edi,edx
c001c6a2:	72 33                	jb     c001c6d7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001c6a4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001c6aa:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001c6b0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c6b4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c6b8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001c6be:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c6c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c6c8:	5b                   	pop    ebx
c001c6c9:	5e                   	pop    esi
c001c6ca:	5f                   	pop    edi
c001c6cb:	e9 68 09 00 00       	jmp    c001d038 <VCache::write(unsigned long long, int, void*)>
c001c6d0:	b8 05 00 00 00       	mov    eax,0x5
c001c6d5:	eb 05                	jmp    c001c6dc <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001c6d7:	b8 07 00 00 00       	mov    eax,0x7
c001c6dc:	5b                   	pop    ebx
c001c6dd:	5e                   	pop    esi
c001c6de:	5f                   	pop    edi
c001c6df:	c3                   	ret    

c001c6e0 <Mouse::Mouse(char const*)>:
c001c6e0:	83 ec 0c             	sub    esp,0xc
c001c6e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6e7:	83 ec 08             	sub    esp,0x8
c001c6ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6ee:	50                   	push   eax
c001c6ef:	e8 84 ec ff ff       	call   c001b378 <Device::Device(char const*)>
c001c6f4:	83 c4 10             	add    esp,0x10
c001c6f7:	ba 2c 20 03 c0       	mov    edx,0xc003202c
c001c6fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c700:	89 10                	mov    DWORD PTR [eax],edx
c001c702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c706:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001c710:	90                   	nop
c001c711:	83 c4 0c             	add    esp,0xc
c001c714:	c3                   	ret    
c001c715:	90                   	nop
c001c716:	66 90                	xchg   ax,ax

c001c718 <Mouse::~Mouse()>:
c001c718:	83 ec 0c             	sub    esp,0xc
c001c71b:	ba 2c 20 03 c0       	mov    edx,0xc003202c
c001c720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c724:	89 10                	mov    DWORD PTR [eax],edx
c001c726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c72a:	83 ec 0c             	sub    esp,0xc
c001c72d:	50                   	push   eax
c001c72e:	e8 e5 e9 ff ff       	call   c001b118 <Device::~Device()>
c001c733:	83 c4 10             	add    esp,0x10
c001c736:	90                   	nop
c001c737:	83 c4 0c             	add    esp,0xc
c001c73a:	c3                   	ret    
c001c73b:	90                   	nop

c001c73c <Mouse::~Mouse()>:
c001c73c:	83 ec 0c             	sub    esp,0xc
c001c73f:	83 ec 0c             	sub    esp,0xc
c001c742:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c746:	e8 cd ff ff ff       	call   c001c718 <Mouse::~Mouse()>
c001c74b:	83 c4 10             	add    esp,0x10
c001c74e:	83 ec 08             	sub    esp,0x8
c001c751:	68 58 01 00 00       	push   0x158
c001c756:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c75a:	e8 09 c9 ff ff       	call   c0019068 <operator delete(void*, unsigned long)>
c001c75f:	83 c4 10             	add    esp,0x10
c001c762:	83 c4 0c             	add    esp,0xc
c001c765:	c3                   	ret    

c001c766 <NIC::getMAC()>:
c001c766:	31 c0                	xor    eax,eax
c001c768:	31 d2                	xor    edx,edx
c001c76a:	c3                   	ret    
c001c76b:	90                   	nop

c001c76c <NIC::write(int, unsigned char*, int*)>:
c001c76c:	b8 01 00 00 00       	mov    eax,0x1
c001c771:	c3                   	ret    

c001c772 <NIC::NIC(char const*)>:
c001c772:	83 ec 0c             	sub    esp,0xc
c001c775:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c779:	83 ec 08             	sub    esp,0x8
c001c77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c780:	50                   	push   eax
c001c781:	e8 f2 eb ff ff       	call   c001b378 <Device::Device(char const*)>
c001c786:	83 c4 10             	add    esp,0x10
c001c789:	ba 58 20 03 c0       	mov    edx,0xc0032058
c001c78e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c792:	89 10                	mov    DWORD PTR [eax],edx
c001c794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c798:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c001c7a2:	90                   	nop
c001c7a3:	83 c4 0c             	add    esp,0xc
c001c7a6:	c3                   	ret    
c001c7a7:	90                   	nop

c001c7a8 <NIC::~NIC()>:
c001c7a8:	83 ec 0c             	sub    esp,0xc
c001c7ab:	ba 58 20 03 c0       	mov    edx,0xc0032058
c001c7b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7b4:	89 10                	mov    DWORD PTR [eax],edx
c001c7b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ba:	83 ec 0c             	sub    esp,0xc
c001c7bd:	50                   	push   eax
c001c7be:	e8 55 e9 ff ff       	call   c001b118 <Device::~Device()>
c001c7c3:	83 c4 10             	add    esp,0x10
c001c7c6:	90                   	nop
c001c7c7:	83 c4 0c             	add    esp,0xc
c001c7ca:	c3                   	ret    
c001c7cb:	90                   	nop

c001c7cc <NIC::~NIC()>:
c001c7cc:	83 ec 0c             	sub    esp,0xc
c001c7cf:	83 ec 0c             	sub    esp,0xc
c001c7d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7d6:	e8 cd ff ff ff       	call   c001c7a8 <NIC::~NIC()>
c001c7db:	83 c4 10             	add    esp,0x10
c001c7de:	83 ec 08             	sub    esp,0x8
c001c7e1:	68 58 01 00 00       	push   0x158
c001c7e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7ea:	e8 79 c8 ff ff       	call   c0019068 <operator delete(void*, unsigned long)>
c001c7ef:	83 c4 10             	add    esp,0x10
c001c7f2:	83 c4 0c             	add    esp,0xc
c001c7f5:	c3                   	ret    

c001c7f6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001c7f6:	55                   	push   ebp
c001c7f7:	57                   	push   edi
c001c7f8:	56                   	push   esi
c001c7f9:	53                   	push   ebx
c001c7fa:	81 ec 28 01 00 00    	sub    esp,0x128
c001c800:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001c807:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001c80e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001c815:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001c81c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c820:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c824:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c82b:	e8 44 ec ff ff       	call   c001b474 <Device::getName()>
c001c830:	5a                   	pop    edx
c001c831:	59                   	pop    ecx
c001c832:	50                   	push   eax
c001c833:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001c837:	55                   	push   ebp
c001c838:	e8 03 3e fe ff       	call   c0000640 <strcpy>
c001c83d:	5b                   	pop    ebx
c001c83e:	58                   	pop    eax
c001c83f:	68 84 20 03 c0       	push   0xc0032084
c001c844:	55                   	push   ebp
c001c845:	e8 f6 3f fe ff       	call   c0000840 <strcat>
c001c84a:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c001c851:	e8 b0 9a ff ff       	call   c0016306 <malloc>
c001c856:	83 c4 0c             	add    esp,0xc
c001c859:	89 c3                	mov    ebx,eax
c001c85b:	57                   	push   edi
c001c85c:	56                   	push   esi
c001c85d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c861:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c865:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001c86c:	55                   	push   ebp
c001c86d:	50                   	push   eax
c001c86e:	e8 59 fb ff ff       	call   c001c3cc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c873:	83 c4 14             	add    esp,0x14
c001c876:	53                   	push   ebx
c001c877:	e8 10 fc ff ff       	call   c001c48c <LogicalDisk::assignDriveLetter()>
c001c87c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c87f:	e8 c2 fc ff ff       	call   c001c546 <LogicalDisk::mount()>
c001c884:	58                   	pop    eax
c001c885:	5a                   	pop    edx
c001c886:	53                   	push   ebx
c001c887:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c88e:	e8 83 e9 ff ff       	call   c001b216 <Device::addChild(Device*)>
c001c893:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c899:	5b                   	pop    ebx
c001c89a:	5e                   	pop    esi
c001c89b:	5f                   	pop    edi
c001c89c:	5d                   	pop    ebp
c001c89d:	c3                   	ret    

c001c89e <createPartitionsForDisk(PhysicalDisk*)>:
c001c89e:	55                   	push   ebp
c001c89f:	57                   	push   edi
c001c8a0:	56                   	push   esi
c001c8a1:	53                   	push   ebx
c001c8a2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001c8a8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001c8af:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c8b5:	3d 00 02 00 00       	cmp    eax,0x200
c001c8ba:	74 27                	je     c001c8e3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001c8bc:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001c8c2:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001c8c8:	83 ec 10             	sub    esp,0x10
c001c8cb:	0f a4 f7 0a          	shld   edi,esi,0xa
c001c8cf:	99                   	cdq    
c001c8d0:	c1 e6 0a             	shl    esi,0xa
c001c8d3:	52                   	push   edx
c001c8d4:	89 fd                	mov    ebp,edi
c001c8d6:	50                   	push   eax
c001c8d7:	55                   	push   ebp
c001c8d8:	56                   	push   esi
c001c8d9:	e8 82 1c 01 00       	call   c002e560 <__udivdi3>
c001c8de:	e9 b9 00 00 00       	jmp    c001c99c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001c8e3:	83 ec 0c             	sub    esp,0xc
c001c8e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c8e8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001c8ec:	56                   	push   esi
c001c8ed:	6a 01                	push   0x1
c001c8ef:	6a 00                	push   0x0
c001c8f1:	6a 00                	push   0x0
c001c8f3:	53                   	push   ebx
c001c8f4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001c8f7:	83 c4 20             	add    esp,0x20
c001c8fa:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001c902:	75 0a                	jne    c001c90e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001c904:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001c90c:	74 2c                	je     c001c93a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001c90e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001c914:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001c91a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c920:	83 ec 10             	sub    esp,0x10
c001c923:	0f a4 c2 0a          	shld   edx,eax,0xa
c001c927:	89 f7                	mov    edi,esi
c001c929:	c1 e0 0a             	shl    eax,0xa
c001c92c:	c1 ff 1f             	sar    edi,0x1f
c001c92f:	57                   	push   edi
c001c930:	56                   	push   esi
c001c931:	52                   	push   edx
c001c932:	50                   	push   eax
c001c933:	e8 28 1c 01 00       	call   c002e560 <__udivdi3>
c001c938:	eb 62                	jmp    c001c99c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001c93a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001c941:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c001c948:	89 cf                	mov    edi,ecx
c001c94a:	83 e2 7f             	and    edx,0x7f
c001c94d:	83 e7 7f             	and    edi,0x7f
c001c950:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001c957:	8d 0c 17             	lea    ecx,[edi+edx*1]
c001c95a:	83 e0 7f             	and    eax,0x7f
c001c95d:	8d 14 01             	lea    edx,[ecx+eax*1]
c001c960:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001c967:	83 e0 7f             	and    eax,0x7f
c001c96a:	01 d0                	add    eax,edx
c001c96c:	89 c5                	mov    ebp,eax
c001c96e:	84 c0                	test   al,al
c001c970:	74 41                	je     c001c9b3 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c001c972:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001c978:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001c97e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c984:	83 ec 10             	sub    esp,0x10
c001c987:	0f a4 c2 0a          	shld   edx,eax,0xa
c001c98b:	89 f7                	mov    edi,esi
c001c98d:	c1 e0 0a             	shl    eax,0xa
c001c990:	c1 ff 1f             	sar    edi,0x1f
c001c993:	57                   	push   edi
c001c994:	56                   	push   esi
c001c995:	52                   	push   edx
c001c996:	50                   	push   eax
c001c997:	e8 c4 1b 01 00       	call   c002e560 <__udivdi3>
c001c99c:	83 c4 14             	add    esp,0x14
c001c99f:	52                   	push   edx
c001c9a0:	50                   	push   eax
c001c9a1:	6a 00                	push   0x0
c001c9a3:	6a 00                	push   0x0
c001c9a5:	53                   	push   ebx
c001c9a6:	e8 4b fe ff ff       	call   c001c7f6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001c9ab:	83 c4 20             	add    esp,0x20
c001c9ae:	e9 73 01 00 00       	jmp    c001cb26 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c001c9b3:	89 f0                	mov    eax,esi
c001c9b5:	31 c9                	xor    ecx,ecx
c001c9b7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001c9be:	75 02                	jne    c001c9c2 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c001c9c0:	89 cd                	mov    ebp,ecx
c001c9c2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001c9c9:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c001c9d0:	c1 e2 08             	shl    edx,0x8
c001c9d3:	c1 e6 10             	shl    esi,0x10
c001c9d6:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c001c9de:	09 f2                	or     edx,esi
c001c9e0:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c001c9e8:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c001c9ef:	83 c0 10             	add    eax,0x10
c001c9f2:	09 f2                	or     edx,esi
c001c9f4:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c001c9fb:	c1 e6 18             	shl    esi,0x18
c001c9fe:	09 f2                	or     edx,esi
c001ca00:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c001ca07:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c001ca0b:	c1 e6 10             	shl    esi,0x10
c001ca0e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001ca15:	c1 e2 08             	shl    edx,0x8
c001ca18:	09 f2                	or     edx,esi
c001ca1a:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c001ca21:	09 f2                	or     edx,esi
c001ca23:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c001ca2a:	c1 e6 18             	shl    esi,0x18
c001ca2d:	09 f2                	or     edx,esi
c001ca2f:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c001ca33:	41                   	inc    ecx
c001ca34:	83 f9 04             	cmp    ecx,0x4
c001ca37:	0f 85 7a ff ff ff    	jne    c001c9b7 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c001ca3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca41:	83 f0 01             	xor    eax,0x1
c001ca44:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001ca48:	75 4f                	jne    c001ca99 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001ca4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ca4e:	83 f0 01             	xor    eax,0x1
c001ca51:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001ca55:	75 42                	jne    c001ca99 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001ca57:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ca5f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ca67:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001ca6d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001ca73:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ca79:	0f a4 c2 0a          	shld   edx,eax,0xa
c001ca7d:	89 f7                	mov    edi,esi
c001ca7f:	c1 e0 0a             	shl    eax,0xa
c001ca82:	c1 ff 1f             	sar    edi,0x1f
c001ca85:	57                   	push   edi
c001ca86:	56                   	push   esi
c001ca87:	52                   	push   edx
c001ca88:	50                   	push   eax
c001ca89:	e8 d2 1a 01 00       	call   c002e560 <__udivdi3>
c001ca8e:	83 c4 10             	add    esp,0x10
c001ca91:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ca95:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ca99:	89 e8                	mov    eax,ebp
c001ca9b:	0f b6 e8             	movzx  ebp,al
c001ca9e:	85 ed                	test   ebp,ebp
c001caa0:	74 50                	je     c001caf2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001caa2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001caa6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001caaa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001caae:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cab2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cab6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001caba:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001cabe:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001cac2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cac6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001caca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cace:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c001cad2:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c001cad6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001cada:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001cade:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cae2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001cae6:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c001caea:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c001caee:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c001caf2:	31 ed                	xor    ebp,ebp
c001caf4:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001caf8:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001cafc:	89 f8                	mov    eax,edi
c001cafe:	09 f0                	or     eax,esi
c001cb00:	74 1e                	je     c001cb20 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001cb02:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001cb06:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001cb0a:	89 d1                	mov    ecx,edx
c001cb0c:	09 c1                	or     ecx,eax
c001cb0e:	74 10                	je     c001cb20 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001cb10:	83 ec 0c             	sub    esp,0xc
c001cb13:	57                   	push   edi
c001cb14:	56                   	push   esi
c001cb15:	52                   	push   edx
c001cb16:	50                   	push   eax
c001cb17:	53                   	push   ebx
c001cb18:	e8 d9 fc ff ff       	call   c001c7f6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001cb1d:	83 c4 20             	add    esp,0x20
c001cb20:	45                   	inc    ebp
c001cb21:	83 fd 04             	cmp    ebp,0x4
c001cb24:	75 ce                	jne    c001caf4 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c001cb26:	81 c4 5c 02 00 00    	add    esp,0x25c
c001cb2c:	5b                   	pop    ebx
c001cb2d:	5e                   	pop    esi
c001cb2e:	5f                   	pop    edi
c001cb2f:	5d                   	pop    ebp
c001cb30:	c3                   	ret    
c001cb31:	66 90                	xchg   ax,ax
c001cb33:	90                   	nop

c001cb34 <Serial::Serial(char const*)>:
c001cb34:	83 ec 0c             	sub    esp,0xc
c001cb37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb3b:	83 ec 08             	sub    esp,0x8
c001cb3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb42:	50                   	push   eax
c001cb43:	e8 30 e8 ff ff       	call   c001b378 <Device::Device(char const*)>
c001cb48:	83 c4 10             	add    esp,0x10
c001cb4b:	ba 98 20 03 c0       	mov    edx,0xc0032098
c001cb50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb54:	89 10                	mov    DWORD PTR [eax],edx
c001cb56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb5a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001cb64:	90                   	nop
c001cb65:	83 c4 0c             	add    esp,0xc
c001cb68:	c3                   	ret    
c001cb69:	90                   	nop
c001cb6a:	66 90                	xchg   ax,ax

c001cb6c <Serial::~Serial()>:
c001cb6c:	83 ec 0c             	sub    esp,0xc
c001cb6f:	ba 98 20 03 c0       	mov    edx,0xc0032098
c001cb74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb78:	89 10                	mov    DWORD PTR [eax],edx
c001cb7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb7e:	83 ec 0c             	sub    esp,0xc
c001cb81:	50                   	push   eax
c001cb82:	e8 91 e5 ff ff       	call   c001b118 <Device::~Device()>
c001cb87:	83 c4 10             	add    esp,0x10
c001cb8a:	90                   	nop
c001cb8b:	83 c4 0c             	add    esp,0xc
c001cb8e:	c3                   	ret    
c001cb8f:	90                   	nop

c001cb90 <Serial::~Serial()>:
c001cb90:	83 ec 0c             	sub    esp,0xc
c001cb93:	83 ec 0c             	sub    esp,0xc
c001cb96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb9a:	e8 cd ff ff ff       	call   c001cb6c <Serial::~Serial()>
c001cb9f:	83 c4 10             	add    esp,0x10
c001cba2:	83 ec 08             	sub    esp,0x8
c001cba5:	68 58 01 00 00       	push   0x158
c001cbaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbae:	e8 b5 c4 ff ff       	call   c0019068 <operator delete(void*, unsigned long)>
c001cbb3:	83 c4 10             	add    esp,0x10
c001cbb6:	83 c4 0c             	add    esp,0xc
c001cbb9:	c3                   	ret    
c001cbba:	66 90                	xchg   ax,ax

c001cbbc <Timer::Timer(char const*)>:
c001cbbc:	83 ec 0c             	sub    esp,0xc
c001cbbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbc3:	83 ec 08             	sub    esp,0x8
c001cbc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbca:	50                   	push   eax
c001cbcb:	e8 a8 e7 ff ff       	call   c001b378 <Device::Device(char const*)>
c001cbd0:	83 c4 10             	add    esp,0x10
c001cbd3:	ba dc 20 03 c0       	mov    edx,0xc00320dc
c001cbd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbdc:	89 10                	mov    DWORD PTR [eax],edx
c001cbde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbe2:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001cbec:	90                   	nop
c001cbed:	83 c4 0c             	add    esp,0xc
c001cbf0:	c3                   	ret    
c001cbf1:	90                   	nop
c001cbf2:	66 90                	xchg   ax,ax

c001cbf4 <Timer::~Timer()>:
c001cbf4:	83 ec 0c             	sub    esp,0xc
c001cbf7:	ba dc 20 03 c0       	mov    edx,0xc00320dc
c001cbfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc00:	89 10                	mov    DWORD PTR [eax],edx
c001cc02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc06:	83 ec 0c             	sub    esp,0xc
c001cc09:	50                   	push   eax
c001cc0a:	e8 09 e5 ff ff       	call   c001b118 <Device::~Device()>
c001cc0f:	83 c4 10             	add    esp,0x10
c001cc12:	90                   	nop
c001cc13:	83 c4 0c             	add    esp,0xc
c001cc16:	c3                   	ret    
c001cc17:	90                   	nop

c001cc18 <Timer::~Timer()>:
c001cc18:	83 ec 0c             	sub    esp,0xc
c001cc1b:	83 ec 0c             	sub    esp,0xc
c001cc1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc22:	e8 cd ff ff ff       	call   c001cbf4 <Timer::~Timer()>
c001cc27:	83 c4 10             	add    esp,0x10
c001cc2a:	83 ec 08             	sub    esp,0x8
c001cc2d:	68 5c 01 00 00       	push   0x15c
c001cc32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc36:	e8 2d c4 ff ff       	call   c0019068 <operator delete(void*, unsigned long)>
c001cc3b:	83 c4 10             	add    esp,0x10
c001cc3e:	83 c4 0c             	add    esp,0xc
c001cc41:	c3                   	ret    

c001cc42 <Timer::read()>:
c001cc42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cc46:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cc4c:	c3                   	ret    

c001cc4d <setupTimer(int)>:
c001cc4d:	53                   	push   ebx
c001cc4e:	83 ec 14             	sub    esp,0x14
c001cc51:	68 5c 01 00 00       	push   0x15c
c001cc56:	e8 ab 96 ff ff       	call   c0016306 <malloc>
c001cc5b:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc5e:	89 c3                	mov    ebx,eax
c001cc60:	e8 7b 11 01 00       	call   c002dde0 <PIT::PIT()>
c001cc65:	58                   	pop    eax
c001cc66:	5a                   	pop    edx
c001cc67:	53                   	push   ebx
c001cc68:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001cc6e:	e8 a3 e5 ff ff       	call   c001b216 <Device::addChild(Device*)>
c001cc73:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cc75:	6a 00                	push   0x0
c001cc77:	6a 00                	push   0x0
c001cc79:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cc7d:	53                   	push   ebx
c001cc7e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cc81:	89 d8                	mov    eax,ebx
c001cc83:	83 c4 28             	add    esp,0x28
c001cc86:	5b                   	pop    ebx
c001cc87:	c3                   	ret    

c001cc88 <timerHandler(unsigned int)>:
c001cc88:	57                   	push   edi
c001cc89:	56                   	push   esi
c001cc8a:	53                   	push   ebx
c001cc8b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001cc8f:	01 3d ec f3 03 c0    	add    DWORD PTR ds:0xc003f3ec,edi
c001cc95:	80 3d c1 a9 03 c0 00 	cmp    BYTE PTR ds:0xc003a9c1,0x0
c001cc9c:	0f 84 46 01 00 00    	je     c001cde8 <timerHandler(unsigned int)+0x160>
c001cca2:	fa                   	cli    
c001cca3:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c001cca9:	83 ec 0c             	sub    esp,0xc
c001ccac:	ff 05 cc 01 04 c0    	inc    DWORD PTR ds:0xc00401cc
c001ccb2:	68 e0 01 04 c0       	push   0xc00401e0
c001ccb7:	e8 74 1e 01 00       	call   c002eb30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ccbc:	83 c4 10             	add    esp,0x10
c001ccbf:	84 c0                	test   al,al
c001ccc1:	0f 85 a1 00 00 00    	jne    c001cd68 <timerHandler(unsigned int)+0xe0>
c001ccc7:	83 ec 0c             	sub    esp,0xc
c001ccca:	68 e0 01 04 c0       	push   0xc00401e0
c001cccf:	e8 78 1e 01 00       	call   c002eb4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ccd4:	83 c4 10             	add    esp,0x10
c001ccd7:	89 c6                	mov    esi,eax
c001ccd9:	8d 76 00             	lea    esi,[esi+0x0]
c001ccdc:	83 ec 0c             	sub    esp,0xc
c001ccdf:	68 e0 01 04 c0       	push   0xc00401e0
c001cce4:	e8 63 1e 01 00       	call   c002eb4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cce9:	c7 04 24 e0 01 04 c0 	mov    DWORD PTR [esp],0xc00401e0
c001ccf0:	89 c3                	mov    ebx,eax
c001ccf2:	e8 5d 1e 01 00       	call   c002eb54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ccf7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ccfa:	83 c4 10             	add    esp,0x10
c001ccfd:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c001cd03:	77 23                	ja     c001cd28 <timerHandler(unsigned int)+0xa0>
c001cd05:	83 ec 0c             	sub    esp,0xc
c001cd08:	53                   	push   ebx
c001cd09:	e8 46 87 00 00       	call   c0025454 <unblockTask(ThreadControlBlock*)>
c001cd0e:	83 c4 10             	add    esp,0x10
c001cd11:	39 de                	cmp    esi,ebx
c001cd13:	75 27                	jne    c001cd3c <timerHandler(unsigned int)+0xb4>
c001cd15:	83 ec 0c             	sub    esp,0xc
c001cd18:	68 e0 01 04 c0       	push   0xc00401e0
c001cd1d:	e8 2a 1e 01 00       	call   c002eb4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cd22:	89 c6                	mov    esi,eax
c001cd24:	eb 12                	jmp    c001cd38 <timerHandler(unsigned int)+0xb0>
c001cd26:	66 90                	xchg   ax,ax
c001cd28:	50                   	push   eax
c001cd29:	50                   	push   eax
c001cd2a:	53                   	push   ebx
c001cd2b:	68 e0 01 04 c0       	push   0xc00401e0
c001cd30:	e8 db 1e 01 00       	call   c002ec10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001cd35:	8d 76 00             	lea    esi,[esi+0x0]
c001cd38:	83 c4 10             	add    esp,0x10
c001cd3b:	90                   	nop
c001cd3c:	83 ec 0c             	sub    esp,0xc
c001cd3f:	68 e0 01 04 c0       	push   0xc00401e0
c001cd44:	e8 e7 1d 01 00       	call   c002eb30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001cd49:	83 c4 10             	add    esp,0x10
c001cd4c:	84 c0                	test   al,al
c001cd4e:	75 18                	jne    c001cd68 <timerHandler(unsigned int)+0xe0>
c001cd50:	83 ec 0c             	sub    esp,0xc
c001cd53:	68 e0 01 04 c0       	push   0xc00401e0
c001cd58:	e8 ef 1d 01 00       	call   c002eb4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cd5d:	83 c4 10             	add    esp,0x10
c001cd60:	39 f0                	cmp    eax,esi
c001cd62:	0f 85 74 ff ff ff    	jne    c001ccdc <timerHandler(unsigned int)+0x54>
c001cd68:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd6d:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c001cd71:	74 3d                	je     c001cdb0 <timerHandler(unsigned int)+0x128>
c001cd73:	80 3d c0 a9 03 c0 00 	cmp    BYTE PTR ds:0xc003a9c0,0x0
c001cd7a:	74 34                	je     c001cdb0 <timerHandler(unsigned int)+0x128>
c001cd7c:	fa                   	cli    
c001cd7d:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c001cd83:	8b 15 ec f3 03 c0    	mov    edx,DWORD PTR ds:0xc003f3ec
c001cd89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd8e:	29 78 34             	sub    DWORD PTR [eax+0x34],edi
c001cd91:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd96:	39 50 34             	cmp    DWORD PTR [eax+0x34],edx
c001cd99:	77 05                	ja     c001cda0 <timerHandler(unsigned int)+0x118>
c001cd9b:	e8 bc 83 00 00       	call   c002515c <schedule()>
c001cda0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001cda5:	48                   	dec    eax
c001cda6:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001cdab:	75 03                	jne    c001cdb0 <timerHandler(unsigned int)+0x128>
c001cdad:	fb                   	sti    
c001cdae:	66 90                	xchg   ax,ax
c001cdb0:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001cdb5:	48                   	dec    eax
c001cdb6:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001cdbb:	75 1b                	jne    c001cdd8 <timerHandler(unsigned int)+0x150>
c001cdbd:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c001cdc4:	74 12                	je     c001cdd8 <timerHandler(unsigned int)+0x150>
c001cdc6:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c001cdd0:	e8 87 83 00 00       	call   c002515c <schedule()>
c001cdd5:	8d 76 00             	lea    esi,[esi+0x0]
c001cdd8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001cddd:	48                   	dec    eax
c001cdde:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001cde3:	75 03                	jne    c001cde8 <timerHandler(unsigned int)+0x160>
c001cde5:	fb                   	sti    
c001cde6:	66 90                	xchg   ax,ax
c001cde8:	5b                   	pop    ebx
c001cde9:	5e                   	pop    esi
c001cdea:	5f                   	pop    edi
c001cdeb:	c3                   	ret    

c001cdec <VCache::VCache(PhysicalDisk*)>:
c001cdec:	53                   	push   ebx
c001cded:	83 ec 18             	sub    esp,0x18
c001cdf0:	ba 0c 21 03 c0       	mov    edx,0xc003210c
c001cdf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdf9:	89 10                	mov    DWORD PTR [eax],edx
c001cdfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdff:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001ce06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce0a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001ce11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce15:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001ce1c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001ce23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce27:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001ce2e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ce35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce39:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ce40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce44:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001ce48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce4c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001ce53:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001ce5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce5e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001ce62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce66:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001ce6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce6e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001ce72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce76:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001ce7d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001ce85:	83 ec 0c             	sub    esp,0xc
c001ce88:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ce8c:	e8 75 94 ff ff       	call   c0016306 <malloc>
c001ce91:	83 c4 10             	add    esp,0x10
c001ce94:	89 c3                	mov    ebx,eax
c001ce96:	83 ec 0c             	sub    esp,0xc
c001ce99:	53                   	push   ebx
c001ce9a:	e8 f5 32 00 00       	call   c0020194 <Mutex::Mutex()>
c001ce9f:	83 c4 10             	add    esp,0x10
c001cea2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cea6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001cea9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cead:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ceb1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ceb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ceb8:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001cebf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cec3:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001cec9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cecd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001ced0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ced4:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001ceda:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cee0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001cee4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001cee7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001ceea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ceee:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001cef2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cef6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001cefc:	05 00 02 00 00       	add    eax,0x200
c001cf01:	c1 e0 03             	shl    eax,0x3
c001cf04:	83 ec 0c             	sub    esp,0xc
c001cf07:	50                   	push   eax
c001cf08:	e8 f9 93 ff ff       	call   c0016306 <malloc>
c001cf0d:	83 c4 10             	add    esp,0x10
c001cf10:	89 c2                	mov    edx,eax
c001cf12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf16:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001cf19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf1d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001cf24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf28:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001cf2c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf30:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001cf36:	89 d0                	mov    eax,edx
c001cf38:	c1 e0 02             	shl    eax,0x2
c001cf3b:	01 d0                	add    eax,edx
c001cf3d:	c1 e0 04             	shl    eax,0x4
c001cf40:	83 ec 0c             	sub    esp,0xc
c001cf43:	50                   	push   eax
c001cf44:	e8 bd 93 ff ff       	call   c0016306 <malloc>
c001cf49:	83 c4 10             	add    esp,0x10
c001cf4c:	89 c2                	mov    edx,eax
c001cf4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf52:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001cf55:	90                   	nop
c001cf56:	83 c4 18             	add    esp,0x18
c001cf59:	5b                   	pop    ebx
c001cf5a:	c3                   	ret    
c001cf5b:	90                   	nop

c001cf5c <VCache::invalidateReadBuffer()>:
c001cf5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf60:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001cf66:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001cf6a:	c3                   	ret    
c001cf6b:	90                   	nop

c001cf6c <VCache::writeWriteBuffer()>:
c001cf6c:	53                   	push   ebx
c001cf6d:	83 ec 08             	sub    esp,0x8
c001cf70:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cf74:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001cf78:	74 1e                	je     c001cf98 <VCache::writeWriteBuffer()+0x2c>
c001cf7a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cf7d:	83 ec 0c             	sub    esp,0xc
c001cf80:	8b 10                	mov    edx,DWORD PTR [eax]
c001cf82:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001cf85:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001cf88:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001cf8b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001cf8e:	50                   	push   eax
c001cf8f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001cf92:	83 c4 20             	add    esp,0x20
c001cf95:	8d 76 00             	lea    esi,[esi+0x0]
c001cf98:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001cf9f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001cfa6:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001cfaa:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001cfb1:	83 c4 08             	add    esp,0x8
c001cfb4:	5b                   	pop    ebx
c001cfb5:	c3                   	ret    
c001cfb6:	66 90                	xchg   ax,ax

c001cfb8 <VCache::~VCache()>:
c001cfb8:	83 ec 0c             	sub    esp,0xc
c001cfbb:	ba 0c 21 03 c0       	mov    edx,0xc003210c
c001cfc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfc4:	89 10                	mov    DWORD PTR [eax],edx
c001cfc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfca:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001cfcd:	0f b6 c0             	movzx  eax,al
c001cfd0:	85 c0                	test   eax,eax
c001cfd2:	74 10                	je     c001cfe4 <VCache::~VCache()+0x2c>
c001cfd4:	83 ec 0c             	sub    esp,0xc
c001cfd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfdb:	e8 8c ff ff ff       	call   c001cf6c <VCache::writeWriteBuffer()>
c001cfe0:	83 c4 10             	add    esp,0x10
c001cfe3:	90                   	nop
c001cfe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfe8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001cfeb:	83 ec 0c             	sub    esp,0xc
c001cfee:	50                   	push   eax
c001cfef:	e8 22 93 ff ff       	call   c0016316 <free>
c001cff4:	83 c4 10             	add    esp,0x10
c001cff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cffb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001cffe:	83 ec 0c             	sub    esp,0xc
c001d001:	50                   	push   eax
c001d002:	e8 0f 93 ff ff       	call   c0016316 <free>
c001d007:	83 c4 10             	add    esp,0x10
c001d00a:	90                   	nop
c001d00b:	83 c4 0c             	add    esp,0xc
c001d00e:	c3                   	ret    
c001d00f:	90                   	nop

c001d010 <VCache::~VCache()>:
c001d010:	83 ec 0c             	sub    esp,0xc
c001d013:	83 ec 0c             	sub    esp,0xc
c001d016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d01a:	e8 99 ff ff ff       	call   c001cfb8 <VCache::~VCache()>
c001d01f:	83 c4 10             	add    esp,0x10
c001d022:	83 ec 08             	sub    esp,0x8
c001d025:	6a 44                	push   0x44
c001d027:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d02b:	e8 38 c0 ff ff       	call   c0019068 <operator delete(void*, unsigned long)>
c001d030:	83 c4 10             	add    esp,0x10
c001d033:	83 c4 0c             	add    esp,0xc
c001d036:	c3                   	ret    
c001d037:	90                   	nop

c001d038 <VCache::write(unsigned long long, int, void*)>:
c001d038:	55                   	push   ebp
c001d039:	57                   	push   edi
c001d03a:	56                   	push   esi
c001d03b:	53                   	push   ebx
c001d03c:	83 ec 1c             	sub    esp,0x1c
c001d03f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d043:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d047:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d04b:	e8 74 7e 00 00       	call   c0024ec4 <KeDisablePreemption()>
c001d050:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d054:	74 0e                	je     c001d064 <VCache::write(unsigned long long, int, void*)+0x2c>
c001d056:	83 ec 0c             	sub    esp,0xc
c001d059:	53                   	push   ebx
c001d05a:	e8 fd fe ff ff       	call   c001cf5c <VCache::invalidateReadBuffer()>
c001d05f:	83 c4 10             	add    esp,0x10
c001d062:	66 90                	xchg   ax,ax
c001d064:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d068:	74 5e                	je     c001d0c8 <VCache::write(unsigned long long, int, void*)+0x90>
c001d06a:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c001d06d:	89 e8                	mov    eax,ebp
c001d06f:	99                   	cdq    
c001d070:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001d073:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001d076:	89 c1                	mov    ecx,eax
c001d078:	89 d0                	mov    eax,edx
c001d07a:	31 f1                	xor    ecx,esi
c001d07c:	31 f8                	xor    eax,edi
c001d07e:	09 c1                	or     ecx,eax
c001d080:	75 3a                	jne    c001d0bc <VCache::write(unsigned long long, int, void*)+0x84>
c001d082:	83 7c 24 3c 01       	cmp    DWORD PTR [esp+0x3c],0x1
c001d087:	75 33                	jne    c001d0bc <VCache::write(unsigned long long, int, void*)+0x84>
c001d089:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d08c:	89 ef                	mov    edi,ebp
c001d08e:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d094:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d098:	0f af f9             	imul   edi,ecx
c001d09b:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c001d09e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d0a0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001d0a3:	40                   	inc    eax
c001d0a4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001d0a7:	83 f8 50             	cmp    eax,0x50
c001d0aa:	75 70                	jne    c001d11c <VCache::write(unsigned long long, int, void*)+0xe4>
c001d0ac:	83 ec 0c             	sub    esp,0xc
c001d0af:	53                   	push   ebx
c001d0b0:	e8 b7 fe ff ff       	call   c001cf6c <VCache::writeWriteBuffer()>
c001d0b5:	83 c4 10             	add    esp,0x10
c001d0b8:	eb 62                	jmp    c001d11c <VCache::write(unsigned long long, int, void*)+0xe4>
c001d0ba:	66 90                	xchg   ax,ax
c001d0bc:	83 ec 0c             	sub    esp,0xc
c001d0bf:	53                   	push   ebx
c001d0c0:	e8 a7 fe ff ff       	call   c001cf6c <VCache::writeWriteBuffer()>
c001d0c5:	83 c4 10             	add    esp,0x10
c001d0c8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d0cb:	83 7c 24 3c 4f       	cmp    DWORD PTR [esp+0x3c],0x4f
c001d0d0:	7f 22                	jg     c001d0f4 <VCache::write(unsigned long long, int, void*)+0xbc>
c001d0d2:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001d0d5:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001d0d8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d0dc:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001d0e0:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c001d0e3:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c001d0e6:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d0ec:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d0f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d0f2:	eb 28                	jmp    c001d11c <VCache::write(unsigned long long, int, void*)+0xe4>
c001d0f4:	83 ec 0c             	sub    esp,0xc
c001d0f7:	8b 10                	mov    edx,DWORD PTR [eax]
c001d0f9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d0fd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d101:	57                   	push   edi
c001d102:	56                   	push   esi
c001d103:	50                   	push   eax
c001d104:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001d107:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d10b:	83 c4 20             	add    esp,0x20
c001d10e:	e8 d9 7d 00 00       	call   c0024eec <KeRestorePreemption()>
c001d113:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d117:	eb 0b                	jmp    c001d124 <VCache::write(unsigned long long, int, void*)+0xec>
c001d119:	8d 76 00             	lea    esi,[esi+0x0]
c001d11c:	e8 cb 7d 00 00       	call   c0024eec <KeRestorePreemption()>
c001d121:	31 c0                	xor    eax,eax
c001d123:	90                   	nop
c001d124:	83 c4 1c             	add    esp,0x1c
c001d127:	5b                   	pop    ebx
c001d128:	5e                   	pop    esi
c001d129:	5f                   	pop    edi
c001d12a:	5d                   	pop    ebp
c001d12b:	c3                   	ret    

c001d12c <VCache::read(unsigned long long, int, void*)>:
c001d12c:	55                   	push   ebp
c001d12d:	57                   	push   edi
c001d12e:	56                   	push   esi
c001d12f:	53                   	push   ebx
c001d130:	83 ec 1c             	sub    esp,0x1c
c001d133:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d137:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d13b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d13f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d143:	e8 7c 7d 00 00       	call   c0024ec4 <KeDisablePreemption()>
c001d148:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d14c:	74 0e                	je     c001d15c <VCache::read(unsigned long long, int, void*)+0x30>
c001d14e:	83 ec 0c             	sub    esp,0xc
c001d151:	53                   	push   ebx
c001d152:	e8 15 fe ff ff       	call   c001cf6c <VCache::writeWriteBuffer()>
c001d157:	83 c4 10             	add    esp,0x10
c001d15a:	66 90                	xchg   ax,ax
c001d15c:	83 fd 01             	cmp    ebp,0x1
c001d15f:	0f 85 97 00 00 00    	jne    c001d1fc <VCache::read(unsigned long long, int, void*)+0xd0>
c001d165:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d168:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d16c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001d173:	0f 85 83 00 00 00    	jne    c001d1fc <VCache::read(unsigned long long, int, void*)+0xd0>
c001d179:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c001d17c:	89 e9                	mov    ecx,ebp
c001d17e:	f7 d9                	neg    ecx
c001d180:	89 c8                	mov    eax,ecx
c001d182:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d186:	c1 f8 1f             	sar    eax,0x1f
c001d189:	21 f1                	and    ecx,esi
c001d18b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d18f:	89 c8                	mov    eax,ecx
c001d191:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d195:	21 f9                	and    ecx,edi
c001d197:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d19b:	89 ca                	mov    edx,ecx
c001d19d:	74 31                	je     c001d1d0 <VCache::read(unsigned long long, int, void*)+0xa4>
c001d19f:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001d1a2:	75 2c                	jne    c001d1d0 <VCache::read(unsigned long long, int, void*)+0xa4>
c001d1a4:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c001d1a7:	75 27                	jne    c001d1d0 <VCache::read(unsigned long long, int, void*)+0xa4>
c001d1a9:	8d 76 00             	lea    esi,[esi+0x0]
c001d1ac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d1af:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d1b3:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d1b9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d1bc:	48                   	dec    eax
c001d1bd:	21 c6                	and    esi,eax
c001d1bf:	0f af f1             	imul   esi,ecx
c001d1c2:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c001d1c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d1c7:	e8 20 7d 00 00       	call   c0024eec <KeRestorePreemption()>
c001d1cc:	31 c0                	xor    eax,eax
c001d1ce:	eb 58                	jmp    c001d228 <VCache::read(unsigned long long, int, void*)+0xfc>
c001d1d0:	83 ec 0c             	sub    esp,0xc
c001d1d3:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001d1d7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d1db:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c001d1de:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c001d1e1:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001d1e3:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001d1e6:	55                   	push   ebp
c001d1e7:	52                   	push   edx
c001d1e8:	50                   	push   eax
c001d1e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d1ed:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001d1f0:	83 c4 20             	add    esp,0x20
c001d1f3:	85 c0                	test   eax,eax
c001d1f5:	75 31                	jne    c001d228 <VCache::read(unsigned long long, int, void*)+0xfc>
c001d1f7:	eb b3                	jmp    c001d1ac <VCache::read(unsigned long long, int, void*)+0x80>
c001d1f9:	8d 76 00             	lea    esi,[esi+0x0]
c001d1fc:	83 ec 0c             	sub    esp,0xc
c001d1ff:	53                   	push   ebx
c001d200:	e8 57 fd ff ff       	call   c001cf5c <VCache::invalidateReadBuffer()>
c001d205:	5a                   	pop    edx
c001d206:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d209:	8b 10                	mov    edx,DWORD PTR [eax]
c001d20b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d20f:	55                   	push   ebp
c001d210:	57                   	push   edi
c001d211:	56                   	push   esi
c001d212:	50                   	push   eax
c001d213:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001d216:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d21a:	83 c4 20             	add    esp,0x20
c001d21d:	e8 ca 7c 00 00       	call   c0024eec <KeRestorePreemption()>
c001d222:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d226:	66 90                	xchg   ax,ax
c001d228:	83 c4 1c             	add    esp,0x1c
c001d22b:	5b                   	pop    ebx
c001d22c:	5e                   	pop    esi
c001d22d:	5f                   	pop    edi
c001d22e:	5d                   	pop    ebp
c001d22f:	c3                   	ret    

c001d230 <Video::putrect(int, int, int, int, unsigned int)>:
c001d230:	55                   	push   ebp
c001d231:	57                   	push   edi
c001d232:	56                   	push   esi
c001d233:	53                   	push   ebx
c001d234:	83 ec 1c             	sub    esp,0x1c
c001d237:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d23b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d23f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d243:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001d247:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d24b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d24f:	01 df                	add    edi,ebx
c001d251:	39 fb                	cmp    ebx,edi
c001d253:	7d 1f                	jge    c001d274 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001d255:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d259:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001d25d:	7d 12                	jge    c001d271 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001d25f:	8b 16                	mov    edx,DWORD PTR [esi]
c001d261:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d265:	53                   	push   ebx
c001d266:	55                   	push   ebp
c001d267:	45                   	inc    ebp
c001d268:	56                   	push   esi
c001d269:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001d26c:	83 c4 10             	add    esp,0x10
c001d26f:	eb e8                	jmp    c001d259 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001d271:	43                   	inc    ebx
c001d272:	eb dd                	jmp    c001d251 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001d274:	83 c4 1c             	add    esp,0x1c
c001d277:	5b                   	pop    ebx
c001d278:	5e                   	pop    esi
c001d279:	5f                   	pop    edi
c001d27a:	5d                   	pop    ebp
c001d27b:	c3                   	ret    

c001d27c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001d27c:	55                   	push   ebp
c001d27d:	57                   	push   edi
c001d27e:	31 ff                	xor    edi,edi
c001d280:	56                   	push   esi
c001d281:	53                   	push   ebx
c001d282:	83 ec 1c             	sub    esp,0x1c
c001d285:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001d289:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d28d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001d294:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001d299:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d29d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001d2a1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d2a5:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001d2a8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d2ac:	01 f9                	add    ecx,edi
c001d2ae:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001d2b2:	7d 2f                	jge    c001d2e3 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001d2b4:	31 f6                	xor    esi,esi
c001d2b6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d2ba:	01 f2                	add    edx,esi
c001d2bc:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001d2c0:	7d 1a                	jge    c001d2dc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001d2c2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d2c5:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001d2c8:	46                   	inc    esi
c001d2c9:	51                   	push   ecx
c001d2ca:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001d2ce:	52                   	push   edx
c001d2cf:	55                   	push   ebp
c001d2d0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d2d3:	83 c4 10             	add    esp,0x10
c001d2d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d2da:	eb da                	jmp    c001d2b6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001d2dc:	47                   	inc    edi
c001d2dd:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d2e1:	eb c5                	jmp    c001d2a8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001d2e3:	83 c4 1c             	add    esp,0x1c
c001d2e6:	5b                   	pop    ebx
c001d2e7:	5e                   	pop    esi
c001d2e8:	5f                   	pop    edi
c001d2e9:	5d                   	pop    ebp
c001d2ea:	c3                   	ret    
c001d2eb:	90                   	nop

c001d2ec <Video::blit(unsigned int*, int, int, int, int)>:
c001d2ec:	55                   	push   ebp
c001d2ed:	57                   	push   edi
c001d2ee:	56                   	push   esi
c001d2ef:	53                   	push   ebx
c001d2f0:	83 ec 1c             	sub    esp,0x1c
c001d2f3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d2f7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d2fb:	85 c0                	test   eax,eax
c001d2fd:	79 02                	jns    c001d301 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001d2ff:	31 c0                	xor    eax,eax
c001d301:	c1 e0 02             	shl    eax,0x2
c001d304:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d308:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d30c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d310:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001d314:	39 d8                	cmp    eax,ebx
c001d316:	7e 49                	jle    c001d361 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001d318:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d31e:	7c 41                	jl     c001d361 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001d320:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d324:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d328:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d32c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001d330:	39 f9                	cmp    ecx,edi
c001d332:	7e 22                	jle    c001d356 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001d334:	83 c5 04             	add    ebp,0x4
c001d337:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d33d:	7c 14                	jl     c001d353 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001d33f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d341:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001d344:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d348:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d34c:	56                   	push   esi
c001d34d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001d350:	83 c4 10             	add    esp,0x10
c001d353:	47                   	inc    edi
c001d354:	eb d2                	jmp    c001d328 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001d356:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d35a:	43                   	inc    ebx
c001d35b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001d35f:	eb ab                	jmp    c001d30c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001d361:	83 c4 1c             	add    esp,0x1c
c001d364:	5b                   	pop    ebx
c001d365:	5e                   	pop    esi
c001d366:	5f                   	pop    edi
c001d367:	5d                   	pop    ebp
c001d368:	c3                   	ret    
c001d369:	90                   	nop

c001d36a <Video::clearScreen(unsigned int)>:
c001d36a:	57                   	push   edi
c001d36b:	56                   	push   esi
c001d36c:	53                   	push   ebx
c001d36d:	31 db                	xor    ebx,ebx
c001d36f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d373:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d379:	7e 1f                	jle    c001d39a <Video::clearScreen(unsigned int)+0x30>
c001d37b:	31 ff                	xor    edi,edi
c001d37d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d383:	7e 12                	jle    c001d397 <Video::clearScreen(unsigned int)+0x2d>
c001d385:	8b 06                	mov    eax,DWORD PTR [esi]
c001d387:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d38b:	53                   	push   ebx
c001d38c:	57                   	push   edi
c001d38d:	47                   	inc    edi
c001d38e:	56                   	push   esi
c001d38f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d392:	83 c4 10             	add    esp,0x10
c001d395:	eb e6                	jmp    c001d37d <Video::clearScreen(unsigned int)+0x13>
c001d397:	43                   	inc    ebx
c001d398:	eb d9                	jmp    c001d373 <Video::clearScreen(unsigned int)+0x9>
c001d39a:	5b                   	pop    ebx
c001d39b:	5e                   	pop    esi
c001d39c:	5f                   	pop    edi
c001d39d:	c3                   	ret    

c001d39e <Video::putpixel(int, int, unsigned int)>:
c001d39e:	c7 44 24 04 14 21 03 c0 	mov    DWORD PTR [esp+0x4],0xc0032114
c001d3a6:	e9 03 2e 00 00       	jmp    c00201ae <KePanic(char const*)>
c001d3ab:	90                   	nop

c001d3ac <Video::readPixelApprox(int, int)>:
c001d3ac:	83 ec 18             	sub    esp,0x18
c001d3af:	68 35 21 03 c0       	push   0xc0032135
c001d3b4:	e8 f5 2d 00 00       	call   c00201ae <KePanic(char const*)>
c001d3b9:	31 c0                	xor    eax,eax
c001d3bb:	83 c4 1c             	add    esp,0x1c
c001d3be:	c3                   	ret    
c001d3bf:	90                   	nop

c001d3c0 <Video::Video(char const*)>:
c001d3c0:	83 ec 0c             	sub    esp,0xc
c001d3c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3c7:	83 ec 08             	sub    esp,0x8
c001d3ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3ce:	50                   	push   eax
c001d3cf:	e8 a4 df ff ff       	call   c001b378 <Device::Device(char const*)>
c001d3d4:	83 c4 10             	add    esp,0x10
c001d3d7:	ba d8 21 03 c0       	mov    edx,0xc00321d8
c001d3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3e0:	89 10                	mov    DWORD PTR [eax],edx
c001d3e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3e6:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001d3f0:	90                   	nop
c001d3f1:	83 c4 0c             	add    esp,0xc
c001d3f4:	c3                   	ret    
c001d3f5:	90                   	nop

c001d3f6 <Video::~Video()>:
c001d3f6:	83 ec 0c             	sub    esp,0xc
c001d3f9:	ba d8 21 03 c0       	mov    edx,0xc00321d8
c001d3fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d402:	89 10                	mov    DWORD PTR [eax],edx
c001d404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d408:	83 ec 0c             	sub    esp,0xc
c001d40b:	50                   	push   eax
c001d40c:	e8 07 dd ff ff       	call   c001b118 <Device::~Device()>
c001d411:	83 c4 10             	add    esp,0x10
c001d414:	90                   	nop
c001d415:	83 c4 0c             	add    esp,0xc
c001d418:	c3                   	ret    
c001d419:	90                   	nop

c001d41a <Video::~Video()>:
c001d41a:	83 ec 0c             	sub    esp,0xc
c001d41d:	83 ec 0c             	sub    esp,0xc
c001d420:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d424:	e8 cd ff ff ff       	call   c001d3f6 <Video::~Video()>
c001d429:	83 c4 10             	add    esp,0x10
c001d42c:	83 ec 08             	sub    esp,0x8
c001d42f:	68 64 01 00 00       	push   0x164
c001d434:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d438:	e8 2b bc ff ff       	call   c0019068 <operator delete(void*, unsigned long)>
c001d43d:	83 c4 10             	add    esp,0x10
c001d440:	83 c4 0c             	add    esp,0xc
c001d443:	c3                   	ret    

c001d444 <Video::isMonochrome()>:
c001d444:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d448:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001d44e:	c3                   	ret    
c001d44f:	90                   	nop

c001d450 <Video::getWidth()>:
c001d450:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d454:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d45a:	c3                   	ret    
c001d45b:	90                   	nop

c001d45c <Video::getHeight()>:
c001d45c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d460:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d466:	c3                   	ret    
c001d467:	90                   	nop

c001d468 <Video::drawCursor(int, int, unsigned int*, int)>:
c001d468:	55                   	push   ebp
c001d469:	57                   	push   edi
c001d46a:	56                   	push   esi
c001d46b:	53                   	push   ebx
c001d46c:	83 ec 2c             	sub    esp,0x2c
c001d46f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d473:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d477:	83 f8 01             	cmp    eax,0x1
c001d47a:	19 c9                	sbb    ecx,ecx
c001d47c:	31 db                	xor    ebx,ebx
c001d47e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001d482:	89 cd                	mov    ebp,ecx
c001d484:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001d48c:	f7 d5                	not    ebp
c001d48e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001d494:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d498:	01 d8                	add    eax,ebx
c001d49a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d49e:	56                   	push   esi
c001d49f:	e8 b8 ff ff ff       	call   c001d45c <Video::getHeight()>
c001d4a4:	59                   	pop    ecx
c001d4a5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001d4a9:	7e 70                	jle    c001d51b <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c001d4ab:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d4af:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001d4b3:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001d4b6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d4ba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d4be:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001d4c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d4c9:	89 f8                	mov    eax,edi
c001d4cb:	83 c0 20             	add    eax,0x20
c001d4ce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d4d2:	56                   	push   esi
c001d4d3:	e8 78 ff ff ff       	call   c001d450 <Video::getWidth()>
c001d4d8:	5a                   	pop    edx
c001d4d9:	39 c7                	cmp    edi,eax
c001d4db:	7d 34                	jge    c001d511 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c001d4dd:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001d4e2:	74 05                	je     c001d4e9 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c001d4e4:	8b 06                	mov    eax,DWORD PTR [esi]
c001d4e6:	55                   	push   ebp
c001d4e7:	eb 0d                	jmp    c001d4f6 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c001d4e9:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001d4ee:	74 12                	je     c001d502 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c001d4f0:	8b 06                	mov    eax,DWORD PTR [esi]
c001d4f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d4f6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d4fa:	57                   	push   edi
c001d4fb:	56                   	push   esi
c001d4fc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d4ff:	83 c4 10             	add    esp,0x10
c001d502:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001d506:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001d50a:	47                   	inc    edi
c001d50b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001d50f:	75 c1                	jne    c001d4d2 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c001d511:	43                   	inc    ebx
c001d512:	83 fb 20             	cmp    ebx,0x20
c001d515:	0f 85 79 ff ff ff    	jne    c001d494 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c001d51b:	83 c4 2c             	add    esp,0x2c
c001d51e:	5b                   	pop    ebx
c001d51f:	5e                   	pop    esi
c001d520:	5f                   	pop    edi
c001d521:	5d                   	pop    ebp
c001d522:	c3                   	ret    
c001d523:	90                   	nop

c001d524 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001d524:	55                   	push   ebp
c001d525:	57                   	push   edi
c001d526:	56                   	push   esi
c001d527:	53                   	push   ebx
c001d528:	83 ec 48             	sub    esp,0x48
c001d52b:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001d52f:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c001d533:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c001d537:	c1 e0 08             	shl    eax,0x8
c001d53a:	01 d0                	add    eax,edx
c001d53c:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001d540:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d544:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001d548:	c1 e0 08             	shl    eax,0x8
c001d54b:	01 d0                	add    eax,edx
c001d54d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d551:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d555:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c001d55a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d55e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d562:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001d569:	50                   	push   eax
c001d56a:	e8 97 8d ff ff       	call   c0016306 <malloc>
c001d56f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d573:	83 c4 10             	add    esp,0x10
c001d576:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001d57b:	75 10                	jne    c001d58d <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c001d57d:	83 ec 0c             	sub    esp,0xc
c001d580:	68 60 21 03 c0       	push   0xc0032160
c001d585:	e8 24 2c 00 00       	call   c00201ae <KePanic(char const*)>
c001d58a:	83 c4 10             	add    esp,0x10
c001d58d:	51                   	push   ecx
c001d58e:	51                   	push   ecx
c001d58f:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d593:	50                   	push   eax
c001d594:	68 70 21 03 c0       	push   0xc0032170
c001d599:	e8 f7 bb ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c001d59e:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c001d5a1:	83 e0 20             	and    eax,0x20
c001d5a4:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c001d5a8:	85 c0                	test   eax,eax
c001d5aa:	5e                   	pop    esi
c001d5ab:	0f 94 c0             	sete   al
c001d5ae:	5f                   	pop    edi
c001d5af:	0f b6 c0             	movzx  eax,al
c001d5b2:	be 12 00 00 00       	mov    esi,0x12
c001d5b7:	50                   	push   eax
c001d5b8:	68 7a 21 03 c0       	push   0xc003217a
c001d5bd:	e8 d3 bb ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c001d5c2:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c001d5c6:	83 c4 10             	add    esp,0x10
c001d5c9:	89 d0                	mov    eax,edx
c001d5cb:	85 d2                	test   edx,edx
c001d5cd:	74 11                	je     c001d5e0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c001d5cf:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001d5d3:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c001d5d7:	c1 fe 03             	sar    esi,0x3
c001d5da:	0f af f1             	imul   esi,ecx
c001d5dd:	83 c6 12             	add    esi,0x12
c001d5e0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d5e5:	74 07                	je     c001d5ee <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c001d5e7:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001d5ec:	75 12                	jne    c001d600 <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c001d5ee:	83 ec 0c             	sub    esp,0xc
c001d5f1:	68 88 21 03 c0       	push   0xc0032188
c001d5f6:	e8 9a bb ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c001d5fb:	e9 a0 02 00 00       	jmp    c001d8a0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c001d600:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c001d604:	83 f9 02             	cmp    ecx,0x2
c001d607:	74 0e                	je     c001d617 <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c001d609:	83 f9 0a             	cmp    ecx,0xa
c001d60c:	0f 84 c8 00 00 00    	je     c001d6da <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c001d612:	e9 72 02 00 00       	jmp    c001d889 <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c001d617:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001d61c:	75 0e                	jne    c001d62c <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c001d61e:	84 c0                	test   al,al
c001d620:	75 0a                	jne    c001d62c <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c001d622:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001d625:	83 e8 18             	sub    eax,0x18
c001d628:	a8 f7                	test   al,0xf7
c001d62a:	74 0d                	je     c001d639 <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c001d62c:	83 ec 0c             	sub    esp,0xc
c001d62f:	68 9d 21 03 c0       	push   0xc003219d
c001d634:	e9 58 02 00 00       	jmp    c001d891 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c001d639:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c001d63e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d646:	31 c0                	xor    eax,eax
c001d648:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001d64c:	89 c7                	mov    edi,eax
c001d64e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d656:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001d65b:	75 15                	jne    c001d672 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001d65d:	99                   	cdq    
c001d65e:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c001d662:	85 d2                	test   edx,edx
c001d664:	75 0c                	jne    c001d672 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001d666:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001d66a:	29 c7                	sub    edi,eax
c001d66c:	4f                   	dec    edi
c001d66d:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c001d672:	31 d2                	xor    edx,edx
c001d674:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d678:	75 08                	jne    c001d682 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c001d67a:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c001d67f:	c1 e2 18             	shl    edx,0x18
c001d682:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c001d687:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001d68b:	c1 e1 10             	shl    ecx,0x10
c001d68e:	8d 47 01             	lea    eax,[edi+0x1]
c001d691:	89 cd                	mov    ebp,ecx
c001d693:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c001d698:	c1 e1 08             	shl    ecx,0x8
c001d69b:	09 e9                	or     ecx,ebp
c001d69d:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c001d6a1:	09 e9                	or     ecx,ebp
c001d6a3:	09 d1                	or     ecx,edx
c001d6a5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d6a9:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c001d6ac:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c001d6b0:	c1 fa 03             	sar    edx,0x3
c001d6b3:	01 d6                	add    esi,edx
c001d6b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d6b9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c001d6bd:	7e 04                	jle    c001d6c3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c001d6bf:	89 c7                	mov    edi,eax
c001d6c1:	eb 93                	jmp    c001d656 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c001d6c3:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d6cb:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c001d6cf:	0f 8f 77 ff ff ff    	jg     c001d64c <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c001d6d5:	e9 d3 01 00 00       	jmp    c001d8ad <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c001d6da:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001d6df:	75 0e                	jne    c001d6ef <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c001d6e1:	85 d2                	test   edx,edx
c001d6e3:	75 0a                	jne    c001d6ef <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c001d6e5:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001d6e8:	83 e8 18             	sub    eax,0x18
c001d6eb:	a8 f7                	test   al,0xf7
c001d6ed:	74 0d                	je     c001d6fc <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c001d6ef:	83 ec 0c             	sub    esp,0xc
c001d6f2:	68 ab 21 03 c0       	push   0xc00321ab
c001d6f7:	e9 95 01 00 00       	jmp    c001d891 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c001d6fc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d704:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d70c:	31 c9                	xor    ecx,ecx
c001d70e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001d712:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c001d716:	0f 8e 91 01 00 00    	jle    c001d8ad <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c001d71c:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c001d720:	0f 8d 87 01 00 00    	jge    c001d8ad <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c001d726:	8d 46 01             	lea    eax,[esi+0x1]
c001d729:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c001d72d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d731:	83 fd 7f             	cmp    ebp,0x7f
c001d734:	89 e8                	mov    eax,ebp
c001d736:	0f 8e 9d 00 00 00    	jle    c001d7d9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c001d73c:	83 e0 7f             	and    eax,0x7f
c001d73f:	31 d2                	xor    edx,edx
c001d741:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d745:	40                   	inc    eax
c001d746:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d74a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d74e:	75 0a                	jne    c001d75a <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c001d750:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c001d755:	89 ea                	mov    edx,ebp
c001d757:	c1 e2 18             	shl    edx,0x18
c001d75a:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c001d75f:	c1 e0 10             	shl    eax,0x10
c001d762:	89 c7                	mov    edi,eax
c001d764:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c001d769:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001d76d:	c1 e0 08             	shl    eax,0x8
c001d770:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c001d774:	09 f8                	or     eax,edi
c001d776:	31 f6                	xor    esi,esi
c001d778:	09 c5                	or     ebp,eax
c001d77a:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c001d77f:	09 d5                	or     ebp,edx
c001d781:	85 ff                	test   edi,edi
c001d783:	75 1d                	jne    c001d7a2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c001d785:	89 c8                	mov    eax,ecx
c001d787:	99                   	cdq    
c001d788:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c001d78c:	85 d2                	test   edx,edx
c001d78e:	75 12                	jne    c001d7a2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c001d790:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d794:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c001d798:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001d79c:	49                   	dec    ecx
c001d79d:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c001d7a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7a6:	8d 51 01             	lea    edx,[ecx+0x1]
c001d7a9:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c001d7ac:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c001d7b0:	8d 46 01             	lea    eax,[esi+0x1]
c001d7b3:	7e 06                	jle    c001d7bb <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c001d7b5:	89 c6                	mov    esi,eax
c001d7b7:	89 d1                	mov    ecx,edx
c001d7b9:	eb c6                	jmp    c001d781 <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c001d7bb:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001d7bf:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d7c3:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c001d7c7:	c1 f8 03             	sar    eax,0x3
c001d7ca:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001d7ce:	89 d1                	mov    ecx,edx
c001d7d0:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001d7d4:	e9 35 ff ff ff       	jmp    c001d70e <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c001d7d9:	8d 45 01             	lea    eax,[ebp+0x1]
c001d7dc:	31 f6                	xor    esi,esi
c001d7de:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d7e2:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001d7e7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d7eb:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001d7f0:	75 1d                	jne    c001d80f <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c001d7f2:	89 c8                	mov    eax,ecx
c001d7f4:	99                   	cdq    
c001d7f5:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c001d7f9:	85 d2                	test   edx,edx
c001d7fb:	75 12                	jne    c001d80f <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c001d7fd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d801:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c001d805:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001d809:	49                   	dec    ecx
c001d80a:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c001d80f:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c001d817:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d81b:	75 10                	jne    c001d82d <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c001d81d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d821:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c001d826:	c1 e7 18             	shl    edi,0x18
c001d829:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001d82d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d831:	8d 51 01             	lea    edx,[ecx+0x1]
c001d834:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c001d839:	c1 e0 10             	shl    eax,0x10
c001d83c:	89 c7                	mov    edi,eax
c001d83e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d842:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c001d847:	c1 e0 08             	shl    eax,0x8
c001d84a:	09 f8                	or     eax,edi
c001d84c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d850:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c001d854:	09 f8                	or     eax,edi
c001d856:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001d85a:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c001d85e:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c001d861:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d865:	c1 f8 03             	sar    eax,0x3
c001d868:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001d86c:	8d 46 01             	lea    eax,[esi+0x1]
c001d86f:	39 f5                	cmp    ebp,esi
c001d871:	7e 09                	jle    c001d87c <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c001d873:	89 c6                	mov    esi,eax
c001d875:	89 d1                	mov    ecx,edx
c001d877:	e9 6f ff ff ff       	jmp    c001d7eb <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c001d87c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001d880:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c001d884:	e9 45 ff ff ff       	jmp    c001d7ce <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c001d889:	52                   	push   edx
c001d88a:	52                   	push   edx
c001d88b:	51                   	push   ecx
c001d88c:	68 ba 21 03 c0       	push   0xc00321ba
c001d891:	e8 ff b8 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c001d896:	58                   	pop    eax
c001d897:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d89b:	e8 76 8a ff ff       	call   c0016316 <free>
c001d8a0:	83 c4 10             	add    esp,0x10
c001d8a3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d8ab:	eb 14                	jmp    c001d8c1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c001d8ad:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001d8b1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d8b5:	89 18                	mov    DWORD PTR [eax],ebx
c001d8b7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001d8bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d8bf:	89 18                	mov    DWORD PTR [eax],ebx
c001d8c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8c5:	83 c4 3c             	add    esp,0x3c
c001d8c8:	5b                   	pop    ebx
c001d8c9:	5e                   	pop    esi
c001d8ca:	5f                   	pop    edi
c001d8cb:	5d                   	pop    ebp
c001d8cc:	c3                   	ret    
c001d8cd:	90                   	nop

c001d8ce <Video::putTGA(int, int, unsigned char*, int)>:
c001d8ce:	55                   	push   ebp
c001d8cf:	57                   	push   edi
c001d8d0:	56                   	push   esi
c001d8d1:	53                   	push   ebx
c001d8d2:	83 ec 28             	sub    esp,0x28
c001d8d5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001d8d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d8dd:	50                   	push   eax
c001d8de:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d8e2:	50                   	push   eax
c001d8e3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001d8e7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001d8eb:	57                   	push   edi
c001d8ec:	e8 33 fc ff ff       	call   c001d524 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001d8f1:	83 c4 20             	add    esp,0x20
c001d8f4:	85 c0                	test   eax,eax
c001d8f6:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d8fa:	74 3a                	je     c001d936 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c001d8fc:	89 c6                	mov    esi,eax
c001d8fe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d902:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001d906:	39 d8                	cmp    eax,ebx
c001d908:	7e 2c                	jle    c001d936 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c001d90a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d90e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d912:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d916:	39 e8                	cmp    eax,ebp
c001d918:	7e 19                	jle    c001d933 <Video::putTGA(int, int, unsigned char*, int)+0x65>
c001d91a:	83 c6 04             	add    esi,0x4
c001d91d:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c001d920:	85 c0                	test   eax,eax
c001d922:	79 0c                	jns    c001d930 <Video::putTGA(int, int, unsigned char*, int)+0x62>
c001d924:	8b 17                	mov    edx,DWORD PTR [edi]
c001d926:	50                   	push   eax
c001d927:	53                   	push   ebx
c001d928:	55                   	push   ebp
c001d929:	57                   	push   edi
c001d92a:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001d92d:	83 c4 10             	add    esp,0x10
c001d930:	45                   	inc    ebp
c001d931:	eb db                	jmp    c001d90e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001d933:	43                   	inc    ebx
c001d934:	eb c8                	jmp    c001d8fe <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001d936:	83 c4 1c             	add    esp,0x1c
c001d939:	5b                   	pop    ebx
c001d93a:	5e                   	pop    esi
c001d93b:	5f                   	pop    edi
c001d93c:	5d                   	pop    ebp
c001d93d:	c3                   	ret    
c001d93e:	66 90                	xchg   ax,ax

c001d940 <ACPI::close(int, int, void*)>:
c001d940:	83 ec 1c             	sub    esp,0x1c
c001d943:	83 ec 0c             	sub    esp,0xc
c001d946:	68 1c 22 03 c0       	push   0xc003221c
c001d94b:	e8 45 b8 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c001d950:	83 c4 10             	add    esp,0x10
c001d953:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001d95b:	74 1b                	je     c001d978 <ACPI::close(int, int, void*)+0x38>
c001d95d:	83 ec 0c             	sub    esp,0xc
c001d960:	68 2b 22 03 c0       	push   0xc003222b
c001d965:	e8 2b b8 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c001d96a:	83 c4 10             	add    esp,0x10
c001d96d:	b8 00 00 00 00       	mov    eax,0x0
c001d972:	e9 01 01 00 00       	jmp    c001da78 <ACPI::close(int, int, void*)+0x138>
c001d977:	90                   	nop
c001d978:	83 ec 0c             	sub    esp,0xc
c001d97b:	68 3c 22 03 c0       	push   0xc003223c
c001d980:	e8 10 b8 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c001d985:	83 c4 10             	add    esp,0x10
c001d988:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001d98d:	75 45                	jne    c001d9d4 <ACPI::close(int, int, void*)+0x94>
c001d98f:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001d994:	83 ec 08             	sub    esp,0x8
c001d997:	50                   	push   eax
c001d998:	68 4b 22 03 c0       	push   0xc003224b
c001d99d:	e8 f3 b7 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c001d9a2:	83 c4 10             	add    esp,0x10
c001d9a5:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001d9aa:	85 c0                	test   eax,eax
c001d9ac:	74 0a                	je     c001d9b8 <ACPI::close(int, int, void*)+0x78>
c001d9ae:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001d9b3:	ff d0                	call   eax
c001d9b5:	8d 76 00             	lea    esi,[esi+0x0]
c001d9b8:	83 ec 0c             	sub    esp,0xc
c001d9bb:	68 1c 24 03 c0       	push   0xc003241c
c001d9c0:	e8 e9 27 00 00       	call   c00201ae <KePanic(char const*)>
c001d9c5:	83 c4 10             	add    esp,0x10
c001d9c8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001d9cd:	e9 a6 00 00 00       	jmp    c001da78 <ACPI::close(int, int, void*)+0x138>
c001d9d2:	66 90                	xchg   ax,ax
c001d9d4:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001d9d9:	0f 85 81 00 00 00    	jne    c001da60 <ACPI::close(int, int, void*)+0x120>
c001d9df:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001d9e4:	83 ec 08             	sub    esp,0x8
c001d9e7:	50                   	push   eax
c001d9e8:	68 69 22 03 c0       	push   0xc0032269
c001d9ed:	e8 a3 b7 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c001d9f2:	83 c4 10             	add    esp,0x10
c001d9f5:	a1 04 f4 03 c0       	mov    eax,ds:0xc003f404
c001d9fa:	85 c0                	test   eax,eax
c001d9fc:	74 0a                	je     c001da08 <ACPI::close(int, int, void*)+0xc8>
c001d9fe:	a1 04 f4 03 c0       	mov    eax,ds:0xc003f404
c001da03:	ff d0                	call   eax
c001da05:	8d 76 00             	lea    esi,[esi+0x0]
c001da08:	83 ec 0c             	sub    esp,0xc
c001da0b:	68 84 22 03 c0       	push   0xc0032284
c001da10:	e8 80 b7 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c001da15:	83 c4 10             	add    esp,0x10
c001da18:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001da1d:	8d 76 00             	lea    esi,[esi+0x0]
c001da20:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001da25:	83 e0 02             	and    eax,0x2
c001da28:	74 1e                	je     c001da48 <ACPI::close(int, int, void*)+0x108>
c001da2a:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001da31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da35:	89 c2                	mov    edx,eax
c001da37:	ec                   	in     al,dx
c001da38:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001da3c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001da40:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001da44:	eb da                	jmp    c001da20 <ACPI::close(int, int, void*)+0xe0>
c001da46:	66 90                	xchg   ax,ax
c001da48:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001da4f:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001da54:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001da58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001da5c:	ee                   	out    dx,al
c001da5d:	8d 76 00             	lea    esi,[esi+0x0]
c001da60:	83 ec 0c             	sub    esp,0xc
c001da63:	68 96 22 03 c0       	push   0xc0032296
c001da68:	e8 28 b7 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c001da6d:	83 c4 10             	add    esp,0x10
c001da70:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001da75:	8d 76 00             	lea    esi,[esi+0x0]
c001da78:	83 c4 1c             	add    esp,0x1c
c001da7b:	c3                   	ret    

c001da7c <findRSDP()>:
c001da7c:	83 ec 1c             	sub    esp,0x1c
c001da7f:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001da84:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001da8a:	83 e0 04             	and    eax,0x4
c001da8d:	0f b6 c0             	movzx  eax,al
c001da90:	85 c0                	test   eax,eax
c001da92:	75 08                	jne    c001da9c <findRSDP()+0x20>
c001da94:	b8 00 00 00 00       	mov    eax,0x0
c001da99:	eb 75                	jmp    c001db10 <findRSDP()+0x94>
c001da9b:	90                   	nop
c001da9c:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c001daa1:	3d ff 07 00 00       	cmp    eax,0x7ff
c001daa6:	7f 1c                	jg     c001dac4 <findRSDP()+0x48>
c001daa8:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001daad:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001dab3:	83 e2 fb             	and    edx,0xfffffffb
c001dab6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001dabc:	b8 00 00 00 00       	mov    eax,0x0
c001dac1:	eb 4d                	jmp    c001db10 <findRSDP()+0x94>
c001dac3:	90                   	nop
c001dac4:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001dacc:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001dad4:	77 32                	ja     c001db08 <findRSDP()+0x8c>
c001dad6:	83 ec 04             	sub    esp,0x4
c001dad9:	6a 08                	push   0x8
c001dadb:	68 a5 22 03 c0       	push   0xc00322a5
c001dae0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dae4:	e8 97 28 fe ff       	call   c0000380 <memcmp>
c001dae9:	83 c4 10             	add    esp,0x10
c001daec:	85 c0                	test   eax,eax
c001daee:	0f 94 c0             	sete   al
c001daf1:	0f b6 c0             	movzx  eax,al
c001daf4:	85 c0                	test   eax,eax
c001daf6:	74 08                	je     c001db00 <findRSDP()+0x84>
c001daf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dafc:	eb 12                	jmp    c001db10 <findRSDP()+0x94>
c001dafe:	66 90                	xchg   ax,ax
c001db00:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001db05:	eb c5                	jmp    c001dacc <findRSDP()+0x50>
c001db07:	90                   	nop
c001db08:	b8 00 00 00 00       	mov    eax,0x0
c001db0d:	8d 76 00             	lea    esi,[esi+0x0]
c001db10:	83 c4 1c             	add    esp,0x1c
c001db13:	c3                   	ret    

c001db14 <loadACPITables(unsigned char*)>:
c001db14:	57                   	push   edi
c001db15:	56                   	push   esi
c001db16:	53                   	push   ebx
c001db17:	83 ec 60             	sub    esp,0x60
c001db1a:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001db1f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001db25:	83 e0 04             	and    eax,0x4
c001db28:	0f b6 c0             	movzx  eax,al
c001db2b:	85 c0                	test   eax,eax
c001db2d:	0f 84 41 02 00 00    	je     c001dd74 <loadACPITables(unsigned char*)+0x260>
c001db33:	a0 20 f6 03 c0       	mov    al,ds:0xc003f620
c001db38:	0f b6 c0             	movzx  eax,al
c001db3b:	85 c0                	test   eax,eax
c001db3d:	74 79                	je     c001dbb8 <loadACPITables(unsigned char*)+0xa4>
c001db3f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001db43:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001db47:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001db4b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001db4e:	83 e8 24             	sub    eax,0x24
c001db51:	c1 e8 03             	shr    eax,0x3
c001db54:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001db58:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001db60:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001db64:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001db68:	0f 8d ba 00 00 00    	jge    c001dc28 <loadACPITables(unsigned char*)+0x114>
c001db6e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001db72:	83 c0 24             	add    eax,0x24
c001db75:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001db79:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001db7d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001db81:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001db85:	c1 e0 03             	shl    eax,0x3
c001db88:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001db8c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001db90:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001db93:	8b 00                	mov    eax,DWORD PTR [eax]
c001db95:	89 c1                	mov    ecx,eax
c001db97:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001db9c:	8d 50 01             	lea    edx,[eax+0x1]
c001db9f:	89 15 0c f4 03 c0    	mov    DWORD PTR ds:0xc003f40c,edx
c001dba5:	89 ca                	mov    edx,ecx
c001dba7:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001dbae:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c001dbb3:	eb ab                	jmp    c001db60 <loadACPITables(unsigned char*)+0x4c>
c001dbb5:	8d 76 00             	lea    esi,[esi+0x0]
c001dbb8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dbbc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001dbc0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001dbc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dbc7:	83 e8 24             	sub    eax,0x24
c001dbca:	c1 e8 02             	shr    eax,0x2
c001dbcd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001dbd1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001dbd9:	8d 76 00             	lea    esi,[esi+0x0]
c001dbdc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001dbe0:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001dbe4:	7d 42                	jge    c001dc28 <loadACPITables(unsigned char*)+0x114>
c001dbe6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dbea:	83 c0 24             	add    eax,0x24
c001dbed:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001dbf1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dbf5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001dbf9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001dbfd:	c1 e0 02             	shl    eax,0x2
c001dc00:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001dc04:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dc08:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dc0a:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dc0f:	8d 50 01             	lea    edx,[eax+0x1]
c001dc12:	89 15 0c f4 03 c0    	mov    DWORD PTR ds:0xc003f40c,edx
c001dc18:	89 ca                	mov    edx,ecx
c001dc1a:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001dc21:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c001dc26:	eb b4                	jmp    c001dbdc <loadACPITables(unsigned char*)+0xc8>
c001dc28:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001dc30:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dc35:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001dc39:	0f 8d 39 01 00 00    	jge    c001dd78 <loadACPITables(unsigned char*)+0x264>
c001dc3f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dc43:	8b 04 c5 24 f4 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc0bdc]
c001dc4a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001dc4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc52:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001dc56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc5a:	25 ff 0f 00 00       	and    eax,0xfff
c001dc5f:	89 c6                	mov    esi,eax
c001dc61:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001dc67:	83 ec 0c             	sub    esp,0xc
c001dc6a:	6a 01                	push   0x1
c001dc6c:	e8 ec a1 ff ff       	call   c0017e5d <Virt::allocateKernelVirtualPages(int)>
c001dc71:	83 c4 10             	add    esp,0x10
c001dc74:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001dc78:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001dc7e:	83 ec 0c             	sub    esp,0xc
c001dc81:	6a 01                	push   0x1
c001dc83:	6a 01                	push   0x1
c001dc85:	50                   	push   eax
c001dc86:	52                   	push   edx
c001dc87:	53                   	push   ebx
c001dc88:	e8 dd aa ff ff       	call   c001876a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001dc8d:	83 c4 20             	add    esp,0x20
c001dc90:	09 f0                	or     eax,esi
c001dc92:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001dc96:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dc9a:	c1 e0 03             	shl    eax,0x3
c001dc9d:	05 20 f4 03 c0       	add    eax,0xc003f420
c001dca2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dca6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcaa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dcae:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001dcb6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dcba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dcbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dcc2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dcc6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001dcca:	89 c6                	mov    esi,eax
c001dccc:	89 d7                	mov    edi,edx
c001dcce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dcd0:	89 c8                	mov    eax,ecx
c001dcd2:	89 fa                	mov    edx,edi
c001dcd4:	89 f3                	mov    ebx,esi
c001dcd6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001dcda:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dcde:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dce2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dce6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dce9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001dced:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001dcf1:	05 00 10 00 00       	add    eax,0x1000
c001dcf6:	c1 e8 0c             	shr    eax,0xc
c001dcf9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001dcfd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd01:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001dd05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd09:	25 ff 0f 00 00       	and    eax,0xfff
c001dd0e:	89 c6                	mov    esi,eax
c001dd10:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001dd16:	83 ec 0c             	sub    esp,0xc
c001dd19:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001dd1d:	e8 3b a1 ff ff       	call   c0017e5d <Virt::allocateKernelVirtualPages(int)>
c001dd22:	83 c4 10             	add    esp,0x10
c001dd25:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001dd29:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001dd2f:	83 ec 0c             	sub    esp,0xc
c001dd32:	6a 01                	push   0x1
c001dd34:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dd38:	50                   	push   eax
c001dd39:	52                   	push   edx
c001dd3a:	53                   	push   ebx
c001dd3b:	e8 2a aa ff ff       	call   c001876a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001dd40:	83 c4 20             	add    esp,0x20
c001dd43:	09 f0                	or     eax,esi
c001dd45:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001dd49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd4d:	83 ec 0c             	sub    esp,0xc
c001dd50:	50                   	push   eax
c001dd51:	e8 25 a4 ff ff       	call   c001817b <Virt::freeKernelVirtualPages(unsigned long)>
c001dd56:	83 c4 10             	add    esp,0x10
c001dd59:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dd5d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dd61:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001dd68:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c001dd6d:	e9 be fe ff ff       	jmp    c001dc30 <loadACPITables(unsigned char*)+0x11c>
c001dd72:	66 90                	xchg   ax,ax
c001dd74:	90                   	nop
c001dd75:	8d 76 00             	lea    esi,[esi+0x0]
c001dd78:	83 c4 60             	add    esp,0x60
c001dd7b:	5b                   	pop    ebx
c001dd7c:	5e                   	pop    esi
c001dd7d:	5f                   	pop    edi
c001dd7e:	c3                   	ret    
c001dd7f:	90                   	nop

c001dd80 <findRSDT(unsigned char*)>:
c001dd80:	57                   	push   edi
c001dd81:	56                   	push   esi
c001dd82:	53                   	push   ebx
c001dd83:	83 ec 50             	sub    esp,0x50
c001dd86:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001dd8b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001dd91:	83 e0 04             	and    eax,0x4
c001dd94:	0f b6 c0             	movzx  eax,al
c001dd97:	85 c0                	test   eax,eax
c001dd99:	75 0d                	jne    c001dda8 <findRSDT(unsigned char*)+0x28>
c001dd9b:	b8 00 00 00 00       	mov    eax,0x0
c001dda0:	e9 2b 01 00 00       	jmp    c001ded0 <findRSDT(unsigned char*)+0x150>
c001dda5:	8d 76 00             	lea    esi,[esi+0x0]
c001dda8:	89 e0                	mov    eax,esp
c001ddaa:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001ddae:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001ddb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ddb6:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001ddbe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ddc2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ddc6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ddca:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ddce:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001ddd2:	89 c6                	mov    esi,eax
c001ddd4:	89 d7                	mov    edi,edx
c001ddd6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ddd8:	89 c8                	mov    eax,ecx
c001ddda:	89 fa                	mov    edx,edi
c001dddc:	89 f3                	mov    ebx,esi
c001ddde:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001dde2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001dde6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ddea:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ddee:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c001ddf2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001ddfa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ddfe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001de02:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001de06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de0a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001de0e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001de12:	25 ff 0f 00 00       	and    eax,0xfff
c001de17:	89 c6                	mov    esi,eax
c001de19:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001de1f:	83 ec 0c             	sub    esp,0xc
c001de22:	6a 02                	push   0x2
c001de24:	e8 34 a0 ff ff       	call   c0017e5d <Virt::allocateKernelVirtualPages(int)>
c001de29:	83 c4 10             	add    esp,0x10
c001de2c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001de30:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001de36:	83 ec 0c             	sub    esp,0xc
c001de39:	6a 01                	push   0x1
c001de3b:	6a 02                	push   0x2
c001de3d:	50                   	push   eax
c001de3e:	52                   	push   edx
c001de3f:	53                   	push   ebx
c001de40:	e8 25 a9 ff ff       	call   c001876a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001de45:	83 c4 20             	add    esp,0x20
c001de48:	09 f0                	or     eax,esi
c001de4a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001de4e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001de52:	25 ff 0f 00 00       	and    eax,0xfff
c001de57:	89 c6                	mov    esi,eax
c001de59:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001de5f:	83 ec 0c             	sub    esp,0xc
c001de62:	6a 02                	push   0x2
c001de64:	e8 f4 9f ff ff       	call   c0017e5d <Virt::allocateKernelVirtualPages(int)>
c001de69:	83 c4 10             	add    esp,0x10
c001de6c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001de70:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001de76:	83 ec 0c             	sub    esp,0xc
c001de79:	6a 01                	push   0x1
c001de7b:	6a 02                	push   0x2
c001de7d:	50                   	push   eax
c001de7e:	52                   	push   edx
c001de7f:	53                   	push   ebx
c001de80:	e8 e5 a8 ff ff       	call   c001876a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001de85:	83 c4 20             	add    esp,0x20
c001de88:	09 f0                	or     eax,esi
c001de8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001de8e:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001de93:	85 c0                	test   eax,eax
c001de95:	75 11                	jne    c001dea8 <findRSDT(unsigned char*)+0x128>
c001de97:	c6 05 20 f6 03 c0 00 	mov    BYTE PTR ds:0xc003f620,0x0
c001de9e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001dea2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001dea6:	eb 24                	jmp    c001decc <findRSDT(unsigned char*)+0x14c>
c001dea8:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001dead:	83 f8 02             	cmp    eax,0x2
c001deb0:	75 12                	jne    c001dec4 <findRSDT(unsigned char*)+0x144>
c001deb2:	c6 05 20 f6 03 c0 01 	mov    BYTE PTR ds:0xc003f620,0x1
c001deb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001debd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001dec1:	eb 09                	jmp    c001decc <findRSDT(unsigned char*)+0x14c>
c001dec3:	90                   	nop
c001dec4:	b8 00 00 00 00       	mov    eax,0x0
c001dec9:	eb 05                	jmp    c001ded0 <findRSDT(unsigned char*)+0x150>
c001decb:	90                   	nop
c001decc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ded0:	83 c4 50             	add    esp,0x50
c001ded3:	5b                   	pop    ebx
c001ded4:	5e                   	pop    esi
c001ded5:	5f                   	pop    edi
c001ded6:	c3                   	ret    
c001ded7:	90                   	nop

c001ded8 <findDataTable(unsigned char*, char*)>:
c001ded8:	83 ec 1c             	sub    esp,0x1c
c001dedb:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001dee0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001dee6:	83 e0 04             	and    eax,0x4
c001dee9:	0f b6 c0             	movzx  eax,al
c001deec:	85 c0                	test   eax,eax
c001deee:	75 08                	jne    c001def8 <findDataTable(unsigned char*, char*)+0x20>
c001def0:	b8 00 00 00 00       	mov    eax,0x0
c001def5:	eb 5d                	jmp    c001df54 <findDataTable(unsigned char*, char*)+0x7c>
c001def7:	90                   	nop
c001def8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001df00:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001df05:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001df09:	7d 41                	jge    c001df4c <findDataTable(unsigned char*, char*)+0x74>
c001df0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001df0f:	c1 e0 03             	shl    eax,0x3
c001df12:	05 20 f4 03 c0       	add    eax,0xc003f420
c001df17:	83 ec 04             	sub    esp,0x4
c001df1a:	6a 04                	push   0x4
c001df1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df20:	50                   	push   eax
c001df21:	e8 5a 24 fe ff       	call   c0000380 <memcmp>
c001df26:	83 c4 10             	add    esp,0x10
c001df29:	85 c0                	test   eax,eax
c001df2b:	0f 94 c0             	sete   al
c001df2e:	0f b6 c0             	movzx  eax,al
c001df31:	85 c0                	test   eax,eax
c001df33:	74 0f                	je     c001df44 <findDataTable(unsigned char*, char*)+0x6c>
c001df35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001df39:	8b 04 c5 24 f4 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc0bdc]
c001df40:	eb 12                	jmp    c001df54 <findDataTable(unsigned char*, char*)+0x7c>
c001df42:	66 90                	xchg   ax,ax
c001df44:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001df49:	eb b5                	jmp    c001df00 <findDataTable(unsigned char*, char*)+0x28>
c001df4b:	90                   	nop
c001df4c:	b8 00 00 00 00       	mov    eax,0x0
c001df51:	8d 76 00             	lea    esi,[esi+0x0]
c001df54:	83 c4 1c             	add    esp,0x1c
c001df57:	c3                   	ret    

c001df58 <scanMADT()>:
c001df58:	53                   	push   ebx
c001df59:	83 ec 38             	sub    esp,0x38
c001df5c:	a1 d4 a9 03 c0       	mov    eax,ds:0xc003a9d4
c001df61:	25 00 04 00 00       	and    eax,0x400
c001df66:	74 14                	je     c001df7c <scanMADT()+0x24>
c001df68:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001df6d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001df73:	83 e2 fb             	and    edx,0xfffffffb
c001df76:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001df7c:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001df81:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001df87:	83 e0 04             	and    eax,0x4
c001df8a:	0f b6 c0             	movzx  eax,al
c001df8d:	85 c0                	test   eax,eax
c001df8f:	0f 84 6b 04 00 00    	je     c001e400 <scanMADT()+0x4a8>
c001df95:	e8 e2 fa ff ff       	call   c001da7c <findRSDP()>
c001df9a:	a3 2c f6 03 c0       	mov    ds:0xc003f62c,eax
c001df9f:	a1 2c f6 03 c0       	mov    eax,ds:0xc003f62c
c001dfa4:	85 c0                	test   eax,eax
c001dfa6:	75 1c                	jne    c001dfc4 <scanMADT()+0x6c>
c001dfa8:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001dfad:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001dfb3:	83 e2 fb             	and    edx,0xfffffffb
c001dfb6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001dfbc:	e9 47 04 00 00       	jmp    c001e408 <scanMADT()+0x4b0>
c001dfc1:	8d 76 00             	lea    esi,[esi+0x0]
c001dfc4:	a1 2c f6 03 c0       	mov    eax,ds:0xc003f62c
c001dfc9:	83 ec 0c             	sub    esp,0xc
c001dfcc:	50                   	push   eax
c001dfcd:	e8 ae fd ff ff       	call   c001dd80 <findRSDT(unsigned char*)>
c001dfd2:	83 c4 10             	add    esp,0x10
c001dfd5:	a3 28 f6 03 c0       	mov    ds:0xc003f628,eax
c001dfda:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001dfdf:	85 c0                	test   eax,eax
c001dfe1:	75 19                	jne    c001dffc <scanMADT()+0xa4>
c001dfe3:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001dfe8:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001dfee:	83 e2 fb             	and    edx,0xfffffffb
c001dff1:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001dff7:	e9 0c 04 00 00       	jmp    c001e408 <scanMADT()+0x4b0>
c001dffc:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e001:	83 ec 0c             	sub    esp,0xc
c001e004:	50                   	push   eax
c001e005:	e8 0a fb ff ff       	call   c001db14 <loadACPITables(unsigned char*)>
c001e00a:	83 c4 10             	add    esp,0x10
c001e00d:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e012:	83 ec 08             	sub    esp,0x8
c001e015:	68 ae 22 03 c0       	push   0xc00322ae
c001e01a:	50                   	push   eax
c001e01b:	e8 b8 fe ff ff       	call   c001ded8 <findDataTable(unsigned char*, char*)>
c001e020:	83 c4 10             	add    esp,0x10
c001e023:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e027:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001e02c:	75 1a                	jne    c001e048 <scanMADT()+0xf0>
c001e02e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e033:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e039:	83 e2 fe             	and    edx,0xfffffffe
c001e03c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e042:	e9 c1 03 00 00       	jmp    c001e408 <scanMADT()+0x4b0>
c001e047:	90                   	nop
c001e048:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001e050:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e054:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e057:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001e05b:	0f 87 a7 03 00 00    	ja     c001e408 <scanMADT()+0x4b0>
c001e061:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c001e069:	0f 87 99 03 00 00    	ja     c001e408 <scanMADT()+0x4b0>
c001e06f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e073:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e077:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e07b:	8d 50 01             	lea    edx,[eax+0x1]
c001e07e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e082:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e086:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e08a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001e08e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e092:	8d 50 01             	lea    edx,[eax+0x1]
c001e095:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e099:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e09d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e0a1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001e0a5:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c001e0aa:	83 f8 02             	cmp    eax,0x2
c001e0ad:	0f 86 51 03 00 00    	jbe    c001e404 <scanMADT()+0x4ac>
c001e0b3:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e0b8:	85 c0                	test   eax,eax
c001e0ba:	75 58                	jne    c001e114 <scanMADT()+0x1bc>
c001e0bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e0c0:	8d 50 01             	lea    edx,[eax+0x1]
c001e0c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e0c7:	8a 15 20 f8 03 c0    	mov    dl,BYTE PTR ds:0xc003f820
c001e0cd:	0f b6 d2             	movzx  edx,dl
c001e0d0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e0d4:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e0d8:	88 82 60 f8 03 c0    	mov    BYTE PTR [edx-0x3ffc07a0],al
c001e0de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e0e2:	8d 50 01             	lea    edx,[eax+0x1]
c001e0e5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e0e9:	8a 15 20 f8 03 c0    	mov    dl,BYTE PTR ds:0xc003f820
c001e0ef:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e0f2:	88 0d 20 f8 03 c0    	mov    BYTE PTR ds:0xc003f820,cl
c001e0f8:	0f b6 d2             	movzx  edx,dl
c001e0fb:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e0ff:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e103:	88 82 40 f8 03 c0    	mov    BYTE PTR [edx-0x3ffc07c0],al
c001e109:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e10e:	e9 d9 02 00 00       	jmp    c001e3ec <scanMADT()+0x494>
c001e113:	90                   	nop
c001e114:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e119:	83 f8 01             	cmp    eax,0x1
c001e11c:	0f 85 1a 01 00 00    	jne    c001e23c <scanMADT()+0x2e4>
c001e122:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e126:	8d 50 01             	lea    edx,[eax+0x1]
c001e129:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e12d:	8a 15 e0 f6 03 c0    	mov    dl,BYTE PTR ds:0xc003f6e0
c001e133:	0f b6 d2             	movzx  edx,dl
c001e136:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e13a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e13e:	88 82 00 f7 03 c0    	mov    BYTE PTR [edx-0x3ffc0900],al
c001e144:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c001e149:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e14d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e151:	01 d0                	add    eax,edx
c001e153:	83 c0 2c             	add    eax,0x2c
c001e156:	8a 00                	mov    al,BYTE PTR [eax]
c001e158:	0f b6 d0             	movzx  edx,al
c001e15b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e15f:	8d 48 01             	lea    ecx,[eax+0x1]
c001e162:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e166:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e16a:	0f b6 c0             	movzx  eax,al
c001e16d:	c1 e0 08             	shl    eax,0x8
c001e170:	89 d1                	mov    ecx,edx
c001e172:	09 c1                	or     ecx,eax
c001e174:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e178:	8d 50 02             	lea    edx,[eax+0x2]
c001e17b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e17f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e183:	0f b6 c0             	movzx  eax,al
c001e186:	c1 e0 10             	shl    eax,0x10
c001e189:	09 c1                	or     ecx,eax
c001e18b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e18f:	8d 50 03             	lea    edx,[eax+0x3]
c001e192:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e196:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e19a:	0f b6 c0             	movzx  eax,al
c001e19d:	c1 e0 18             	shl    eax,0x18
c001e1a0:	09 c1                	or     ecx,eax
c001e1a2:	89 ca                	mov    edx,ecx
c001e1a4:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e1a9:	0f b6 c0             	movzx  eax,al
c001e1ac:	89 14 85 20 f7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc08e0],edx
c001e1b3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e1b8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e1bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e1c0:	01 d0                	add    eax,edx
c001e1c2:	83 c0 2c             	add    eax,0x2c
c001e1c5:	8a 00                	mov    al,BYTE PTR [eax]
c001e1c7:	0f b6 d0             	movzx  edx,al
c001e1ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e1ce:	8d 48 01             	lea    ecx,[eax+0x1]
c001e1d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e1d5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e1d9:	0f b6 c0             	movzx  eax,al
c001e1dc:	c1 e0 08             	shl    eax,0x8
c001e1df:	89 d1                	mov    ecx,edx
c001e1e1:	09 c1                	or     ecx,eax
c001e1e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e1e7:	8d 50 02             	lea    edx,[eax+0x2]
c001e1ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e1ee:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e1f2:	0f b6 c0             	movzx  eax,al
c001e1f5:	c1 e0 10             	shl    eax,0x10
c001e1f8:	09 c1                	or     ecx,eax
c001e1fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e1fe:	8d 50 03             	lea    edx,[eax+0x3]
c001e201:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e205:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e209:	0f b6 c0             	movzx  eax,al
c001e20c:	c1 e0 18             	shl    eax,0x18
c001e20f:	09 c1                	or     ecx,eax
c001e211:	89 ca                	mov    edx,ecx
c001e213:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e218:	0f b6 c0             	movzx  eax,al
c001e21b:	89 14 85 a0 f7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc0860],edx
c001e222:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e227:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e22c:	83 c0 01             	add    eax,0x1
c001e22f:	a2 e0 f6 03 c0       	mov    ds:0xc003f6e0,al
c001e234:	e9 b3 01 00 00       	jmp    c001e3ec <scanMADT()+0x494>
c001e239:	8d 76 00             	lea    esi,[esi+0x0]
c001e23c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e241:	83 f8 02             	cmp    eax,0x2
c001e244:	0f 85 ea 00 00 00    	jne    c001e334 <scanMADT()+0x3dc>
c001e24a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e24e:	8d 50 01             	lea    edx,[eax+0x1]
c001e251:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e255:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e259:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e25d:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001e261:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e265:	8d 50 01             	lea    edx,[eax+0x1]
c001e268:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e26c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e270:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e274:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001e278:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e27c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e280:	01 d0                	add    eax,edx
c001e282:	83 c0 2c             	add    eax,0x2c
c001e285:	8a 00                	mov    al,BYTE PTR [eax]
c001e287:	0f b6 d0             	movzx  edx,al
c001e28a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e28e:	8d 48 01             	lea    ecx,[eax+0x1]
c001e291:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e295:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e299:	0f b6 c0             	movzx  eax,al
c001e29c:	c1 e0 08             	shl    eax,0x8
c001e29f:	89 d1                	mov    ecx,edx
c001e2a1:	09 c1                	or     ecx,eax
c001e2a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e2a7:	8d 50 02             	lea    edx,[eax+0x2]
c001e2aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e2ae:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e2b2:	0f b6 c0             	movzx  eax,al
c001e2b5:	c1 e0 10             	shl    eax,0x10
c001e2b8:	09 c1                	or     ecx,eax
c001e2ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e2be:	8d 50 03             	lea    edx,[eax+0x3]
c001e2c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e2c5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e2c9:	0f b6 c0             	movzx  eax,al
c001e2cc:	c1 e0 18             	shl    eax,0x18
c001e2cf:	09 c8                	or     eax,ecx
c001e2d1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e2d5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e2da:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e2de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e2e2:	01 d0                	add    eax,edx
c001e2e4:	83 c0 2c             	add    eax,0x2c
c001e2e7:	8a 00                	mov    al,BYTE PTR [eax]
c001e2e9:	0f b6 c0             	movzx  eax,al
c001e2ec:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e2f0:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e2f3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e2f7:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001e2fb:	0f b6 d2             	movzx  edx,dl
c001e2fe:	c1 e2 08             	shl    edx,0x8
c001e301:	09 d0                	or     eax,edx
c001e303:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001e308:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e30d:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001e312:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e316:	88 90 c8 3a 03 c0    	mov    BYTE PTR [eax-0x3ffcc538],dl
c001e31c:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001e321:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001e326:	66 89 84 12 c0 f6 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffc0940],ax
c001e32e:	e9 b9 00 00 00       	jmp    c001e3ec <scanMADT()+0x494>
c001e333:	90                   	nop
c001e334:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e339:	83 f8 04             	cmp    eax,0x4
c001e33c:	0f 85 9a 00 00 00    	jne    c001e3dc <scanMADT()+0x484>
c001e342:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e346:	8d 50 01             	lea    edx,[eax+0x1]
c001e349:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e34d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e351:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e355:	0f b6 c0             	movzx  eax,al
c001e358:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e35c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e360:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e364:	01 d0                	add    eax,edx
c001e366:	83 c0 2c             	add    eax,0x2c
c001e369:	8a 00                	mov    al,BYTE PTR [eax]
c001e36b:	0f b6 d0             	movzx  edx,al
c001e36e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e372:	8d 48 01             	lea    ecx,[eax+0x1]
c001e375:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e379:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e37d:	0f b6 c0             	movzx  eax,al
c001e380:	c1 e0 08             	shl    eax,0x8
c001e383:	09 d0                	or     eax,edx
c001e385:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e389:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e38e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e392:	8d 50 01             	lea    edx,[eax+0x1]
c001e395:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e399:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e39d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e3a1:	0f b6 c0             	movzx  eax,al
c001e3a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e3a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3ac:	c1 e0 08             	shl    eax,0x8
c001e3af:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001e3b3:	89 c1                	mov    ecx,eax
c001e3b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e3b9:	c1 e0 18             	shl    eax,0x18
c001e3bc:	89 c3                	mov    ebx,eax
c001e3be:	a1 30 f6 03 c0       	mov    eax,ds:0xc003f630
c001e3c3:	8d 50 01             	lea    edx,[eax+0x1]
c001e3c6:	89 15 30 f6 03 c0    	mov    DWORD PTR ds:0xc003f630,edx
c001e3cc:	09 d9                	or     ecx,ebx
c001e3ce:	89 ca                	mov    edx,ecx
c001e3d0:	89 14 85 40 f6 03 c0 	mov    DWORD PTR [eax*4-0x3ffc09c0],edx
c001e3d7:	eb 13                	jmp    c001e3ec <scanMADT()+0x494>
c001e3d9:	8d 76 00             	lea    esi,[esi+0x0]
c001e3dc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e3e1:	83 f8 05             	cmp    eax,0x5
c001e3e4:	75 06                	jne    c001e3ec <scanMADT()+0x494>
c001e3e6:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001e3eb:	90                   	nop
c001e3ec:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001e3f1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e3f5:	01 d0                	add    eax,edx
c001e3f7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e3fb:	e9 50 fc ff ff       	jmp    c001e050 <scanMADT()+0xf8>
c001e400:	90                   	nop
c001e401:	eb 05                	jmp    c001e408 <scanMADT()+0x4b0>
c001e403:	90                   	nop
c001e404:	90                   	nop
c001e405:	8d 76 00             	lea    esi,[esi+0x0]
c001e408:	83 c4 38             	add    esp,0x38
c001e40b:	5b                   	pop    ebx
c001e40c:	c3                   	ret    
c001e40d:	90                   	nop
c001e40e:	66 90                	xchg   ax,ax

c001e410 <ACPI::ACPI()>:
c001e410:	83 ec 0c             	sub    esp,0xc
c001e413:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e417:	83 ec 08             	sub    esp,0x8
c001e41a:	68 b3 22 03 c0       	push   0xc00322b3
c001e41f:	50                   	push   eax
c001e420:	e8 53 cf ff ff       	call   c001b378 <Device::Device(char const*)>
c001e425:	83 c4 10             	add    esp,0x10
c001e428:	ba c0 24 03 c0       	mov    edx,0xc00324c0
c001e42d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e431:	89 10                	mov    DWORD PTR [eax],edx
c001e433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e437:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e43e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e442:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001e44c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e450:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001e45a:	e8 f9 fa ff ff       	call   c001df58 <scanMADT()>
c001e45f:	90                   	nop
c001e460:	83 c4 0c             	add    esp,0xc
c001e463:	c3                   	ret    

c001e464 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001e464:	83 ec 2c             	sub    esp,0x2c
c001e467:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001e46b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e46f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001e473:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001e477:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001e47c:	88 d0                	mov    al,dl
c001e47e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e482:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e487:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001e48f:	90                   	nop
c001e490:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e494:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e49a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001e49e:	0f 8d b0 00 00 00    	jge    c001e554 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c001e4a4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e4a8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e4ac:	83 c2 2a             	add    edx,0x2a
c001e4af:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001e4b3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e4b8:	0f b7 c0             	movzx  eax,ax
c001e4bb:	39 c2                	cmp    edx,eax
c001e4bd:	0f 85 85 00 00 00    	jne    c001e548 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e4c3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e4c7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e4cb:	83 c2 2a             	add    edx,0x2a
c001e4ce:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001e4d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001e4d7:	0f b6 c0             	movzx  eax,al
c001e4da:	39 c2                	cmp    edx,eax
c001e4dc:	75 6a                	jne    c001e548 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e4de:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e4e3:	85 c0                	test   eax,eax
c001e4e5:	74 3d                	je     c001e524 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c001e4e7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e4eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e4ef:	83 c2 2a             	add    edx,0x2a
c001e4f2:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001e4f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e4fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e4fd:	39 c2                	cmp    edx,eax
c001e4ff:	74 13                	je     c001e514 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c001e501:	83 ec 0c             	sub    esp,0xc
c001e504:	68 40 24 03 c0       	push   0xc0032440
c001e509:	e8 a0 1c 00 00       	call   c00201ae <KePanic(char const*)>
c001e50e:	83 c4 10             	add    esp,0x10
c001e511:	8d 76 00             	lea    esi,[esi+0x0]
c001e514:	83 ec 0c             	sub    esp,0xc
c001e517:	68 b8 22 03 c0       	push   0xc00322b8
c001e51c:	e8 8d 1c 00 00       	call   c00201ae <KePanic(char const*)>
c001e521:	83 c4 10             	add    esp,0x10
c001e524:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e528:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e52c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e530:	83 c2 2a             	add    edx,0x2a
c001e533:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001e537:	8b 02                	mov    eax,DWORD PTR [edx]
c001e539:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001e53c:	89 01                	mov    DWORD PTR [ecx],eax
c001e53e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e541:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e546:	66 90                	xchg   ax,ax
c001e548:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001e54d:	e9 3e ff ff ff       	jmp    c001e490 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c001e552:	66 90                	xchg   ax,ax
c001e554:	90                   	nop
c001e555:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e559:	83 c4 2c             	add    esp,0x2c
c001e55c:	c2 04 00             	ret    0x4
c001e55f:	90                   	nop

c001e560 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001e560:	83 ec 1c             	sub    esp,0x1c
c001e563:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e567:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001e56b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e56f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001e574:	88 c8                	mov    al,cl
c001e576:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e57a:	88 d0                	mov    al,dl
c001e57c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e580:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e584:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e58a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e58e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e591:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001e595:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001e599:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e59d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e5a3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e5a7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001e5aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e5ae:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001e5b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5b7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e5bd:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e5c1:	83 c0 01             	add    eax,0x1
c001e5c4:	88 c1                	mov    cl,al
c001e5c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5ca:	83 c2 2a             	add    edx,0x2a
c001e5cd:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001e5d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5d5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e5db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5df:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e5e2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e5e6:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001e5ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5ee:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e5f4:	8d 50 01             	lea    edx,[eax+0x1]
c001e5f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5fb:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001e601:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e605:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e60b:	3d 00 02 00 00       	cmp    eax,0x200
c001e610:	75 12                	jne    c001e624 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c001e612:	83 ec 0c             	sub    esp,0xc
c001e615:	68 c7 22 03 c0       	push   0xc00322c7
c001e61a:	e8 8f 1b 00 00       	call   c00201ae <KePanic(char const*)>
c001e61f:	83 c4 10             	add    esp,0x10
c001e622:	66 90                	xchg   ax,ax
c001e624:	90                   	nop
c001e625:	83 c4 1c             	add    esp,0x1c
c001e628:	c3                   	ret    
c001e629:	90                   	nop
c001e62a:	66 90                	xchg   ax,ax

c001e62c <ACPI::setScreenBrightnessLevel(void*, int)>:
c001e62c:	b8 00 00 00 00       	mov    eax,0x0
c001e631:	c3                   	ret    
c001e632:	66 90                	xchg   ax,ax

c001e634 <ACPI::detectPCI()>:
c001e634:	53                   	push   ebx
c001e635:	83 ec 28             	sub    esp,0x28
c001e638:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e63d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c001e642:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e647:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e64d:	83 e0 04             	and    eax,0x4
c001e650:	0f b6 c0             	movzx  eax,al
c001e653:	85 c0                	test   eax,eax
c001e655:	74 2d                	je     c001e684 <ACPI::detectPCI()+0x50>
c001e657:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e65c:	83 ec 08             	sub    esp,0x8
c001e65f:	68 e4 22 03 c0       	push   0xc00322e4
c001e664:	50                   	push   eax
c001e665:	e8 6e f8 ff ff       	call   c001ded8 <findDataTable(unsigned char*, char*)>
c001e66a:	83 c4 10             	add    esp,0x10
c001e66d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e671:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001e676:	74 0c                	je     c001e684 <ACPI::detectPCI()+0x50>
c001e678:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e67d:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e682:	66 90                	xchg   ax,ax
c001e684:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c001e68c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e690:	8a 00                	mov    al,BYTE PTR [eax]
c001e692:	0f b6 c0             	movzx  eax,al
c001e695:	83 f8 01             	cmp    eax,0x1
c001e698:	75 0e                	jne    c001e6a8 <ACPI::detectPCI()+0x74>
c001e69a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e69f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e6a4:	eb 2e                	jmp    c001e6d4 <ACPI::detectPCI()+0xa0>
c001e6a6:	66 90                	xchg   ax,ax
c001e6a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e6ac:	8a 00                	mov    al,BYTE PTR [eax]
c001e6ae:	0f b6 c0             	movzx  eax,al
c001e6b1:	83 f8 02             	cmp    eax,0x2
c001e6b4:	75 1e                	jne    c001e6d4 <ACPI::detectPCI()+0xa0>
c001e6b6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e6bb:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e6c0:	85 c0                	test   eax,eax
c001e6c2:	74 10                	je     c001e6d4 <ACPI::detectPCI()+0xa0>
c001e6c4:	83 ec 0c             	sub    esp,0xc
c001e6c7:	68 70 24 03 c0       	push   0xc0032470
c001e6cc:	e8 dd 1a 00 00       	call   c00201ae <KePanic(char const*)>
c001e6d1:	83 c4 10             	add    esp,0x10
c001e6d4:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001e6d8:	83 f0 01             	xor    eax,0x1
c001e6db:	0f b6 c0             	movzx  eax,al
c001e6de:	85 c0                	test   eax,eax
c001e6e0:	74 46                	je     c001e728 <ACPI::detectPCI()+0xf4>
c001e6e2:	e8 49 1a fe ff       	call   c0000130 <manualPCIProbe>
c001e6e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e6eb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e6f0:	75 0e                	jne    c001e700 <ACPI::detectPCI()+0xcc>
c001e6f2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e6f7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e6fc:	eb 2a                	jmp    c001e728 <ACPI::detectPCI()+0xf4>
c001e6fe:	66 90                	xchg   ax,ax
c001e700:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c001e705:	75 21                	jne    c001e728 <ACPI::detectPCI()+0xf4>
c001e707:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e70c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e711:	85 c0                	test   eax,eax
c001e713:	74 13                	je     c001e728 <ACPI::detectPCI()+0xf4>
c001e715:	83 ec 0c             	sub    esp,0xc
c001e718:	68 70 24 03 c0       	push   0xc0032470
c001e71d:	e8 8c 1a 00 00       	call   c00201ae <KePanic(char const*)>
c001e722:	83 c4 10             	add    esp,0x10
c001e725:	8d 76 00             	lea    esi,[esi+0x0]
c001e728:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e72d:	85 c0                	test   eax,eax
c001e72f:	0f 84 87 00 00 00    	je     c001e7bc <ACPI::detectPCI()+0x188>
c001e735:	83 ec 0c             	sub    esp,0xc
c001e738:	68 e9 22 03 c0       	push   0xc00322e9
c001e73d:	e8 09 13 00 00       	call   c001fa4b <KeSetBootMessage(char const*)>
c001e742:	83 c4 10             	add    esp,0x10
c001e745:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001e74d:	83 ec 0c             	sub    esp,0xc
c001e750:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e754:	e8 ad 7b ff ff       	call   c0016306 <malloc>
c001e759:	83 c4 10             	add    esp,0x10
c001e75c:	89 c3                	mov    ebx,eax
c001e75e:	83 ec 0c             	sub    esp,0xc
c001e761:	53                   	push   ebx
c001e762:	e8 21 b8 00 00       	call   c0029f88 <PCI::PCI()>
c001e767:	83 c4 10             	add    esp,0x10
c001e76a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001e76e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e772:	83 ec 08             	sub    esp,0x8
c001e775:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e779:	50                   	push   eax
c001e77a:	e8 97 ca ff ff       	call   c001b216 <Device::addChild(Device*)>
c001e77f:	83 c4 10             	add    esp,0x10
c001e782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e786:	8b 00                	mov    eax,DWORD PTR [eax]
c001e788:	83 c0 08             	add    eax,0x8
c001e78b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e78d:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c001e792:	85 d2                	test   edx,edx
c001e794:	74 0a                	je     c001e7a0 <ACPI::detectPCI()+0x16c>
c001e796:	ba 01 00 00 00       	mov    edx,0x1
c001e79b:	eb 0b                	jmp    c001e7a8 <ACPI::detectPCI()+0x174>
c001e79d:	8d 76 00             	lea    esi,[esi+0x0]
c001e7a0:	ba 02 00 00 00       	mov    edx,0x2
c001e7a5:	8d 76 00             	lea    esi,[esi+0x0]
c001e7a8:	6a 00                	push   0x0
c001e7aa:	6a 00                	push   0x0
c001e7ac:	52                   	push   edx
c001e7ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e7b1:	ff d0                	call   eax
c001e7b3:	83 c4 10             	add    esp,0x10
c001e7b6:	e9 91 00 00 00       	jmp    c001e84c <ACPI::detectPCI()+0x218>
c001e7bb:	90                   	nop
c001e7bc:	83 ec 0c             	sub    esp,0xc
c001e7bf:	68 01 23 03 c0       	push   0xc0032301
c001e7c4:	e8 82 12 00 00       	call   c001fa4b <KeSetBootMessage(char const*)>
c001e7c9:	83 c4 10             	add    esp,0x10
c001e7cc:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c001e7d3:	83 ec 0c             	sub    esp,0xc
c001e7d6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e7da:	e8 27 7b ff ff       	call   c0016306 <malloc>
c001e7df:	83 c4 10             	add    esp,0x10
c001e7e2:	89 c3                	mov    ebx,eax
c001e7e4:	83 ec 0c             	sub    esp,0xc
c001e7e7:	53                   	push   ebx
c001e7e8:	e8 35 c3 00 00       	call   c002ab22 <IDE::IDE()>
c001e7ed:	83 c4 10             	add    esp,0x10
c001e7f0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001e7f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e7f8:	83 ec 08             	sub    esp,0x8
c001e7fb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e7ff:	50                   	push   eax
c001e800:	e8 11 ca ff ff       	call   c001b216 <Device::addChild(Device*)>
c001e805:	83 c4 10             	add    esp,0x10
c001e808:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e80c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c001e816:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e81a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c001e823:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e827:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c001e830:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e834:	8b 00                	mov    eax,DWORD PTR [eax]
c001e836:	83 c0 08             	add    eax,0x8
c001e839:	8b 00                	mov    eax,DWORD PTR [eax]
c001e83b:	6a 00                	push   0x0
c001e83d:	6a 00                	push   0x0
c001e83f:	6a 00                	push   0x0
c001e841:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e845:	ff d0                	call   eax
c001e847:	83 c4 10             	add    esp,0x10
c001e84a:	66 90                	xchg   ax,ax
c001e84c:	90                   	nop
c001e84d:	83 c4 28             	add    esp,0x28
c001e850:	5b                   	pop    ebx
c001e851:	c3                   	ret    
c001e852:	66 90                	xchg   ax,ax

c001e854 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001e854:	83 ec 1c             	sub    esp,0x1c
c001e857:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e85b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001e85e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e862:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e867:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001e86c:	83 ec 08             	sub    esp,0x8
c001e86f:	52                   	push   edx
c001e870:	50                   	push   eax
c001e871:	e8 52 71 ff ff       	call   c00159c8 <Computer::readCMOS(unsigned char)>
c001e876:	83 c4 10             	add    esp,0x10
c001e879:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001e87d:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e882:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001e887:	83 ec 04             	sub    esp,0x4
c001e88a:	6a 01                	push   0x1
c001e88c:	52                   	push   edx
c001e88d:	50                   	push   eax
c001e88e:	e8 4f 72 ff ff       	call   c0015ae2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001e893:	83 c4 10             	add    esp,0x10
c001e896:	90                   	nop
c001e897:	83 c4 1c             	add    esp,0x1c
c001e89a:	c3                   	ret    
c001e89b:	90                   	nop

c001e89c <ACPI::sleep()>:
c001e89c:	83 ec 0c             	sub    esp,0xc
c001e89f:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c001e8a4:	85 c0                	test   eax,eax
c001e8a6:	74 08                	je     c001e8b0 <ACPI::sleep()+0x14>
c001e8a8:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c001e8ad:	ff d0                	call   eax
c001e8af:	90                   	nop
c001e8b0:	90                   	nop
c001e8b1:	83 c4 0c             	add    esp,0xc
c001e8b4:	c3                   	ret    
c001e8b5:	90                   	nop
c001e8b6:	66 90                	xchg   ax,ax

c001e8b8 <ACPI::open(int, int, void*)>:
c001e8b8:	57                   	push   edi
c001e8b9:	56                   	push   esi
c001e8ba:	53                   	push   ebx
c001e8bb:	81 ec 70 01 00 00    	sub    esp,0x170
c001e8c1:	83 ec 0c             	sub    esp,0xc
c001e8c4:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001e8cb:	e8 64 fd ff ff       	call   c001e634 <ACPI::detectPCI()>
c001e8d0:	83 c4 10             	add    esp,0x10
c001e8d3:	83 ec 0c             	sub    esp,0xc
c001e8d6:	68 98 24 03 c0       	push   0xc0032498
c001e8db:	e8 6b 11 00 00       	call   c001fa4b <KeSetBootMessage(char const*)>
c001e8e0:	83 c4 10             	add    esp,0x10
c001e8e3:	b8 4c 05 00 00       	mov    eax,0x54c
c001e8e8:	8a 00                	mov    al,BYTE PTR [eax]
c001e8ea:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c001e8f1:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c001e8f9:	83 f8 01             	cmp    eax,0x1
c001e8fc:	75 12                	jne    c001e910 <ACPI::open(int, int, void*)+0x58>
c001e8fe:	83 ec 0c             	sub    esp,0xc
c001e901:	68 16 23 03 c0       	push   0xc0032316
c001e906:	e8 54 53 00 00       	call   c0023c5f <Thr::loadKernelSymbolTable(char const*)>
c001e90b:	83 c4 10             	add    esp,0x10
c001e90e:	eb 34                	jmp    c001e944 <ACPI::open(int, int, void*)+0x8c>
c001e910:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c001e918:	3d bb 00 00 00       	cmp    eax,0xbb
c001e91d:	75 15                	jne    c001e934 <ACPI::open(int, int, void*)+0x7c>
c001e91f:	83 ec 0c             	sub    esp,0xc
c001e922:	68 34 23 03 c0       	push   0xc0032334
c001e927:	e8 33 53 00 00       	call   c0023c5f <Thr::loadKernelSymbolTable(char const*)>
c001e92c:	83 c4 10             	add    esp,0x10
c001e92f:	eb 13                	jmp    c001e944 <ACPI::open(int, int, void*)+0x8c>
c001e931:	8d 76 00             	lea    esi,[esi+0x0]
c001e934:	83 ec 0c             	sub    esp,0xc
c001e937:	68 52 23 03 c0       	push   0xc0032352
c001e93c:	e8 6d 18 00 00       	call   c00201ae <KePanic(char const*)>
c001e941:	83 c4 10             	add    esp,0x10
c001e944:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c001e94c:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c001e957:	83 ec 0c             	sub    esp,0xc
c001e95a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001e961:	e8 a0 79 ff ff       	call   c0016306 <malloc>
c001e966:	83 c4 10             	add    esp,0x10
c001e969:	89 c3                	mov    ebx,eax
c001e96b:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001e970:	83 ec 04             	sub    esp,0x4
c001e973:	50                   	push   eax
c001e974:	68 6c 23 03 c0       	push   0xc003236c
c001e979:	53                   	push   ebx
c001e97a:	e8 1d ba ff ff       	call   c001a39c <File::File(char const*, Process*)>
c001e97f:	83 c4 10             	add    esp,0x10
c001e982:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c001e989:	83 ec 08             	sub    esp,0x8
c001e98c:	6a 01                	push   0x1
c001e98e:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001e995:	e8 20 ba ff ff       	call   c001a3ba <File::open(FileOpenMode)>
c001e99a:	83 c4 10             	add    esp,0x10
c001e99d:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c001e9a4:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c001e9ac:	75 16                	jne    c001e9c4 <ACPI::open(int, int, void*)+0x10c>
c001e9ae:	83 ec 0c             	sub    esp,0xc
c001e9b1:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001e9b8:	e8 5b ba ff ff       	call   c001a418 <File::close()>
c001e9bd:	83 c4 10             	add    esp,0x10
c001e9c0:	eb 0a                	jmp    c001e9cc <ACPI::open(int, int, void*)+0x114>
c001e9c2:	66 90                	xchg   ax,ax
c001e9c4:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c001e9cc:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c001e9d4:	74 1e                	je     c001e9f4 <ACPI::open(int, int, void*)+0x13c>
c001e9d6:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c001e9dd:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9df:	83 c0 08             	add    eax,0x8
c001e9e2:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9e4:	83 ec 0c             	sub    esp,0xc
c001e9e7:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001e9ee:	ff d0                	call   eax
c001e9f0:	83 c4 10             	add    esp,0x10
c001e9f3:	90                   	nop
c001e9f4:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c001e9fb:	83 f0 01             	xor    eax,0x1
c001e9fe:	0f b6 c0             	movzx  eax,al
c001ea01:	85 c0                	test   eax,eax
c001ea03:	74 43                	je     c001ea48 <ACPI::open(int, int, void*)+0x190>
c001ea05:	83 ec 0c             	sub    esp,0xc
c001ea08:	68 8a 23 03 c0       	push   0xc003238a
c001ea0d:	e8 39 10 00 00       	call   c001fa4b <KeSetBootMessage(char const*)>
c001ea12:	83 c4 10             	add    esp,0x10
c001ea15:	83 ec 04             	sub    esp,0x4
c001ea18:	6a 0c                	push   0xc
c001ea1a:	68 a5 23 03 c0       	push   0xc00323a5
c001ea1f:	68 b6 23 03 c0       	push   0xc00323b6
c001ea24:	e8 73 44 00 00       	call   c0022e9c <Reg::readIntWithDefault(char*, char*, int)>
c001ea29:	83 c4 10             	add    esp,0x10
c001ea2c:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c001ea33:	83 ec 0c             	sub    esp,0xc
c001ea36:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c001ea3d:	e8 4a 96 ff ff       	call   c001808c <Virt::setupPageSwapping(int)>
c001ea42:	83 c4 10             	add    esp,0x10
c001ea45:	8d 76 00             	lea    esi,[esi+0x0]
c001ea48:	83 ec 0c             	sub    esp,0xc
c001ea4b:	68 e4 0d 03 c0       	push   0xc0030de4
c001ea50:	e8 f6 0f 00 00       	call   c001fa4b <KeSetBootMessage(char const*)>
c001ea55:	83 c4 10             	add    esp,0x10
c001ea58:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c001ea5f:	83 ec 08             	sub    esp,0x8
c001ea62:	6a 13                	push   0x13
c001ea64:	50                   	push   eax
c001ea65:	e8 da ca ff ff       	call   c001b544 <getDevicesOfType(DeviceType)>
c001ea6a:	83 c4 0c             	add    esp,0xc
c001ea6d:	8d 76 00             	lea    esi,[esi+0x0]
c001ea70:	83 ec 0c             	sub    esp,0xc
c001ea73:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001ea7a:	50                   	push   eax
c001ea7b:	e8 c0 02 01 00       	call   c002ed40 <LinkedList<Device>::isEmpty()>
c001ea80:	83 c4 10             	add    esp,0x10
c001ea83:	83 f0 01             	xor    eax,0x1
c001ea86:	0f b6 c0             	movzx  eax,al
c001ea89:	85 c0                	test   eax,eax
c001ea8b:	0f 84 47 01 00 00    	je     c001ebd8 <ACPI::open(int, int, void*)+0x320>
c001ea91:	83 ec 0c             	sub    esp,0xc
c001ea94:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001ea9b:	50                   	push   eax
c001ea9c:	e8 bb 02 01 00       	call   c002ed5c <LinkedList<Device>::getFirstElement()>
c001eaa1:	83 c4 10             	add    esp,0x10
c001eaa4:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c001eaab:	83 ec 0c             	sub    esp,0xc
c001eaae:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001eab5:	50                   	push   eax
c001eab6:	e8 a9 02 01 00       	call   c002ed64 <LinkedList<Device>::removeFirst()>
c001eabb:	83 c4 10             	add    esp,0x10
c001eabe:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c001eac5:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c001eacc:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c001ead3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ead7:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c001eadd:	ba 09 00 00 00       	mov    edx,0x9
c001eae2:	fc                   	cld    
c001eae3:	89 c7                	mov    edi,eax
c001eae5:	89 de                	mov    esi,ebx
c001eae7:	89 d1                	mov    ecx,edx
c001eae9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001eaeb:	83 ec 08             	sub    esp,0x8
c001eaee:	8d 44 24 38          	lea    eax,[esp+0x38]
c001eaf2:	50                   	push   eax
c001eaf3:	83 ec 24             	sub    esp,0x24
c001eaf6:	89 e0                	mov    eax,esp
c001eaf8:	89 c3                	mov    ebx,eax
c001eafa:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001eafe:	ba 09 00 00 00       	mov    edx,0x9
c001eb03:	89 df                	mov    edi,ebx
c001eb05:	89 c6                	mov    esi,eax
c001eb07:	89 d1                	mov    ecx,edx
c001eb09:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001eb0b:	e8 62 b9 00 00       	call   c002a472 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001eb10:	83 c4 30             	add    esp,0x30
c001eb13:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c001eb1a:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c001eb22:	0f 84 48 ff ff ff    	je     c001ea70 <ACPI::open(int, int, void*)+0x1b8>
c001eb28:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c001eb33:	83 ec 0c             	sub    esp,0xc
c001eb36:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001eb3d:	e8 c4 77 ff ff       	call   c0016306 <malloc>
c001eb42:	83 c4 10             	add    esp,0x10
c001eb45:	89 c3                	mov    ebx,eax
c001eb47:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001eb4c:	83 ec 04             	sub    esp,0x4
c001eb4f:	50                   	push   eax
c001eb50:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001eb57:	53                   	push   ebx
c001eb58:	e8 3f b8 ff ff       	call   c001a39c <File::File(char const*, Process*)>
c001eb5d:	83 c4 10             	add    esp,0x10
c001eb60:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c001eb67:	83 ec 0c             	sub    esp,0xc
c001eb6a:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001eb71:	e8 08 bb ff ff       	call   c001a67e <File::exists()>
c001eb76:	83 c4 10             	add    esp,0x10
c001eb79:	0f b6 c0             	movzx  eax,al
c001eb7c:	85 c0                	test   eax,eax
c001eb7e:	74 28                	je     c001eba8 <ACPI::open(int, int, void*)+0x2f0>
c001eb80:	83 ec 08             	sub    esp,0x8
c001eb83:	6a 01                	push   0x1
c001eb85:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001eb8c:	e8 48 5b 00 00       	call   c00246d9 <Thr::loadDLL(char const*, bool)>
c001eb91:	83 c4 10             	add    esp,0x10
c001eb94:	83 ec 08             	sub    esp,0x8
c001eb97:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001eb9e:	50                   	push   eax
c001eb9f:	e8 87 5d 00 00       	call   c002492b <Thr::executeDLL(unsigned long, void*)>
c001eba4:	83 c4 10             	add    esp,0x10
c001eba7:	90                   	nop
c001eba8:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c001ebb0:	0f 84 ba fe ff ff    	je     c001ea70 <ACPI::open(int, int, void*)+0x1b8>
c001ebb6:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c001ebbd:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebbf:	83 c0 08             	add    eax,0x8
c001ebc2:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebc4:	83 ec 0c             	sub    esp,0xc
c001ebc7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001ebce:	ff d0                	call   eax
c001ebd0:	83 c4 10             	add    esp,0x10
c001ebd3:	e9 98 fe ff ff       	jmp    c001ea70 <ACPI::open(int, int, void*)+0x1b8>
c001ebd8:	83 ec 0c             	sub    esp,0xc
c001ebdb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001ebe2:	50                   	push   eax
c001ebe3:	e8 54 01 01 00       	call   c002ed3c <LinkedList<Device>::~LinkedList()>
c001ebe8:	83 c4 10             	add    esp,0x10
c001ebeb:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001ebf1:	83 ec 08             	sub    esp,0x8
c001ebf4:	6a 01                	push   0x1
c001ebf6:	68 bd 23 03 c0       	push   0xc00323bd
c001ebfb:	e8 d9 5a 00 00       	call   c00246d9 <Thr::loadDLL(char const*, bool)>
c001ec00:	83 c4 10             	add    esp,0x10
c001ec03:	83 ec 08             	sub    esp,0x8
c001ec06:	53                   	push   ebx
c001ec07:	50                   	push   eax
c001ec08:	e8 1e 5d 00 00       	call   c002492b <Thr::executeDLL(unsigned long, void*)>
c001ec0d:	83 c4 10             	add    esp,0x10
c001ec10:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001ec15:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001ec1b:	83 e0 04             	and    eax,0x4
c001ec1e:	0f b6 c0             	movzx  eax,al
c001ec21:	85 c0                	test   eax,eax
c001ec23:	0f 84 1b 01 00 00    	je     c001ed44 <ACPI::open(int, int, void*)+0x48c>
c001ec29:	83 ec 0c             	sub    esp,0xc
c001ec2c:	68 da 23 03 c0       	push   0xc00323da
c001ec31:	e8 15 0e 00 00       	call   c001fa4b <KeSetBootMessage(char const*)>
c001ec36:	83 c4 10             	add    esp,0x10
c001ec39:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001ec44:	83 ec 0c             	sub    esp,0xc
c001ec47:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c001ec4e:	e8 b3 76 ff ff       	call   c0016306 <malloc>
c001ec53:	83 c4 10             	add    esp,0x10
c001ec56:	89 c3                	mov    ebx,eax
c001ec58:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ec5d:	83 ec 04             	sub    esp,0x4
c001ec60:	50                   	push   eax
c001ec61:	68 f7 23 03 c0       	push   0xc00323f7
c001ec66:	53                   	push   ebx
c001ec67:	e8 30 b7 ff ff       	call   c001a39c <File::File(char const*, Process*)>
c001ec6c:	83 c4 10             	add    esp,0x10
c001ec6f:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c001ec76:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001ec7e:	74 20                	je     c001eca0 <ACPI::open(int, int, void*)+0x3e8>
c001ec80:	83 ec 0c             	sub    esp,0xc
c001ec83:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001ec8a:	e8 ef b9 ff ff       	call   c001a67e <File::exists()>
c001ec8f:	83 c4 10             	add    esp,0x10
c001ec92:	0f b6 c0             	movzx  eax,al
c001ec95:	85 c0                	test   eax,eax
c001ec97:	74 07                	je     c001eca0 <ACPI::open(int, int, void*)+0x3e8>
c001ec99:	b0 01                	mov    al,0x1
c001ec9b:	eb 07                	jmp    c001eca4 <ACPI::open(int, int, void*)+0x3ec>
c001ec9d:	8d 76 00             	lea    esi,[esi+0x0]
c001eca0:	b0 00                	mov    al,0x0
c001eca2:	66 90                	xchg   ax,ax
c001eca4:	0f b6 c0             	movzx  eax,al
c001eca7:	85 c0                	test   eax,eax
c001eca9:	74 25                	je     c001ecd0 <ACPI::open(int, int, void*)+0x418>
c001ecab:	83 ec 08             	sub    esp,0x8
c001ecae:	6a 01                	push   0x1
c001ecb0:	68 f7 23 03 c0       	push   0xc00323f7
c001ecb5:	e8 1f 5a 00 00       	call   c00246d9 <Thr::loadDLL(char const*, bool)>
c001ecba:	83 c4 10             	add    esp,0x10
c001ecbd:	83 ec 08             	sub    esp,0x8
c001ecc0:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c001ecc7:	50                   	push   eax
c001ecc8:	e8 5e 5c 00 00       	call   c002492b <Thr::executeDLL(unsigned long, void*)>
c001eccd:	83 c4 10             	add    esp,0x10
c001ecd0:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001ecd8:	74 2a                	je     c001ed04 <ACPI::open(int, int, void*)+0x44c>
c001ecda:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001ece2:	74 20                	je     c001ed04 <ACPI::open(int, int, void*)+0x44c>
c001ece4:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001eceb:	8b 00                	mov    eax,DWORD PTR [eax]
c001eced:	83 c0 08             	add    eax,0x8
c001ecf0:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecf2:	83 ec 0c             	sub    esp,0xc
c001ecf5:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001ecfc:	ff d0                	call   eax
c001ecfe:	83 c4 10             	add    esp,0x10
c001ed01:	8d 76 00             	lea    esi,[esi+0x0]
c001ed04:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001ed09:	83 ec 08             	sub    esp,0x8
c001ed0c:	68 14 24 03 c0       	push   0xc0032414
c001ed11:	50                   	push   eax
c001ed12:	e8 c1 f1 ff ff       	call   c001ded8 <findDataTable(unsigned char*, char*)>
c001ed17:	83 c4 10             	add    esp,0x10
c001ed1a:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c001ed21:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001ed29:	74 19                	je     c001ed44 <ACPI::open(int, int, void*)+0x48c>
c001ed2b:	83 ec 08             	sub    esp,0x8
c001ed2e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001ed35:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001ed3c:	e8 13 fb ff ff       	call   c001e854 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001ed41:	83 c4 10             	add    esp,0x10
c001ed44:	b8 00 00 00 00       	mov    eax,0x0
c001ed49:	81 c4 70 01 00 00    	add    esp,0x170
c001ed4f:	5b                   	pop    ebx
c001ed50:	5e                   	pop    esi
c001ed51:	5f                   	pop    edi
c001ed52:	c3                   	ret    
c001ed53:	90                   	nop

c001ed54 <CPU::close(int, int, void*)>:
c001ed54:	31 c0                	xor    eax,eax
c001ed56:	c3                   	ret    
c001ed57:	90                   	nop

c001ed58 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001ed58:	60                   	pusha  
c001ed59:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ed5d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed61:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ed65:	9c                   	pushf  
c001ed66:	fa                   	cli    
c001ed67:	0f 09                	wbinvd 
c001ed69:	0f 30                	wrmsr  
c001ed6b:	9d                   	popf   
c001ed6c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ed70:	89 02                	mov    DWORD PTR [edx],eax
c001ed72:	61                   	popa   
c001ed73:	c3                   	ret    

c001ed74 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001ed74:	60                   	pusha  
c001ed75:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ed79:	9c                   	pushf  
c001ed7a:	fa                   	cli    
c001ed7b:	0f 09                	wbinvd 
c001ed7d:	31 c0                	xor    eax,eax
c001ed7f:	31 d2                	xor    edx,edx
c001ed81:	0f 32                	rdmsr  
c001ed83:	9d                   	popf   
c001ed84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ed88:	89 02                	mov    DWORD PTR [edx],eax
c001ed8a:	61                   	popa   
c001ed8b:	c3                   	ret    

c001ed8c <CPU::AMD_K6_writeback(int, int, int)>:
c001ed8c:	56                   	push   esi
c001ed8d:	53                   	push   ebx
c001ed8e:	83 ec 10             	sub    esp,0x10
c001ed91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed95:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001ed9a:	75 5d                	jne    c001edf9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001ed9c:	83 f8 08             	cmp    eax,0x8
c001ed9f:	75 09                	jne    c001edaa <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001eda1:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001eda6:	7e 13                	jle    c001edbb <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001eda8:	eb 30                	jmp    c001edda <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001edaa:	83 f8 06             	cmp    eax,0x6
c001edad:	7c 4a                	jl     c001edf9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001edaf:	83 f8 07             	cmp    eax,0x7
c001edb2:	7e 07                	jle    c001edbb <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001edb4:	83 f8 09             	cmp    eax,0x9
c001edb7:	74 21                	je     c001edda <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001edb9:	eb 3e                	jmp    c001edf9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001edbb:	89 e6                	mov    esi,esp
c001edbd:	8b 1d e0 a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9e0
c001edc3:	56                   	push   esi
c001edc4:	c1 eb 15             	shr    ebx,0x15
c001edc7:	68 82 00 00 c0       	push   0xc0000082
c001edcc:	83 e3 7e             	and    ebx,0x7e
c001edcf:	e8 a0 ff ff ff       	call   c001ed74 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001edd4:	56                   	push   esi
c001edd5:	6a 00                	push   0x0
c001edd7:	53                   	push   ebx
c001edd8:	eb 12                	jmp    c001edec <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001edda:	89 e3                	mov    ebx,esp
c001eddc:	53                   	push   ebx
c001eddd:	68 82 00 00 c0       	push   0xc0000082
c001ede2:	e8 8d ff ff ff       	call   c001ed74 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001ede7:	53                   	push   ebx
c001ede8:	6a 00                	push   0x0
c001edea:	6a 00                	push   0x0
c001edec:	68 82 00 00 c0       	push   0xc0000082
c001edf1:	e8 62 ff ff ff       	call   c001ed58 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001edf6:	83 c4 18             	add    esp,0x18
c001edf9:	83 c4 10             	add    esp,0x10
c001edfc:	5b                   	pop    ebx
c001edfd:	5e                   	pop    esi
c001edfe:	c3                   	ret    
c001edff:	90                   	nop

c001ee00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001ee00:	55                   	push   ebp
c001ee01:	57                   	push   edi
c001ee02:	56                   	push   esi
c001ee03:	53                   	push   ebx
c001ee04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee08:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ee0c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ee10:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001ee14:	39 05 d8 3a 03 c0    	cmp    DWORD PTR ds:0xc0033ad8,eax
c001ee1a:	75 23                	jne    c001ee3f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001ee1c:	a1 8c f8 03 c0       	mov    eax,ds:0xc003f88c
c001ee21:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ee25:	89 06                	mov    DWORD PTR [esi],eax
c001ee27:	a1 88 f8 03 c0       	mov    eax,ds:0xc003f888
c001ee2c:	89 07                	mov    DWORD PTR [edi],eax
c001ee2e:	a1 84 f8 03 c0       	mov    eax,ds:0xc003f884
c001ee33:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001ee36:	a1 80 f8 03 c0       	mov    eax,ds:0xc003f880
c001ee3b:	89 02                	mov    DWORD PTR [edx],eax
c001ee3d:	eb 3f                	jmp    c001ee7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001ee3f:	31 c9                	xor    ecx,ecx
c001ee41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee45:	0f a2                	cpuid  
c001ee47:	89 06                	mov    DWORD PTR [esi],eax
c001ee49:	89 1f                	mov    DWORD PTR [edi],ebx
c001ee4b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ee4f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001ee52:	89 10                	mov    DWORD PTR [eax],edx
c001ee54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee58:	a3 d8 3a 03 c0       	mov    ds:0xc0033ad8,eax
c001ee5d:	8b 06                	mov    eax,DWORD PTR [esi]
c001ee5f:	a3 8c f8 03 c0       	mov    ds:0xc003f88c,eax
c001ee64:	8b 07                	mov    eax,DWORD PTR [edi]
c001ee66:	a3 88 f8 03 c0       	mov    ds:0xc003f888,eax
c001ee6b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ee6e:	a3 84 f8 03 c0       	mov    ds:0xc003f884,eax
c001ee73:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ee77:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee79:	a3 80 f8 03 c0       	mov    ds:0xc003f880,eax
c001ee7e:	5b                   	pop    ebx
c001ee7f:	5e                   	pop    esi
c001ee80:	5f                   	pop    edi
c001ee81:	5d                   	pop    ebp
c001ee82:	c3                   	ret    
c001ee83:	90                   	nop

c001ee84 <CPU::cpuidCheckEDX(unsigned int)>:
c001ee84:	83 ec 10             	sub    esp,0x10
c001ee87:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ee8b:	50                   	push   eax
c001ee8c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ee90:	50                   	push   eax
c001ee91:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ee95:	50                   	push   eax
c001ee96:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ee9a:	50                   	push   eax
c001ee9b:	6a 01                	push   0x1
c001ee9d:	e8 5e ff ff ff       	call   c001ee00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001eea2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001eea6:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001eeaa:	0f 95 c0             	setne  al
c001eead:	83 c4 24             	add    esp,0x24
c001eeb0:	c3                   	ret    
c001eeb1:	90                   	nop

c001eeb2 <CPU::cpuidCheckECX(unsigned int)>:
c001eeb2:	83 ec 10             	sub    esp,0x10
c001eeb5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eeb9:	50                   	push   eax
c001eeba:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eebe:	50                   	push   eax
c001eebf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eec3:	50                   	push   eax
c001eec4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eec8:	50                   	push   eax
c001eec9:	6a 01                	push   0x1
c001eecb:	e8 30 ff ff ff       	call   c001ee00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001eed0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001eed4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001eed8:	0f 95 c0             	setne  al
c001eedb:	83 c4 24             	add    esp,0x24
c001eede:	c3                   	ret    
c001eedf:	90                   	nop

c001eee0 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001eee0:	83 ec 10             	sub    esp,0x10
c001eee3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eee7:	50                   	push   eax
c001eee8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eeec:	50                   	push   eax
c001eeed:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eef1:	50                   	push   eax
c001eef2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eef6:	50                   	push   eax
c001eef7:	6a 07                	push   0x7
c001eef9:	e8 02 ff ff ff       	call   c001ee00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001eefe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ef02:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001ef06:	0f 95 c0             	setne  al
c001ef09:	83 c4 24             	add    esp,0x24
c001ef0c:	c3                   	ret    
c001ef0d:	90                   	nop

c001ef0e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001ef0e:	83 ec 10             	sub    esp,0x10
c001ef11:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef15:	50                   	push   eax
c001ef16:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef1a:	50                   	push   eax
c001ef1b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef1f:	50                   	push   eax
c001ef20:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef24:	50                   	push   eax
c001ef25:	6a 07                	push   0x7
c001ef27:	e8 d4 fe ff ff       	call   c001ee00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001ef2c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ef30:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001ef34:	0f 95 c0             	setne  al
c001ef37:	83 c4 24             	add    esp,0x24
c001ef3a:	c3                   	ret    
c001ef3b:	90                   	nop

c001ef3c <CPU::CPU()>:
c001ef3c:	83 ec 0c             	sub    esp,0xc
c001ef3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef43:	83 ec 08             	sub    esp,0x8
c001ef46:	68 d5 25 03 c0       	push   0xc00325d5
c001ef4b:	50                   	push   eax
c001ef4c:	e8 27 c4 ff ff       	call   c001b378 <Device::Device(char const*)>
c001ef51:	83 c4 10             	add    esp,0x10
c001ef54:	ba 68 26 03 c0       	mov    edx,0xc0032668
c001ef59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef5d:	89 10                	mov    DWORD PTR [eax],edx
c001ef5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef63:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001ef6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef71:	05 78 01 00 00       	add    eax,0x178
c001ef76:	83 ec 0c             	sub    esp,0xc
c001ef79:	50                   	push   eax
c001ef7a:	e8 2d 6c ff ff       	call   c0015bac <GDT::GDT()>
c001ef7f:	83 c4 10             	add    esp,0x10
c001ef82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef86:	05 7c 09 00 00       	add    eax,0x97c
c001ef8b:	83 ec 0c             	sub    esp,0xc
c001ef8e:	50                   	push   eax
c001ef8f:	e8 68 6e ff ff       	call   c0015dfc <IDT::IDT()>
c001ef94:	83 c4 10             	add    esp,0x10
c001ef97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef9b:	05 7c 11 00 00       	add    eax,0x117c
c001efa0:	83 ec 0c             	sub    esp,0xc
c001efa3:	50                   	push   eax
c001efa4:	e8 eb 87 ff ff       	call   c0017794 <TSS::TSS()>
c001efa9:	83 c4 10             	add    esp,0x10
c001efac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb0:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001efb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efbb:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001efc5:	90                   	nop
c001efc6:	83 c4 0c             	add    esp,0xc
c001efc9:	c3                   	ret    

c001efca <CPU::displayFeatures()>:
c001efca:	c3                   	ret    
c001efcb:	90                   	nop

c001efcc <CPU::detectFeatures()>:
c001efcc:	55                   	push   ebp
c001efcd:	57                   	push   edi
c001efce:	56                   	push   esi
c001efcf:	53                   	push   ebx
c001efd0:	83 ec 30             	sub    esp,0x30
c001efd3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001efd7:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001efe1:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c001efe8:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001efee:	6a 0d                	push   0xd
c001eff0:	6a 00                	push   0x0
c001eff2:	55                   	push   ebp
c001eff3:	e8 f8 14 fe ff       	call   c00004f0 <memset>
c001eff8:	83 c4 10             	add    esp,0x10
c001effb:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001f000:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c001f007:	0f 84 db 05 00 00    	je     c001f5e8 <CPU::detectFeatures()+0x61c>
c001f00d:	83 ec 0c             	sub    esp,0xc
c001f010:	89 ef                	mov    edi,ebp
c001f012:	6a 10                	push   0x10
c001f014:	e8 6b fe ff ff       	call   c001ee84 <CPU::cpuidCheckEDX(unsigned int)>
c001f019:	83 e0 01             	and    eax,0x1
c001f01c:	8d 14 00             	lea    edx,[eax+eax*1]
c001f01f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f025:	83 e0 fd             	and    eax,0xfffffffd
c001f028:	09 d0                	or     eax,edx
c001f02a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f030:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001f037:	e8 48 fe ff ff       	call   c001ee84 <CPU::cpuidCheckEDX(unsigned int)>
c001f03c:	83 e0 01             	and    eax,0x1
c001f03f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f046:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f04c:	83 e0 fb             	and    eax,0xfffffffb
c001f04f:	09 d0                	or     eax,edx
c001f051:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f057:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001f05e:	e8 21 fe ff ff       	call   c001ee84 <CPU::cpuidCheckEDX(unsigned int)>
c001f063:	83 e0 01             	and    eax,0x1
c001f066:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f06d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f073:	83 e0 f7             	and    eax,0xfffffff7
c001f076:	09 d0                	or     eax,edx
c001f078:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f07e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001f085:	e8 fa fd ff ff       	call   c001ee84 <CPU::cpuidCheckEDX(unsigned int)>
c001f08a:	83 e0 01             	and    eax,0x1
c001f08d:	c1 e0 04             	shl    eax,0x4
c001f090:	89 c2                	mov    edx,eax
c001f092:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f098:	83 e0 ef             	and    eax,0xffffffef
c001f09b:	09 d0                	or     eax,edx
c001f09d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f0a3:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001f0aa:	e8 d5 fd ff ff       	call   c001ee84 <CPU::cpuidCheckEDX(unsigned int)>
c001f0af:	83 e0 01             	and    eax,0x1
c001f0b2:	c1 e0 05             	shl    eax,0x5
c001f0b5:	89 c2                	mov    edx,eax
c001f0b7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f0bd:	83 e0 df             	and    eax,0xffffffdf
c001f0c0:	09 d0                	or     eax,edx
c001f0c2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f0c8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001f0cf:	e8 b0 fd ff ff       	call   c001ee84 <CPU::cpuidCheckEDX(unsigned int)>
c001f0d4:	83 e0 01             	and    eax,0x1
c001f0d7:	8d 14 00             	lea    edx,[eax+eax*1]
c001f0da:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f0e0:	83 e0 fd             	and    eax,0xfffffffd
c001f0e3:	09 d0                	or     eax,edx
c001f0e5:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f0eb:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001f0f2:	e8 8d fd ff ff       	call   c001ee84 <CPU::cpuidCheckEDX(unsigned int)>
c001f0f7:	83 e0 01             	and    eax,0x1
c001f0fa:	c1 e0 06             	shl    eax,0x6
c001f0fd:	89 c2                	mov    edx,eax
c001f0ff:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f105:	83 e0 bf             	and    eax,0xffffffbf
c001f108:	09 d0                	or     eax,edx
c001f10a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f110:	58                   	pop    eax
c001f111:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f115:	50                   	push   eax
c001f116:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f11a:	50                   	push   eax
c001f11b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f11f:	56                   	push   esi
c001f120:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f124:	50                   	push   eax
c001f125:	6a 00                	push   0x0
c001f127:	e8 d4 fc ff ff       	call   c001ee00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f12c:	b8 04 00 00 00       	mov    eax,0x4
c001f131:	89 c1                	mov    ecx,eax
c001f133:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f135:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001f13b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001f13f:	89 c1                	mov    ecx,eax
c001f141:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f143:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001f149:	8d 74 24 38          	lea    esi,[esp+0x38]
c001f14d:	89 c1                	mov    ecx,eax
c001f14f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f151:	83 c4 18             	add    esp,0x18
c001f154:	68 e4 24 03 c0       	push   0xc00324e4
c001f159:	55                   	push   ebp
c001f15a:	e8 f1 15 fe ff       	call   c0000750 <strcmp>
c001f15f:	83 c4 10             	add    esp,0x10
c001f162:	85 c0                	test   eax,eax
c001f164:	75 0f                	jne    c001f175 <CPU::detectFeatures()+0x1a9>
c001f166:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001f170:	e9 22 02 00 00       	jmp    c001f397 <CPU::detectFeatures()+0x3cb>
c001f175:	50                   	push   eax
c001f176:	50                   	push   eax
c001f177:	68 f1 24 03 c0       	push   0xc00324f1
c001f17c:	55                   	push   ebp
c001f17d:	e8 ce 15 fe ff       	call   c0000750 <strcmp>
c001f182:	83 c4 10             	add    esp,0x10
c001f185:	85 c0                	test   eax,eax
c001f187:	74 dd                	je     c001f166 <CPU::detectFeatures()+0x19a>
c001f189:	50                   	push   eax
c001f18a:	50                   	push   eax
c001f18b:	68 fe 24 03 c0       	push   0xc00324fe
c001f190:	55                   	push   ebp
c001f191:	e8 ba 15 fe ff       	call   c0000750 <strcmp>
c001f196:	83 c4 10             	add    esp,0x10
c001f199:	85 c0                	test   eax,eax
c001f19b:	74 2a                	je     c001f1c7 <CPU::detectFeatures()+0x1fb>
c001f19d:	50                   	push   eax
c001f19e:	50                   	push   eax
c001f19f:	68 0b 25 03 c0       	push   0xc003250b
c001f1a4:	55                   	push   ebp
c001f1a5:	e8 a6 15 fe ff       	call   c0000750 <strcmp>
c001f1aa:	83 c4 10             	add    esp,0x10
c001f1ad:	85 c0                	test   eax,eax
c001f1af:	74 16                	je     c001f1c7 <CPU::detectFeatures()+0x1fb>
c001f1b1:	50                   	push   eax
c001f1b2:	50                   	push   eax
c001f1b3:	68 18 25 03 c0       	push   0xc0032518
c001f1b8:	55                   	push   ebp
c001f1b9:	e8 92 15 fe ff       	call   c0000750 <strcmp>
c001f1be:	83 c4 10             	add    esp,0x10
c001f1c1:	85 c0                	test   eax,eax
c001f1c3:	74 48                	je     c001f20d <CPU::detectFeatures()+0x241>
c001f1c5:	eb 0f                	jmp    c001f1d6 <CPU::detectFeatures()+0x20a>
c001f1c7:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001f1d1:	e9 c1 01 00 00       	jmp    c001f397 <CPU::detectFeatures()+0x3cb>
c001f1d6:	50                   	push   eax
c001f1d7:	50                   	push   eax
c001f1d8:	68 25 25 03 c0       	push   0xc0032525
c001f1dd:	55                   	push   ebp
c001f1de:	e8 6d 15 fe ff       	call   c0000750 <strcmp>
c001f1e3:	83 c4 10             	add    esp,0x10
c001f1e6:	85 c0                	test   eax,eax
c001f1e8:	74 23                	je     c001f20d <CPU::detectFeatures()+0x241>
c001f1ea:	57                   	push   edi
c001f1eb:	57                   	push   edi
c001f1ec:	68 32 25 03 c0       	push   0xc0032532
c001f1f1:	55                   	push   ebp
c001f1f2:	e8 59 15 fe ff       	call   c0000750 <strcmp>
c001f1f7:	83 c4 10             	add    esp,0x10
c001f1fa:	85 c0                	test   eax,eax
c001f1fc:	75 1e                	jne    c001f21c <CPU::detectFeatures()+0x250>
c001f1fe:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f208:	e9 8a 01 00 00       	jmp    c001f397 <CPU::detectFeatures()+0x3cb>
c001f20d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001f217:	e9 7b 01 00 00       	jmp    c001f397 <CPU::detectFeatures()+0x3cb>
c001f21c:	56                   	push   esi
c001f21d:	56                   	push   esi
c001f21e:	68 3f 25 03 c0       	push   0xc003253f
c001f223:	55                   	push   ebp
c001f224:	e8 27 15 fe ff       	call   c0000750 <strcmp>
c001f229:	83 c4 10             	add    esp,0x10
c001f22c:	85 c0                	test   eax,eax
c001f22e:	75 0f                	jne    c001f23f <CPU::detectFeatures()+0x273>
c001f230:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001f23a:	e9 58 01 00 00       	jmp    c001f397 <CPU::detectFeatures()+0x3cb>
c001f23f:	51                   	push   ecx
c001f240:	51                   	push   ecx
c001f241:	68 fe 24 03 c0       	push   0xc00324fe
c001f246:	55                   	push   ebp
c001f247:	e8 04 15 fe ff       	call   c0000750 <strcmp>
c001f24c:	83 c4 10             	add    esp,0x10
c001f24f:	85 c0                	test   eax,eax
c001f251:	75 0f                	jne    c001f262 <CPU::detectFeatures()+0x296>
c001f253:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001f25d:	e9 35 01 00 00       	jmp    c001f397 <CPU::detectFeatures()+0x3cb>
c001f262:	52                   	push   edx
c001f263:	52                   	push   edx
c001f264:	68 4c 25 03 c0       	push   0xc003254c
c001f269:	55                   	push   ebp
c001f26a:	e8 e1 14 fe ff       	call   c0000750 <strcmp>
c001f26f:	83 c4 10             	add    esp,0x10
c001f272:	85 c0                	test   eax,eax
c001f274:	75 0f                	jne    c001f285 <CPU::detectFeatures()+0x2b9>
c001f276:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001f280:	e9 12 01 00 00       	jmp    c001f397 <CPU::detectFeatures()+0x3cb>
c001f285:	50                   	push   eax
c001f286:	50                   	push   eax
c001f287:	68 59 25 03 c0       	push   0xc0032559
c001f28c:	55                   	push   ebp
c001f28d:	e8 be 14 fe ff       	call   c0000750 <strcmp>
c001f292:	83 c4 10             	add    esp,0x10
c001f295:	85 c0                	test   eax,eax
c001f297:	75 0f                	jne    c001f2a8 <CPU::detectFeatures()+0x2dc>
c001f299:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001f2a3:	e9 ef 00 00 00       	jmp    c001f397 <CPU::detectFeatures()+0x3cb>
c001f2a8:	50                   	push   eax
c001f2a9:	50                   	push   eax
c001f2aa:	68 66 25 03 c0       	push   0xc0032566
c001f2af:	55                   	push   ebp
c001f2b0:	e8 9b 14 fe ff       	call   c0000750 <strcmp>
c001f2b5:	83 c4 10             	add    esp,0x10
c001f2b8:	85 c0                	test   eax,eax
c001f2ba:	75 0f                	jne    c001f2cb <CPU::detectFeatures()+0x2ff>
c001f2bc:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001f2c6:	e9 cc 00 00 00       	jmp    c001f397 <CPU::detectFeatures()+0x3cb>
c001f2cb:	50                   	push   eax
c001f2cc:	50                   	push   eax
c001f2cd:	68 73 25 03 c0       	push   0xc0032573
c001f2d2:	55                   	push   ebp
c001f2d3:	e8 78 14 fe ff       	call   c0000750 <strcmp>
c001f2d8:	83 c4 10             	add    esp,0x10
c001f2db:	85 c0                	test   eax,eax
c001f2dd:	75 0f                	jne    c001f2ee <CPU::detectFeatures()+0x322>
c001f2df:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001f2e9:	e9 a9 00 00 00       	jmp    c001f397 <CPU::detectFeatures()+0x3cb>
c001f2ee:	50                   	push   eax
c001f2ef:	50                   	push   eax
c001f2f0:	68 80 25 03 c0       	push   0xc0032580
c001f2f5:	55                   	push   ebp
c001f2f6:	e8 55 14 fe ff       	call   c0000750 <strcmp>
c001f2fb:	83 c4 10             	add    esp,0x10
c001f2fe:	85 c0                	test   eax,eax
c001f300:	75 0f                	jne    c001f311 <CPU::detectFeatures()+0x345>
c001f302:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001f30c:	e9 86 00 00 00       	jmp    c001f397 <CPU::detectFeatures()+0x3cb>
c001f311:	50                   	push   eax
c001f312:	50                   	push   eax
c001f313:	68 8d 25 03 c0       	push   0xc003258d
c001f318:	55                   	push   ebp
c001f319:	e8 32 14 fe ff       	call   c0000750 <strcmp>
c001f31e:	83 c4 10             	add    esp,0x10
c001f321:	85 c0                	test   eax,eax
c001f323:	75 0c                	jne    c001f331 <CPU::detectFeatures()+0x365>
c001f325:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001f32f:	eb 66                	jmp    c001f397 <CPU::detectFeatures()+0x3cb>
c001f331:	50                   	push   eax
c001f332:	50                   	push   eax
c001f333:	68 9a 25 03 c0       	push   0xc003259a
c001f338:	55                   	push   ebp
c001f339:	e8 12 14 fe ff       	call   c0000750 <strcmp>
c001f33e:	83 c4 10             	add    esp,0x10
c001f341:	85 c0                	test   eax,eax
c001f343:	75 0c                	jne    c001f351 <CPU::detectFeatures()+0x385>
c001f345:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001f34f:	eb 46                	jmp    c001f397 <CPU::detectFeatures()+0x3cb>
c001f351:	57                   	push   edi
c001f352:	57                   	push   edi
c001f353:	68 a7 25 03 c0       	push   0xc00325a7
c001f358:	55                   	push   ebp
c001f359:	e8 f2 13 fe ff       	call   c0000750 <strcmp>
c001f35e:	83 c4 10             	add    esp,0x10
c001f361:	85 c0                	test   eax,eax
c001f363:	74 e0                	je     c001f345 <CPU::detectFeatures()+0x379>
c001f365:	56                   	push   esi
c001f366:	56                   	push   esi
c001f367:	68 b4 25 03 c0       	push   0xc00325b4
c001f36c:	55                   	push   ebp
c001f36d:	e8 de 13 fe ff       	call   c0000750 <strcmp>
c001f372:	83 c4 10             	add    esp,0x10
c001f375:	85 c0                	test   eax,eax
c001f377:	74 cc                	je     c001f345 <CPU::detectFeatures()+0x379>
c001f379:	51                   	push   ecx
c001f37a:	51                   	push   ecx
c001f37b:	68 c1 25 03 c0       	push   0xc00325c1
c001f380:	55                   	push   ebp
c001f381:	e8 ca 13 fe ff       	call   c0000750 <strcmp>
c001f386:	83 c4 10             	add    esp,0x10
c001f389:	85 c0                	test   eax,eax
c001f38b:	74 b8                	je     c001f345 <CPU::detectFeatures()+0x379>
c001f38d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001f397:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001f39c:	0f 86 be 00 00 00    	jbe    c001f460 <CPU::detectFeatures()+0x494>
c001f3a2:	83 ec 0c             	sub    esp,0xc
c001f3a5:	68 80 00 00 00       	push   0x80
c001f3aa:	e8 31 fb ff ff       	call   c001eee0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f3af:	83 e0 01             	and    eax,0x1
c001f3b2:	c1 e0 06             	shl    eax,0x6
c001f3b5:	89 c2                	mov    edx,eax
c001f3b7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f3bd:	83 e0 bf             	and    eax,0xffffffbf
c001f3c0:	09 d0                	or     eax,edx
c001f3c2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f3c8:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001f3cf:	e8 0c fb ff ff       	call   c001eee0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f3d4:	83 e0 01             	and    eax,0x1
c001f3d7:	c1 e0 04             	shl    eax,0x4
c001f3da:	89 c2                	mov    edx,eax
c001f3dc:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f3e2:	83 e0 ef             	and    eax,0xffffffef
c001f3e5:	09 d0                	or     eax,edx
c001f3e7:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f3ed:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001f3f4:	e8 e7 fa ff ff       	call   c001eee0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f3f9:	89 c2                	mov    edx,eax
c001f3fb:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f401:	c1 e2 07             	shl    edx,0x7
c001f404:	83 e0 7f             	and    eax,0x7f
c001f407:	09 d0                	or     eax,edx
c001f409:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f40f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001f416:	e8 f3 fa ff ff       	call   c001ef0e <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f41b:	83 e0 01             	and    eax,0x1
c001f41e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f425:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f42b:	83 e0 f7             	and    eax,0xfffffff7
c001f42e:	09 d0                	or     eax,edx
c001f430:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f436:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001f43d:	e8 cc fa ff ff       	call   c001ef0e <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f442:	83 c4 10             	add    esp,0x10
c001f445:	83 e0 01             	and    eax,0x1
c001f448:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f44f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f455:	83 e0 fb             	and    eax,0xfffffffb
c001f458:	09 d0                	or     eax,edx
c001f45a:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f460:	83 ec 0c             	sub    esp,0xc
c001f463:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f467:	50                   	push   eax
c001f468:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f46c:	50                   	push   eax
c001f46d:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001f471:	57                   	push   edi
c001f472:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f476:	56                   	push   esi
c001f477:	6a 01                	push   0x1
c001f479:	e8 82 f9 ff ff       	call   c001ee00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f47e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f482:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001f488:	89 c1                	mov    ecx,eax
c001f48a:	83 e2 f0             	and    edx,0xfffffff0
c001f48d:	83 e1 0f             	and    ecx,0xf
c001f490:	09 ca                	or     edx,ecx
c001f492:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001f498:	89 c2                	mov    edx,eax
c001f49a:	c1 ea 04             	shr    edx,0x4
c001f49d:	83 e2 0f             	and    edx,0xf
c001f4a0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f4a4:	89 d1                	mov    ecx,edx
c001f4a6:	83 c4 20             	add    esp,0x20
c001f4a9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001f4af:	c1 e1 06             	shl    ecx,0x6
c001f4b2:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c001f4b8:	09 ca                	or     edx,ecx
c001f4ba:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001f4c1:	89 c2                	mov    edx,eax
c001f4c3:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001f4c9:	c1 ea 08             	shr    edx,0x8
c001f4cc:	83 e1 3f             	and    ecx,0x3f
c001f4cf:	83 e2 0f             	and    edx,0xf
c001f4d2:	89 d5                	mov    ebp,edx
c001f4d4:	83 e5 03             	and    ebp,0x3
c001f4d7:	c1 e5 06             	shl    ebp,0x6
c001f4da:	09 e9                	or     ecx,ebp
c001f4dc:	89 d5                	mov    ebp,edx
c001f4de:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001f4e4:	c1 ed 02             	shr    ebp,0x2
c001f4e7:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001f4ed:	83 e1 c0             	and    ecx,0xffffffc0
c001f4f0:	09 e9                	or     ecx,ebp
c001f4f2:	89 c5                	mov    ebp,eax
c001f4f4:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001f4fa:	c1 ed 08             	shr    ebp,0x8
c001f4fd:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001f503:	83 e5 30             	and    ebp,0x30
c001f506:	83 e1 cf             	and    ecx,0xffffffcf
c001f509:	09 e9                	or     ecx,ebp
c001f50b:	83 fa 06             	cmp    edx,0x6
c001f50e:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c001f514:	74 05                	je     c001f51b <CPU::detectFeatures()+0x54f>
c001f516:	83 fa 0f             	cmp    edx,0xf
c001f519:	75 64                	jne    c001f57f <CPU::detectFeatures()+0x5b3>
c001f51b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001f521:	89 c1                	mov    ecx,eax
c001f523:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c001f529:	c1 e9 10             	shr    ecx,0x10
c001f52c:	c1 e1 04             	shl    ecx,0x4
c001f52f:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001f533:	0f b6 c9             	movzx  ecx,cl
c001f536:	c1 e1 06             	shl    ecx,0x6
c001f539:	09 e9                	or     ecx,ebp
c001f53b:	83 fa 0f             	cmp    edx,0xf
c001f53e:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c001f545:	75 38                	jne    c001f57f <CPU::detectFeatures()+0x5b3>
c001f547:	c1 e8 14             	shr    eax,0x14
c001f54a:	83 c0 0f             	add    eax,0xf
c001f54d:	0f b6 c0             	movzx  eax,al
c001f550:	89 c2                	mov    edx,eax
c001f552:	c1 e8 02             	shr    eax,0x2
c001f555:	83 e2 03             	and    edx,0x3
c001f558:	89 d1                	mov    ecx,edx
c001f55a:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001f560:	c1 e1 06             	shl    ecx,0x6
c001f563:	83 e2 3f             	and    edx,0x3f
c001f566:	09 ca                	or     edx,ecx
c001f568:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001f56e:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001f574:	83 e2 c0             	and    edx,0xffffffc0
c001f577:	09 d0                	or     eax,edx
c001f579:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c001f57f:	83 ec 0c             	sub    esp,0xc
c001f582:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f588:	83 c8 07             	or     eax,0x7
c001f58b:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f591:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f595:	50                   	push   eax
c001f596:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001f59a:	55                   	push   ebp
c001f59b:	57                   	push   edi
c001f59c:	56                   	push   esi
c001f59d:	68 00 00 00 80       	push   0x80000000
c001f5a2:	e8 59 f8 ff ff       	call   c001ee00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f5a7:	83 c4 20             	add    esp,0x20
c001f5aa:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001f5b2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f5b6:	76 1e                	jbe    c001f5d6 <CPU::detectFeatures()+0x60a>
c001f5b8:	83 ec 0c             	sub    esp,0xc
c001f5bb:	50                   	push   eax
c001f5bc:	55                   	push   ebp
c001f5bd:	57                   	push   edi
c001f5be:	56                   	push   esi
c001f5bf:	68 01 00 00 80       	push   0x80000001
c001f5c4:	e8 37 f8 ff ff       	call   c001ee00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f5c9:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c001f5d3:	83 c4 20             	add    esp,0x20
c001f5d6:	52                   	push   edx
c001f5d7:	52                   	push   edx
c001f5d8:	68 cd 25 03 c0       	push   0xc00325cd
c001f5dd:	53                   	push   ebx
c001f5de:	e8 87 bd ff ff       	call   c001b36a <Device::setName(char const*)>
c001f5e3:	83 c4 10             	add    esp,0x10
c001f5e6:	eb 69                	jmp    c001f651 <CPU::detectFeatures()+0x685>
c001f5e8:	50                   	push   eax
c001f5e9:	50                   	push   eax
c001f5ea:	68 32 25 03 c0       	push   0xc0032532
c001f5ef:	55                   	push   ebp
c001f5f0:	e8 4b 10 fe ff       	call   c0000640 <strcpy>
c001f5f5:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f5ff:	e8 bf 0b fe ff       	call   c00001c3 <is486>
c001f604:	83 c4 10             	add    esp,0x10
c001f607:	85 c0                	test   eax,eax
c001f609:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f60f:	74 1f                	je     c001f630 <CPU::detectFeatures()+0x664>
c001f611:	83 c8 07             	or     eax,0x7
c001f614:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f61a:	0f 20 c0             	mov    eax,cr0
c001f61d:	83 e0 14             	and    eax,0x14
c001f620:	83 f8 04             	cmp    eax,0x4
c001f623:	75 10                	jne    c001f635 <CPU::detectFeatures()+0x669>
c001f625:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f62b:	83 e0 fd             	and    eax,0xfffffffd
c001f62e:	eb 1b                	jmp    c001f64b <CPU::detectFeatures()+0x67f>
c001f630:	83 e0 f8             	and    eax,0xfffffff8
c001f633:	eb df                	jmp    c001f614 <CPU::detectFeatures()+0x648>
c001f635:	e8 64 0b fe ff       	call   c000019e <hasLegacyFPU>
c001f63a:	83 e0 01             	and    eax,0x1
c001f63d:	8d 14 00             	lea    edx,[eax+eax*1]
c001f640:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f646:	83 e0 fd             	and    eax,0xfffffffd
c001f649:	09 d0                	or     eax,edx
c001f64b:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f651:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c001f658:	74 17                	je     c001f671 <CPU::detectFeatures()+0x6a5>
c001f65a:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001f660:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c001f666:	83 c8 10             	or     eax,0x10
c001f669:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c001f66f:	eb 20                	jmp    c001f691 <CPU::detectFeatures()+0x6c5>
c001f671:	e8 28 0b fe ff       	call   c000019e <hasLegacyFPU>
c001f676:	83 e0 01             	and    eax,0x1
c001f679:	8d 14 00             	lea    edx,[eax+eax*1]
c001f67c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f682:	83 e0 fd             	and    eax,0xfffffffd
c001f685:	09 d0                	or     eax,edx
c001f687:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f68d:	a8 02                	test   al,0x2
c001f68f:	75 c9                	jne    c001f65a <CPU::detectFeatures()+0x68e>
c001f691:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c001f698:	83 c4 2c             	add    esp,0x2c
c001f69b:	5b                   	pop    ebx
c001f69c:	5e                   	pop    esi
c001f69d:	5f                   	pop    edi
c001f69e:	5d                   	pop    ebp
c001f69f:	c3                   	ret    

c001f6a0 <CPU::setupSMEP()>:
c001f6a0:	0f 20 e0             	mov    eax,cr4
c001f6a3:	0d 00 00 10 00       	or     eax,0x100000
c001f6a8:	0f 22 e0             	mov    cr4,eax
c001f6ab:	c3                   	ret    

c001f6ac <CPU::setupUMIP()>:
c001f6ac:	0f 20 e0             	mov    eax,cr4
c001f6af:	80 cc 08             	or     ah,0x8
c001f6b2:	0f 22 e0             	mov    cr4,eax
c001f6b5:	c3                   	ret    

c001f6b6 <CPU::setupTSC()>:
c001f6b6:	0f 20 e0             	mov    eax,cr4
c001f6b9:	83 c8 04             	or     eax,0x4
c001f6bc:	0f 22 e0             	mov    cr4,eax
c001f6bf:	c3                   	ret    

c001f6c0 <CPU::setupLargePages()>:
c001f6c0:	0f 20 e0             	mov    eax,cr4
c001f6c3:	83 c8 10             	or     eax,0x10
c001f6c6:	0f 22 e0             	mov    cr4,eax
c001f6c9:	c3                   	ret    

c001f6ca <CPU::setupPAT()>:
c001f6ca:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001f6cf:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c001f6d6:	74 2c                	je     c001f704 <CPU::setupPAT()+0x3a>
c001f6d8:	53                   	push   ebx
c001f6d9:	83 ec 10             	sub    esp,0x10
c001f6dc:	68 77 02 00 00       	push   0x277
c001f6e1:	50                   	push   eax
c001f6e2:	e8 29 62 ff ff       	call   c0015910 <Computer::rdmsr(unsigned int)>
c001f6e7:	83 e2 f8             	and    edx,0xfffffff8
c001f6ea:	83 ca 01             	or     edx,0x1
c001f6ed:	52                   	push   edx
c001f6ee:	50                   	push   eax
c001f6ef:	68 77 02 00 00       	push   0x277
c001f6f4:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001f6fa:	e8 3d 62 ff ff       	call   c001593c <Computer::wrmsr(unsigned int, unsigned long long)>
c001f6ff:	83 c4 28             	add    esp,0x28
c001f702:	5b                   	pop    ebx
c001f703:	c3                   	ret    
c001f704:	c3                   	ret    
c001f705:	90                   	nop

c001f706 <CPU::setupMTRR()>:
c001f706:	c3                   	ret    
c001f707:	90                   	nop

c001f708 <CPU::setupGlobalPages()>:
c001f708:	0f 20 e0             	mov    eax,cr4
c001f70b:	0c 80                	or     al,0x80
c001f70d:	0f 22 e0             	mov    cr4,eax
c001f710:	c3                   	ret    
c001f711:	90                   	nop

c001f712 <CPU::allowUsermodeDataAccess()>:
c001f712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f716:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001f71d:	74 03                	je     c001f722 <CPU::allowUsermodeDataAccess()+0x10>
c001f71f:	0f 01 cb             	stac   
c001f722:	c3                   	ret    
c001f723:	90                   	nop

c001f724 <CPU::prohibitUsermodeDataAccess()>:
c001f724:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f728:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001f72f:	74 03                	je     c001f734 <CPU::prohibitUsermodeDataAccess()+0x10>
c001f731:	0f 01 ca             	clac   
c001f734:	c3                   	ret    
c001f735:	90                   	nop

c001f736 <CPU::setupSMAP()>:
c001f736:	0f 20 e0             	mov    eax,cr4
c001f739:	0d 00 00 20 00       	or     eax,0x200000
c001f73e:	0f 22 e0             	mov    cr4,eax
c001f741:	eb e1                	jmp    c001f724 <CPU::prohibitUsermodeDataAccess()>
c001f743:	90                   	nop

c001f744 <CPU::setupFeatures()>:
c001f744:	53                   	push   ebx
c001f745:	83 ec 08             	sub    esp,0x8
c001f748:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f74c:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c001f753:	74 18                	je     c001f76d <CPU::setupFeatures()+0x29>
c001f755:	83 ec 0c             	sub    esp,0xc
c001f758:	68 d9 25 03 c0       	push   0xc00325d9
c001f75d:	e8 33 9a ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c001f762:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f765:	e8 42 ff ff ff       	call   c001f6ac <CPU::setupUMIP()>
c001f76a:	83 c4 10             	add    esp,0x10
c001f76d:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c001f774:	74 18                	je     c001f78e <CPU::setupFeatures()+0x4a>
c001f776:	83 ec 0c             	sub    esp,0xc
c001f779:	68 e3 25 03 c0       	push   0xc00325e3
c001f77e:	e8 12 9a ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c001f783:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f786:	e8 2b ff ff ff       	call   c001f6b6 <CPU::setupTSC()>
c001f78b:	83 c4 10             	add    esp,0x10
c001f78e:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c001f795:	74 18                	je     c001f7af <CPU::setupFeatures()+0x6b>
c001f797:	83 ec 0c             	sub    esp,0xc
c001f79a:	68 ec 25 03 c0       	push   0xc00325ec
c001f79f:	e8 f1 99 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c001f7a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f7a7:	e8 14 ff ff ff       	call   c001f6c0 <CPU::setupLargePages()>
c001f7ac:	83 c4 10             	add    esp,0x10
c001f7af:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c001f7b6:	74 18                	je     c001f7d0 <CPU::setupFeatures()+0x8c>
c001f7b8:	83 ec 0c             	sub    esp,0xc
c001f7bb:	68 f5 25 03 c0       	push   0xc00325f5
c001f7c0:	e8 d0 99 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c001f7c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f7c8:	e8 3b ff ff ff       	call   c001f708 <CPU::setupGlobalPages()>
c001f7cd:	83 c4 10             	add    esp,0x10
c001f7d0:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c001f7d7:	74 18                	je     c001f7f1 <CPU::setupFeatures()+0xad>
c001f7d9:	83 ec 0c             	sub    esp,0xc
c001f7dc:	68 07 26 03 c0       	push   0xc0032607
c001f7e1:	e8 af 99 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c001f7e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f7e9:	e8 dc fe ff ff       	call   c001f6ca <CPU::setupPAT()>
c001f7ee:	83 c4 10             	add    esp,0x10
c001f7f1:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001f7f8:	74 11                	je     c001f80b <CPU::setupFeatures()+0xc7>
c001f7fa:	c7 44 24 10 10 26 03 c0 	mov    DWORD PTR [esp+0x10],0xc0032610
c001f802:	83 c4 08             	add    esp,0x8
c001f805:	5b                   	pop    ebx
c001f806:	e9 8a 99 ff ff       	jmp    c0019195 <Dbg::kprintf(char const*, ...)>
c001f80b:	83 c4 08             	add    esp,0x8
c001f80e:	5b                   	pop    ebx
c001f80f:	c3                   	ret    

c001f810 <CPU::open(int, int, void*)>:
c001f810:	55                   	push   ebp
c001f811:	57                   	push   edi
c001f812:	56                   	push   esi
c001f813:	53                   	push   ebx
c001f814:	83 ec 18             	sub    esp,0x18
c001f817:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001f81b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f81f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f823:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001f829:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c001f82f:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c001f835:	50                   	push   eax
c001f836:	e8 d3 63 ff ff       	call   c0015c0e <GDT::setup()>
c001f83b:	83 c4 0c             	add    esp,0xc
c001f83e:	6a 00                	push   0x0
c001f840:	68 ef be ad de       	push   0xdeadbeef
c001f845:	55                   	push   ebp
c001f846:	e8 8d 7f ff ff       	call   c00177d8 <TSS::setup(unsigned long, unsigned long)>
c001f84b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001f84e:	e8 65 7f ff ff       	call   c00177b8 <TSS::flush()>
c001f853:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001f859:	89 04 24             	mov    DWORD PTR [esp],eax
c001f85c:	e8 11 66 ff ff       	call   c0015e72 <IDT::setup()>
c001f861:	b8 00 04 00 00       	mov    eax,0x400
c001f866:	0f 23 f8             	mov    db7,eax
c001f869:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001f873:	e8 97 6d ff ff       	call   c001660f <Phys::allocatePage()>
c001f878:	83 c4 10             	add    esp,0x10
c001f87b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f881:	85 f6                	test   esi,esi
c001f883:	89 38                	mov    DWORD PTR [eax],edi
c001f885:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f88b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001f88e:	74 10                	je     c001f8a0 <CPU::open(int, int, void*)+0x90>
c001f890:	50                   	push   eax
c001f891:	50                   	push   eax
c001f892:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f898:	56                   	push   esi
c001f899:	e8 60 88 ff ff       	call   c00180fe <VAS::setCPUSpecific(unsigned long)>
c001f89e:	eb 0d                	jmp    c001f8ad <CPU::open(int, int, void*)+0x9d>
c001f8a0:	83 ec 0c             	sub    esp,0xc
c001f8a3:	68 1a 26 03 c0       	push   0xc003261a
c001f8a8:	e8 01 09 00 00       	call   c00201ae <KePanic(char const*)>
c001f8ad:	83 c4 10             	add    esp,0x10
c001f8b0:	83 ec 0c             	sub    esp,0xc
c001f8b3:	68 28 26 03 c0       	push   0xc0032628
c001f8b8:	e8 8e 01 00 00       	call   c001fa4b <KeSetBootMessage(char const*)>
c001f8bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f8c0:	e8 07 f7 ff ff       	call   c001efcc <CPU::detectFeatures()>
c001f8c5:	c7 04 24 4b 26 03 c0 	mov    DWORD PTR [esp],0xc003264b
c001f8cc:	e8 7a 01 00 00       	call   c001fa4b <KeSetBootMessage(char const*)>
c001f8d1:	e8 af 76 00 00       	call   c0026f85 <HalInitialise()>
c001f8d6:	a1 d4 a9 03 c0       	mov    eax,ds:0xc003a9d4
c001f8db:	83 e0 10             	and    eax,0x10
c001f8de:	83 f8 01             	cmp    eax,0x1
c001f8e1:	19 c0                	sbb    eax,eax
c001f8e3:	83 e0 46             	and    eax,0x46
c001f8e6:	83 c0 1e             	add    eax,0x1e
c001f8e9:	89 04 24             	mov    DWORD PTR [esp],eax
c001f8ec:	e8 5c d3 ff ff       	call   c001cc4d <setupTimer(int)>
c001f8f1:	83 c4 10             	add    esp,0x10
c001f8f4:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001f8fa:	f6 05 d4 a9 03 c0 20 	test   BYTE PTR ds:0xc003a9d4,0x20
c001f901:	74 0c                	je     c001f90f <CPU::open(int, int, void*)+0xff>
c001f903:	83 ec 0c             	sub    esp,0xc
c001f906:	53                   	push   ebx
c001f907:	e8 38 fe ff ff       	call   c001f744 <CPU::setupFeatures()>
c001f90c:	83 c4 10             	add    esp,0x10
c001f90f:	83 c4 0c             	add    esp,0xc
c001f912:	31 c0                	xor    eax,eax
c001f914:	5b                   	pop    ebx
c001f915:	5e                   	pop    esi
c001f916:	5f                   	pop    edi
c001f917:	5d                   	pop    ebp
c001f918:	c3                   	ret    

c001f919 <KeInitialiseAtexit()>:
c001f919:	83 ec 10             	sub    esp,0x10
c001f91c:	c7 05 a0 f8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f8a0,0x0
c001f926:	6a 60                	push   0x60
c001f928:	6a 00                	push   0x0
c001f92a:	68 20 f9 03 c0       	push   0xc003f920
c001f92f:	e8 bc 0b fe ff       	call   c00004f0 <memset>
c001f934:	83 c4 1c             	add    esp,0x1c
c001f937:	c3                   	ret    

c001f938 <KeRegisterAtexit(void (*)(void*), void*)>:
c001f938:	a1 a0 f8 03 c0       	mov    eax,ds:0xc003f8a0
c001f93d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f941:	89 14 85 20 f9 03 c0 	mov    DWORD PTR [eax*4-0x3ffc06e0],edx
c001f948:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f94c:	89 14 85 c0 f8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc0740],edx
c001f953:	40                   	inc    eax
c001f954:	a3 a0 f8 03 c0       	mov    ds:0xc003f8a0,eax
c001f959:	83 f8 17             	cmp    eax,0x17
c001f95c:	7e 0d                	jle    c001f96b <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c001f95e:	c7 44 24 04 8c 26 03 c0 	mov    DWORD PTR [esp+0x4],0xc003268c
c001f966:	e9 43 08 00 00       	jmp    c00201ae <KePanic(char const*)>
c001f96b:	c3                   	ret    

c001f96c <KeExecuteAtexit()>:
c001f96c:	53                   	push   ebx
c001f96d:	31 db                	xor    ebx,ebx
c001f96f:	83 ec 08             	sub    esp,0x8
c001f972:	39 1d a0 f8 03 c0    	cmp    DWORD PTR ds:0xc003f8a0,ebx
c001f978:	7e 50                	jle    c001f9ca <KeExecuteAtexit()+0x5e>
c001f97a:	8b 04 9d 20 f9 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc06e0]
c001f981:	85 c0                	test   eax,eax
c001f983:	74 42                	je     c001f9c7 <KeExecuteAtexit()+0x5b>
c001f985:	51                   	push   ecx
c001f986:	50                   	push   eax
c001f987:	53                   	push   ebx
c001f988:	68 a5 26 03 c0       	push   0xc00326a5
c001f98d:	e8 03 98 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c001f992:	58                   	pop    eax
c001f993:	ff 34 9d c0 f8 03 c0 	push   DWORD PTR [ebx*4-0x3ffc0740]
c001f99a:	ff 14 9d 20 f9 03 c0 	call   DWORD PTR [ebx*4-0x3ffc06e0]
c001f9a1:	c7 04 24 c7 26 03 c0 	mov    DWORD PTR [esp],0xc00326c7
c001f9a8:	e8 e8 97 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c001f9ad:	c7 04 24 73 38 03 c0 	mov    DWORD PTR [esp],0xc0033873
c001f9b4:	c7 04 9d 20 f9 03 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffc06e0],0x0
c001f9bf:	e8 d1 97 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c001f9c4:	83 c4 10             	add    esp,0x10
c001f9c7:	43                   	inc    ebx
c001f9c8:	eb a8                	jmp    c001f972 <KeExecuteAtexit()+0x6>
c001f9ca:	83 c4 08             	add    esp,0x8
c001f9cd:	5b                   	pop    ebx
c001f9ce:	c3                   	ret    

c001f9cf <KeDisplaySplashScreen()>:
c001f9cf:	55                   	push   ebp
c001f9d0:	bd 05 00 00 00       	mov    ebp,0x5
c001f9d5:	57                   	push   edi
c001f9d6:	bf 0a 00 00 00       	mov    edi,0xa
c001f9db:	56                   	push   esi
c001f9dc:	31 f6                	xor    esi,esi
c001f9de:	53                   	push   ebx
c001f9df:	31 db                	xor    ebx,ebx
c001f9e1:	83 ec 0c             	sub    esp,0xc
c001f9e4:	0f b6 96 e0 3a 03 c0 	movzx  edx,BYTE PTR [esi-0x3ffcc520]
c001f9eb:	89 d0                	mov    eax,edx
c001f9ed:	85 d2                	test   edx,edx
c001f9ef:	74 52                	je     c001fa43 <KeDisplaySplashScreen()+0x74>
c001f9f1:	80 bb 16 3b 03 c0 db 	cmp    BYTE PTR [ebx-0x3ffcc4ea],0xdb
c001f9f8:	75 13                	jne    c001fa0d <KeDisplaySplashScreen()+0x3e>
c001f9fa:	0f b6 8b 15 3b 03 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffcc4eb]
c001fa01:	83 e1 fe             	and    ecx,0xfffffffe
c001fa04:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c001fa0a:	75 01                	jne    c001fa0d <KeDisplaySplashScreen()+0x3e>
c001fa0c:	47                   	inc    edi
c001fa0d:	83 fa 0d             	cmp    edx,0xd
c001fa10:	74 28                	je     c001fa3a <KeDisplaySplashScreen()+0x6b>
c001fa12:	83 fa 0a             	cmp    edx,0xa
c001fa15:	75 0a                	jne    c001fa21 <KeDisplaySplashScreen()+0x52>
c001fa17:	45                   	inc    ebp
c001fa18:	bf 0a 00 00 00       	mov    edi,0xa
c001fa1d:	31 db                	xor    ebx,ebx
c001fa1f:	eb 19                	jmp    c001fa3a <KeDisplaySplashScreen()+0x6b>
c001fa21:	83 ec 0c             	sub    esp,0xc
c001fa24:	8d 14 1f             	lea    edx,[edi+ebx*1]
c001fa27:	55                   	push   ebp
c001fa28:	0f be c0             	movsx  eax,al
c001fa2b:	52                   	push   edx
c001fa2c:	43                   	inc    ebx
c001fa2d:	6a 00                	push   0x0
c001fa2f:	6a 0e                	push   0xe
c001fa31:	50                   	push   eax
c001fa32:	e8 cd 81 00 00       	call   c0027c04 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001fa37:	83 c4 20             	add    esp,0x20
c001fa3a:	46                   	inc    esi
c001fa3b:	81 fe 42 01 00 00    	cmp    esi,0x142
c001fa41:	75 a1                	jne    c001f9e4 <KeDisplaySplashScreen()+0x15>
c001fa43:	83 c4 0c             	add    esp,0xc
c001fa46:	5b                   	pop    ebx
c001fa47:	5e                   	pop    esi
c001fa48:	5f                   	pop    edi
c001fa49:	5d                   	pop    ebp
c001fa4a:	c3                   	ret    

c001fa4b <KeSetBootMessage(char const*)>:
c001fa4b:	57                   	push   edi
c001fa4c:	56                   	push   esi
c001fa4d:	53                   	push   ebx
c001fa4e:	81 ec a4 00 00 00    	sub    esp,0xa4
c001fa54:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c001fa5b:	68 9e 00 00 00       	push   0x9e
c001fa60:	6a 00                	push   0x0
c001fa62:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001fa66:	56                   	push   esi
c001fa67:	e8 84 0a fe ff       	call   c00004f0 <memset>
c001fa6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fa6f:	e8 fc 0a fe ff       	call   c0000570 <strlen>
c001fa74:	ba 50 00 00 00       	mov    edx,0x50
c001fa79:	83 c4 10             	add    esp,0x10
c001fa7c:	29 c2                	sub    edx,eax
c001fa7e:	31 c9                	xor    ecx,ecx
c001fa80:	83 e2 fe             	and    edx,0xfffffffe
c001fa83:	01 f2                	add    edx,esi
c001fa85:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c001fa8a:	84 c0                	test   al,al
c001fa8c:	74 0a                	je     c001fa98 <KeSetBootMessage(char const*)+0x4d>
c001fa8e:	80 cc 0f             	or     ah,0xf
c001fa91:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c001fa95:	41                   	inc    ecx
c001fa96:	eb ed                	jmp    c001fa85 <KeSetBootMessage(char const*)+0x3a>
c001fa98:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c001fa9d:	b9 9e 00 00 00       	mov    ecx,0x9e
c001faa2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001faa4:	81 c4 a0 00 00 00    	add    esp,0xa0
c001faaa:	5b                   	pop    ebx
c001faab:	5e                   	pop    esi
c001faac:	5f                   	pop    edi
c001faad:	c3                   	ret    
c001faae:	66 90                	xchg   ax,ax

c001fab0 <CUnlockScheduler>:
c001fab0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001fab5:	83 e8 01             	sub    eax,0x1
c001fab8:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001fabd:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001fac2:	85 c0                	test   eax,eax
c001fac4:	75 02                	jne    c001fac8 <CUnlockScheduler+0x18>
c001fac6:	fb                   	sti    
c001fac7:	90                   	nop
c001fac8:	90                   	nop
c001fac9:	c3                   	ret    
c001faca:	66 90                	xchg   ax,ax

c001facc <CLockScheduler>:
c001facc:	fa                   	cli    
c001facd:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001fad2:	83 c0 01             	add    eax,0x1
c001fad5:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001fada:	90                   	nop
c001fadb:	c3                   	ret    

c001fadc <CPrintf>:
c001fadc:	83 ec 0c             	sub    esp,0xc
c001fadf:	83 ec 08             	sub    esp,0x8
c001fae2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fae6:	68 50 f9 02 c0       	push   0xc002f950
c001faeb:	e8 a5 96 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c001faf0:	83 c4 10             	add    esp,0x10
c001faf3:	90                   	nop
c001faf4:	83 c4 0c             	add    esp,0xc
c001faf7:	c3                   	ret    

c001faf8 <Krnl::handlePowerButton()>:
c001faf8:	83 ec 0c             	sub    esp,0xc
c001fafb:	e8 09 07 00 00       	call   c0020209 <KeHandlePowerButton()>
c001fb00:	90                   	nop
c001fb01:	83 c4 0c             	add    esp,0xc
c001fb04:	c3                   	ret    
c001fb05:	8d 76 00             	lea    esi,[esi+0x0]

c001fb08 <Krnl::handleSleepButton()>:
c001fb08:	83 ec 0c             	sub    esp,0xc
c001fb0b:	e8 2e 07 00 00       	call   c002023e <KeHandleSleepButton()>
c001fb10:	90                   	nop
c001fb11:	83 c4 0c             	add    esp,0xc
c001fb14:	c3                   	ret    

c001fb15 <KeCalculateCRC32(unsigned char*, int)>:
c001fb15:	53                   	push   ebx
c001fb16:	83 c8 ff             	or     eax,0xffffffff
c001fb19:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fb1d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fb21:	01 cb                	add    ebx,ecx
c001fb23:	39 d9                	cmp    ecx,ebx
c001fb25:	74 15                	je     c001fb3c <KeCalculateCRC32(unsigned char*, int)+0x27>
c001fb27:	41                   	inc    ecx
c001fb28:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c001fb2b:	31 c2                	xor    edx,eax
c001fb2d:	c1 e8 08             	shr    eax,0x8
c001fb30:	0f b6 d2             	movzx  edx,dl
c001fb33:	33 04 95 40 3c 03 c0 	xor    eax,DWORD PTR [edx*4-0x3ffcc3c0]
c001fb3a:	eb e7                	jmp    c001fb23 <KeCalculateCRC32(unsigned char*, int)+0xe>
c001fb3c:	f7 d0                	not    eax
c001fb3e:	5b                   	pop    ebx
c001fb3f:	c3                   	ret    

c001fb40 <EnvVarContainer::getEnv(char const*)>:
c001fb40:	57                   	push   edi
c001fb41:	56                   	push   esi
c001fb42:	53                   	push   ebx
c001fb43:	31 db                	xor    ebx,ebx
c001fb45:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fb49:	39 1e                	cmp    DWORD PTR [esi],ebx
c001fb4b:	7e 2b                	jle    c001fb78 <EnvVarContainer::getEnv(char const*)+0x38>
c001fb4d:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001fb54:	50                   	push   eax
c001fb55:	50                   	push   eax
c001fb56:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001fb59:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001fb5c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001fb60:	e8 eb 0b fe ff       	call   c0000750 <strcmp>
c001fb65:	83 c4 10             	add    esp,0x10
c001fb68:	85 c0                	test   eax,eax
c001fb6a:	75 09                	jne    c001fb75 <EnvVarContainer::getEnv(char const*)+0x35>
c001fb6c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001fb6f:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001fb73:	eb 05                	jmp    c001fb7a <EnvVarContainer::getEnv(char const*)+0x3a>
c001fb75:	43                   	inc    ebx
c001fb76:	eb d1                	jmp    c001fb49 <EnvVarContainer::getEnv(char const*)+0x9>
c001fb78:	31 c0                	xor    eax,eax
c001fb7a:	5b                   	pop    ebx
c001fb7b:	5e                   	pop    esi
c001fb7c:	5f                   	pop    edi
c001fb7d:	c3                   	ret    

c001fb7e <EnvVarContainer::setEnv(char const*, char const*)>:
c001fb7e:	55                   	push   ebp
c001fb7f:	57                   	push   edi
c001fb80:	56                   	push   esi
c001fb81:	53                   	push   ebx
c001fb82:	83 ec 28             	sub    esp,0x28
c001fb85:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001fb89:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001fb8d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001fb91:	56                   	push   esi
c001fb92:	e8 d9 09 fe ff       	call   c0000570 <strlen>
c001fb97:	40                   	inc    eax
c001fb98:	89 04 24             	mov    DWORD PTR [esp],eax
c001fb9b:	e8 66 67 ff ff       	call   c0016306 <malloc>
c001fba0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fba3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fba7:	e8 c4 09 fe ff       	call   c0000570 <strlen>
c001fbac:	40                   	inc    eax
c001fbad:	89 04 24             	mov    DWORD PTR [esp],eax
c001fbb0:	e8 51 67 ff ff       	call   c0016306 <malloc>
c001fbb5:	89 34 24             	mov    DWORD PTR [esp],esi
c001fbb8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fbbc:	e8 af 09 fe ff       	call   c0000570 <strlen>
c001fbc1:	83 c4 0c             	add    esp,0xc
c001fbc4:	40                   	inc    eax
c001fbc5:	50                   	push   eax
c001fbc6:	6a 00                	push   0x0
c001fbc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fbcc:	e8 1f 09 fe ff       	call   c00004f0 <memset>
c001fbd1:	89 34 24             	mov    DWORD PTR [esp],esi
c001fbd4:	e8 97 09 fe ff       	call   c0000570 <strlen>
c001fbd9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fbdd:	8d 48 01             	lea    ecx,[eax+0x1]
c001fbe0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fbe2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fbe5:	89 de                	mov    esi,ebx
c001fbe7:	e8 84 09 fe ff       	call   c0000570 <strlen>
c001fbec:	83 c4 0c             	add    esp,0xc
c001fbef:	40                   	inc    eax
c001fbf0:	50                   	push   eax
c001fbf1:	6a 00                	push   0x0
c001fbf3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fbf7:	e8 f4 08 fe ff       	call   c00004f0 <memset>
c001fbfc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fbff:	e8 6c 09 fe ff       	call   c0000570 <strlen>
c001fc04:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fc08:	8d 48 01             	lea    ecx,[eax+0x1]
c001fc0b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fc0d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001fc10:	40                   	inc    eax
c001fc11:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001fc14:	c1 e0 03             	shl    eax,0x3
c001fc17:	5a                   	pop    edx
c001fc18:	59                   	pop    ecx
c001fc19:	50                   	push   eax
c001fc1a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001fc1d:	e8 d0 66 ff ff       	call   c00162f2 <realloc>
c001fc22:	8d 74 24 18          	lea    esi,[esp+0x18]
c001fc26:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001fc29:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001fc2c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001fc30:	b9 08 00 00 00       	mov    ecx,0x8
c001fc35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fc37:	83 c4 2c             	add    esp,0x2c
c001fc3a:	5b                   	pop    ebx
c001fc3b:	5e                   	pop    esi
c001fc3c:	5f                   	pop    edi
c001fc3d:	5d                   	pop    ebp
c001fc3e:	c3                   	ret    
c001fc3f:	90                   	nop

c001fc40 <EnvVarContainer::deleteEnv(char const*)>:
c001fc40:	c3                   	ret    
c001fc41:	90                   	nop

c001fc42 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001fc42:	55                   	push   ebp
c001fc43:	57                   	push   edi
c001fc44:	56                   	push   esi
c001fc45:	53                   	push   ebx
c001fc46:	81 ec 38 01 00 00    	sub    esp,0x138
c001fc4c:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001fc53:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001fc5a:	68 14 01 00 00       	push   0x114
c001fc5f:	e8 a2 66 ff ff       	call   c0016306 <malloc>
c001fc64:	83 c4 0c             	add    esp,0xc
c001fc67:	89 c3                	mov    ebx,eax
c001fc69:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fc6c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001fc73:	50                   	push   eax
c001fc74:	e8 23 a7 ff ff       	call   c001a39c <File::File(char const*, Process*)>
c001fc79:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fc7c:	e8 fd a9 ff ff       	call   c001a67e <File::exists()>
c001fc81:	83 c4 10             	add    esp,0x10
c001fc84:	84 c0                	test   al,al
c001fc86:	75 31                	jne    c001fcb9 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001fc88:	50                   	push   eax
c001fc89:	50                   	push   eax
c001fc8a:	6a 12                	push   0x12
c001fc8c:	53                   	push   ebx
c001fc8d:	e8 28 a7 ff ff       	call   c001a3ba <File::open(FileOpenMode)>
c001fc92:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fc94:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001fc97:	89 34 24             	mov    DWORD PTR [esp],esi
c001fc9a:	e8 d1 08 fe ff       	call   c0000570 <strlen>
c001fc9f:	5a                   	pop    edx
c001fca0:	31 d2                	xor    edx,edx
c001fca2:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001fca6:	51                   	push   ecx
c001fca7:	56                   	push   esi
c001fca8:	52                   	push   edx
c001fca9:	50                   	push   eax
c001fcaa:	53                   	push   ebx
c001fcab:	ff d7                	call   edi
c001fcad:	83 c4 14             	add    esp,0x14
c001fcb0:	53                   	push   ebx
c001fcb1:	e8 62 a7 ff ff       	call   c001a418 <File::close()>
c001fcb6:	83 c4 10             	add    esp,0x10
c001fcb9:	56                   	push   esi
c001fcba:	31 f6                	xor    esi,esi
c001fcbc:	68 00 01 00 00       	push   0x100
c001fcc1:	6a 00                	push   0x0
c001fcc3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001fcc7:	50                   	push   eax
c001fcc8:	e8 23 08 fe ff       	call   c00004f0 <memset>
c001fccd:	5f                   	pop    edi
c001fcce:	58                   	pop    eax
c001fccf:	6a 01                	push   0x1
c001fcd1:	53                   	push   ebx
c001fcd2:	e8 e3 a6 ff ff       	call   c001a3ba <File::open(FileOpenMode)>
c001fcd7:	83 c4 10             	add    esp,0x10
c001fcda:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001fce2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001fcea:	83 ec 0c             	sub    esp,0xc
c001fced:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fcef:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001fcf3:	51                   	push   ecx
c001fcf4:	8d 54 24 23          	lea    edx,[esp+0x23]
c001fcf8:	52                   	push   edx
c001fcf9:	6a 00                	push   0x0
c001fcfb:	6a 01                	push   0x1
c001fcfd:	53                   	push   ebx
c001fcfe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001fd01:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c001fd06:	83 c4 20             	add    esp,0x20
c001fd09:	89 c2                	mov    edx,eax
c001fd0b:	85 c0                	test   eax,eax
c001fd0d:	0f 84 36 01 00 00    	je     c001fe49 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c001fd13:	83 f8 0d             	cmp    eax,0xd
c001fd16:	0f 84 22 01 00 00    	je     c001fe3e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fd1c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fd21:	0f 84 f0 00 00 00    	je     c001fe17 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c001fd27:	83 f8 0a             	cmp    eax,0xa
c001fd2a:	74 13                	je     c001fd3f <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001fd2c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fd31:	74 0c                	je     c001fd3f <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001fd33:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001fd39:	0f 8e f6 00 00 00    	jle    c001fe35 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c001fd3f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fd43:	83 ec 0c             	sub    esp,0xc
c001fd46:	8d 78 01             	lea    edi,[eax+0x1]
c001fd49:	57                   	push   edi
c001fd4a:	e8 b7 65 ff ff       	call   c0016306 <malloc>
c001fd4f:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001fd53:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001fd57:	8d 56 04             	lea    edx,[esi+0x4]
c001fd5a:	89 14 24             	mov    DWORD PTR [esp],edx
c001fd5d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001fd61:	e8 a0 65 ff ff       	call   c0016306 <malloc>
c001fd66:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001fd6a:	83 c4 0c             	add    esp,0xc
c001fd6d:	57                   	push   edi
c001fd6e:	6a 00                	push   0x0
c001fd70:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001fd74:	e8 77 07 fe ff       	call   c00004f0 <memset>
c001fd79:	8d 74 24 30          	lea    esi,[esp+0x30]
c001fd7d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001fd81:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001fd85:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fd87:	83 c4 0c             	add    esp,0xc
c001fd8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fd8e:	52                   	push   edx
c001fd8f:	6a 00                	push   0x0
c001fd91:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001fd95:	e8 56 07 fe ff       	call   c00004f0 <memset>
c001fd9a:	8d 74 24 30          	lea    esi,[esp+0x30]
c001fd9e:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001fda2:	89 34 24             	mov    DWORD PTR [esp],esi
c001fda5:	e8 c6 07 fe ff       	call   c0000570 <strlen>
c001fdaa:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001fdae:	89 c1                	mov    ecx,eax
c001fdb0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fdb2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001fdb5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001fdb8:	40                   	inc    eax
c001fdb9:	83 c4 10             	add    esp,0x10
c001fdbc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001fdbf:	85 d2                	test   edx,edx
c001fdc1:	75 0c                	jne    c001fdcf <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c001fdc3:	83 ec 0c             	sub    esp,0xc
c001fdc6:	6a 08                	push   0x8
c001fdc8:	e8 39 65 ff ff       	call   c0016306 <malloc>
c001fdcd:	eb 0c                	jmp    c001fddb <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c001fdcf:	c1 e0 03             	shl    eax,0x3
c001fdd2:	51                   	push   ecx
c001fdd3:	51                   	push   ecx
c001fdd4:	50                   	push   eax
c001fdd5:	52                   	push   edx
c001fdd6:	e8 17 65 ff ff       	call   c00162f2 <realloc>
c001fddb:	83 c4 10             	add    esp,0x10
c001fdde:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001fde1:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001fde4:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001fde7:	8d 74 24 18          	lea    esi,[esp+0x18]
c001fdeb:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001fdef:	b9 08 00 00 00       	mov    ecx,0x8
c001fdf4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fdf6:	31 f6                	xor    esi,esi
c001fdf8:	50                   	push   eax
c001fdf9:	68 00 01 00 00       	push   0x100
c001fdfe:	6a 00                	push   0x0
c001fe00:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001fe04:	50                   	push   eax
c001fe05:	e8 e6 06 fe ff       	call   c00004f0 <memset>
c001fe0a:	83 c4 10             	add    esp,0x10
c001fe0d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001fe15:	eb 27                	jmp    c001fe3e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fe17:	83 f8 3d             	cmp    eax,0x3d
c001fe1a:	74 1e                	je     c001fe3a <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c001fe1c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001fe22:	7f 07                	jg     c001fe2b <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c001fe24:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c001fe28:	46                   	inc    esi
c001fe29:	eb 13                	jmp    c001fe3e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fe2b:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001fe33:	eb 09                	jmp    c001fe3e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fe35:	83 f8 3d             	cmp    eax,0x3d
c001fe38:	75 ea                	jne    c001fe24 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c001fe3a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001fe3e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fe43:	0f 85 99 fe ff ff    	jne    c001fce2 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001fe49:	83 ec 0c             	sub    esp,0xc
c001fe4c:	53                   	push   ebx
c001fe4d:	e8 c6 a5 ff ff       	call   c001a418 <File::close()>
c001fe52:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fe54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fe57:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001fe5a:	81 c4 3c 01 00 00    	add    esp,0x13c
c001fe60:	5b                   	pop    ebx
c001fe61:	5e                   	pop    esi
c001fe62:	5f                   	pop    edi
c001fe63:	5d                   	pop    ebp
c001fe64:	c3                   	ret    
c001fe65:	90                   	nop

c001fe66 <EnvVarContainer::__loadSystem()>:
c001fe66:	83 ec 10             	sub    esp,0x10
c001fe69:	68 40 40 03 c0       	push   0xc0034040
c001fe6e:	68 cc 26 03 c0       	push   0xc00326cc
c001fe73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe77:	e8 c6 fd ff ff       	call   c001fc42 <EnvVarContainer::loadFrom(char const*, char const*)>
c001fe7c:	83 c4 1c             	add    esp,0x1c
c001fe7f:	c3                   	ret    

c001fe80 <EnvVarContainer::__loadUser()>:
c001fe80:	c3                   	ret    
c001fe81:	90                   	nop

c001fe82 <EnvVarContainer::EnvVarContainer(Process*)>:
c001fe82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe86:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fe8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fe94:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fe97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe9b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fea2:	90                   	nop
c001fea3:	c3                   	ret    

c001fea4 <EnvVarContainer::~EnvVarContainer()>:
c001fea4:	83 ec 0c             	sub    esp,0xc
c001fea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001feae:	85 c0                	test   eax,eax
c001feb0:	74 1d                	je     c001fecf <EnvVarContainer::~EnvVarContainer()+0x2b>
c001feb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb6:	8b 00                	mov    eax,DWORD PTR [eax]
c001feb8:	85 c0                	test   eax,eax
c001feba:	74 13                	je     c001fecf <EnvVarContainer::~EnvVarContainer()+0x2b>
c001febc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fec3:	83 ec 0c             	sub    esp,0xc
c001fec6:	50                   	push   eax
c001fec7:	e8 4a 64 ff ff       	call   c0016316 <free>
c001fecc:	83 c4 10             	add    esp,0x10
c001fecf:	90                   	nop
c001fed0:	83 c4 0c             	add    esp,0xc
c001fed3:	c3                   	ret    

c001fed4 <KeGetEnv(Process*, char const*)>:
c001fed4:	53                   	push   ebx
c001fed5:	83 ec 08             	sub    esp,0x8
c001fed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fedc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fee0:	39 05 f8 01 04 c0    	cmp    DWORD PTR ds:0xc00401f8,eax
c001fee6:	74 04                	je     c001feec <KeGetEnv(Process*, char const*)+0x18>
c001fee8:	85 c0                	test   eax,eax
c001feea:	75 0b                	jne    c001fef7 <KeGetEnv(Process*, char const*)+0x23>
c001feec:	a1 80 f9 03 c0       	mov    eax,ds:0xc003f980
c001fef1:	85 c0                	test   eax,eax
c001fef3:	75 19                	jne    c001ff0e <KeGetEnv(Process*, char const*)+0x3a>
c001fef5:	eb 27                	jmp    c001ff1e <KeGetEnv(Process*, char const*)+0x4a>
c001fef7:	52                   	push   edx
c001fef8:	52                   	push   edx
c001fef9:	53                   	push   ebx
c001fefa:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001ff00:	e8 3b fc ff ff       	call   c001fb40 <EnvVarContainer::getEnv(char const*)>
c001ff05:	83 c4 10             	add    esp,0x10
c001ff08:	85 c0                	test   eax,eax
c001ff0a:	75 28                	jne    c001ff34 <KeGetEnv(Process*, char const*)+0x60>
c001ff0c:	eb de                	jmp    c001feec <KeGetEnv(Process*, char const*)+0x18>
c001ff0e:	52                   	push   edx
c001ff0f:	52                   	push   edx
c001ff10:	53                   	push   ebx
c001ff11:	50                   	push   eax
c001ff12:	e8 29 fc ff ff       	call   c001fb40 <EnvVarContainer::getEnv(char const*)>
c001ff17:	83 c4 10             	add    esp,0x10
c001ff1a:	85 c0                	test   eax,eax
c001ff1c:	75 16                	jne    c001ff34 <KeGetEnv(Process*, char const*)+0x60>
c001ff1e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001ff22:	a1 84 f9 03 c0       	mov    eax,ds:0xc003f984
c001ff27:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ff2b:	83 c4 08             	add    esp,0x8
c001ff2e:	5b                   	pop    ebx
c001ff2f:	e9 0c fc ff ff       	jmp    c001fb40 <EnvVarContainer::getEnv(char const*)>
c001ff34:	83 c4 08             	add    esp,0x8
c001ff37:	5b                   	pop    ebx
c001ff38:	c3                   	ret    

c001ff39 <KeSetEnvSystem(char const*, char const*)>:
c001ff39:	83 ec 10             	sub    esp,0x10
c001ff3c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ff40:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ff44:	ff 35 84 f9 03 c0    	push   DWORD PTR ds:0xc003f984
c001ff4a:	e8 2f fc ff ff       	call   c001fb7e <EnvVarContainer::setEnv(char const*, char const*)>
c001ff4f:	83 c4 1c             	add    esp,0x1c
c001ff52:	c3                   	ret    

c001ff53 <KeSetEnvUser(char const*, char const*)>:
c001ff53:	a1 80 f9 03 c0       	mov    eax,ds:0xc003f980
c001ff58:	85 c0                	test   eax,eax
c001ff5a:	74 15                	je     c001ff71 <KeSetEnvUser(char const*, char const*)+0x1e>
c001ff5c:	83 ec 10             	sub    esp,0x10
c001ff5f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ff63:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ff67:	50                   	push   eax
c001ff68:	e8 11 fc ff ff       	call   c001fb7e <EnvVarContainer::setEnv(char const*, char const*)>
c001ff6d:	83 c4 1c             	add    esp,0x1c
c001ff70:	c3                   	ret    
c001ff71:	c3                   	ret    

c001ff72 <KeSetEnvProcess(Process*, char const*, char const*)>:
c001ff72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff76:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c001ff7c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ff80:	e9 f9 fb ff ff       	jmp    c001fb7e <EnvVarContainer::setEnv(char const*, char const*)>

c001ff85 <KeDeleteEnvSystem(char const*)>:
c001ff85:	c3                   	ret    

c001ff86 <KeDeleteEnvUser(char const*)>:
c001ff86:	c3                   	ret    

c001ff87 <KeDeleteEnvProcess(Process*, char const*)>:
c001ff87:	c3                   	ret    

c001ff88 <KeNewProcessEnv(Process*)>:
c001ff88:	83 ec 28             	sub    esp,0x28
c001ff8b:	6a 0c                	push   0xc
c001ff8d:	e8 74 63 ff ff       	call   c0016306 <malloc>
c001ff92:	5a                   	pop    edx
c001ff93:	59                   	pop    ecx
c001ff94:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ff98:	50                   	push   eax
c001ff99:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ff9d:	e8 e0 fe ff ff       	call   c001fe82 <EnvVarContainer::EnvVarContainer(Process*)>
c001ffa2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ffa6:	83 c4 2c             	add    esp,0x2c
c001ffa9:	c3                   	ret    

c001ffaa <KeCopyProcessEnv(Process*, Process*)>:
c001ffaa:	57                   	push   edi
c001ffab:	56                   	push   esi
c001ffac:	53                   	push   ebx
c001ffad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffb1:	83 ec 0c             	sub    esp,0xc
c001ffb4:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001ffba:	6a 0c                	push   0xc
c001ffbc:	e8 45 63 ff ff       	call   c0016306 <malloc>
c001ffc1:	89 c3                	mov    ebx,eax
c001ffc3:	58                   	pop    eax
c001ffc4:	5a                   	pop    edx
c001ffc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffc9:	53                   	push   ebx
c001ffca:	e8 b3 fe ff ff       	call   c001fe82 <EnvVarContainer::EnvVarContainer(Process*)>
c001ffcf:	8b 07                	mov    eax,DWORD PTR [edi]
c001ffd1:	89 03                	mov    DWORD PTR [ebx],eax
c001ffd3:	c1 e0 03             	shl    eax,0x3
c001ffd6:	89 04 24             	mov    DWORD PTR [esp],eax
c001ffd9:	e8 28 63 ff ff       	call   c0016306 <malloc>
c001ffde:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001ffe1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001ffe3:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001ffe6:	c1 e1 03             	shl    ecx,0x3
c001ffe9:	89 c7                	mov    edi,eax
c001ffeb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ffed:	83 c4 10             	add    esp,0x10
c001fff0:	89 d8                	mov    eax,ebx
c001fff2:	5b                   	pop    ebx
c001fff3:	5e                   	pop    esi
c001fff4:	5f                   	pop    edi
c001fff5:	c3                   	ret    

c001fff6 <KeLoadSystemEnv()>:
c001fff6:	53                   	push   ebx
c001fff7:	83 ec 14             	sub    esp,0x14
c001fffa:	6a 0c                	push   0xc
c001fffc:	e8 05 63 ff ff       	call   c0016306 <malloc>
c0020001:	89 c3                	mov    ebx,eax
c0020003:	58                   	pop    eax
c0020004:	5a                   	pop    edx
c0020005:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c002000b:	53                   	push   ebx
c002000c:	e8 71 fe ff ff       	call   c001fe82 <EnvVarContainer::EnvVarContainer(Process*)>
c0020011:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020014:	89 1d 84 f9 03 c0    	mov    DWORD PTR ds:0xc003f984,ebx
c002001a:	e8 47 fe ff ff       	call   c001fe66 <EnvVarContainer::__loadSystem()>
c002001f:	83 c4 18             	add    esp,0x18
c0020022:	5b                   	pop    ebx
c0020023:	c3                   	ret    

c0020024 <KeLoadUserEnv()>:
c0020024:	53                   	push   ebx
c0020025:	83 ec 14             	sub    esp,0x14
c0020028:	6a 0c                	push   0xc
c002002a:	e8 d7 62 ff ff       	call   c0016306 <malloc>
c002002f:	89 c3                	mov    ebx,eax
c0020031:	58                   	pop    eax
c0020032:	5a                   	pop    edx
c0020033:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0020039:	53                   	push   ebx
c002003a:	e8 43 fe ff ff       	call   c001fe82 <EnvVarContainer::EnvVarContainer(Process*)>
c002003f:	89 1d 80 f9 03 c0    	mov    DWORD PTR ds:0xc003f980,ebx
c0020045:	83 c4 18             	add    esp,0x18
c0020048:	5b                   	pop    ebx
c0020049:	c3                   	ret    

c002004a <KeFlushEnv()>:
c002004a:	c3                   	ret    

c002004b <KeGetProcessTotalEnvCount(Process*)>:
c002004b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002004f:	8b 15 80 f9 03 c0    	mov    edx,DWORD PTR ds:0xc003f980
c0020055:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c002005b:	a1 84 f9 03 c0       	mov    eax,ds:0xc003f984
c0020060:	8b 00                	mov    eax,DWORD PTR [eax]
c0020062:	03 01                	add    eax,DWORD PTR [ecx]
c0020064:	85 d2                	test   edx,edx
c0020066:	74 02                	je     c002006a <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0020068:	03 02                	add    eax,DWORD PTR [edx]
c002006a:	c3                   	ret    

c002006b <KeGetProcessEnvPair(Process*, int)>:
c002006b:	57                   	push   edi
c002006c:	56                   	push   esi
c002006d:	8b 35 80 f9 03 c0    	mov    esi,DWORD PTR ds:0xc003f980
c0020073:	53                   	push   ebx
c0020074:	85 f6                	test   esi,esi
c0020076:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002007a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002007e:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0020084:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020088:	8b 01                	mov    eax,DWORD PTR [ecx]
c002008a:	75 16                	jne    c00200a2 <KeGetProcessEnvPair(Process*, int)+0x37>
c002008c:	39 c2                	cmp    edx,eax
c002008e:	7c 16                	jl     c00200a6 <KeGetProcessEnvPair(Process*, int)+0x3b>
c0020090:	8b 0d 84 f9 03 c0    	mov    ecx,DWORD PTR ds:0xc003f984
c0020096:	8b 31                	mov    esi,DWORD PTR [ecx]
c0020098:	01 c6                	add    esi,eax
c002009a:	39 d6                	cmp    esi,edx
c002009c:	7e 3c                	jle    c00200da <KeGetProcessEnvPair(Process*, int)+0x6f>
c002009e:	29 c2                	sub    edx,eax
c00200a0:	eb 04                	jmp    c00200a6 <KeGetProcessEnvPair(Process*, int)+0x3b>
c00200a2:	39 c2                	cmp    edx,eax
c00200a4:	7d 05                	jge    c00200ab <KeGetProcessEnvPair(Process*, int)+0x40>
c00200a6:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00200a9:	eb 20                	jmp    c00200cb <KeGetProcessEnvPair(Process*, int)+0x60>
c00200ab:	8b 3e                	mov    edi,DWORD PTR [esi]
c00200ad:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00200b0:	39 d1                	cmp    ecx,edx
c00200b2:	7e 04                	jle    c00200b8 <KeGetProcessEnvPair(Process*, int)+0x4d>
c00200b4:	29 c2                	sub    edx,eax
c00200b6:	eb 10                	jmp    c00200c8 <KeGetProcessEnvPair(Process*, int)+0x5d>
c00200b8:	8b 35 84 f9 03 c0    	mov    esi,DWORD PTR ds:0xc003f984
c00200be:	03 0e                	add    ecx,DWORD PTR [esi]
c00200c0:	39 d1                	cmp    ecx,edx
c00200c2:	7e 16                	jle    c00200da <KeGetProcessEnvPair(Process*, int)+0x6f>
c00200c4:	29 c2                	sub    edx,eax
c00200c6:	29 fa                	sub    edx,edi
c00200c8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00200cb:	8d 14 d0             	lea    edx,[eax+edx*8]
c00200ce:	8b 02                	mov    eax,DWORD PTR [edx]
c00200d0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00200d3:	89 03                	mov    DWORD PTR [ebx],eax
c00200d5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00200d8:	eb 1d                	jmp    c00200f7 <KeGetProcessEnvPair(Process*, int)+0x8c>
c00200da:	83 ec 0c             	sub    esp,0xc
c00200dd:	68 ee 26 03 c0       	push   0xc00326ee
c00200e2:	e8 c7 00 00 00       	call   c00201ae <KePanic(char const*)>
c00200e7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00200ed:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00200f4:	83 c4 10             	add    esp,0x10
c00200f7:	89 d8                	mov    eax,ebx
c00200f9:	5b                   	pop    ebx
c00200fa:	5e                   	pop    esi
c00200fb:	5f                   	pop    edi
c00200fc:	c2 04 00             	ret    0x4

c00200ff <CPU::current()>:
c00200ff:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0020104:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002010a:	c3                   	ret    

c002010b <operator new(unsigned long)>:
c002010b:	e9 f6 61 ff ff       	jmp    c0016306 <malloc>

c0020110 <operator delete(void*)>:
c0020110:	e9 11 62 ff ff       	jmp    c0016326 <rfree>

c0020115 <disableIRQs()>:
c0020115:	fa                   	cli    
c0020116:	c3                   	ret    

c0020117 <enableIRQs()>:
c0020117:	fb                   	sti    
c0020118:	c3                   	ret    

c0020119 <lockScheduler()>:
c0020119:	fa                   	cli    
c002011a:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0020120:	c3                   	ret    

c0020121 <unlockScheduler()>:
c0020121:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020126:	48                   	dec    eax
c0020127:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002012c:	75 01                	jne    c002012f <unlockScheduler()+0xe>
c002012e:	fb                   	sti    
c002012f:	c3                   	ret    

c0020130 <lockStuff()>:
c0020130:	fa                   	cli    
c0020131:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0020137:	ff 05 cc 01 04 c0    	inc    DWORD PTR ds:0xc00401cc
c002013d:	c3                   	ret    

c002013e <unlockStuff()>:
c002013e:	83 ec 0c             	sub    esp,0xc
c0020141:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020146:	48                   	dec    eax
c0020147:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002014c:	75 18                	jne    c0020166 <unlockStuff()+0x28>
c002014e:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c0020155:	74 0f                	je     c0020166 <unlockStuff()+0x28>
c0020157:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020161:	e8 f6 4f 00 00       	call   c002515c <schedule()>
c0020166:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002016b:	48                   	dec    eax
c002016c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020171:	75 01                	jne    c0020174 <unlockStuff()+0x36>
c0020173:	fb                   	sti    
c0020174:	83 c4 0c             	add    esp,0xc
c0020177:	c3                   	ret    

c0020178 <Virt::getAKernelVAS()>:
c0020178:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c002017d:	c3                   	ret    

c002017e <__not_memcpy>:
c002017e:	57                   	push   edi
c002017f:	56                   	push   esi
c0020180:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020184:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020188:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002018c:	89 c7                	mov    edi,eax
c002018e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020190:	5e                   	pop    esi
c0020191:	5f                   	pop    edi
c0020192:	c3                   	ret    
c0020193:	90                   	nop

c0020194 <Mutex::Mutex()>:
c0020194:	83 ec 0c             	sub    esp,0xc
c0020197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002019b:	83 ec 08             	sub    esp,0x8
c002019e:	6a 01                	push   0x1
c00201a0:	50                   	push   eax
c00201a1:	e8 b2 03 00 00       	call   c0020558 <Semaphore::Semaphore(int)>
c00201a6:	83 c4 10             	add    esp,0x10
c00201a9:	90                   	nop
c00201aa:	83 c4 0c             	add    esp,0xc
c00201ad:	c3                   	ret    

c00201ae <KePanic(char const*)>:
c00201ae:	c6 05 88 f9 03 c0 01 	mov    BYTE PTR ds:0xc003f988,0x1
c00201b5:	e9 9c 6c 00 00       	jmp    c0026e56 <HalPanic(char const*)>

c00201ba <KePowerThread(void*)>:
c00201ba:	83 ec 0c             	sub    esp,0xc
c00201bd:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00201c2:	48                   	dec    eax
c00201c3:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00201c8:	75 01                	jne    c00201cb <KePowerThread(void*)+0x11>
c00201ca:	fb                   	sti    
c00201cb:	83 ec 0c             	sub    esp,0xc
c00201ce:	c6 05 a0 f9 03 c0 00 	mov    BYTE PTR ds:0xc003f9a0,0x0
c00201d5:	6a 0a                	push   0xa
c00201d7:	e8 6c 51 00 00       	call   c0025348 <sleep(unsigned int)>
c00201dc:	83 05 e4 f9 03 c0 0a 	add    DWORD PTR ds:0xc003f9e4,0xa
c00201e3:	83 c4 10             	add    esp,0x10
c00201e6:	eb e3                	jmp    c00201cb <KePowerThread(void*)+0x11>

c00201e8 <KeChangePowerSettings(PowerSettings)>:
c00201e8:	57                   	push   edi
c00201e9:	b9 09 00 00 00       	mov    ecx,0x9
c00201ee:	56                   	push   esi
c00201ef:	bf c0 f9 03 c0       	mov    edi,0xc003f9c0
c00201f4:	fc                   	cld    
c00201f5:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00201f9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00201fb:	5e                   	pop    esi
c00201fc:	5f                   	pop    edi
c00201fd:	c3                   	ret    

c00201fe <KeUserIOReceived()>:
c00201fe:	c7 05 e4 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9e4,0x0
c0020208:	c3                   	ret    

c0020209 <KeHandlePowerButton()>:
c0020209:	83 ec 0c             	sub    esp,0xc
c002020c:	a1 c0 f9 03 c0       	mov    eax,ds:0xc003f9c0
c0020211:	83 f8 02             	cmp    eax,0x2
c0020214:	75 10                	jne    c0020226 <KeHandlePowerButton()+0x1d>
c0020216:	83 ec 0c             	sub    esp,0xc
c0020219:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002021f:	e8 54 57 ff ff       	call   c0015978 <Computer::shutdown()>
c0020224:	eb 11                	jmp    c0020237 <KeHandlePowerButton()+0x2e>
c0020226:	48                   	dec    eax
c0020227:	75 11                	jne    c002023a <KeHandlePowerButton()+0x31>
c0020229:	83 ec 0c             	sub    esp,0xc
c002022c:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0020232:	e8 71 57 ff ff       	call   c00159a8 <Computer::sleep()>
c0020237:	83 c4 10             	add    esp,0x10
c002023a:	83 c4 0c             	add    esp,0xc
c002023d:	c3                   	ret    

c002023e <KeHandleSleepButton()>:
c002023e:	83 ec 0c             	sub    esp,0xc
c0020241:	a1 c4 f9 03 c0       	mov    eax,ds:0xc003f9c4
c0020246:	83 f8 02             	cmp    eax,0x2
c0020249:	75 10                	jne    c002025b <KeHandleSleepButton()+0x1d>
c002024b:	83 ec 0c             	sub    esp,0xc
c002024e:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0020254:	e8 1f 57 ff ff       	call   c0015978 <Computer::shutdown()>
c0020259:	eb 11                	jmp    c002026c <KeHandleSleepButton()+0x2e>
c002025b:	48                   	dec    eax
c002025c:	75 11                	jne    c002026f <KeHandleSleepButton()+0x31>
c002025e:	83 ec 0c             	sub    esp,0xc
c0020261:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0020267:	e8 3c 57 ff ff       	call   c00159a8 <Computer::sleep()>
c002026c:	83 c4 10             	add    esp,0x10
c002026f:	83 c4 0c             	add    esp,0xc
c0020272:	c3                   	ret    

c0020273 <KeSetupPowerManager()>:
c0020273:	83 ec 0c             	sub    esp,0xc
c0020276:	c7 05 e4 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9e4,0x0
c0020280:	68 f0 00 00 00       	push   0xf0
c0020285:	c6 05 a0 f9 03 c0 00 	mov    BYTE PTR ds:0xc003f9a0,0x0
c002028c:	6a 00                	push   0x0
c002028e:	68 ba 01 02 c0       	push   0xc00201ba
c0020293:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0020299:	e8 6e 4c 00 00       	call   c0024f0c <Process::createThread(void (*)(void*), void*, int)>
c002029e:	c7 05 c0 f9 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc003f9c0,0x2
c00202a8:	c7 05 c4 f9 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003f9c4,0x1
c00202b2:	c7 05 c8 f9 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc003f9c8,0x3
c00202bc:	c7 05 cc f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9cc,0x0
c00202c6:	c7 05 d8 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9d8,0x0
c00202d0:	c7 05 d0 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9d0,0x0
c00202da:	c7 05 dc f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9dc,0x0
c00202e4:	c7 05 d4 f9 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc003f9d4,0x3c
c00202ee:	c7 05 e0 f9 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc003f9e0,0x3c
c00202f8:	83 c4 1c             	add    esp,0x1c
c00202fb:	c3                   	ret    

c00202fc <KeRand()>:
c00202fc:	69 05 e8 f9 03 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc003f9e8,0x2875
c0020306:	69 0d ec f9 03 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc003f9ec,0xa2e7b175
c0020310:	53                   	push   ebx
c0020311:	01 c1                	add    ecx,eax
c0020313:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0020318:	f7 25 e8 f9 03 c0    	mul    DWORD PTR ds:0xc003f9e8
c002031e:	01 ca                	add    edx,ecx
c0020320:	05 ef 04 b5 00       	add    eax,0xb504ef
c0020325:	83 d2 00             	adc    edx,0x0
c0020328:	a3 e8 f9 03 c0       	mov    ds:0xc003f9e8,eax
c002032d:	0f b7 da             	movzx  ebx,dx
c0020330:	89 da                	mov    edx,ebx
c0020332:	89 1d ec f9 03 c0    	mov    DWORD PTR ds:0xc003f9ec,ebx
c0020338:	0f ac d0 0e          	shrd   eax,edx,0xe
c002033c:	5b                   	pop    ebx
c002033d:	c3                   	ret    

c002033e <KeSeedRand(unsigned int)>:
c002033e:	53                   	push   ebx
c002033f:	83 ec 08             	sub    esp,0x8
c0020342:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020346:	e8 2a 6e 00 00       	call   c0027175 <HalGetRand()>
c002034b:	c7 05 ec f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9ec,0x0
c0020355:	31 d8                	xor    eax,ebx
c0020357:	a3 e8 f9 03 c0       	mov    ds:0xc003f9e8,eax
c002035c:	e8 9b ff ff ff       	call   c00202fc <KeRand()>
c0020361:	83 c4 08             	add    esp,0x8
c0020364:	5b                   	pop    ebx
c0020365:	eb 95                	jmp    c00202fc <KeRand()>

c0020367 <KeInitRand()>:
c0020367:	83 ec 0c             	sub    esp,0xc
c002036a:	e8 fb 6b 00 00       	call   c0026f6a <HalQueryPerformanceCounter()>
c002036f:	0f 20 da             	mov    edx,cr3
c0020372:	0f 22 da             	mov    cr3,edx
c0020375:	0f 20 da             	mov    edx,cr3
c0020378:	0f 22 da             	mov    cr3,edx
c002037b:	0f 20 da             	mov    edx,cr3
c002037e:	0f 22 da             	mov    cr3,edx
c0020381:	0f 20 da             	mov    edx,cr3
c0020384:	0f 22 da             	mov    cr3,edx
c0020387:	83 ec 0c             	sub    esp,0xc
c002038a:	35 03 8a 95 38       	xor    eax,0x38958a03
c002038f:	50                   	push   eax
c0020390:	e8 a9 ff ff ff       	call   c002033e <KeSeedRand(unsigned int)>
c0020395:	83 c4 1c             	add    esp,0x1c
c0020398:	c3                   	ret    
c0020399:	66 90                	xchg   ax,ax
c002039b:	90                   	nop

c002039c <KeResolveCompatibilitySymbol(char*)>:
c002039c:	83 ec 0c             	sub    esp,0xc
c002039f:	83 ec 08             	sub    esp,0x8
c00203a2:	68 08 27 03 c0       	push   0xc0032708
c00203a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203ab:	e8 a0 03 fe ff       	call   c0000750 <strcmp>
c00203b0:	83 c4 10             	add    esp,0x10
c00203b3:	85 c0                	test   eax,eax
c00203b5:	0f 94 c0             	sete   al
c00203b8:	0f b6 c0             	movzx  eax,al
c00203bb:	85 c0                	test   eax,eax
c00203bd:	74 0d                	je     c00203cc <KeResolveCompatibilitySymbol(char*)+0x30>
c00203bf:	b8 bc a9 03 c0       	mov    eax,0xc003a9bc
c00203c4:	e9 8b 01 00 00       	jmp    c0020554 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00203c9:	8d 76 00             	lea    esi,[esi+0x0]
c00203cc:	83 ec 08             	sub    esp,0x8
c00203cf:	68 11 27 03 c0       	push   0xc0032711
c00203d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203d8:	e8 73 03 fe ff       	call   c0000750 <strcmp>
c00203dd:	83 c4 10             	add    esp,0x10
c00203e0:	85 c0                	test   eax,eax
c00203e2:	0f 94 c0             	sete   al
c00203e5:	0f b6 c0             	movzx  eax,al
c00203e8:	85 c0                	test   eax,eax
c00203ea:	74 0c                	je     c00203f8 <KeResolveCompatibilitySymbol(char*)+0x5c>
c00203ec:	b8 60 e5 02 c0       	mov    eax,0xc002e560
c00203f1:	e9 5e 01 00 00       	jmp    c0020554 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00203f6:	66 90                	xchg   ax,ax
c00203f8:	83 ec 08             	sub    esp,0x8
c00203fb:	68 1b 27 03 c0       	push   0xc003271b
c0020400:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020404:	e8 47 03 fe ff       	call   c0000750 <strcmp>
c0020409:	83 c4 10             	add    esp,0x10
c002040c:	85 c0                	test   eax,eax
c002040e:	0f 94 c0             	sete   al
c0020411:	0f b6 c0             	movzx  eax,al
c0020414:	85 c0                	test   eax,eax
c0020416:	74 0c                	je     c0020424 <KeResolveCompatibilitySymbol(char*)+0x88>
c0020418:	b8 94 e2 02 c0       	mov    eax,0xc002e294
c002041d:	e9 32 01 00 00       	jmp    c0020554 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020422:	66 90                	xchg   ax,ax
c0020424:	83 ec 08             	sub    esp,0x8
c0020427:	68 24 27 03 c0       	push   0xc0032724
c002042c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020430:	e8 1b 03 fe ff       	call   c0000750 <strcmp>
c0020435:	83 c4 10             	add    esp,0x10
c0020438:	85 c0                	test   eax,eax
c002043a:	0f 94 c0             	sete   al
c002043d:	0f b6 c0             	movzx  eax,al
c0020440:	85 c0                	test   eax,eax
c0020442:	74 0c                	je     c0020450 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0020444:	b8 ae 01 02 c0       	mov    eax,0xc00201ae
c0020449:	e9 06 01 00 00       	jmp    c0020554 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002044e:	66 90                	xchg   ax,ax
c0020450:	83 ec 08             	sub    esp,0x8
c0020453:	68 37 27 03 c0       	push   0xc0032737
c0020458:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002045c:	e8 ef 02 fe ff       	call   c0000750 <strcmp>
c0020461:	83 c4 10             	add    esp,0x10
c0020464:	85 c0                	test   eax,eax
c0020466:	0f 94 c0             	sete   al
c0020469:	0f b6 c0             	movzx  eax,al
c002046c:	85 c0                	test   eax,eax
c002046e:	74 0c                	je     c002047c <KeResolveCompatibilitySymbol(char*)+0xe0>
c0020470:	b8 4b fa 01 c0       	mov    eax,0xc001fa4b
c0020475:	e9 da 00 00 00       	jmp    c0020554 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002047a:	66 90                	xchg   ax,ax
c002047c:	83 ec 08             	sub    esp,0x8
c002047f:	68 54 27 03 c0       	push   0xc0032754
c0020484:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020488:	e8 c3 02 fe ff       	call   c0000750 <strcmp>
c002048d:	83 c4 10             	add    esp,0x10
c0020490:	85 c0                	test   eax,eax
c0020492:	0f 94 c0             	sete   al
c0020495:	0f b6 c0             	movzx  eax,al
c0020498:	85 c0                	test   eax,eax
c002049a:	74 0c                	je     c00204a8 <KeResolveCompatibilitySymbol(char*)+0x10c>
c002049c:	b8 60 e6 02 c0       	mov    eax,0xc002e660
c00204a1:	e9 ae 00 00 00       	jmp    c0020554 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00204a6:	66 90                	xchg   ax,ax
c00204a8:	83 ec 08             	sub    esp,0x8
c00204ab:	68 5e 27 03 c0       	push   0xc003275e
c00204b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204b4:	e8 97 02 fe ff       	call   c0000750 <strcmp>
c00204b9:	83 c4 10             	add    esp,0x10
c00204bc:	85 c0                	test   eax,eax
c00204be:	0f 94 c0             	sete   al
c00204c1:	0f b6 c0             	movzx  eax,al
c00204c4:	85 c0                	test   eax,eax
c00204c6:	74 0c                	je     c00204d4 <KeResolveCompatibilitySymbol(char*)+0x138>
c00204c8:	b8 e0 e3 02 c0       	mov    eax,0xc002e3e0
c00204cd:	e9 82 00 00 00       	jmp    c0020554 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00204d2:	66 90                	xchg   ax,ax
c00204d4:	83 ec 08             	sub    esp,0x8
c00204d7:	68 67 27 03 c0       	push   0xc0032767
c00204dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204e0:	e8 6b 02 fe ff       	call   c0000750 <strcmp>
c00204e5:	83 c4 10             	add    esp,0x10
c00204e8:	85 c0                	test   eax,eax
c00204ea:	0f 94 c0             	sete   al
c00204ed:	0f b6 c0             	movzx  eax,al
c00204f0:	85 c0                	test   eax,eax
c00204f2:	74 08                	je     c00204fc <KeResolveCompatibilitySymbol(char*)+0x160>
c00204f4:	b8 c0 a9 03 c0       	mov    eax,0xc003a9c0
c00204f9:	eb 59                	jmp    c0020554 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00204fb:	90                   	nop
c00204fc:	83 ec 08             	sub    esp,0x8
c00204ff:	68 7f 27 03 c0       	push   0xc003277f
c0020504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020508:	e8 43 02 fe ff       	call   c0000750 <strcmp>
c002050d:	83 c4 10             	add    esp,0x10
c0020510:	85 c0                	test   eax,eax
c0020512:	0f 94 c0             	sete   al
c0020515:	0f b6 c0             	movzx  eax,al
c0020518:	85 c0                	test   eax,eax
c002051a:	74 08                	je     c0020524 <KeResolveCompatibilitySymbol(char*)+0x188>
c002051c:	b8 c0 a9 03 c0       	mov    eax,0xc003a9c0
c0020521:	eb 31                	jmp    c0020554 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020523:	90                   	nop
c0020524:	83 ec 08             	sub    esp,0x8
c0020527:	68 8c 27 03 c0       	push   0xc003278c
c002052c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020530:	e8 1b 02 fe ff       	call   c0000750 <strcmp>
c0020535:	83 c4 10             	add    esp,0x10
c0020538:	85 c0                	test   eax,eax
c002053a:	0f 94 c0             	sete   al
c002053d:	0f b6 c0             	movzx  eax,al
c0020540:	85 c0                	test   eax,eax
c0020542:	74 08                	je     c002054c <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0020544:	b8 c1 a9 03 c0       	mov    eax,0xc003a9c1
c0020549:	eb 09                	jmp    c0020554 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002054b:	90                   	nop
c002054c:	b8 00 00 00 00       	mov    eax,0x0
c0020551:	8d 76 00             	lea    esi,[esi+0x0]
c0020554:	83 c4 0c             	add    esp,0xc
c0020557:	c3                   	ret    

c0020558 <Semaphore::Semaphore(int)>:
c0020558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002055c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020560:	89 10                	mov    DWORD PTR [eax],edx
c0020562:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020566:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c002056d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020571:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020578:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002057c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020583:	90                   	nop
c0020584:	c3                   	ret    
c0020585:	90                   	nop
c0020586:	66 90                	xchg   ax,ax

c0020588 <Semaphore::tryAcquire()>:
c0020588:	83 ec 0c             	sub    esp,0xc
c002058b:	fa                   	cli    
c002058c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020591:	83 c0 01             	add    eax,0x1
c0020594:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020599:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002059e:	83 c0 01             	add    eax,0x1
c00205a1:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00205a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205aa:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00205ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00205b3:	39 c2                	cmp    edx,eax
c00205b5:	7d 5d                	jge    c0020614 <Semaphore::tryAcquire()+0x8c>
c00205b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205bb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00205be:	8d 50 01             	lea    edx,[eax+0x1]
c00205c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205c5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00205c8:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00205cd:	83 e8 01             	sub    eax,0x1
c00205d0:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00205d5:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00205da:	85 c0                	test   eax,eax
c00205dc:	75 1a                	jne    c00205f8 <Semaphore::tryAcquire()+0x70>
c00205de:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00205e3:	85 c0                	test   eax,eax
c00205e5:	74 11                	je     c00205f8 <Semaphore::tryAcquire()+0x70>
c00205e7:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00205f1:	e8 66 4b 00 00       	call   c002515c <schedule()>
c00205f6:	66 90                	xchg   ax,ax
c00205f8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00205fd:	83 e8 01             	sub    eax,0x1
c0020600:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020605:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002060a:	85 c0                	test   eax,eax
c002060c:	75 02                	jne    c0020610 <Semaphore::tryAcquire()+0x88>
c002060e:	fb                   	sti    
c002060f:	90                   	nop
c0020610:	b0 01                	mov    al,0x1
c0020612:	eb 4c                	jmp    c0020660 <Semaphore::tryAcquire()+0xd8>
c0020614:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020619:	83 e8 01             	sub    eax,0x1
c002061c:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020621:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020626:	85 c0                	test   eax,eax
c0020628:	75 1a                	jne    c0020644 <Semaphore::tryAcquire()+0xbc>
c002062a:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c002062f:	85 c0                	test   eax,eax
c0020631:	74 11                	je     c0020644 <Semaphore::tryAcquire()+0xbc>
c0020633:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c002063d:	e8 1a 4b 00 00       	call   c002515c <schedule()>
c0020642:	66 90                	xchg   ax,ax
c0020644:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020649:	83 e8 01             	sub    eax,0x1
c002064c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020651:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020656:	85 c0                	test   eax,eax
c0020658:	75 02                	jne    c002065c <Semaphore::tryAcquire()+0xd4>
c002065a:	fb                   	sti    
c002065b:	90                   	nop
c002065c:	b0 00                	mov    al,0x0
c002065e:	66 90                	xchg   ax,ax
c0020660:	83 c4 0c             	add    esp,0xc
c0020663:	c3                   	ret    

c0020664 <Semaphore::assertLocked(char const*)>:
c0020664:	83 ec 0c             	sub    esp,0xc
c0020667:	fa                   	cli    
c0020668:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002066d:	83 c0 01             	add    eax,0x1
c0020670:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020675:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002067a:	83 c0 01             	add    eax,0x1
c002067d:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020686:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002068d:	8b 00                	mov    eax,DWORD PTR [eax]
c002068f:	39 c2                	cmp    edx,eax
c0020691:	7d 11                	jge    c00206a4 <Semaphore::assertLocked(char const*)+0x40>
c0020693:	83 ec 0c             	sub    esp,0xc
c0020696:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002069a:	e8 0f fb ff ff       	call   c00201ae <KePanic(char const*)>
c002069f:	83 c4 10             	add    esp,0x10
c00206a2:	66 90                	xchg   ax,ax
c00206a4:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00206a9:	83 e8 01             	sub    eax,0x1
c00206ac:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00206b1:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00206b6:	85 c0                	test   eax,eax
c00206b8:	75 1a                	jne    c00206d4 <Semaphore::assertLocked(char const*)+0x70>
c00206ba:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00206bf:	85 c0                	test   eax,eax
c00206c1:	74 11                	je     c00206d4 <Semaphore::assertLocked(char const*)+0x70>
c00206c3:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00206cd:	e8 8a 4a 00 00       	call   c002515c <schedule()>
c00206d2:	66 90                	xchg   ax,ax
c00206d4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00206d9:	83 e8 01             	sub    eax,0x1
c00206dc:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00206e1:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00206e6:	85 c0                	test   eax,eax
c00206e8:	75 02                	jne    c00206ec <Semaphore::assertLocked(char const*)+0x88>
c00206ea:	fb                   	sti    
c00206eb:	90                   	nop
c00206ec:	90                   	nop
c00206ed:	83 c4 0c             	add    esp,0xc
c00206f0:	c3                   	ret    
c00206f1:	90                   	nop
c00206f2:	66 90                	xchg   ax,ax

c00206f4 <Semaphore::acquire(int)>:
c00206f4:	83 ec 1c             	sub    esp,0x1c
c00206f7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00206fc:	0f 84 9a 00 00 00    	je     c002079c <Semaphore::acquire(int)+0xa8>
c0020702:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002070a:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c002070f:	90                   	nop
c0020710:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0020715:	85 c0                	test   eax,eax
c0020717:	74 77                	je     c0020790 <Semaphore::acquire(int)+0x9c>
c0020719:	83 ec 0c             	sub    esp,0xc
c002071c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020720:	e8 63 fe ff ff       	call   c0020588 <Semaphore::tryAcquire()>
c0020725:	83 c4 10             	add    esp,0x10
c0020728:	83 f0 01             	xor    eax,0x1
c002072b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c002072f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0020733:	83 f0 01             	xor    eax,0x1
c0020736:	0f b6 c0             	movzx  eax,al
c0020739:	85 c0                	test   eax,eax
c002073b:	75 4f                	jne    c002078c <Semaphore::acquire(int)+0x98>
c002073d:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0020742:	7f 2c                	jg     c0020770 <Semaphore::acquire(int)+0x7c>
c0020744:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020748:	89 d0                	mov    eax,edx
c002074a:	c1 e0 02             	shl    eax,0x2
c002074d:	01 d0                	add    eax,edx
c002074f:	01 c0                	add    eax,eax
c0020751:	83 ec 0c             	sub    esp,0xc
c0020754:	50                   	push   eax
c0020755:	e8 da 4b 00 00       	call   c0025334 <milliTenthSleep(unsigned int)>
c002075a:	83 c4 10             	add    esp,0x10
c002075d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020761:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0020765:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c002076d:	eb a1                	jmp    c0020710 <Semaphore::acquire(int)+0x1c>
c002076f:	90                   	nop
c0020770:	83 ec 0c             	sub    esp,0xc
c0020773:	68 90 01 00 00       	push   0x190
c0020778:	e8 b7 4b 00 00       	call   c0025334 <milliTenthSleep(unsigned int)>
c002077d:	83 c4 10             	add    esp,0x10
c0020780:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0020785:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c002078a:	eb 84                	jmp    c0020710 <Semaphore::acquire(int)+0x1c>
c002078c:	90                   	nop
c002078d:	8d 76 00             	lea    esi,[esi+0x0]
c0020790:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020794:	e9 ff 00 00 00       	jmp    c0020898 <Semaphore::acquire(int)+0x1a4>
c0020799:	8d 76 00             	lea    esi,[esi+0x0]
c002079c:	fa                   	cli    
c002079d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00207a2:	83 c0 01             	add    eax,0x1
c00207a5:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00207aa:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00207af:	83 c0 01             	add    eax,0x1
c00207b2:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00207b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207bb:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00207be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00207c4:	39 c2                	cmp    edx,eax
c00207c6:	7d 14                	jge    c00207dc <Semaphore::acquire(int)+0xe8>
c00207c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00207cf:	8d 50 01             	lea    edx,[eax+0x1]
c00207d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207d6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00207d9:	eb 6d                	jmp    c0020848 <Semaphore::acquire(int)+0x154>
c00207db:	90                   	nop
c00207dc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00207e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00207e3:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00207ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00207f1:	85 c0                	test   eax,eax
c00207f3:	75 13                	jne    c0020808 <Semaphore::acquire(int)+0x114>
c00207f5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00207fa:	8b 10                	mov    edx,DWORD PTR [eax]
c00207fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020800:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020803:	eb 17                	jmp    c002081c <Semaphore::acquire(int)+0x128>
c0020805:	8d 76 00             	lea    esi,[esi+0x0]
c0020808:	ba 00 20 00 c2       	mov    edx,0xc2002000
c002080d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020811:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020814:	8b 12                	mov    edx,DWORD PTR [edx]
c0020816:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0020819:	8d 76 00             	lea    esi,[esi+0x0]
c002081c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0020821:	8b 10                	mov    edx,DWORD PTR [eax]
c0020823:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020827:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002082a:	83 ec 0c             	sub    esp,0xc
c002082d:	68 9c 27 03 c0       	push   0xc003279c
c0020832:	e8 5e 89 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0020837:	83 c4 10             	add    esp,0x10
c002083a:	83 ec 0c             	sub    esp,0xc
c002083d:	6a 05                	push   0x5
c002083f:	e8 d4 49 00 00       	call   c0025218 <blockTask(TaskState)>
c0020844:	83 c4 10             	add    esp,0x10
c0020847:	90                   	nop
c0020848:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002084d:	83 e8 01             	sub    eax,0x1
c0020850:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020855:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002085a:	85 c0                	test   eax,eax
c002085c:	75 1a                	jne    c0020878 <Semaphore::acquire(int)+0x184>
c002085e:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0020863:	85 c0                	test   eax,eax
c0020865:	74 11                	je     c0020878 <Semaphore::acquire(int)+0x184>
c0020867:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020871:	e8 e6 48 00 00       	call   c002515c <schedule()>
c0020876:	66 90                	xchg   ax,ax
c0020878:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002087d:	83 e8 01             	sub    eax,0x1
c0020880:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020885:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002088a:	85 c0                	test   eax,eax
c002088c:	75 02                	jne    c0020890 <Semaphore::acquire(int)+0x19c>
c002088e:	fb                   	sti    
c002088f:	90                   	nop
c0020890:	b8 00 00 00 00       	mov    eax,0x0
c0020895:	8d 76 00             	lea    esi,[esi+0x0]
c0020898:	83 c4 1c             	add    esp,0x1c
c002089b:	c3                   	ret    

c002089c <Semaphore::acquire()>:
c002089c:	83 ec 0c             	sub    esp,0xc
c002089f:	83 ec 08             	sub    esp,0x8
c00208a2:	6a 00                	push   0x0
c00208a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208a8:	e8 47 fe ff ff       	call   c00206f4 <Semaphore::acquire(int)>
c00208ad:	83 c4 10             	add    esp,0x10
c00208b0:	90                   	nop
c00208b1:	83 c4 0c             	add    esp,0xc
c00208b4:	c3                   	ret    
c00208b5:	90                   	nop
c00208b6:	66 90                	xchg   ax,ax

c00208b8 <Semaphore::release()>:
c00208b8:	83 ec 1c             	sub    esp,0x1c
c00208bb:	fa                   	cli    
c00208bc:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00208c1:	83 c0 01             	add    eax,0x1
c00208c4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00208c9:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00208ce:	83 c0 01             	add    eax,0x1
c00208d1:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00208d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00208dd:	85 c0                	test   eax,eax
c00208df:	74 2b                	je     c002090c <Semaphore::release()+0x54>
c00208e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208e5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00208e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00208ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00208f0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00208f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208f7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00208fa:	83 ec 0c             	sub    esp,0xc
c00208fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020901:	e8 4e 4b 00 00       	call   c0025454 <unblockTask(ThreadControlBlock*)>
c0020906:	83 c4 10             	add    esp,0x10
c0020909:	eb 15                	jmp    c0020920 <Semaphore::release()+0x68>
c002090b:	90                   	nop
c002090c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020910:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020913:	8d 50 ff             	lea    edx,[eax-0x1]
c0020916:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002091a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002091d:	8d 76 00             	lea    esi,[esi+0x0]
c0020920:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020925:	83 e8 01             	sub    eax,0x1
c0020928:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002092d:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020932:	85 c0                	test   eax,eax
c0020934:	75 1a                	jne    c0020950 <Semaphore::release()+0x98>
c0020936:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c002093b:	85 c0                	test   eax,eax
c002093d:	74 11                	je     c0020950 <Semaphore::release()+0x98>
c002093f:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020949:	e8 0e 48 00 00       	call   c002515c <schedule()>
c002094e:	66 90                	xchg   ax,ax
c0020950:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020955:	83 e8 01             	sub    eax,0x1
c0020958:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002095d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020962:	85 c0                	test   eax,eax
c0020964:	75 02                	jne    c0020968 <Semaphore::release()+0xb0>
c0020966:	fb                   	sti    
c0020967:	90                   	nop
c0020968:	90                   	nop
c0020969:	83 c4 1c             	add    esp,0x1c
c002096c:	c3                   	ret    

c002096d <KiSigKill(int)>:
c002096d:	83 ec 0c             	sub    esp,0xc
c0020970:	6a 00                	push   0x0
c0020972:	6a 00                	push   0x0
c0020974:	6a ff                	push   0xffffffff
c0020976:	6a 01                	push   0x1
c0020978:	e8 d5 46 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002097d:	83 c4 1c             	add    esp,0x1c
c0020980:	c3                   	ret    

c0020981 <KiDefaultSignalHandlerIgnore(int)>:
c0020981:	c3                   	ret    

c0020982 <KiDefaultSignalHandlerPause(int)>:
c0020982:	57                   	push   edi
c0020983:	b9 07 00 00 00       	mov    ecx,0x7
c0020988:	56                   	push   esi
c0020989:	be f7 27 03 c0       	mov    esi,0xc00327f7
c002098e:	83 ec 24             	sub    esp,0x24
c0020991:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020995:	fc                   	cld    
c0020996:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020998:	8d 44 24 04          	lea    eax,[esp+0x4]
c002099c:	50                   	push   eax
c002099d:	6a 00                	push   0x0
c002099f:	6a 00                	push   0x0
c00209a1:	6a 27                	push   0x27
c00209a3:	e8 aa 46 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00209a8:	83 c4 34             	add    esp,0x34
c00209ab:	5e                   	pop    esi
c00209ac:	5f                   	pop    edi
c00209ad:	c3                   	ret    

c00209ae <KiDefaultSignalHandlerResume(int)>:
c00209ae:	57                   	push   edi
c00209af:	b9 1d 00 00 00       	mov    ecx,0x1d
c00209b4:	56                   	push   esi
c00209b5:	be 13 28 03 c0       	mov    esi,0xc0032813
c00209ba:	83 ec 24             	sub    esp,0x24
c00209bd:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00209c1:	fc                   	cld    
c00209c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00209c4:	8d 44 24 03          	lea    eax,[esp+0x3]
c00209c8:	50                   	push   eax
c00209c9:	6a 00                	push   0x0
c00209cb:	6a 00                	push   0x0
c00209cd:	6a 27                	push   0x27
c00209cf:	e8 7e 46 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00209d4:	83 c4 34             	add    esp,0x34
c00209d7:	5e                   	pop    esi
c00209d8:	5f                   	pop    edi
c00209d9:	c3                   	ret    

c00209da <KeDeinitSignals(SigHandlerBlock*)>:
c00209da:	e9 37 59 ff ff       	jmp    c0016316 <free>

c00209df <KeInitSignals()>:
c00209df:	53                   	push   ebx
c00209e0:	83 ec 14             	sub    esp,0x14
c00209e3:	68 c8 00 00 00       	push   0xc8
c00209e8:	e8 19 59 ff ff       	call   c0016306 <malloc>
c00209ed:	83 c4 0c             	add    esp,0xc
c00209f0:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c00209fa:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0020a04:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0020a0b:	89 c3                	mov    ebx,eax
c0020a0d:	6a 20                	push   0x20
c0020a0f:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0020a15:	6a 00                	push   0x0
c0020a17:	50                   	push   eax
c0020a18:	e8 d3 fa fd ff       	call   c00004f0 <memset>
c0020a1d:	83 c4 0c             	add    esp,0xc
c0020a20:	6a 44                	push   0x44
c0020a22:	6a 00                	push   0x0
c0020a24:	53                   	push   ebx
c0020a25:	e8 c6 fa fd ff       	call   c00004f0 <memset>
c0020a2a:	89 d8                	mov    eax,ebx
c0020a2c:	83 c4 18             	add    esp,0x18
c0020a2f:	5b                   	pop    ebx
c0020a30:	c3                   	ret    

c0020a31 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0020a31:	53                   	push   ebx
c0020a32:	b8 01 00 00 00       	mov    eax,0x1
c0020a37:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020a3b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020a3f:	83 f9 10             	cmp    ecx,0x10
c0020a42:	7f 21                	jg     c0020a65 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0020a44:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0020a47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a4b:	89 03                	mov    DWORD PTR [ebx],eax
c0020a4d:	b8 01 00 00 00       	mov    eax,0x1
c0020a52:	d3 e0                	shl    eax,cl
c0020a54:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0020a58:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0020a5b:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0020a63:	31 c0                	xor    eax,eax
c0020a65:	5b                   	pop    ebx
c0020a66:	c3                   	ret    

c0020a67 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0020a67:	55                   	push   ebp
c0020a68:	57                   	push   edi
c0020a69:	bf 08 00 00 00       	mov    edi,0x8
c0020a6e:	56                   	push   esi
c0020a6f:	53                   	push   ebx
c0020a70:	83 ec 18             	sub    esp,0x18
c0020a73:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020a77:	68 30 28 03 c0       	push   0xc0032830
c0020a7c:	e8 14 87 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0020a81:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0020a88:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0020a8e:	83 c4 10             	add    esp,0x10
c0020a91:	31 c9                	xor    ecx,ecx
c0020a93:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020a97:	99                   	cdq    
c0020a98:	f7 ff                	idiv   edi
c0020a9a:	8d 42 24             	lea    eax,[edx+0x24]
c0020a9d:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0020aa1:	85 f6                	test   esi,esi
c0020aa3:	75 1a                	jne    c0020abf <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0020aa5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020aa9:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0020aad:	50                   	push   eax
c0020aae:	50                   	push   eax
c0020aaf:	52                   	push   edx
c0020ab0:	68 41 28 03 c0       	push   0xc0032841
c0020ab5:	e8 db 86 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0020aba:	83 c4 10             	add    esp,0x10
c0020abd:	eb 1b                	jmp    c0020ada <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0020abf:	41                   	inc    ecx
c0020ac0:	83 f9 08             	cmp    ecx,0x8
c0020ac3:	75 ce                	jne    c0020a93 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0020ac5:	83 ec 0c             	sub    esp,0xc
c0020ac8:	be 01 00 00 00       	mov    esi,0x1
c0020acd:	68 62 28 03 c0       	push   0xc0032862
c0020ad2:	e8 be 86 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0020ad7:	83 c4 10             	add    esp,0x10
c0020ada:	83 c4 0c             	add    esp,0xc
c0020add:	89 f0                	mov    eax,esi
c0020adf:	5b                   	pop    ebx
c0020ae0:	5e                   	pop    esi
c0020ae1:	5f                   	pop    edi
c0020ae2:	5d                   	pop    ebp
c0020ae3:	c3                   	ret    

c0020ae4 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0020ae4:	55                   	push   ebp
c0020ae5:	57                   	push   edi
c0020ae6:	56                   	push   esi
c0020ae7:	53                   	push   ebx
c0020ae8:	51                   	push   ecx
c0020ae9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020aed:	85 db                	test   ebx,ebx
c0020aef:	0f 84 bc 00 00 00    	je     c0020bb1 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020af5:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0020afc:	0f 84 af 00 00 00    	je     c0020bb1 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020b02:	31 c9                	xor    ecx,ecx
c0020b04:	bf 08 00 00 00       	mov    edi,0x8
c0020b09:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0020b0f:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0020b12:	99                   	cdq    
c0020b13:	f7 ff                	idiv   edi
c0020b15:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0020b1c:	85 ed                	test   ebp,ebp
c0020b1e:	0f 84 9e 00 00 00    	je     c0020bc2 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0020b24:	89 e9                	mov    ecx,ebp
c0020b26:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0020b2c:	bf 01 00 00 00       	mov    edi,0x1
c0020b31:	89 04 24             	mov    DWORD PTR [esp],eax
c0020b34:	d3 e7                	shl    edi,cl
c0020b36:	31 c9                	xor    ecx,ecx
c0020b38:	b8 01 00 00 00       	mov    eax,0x1
c0020b3d:	d3 e0                	shl    eax,cl
c0020b3f:	85 04 24             	test   DWORD PTR [esp],eax
c0020b42:	74 06                	je     c0020b4a <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0020b44:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0020b48:	75 67                	jne    c0020bb1 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020b4a:	41                   	inc    ecx
c0020b4b:	83 f9 11             	cmp    ecx,0x11
c0020b4e:	75 e8                	jne    c0020b38 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0020b50:	46                   	inc    esi
c0020b51:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020b54:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0020b5a:	09 f8                	or     eax,edi
c0020b5c:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0020b67:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0020b6d:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0020b74:	31 c0                	xor    eax,eax
c0020b76:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0020b7e:	74 09                	je     c0020b89 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0020b80:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0020b87:	eb 06                	jmp    c0020b8f <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0020b89:	40                   	inc    eax
c0020b8a:	83 f8 08             	cmp    eax,0x8
c0020b8d:	75 e7                	jne    c0020b76 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0020b8f:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0020b92:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020b96:	83 fd 09             	cmp    ebp,0x9
c0020b99:	89 2a                	mov    DWORD PTR [edx],ebp
c0020b9b:	75 07                	jne    c0020ba4 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0020b9d:	b8 6d 09 02 c0       	mov    eax,0xc002096d
c0020ba2:	eb 31                	jmp    c0020bd5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020ba4:	83 f8 01             	cmp    eax,0x1
c0020ba7:	75 0c                	jne    c0020bb5 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0020ba9:	f7 d7                	not    edi
c0020bab:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0020bb1:	31 c0                	xor    eax,eax
c0020bb3:	eb 20                	jmp    c0020bd5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020bb5:	85 c0                	test   eax,eax
c0020bb7:	75 1c                	jne    c0020bd5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020bb9:	8b 04 ad a0 40 03 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffcbf60]
c0020bc0:	eb 13                	jmp    c0020bd5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020bc2:	46                   	inc    esi
c0020bc3:	41                   	inc    ecx
c0020bc4:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0020bca:	83 f9 08             	cmp    ecx,0x8
c0020bcd:	0f 85 36 ff ff ff    	jne    c0020b09 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0020bd3:	eb dc                	jmp    c0020bb1 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020bd5:	5a                   	pop    edx
c0020bd6:	5b                   	pop    ebx
c0020bd7:	5e                   	pop    esi
c0020bd8:	5f                   	pop    edi
c0020bd9:	5d                   	pop    ebp
c0020bda:	c3                   	ret    

c0020bdb <KiCheckSignalZ>:
c0020bdb:	83 ec 10             	sub    esp,0x10
c0020bde:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020be2:	50                   	push   eax
c0020be3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020be8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020beb:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0020bf1:	e8 ee fe ff ff       	call   c0020ae4 <KeCheckSignal(SigHandlerBlock*, int*)>
c0020bf6:	5a                   	pop    edx
c0020bf7:	31 d2                	xor    edx,edx
c0020bf9:	59                   	pop    ecx
c0020bfa:	85 c0                	test   eax,eax
c0020bfc:	74 19                	je     c0020c17 <KiCheckSignalZ+0x3c>
c0020bfe:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0020c04:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020c07:	89 02                	mov    DWORD PTR [edx],eax
c0020c09:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0020c10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c14:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0020c17:	89 d0                	mov    eax,edx
c0020c19:	83 c4 10             	add    esp,0x10
c0020c1c:	c3                   	ret    

c0020c1d <KeCompleteSignal(SigHandlerBlock*, int)>:
c0020c1d:	56                   	push   esi
c0020c1e:	53                   	push   ebx
c0020c1f:	bb 01 00 00 00       	mov    ebx,0x1
c0020c24:	52                   	push   edx
c0020c25:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020c29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020c2d:	d3 e3                	shl    ebx,cl
c0020c2f:	83 f9 10             	cmp    ecx,0x10
c0020c32:	7f 08                	jg     c0020c3c <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0020c34:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0020c3a:	75 10                	jne    c0020c4c <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0020c3c:	83 ec 0c             	sub    esp,0xc
c0020c3f:	68 73 28 03 c0       	push   0xc0032873
c0020c44:	e8 65 f5 ff ff       	call   c00201ae <KePanic(char const*)>
c0020c49:	83 c4 10             	add    esp,0x10
c0020c4c:	f7 d3                	not    ebx
c0020c4e:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0020c54:	58                   	pop    eax
c0020c55:	5b                   	pop    ebx
c0020c56:	5e                   	pop    esi
c0020c57:	c3                   	ret    

c0020c58 <KiFinishSignalZ>:
c0020c58:	53                   	push   ebx
c0020c59:	83 ec 10             	sub    esp,0x10
c0020c5c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020c60:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0020c63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020c68:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020c6b:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0020c71:	e8 a7 ff ff ff       	call   c0020c1d <KeCompleteSignal(SigHandlerBlock*, int)>
c0020c76:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020c7c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020c83:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0020c8a:	83 c4 18             	add    esp,0x18
c0020c8d:	5b                   	pop    ebx
c0020c8e:	c3                   	ret    

c0020c8f <SysSeekDir(regs*)>:
c0020c8f:	31 c0                	xor    eax,eax
c0020c91:	31 d2                	xor    edx,edx
c0020c93:	c3                   	ret    

c0020c94 <SysTellDir(regs*)>:
c0020c94:	31 c0                	xor    eax,eax
c0020c96:	31 d2                	xor    edx,edx
c0020c98:	c3                   	ret    

c0020c99 <SysVerify(regs*)>:
c0020c99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020c9d:	31 d2                	xor    edx,edx
c0020c9f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020ca2:	c3                   	ret    

c0020ca3 <SysGetArgc(regs*)>:
c0020ca3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020ca8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020cab:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0020cb1:	89 c2                	mov    edx,eax
c0020cb3:	c1 fa 1f             	sar    edx,0x1f
c0020cb6:	c3                   	ret    

c0020cb7 <SysTTYName(regs*)>:
c0020cb7:	b8 01 00 00 00       	mov    eax,0x1
c0020cbc:	31 d2                	xor    edx,edx
c0020cbe:	c3                   	ret    

c0020cbf <SysFormatDisk(regs*)>:
c0020cbf:	56                   	push   esi
c0020cc0:	53                   	push   ebx
c0020cc1:	83 ec 04             	sub    esp,0x4
c0020cc4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020cc8:	8b 1d 04 cf 03 c0    	mov    ebx,DWORD PTR ds:0xc003cf04
c0020cce:	eb 28                	jmp    c0020cf8 <SysFormatDisk(regs*)+0x39>
c0020cd0:	83 ec 0c             	sub    esp,0xc
c0020cd3:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0020cd6:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0020cd9:	8b 13                	mov    edx,DWORD PTR [ebx]
c0020cdb:	51                   	push   ecx
c0020cdc:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0020cdf:	51                   	push   ecx
c0020ce0:	50                   	push   eax
c0020ce1:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0020ce8:	50                   	push   eax
c0020ce9:	53                   	push   ebx
c0020cea:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0020ced:	83 c4 20             	add    esp,0x20
c0020cf0:	83 f8 08             	cmp    eax,0x8
c0020cf3:	75 14                	jne    c0020d09 <SysFormatDisk(regs*)+0x4a>
c0020cf5:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0020cf8:	85 db                	test   ebx,ebx
c0020cfa:	75 d4                	jne    c0020cd0 <SysFormatDisk(regs*)+0x11>
c0020cfc:	83 c4 04             	add    esp,0x4
c0020cff:	b8 03 00 00 00       	mov    eax,0x3
c0020d04:	31 d2                	xor    edx,edx
c0020d06:	5b                   	pop    ebx
c0020d07:	5e                   	pop    esi
c0020d08:	c3                   	ret    
c0020d09:	85 c0                	test   eax,eax
c0020d0b:	74 1f                	je     c0020d2c <SysFormatDisk(regs*)+0x6d>
c0020d0d:	83 f8 09             	cmp    eax,0x9
c0020d10:	74 0d                	je     c0020d1f <SysFormatDisk(regs*)+0x60>
c0020d12:	83 c4 04             	add    esp,0x4
c0020d15:	b8 02 00 00 00       	mov    eax,0x2
c0020d1a:	31 d2                	xor    edx,edx
c0020d1c:	5b                   	pop    ebx
c0020d1d:	5e                   	pop    esi
c0020d1e:	c3                   	ret    
c0020d1f:	83 c4 04             	add    esp,0x4
c0020d22:	b8 01 00 00 00       	mov    eax,0x1
c0020d27:	31 d2                	xor    edx,edx
c0020d29:	5b                   	pop    ebx
c0020d2a:	5e                   	pop    esi
c0020d2b:	c3                   	ret    
c0020d2c:	83 c4 04             	add    esp,0x4
c0020d2f:	31 c0                	xor    eax,eax
c0020d31:	31 d2                	xor    edx,edx
c0020d33:	5b                   	pop    ebx
c0020d34:	5e                   	pop    esi
c0020d35:	c3                   	ret    

c0020d36 <SysSetDiskVolumeLabel(regs*)>:
c0020d36:	56                   	push   esi
c0020d37:	53                   	push   ebx
c0020d38:	83 ec 04             	sub    esp,0x4
c0020d3b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020d3f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0020d42:	83 f8 19             	cmp    eax,0x19
c0020d45:	77 33                	ja     c0020d7a <SysSetDiskVolumeLabel(regs*)+0x44>
c0020d47:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0020d4e:	85 c9                	test   ecx,ecx
c0020d50:	74 28                	je     c0020d7a <SysSetDiskVolumeLabel(regs*)+0x44>
c0020d52:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0020d55:	85 db                	test   ebx,ebx
c0020d57:	74 21                	je     c0020d7a <SysSetDiskVolumeLabel(regs*)+0x44>
c0020d59:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0020d5f:	85 d2                	test   edx,edx
c0020d61:	74 17                	je     c0020d7a <SysSetDiskVolumeLabel(regs*)+0x44>
c0020d63:	8b 32                	mov    esi,DWORD PTR [edx]
c0020d65:	53                   	push   ebx
c0020d66:	50                   	push   eax
c0020d67:	51                   	push   ecx
c0020d68:	52                   	push   edx
c0020d69:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0020d6c:	83 c4 10             	add    esp,0x10
c0020d6f:	89 c2                	mov    edx,eax
c0020d71:	83 c4 04             	add    esp,0x4
c0020d74:	c1 fa 1f             	sar    edx,0x1f
c0020d77:	5b                   	pop    ebx
c0020d78:	5e                   	pop    esi
c0020d79:	c3                   	ret    
c0020d7a:	83 c4 04             	add    esp,0x4
c0020d7d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0020d82:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020d87:	5b                   	pop    ebx
c0020d88:	5e                   	pop    esi
c0020d89:	c3                   	ret    

c0020d8a <SysGetDiskVolumeLabel(regs*)>:
c0020d8a:	57                   	push   edi
c0020d8b:	56                   	push   esi
c0020d8c:	53                   	push   ebx
c0020d8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d91:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0020d94:	83 fa 19             	cmp    edx,0x19
c0020d97:	77 3c                	ja     c0020dd5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020d99:	8b 0c 95 80 f3 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffc0c80]
c0020da0:	85 c9                	test   ecx,ecx
c0020da2:	74 31                	je     c0020dd5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020da4:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0020da7:	85 db                	test   ebx,ebx
c0020da9:	74 2a                	je     c0020dd5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020dab:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0020dae:	85 f6                	test   esi,esi
c0020db0:	74 23                	je     c0020dd5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020db2:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0020db8:	85 c0                	test   eax,eax
c0020dba:	74 19                	je     c0020dd5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020dbc:	83 ec 0c             	sub    esp,0xc
c0020dbf:	8b 38                	mov    edi,DWORD PTR [eax]
c0020dc1:	56                   	push   esi
c0020dc2:	53                   	push   ebx
c0020dc3:	52                   	push   edx
c0020dc4:	51                   	push   ecx
c0020dc5:	50                   	push   eax
c0020dc6:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0020dc9:	83 c4 20             	add    esp,0x20
c0020dcc:	89 c2                	mov    edx,eax
c0020dce:	5b                   	pop    ebx
c0020dcf:	c1 fa 1f             	sar    edx,0x1f
c0020dd2:	5e                   	pop    esi
c0020dd3:	5f                   	pop    edi
c0020dd4:	c3                   	ret    
c0020dd5:	5b                   	pop    ebx
c0020dd6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0020ddb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020de0:	5e                   	pop    esi
c0020de1:	5f                   	pop    edi
c0020de2:	c3                   	ret    

c0020de3 <SysShutdown(regs*)>:
c0020de3:	83 ec 0c             	sub    esp,0xc
c0020de6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020dea:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020ded:	85 c0                	test   eax,eax
c0020def:	74 18                	je     c0020e09 <SysShutdown(regs*)+0x26>
c0020df1:	83 f8 01             	cmp    eax,0x1
c0020df4:	74 38                	je     c0020e2e <SysShutdown(regs*)+0x4b>
c0020df6:	83 f8 02             	cmp    eax,0x2
c0020df9:	74 24                	je     c0020e1f <SysShutdown(regs*)+0x3c>
c0020dfb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020e00:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020e05:	83 c4 0c             	add    esp,0xc
c0020e08:	c3                   	ret    
c0020e09:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0020e0e:	8b 10                	mov    edx,DWORD PTR [eax]
c0020e10:	6a 00                	push   0x0
c0020e12:	6a 00                	push   0x0
c0020e14:	6a 00                	push   0x0
c0020e16:	50                   	push   eax
c0020e17:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0020e1a:	83 c4 10             	add    esp,0x10
c0020e1d:	eb dc                	jmp    c0020dfb <SysShutdown(regs*)+0x18>
c0020e1f:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0020e24:	8b 10                	mov    edx,DWORD PTR [eax]
c0020e26:	6a 00                	push   0x0
c0020e28:	6a 00                	push   0x0
c0020e2a:	6a 01                	push   0x1
c0020e2c:	eb e8                	jmp    c0020e16 <SysShutdown(regs*)+0x33>
c0020e2e:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c0020e33:	85 c0                	test   eax,eax
c0020e35:	74 02                	je     c0020e39 <SysShutdown(regs*)+0x56>
c0020e37:	ff d0                	call   eax
c0020e39:	31 c0                	xor    eax,eax
c0020e3b:	31 d2                	xor    edx,edx
c0020e3d:	83 c4 0c             	add    esp,0xc
c0020e40:	c3                   	ret    

c0020e41 <SysRealpath(regs*)>:
c0020e41:	83 ec 0c             	sub    esp,0xc
c0020e44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e48:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0020e4b:	85 d2                	test   edx,edx
c0020e4d:	74 07                	je     c0020e56 <SysRealpath(regs*)+0x15>
c0020e4f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0020e52:	85 c0                	test   eax,eax
c0020e54:	75 0b                	jne    c0020e61 <SysRealpath(regs*)+0x20>
c0020e56:	b8 01 00 00 00       	mov    eax,0x1
c0020e5b:	31 d2                	xor    edx,edx
c0020e5d:	83 c4 0c             	add    esp,0xc
c0020e60:	c3                   	ret    
c0020e61:	6a 00                	push   0x0
c0020e63:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0020e69:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0020e6c:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0020e72:	51                   	push   ecx
c0020e73:	52                   	push   edx
c0020e74:	50                   	push   eax
c0020e75:	e8 2a 92 ff ff       	call   c001a0a4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0020e7a:	83 c4 10             	add    esp,0x10
c0020e7d:	31 c0                	xor    eax,eax
c0020e7f:	31 d2                	xor    edx,edx
c0020e81:	83 c4 0c             	add    esp,0xc
c0020e84:	c3                   	ret    

c0020e85 <SysReadDir(regs*)>:
c0020e85:	53                   	push   ebx
c0020e86:	83 ec 18             	sub    esp,0x18
c0020e89:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020e8d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0020e90:	83 f8 02             	cmp    eax,0x2
c0020e93:	76 61                	jbe    c0020ef6 <SysReadDir(regs*)+0x71>
c0020e95:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0020e9c:	77 49                	ja     c0020ee7 <SysReadDir(regs*)+0x62>
c0020e9e:	83 ec 0c             	sub    esp,0xc
c0020ea1:	50                   	push   eax
c0020ea2:	e8 5c 6e ff ff       	call   c0017d03 <KeGetFileFromDescriptor(int)>
c0020ea7:	83 c4 10             	add    esp,0x10
c0020eaa:	85 c0                	test   eax,eax
c0020eac:	74 39                	je     c0020ee7 <SysReadDir(regs*)+0x62>
c0020eae:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020eb6:	83 ec 0c             	sub    esp,0xc
c0020eb9:	8b 10                	mov    edx,DWORD PTR [eax]
c0020ebb:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0020ebf:	51                   	push   ecx
c0020ec0:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0020ec3:	51                   	push   ecx
c0020ec4:	6a 00                	push   0x0
c0020ec6:	68 10 01 00 00       	push   0x110
c0020ecb:	50                   	push   eax
c0020ecc:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0020ecf:	83 c4 20             	add    esp,0x20
c0020ed2:	85 c0                	test   eax,eax
c0020ed4:	74 29                	je     c0020eff <SysReadDir(regs*)+0x7a>
c0020ed6:	83 f8 07             	cmp    eax,0x7
c0020ed9:	74 1b                	je     c0020ef6 <SysReadDir(regs*)+0x71>
c0020edb:	b8 02 00 00 00       	mov    eax,0x2
c0020ee0:	31 d2                	xor    edx,edx
c0020ee2:	83 c4 18             	add    esp,0x18
c0020ee5:	5b                   	pop    ebx
c0020ee6:	c3                   	ret    
c0020ee7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020eec:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020ef1:	83 c4 18             	add    esp,0x18
c0020ef4:	5b                   	pop    ebx
c0020ef5:	c3                   	ret    
c0020ef6:	b8 01 00 00 00       	mov    eax,0x1
c0020efb:	31 d2                	xor    edx,edx
c0020efd:	eb e3                	jmp    c0020ee2 <SysReadDir(regs*)+0x5d>
c0020eff:	31 c0                	xor    eax,eax
c0020f01:	31 d2                	xor    edx,edx
c0020f03:	eb dd                	jmp    c0020ee2 <SysReadDir(regs*)+0x5d>

c0020f05 <SysIsATTY(regs*)>:
c0020f05:	83 ec 0c             	sub    esp,0xc
c0020f08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f0c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020f0f:	83 f8 02             	cmp    eax,0x2
c0020f12:	76 07                	jbe    c0020f1b <SysIsATTY(regs*)+0x16>
c0020f14:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0020f19:	75 26                	jne    c0020f41 <SysIsATTY(regs*)+0x3c>
c0020f1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020f20:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020f23:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0020f29:	85 c0                	test   eax,eax
c0020f2b:	74 24                	je     c0020f51 <SysIsATTY(regs*)+0x4c>
c0020f2d:	83 ec 0c             	sub    esp,0xc
c0020f30:	8b 10                	mov    edx,DWORD PTR [eax]
c0020f32:	50                   	push   eax
c0020f33:	ff 12                	call   DWORD PTR [edx]
c0020f35:	31 d2                	xor    edx,edx
c0020f37:	0f b6 c0             	movzx  eax,al
c0020f3a:	83 c4 10             	add    esp,0x10
c0020f3d:	83 c4 0c             	add    esp,0xc
c0020f40:	c3                   	ret    
c0020f41:	83 ec 0c             	sub    esp,0xc
c0020f44:	50                   	push   eax
c0020f45:	e8 b9 6d ff ff       	call   c0017d03 <KeGetFileFromDescriptor(int)>
c0020f4a:	83 c4 10             	add    esp,0x10
c0020f4d:	85 c0                	test   eax,eax
c0020f4f:	75 dc                	jne    c0020f2d <SysIsATTY(regs*)+0x28>
c0020f51:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020f56:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020f5b:	83 c4 0c             	add    esp,0xc
c0020f5e:	c3                   	ret    

c0020f5f <SysSeek(regs*)>:
c0020f5f:	53                   	push   ebx
c0020f60:	83 ec 08             	sub    esp,0x8
c0020f63:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020f67:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0020f6a:	8d 50 fd             	lea    edx,[eax-0x3]
c0020f6d:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0020f73:	77 32                	ja     c0020fa7 <SysSeek(regs*)+0x48>
c0020f75:	83 ec 0c             	sub    esp,0xc
c0020f78:	50                   	push   eax
c0020f79:	e8 85 6d ff ff       	call   c0017d03 <KeGetFileFromDescriptor(int)>
c0020f7e:	83 c4 0c             	add    esp,0xc
c0020f81:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0020f84:	31 db                	xor    ebx,ebx
c0020f86:	53                   	push   ebx
c0020f87:	51                   	push   ecx
c0020f88:	50                   	push   eax
c0020f89:	e8 ea 94 ff ff       	call   c001a478 <File::seek(unsigned long long)>
c0020f8e:	83 c4 10             	add    esp,0x10
c0020f91:	85 c0                	test   eax,eax
c0020f93:	0f 95 c0             	setne  al
c0020f96:	31 d2                	xor    edx,edx
c0020f98:	0f b6 c0             	movzx  eax,al
c0020f9b:	f7 d8                	neg    eax
c0020f9d:	83 d2 00             	adc    edx,0x0
c0020fa0:	83 c4 08             	add    esp,0x8
c0020fa3:	f7 da                	neg    edx
c0020fa5:	5b                   	pop    ebx
c0020fa6:	c3                   	ret    
c0020fa7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020fac:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020fb1:	83 c4 08             	add    esp,0x8
c0020fb4:	5b                   	pop    ebx
c0020fb5:	c3                   	ret    

c0020fb6 <SysTell(regs*)>:
c0020fb6:	53                   	push   ebx
c0020fb7:	83 ec 08             	sub    esp,0x8
c0020fba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020fbe:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0020fc1:	83 f8 02             	cmp    eax,0x2
c0020fc4:	76 4e                	jbe    c0021014 <SysTell(regs*)+0x5e>
c0020fc6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0020fcb:	76 19                	jbe    c0020fe6 <SysTell(regs*)+0x30>
c0020fcd:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0020fd0:	31 d2                	xor    edx,edx
c0020fd2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020fd8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020fdf:	31 c0                	xor    eax,eax
c0020fe1:	83 c4 08             	add    esp,0x8
c0020fe4:	5b                   	pop    ebx
c0020fe5:	c3                   	ret    
c0020fe6:	83 ec 0c             	sub    esp,0xc
c0020fe9:	50                   	push   eax
c0020fea:	e8 14 6d ff ff       	call   c0017d03 <KeGetFileFromDescriptor(int)>
c0020fef:	5a                   	pop    edx
c0020ff0:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0020ff3:	59                   	pop    ecx
c0020ff4:	53                   	push   ebx
c0020ff5:	50                   	push   eax
c0020ff6:	e8 29 95 ff ff       	call   c001a524 <File::tell(unsigned long long*)>
c0020ffb:	83 c4 10             	add    esp,0x10
c0020ffe:	85 c0                	test   eax,eax
c0021000:	0f 95 c0             	setne  al
c0021003:	31 d2                	xor    edx,edx
c0021005:	0f b6 c0             	movzx  eax,al
c0021008:	f7 d8                	neg    eax
c002100a:	83 d2 00             	adc    edx,0x0
c002100d:	83 c4 08             	add    esp,0x8
c0021010:	f7 da                	neg    edx
c0021012:	5b                   	pop    ebx
c0021013:	c3                   	ret    
c0021014:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021019:	ba ff ff ff ff       	mov    edx,0xffffffff
c002101e:	83 c4 08             	add    esp,0x8
c0021021:	5b                   	pop    ebx
c0021022:	c3                   	ret    

c0021023 <SysSize(regs*)>:
c0021023:	53                   	push   ebx
c0021024:	83 ec 18             	sub    esp,0x18
c0021027:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002102b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002102e:	83 f8 02             	cmp    eax,0x2
c0021031:	76 54                	jbe    c0021087 <SysSize(regs*)+0x64>
c0021033:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021038:	76 19                	jbe    c0021053 <SysSize(regs*)+0x30>
c002103a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c002103d:	31 d2                	xor    edx,edx
c002103f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021045:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002104c:	31 c0                	xor    eax,eax
c002104e:	83 c4 18             	add    esp,0x18
c0021051:	5b                   	pop    ebx
c0021052:	c3                   	ret    
c0021053:	83 ec 0c             	sub    esp,0xc
c0021056:	50                   	push   eax
c0021057:	e8 a7 6c ff ff       	call   c0017d03 <KeGetFileFromDescriptor(int)>
c002105c:	83 c4 0c             	add    esp,0xc
c002105f:	8d 54 24 13          	lea    edx,[esp+0x13]
c0021063:	52                   	push   edx
c0021064:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021067:	52                   	push   edx
c0021068:	50                   	push   eax
c0021069:	e8 4e 96 ff ff       	call   c001a6bc <File::stat(unsigned long long*, bool*)>
c002106e:	83 c4 10             	add    esp,0x10
c0021071:	85 c0                	test   eax,eax
c0021073:	0f 95 c0             	setne  al
c0021076:	31 d2                	xor    edx,edx
c0021078:	0f b6 c0             	movzx  eax,al
c002107b:	f7 d8                	neg    eax
c002107d:	83 d2 00             	adc    edx,0x0
c0021080:	83 c4 18             	add    esp,0x18
c0021083:	f7 da                	neg    edx
c0021085:	5b                   	pop    ebx
c0021086:	c3                   	ret    
c0021087:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002108c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021091:	83 c4 18             	add    esp,0x18
c0021094:	5b                   	pop    ebx
c0021095:	c3                   	ret    

c0021096 <SysSizeFromFilename(regs*)>:
c0021096:	55                   	push   ebp
c0021097:	57                   	push   edi
c0021098:	56                   	push   esi
c0021099:	53                   	push   ebx
c002109a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00210a0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00210a7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00210aa:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00210ad:	85 f6                	test   esi,esi
c00210af:	74 34                	je     c00210e5 <SysSizeFromFilename(regs*)+0x4f>
c00210b1:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00210b7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00210ba:	83 f8 02             	cmp    eax,0x2
c00210bd:	76 2d                	jbe    c00210ec <SysSizeFromFilename(regs*)+0x56>
c00210bf:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00210c4:	76 3b                	jbe    c0021101 <SysSizeFromFilename(regs*)+0x6b>
c00210c6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00210c9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00210cf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00210d6:	81 c4 5c 02 00 00    	add    esp,0x25c
c00210dc:	31 c0                	xor    eax,eax
c00210de:	5b                   	pop    ebx
c00210df:	31 d2                	xor    edx,edx
c00210e1:	5e                   	pop    esi
c00210e2:	5f                   	pop    edi
c00210e3:	5d                   	pop    ebp
c00210e4:	c3                   	ret    
c00210e5:	89 f8                	mov    eax,edi
c00210e7:	83 f8 02             	cmp    eax,0x2
c00210ea:	77 d3                	ja     c00210bf <SysSizeFromFilename(regs*)+0x29>
c00210ec:	81 c4 5c 02 00 00    	add    esp,0x25c
c00210f2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00210f7:	5b                   	pop    ebx
c00210f8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00210fd:	5e                   	pop    esi
c00210fe:	5f                   	pop    edi
c00210ff:	5d                   	pop    ebp
c0021100:	c3                   	ret    
c0021101:	83 ec 0c             	sub    esp,0xc
c0021104:	68 14 01 00 00       	push   0x114
c0021109:	e8 f8 51 ff ff       	call   c0016306 <malloc>
c002110e:	6a 01                	push   0x1
c0021110:	89 c5                	mov    ebp,eax
c0021112:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021117:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c002111a:	51                   	push   ecx
c002111b:	57                   	push   edi
c002111c:	55                   	push   ebp
c002111d:	e8 9c 91 ff ff       	call   c001a2be <File::File(char const*, Process*, bool)>
c0021122:	83 c4 1c             	add    esp,0x1c
c0021125:	8d 44 24 23          	lea    eax,[esp+0x23]
c0021129:	50                   	push   eax
c002112a:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c002112d:	53                   	push   ebx
c002112e:	55                   	push   ebp
c002112f:	e8 88 95 ff ff       	call   c001a6bc <File::stat(unsigned long long*, bool*)>
c0021134:	83 c4 10             	add    esp,0x10
c0021137:	85 ed                	test   ebp,ebp
c0021139:	74 15                	je     c0021150 <SysSizeFromFilename(regs*)+0xba>
c002113b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002113f:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0021142:	83 ec 0c             	sub    esp,0xc
c0021145:	55                   	push   ebp
c0021146:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0021149:	83 c4 10             	add    esp,0x10
c002114c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021150:	85 c0                	test   eax,eax
c0021152:	75 98                	jne    c00210ec <SysSizeFromFilename(regs*)+0x56>
c0021154:	6a 00                	push   0x0
c0021156:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002115b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002115e:	05 0c 01 00 00       	add    eax,0x10c
c0021163:	50                   	push   eax
c0021164:	57                   	push   edi
c0021165:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c002116c:	53                   	push   ebx
c002116d:	e8 32 8f ff ff       	call   c001a0a4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0021172:	58                   	pop    eax
c0021173:	5a                   	pop    edx
c0021174:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021178:	50                   	push   eax
c0021179:	53                   	push   ebx
c002117a:	e8 8d 89 ff ff       	call   c0019b0c <KeDereferenceSymlink(char const*, char*)>
c002117f:	83 c4 10             	add    esp,0x10
c0021182:	83 f8 01             	cmp    eax,0x1
c0021185:	74 1a                	je     c00211a1 <SysSizeFromFilename(regs*)+0x10b>
c0021187:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c002118c:	74 26                	je     c00211b4 <SysSizeFromFilename(regs*)+0x11e>
c002118e:	85 f6                	test   esi,esi
c0021190:	0f 84 40 ff ff ff    	je     c00210d6 <SysSizeFromFilename(regs*)+0x40>
c0021196:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c002119c:	e9 35 ff ff ff       	jmp    c00210d6 <SysSizeFromFilename(regs*)+0x40>
c00211a1:	85 f6                	test   esi,esi
c00211a3:	0f 84 2d ff ff ff    	je     c00210d6 <SysSizeFromFilename(regs*)+0x40>
c00211a9:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00211af:	e9 22 ff ff ff       	jmp    c00210d6 <SysSizeFromFilename(regs*)+0x40>
c00211b4:	85 f6                	test   esi,esi
c00211b6:	0f 84 1a ff ff ff    	je     c00210d6 <SysSizeFromFilename(regs*)+0x40>
c00211bc:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00211c2:	e9 0f ff ff ff       	jmp    c00210d6 <SysSizeFromFilename(regs*)+0x40>

c00211c7 <SysSizeFromFilenameNoSymlink(regs*)>:
c00211c7:	55                   	push   ebp
c00211c8:	57                   	push   edi
c00211c9:	56                   	push   esi
c00211ca:	53                   	push   ebx
c00211cb:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00211d1:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00211d8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00211db:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00211de:	85 f6                	test   esi,esi
c00211e0:	74 34                	je     c0021216 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c00211e2:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00211e8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00211eb:	83 f8 02             	cmp    eax,0x2
c00211ee:	76 2d                	jbe    c002121d <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00211f0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00211f5:	76 3b                	jbe    c0021232 <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c00211f7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00211fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021200:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021207:	81 c4 5c 02 00 00    	add    esp,0x25c
c002120d:	31 c0                	xor    eax,eax
c002120f:	5b                   	pop    ebx
c0021210:	31 d2                	xor    edx,edx
c0021212:	5e                   	pop    esi
c0021213:	5f                   	pop    edi
c0021214:	5d                   	pop    ebp
c0021215:	c3                   	ret    
c0021216:	89 f8                	mov    eax,edi
c0021218:	83 f8 02             	cmp    eax,0x2
c002121b:	77 d3                	ja     c00211f0 <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c002121d:	81 c4 5c 02 00 00    	add    esp,0x25c
c0021223:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021228:	5b                   	pop    ebx
c0021229:	ba ff ff ff ff       	mov    edx,0xffffffff
c002122e:	5e                   	pop    esi
c002122f:	5f                   	pop    edi
c0021230:	5d                   	pop    ebp
c0021231:	c3                   	ret    
c0021232:	83 ec 0c             	sub    esp,0xc
c0021235:	68 14 01 00 00       	push   0x114
c002123a:	e8 c7 50 ff ff       	call   c0016306 <malloc>
c002123f:	6a 00                	push   0x0
c0021241:	89 c5                	mov    ebp,eax
c0021243:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021248:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c002124b:	51                   	push   ecx
c002124c:	57                   	push   edi
c002124d:	55                   	push   ebp
c002124e:	e8 6b 90 ff ff       	call   c001a2be <File::File(char const*, Process*, bool)>
c0021253:	83 c4 1c             	add    esp,0x1c
c0021256:	8d 44 24 23          	lea    eax,[esp+0x23]
c002125a:	50                   	push   eax
c002125b:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c002125e:	53                   	push   ebx
c002125f:	55                   	push   ebp
c0021260:	e8 57 94 ff ff       	call   c001a6bc <File::stat(unsigned long long*, bool*)>
c0021265:	83 c4 10             	add    esp,0x10
c0021268:	85 ed                	test   ebp,ebp
c002126a:	74 15                	je     c0021281 <SysSizeFromFilenameNoSymlink(regs*)+0xba>
c002126c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021270:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0021273:	83 ec 0c             	sub    esp,0xc
c0021276:	55                   	push   ebp
c0021277:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002127a:	83 c4 10             	add    esp,0x10
c002127d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021281:	85 c0                	test   eax,eax
c0021283:	75 98                	jne    c002121d <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0021285:	6a 00                	push   0x0
c0021287:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002128c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002128f:	05 0c 01 00 00       	add    eax,0x10c
c0021294:	50                   	push   eax
c0021295:	57                   	push   edi
c0021296:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c002129d:	53                   	push   ebx
c002129e:	e8 01 8e ff ff       	call   c001a0a4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00212a3:	58                   	pop    eax
c00212a4:	5a                   	pop    edx
c00212a5:	8d 44 24 28          	lea    eax,[esp+0x28]
c00212a9:	50                   	push   eax
c00212aa:	53                   	push   ebx
c00212ab:	e8 5c 88 ff ff       	call   c0019b0c <KeDereferenceSymlink(char const*, char*)>
c00212b0:	83 c4 10             	add    esp,0x10
c00212b3:	83 f8 01             	cmp    eax,0x1
c00212b6:	74 1a                	je     c00212d2 <SysSizeFromFilenameNoSymlink(regs*)+0x10b>
c00212b8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00212bd:	74 26                	je     c00212e5 <SysSizeFromFilenameNoSymlink(regs*)+0x11e>
c00212bf:	85 f6                	test   esi,esi
c00212c1:	0f 84 40 ff ff ff    	je     c0021207 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00212c7:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00212cd:	e9 35 ff ff ff       	jmp    c0021207 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00212d2:	85 f6                	test   esi,esi
c00212d4:	0f 84 2d ff ff ff    	je     c0021207 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00212da:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00212e0:	e9 22 ff ff ff       	jmp    c0021207 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00212e5:	85 f6                	test   esi,esi
c00212e7:	0f 84 1a ff ff ff    	je     c0021207 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00212ed:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00212f3:	e9 0f ff ff ff       	jmp    c0021207 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c00212f8 <SysClose(regs*)>:
c00212f8:	53                   	push   ebx
c00212f9:	83 ec 08             	sub    esp,0x8
c00212fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021300:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021303:	83 f8 02             	cmp    eax,0x2
c0021306:	76 41                	jbe    c0021349 <SysClose(regs*)+0x51>
c0021308:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c002130e:	83 fa 01             	cmp    edx,0x1
c0021311:	76 2d                	jbe    c0021340 <SysClose(regs*)+0x48>
c0021313:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021318:	77 2f                	ja     c0021349 <SysClose(regs*)+0x51>
c002131a:	83 ec 0c             	sub    esp,0xc
c002131d:	50                   	push   eax
c002131e:	e8 e0 69 ff ff       	call   c0017d03 <KeGetFileFromDescriptor(int)>
c0021323:	89 c3                	mov    ebx,eax
c0021325:	89 04 24             	mov    DWORD PTR [esp],eax
c0021328:	e8 eb 90 ff ff       	call   c001a418 <File::close()>
c002132d:	83 c4 10             	add    esp,0x10
c0021330:	85 db                	test   ebx,ebx
c0021332:	74 0c                	je     c0021340 <SysClose(regs*)+0x48>
c0021334:	83 ec 0c             	sub    esp,0xc
c0021337:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021339:	53                   	push   ebx
c002133a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002133d:	83 c4 10             	add    esp,0x10
c0021340:	31 c0                	xor    eax,eax
c0021342:	31 d2                	xor    edx,edx
c0021344:	83 c4 08             	add    esp,0x8
c0021347:	5b                   	pop    ebx
c0021348:	c3                   	ret    
c0021349:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002134e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021353:	83 c4 08             	add    esp,0x8
c0021356:	5b                   	pop    ebx
c0021357:	c3                   	ret    

c0021358 <SysOpenDir(regs*)>:
c0021358:	56                   	push   esi
c0021359:	53                   	push   ebx
c002135a:	83 ec 04             	sub    esp,0x4
c002135d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021361:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0021364:	85 c9                	test   ecx,ecx
c0021366:	74 5d                	je     c00213c5 <SysOpenDir(regs*)+0x6d>
c0021368:	83 ec 0c             	sub    esp,0xc
c002136b:	68 14 01 00 00       	push   0x114
c0021370:	e8 91 4f ff ff       	call   c0016306 <malloc>
c0021375:	83 c4 0c             	add    esp,0xc
c0021378:	89 c6                	mov    esi,eax
c002137a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002137f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021382:	50                   	push   eax
c0021383:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0021386:	52                   	push   edx
c0021387:	56                   	push   esi
c0021388:	e8 ef 94 ff ff       	call   c001a87c <Directory::Directory(char const*, Process*)>
c002138d:	83 c4 10             	add    esp,0x10
c0021390:	85 f6                	test   esi,esi
c0021392:	74 31                	je     c00213c5 <SysOpenDir(regs*)+0x6d>
c0021394:	83 ec 0c             	sub    esp,0xc
c0021397:	56                   	push   esi
c0021398:	e8 a7 95 ff ff       	call   c001a944 <Directory::open()>
c002139d:	83 c4 10             	add    esp,0x10
c00213a0:	85 c0                	test   eax,eax
c00213a2:	75 21                	jne    c00213c5 <SysOpenDir(regs*)+0x6d>
c00213a4:	83 ec 0c             	sub    esp,0xc
c00213a7:	56                   	push   esi
c00213a8:	e8 59 66 ff ff       	call   c0017a06 <UnixFile::getFileDescriptor()>
c00213ad:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00213b0:	83 c4 10             	add    esp,0x10
c00213b3:	89 02                	mov    DWORD PTR [edx],eax
c00213b5:	c1 f8 1f             	sar    eax,0x1f
c00213b8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00213bb:	83 c4 04             	add    esp,0x4
c00213be:	31 c0                	xor    eax,eax
c00213c0:	31 d2                	xor    edx,edx
c00213c2:	5b                   	pop    ebx
c00213c3:	5e                   	pop    esi
c00213c4:	c3                   	ret    
c00213c5:	83 c4 04             	add    esp,0x4
c00213c8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00213cd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00213d2:	5b                   	pop    ebx
c00213d3:	5e                   	pop    esi
c00213d4:	c3                   	ret    

c00213d5 <SysMakeDir(regs*)>:
c00213d5:	56                   	push   esi
c00213d6:	53                   	push   ebx
c00213d7:	83 ec 10             	sub    esp,0x10
c00213da:	68 14 01 00 00       	push   0x114
c00213df:	e8 22 4f ff ff       	call   c0016306 <malloc>
c00213e4:	83 c4 0c             	add    esp,0xc
c00213e7:	89 c3                	mov    ebx,eax
c00213e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00213ee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00213f1:	50                   	push   eax
c00213f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00213f6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00213f9:	52                   	push   edx
c00213fa:	53                   	push   ebx
c00213fb:	e8 7c 94 ff ff       	call   c001a87c <Directory::Directory(char const*, Process*)>
c0021400:	83 c4 10             	add    esp,0x10
c0021403:	85 db                	test   ebx,ebx
c0021405:	74 2c                	je     c0021433 <SysMakeDir(regs*)+0x5e>
c0021407:	83 ec 0c             	sub    esp,0xc
c002140a:	53                   	push   ebx
c002140b:	e8 14 97 ff ff       	call   c001ab24 <Directory::create()>
c0021410:	89 c6                	mov    esi,eax
c0021412:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021414:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021417:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002141a:	83 c4 10             	add    esp,0x10
c002141d:	31 c0                	xor    eax,eax
c002141f:	85 f6                	test   esi,esi
c0021421:	0f 95 c0             	setne  al
c0021424:	31 d2                	xor    edx,edx
c0021426:	f7 d8                	neg    eax
c0021428:	83 d2 00             	adc    edx,0x0
c002142b:	83 c4 04             	add    esp,0x4
c002142e:	f7 da                	neg    edx
c0021430:	5b                   	pop    ebx
c0021431:	5e                   	pop    esi
c0021432:	c3                   	ret    
c0021433:	83 c4 04             	add    esp,0x4
c0021436:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002143b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021440:	5b                   	pop    ebx
c0021441:	5e                   	pop    esi
c0021442:	c3                   	ret    

c0021443 <SysCloseDir(regs*)>:
c0021443:	53                   	push   ebx
c0021444:	83 ec 08             	sub    esp,0x8
c0021447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002144b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002144e:	8d 50 fd             	lea    edx,[eax-0x3]
c0021451:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0021457:	77 2f                	ja     c0021488 <SysCloseDir(regs*)+0x45>
c0021459:	83 ec 0c             	sub    esp,0xc
c002145c:	50                   	push   eax
c002145d:	e8 a1 68 ff ff       	call   c0017d03 <KeGetFileFromDescriptor(int)>
c0021462:	89 c3                	mov    ebx,eax
c0021464:	89 04 24             	mov    DWORD PTR [esp],eax
c0021467:	e8 34 95 ff ff       	call   c001a9a0 <Directory::close()>
c002146c:	83 c4 10             	add    esp,0x10
c002146f:	85 db                	test   ebx,ebx
c0021471:	74 0c                	je     c002147f <SysCloseDir(regs*)+0x3c>
c0021473:	83 ec 0c             	sub    esp,0xc
c0021476:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021478:	53                   	push   ebx
c0021479:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002147c:	83 c4 10             	add    esp,0x10
c002147f:	31 c0                	xor    eax,eax
c0021481:	31 d2                	xor    edx,edx
c0021483:	83 c4 08             	add    esp,0x8
c0021486:	5b                   	pop    ebx
c0021487:	c3                   	ret    
c0021488:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002148d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021492:	83 c4 08             	add    esp,0x8
c0021495:	5b                   	pop    ebx
c0021496:	c3                   	ret    

c0021497 <SysWait(regs*)>:
c0021497:	83 ec 10             	sub    esp,0x10
c002149a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002149e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00214a1:	52                   	push   edx
c00214a2:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00214a5:	51                   	push   ecx
c00214a6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00214a9:	50                   	push   eax
c00214aa:	e8 a1 3d 00 00       	call   c0025250 <waitTask(int, int*, int)>
c00214af:	83 c4 1c             	add    esp,0x1c
c00214b2:	89 c2                	mov    edx,eax
c00214b4:	c1 fa 1f             	sar    edx,0x1f
c00214b7:	c3                   	ret    

c00214b8 <SysNotImpl(regs*)>:
c00214b8:	83 ec 18             	sub    esp,0x18
c00214bb:	68 84 28 03 c0       	push   0xc0032884
c00214c0:	e8 e9 ec ff ff       	call   c00201ae <KePanic(char const*)>
c00214c5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00214ca:	ba ff ff ff ff       	mov    edx,0xffffffff
c00214cf:	83 c4 1c             	add    esp,0x1c
c00214d2:	c3                   	ret    

c00214d3 <SysPanic(regs*)>:
c00214d3:	83 ec 18             	sub    esp,0x18
c00214d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00214da:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00214dd:	50                   	push   eax
c00214de:	e8 cb ec ff ff       	call   c00201ae <KePanic(char const*)>
c00214e3:	b8 01 00 00 00       	mov    eax,0x1
c00214e8:	31 d2                	xor    edx,edx
c00214ea:	83 c4 1c             	add    esp,0x1c
c00214ed:	c3                   	ret    

c00214ee <SysRmdir(regs*)>:
c00214ee:	56                   	push   esi
c00214ef:	53                   	push   ebx
c00214f0:	83 ec 20             	sub    esp,0x20
c00214f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00214f7:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00214fa:	68 14 01 00 00       	push   0x114
c00214ff:	e8 02 4e ff ff       	call   c0016306 <malloc>
c0021504:	6a 00                	push   0x0
c0021506:	89 c3                	mov    ebx,eax
c0021508:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002150d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021510:	50                   	push   eax
c0021511:	56                   	push   esi
c0021512:	53                   	push   ebx
c0021513:	e8 a6 8d ff ff       	call   c001a2be <File::File(char const*, Process*, bool)>
c0021518:	83 c4 14             	add    esp,0x14
c002151b:	53                   	push   ebx
c002151c:	e8 67 90 ff ff       	call   c001a588 <File::unlink()>
c0021521:	83 c4 10             	add    esp,0x10
c0021524:	85 db                	test   ebx,ebx
c0021526:	74 14                	je     c002153c <SysRmdir(regs*)+0x4e>
c0021528:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002152c:	8b 13                	mov    edx,DWORD PTR [ebx]
c002152e:	83 ec 0c             	sub    esp,0xc
c0021531:	53                   	push   ebx
c0021532:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0021535:	83 c4 10             	add    esp,0x10
c0021538:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002153c:	85 c0                	test   eax,eax
c002153e:	0f 95 c0             	setne  al
c0021541:	31 d2                	xor    edx,edx
c0021543:	0f b6 c0             	movzx  eax,al
c0021546:	f7 d8                	neg    eax
c0021548:	83 d2 00             	adc    edx,0x0
c002154b:	83 c4 14             	add    esp,0x14
c002154e:	f7 da                	neg    edx
c0021550:	5b                   	pop    ebx
c0021551:	5e                   	pop    esi
c0021552:	c3                   	ret    

c0021553 <SysUnlink(regs*)>:
c0021553:	56                   	push   esi
c0021554:	53                   	push   ebx
c0021555:	83 ec 20             	sub    esp,0x20
c0021558:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002155c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c002155f:	68 14 01 00 00       	push   0x114
c0021564:	e8 9d 4d ff ff       	call   c0016306 <malloc>
c0021569:	6a 00                	push   0x0
c002156b:	89 c3                	mov    ebx,eax
c002156d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021572:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021575:	50                   	push   eax
c0021576:	56                   	push   esi
c0021577:	53                   	push   ebx
c0021578:	e8 41 8d ff ff       	call   c001a2be <File::File(char const*, Process*, bool)>
c002157d:	83 c4 14             	add    esp,0x14
c0021580:	53                   	push   ebx
c0021581:	e8 02 90 ff ff       	call   c001a588 <File::unlink()>
c0021586:	83 c4 10             	add    esp,0x10
c0021589:	85 db                	test   ebx,ebx
c002158b:	74 14                	je     c00215a1 <SysUnlink(regs*)+0x4e>
c002158d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021591:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021593:	83 ec 0c             	sub    esp,0xc
c0021596:	53                   	push   ebx
c0021597:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002159a:	83 c4 10             	add    esp,0x10
c002159d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00215a1:	85 c0                	test   eax,eax
c00215a3:	0f 95 c0             	setne  al
c00215a6:	31 d2                	xor    edx,edx
c00215a8:	0f b6 c0             	movzx  eax,al
c00215ab:	f7 d8                	neg    eax
c00215ad:	83 d2 00             	adc    edx,0x0
c00215b0:	83 c4 14             	add    esp,0x14
c00215b3:	f7 da                	neg    edx
c00215b5:	5b                   	pop    ebx
c00215b6:	5e                   	pop    esi
c00215b7:	c3                   	ret    

c00215b8 <SysGetArgv(regs*)>:
c00215b8:	83 ec 0c             	sub    esp,0xc
c00215bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00215bf:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00215c2:	85 c0                	test   eax,eax
c00215c4:	78 2c                	js     c00215f2 <SysGetArgv(regs*)+0x3a>
c00215c6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00215cc:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00215cf:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00215d5:	7d 1b                	jge    c00215f2 <SysGetArgv(regs*)+0x3a>
c00215d7:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00215de:	85 c0                	test   eax,eax
c00215e0:	74 18                	je     c00215fa <SysGetArgv(regs*)+0x42>
c00215e2:	83 ec 08             	sub    esp,0x8
c00215e5:	50                   	push   eax
c00215e6:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00215e9:	50                   	push   eax
c00215ea:	e8 51 f0 fd ff       	call   c0000640 <strcpy>
c00215ef:	83 c4 10             	add    esp,0x10
c00215f2:	31 c0                	xor    eax,eax
c00215f4:	31 d2                	xor    edx,edx
c00215f6:	83 c4 0c             	add    esp,0xc
c00215f9:	c3                   	ret    
c00215fa:	b8 01 00 00 00       	mov    eax,0x1
c00215ff:	31 d2                	xor    edx,edx
c0021601:	83 c4 0c             	add    esp,0xc
c0021604:	c3                   	ret    

c0021605 <SysUSleep(regs*)>:
c0021605:	83 ec 1c             	sub    esp,0x1c
c0021608:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002160c:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c002160f:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0021612:	6a 00                	push   0x0
c0021614:	6a 64                	push   0x64
c0021616:	52                   	push   edx
c0021617:	50                   	push   eax
c0021618:	e8 43 cf 00 00       	call   c002e560 <__udivdi3>
c002161d:	83 c4 14             	add    esp,0x14
c0021620:	50                   	push   eax
c0021621:	e8 0e 3d 00 00       	call   c0025334 <milliTenthSleep(unsigned int)>
c0021626:	31 c0                	xor    eax,eax
c0021628:	31 d2                	xor    edx,edx
c002162a:	83 c4 1c             	add    esp,0x1c
c002162d:	c3                   	ret    

c002162e <SysSpawn(regs*)>:
c002162e:	56                   	push   esi
c002162f:	53                   	push   ebx
c0021630:	83 ec 04             	sub    esp,0x4
c0021633:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021637:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c002163a:	85 f6                	test   esi,esi
c002163c:	75 0a                	jne    c0021648 <SysSpawn(regs*)+0x1a>
c002163e:	83 c4 04             	add    esp,0x4
c0021641:	31 c0                	xor    eax,eax
c0021643:	31 d2                	xor    edx,edx
c0021645:	5b                   	pop    ebx
c0021646:	5e                   	pop    esi
c0021647:	c3                   	ret    
c0021648:	83 ec 0c             	sub    esp,0xc
c002164b:	68 24 07 00 00       	push   0x724
c0021650:	e8 b1 4c ff ff       	call   c0016306 <malloc>
c0021655:	83 c4 10             	add    esp,0x10
c0021658:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c002165b:	89 c6                	mov    esi,eax
c002165d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021660:	85 c9                	test   ecx,ecx
c0021662:	75 39                	jne    c002169d <SysSpawn(regs*)+0x6f>
c0021664:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021669:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002166c:	52                   	push   edx
c002166d:	50                   	push   eax
c002166e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021671:	50                   	push   eax
c0021672:	56                   	push   esi
c0021673:	e8 60 34 00 00       	call   c0024ad8 <Process::Process(char const*, Process*, char**)>
c0021678:	83 c4 10             	add    esp,0x10
c002167b:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0021682:	75 ba                	jne    c002163e <SysSpawn(regs*)+0x10>
c0021684:	83 ec 0c             	sub    esp,0xc
c0021687:	56                   	push   esi
c0021688:	e8 8b 39 00 00       	call   c0025018 <Process::createUserThread()>
c002168d:	8b 06                	mov    eax,DWORD PTR [esi]
c002168f:	83 c4 10             	add    esp,0x10
c0021692:	89 c2                	mov    edx,eax
c0021694:	83 c4 04             	add    esp,0x4
c0021697:	c1 fa 1f             	sar    edx,0x1f
c002169a:	5b                   	pop    ebx
c002169b:	5e                   	pop    esi
c002169c:	c3                   	ret    
c002169d:	31 c0                	xor    eax,eax
c002169f:	eb cb                	jmp    c002166c <SysSpawn(regs*)+0x3e>

c00216a1 <SysGetEnv(regs*)>:
c00216a1:	57                   	push   edi
c00216a2:	56                   	push   esi
c00216a3:	53                   	push   ebx
c00216a4:	83 ec 1c             	sub    esp,0x1c
c00216a7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00216ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00216b0:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00216b3:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00216b6:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00216b9:	51                   	push   ecx
c00216ba:	e8 8c e9 ff ff       	call   c002004b <KeGetProcessTotalEnvCount(Process*)>
c00216bf:	83 c4 10             	add    esp,0x10
c00216c2:	39 c7                	cmp    edi,eax
c00216c4:	7c 14                	jl     c00216da <SysGetEnv(regs*)+0x39>
c00216c6:	85 f6                	test   esi,esi
c00216c8:	75 0b                	jne    c00216d5 <SysGetEnv(regs*)+0x34>
c00216ca:	83 c4 10             	add    esp,0x10
c00216cd:	31 c0                	xor    eax,eax
c00216cf:	5b                   	pop    ebx
c00216d0:	31 d2                	xor    edx,edx
c00216d2:	5e                   	pop    esi
c00216d3:	5f                   	pop    edi
c00216d4:	c3                   	ret    
c00216d5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00216d8:	eb f0                	jmp    c00216ca <SysGetEnv(regs*)+0x29>
c00216da:	8d 44 24 08          	lea    eax,[esp+0x8]
c00216de:	83 ec 04             	sub    esp,0x4
c00216e1:	57                   	push   edi
c00216e2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00216e8:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00216eb:	57                   	push   edi
c00216ec:	50                   	push   eax
c00216ed:	e8 79 e9 ff ff       	call   c002006b <KeGetProcessEnvPair(Process*, int)>
c00216f2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00216f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00216f9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00216fd:	83 c4 0c             	add    esp,0xc
c0021700:	85 d2                	test   edx,edx
c0021702:	75 23                	jne    c0021727 <SysGetEnv(regs*)+0x86>
c0021704:	83 ec 0c             	sub    esp,0xc
c0021707:	50                   	push   eax
c0021708:	e8 63 ee fd ff       	call   c0000570 <strlen>
c002170d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021710:	89 c3                	mov    ebx,eax
c0021712:	e8 59 ee fd ff       	call   c0000570 <strlen>
c0021717:	83 c4 10             	add    esp,0x10
c002171a:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c002171e:	83 c4 10             	add    esp,0x10
c0021721:	31 d2                	xor    edx,edx
c0021723:	5b                   	pop    ebx
c0021724:	5e                   	pop    esi
c0021725:	5f                   	pop    edi
c0021726:	c3                   	ret    
c0021727:	83 ec 08             	sub    esp,0x8
c002172a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002172d:	50                   	push   eax
c002172e:	56                   	push   esi
c002172f:	e8 0c ef fd ff       	call   c0000640 <strcpy>
c0021734:	58                   	pop    eax
c0021735:	5a                   	pop    edx
c0021736:	68 9e 28 03 c0       	push   0xc003289e
c002173b:	56                   	push   esi
c002173c:	e8 ff f0 fd ff       	call   c0000840 <strcat>
c0021741:	59                   	pop    ecx
c0021742:	5b                   	pop    ebx
c0021743:	57                   	push   edi
c0021744:	56                   	push   esi
c0021745:	e8 f6 f0 fd ff       	call   c0000840 <strcat>
c002174a:	83 c4 10             	add    esp,0x10
c002174d:	e9 78 ff ff ff       	jmp    c00216ca <SysGetEnv(regs*)+0x29>

c0021752 <SysSetFatAttrib(regs*)>:
c0021752:	57                   	push   edi
c0021753:	56                   	push   esi
c0021754:	53                   	push   ebx
c0021755:	83 ec 1c             	sub    esp,0x1c
c0021758:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002175c:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c002175f:	68 14 01 00 00       	push   0x114
c0021764:	e8 9d 4b ff ff       	call   c0016306 <malloc>
c0021769:	83 c4 0c             	add    esp,0xc
c002176c:	89 c3                	mov    ebx,eax
c002176e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021773:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021776:	50                   	push   eax
c0021777:	57                   	push   edi
c0021778:	53                   	push   ebx
c0021779:	e8 1e 8c ff ff       	call   c001a39c <File::File(char const*, Process*)>
c002177e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0021781:	83 c4 0c             	add    esp,0xc
c0021784:	0f b6 d4             	movzx  edx,ah
c0021787:	0f b6 c0             	movzx  eax,al
c002178a:	52                   	push   edx
c002178b:	50                   	push   eax
c002178c:	53                   	push   ebx
c002178d:	e8 90 8e ff ff       	call   c001a622 <File::chfatattr(unsigned char, unsigned char)>
c0021792:	83 c4 10             	add    esp,0x10
c0021795:	85 db                	test   ebx,ebx
c0021797:	74 14                	je     c00217ad <SysSetFatAttrib(regs*)+0x5b>
c0021799:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002179d:	8b 13                	mov    edx,DWORD PTR [ebx]
c002179f:	83 ec 0c             	sub    esp,0xc
c00217a2:	53                   	push   ebx
c00217a3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00217a6:	83 c4 10             	add    esp,0x10
c00217a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00217ad:	85 c0                	test   eax,eax
c00217af:	0f 95 c0             	setne  al
c00217b2:	31 d2                	xor    edx,edx
c00217b4:	0f b6 c0             	movzx  eax,al
c00217b7:	f7 d8                	neg    eax
c00217b9:	83 d2 00             	adc    edx,0x0
c00217bc:	83 c4 10             	add    esp,0x10
c00217bf:	f7 da                	neg    edx
c00217c1:	5b                   	pop    ebx
c00217c2:	5e                   	pop    esi
c00217c3:	5f                   	pop    edi
c00217c4:	c3                   	ret    

c00217c5 <SysPipe(regs*)>:
c00217c5:	57                   	push   edi
c00217c6:	56                   	push   esi
c00217c7:	53                   	push   ebx
c00217c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217cc:	83 ec 0c             	sub    esp,0xc
c00217cf:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00217d2:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00217d5:	6a 20                	push   0x20
c00217d7:	e8 2a 4b ff ff       	call   c0016306 <malloc>
c00217dc:	89 c3                	mov    ebx,eax
c00217de:	58                   	pop    eax
c00217df:	5a                   	pop    edx
c00217e0:	68 00 50 00 00       	push   0x5000
c00217e5:	53                   	push   ebx
c00217e6:	e8 8d 54 ff ff       	call   c0016c78 <Pipe::Pipe(int)>
c00217eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00217ee:	e8 13 62 ff ff       	call   c0017a06 <UnixFile::getFileDescriptor()>
c00217f3:	89 07                	mov    DWORD PTR [edi],eax
c00217f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00217f8:	e8 09 62 ff ff       	call   c0017a06 <UnixFile::getFileDescriptor()>
c00217fd:	83 c4 10             	add    esp,0x10
c0021800:	89 06                	mov    DWORD PTR [esi],eax
c0021802:	31 d2                	xor    edx,edx
c0021804:	5b                   	pop    ebx
c0021805:	31 c0                	xor    eax,eax
c0021807:	5e                   	pop    esi
c0021808:	5f                   	pop    edi
c0021809:	c3                   	ret    

c002180a <SysGetUnixTime(regs*)>:
c002180a:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002180f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021815:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021819:	e9 4c 95 ff ff       	jmp    c001ad6a <Clock::timeInSecondsLocal()>

c002181e <string_ends_with(char const*, char const*)>:
c002181e:	57                   	push   edi
c002181f:	56                   	push   esi
c0021820:	53                   	push   ebx
c0021821:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021825:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021829:	83 ec 0c             	sub    esp,0xc
c002182c:	53                   	push   ebx
c002182d:	e8 3e ed fd ff       	call   c0000570 <strlen>
c0021832:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021835:	89 c6                	mov    esi,eax
c0021837:	e8 34 ed fd ff       	call   c0000570 <strlen>
c002183c:	83 c4 10             	add    esp,0x10
c002183f:	39 c6                	cmp    esi,eax
c0021841:	7d 06                	jge    c0021849 <string_ends_with(char const*, char const*)+0x2b>
c0021843:	5b                   	pop    ebx
c0021844:	31 c0                	xor    eax,eax
c0021846:	5e                   	pop    esi
c0021847:	5f                   	pop    edi
c0021848:	c3                   	ret    
c0021849:	83 ec 08             	sub    esp,0x8
c002184c:	29 c6                	sub    esi,eax
c002184e:	57                   	push   edi
c002184f:	01 f3                	add    ebx,esi
c0021851:	53                   	push   ebx
c0021852:	e8 f9 ee fd ff       	call   c0000750 <strcmp>
c0021857:	83 c4 10             	add    esp,0x10
c002185a:	85 c0                	test   eax,eax
c002185c:	5b                   	pop    ebx
c002185d:	0f 94 c0             	sete   al
c0021860:	5e                   	pop    esi
c0021861:	0f b6 c0             	movzx  eax,al
c0021864:	5f                   	pop    edi
c0021865:	c3                   	ret    

c0021866 <SysOpen(regs*)>:
c0021866:	56                   	push   esi
c0021867:	53                   	push   ebx
c0021868:	81 ec 04 01 00 00    	sub    esp,0x104
c002186e:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0021875:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021878:	85 c0                	test   eax,eax
c002187a:	0f 84 bc 01 00 00    	je     c0021a3c <SysOpen(regs*)+0x1d6>
c0021880:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021883:	85 c0                	test   eax,eax
c0021885:	0f 84 b1 01 00 00    	je     c0021a3c <SysOpen(regs*)+0x1d6>
c002188b:	6a 00                	push   0x0
c002188d:	68 a0 28 03 c0       	push   0xc00328a0
c0021892:	50                   	push   eax
c0021893:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0021897:	56                   	push   esi
c0021898:	e8 07 88 ff ff       	call   c001a0a4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c002189d:	89 34 24             	mov    DWORD PTR [esp],esi
c00218a0:	e8 cb ec fd ff       	call   c0000570 <strlen>
c00218a5:	83 c4 10             	add    esp,0x10
c00218a8:	83 e8 01             	sub    eax,0x1
c00218ab:	74 21                	je     c00218ce <SysOpen(regs*)+0x68>
c00218ad:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00218b1:	eb 12                	jmp    c00218c5 <SysOpen(regs*)+0x5f>
c00218b3:	83 fa 3a             	cmp    edx,0x3a
c00218b6:	74 12                	je     c00218ca <SysOpen(regs*)+0x64>
c00218b8:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00218bc:	83 e8 01             	sub    eax,0x1
c00218bf:	74 0d                	je     c00218ce <SysOpen(regs*)+0x68>
c00218c1:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00218c5:	83 fa 2e             	cmp    edx,0x2e
c00218c8:	75 e9                	jne    c00218b3 <SysOpen(regs*)+0x4d>
c00218ca:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00218ce:	83 ec 08             	sub    esp,0x8
c00218d1:	68 a4 28 03 c0       	push   0xc00328a4
c00218d6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00218d9:	50                   	push   eax
c00218da:	e8 3f ff ff ff       	call   c002181e <string_ends_with(char const*, char const*)>
c00218df:	83 c4 10             	add    esp,0x10
c00218e2:	85 c0                	test   eax,eax
c00218e4:	74 1d                	je     c0021903 <SysOpen(regs*)+0x9d>
c00218e6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00218e9:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00218ef:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00218f6:	81 c4 04 01 00 00    	add    esp,0x104
c00218fc:	31 c0                	xor    eax,eax
c00218fe:	31 d2                	xor    edx,edx
c0021900:	5b                   	pop    ebx
c0021901:	5e                   	pop    esi
c0021902:	c3                   	ret    
c0021903:	83 ec 08             	sub    esp,0x8
c0021906:	68 a9 28 03 c0       	push   0xc00328a9
c002190b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c002190e:	50                   	push   eax
c002190f:	e8 0a ff ff ff       	call   c002181e <string_ends_with(char const*, char const*)>
c0021914:	83 c4 10             	add    esp,0x10
c0021917:	85 c0                	test   eax,eax
c0021919:	75 cb                	jne    c00218e6 <SysOpen(regs*)+0x80>
c002191b:	83 ec 08             	sub    esp,0x8
c002191e:	68 a5 28 03 c0       	push   0xc00328a5
c0021923:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021926:	50                   	push   eax
c0021927:	e8 24 ee fd ff       	call   c0000750 <strcmp>
c002192c:	83 c4 10             	add    esp,0x10
c002192f:	85 c0                	test   eax,eax
c0021931:	74 b3                	je     c00218e6 <SysOpen(regs*)+0x80>
c0021933:	83 ec 08             	sub    esp,0x8
c0021936:	68 a4 28 03 c0       	push   0xc00328a4
c002193b:	56                   	push   esi
c002193c:	e8 dd fe ff ff       	call   c002181e <string_ends_with(char const*, char const*)>
c0021941:	83 c4 10             	add    esp,0x10
c0021944:	85 c0                	test   eax,eax
c0021946:	75 9e                	jne    c00218e6 <SysOpen(regs*)+0x80>
c0021948:	83 ec 08             	sub    esp,0x8
c002194b:	68 ae 28 03 c0       	push   0xc00328ae
c0021950:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021953:	50                   	push   eax
c0021954:	e8 c5 fe ff ff       	call   c002181e <string_ends_with(char const*, char const*)>
c0021959:	83 c4 10             	add    esp,0x10
c002195c:	85 c0                	test   eax,eax
c002195e:	0f 85 eb 00 00 00    	jne    c0021a4f <SysOpen(regs*)+0x1e9>
c0021964:	83 ec 08             	sub    esp,0x8
c0021967:	68 b3 28 03 c0       	push   0xc00328b3
c002196c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c002196f:	50                   	push   eax
c0021970:	e8 a9 fe ff ff       	call   c002181e <string_ends_with(char const*, char const*)>
c0021975:	83 c4 10             	add    esp,0x10
c0021978:	85 c0                	test   eax,eax
c002197a:	0f 85 cf 00 00 00    	jne    c0021a4f <SysOpen(regs*)+0x1e9>
c0021980:	83 ec 08             	sub    esp,0x8
c0021983:	68 af 28 03 c0       	push   0xc00328af
c0021988:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c002198b:	51                   	push   ecx
c002198c:	e8 bf ed fd ff       	call   c0000750 <strcmp>
c0021991:	83 c4 10             	add    esp,0x10
c0021994:	85 c0                	test   eax,eax
c0021996:	0f 84 b3 00 00 00    	je     c0021a4f <SysOpen(regs*)+0x1e9>
c002199c:	83 ec 08             	sub    esp,0x8
c002199f:	68 ae 28 03 c0       	push   0xc00328ae
c00219a4:	56                   	push   esi
c00219a5:	e8 74 fe ff ff       	call   c002181e <string_ends_with(char const*, char const*)>
c00219aa:	83 c4 10             	add    esp,0x10
c00219ad:	85 c0                	test   eax,eax
c00219af:	0f 85 9a 00 00 00    	jne    c0021a4f <SysOpen(regs*)+0x1e9>
c00219b5:	83 ec 0c             	sub    esp,0xc
c00219b8:	68 14 01 00 00       	push   0x114
c00219bd:	e8 44 49 ff ff       	call   c0016306 <malloc>
c00219c2:	83 c4 0c             	add    esp,0xc
c00219c5:	89 c6                	mov    esi,eax
c00219c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00219cc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00219cf:	50                   	push   eax
c00219d0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00219d3:	52                   	push   edx
c00219d4:	56                   	push   esi
c00219d5:	e8 c2 89 ff ff       	call   c001a39c <File::File(char const*, Process*)>
c00219da:	83 c4 10             	add    esp,0x10
c00219dd:	85 f6                	test   esi,esi
c00219df:	74 5b                	je     c0021a3c <SysOpen(regs*)+0x1d6>
c00219e1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00219e4:	0f b6 c2             	movzx  eax,dl
c00219e7:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00219ea:	89 d0                	mov    eax,edx
c00219ec:	83 e0 01             	and    eax,0x1
c00219ef:	f6 c2 02             	test   dl,0x2
c00219f2:	74 03                	je     c00219f7 <SysOpen(regs*)+0x191>
c00219f4:	83 c8 02             	or     eax,0x2
c00219f7:	f6 c2 04             	test   dl,0x4
c00219fa:	74 03                	je     c00219ff <SysOpen(regs*)+0x199>
c00219fc:	83 c8 04             	or     eax,0x4
c00219ff:	f6 c2 08             	test   dl,0x8
c0021a02:	74 03                	je     c0021a07 <SysOpen(regs*)+0x1a1>
c0021a04:	83 c8 0a             	or     eax,0xa
c0021a07:	80 e2 10             	and    dl,0x10
c0021a0a:	74 03                	je     c0021a0f <SysOpen(regs*)+0x1a9>
c0021a0c:	83 c8 12             	or     eax,0x12
c0021a0f:	83 ec 08             	sub    esp,0x8
c0021a12:	50                   	push   eax
c0021a13:	56                   	push   esi
c0021a14:	e8 a1 89 ff ff       	call   c001a3ba <File::open(FileOpenMode)>
c0021a19:	83 c4 10             	add    esp,0x10
c0021a1c:	85 c0                	test   eax,eax
c0021a1e:	75 1c                	jne    c0021a3c <SysOpen(regs*)+0x1d6>
c0021a20:	83 ec 0c             	sub    esp,0xc
c0021a23:	56                   	push   esi
c0021a24:	e8 dd 5f ff ff       	call   c0017a06 <UnixFile::getFileDescriptor()>
c0021a29:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0021a2c:	83 c4 10             	add    esp,0x10
c0021a2f:	89 02                	mov    DWORD PTR [edx],eax
c0021a31:	c1 f8 1f             	sar    eax,0x1f
c0021a34:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0021a37:	e9 ba fe ff ff       	jmp    c00218f6 <SysOpen(regs*)+0x90>
c0021a3c:	81 c4 04 01 00 00    	add    esp,0x104
c0021a42:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021a47:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021a4c:	5b                   	pop    ebx
c0021a4d:	5e                   	pop    esi
c0021a4e:	c3                   	ret    
c0021a4f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021a52:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0021a58:	e9 92 fe ff ff       	jmp    c00218ef <SysOpen(regs*)+0x89>

c0021a5d <KeSystemCall(regs*, void*)>:
c0021a5d:	53                   	push   ebx
c0021a5e:	83 ec 08             	sub    esp,0x8
c0021a61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021a65:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0021a68:	83 f8 3e             	cmp    eax,0x3e
c0021a6b:	77 16                	ja     c0021a83 <KeSystemCall(regs*, void*)+0x26>
c0021a6d:	8b 14 85 00 41 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcbf00]
c0021a74:	85 d2                	test   edx,edx
c0021a76:	74 0b                	je     c0021a83 <KeSystemCall(regs*, void*)+0x26>
c0021a78:	83 ec 0c             	sub    esp,0xc
c0021a7b:	53                   	push   ebx
c0021a7c:	ff d2                	call   edx
c0021a7e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0021a81:	eb 0d                	jmp    c0021a90 <KeSystemCall(regs*, void*)+0x33>
c0021a83:	52                   	push   edx
c0021a84:	52                   	push   edx
c0021a85:	50                   	push   eax
c0021a86:	68 b8 28 03 c0       	push   0xc00328b8
c0021a8b:	e8 05 77 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0021a90:	83 c4 10             	add    esp,0x10
c0021a93:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0021a98:	31 d2                	xor    edx,edx
c0021a9a:	83 c4 08             	add    esp,0x8
c0021a9d:	5b                   	pop    ebx
c0021a9e:	c3                   	ret    
c0021a9f:	90                   	nop

c0021aa0 <KeSwitchEndian16(unsigned short)>:
c0021aa0:	83 ec 04             	sub    esp,0x4
c0021aa3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021aa7:	66 89 04 24          	mov    WORD PTR [esp],ax
c0021aab:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0021aaf:	c1 f8 08             	sar    eax,0x8
c0021ab2:	89 c2                	mov    edx,eax
c0021ab4:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0021ab8:	c1 e0 08             	shl    eax,0x8
c0021abb:	09 d0                	or     eax,edx
c0021abd:	83 c4 04             	add    esp,0x4
c0021ac0:	c3                   	ret    
c0021ac1:	8d 76 00             	lea    esi,[esi+0x0]

c0021ac4 <KeSwitchEndian32(unsigned int)>:
c0021ac4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ac8:	c1 e8 18             	shr    eax,0x18
c0021acb:	89 c2                	mov    edx,eax
c0021acd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ad1:	c1 e0 08             	shl    eax,0x8
c0021ad4:	25 00 00 ff 00       	and    eax,0xff0000
c0021ad9:	09 c2                	or     edx,eax
c0021adb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021adf:	c1 e8 08             	shr    eax,0x8
c0021ae2:	25 00 ff 00 00       	and    eax,0xff00
c0021ae7:	09 c2                	or     edx,eax
c0021ae9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021aed:	c1 e0 18             	shl    eax,0x18
c0021af0:	09 d0                	or     eax,edx
c0021af2:	c3                   	ret    
c0021af3:	90                   	nop

c0021af4 <EthernetCRC32(unsigned char*, int)>:
c0021af4:	83 ec 10             	sub    esp,0x10
c0021af7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021afc:	75 0a                	jne    c0021b08 <EthernetCRC32(unsigned char*, int)+0x14>
c0021afe:	b8 00 00 00 00       	mov    eax,0x0
c0021b03:	e9 8c 00 00 00       	jmp    c0021b94 <EthernetCRC32(unsigned char*, int)+0xa0>
c0021b08:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0021b0d:	7f 09                	jg     c0021b18 <EthernetCRC32(unsigned char*, int)+0x24>
c0021b0f:	b8 00 00 00 00       	mov    eax,0x0
c0021b14:	eb 7e                	jmp    c0021b94 <EthernetCRC32(unsigned char*, int)+0xa0>
c0021b16:	66 90                	xchg   ax,ax
c0021b18:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0021b20:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021b28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021b2c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0021b30:	7d 5a                	jge    c0021b8c <EthernetCRC32(unsigned char*, int)+0x98>
c0021b32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021b36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021b3a:	01 d0                	add    eax,edx
c0021b3c:	8a 00                	mov    al,BYTE PTR [eax]
c0021b3e:	0f b6 c0             	movzx  eax,al
c0021b41:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0021b45:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021b4d:	8d 76 00             	lea    esi,[esi+0x0]
c0021b50:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0021b55:	7f 2d                	jg     c0021b84 <EthernetCRC32(unsigned char*, int)+0x90>
c0021b57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b5b:	83 e0 01             	and    eax,0x1
c0021b5e:	74 10                	je     c0021b70 <EthernetCRC32(unsigned char*, int)+0x7c>
c0021b60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b64:	d1 e8                	shr    eax,1
c0021b66:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0021b6b:	eb 0b                	jmp    c0021b78 <EthernetCRC32(unsigned char*, int)+0x84>
c0021b6d:	8d 76 00             	lea    esi,[esi+0x0]
c0021b70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b74:	d1 e8                	shr    eax,1
c0021b76:	66 90                	xchg   ax,ax
c0021b78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021b7c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0021b81:	eb cd                	jmp    c0021b50 <EthernetCRC32(unsigned char*, int)+0x5c>
c0021b83:	90                   	nop
c0021b84:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0021b89:	eb 9d                	jmp    c0021b28 <EthernetCRC32(unsigned char*, int)+0x34>
c0021b8b:	90                   	nop
c0021b8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b90:	f7 d0                	not    eax
c0021b92:	66 90                	xchg   ax,ax
c0021b94:	83 c4 10             	add    esp,0x10
c0021b97:	c3                   	ret    

c0021b98 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0021b98:	83 ec 2c             	sub    esp,0x2c
c0021b9b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021b9f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0021ba4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021ba8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021bac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021bb0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021bb3:	0f b7 c0             	movzx  eax,ax
c0021bb6:	3d 06 08 00 00       	cmp    eax,0x806
c0021bbb:	75 13                	jne    c0021bd0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0021bbd:	83 ec 0c             	sub    esp,0xc
c0021bc0:	68 cc 28 03 c0       	push   0xc00328cc
c0021bc5:	e8 cb 75 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0021bca:	83 c4 10             	add    esp,0x10
c0021bcd:	eb 25                	jmp    c0021bf4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0021bcf:	90                   	nop
c0021bd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021bd4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021bd7:	0f b7 c0             	movzx  eax,ax
c0021bda:	3d 00 08 00 00       	cmp    eax,0x800
c0021bdf:	75 13                	jne    c0021bf4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0021be1:	83 ec 0c             	sub    esp,0xc
c0021be4:	68 e2 28 03 c0       	push   0xc00328e2
c0021be9:	e8 a7 75 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0021bee:	83 c4 10             	add    esp,0x10
c0021bf1:	8d 76 00             	lea    esi,[esi+0x0]
c0021bf4:	90                   	nop
c0021bf5:	83 c4 2c             	add    esp,0x2c
c0021bf8:	c3                   	ret    
c0021bf9:	66 90                	xchg   ax,ax
c0021bfb:	90                   	nop

c0021bfc <KeNetCreateSemaphore>:
c0021bfc:	53                   	push   ebx
c0021bfd:	83 ec 18             	sub    esp,0x18
c0021c00:	83 ec 0c             	sub    esp,0xc
c0021c03:	6a 10                	push   0x10
c0021c05:	e8 01 e5 ff ff       	call   c002010b <operator new(unsigned long)>
c0021c0a:	83 c4 10             	add    esp,0x10
c0021c0d:	89 c3                	mov    ebx,eax
c0021c0f:	83 ec 08             	sub    esp,0x8
c0021c12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021c16:	53                   	push   ebx
c0021c17:	e8 3c e9 ff ff       	call   c0020558 <Semaphore::Semaphore(int)>
c0021c1c:	83 c4 10             	add    esp,0x10
c0021c1f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021c23:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021c27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c2b:	89 10                	mov    DWORD PTR [eax],edx
c0021c2d:	90                   	nop
c0021c2e:	83 c4 18             	add    esp,0x18
c0021c31:	5b                   	pop    ebx
c0021c32:	c3                   	ret    
c0021c33:	90                   	nop

c0021c34 <KeNetFreeSemaphore>:
c0021c34:	83 ec 0c             	sub    esp,0xc
c0021c37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c3d:	83 ec 08             	sub    esp,0x8
c0021c40:	6a 10                	push   0x10
c0021c42:	50                   	push   eax
c0021c43:	e8 20 74 ff ff       	call   c0019068 <operator delete(void*, unsigned long)>
c0021c48:	83 c4 10             	add    esp,0x10
c0021c4b:	90                   	nop
c0021c4c:	83 c4 0c             	add    esp,0xc
c0021c4f:	c3                   	ret    

c0021c50 <KeNetSignalSemaphore>:
c0021c50:	83 ec 0c             	sub    esp,0xc
c0021c53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c57:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c59:	83 ec 0c             	sub    esp,0xc
c0021c5c:	50                   	push   eax
c0021c5d:	e8 56 ec ff ff       	call   c00208b8 <Semaphore::release()>
c0021c62:	83 c4 10             	add    esp,0x10
c0021c65:	90                   	nop
c0021c66:	83 c4 0c             	add    esp,0xc
c0021c69:	c3                   	ret    
c0021c6a:	66 90                	xchg   ax,ax

c0021c6c <KeNetWaitSemaphore>:
c0021c6c:	83 ec 0c             	sub    esp,0xc
c0021c6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c73:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c75:	83 ec 08             	sub    esp,0x8
c0021c78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c7c:	50                   	push   eax
c0021c7d:	e8 72 ea ff ff       	call   c00206f4 <Semaphore::acquire(int)>
c0021c82:	83 c4 10             	add    esp,0x10
c0021c85:	83 c4 0c             	add    esp,0xc
c0021c88:	c3                   	ret    

c0021c89 <CmOpen(char const*)>:
c0021c89:	57                   	push   edi
c0021c8a:	56                   	push   esi
c0021c8b:	53                   	push   ebx
c0021c8c:	83 ec 1c             	sub    esp,0x1c
c0021c8f:	6a 30                	push   0x30
c0021c91:	e8 70 46 ff ff       	call   c0016306 <malloc>
c0021c96:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0021c9d:	89 c3                	mov    ebx,eax
c0021c9f:	e8 62 46 ff ff       	call   c0016306 <malloc>
c0021ca4:	83 c4 0c             	add    esp,0xc
c0021ca7:	89 c6                	mov    esi,eax
c0021ca9:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0021caf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021cb3:	50                   	push   eax
c0021cb4:	e8 e3 86 ff ff       	call   c001a39c <File::File(char const*, Process*)>
c0021cb9:	83 c4 0c             	add    esp,0xc
c0021cbc:	89 33                	mov    DWORD PTR [ebx],esi
c0021cbe:	8d 44 24 07          	lea    eax,[esp+0x7]
c0021cc2:	50                   	push   eax
c0021cc3:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021cc7:	50                   	push   eax
c0021cc8:	56                   	push   esi
c0021cc9:	e8 ee 89 ff ff       	call   c001a6bc <File::stat(unsigned long long*, bool*)>
c0021cce:	5a                   	pop    edx
c0021ccf:	59                   	pop    ecx
c0021cd0:	6a 01                	push   0x1
c0021cd2:	ff 33                	push   DWORD PTR [ebx]
c0021cd4:	e8 e1 86 ff ff       	call   c001a3ba <File::open(FileOpenMode)>
c0021cd9:	5e                   	pop    esi
c0021cda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021cde:	e8 23 46 ff ff       	call   c0016306 <malloc>
c0021ce3:	5a                   	pop    edx
c0021ce4:	89 c7                	mov    edi,eax
c0021ce6:	8d 74 24 10          	lea    esi,[esp+0x10]
c0021cea:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021cec:	8b 10                	mov    edx,DWORD PTR [eax]
c0021cee:	56                   	push   esi
c0021cef:	57                   	push   edi
c0021cf0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021cf4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021cf8:	50                   	push   eax
c0021cf9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021cfc:	83 c4 14             	add    esp,0x14
c0021cff:	ff 33                	push   DWORD PTR [ebx]
c0021d01:	e8 12 87 ff ff       	call   c001a418 <File::close()>
c0021d06:	59                   	pop    ecx
c0021d07:	58                   	pop    eax
c0021d08:	6a 13                	push   0x13
c0021d0a:	ff 33                	push   DWORD PTR [ebx]
c0021d0c:	e8 a9 86 ff ff       	call   c001a3ba <File::open(FileOpenMode)>
c0021d11:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021d13:	8b 10                	mov    edx,DWORD PTR [eax]
c0021d15:	89 34 24             	mov    DWORD PTR [esp],esi
c0021d18:	57                   	push   edi
c0021d19:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021d1d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021d21:	50                   	push   eax
c0021d22:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0021d25:	83 c4 14             	add    esp,0x14
c0021d28:	57                   	push   edi
c0021d29:	e8 e8 45 ff ff       	call   c0016316 <free>
c0021d2e:	83 c4 10             	add    esp,0x10
c0021d31:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0021d34:	75 10                	jne    c0021d46 <CmOpen(char const*)+0xbd>
c0021d36:	83 ec 0c             	sub    esp,0xc
c0021d39:	68 f7 28 03 c0       	push   0xc00328f7
c0021d3e:	e8 6b e4 ff ff       	call   c00201ae <KePanic(char const*)>
c0021d43:	83 c4 10             	add    esp,0x10
c0021d46:	8d 7b 05             	lea    edi,[ebx+0x5]
c0021d49:	50                   	push   eax
c0021d4a:	6a 00                	push   0x0
c0021d4c:	6a 00                	push   0x0
c0021d4e:	ff 33                	push   DWORD PTR [ebx]
c0021d50:	e8 23 87 ff ff       	call   c001a478 <File::seek(unsigned long long)>
c0021d55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021d57:	8b 10                	mov    edx,DWORD PTR [eax]
c0021d59:	89 34 24             	mov    DWORD PTR [esp],esi
c0021d5c:	57                   	push   edi
c0021d5d:	6a 00                	push   0x0
c0021d5f:	6a 2b                	push   0x2b
c0021d61:	50                   	push   eax
c0021d62:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021d65:	83 c4 1c             	add    esp,0x1c
c0021d68:	6a 00                	push   0x0
c0021d6a:	6a 00                	push   0x0
c0021d6c:	ff 33                	push   DWORD PTR [ebx]
c0021d6e:	e8 05 87 ff ff       	call   c001a478 <File::seek(unsigned long long)>
c0021d73:	83 c4 0c             	add    esp,0xc
c0021d76:	6a 08                	push   0x8
c0021d78:	68 08 29 03 c0       	push   0xc0032908
c0021d7d:	57                   	push   edi
c0021d7e:	e8 fd e5 fd ff       	call   c0000380 <memcmp>
c0021d83:	83 c4 10             	add    esp,0x10
c0021d86:	85 c0                	test   eax,eax
c0021d88:	74 10                	je     c0021d9a <CmOpen(char const*)+0x111>
c0021d8a:	83 ec 0c             	sub    esp,0xc
c0021d8d:	68 11 29 03 c0       	push   0xc0032911
c0021d92:	e8 17 e4 ff ff       	call   c00201ae <KePanic(char const*)>
c0021d97:	83 c4 10             	add    esp,0x10
c0021d9a:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0021d9e:	89 d8                	mov    eax,ebx
c0021da0:	83 c4 10             	add    esp,0x10
c0021da3:	5b                   	pop    ebx
c0021da4:	5e                   	pop    esi
c0021da5:	5f                   	pop    edi
c0021da6:	c3                   	ret    

c0021da7 <CmClose(Reghive_Tag*)>:
c0021da7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021dab:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0021daf:	74 0b                	je     c0021dbc <CmClose(Reghive_Tag*)+0x15>
c0021db1:	8b 00                	mov    eax,DWORD PTR [eax]
c0021db3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021db7:	e9 5c 86 ff ff       	jmp    c001a418 <File::close()>
c0021dbc:	c3                   	ret    

c0021dbd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0021dbd:	53                   	push   ebx
c0021dbe:	83 ec 18             	sub    esp,0x18
c0021dc1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021dc5:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0021dc9:	74 29                	je     c0021df4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0021dcb:	50                   	push   eax
c0021dcc:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0021dd1:	99                   	cdq    
c0021dd2:	52                   	push   edx
c0021dd3:	50                   	push   eax
c0021dd4:	ff 33                	push   DWORD PTR [ebx]
c0021dd6:	e8 9d 86 ff ff       	call   c001a478 <File::seek(unsigned long long)>
c0021ddb:	5a                   	pop    edx
c0021ddc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021dde:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0021de2:	8b 10                	mov    edx,DWORD PTR [eax]
c0021de4:	51                   	push   ecx
c0021de5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021de9:	6a 00                	push   0x0
c0021deb:	6a 2b                	push   0x2b
c0021ded:	50                   	push   eax
c0021dee:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021df1:	83 c4 20             	add    esp,0x20
c0021df4:	83 c4 18             	add    esp,0x18
c0021df7:	5b                   	pop    ebx
c0021df8:	c3                   	ret    

c0021df9 <CmGetString(Reghive_Tag*, int, char*)>:
c0021df9:	55                   	push   ebp
c0021dfa:	57                   	push   edi
c0021dfb:	56                   	push   esi
c0021dfc:	53                   	push   ebx
c0021dfd:	31 db                	xor    ebx,ebx
c0021dff:	83 ec 70             	sub    esp,0x70
c0021e02:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0021e09:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0021e0d:	50                   	push   eax
c0021e0e:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021e15:	55                   	push   ebp
c0021e16:	e8 a2 ff ff ff       	call   c0021dbd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021e1b:	83 c4 10             	add    esp,0x10
c0021e1e:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0021e23:	c1 e0 08             	shl    eax,0x8
c0021e26:	89 c2                	mov    edx,eax
c0021e28:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0021e2d:	09 d0                	or     eax,edx
c0021e2f:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0021e34:	c1 e0 08             	shl    eax,0x8
c0021e37:	09 d0                	or     eax,edx
c0021e39:	74 25                	je     c0021e60 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0021e3b:	6b fb 0d             	imul   edi,ebx,0xd
c0021e3e:	52                   	push   edx
c0021e3f:	8d 54 24 39          	lea    edx,[esp+0x39]
c0021e43:	52                   	push   edx
c0021e44:	50                   	push   eax
c0021e45:	55                   	push   ebp
c0021e46:	e8 72 ff ff ff       	call   c0021dbd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021e4b:	8d 74 24 49          	lea    esi,[esp+0x49]
c0021e4f:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0021e56:	b9 27 00 00 00       	mov    ecx,0x27
c0021e5b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021e5d:	83 c4 10             	add    esp,0x10
c0021e60:	83 c3 03             	add    ebx,0x3
c0021e63:	83 fb 15             	cmp    ebx,0x15
c0021e66:	75 b6                	jne    c0021e1e <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0021e68:	83 c4 6c             	add    esp,0x6c
c0021e6b:	5b                   	pop    ebx
c0021e6c:	5e                   	pop    esi
c0021e6d:	5f                   	pop    edi
c0021e6e:	5d                   	pop    ebp
c0021e6f:	c3                   	ret    

c0021e70 <CmEnterDirectory(Reghive_Tag*, int)>:
c0021e70:	83 ec 40             	sub    esp,0x40
c0021e73:	8d 44 24 09          	lea    eax,[esp+0x9]
c0021e77:	50                   	push   eax
c0021e78:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021e7c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021e80:	e8 38 ff ff ff       	call   c0021dbd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021e85:	83 c4 10             	add    esp,0x10
c0021e88:	83 c8 ff             	or     eax,0xffffffff
c0021e8b:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0021e90:	75 19                	jne    c0021eab <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0021e92:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0021e97:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0021e9c:	c1 e0 08             	shl    eax,0x8
c0021e9f:	09 c2                	or     edx,eax
c0021ea1:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0021ea6:	c1 e0 10             	shl    eax,0x10
c0021ea9:	09 d0                	or     eax,edx
c0021eab:	83 c4 3c             	add    esp,0x3c
c0021eae:	c3                   	ret    

c0021eaf <CmGetNext(Reghive_Tag*, int)>:
c0021eaf:	83 ec 40             	sub    esp,0x40
c0021eb2:	8d 44 24 09          	lea    eax,[esp+0x9]
c0021eb6:	50                   	push   eax
c0021eb7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021ebb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021ebf:	e8 f9 fe ff ff       	call   c0021dbd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021ec4:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0021ec9:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0021ece:	c1 e0 08             	shl    eax,0x8
c0021ed1:	09 c2                	or     edx,eax
c0021ed3:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0021ed8:	83 c4 4c             	add    esp,0x4c
c0021edb:	c1 e0 10             	shl    eax,0x10
c0021ede:	09 d0                	or     eax,edx
c0021ee0:	c3                   	ret    

c0021ee1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0021ee1:	53                   	push   ebx
c0021ee2:	83 ec 18             	sub    esp,0x18
c0021ee5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021ee9:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0021eed:	74 29                	je     c0021f18 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0021eef:	50                   	push   eax
c0021ef0:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0021ef5:	99                   	cdq    
c0021ef6:	52                   	push   edx
c0021ef7:	50                   	push   eax
c0021ef8:	ff 33                	push   DWORD PTR [ebx]
c0021efa:	e8 79 85 ff ff       	call   c001a478 <File::seek(unsigned long long)>
c0021eff:	5a                   	pop    edx
c0021f00:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021f02:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0021f06:	8b 10                	mov    edx,DWORD PTR [eax]
c0021f08:	51                   	push   ecx
c0021f09:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021f0d:	6a 00                	push   0x0
c0021f0f:	6a 2b                	push   0x2b
c0021f11:	50                   	push   eax
c0021f12:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0021f15:	83 c4 20             	add    esp,0x20
c0021f18:	83 c4 18             	add    esp,0x18
c0021f1b:	5b                   	pop    ebx
c0021f1c:	c3                   	ret    

c0021f1d <CmFreeExtent(Reghive_Tag*, int)>:
c0021f1d:	53                   	push   ebx
c0021f1e:	83 ec 3c             	sub    esp,0x3c
c0021f21:	6a 2b                	push   0x2b
c0021f23:	6a 00                	push   0x0
c0021f25:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0021f29:	53                   	push   ebx
c0021f2a:	e8 c1 e5 fd ff       	call   c00004f0 <memset>
c0021f2f:	83 c4 0c             	add    esp,0xc
c0021f32:	53                   	push   ebx
c0021f33:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f3b:	e8 a1 ff ff ff       	call   c0021ee1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0021f40:	83 c4 48             	add    esp,0x48
c0021f43:	5b                   	pop    ebx
c0021f44:	c3                   	ret    

c0021f45 <CmUpdateHeader(Reghive_Tag*)>:
c0021f45:	83 ec 0c             	sub    esp,0xc
c0021f48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f4c:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0021f50:	74 10                	je     c0021f62 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0021f52:	52                   	push   edx
c0021f53:	8d 50 05             	lea    edx,[eax+0x5]
c0021f56:	52                   	push   edx
c0021f57:	6a 00                	push   0x0
c0021f59:	50                   	push   eax
c0021f5a:	e8 82 ff ff ff       	call   c0021ee1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0021f5f:	83 c4 10             	add    esp,0x10
c0021f62:	83 c4 0c             	add    esp,0xc
c0021f65:	c3                   	ret    

c0021f66 <CmExpand(Reghive_Tag*, int)>:
c0021f66:	57                   	push   edi
c0021f67:	56                   	push   esi
c0021f68:	83 ce ff             	or     esi,0xffffffff
c0021f6b:	53                   	push   ebx
c0021f6c:	83 ec 30             	sub    esp,0x30
c0021f6f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0021f73:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0021f77:	74 5f                	je     c0021fd8 <CmExpand(Reghive_Tag*, int)+0x72>
c0021f79:	31 d2                	xor    edx,edx
c0021f7b:	31 f6                	xor    esi,esi
c0021f7d:	50                   	push   eax
c0021f7e:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0021f82:	52                   	push   edx
c0021f83:	50                   	push   eax
c0021f84:	ff 33                	push   DWORD PTR [ebx]
c0021f86:	e8 ed 84 ff ff       	call   c001a478 <File::seek(unsigned long long)>
c0021f8b:	83 c4 0c             	add    esp,0xc
c0021f8e:	6a 2b                	push   0x2b
c0021f90:	6a 00                	push   0x0
c0021f92:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0021f96:	57                   	push   edi
c0021f97:	e8 54 e5 fd ff       	call   c00004f0 <memset>
c0021f9c:	83 c4 10             	add    esp,0x10
c0021f9f:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0021fa3:	7d 1b                	jge    c0021fc0 <CmExpand(Reghive_Tag*, int)+0x5a>
c0021fa5:	83 ec 0c             	sub    esp,0xc
c0021fa8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021faa:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0021fae:	8b 10                	mov    edx,DWORD PTR [eax]
c0021fb0:	46                   	inc    esi
c0021fb1:	51                   	push   ecx
c0021fb2:	57                   	push   edi
c0021fb3:	6a 00                	push   0x0
c0021fb5:	6a 2b                	push   0x2b
c0021fb7:	50                   	push   eax
c0021fb8:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0021fbb:	83 c4 20             	add    esp,0x20
c0021fbe:	eb df                	jmp    c0021f9f <CmExpand(Reghive_Tag*, int)+0x39>
c0021fc0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0021fc4:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0021fc7:	83 ec 0c             	sub    esp,0xc
c0021fca:	01 f2                	add    edx,esi
c0021fcc:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0021fcf:	53                   	push   ebx
c0021fd0:	e8 70 ff ff ff       	call   c0021f45 <CmUpdateHeader(Reghive_Tag*)>
c0021fd5:	83 c4 10             	add    esp,0x10
c0021fd8:	83 c4 30             	add    esp,0x30
c0021fdb:	89 f0                	mov    eax,esi
c0021fdd:	5b                   	pop    ebx
c0021fde:	5e                   	pop    esi
c0021fdf:	5f                   	pop    edi
c0021fe0:	c3                   	ret    

c0021fe1 <CmFindUnusedExtent(Reghive_Tag*)>:
c0021fe1:	55                   	push   ebp
c0021fe2:	57                   	push   edi
c0021fe3:	56                   	push   esi
c0021fe4:	53                   	push   ebx
c0021fe5:	83 cb ff             	or     ebx,0xffffffff
c0021fe8:	83 ec 1c             	sub    esp,0x1c
c0021feb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0021fef:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0021ff3:	74 68                	je     c002205d <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0021ff5:	be 2b 00 00 00       	mov    esi,0x2b
c0021ffa:	51                   	push   ecx
c0021ffb:	31 ff                	xor    edi,edi
c0021ffd:	6a 00                	push   0x0
c0021fff:	31 db                	xor    ebx,ebx
c0022001:	6a 00                	push   0x0
c0022003:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0022006:	e8 6d 84 ff ff       	call   c001a478 <File::seek(unsigned long long)>
c002200b:	83 c4 10             	add    esp,0x10
c002200e:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0022011:	76 3b                	jbe    c002204e <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0022013:	83 ec 0c             	sub    esp,0xc
c0022016:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022019:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c002201d:	8b 10                	mov    edx,DWORD PTR [eax]
c002201f:	51                   	push   ecx
c0022020:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0022024:	51                   	push   ecx
c0022025:	6a 00                	push   0x0
c0022027:	6a 01                	push   0x1
c0022029:	50                   	push   eax
c002202a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002202d:	83 c4 20             	add    esp,0x20
c0022030:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0022035:	74 26                	je     c002205d <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0022037:	43                   	inc    ebx
c0022038:	52                   	push   edx
c0022039:	57                   	push   edi
c002203a:	56                   	push   esi
c002203b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c002203e:	e8 35 84 ff ff       	call   c001a478 <File::seek(unsigned long long)>
c0022043:	83 c6 2b             	add    esi,0x2b
c0022046:	83 d7 00             	adc    edi,0x0
c0022049:	83 c4 10             	add    esp,0x10
c002204c:	eb c0                	jmp    c002200e <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c002204e:	50                   	push   eax
c002204f:	50                   	push   eax
c0022050:	6a 40                	push   0x40
c0022052:	55                   	push   ebp
c0022053:	e8 0e ff ff ff       	call   c0021f66 <CmExpand(Reghive_Tag*, int)>
c0022058:	83 c4 10             	add    esp,0x10
c002205b:	89 c3                	mov    ebx,eax
c002205d:	83 c4 1c             	add    esp,0x1c
c0022060:	89 d8                	mov    eax,ebx
c0022062:	5b                   	pop    ebx
c0022063:	5e                   	pop    esi
c0022064:	5f                   	pop    edi
c0022065:	5d                   	pop    ebp
c0022066:	c3                   	ret    

c0022067 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0022067:	55                   	push   ebp
c0022068:	57                   	push   edi
c0022069:	56                   	push   esi
c002206a:	53                   	push   ebx
c002206b:	81 ec 88 00 00 00    	sub    esp,0x88
c0022071:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0022078:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c002207f:	e8 5d ff ff ff       	call   c0021fe1 <CmFindUnusedExtent(Reghive_Tag*)>
c0022084:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022088:	83 c4 0c             	add    esp,0xc
c002208b:	6a 2b                	push   0x2b
c002208d:	6a 00                	push   0x0
c002208f:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0022093:	55                   	push   ebp
c0022094:	e8 57 e4 fd ff       	call   c00004f0 <memset>
c0022099:	83 c4 10             	add    esp,0x10
c002209c:	85 db                	test   ebx,ebx
c002209e:	74 12                	je     c00220b2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00220a0:	51                   	push   ecx
c00220a1:	55                   	push   ebp
c00220a2:	53                   	push   ebx
c00220a3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00220aa:	e8 0e fd ff ff       	call   c0021dbd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00220af:	83 c4 10             	add    esp,0x10
c00220b2:	8d 7c 24 45          	lea    edi,[esp+0x45]
c00220b6:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00220bd:	b9 2b 00 00 00       	mov    ecx,0x2b
c00220c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00220c4:	85 db                	test   ebx,ebx
c00220c6:	74 49                	je     c0022111 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c00220c8:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c00220cd:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00220d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00220d6:	c1 e0 08             	shl    eax,0x8
c00220d9:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00220df:	09 c8                	or     eax,ecx
c00220e1:	74 11                	je     c00220f4 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c00220e3:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00220e7:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c00220eb:	c1 e8 10             	shr    eax,0x10
c00220ee:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00220f2:	eb 0f                	jmp    c0022103 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c00220f4:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00220f9:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00220fe:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0022103:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0022107:	c1 ea 08             	shr    edx,0x8
c002210a:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c002210f:	eb 0f                	jmp    c0022120 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0022111:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0022116:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c002211b:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0022120:	52                   	push   edx
c0022121:	8d 44 24 49          	lea    eax,[esp+0x49]
c0022125:	50                   	push   eax
c0022126:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002212a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022131:	e8 ab fd ff ff       	call   c0021ee1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022136:	83 c4 10             	add    esp,0x10
c0022139:	85 db                	test   ebx,ebx
c002213b:	74 12                	je     c002214f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c002213d:	50                   	push   eax
c002213e:	55                   	push   ebp
c002213f:	53                   	push   ebx
c0022140:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022147:	e8 95 fd ff ff       	call   c0021ee1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002214c:	83 c4 10             	add    esp,0x10
c002214f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022153:	83 c4 7c             	add    esp,0x7c
c0022156:	5b                   	pop    ebx
c0022157:	5e                   	pop    esi
c0022158:	5f                   	pop    edi
c0022159:	5d                   	pop    ebp
c002215a:	c3                   	ret    

c002215b <CmSetString(Reghive_Tag*, int, char const*)>:
c002215b:	55                   	push   ebp
c002215c:	57                   	push   edi
c002215d:	56                   	push   esi
c002215e:	53                   	push   ebx
c002215f:	bb 27 00 00 00       	mov    ebx,0x27
c0022164:	81 ec 88 00 00 00    	sub    esp,0x88
c002216a:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0022171:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0022178:	e8 f3 e3 fd ff       	call   c0000570 <strlen>
c002217d:	8d 48 26             	lea    ecx,[eax+0x26]
c0022180:	89 c8                	mov    eax,ecx
c0022182:	99                   	cdq    
c0022183:	f7 fb                	idiv   ebx
c0022185:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022189:	83 c4 10             	add    esp,0x10
c002218c:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0022192:	7e 10                	jle    c00221a4 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0022194:	83 ec 0c             	sub    esp,0xc
c0022197:	68 22 29 03 c0       	push   0xc0032922
c002219c:	e8 0d e0 ff ff       	call   c00201ae <KePanic(char const*)>
c00221a1:	83 c4 10             	add    esp,0x10
c00221a4:	31 ff                	xor    edi,edi
c00221a6:	50                   	push   eax
c00221a7:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00221ab:	53                   	push   ebx
c00221ac:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00221b3:	56                   	push   esi
c00221b4:	e8 04 fc ff ff       	call   c0021dbd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00221b9:	83 c4 10             	add    esp,0x10
c00221bc:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c00221c0:	89 d0                	mov    eax,edx
c00221c2:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c00221c6:	c1 e0 08             	shl    eax,0x8
c00221c9:	09 c2                	or     edx,eax
c00221cb:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c00221cf:	c1 e2 08             	shl    edx,0x8
c00221d2:	09 c2                	or     edx,eax
c00221d4:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00221d8:	7e 76                	jle    c0022250 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c00221da:	85 d2                	test   edx,edx
c00221dc:	75 25                	jne    c0022203 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c00221de:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c00221e3:	8d 44 24 45          	lea    eax,[esp+0x45]
c00221e7:	50                   	push   eax
c00221e8:	6a 00                	push   0x0
c00221ea:	6a 00                	push   0x0
c00221ec:	56                   	push   esi
c00221ed:	e8 75 fe ff ff       	call   c0022067 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00221f2:	83 c4 10             	add    esp,0x10
c00221f5:	89 c2                	mov    edx,eax
c00221f7:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c00221fa:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c00221fd:	c1 f8 10             	sar    eax,0x10
c0022200:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0022203:	55                   	push   ebp
c0022204:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0022208:	55                   	push   ebp
c0022209:	52                   	push   edx
c002220a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c002220e:	56                   	push   esi
c002220f:	e8 a9 fb ff ff       	call   c0021dbd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022214:	83 c4 0c             	add    esp,0xc
c0022217:	6a 27                	push   0x27
c0022219:	6a 00                	push   0x0
c002221b:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c002221f:	51                   	push   ecx
c0022220:	e8 cb e2 fd ff       	call   c00004f0 <memset>
c0022225:	83 c4 0c             	add    esp,0xc
c0022228:	6b c7 27             	imul   eax,edi,0x27
c002222b:	6a 27                	push   0x27
c002222d:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0022234:	50                   	push   eax
c0022235:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0022239:	51                   	push   ecx
c002223a:	e8 41 e4 fd ff       	call   c0000680 <strncpy>
c002223f:	83 c4 0c             	add    esp,0xc
c0022242:	55                   	push   ebp
c0022243:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022247:	52                   	push   edx
c0022248:	56                   	push   esi
c0022249:	e8 93 fc ff ff       	call   c0021ee1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002224e:	eb 19                	jmp    c0022269 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0022250:	85 d2                	test   edx,edx
c0022252:	74 18                	je     c002226c <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0022254:	51                   	push   ecx
c0022255:	51                   	push   ecx
c0022256:	52                   	push   edx
c0022257:	56                   	push   esi
c0022258:	e8 c0 fc ff ff       	call   c0021f1d <CmFreeExtent(Reghive_Tag*, int)>
c002225d:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0022261:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0022265:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022269:	83 c4 10             	add    esp,0x10
c002226c:	47                   	inc    edi
c002226d:	83 c3 03             	add    ebx,0x3
c0022270:	83 ff 07             	cmp    edi,0x7
c0022273:	0f 85 43 ff ff ff    	jne    c00221bc <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0022279:	50                   	push   eax
c002227a:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c002227e:	50                   	push   eax
c002227f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022286:	56                   	push   esi
c0022287:	e8 55 fc ff ff       	call   c0021ee1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002228c:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022292:	5b                   	pop    ebx
c0022293:	5e                   	pop    esi
c0022294:	5f                   	pop    edi
c0022295:	5d                   	pop    ebp
c0022296:	c3                   	ret    

c0022297 <CmGetMatch(char*, char*, bool, bool*)>:
c0022297:	56                   	push   esi
c0022298:	53                   	push   ebx
c0022299:	50                   	push   eax
c002229a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c002229e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00222a3:	74 25                	je     c00222ca <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00222a5:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00222a8:	31 db                	xor    ebx,ebx
c00222aa:	50                   	push   eax
c00222ab:	50                   	push   eax
c00222ac:	8d 04 9d 00 42 03 c0 	lea    eax,[ebx*4-0x3ffcbe00]
c00222b3:	50                   	push   eax
c00222b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222b8:	e8 93 e4 fd ff       	call   c0000750 <strcmp>
c00222bd:	83 c4 10             	add    esp,0x10
c00222c0:	85 c0                	test   eax,eax
c00222c2:	74 2e                	je     c00222f2 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00222c4:	43                   	inc    ebx
c00222c5:	83 fb 3f             	cmp    ebx,0x3f
c00222c8:	75 e0                	jne    c00222aa <CmGetMatch(char*, char*, bool, bool*)+0x13>
c00222ca:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00222cd:	31 db                	xor    ebx,ebx
c00222cf:	8d 04 9d 00 42 03 c0 	lea    eax,[ebx*4-0x3ffcbe00]
c00222d6:	51                   	push   ecx
c00222d7:	51                   	push   ecx
c00222d8:	50                   	push   eax
c00222d9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00222dd:	e8 6e e4 fd ff       	call   c0000750 <strcmp>
c00222e2:	83 c4 10             	add    esp,0x10
c00222e5:	85 c0                	test   eax,eax
c00222e7:	74 09                	je     c00222f2 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00222e9:	43                   	inc    ebx
c00222ea:	83 fb 3f             	cmp    ebx,0x3f
c00222ed:	75 e0                	jne    c00222cf <CmGetMatch(char*, char*, bool, bool*)+0x38>
c00222ef:	83 cb ff             	or     ebx,0xffffffff
c00222f2:	89 d8                	mov    eax,ebx
c00222f4:	5a                   	pop    edx
c00222f5:	5b                   	pop    ebx
c00222f6:	5e                   	pop    esi
c00222f7:	c3                   	ret    

c00222f8 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c00222f8:	55                   	push   ebp
c00222f9:	31 c0                	xor    eax,eax
c00222fb:	57                   	push   edi
c00222fc:	56                   	push   esi
c00222fd:	53                   	push   ebx
c00222fe:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022302:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0022306:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0022308:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002230c:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c002230f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022313:	83 fd 1f             	cmp    ebp,0x1f
c0022316:	7f 0b                	jg     c0022323 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0022318:	0f b6 c2             	movzx  eax,dl
c002231b:	d3 e0                	shl    eax,cl
c002231d:	09 07                	or     DWORD PTR [edi],eax
c002231f:	b0 01                	mov    al,0x1
c0022321:	01 33                	add    DWORD PTR [ebx],esi
c0022323:	5b                   	pop    ebx
c0022324:	5e                   	pop    esi
c0022325:	5f                   	pop    edi
c0022326:	5d                   	pop    ebp
c0022327:	c3                   	ret    

c0022328 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0022328:	57                   	push   edi
c0022329:	56                   	push   esi
c002232a:	53                   	push   ebx
c002232b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002232f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022333:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0022337:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c002233b:	39 0b                	cmp    DWORD PTR [ebx],ecx
c002233d:	7c 17                	jl     c0022356 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c002233f:	8b 17                	mov    edx,DWORD PTR [edi]
c0022341:	b8 01 00 00 00       	mov    eax,0x1
c0022346:	d3 e0                	shl    eax,cl
c0022348:	48                   	dec    eax
c0022349:	21 d0                	and    eax,edx
c002234b:	d3 ea                	shr    edx,cl
c002234d:	89 17                	mov    DWORD PTR [edi],edx
c002234f:	29 0b                	sub    DWORD PTR [ebx],ecx
c0022351:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0022354:	eb 05                	jmp    c002235b <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0022356:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022359:	31 c0                	xor    eax,eax
c002235b:	5b                   	pop    ebx
c002235c:	5e                   	pop    esi
c002235d:	5f                   	pop    edi
c002235e:	c3                   	ret    

c002235f <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c002235f:	83 ec 40             	sub    esp,0x40
c0022362:	8d 44 24 09          	lea    eax,[esp+0x9]
c0022366:	50                   	push   eax
c0022367:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002236b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002236f:	e8 49 fa ff ff       	call   c0021dbd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022374:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022378:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c002237c:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0022380:	89 10                	mov    DWORD PTR [eax],edx
c0022382:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0022385:	83 c4 4c             	add    esp,0x4c
c0022388:	c3                   	ret    

c0022389 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0022389:	55                   	push   ebp
c002238a:	57                   	push   edi
c002238b:	56                   	push   esi
c002238c:	53                   	push   ebx
c002238d:	83 ec 40             	sub    esp,0x40
c0022390:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0022394:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0022398:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c002239c:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00223a0:	53                   	push   ebx
c00223a1:	56                   	push   esi
c00223a2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00223a6:	e8 12 fa ff ff       	call   c0021dbd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00223ab:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c00223af:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c00223b3:	83 c4 0c             	add    esp,0xc
c00223b6:	53                   	push   ebx
c00223b7:	56                   	push   esi
c00223b8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00223bc:	e8 20 fb ff ff       	call   c0021ee1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00223c1:	83 c4 4c             	add    esp,0x4c
c00223c4:	5b                   	pop    ebx
c00223c5:	5e                   	pop    esi
c00223c6:	5f                   	pop    edi
c00223c7:	5d                   	pop    ebp
c00223c8:	c3                   	ret    

c00223c9 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c00223c9:	55                   	push   ebp
c00223ca:	57                   	push   edi
c00223cb:	56                   	push   esi
c00223cc:	31 f6                	xor    esi,esi
c00223ce:	53                   	push   ebx
c00223cf:	31 db                	xor    ebx,ebx
c00223d1:	83 ec 40             	sub    esp,0x40
c00223d4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00223dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00223e4:	6a 12                	push   0x12
c00223e6:	68 ee 00 00 00       	push   0xee
c00223eb:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00223ef:	e8 fc e0 fd ff       	call   c00004f0 <memset>
c00223f4:	83 c4 10             	add    esp,0x10
c00223f7:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00223fb:	6a 08                	push   0x8
c00223fd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0022401:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0022405:	50                   	push   eax
c0022406:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c002240a:	55                   	push   ebp
c002240b:	57                   	push   edi
c002240c:	e8 e7 fe ff ff       	call   c00222f8 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0022411:	83 c4 10             	add    esp,0x10
c0022414:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0022418:	50                   	push   eax
c0022419:	6a 06                	push   0x6
c002241b:	55                   	push   ebp
c002241c:	57                   	push   edi
c002241d:	e8 06 ff ff ff       	call   c0022328 <CmGetShift(unsigned int*, int*, int, bool*)>
c0022422:	83 c4 10             	add    esp,0x10
c0022425:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002242a:	74 07                	je     c0022433 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c002242c:	46                   	inc    esi
c002242d:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0022431:	eb e1                	jmp    c0022414 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0022433:	43                   	inc    ebx
c0022434:	83 fb 12             	cmp    ebx,0x12
c0022437:	75 c2                	jne    c00223fb <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0022439:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002243d:	31 db                	xor    ebx,ebx
c002243f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022442:	50                   	push   eax
c0022443:	50                   	push   eax
c0022444:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0022449:	43                   	inc    ebx
c002244a:	8d 04 85 00 42 03 c0 	lea    eax,[eax*4-0x3ffcbe00]
c0022451:	50                   	push   eax
c0022452:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0022456:	e8 e5 e3 fd ff       	call   c0000840 <strcat>
c002245b:	83 c4 10             	add    esp,0x10
c002245e:	83 fb 18             	cmp    ebx,0x18
c0022461:	75 df                	jne    c0022442 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0022463:	83 c4 3c             	add    esp,0x3c
c0022466:	31 c0                	xor    eax,eax
c0022468:	5b                   	pop    ebx
c0022469:	5e                   	pop    esi
c002246a:	5f                   	pop    edi
c002246b:	5d                   	pop    ebp
c002246c:	c3                   	ret    

c002246d <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c002246d:	83 ec 40             	sub    esp,0x40
c0022470:	8d 44 24 09          	lea    eax,[esp+0x9]
c0022474:	50                   	push   eax
c0022475:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022479:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002247d:	e8 3b f9 ff ff       	call   c0021dbd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022482:	58                   	pop    eax
c0022483:	5a                   	pop    edx
c0022484:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022488:	8d 44 24 15          	lea    eax,[esp+0x15]
c002248c:	50                   	push   eax
c002248d:	e8 37 ff ff ff       	call   c00223c9 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0022492:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0022497:	83 c4 4c             	add    esp,0x4c
c002249a:	c3                   	ret    

c002249b <CmConvertToInternalFilename(char const*, unsigned char*)>:
c002249b:	55                   	push   ebp
c002249c:	57                   	push   edi
c002249d:	56                   	push   esi
c002249e:	53                   	push   ebx
c002249f:	31 db                	xor    ebx,ebx
c00224a1:	83 ec 70             	sub    esp,0x70
c00224a4:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00224ab:	6a 30                	push   0x30
c00224ad:	6a 00                	push   0x0
c00224af:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00224b3:	56                   	push   esi
c00224b4:	e8 37 e0 fd ff       	call   c00004f0 <memset>
c00224b9:	83 c4 10             	add    esp,0x10
c00224bc:	83 ec 0c             	sub    esp,0xc
c00224bf:	57                   	push   edi
c00224c0:	e8 ab e0 fd ff       	call   c0000570 <strlen>
c00224c5:	83 c4 10             	add    esp,0x10
c00224c8:	39 d8                	cmp    eax,ebx
c00224ca:	76 16                	jbe    c00224e2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c00224cc:	83 ec 0c             	sub    esp,0xc
c00224cf:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00224d3:	50                   	push   eax
c00224d4:	e8 57 e4 fd ff       	call   c0000930 <toupper>
c00224d9:	83 c4 10             	add    esp,0x10
c00224dc:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00224df:	43                   	inc    ebx
c00224e0:	eb da                	jmp    c00224bc <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c00224e2:	31 f6                	xor    esi,esi
c00224e4:	52                   	push   edx
c00224e5:	31 ff                	xor    edi,edi
c00224e7:	6a 18                	push   0x18
c00224e9:	6a 3f                	push   0x3f
c00224eb:	8d 44 24 24          	lea    eax,[esp+0x24]
c00224ef:	50                   	push   eax
c00224f0:	e8 fb df fd ff       	call   c00004f0 <memset>
c00224f5:	83 c4 10             	add    esp,0x10
c00224f8:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c00224fc:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0022500:	84 c0                	test   al,al
c0022502:	0f 84 b0 00 00 00    	je     c00225b8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0022508:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c002250c:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0022511:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0022515:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c002251a:	8d 6e 01             	lea    ebp,[esi+0x1]
c002251d:	83 ec 0c             	sub    esp,0xc
c0022520:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0022524:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0022528:	53                   	push   ebx
c0022529:	e8 42 e0 fd ff       	call   c0000570 <strlen>
c002252e:	83 c4 10             	add    esp,0x10
c0022531:	85 c0                	test   eax,eax
c0022533:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0022537:	74 0b                	je     c0022544 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0022539:	50                   	push   eax
c002253a:	6a 01                	push   0x1
c002253c:	53                   	push   ebx
c002253d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0022541:	50                   	push   eax
c0022542:	eb 0a                	jmp    c002254e <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0022544:	50                   	push   eax
c0022545:	6a 00                	push   0x0
c0022547:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002254b:	50                   	push   eax
c002254c:	6a 00                	push   0x0
c002254e:	e8 44 fd ff ff       	call   c0022297 <CmGetMatch(char*, char*, bool, bool*)>
c0022553:	83 c4 10             	add    esp,0x10
c0022556:	83 f8 ff             	cmp    eax,0xffffffff
c0022559:	75 1a                	jne    c0022575 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c002255b:	83 ec 0c             	sub    esp,0xc
c002255e:	68 37 29 03 c0       	push   0xc0032937
c0022563:	e8 46 dc ff ff       	call   c00201ae <KePanic(char const*)>
c0022568:	83 c4 10             	add    esp,0x10
c002256b:	b8 02 00 00 00       	mov    eax,0x2
c0022570:	e9 bc 00 00 00       	jmp    c0022631 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0022575:	83 ff 18             	cmp    edi,0x18
c0022578:	75 1a                	jne    c0022594 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c002257a:	83 ec 0c             	sub    esp,0xc
c002257d:	68 4c 29 03 c0       	push   0xc003294c
c0022582:	e8 27 dc ff ff       	call   c00201ae <KePanic(char const*)>
c0022587:	83 c4 10             	add    esp,0x10
c002258a:	b8 01 00 00 00       	mov    eax,0x1
c002258f:	e9 9d 00 00 00       	jmp    c0022631 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0022594:	47                   	inc    edi
c0022595:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002259a:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c002259e:	74 02                	je     c00225a2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c00225a0:	89 ee                	mov    esi,ebp
c00225a2:	83 ec 0c             	sub    esp,0xc
c00225a5:	53                   	push   ebx
c00225a6:	e8 c5 df fd ff       	call   c0000570 <strlen>
c00225ab:	83 c4 10             	add    esp,0x10
c00225ae:	85 c0                	test   eax,eax
c00225b0:	74 06                	je     c00225b8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00225b2:	46                   	inc    esi
c00225b3:	e9 40 ff ff ff       	jmp    c00224f8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00225b8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00225c0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00225c8:	31 f6                	xor    esi,esi
c00225ca:	50                   	push   eax
c00225cb:	31 ff                	xor    edi,edi
c00225cd:	6a 12                	push   0x12
c00225cf:	68 ee 00 00 00       	push   0xee
c00225d4:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00225db:	e8 10 df fd ff       	call   c00004f0 <memset>
c00225e0:	83 c4 10             	add    esp,0x10
c00225e3:	83 fe 17             	cmp    esi,0x17
c00225e6:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00225ea:	7e 26                	jle    c0022612 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c00225ec:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00225f0:	50                   	push   eax
c00225f1:	6a 08                	push   0x8
c00225f3:	55                   	push   ebp
c00225f4:	53                   	push   ebx
c00225f5:	e8 2e fd ff ff       	call   c0022328 <CmGetShift(unsigned int*, int*, int, bool*)>
c00225fa:	83 c4 10             	add    esp,0x10
c00225fd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0022602:	74 26                	je     c002262a <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c0022604:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c002260b:	4e                   	dec    esi
c002260c:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c002260f:	47                   	inc    edi
c0022610:	eb 1c                	jmp    c002262e <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0022612:	6a 06                	push   0x6
c0022614:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c0022619:	50                   	push   eax
c002261a:	55                   	push   ebp
c002261b:	53                   	push   ebx
c002261c:	e8 d7 fc ff ff       	call   c00222f8 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0022621:	83 c4 10             	add    esp,0x10
c0022624:	84 c0                	test   al,al
c0022626:	75 06                	jne    c002262e <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0022628:	eb c2                	jmp    c00225ec <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c002262a:	31 c0                	xor    eax,eax
c002262c:	eb 03                	jmp    c0022631 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c002262e:	46                   	inc    esi
c002262f:	eb b2                	jmp    c00225e3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c0022631:	83 c4 6c             	add    esp,0x6c
c0022634:	5b                   	pop    ebx
c0022635:	5e                   	pop    esi
c0022636:	5f                   	pop    edi
c0022637:	5d                   	pop    ebp
c0022638:	c3                   	ret    

c0022639 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0022639:	53                   	push   ebx
c002263a:	83 ec 3c             	sub    esp,0x3c
c002263d:	6a 2b                	push   0x2b
c002263f:	6a 00                	push   0x0
c0022641:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022645:	53                   	push   ebx
c0022646:	e8 a5 de fd ff       	call   c00004f0 <memset>
c002264b:	58                   	pop    eax
c002264c:	5a                   	pop    edx
c002264d:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022651:	50                   	push   eax
c0022652:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022656:	e8 40 fe ff ff       	call   c002249b <CmConvertToInternalFilename(char const*, unsigned char*)>
c002265b:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0022660:	83 c4 0c             	add    esp,0xc
c0022663:	6a 15                	push   0x15
c0022665:	6a 00                	push   0x0
c0022667:	8d 44 24 27          	lea    eax,[esp+0x27]
c002266b:	50                   	push   eax
c002266c:	e8 7f de fd ff       	call   c00004f0 <memset>
c0022671:	53                   	push   ebx
c0022672:	6a 00                	push   0x0
c0022674:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022678:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002267c:	e8 e6 f9 ff ff       	call   c0022067 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022681:	83 c4 58             	add    esp,0x58
c0022684:	5b                   	pop    ebx
c0022685:	c3                   	ret    

c0022686 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0022686:	56                   	push   esi
c0022687:	53                   	push   ebx
c0022688:	83 ec 48             	sub    esp,0x48
c002268b:	6a 12                	push   0x12
c002268d:	68 ff 00 00 00       	push   0xff
c0022692:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0022696:	56                   	push   esi
c0022697:	e8 54 de fd ff       	call   c00004f0 <memset>
c002269c:	5a                   	pop    edx
c002269d:	59                   	pop    ecx
c002269e:	56                   	push   esi
c002269f:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00226a3:	e8 f3 fd ff ff       	call   c002249b <CmConvertToInternalFilename(char const*, unsigned char*)>
c00226a8:	83 c4 10             	add    esp,0x10
c00226ab:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00226af:	85 db                	test   ebx,ebx
c00226b1:	74 42                	je     c00226f5 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00226b3:	50                   	push   eax
c00226b4:	8d 44 24 19          	lea    eax,[esp+0x19]
c00226b8:	50                   	push   eax
c00226b9:	53                   	push   ebx
c00226ba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00226be:	e8 fa f6 ff ff       	call   c0021dbd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00226c3:	83 c4 0c             	add    esp,0xc
c00226c6:	6a 12                	push   0x12
c00226c8:	8d 44 24 21          	lea    eax,[esp+0x21]
c00226cc:	50                   	push   eax
c00226cd:	56                   	push   esi
c00226ce:	e8 ad dc fd ff       	call   c0000380 <memcmp>
c00226d3:	83 c4 10             	add    esp,0x10
c00226d6:	85 c0                	test   eax,eax
c00226d8:	74 1e                	je     c00226f8 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00226da:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00226df:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00226e4:	c1 e3 08             	shl    ebx,0x8
c00226e7:	09 d8                	or     eax,ebx
c00226e9:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00226ee:	c1 e3 10             	shl    ebx,0x10
c00226f1:	09 c3                	or     ebx,eax
c00226f3:	eb ba                	jmp    c00226af <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00226f5:	83 cb ff             	or     ebx,0xffffffff
c00226f8:	89 d8                	mov    eax,ebx
c00226fa:	83 c4 44             	add    esp,0x44
c00226fd:	5b                   	pop    ebx
c00226fe:	5e                   	pop    esi
c00226ff:	c3                   	ret    

c0022700 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0022700:	57                   	push   edi
c0022701:	56                   	push   esi
c0022702:	53                   	push   ebx
c0022703:	83 ec 34             	sub    esp,0x34
c0022706:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002270a:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002270e:	6a 2b                	push   0x2b
c0022710:	6a 00                	push   0x0
c0022712:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022716:	53                   	push   ebx
c0022717:	e8 d4 dd fd ff       	call   c00004f0 <memset>
c002271c:	58                   	pop    eax
c002271d:	5a                   	pop    edx
c002271e:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022722:	50                   	push   eax
c0022723:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022727:	e8 6f fd ff ff       	call   c002249b <CmConvertToInternalFilename(char const*, unsigned char*)>
c002272c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0022730:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0022734:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0022738:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c002273c:	53                   	push   ebx
c002273d:	6a 00                	push   0x0
c002273f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022743:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022747:	e8 1b f9 ff ff       	call   c0022067 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c002274c:	83 c4 50             	add    esp,0x50
c002274f:	5b                   	pop    ebx
c0022750:	5e                   	pop    esi
c0022751:	5f                   	pop    edi
c0022752:	c3                   	ret    

c0022753 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0022753:	55                   	push   ebp
c0022754:	57                   	push   edi
c0022755:	56                   	push   esi
c0022756:	53                   	push   ebx
c0022757:	83 ec 40             	sub    esp,0x40
c002275a:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c002275e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0022762:	6a 2b                	push   0x2b
c0022764:	6a 00                	push   0x0
c0022766:	8d 74 24 11          	lea    esi,[esp+0x11]
c002276a:	56                   	push   esi
c002276b:	e8 80 dd fd ff       	call   c00004f0 <memset>
c0022770:	5f                   	pop    edi
c0022771:	89 ef                	mov    edi,ebp
c0022773:	58                   	pop    eax
c0022774:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022778:	50                   	push   eax
c0022779:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c002277d:	e8 19 fd ff ff       	call   c002249b <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022782:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0022787:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c002278c:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0022791:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0022796:	83 c4 10             	add    esp,0x10
c0022799:	85 ed                	test   ebp,ebp
c002279b:	74 14                	je     c00227b1 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c002279d:	51                   	push   ecx
c002279e:	51                   	push   ecx
c002279f:	57                   	push   edi
c00227a0:	53                   	push   ebx
c00227a1:	e8 09 f7 ff ff       	call   c0021eaf <CmGetNext(Reghive_Tag*, int)>
c00227a6:	83 c4 10             	add    esp,0x10
c00227a9:	85 c0                	test   eax,eax
c00227ab:	74 04                	je     c00227b1 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00227ad:	89 c7                	mov    edi,eax
c00227af:	eb e8                	jmp    c0022799 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00227b1:	56                   	push   esi
c00227b2:	6a 00                	push   0x0
c00227b4:	57                   	push   edi
c00227b5:	53                   	push   ebx
c00227b6:	e8 ac f8 ff ff       	call   c0022067 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00227bb:	83 c4 0c             	add    esp,0xc
c00227be:	89 c7                	mov    edi,eax
c00227c0:	56                   	push   esi
c00227c1:	50                   	push   eax
c00227c2:	53                   	push   ebx
c00227c3:	e8 f5 f5 ff ff       	call   c0021dbd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00227c8:	58                   	pop    eax
c00227c9:	5a                   	pop    edx
c00227ca:	6a 6c                	push   0x6c
c00227cc:	6a 00                	push   0x0
c00227ce:	6a 00                	push   0x0
c00227d0:	68 5d 29 03 c0       	push   0xc003295d
c00227d5:	57                   	push   edi
c00227d6:	53                   	push   ebx
c00227d7:	e8 24 ff ff ff       	call   c0022700 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00227dc:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00227e0:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00227e4:	c1 e8 10             	shr    eax,0x10
c00227e7:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00227eb:	83 c4 1c             	add    esp,0x1c
c00227ee:	56                   	push   esi
c00227ef:	57                   	push   edi
c00227f0:	53                   	push   ebx
c00227f1:	e8 eb f6 ff ff       	call   c0021ee1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00227f6:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00227fb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022800:	c1 e0 08             	shl    eax,0x8
c0022803:	09 c2                	or     edx,eax
c0022805:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002280a:	83 c4 4c             	add    esp,0x4c
c002280d:	c1 e0 10             	shl    eax,0x10
c0022810:	5b                   	pop    ebx
c0022811:	09 d0                	or     eax,edx
c0022813:	5e                   	pop    esi
c0022814:	5f                   	pop    edi
c0022815:	5d                   	pop    ebp
c0022816:	c3                   	ret    

c0022817 <zStrtok(char*, char const*)>:
c0022817:	55                   	push   ebp
c0022818:	57                   	push   edi
c0022819:	56                   	push   esi
c002281a:	53                   	push   ebx
c002281b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002281f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022823:	85 db                	test   ebx,ebx
c0022825:	74 2f                	je     c0022856 <zStrtok(char*, char const*)+0x3f>
c0022827:	85 c0                	test   eax,eax
c0022829:	75 09                	jne    c0022834 <zStrtok(char*, char const*)+0x1d>
c002282b:	a1 f0 f9 03 c0       	mov    eax,ds:0xc003f9f0
c0022830:	85 c0                	test   eax,eax
c0022832:	74 50                	je     c0022884 <zStrtok(char*, char const*)+0x6d>
c0022834:	31 c9                	xor    ecx,ecx
c0022836:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c002283a:	74 03                	je     c002283f <zStrtok(char*, char const*)+0x28>
c002283c:	41                   	inc    ecx
c002283d:	eb f7                	jmp    c0022836 <zStrtok(char*, char const*)+0x1f>
c002283f:	31 d2                	xor    edx,edx
c0022841:	39 ca                	cmp    edx,ecx
c0022843:	74 15                	je     c002285a <zStrtok(char*, char const*)+0x43>
c0022845:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0022849:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c002284c:	8d 3c 10             	lea    edi,[eax+edx*1]
c002284f:	39 ee                	cmp    esi,ebp
c0022851:	74 13                	je     c0022866 <zStrtok(char*, char const*)+0x4f>
c0022853:	42                   	inc    edx
c0022854:	eb eb                	jmp    c0022841 <zStrtok(char*, char const*)+0x2a>
c0022856:	31 c0                	xor    eax,eax
c0022858:	eb 2a                	jmp    c0022884 <zStrtok(char*, char const*)+0x6d>
c002285a:	c7 05 f0 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9f0,0x0
c0022864:	eb 1e                	jmp    c0022884 <zStrtok(char*, char const*)+0x6d>
c0022866:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0022869:	39 ce                	cmp    esi,ecx
c002286b:	75 0a                	jne    c0022877 <zStrtok(char*, char const*)+0x60>
c002286d:	40                   	inc    eax
c002286e:	a3 f0 f9 03 c0       	mov    ds:0xc003f9f0,eax
c0022873:	89 d8                	mov    eax,ebx
c0022875:	eb 0d                	jmp    c0022884 <zStrtok(char*, char const*)+0x6d>
c0022877:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c002287b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c002287e:	89 15 f0 f9 03 c0    	mov    DWORD PTR ds:0xc003f9f0,edx
c0022884:	5b                   	pop    ebx
c0022885:	5e                   	pop    esi
c0022886:	5f                   	pop    edi
c0022887:	5d                   	pop    ebp
c0022888:	c3                   	ret    

c0022889 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0022889:	57                   	push   edi
c002288a:	56                   	push   esi
c002288b:	53                   	push   ebx
c002288c:	81 ec 08 01 00 00    	sub    esp,0x108
c0022892:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0022899:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00228a0:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00228a4:	53                   	push   ebx
c00228a5:	e8 96 dd fd ff       	call   c0000640 <strcpy>
c00228aa:	59                   	pop    ecx
c00228ab:	5e                   	pop    esi
c00228ac:	68 ff 2c 03 c0       	push   0xc0032cff
c00228b1:	53                   	push   ebx
c00228b2:	bb 01 00 00 00       	mov    ebx,0x1
c00228b7:	e8 5b ff ff ff       	call   c0022817 <zStrtok(char*, char const*)>
c00228bc:	83 c4 10             	add    esp,0x10
c00228bf:	85 c0                	test   eax,eax
c00228c1:	74 3b                	je     c00228fe <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00228c3:	52                   	push   edx
c00228c4:	50                   	push   eax
c00228c5:	6a 01                	push   0x1
c00228c7:	57                   	push   edi
c00228c8:	e8 b9 fd ff ff       	call   c0022686 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00228cd:	59                   	pop    ecx
c00228ce:	89 c3                	mov    ebx,eax
c00228d0:	5e                   	pop    esi
c00228d1:	68 ff 2c 03 c0       	push   0xc0032cff
c00228d6:	6a 00                	push   0x0
c00228d8:	e8 3a ff ff ff       	call   c0022817 <zStrtok(char*, char const*)>
c00228dd:	83 c4 10             	add    esp,0x10
c00228e0:	89 c6                	mov    esi,eax
c00228e2:	85 c0                	test   eax,eax
c00228e4:	74 18                	je     c00228fe <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00228e6:	52                   	push   edx
c00228e7:	52                   	push   edx
c00228e8:	53                   	push   ebx
c00228e9:	57                   	push   edi
c00228ea:	e8 81 f5 ff ff       	call   c0021e70 <CmEnterDirectory(Reghive_Tag*, int)>
c00228ef:	83 c4 10             	add    esp,0x10
c00228f2:	89 c3                	mov    ebx,eax
c00228f4:	83 f8 ff             	cmp    eax,0xffffffff
c00228f7:	74 05                	je     c00228fe <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00228f9:	50                   	push   eax
c00228fa:	56                   	push   esi
c00228fb:	53                   	push   ebx
c00228fc:	eb c9                	jmp    c00228c7 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00228fe:	81 c4 00 01 00 00    	add    esp,0x100
c0022904:	89 d8                	mov    eax,ebx
c0022906:	5b                   	pop    ebx
c0022907:	5e                   	pop    esi
c0022908:	5f                   	pop    edi
c0022909:	c3                   	ret    

c002290a <CmDisplayTree(Reghive_Tag*, int, int)>:
c002290a:	55                   	push   ebp
c002290b:	57                   	push   edi
c002290c:	56                   	push   esi
c002290d:	53                   	push   ebx
c002290e:	83 ec 5c             	sub    esp,0x5c
c0022911:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0022915:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0022919:	85 db                	test   ebx,ebx
c002291b:	0f 8e 84 00 00 00    	jle    c00229a5 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0022921:	31 ed                	xor    ebp,ebp
c0022923:	57                   	push   edi
c0022924:	6a 32                	push   0x32
c0022926:	6a 00                	push   0x0
c0022928:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c002292c:	57                   	push   edi
c002292d:	e8 be db fd ff       	call   c00004f0 <memset>
c0022932:	83 c4 0c             	add    esp,0xc
c0022935:	57                   	push   edi
c0022936:	53                   	push   ebx
c0022937:	56                   	push   esi
c0022938:	e8 30 fb ff ff       	call   c002246d <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c002293d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022941:	83 c4 10             	add    esp,0x10
c0022944:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0022948:	7d 13                	jge    c002295d <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c002294a:	83 ec 0c             	sub    esp,0xc
c002294d:	45                   	inc    ebp
c002294e:	68 83 30 03 c0       	push   0xc0033083
c0022953:	e8 3d 68 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0022958:	83 c4 10             	add    esp,0x10
c002295b:	eb e7                	jmp    c0022944 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c002295d:	51                   	push   ecx
c002295e:	57                   	push   edi
c002295f:	53                   	push   ebx
c0022960:	68 63 29 03 c0       	push   0xc0032963
c0022965:	e8 2b 68 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c002296a:	83 c4 10             	add    esp,0x10
c002296d:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0022972:	75 1e                	jne    c0022992 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0022974:	52                   	push   edx
c0022975:	52                   	push   edx
c0022976:	53                   	push   ebx
c0022977:	56                   	push   esi
c0022978:	e8 f3 f4 ff ff       	call   c0021e70 <CmEnterDirectory(Reghive_Tag*, int)>
c002297d:	83 c4 0c             	add    esp,0xc
c0022980:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0022984:	8d 51 04             	lea    edx,[ecx+0x4]
c0022987:	52                   	push   edx
c0022988:	50                   	push   eax
c0022989:	56                   	push   esi
c002298a:	e8 7b ff ff ff       	call   c002290a <CmDisplayTree(Reghive_Tag*, int, int)>
c002298f:	83 c4 10             	add    esp,0x10
c0022992:	50                   	push   eax
c0022993:	50                   	push   eax
c0022994:	53                   	push   ebx
c0022995:	56                   	push   esi
c0022996:	e8 14 f5 ff ff       	call   c0021eaf <CmGetNext(Reghive_Tag*, int)>
c002299b:	83 c4 10             	add    esp,0x10
c002299e:	89 c3                	mov    ebx,eax
c00229a0:	e9 74 ff ff ff       	jmp    c0022919 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c00229a5:	83 c4 5c             	add    esp,0x5c
c00229a8:	5b                   	pop    ebx
c00229a9:	5e                   	pop    esi
c00229aa:	5f                   	pop    edi
c00229ab:	5d                   	pop    ebp
c00229ac:	c3                   	ret    

c00229ad <CmSplitFinalSlashInPlace(char*)>:
c00229ad:	53                   	push   ebx
c00229ae:	83 ec 14             	sub    esp,0x14
c00229b1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00229b5:	53                   	push   ebx
c00229b6:	e8 b5 db fd ff       	call   c0000570 <strlen>
c00229bb:	83 c4 10             	add    esp,0x10
c00229be:	48                   	dec    eax
c00229bf:	85 c0                	test   eax,eax
c00229c1:	74 15                	je     c00229d8 <CmSplitFinalSlashInPlace(char*)+0x2b>
c00229c3:	8d 14 03             	lea    edx,[ebx+eax*1]
c00229c6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00229ca:	75 09                	jne    c00229d5 <CmSplitFinalSlashInPlace(char*)+0x28>
c00229cc:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00229cf:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00229d3:	eb 05                	jmp    c00229da <CmSplitFinalSlashInPlace(char*)+0x2d>
c00229d5:	48                   	dec    eax
c00229d6:	eb e7                	jmp    c00229bf <CmSplitFinalSlashInPlace(char*)+0x12>
c00229d8:	31 c0                	xor    eax,eax
c00229da:	83 c4 08             	add    esp,0x8
c00229dd:	5b                   	pop    ebx
c00229de:	c3                   	ret    

c00229df <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00229df:	55                   	push   ebp
c00229e0:	57                   	push   edi
c00229e1:	56                   	push   esi
c00229e2:	53                   	push   ebx
c00229e3:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00229e9:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c00229f0:	8a 13                	mov    dl,BYTE PTR [ebx]
c00229f2:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00229f5:	80 fa 40             	cmp    dl,0x40
c00229f8:	75 1c                	jne    c0022a16 <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c00229fa:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c00229fd:	85 c9                	test   ecx,ecx
c00229ff:	0f 84 09 01 00 00    	je     c0022b0e <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022a05:	8d 43 01             	lea    eax,[ebx+0x1]
c0022a08:	83 f9 3a             	cmp    ecx,0x3a
c0022a0b:	74 04                	je     c0022a11 <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0022a0d:	89 c3                	mov    ebx,eax
c0022a0f:	eb e9                	jmp    c00229fa <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0022a11:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0022a14:	89 c3                	mov    ebx,eax
c0022a16:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0022a1a:	50                   	push   eax
c0022a1b:	6a 40                	push   0x40
c0022a1d:	6a 00                	push   0x0
c0022a1f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022a23:	50                   	push   eax
c0022a24:	e8 c7 da fd ff       	call   c00004f0 <memset>
c0022a29:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0022a30:	31 c0                	xor    eax,eax
c0022a32:	83 c4 10             	add    esp,0x10
c0022a35:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0022a3a:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0022a3d:	89 d1                	mov    ecx,edx
c0022a3f:	85 d2                	test   edx,edx
c0022a41:	0f 84 c7 00 00 00    	je     c0022b0e <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022a47:	3d c7 00 00 00       	cmp    eax,0xc7
c0022a4c:	0f 8f bc 00 00 00    	jg     c0022b0e <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022a52:	83 fa 0a             	cmp    edx,0xa
c0022a55:	0f 85 a4 00 00 00    	jne    c0022aff <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0022a5b:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0022a60:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0022a65:	89 c8                	mov    eax,ecx
c0022a67:	a8 df                	test   al,0xdf
c0022a69:	0f 94 c2             	sete   dl
c0022a6c:	83 f9 23             	cmp    ecx,0x23
c0022a6f:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0022a74:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0022a78:	80 e2 01             	and    dl,0x1
c0022a7b:	75 4a                	jne    c0022ac7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022a7d:	83 e8 09             	sub    eax,0x9
c0022a80:	3c 01                	cmp    al,0x1
c0022a82:	76 43                	jbe    c0022ac7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022a84:	83 f9 5b             	cmp    ecx,0x5b
c0022a87:	75 42                	jne    c0022acb <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0022a89:	83 fe 40             	cmp    esi,0x40
c0022a8c:	75 39                	jne    c0022ac7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022a8e:	83 ec 0c             	sub    esp,0xc
c0022a91:	8d 54 24 65          	lea    edx,[esp+0x65]
c0022a95:	52                   	push   edx
c0022a96:	e8 d5 da fd ff       	call   c0000570 <strlen>
c0022a9b:	83 c4 10             	add    esp,0x10
c0022a9e:	83 f8 3f             	cmp    eax,0x3f
c0022aa1:	77 6b                	ja     c0022b0e <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022aa3:	50                   	push   eax
c0022aa4:	50                   	push   eax
c0022aa5:	8d 54 24 61          	lea    edx,[esp+0x61]
c0022aa9:	52                   	push   edx
c0022aaa:	8d 54 24 24          	lea    edx,[esp+0x24]
c0022aae:	52                   	push   edx
c0022aaf:	e8 8c db fd ff       	call   c0000640 <strcpy>
c0022ab4:	58                   	pop    eax
c0022ab5:	8d 54 24 24          	lea    edx,[esp+0x24]
c0022ab9:	52                   	push   edx
c0022aba:	e8 b1 da fd ff       	call   c0000570 <strlen>
c0022abf:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0022ac4:	83 c4 10             	add    esp,0x10
c0022ac7:	31 d2                	xor    edx,edx
c0022ac9:	eb 3b                	jmp    c0022b06 <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0022acb:	83 fe 40             	cmp    esi,0x40
c0022ace:	74 06                	je     c0022ad6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0022ad0:	8d 44 24 58          	lea    eax,[esp+0x58]
c0022ad4:	eb 20                	jmp    c0022af6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0022ad6:	50                   	push   eax
c0022ad7:	50                   	push   eax
c0022ad8:	55                   	push   ebp
c0022ad9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022add:	50                   	push   eax
c0022ade:	e8 6d dc fd ff       	call   c0000750 <strcmp>
c0022ae3:	83 c4 10             	add    esp,0x10
c0022ae6:	85 c0                	test   eax,eax
c0022ae8:	75 dd                	jne    c0022ac7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022aea:	eb e4                	jmp    c0022ad0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0022aec:	8d 50 01             	lea    edx,[eax+0x1]
c0022aef:	83 f9 3d             	cmp    ecx,0x3d
c0022af2:	74 1e                	je     c0022b12 <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0022af4:	89 d0                	mov    eax,edx
c0022af6:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0022af9:	85 c9                	test   ecx,ecx
c0022afb:	75 ef                	jne    c0022aec <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0022afd:	eb 0f                	jmp    c0022b0e <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022aff:	8d 50 01             	lea    edx,[eax+0x1]
c0022b02:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0022b06:	47                   	inc    edi
c0022b07:	89 d0                	mov    eax,edx
c0022b09:	e9 2c ff ff ff       	jmp    c0022a3a <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0022b0e:	31 c0                	xor    eax,eax
c0022b10:	eb 33                	jmp    c0022b45 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0022b12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022b16:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022b19:	50                   	push   eax
c0022b1a:	50                   	push   eax
c0022b1b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0022b1f:	50                   	push   eax
c0022b20:	53                   	push   ebx
c0022b21:	e8 2a dc fd ff       	call   c0000750 <strcmp>
c0022b26:	83 c4 10             	add    esp,0x10
c0022b29:	85 c0                	test   eax,eax
c0022b2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022b2f:	75 96                	jne    c0022ac7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022b31:	51                   	push   ecx
c0022b32:	51                   	push   ecx
c0022b33:	52                   	push   edx
c0022b34:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0022b3b:	e8 00 db fd ff       	call   c0000640 <strcpy>
c0022b40:	83 c4 10             	add    esp,0x10
c0022b43:	b0 01                	mov    al,0x1
c0022b45:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022b4b:	5b                   	pop    ebx
c0022b4c:	5e                   	pop    esi
c0022b4d:	5f                   	pop    edi
c0022b4e:	5d                   	pop    ebp
c0022b4f:	c3                   	ret    

c0022b50 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0022b50:	57                   	push   edi
c0022b51:	56                   	push   esi
c0022b52:	53                   	push   ebx
c0022b53:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022b59:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0022b60:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0022b67:	53                   	push   ebx
c0022b68:	e8 03 da fd ff       	call   c0000570 <strlen>
c0022b6d:	89 34 24             	mov    DWORD PTR [esp],esi
c0022b70:	89 c7                	mov    edi,eax
c0022b72:	e8 f9 d9 fd ff       	call   c0000570 <strlen>
c0022b77:	83 c4 10             	add    esp,0x10
c0022b7a:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0022b7e:	3d ff 00 00 00       	cmp    eax,0xff
c0022b83:	0f 87 d3 00 00 00    	ja     c0022c5c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0022b89:	57                   	push   edi
c0022b8a:	57                   	push   edi
c0022b8b:	56                   	push   esi
c0022b8c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0022b90:	56                   	push   esi
c0022b91:	e8 aa da fd ff       	call   c0000640 <strcpy>
c0022b96:	58                   	pop    eax
c0022b97:	5a                   	pop    edx
c0022b98:	68 ff 2c 03 c0       	push   0xc0032cff
c0022b9d:	56                   	push   esi
c0022b9e:	e8 9d dc fd ff       	call   c0000840 <strcat>
c0022ba3:	59                   	pop    ecx
c0022ba4:	5f                   	pop    edi
c0022ba5:	53                   	push   ebx
c0022ba6:	56                   	push   esi
c0022ba7:	e8 94 dc fd ff       	call   c0000840 <strcat>
c0022bac:	58                   	pop    eax
c0022bad:	5a                   	pop    edx
c0022bae:	68 6d 29 03 c0       	push   0xc003296d
c0022bb3:	56                   	push   esi
c0022bb4:	e8 87 dc fd ff       	call   c0000840 <strcat>
c0022bb9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0022bc0:	e8 41 37 ff ff       	call   c0016306 <malloc>
c0022bc5:	83 c4 0c             	add    esp,0xc
c0022bc8:	89 c3                	mov    ebx,eax
c0022bca:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0022bd0:	56                   	push   esi
c0022bd1:	50                   	push   eax
c0022bd2:	e8 c5 77 ff ff       	call   c001a39c <File::File(char const*, Process*)>
c0022bd7:	83 c4 10             	add    esp,0x10
c0022bda:	85 db                	test   ebx,ebx
c0022bdc:	74 7e                	je     c0022c5c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0022bde:	51                   	push   ecx
c0022bdf:	51                   	push   ecx
c0022be0:	6a 01                	push   0x1
c0022be2:	53                   	push   ebx
c0022be3:	e8 d2 77 ff ff       	call   c001a3ba <File::open(FileOpenMode)>
c0022be8:	83 c4 10             	add    esp,0x10
c0022beb:	85 c0                	test   eax,eax
c0022bed:	74 08                	je     c0022bf7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0022bef:	83 ec 0c             	sub    esp,0xc
c0022bf2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022bf4:	53                   	push   ebx
c0022bf5:	eb 5f                	jmp    c0022c56 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0022bf7:	52                   	push   edx
c0022bf8:	8d 44 24 17          	lea    eax,[esp+0x17]
c0022bfc:	50                   	push   eax
c0022bfd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0022c01:	50                   	push   eax
c0022c02:	53                   	push   ebx
c0022c03:	e8 b4 7a ff ff       	call   c001a6bc <File::stat(unsigned long long*, bool*)>
c0022c08:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0022c0c:	83 c4 10             	add    esp,0x10
c0022c0f:	89 c1                	mov    ecx,eax
c0022c11:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0022c15:	74 31                	je     c0022c48 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0022c17:	83 ec 0c             	sub    esp,0xc
c0022c1a:	50                   	push   eax
c0022c1b:	e8 e6 36 ff ff       	call   c0016306 <malloc>
c0022c20:	89 c6                	mov    esi,eax
c0022c22:	58                   	pop    eax
c0022c23:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022c25:	8d 54 24 20          	lea    edx,[esp+0x20]
c0022c29:	52                   	push   edx
c0022c2a:	56                   	push   esi
c0022c2b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0022c2f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0022c33:	53                   	push   ebx
c0022c34:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0022c37:	83 c4 20             	add    esp,0x20
c0022c3a:	85 c0                	test   eax,eax
c0022c3c:	75 0a                	jne    c0022c48 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0022c3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022c42:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0022c46:	74 18                	je     c0022c60 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0022c48:	83 ec 0c             	sub    esp,0xc
c0022c4b:	53                   	push   ebx
c0022c4c:	e8 c7 77 ff ff       	call   c001a418 <File::close()>
c0022c51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022c53:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022c56:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022c59:	83 c4 10             	add    esp,0x10
c0022c5c:	31 c0                	xor    eax,eax
c0022c5e:	eb 3b                	jmp    c0022c9b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0022c60:	83 ec 0c             	sub    esp,0xc
c0022c63:	53                   	push   ebx
c0022c64:	e8 af 77 ff ff       	call   c001a418 <File::close()>
c0022c69:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022c6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022c6e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022c71:	83 c4 0c             	add    esp,0xc
c0022c74:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022c7b:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022c82:	56                   	push   esi
c0022c83:	e8 57 fd ff ff       	call   c00229df <Reg::findLineFromLoadedData(char*, char*, char*)>
c0022c88:	89 34 24             	mov    DWORD PTR [esp],esi
c0022c8b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022c8f:	e8 82 36 ff ff       	call   c0016316 <free>
c0022c94:	83 c4 10             	add    esp,0x10
c0022c97:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022c9b:	81 c4 20 01 00 00    	add    esp,0x120
c0022ca1:	5b                   	pop    ebx
c0022ca2:	5e                   	pop    esi
c0022ca3:	5f                   	pop    edi
c0022ca4:	c3                   	ret    

c0022ca5 <Reg::getLine(char*, char*, char*)>:
c0022ca5:	57                   	push   edi
c0022ca6:	56                   	push   esi
c0022ca7:	53                   	push   ebx
c0022ca8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022cac:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022cb0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022cb4:	57                   	push   edi
c0022cb5:	56                   	push   esi
c0022cb6:	53                   	push   ebx
c0022cb7:	68 72 29 03 c0       	push   0xc0032972
c0022cbc:	e8 8f fe ff ff       	call   c0022b50 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0022cc1:	83 c4 10             	add    esp,0x10
c0022cc4:	84 c0                	test   al,al
c0022cc6:	75 10                	jne    c0022cd8 <Reg::getLine(char*, char*, char*)+0x33>
c0022cc8:	57                   	push   edi
c0022cc9:	56                   	push   esi
c0022cca:	53                   	push   ebx
c0022ccb:	68 97 29 03 c0       	push   0xc0032997
c0022cd0:	e8 7b fe ff ff       	call   c0022b50 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0022cd5:	83 c4 10             	add    esp,0x10
c0022cd8:	5b                   	pop    ebx
c0022cd9:	5e                   	pop    esi
c0022cda:	5f                   	pop    edi
c0022cdb:	c3                   	ret    

c0022cdc <Reg::readInt(char*, char*, int*)>:
c0022cdc:	55                   	push   ebp
c0022cdd:	57                   	push   edi
c0022cde:	56                   	push   esi
c0022cdf:	53                   	push   ebx
c0022ce0:	81 ec f0 00 00 00    	sub    esp,0xf0
c0022ce6:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0022cea:	55                   	push   ebp
c0022ceb:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0022cf2:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0022cf9:	e8 a7 ff ff ff       	call   c0022ca5 <Reg::getLine(char*, char*, char*)>
c0022cfe:	83 c4 10             	add    esp,0x10
c0022d01:	84 c0                	test   al,al
c0022d03:	0f 84 b6 00 00 00    	je     c0022dbf <Reg::readInt(char*, char*, int*)+0xe3>
c0022d09:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0022d0e:	83 fa 2b             	cmp    edx,0x2b
c0022d11:	74 0c                	je     c0022d1f <Reg::readInt(char*, char*, int*)+0x43>
c0022d13:	83 fa 2d             	cmp    edx,0x2d
c0022d16:	75 0e                	jne    c0022d26 <Reg::readInt(char*, char*, int*)+0x4a>
c0022d18:	ba 01 00 00 00       	mov    edx,0x1
c0022d1d:	eb 0b                	jmp    c0022d2a <Reg::readInt(char*, char*, int*)+0x4e>
c0022d1f:	ba 01 00 00 00       	mov    edx,0x1
c0022d24:	eb 02                	jmp    c0022d28 <Reg::readInt(char*, char*, int*)+0x4c>
c0022d26:	31 d2                	xor    edx,edx
c0022d28:	31 c0                	xor    eax,eax
c0022d2a:	be 0a 00 00 00       	mov    esi,0xa
c0022d2f:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0022d34:	75 21                	jne    c0022d57 <Reg::readInt(char*, char*, int*)+0x7b>
c0022d36:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0022d3b:	83 f9 78             	cmp    ecx,0x78
c0022d3e:	75 0a                	jne    c0022d4a <Reg::readInt(char*, char*, int*)+0x6e>
c0022d40:	83 c2 02             	add    edx,0x2
c0022d43:	be 10 00 00 00       	mov    esi,0x10
c0022d48:	eb 0d                	jmp    c0022d57 <Reg::readInt(char*, char*, int*)+0x7b>
c0022d4a:	83 f9 62             	cmp    ecx,0x62
c0022d4d:	75 08                	jne    c0022d57 <Reg::readInt(char*, char*, int*)+0x7b>
c0022d4f:	83 c2 02             	add    edx,0x2
c0022d52:	be 02 00 00 00       	mov    esi,0x2
c0022d57:	01 d5                	add    ebp,edx
c0022d59:	31 d2                	xor    edx,edx
c0022d5b:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0022d5f:	83 f9 0d             	cmp    ecx,0xd
c0022d62:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0022d66:	0f 94 c3             	sete   bl
c0022d69:	85 c9                	test   ecx,ecx
c0022d6b:	89 df                	mov    edi,ebx
c0022d6d:	0f 94 c3             	sete   bl
c0022d70:	09 df                	or     edi,ebx
c0022d72:	89 fb                	mov    ebx,edi
c0022d74:	83 e7 01             	and    edi,0x1
c0022d77:	75 35                	jne    c0022dae <Reg::readInt(char*, char*, int*)+0xd2>
c0022d79:	0f af d6             	imul   edx,esi
c0022d7c:	83 fe 10             	cmp    esi,0x10
c0022d7f:	75 26                	jne    c0022da7 <Reg::readInt(char*, char*, int*)+0xcb>
c0022d81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022d85:	83 ef 41             	sub    edi,0x41
c0022d88:	89 fb                	mov    ebx,edi
c0022d8a:	80 fb 05             	cmp    bl,0x5
c0022d8d:	77 06                	ja     c0022d95 <Reg::readInt(char*, char*, int*)+0xb9>
c0022d8f:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0022d93:	eb 16                	jmp    c0022dab <Reg::readInt(char*, char*, int*)+0xcf>
c0022d95:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022d99:	83 eb 61             	sub    ebx,0x61
c0022d9c:	80 fb 05             	cmp    bl,0x5
c0022d9f:	77 06                	ja     c0022da7 <Reg::readInt(char*, char*, int*)+0xcb>
c0022da1:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0022da5:	eb 04                	jmp    c0022dab <Reg::readInt(char*, char*, int*)+0xcf>
c0022da7:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0022dab:	45                   	inc    ebp
c0022dac:	eb ad                	jmp    c0022d5b <Reg::readInt(char*, char*, int*)+0x7f>
c0022dae:	84 c0                	test   al,al
c0022db0:	74 02                	je     c0022db4 <Reg::readInt(char*, char*, int*)+0xd8>
c0022db2:	f7 da                	neg    edx
c0022db4:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0022dbb:	89 10                	mov    DWORD PTR [eax],edx
c0022dbd:	88 d8                	mov    al,bl
c0022dbf:	81 c4 ec 00 00 00    	add    esp,0xec
c0022dc5:	5b                   	pop    ebx
c0022dc6:	5e                   	pop    esi
c0022dc7:	5f                   	pop    edi
c0022dc8:	5d                   	pop    ebp
c0022dc9:	c3                   	ret    

c0022dca <Reg::readString(char*, char*, char*, int)>:
c0022dca:	57                   	push   edi
c0022dcb:	56                   	push   esi
c0022dcc:	53                   	push   ebx
c0022dcd:	81 ec d4 00 00 00    	sub    esp,0xd4
c0022dd3:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0022dda:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0022dde:	57                   	push   edi
c0022ddf:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0022de6:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0022ded:	e8 b3 fe ff ff       	call   c0022ca5 <Reg::getLine(char*, char*, char*)>
c0022df2:	83 c4 10             	add    esp,0x10
c0022df5:	89 c6                	mov    esi,eax
c0022df7:	84 c0                	test   al,al
c0022df9:	74 44                	je     c0022e3f <Reg::readString(char*, char*, char*, int)+0x75>
c0022dfb:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0022e02:	31 c0                	xor    eax,eax
c0022e04:	4a                   	dec    edx
c0022e05:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0022e08:	84 c9                	test   cl,cl
c0022e0a:	74 0f                	je     c0022e1b <Reg::readString(char*, char*, char*, int)+0x51>
c0022e0c:	39 c2                	cmp    edx,eax
c0022e0e:	7e 0b                	jle    c0022e1b <Reg::readString(char*, char*, char*, int)+0x51>
c0022e10:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0022e13:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0022e18:	40                   	inc    eax
c0022e19:	eb ea                	jmp    c0022e05 <Reg::readString(char*, char*, char*, int)+0x3b>
c0022e1b:	83 ec 0c             	sub    esp,0xc
c0022e1e:	53                   	push   ebx
c0022e1f:	e8 4c d7 fd ff       	call   c0000570 <strlen>
c0022e24:	83 c4 10             	add    esp,0x10
c0022e27:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0022e2c:	75 11                	jne    c0022e3f <Reg::readString(char*, char*, char*, int)+0x75>
c0022e2e:	83 ec 0c             	sub    esp,0xc
c0022e31:	53                   	push   ebx
c0022e32:	e8 39 d7 fd ff       	call   c0000570 <strlen>
c0022e37:	83 c4 10             	add    esp,0x10
c0022e3a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0022e3f:	81 c4 d0 00 00 00    	add    esp,0xd0
c0022e45:	89 f0                	mov    eax,esi
c0022e47:	5b                   	pop    ebx
c0022e48:	5e                   	pop    esi
c0022e49:	5f                   	pop    edi
c0022e4a:	c3                   	ret    

c0022e4b <Reg::readBool(char*, char*, bool*)>:
c0022e4b:	83 ec 20             	sub    esp,0x20
c0022e4e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0022e52:	50                   	push   eax
c0022e53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022e57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022e5b:	e8 7c fe ff ff       	call   c0022cdc <Reg::readInt(char*, char*, int*)>
c0022e60:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0022e65:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0022e69:	0f 95 02             	setne  BYTE PTR [edx]
c0022e6c:	83 c4 2c             	add    esp,0x2c
c0022e6f:	c3                   	ret    

c0022e70 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0022e70:	53                   	push   ebx
c0022e71:	83 ec 1c             	sub    esp,0x1c
c0022e74:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0022e78:	8d 44 24 13          	lea    eax,[esp+0x13]
c0022e7c:	50                   	push   eax
c0022e7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022e81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022e85:	e8 c1 ff ff ff       	call   c0022e4b <Reg::readBool(char*, char*, bool*)>
c0022e8a:	83 c4 10             	add    esp,0x10
c0022e8d:	84 c0                	test   al,al
c0022e8f:	74 04                	je     c0022e95 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0022e91:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0022e95:	88 d8                	mov    al,bl
c0022e97:	83 c4 18             	add    esp,0x18
c0022e9a:	5b                   	pop    ebx
c0022e9b:	c3                   	ret    

c0022e9c <Reg::readIntWithDefault(char*, char*, int)>:
c0022e9c:	53                   	push   ebx
c0022e9d:	83 ec 1c             	sub    esp,0x1c
c0022ea0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0022ea4:	8d 44 24 10          	lea    eax,[esp+0x10]
c0022ea8:	50                   	push   eax
c0022ea9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022ead:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022eb1:	e8 26 fe ff ff       	call   c0022cdc <Reg::readInt(char*, char*, int*)>
c0022eb6:	83 c4 10             	add    esp,0x10
c0022eb9:	84 c0                	test   al,al
c0022ebb:	74 04                	je     c0022ec1 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0022ebd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022ec1:	89 d8                	mov    eax,ebx
c0022ec3:	83 c4 18             	add    esp,0x18
c0022ec6:	5b                   	pop    ebx
c0022ec7:	c3                   	ret    

c0022ec8 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0022ec8:	57                   	push   edi
c0022ec9:	56                   	push   esi
c0022eca:	56                   	push   esi
c0022ecb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022ecf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0022ed3:	56                   	push   esi
c0022ed4:	57                   	push   edi
c0022ed5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ed9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022edd:	e8 e8 fe ff ff       	call   c0022dca <Reg::readString(char*, char*, char*, int)>
c0022ee2:	83 c4 10             	add    esp,0x10
c0022ee5:	84 c0                	test   al,al
c0022ee7:	75 1a                	jne    c0022f03 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0022ee9:	51                   	push   ecx
c0022eea:	56                   	push   esi
c0022eeb:	6a 00                	push   0x0
c0022eed:	57                   	push   edi
c0022eee:	e8 fd d5 fd ff       	call   c00004f0 <memset>
c0022ef3:	8d 4e ff             	lea    ecx,[esi-0x1]
c0022ef6:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022efa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022efc:	83 c4 10             	add    esp,0x10
c0022eff:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022f03:	89 f8                	mov    eax,edi
c0022f05:	5a                   	pop    edx
c0022f06:	5e                   	pop    esi
c0022f07:	5f                   	pop    edi
c0022f08:	c3                   	ret    

c0022f09 <SysEject(regs*)>:
c0022f09:	83 ec 0c             	sub    esp,0xc
c0022f0c:	83 ca ff             	or     edx,0xffffffff
c0022f0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f13:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0022f16:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0022f1b:	83 e9 41             	sub    ecx,0x41
c0022f1e:	83 f9 19             	cmp    ecx,0x19
c0022f21:	77 18                	ja     c0022f3b <SysEject(regs*)+0x32>
c0022f23:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c0022f2a:	85 c9                	test   ecx,ecx
c0022f2c:	74 0d                	je     c0022f3b <SysEject(regs*)+0x32>
c0022f2e:	83 ec 0c             	sub    esp,0xc
c0022f31:	51                   	push   ecx
c0022f32:	e8 67 96 ff ff       	call   c001c59e <LogicalDisk::eject()>
c0022f37:	83 c4 10             	add    esp,0x10
c0022f3a:	99                   	cdq    
c0022f3b:	83 c4 0c             	add    esp,0xc
c0022f3e:	c3                   	ret    

c0022f3f <SysExit(regs*)>:
c0022f3f:	83 ec 18             	sub    esp,0x18
c0022f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022f46:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0022f49:	e8 8e 29 00 00       	call   c00258dc <terminateTask(int)>
c0022f4e:	83 c8 ff             	or     eax,0xffffffff
c0022f51:	83 c4 1c             	add    esp,0x1c
c0022f54:	89 c2                	mov    edx,eax
c0022f56:	c3                   	ret    

c0022f57 <SysGetCwd(regs*)>:
c0022f57:	83 ec 10             	sub    esp,0x10
c0022f5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022f5e:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0022f61:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0022f64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0022f69:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0022f6c:	e8 df 70 ff ff       	call   c001a050 <Fs::getcwd(Process*, char*, int)>
c0022f71:	83 c4 1c             	add    esp,0x1c
c0022f74:	99                   	cdq    
c0022f75:	c3                   	ret    

c0022f76 <SysGetPID(regs*)>:
c0022f76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0022f7b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0022f7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0022f80:	99                   	cdq    
c0022f81:	c3                   	ret    

c0022f82 <SysGetRAMData(regs*)>:
c0022f82:	8b 0d ec a9 03 c0    	mov    ecx,DWORD PTR ds:0xc003a9ec
c0022f88:	69 05 e8 a9 03 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc003a9e8,0xc8
c0022f92:	99                   	cdq    
c0022f93:	f7 f9                	idiv   ecx
c0022f95:	c1 e0 18             	shl    eax,0x18
c0022f98:	09 c8                	or     eax,ecx
c0022f9a:	99                   	cdq    
c0022f9b:	c3                   	ret    

c0022f9c <SysGetVGAPtr(regs*)>:
c0022f9c:	55                   	push   ebp
c0022f9d:	57                   	push   edi
c0022f9e:	56                   	push   esi
c0022f9f:	53                   	push   ebx
c0022fa0:	83 ec 18             	sub    esp,0x18
c0022fa3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0022fa7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022faa:	e8 f9 23 00 00       	call   c00253a8 <Thr::processFromPID(int)>
c0022faf:	83 c4 10             	add    esp,0x10
c0022fb2:	89 c1                	mov    ecx,eax
c0022fb4:	b8 01 00 00 00       	mov    eax,0x1
c0022fb9:	85 c9                	test   ecx,ecx
c0022fbb:	74 57                	je     c0023014 <SysGetVGAPtr(regs*)+0x78>
c0022fbd:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0022fc3:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0022fc7:	74 0c                	je     c0022fd5 <SysGetVGAPtr(regs*)+0x39>
c0022fc9:	83 ec 0c             	sub    esp,0xc
c0022fcc:	55                   	push   ebp
c0022fcd:	e8 d7 3f ff ff       	call   c0016fa9 <setActiveTerminal(VgaText*)>
c0022fd2:	83 c4 10             	add    esp,0x10
c0022fd5:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0022fd8:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0022fdb:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0022fe0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022fe2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0022fe5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0022fe8:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0022fee:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0022ff1:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0022ff4:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0022ffa:	50                   	push   eax
c0022ffb:	50                   	push   eax
c0022ffc:	68 b2 29 03 c0       	push   0xc00329b2
c0023001:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023004:	05 a8 0f 00 00       	add    eax,0xfa8
c0023009:	50                   	push   eax
c002300a:	e8 31 d6 fd ff       	call   c0000640 <strcpy>
c002300f:	83 c4 10             	add    esp,0x10
c0023012:	31 c0                	xor    eax,eax
c0023014:	83 c4 0c             	add    esp,0xc
c0023017:	31 d2                	xor    edx,edx
c0023019:	5b                   	pop    ebx
c002301a:	5e                   	pop    esi
c002301b:	5f                   	pop    edi
c002301c:	5d                   	pop    ebp
c002301d:	c3                   	ret    
c002301e:	66 90                	xchg   ax,ax

c0023020 <SysKill(regs*)>:
c0023020:	53                   	push   ebx
c0023021:	83 ec 08             	sub    esp,0x8
c0023024:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023028:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c002302c:	75 16                	jne    c0023044 <SysKill(regs*)+0x24>
c002302e:	83 ec 0c             	sub    esp,0xc
c0023031:	68 bc 29 03 c0       	push   0xc00329bc
c0023036:	e8 73 d1 ff ff       	call   c00201ae <KePanic(char const*)>
c002303b:	83 c4 10             	add    esp,0x10
c002303e:	e9 89 00 00 00       	jmp    c00230cc <SysKill(regs*)+0xac>
c0023043:	90                   	nop
c0023044:	83 ec 0c             	sub    esp,0xc
c0023047:	68 ec 01 04 c0       	push   0xc00401ec
c002304c:	e8 fb ba 00 00       	call   c002eb4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0023051:	8d 76 00             	lea    esi,[esi+0x0]
c0023054:	83 c4 10             	add    esp,0x10
c0023057:	85 c0                	test   eax,eax
c0023059:	74 19                	je     c0023074 <SysKill(regs*)+0x54>
c002305b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c002305e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0023061:	39 0a                	cmp    DWORD PTR [edx],ecx
c0023063:	74 33                	je     c0023098 <SysKill(regs*)+0x78>
c0023065:	52                   	push   edx
c0023066:	52                   	push   edx
c0023067:	50                   	push   eax
c0023068:	68 ec 01 04 c0       	push   0xc00401ec
c002306d:	e8 fa bd 00 00       	call   c002ee6c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0023072:	eb e0                	jmp    c0023054 <SysKill(regs*)+0x34>
c0023074:	83 ec 0c             	sub    esp,0xc
c0023077:	68 e0 01 04 c0       	push   0xc00401e0
c002307c:	e8 cb ba 00 00       	call   c002eb4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0023081:	8d 76 00             	lea    esi,[esi+0x0]
c0023084:	83 c4 10             	add    esp,0x10
c0023087:	85 c0                	test   eax,eax
c0023089:	74 41                	je     c00230cc <SysKill(regs*)+0xac>
c002308b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c002308e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0023091:	39 0a                	cmp    DWORD PTR [edx],ecx
c0023093:	75 27                	jne    c00230bc <SysKill(regs*)+0x9c>
c0023095:	8d 76 00             	lea    esi,[esi+0x0]
c0023098:	51                   	push   ecx
c0023099:	51                   	push   ecx
c002309a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002309d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00230a2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00230a5:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00230ab:	e8 b7 d9 ff ff       	call   c0020a67 <KeRaiseSignal(SigHandlerBlock*, int)>
c00230b0:	83 c4 10             	add    esp,0x10
c00230b3:	31 c0                	xor    eax,eax
c00230b5:	31 d2                	xor    edx,edx
c00230b7:	eb 1b                	jmp    c00230d4 <SysKill(regs*)+0xb4>
c00230b9:	8d 76 00             	lea    esi,[esi+0x0]
c00230bc:	52                   	push   edx
c00230bd:	52                   	push   edx
c00230be:	50                   	push   eax
c00230bf:	68 e0 01 04 c0       	push   0xc00401e0
c00230c4:	e8 a3 bd 00 00       	call   c002ee6c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00230c9:	eb b9                	jmp    c0023084 <SysKill(regs*)+0x64>
c00230cb:	90                   	nop
c00230cc:	83 c8 ff             	or     eax,0xffffffff
c00230cf:	89 c2                	mov    edx,eax
c00230d1:	8d 76 00             	lea    esi,[esi+0x0]
c00230d4:	83 c4 08             	add    esp,0x8
c00230d7:	5b                   	pop    ebx
c00230d8:	c3                   	ret    

c00230d9 <SysLoadDLL(regs*)>:
c00230d9:	56                   	push   esi
c00230da:	53                   	push   ebx
c00230db:	31 d2                	xor    edx,edx
c00230dd:	51                   	push   ecx
c00230de:	b8 01 00 00 00       	mov    eax,0x1
c00230e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00230e7:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00230eb:	0f 84 8c 00 00 00    	je     c002317d <SysLoadDLL(regs*)+0xa4>
c00230f1:	83 ec 0c             	sub    esp,0xc
c00230f4:	68 14 01 00 00       	push   0x114
c00230f9:	e8 08 32 ff ff       	call   c0016306 <malloc>
c00230fe:	83 c4 0c             	add    esp,0xc
c0023101:	89 c3                	mov    ebx,eax
c0023103:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023108:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c002310b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c002310e:	53                   	push   ebx
c002310f:	e8 88 72 ff ff       	call   c001a39c <File::File(char const*, Process*)>
c0023114:	83 c4 10             	add    esp,0x10
c0023117:	31 d2                	xor    edx,edx
c0023119:	b8 02 00 00 00       	mov    eax,0x2
c002311e:	85 db                	test   ebx,ebx
c0023120:	74 5b                	je     c002317d <SysLoadDLL(regs*)+0xa4>
c0023122:	83 ec 0c             	sub    esp,0xc
c0023125:	53                   	push   ebx
c0023126:	e8 53 75 ff ff       	call   c001a67e <File::exists()>
c002312b:	83 c4 10             	add    esp,0x10
c002312e:	84 c0                	test   al,al
c0023130:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023132:	75 11                	jne    c0023145 <SysLoadDLL(regs*)+0x6c>
c0023134:	83 ec 0c             	sub    esp,0xc
c0023137:	53                   	push   ebx
c0023138:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002313b:	83 c4 10             	add    esp,0x10
c002313e:	b8 03 00 00 00       	mov    eax,0x3
c0023143:	eb 36                	jmp    c002317b <SysLoadDLL(regs*)+0xa2>
c0023145:	83 ec 0c             	sub    esp,0xc
c0023148:	53                   	push   ebx
c0023149:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002314c:	58                   	pop    eax
c002314d:	5a                   	pop    edx
c002314e:	6a 00                	push   0x0
c0023150:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0023153:	e8 81 15 00 00       	call   c00246d9 <Thr::loadDLL(char const*, bool)>
c0023158:	83 c4 10             	add    esp,0x10
c002315b:	89 c1                	mov    ecx,eax
c002315d:	31 d2                	xor    edx,edx
c002315f:	b8 04 00 00 00       	mov    eax,0x4
c0023164:	85 c9                	test   ecx,ecx
c0023166:	74 15                	je     c002317d <SysLoadDLL(regs*)+0xa4>
c0023168:	53                   	push   ebx
c0023169:	53                   	push   ebx
c002316a:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0023170:	51                   	push   ecx
c0023171:	e8 b5 17 00 00       	call   c002492b <Thr::executeDLL(unsigned long, void*)>
c0023176:	83 c4 10             	add    esp,0x10
c0023179:	31 c0                	xor    eax,eax
c002317b:	31 d2                	xor    edx,edx
c002317d:	59                   	pop    ecx
c002317e:	5b                   	pop    ebx
c002317f:	5e                   	pop    esi
c0023180:	c3                   	ret    

c0023181 <SysRead(regs*)>:
c0023181:	57                   	push   edi
c0023182:	56                   	push   esi
c0023183:	53                   	push   ebx
c0023184:	83 ec 10             	sub    esp,0x10
c0023187:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002318b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002318e:	83 f8 02             	cmp    eax,0x2
c0023191:	77 10                	ja     c00231a3 <SysRead(regs*)+0x22>
c0023193:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023198:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002319b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00231a1:	eb 0e                	jmp    c00231b1 <SysRead(regs*)+0x30>
c00231a3:	83 ec 0c             	sub    esp,0xc
c00231a6:	50                   	push   eax
c00231a7:	e8 57 4b ff ff       	call   c0017d03 <KeGetFileFromDescriptor(int)>
c00231ac:	83 c4 10             	add    esp,0x10
c00231af:	89 c1                	mov    ecx,eax
c00231b1:	83 c8 ff             	or     eax,0xffffffff
c00231b4:	85 c9                	test   ecx,ecx
c00231b6:	89 c2                	mov    edx,eax
c00231b8:	74 28                	je     c00231e2 <SysRead(regs*)+0x61>
c00231ba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00231c2:	31 ff                	xor    edi,edi
c00231c4:	83 ec 0c             	sub    esp,0xc
c00231c7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00231c9:	8d 54 24 18          	lea    edx,[esp+0x18]
c00231cd:	52                   	push   edx
c00231ce:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00231d1:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00231d4:	57                   	push   edi
c00231d5:	56                   	push   esi
c00231d6:	51                   	push   ecx
c00231d7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00231da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00231de:	83 c4 20             	add    esp,0x20
c00231e1:	99                   	cdq    
c00231e2:	83 c4 10             	add    esp,0x10
c00231e5:	5b                   	pop    ebx
c00231e6:	5e                   	pop    esi
c00231e7:	5f                   	pop    edi
c00231e8:	c3                   	ret    

c00231e9 <SysRegisterSignal(regs*)>:
c00231e9:	83 ec 18             	sub    esp,0x18
c00231ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00231f0:	6a 00                	push   0x0
c00231f2:	6a 00                	push   0x0
c00231f4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00231f7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00231fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00231ff:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023202:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0023208:	e8 24 d8 ff ff       	call   c0020a31 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c002320d:	83 c4 2c             	add    esp,0x2c
c0023210:	99                   	cdq    
c0023211:	c3                   	ret    

c0023212 <SysRegistryGetTypeFromPath(regs*)>:
c0023212:	57                   	push   edi
c0023213:	56                   	push   esi
c0023214:	53                   	push   ebx
c0023215:	81 ec 38 01 00 00    	sub    esp,0x138
c002321b:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0023222:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023225:	68 dd 29 03 c0       	push   0xc00329dd
c002322a:	e8 66 5f ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c002322f:	5a                   	pop    edx
c0023230:	59                   	pop    ecx
c0023231:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023234:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023237:	e8 4d f6 ff ff       	call   c0022889 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c002323c:	5f                   	pop    edi
c002323d:	89 c6                	mov    esi,eax
c002323f:	5a                   	pop    edx
c0023240:	50                   	push   eax
c0023241:	68 fd 29 03 c0       	push   0xc00329fd
c0023246:	e8 4a 5f ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c002324b:	83 c4 10             	add    esp,0x10
c002324e:	85 f6                	test   esi,esi
c0023250:	74 28                	je     c002327a <SysRegistryGetTypeFromPath(regs*)+0x68>
c0023252:	50                   	push   eax
c0023253:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0023257:	57                   	push   edi
c0023258:	56                   	push   esi
c0023259:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002325c:	e8 0c f2 ff ff       	call   c002246d <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0023261:	83 c4 0c             	add    esp,0xc
c0023264:	89 c3                	mov    ebx,eax
c0023266:	57                   	push   edi
c0023267:	50                   	push   eax
c0023268:	68 05 2a 03 c0       	push   0xc0032a05
c002326d:	e8 23 5f ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0023272:	89 d8                	mov    eax,ebx
c0023274:	83 c4 10             	add    esp,0x10
c0023277:	99                   	cdq    
c0023278:	eb 05                	jmp    c002327f <SysRegistryGetTypeFromPath(regs*)+0x6d>
c002327a:	83 c8 ff             	or     eax,0xffffffff
c002327d:	89 c2                	mov    edx,eax
c002327f:	81 c4 30 01 00 00    	add    esp,0x130
c0023285:	5b                   	pop    ebx
c0023286:	5e                   	pop    esi
c0023287:	5f                   	pop    edi
c0023288:	c3                   	ret    

c0023289 <SysRegistryReadExtent(regs*)>:
c0023289:	83 ec 1c             	sub    esp,0x1c
c002328c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0023290:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0023293:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0023296:	85 c0                	test   eax,eax
c0023298:	79 1f                	jns    c00232b9 <SysRegistryReadExtent(regs*)+0x30>
c002329a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002329f:	52                   	push   edx
c00232a0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00232a4:	52                   	push   edx
c00232a5:	50                   	push   eax
c00232a6:	51                   	push   ecx
c00232a7:	e8 b3 f0 ff ff       	call   c002235f <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00232ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00232b0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00232b4:	83 c4 10             	add    esp,0x10
c00232b7:	eb 14                	jmp    c00232cd <SysRegistryReadExtent(regs*)+0x44>
c00232b9:	83 ec 04             	sub    esp,0x4
c00232bc:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00232bf:	50                   	push   eax
c00232c0:	51                   	push   ecx
c00232c1:	e8 33 eb ff ff       	call   c0021df9 <CmGetString(Reghive_Tag*, int, char*)>
c00232c6:	83 c4 10             	add    esp,0x10
c00232c9:	31 c0                	xor    eax,eax
c00232cb:	31 d2                	xor    edx,edx
c00232cd:	83 c4 1c             	add    esp,0x1c
c00232d0:	c3                   	ret    

c00232d1 <SysRegistryPathToExtentLookup(regs*)>:
c00232d1:	53                   	push   ebx
c00232d2:	83 ec 10             	sub    esp,0x10
c00232d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00232d9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00232dc:	68 1b 2a 03 c0       	push   0xc0032a1b
c00232e1:	e8 af 5e ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c00232e6:	58                   	pop    eax
c00232e7:	5a                   	pop    edx
c00232e8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00232eb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00232ee:	e8 96 f5 ff ff       	call   c0022889 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00232f3:	83 c4 18             	add    esp,0x18
c00232f6:	99                   	cdq    
c00232f7:	5b                   	pop    ebx
c00232f8:	c3                   	ret    

c00232f9 <SysRegistryEnterDirectory(regs*)>:
c00232f9:	53                   	push   ebx
c00232fa:	83 ec 10             	sub    esp,0x10
c00232fd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023301:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023304:	68 3e 2a 03 c0       	push   0xc0032a3e
c0023309:	e8 87 5e ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c002330e:	58                   	pop    eax
c002330f:	5a                   	pop    edx
c0023310:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023313:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023316:	e8 55 eb ff ff       	call   c0021e70 <CmEnterDirectory(Reghive_Tag*, int)>
c002331b:	83 c4 18             	add    esp,0x18
c002331e:	99                   	cdq    
c002331f:	5b                   	pop    ebx
c0023320:	c3                   	ret    

c0023321 <SysRegistryGetNext(regs*)>:
c0023321:	53                   	push   ebx
c0023322:	83 ec 10             	sub    esp,0x10
c0023325:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023329:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002332c:	68 5c 2a 03 c0       	push   0xc0032a5c
c0023331:	e8 5f 5e ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0023336:	58                   	pop    eax
c0023337:	5a                   	pop    edx
c0023338:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002333b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002333e:	e8 6c eb ff ff       	call   c0021eaf <CmGetNext(Reghive_Tag*, int)>
c0023343:	83 c4 18             	add    esp,0x18
c0023346:	99                   	cdq    
c0023347:	5b                   	pop    ebx
c0023348:	c3                   	ret    

c0023349 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0023349:	57                   	push   edi
c002334a:	56                   	push   esi
c002334b:	53                   	push   ebx
c002334c:	81 ec 34 01 00 00    	sub    esp,0x134
c0023352:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0023359:	8d 7c 24 08          	lea    edi,[esp+0x8]
c002335d:	57                   	push   edi
c002335e:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0023361:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0023364:	e8 04 f1 ff ff       	call   c002246d <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0023369:	89 c3                	mov    ebx,eax
c002336b:	58                   	pop    eax
c002336c:	5a                   	pop    edx
c002336d:	57                   	push   edi
c002336e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0023371:	e8 ca d2 fd ff       	call   c0000640 <strcpy>
c0023376:	89 d8                	mov    eax,ebx
c0023378:	81 c4 40 01 00 00    	add    esp,0x140
c002337e:	99                   	cdq    
c002337f:	5b                   	pop    ebx
c0023380:	5e                   	pop    esi
c0023381:	5f                   	pop    edi
c0023382:	c3                   	ret    

c0023383 <SysRegistryOpen(regs*)>:
c0023383:	83 ec 18             	sub    esp,0x18
c0023386:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002338a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c002338d:	e8 f7 e8 ff ff       	call   c0021c89 <CmOpen(char const*)>
c0023392:	83 c4 1c             	add    esp,0x1c
c0023395:	99                   	cdq    
c0023396:	c3                   	ret    

c0023397 <SysRegistryClose(regs*)>:
c0023397:	83 ec 18             	sub    esp,0x18
c002339a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002339e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00233a1:	e8 01 ea ff ff       	call   c0021da7 <CmClose(Reghive_Tag*)>
c00233a6:	31 c0                	xor    eax,eax
c00233a8:	31 d2                	xor    edx,edx
c00233aa:	83 c4 1c             	add    esp,0x1c
c00233ad:	c3                   	ret    

c00233ae <SysSbrk(regs*)>:
c00233ae:	56                   	push   esi
c00233af:	53                   	push   ebx
c00233b0:	50                   	push   eax
c00233b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00233b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00233ba:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00233bd:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00233c0:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00233c6:	85 db                	test   ebx,ebx
c00233c8:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00233cb:	74 02                	je     c00233cf <SysSbrk(regs*)+0x21>
c00233cd:	79 06                	jns    c00233d5 <SysSbrk(regs*)+0x27>
c00233cf:	89 f0                	mov    eax,esi
c00233d1:	31 d2                	xor    edx,edx
c00233d3:	eb 2a                	jmp    c00233ff <SysSbrk(regs*)+0x51>
c00233d5:	83 c8 ff             	or     eax,0xffffffff
c00233d8:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00233de:	89 c2                	mov    edx,eax
c00233e0:	77 1d                	ja     c00233ff <SysSbrk(regs*)+0x51>
c00233e2:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00233e8:	50                   	push   eax
c00233e9:	c1 ea 0c             	shr    edx,0xc
c00233ec:	68 07 0c 00 00       	push   0xc07
c00233f1:	52                   	push   edx
c00233f2:	51                   	push   ecx
c00233f3:	e8 7c 52 ff ff       	call   c0018674 <VAS::allocatePages(int, int)>
c00233f8:	89 f0                	mov    eax,esi
c00233fa:	31 d2                	xor    edx,edx
c00233fc:	83 c4 10             	add    esp,0x10
c00233ff:	59                   	pop    ecx
c0023400:	5b                   	pop    ebx
c0023401:	5e                   	pop    esi
c0023402:	c3                   	ret    

c0023403 <SysSetCwd(regs*)>:
c0023403:	83 ec 14             	sub    esp,0x14
c0023406:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002340a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c002340d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023412:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0023415:	e8 03 73 ff ff       	call   c001a71d <Fs::setcwd(Process*, char*)>
c002341a:	83 c4 1c             	add    esp,0x1c
c002341d:	99                   	cdq    
c002341e:	c3                   	ret    

c002341f <SysSetTime(regs*)>:
c002341f:	55                   	push   ebp
c0023420:	31 c9                	xor    ecx,ecx
c0023422:	57                   	push   edi
c0023423:	bd 0c 00 00 00       	mov    ebp,0xc
c0023428:	56                   	push   esi
c0023429:	53                   	push   ebx
c002342a:	31 db                	xor    ebx,ebx
c002342c:	83 ec 10             	sub    esp,0x10
c002342f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023433:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0023436:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0023439:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c002343c:	89 c2                	mov    edx,eax
c002343e:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0023444:	83 e2 1f             	and    edx,0x1f
c0023447:	c1 e7 10             	shl    edi,0x10
c002344a:	42                   	inc    edx
c002344b:	c1 e8 05             	shr    eax,0x5
c002344e:	88 d1                	mov    cl,dl
c0023450:	31 d2                	xor    edx,edx
c0023452:	f7 f5                	div    ebp
c0023454:	89 dd                	mov    ebp,ebx
c0023456:	88 d5                	mov    ch,dl
c0023458:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c002345e:	0f b7 c1             	movzx  eax,cx
c0023461:	31 d2                	xor    edx,edx
c0023463:	09 f8                	or     eax,edi
c0023465:	bf 3c 00 00 00       	mov    edi,0x3c
c002346a:	89 c1                	mov    ecx,eax
c002346c:	89 f0                	mov    eax,esi
c002346e:	f7 f7                	div    edi
c0023470:	c1 e2 10             	shl    edx,0x10
c0023473:	09 d5                	or     ebp,edx
c0023475:	31 d2                	xor    edx,edx
c0023477:	89 eb                	mov    ebx,ebp
c0023479:	f7 f7                	div    edi
c002347b:	bf 10 0e 00 00       	mov    edi,0xe10
c0023480:	88 d7                	mov    bh,dl
c0023482:	89 f0                	mov    eax,esi
c0023484:	31 d2                	xor    edx,edx
c0023486:	f7 f7                	div    edi
c0023488:	bf 18 00 00 00       	mov    edi,0x18
c002348d:	31 d2                	xor    edx,edx
c002348f:	f7 f7                	div    edi
c0023491:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0023496:	88 d3                	mov    bl,dl
c0023498:	53                   	push   ebx
c0023499:	51                   	push   ecx
c002349a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00234a0:	e8 85 7a ff ff       	call   c001af2a <Clock::setTimeInDatetimeLocal(datetime_t)>
c00234a5:	83 c4 1c             	add    esp,0x1c
c00234a8:	83 f0 01             	xor    eax,0x1
c00234ab:	5b                   	pop    ebx
c00234ac:	0f b6 c0             	movzx  eax,al
c00234af:	5e                   	pop    esi
c00234b0:	31 d2                	xor    edx,edx
c00234b2:	5f                   	pop    edi
c00234b3:	5d                   	pop    ebp
c00234b4:	c3                   	ret    

c00234b5 <SysSymlink(regs*)>:
c00234b5:	56                   	push   esi
c00234b6:	83 c8 ff             	or     eax,0xffffffff
c00234b9:	53                   	push   ebx
c00234ba:	89 c2                	mov    edx,eax
c00234bc:	81 ec 34 02 00 00    	sub    esp,0x234
c00234c2:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c00234c9:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00234cd:	74 50                	je     c002351f <SysSymlink(regs*)+0x6a>
c00234cf:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00234d2:	85 c9                	test   ecx,ecx
c00234d4:	74 49                	je     c002351f <SysSymlink(regs*)+0x6a>
c00234d6:	6a 01                	push   0x1
c00234d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00234dd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00234e0:	05 0c 01 00 00       	add    eax,0x10c
c00234e5:	50                   	push   eax
c00234e6:	51                   	push   ecx
c00234e7:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00234eb:	56                   	push   esi
c00234ec:	e8 b3 6b ff ff       	call   c001a0a4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00234f1:	6a 01                	push   0x1
c00234f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00234f8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00234fb:	05 0c 01 00 00       	add    eax,0x10c
c0023500:	50                   	push   eax
c0023501:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023504:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c002350b:	53                   	push   ebx
c002350c:	e8 93 6b ff ff       	call   c001a0a4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0023511:	83 c4 18             	add    esp,0x18
c0023514:	56                   	push   esi
c0023515:	53                   	push   ebx
c0023516:	e8 98 67 ff ff       	call   c0019cb3 <KeCreateSymlink(char const*, char const*)>
c002351b:	83 c4 10             	add    esp,0x10
c002351e:	99                   	cdq    
c002351f:	81 c4 34 02 00 00    	add    esp,0x234
c0023525:	5b                   	pop    ebx
c0023526:	5e                   	pop    esi
c0023527:	c3                   	ret    

c0023528 <SysTimezone(regs*)>:
c0023528:	53                   	push   ebx
c0023529:	83 ec 08             	sub    esp,0x8
c002352c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023530:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0023534:	75 17                	jne    c002354d <SysTimezone(regs*)+0x25>
c0023536:	83 ec 0c             	sub    esp,0xc
c0023539:	68 73 2a 03 c0       	push   0xc0032a73
c002353e:	e8 52 5c ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0023543:	83 c8 ff             	or     eax,0xffffffff
c0023546:	83 c4 10             	add    esp,0x10
c0023549:	89 c2                	mov    edx,eax
c002354b:	eb 20                	jmp    c002356d <SysTimezone(regs*)+0x45>
c002354d:	83 ec 0c             	sub    esp,0xc
c0023550:	68 88 2a 03 c0       	push   0xc0032a88
c0023555:	e8 3b 5c ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c002355a:	58                   	pop    eax
c002355b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002355e:	e8 31 77 ff ff       	call   c001ac94 <User::loadClockSettings(int)>
c0023563:	83 c4 10             	add    esp,0x10
c0023566:	b8 01 00 00 00       	mov    eax,0x1
c002356b:	31 d2                	xor    edx,edx
c002356d:	83 c4 08             	add    esp,0x8
c0023570:	5b                   	pop    ebx
c0023571:	c3                   	ret    

c0023572 <SysTruncate(regs*)>:
c0023572:	55                   	push   ebp
c0023573:	57                   	push   edi
c0023574:	31 ff                	xor    edi,edi
c0023576:	56                   	push   esi
c0023577:	53                   	push   ebx
c0023578:	83 ec 0c             	sub    esp,0xc
c002357b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002357f:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0023582:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0023585:	89 ce                	mov    esi,ecx
c0023587:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c002358b:	0f 84 9a 00 00 00    	je     c002362b <SysTruncate(regs*)+0xb9>
c0023591:	83 ec 0c             	sub    esp,0xc
c0023594:	68 14 01 00 00       	push   0x114
c0023599:	e8 68 2d ff ff       	call   c0016306 <malloc>
c002359e:	83 c4 0c             	add    esp,0xc
c00235a1:	89 c3                	mov    ebx,eax
c00235a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00235a8:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00235ab:	55                   	push   ebp
c00235ac:	53                   	push   ebx
c00235ad:	e8 ea 6d ff ff       	call   c001a39c <File::File(char const*, Process*)>
c00235b2:	83 c4 10             	add    esp,0x10
c00235b5:	31 d2                	xor    edx,edx
c00235b7:	b8 03 00 00 00       	mov    eax,0x3
c00235bc:	85 db                	test   ebx,ebx
c00235be:	0f 84 a2 00 00 00    	je     c0023666 <SysTruncate(regs*)+0xf4>
c00235c4:	51                   	push   ecx
c00235c5:	51                   	push   ecx
c00235c6:	6a 02                	push   0x2
c00235c8:	53                   	push   ebx
c00235c9:	e8 ec 6d ff ff       	call   c001a3ba <File::open(FileOpenMode)>
c00235ce:	83 c4 10             	add    esp,0x10
c00235d1:	85 c0                	test   eax,eax
c00235d3:	74 13                	je     c00235e8 <SysTruncate(regs*)+0x76>
c00235d5:	83 ec 0c             	sub    esp,0xc
c00235d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00235da:	53                   	push   ebx
c00235db:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00235de:	83 c4 10             	add    esp,0x10
c00235e1:	b8 04 00 00 00       	mov    eax,0x4
c00235e6:	eb 7c                	jmp    c0023664 <SysTruncate(regs*)+0xf2>
c00235e8:	52                   	push   edx
c00235e9:	57                   	push   edi
c00235ea:	56                   	push   esi
c00235eb:	53                   	push   ebx
c00235ec:	e8 dd 6e ff ff       	call   c001a4ce <File::truncate(unsigned long long)>
c00235f1:	83 c4 10             	add    esp,0x10
c00235f4:	85 c0                	test   eax,eax
c00235f6:	74 1b                	je     c0023613 <SysTruncate(regs*)+0xa1>
c00235f8:	83 ec 0c             	sub    esp,0xc
c00235fb:	53                   	push   ebx
c00235fc:	e8 17 6e ff ff       	call   c001a418 <File::close()>
c0023601:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023603:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023606:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023609:	83 c4 10             	add    esp,0x10
c002360c:	b8 05 00 00 00       	mov    eax,0x5
c0023611:	eb 51                	jmp    c0023664 <SysTruncate(regs*)+0xf2>
c0023613:	83 ec 0c             	sub    esp,0xc
c0023616:	53                   	push   ebx
c0023617:	e8 fc 6d ff ff       	call   c001a418 <File::close()>
c002361c:	8b 03                	mov    eax,DWORD PTR [ebx]
c002361e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023621:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023624:	83 c4 10             	add    esp,0x10
c0023627:	31 c0                	xor    eax,eax
c0023629:	eb 39                	jmp    c0023664 <SysTruncate(regs*)+0xf2>
c002362b:	31 d2                	xor    edx,edx
c002362d:	b8 01 00 00 00       	mov    eax,0x1
c0023632:	83 fd 02             	cmp    ebp,0x2
c0023635:	7e 2f                	jle    c0023666 <SysTruncate(regs*)+0xf4>
c0023637:	83 ec 0c             	sub    esp,0xc
c002363a:	51                   	push   ecx
c002363b:	e8 c3 46 ff ff       	call   c0017d03 <KeGetFileFromDescriptor(int)>
c0023640:	83 c4 10             	add    esp,0x10
c0023643:	89 c1                	mov    ecx,eax
c0023645:	31 d2                	xor    edx,edx
c0023647:	b8 02 00 00 00       	mov    eax,0x2
c002364c:	85 c9                	test   ecx,ecx
c002364e:	74 16                	je     c0023666 <SysTruncate(regs*)+0xf4>
c0023650:	50                   	push   eax
c0023651:	57                   	push   edi
c0023652:	56                   	push   esi
c0023653:	51                   	push   ecx
c0023654:	e8 75 6e ff ff       	call   c001a4ce <File::truncate(unsigned long long)>
c0023659:	83 c4 10             	add    esp,0x10
c002365c:	85 c0                	test   eax,eax
c002365e:	0f 95 c0             	setne  al
c0023661:	0f b6 c0             	movzx  eax,al
c0023664:	31 d2                	xor    edx,edx
c0023666:	83 c4 0c             	add    esp,0xc
c0023669:	5b                   	pop    ebx
c002366a:	5e                   	pop    esi
c002366b:	5f                   	pop    edi
c002366c:	5d                   	pop    ebp
c002366d:	c3                   	ret    

c002366e <SysWrite(regs*)>:
c002366e:	57                   	push   edi
c002366f:	56                   	push   esi
c0023670:	53                   	push   ebx
c0023671:	83 ec 10             	sub    esp,0x10
c0023674:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0023678:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002367b:	83 f8 02             	cmp    eax,0x2
c002367e:	77 10                	ja     c0023690 <SysWrite(regs*)+0x22>
c0023680:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023685:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023688:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c002368e:	eb 0e                	jmp    c002369e <SysWrite(regs*)+0x30>
c0023690:	83 ec 0c             	sub    esp,0xc
c0023693:	50                   	push   eax
c0023694:	e8 6a 46 ff ff       	call   c0017d03 <KeGetFileFromDescriptor(int)>
c0023699:	83 c4 10             	add    esp,0x10
c002369c:	89 c1                	mov    ecx,eax
c002369e:	83 c8 ff             	or     eax,0xffffffff
c00236a1:	85 c9                	test   ecx,ecx
c00236a3:	89 c2                	mov    edx,eax
c00236a5:	74 28                	je     c00236cf <SysWrite(regs*)+0x61>
c00236a7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00236af:	31 ff                	xor    edi,edi
c00236b1:	83 ec 0c             	sub    esp,0xc
c00236b4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00236b6:	8d 54 24 18          	lea    edx,[esp+0x18]
c00236ba:	52                   	push   edx
c00236bb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00236be:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00236c1:	57                   	push   edi
c00236c2:	56                   	push   esi
c00236c3:	51                   	push   ecx
c00236c4:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00236c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00236cb:	83 c4 20             	add    esp,0x20
c00236ce:	99                   	cdq    
c00236cf:	83 c4 10             	add    esp,0x10
c00236d2:	5b                   	pop    ebx
c00236d3:	5e                   	pop    esi
c00236d4:	5f                   	pop    edi
c00236d5:	c3                   	ret    

c00236d6 <SysWsbe(regs*)>:
c00236d6:	57                   	push   edi
c00236d7:	b9 0b 00 00 00       	mov    ecx,0xb
c00236dc:	56                   	push   esi
c00236dd:	be c7 2a 03 c0       	mov    esi,0xc0032ac7
c00236e2:	53                   	push   ebx
c00236e3:	83 ec 30             	sub    esp,0x30
c00236e6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00236ea:	fc                   	cld    
c00236eb:	83 ec 0c             	sub    esp,0xc
c00236ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00236f0:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00236f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00236f9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00236fc:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0023702:	8b 06                	mov    eax,DWORD PTR [esi]
c0023704:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0023707:	57                   	push   edi
c0023708:	e8 63 ce fd ff       	call   c0000570 <strlen>
c002370d:	5a                   	pop    edx
c002370e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0023712:	52                   	push   edx
c0023713:	31 d2                	xor    edx,edx
c0023715:	57                   	push   edi
c0023716:	52                   	push   edx
c0023717:	50                   	push   eax
c0023718:	56                   	push   esi
c0023719:	ff d3                	call   ebx
c002371b:	83 c4 14             	add    esp,0x14
c002371e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0023722:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0023725:	e8 b2 21 00 00       	call   c00258dc <terminateTask(int)>
c002372a:	83 c4 40             	add    esp,0x40
c002372d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0023732:	5b                   	pop    ebx
c0023733:	31 d2                	xor    edx,edx
c0023735:	5e                   	pop    esi
c0023736:	5f                   	pop    edi
c0023737:	c3                   	ret    

c0023738 <SysYield(regs*)>:
c0023738:	83 ec 0c             	sub    esp,0xc
c002373b:	fa                   	cli    
c002373c:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023742:	e8 15 1a 00 00       	call   c002515c <schedule()>
c0023747:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002374c:	48                   	dec    eax
c002374d:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0023752:	75 01                	jne    c0023755 <SysYield(regs*)+0x1d>
c0023754:	fb                   	sti    
c0023755:	31 c0                	xor    eax,eax
c0023757:	31 d2                	xor    edx,edx
c0023759:	83 c4 0c             	add    esp,0xc
c002375c:	c3                   	ret    

c002375d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c002375d:	55                   	push   ebp
c002375e:	57                   	push   edi
c002375f:	56                   	push   esi
c0023760:	53                   	push   ebx
c0023761:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0023767:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c002376f:	0f 95 c0             	setne  al
c0023772:	31 d2                	xor    edx,edx
c0023774:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c002377c:	0f 94 c2             	sete   dl
c002377f:	85 c2                	test   edx,eax
c0023781:	74 34                	je     c00237b7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0023783:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c002378e:	74 27                	je     c00237b7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0023790:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0023797:	05 00 10 00 00       	add    eax,0x1000
c002379c:	89 c1                	mov    ecx,eax
c002379e:	25 00 f0 ff ff       	and    eax,0xfffff000
c00237a3:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00237a9:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00237b0:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00237b7:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00237be:	83 ec 0c             	sub    esp,0xc
c00237c1:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00237c7:	6a 01                	push   0x1
c00237c9:	e8 8f 46 ff ff       	call   c0017e5d <Virt::allocateKernelVirtualPages(int)>
c00237ce:	83 c4 10             	add    esp,0x10
c00237d1:	89 c3                	mov    ebx,eax
c00237d3:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00237d9:	0f 86 25 01 00 00    	jbe    c0023904 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00237df:	c1 ee 0c             	shr    esi,0xc
c00237e2:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00237e9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00237ed:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00237f5:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00237fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023800:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0023807:	29 ef                	sub    edi,ebp
c0023809:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c002380d:	0f 83 f8 00 00 00    	jae    c002390b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c0023813:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0023819:	76 05                	jbe    c0023820 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c002381b:	bf 00 10 00 00       	mov    edi,0x1000
c0023820:	83 ec 0c             	sub    esp,0xc
c0023823:	31 d2                	xor    edx,edx
c0023825:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c002382c:	8b 08                	mov    ecx,DWORD PTR [eax]
c002382e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0023832:	50                   	push   eax
c0023833:	8d 74 24 30          	lea    esi,[esp+0x30]
c0023837:	56                   	push   esi
c0023838:	52                   	push   edx
c0023839:	57                   	push   edi
c002383a:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0023841:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023844:	83 c4 20             	add    esp,0x20
c0023847:	85 c0                	test   eax,eax
c0023849:	75 06                	jne    c0023851 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c002384b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c002384f:	74 13                	je     c0023864 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0023851:	83 ec 0c             	sub    esp,0xc
c0023854:	53                   	push   ebx
c0023855:	e8 21 49 ff ff       	call   c001817b <Virt::freeKernelVirtualPages(unsigned long)>
c002385a:	83 c4 10             	add    esp,0x10
c002385d:	31 c0                	xor    eax,eax
c002385f:	e9 7c 01 00 00       	jmp    c00239e0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0023864:	fa                   	cli    
c0023865:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002386b:	e8 9f 2d ff ff       	call   c001660f <Phys::allocatePage()>
c0023870:	6a 07                	push   0x7
c0023872:	89 c7                	mov    edi,eax
c0023874:	53                   	push   ebx
c0023875:	50                   	push   eax
c0023876:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002387b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002387e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023884:	e8 e7 4c ff ff       	call   c0018570 <VAS::mapPage(unsigned long, unsigned long, int)>
c0023889:	83 c4 0c             	add    esp,0xc
c002388c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0023893:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023899:	6a 00                	push   0x0
c002389b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00238a0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00238a3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00238a9:	e8 28 4b ff ff       	call   c00183d6 <VAS::mapOtherVASIn(bool, VAS*)>
c00238ae:	58                   	pop    eax
c00238af:	5a                   	pop    edx
c00238b0:	68 07 0c 00 00       	push   0xc07
c00238b5:	55                   	push   ebp
c00238b6:	57                   	push   edi
c00238b7:	89 df                	mov    edi,ebx
c00238b9:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00238c0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00238c6:	6a 00                	push   0x0
c00238c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00238cd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00238d0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00238d6:	e8 e7 4e ff ff       	call   c00187c2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00238db:	b9 00 10 00 00       	mov    ecx,0x1000
c00238e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00238e2:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00238e7:	83 c4 20             	add    esp,0x20
c00238ea:	48                   	dec    eax
c00238eb:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00238f0:	85 c0                	test   eax,eax
c00238f2:	75 01                	jne    c00238f5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c00238f4:	fb                   	sti    
c00238f5:	81 c5 00 10 00 00    	add    ebp,0x1000
c00238fb:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00238ff:	e9 f1 fe ff ff       	jmp    c00237f5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0023904:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c002390b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0023912:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0023918:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c002391e:	0f 86 ae 00 00 00    	jbe    c00239d2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0023924:	fa                   	cli    
c0023925:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002392b:	c1 ee 0c             	shr    esi,0xc
c002392e:	51                   	push   ecx
c002392f:	31 ff                	xor    edi,edi
c0023931:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0023938:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c002393e:	6a 00                	push   0x0
c0023940:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023945:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023948:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c002394e:	e8 83 4a ff ff       	call   c00183d6 <VAS::mapOtherVASIn(bool, VAS*)>
c0023953:	83 c4 10             	add    esp,0x10
c0023956:	e8 b4 2c ff ff       	call   c001660f <Phys::allocatePage()>
c002395b:	47                   	inc    edi
c002395c:	6a 07                	push   0x7
c002395e:	53                   	push   ebx
c002395f:	50                   	push   eax
c0023960:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023964:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c002396a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c002396d:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0023973:	e8 f8 4b ff ff       	call   c0018570 <VAS::mapPage(unsigned long, unsigned long, int)>
c0023978:	58                   	pop    eax
c0023979:	5a                   	pop    edx
c002397a:	68 07 0c 00 00       	push   0xc07
c002397f:	55                   	push   ebp
c0023980:	81 c5 00 10 00 00    	add    ebp,0x1000
c0023986:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002398a:	50                   	push   eax
c002398b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0023992:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023998:	6a 00                	push   0x0
c002399a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002399f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00239a2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00239a8:	e8 15 4e ff ff       	call   c00187c2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00239ad:	83 c4 1c             	add    esp,0x1c
c00239b0:	68 00 10 00 00       	push   0x1000
c00239b5:	6a 00                	push   0x0
c00239b7:	53                   	push   ebx
c00239b8:	e8 33 cb fd ff       	call   c00004f0 <memset>
c00239bd:	83 c4 10             	add    esp,0x10
c00239c0:	39 fe                	cmp    esi,edi
c00239c2:	77 92                	ja     c0023956 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c00239c4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00239c9:	48                   	dec    eax
c00239ca:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00239cf:	75 01                	jne    c00239d2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00239d1:	fb                   	sti    
c00239d2:	83 ec 0c             	sub    esp,0xc
c00239d5:	53                   	push   ebx
c00239d6:	e8 a0 47 ff ff       	call   c001817b <Virt::freeKernelVirtualPages(unsigned long)>
c00239db:	83 c4 10             	add    esp,0x10
c00239de:	b0 01                	mov    al,0x1
c00239e0:	81 c4 2c 10 00 00    	add    esp,0x102c
c00239e6:	5b                   	pop    ebx
c00239e7:	5e                   	pop    esi
c00239e8:	5f                   	pop    edi
c00239e9:	5d                   	pop    ebp
c00239ea:	c3                   	ret    

c00239eb <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00239eb:	55                   	push   ebp
c00239ec:	57                   	push   edi
c00239ed:	56                   	push   esi
c00239ee:	53                   	push   ebx
c00239ef:	83 ec 48             	sub    esp,0x48
c00239f2:	68 14 01 00 00       	push   0x114
c00239f7:	e8 0a 29 ff ff       	call   c0016306 <malloc>
c00239fc:	83 c4 0c             	add    esp,0xc
c00239ff:	89 c6                	mov    esi,eax
c0023a01:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0023a05:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0023a09:	50                   	push   eax
c0023a0a:	e8 8d 69 ff ff       	call   c001a39c <File::File(char const*, Process*)>
c0023a0f:	58                   	pop    eax
c0023a10:	5a                   	pop    edx
c0023a11:	6a 01                	push   0x1
c0023a13:	56                   	push   esi
c0023a14:	e8 a1 69 ff ff       	call   c001a3ba <File::open(FileOpenMode)>
c0023a19:	83 c4 10             	add    esp,0x10
c0023a1c:	85 c0                	test   eax,eax
c0023a1e:	0f 85 43 01 00 00    	jne    c0023b67 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023a24:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0023a2c:	83 ec 0c             	sub    esp,0xc
c0023a2f:	6a 34                	push   0x34
c0023a31:	e8 d0 28 ff ff       	call   c0016306 <malloc>
c0023a36:	89 c3                	mov    ebx,eax
c0023a38:	58                   	pop    eax
c0023a39:	8b 06                	mov    eax,DWORD PTR [esi]
c0023a3b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0023a3f:	57                   	push   edi
c0023a40:	53                   	push   ebx
c0023a41:	6a 00                	push   0x0
c0023a43:	6a 34                	push   0x34
c0023a45:	56                   	push   esi
c0023a46:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023a49:	83 c4 20             	add    esp,0x20
c0023a4c:	85 c0                	test   eax,eax
c0023a4e:	0f 85 13 01 00 00    	jne    c0023b67 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023a54:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0023a5a:	0f 85 07 01 00 00    	jne    c0023b67 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023a60:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023a63:	85 c0                	test   eax,eax
c0023a65:	0f 84 fc 00 00 00    	je     c0023b67 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023a6b:	31 d2                	xor    edx,edx
c0023a6d:	55                   	push   ebp
c0023a6e:	52                   	push   edx
c0023a6f:	50                   	push   eax
c0023a70:	56                   	push   esi
c0023a71:	e8 02 6a ff ff       	call   c001a478 <File::seek(unsigned long long)>
c0023a76:	83 c4 10             	add    esp,0x10
c0023a79:	85 c0                	test   eax,eax
c0023a7b:	0f 85 e6 00 00 00    	jne    c0023b67 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023a81:	83 ec 0c             	sub    esp,0xc
c0023a84:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0023a87:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0023a8b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0023a8f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0023a93:	0f af c2             	imul   eax,edx
c0023a96:	50                   	push   eax
c0023a97:	e8 6a 28 ff ff       	call   c0016306 <malloc>
c0023a9c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0023a9e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0023aa2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023aa5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023aa9:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0023aad:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0023ab1:	0f af c2             	imul   eax,edx
c0023ab4:	99                   	cdq    
c0023ab5:	52                   	push   edx
c0023ab6:	50                   	push   eax
c0023ab7:	56                   	push   esi
c0023ab8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023abb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0023abe:	83 c4 20             	add    esp,0x20
c0023ac1:	85 c0                	test   eax,eax
c0023ac3:	0f 84 9e 00 00 00    	je     c0023b67 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023ac9:	31 d2                	xor    edx,edx
c0023acb:	51                   	push   ecx
c0023acc:	52                   	push   edx
c0023acd:	50                   	push   eax
c0023ace:	56                   	push   esi
c0023acf:	e8 a4 69 ff ff       	call   c001a478 <File::seek(unsigned long long)>
c0023ad4:	83 c4 10             	add    esp,0x10
c0023ad7:	85 c0                	test   eax,eax
c0023ad9:	0f 85 88 00 00 00    	jne    c0023b67 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023adf:	83 ec 0c             	sub    esp,0xc
c0023ae2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0023ae6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0023aea:	31 ed                	xor    ebp,ebp
c0023aec:	0f af c2             	imul   eax,edx
c0023aef:	50                   	push   eax
c0023af0:	e8 11 28 ff ff       	call   c0016306 <malloc>
c0023af5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0023af7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023afb:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023afe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b02:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0023b06:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0023b0a:	0f af c2             	imul   eax,edx
c0023b0d:	99                   	cdq    
c0023b0e:	52                   	push   edx
c0023b0f:	50                   	push   eax
c0023b10:	56                   	push   esi
c0023b11:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023b14:	83 c4 20             	add    esp,0x20
c0023b17:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0023b1f:	0f b7 fd             	movzx  edi,bp
c0023b22:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0023b26:	73 7d                	jae    c0023ba5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0023b28:	c1 e7 05             	shl    edi,0x5
c0023b2b:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0023b2f:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0023b32:	75 6b                	jne    c0023b9f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0023b34:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0023b37:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023b3b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0023b3e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023b42:	52                   	push   edx
c0023b43:	31 d2                	xor    edx,edx
c0023b45:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0023b48:	52                   	push   edx
c0023b49:	50                   	push   eax
c0023b4a:	56                   	push   esi
c0023b4b:	e8 28 69 ff ff       	call   c001a478 <File::seek(unsigned long long)>
c0023b50:	83 c4 10             	add    esp,0x10
c0023b53:	85 c0                	test   eax,eax
c0023b55:	74 17                	je     c0023b6e <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0023b57:	83 ec 0c             	sub    esp,0xc
c0023b5a:	68 f3 2a 03 c0       	push   0xc0032af3
c0023b5f:	e8 31 56 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0023b64:	83 c4 10             	add    esp,0x10
c0023b67:	31 c0                	xor    eax,eax
c0023b69:	e9 87 00 00 00       	jmp    c0023bf5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0023b6e:	83 ec 0c             	sub    esp,0xc
c0023b71:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0023b74:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0023b77:	50                   	push   eax
c0023b78:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0023b7c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023b80:	56                   	push   esi
c0023b81:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0023b85:	e8 d3 fb ff ff       	call   c002375d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0023b8a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0023b8e:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0023b92:	83 c4 20             	add    esp,0x20
c0023b95:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0023b99:	73 04                	jae    c0023b9f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0023b9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023b9f:	45                   	inc    ebp
c0023ba0:	e9 7a ff ff ff       	jmp    c0023b1f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0023ba5:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0023ba9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023bad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023bb1:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0023bb7:	83 ec 0c             	sub    esp,0xc
c0023bba:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0023bc0:	25 00 f0 ff ff       	and    eax,0xfffff000
c0023bc5:	05 00 10 00 00       	add    eax,0x1000
c0023bca:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0023bcd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023bd1:	e8 40 27 ff ff       	call   c0016316 <free>
c0023bd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023bd9:	e8 38 27 ff ff       	call   c0016316 <free>
c0023bde:	58                   	pop    eax
c0023bdf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023be3:	e8 2e 27 ff ff       	call   c0016316 <free>
c0023be8:	89 34 24             	mov    DWORD PTR [esp],esi
c0023beb:	e8 28 68 ff ff       	call   c001a418 <File::close()>
c0023bf0:	83 c4 10             	add    esp,0x10
c0023bf3:	b0 01                	mov    al,0x1
c0023bf5:	83 c4 3c             	add    esp,0x3c
c0023bf8:	5b                   	pop    ebx
c0023bf9:	5e                   	pop    esi
c0023bfa:	5f                   	pop    edi
c0023bfb:	5d                   	pop    ebp
c0023bfc:	c3                   	ret    

c0023bfd <Thr::runtimeReferenceHelper()>:
c0023bfd:	83 ec 18             	sub    esp,0x18
c0023c00:	68 fb 2a 03 c0       	push   0xc0032afb
c0023c05:	e8 8b 55 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0023c0a:	fa                   	cli    
c0023c0b:	83 c4 10             	add    esp,0x10
c0023c0e:	eb fe                	jmp    c0023c0e <Thr::runtimeReferenceHelper()+0x11>

c0023c10 <Thr::getAddressOfKernelSymbol(char const*)>:
c0023c10:	57                   	push   edi
c0023c11:	56                   	push   esi
c0023c12:	53                   	push   ebx
c0023c13:	31 db                	xor    ebx,ebx
c0023c15:	39 1d a0 01 04 c0    	cmp    DWORD PTR ds:0xc00401a0,ebx
c0023c1b:	7e 3c                	jle    c0023c59 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0023c1d:	8b 34 9d 20 01 04 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffbfee0]
c0023c24:	31 ff                	xor    edi,edi
c0023c26:	39 3c 9d 20 00 04 c0 	cmp    DWORD PTR [ebx*4-0x3ffbffe0],edi
c0023c2d:	7e 27                	jle    c0023c56 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0023c2f:	50                   	push   eax
c0023c30:	50                   	push   eax
c0023c31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023c35:	8b 06                	mov    eax,DWORD PTR [esi]
c0023c37:	03 04 9d a0 00 04 c0 	add    eax,DWORD PTR [ebx*4-0x3ffbff60]
c0023c3e:	50                   	push   eax
c0023c3f:	e8 0c cb fd ff       	call   c0000750 <strcmp>
c0023c44:	83 c4 10             	add    esp,0x10
c0023c47:	85 c0                	test   eax,eax
c0023c49:	75 05                	jne    c0023c50 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0023c4b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0023c4e:	eb 0b                	jmp    c0023c5b <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0023c50:	83 c6 10             	add    esi,0x10
c0023c53:	47                   	inc    edi
c0023c54:	eb d0                	jmp    c0023c26 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0023c56:	43                   	inc    ebx
c0023c57:	eb bc                	jmp    c0023c15 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0023c59:	31 c0                	xor    eax,eax
c0023c5b:	5b                   	pop    ebx
c0023c5c:	5e                   	pop    esi
c0023c5d:	5f                   	pop    edi
c0023c5e:	c3                   	ret    

c0023c5f <Thr::loadKernelSymbolTable(char const*)>:
c0023c5f:	55                   	push   ebp
c0023c60:	57                   	push   edi
c0023c61:	56                   	push   esi
c0023c62:	53                   	push   ebx
c0023c63:	83 ec 68             	sub    esp,0x68
c0023c66:	8b 35 f8 01 04 c0    	mov    esi,DWORD PTR ds:0xc00401f8
c0023c6c:	68 14 01 00 00       	push   0x114
c0023c71:	e8 90 26 ff ff       	call   c0016306 <malloc>
c0023c76:	83 c4 0c             	add    esp,0xc
c0023c79:	89 c3                	mov    ebx,eax
c0023c7b:	56                   	push   esi
c0023c7c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0023c80:	50                   	push   eax
c0023c81:	e8 16 67 ff ff       	call   c001a39c <File::File(char const*, Process*)>
c0023c86:	5e                   	pop    esi
c0023c87:	5f                   	pop    edi
c0023c88:	6a 01                	push   0x1
c0023c8a:	53                   	push   ebx
c0023c8b:	e8 2a 67 ff ff       	call   c001a3ba <File::open(FileOpenMode)>
c0023c90:	83 c4 10             	add    esp,0x10
c0023c93:	85 c0                	test   eax,eax
c0023c95:	74 0a                	je     c0023ca1 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0023c97:	83 ec 0c             	sub    esp,0xc
c0023c9a:	68 1d 2b 03 c0       	push   0xc0032b1d
c0023c9f:	eb 34                	jmp    c0023cd5 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0023ca1:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0023ca9:	83 ec 0c             	sub    esp,0xc
c0023cac:	6a 34                	push   0x34
c0023cae:	e8 53 26 ff ff       	call   c0016306 <malloc>
c0023cb3:	59                   	pop    ecx
c0023cb4:	89 c7                	mov    edi,eax
c0023cb6:	8d 74 24 34          	lea    esi,[esp+0x34]
c0023cba:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023cbc:	56                   	push   esi
c0023cbd:	57                   	push   edi
c0023cbe:	6a 00                	push   0x0
c0023cc0:	6a 34                	push   0x34
c0023cc2:	53                   	push   ebx
c0023cc3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023cc6:	83 c4 20             	add    esp,0x20
c0023cc9:	85 c0                	test   eax,eax
c0023ccb:	74 17                	je     c0023ce4 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0023ccd:	83 ec 0c             	sub    esp,0xc
c0023cd0:	68 34 2b 03 c0       	push   0xc0032b34
c0023cd5:	e8 d4 c4 ff ff       	call   c00201ae <KePanic(char const*)>
c0023cda:	83 c4 10             	add    esp,0x10
c0023cdd:	31 c0                	xor    eax,eax
c0023cdf:	e9 31 02 00 00       	jmp    c0023f15 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0023ce4:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0023cea:	75 e1                	jne    c0023ccd <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0023cec:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0023cef:	85 c0                	test   eax,eax
c0023cf1:	74 da                	je     c0023ccd <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0023cf3:	52                   	push   edx
c0023cf4:	31 d2                	xor    edx,edx
c0023cf6:	52                   	push   edx
c0023cf7:	50                   	push   eax
c0023cf8:	53                   	push   ebx
c0023cf9:	e8 7a 67 ff ff       	call   c001a478 <File::seek(unsigned long long)>
c0023cfe:	83 c4 10             	add    esp,0x10
c0023d01:	85 c0                	test   eax,eax
c0023d03:	75 c8                	jne    c0023ccd <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0023d05:	83 ec 0c             	sub    esp,0xc
c0023d08:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0023d0c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0023d10:	31 ed                	xor    ebp,ebp
c0023d12:	0f af c2             	imul   eax,edx
c0023d15:	50                   	push   eax
c0023d16:	e8 eb 25 ff ff       	call   c0016306 <malloc>
c0023d1b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0023d1d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023d21:	89 34 24             	mov    DWORD PTR [esp],esi
c0023d24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023d28:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0023d2c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0023d30:	0f af c2             	imul   eax,edx
c0023d33:	99                   	cdq    
c0023d34:	52                   	push   edx
c0023d35:	50                   	push   eax
c0023d36:	53                   	push   ebx
c0023d37:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023d3a:	83 c4 20             	add    esp,0x20
c0023d3d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0023d45:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0023d4d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023d55:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0023d5d:	0f b7 f5             	movzx  esi,bp
c0023d60:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0023d64:	0f 83 a7 00 00 00    	jae    c0023e11 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0023d6a:	6b f6 28             	imul   esi,esi,0x28
c0023d6d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0023d71:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0023d74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023d78:	50                   	push   eax
c0023d79:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0023d7d:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0023d81:	8b 16                	mov    edx,DWORD PTR [esi]
c0023d83:	6b c0 28             	imul   eax,eax,0x28
c0023d86:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0023d8a:	89 d0                	mov    eax,edx
c0023d8c:	31 d2                	xor    edx,edx
c0023d8e:	52                   	push   edx
c0023d8f:	50                   	push   eax
c0023d90:	53                   	push   ebx
c0023d91:	e8 e2 66 ff ff       	call   c001a478 <File::seek(unsigned long long)>
c0023d96:	83 c4 0c             	add    esp,0xc
c0023d99:	6a 20                	push   0x20
c0023d9b:	6a 00                	push   0x0
c0023d9d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0023da1:	52                   	push   edx
c0023da2:	e8 49 c7 fd ff       	call   c00004f0 <memset>
c0023da7:	58                   	pop    eax
c0023da8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023daa:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0023dae:	51                   	push   ecx
c0023daf:	8d 54 24 40          	lea    edx,[esp+0x40]
c0023db3:	52                   	push   edx
c0023db4:	6a 00                	push   0x0
c0023db6:	6a 1f                	push   0x1f
c0023db8:	53                   	push   ebx
c0023db9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023dbc:	83 c4 18             	add    esp,0x18
c0023dbf:	68 4b 2b 03 c0       	push   0xc0032b4b
c0023dc4:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0023dc8:	52                   	push   edx
c0023dc9:	e8 82 c9 fd ff       	call   c0000750 <strcmp>
c0023dce:	83 c4 10             	add    esp,0x10
c0023dd1:	85 c0                	test   eax,eax
c0023dd3:	75 0f                	jne    c0023de4 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0023dd5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0023dd8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023ddc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023de0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023de4:	50                   	push   eax
c0023de5:	50                   	push   eax
c0023de6:	68 53 2b 03 c0       	push   0xc0032b53
c0023deb:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0023def:	50                   	push   eax
c0023df0:	e8 5b c9 fd ff       	call   c0000750 <strcmp>
c0023df5:	83 c4 10             	add    esp,0x10
c0023df8:	85 c0                	test   eax,eax
c0023dfa:	75 0f                	jne    c0023e0b <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0023dfc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0023dff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023e03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023e07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023e0b:	45                   	inc    ebp
c0023e0c:	e9 4c ff ff ff       	jmp    c0023d5d <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0023e11:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0023e16:	75 10                	jne    c0023e28 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0023e18:	83 ec 0c             	sub    esp,0xc
c0023e1b:	68 5b 2b 03 c0       	push   0xc0032b5b
c0023e20:	e8 89 c3 ff ff       	call   c00201ae <KePanic(char const*)>
c0023e25:	83 c4 10             	add    esp,0x10
c0023e28:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0023e2d:	75 10                	jne    c0023e3f <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0023e2f:	83 ec 0c             	sub    esp,0xc
c0023e32:	68 5b 2b 03 c0       	push   0xc0032b5b
c0023e37:	e8 72 c3 ff ff       	call   c00201ae <KePanic(char const*)>
c0023e3c:	83 c4 10             	add    esp,0x10
c0023e3f:	31 d2                	xor    edx,edx
c0023e41:	50                   	push   eax
c0023e42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e46:	52                   	push   edx
c0023e47:	50                   	push   eax
c0023e48:	53                   	push   ebx
c0023e49:	e8 2a 66 ff ff       	call   c001a478 <File::seek(unsigned long long)>
c0023e4e:	5a                   	pop    edx
c0023e4f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0023e53:	e8 ae 24 ff ff       	call   c0016306 <malloc>
c0023e58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023e5c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023e60:	31 c9                	xor    ecx,ecx
c0023e62:	5e                   	pop    esi
c0023e63:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023e65:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0023e69:	55                   	push   ebp
c0023e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023e6e:	51                   	push   ecx
c0023e6f:	52                   	push   edx
c0023e70:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0023e74:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0023e78:	53                   	push   ebx
c0023e79:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023e7c:	83 c4 14             	add    esp,0x14
c0023e7f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023e83:	e8 7e 24 ff ff       	call   c0016306 <malloc>
c0023e88:	89 c6                	mov    esi,eax
c0023e8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023e8c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0023e8f:	56                   	push   esi
c0023e90:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0023e94:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0023e98:	51                   	push   ecx
c0023e99:	52                   	push   edx
c0023e9a:	53                   	push   ebx
c0023e9b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023e9e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023ea2:	8b 15 a0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401a0
c0023ea8:	83 c4 1c             	add    esp,0x1c
c0023eab:	c1 e8 04             	shr    eax,0x4
c0023eae:	89 04 95 20 00 04 c0 	mov    DWORD PTR [edx*4-0x3ffbffe0],eax
c0023eb5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023eb9:	31 d2                	xor    edx,edx
c0023ebb:	52                   	push   edx
c0023ebc:	50                   	push   eax
c0023ebd:	53                   	push   ebx
c0023ebe:	e8 b5 65 ff ff       	call   c001a478 <File::seek(unsigned long long)>
c0023ec3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0023ec5:	31 d2                	xor    edx,edx
c0023ec7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0023eca:	56                   	push   esi
c0023ecb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0023ecf:	52                   	push   edx
c0023ed0:	50                   	push   eax
c0023ed1:	53                   	push   ebx
c0023ed2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023ed5:	83 c4 14             	add    esp,0x14
c0023ed8:	53                   	push   ebx
c0023ed9:	e8 3a 65 ff ff       	call   c001a418 <File::close()>
c0023ede:	5d                   	pop    ebp
c0023edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023ee3:	e8 2e 24 ff ff       	call   c0016316 <free>
c0023ee8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023eeb:	e8 26 24 ff ff       	call   c0016316 <free>
c0023ef0:	a1 a0 01 04 c0       	mov    eax,ds:0xc00401a0
c0023ef5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023ef9:	8d 50 01             	lea    edx,[eax+0x1]
c0023efc:	89 0c 85 20 01 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfee0],ecx
c0023f03:	89 34 85 a0 00 04 c0 	mov    DWORD PTR [eax*4-0x3ffbff60],esi
c0023f0a:	89 15 a0 01 04 c0    	mov    DWORD PTR ds:0xc00401a0,edx
c0023f10:	83 c4 10             	add    esp,0x10
c0023f13:	b0 01                	mov    al,0x1
c0023f15:	83 c4 5c             	add    esp,0x5c
c0023f18:	5b                   	pop    ebx
c0023f19:	5e                   	pop    esi
c0023f1a:	5f                   	pop    edi
c0023f1b:	5d                   	pop    ebp
c0023f1c:	c3                   	ret    

c0023f1d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0023f1d:	55                   	push   ebp
c0023f1e:	57                   	push   edi
c0023f1f:	56                   	push   esi
c0023f20:	53                   	push   ebx
c0023f21:	81 ec 68 03 00 00    	sub    esp,0x368
c0023f27:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0023f2e:	8b 1d f8 01 04 c0    	mov    ebx,DWORD PTR ds:0xc00401f8
c0023f34:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0023f38:	68 14 01 00 00       	push   0x114
c0023f3d:	e8 c4 23 ff ff       	call   c0016306 <malloc>
c0023f42:	83 c4 0c             	add    esp,0xc
c0023f45:	89 c5                	mov    ebp,eax
c0023f47:	53                   	push   ebx
c0023f48:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0023f4f:	50                   	push   eax
c0023f50:	e8 47 64 ff ff       	call   c001a39c <File::File(char const*, Process*)>
c0023f55:	5e                   	pop    esi
c0023f56:	5f                   	pop    edi
c0023f57:	6a 01                	push   0x1
c0023f59:	55                   	push   ebp
c0023f5a:	e8 5b 64 ff ff       	call   c001a3ba <File::open(FileOpenMode)>
c0023f5f:	83 c4 10             	add    esp,0x10
c0023f62:	85 c0                	test   eax,eax
c0023f64:	0f 85 aa 06 00 00    	jne    c0024614 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0023f6a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0023f72:	83 ec 0c             	sub    esp,0xc
c0023f75:	6a 34                	push   0x34
c0023f77:	e8 8a 23 ff ff       	call   c0016306 <malloc>
c0023f7c:	5b                   	pop    ebx
c0023f7d:	89 c7                	mov    edi,eax
c0023f7f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0023f83:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023f86:	53                   	push   ebx
c0023f87:	57                   	push   edi
c0023f88:	6a 00                	push   0x0
c0023f8a:	6a 34                	push   0x34
c0023f8c:	55                   	push   ebp
c0023f8d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023f90:	83 c4 20             	add    esp,0x20
c0023f93:	85 c0                	test   eax,eax
c0023f95:	0f 85 79 06 00 00    	jne    c0024614 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0023f9b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0023fa1:	0f 85 6d 06 00 00    	jne    c0024614 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0023fa7:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0023faa:	85 c0                	test   eax,eax
c0023fac:	0f 84 62 06 00 00    	je     c0024614 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0023fb2:	31 d2                	xor    edx,edx
c0023fb4:	51                   	push   ecx
c0023fb5:	52                   	push   edx
c0023fb6:	50                   	push   eax
c0023fb7:	55                   	push   ebp
c0023fb8:	e8 bb 64 ff ff       	call   c001a478 <File::seek(unsigned long long)>
c0023fbd:	83 c4 10             	add    esp,0x10
c0023fc0:	85 c0                	test   eax,eax
c0023fc2:	0f 85 4c 06 00 00    	jne    c0024614 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0023fc8:	83 ec 0c             	sub    esp,0xc
c0023fcb:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0023fce:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0023fd2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0023fd6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0023fda:	0f af c2             	imul   eax,edx
c0023fdd:	50                   	push   eax
c0023fde:	e8 23 23 ff ff       	call   c0016306 <malloc>
c0023fe3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0023fe6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023fea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023fed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023ff1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0023ff5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0023ff9:	0f af c2             	imul   eax,edx
c0023ffc:	99                   	cdq    
c0023ffd:	52                   	push   edx
c0023ffe:	50                   	push   eax
c0023fff:	55                   	push   ebp
c0024000:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024003:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0024006:	83 c4 20             	add    esp,0x20
c0024009:	85 c0                	test   eax,eax
c002400b:	0f 84 03 06 00 00    	je     c0024614 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0024011:	52                   	push   edx
c0024012:	31 d2                	xor    edx,edx
c0024014:	52                   	push   edx
c0024015:	50                   	push   eax
c0024016:	55                   	push   ebp
c0024017:	e8 5c 64 ff ff       	call   c001a478 <File::seek(unsigned long long)>
c002401c:	83 c4 10             	add    esp,0x10
c002401f:	85 c0                	test   eax,eax
c0024021:	0f 85 ed 05 00 00    	jne    c0024614 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0024027:	83 ec 0c             	sub    esp,0xc
c002402a:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c002402e:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0024032:	31 f6                	xor    esi,esi
c0024034:	0f af c2             	imul   eax,edx
c0024037:	50                   	push   eax
c0024038:	e8 c9 22 ff ff       	call   c0016306 <malloc>
c002403d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0024040:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024044:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024047:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002404b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c002404f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0024053:	0f af c2             	imul   eax,edx
c0024056:	99                   	cdq    
c0024057:	52                   	push   edx
c0024058:	50                   	push   eax
c0024059:	55                   	push   ebp
c002405a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002405d:	83 c4 20             	add    esp,0x20
c0024060:	0f b7 de             	movzx  ebx,si
c0024063:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0024067:	0f 83 87 00 00 00    	jae    c00240f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c002406d:	c1 e3 05             	shl    ebx,0x5
c0024070:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0024074:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0024077:	75 75                	jne    c00240ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0024079:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c002407c:	31 d2                	xor    edx,edx
c002407e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024082:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0024085:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024089:	50                   	push   eax
c002408a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c002408d:	52                   	push   edx
c002408e:	50                   	push   eax
c002408f:	55                   	push   ebp
c0024090:	e8 e3 63 ff ff       	call   c001a478 <File::seek(unsigned long long)>
c0024095:	83 c4 10             	add    esp,0x10
c0024098:	85 c0                	test   eax,eax
c002409a:	0f 85 74 05 00 00    	jne    c0024614 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00240a0:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00240a7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00240aa:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00240ae:	31 d2                	xor    edx,edx
c00240b0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00240b4:	83 ec 0c             	sub    esp,0xc
c00240b7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00240bb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00240c2:	50                   	push   eax
c00240c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00240c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00240cb:	52                   	push   edx
c00240cc:	50                   	push   eax
c00240cd:	55                   	push   ebp
c00240ce:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00240d1:	83 c4 1c             	add    esp,0x1c
c00240d4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00240d7:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00240da:	50                   	push   eax
c00240db:	6a 00                	push   0x0
c00240dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240e1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00240e5:	50                   	push   eax
c00240e6:	e8 05 c4 fd ff       	call   c00004f0 <memset>
c00240eb:	83 c4 10             	add    esp,0x10
c00240ee:	46                   	inc    esi
c00240ef:	e9 6c ff ff ff       	jmp    c0024060 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00240f4:	53                   	push   ebx
c00240f5:	31 db                	xor    ebx,ebx
c00240f7:	68 00 01 00 00       	push   0x100
c00240fc:	6a 00                	push   0x0
c00240fe:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0024102:	50                   	push   eax
c0024103:	e8 e8 c3 fd ff       	call   c00004f0 <memset>
c0024108:	83 c4 0c             	add    esp,0xc
c002410b:	68 00 01 00 00       	push   0x100
c0024110:	6a 00                	push   0x0
c0024112:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0024119:	50                   	push   eax
c002411a:	e8 d1 c3 fd ff       	call   c00004f0 <memset>
c002411f:	83 c4 10             	add    esp,0x10
c0024122:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002412a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0024132:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c002413a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0024142:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002414a:	0f b7 f3             	movzx  esi,bx
c002414d:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0024151:	0f 83 2d 01 00 00    	jae    c0024284 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0024157:	6b f6 28             	imul   esi,esi,0x28
c002415a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c002415e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0024161:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024165:	52                   	push   edx
c0024166:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002416a:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c002416e:	8b 06                	mov    eax,DWORD PTR [esi]
c0024170:	6b d2 28             	imul   edx,edx,0x28
c0024173:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0024177:	31 d2                	xor    edx,edx
c0024179:	52                   	push   edx
c002417a:	50                   	push   eax
c002417b:	55                   	push   ebp
c002417c:	e8 f7 62 ff ff       	call   c001a478 <File::seek(unsigned long long)>
c0024181:	83 c4 0c             	add    esp,0xc
c0024184:	6a 20                	push   0x20
c0024186:	6a 00                	push   0x0
c0024188:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c002418f:	51                   	push   ecx
c0024190:	e8 5b c3 fd ff       	call   c00004f0 <memset>
c0024195:	59                   	pop    ecx
c0024196:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024199:	8d 54 24 58          	lea    edx,[esp+0x58]
c002419d:	52                   	push   edx
c002419e:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00241a5:	51                   	push   ecx
c00241a6:	6a 00                	push   0x0
c00241a8:	6a 1f                	push   0x1f
c00241aa:	55                   	push   ebp
c00241ab:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00241ae:	83 c4 1c             	add    esp,0x1c
c00241b1:	6a 09                	push   0x9
c00241b3:	68 75 2b 03 c0       	push   0xc0032b75
c00241b8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00241bf:	51                   	push   ecx
c00241c0:	e8 bb c1 fd ff       	call   c0000380 <memcmp>
c00241c5:	83 c4 10             	add    esp,0x10
c00241c8:	85 c0                	test   eax,eax
c00241ca:	75 21                	jne    c00241ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00241cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00241d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00241d4:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00241d8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00241dc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00241df:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00241e6:	89 d0                	mov    eax,edx
c00241e8:	40                   	inc    eax
c00241e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00241ed:	50                   	push   eax
c00241ee:	6a 09                	push   0x9
c00241f0:	68 7f 2b 03 c0       	push   0xc0032b7f
c00241f5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00241fc:	50                   	push   eax
c00241fd:	e8 7e c1 fd ff       	call   c0000380 <memcmp>
c0024202:	83 c4 10             	add    esp,0x10
c0024205:	85 c0                	test   eax,eax
c0024207:	75 21                	jne    c002422a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0024209:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002420d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024211:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0024215:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0024219:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c002421c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0024223:	89 d0                	mov    eax,edx
c0024225:	40                   	inc    eax
c0024226:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002422a:	50                   	push   eax
c002422b:	50                   	push   eax
c002422c:	68 4b 2b 03 c0       	push   0xc0032b4b
c0024231:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024238:	50                   	push   eax
c0024239:	e8 12 c5 fd ff       	call   c0000750 <strcmp>
c002423e:	83 c4 10             	add    esp,0x10
c0024241:	85 c0                	test   eax,eax
c0024243:	75 0f                	jne    c0024254 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0024245:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0024248:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002424c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024250:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024254:	50                   	push   eax
c0024255:	50                   	push   eax
c0024256:	68 53 2b 03 c0       	push   0xc0032b53
c002425b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024262:	50                   	push   eax
c0024263:	e8 e8 c4 fd ff       	call   c0000750 <strcmp>
c0024268:	83 c4 10             	add    esp,0x10
c002426b:	85 c0                	test   eax,eax
c002426d:	75 0f                	jne    c002427e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c002426f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0024272:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024276:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002427a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002427e:	43                   	inc    ebx
c002427f:	e9 c6 fe ff ff       	jmp    c002414a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0024284:	31 d2                	xor    edx,edx
c0024286:	50                   	push   eax
c0024287:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002428b:	52                   	push   edx
c002428c:	50                   	push   eax
c002428d:	55                   	push   ebp
c002428e:	e8 e5 61 ff ff       	call   c001a478 <File::seek(unsigned long long)>
c0024293:	58                   	pop    eax
c0024294:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0024298:	e8 69 20 ff ff       	call   c0016306 <malloc>
c002429d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00242a0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00242a4:	31 d2                	xor    edx,edx
c00242a6:	58                   	pop    eax
c00242a7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00242ab:	53                   	push   ebx
c00242ac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00242b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00242b4:	52                   	push   edx
c00242b5:	50                   	push   eax
c00242b6:	55                   	push   ebp
c00242b7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00242ba:	83 c4 14             	add    esp,0x14
c00242bd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00242c1:	e8 40 20 ff ff       	call   c0016306 <malloc>
c00242c6:	31 d2                	xor    edx,edx
c00242c8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00242cc:	83 c4 0c             	add    esp,0xc
c00242cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00242d3:	52                   	push   edx
c00242d4:	50                   	push   eax
c00242d5:	55                   	push   ebp
c00242d6:	e8 9d 61 ff ff       	call   c001a478 <File::seek(unsigned long long)>
c00242db:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00242de:	31 d2                	xor    edx,edx
c00242e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00242e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00242e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00242eb:	52                   	push   edx
c00242ec:	50                   	push   eax
c00242ed:	55                   	push   ebp
c00242ee:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00242f1:	83 c4 20             	add    esp,0x20
c00242f4:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c00242f9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0024301:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0024305:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024309:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c002430d:	0f 84 05 03 00 00    	je     c0024618 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0024313:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c002431a:	31 d2                	xor    edx,edx
c002431c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024320:	c1 e8 03             	shr    eax,0x3
c0024323:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0024327:	51                   	push   ecx
c0024328:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002432c:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0024330:	52                   	push   edx
c0024331:	50                   	push   eax
c0024332:	55                   	push   ebp
c0024333:	e8 40 61 ff ff       	call   c001a478 <File::seek(unsigned long long)>
c0024338:	5b                   	pop    ebx
c0024339:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002433d:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0024344:	e8 bd 1f ff ff       	call   c0016306 <malloc>
c0024349:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c002434c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024350:	31 d2                	xor    edx,edx
c0024352:	5e                   	pop    esi
c0024353:	8d 44 24 58          	lea    eax,[esp+0x58]
c0024357:	50                   	push   eax
c0024358:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002435c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024360:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0024367:	52                   	push   edx
c0024368:	50                   	push   eax
c0024369:	55                   	push   ebp
c002436a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002436d:	83 c4 20             	add    esp,0x20
c0024370:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0024378:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002437c:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0024380:	0f 8d 76 02 00 00    	jge    c00245fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0024386:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002438a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002438e:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0024393:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0024396:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002439a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002439e:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c00243a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00243a6:	c1 e8 08             	shr    eax,0x8
c00243a9:	89 c6                	mov    esi,eax
c00243ab:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00243af:	c1 e6 04             	shl    esi,0x4
c00243b2:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00243b6:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c00243b9:	85 db                	test   ebx,ebx
c00243bb:	0f 85 b3 00 00 00    	jne    c0024474 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00243c1:	83 ec 0c             	sub    esp,0xc
c00243c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00243c8:	03 06                	add    eax,DWORD PTR [esi]
c00243ca:	50                   	push   eax
c00243cb:	e8 40 f8 ff ff       	call   c0023c10 <Thr::getAddressOfKernelSymbol(char const*)>
c00243d0:	83 c4 10             	add    esp,0x10
c00243d3:	89 c3                	mov    ebx,eax
c00243d5:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c00243da:	85 c0                	test   eax,eax
c00243dc:	0f 85 92 00 00 00    	jne    c0024474 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00243e2:	83 ec 0c             	sub    esp,0xc
c00243e5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00243e9:	03 06                	add    eax,DWORD PTR [esi]
c00243eb:	50                   	push   eax
c00243ec:	e8 ab bf ff ff       	call   c002039c <KeResolveCompatibilitySymbol(char*)>
c00243f1:	83 c4 10             	add    esp,0x10
c00243f4:	89 c3                	mov    ebx,eax
c00243f6:	85 c0                	test   eax,eax
c00243f8:	75 7a                	jne    c0024474 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00243fa:	51                   	push   ecx
c00243fb:	51                   	push   ecx
c00243fc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024400:	03 06                	add    eax,DWORD PTR [esi]
c0024402:	50                   	push   eax
c0024403:	68 89 2b 03 c0       	push   0xc0032b89
c0024408:	e8 88 4d ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c002440d:	58                   	pop    eax
c002440e:	5a                   	pop    edx
c002440f:	68 a3 2b 03 c0       	push   0xc0032ba3
c0024414:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c002441b:	50                   	push   eax
c002441c:	e8 1f c2 fd ff       	call   c0000640 <strcpy>
c0024421:	59                   	pop    ecx
c0024422:	58                   	pop    eax
c0024423:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024427:	03 06                	add    eax,DWORD PTR [esi]
c0024429:	50                   	push   eax
c002442a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024431:	50                   	push   eax
c0024432:	e8 09 c4 fd ff       	call   c0000840 <strcat>
c0024437:	58                   	pop    eax
c0024438:	5a                   	pop    edx
c0024439:	68 3d 2c 03 c0       	push   0xc0032c3d
c002443e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024445:	50                   	push   eax
c0024446:	e8 f5 c3 fd ff       	call   c0000840 <strcat>
c002444b:	83 c4 10             	add    esp,0x10
c002444e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0024453:	0f 84 5d 01 00 00    	je     c00245b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0024459:	83 ec 0c             	sub    esp,0xc
c002445c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024463:	50                   	push   eax
c0024464:	e8 45 bd ff ff       	call   c00201ae <KePanic(char const*)>
c0024469:	83 c4 10             	add    esp,0x10
c002446c:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0024470:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0024474:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0024479:	83 f8 01             	cmp    eax,0x1
c002447c:	0f 85 8f 00 00 00    	jne    c0024511 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0024482:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0024489:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002448d:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0024491:	01 ce                	add    esi,ecx
c0024493:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c002449b:	0f 94 c0             	sete   al
c002449e:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00244a6:	0f 94 c2             	sete   dl
c00244a9:	09 c2                	or     edx,eax
c00244ab:	8b 06                	mov    eax,DWORD PTR [esi]
c00244ad:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c00244b2:	0f b6 d2             	movzx  edx,dl
c00244b5:	74 41                	je     c00244f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c00244b7:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c00244ba:	85 d2                	test   edx,edx
c00244bc:	75 15                	jne    c00244d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c00244be:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00244c2:	66 83 f8 0c          	cmp    ax,0xc
c00244c6:	76 05                	jbe    c00244cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c00244c8:	b8 0c 00 00 00       	mov    eax,0xc
c00244cd:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00244d1:	76 37                	jbe    c002450a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00244d3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00244d7:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00244dc:	0f 84 d4 00 00 00    	je     c00245b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00244e2:	83 ec 0c             	sub    esp,0xc
c00244e5:	68 ba 2b 03 c0       	push   0xc0032bba
c00244ea:	e8 bf bc ff ff       	call   c00201ae <KePanic(char const*)>
c00244ef:	83 c4 10             	add    esp,0x10
c00244f2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00244f6:	eb 12                	jmp    c002450a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00244f8:	01 c1                	add    ecx,eax
c00244fa:	85 d2                	test   edx,edx
c00244fc:	75 0c                	jne    c002450a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00244fe:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0024502:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0024506:	77 02                	ja     c002450a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0024508:	01 d9                	add    ecx,ebx
c002450a:	89 0e                	mov    DWORD PTR [esi],ecx
c002450c:	e9 e2 00 00 00       	jmp    c00245f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0024511:	83 f8 02             	cmp    eax,0x2
c0024514:	75 77                	jne    c002458d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c0024516:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c002451d:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0024521:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c0024525:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c002452d:	74 21                	je     c0024550 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c002452f:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0024537:	74 17                	je     c0024550 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0024539:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c002453d:	b8 0a 00 00 00       	mov    eax,0xa
c0024542:	83 fa 0e             	cmp    edx,0xe
c0024545:	77 03                	ja     c002454a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c0024547:	8d 42 fc             	lea    eax,[edx-0x4]
c002454a:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c002454e:	76 17                	jbe    c0024567 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0024550:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0024555:	74 5f                	je     c00245b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0024557:	83 ec 0c             	sub    esp,0xc
c002455a:	68 d6 2b 03 c0       	push   0xc0032bd6
c002455f:	e8 4a bc ff ff       	call   c00201ae <KePanic(char const*)>
c0024564:	83 c4 10             	add    esp,0x10
c0024567:	8b 06                	mov    eax,DWORD PTR [esi]
c0024569:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c002456e:	74 13                	je     c0024583 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0024570:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024574:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c002457b:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c002457f:	01 d0                	add    eax,edx
c0024581:	eb 04                	jmp    c0024587 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0024583:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0024587:	01 c3                	add    ebx,eax
c0024589:	89 1e                	mov    DWORD PTR [esi],ebx
c002458b:	eb 66                	jmp    c00245f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c002458d:	52                   	push   edx
c002458e:	52                   	push   edx
c002458f:	50                   	push   eax
c0024590:	68 f2 2b 03 c0       	push   0xc0032bf2
c0024595:	e8 fb 4b ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c002459a:	83 c4 10             	add    esp,0x10
c002459d:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00245a2:	74 12                	je     c00245b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00245a4:	83 ec 0c             	sub    esp,0xc
c00245a7:	68 fd 2b 03 c0       	push   0xc0032bfd
c00245ac:	e8 fd bb ff ff       	call   c00201ae <KePanic(char const*)>
c00245b1:	83 c4 10             	add    esp,0x10
c00245b4:	eb 3d                	jmp    c00245f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00245b6:	83 ec 0c             	sub    esp,0xc
c00245b9:	55                   	push   ebp
c00245ba:	e8 59 5e ff ff       	call   c001a418 <File::close()>
c00245bf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00245c2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00245c5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00245c8:	59                   	pop    ecx
c00245c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00245cd:	e8 44 1d ff ff       	call   c0016316 <free>
c00245d2:	5b                   	pop    ebx
c00245d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00245d7:	e8 3a 1d ff ff       	call   c0016316 <free>
c00245dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c00245df:	e8 32 1d ff ff       	call   c0016316 <free>
c00245e4:	5e                   	pop    esi
c00245e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00245e9:	e8 28 1d ff ff       	call   c0016316 <free>
c00245ee:	83 c4 10             	add    esp,0x10
c00245f1:	eb 21                	jmp    c0024614 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00245f3:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00245f7:	e9 7c fd ff ff       	jmp    c0024378 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c00245fc:	83 ec 0c             	sub    esp,0xc
c00245ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024603:	e8 0e 1d ff ff       	call   c0016316 <free>
c0024608:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c002460c:	83 c4 10             	add    esp,0x10
c002460f:	e9 f1 fc ff ff       	jmp    c0024305 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c0024614:	31 c0                	xor    eax,eax
c0024616:	eb 33                	jmp    c002464b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c0024618:	83 ec 0c             	sub    esp,0xc
c002461b:	55                   	push   ebp
c002461c:	e8 f7 5d ff ff       	call   c001a418 <File::close()>
c0024621:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024624:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024627:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002462a:	58                   	pop    eax
c002462b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002462f:	e8 e2 1c ff ff       	call   c0016316 <free>
c0024634:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024637:	e8 da 1c ff ff       	call   c0016316 <free>
c002463c:	5a                   	pop    edx
c002463d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024641:	e8 d0 1c ff ff       	call   c0016316 <free>
c0024646:	83 c4 10             	add    esp,0x10
c0024649:	b0 01                	mov    al,0x1
c002464b:	81 c4 5c 03 00 00    	add    esp,0x35c
c0024651:	5b                   	pop    ebx
c0024652:	5e                   	pop    esi
c0024653:	5f                   	pop    edi
c0024654:	5d                   	pop    ebp
c0024655:	c3                   	ret    

c0024656 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0024656:	56                   	push   esi
c0024657:	31 d2                	xor    edx,edx
c0024659:	53                   	push   ebx
c002465a:	8b 1d 00 fa 03 c0    	mov    ebx,DWORD PTR ds:0xc003fa00
c0024660:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0024664:	39 d3                	cmp    ebx,edx
c0024666:	7e 1b                	jle    c0024683 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0024668:	8b 04 95 20 fc 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc03e0]
c002466f:	39 c8                	cmp    eax,ecx
c0024671:	77 0d                	ja     c0024680 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0024673:	8b 34 95 20 fa 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffc05e0]
c002467a:	01 c6                	add    esi,eax
c002467c:	39 ce                	cmp    esi,ecx
c002467e:	77 05                	ja     c0024685 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0024680:	42                   	inc    edx
c0024681:	eb e1                	jmp    c0024664 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0024683:	31 c0                	xor    eax,eax
c0024685:	5b                   	pop    ebx
c0024686:	5e                   	pop    esi
c0024687:	c3                   	ret    

c0024688 <Thr::getDriverNameFromAddress(unsigned long)>:
c0024688:	53                   	push   ebx
c0024689:	31 c0                	xor    eax,eax
c002468b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002468f:	8b 1d 00 fa 03 c0    	mov    ebx,DWORD PTR ds:0xc003fa00
c0024695:	39 c3                	cmp    ebx,eax
c0024697:	7e 22                	jle    c00246bb <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0024699:	8b 14 85 20 fc 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc03e0]
c00246a0:	39 ca                	cmp    edx,ecx
c00246a2:	77 14                	ja     c00246b8 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00246a4:	03 14 85 20 fa 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffc05e0]
c00246ab:	39 ca                	cmp    edx,ecx
c00246ad:	76 09                	jbe    c00246b8 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00246af:	8b 04 85 20 fe 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc01e0]
c00246b6:	eb 05                	jmp    c00246bd <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00246b8:	40                   	inc    eax
c00246b9:	eb da                	jmp    c0024695 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00246bb:	31 c0                	xor    eax,eax
c00246bd:	5b                   	pop    ebx
c00246be:	c3                   	ret    

c00246bf <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00246bf:	53                   	push   ebx
c00246c0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00246c4:	53                   	push   ebx
c00246c5:	e8 8c ff ff ff       	call   c0024656 <Thr::getDriverBaseFromAddress(unsigned long)>
c00246ca:	5a                   	pop    edx
c00246cb:	31 d2                	xor    edx,edx
c00246cd:	85 c0                	test   eax,eax
c00246cf:	74 04                	je     c00246d5 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00246d1:	89 da                	mov    edx,ebx
c00246d3:	29 c2                	sub    edx,eax
c00246d5:	89 d0                	mov    eax,edx
c00246d7:	5b                   	pop    ebx
c00246d8:	c3                   	ret    

c00246d9 <Thr::loadDLL(char const*, bool)>:
c00246d9:	55                   	push   ebp
c00246da:	57                   	push   edi
c00246db:	56                   	push   esi
c00246dc:	53                   	push   ebx
c00246dd:	81 ec 34 01 00 00    	sub    esp,0x134
c00246e3:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00246ea:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00246f1:	56                   	push   esi
c00246f2:	68 15 2c 03 c0       	push   0xc0032c15
c00246f7:	e8 99 4a ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c00246fc:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0024703:	e8 fe 1b ff ff       	call   c0016306 <malloc>
c0024708:	83 c4 0c             	add    esp,0xc
c002470b:	89 c3                	mov    ebx,eax
c002470d:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0024713:	56                   	push   esi
c0024714:	50                   	push   eax
c0024715:	e8 82 5c ff ff       	call   c001a39c <File::File(char const*, Process*)>
c002471a:	83 c4 10             	add    esp,0x10
c002471d:	85 db                	test   ebx,ebx
c002471f:	75 3c                	jne    c002475d <Thr::loadDLL(char const*, bool)+0x84>
c0024721:	89 f8                	mov    eax,edi
c0024723:	84 c0                	test   al,al
c0024725:	0f 84 f3 01 00 00    	je     c002491e <Thr::loadDLL(char const*, bool)+0x245>
c002472b:	55                   	push   ebp
c002472c:	55                   	push   ebp
c002472d:	68 26 2c 03 c0       	push   0xc0032c26
c0024732:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0024736:	55                   	push   ebp
c0024737:	e8 04 bf fd ff       	call   c0000640 <strcpy>
c002473c:	58                   	pop    eax
c002473d:	5a                   	pop    edx
c002473e:	56                   	push   esi
c002473f:	55                   	push   ebp
c0024740:	e8 fb c0 fd ff       	call   c0000840 <strcat>
c0024745:	59                   	pop    ecx
c0024746:	58                   	pop    eax
c0024747:	68 3d 2c 03 c0       	push   0xc0032c3d
c002474c:	55                   	push   ebp
c002474d:	e8 ee c0 fd ff       	call   c0000840 <strcat>
c0024752:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024755:	e8 54 ba ff ff       	call   c00201ae <KePanic(char const*)>
c002475a:	83 c4 10             	add    esp,0x10
c002475d:	51                   	push   ecx
c002475e:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0024762:	50                   	push   eax
c0024763:	8d 44 24 20          	lea    eax,[esp+0x20]
c0024767:	50                   	push   eax
c0024768:	53                   	push   ebx
c0024769:	e8 4e 5f ff ff       	call   c001a6bc <File::stat(unsigned long long*, bool*)>
c002476e:	83 c4 10             	add    esp,0x10
c0024771:	89 c5                	mov    ebp,eax
c0024773:	85 db                	test   ebx,ebx
c0024775:	74 0c                	je     c0024783 <Thr::loadDLL(char const*, bool)+0xaa>
c0024777:	83 ec 0c             	sub    esp,0xc
c002477a:	8b 03                	mov    eax,DWORD PTR [ebx]
c002477c:	53                   	push   ebx
c002477d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024780:	83 c4 10             	add    esp,0x10
c0024783:	83 ec 0c             	sub    esp,0xc
c0024786:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c002478b:	50                   	push   eax
c002478c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024790:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024794:	55                   	push   ebp
c0024795:	68 3f 2c 03 c0       	push   0xc0032c3f
c002479a:	e8 f6 49 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c002479f:	83 c4 20             	add    esp,0x20
c00247a2:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00247a7:	75 0a                	jne    c00247b3 <Thr::loadDLL(char const*, bool)+0xda>
c00247a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00247ad:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00247b1:	75 3c                	jne    c00247ef <Thr::loadDLL(char const*, bool)+0x116>
c00247b3:	89 f8                	mov    eax,edi
c00247b5:	84 c0                	test   al,al
c00247b7:	0f 84 49 01 00 00    	je     c0024906 <Thr::loadDLL(char const*, bool)+0x22d>
c00247bd:	51                   	push   ecx
c00247be:	51                   	push   ecx
c00247bf:	68 60 2c 03 c0       	push   0xc0032c60
c00247c4:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00247c8:	53                   	push   ebx
c00247c9:	e8 72 be fd ff       	call   c0000640 <strcpy>
c00247ce:	5d                   	pop    ebp
c00247cf:	58                   	pop    eax
c00247d0:	56                   	push   esi
c00247d1:	53                   	push   ebx
c00247d2:	e8 69 c0 fd ff       	call   c0000840 <strcat>
c00247d7:	58                   	pop    eax
c00247d8:	5a                   	pop    edx
c00247d9:	68 3d 2c 03 c0       	push   0xc0032c3d
c00247de:	53                   	push   ebx
c00247df:	e8 5c c0 fd ff       	call   c0000840 <strcat>
c00247e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00247e7:	e8 c2 b9 ff ff       	call   c00201ae <KePanic(char const*)>
c00247ec:	83 c4 10             	add    esp,0x10
c00247ef:	52                   	push   edx
c00247f0:	6a 03                	push   0x3
c00247f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00247f6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00247fa:	05 ff 0f 00 00       	add    eax,0xfff
c00247ff:	83 d2 00             	adc    edx,0x0
c0024802:	0f ac d0 0c          	shrd   eax,edx,0xc
c0024806:	50                   	push   eax
c0024807:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002480d:	e8 62 3e ff ff       	call   c0018674 <VAS::allocatePages(int, int)>
c0024812:	59                   	pop    ecx
c0024813:	89 c3                	mov    ebx,eax
c0024815:	5d                   	pop    ebp
c0024816:	50                   	push   eax
c0024817:	68 82 10 03 c0       	push   0xc0031082
c002481c:	e8 74 49 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0024821:	89 34 24             	mov    DWORD PTR [esp],esi
c0024824:	e8 47 bd fd ff       	call   c0000570 <strlen>
c0024829:	8b 2d 00 fa 03 c0    	mov    ebp,DWORD PTR ds:0xc003fa00
c002482f:	40                   	inc    eax
c0024830:	89 04 24             	mov    DWORD PTR [esp],eax
c0024833:	e8 ce 1a ff ff       	call   c0016306 <malloc>
c0024838:	89 04 ad 20 fe 03 c0 	mov    DWORD PTR [ebp*4-0x3ffc01e0],eax
c002483f:	58                   	pop    eax
c0024840:	a1 00 fa 03 c0       	mov    eax,ds:0xc003fa00
c0024845:	5a                   	pop    edx
c0024846:	56                   	push   esi
c0024847:	ff 34 85 20 fe 03 c0 	push   DWORD PTR [eax*4-0x3ffc01e0]
c002484e:	e8 ed bd fd ff       	call   c0000640 <strcpy>
c0024853:	a1 00 fa 03 c0       	mov    eax,ds:0xc003fa00
c0024858:	8d 50 01             	lea    edx,[eax+0x1]
c002485b:	89 1c 85 20 fc 03 c0 	mov    DWORD PTR [eax*4-0x3ffc03e0],ebx
c0024862:	89 15 00 fa 03 c0    	mov    DWORD PTR ds:0xc003fa00,edx
c0024868:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002486c:	83 c4 0c             	add    esp,0xc
c002486f:	89 14 85 20 fa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc05e0],edx
c0024876:	6a 01                	push   0x1
c0024878:	53                   	push   ebx
c0024879:	56                   	push   esi
c002487a:	e8 9e f6 ff ff       	call   c0023f1d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c002487f:	83 c4 10             	add    esp,0x10
c0024882:	0f b6 c0             	movzx  eax,al
c0024885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024889:	85 c0                	test   eax,eax
c002488b:	0f 85 89 00 00 00    	jne    c002491a <Thr::loadDLL(char const*, bool)+0x241>
c0024891:	89 f8                	mov    eax,edi
c0024893:	84 c0                	test   al,al
c0024895:	74 73                	je     c002490a <Thr::loadDLL(char const*, bool)+0x231>
c0024897:	83 ec 0c             	sub    esp,0xc
c002489a:	68 79 2c 03 c0       	push   0xc0032c79
c002489f:	e8 0a b9 ff ff       	call   c00201ae <KePanic(char const*)>
c00248a4:	83 c4 10             	add    esp,0x10
c00248a7:	eb 61                	jmp    c002490a <Thr::loadDLL(char const*, bool)+0x231>
c00248a9:	50                   	push   eax
c00248aa:	50                   	push   eax
c00248ab:	89 e8                	mov    eax,ebp
c00248ad:	c1 e0 0c             	shl    eax,0xc
c00248b0:	01 d8                	add    eax,ebx
c00248b2:	50                   	push   eax
c00248b3:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c00248b9:	e8 9e 38 ff ff       	call   c001815c <VAS::getPageTableEntry(unsigned long)>
c00248be:	83 c4 10             	add    esp,0x10
c00248c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00248c3:	a8 60                	test   al,0x60
c00248c5:	75 11                	jne    c00248d8 <Thr::loadDLL(char const*, bool)+0x1ff>
c00248c7:	83 ec 0c             	sub    esp,0xc
c00248ca:	25 00 f0 ff ff       	and    eax,0xfffff000
c00248cf:	50                   	push   eax
c00248d0:	e8 d1 1c ff ff       	call   c00165a6 <Phys::freePage(unsigned long)>
c00248d5:	83 c4 10             	add    esp,0x10
c00248d8:	45                   	inc    ebp
c00248d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00248dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00248e1:	05 ff 0f 00 00       	add    eax,0xfff
c00248e6:	bf 00 00 00 00       	mov    edi,0x0
c00248eb:	83 d2 00             	adc    edx,0x0
c00248ee:	0f ac d0 0c          	shrd   eax,edx,0xc
c00248f2:	c1 ea 0c             	shr    edx,0xc
c00248f5:	39 c5                	cmp    ebp,eax
c00248f7:	89 d1                	mov    ecx,edx
c00248f9:	89 f8                	mov    eax,edi
c00248fb:	19 c8                	sbb    eax,ecx
c00248fd:	72 aa                	jb     c00248a9 <Thr::loadDLL(char const*, bool)+0x1d0>
c00248ff:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0024904:	75 18                	jne    c002491e <Thr::loadDLL(char const*, bool)+0x245>
c0024906:	31 db                	xor    ebx,ebx
c0024908:	eb 14                	jmp    c002491e <Thr::loadDLL(char const*, bool)+0x245>
c002490a:	83 ec 0c             	sub    esp,0xc
c002490d:	68 98 2c 03 c0       	push   0xc0032c98
c0024912:	e8 97 b8 ff ff       	call   c00201ae <KePanic(char const*)>
c0024917:	83 c4 10             	add    esp,0x10
c002491a:	31 ed                	xor    ebp,ebp
c002491c:	eb bb                	jmp    c00248d9 <Thr::loadDLL(char const*, bool)+0x200>
c002491e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0024924:	89 d8                	mov    eax,ebx
c0024926:	5b                   	pop    ebx
c0024927:	5e                   	pop    esi
c0024928:	5f                   	pop    edi
c0024929:	5d                   	pop    ebp
c002492a:	c3                   	ret    

c002492b <Thr::executeDLL(unsigned long, void*)>:
c002492b:	56                   	push   esi
c002492c:	53                   	push   ebx
c002492d:	52                   	push   edx
c002492e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024932:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0024936:	85 db                	test   ebx,ebx
c0024938:	75 10                	jne    c002494a <Thr::executeDLL(unsigned long, void*)+0x1f>
c002493a:	83 ec 0c             	sub    esp,0xc
c002493d:	68 b4 2c 03 c0       	push   0xc0032cb4
c0024942:	e8 67 b8 ff ff       	call   c00201ae <KePanic(char const*)>
c0024947:	83 c4 10             	add    esp,0x10
c002494a:	50                   	push   eax
c002494b:	50                   	push   eax
c002494c:	53                   	push   ebx
c002494d:	68 de 2c 03 c0       	push   0xc0032cde
c0024952:	e8 3e 48 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0024957:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c002495b:	89 d8                	mov    eax,ebx
c002495d:	83 c4 14             	add    esp,0x14
c0024960:	5b                   	pop    ebx
c0024961:	5e                   	pop    esi
c0024962:	ff e0                	jmp    eax

c0024964 <userModeEntryPoint(void*)>:
c0024964:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0024969:	83 e8 01             	sub    eax,0x1
c002496c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0024971:	75 01                	jne    c0024974 <userModeEntryPoint(void*)+0x10>
c0024973:	fb                   	sti    
c0024974:	fb                   	sti    
c0024975:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002497a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002497d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0024983:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024987:	e9 b3 b8 fd ff       	jmp    c000023f <goToUsermode>

c002498c <changeTSS>:
c002498c:	83 ec 14             	sub    esp,0x14
c002498f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024994:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0024997:	b8 00 00 e8 01       	mov    eax,0x1e80000
c002499c:	c1 e2 15             	shl    edx,0x15
c002499f:	29 d0                	sub    eax,edx
c00249a1:	50                   	push   eax
c00249a2:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00249a7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00249ad:	05 7c 11 00 00       	add    eax,0x117c
c00249b2:	50                   	push   eax
c00249b3:	e8 ec 2d ff ff       	call   c00177a4 <TSS::setESP(unsigned long)>
c00249b8:	83 c4 1c             	add    esp,0x1c
c00249bb:	c3                   	ret    

c00249bc <switchToThread(ThreadControlBlock*)>:
c00249bc:	57                   	push   edi
c00249bd:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c00249c3:	56                   	push   esi
c00249c4:	85 c9                	test   ecx,ecx
c00249c6:	53                   	push   ebx
c00249c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00249cb:	0f 85 8b 00 00 00    	jne    c0024a5c <switchToThread(ThreadControlBlock*)+0xa0>
c00249d1:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c00249d5:	81 fa ff 00 00 00    	cmp    edx,0xff
c00249db:	74 7b                	je     c0024a58 <switchToThread(ThreadControlBlock*)+0x9c>
c00249dd:	b8 00 04 00 00       	mov    eax,0x400
c00249e2:	29 d0                	sub    eax,edx
c00249e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00249e7:	d1 f8                	sar    eax,1
c00249e9:	01 d0                	add    eax,edx
c00249eb:	90                   	nop
c00249ec:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00249ef:	e8 76 25 00 00       	call   c0026f6a <HalQueryPerformanceCounter()>
c00249f4:	a3 10 02 04 c0       	mov    ds:0xc0040210,eax
c00249f9:	89 15 14 02 04 c0    	mov    DWORD PTR ds:0xc0040214,edx
c00249ff:	89 c6                	mov    esi,eax
c0024a01:	89 d7                	mov    edi,edx
c0024a03:	2b 35 00 02 04 c0    	sub    esi,DWORD PTR ds:0xc0040200
c0024a09:	a3 00 02 04 c0       	mov    ds:0xc0040200,eax
c0024a0e:	1b 3d 04 02 04 c0    	sbb    edi,DWORD PTR ds:0xc0040204
c0024a14:	89 35 08 02 04 c0    	mov    DWORD PTR ds:0xc0040208,esi
c0024a1a:	89 3d 0c 02 04 c0    	mov    DWORD PTR ds:0xc004020c,edi
c0024a20:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0024a26:	89 15 04 02 04 c0    	mov    DWORD PTR ds:0xc0040204,edx
c0024a2c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0024a2f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0024a32:	01 c6                	add    esi,eax
c0024a34:	11 d7                	adc    edi,edx
c0024a36:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0024a39:	83 ec 0c             	sub    esp,0xc
c0024a3c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0024a3f:	53                   	push   ebx
c0024a40:	e8 32 b8 fd ff       	call   c0000277 <switchToThreadASM>
c0024a45:	0f 20 c0             	mov    eax,cr0
c0024a48:	83 c8 08             	or     eax,0x8
c0024a4b:	0f 22 c0             	mov    cr0,eax
c0024a4e:	83 c4 10             	add    esp,0x10
c0024a51:	5b                   	pop    ebx
c0024a52:	5e                   	pop    esi
c0024a53:	5f                   	pop    edi
c0024a54:	c3                   	ret    
c0024a55:	8d 76 00             	lea    esi,[esi+0x0]
c0024a58:	31 c0                	xor    eax,eax
c0024a5a:	eb 90                	jmp    c00249ec <switchToThread(ThreadControlBlock*)+0x30>
c0024a5c:	5b                   	pop    ebx
c0024a5d:	c7 05 c8 01 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x1
c0024a67:	5e                   	pop    esi
c0024a68:	5f                   	pop    edi
c0024a69:	c3                   	ret    
c0024a6a:	66 90                	xchg   ax,ax

c0024a6c <Process::addArgs(char**)>:
c0024a6c:	57                   	push   edi
c0024a6d:	56                   	push   esi
c0024a6e:	53                   	push   ebx
c0024a6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024a73:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0024a77:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0024a81:	85 ff                	test   edi,edi
c0024a83:	74 4f                	je     c0024ad4 <Process::addArgs(char**)+0x68>
c0024a85:	8b 07                	mov    eax,DWORD PTR [edi]
c0024a87:	85 c0                	test   eax,eax
c0024a89:	74 49                	je     c0024ad4 <Process::addArgs(char**)+0x68>
c0024a8b:	31 db                	xor    ebx,ebx
c0024a8d:	8d 76 00             	lea    esi,[esi+0x0]
c0024a90:	83 ec 0c             	sub    esp,0xc
c0024a93:	50                   	push   eax
c0024a94:	e8 d7 ba fd ff       	call   c0000570 <strlen>
c0024a99:	83 c0 01             	add    eax,0x1
c0024a9c:	89 04 24             	mov    DWORD PTR [esp],eax
c0024a9f:	e8 62 18 ff ff       	call   c0016306 <malloc>
c0024aa4:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0024aab:	5a                   	pop    edx
c0024aac:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0024aaf:	59                   	pop    ecx
c0024ab0:	83 c3 01             	add    ebx,0x1
c0024ab3:	52                   	push   edx
c0024ab4:	50                   	push   eax
c0024ab5:	e8 86 bb fd ff       	call   c0000640 <strcpy>
c0024aba:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0024ac0:	83 c4 10             	add    esp,0x10
c0024ac3:	83 c1 01             	add    ecx,0x1
c0024ac6:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0024acc:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0024acf:	85 c0                	test   eax,eax
c0024ad1:	75 bd                	jne    c0024a90 <Process::addArgs(char**)+0x24>
c0024ad3:	90                   	nop
c0024ad4:	5b                   	pop    ebx
c0024ad5:	5e                   	pop    esi
c0024ad6:	5f                   	pop    edi
c0024ad7:	c3                   	ret    

c0024ad8 <Process::Process(char const*, Process*, char**)>:
c0024ad8:	56                   	push   esi
c0024ad9:	53                   	push   ebx
c0024ada:	83 ec 14             	sub    esp,0x14
c0024add:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024ae1:	05 0c 02 00 00       	add    eax,0x20c
c0024ae6:	bb 07 00 00 00       	mov    ebx,0x7
c0024aeb:	89 c6                	mov    esi,eax
c0024aed:	8d 76 00             	lea    esi,[esi+0x0]
c0024af0:	85 db                	test   ebx,ebx
c0024af2:	78 14                	js     c0024b08 <Process::Process(char const*, Process*, char**)+0x30>
c0024af4:	83 ec 0c             	sub    esp,0xc
c0024af7:	56                   	push   esi
c0024af8:	e8 7b a3 00 00       	call   c002ee78 <ThreadControlBlock::ThreadControlBlock()>
c0024afd:	83 c4 10             	add    esp,0x10
c0024b00:	83 c6 5f             	add    esi,0x5f
c0024b03:	83 eb 01             	sub    ebx,0x1
c0024b06:	eb e8                	jmp    c0024af0 <Process::Process(char const*, Process*, char**)+0x18>
c0024b08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024b0c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0024b13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024b17:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0024b1e:	83 ec 0c             	sub    esp,0xc
c0024b21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024b25:	e8 5e b4 ff ff       	call   c001ff88 <KeNewProcessEnv(Process*)>
c0024b2a:	83 c4 10             	add    esp,0x10
c0024b2d:	89 c2                	mov    edx,eax
c0024b2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024b33:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0024b39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024b3d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0024b46:	a1 00 43 03 c0       	mov    eax,ds:0xc0034300
c0024b4b:	8d 50 01             	lea    edx,[eax+0x1]
c0024b4e:	89 15 00 43 03 c0    	mov    DWORD PTR ds:0xc0034300,edx
c0024b54:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0024b58:	89 02                	mov    DWORD PTR [edx],eax
c0024b5a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0024b62:	83 ec 0c             	sub    esp,0xc
c0024b65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024b69:	e8 98 17 ff ff       	call   c0016306 <malloc>
c0024b6e:	83 c4 10             	add    esp,0x10
c0024b71:	89 c3                	mov    ebx,eax
c0024b73:	83 ec 08             	sub    esp,0x8
c0024b76:	6a 00                	push   0x0
c0024b78:	53                   	push   ebx
c0024b79:	e8 3a 3d ff ff       	call   c00188b8 <VAS::VAS(bool)>
c0024b7e:	83 c4 10             	add    esp,0x10
c0024b81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024b85:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0024b8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024b8f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0024b99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024b9d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0024ba1:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0024ba7:	e8 33 be ff ff       	call   c00209df <KeInitSignals()>
c0024bac:	89 c2                	mov    edx,eax
c0024bae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024bb2:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0024bb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024bbc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024bc2:	85 c0                	test   eax,eax
c0024bc4:	74 42                	je     c0024c08 <Process::Process(char const*, Process*, char**)+0x130>
c0024bc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024bca:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024bd0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0024bd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024bda:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0024be0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024be4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024bea:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0024bf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024bf4:	05 0c 01 00 00       	add    eax,0x10c
c0024bf9:	83 ec 08             	sub    esp,0x8
c0024bfc:	52                   	push   edx
c0024bfd:	50                   	push   eax
c0024bfe:	e8 3d ba fd ff       	call   c0000640 <strcpy>
c0024c03:	83 c4 10             	add    esp,0x10
c0024c06:	eb 64                	jmp    c0024c6c <Process::Process(char const*, Process*, char**)+0x194>
c0024c08:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0024c10:	83 ec 0c             	sub    esp,0xc
c0024c13:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024c17:	e8 ea 16 ff ff       	call   c0016306 <malloc>
c0024c1c:	83 c4 10             	add    esp,0x10
c0024c1f:	89 c3                	mov    ebx,eax
c0024c21:	83 ec 08             	sub    esp,0x8
c0024c24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024c28:	53                   	push   ebx
c0024c29:	e8 88 28 ff ff       	call   c00174b6 <VgaText::VgaText(char const*)>
c0024c2e:	83 c4 10             	add    esp,0x10
c0024c31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c35:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0024c3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c3f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0024c45:	83 ec 0c             	sub    esp,0xc
c0024c48:	50                   	push   eax
c0024c49:	e8 06 21 ff ff       	call   c0016d54 <addToTerminalCycle(VgaText*)>
c0024c4e:	83 c4 10             	add    esp,0x10
c0024c51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c55:	05 0c 01 00 00       	add    eax,0x10c
c0024c5a:	83 ec 08             	sub    esp,0x8
c0024c5d:	68 fd 2c 03 c0       	push   0xc0032cfd
c0024c62:	50                   	push   eax
c0024c63:	e8 d8 b9 fd ff       	call   c0000640 <strcpy>
c0024c68:	83 c4 10             	add    esp,0x10
c0024c6b:	90                   	nop
c0024c6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c70:	83 c0 0c             	add    eax,0xc
c0024c73:	83 ec 08             	sub    esp,0x8
c0024c76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024c7a:	50                   	push   eax
c0024c7b:	e8 c0 b9 fd ff       	call   c0000640 <strcpy>
c0024c80:	83 c4 10             	add    esp,0x10
c0024c83:	83 ec 08             	sub    esp,0x8
c0024c86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0024c8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024c8e:	e8 d9 fd ff ff       	call   c0024a6c <Process::addArgs(char**)>
c0024c93:	83 c4 10             	add    esp,0x10
c0024c96:	83 ec 08             	sub    esp,0x8
c0024c99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024c9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024ca1:	e8 45 ed ff ff       	call   c00239eb <Thr::loadProgramIntoMemory(Process*, char const*)>
c0024ca6:	83 c4 10             	add    esp,0x10
c0024ca9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024cad:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0024cb1:	83 f0 01             	xor    eax,0x1
c0024cb4:	88 c2                	mov    dl,al
c0024cb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024cba:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0024cc0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0024cc5:	83 ec 04             	sub    esp,0x4
c0024cc8:	50                   	push   eax
c0024cc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024ccd:	68 54 2d 03 c0       	push   0xc0032d54
c0024cd2:	e8 be 44 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0024cd7:	83 c4 10             	add    esp,0x10
c0024cda:	90                   	nop
c0024cdb:	83 c4 14             	add    esp,0x14
c0024cde:	5b                   	pop    ebx
c0024cdf:	5e                   	pop    esi
c0024ce0:	c3                   	ret    
c0024ce1:	90                   	nop
c0024ce2:	66 90                	xchg   ax,ax

c0024ce4 <Process::Process(bool, char const*, Process*, char**)>:
c0024ce4:	56                   	push   esi
c0024ce5:	53                   	push   ebx
c0024ce6:	83 ec 24             	sub    esp,0x24
c0024ce9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0024ced:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0024cf1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024cf5:	05 0c 02 00 00       	add    eax,0x20c
c0024cfa:	bb 07 00 00 00       	mov    ebx,0x7
c0024cff:	89 c6                	mov    esi,eax
c0024d01:	8d 76 00             	lea    esi,[esi+0x0]
c0024d04:	85 db                	test   ebx,ebx
c0024d06:	78 14                	js     c0024d1c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0024d08:	83 ec 0c             	sub    esp,0xc
c0024d0b:	56                   	push   esi
c0024d0c:	e8 67 a1 00 00       	call   c002ee78 <ThreadControlBlock::ThreadControlBlock()>
c0024d11:	83 c4 10             	add    esp,0x10
c0024d14:	83 c6 5f             	add    esi,0x5f
c0024d17:	83 eb 01             	sub    ebx,0x1
c0024d1a:	eb e8                	jmp    c0024d04 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0024d1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024d20:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0024d27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024d2b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0024d32:	83 ec 0c             	sub    esp,0xc
c0024d35:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024d39:	e8 4a b2 ff ff       	call   c001ff88 <KeNewProcessEnv(Process*)>
c0024d3e:	83 c4 10             	add    esp,0x10
c0024d41:	89 c2                	mov    edx,eax
c0024d43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024d47:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0024d4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024d51:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0024d5a:	a1 00 43 03 c0       	mov    eax,ds:0xc0034300
c0024d5f:	8d 50 01             	lea    edx,[eax+0x1]
c0024d62:	89 15 00 43 03 c0    	mov    DWORD PTR ds:0xc0034300,edx
c0024d68:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024d6c:	89 02                	mov    DWORD PTR [edx],eax
c0024d6e:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0024d76:	83 ec 0c             	sub    esp,0xc
c0024d79:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0024d7d:	e8 84 15 ff ff       	call   c0016306 <malloc>
c0024d82:	83 c4 10             	add    esp,0x10
c0024d85:	89 c3                	mov    ebx,eax
c0024d87:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0024d8c:	83 ec 08             	sub    esp,0x8
c0024d8f:	50                   	push   eax
c0024d90:	53                   	push   ebx
c0024d91:	e8 22 3b ff ff       	call   c00188b8 <VAS::VAS(bool)>
c0024d96:	83 c4 10             	add    esp,0x10
c0024d99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024d9d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0024da3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024da7:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0024db1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024db5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0024db9:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0024dbf:	e8 1b bc ff ff       	call   c00209df <KeInitSignals()>
c0024dc4:	89 c2                	mov    edx,eax
c0024dc6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024dca:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0024dd0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024dd4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024dda:	85 c0                	test   eax,eax
c0024ddc:	74 42                	je     c0024e20 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0024dde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024de2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024de8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0024dee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024df2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0024df8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024dfc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024e02:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0024e08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e0c:	05 0c 01 00 00       	add    eax,0x10c
c0024e11:	83 ec 08             	sub    esp,0x8
c0024e14:	52                   	push   edx
c0024e15:	50                   	push   eax
c0024e16:	e8 25 b8 fd ff       	call   c0000640 <strcpy>
c0024e1b:	83 c4 10             	add    esp,0x10
c0024e1e:	eb 64                	jmp    c0024e84 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0024e20:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0024e28:	83 ec 0c             	sub    esp,0xc
c0024e2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0024e2f:	e8 d2 14 ff ff       	call   c0016306 <malloc>
c0024e34:	83 c4 10             	add    esp,0x10
c0024e37:	89 c3                	mov    ebx,eax
c0024e39:	83 ec 08             	sub    esp,0x8
c0024e3c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0024e40:	53                   	push   ebx
c0024e41:	e8 70 26 ff ff       	call   c00174b6 <VgaText::VgaText(char const*)>
c0024e46:	83 c4 10             	add    esp,0x10
c0024e49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e4d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0024e53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e57:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0024e5d:	83 ec 0c             	sub    esp,0xc
c0024e60:	50                   	push   eax
c0024e61:	e8 ee 1e ff ff       	call   c0016d54 <addToTerminalCycle(VgaText*)>
c0024e66:	83 c4 10             	add    esp,0x10
c0024e69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e6d:	05 0c 01 00 00       	add    eax,0x10c
c0024e72:	83 ec 08             	sub    esp,0x8
c0024e75:	68 fd 2c 03 c0       	push   0xc0032cfd
c0024e7a:	50                   	push   eax
c0024e7b:	e8 c0 b7 fd ff       	call   c0000640 <strcpy>
c0024e80:	83 c4 10             	add    esp,0x10
c0024e83:	90                   	nop
c0024e84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e88:	83 c0 0c             	add    eax,0xc
c0024e8b:	83 ec 08             	sub    esp,0x8
c0024e8e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0024e92:	50                   	push   eax
c0024e93:	e8 a8 b7 fd ff       	call   c0000640 <strcpy>
c0024e98:	83 c4 10             	add    esp,0x10
c0024e9b:	83 ec 08             	sub    esp,0x8
c0024e9e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0024ea2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024ea6:	e8 c1 fb ff ff       	call   c0024a6c <Process::addArgs(char**)>
c0024eab:	83 c4 10             	add    esp,0x10
c0024eae:	90                   	nop
c0024eaf:	83 c4 24             	add    esp,0x24
c0024eb2:	5b                   	pop    ebx
c0024eb3:	5e                   	pop    esi
c0024eb4:	c3                   	ret    
c0024eb5:	8d 76 00             	lea    esi,[esi+0x0]

c0024eb8 <taskStartupFunction>:
c0024eb8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024ebd:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0024ec0:	c3                   	ret    
c0024ec1:	8d 76 00             	lea    esi,[esi+0x0]

c0024ec4 <KeDisablePreemption()>:
c0024ec4:	a1 ac 01 04 c0       	mov    eax,ds:0xc00401ac
c0024ec9:	85 c0                	test   eax,eax
c0024ecb:	75 13                	jne    c0024ee0 <KeDisablePreemption()+0x1c>
c0024ecd:	8a 15 c0 a9 03 c0    	mov    dl,BYTE PTR ds:0xc003a9c0
c0024ed3:	c6 05 c0 a9 03 c0 00 	mov    BYTE PTR ds:0xc003a9c0,0x0
c0024eda:	88 15 a8 01 04 c0    	mov    BYTE PTR ds:0xc00401a8,dl
c0024ee0:	83 c0 01             	add    eax,0x1
c0024ee3:	a3 ac 01 04 c0       	mov    ds:0xc00401ac,eax
c0024ee8:	c3                   	ret    
c0024ee9:	8d 76 00             	lea    esi,[esi+0x0]

c0024eec <KeRestorePreemption()>:
c0024eec:	a1 ac 01 04 c0       	mov    eax,ds:0xc00401ac
c0024ef1:	83 e8 01             	sub    eax,0x1
c0024ef4:	a3 ac 01 04 c0       	mov    ds:0xc00401ac,eax
c0024ef9:	75 0d                	jne    c0024f08 <KeRestorePreemption()+0x1c>
c0024efb:	a0 a8 01 04 c0       	mov    al,ds:0xc00401a8
c0024f00:	a2 c0 a9 03 c0       	mov    ds:0xc003a9c0,al
c0024f05:	8d 76 00             	lea    esi,[esi+0x0]
c0024f08:	c3                   	ret    
c0024f09:	90                   	nop
c0024f0a:	66 90                	xchg   ax,ax

c0024f0c <Process::createThread(void (*)(void*), void*, int)>:
c0024f0c:	57                   	push   edi
c0024f0d:	31 c9                	xor    ecx,ecx
c0024f0f:	56                   	push   esi
c0024f10:	53                   	push   ebx
c0024f11:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024f15:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0024f1c:	89 f2                	mov    edx,esi
c0024f1e:	66 90                	xchg   ax,ax
c0024f20:	0f b7 c2             	movzx  eax,dx
c0024f23:	80 e2 01             	and    dl,0x1
c0024f26:	74 14                	je     c0024f3c <Process::createThread(void (*)(void*), void*, int)+0x30>
c0024f28:	d1 f8                	sar    eax,1
c0024f2a:	83 c1 01             	add    ecx,0x1
c0024f2d:	89 c2                	mov    edx,eax
c0024f2f:	83 f9 10             	cmp    ecx,0x10
c0024f32:	75 ec                	jne    c0024f20 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0024f34:	31 db                	xor    ebx,ebx
c0024f36:	89 d8                	mov    eax,ebx
c0024f38:	5b                   	pop    ebx
c0024f39:	5e                   	pop    esi
c0024f3a:	5f                   	pop    edi
c0024f3b:	c3                   	ret    
c0024f3c:	b8 01 00 00 00       	mov    eax,0x1
c0024f41:	d3 e0                	shl    eax,cl
c0024f43:	09 c6                	or     esi,eax
c0024f45:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0024f48:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0024f4f:	01 c0                	add    eax,eax
c0024f51:	01 c8                	add    eax,ecx
c0024f53:	8d 04 80             	lea    eax,[eax+eax*4]
c0024f56:	01 d8                	add    eax,ebx
c0024f58:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0024f5f:	75 0b                	jne    c0024f6c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0024f61:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0024f6b:	90                   	nop
c0024f6c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0024f72:	83 ec 0c             	sub    esp,0xc
c0024f75:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0024f78:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0024f7b:	01 c0                	add    eax,eax
c0024f7d:	01 c8                	add    eax,ecx
c0024f7f:	8d 3c 80             	lea    edi,[eax+eax*4]
c0024f82:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0024f85:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0024f8b:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0024f91:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024f95:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0024f9b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0024fa1:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0024fa7:	89 ca                	mov    edx,ecx
c0024fa9:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0024fb0:	f7 da                	neg    edx
c0024fb2:	c1 e2 15             	shl    edx,0x15
c0024fb5:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0024fbb:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0024fc1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0024fc5:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0024fcf:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0024fd5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0024fd9:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0024fdf:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0024fe9:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0024ff3:	68 00 01 00 00       	push   0x100
c0024ff8:	e8 09 13 ff ff       	call   c0016306 <malloc>
c0024ffd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0025000:	58                   	pop    eax
c0025001:	5a                   	pop    edx
c0025002:	53                   	push   ebx
c0025003:	68 ec 01 04 c0       	push   0xc00401ec
c0025008:	e8 03 9c 00 00       	call   c002ec10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002500d:	83 c4 10             	add    esp,0x10
c0025010:	89 d8                	mov    eax,ebx
c0025012:	5b                   	pop    ebx
c0025013:	5e                   	pop    esi
c0025014:	5f                   	pop    edi
c0025015:	c3                   	ret    
c0025016:	66 90                	xchg   ax,ax

c0025018 <Process::createUserThread()>:
c0025018:	83 ec 0c             	sub    esp,0xc
c002501b:	68 80 00 00 00       	push   0x80
c0025020:	6a 00                	push   0x0
c0025022:	68 64 49 02 c0       	push   0xc0024964
c0025027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002502b:	50                   	push   eax
c002502c:	e8 db fe ff ff       	call   c0024f0c <Process::createThread(void (*)(void*), void*, int)>
c0025031:	83 c4 1c             	add    esp,0x1c
c0025034:	c3                   	ret    
c0025035:	8d 76 00             	lea    esi,[esi+0x0]

c0025038 <setupMultitasking(void (*)())>:
c0025038:	56                   	push   esi
c0025039:	53                   	push   ebx
c002503a:	83 ec 04             	sub    esp,0x4
c002503d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0025041:	eb 11                	jmp    c0025054 <setupMultitasking(void (*)())+0x1c>
c0025043:	90                   	nop
c0025044:	83 ec 0c             	sub    esp,0xc
c0025047:	68 ec 01 04 c0       	push   0xc00401ec
c002504c:	e8 03 9b 00 00       	call   c002eb54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025051:	83 c4 10             	add    esp,0x10
c0025054:	83 ec 0c             	sub    esp,0xc
c0025057:	68 ec 01 04 c0       	push   0xc00401ec
c002505c:	e8 cf 9a 00 00       	call   c002eb30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0025061:	83 c4 10             	add    esp,0x10
c0025064:	84 c0                	test   al,al
c0025066:	74 dc                	je     c0025044 <setupMultitasking(void (*)())+0xc>
c0025068:	83 ec 0c             	sub    esp,0xc
c002506b:	68 24 07 00 00       	push   0x724
c0025070:	e8 91 12 ff ff       	call   c0016306 <malloc>
c0025075:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002507c:	89 c3                	mov    ebx,eax
c002507e:	6a 00                	push   0x0
c0025080:	68 01 2d 03 c0       	push   0xc0032d01
c0025085:	6a 01                	push   0x1
c0025087:	50                   	push   eax
c0025088:	e8 57 fc ff ff       	call   c0024ce4 <Process::Process(bool, char const*, Process*, char**)>
c002508d:	83 c4 14             	add    esp,0x14
c0025090:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0025096:	89 1d f8 01 04 c0    	mov    DWORD PTR ds:0xc00401f8,ebx
c002509c:	50                   	push   eax
c002509d:	e8 07 1f ff ff       	call   c0016fa9 <setActiveTerminal(VgaText*)>
c00250a2:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c00250a9:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00250b3:	83 c8 01             	or     eax,0x1
c00250b6:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c00250bd:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00250c3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00250c6:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00250d0:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00250d6:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00250dc:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00250e6:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00250f0:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00250fa:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0025100:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c002510a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0025110:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c002511a:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0025121:	e8 e0 11 ff ff       	call   c0016306 <malloc>
c0025126:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c002512c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0025132:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0025138:	5a                   	pop    edx
c0025139:	59                   	pop    ecx
c002513a:	68 fd 2c 03 c0       	push   0xc0032cfd
c002513f:	50                   	push   eax
c0025140:	e8 fb b4 fd ff       	call   c0000640 <strcpy>
c0025145:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c002514c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0025150:	83 c4 14             	add    esp,0x14
c0025153:	5b                   	pop    ebx
c0025154:	5e                   	pop    esi
c0025155:	e9 0f b1 fd ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c002515a:	66 90                	xchg   ax,ax

c002515c <schedule()>:
c002515c:	8b 15 cc 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401cc
c0025162:	85 d2                	test   edx,edx
c0025164:	74 0e                	je     c0025174 <schedule()+0x18>
c0025166:	c7 05 c8 01 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x1
c0025170:	c3                   	ret    
c0025171:	8d 76 00             	lea    esi,[esi+0x0]
c0025174:	53                   	push   ebx
c0025175:	83 ec 14             	sub    esp,0x14
c0025178:	68 ec 01 04 c0       	push   0xc00401ec
c002517d:	e8 ae 99 00 00       	call   c002eb30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0025182:	83 c4 10             	add    esp,0x10
c0025185:	84 c0                	test   al,al
c0025187:	75 3f                	jne    c00251c8 <schedule()+0x6c>
c0025189:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002518e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0025191:	83 fa 01             	cmp    edx,0x1
c0025194:	74 3a                	je     c00251d0 <schedule()+0x74>
c0025196:	66 90                	xchg   ax,ax
c0025198:	83 ec 0c             	sub    esp,0xc
c002519b:	68 ec 01 04 c0       	push   0xc00401ec
c00251a0:	e8 a7 99 00 00       	call   c002eb4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00251a5:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c00251ac:	89 c3                	mov    ebx,eax
c00251ae:	e8 a1 99 00 00       	call   c002eb54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00251b3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00251ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00251bd:	e8 fa f7 ff ff       	call   c00249bc <switchToThread(ThreadControlBlock*)>
c00251c2:	83 c4 10             	add    esp,0x10
c00251c5:	8d 76 00             	lea    esi,[esi+0x0]
c00251c8:	83 c4 08             	add    esp,0x8
c00251cb:	5b                   	pop    ebx
c00251cc:	c3                   	ret    
c00251cd:	8d 76 00             	lea    esi,[esi+0x0]
c00251d0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00251d7:	83 ec 08             	sub    esp,0x8
c00251da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00251df:	50                   	push   eax
c00251e0:	68 ec 01 04 c0       	push   0xc00401ec
c00251e5:	e8 26 9a 00 00       	call   c002ec10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00251ea:	83 c4 10             	add    esp,0x10
c00251ed:	eb a9                	jmp    c0025198 <schedule()+0x3c>
c00251ef:	90                   	nop

c00251f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00251f0:	83 ec 0c             	sub    esp,0xc
c00251f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00251f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00251fc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00251ff:	e8 58 ff ff ff       	call   c002515c <schedule()>
c0025204:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025209:	83 e8 01             	sub    eax,0x1
c002520c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025211:	75 01                	jne    c0025214 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0025213:	fb                   	sti    
c0025214:	83 c4 0c             	add    esp,0xc
c0025217:	c3                   	ret    

c0025218 <blockTask(TaskState)>:
c0025218:	83 ec 0c             	sub    esp,0xc
c002521b:	fa                   	cli    
c002521c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025221:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025225:	83 c0 01             	add    eax,0x1
c0025228:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002522d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025232:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0025235:	e8 22 ff ff ff       	call   c002515c <schedule()>
c002523a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002523f:	83 e8 01             	sub    eax,0x1
c0025242:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025247:	75 03                	jne    c002524c <blockTask(TaskState)+0x34>
c0025249:	fb                   	sti    
c002524a:	66 90                	xchg   ax,ax
c002524c:	83 c4 0c             	add    esp,0xc
c002524f:	c3                   	ret    

c0025250 <waitTask(int, int*, int)>:
c0025250:	83 ec 18             	sub    esp,0x18
c0025253:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025258:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002525c:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c002525f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0025263:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025268:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c002526b:	6a 07                	push   0x7
c002526d:	e8 a6 ff ff ff       	call   c0025218 <blockTask(TaskState)>
c0025272:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025277:	83 c4 10             	add    esp,0x10
c002527a:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c002527d:	85 d2                	test   edx,edx
c002527f:	74 0b                	je     c002528c <waitTask(int, int*, int)+0x3c>
c0025281:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0025284:	89 02                	mov    DWORD PTR [edx],eax
c0025286:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002528b:	90                   	nop
c002528c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c002528f:	83 c4 0c             	add    esp,0xc
c0025292:	c3                   	ret    
c0025293:	90                   	nop

c0025294 <milliTenthSleepUntil(unsigned int)>:
c0025294:	83 ec 0c             	sub    esp,0xc
c0025297:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002529b:	39 05 ec f3 03 c0    	cmp    DWORD PTR ds:0xc003f3ec,eax
c00252a1:	76 05                	jbe    c00252a8 <milliTenthSleepUntil(unsigned int)+0x14>
c00252a3:	90                   	nop
c00252a4:	83 c4 0c             	add    esp,0xc
c00252a7:	c3                   	ret    
c00252a8:	fa                   	cli    
c00252a9:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c00252af:	83 ec 08             	sub    esp,0x8
c00252b2:	83 c2 01             	add    edx,0x1
c00252b5:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c00252bb:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c00252c1:	83 c1 01             	add    ecx,0x1
c00252c4:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c00252ca:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00252d0:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00252d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00252d8:	50                   	push   eax
c00252d9:	68 e0 01 04 c0       	push   0xc00401e0
c00252de:	e8 2d 99 00 00       	call   c002ec10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00252e3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00252ea:	e8 29 ff ff ff       	call   c0025218 <blockTask(TaskState)>
c00252ef:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00252f4:	83 c4 10             	add    esp,0x10
c00252f7:	83 e8 01             	sub    eax,0x1
c00252fa:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00252ff:	85 c0                	test   eax,eax
c0025301:	75 09                	jne    c002530c <milliTenthSleepUntil(unsigned int)+0x78>
c0025303:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0025308:	85 c0                	test   eax,eax
c002530a:	75 14                	jne    c0025320 <milliTenthSleepUntil(unsigned int)+0x8c>
c002530c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025311:	83 e8 01             	sub    eax,0x1
c0025314:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025319:	75 89                	jne    c00252a4 <milliTenthSleepUntil(unsigned int)+0x10>
c002531b:	fb                   	sti    
c002531c:	83 c4 0c             	add    esp,0xc
c002531f:	c3                   	ret    
c0025320:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c002532a:	e8 2d fe ff ff       	call   c002515c <schedule()>
c002532f:	eb db                	jmp    c002530c <milliTenthSleepUntil(unsigned int)+0x78>
c0025331:	8d 76 00             	lea    esi,[esi+0x0]

c0025334 <milliTenthSleep(unsigned int)>:
c0025334:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025338:	a1 ec f3 03 c0       	mov    eax,ds:0xc003f3ec
c002533d:	01 c2                	add    edx,eax
c002533f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0025343:	e9 4c ff ff ff       	jmp    c0025294 <milliTenthSleepUntil(unsigned int)>

c0025348 <sleep(unsigned int)>:
c0025348:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002534c:	8d 04 80             	lea    eax,[eax+eax*4]
c002534f:	8d 04 80             	lea    eax,[eax+eax*4]
c0025352:	8d 04 80             	lea    eax,[eax+eax*4]
c0025355:	8d 04 80             	lea    eax,[eax+eax*4]
c0025358:	c1 e0 04             	shl    eax,0x4
c002535b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002535f:	eb d3                	jmp    c0025334 <milliTenthSleep(unsigned int)>
c0025361:	8d 76 00             	lea    esi,[esi+0x0]

c0025364 <taskReturned>:
c0025364:	83 ec 18             	sub    esp,0x18
c0025367:	68 80 2d 03 c0       	push   0xc0032d80
c002536c:	e8 3d ae ff ff       	call   c00201ae <KePanic(char const*)>
c0025371:	83 c4 10             	add    esp,0x10
c0025374:	83 ec 0c             	sub    esp,0xc
c0025377:	6a 02                	push   0x2
c0025379:	e8 9a fe ff ff       	call   c0025218 <blockTask(TaskState)>
c002537e:	fa                   	cli    
c002537f:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025384:	83 c0 01             	add    eax,0x1
c0025387:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002538c:	e8 cb fd ff ff       	call   c002515c <schedule()>
c0025391:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025396:	83 c4 10             	add    esp,0x10
c0025399:	83 e8 01             	sub    eax,0x1
c002539c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00253a1:	85 c0                	test   eax,eax
c00253a3:	75 cf                	jne    c0025374 <taskReturned+0x10>
c00253a5:	fb                   	sti    
c00253a6:	eb cc                	jmp    c0025374 <taskReturned+0x10>

c00253a8 <Thr::processFromPID(int)>:
c00253a8:	57                   	push   edi
c00253a9:	56                   	push   esi
c00253aa:	53                   	push   ebx
c00253ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00253af:	fa                   	cli    
c00253b0:	8b 0d d0 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401d0
c00253b6:	83 ec 0c             	sub    esp,0xc
c00253b9:	83 c1 01             	add    ecx,0x1
c00253bc:	68 ec 01 04 c0       	push   0xc00401ec
c00253c1:	89 0d d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,ecx
c00253c7:	e8 80 97 00 00       	call   c002eb4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00253cc:	83 c4 10             	add    esp,0x10
c00253cf:	89 c7                	mov    edi,eax
c00253d1:	eb 15                	jmp    c00253e8 <Thr::processFromPID(int)+0x40>
c00253d3:	90                   	nop
c00253d4:	83 ec 0c             	sub    esp,0xc
c00253d7:	68 ec 01 04 c0       	push   0xc00401ec
c00253dc:	e8 6b 97 00 00       	call   c002eb4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00253e1:	83 c4 10             	add    esp,0x10
c00253e4:	39 f8                	cmp    eax,edi
c00253e6:	74 50                	je     c0025438 <Thr::processFromPID(int)+0x90>
c00253e8:	83 ec 0c             	sub    esp,0xc
c00253eb:	68 ec 01 04 c0       	push   0xc00401ec
c00253f0:	e8 57 97 00 00       	call   c002eb4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00253f5:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c00253fc:	89 c3                	mov    ebx,eax
c00253fe:	e8 51 97 00 00       	call   c002eb54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025403:	58                   	pop    eax
c0025404:	5a                   	pop    edx
c0025405:	53                   	push   ebx
c0025406:	68 ec 01 04 c0       	push   0xc00401ec
c002540b:	e8 00 98 00 00       	call   c002ec10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025410:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025413:	83 c4 10             	add    esp,0x10
c0025416:	39 30                	cmp    DWORD PTR [eax],esi
c0025418:	75 ba                	jne    c00253d4 <Thr::processFromPID(int)+0x2c>
c002541a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002541f:	83 e8 01             	sub    eax,0x1
c0025422:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025427:	74 0b                	je     c0025434 <Thr::processFromPID(int)+0x8c>
c0025429:	8d 76 00             	lea    esi,[esi+0x0]
c002542c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c002542f:	5b                   	pop    ebx
c0025430:	5e                   	pop    esi
c0025431:	5f                   	pop    edi
c0025432:	c3                   	ret    
c0025433:	90                   	nop
c0025434:	fb                   	sti    
c0025435:	eb f5                	jmp    c002542c <Thr::processFromPID(int)+0x84>
c0025437:	90                   	nop
c0025438:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002543d:	83 e8 01             	sub    eax,0x1
c0025440:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025445:	75 05                	jne    c002544c <Thr::processFromPID(int)+0xa4>
c0025447:	fb                   	sti    
c0025448:	5b                   	pop    ebx
c0025449:	5e                   	pop    esi
c002544a:	5f                   	pop    edi
c002544b:	c3                   	ret    
c002544c:	5b                   	pop    ebx
c002544d:	31 c0                	xor    eax,eax
c002544f:	5e                   	pop    esi
c0025450:	5f                   	pop    edi
c0025451:	c3                   	ret    
c0025452:	66 90                	xchg   ax,ax

c0025454 <unblockTask(ThreadControlBlock*)>:
c0025454:	53                   	push   ebx
c0025455:	83 ec 08             	sub    esp,0x8
c0025458:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002545c:	fa                   	cli    
c002545d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025462:	83 c0 01             	add    eax,0x1
c0025465:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002546a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c002546d:	85 c0                	test   eax,eax
c002546f:	74 67                	je     c00254d8 <unblockTask(ThreadControlBlock*)+0x84>
c0025471:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0025474:	83 f8 01             	cmp    eax,0x1
c0025477:	74 37                	je     c00254b0 <unblockTask(ThreadControlBlock*)+0x5c>
c0025479:	83 ec 0c             	sub    esp,0xc
c002547c:	68 ec 01 04 c0       	push   0xc00401ec
c0025481:	e8 c6 96 00 00       	call   c002eb4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025486:	83 c4 10             	add    esp,0x10
c0025489:	85 c0                	test   eax,eax
c002548b:	75 1b                	jne    c00254a8 <unblockTask(ThreadControlBlock*)+0x54>
c002548d:	eb 5d                	jmp    c00254ec <unblockTask(ThreadControlBlock*)+0x98>
c002548f:	90                   	nop
c0025490:	83 ec 08             	sub    esp,0x8
c0025493:	50                   	push   eax
c0025494:	68 ec 01 04 c0       	push   0xc00401ec
c0025499:	e8 ce 99 00 00       	call   c002ee6c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c002549e:	83 c4 10             	add    esp,0x10
c00254a1:	85 c0                	test   eax,eax
c00254a3:	74 47                	je     c00254ec <unblockTask(ThreadControlBlock*)+0x98>
c00254a5:	8d 76 00             	lea    esi,[esi+0x0]
c00254a8:	39 c3                	cmp    ebx,eax
c00254aa:	75 e4                	jne    c0025490 <unblockTask(ThreadControlBlock*)+0x3c>
c00254ac:	eb 12                	jmp    c00254c0 <unblockTask(ThreadControlBlock*)+0x6c>
c00254ae:	66 90                	xchg   ax,ax
c00254b0:	83 ec 0c             	sub    esp,0xc
c00254b3:	68 1f 2d 03 c0       	push   0xc0032d1f
c00254b8:	e8 d8 3c ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c00254bd:	83 c4 10             	add    esp,0x10
c00254c0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00254c5:	83 e8 01             	sub    eax,0x1
c00254c8:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00254cd:	75 01                	jne    c00254d0 <unblockTask(ThreadControlBlock*)+0x7c>
c00254cf:	fb                   	sti    
c00254d0:	83 c4 08             	add    esp,0x8
c00254d3:	5b                   	pop    ebx
c00254d4:	c3                   	ret    
c00254d5:	8d 76 00             	lea    esi,[esi+0x0]
c00254d8:	83 ec 0c             	sub    esp,0xc
c00254db:	68 08 2d 03 c0       	push   0xc0032d08
c00254e0:	e8 b0 3c ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c00254e5:	83 c4 10             	add    esp,0x10
c00254e8:	eb d6                	jmp    c00254c0 <unblockTask(ThreadControlBlock*)+0x6c>
c00254ea:	66 90                	xchg   ax,ax
c00254ec:	83 ec 08             	sub    esp,0x8
c00254ef:	53                   	push   ebx
c00254f0:	68 ec 01 04 c0       	push   0xc00401ec
c00254f5:	e8 16 97 00 00       	call   c002ec10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00254fa:	83 c4 10             	add    esp,0x10
c00254fd:	eb c1                	jmp    c00254c0 <unblockTask(ThreadControlBlock*)+0x6c>
c00254ff:	90                   	nop

c0025500 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0025500:	55                   	push   ebp
c0025501:	57                   	push   edi
c0025502:	56                   	push   esi
c0025503:	53                   	push   ebx
c0025504:	83 ec 1c             	sub    esp,0x1c
c0025507:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002550b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c002550e:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0025514:	85 ed                	test   ebp,ebp
c0025516:	7e 28                	jle    c0025540 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0025518:	31 f6                	xor    esi,esi
c002551a:	66 90                	xchg   ax,ax
c002551c:	83 ec 0c             	sub    esp,0xc
c002551f:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0025526:	83 c6 01             	add    esi,0x1
c0025529:	57                   	push   edi
c002552a:	e8 e7 0d ff ff       	call   c0016316 <free>
c002552f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025532:	83 c4 10             	add    esp,0x10
c0025535:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c002553b:	7f df                	jg     c002551c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c002553d:	8d 76 00             	lea    esi,[esi+0x0]
c0025540:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c002554a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c002554f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0025552:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0025555:	d3 c0                	rol    eax,cl
c0025557:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c002555e:	21 c8                	and    eax,ecx
c0025560:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0025567:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c002556a:	89 f7                	mov    edi,esi
c002556c:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0025574:	0f 85 72 01 00 00    	jne    c00256ec <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c002557a:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0025580:	85 ed                	test   ebp,ebp
c0025582:	74 1c                	je     c00255a0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0025584:	83 ec 0c             	sub    esp,0xc
c0025587:	55                   	push   ebp
c0025588:	e8 17 a9 ff ff       	call   c001fea4 <EnvVarContainer::~EnvVarContainer()>
c002558d:	59                   	pop    ecx
c002558e:	5e                   	pop    esi
c002558f:	6a 0c                	push   0xc
c0025591:	55                   	push   ebp
c0025592:	e8 d1 3a ff ff       	call   c0019068 <operator delete(void*, unsigned long)>
c0025597:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c002559a:	83 c4 10             	add    esp,0x10
c002559d:	89 f7                	mov    edi,esi
c002559f:	90                   	nop
c00255a0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00255a6:	85 c0                	test   eax,eax
c00255a8:	0f 84 b2 00 00 00    	je     c0025660 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00255ae:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00255b1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00255b5:	31 c9                	xor    ecx,ecx
c00255b7:	eb 17                	jmp    c00255d0 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00255b9:	8d 76 00             	lea    esi,[esi+0x0]
c00255bc:	83 c1 01             	add    ecx,0x1
c00255bf:	83 f9 10             	cmp    ecx,0x10
c00255c2:	0f 84 98 00 00 00    	je     c0025660 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00255c8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00255ce:	66 90                	xchg   ax,ax
c00255d0:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00255d7:	d3 fa                	sar    edx,cl
c00255d9:	80 e2 01             	and    dl,0x1
c00255dc:	74 de                	je     c00255bc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00255de:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00255e1:	01 d2                	add    edx,edx
c00255e3:	01 ca                	add    edx,ecx
c00255e5:	8d 14 92             	lea    edx,[edx+edx*4]
c00255e8:	01 d0                	add    eax,edx
c00255ea:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00255f0:	83 fd 07             	cmp    ebp,0x7
c00255f3:	75 c7                	jne    c00255bc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00255f5:	05 40 02 00 00       	add    eax,0x240
c00255fa:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00255fd:	83 fd ff             	cmp    ebp,0xffffffff
c0025600:	0f 8c ee 00 00 00    	jl     c00256f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0025606:	0f 84 ac 01 00 00    	je     c00257b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c002560c:	85 ed                	test   ebp,ebp
c002560e:	0f 84 90 01 00 00    	je     c00257a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0025614:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0025616:	75 a4                	jne    c00255bc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025618:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c002561e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025622:	01 d0                	add    eax,edx
c0025624:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0025628:	83 ec 0c             	sub    esp,0xc
c002562b:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0025631:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025634:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c002563a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0025641:	50                   	push   eax
c0025642:	e8 0d fe ff ff       	call   c0025454 <unblockTask(ThreadControlBlock*)>
c0025647:	83 c4 10             	add    esp,0x10
c002564a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c002564d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025651:	89 f7                	mov    edi,esi
c0025653:	83 c1 01             	add    ecx,0x1
c0025656:	83 f9 10             	cmp    ecx,0x10
c0025659:	0f 85 69 ff ff ff    	jne    c00255c8 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c002565f:	90                   	nop
c0025660:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0025666:	85 c0                	test   eax,eax
c0025668:	74 62                	je     c00256cc <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c002566a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0025670:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0025676:	74 54                	je     c00256cc <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0025678:	83 ec 0c             	sub    esp,0xc
c002567b:	68 ec 01 04 c0       	push   0xc00401ec
c0025680:	e8 c7 94 00 00       	call   c002eb4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025685:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c002568c:	89 c7                	mov    edi,eax
c002568e:	e8 9d 94 00 00       	call   c002eb30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0025693:	83 c4 10             	add    esp,0x10
c0025696:	84 c0                	test   al,al
c0025698:	0f 84 ce 00 00 00    	je     c002576c <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c002569e:	66 90                	xchg   ax,ax
c00256a0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00256a3:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00256a9:	85 d2                	test   edx,edx
c00256ab:	74 0f                	je     c00256bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00256ad:	83 ec 0c             	sub    esp,0xc
c00256b0:	8b 02                	mov    eax,DWORD PTR [edx]
c00256b2:	52                   	push   edx
c00256b3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00256b6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00256b9:	83 c4 10             	add    esp,0x10
c00256bc:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00256c6:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00256c9:	8d 76 00             	lea    esi,[esi+0x0]
c00256cc:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00256d2:	85 db                	test   ebx,ebx
c00256d4:	74 16                	je     c00256ec <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00256d6:	83 ec 0c             	sub    esp,0xc
c00256d9:	53                   	push   ebx
c00256da:	e8 23 2d ff ff       	call   c0018402 <VAS::~VAS()>
c00256df:	58                   	pop    eax
c00256e0:	5a                   	pop    edx
c00256e1:	6a 14                	push   0x14
c00256e3:	53                   	push   ebx
c00256e4:	e8 7f 39 ff ff       	call   c0019068 <operator delete(void*, unsigned long)>
c00256e9:	83 c4 10             	add    esp,0x10
c00256ec:	83 c4 1c             	add    esp,0x1c
c00256ef:	5b                   	pop    ebx
c00256f0:	5e                   	pop    esi
c00256f1:	5f                   	pop    edi
c00256f2:	5d                   	pop    ebp
c00256f3:	c3                   	ret    
c00256f4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00256f8:	83 ec 0c             	sub    esp,0xc
c00256fb:	68 b4 2d 03 c0       	push   0xc0032db4
c0025700:	e8 a9 aa ff ff       	call   c00201ae <KePanic(char const*)>
c0025705:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025708:	83 c4 10             	add    esp,0x10
c002570b:	89 f7                	mov    edi,esi
c002570d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025711:	e9 a6 fe ff ff       	jmp    c00255bc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025716:	66 90                	xchg   ax,ax
c0025718:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002571e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0025724:	75 1e                	jne    c0025744 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0025726:	83 ec 0c             	sub    esp,0xc
c0025729:	68 1c 2e 03 c0       	push   0xc0032e1c
c002572e:	e8 62 3a ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0025733:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c002573a:	e8 d9 fa ff ff       	call   c0025218 <blockTask(TaskState)>
c002573f:	83 c4 10             	add    esp,0x10
c0025742:	66 90                	xchg   ax,ax
c0025744:	83 ec 08             	sub    esp,0x8
c0025747:	56                   	push   esi
c0025748:	68 ec 01 04 c0       	push   0xc00401ec
c002574d:	e8 be 94 00 00       	call   c002ec10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025752:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025759:	e8 ee 93 00 00       	call   c002eb4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c002575e:	83 c4 10             	add    esp,0x10
c0025761:	39 f8                	cmp    eax,edi
c0025763:	0f 84 37 ff ff ff    	je     c00256a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0025769:	8d 76 00             	lea    esi,[esi+0x0]
c002576c:	83 ec 0c             	sub    esp,0xc
c002576f:	68 ec 01 04 c0       	push   0xc00401ec
c0025774:	e8 d3 93 00 00       	call   c002eb4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025779:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025780:	89 c6                	mov    esi,eax
c0025782:	e8 cd 93 00 00       	call   c002eb54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025787:	83 c4 10             	add    esp,0x10
c002578a:	39 f3                	cmp    ebx,esi
c002578c:	74 b6                	je     c0025744 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c002578e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0025791:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025794:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c002579a:	75 a8                	jne    c0025744 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c002579c:	e9 77 ff ff ff       	jmp    c0025718 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c00257a1:	8d 76 00             	lea    esi,[esi+0x0]
c00257a4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00257a8:	83 ec 0c             	sub    esp,0xc
c00257ab:	68 e8 2d 03 c0       	push   0xc0032de8
c00257b0:	e9 4b ff ff ff       	jmp    c0025700 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00257b5:	8d 76 00             	lea    esi,[esi+0x0]
c00257b8:	8b 36                	mov    esi,DWORD PTR [esi]
c00257ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00257be:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00257c1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00257c4:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00257ca:	01 d7                	add    edi,edx
c00257cc:	89 f8                	mov    eax,edi
c00257ce:	e9 51 fe ff ff       	jmp    c0025624 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00257d3:	90                   	nop

c00257d4 <cleanerTaskFunction(void*)>:
c00257d4:	53                   	push   ebx
c00257d5:	83 ec 08             	sub    esp,0x8
c00257d8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00257dd:	83 e8 01             	sub    eax,0x1
c00257e0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00257e5:	75 01                	jne    c00257e8 <cleanerTaskFunction(void*)+0x14>
c00257e7:	fb                   	sti    
c00257e8:	fa                   	cli    
c00257e9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00257ee:	80 3d b4 01 04 c0 00 	cmp    BYTE PTR ds:0xc00401b4,0x0
c00257f5:	8d 50 01             	lea    edx,[eax+0x1]
c00257f8:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c00257fe:	0f 84 c4 00 00 00    	je     c00258c8 <cleanerTaskFunction(void*)+0xf4>
c0025804:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025809:	85 c0                	test   eax,eax
c002580b:	75 03                	jne    c0025810 <cleanerTaskFunction(void*)+0x3c>
c002580d:	fb                   	sti    
c002580e:	66 90                	xchg   ax,ax
c0025810:	c6 05 b4 01 04 c0 00 	mov    BYTE PTR ds:0xc00401b4,0x0
c0025817:	fa                   	cli    
c0025818:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c002581e:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0025824:	83 c2 01             	add    edx,0x1
c0025827:	83 c1 01             	add    ecx,0x1
c002582a:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025830:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c0025836:	fa                   	cli    
c0025837:	8b 1d d0 01 04 c0    	mov    ebx,DWORD PTR ds:0xc00401d0
c002583d:	83 c3 01             	add    ebx,0x1
c0025840:	89 1d d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,ebx
c0025846:	eb 28                	jmp    c0025870 <cleanerTaskFunction(void*)+0x9c>
c0025848:	83 ec 0c             	sub    esp,0xc
c002584b:	68 d4 01 04 c0       	push   0xc00401d4
c0025850:	e8 f7 92 00 00       	call   c002eb4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025855:	c7 04 24 d4 01 04 c0 	mov    DWORD PTR [esp],0xc00401d4
c002585c:	89 c3                	mov    ebx,eax
c002585e:	e8 f1 92 00 00       	call   c002eb54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025863:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025866:	e8 95 fc ff ff       	call   c0025500 <cleanupTerminatedTask(ThreadControlBlock*)>
c002586b:	83 c4 10             	add    esp,0x10
c002586e:	66 90                	xchg   ax,ax
c0025870:	83 ec 0c             	sub    esp,0xc
c0025873:	68 d4 01 04 c0       	push   0xc00401d4
c0025878:	e8 b3 92 00 00       	call   c002eb30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c002587d:	83 c4 10             	add    esp,0x10
c0025880:	84 c0                	test   al,al
c0025882:	74 c4                	je     c0025848 <cleanerTaskFunction(void*)+0x74>
c0025884:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025889:	83 e8 01             	sub    eax,0x1
c002588c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025891:	75 01                	jne    c0025894 <cleanerTaskFunction(void*)+0xc0>
c0025893:	fb                   	sti    
c0025894:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0025899:	83 e8 01             	sub    eax,0x1
c002589c:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00258a1:	0f 85 31 ff ff ff    	jne    c00257d8 <cleanerTaskFunction(void*)+0x4>
c00258a7:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00258ac:	85 c0                	test   eax,eax
c00258ae:	0f 84 24 ff ff ff    	je     c00257d8 <cleanerTaskFunction(void*)+0x4>
c00258b4:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00258be:	e8 99 f8 ff ff       	call   c002515c <schedule()>
c00258c3:	e9 10 ff ff ff       	jmp    c00257d8 <cleanerTaskFunction(void*)+0x4>
c00258c8:	83 ec 0c             	sub    esp,0xc
c00258cb:	6a 02                	push   0x2
c00258cd:	e8 1e f9 ff ff       	call   c00251f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00258d2:	83 c4 10             	add    esp,0x10
c00258d5:	e9 36 ff ff ff       	jmp    c0025810 <cleanerTaskFunction(void*)+0x3c>
c00258da:	66 90                	xchg   ax,ax

c00258dc <terminateTask(int)>:
c00258dc:	83 ec 14             	sub    esp,0x14
c00258df:	fa                   	cli    
c00258e0:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c00258e6:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c00258ec:	83 c2 01             	add    edx,0x1
c00258ef:	83 c1 01             	add    ecx,0x1
c00258f2:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c00258f8:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c00258fe:	fa                   	cli    
c00258ff:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025904:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025908:	83 c0 01             	add    eax,0x1
c002590b:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025910:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025915:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0025918:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002591d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0025920:	50                   	push   eax
c0025921:	68 d4 01 04 c0       	push   0xc00401d4
c0025926:	e8 e5 92 00 00       	call   c002ec10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002592b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025930:	83 c4 10             	add    esp,0x10
c0025933:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c002593a:	a1 b0 01 04 c0       	mov    eax,ds:0xc00401b0
c002593f:	85 c0                	test   eax,eax
c0025941:	74 65                	je     c00259a8 <terminateTask(int)+0xcc>
c0025943:	83 ec 0c             	sub    esp,0xc
c0025946:	c6 05 b4 01 04 c0 01 	mov    BYTE PTR ds:0xc00401b4,0x1
c002594d:	50                   	push   eax
c002594e:	e8 01 fb ff ff       	call   c0025454 <unblockTask(ThreadControlBlock*)>
c0025953:	83 c4 10             	add    esp,0x10
c0025956:	66 90                	xchg   ax,ax
c0025958:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002595d:	83 e8 01             	sub    eax,0x1
c0025960:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025965:	75 01                	jne    c0025968 <terminateTask(int)+0x8c>
c0025967:	fb                   	sti    
c0025968:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002596d:	83 e8 01             	sub    eax,0x1
c0025970:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0025975:	75 09                	jne    c0025980 <terminateTask(int)+0xa4>
c0025977:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c002597e:	75 3c                	jne    c00259bc <terminateTask(int)+0xe0>
c0025980:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025985:	83 e8 01             	sub    eax,0x1
c0025988:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002598d:	75 01                	jne    c0025990 <terminateTask(int)+0xb4>
c002598f:	fb                   	sti    
c0025990:	fa                   	cli    
c0025991:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025996:	83 c0 01             	add    eax,0x1
c0025999:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002599e:	66 90                	xchg   ax,ax
c00259a0:	e8 b7 f7 ff ff       	call   c002515c <schedule()>
c00259a5:	eb d9                	jmp    c0025980 <terminateTask(int)+0xa4>
c00259a7:	90                   	nop
c00259a8:	83 ec 0c             	sub    esp,0xc
c00259ab:	68 36 2d 03 c0       	push   0xc0032d36
c00259b0:	e8 e0 37 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c00259b5:	83 c4 10             	add    esp,0x10
c00259b8:	eb 9e                	jmp    c0025958 <terminateTask(int)+0x7c>
c00259ba:	66 90                	xchg   ax,ax
c00259bc:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00259c6:	eb d8                	jmp    c00259a0 <terminateTask(int)+0xc4>

c00259c8 <Thr::terminateFromIRQ(int)>:
c00259c8:	83 ec 18             	sub    esp,0x18
c00259cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00259cf:	50                   	push   eax
c00259d0:	e8 07 ff ff ff       	call   c00258dc <terminateTask(int)>
c00259d5:	8d 76 00             	lea    esi,[esi+0x0]

c00259d8 <__static_initialization_and_destruction_0(int, int)>:
c00259d8:	83 ec 0c             	sub    esp,0xc
c00259db:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00259e0:	0f 85 8e 00 00 00    	jne    c0025a74 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00259e6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00259ee:	0f 85 80 00 00 00    	jne    c0025a74 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00259f4:	83 ec 0c             	sub    esp,0xc
c00259f7:	68 ec 01 04 c0       	push   0xc00401ec
c00259fc:	e8 c3 94 00 00       	call   c002eec4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025a01:	83 c4 10             	add    esp,0x10
c0025a04:	83 ec 04             	sub    esp,0x4
c0025a07:	68 f8 39 03 c0       	push   0xc00339f8
c0025a0c:	68 ec 01 04 c0       	push   0xc00401ec
c0025a11:	68 74 ee 02 c0       	push   0xc002ee74
c0025a16:	e8 fd 35 ff ff       	call   c0019018 <__cxa_atexit>
c0025a1b:	83 c4 10             	add    esp,0x10
c0025a1e:	83 ec 0c             	sub    esp,0xc
c0025a21:	68 e0 01 04 c0       	push   0xc00401e0
c0025a26:	e8 99 94 00 00       	call   c002eec4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025a2b:	83 c4 10             	add    esp,0x10
c0025a2e:	83 ec 04             	sub    esp,0x4
c0025a31:	68 f8 39 03 c0       	push   0xc00339f8
c0025a36:	68 e0 01 04 c0       	push   0xc00401e0
c0025a3b:	68 74 ee 02 c0       	push   0xc002ee74
c0025a40:	e8 d3 35 ff ff       	call   c0019018 <__cxa_atexit>
c0025a45:	83 c4 10             	add    esp,0x10
c0025a48:	83 ec 0c             	sub    esp,0xc
c0025a4b:	68 d4 01 04 c0       	push   0xc00401d4
c0025a50:	e8 6f 94 00 00       	call   c002eec4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025a55:	83 c4 10             	add    esp,0x10
c0025a58:	83 ec 04             	sub    esp,0x4
c0025a5b:	68 f8 39 03 c0       	push   0xc00339f8
c0025a60:	68 d4 01 04 c0       	push   0xc00401d4
c0025a65:	68 74 ee 02 c0       	push   0xc002ee74
c0025a6a:	e8 a9 35 ff ff       	call   c0019018 <__cxa_atexit>
c0025a6f:	83 c4 10             	add    esp,0x10
c0025a72:	66 90                	xchg   ax,ax
c0025a74:	90                   	nop
c0025a75:	83 c4 0c             	add    esp,0xc
c0025a78:	c3                   	ret    
c0025a79:	8d 76 00             	lea    esi,[esi+0x0]

c0025a7c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0025a7c:	83 ec 0c             	sub    esp,0xc
c0025a7f:	83 ec 08             	sub    esp,0x8
c0025a82:	68 ff ff 00 00       	push   0xffff
c0025a87:	6a 01                	push   0x1
c0025a89:	e8 4a ff ff ff       	call   c00259d8 <__static_initialization_and_destruction_0(int, int)>
c0025a8e:	83 c4 10             	add    esp,0x10
c0025a91:	83 c4 0c             	add    esp,0xc
c0025a94:	c3                   	ret    

c0025a95 <Vm::inbv(unsigned short)>:
c0025a95:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025a99:	66 81 fa fe fe       	cmp    dx,0xfefe
c0025a9e:	75 06                	jne    c0025aa6 <Vm::inbv(unsigned short)+0x11>
c0025aa0:	a0 2c 02 04 c0       	mov    al,ds:0xc004022c
c0025aa5:	c3                   	ret    
c0025aa6:	ec                   	in     al,dx
c0025aa7:	c3                   	ret    

c0025aa8 <Vm::outbv(unsigned short, unsigned char)>:
c0025aa8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025aac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025ab0:	66 81 fa fe fe       	cmp    dx,0xfefe
c0025ab5:	75 25                	jne    c0025adc <Vm::outbv(unsigned short, unsigned char)+0x34>
c0025ab7:	8b 0d 2c 02 04 c0    	mov    ecx,DWORD PTR ds:0xc004022c
c0025abd:	8d 51 01             	lea    edx,[ecx+0x1]
c0025ac0:	88 81 40 02 04 c0    	mov    BYTE PTR [ecx-0x3ffbfdc0],al
c0025ac6:	89 15 2c 02 04 c0    	mov    DWORD PTR ds:0xc004022c,edx
c0025acc:	83 fa 20             	cmp    edx,0x20
c0025acf:	75 0c                	jne    c0025add <Vm::outbv(unsigned short, unsigned char)+0x35>
c0025ad1:	c7 05 2c 02 04 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x1f
c0025adb:	c3                   	ret    
c0025adc:	ee                   	out    dx,al
c0025add:	c3                   	ret    

c0025ade <Vm::realToLinear(unsigned short, unsigned short)>:
c0025ade:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025ae3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025ae8:	c1 e0 04             	shl    eax,0x4
c0025aeb:	01 d0                	add    eax,edx
c0025aed:	c3                   	ret    

c0025aee <Vm::getSegment(unsigned int)>:
c0025aee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025af2:	c1 e8 10             	shr    eax,0x10
c0025af5:	c3                   	ret    

c0025af6 <Vm::getOffset(unsigned int)>:
c0025af6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025afa:	c3                   	ret    

c0025afb <Vm::mainloop2()>:
c0025afb:	83 ec 18             	sub    esp,0x18
c0025afe:	fa                   	cli    
c0025aff:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025b05:	6a 02                	push   0x2
c0025b07:	c6 05 25 02 04 c0 01 	mov    BYTE PTR ds:0xc0040225,0x1
c0025b0e:	e8 dd f6 ff ff       	call   c00251f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025b13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025b18:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0025b1c:	52                   	push   edx
c0025b1d:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0025b21:	52                   	push   edx
c0025b22:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0025b26:	52                   	push   edx
c0025b27:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0025b2b:	50                   	push   eax
c0025b2c:	e8 de a6 fd ff       	call   c000020f <goToVM86>
c0025b31:	83 c4 2c             	add    esp,0x2c
c0025b34:	c3                   	ret    

c0025b35 <Vm::mainVm8086Loop(void*)>:
c0025b35:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025b3a:	48                   	dec    eax
c0025b3b:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025b40:	75 01                	jne    c0025b43 <Vm::mainVm8086Loop(void*)+0xe>
c0025b42:	fb                   	sti    
c0025b43:	eb b6                	jmp    c0025afb <Vm::mainloop2()>

c0025b45 <Vm::mainloop3(unsigned long)>:
c0025b45:	83 ec 18             	sub    esp,0x18
c0025b48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025b4c:	fa                   	cli    
c0025b4d:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025b53:	6a 02                	push   0x2
c0025b55:	c6 05 24 02 04 c0 01 	mov    BYTE PTR ds:0xc0040224,0x1
c0025b5c:	a3 20 02 04 c0       	mov    ds:0xc0040220,eax
c0025b61:	e8 8a f6 ff ff       	call   c00251f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025b66:	83 c4 1c             	add    esp,0x1c
c0025b69:	eb 90                	jmp    c0025afb <Vm::mainloop2()>

c0025b6b <Vm::initialise8086()>:
c0025b6b:	83 ec 0c             	sub    esp,0xc
c0025b6e:	68 80 00 00 00       	push   0x80
c0025b73:	6a 00                	push   0x0
c0025b75:	68 35 5b 02 c0       	push   0xc0025b35
c0025b7a:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0025b80:	e8 87 f3 ff ff       	call   c0024f0c <Process::createThread(void (*)(void*), void*, int)>
c0025b85:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0025b8c:	a3 28 02 04 c0       	mov    ds:0xc0040228,eax
c0025b91:	68 00 01 00 00       	push   0x100
c0025b96:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0025b9b:	6a 00                	push   0x0
c0025b9d:	6a 00                	push   0x0
c0025b9f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0025ba5:	e8 c0 2b ff ff       	call   c001876a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0025baa:	83 c4 2c             	add    esp,0x2c
c0025bad:	c3                   	ret    

c0025bae <Vm::finish8086()>:
c0025bae:	53                   	push   ebx
c0025baf:	83 ec 08             	sub    esp,0x8
c0025bb2:	fa                   	cli    
c0025bb3:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025bb9:	80 3d 24 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040224,0x0
c0025bc0:	75 15                	jne    c0025bd7 <Vm::finish8086()+0x29>
c0025bc2:	e8 95 f5 ff ff       	call   c002515c <schedule()>
c0025bc7:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025bcc:	48                   	dec    eax
c0025bcd:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025bd2:	75 de                	jne    c0025bb2 <Vm::finish8086()+0x4>
c0025bd4:	fb                   	sti    
c0025bd5:	eb db                	jmp    c0025bb2 <Vm::finish8086()+0x4>
c0025bd7:	83 ec 0c             	sub    esp,0xc
c0025bda:	8b 1d 20 02 04 c0    	mov    ebx,DWORD PTR ds:0xc0040220
c0025be0:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025be6:	c6 05 24 02 04 c0 00 	mov    BYTE PTR ds:0xc0040224,0x0
c0025bed:	e8 62 f8 ff ff       	call   c0025454 <unblockTask(ThreadControlBlock*)>
c0025bf2:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025bf7:	83 c4 10             	add    esp,0x10
c0025bfa:	8d 50 ff             	lea    edx,[eax-0x1]
c0025bfd:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025c03:	85 d2                	test   edx,edx
c0025c05:	75 01                	jne    c0025c08 <Vm::finish8086()+0x5a>
c0025c07:	fb                   	sti    
c0025c08:	89 d8                	mov    eax,ebx
c0025c0a:	83 c4 08             	add    esp,0x8
c0025c0d:	5b                   	pop    ebx
c0025c0e:	c3                   	ret    

c0025c0f <Vm::getOutput8086(unsigned char*)>:
c0025c0f:	57                   	push   edi
c0025c10:	8b 0d 2c 02 04 c0    	mov    ecx,DWORD PTR ds:0xc004022c
c0025c16:	56                   	push   esi
c0025c17:	be 40 02 04 c0       	mov    esi,0xc0040240
c0025c1c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0025c20:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025c22:	a1 2c 02 04 c0       	mov    eax,ds:0xc004022c
c0025c27:	5e                   	pop    esi
c0025c28:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025c32:	5f                   	pop    edi
c0025c33:	c3                   	ret    

c0025c34 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0025c34:	55                   	push   ebp
c0025c35:	57                   	push   edi
c0025c36:	56                   	push   esi
c0025c37:	53                   	push   ebx
c0025c38:	83 ec 0c             	sub    esp,0xc
c0025c3b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025c3f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0025c43:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025c47:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025c4b:	fa                   	cli    
c0025c4c:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025c52:	80 3d 25 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040225,0x0
c0025c59:	75 15                	jne    c0025c70 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0025c5b:	e8 fc f4 ff ff       	call   c002515c <schedule()>
c0025c60:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025c65:	48                   	dec    eax
c0025c66:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025c6b:	75 de                	jne    c0025c4b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0025c6d:	fb                   	sti    
c0025c6e:	eb db                	jmp    c0025c4b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0025c70:	a1 28 02 04 c0       	mov    eax,ds:0xc0040228
c0025c75:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025c7f:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0025c83:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0025c87:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0025c8b:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0025c8f:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0025c93:	0f b7 ff             	movzx  edi,di
c0025c96:	0f b7 f6             	movzx  esi,si
c0025c99:	50                   	push   eax
c0025c9a:	6a 20                	push   0x20
c0025c9c:	6a 00                	push   0x0
c0025c9e:	68 40 02 04 c0       	push   0xc0040240
c0025ca3:	e8 48 a8 fd ff       	call   c00004f0 <memset>
c0025ca8:	5a                   	pop    edx
c0025ca9:	59                   	pop    ecx
c0025caa:	57                   	push   edi
c0025cab:	56                   	push   esi
c0025cac:	e8 2d fe ff ff       	call   c0025ade <Vm::realToLinear(unsigned short, unsigned short)>
c0025cb1:	83 c4 10             	add    esp,0x10
c0025cb4:	89 c7                	mov    edi,eax
c0025cb6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0025cba:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0025cbe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025cc0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025cc5:	c6 05 25 02 04 c0 00 	mov    BYTE PTR ds:0xc0040225,0x0
c0025ccc:	48                   	dec    eax
c0025ccd:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025cd2:	75 01                	jne    c0025cd5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0025cd4:	fb                   	sti    
c0025cd5:	83 ec 0c             	sub    esp,0xc
c0025cd8:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025cde:	e8 71 f7 ff ff       	call   c0025454 <unblockTask(ThreadControlBlock*)>
c0025ce3:	83 c4 1c             	add    esp,0x1c
c0025ce6:	b0 01                	mov    al,0x1
c0025ce8:	5b                   	pop    ebx
c0025ce9:	5e                   	pop    esi
c0025cea:	5f                   	pop    edi
c0025ceb:	5d                   	pop    ebp
c0025cec:	c3                   	ret    

c0025ced <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0025ced:	55                   	push   ebp
c0025cee:	57                   	push   edi
c0025cef:	56                   	push   esi
c0025cf0:	53                   	push   ebx
c0025cf1:	83 ec 34             	sub    esp,0x34
c0025cf4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025cf8:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0025cfc:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0025d00:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0025d04:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025d08:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025d0c:	68 44 2e 03 c0       	push   0xc0032e44
c0025d11:	e8 7f 34 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0025d16:	83 c4 10             	add    esp,0x10
c0025d19:	fa                   	cli    
c0025d1a:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025d20:	8a 1d 25 02 04 c0    	mov    bl,BYTE PTR ds:0xc0040225
c0025d26:	84 db                	test   bl,bl
c0025d28:	75 15                	jne    c0025d3f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0025d2a:	e8 2d f4 ff ff       	call   c002515c <schedule()>
c0025d2f:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025d34:	48                   	dec    eax
c0025d35:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025d3a:	75 dd                	jne    c0025d19 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0025d3c:	fb                   	sti    
c0025d3d:	eb da                	jmp    c0025d19 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0025d3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025d43:	a1 28 02 04 c0       	mov    eax,ds:0xc0040228
c0025d48:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025d52:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0025d56:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0025d5a:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0025d5e:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0025d62:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0025d66:	50                   	push   eax
c0025d67:	6a 20                	push   0x20
c0025d69:	6a 00                	push   0x0
c0025d6b:	68 40 02 04 c0       	push   0xc0040240
c0025d70:	e8 7b a7 fd ff       	call   c00004f0 <memset>
c0025d75:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0025d7c:	e8 85 05 ff ff       	call   c0016306 <malloc>
c0025d81:	83 c4 0c             	add    esp,0xc
c0025d84:	89 c5                	mov    ebp,eax
c0025d86:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0025d8c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025d90:	50                   	push   eax
c0025d91:	e8 06 46 ff ff       	call   c001a39c <File::File(char const*, Process*)>
c0025d96:	83 c4 10             	add    esp,0x10
c0025d99:	85 ed                	test   ebp,ebp
c0025d9b:	75 0a                	jne    c0025da7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0025d9d:	83 ec 0c             	sub    esp,0xc
c0025da0:	68 66 2e 03 c0       	push   0xc0032e66
c0025da5:	eb 2b                	jmp    c0025dd2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0025da7:	50                   	push   eax
c0025da8:	8d 44 24 17          	lea    eax,[esp+0x17]
c0025dac:	50                   	push   eax
c0025dad:	8d 44 24 20          	lea    eax,[esp+0x20]
c0025db1:	50                   	push   eax
c0025db2:	55                   	push   ebp
c0025db3:	e8 04 49 ff ff       	call   c001a6bc <File::stat(unsigned long long*, bool*)>
c0025db8:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0025dbc:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0025dc0:	83 c4 10             	add    esp,0x10
c0025dc3:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025dc8:	74 27                	je     c0025df1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0025dca:	83 ec 0c             	sub    esp,0xc
c0025dcd:	68 7a 2e 03 c0       	push   0xc0032e7a
c0025dd2:	e8 d7 a3 ff ff       	call   c00201ae <KePanic(char const*)>
c0025dd7:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025ddc:	83 c4 10             	add    esp,0x10
c0025ddf:	48                   	dec    eax
c0025de0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025de5:	85 c0                	test   eax,eax
c0025de7:	75 01                	jne    c0025dea <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0025de9:	fb                   	sti    
c0025dea:	31 db                	xor    ebx,ebx
c0025dec:	e9 90 00 00 00       	jmp    c0025e81 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0025df1:	51                   	push   ecx
c0025df2:	51                   	push   ecx
c0025df3:	6a 01                	push   0x1
c0025df5:	55                   	push   ebp
c0025df6:	e8 bf 45 ff ff       	call   c001a3ba <File::open(FileOpenMode)>
c0025dfb:	83 c4 10             	add    esp,0x10
c0025dfe:	85 c0                	test   eax,eax
c0025e00:	74 26                	je     c0025e28 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0025e02:	83 ec 0c             	sub    esp,0xc
c0025e05:	68 93 2e 03 c0       	push   0xc0032e93
c0025e0a:	e8 9f a3 ff ff       	call   c00201ae <KePanic(char const*)>
c0025e0f:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025e14:	83 c4 10             	add    esp,0x10
c0025e17:	48                   	dec    eax
c0025e18:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025e1d:	85 c0                	test   eax,eax
c0025e1f:	75 c9                	jne    c0025dea <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0025e21:	fb                   	sti    
c0025e22:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0025e26:	eb 59                	jmp    c0025e81 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0025e28:	0f b7 ff             	movzx  edi,di
c0025e2b:	50                   	push   eax
c0025e2c:	0f b7 f6             	movzx  esi,si
c0025e2f:	50                   	push   eax
c0025e30:	57                   	push   edi
c0025e31:	56                   	push   esi
c0025e32:	e8 a7 fc ff ff       	call   c0025ade <Vm::realToLinear(unsigned short, unsigned short)>
c0025e37:	5a                   	pop    edx
c0025e38:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0025e3b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0025e3f:	51                   	push   ecx
c0025e40:	50                   	push   eax
c0025e41:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0025e45:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0025e49:	55                   	push   ebp
c0025e4a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0025e4d:	83 c4 14             	add    esp,0x14
c0025e50:	55                   	push   ebp
c0025e51:	e8 c2 45 ff ff       	call   c001a418 <File::close()>
c0025e56:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025e5b:	83 c4 10             	add    esp,0x10
c0025e5e:	48                   	dec    eax
c0025e5f:	c6 05 25 02 04 c0 00 	mov    BYTE PTR ds:0xc0040225,0x0
c0025e66:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025e6b:	85 c0                	test   eax,eax
c0025e6d:	75 01                	jne    c0025e70 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0025e6f:	fb                   	sti    
c0025e70:	83 ec 0c             	sub    esp,0xc
c0025e73:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025e79:	e8 d6 f5 ff ff       	call   c0025454 <unblockTask(ThreadControlBlock*)>
c0025e7e:	83 c4 10             	add    esp,0x10
c0025e81:	83 c4 2c             	add    esp,0x2c
c0025e84:	88 d8                	mov    al,bl
c0025e86:	5b                   	pop    ebx
c0025e87:	5e                   	pop    esi
c0025e88:	5f                   	pop    edi
c0025e89:	5d                   	pop    ebp
c0025e8a:	c3                   	ret    

c0025e8b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0025e8b:	57                   	push   edi
c0025e8c:	56                   	push   esi
c0025e8d:	53                   	push   ebx
c0025e8e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025e92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025e96:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0025e9a:	83 e8 06             	sub    eax,0x6
c0025e9d:	0f b7 c0             	movzx  eax,ax
c0025ea0:	50                   	push   eax
c0025ea1:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0025ea6:	50                   	push   eax
c0025ea7:	e8 32 fc ff ff       	call   c0025ade <Vm::realToLinear(unsigned short, unsigned short)>
c0025eac:	5a                   	pop    edx
c0025ead:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0025eb0:	59                   	pop    ecx
c0025eb1:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0025eb4:	8d 51 fa             	lea    edx,[ecx-0x6]
c0025eb7:	81 e2 ff ff 00 00    	and    edx,0xffff
c0025ebd:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0025ec0:	8d 56 02             	lea    edx,[esi+0x2]
c0025ec3:	66 89 10             	mov    WORD PTR [eax],dx
c0025ec6:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0025eca:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0025ece:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0025ed1:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0025ed5:	0f b6 f1             	movzx  esi,cl
c0025ed8:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0025edc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0025ee2:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0025ee6:	0f b6 d5             	movzx  edx,ch
c0025ee9:	74 0a                	je     c0025ef5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c0025eeb:	c1 e2 08             	shl    edx,0x8
c0025eee:	09 f2                	or     edx,esi
c0025ef0:	80 ce 02             	or     dh,0x2
c0025ef3:	eb 08                	jmp    c0025efd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0025ef5:	c1 e2 08             	shl    edx,0x8
c0025ef8:	09 f2                	or     edx,esi
c0025efa:	80 e6 fd             	and    dh,0xfd
c0025efd:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0025f01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025f06:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0025f0a:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0025f12:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0025f15:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0025f1d:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0025f20:	5b                   	pop    ebx
c0025f21:	5e                   	pop    esi
c0025f22:	5f                   	pop    edi
c0025f23:	c3                   	ret    

c0025f24 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0025f24:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025f29:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025f2e:	c1 e0 04             	shl    eax,0x4
c0025f31:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0025f34:	c3                   	ret    

c0025f35 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0025f35:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025f3a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025f3f:	c1 e0 04             	shl    eax,0x4
c0025f42:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0025f46:	c3                   	ret    

c0025f47 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0025f47:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025f4c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025f51:	c1 e0 04             	shl    eax,0x4
c0025f54:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0025f57:	c3                   	ret    

c0025f58 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0025f58:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025f5d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025f62:	c1 e0 04             	shl    eax,0x4
c0025f65:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025f69:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0025f6c:	c3                   	ret    

c0025f6d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0025f6d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025f72:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025f77:	c1 e0 04             	shl    eax,0x4
c0025f7a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025f7e:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0025f82:	c3                   	ret    

c0025f83 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0025f83:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025f88:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025f8d:	c1 e0 04             	shl    eax,0x4
c0025f90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025f94:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0025f97:	c3                   	ret    

c0025f98 <Vm::faultHandler(regs*)>:
c0025f98:	55                   	push   ebp
c0025f99:	57                   	push   edi
c0025f9a:	56                   	push   esi
c0025f9b:	53                   	push   ebx
c0025f9c:	83 ec 2c             	sub    esp,0x2c
c0025f9f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0025fa3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025fa6:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0025faa:	0f b7 f8             	movzx  edi,ax
c0025fad:	52                   	push   edx
c0025fae:	0f b7 c0             	movzx  eax,ax
c0025fb1:	50                   	push   eax
c0025fb2:	e8 27 fb ff ff       	call   c0025ade <Vm::realToLinear(unsigned short, unsigned short)>
c0025fb7:	5a                   	pop    edx
c0025fb8:	59                   	pop    ecx
c0025fb9:	89 c1                	mov    ecx,eax
c0025fbb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0025fbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025fc2:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0025fc7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025fcb:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0025fce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025fd2:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0025fd7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025fdb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0025fdf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0025fe3:	e8 f6 fa ff ff       	call   c0025ade <Vm::realToLinear(unsigned short, unsigned short)>
c0025fe8:	5e                   	pop    esi
c0025fe9:	be 06 00 00 00       	mov    esi,0x6
c0025fee:	5d                   	pop    ebp
c0025fef:	31 ed                	xor    ebp,ebp
c0025ff1:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025ff6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0025ff9:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0025fff:	0f 84 74 02 00 00    	je     c0026279 <Vm::faultHandler(regs*)+0x2e1>
c0026005:	0f 87 94 00 00 00    	ja     c002609f <Vm::faultHandler(regs*)+0x107>
c002600b:	83 fa 66             	cmp    edx,0x66
c002600e:	0f 84 e2 01 00 00    	je     c00261f6 <Vm::faultHandler(regs*)+0x25e>
c0026014:	77 47                	ja     c002605d <Vm::faultHandler(regs*)+0xc5>
c0026016:	83 fa 36             	cmp    edx,0x36
c0026019:	0f 84 ca 01 00 00    	je     c00261e9 <Vm::faultHandler(regs*)+0x251>
c002601f:	77 1a                	ja     c002603b <Vm::faultHandler(regs*)+0xa3>
c0026021:	83 fa 26             	cmp    edx,0x26
c0026024:	0f 84 98 01 00 00    	je     c00261c2 <Vm::faultHandler(regs*)+0x22a>
c002602a:	83 fa 2e             	cmp    edx,0x2e
c002602d:	0f 85 21 06 00 00    	jne    c0026654 <Vm::faultHandler(regs*)+0x6bc>
c0026033:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026036:	31 f6                	xor    esi,esi
c0026038:	41                   	inc    ecx
c0026039:	eb bb                	jmp    c0025ff6 <Vm::faultHandler(regs*)+0x5e>
c002603b:	83 fa 64             	cmp    edx,0x64
c002603e:	0f 84 8b 01 00 00    	je     c00261cf <Vm::faultHandler(regs*)+0x237>
c0026044:	0f 87 92 01 00 00    	ja     c00261dc <Vm::faultHandler(regs*)+0x244>
c002604a:	83 fa 3e             	cmp    edx,0x3e
c002604d:	0f 85 01 06 00 00    	jne    c0026654 <Vm::faultHandler(regs*)+0x6bc>
c0026053:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026056:	be 01 00 00 00       	mov    esi,0x1
c002605b:	eb db                	jmp    c0026038 <Vm::faultHandler(regs*)+0xa0>
c002605d:	83 fa 6d             	cmp    edx,0x6d
c0026060:	0f 84 34 03 00 00    	je     c002639a <Vm::faultHandler(regs*)+0x402>
c0026066:	77 17                	ja     c002607f <Vm::faultHandler(regs*)+0xe7>
c0026068:	83 fa 67             	cmp    edx,0x67
c002606b:	0f 84 92 01 00 00    	je     c0026203 <Vm::faultHandler(regs*)+0x26b>
c0026071:	83 fa 6c             	cmp    edx,0x6c
c0026074:	0f 84 b1 02 00 00    	je     c002632b <Vm::faultHandler(regs*)+0x393>
c002607a:	e9 d5 05 00 00       	jmp    c0026654 <Vm::faultHandler(regs*)+0x6bc>
c002607f:	83 fa 6f             	cmp    edx,0x6f
c0026082:	0f 84 3d 04 00 00    	je     c00264c5 <Vm::faultHandler(regs*)+0x52d>
c0026088:	0f 82 9f 03 00 00    	jb     c002642d <Vm::faultHandler(regs*)+0x495>
c002608e:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0026094:	0f 84 76 01 00 00    	je     c0026210 <Vm::faultHandler(regs*)+0x278>
c002609a:	e9 b5 05 00 00       	jmp    c0026654 <Vm::faultHandler(regs*)+0x6bc>
c002609f:	81 fa ec 00 00 00    	cmp    edx,0xec
c00260a5:	0f 84 51 05 00 00    	je     c00265fc <Vm::faultHandler(regs*)+0x664>
c00260ab:	0f 87 a9 00 00 00    	ja     c002615a <Vm::faultHandler(regs*)+0x1c2>
c00260b1:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00260b7:	0f 84 d0 04 00 00    	je     c002658d <Vm::faultHandler(regs*)+0x5f5>
c00260bd:	77 78                	ja     c0026137 <Vm::faultHandler(regs*)+0x19f>
c00260bf:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00260c5:	0f 84 0e 02 00 00    	je     c00262d9 <Vm::faultHandler(regs*)+0x341>
c00260cb:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00260d1:	0f 85 7d 05 00 00    	jne    c0026654 <Vm::faultHandler(regs*)+0x6bc>
c00260d7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00260db:	89 d1                	mov    ecx,edx
c00260dd:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00260e0:	c1 e1 08             	shl    ecx,0x8
c00260e3:	09 ca                	or     edx,ecx
c00260e5:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00260e8:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00260ec:	89 d1                	mov    ecx,edx
c00260ee:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00260f2:	c1 e1 08             	shl    ecx,0x8
c00260f5:	09 ca                	or     edx,ecx
c00260f7:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00260fa:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00260fe:	89 d1                	mov    ecx,edx
c0026100:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0026104:	c1 e1 08             	shl    ecx,0x8
c0026107:	09 ca                	or     edx,ecx
c0026109:	81 ca 00 02 02 00    	or     edx,0x20200
c002610f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0026112:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0026116:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c002611c:	d1 e8                	shr    eax,1
c002611e:	83 e0 01             	and    eax,0x1
c0026121:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0026124:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0026127:	83 c0 06             	add    eax,0x6
c002612a:	25 ff ff 00 00       	and    eax,0xffff
c002612f:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0026132:	e9 19 05 00 00       	jmp    c0026650 <Vm::faultHandler(regs*)+0x6b8>
c0026137:	81 fa e6 00 00 00    	cmp    edx,0xe6
c002613d:	0f 84 8f 04 00 00    	je     c00265d2 <Vm::faultHandler(regs*)+0x63a>
c0026143:	0f 82 60 04 00 00    	jb     c00265a9 <Vm::faultHandler(regs*)+0x611>
c0026149:	81 fa e7 00 00 00    	cmp    edx,0xe7
c002614f:	0f 84 94 04 00 00    	je     c00265e9 <Vm::faultHandler(regs*)+0x651>
c0026155:	e9 fa 04 00 00       	jmp    c0026654 <Vm::faultHandler(regs*)+0x6bc>
c002615a:	81 fa ef 00 00 00    	cmp    edx,0xef
c0026160:	0f 84 d7 04 00 00    	je     c002663d <Vm::faultHandler(regs*)+0x6a5>
c0026166:	77 2e                	ja     c0026196 <Vm::faultHandler(regs*)+0x1fe>
c0026168:	81 fa ed 00 00 00    	cmp    edx,0xed
c002616e:	0f 84 a4 04 00 00    	je     c0026618 <Vm::faultHandler(regs*)+0x680>
c0026174:	81 fa ee 00 00 00    	cmp    edx,0xee
c002617a:	0f 85 d4 04 00 00    	jne    c0026654 <Vm::faultHandler(regs*)+0x6bc>
c0026180:	50                   	push   eax
c0026181:	50                   	push   eax
c0026182:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0026186:	50                   	push   eax
c0026187:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c002618b:	50                   	push   eax
c002618c:	e8 17 f9 ff ff       	call   c0025aa8 <Vm::outbv(unsigned short, unsigned char)>
c0026191:	e9 9f 04 00 00       	jmp    c0026635 <Vm::faultHandler(regs*)+0x69d>
c0026196:	81 fa fa 00 00 00    	cmp    edx,0xfa
c002619c:	0f 84 6d 01 00 00    	je     c002630f <Vm::faultHandler(regs*)+0x377>
c00261a2:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00261a8:	0f 84 6f 01 00 00    	je     c002631d <Vm::faultHandler(regs*)+0x385>
c00261ae:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00261b4:	0f 85 9a 04 00 00    	jne    c0026654 <Vm::faultHandler(regs*)+0x6bc>
c00261ba:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00261bd:	e9 76 fe ff ff       	jmp    c0026038 <Vm::faultHandler(regs*)+0xa0>
c00261c2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00261c5:	be 02 00 00 00       	mov    esi,0x2
c00261ca:	e9 69 fe ff ff       	jmp    c0026038 <Vm::faultHandler(regs*)+0xa0>
c00261cf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00261d2:	be 03 00 00 00       	mov    esi,0x3
c00261d7:	e9 5c fe ff ff       	jmp    c0026038 <Vm::faultHandler(regs*)+0xa0>
c00261dc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00261df:	be 04 00 00 00       	mov    esi,0x4
c00261e4:	e9 4f fe ff ff       	jmp    c0026038 <Vm::faultHandler(regs*)+0xa0>
c00261e9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00261ec:	be 05 00 00 00       	mov    esi,0x5
c00261f1:	e9 42 fe ff ff       	jmp    c0026038 <Vm::faultHandler(regs*)+0xa0>
c00261f6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00261f9:	bd 01 00 00 00       	mov    ebp,0x1
c00261fe:	e9 35 fe ff ff       	jmp    c0026038 <Vm::faultHandler(regs*)+0xa0>
c0026203:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026206:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c002620b:	e9 28 fe ff ff       	jmp    c0026038 <Vm::faultHandler(regs*)+0xa0>
c0026210:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0026213:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026217:	83 e5 01             	and    ebp,0x1
c002621a:	74 30                	je     c002624c <Vm::faultHandler(regs*)+0x2b4>
c002621c:	83 e9 04             	sub    ecx,0x4
c002621f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0026225:	81 e1 ff ff 00 00    	and    ecx,0xffff
c002622b:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c002622e:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0026231:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0026237:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c002623b:	0f 84 0c 04 00 00    	je     c002664d <Vm::faultHandler(regs*)+0x6b5>
c0026241:	80 ce 02             	or     dh,0x2
c0026244:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0026247:	e9 01 04 00 00       	jmp    c002664d <Vm::faultHandler(regs*)+0x6b5>
c002624c:	83 e9 02             	sub    ecx,0x2
c002624f:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0026255:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0026258:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c002625c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0026262:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0026266:	74 05                	je     c002626d <Vm::faultHandler(regs*)+0x2d5>
c0026268:	80 ce 02             	or     dh,0x2
c002626b:	eb 03                	jmp    c0026270 <Vm::faultHandler(regs*)+0x2d8>
c002626d:	80 e6 fd             	and    dh,0xfd
c0026270:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0026274:	e9 d4 03 00 00       	jmp    c002664d <Vm::faultHandler(regs*)+0x6b5>
c0026279:	83 e5 01             	and    ebp,0x1
c002627c:	74 2a                	je     c00262a8 <Vm::faultHandler(regs*)+0x310>
c002627e:	8b 10                	mov    edx,DWORD PTR [eax]
c0026280:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0026286:	81 ca 00 02 02 00    	or     edx,0x20200
c002628c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c002628f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026291:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0026297:	c1 e8 09             	shr    eax,0x9
c002629a:	83 e0 01             	and    eax,0x1
c002629d:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00262a0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00262a3:	83 c0 04             	add    eax,0x4
c00262a6:	eb 24                	jmp    c00262cc <Vm::faultHandler(regs*)+0x334>
c00262a8:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00262ab:	81 ca 00 02 02 00    	or     edx,0x20200
c00262b1:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00262b4:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00262b7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00262bd:	c1 e8 09             	shr    eax,0x9
c00262c0:	83 e0 01             	and    eax,0x1
c00262c3:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00262c6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00262c9:	83 c0 02             	add    eax,0x2
c00262cc:	25 ff ff 00 00       	and    eax,0xffff
c00262d1:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00262d4:	e9 74 03 00 00       	jmp    c002664d <Vm::faultHandler(regs*)+0x6b5>
c00262d9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00262dd:	3d ee 00 00 00       	cmp    eax,0xee
c00262e2:	75 10                	jne    c00262f4 <Vm::faultHandler(regs*)+0x35c>
c00262e4:	83 ec 0c             	sub    esp,0xc
c00262e7:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00262ea:	e8 56 f8 ff ff       	call   c0025b45 <Vm::mainloop3(unsigned long)>
c00262ef:	e9 44 03 00 00       	jmp    c0026638 <Vm::faultHandler(regs*)+0x6a0>
c00262f4:	83 ec 0c             	sub    esp,0xc
c00262f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00262fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00262ff:	51                   	push   ecx
c0026300:	50                   	push   eax
c0026301:	53                   	push   ebx
c0026302:	e8 84 fb ff ff       	call   c0025e8b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0026307:	83 c4 20             	add    esp,0x20
c002630a:	e9 41 03 00 00       	jmp    c0026650 <Vm::faultHandler(regs*)+0x6b8>
c002630f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026314:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0026318:	e9 30 03 00 00       	jmp    c002664d <Vm::faultHandler(regs*)+0x6b5>
c002631d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026322:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0026326:	e9 22 03 00 00       	jmp    c002664d <Vm::faultHandler(regs*)+0x6b5>
c002632b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c002632e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0026333:	74 2b                	je     c0026360 <Vm::faultHandler(regs*)+0x3c8>
c0026335:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c002633c:	76 22                	jbe    c0026360 <Vm::faultHandler(regs*)+0x3c8>
c002633e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026342:	50                   	push   eax
c0026343:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026347:	50                   	push   eax
c0026348:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c002634c:	50                   	push   eax
c002634d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026351:	50                   	push   eax
c0026352:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026356:	50                   	push   eax
c0026357:	6a 6c                	push   0x6c
c0026359:	6a 6c                	push   0x6c
c002635b:	e9 bd 01 00 00       	jmp    c002651d <Vm::faultHandler(regs*)+0x585>
c0026360:	83 ec 0c             	sub    esp,0xc
c0026363:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0026367:	0f b7 f6             	movzx  esi,si
c002636a:	50                   	push   eax
c002636b:	e8 25 f7 ff ff       	call   c0025a95 <Vm::inbv(unsigned short)>
c0026370:	83 c4 0c             	add    esp,0xc
c0026373:	0f b6 c0             	movzx  eax,al
c0026376:	50                   	push   eax
c0026377:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c002637b:	50                   	push   eax
c002637c:	56                   	push   esi
c002637d:	e8 d6 fb ff ff       	call   c0025f58 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0026382:	83 c4 10             	add    esp,0x10
c0026385:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026388:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c002638c:	74 03                	je     c0026391 <Vm::faultHandler(regs*)+0x3f9>
c002638e:	48                   	dec    eax
c002638f:	eb 01                	jmp    c0026392 <Vm::faultHandler(regs*)+0x3fa>
c0026391:	40                   	inc    eax
c0026392:	0f b7 c0             	movzx  eax,ax
c0026395:	e9 8b 00 00 00       	jmp    c0026425 <Vm::faultHandler(regs*)+0x48d>
c002639a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c002639d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00263a0:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00263a5:	74 29                	je     c00263d0 <Vm::faultHandler(regs*)+0x438>
c00263a7:	3d ff ff 00 00       	cmp    eax,0xffff
c00263ac:	76 22                	jbe    c00263d0 <Vm::faultHandler(regs*)+0x438>
c00263ae:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00263b2:	50                   	push   eax
c00263b3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00263b7:	50                   	push   eax
c00263b8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00263bc:	50                   	push   eax
c00263bd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00263c1:	50                   	push   eax
c00263c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00263c6:	50                   	push   eax
c00263c7:	6a 6d                	push   0x6d
c00263c9:	6a 6d                	push   0x6d
c00263cb:	e9 4d 01 00 00       	jmp    c002651d <Vm::faultHandler(regs*)+0x585>
c00263d0:	0f b7 c8             	movzx  ecx,ax
c00263d3:	0f b7 f6             	movzx  esi,si
c00263d6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00263d9:	83 e5 01             	and    ebp,0x1
c00263dc:	74 20                	je     c00263fe <Vm::faultHandler(regs*)+0x466>
c00263de:	ed                   	in     eax,dx
c00263df:	55                   	push   ebp
c00263e0:	50                   	push   eax
c00263e1:	51                   	push   ecx
c00263e2:	56                   	push   esi
c00263e3:	e8 9b fb ff ff       	call   c0025f83 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00263e8:	83 c4 10             	add    esp,0x10
c00263eb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00263ee:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00263f2:	74 05                	je     c00263f9 <Vm::faultHandler(regs*)+0x461>
c00263f4:	83 e8 04             	sub    eax,0x4
c00263f7:	eb 27                	jmp    c0026420 <Vm::faultHandler(regs*)+0x488>
c00263f9:	83 c0 04             	add    eax,0x4
c00263fc:	eb 22                	jmp    c0026420 <Vm::faultHandler(regs*)+0x488>
c00263fe:	66 ed                	in     ax,dx
c0026400:	0f b7 c0             	movzx  eax,ax
c0026403:	57                   	push   edi
c0026404:	50                   	push   eax
c0026405:	51                   	push   ecx
c0026406:	56                   	push   esi
c0026407:	e8 61 fb ff ff       	call   c0025f6d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c002640c:	83 c4 10             	add    esp,0x10
c002640f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026412:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0026416:	74 05                	je     c002641d <Vm::faultHandler(regs*)+0x485>
c0026418:	83 e8 02             	sub    eax,0x2
c002641b:	eb 03                	jmp    c0026420 <Vm::faultHandler(regs*)+0x488>
c002641d:	83 c0 02             	add    eax,0x2
c0026420:	25 ff ff 00 00       	and    eax,0xffff
c0026425:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0026428:	e9 20 02 00 00       	jmp    c002664d <Vm::faultHandler(regs*)+0x6b5>
c002642d:	8d 46 ff             	lea    eax,[esi-0x1]
c0026430:	0f b6 f0             	movzx  esi,al
c0026433:	83 fe 05             	cmp    esi,0x5
c0026436:	77 23                	ja     c002645b <Vm::faultHandler(regs*)+0x4c3>
c0026438:	ff 24 b5 08 2f 03 c0 	jmp    DWORD PTR [esi*4-0x3ffcd0f8]
c002643f:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0026444:	eb 15                	jmp    c002645b <Vm::faultHandler(regs*)+0x4c3>
c0026446:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c002644a:	eb 0f                	jmp    c002645b <Vm::faultHandler(regs*)+0x4c3>
c002644c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0026450:	eb 09                	jmp    c002645b <Vm::faultHandler(regs*)+0x4c3>
c0026452:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0026456:	eb 03                	jmp    c002645b <Vm::faultHandler(regs*)+0x4c3>
c0026458:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c002645b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002645e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0026463:	74 29                	je     c002648e <Vm::faultHandler(regs*)+0x4f6>
c0026465:	3d ff ff 00 00       	cmp    eax,0xffff
c002646a:	76 22                	jbe    c002648e <Vm::faultHandler(regs*)+0x4f6>
c002646c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026470:	50                   	push   eax
c0026471:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026475:	50                   	push   eax
c0026476:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c002647a:	50                   	push   eax
c002647b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c002647f:	50                   	push   eax
c0026480:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026484:	50                   	push   eax
c0026485:	6a 6e                	push   0x6e
c0026487:	6a 6e                	push   0x6e
c0026489:	e9 8f 00 00 00       	jmp    c002651d <Vm::faultHandler(regs*)+0x585>
c002648e:	0f b7 c0             	movzx  eax,ax
c0026491:	52                   	push   edx
c0026492:	52                   	push   edx
c0026493:	50                   	push   eax
c0026494:	57                   	push   edi
c0026495:	e8 8a fa ff ff       	call   c0025f24 <Vm::readByteFromReal(unsigned short, unsigned short)>
c002649a:	59                   	pop    ecx
c002649b:	0f b6 c0             	movzx  eax,al
c002649e:	5e                   	pop    esi
c002649f:	50                   	push   eax
c00264a0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00264a4:	50                   	push   eax
c00264a5:	e8 fe f5 ff ff       	call   c0025aa8 <Vm::outbv(unsigned short, unsigned char)>
c00264aa:	83 c4 10             	add    esp,0x10
c00264ad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00264b0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00264b4:	74 03                	je     c00264b9 <Vm::faultHandler(regs*)+0x521>
c00264b6:	48                   	dec    eax
c00264b7:	eb 01                	jmp    c00264ba <Vm::faultHandler(regs*)+0x522>
c00264b9:	40                   	inc    eax
c00264ba:	0f b7 c0             	movzx  eax,ax
c00264bd:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00264c0:	e9 88 01 00 00       	jmp    c002664d <Vm::faultHandler(regs*)+0x6b5>
c00264c5:	8d 46 ff             	lea    eax,[esi-0x1]
c00264c8:	0f b6 f0             	movzx  esi,al
c00264cb:	83 fe 05             	cmp    esi,0x5
c00264ce:	77 1e                	ja     c00264ee <Vm::faultHandler(regs*)+0x556>
c00264d0:	ff 24 b5 20 2f 03 c0 	jmp    DWORD PTR [esi*4-0x3ffcd0e0]
c00264d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00264db:	eb 11                	jmp    c00264ee <Vm::faultHandler(regs*)+0x556>
c00264dd:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00264e0:	eb 0c                	jmp    c00264ee <Vm::faultHandler(regs*)+0x556>
c00264e2:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00264e5:	eb 07                	jmp    c00264ee <Vm::faultHandler(regs*)+0x556>
c00264e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00264ea:	eb 02                	jmp    c00264ee <Vm::faultHandler(regs*)+0x556>
c00264ec:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00264ee:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00264f1:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00264f6:	74 37                	je     c002652f <Vm::faultHandler(regs*)+0x597>
c00264f8:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00264fe:	76 2f                	jbe    c002652f <Vm::faultHandler(regs*)+0x597>
c0026500:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026504:	50                   	push   eax
c0026505:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026509:	50                   	push   eax
c002650a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c002650e:	50                   	push   eax
c002650f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026513:	50                   	push   eax
c0026514:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026518:	50                   	push   eax
c0026519:	6a 6f                	push   0x6f
c002651b:	6a 6f                	push   0x6f
c002651d:	68 ac 2e 03 c0       	push   0xc0032eac
c0026522:	e8 6e 2c ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0026527:	83 c4 20             	add    esp,0x20
c002652a:	e9 83 01 00 00       	jmp    c00266b2 <Vm::faultHandler(regs*)+0x71a>
c002652f:	0f b7 d7             	movzx  edx,di
c0026532:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0026535:	0f b7 c6             	movzx  eax,si
c0026538:	81 e1 00 04 00 00    	and    ecx,0x400
c002653e:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0026541:	83 e5 01             	and    ebp,0x1
c0026544:	74 1d                	je     c0026563 <Vm::faultHandler(regs*)+0x5cb>
c0026546:	55                   	push   ebp
c0026547:	55                   	push   ebp
c0026548:	50                   	push   eax
c0026549:	52                   	push   edx
c002654a:	e8 f8 f9 ff ff       	call   c0025f47 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c002654f:	83 c4 10             	add    esp,0x10
c0026552:	89 fa                	mov    edx,edi
c0026554:	ef                   	out    dx,eax
c0026555:	85 c9                	test   ecx,ecx
c0026557:	74 05                	je     c002655e <Vm::faultHandler(regs*)+0x5c6>
c0026559:	83 ee 04             	sub    esi,0x4
c002655c:	eb 21                	jmp    c002657f <Vm::faultHandler(regs*)+0x5e7>
c002655e:	83 c6 04             	add    esi,0x4
c0026561:	eb 1c                	jmp    c002657f <Vm::faultHandler(regs*)+0x5e7>
c0026563:	55                   	push   ebp
c0026564:	55                   	push   ebp
c0026565:	50                   	push   eax
c0026566:	52                   	push   edx
c0026567:	e8 c9 f9 ff ff       	call   c0025f35 <Vm::readWordFromReal(unsigned short, unsigned short)>
c002656c:	83 c4 10             	add    esp,0x10
c002656f:	89 fa                	mov    edx,edi
c0026571:	66 ef                	out    dx,ax
c0026573:	85 c9                	test   ecx,ecx
c0026575:	74 05                	je     c002657c <Vm::faultHandler(regs*)+0x5e4>
c0026577:	83 ee 02             	sub    esi,0x2
c002657a:	eb 03                	jmp    c002657f <Vm::faultHandler(regs*)+0x5e7>
c002657c:	83 c6 02             	add    esi,0x2
c002657f:	81 e6 ff ff 00 00    	and    esi,0xffff
c0026585:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0026588:	e9 c0 00 00 00       	jmp    c002664d <Vm::faultHandler(regs*)+0x6b5>
c002658d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0026594:	83 ec 0c             	sub    esp,0xc
c0026597:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c002659b:	50                   	push   eax
c002659c:	e8 f4 f4 ff ff       	call   c0025a95 <Vm::inbv(unsigned short)>
c00265a1:	0f b6 c0             	movzx  eax,al
c00265a4:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00265a7:	eb 3a                	jmp    c00265e3 <Vm::faultHandler(regs*)+0x64b>
c00265a9:	83 e5 01             	and    ebp,0x1
c00265ac:	74 07                	je     c00265b5 <Vm::faultHandler(regs*)+0x61d>
c00265ae:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00265b2:	ed                   	in     eax,dx
c00265b3:	eb 14                	jmp    c00265c9 <Vm::faultHandler(regs*)+0x631>
c00265b5:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00265b8:	66 31 f6             	xor    si,si
c00265bb:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00265be:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00265c2:	66 ed                	in     ax,dx
c00265c4:	0f b7 c0             	movzx  eax,ax
c00265c7:	09 f0                	or     eax,esi
c00265c9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00265cc:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00265d0:	eb 7e                	jmp    c0026650 <Vm::faultHandler(regs*)+0x6b8>
c00265d2:	52                   	push   edx
c00265d3:	52                   	push   edx
c00265d4:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00265d8:	50                   	push   eax
c00265d9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00265dd:	50                   	push   eax
c00265de:	e8 c5 f4 ff ff       	call   c0025aa8 <Vm::outbv(unsigned short, unsigned char)>
c00265e3:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00265e7:	eb 4f                	jmp    c0026638 <Vm::faultHandler(regs*)+0x6a0>
c00265e9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00265ec:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00265f0:	83 e5 01             	and    ebp,0x1
c00265f3:	74 03                	je     c00265f8 <Vm::faultHandler(regs*)+0x660>
c00265f5:	ef                   	out    dx,eax
c00265f6:	eb d4                	jmp    c00265cc <Vm::faultHandler(regs*)+0x634>
c00265f8:	66 ef                	out    dx,ax
c00265fa:	eb d0                	jmp    c00265cc <Vm::faultHandler(regs*)+0x634>
c00265fc:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0026603:	83 ec 0c             	sub    esp,0xc
c0026606:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c002660a:	50                   	push   eax
c002660b:	e8 85 f4 ff ff       	call   c0025a95 <Vm::inbv(unsigned short)>
c0026610:	0f b6 c0             	movzx  eax,al
c0026613:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0026616:	eb 1d                	jmp    c0026635 <Vm::faultHandler(regs*)+0x69d>
c0026618:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c002661b:	83 e5 01             	and    ebp,0x1
c002661e:	74 03                	je     c0026623 <Vm::faultHandler(regs*)+0x68b>
c0026620:	ed                   	in     eax,dx
c0026621:	eb 0d                	jmp    c0026630 <Vm::faultHandler(regs*)+0x698>
c0026623:	66 ed                	in     ax,dx
c0026625:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0026628:	0f b7 c0             	movzx  eax,ax
c002662b:	66 31 d2             	xor    dx,dx
c002662e:	09 d0                	or     eax,edx
c0026630:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0026633:	eb 18                	jmp    c002664d <Vm::faultHandler(regs*)+0x6b5>
c0026635:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026638:	83 c4 10             	add    esp,0x10
c002663b:	eb 13                	jmp    c0026650 <Vm::faultHandler(regs*)+0x6b8>
c002663d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0026640:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0026643:	83 e5 01             	and    ebp,0x1
c0026646:	74 03                	je     c002664b <Vm::faultHandler(regs*)+0x6b3>
c0026648:	ef                   	out    dx,eax
c0026649:	eb 02                	jmp    c002664d <Vm::faultHandler(regs*)+0x6b5>
c002664b:	66 ef                	out    dx,ax
c002664d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026650:	b0 01                	mov    al,0x1
c0026652:	eb 60                	jmp    c00266b4 <Vm::faultHandler(regs*)+0x71c>
c0026654:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026658:	50                   	push   eax
c0026659:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c002665d:	50                   	push   eax
c002665e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026662:	50                   	push   eax
c0026663:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026667:	50                   	push   eax
c0026668:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c002666c:	50                   	push   eax
c002666d:	52                   	push   edx
c002666e:	52                   	push   edx
c002666f:	68 d9 2e 03 c0       	push   0xc0032ed9
c0026674:	e8 1c 2b ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0026679:	83 c4 20             	add    esp,0x20
c002667c:	83 ec 0c             	sub    esp,0xc
c002667f:	6a 60                	push   0x60
c0026681:	e8 0f f4 ff ff       	call   c0025a95 <Vm::inbv(unsigned short)>
c0026686:	83 c4 10             	add    esp,0x10
c0026689:	0f b6 d0             	movzx  edx,al
c002668c:	83 fa 1c             	cmp    edx,0x1c
c002668f:	74 05                	je     c0026696 <Vm::faultHandler(regs*)+0x6fe>
c0026691:	83 fa 5a             	cmp    edx,0x5a
c0026694:	75 e6                	jne    c002667c <Vm::faultHandler(regs*)+0x6e4>
c0026696:	0f b6 c0             	movzx  eax,al
c0026699:	83 f8 1c             	cmp    eax,0x1c
c002669c:	74 05                	je     c00266a3 <Vm::faultHandler(regs*)+0x70b>
c002669e:	83 f8 5a             	cmp    eax,0x5a
c00266a1:	75 0f                	jne    c00266b2 <Vm::faultHandler(regs*)+0x71a>
c00266a3:	83 ec 0c             	sub    esp,0xc
c00266a6:	6a 60                	push   0x60
c00266a8:	e8 e8 f3 ff ff       	call   c0025a95 <Vm::inbv(unsigned short)>
c00266ad:	83 c4 10             	add    esp,0x10
c00266b0:	eb e4                	jmp    c0026696 <Vm::faultHandler(regs*)+0x6fe>
c00266b2:	31 c0                	xor    eax,eax
c00266b4:	83 c4 2c             	add    esp,0x2c
c00266b7:	5b                   	pop    ebx
c00266b8:	5e                   	pop    esi
c00266b9:	5f                   	pop    edi
c00266ba:	5d                   	pop    ebp
c00266bb:	c3                   	ret    

c00266bc <noCopro(unsigned long)>:
c00266bc:	c3                   	ret    

c00266bd <nmiHandler(regs*, void*)>:
c00266bd:	83 ec 0c             	sub    esp,0xc
c00266c0:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00266c5:	83 ec 0c             	sub    esp,0xc
c00266c8:	50                   	push   eax
c00266c9:	e8 38 f4 fe ff       	call   c0015b06 <Computer::handleNMI()>
c00266ce:	83 c4 10             	add    esp,0x10
c00266d1:	90                   	nop
c00266d2:	83 c4 0c             	add    esp,0xc
c00266d5:	c3                   	ret    

c00266d6 <doubleFault(regs*, void*)>:
c00266d6:	55                   	push   ebp
c00266d7:	89 e5                	mov    ebp,esp
c00266d9:	83 ec 08             	sub    esp,0x8
c00266dc:	83 ec 0c             	sub    esp,0xc
c00266df:	68 38 2f 03 c0       	push   0xc0032f38
c00266e4:	e8 c5 9a ff ff       	call   c00201ae <KePanic(char const*)>
c00266e9:	83 c4 10             	add    esp,0x10
c00266ec:	90                   	nop
c00266ed:	c9                   	leave  
c00266ee:	c3                   	ret    

c00266ef <displayDebugInfo(regs*)>:
c00266ef:	83 ec 1c             	sub    esp,0x1c
c00266f2:	0f 20 c0             	mov    eax,cr0
c00266f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00266f9:	0f 20 d0             	mov    eax,cr2
c00266fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026700:	0f 20 d8             	mov    eax,cr3
c0026703:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026707:	0f 20 e0             	mov    eax,cr4
c002670a:	89 04 24             	mov    DWORD PTR [esp],eax
c002670d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026711:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0026714:	83 ec 08             	sub    esp,0x8
c0026717:	50                   	push   eax
c0026718:	68 54 2f 03 c0       	push   0xc0032f54
c002671d:	e8 73 2a ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0026722:	83 c4 10             	add    esp,0x10
c0026725:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026729:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c002672c:	83 ec 08             	sub    esp,0x8
c002672f:	50                   	push   eax
c0026730:	68 45 2f 03 c0       	push   0xc0032f45
c0026735:	e8 5b 2a ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c002673a:	83 c4 10             	add    esp,0x10
c002673d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026741:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0026744:	83 ec 08             	sub    esp,0x8
c0026747:	50                   	push   eax
c0026748:	68 50 2f 03 c0       	push   0xc0032f50
c002674d:	e8 43 2a ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0026752:	83 c4 10             	add    esp,0x10
c0026755:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026759:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002675c:	83 ec 08             	sub    esp,0x8
c002675f:	50                   	push   eax
c0026760:	68 5f 2f 03 c0       	push   0xc0032f5f
c0026765:	e8 2b 2a ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c002676a:	83 c4 10             	add    esp,0x10
c002676d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026771:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0026774:	83 ec 08             	sub    esp,0x8
c0026777:	50                   	push   eax
c0026778:	68 6a 2f 03 c0       	push   0xc0032f6a
c002677d:	e8 13 2a ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0026782:	83 c4 10             	add    esp,0x10
c0026785:	83 ec 08             	sub    esp,0x8
c0026788:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002678c:	68 75 2f 03 c0       	push   0xc0032f75
c0026791:	e8 ff 29 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0026796:	83 c4 10             	add    esp,0x10
c0026799:	83 ec 08             	sub    esp,0x8
c002679c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00267a0:	68 80 2f 03 c0       	push   0xc0032f80
c00267a5:	e8 eb 29 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c00267aa:	83 c4 10             	add    esp,0x10
c00267ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00267b1:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00267b4:	c1 e0 05             	shl    eax,0x5
c00267b7:	8d 90 20 43 03 c0    	lea    edx,[eax-0x3ffcbce0]
c00267bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00267c1:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00267c4:	83 ec 04             	sub    esp,0x4
c00267c7:	52                   	push   edx
c00267c8:	50                   	push   eax
c00267c9:	68 8b 2f 03 c0       	push   0xc0032f8b
c00267ce:	e8 c2 29 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c00267d3:	83 c4 10             	add    esp,0x10
c00267d6:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00267db:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00267e1:	83 ec 0c             	sub    esp,0xc
c00267e4:	50                   	push   eax
c00267e5:	e8 bf 07 ff ff       	call   c0016fa9 <setActiveTerminal(VgaText*)>
c00267ea:	83 c4 10             	add    esp,0x10
c00267ed:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00267f2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00267f8:	83 ec 08             	sub    esp,0x8
c00267fb:	68 9a 2f 03 c0       	push   0xc0032f9a
c0026800:	50                   	push   eax
c0026801:	e8 f0 0a ff ff       	call   c00172f6 <VgaText::puts(char const*)>
c0026806:	83 c4 10             	add    esp,0x10
c0026809:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002680e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026814:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026818:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c002681b:	83 ec 08             	sub    esp,0x8
c002681e:	52                   	push   edx
c002681f:	50                   	push   eax
c0026820:	e8 8b 0a ff ff       	call   c00172b0 <VgaText::putx(unsigned int)>
c0026825:	83 c4 10             	add    esp,0x10
c0026828:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002682d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026833:	83 ec 08             	sub    esp,0x8
c0026836:	68 a8 2f 03 c0       	push   0xc0032fa8
c002683b:	50                   	push   eax
c002683c:	e8 b5 0a ff ff       	call   c00172f6 <VgaText::puts(char const*)>
c0026841:	83 c4 10             	add    esp,0x10
c0026844:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026849:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002684f:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0026854:	8b 12                	mov    edx,DWORD PTR [edx]
c0026856:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0026859:	83 c2 0c             	add    edx,0xc
c002685c:	83 ec 08             	sub    esp,0x8
c002685f:	52                   	push   edx
c0026860:	50                   	push   eax
c0026861:	e8 90 0a ff ff       	call   c00172f6 <VgaText::puts(char const*)>
c0026866:	83 c4 10             	add    esp,0x10
c0026869:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002686e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026874:	83 ec 08             	sub    esp,0x8
c0026877:	68 b1 2f 03 c0       	push   0xc0032fb1
c002687c:	50                   	push   eax
c002687d:	e8 74 0a ff ff       	call   c00172f6 <VgaText::puts(char const*)>
c0026882:	83 c4 10             	add    esp,0x10
c0026885:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002688a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026890:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026894:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0026897:	83 ec 08             	sub    esp,0x8
c002689a:	52                   	push   edx
c002689b:	50                   	push   eax
c002689c:	e8 0f 0a ff ff       	call   c00172b0 <VgaText::putx(unsigned int)>
c00268a1:	83 c4 10             	add    esp,0x10
c00268a4:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00268a9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00268af:	83 ec 08             	sub    esp,0x8
c00268b2:	68 b9 2f 03 c0       	push   0xc0032fb9
c00268b7:	50                   	push   eax
c00268b8:	e8 39 0a ff ff       	call   c00172f6 <VgaText::puts(char const*)>
c00268bd:	83 c4 10             	add    esp,0x10
c00268c0:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00268c5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00268cb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00268cf:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00268d2:	83 ec 08             	sub    esp,0x8
c00268d5:	52                   	push   edx
c00268d6:	50                   	push   eax
c00268d7:	e8 d4 09 ff ff       	call   c00172b0 <VgaText::putx(unsigned int)>
c00268dc:	83 c4 10             	add    esp,0x10
c00268df:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00268e4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00268ea:	83 ec 08             	sub    esp,0x8
c00268ed:	68 c1 2f 03 c0       	push   0xc0032fc1
c00268f2:	50                   	push   eax
c00268f3:	e8 fe 09 ff ff       	call   c00172f6 <VgaText::puts(char const*)>
c00268f8:	83 c4 10             	add    esp,0x10
c00268fb:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026900:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026906:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002690a:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c002690d:	83 ec 08             	sub    esp,0x8
c0026910:	52                   	push   edx
c0026911:	50                   	push   eax
c0026912:	e8 99 09 ff ff       	call   c00172b0 <VgaText::putx(unsigned int)>
c0026917:	83 c4 10             	add    esp,0x10
c002691a:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002691f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026925:	83 ec 08             	sub    esp,0x8
c0026928:	68 c9 2f 03 c0       	push   0xc0032fc9
c002692d:	50                   	push   eax
c002692e:	e8 c3 09 ff ff       	call   c00172f6 <VgaText::puts(char const*)>
c0026933:	83 c4 10             	add    esp,0x10
c0026936:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002693b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026941:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026945:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0026948:	83 ec 08             	sub    esp,0x8
c002694b:	52                   	push   edx
c002694c:	50                   	push   eax
c002694d:	e8 5e 09 ff ff       	call   c00172b0 <VgaText::putx(unsigned int)>
c0026952:	83 c4 10             	add    esp,0x10
c0026955:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002695a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026960:	83 ec 08             	sub    esp,0x8
c0026963:	68 d1 2f 03 c0       	push   0xc0032fd1
c0026968:	50                   	push   eax
c0026969:	e8 88 09 ff ff       	call   c00172f6 <VgaText::puts(char const*)>
c002696e:	83 c4 10             	add    esp,0x10
c0026971:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026976:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002697c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026980:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0026983:	83 ec 08             	sub    esp,0x8
c0026986:	52                   	push   edx
c0026987:	50                   	push   eax
c0026988:	e8 23 09 ff ff       	call   c00172b0 <VgaText::putx(unsigned int)>
c002698d:	83 c4 10             	add    esp,0x10
c0026990:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026995:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002699b:	83 ec 08             	sub    esp,0x8
c002699e:	68 d9 2f 03 c0       	push   0xc0032fd9
c00269a3:	50                   	push   eax
c00269a4:	e8 4d 09 ff ff       	call   c00172f6 <VgaText::puts(char const*)>
c00269a9:	83 c4 10             	add    esp,0x10
c00269ac:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00269b1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00269b7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00269bb:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00269be:	83 ec 08             	sub    esp,0x8
c00269c1:	52                   	push   edx
c00269c2:	50                   	push   eax
c00269c3:	e8 e8 08 ff ff       	call   c00172b0 <VgaText::putx(unsigned int)>
c00269c8:	83 c4 10             	add    esp,0x10
c00269cb:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00269d0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00269d6:	83 ec 08             	sub    esp,0x8
c00269d9:	68 e1 2f 03 c0       	push   0xc0032fe1
c00269de:	50                   	push   eax
c00269df:	e8 12 09 ff ff       	call   c00172f6 <VgaText::puts(char const*)>
c00269e4:	83 c4 10             	add    esp,0x10
c00269e7:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00269ec:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00269f2:	83 ec 08             	sub    esp,0x8
c00269f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00269f9:	50                   	push   eax
c00269fa:	e8 b1 08 ff ff       	call   c00172b0 <VgaText::putx(unsigned int)>
c00269ff:	83 c4 10             	add    esp,0x10
c0026a02:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a07:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a0d:	83 ec 08             	sub    esp,0x8
c0026a10:	68 ea 2f 03 c0       	push   0xc0032fea
c0026a15:	50                   	push   eax
c0026a16:	e8 db 08 ff ff       	call   c00172f6 <VgaText::puts(char const*)>
c0026a1b:	83 c4 10             	add    esp,0x10
c0026a1e:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a23:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a29:	83 ec 08             	sub    esp,0x8
c0026a2c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026a30:	50                   	push   eax
c0026a31:	e8 7a 08 ff ff       	call   c00172b0 <VgaText::putx(unsigned int)>
c0026a36:	83 c4 10             	add    esp,0x10
c0026a39:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a3e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a44:	83 ec 08             	sub    esp,0x8
c0026a47:	68 f2 2f 03 c0       	push   0xc0032ff2
c0026a4c:	50                   	push   eax
c0026a4d:	e8 a4 08 ff ff       	call   c00172f6 <VgaText::puts(char const*)>
c0026a52:	83 c4 10             	add    esp,0x10
c0026a55:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a5a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a60:	83 ec 08             	sub    esp,0x8
c0026a63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0026a67:	50                   	push   eax
c0026a68:	e8 43 08 ff ff       	call   c00172b0 <VgaText::putx(unsigned int)>
c0026a6d:	83 c4 10             	add    esp,0x10
c0026a70:	fa                   	cli    
c0026a71:	f4                   	hlt    
c0026a72:	eb fe                	jmp    c0026a72 <displayDebugInfo(regs*)+0x383>

c0026a74 <HalSystemIdle()>:
c0026a74:	56                   	push   esi
c0026a75:	53                   	push   ebx
c0026a76:	83 ec 14             	sub    esp,0x14
c0026a79:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026a7e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026a84:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0026a8a:	83 e0 04             	and    eax,0x4
c0026a8d:	0f b6 c0             	movzx  eax,al
c0026a90:	85 c0                	test   eax,eax
c0026a92:	0f 95 c0             	setne  al
c0026a95:	0f b6 c0             	movzx  eax,al
c0026a98:	85 c0                	test   eax,eax
c0026a9a:	74 4c                	je     c0026ae8 <HalSystemIdle()+0x74>
c0026a9c:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026aa1:	83 ec 08             	sub    esp,0x8
c0026aa4:	68 e1 00 00 00       	push   0xe1
c0026aa9:	50                   	push   eax
c0026aaa:	e8 61 ee fe ff       	call   c0015910 <Computer::rdmsr(unsigned int)>
c0026aaf:	83 c4 10             	add    esp,0x10
c0026ab2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026ab6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026aba:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026abf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0026ac3:	83 e2 02             	and    edx,0x2
c0026ac6:	89 d3                	mov    ebx,edx
c0026ac8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026acc:	83 e2 00             	and    edx,0x0
c0026acf:	89 d6                	mov    esi,edx
c0026ad1:	56                   	push   esi
c0026ad2:	53                   	push   ebx
c0026ad3:	68 e1 00 00 00       	push   0xe1
c0026ad8:	50                   	push   eax
c0026ad9:	e8 5e ee fe ff       	call   c001593c <Computer::wrmsr(unsigned int, unsigned long long)>
c0026ade:	83 c4 10             	add    esp,0x10
c0026ae1:	e8 ae 96 fd ff       	call   c0000194 <doTPAUSE>
c0026ae6:	eb 01                	jmp    c0026ae9 <HalSystemIdle()+0x75>
c0026ae8:	f4                   	hlt    
c0026ae9:	90                   	nop
c0026aea:	83 c4 14             	add    esp,0x14
c0026aed:	5b                   	pop    ebx
c0026aee:	5e                   	pop    esi
c0026aef:	c3                   	ret    

c0026af0 <displayProgramFault(char const*)>:
c0026af0:	83 ec 0c             	sub    esp,0xc
c0026af3:	83 ec 0c             	sub    esp,0xc
c0026af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026afa:	e8 96 26 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0026aff:	83 c4 10             	add    esp,0x10
c0026b02:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026b07:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b09:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026b0c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b12:	85 c0                	test   eax,eax
c0026b14:	74 21                	je     c0026b37 <displayProgramFault(char const*)+0x47>
c0026b16:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026b1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b1d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026b20:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b26:	6a 04                	push   0x4
c0026b28:	6a 0f                	push   0xf
c0026b2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0026b2e:	50                   	push   eax
c0026b2f:	e8 34 08 ff ff       	call   c0017368 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0026b34:	83 c4 10             	add    esp,0x10
c0026b37:	90                   	nop
c0026b38:	83 c4 0c             	add    esp,0xc
c0026b3b:	c3                   	ret    

c0026b3c <gpFault(regs*, void*)>:
c0026b3c:	83 ec 1c             	sub    esp,0x1c
c0026b3f:	c7 05 74 02 04 c0 98 5f 02 c0 	mov    DWORD PTR ds:0xc0040274,0xc0025f98
c0026b49:	a1 74 02 04 c0       	mov    eax,ds:0xc0040274
c0026b4e:	85 c0                	test   eax,eax
c0026b50:	74 1e                	je     c0026b70 <gpFault(regs*, void*)+0x34>
c0026b52:	a1 74 02 04 c0       	mov    eax,ds:0xc0040274
c0026b57:	83 ec 0c             	sub    esp,0xc
c0026b5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026b5e:	ff d0                	call   eax
c0026b60:	83 c4 10             	add    esp,0x10
c0026b63:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0026b67:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0026b6c:	85 c0                	test   eax,eax
c0026b6e:	75 2e                	jne    c0026b9e <gpFault(regs*, void*)+0x62>
c0026b70:	83 ec 0c             	sub    esp,0xc
c0026b73:	68 fa 2f 03 c0       	push   0xc0032ffa
c0026b78:	e8 73 ff ff ff       	call   c0026af0 <displayProgramFault(char const*)>
c0026b7d:	83 c4 10             	add    esp,0x10
c0026b80:	83 ec 0c             	sub    esp,0xc
c0026b83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026b87:	e8 63 fb ff ff       	call   c00266ef <displayDebugInfo(regs*)>
c0026b8c:	83 c4 10             	add    esp,0x10
c0026b8f:	83 ec 0c             	sub    esp,0xc
c0026b92:	6a 00                	push   0x0
c0026b94:	e8 2f ee ff ff       	call   c00259c8 <Thr::terminateFromIRQ(int)>
c0026b99:	83 c4 10             	add    esp,0x10
c0026b9c:	eb 01                	jmp    c0026b9f <gpFault(regs*, void*)+0x63>
c0026b9e:	90                   	nop
c0026b9f:	83 c4 1c             	add    esp,0x1c
c0026ba2:	c3                   	ret    

c0026ba3 <pgFault(regs*, void*)>:
c0026ba3:	83 ec 1c             	sub    esp,0x1c
c0026ba6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026baa:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0026bad:	0f 20 d0             	mov    eax,cr2
c0026bb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026bb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026bb8:	83 ec 04             	sub    esp,0x4
c0026bbb:	52                   	push   edx
c0026bbc:	50                   	push   eax
c0026bbd:	68 d8 30 03 c0       	push   0xc00330d8
c0026bc2:	e8 ce 25 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0026bc7:	83 c4 10             	add    esp,0x10
c0026bca:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026bcf:	8b 00                	mov    eax,DWORD PTR [eax]
c0026bd1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026bd4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0026bda:	0f 20 d2             	mov    edx,cr2
c0026bdd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026be1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026be5:	83 ec 08             	sub    esp,0x8
c0026be8:	52                   	push   edx
c0026be9:	50                   	push   eax
c0026bea:	e8 f1 1f ff ff       	call   c0018be0 <VAS::tryLoadBackOffDisk(unsigned long)>
c0026bef:	83 c4 10             	add    esp,0x10
c0026bf2:	0f b6 c0             	movzx  eax,al
c0026bf5:	85 c0                	test   eax,eax
c0026bf7:	75 2e                	jne    c0026c27 <pgFault(regs*, void*)+0x84>
c0026bf9:	83 ec 0c             	sub    esp,0xc
c0026bfc:	68 13 30 03 c0       	push   0xc0033013
c0026c01:	e8 ea fe ff ff       	call   c0026af0 <displayProgramFault(char const*)>
c0026c06:	83 c4 10             	add    esp,0x10
c0026c09:	83 ec 0c             	sub    esp,0xc
c0026c0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026c10:	e8 da fa ff ff       	call   c00266ef <displayDebugInfo(regs*)>
c0026c15:	83 c4 10             	add    esp,0x10
c0026c18:	83 ec 0c             	sub    esp,0xc
c0026c1b:	6a 00                	push   0x0
c0026c1d:	e8 a6 ed ff ff       	call   c00259c8 <Thr::terminateFromIRQ(int)>
c0026c22:	83 c4 10             	add    esp,0x10
c0026c25:	eb 01                	jmp    c0026c28 <pgFault(regs*, void*)+0x85>
c0026c27:	90                   	nop
c0026c28:	83 c4 1c             	add    esp,0x1c
c0026c2b:	c3                   	ret    

c0026c2c <otherISRHandler(regs*, void*)>:
c0026c2c:	83 ec 0c             	sub    esp,0xc
c0026c2f:	83 ec 0c             	sub    esp,0xc
c0026c32:	68 00 31 03 c0       	push   0xc0033100
c0026c37:	e8 b4 fe ff ff       	call   c0026af0 <displayProgramFault(char const*)>
c0026c3c:	83 c4 10             	add    esp,0x10
c0026c3f:	83 ec 0c             	sub    esp,0xc
c0026c42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026c46:	e8 a4 fa ff ff       	call   c00266ef <displayDebugInfo(regs*)>
c0026c4b:	83 c4 10             	add    esp,0x10
c0026c4e:	83 ec 0c             	sub    esp,0xc
c0026c51:	6a 00                	push   0x0
c0026c53:	e8 70 ed ff ff       	call   c00259c8 <Thr::terminateFromIRQ(int)>
c0026c58:	83 c4 10             	add    esp,0x10
c0026c5b:	90                   	nop
c0026c5c:	83 c4 0c             	add    esp,0xc
c0026c5f:	c3                   	ret    

c0026c60 <opcodeFault(regs*, void*)>:
c0026c60:	55                   	push   ebp
c0026c61:	89 e5                	mov    ebp,esp
c0026c63:	83 ec 08             	sub    esp,0x8
c0026c66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026c69:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026c6c:	83 ec 08             	sub    esp,0x8
c0026c6f:	50                   	push   eax
c0026c70:	68 1e 30 03 c0       	push   0xc003301e
c0026c75:	e8 1b 25 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0026c7a:	83 c4 10             	add    esp,0x10
c0026c7d:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026c82:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026c88:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0026c8e:	0f b6 c0             	movzx  eax,al
c0026c91:	85 c0                	test   eax,eax
c0026c93:	74 21                	je     c0026cb6 <opcodeFault(regs*, void*)+0x56>
c0026c95:	83 ec 0c             	sub    esp,0xc
c0026c98:	68 28 31 03 c0       	push   0xc0033128
c0026c9d:	e8 f3 24 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0026ca2:	83 c4 10             	add    esp,0x10
c0026ca5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026ca8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026cab:	8d 50 19             	lea    edx,[eax+0x19]
c0026cae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026cb1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0026cb4:	eb 2b                	jmp    c0026ce1 <opcodeFault(regs*, void*)+0x81>
c0026cb6:	83 ec 0c             	sub    esp,0xc
c0026cb9:	68 2c 30 03 c0       	push   0xc003302c
c0026cbe:	e8 2d fe ff ff       	call   c0026af0 <displayProgramFault(char const*)>
c0026cc3:	83 c4 10             	add    esp,0x10
c0026cc6:	83 ec 0c             	sub    esp,0xc
c0026cc9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026ccc:	e8 1e fa ff ff       	call   c00266ef <displayDebugInfo(regs*)>
c0026cd1:	83 c4 10             	add    esp,0x10
c0026cd4:	83 ec 0c             	sub    esp,0xc
c0026cd7:	6a 00                	push   0x0
c0026cd9:	e8 ea ec ff ff       	call   c00259c8 <Thr::terminateFromIRQ(int)>
c0026cde:	83 c4 10             	add    esp,0x10
c0026ce1:	c9                   	leave  
c0026ce2:	c3                   	ret    

c0026ce3 <i386SaveCoprocessor(void*)>:
c0026ce3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026ce7:	83 c0 3f             	add    eax,0x3f
c0026cea:	83 e0 c0             	and    eax,0xffffffc0
c0026ced:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026cf1:	ff 25 70 02 04 c0    	jmp    DWORD PTR ds:0xc0040270

c0026cf7 <i386LoadCoprocessor(void*)>:
c0026cf7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026cfb:	83 c0 3f             	add    eax,0x3f
c0026cfe:	83 e0 c0             	and    eax,0xffffffc0
c0026d01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026d05:	ff 25 6c 02 04 c0    	jmp    DWORD PTR ds:0xc004026c

c0026d0b <x87EmulHandler(regs*, void*)>:
c0026d0b:	53                   	push   ebx
c0026d0c:	83 ec 08             	sub    esp,0x8
c0026d0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026d14:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0026d18:	74 10                	je     c0026d2a <x87EmulHandler(regs*, void*)+0x1f>
c0026d1a:	83 ec 0c             	sub    esp,0xc
c0026d1d:	68 39 30 03 c0       	push   0xc0033039
c0026d22:	e8 87 94 ff ff       	call   c00201ae <KePanic(char const*)>
c0026d27:	83 c4 10             	add    esp,0x10
c0026d2a:	0f 20 c0             	mov    eax,cr0
c0026d2d:	a8 08                	test   al,0x8
c0026d2f:	74 59                	je     c0026d8a <x87EmulHandler(regs*, void*)+0x7f>
c0026d31:	0f 06                	clts   
c0026d33:	a1 68 02 04 c0       	mov    eax,ds:0xc0040268
c0026d38:	85 c0                	test   eax,eax
c0026d3a:	74 0e                	je     c0026d4a <x87EmulHandler(regs*, void*)+0x3f>
c0026d3c:	83 ec 0c             	sub    esp,0xc
c0026d3f:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0026d42:	e8 9c ff ff ff       	call   c0026ce3 <i386SaveCoprocessor(void*)>
c0026d47:	83 c4 10             	add    esp,0x10
c0026d4a:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0026d50:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0026d54:	75 12                	jne    c0026d68 <x87EmulHandler(regs*, void*)+0x5d>
c0026d56:	83 ec 0c             	sub    esp,0xc
c0026d59:	68 40 02 00 00       	push   0x240
c0026d5e:	e8 a3 f5 fe ff       	call   c0016306 <malloc>
c0026d63:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0026d66:	eb 10                	jmp    c0026d78 <x87EmulHandler(regs*, void*)+0x6d>
c0026d68:	83 ec 0c             	sub    esp,0xc
c0026d6b:	a1 68 02 04 c0       	mov    eax,ds:0xc0040268
c0026d70:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0026d73:	e8 7f ff ff ff       	call   c0026cf7 <i386LoadCoprocessor(void*)>
c0026d78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026d7d:	83 c4 10             	add    esp,0x10
c0026d80:	a3 68 02 04 c0       	mov    ds:0xc0040268,eax
c0026d85:	83 c4 08             	add    esp,0x8
c0026d88:	5b                   	pop    ebx
c0026d89:	c3                   	ret    
c0026d8a:	83 ec 0c             	sub    esp,0xc
c0026d8d:	68 4d 30 03 c0       	push   0xc003304d
c0026d92:	e8 fe 23 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0026d97:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0026d9f:	83 c4 18             	add    esp,0x18
c0026da2:	5b                   	pop    ebx
c0026da3:	e9 20 ec ff ff       	jmp    c00259c8 <Thr::terminateFromIRQ(int)>

c0026da8 <HalInitialiseCoprocessor()>:
c0026da8:	83 ec 10             	sub    esp,0x10
c0026dab:	c7 05 68 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040268,0x0
c0026db5:	6a 00                	push   0x0
c0026db7:	68 0b 6d 02 c0       	push   0xc0026d0b
c0026dbc:	6a 07                	push   0x7
c0026dbe:	e8 9f 49 ff ff       	call   c001b762 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026dc3:	e8 a8 70 00 00       	call   c002de70 <avxDetect>
c0026dc8:	83 c4 10             	add    esp,0x10
c0026dcb:	85 c0                	test   eax,eax
c0026dcd:	74 1c                	je     c0026deb <HalInitialiseCoprocessor()+0x43>
c0026dcf:	c7 05 70 02 04 c0 9a de 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002de9a
c0026dd9:	c7 05 6c 02 04 c0 ab de 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002deab
c0026de3:	83 c4 0c             	add    esp,0xc
c0026de6:	e9 d1 70 00 00       	jmp    c002debc <avxInit>
c0026deb:	e8 f0 73 00 00       	call   c002e1e0 <sseDetect>
c0026df0:	85 c0                	test   eax,eax
c0026df2:	74 1c                	je     c0026e10 <HalInitialiseCoprocessor()+0x68>
c0026df4:	c7 05 70 02 04 c0 f8 e1 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e1f8
c0026dfe:	c7 05 6c 02 04 c0 00 e2 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e200
c0026e08:	83 c4 0c             	add    esp,0xc
c0026e0b:	e9 f8 73 00 00       	jmp    c002e208 <sseInit>
c0026e10:	e8 11 74 00 00       	call   c002e226 <x87Detect>
c0026e15:	85 c0                	test   eax,eax
c0026e17:	74 1c                	je     c0026e35 <HalInitialiseCoprocessor()+0x8d>
c0026e19:	c7 05 70 02 04 c0 41 e2 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e241
c0026e23:	c7 05 6c 02 04 c0 48 e2 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e248
c0026e2d:	83 c4 0c             	add    esp,0xc
c0026e30:	e9 1a 74 00 00       	jmp    c002e24f <x87Init>
c0026e35:	c7 05 70 02 04 c0 bc 66 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc00266bc
c0026e3f:	c7 05 6c 02 04 c0 bc 66 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc00266bc
c0026e49:	0f 20 c0             	mov    eax,cr0
c0026e4c:	83 c8 04             	or     eax,0x4
c0026e4f:	0f 22 c0             	mov    cr0,eax
c0026e52:	83 c4 0c             	add    esp,0xc
c0026e55:	c3                   	ret    

c0026e56 <HalPanic(char const*)>:
c0026e56:	53                   	push   ebx
c0026e57:	83 ec 10             	sub    esp,0x10
c0026e5a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026e5e:	fa                   	cli    
c0026e5f:	53                   	push   ebx
c0026e60:	68 63 30 03 c0       	push   0xc0033063
c0026e65:	e8 2b 23 ff ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0026e6a:	a1 64 02 04 c0       	mov    eax,ds:0xc0040264
c0026e6f:	83 c4 10             	add    esp,0x10
c0026e72:	85 c0                	test   eax,eax
c0026e74:	74 09                	je     c0026e7f <HalPanic(char const*)+0x29>
c0026e76:	83 ec 0c             	sub    esp,0xc
c0026e79:	53                   	push   ebx
c0026e7a:	ff d0                	call   eax
c0026e7c:	83 c4 10             	add    esp,0x10
c0026e7f:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c0026e84:	85 c0                	test   eax,eax
c0026e86:	0f 84 dc 00 00 00    	je     c0026f68 <HalPanic(char const*)+0x112>
c0026e8c:	52                   	push   edx
c0026e8d:	6a 01                	push   0x1
c0026e8f:	6a 0f                	push   0xf
c0026e91:	50                   	push   eax
c0026e92:	e8 6d ff fe ff       	call   c0016e04 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0026e97:	59                   	pop    ecx
c0026e98:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026e9e:	e8 51 01 ff ff       	call   c0016ff4 <VgaText::clearScreen()>
c0026ea3:	58                   	pop    eax
c0026ea4:	5a                   	pop    edx
c0026ea5:	68 34 11 03 c0       	push   0xc0031134
c0026eaa:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026eb0:	e8 87 ff fe ff       	call   c0016e3c <VgaText::setTitle(char*)>
c0026eb5:	83 c4 0c             	add    esp,0xc
c0026eb8:	6a 01                	push   0x1
c0026eba:	6a 0f                	push   0xf
c0026ebc:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026ec2:	e8 3d ff fe ff       	call   c0016e04 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0026ec7:	59                   	pop    ecx
c0026ec8:	58                   	pop    eax
c0026ec9:	68 7c 30 03 c0       	push   0xc003307c
c0026ece:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026ed4:	e8 1d 04 ff ff       	call   c00172f6 <VgaText::puts(char const*)>
c0026ed9:	83 c4 0c             	add    esp,0xc
c0026edc:	6a 0f                	push   0xf
c0026ede:	6a 01                	push   0x1
c0026ee0:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026ee6:	e8 19 ff fe ff       	call   c0016e04 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0026eeb:	58                   	pop    eax
c0026eec:	5a                   	pop    edx
c0026eed:	68 85 30 03 c0       	push   0xc0033085
c0026ef2:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026ef8:	e8 f9 03 ff ff       	call   c00172f6 <VgaText::puts(char const*)>
c0026efd:	83 c4 0c             	add    esp,0xc
c0026f00:	6a 01                	push   0x1
c0026f02:	6a 0f                	push   0xf
c0026f04:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f0a:	e8 f5 fe fe ff       	call   c0016e04 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0026f0f:	59                   	pop    ecx
c0026f10:	58                   	pop    eax
c0026f11:	68 c9 30 03 c0       	push   0xc00330c9
c0026f16:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f1c:	e8 d5 03 ff ff       	call   c00172f6 <VgaText::puts(char const*)>
c0026f21:	58                   	pop    eax
c0026f22:	5a                   	pop    edx
c0026f23:	68 92 30 03 c0       	push   0xc0033092
c0026f28:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f2e:	e8 c3 03 ff ff       	call   c00172f6 <VgaText::puts(char const*)>
c0026f33:	59                   	pop    ecx
c0026f34:	58                   	pop    eax
c0026f35:	68 cc 30 03 c0       	push   0xc00330cc
c0026f3a:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f40:	e8 b1 03 ff ff       	call   c00172f6 <VgaText::puts(char const*)>
c0026f45:	58                   	pop    eax
c0026f46:	5a                   	pop    edx
c0026f47:	53                   	push   ebx
c0026f48:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f4e:	e8 a3 03 ff ff       	call   c00172f6 <VgaText::puts(char const*)>
c0026f53:	59                   	pop    ecx
c0026f54:	5b                   	pop    ebx
c0026f55:	68 c9 30 03 c0       	push   0xc00330c9
c0026f5a:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f60:	e8 91 03 ff ff       	call   c00172f6 <VgaText::puts(char const*)>
c0026f65:	83 c4 10             	add    esp,0x10
c0026f68:	eb fe                	jmp    c0026f68 <HalPanic(char const*)+0x112>

c0026f6a <HalQueryPerformanceCounter()>:
c0026f6a:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026f6f:	31 d2                	xor    edx,edx
c0026f71:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0026f77:	31 c0                	xor    eax,eax
c0026f79:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0026f80:	74 02                	je     c0026f84 <HalQueryPerformanceCounter()+0x1a>
c0026f82:	0f 31                	rdtsc  
c0026f84:	c3                   	ret    

c0026f85 <HalInitialise()>:
c0026f85:	53                   	push   ebx
c0026f86:	83 ec 08             	sub    esp,0x8
c0026f89:	e8 04 4a ff ff       	call   c001b992 <setupINTS()>
c0026f8e:	80 3d e0 f6 03 c0 00 	cmp    BYTE PTR ds:0xc003f6e0,0x0
c0026f95:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026f9a:	75 0f                	jne    c0026fab <HalInitialise()+0x26>
c0026f9c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0026fa2:	83 e2 fe             	and    edx,0xfffffffe
c0026fa5:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0026fab:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0026fb1:	c6 05 60 02 04 c0 00 	mov    BYTE PTR ds:0xc0040260,0x0
c0026fb8:	83 e2 fe             	and    edx,0xfffffffe
c0026fbb:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0026fc1:	e8 9e 02 00 00       	call   c0027264 <picOpen()>
c0026fc6:	80 3d 60 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040260,0x0
c0026fcd:	74 0a                	je     c0026fd9 <HalInitialise()+0x54>
c0026fcf:	e8 e0 01 00 00       	call   c00271b4 <picDisable()>
c0026fd4:	e8 03 68 00 00       	call   c002d7dc <apicOpen()>
c0026fd9:	bb 0f 00 00 00       	mov    ebx,0xf
c0026fde:	50                   	push   eax
c0026fdf:	6a 00                	push   0x0
c0026fe1:	68 2c 6c 02 c0       	push   0xc0026c2c
c0026fe6:	6a 00                	push   0x0
c0026fe8:	e8 75 47 ff ff       	call   c001b762 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026fed:	83 c4 0c             	add    esp,0xc
c0026ff0:	6a 00                	push   0x0
c0026ff2:	68 2c 6c 02 c0       	push   0xc0026c2c
c0026ff7:	6a 01                	push   0x1
c0026ff9:	e8 64 47 ff ff       	call   c001b762 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026ffe:	83 c4 0c             	add    esp,0xc
c0027001:	6a 00                	push   0x0
c0027003:	68 bd 66 02 c0       	push   0xc00266bd
c0027008:	6a 02                	push   0x2
c002700a:	e8 53 47 ff ff       	call   c001b762 <installISRHandler(int, void (*)(regs*, void*), void*)>
c002700f:	83 c4 0c             	add    esp,0xc
c0027012:	6a 00                	push   0x0
c0027014:	68 2c 6c 02 c0       	push   0xc0026c2c
c0027019:	6a 03                	push   0x3
c002701b:	e8 42 47 ff ff       	call   c001b762 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027020:	83 c4 0c             	add    esp,0xc
c0027023:	6a 00                	push   0x0
c0027025:	68 2c 6c 02 c0       	push   0xc0026c2c
c002702a:	6a 04                	push   0x4
c002702c:	e8 31 47 ff ff       	call   c001b762 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027031:	83 c4 0c             	add    esp,0xc
c0027034:	6a 00                	push   0x0
c0027036:	68 2c 6c 02 c0       	push   0xc0026c2c
c002703b:	6a 05                	push   0x5
c002703d:	e8 20 47 ff ff       	call   c001b762 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027042:	83 c4 0c             	add    esp,0xc
c0027045:	6a 00                	push   0x0
c0027047:	68 60 6c 02 c0       	push   0xc0026c60
c002704c:	6a 06                	push   0x6
c002704e:	e8 0f 47 ff ff       	call   c001b762 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027053:	83 c4 0c             	add    esp,0xc
c0027056:	6a 00                	push   0x0
c0027058:	68 d6 66 02 c0       	push   0xc00266d6
c002705d:	6a 08                	push   0x8
c002705f:	e8 fe 46 ff ff       	call   c001b762 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027064:	83 c4 0c             	add    esp,0xc
c0027067:	6a 00                	push   0x0
c0027069:	68 2c 6c 02 c0       	push   0xc0026c2c
c002706e:	6a 09                	push   0x9
c0027070:	e8 ed 46 ff ff       	call   c001b762 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027075:	83 c4 0c             	add    esp,0xc
c0027078:	6a 00                	push   0x0
c002707a:	68 2c 6c 02 c0       	push   0xc0026c2c
c002707f:	6a 0a                	push   0xa
c0027081:	e8 dc 46 ff ff       	call   c001b762 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027086:	83 c4 0c             	add    esp,0xc
c0027089:	6a 00                	push   0x0
c002708b:	68 2c 6c 02 c0       	push   0xc0026c2c
c0027090:	6a 0b                	push   0xb
c0027092:	e8 cb 46 ff ff       	call   c001b762 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027097:	83 c4 0c             	add    esp,0xc
c002709a:	6a 00                	push   0x0
c002709c:	68 3c 6b 02 c0       	push   0xc0026b3c
c00270a1:	6a 0d                	push   0xd
c00270a3:	e8 ba 46 ff ff       	call   c001b762 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00270a8:	83 c4 0c             	add    esp,0xc
c00270ab:	6a 00                	push   0x0
c00270ad:	68 a3 6b 02 c0       	push   0xc0026ba3
c00270b2:	6a 0e                	push   0xe
c00270b4:	e8 a9 46 ff ff       	call   c001b762 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00270b9:	83 c4 10             	add    esp,0x10
c00270bc:	50                   	push   eax
c00270bd:	6a 00                	push   0x0
c00270bf:	68 2c 6c 02 c0       	push   0xc0026c2c
c00270c4:	53                   	push   ebx
c00270c5:	43                   	inc    ebx
c00270c6:	e8 97 46 ff ff       	call   c001b762 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00270cb:	83 c4 10             	add    esp,0x10
c00270ce:	83 fb 1e             	cmp    ebx,0x1e
c00270d1:	75 e9                	jne    c00270bc <HalInitialise()+0x137>
c00270d3:	50                   	push   eax
c00270d4:	6a 00                	push   0x0
c00270d6:	68 5d 1a 02 c0       	push   0xc0021a5d
c00270db:	6a 60                	push   0x60
c00270dd:	e8 80 46 ff ff       	call   c001b762 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00270e2:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00270e7:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00270f1:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00270f8:	e8 09 f2 fe ff       	call   c0016306 <malloc>
c00270fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0027100:	89 c3                	mov    ebx,eax
c0027102:	e8 3b 09 00 00       	call   c0027a42 <RTC::RTC()>
c0027107:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0027111:	5a                   	pop    edx
c0027112:	59                   	pop    ecx
c0027113:	53                   	push   ebx
c0027114:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002711a:	e8 f7 40 ff ff       	call   c001b216 <Device::addChild(Device*)>
c002711f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0027121:	6a 00                	push   0x0
c0027123:	6a 00                	push   0x0
c0027125:	6a 00                	push   0x0
c0027127:	53                   	push   ebx
c0027128:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002712b:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027130:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0027136:	83 c4 28             	add    esp,0x28
c0027139:	5b                   	pop    ebx
c002713a:	c3                   	ret    

c002713b <HalMakeBeep(int)>:
c002713b:	53                   	push   ebx
c002713c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0027140:	85 db                	test   ebx,ebx
c0027142:	75 07                	jne    c002714b <HalMakeBeep(int)+0x10>
c0027144:	e4 61                	in     al,0x61
c0027146:	83 e0 fc             	and    eax,0xfffffffc
c0027149:	eb 26                	jmp    c0027171 <HalMakeBeep(int)+0x36>
c002714b:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0027150:	99                   	cdq    
c0027151:	f7 fb                	idiv   ebx
c0027153:	89 c1                	mov    ecx,eax
c0027155:	b0 b6                	mov    al,0xb6
c0027157:	e6 43                	out    0x43,al
c0027159:	88 c8                	mov    al,cl
c002715b:	e6 42                	out    0x42,al
c002715d:	89 c8                	mov    eax,ecx
c002715f:	c1 e8 08             	shr    eax,0x8
c0027162:	e6 42                	out    0x42,al
c0027164:	e4 61                	in     al,0x61
c0027166:	89 c2                	mov    edx,eax
c0027168:	83 ca 03             	or     edx,0x3
c002716b:	38 d0                	cmp    al,dl
c002716d:	74 04                	je     c0027173 <HalMakeBeep(int)+0x38>
c002716f:	88 d0                	mov    al,dl
c0027171:	e6 61                	out    0x61,al
c0027173:	5b                   	pop    ebx
c0027174:	c3                   	ret    

c0027175 <HalGetRand()>:
c0027175:	31 c0                	xor    eax,eax
c0027177:	c3                   	ret    

c0027178 <HalEndOfInterrupt(int)>:
c0027178:	80 3d 60 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040260,0x0
c002717f:	74 23                	je     c00271a4 <HalEndOfInterrupt(int)+0x2c>
c0027181:	83 ec 14             	sub    esp,0x14
c0027184:	6a 1b                	push   0x1b
c0027186:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002718c:	e8 7f e7 fe ff       	call   c0015910 <Computer::rdmsr(unsigned int)>
c0027191:	25 00 f0 ff ff       	and    eax,0xfffff000
c0027196:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00271a0:	83 c4 1c             	add    esp,0x1c
c00271a3:	c3                   	ret    
c00271a4:	e9 3f 02 00 00       	jmp    c00273e8 <picEOI(int)>

c00271a9 <HalRestart()>:
c00271a9:	c3                   	ret    

c00271aa <HalShutdown()>:
c00271aa:	c3                   	ret    

c00271ab <HalSleep()>:
c00271ab:	c3                   	ret    

c00271ac <picIoWait()>:
c00271ac:	eb 00                	jmp    c00271ae <picIoWait()+0x2>
c00271ae:	eb 00                	jmp    c00271b0 <picIoWait()+0x4>
c00271b0:	90                   	nop
c00271b1:	c3                   	ret    
c00271b2:	66 90                	xchg   ax,ax

c00271b4 <picDisable()>:
c00271b4:	83 ec 10             	sub    esp,0x10
c00271b7:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00271be:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00271c3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00271c7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00271cc:	ee                   	out    dx,al
c00271cd:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00271d4:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00271d9:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00271dd:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00271e2:	ee                   	out    dx,al
c00271e3:	90                   	nop
c00271e4:	83 c4 10             	add    esp,0x10
c00271e7:	c3                   	ret    

c00271e8 <picGetIRQReg(int)>:
c00271e8:	83 ec 10             	sub    esp,0x10
c00271eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00271ef:	0f b6 c0             	movzx  eax,al
c00271f2:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00271f9:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00271fd:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0027201:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0027206:	ee                   	out    dx,al
c0027207:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002720b:	0f b6 c0             	movzx  eax,al
c002720e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0027215:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0027219:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002721d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0027222:	ee                   	out    dx,al
c0027223:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c002722a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c002722f:	89 c2                	mov    edx,eax
c0027231:	ec                   	in     al,dx
c0027232:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0027236:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002723a:	0f b6 c0             	movzx  eax,al
c002723d:	c1 e0 08             	shl    eax,0x8
c0027240:	89 c1                	mov    ecx,eax
c0027242:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0027249:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c002724e:	89 c2                	mov    edx,eax
c0027250:	ec                   	in     al,dx
c0027251:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0027255:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0027259:	0f b6 c0             	movzx  eax,al
c002725c:	09 c8                	or     eax,ecx
c002725e:	83 c4 10             	add    esp,0x10
c0027261:	c3                   	ret    
c0027262:	66 90                	xchg   ax,ax

c0027264 <picOpen()>:
c0027264:	83 ec 50             	sub    esp,0x50
c0027267:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c002726e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0027273:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0027277:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002727b:	ee                   	out    dx,al
c002727c:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0027283:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0027288:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c002728c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027290:	ee                   	out    dx,al
c0027291:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0027299:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00272a1:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00272a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00272ac:	89 c2                	mov    edx,eax
c00272ae:	ec                   	in     al,dx
c00272af:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00272b3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00272b7:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00272bb:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00272c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00272c6:	89 c2                	mov    edx,eax
c00272c8:	ec                   	in     al,dx
c00272c9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00272cd:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00272d1:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00272d5:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00272dc:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00272e1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00272e5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00272e9:	ee                   	out    dx,al
c00272ea:	e8 bd fe ff ff       	call   c00271ac <picIoWait()>
c00272ef:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00272f6:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00272fb:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00272ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0027303:	ee                   	out    dx,al
c0027304:	e8 a3 fe ff ff       	call   c00271ac <picIoWait()>
c0027309:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002730d:	0f b6 c0             	movzx  eax,al
c0027310:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0027317:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c002731b:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c002731f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027323:	ee                   	out    dx,al
c0027324:	e8 83 fe ff ff       	call   c00271ac <picIoWait()>
c0027329:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002732d:	0f b6 c0             	movzx  eax,al
c0027330:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0027337:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c002733b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c002733f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0027343:	ee                   	out    dx,al
c0027344:	e8 63 fe ff ff       	call   c00271ac <picIoWait()>
c0027349:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0027350:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0027355:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0027359:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002735d:	ee                   	out    dx,al
c002735e:	e8 49 fe ff ff       	call   c00271ac <picIoWait()>
c0027363:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c002736a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c002736f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0027373:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0027377:	ee                   	out    dx,al
c0027378:	e8 2f fe ff ff       	call   c00271ac <picIoWait()>
c002737d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0027384:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0027389:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c002738d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0027391:	ee                   	out    dx,al
c0027392:	e8 15 fe ff ff       	call   c00271ac <picIoWait()>
c0027397:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c002739e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00273a3:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00273a7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00273ab:	ee                   	out    dx,al
c00273ac:	e8 fb fd ff ff       	call   c00271ac <picIoWait()>
c00273b1:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00273b6:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00273bd:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00273c1:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00273c5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00273c9:	ee                   	out    dx,al
c00273ca:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00273cf:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00273d6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00273da:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00273de:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00273e2:	ee                   	out    dx,al
c00273e3:	90                   	nop
c00273e4:	83 c4 50             	add    esp,0x50
c00273e7:	c3                   	ret    

c00273e8 <picEOI(int)>:
c00273e8:	83 ec 10             	sub    esp,0x10
c00273eb:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00273f0:	75 1e                	jne    c0027410 <picEOI(int)+0x28>
c00273f2:	6a 0b                	push   0xb
c00273f4:	e8 ef fd ff ff       	call   c00271e8 <picGetIRQReg(int)>
c00273f9:	83 c4 04             	add    esp,0x4
c00273fc:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0027401:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0027406:	25 80 00 00 00       	and    eax,0x80
c002740b:	74 73                	je     c0027480 <picEOI(int)+0x98>
c002740d:	8d 76 00             	lea    esi,[esi+0x0]
c0027410:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0027415:	75 31                	jne    c0027448 <picEOI(int)+0x60>
c0027417:	6a 0b                	push   0xb
c0027419:	e8 ca fd ff ff       	call   c00271e8 <picGetIRQReg(int)>
c002741e:	83 c4 04             	add    esp,0x4
c0027421:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0027426:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002742a:	98                   	cwde   
c002742b:	85 c0                	test   eax,eax
c002742d:	78 19                	js     c0027448 <picEOI(int)+0x60>
c002742f:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0027436:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c002743b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002743f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0027444:	ee                   	out    dx,al
c0027445:	eb 3d                	jmp    c0027484 <picEOI(int)+0x9c>
c0027447:	90                   	nop
c0027448:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c002744d:	7e 19                	jle    c0027468 <picEOI(int)+0x80>
c002744f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0027456:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c002745b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002745f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0027464:	ee                   	out    dx,al
c0027465:	8d 76 00             	lea    esi,[esi+0x0]
c0027468:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c002746f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0027474:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0027478:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002747d:	ee                   	out    dx,al
c002747e:	eb 04                	jmp    c0027484 <picEOI(int)+0x9c>
c0027480:	90                   	nop
c0027481:	8d 76 00             	lea    esi,[esi+0x0]
c0027484:	83 c4 10             	add    esp,0x10
c0027487:	c3                   	ret    

c0027488 <RTC::open(int, int, void*)>:
c0027488:	31 c0                	xor    eax,eax
c002748a:	c3                   	ret    
c002748b:	90                   	nop

c002748c <RTC::close(int, int, void*)>:
c002748c:	31 c0                	xor    eax,eax
c002748e:	c3                   	ret    
c002748f:	90                   	nop

c0027490 <RTC::timeInSecondsUTC()>:
c0027490:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027494:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002749a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00274a0:	c3                   	ret    
c00274a1:	90                   	nop

c00274a2 <RTC::timeInDatetimeUTC()>:
c00274a2:	53                   	push   ebx
c00274a3:	83 ec 14             	sub    esp,0x14
c00274a6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00274aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00274ae:	8b 10                	mov    edx,DWORD PTR [eax]
c00274b0:	50                   	push   eax
c00274b1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00274b4:	83 c4 0c             	add    esp,0xc
c00274b7:	52                   	push   edx
c00274b8:	50                   	push   eax
c00274b9:	53                   	push   ebx
c00274ba:	e8 cb 3a ff ff       	call   c001af8a <secondsToDatetime(unsigned long long)>
c00274bf:	89 d8                	mov    eax,ebx
c00274c1:	83 c4 14             	add    esp,0x14
c00274c4:	5b                   	pop    ebx
c00274c5:	c2 04 00             	ret    0x4

c00274c8 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00274c8:	56                   	push   esi
c00274c9:	53                   	push   ebx
c00274ca:	83 ec 14             	sub    esp,0x14
c00274cd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00274d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00274d3:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00274d6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00274da:	52                   	push   edx
c00274db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00274df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00274e3:	50                   	push   eax
c00274e4:	e8 a1 3a ff ff       	call   c001af8a <secondsToDatetime(unsigned long long)>
c00274e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00274ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00274f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00274f5:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00274f9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00274fd:	89 f0                	mov    eax,esi
c00274ff:	83 c4 20             	add    esp,0x20
c0027502:	5b                   	pop    ebx
c0027503:	5e                   	pop    esi
c0027504:	ff e0                	jmp    eax

c0027506 <RTC::~RTC()>:
c0027506:	83 ec 0c             	sub    esp,0xc
c0027509:	ba 68 31 03 c0       	mov    edx,0xc0033168
c002750e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027512:	89 10                	mov    DWORD PTR [eax],edx
c0027514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027518:	83 ec 0c             	sub    esp,0xc
c002751b:	50                   	push   eax
c002751c:	e8 fb 37 ff ff       	call   c001ad1c <Clock::~Clock()>
c0027521:	83 c4 10             	add    esp,0x10
c0027524:	90                   	nop
c0027525:	83 c4 0c             	add    esp,0xc
c0027528:	c3                   	ret    
c0027529:	90                   	nop

c002752a <RTC::~RTC()>:
c002752a:	83 ec 0c             	sub    esp,0xc
c002752d:	83 ec 0c             	sub    esp,0xc
c0027530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027534:	e8 cd ff ff ff       	call   c0027506 <RTC::~RTC()>
c0027539:	83 c4 10             	add    esp,0x10
c002753c:	83 ec 08             	sub    esp,0x8
c002753f:	68 60 01 00 00       	push   0x160
c0027544:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027548:	e8 1b 1b ff ff       	call   c0019068 <operator delete(void*, unsigned long)>
c002754d:	83 c4 10             	add    esp,0x10
c0027550:	83 c4 0c             	add    esp,0xc
c0027553:	c3                   	ret    

c0027554 <RTC::get_update_in_progress_flag()>:
c0027554:	83 ec 14             	sub    esp,0x14
c0027557:	6a 0a                	push   0xa
c0027559:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002755f:	e8 64 e4 fe ff       	call   c00159c8 <Computer::readCMOS(unsigned char)>
c0027564:	83 c4 1c             	add    esp,0x1c
c0027567:	0f b6 c0             	movzx  eax,al
c002756a:	c1 e8 07             	shr    eax,0x7
c002756d:	c3                   	ret    

c002756e <RTC::completeRTCRefresh()>:
c002756e:	55                   	push   ebp
c002756f:	57                   	push   edi
c0027570:	56                   	push   esi
c0027571:	53                   	push   ebx
c0027572:	83 ec 3c             	sub    esp,0x3c
c0027575:	8b 1d ec f3 03 c0    	mov    ebx,DWORD PTR ds:0xc003f3ec
c002757b:	83 ec 0c             	sub    esp,0xc
c002757e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0027582:	e8 cd ff ff ff       	call   c0027554 <RTC::get_update_in_progress_flag()>
c0027587:	83 c4 10             	add    esp,0x10
c002758a:	84 c0                	test   al,al
c002758c:	74 0e                	je     c002759c <RTC::completeRTCRefresh()+0x2e>
c002758e:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0027594:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c002759a:	73 df                	jae    c002757b <RTC::completeRTCRefresh()+0xd>
c002759c:	51                   	push   ecx
c002759d:	51                   	push   ecx
c002759e:	6a 00                	push   0x0
c00275a0:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00275a6:	e8 1d e4 fe ff       	call   c00159c8 <Computer::readCMOS(unsigned char)>
c00275ab:	5b                   	pop    ebx
c00275ac:	89 c7                	mov    edi,eax
c00275ae:	5e                   	pop    esi
c00275af:	6a 02                	push   0x2
c00275b1:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00275b7:	e8 0c e4 fe ff       	call   c00159c8 <Computer::readCMOS(unsigned char)>
c00275bc:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00275c0:	5d                   	pop    ebp
c00275c1:	58                   	pop    eax
c00275c2:	6a 04                	push   0x4
c00275c4:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00275ca:	e8 f9 e3 fe ff       	call   c00159c8 <Computer::readCMOS(unsigned char)>
c00275cf:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00275d3:	58                   	pop    eax
c00275d4:	5a                   	pop    edx
c00275d5:	6a 07                	push   0x7
c00275d7:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00275dd:	e8 e6 e3 fe ff       	call   c00159c8 <Computer::readCMOS(unsigned char)>
c00275e2:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00275e6:	59                   	pop    ecx
c00275e7:	5b                   	pop    ebx
c00275e8:	6a 08                	push   0x8
c00275ea:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00275f0:	e8 d3 e3 fe ff       	call   c00159c8 <Computer::readCMOS(unsigned char)>
c00275f5:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00275f9:	5e                   	pop    esi
c00275fa:	5d                   	pop    ebp
c00275fb:	6a 09                	push   0x9
c00275fd:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027603:	e8 c0 e3 fe ff       	call   c00159c8 <Computer::readCMOS(unsigned char)>
c0027608:	0f b6 c0             	movzx  eax,al
c002760b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c002760f:	83 c4 10             	add    esp,0x10
c0027612:	8b 1d ec f3 03 c0    	mov    ebx,DWORD PTR ds:0xc003f3ec
c0027618:	83 ec 0c             	sub    esp,0xc
c002761b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002761f:	e8 30 ff ff ff       	call   c0027554 <RTC::get_update_in_progress_flag()>
c0027624:	83 c4 10             	add    esp,0x10
c0027627:	84 c0                	test   al,al
c0027629:	74 0e                	je     c0027639 <RTC::completeRTCRefresh()+0xcb>
c002762b:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0027631:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c0027637:	73 df                	jae    c0027618 <RTC::completeRTCRefresh()+0xaa>
c0027639:	51                   	push   ecx
c002763a:	51                   	push   ecx
c002763b:	6a 00                	push   0x0
c002763d:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027643:	e8 80 e3 fe ff       	call   c00159c8 <Computer::readCMOS(unsigned char)>
c0027648:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c002764c:	5b                   	pop    ebx
c002764d:	5e                   	pop    esi
c002764e:	6a 02                	push   0x2
c0027650:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027656:	e8 6d e3 fe ff       	call   c00159c8 <Computer::readCMOS(unsigned char)>
c002765b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002765f:	5d                   	pop    ebp
c0027660:	58                   	pop    eax
c0027661:	6a 04                	push   0x4
c0027663:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027669:	e8 5a e3 fe ff       	call   c00159c8 <Computer::readCMOS(unsigned char)>
c002766e:	88 c3                	mov    bl,al
c0027670:	58                   	pop    eax
c0027671:	5a                   	pop    edx
c0027672:	6a 07                	push   0x7
c0027674:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002767a:	e8 49 e3 fe ff       	call   c00159c8 <Computer::readCMOS(unsigned char)>
c002767f:	59                   	pop    ecx
c0027680:	89 c6                	mov    esi,eax
c0027682:	5d                   	pop    ebp
c0027683:	6a 08                	push   0x8
c0027685:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002768b:	e8 38 e3 fe ff       	call   c00159c8 <Computer::readCMOS(unsigned char)>
c0027690:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0027694:	58                   	pop    eax
c0027695:	5a                   	pop    edx
c0027696:	6a 09                	push   0x9
c0027698:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002769e:	e8 25 e3 fe ff       	call   c00159c8 <Computer::readCMOS(unsigned char)>
c00276a3:	89 f9                	mov    ecx,edi
c00276a5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00276a9:	0f b6 e8             	movzx  ebp,al
c00276ac:	83 c4 10             	add    esp,0x10
c00276af:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00276b3:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00276b8:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c00276bd:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00276c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00276c5:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00276c9:	0f 94 c0             	sete   al
c00276cc:	0f b6 fb             	movzx  edi,bl
c00276cf:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c00276d3:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c00276d8:	0f 94 c2             	sete   dl
c00276db:	21 d0                	and    eax,edx
c00276dd:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c00276e1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00276e5:	0f 94 c2             	sete   dl
c00276e8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00276ec:	21 c2                	and    edx,eax
c00276ee:	89 f0                	mov    eax,esi
c00276f0:	0f b6 c0             	movzx  eax,al
c00276f3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00276f7:	89 f0                	mov    eax,esi
c00276f9:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00276fd:	0f 94 c0             	sete   al
c0027700:	21 d0                	and    eax,edx
c0027702:	31 d2                	xor    edx,edx
c0027704:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0027708:	0f 94 c2             	sete   dl
c002770b:	85 c2                	test   edx,eax
c002770d:	75 27                	jne    c0027736 <RTC::completeRTCRefresh()+0x1c8>
c002770f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0027713:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0027717:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c002771b:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c002771f:	89 f0                	mov    eax,esi
c0027721:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0027725:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0027729:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002772d:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0027731:	e9 dc fe ff ff       	jmp    c0027612 <RTC::completeRTCRefresh()+0xa4>
c0027736:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c002773a:	75 d3                	jne    c002770f <RTC::completeRTCRefresh()+0x1a1>
c002773c:	52                   	push   edx
c002773d:	52                   	push   edx
c002773e:	6a 0b                	push   0xb
c0027740:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027746:	e8 7d e2 fe ff       	call   c00159c8 <Computer::readCMOS(unsigned char)>
c002774b:	83 c4 10             	add    esp,0x10
c002774e:	a8 04                	test   al,0x4
c0027750:	75 7a                	jne    c00277cc <RTC::completeRTCRefresh()+0x25e>
c0027752:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027756:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002775a:	83 e1 0f             	and    ecx,0xf
c002775d:	c1 ea 04             	shr    edx,0x4
c0027760:	c1 ef 04             	shr    edi,0x4
c0027763:	6b d2 0a             	imul   edx,edx,0xa
c0027766:	83 e6 0f             	and    esi,0xf
c0027769:	01 d1                	add    ecx,edx
c002776b:	c1 ed 04             	shr    ebp,0x4
c002776e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0027772:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0027776:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002777a:	c1 ea 04             	shr    edx,0x4
c002777d:	83 e1 0f             	and    ecx,0xf
c0027780:	6b d2 0a             	imul   edx,edx,0xa
c0027783:	6b ed 0a             	imul   ebp,ebp,0xa
c0027786:	01 d1                	add    ecx,edx
c0027788:	89 fa                	mov    edx,edi
c002778a:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c002778e:	83 e2 07             	and    edx,0x7
c0027791:	89 d9                	mov    ecx,ebx
c0027793:	6b d2 0a             	imul   edx,edx,0xa
c0027796:	83 e1 0f             	and    ecx,0xf
c0027799:	83 e3 80             	and    ebx,0xffffff80
c002779c:	01 d1                	add    ecx,edx
c002779e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00277a2:	09 cb                	or     ebx,ecx
c00277a4:	c1 ea 04             	shr    edx,0x4
c00277a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00277ab:	6b d2 0a             	imul   edx,edx,0xa
c00277ae:	83 e1 0f             	and    ecx,0xf
c00277b1:	01 d6                	add    esi,edx
c00277b3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00277b7:	c1 ea 04             	shr    edx,0x4
c00277ba:	6b d2 0a             	imul   edx,edx,0xa
c00277bd:	01 d1                	add    ecx,edx
c00277bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00277c3:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00277c7:	83 e2 0f             	and    edx,0xf
c00277ca:	01 d5                	add    ebp,edx
c00277cc:	a8 02                	test   al,0x2
c00277ce:	75 15                	jne    c00277e5 <RTC::completeRTCRefresh()+0x277>
c00277d0:	f6 c3 80             	test   bl,0x80
c00277d3:	74 10                	je     c00277e5 <RTC::completeRTCRefresh()+0x277>
c00277d5:	83 e3 7f             	and    ebx,0x7f
c00277d8:	b9 18 00 00 00       	mov    ecx,0x18
c00277dd:	8d 43 0c             	lea    eax,[ebx+0xc]
c00277e0:	99                   	cdq    
c00277e1:	f7 f9                	idiv   ecx
c00277e3:	88 d3                	mov    bl,dl
c00277e5:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c00277eb:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c00277f1:	77 06                	ja     c00277f9 <RTC::completeRTCRefresh()+0x28b>
c00277f3:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c00277f9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00277fe:	31 c9                	xor    ecx,ecx
c0027800:	c1 e0 10             	shl    eax,0x10
c0027803:	89 cd                	mov    ebp,ecx
c0027805:	c1 e7 10             	shl    edi,0x10
c0027808:	31 d2                	xor    edx,edx
c002780a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0027810:	09 c5                	or     ebp,eax
c0027812:	89 f0                	mov    eax,esi
c0027814:	89 e9                	mov    ecx,ebp
c0027816:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002781a:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c002781e:	88 c2                	mov    dl,al
c0027820:	88 d9                	mov    cl,bl
c0027822:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0027826:	0f b7 c2             	movzx  eax,dx
c0027829:	09 f8                	or     eax,edi
c002782b:	89 c2                	mov    edx,eax
c002782d:	50                   	push   eax
c002782e:	50                   	push   eax
c002782f:	51                   	push   ecx
c0027830:	52                   	push   edx
c0027831:	e8 d5 35 ff ff       	call   c001ae0b <datetimeToSeconds(datetime_t)>
c0027836:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c002783a:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0027840:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0027846:	83 c4 4c             	add    esp,0x4c
c0027849:	5b                   	pop    ebx
c002784a:	5e                   	pop    esi
c002784b:	5f                   	pop    edi
c002784c:	5d                   	pop    ebp
c002784d:	c3                   	ret    

c002784e <RTC::setTimeInDatetimeUTC(datetime_t)>:
c002784e:	55                   	push   ebp
c002784f:	57                   	push   edi
c0027850:	56                   	push   esi
c0027851:	53                   	push   ebx
c0027852:	83 ec 30             	sub    esp,0x30
c0027855:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0027859:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c002785d:	6a 00                	push   0x0
c002785f:	6a 00                	push   0x0
c0027861:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027867:	e8 76 e2 fe ff       	call   c0015ae2 <Computer::writeCMOS(unsigned char, unsigned char)>
c002786c:	83 c4 0c             	add    esp,0xc
c002786f:	6a 00                	push   0x0
c0027871:	6a 02                	push   0x2
c0027873:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027879:	e8 64 e2 fe ff       	call   c0015ae2 <Computer::writeCMOS(unsigned char, unsigned char)>
c002787e:	31 d2                	xor    edx,edx
c0027880:	89 f9                	mov    ecx,edi
c0027882:	89 f8                	mov    eax,edi
c0027884:	c1 e9 10             	shr    ecx,0x10
c0027887:	0f b6 c4             	movzx  eax,ah
c002788a:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c002788e:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0027892:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0027896:	b9 64 00 00 00       	mov    ecx,0x64
c002789b:	89 f0                	mov    eax,esi
c002789d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00278a1:	89 f0                	mov    eax,esi
c00278a3:	0f b6 c4             	movzx  eax,ah
c00278a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00278aa:	89 f0                	mov    eax,esi
c00278ac:	c1 e8 10             	shr    eax,0x10
c00278af:	f7 f1                	div    ecx
c00278b1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00278b5:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00278b9:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00278bd:	59                   	pop    ecx
c00278be:	5b                   	pop    ebx
c00278bf:	89 fb                	mov    ebx,edi
c00278c1:	6a 0b                	push   0xb
c00278c3:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00278c9:	e8 fa e0 fe ff       	call   c00159c8 <Computer::readCMOS(unsigned char)>
c00278ce:	83 c4 10             	add    esp,0x10
c00278d1:	89 c5                	mov    ebp,eax
c00278d3:	a8 04                	test   al,0x4
c00278d5:	75 6e                	jne    c0027945 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c00278d7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00278db:	31 d2                	xor    edx,edx
c00278dd:	0f b6 c1             	movzx  eax,cl
c00278e0:	b9 0a 00 00 00       	mov    ecx,0xa
c00278e5:	f7 f1                	div    ecx
c00278e7:	c1 e0 04             	shl    eax,0x4
c00278ea:	09 d0                	or     eax,edx
c00278ec:	31 d2                	xor    edx,edx
c00278ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00278f2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00278f7:	f7 f1                	div    ecx
c00278f9:	c1 e0 04             	shl    eax,0x4
c00278fc:	09 d0                	or     eax,edx
c00278fe:	31 d2                	xor    edx,edx
c0027900:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027904:	0f b6 c3             	movzx  eax,bl
c0027907:	f7 f1                	div    ecx
c0027909:	c1 e0 04             	shl    eax,0x4
c002790c:	09 d0                	or     eax,edx
c002790e:	31 d2                	xor    edx,edx
c0027910:	89 c3                	mov    ebx,eax
c0027912:	89 f0                	mov    eax,esi
c0027914:	0f b6 c0             	movzx  eax,al
c0027917:	f7 f1                	div    ecx
c0027919:	c1 e0 04             	shl    eax,0x4
c002791c:	09 d0                	or     eax,edx
c002791e:	31 d2                	xor    edx,edx
c0027920:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0027924:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027929:	f7 f1                	div    ecx
c002792b:	c1 e0 04             	shl    eax,0x4
c002792e:	09 d0                	or     eax,edx
c0027930:	31 d2                	xor    edx,edx
c0027932:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027936:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002793a:	f7 f1                	div    ecx
c002793c:	c1 e0 04             	shl    eax,0x4
c002793f:	09 d0                	or     eax,edx
c0027941:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0027945:	83 e5 02             	and    ebp,0x2
c0027948:	75 1e                	jne    c0027968 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c002794a:	0f b6 c3             	movzx  eax,bl
c002794d:	83 f8 0b             	cmp    eax,0xb
c0027950:	76 10                	jbe    c0027962 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0027952:	8d 53 f4             	lea    edx,[ebx-0xc]
c0027955:	88 d3                	mov    bl,dl
c0027957:	84 d2                	test   dl,dl
c0027959:	75 02                	jne    c002795d <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c002795b:	b3 0c                	mov    bl,0xc
c002795d:	83 cb 80             	or     ebx,0xffffff80
c0027960:	eb 06                	jmp    c0027968 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027962:	85 c0                	test   eax,eax
c0027964:	75 02                	jne    c0027968 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027966:	b3 0c                	mov    bl,0xc
c0027968:	0f b6 db             	movzx  ebx,bl
c002796b:	50                   	push   eax
c002796c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0027971:	52                   	push   edx
c0027972:	6a 00                	push   0x0
c0027974:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002797a:	e8 63 e1 fe ff       	call   c0015ae2 <Computer::writeCMOS(unsigned char, unsigned char)>
c002797f:	83 c4 0c             	add    esp,0xc
c0027982:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027987:	50                   	push   eax
c0027988:	6a 02                	push   0x2
c002798a:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027990:	e8 4d e1 fe ff       	call   c0015ae2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027995:	83 c4 0c             	add    esp,0xc
c0027998:	53                   	push   ebx
c0027999:	6a 04                	push   0x4
c002799b:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279a1:	e8 3c e1 fe ff       	call   c0015ae2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00279a6:	83 c4 0c             	add    esp,0xc
c00279a9:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c00279ae:	52                   	push   edx
c00279af:	6a 07                	push   0x7
c00279b1:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279b7:	e8 26 e1 fe ff       	call   c0015ae2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00279bc:	83 c4 0c             	add    esp,0xc
c00279bf:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00279c4:	50                   	push   eax
c00279c5:	6a 08                	push   0x8
c00279c7:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279cd:	e8 10 e1 fe ff       	call   c0015ae2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00279d2:	83 c4 0c             	add    esp,0xc
c00279d5:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c00279da:	55                   	push   ebp
c00279db:	6a 09                	push   0x9
c00279dd:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279e3:	e8 fa e0 fe ff       	call   c0015ae2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00279e8:	5a                   	pop    edx
c00279e9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00279ed:	e8 7c fb ff ff       	call   c002756e <RTC::completeRTCRefresh()>
c00279f2:	83 c4 3c             	add    esp,0x3c
c00279f5:	b0 01                	mov    al,0x1
c00279f7:	5b                   	pop    ebx
c00279f8:	5e                   	pop    esi
c00279f9:	5f                   	pop    edi
c00279fa:	5d                   	pop    ebp
c00279fb:	c3                   	ret    

c00279fc <rtcIRQHandler(regs*, void*)>:
c00279fc:	53                   	push   ebx
c00279fd:	83 ec 10             	sub    esp,0x10
c0027a00:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027a04:	6a 0c                	push   0xc
c0027a06:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027a0c:	e8 b7 df fe ff       	call   c00159c8 <Computer::readCMOS(unsigned char)>
c0027a11:	83 c4 10             	add    esp,0x10
c0027a14:	a8 80                	test   al,0x80
c0027a16:	74 24                	je     c0027a3c <rtcIRQHandler(regs*, void*)+0x40>
c0027a18:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0027a1f:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0027a26:	66 ff 05 78 02 04 c0 	inc    WORD PTR ds:0xc0040278
c0027a2d:	75 0d                	jne    c0027a3c <rtcIRQHandler(regs*, void*)+0x40>
c0027a2f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0027a33:	83 c4 08             	add    esp,0x8
c0027a36:	5b                   	pop    ebx
c0027a37:	e9 32 fb ff ff       	jmp    c002756e <RTC::completeRTCRefresh()>
c0027a3c:	83 c4 08             	add    esp,0x8
c0027a3f:	5b                   	pop    ebx
c0027a40:	c3                   	ret    
c0027a41:	90                   	nop

c0027a42 <RTC::RTC()>:
c0027a42:	83 ec 1c             	sub    esp,0x1c
c0027a45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027a49:	83 ec 08             	sub    esp,0x8
c0027a4c:	68 4b 31 03 c0       	push   0xc003314b
c0027a51:	50                   	push   eax
c0027a52:	e8 8f 32 ff ff       	call   c001ace6 <Clock::Clock(char const*)>
c0027a57:	83 c4 10             	add    esp,0x10
c0027a5a:	ba 68 31 03 c0       	mov    edx,0xc0033168
c0027a5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027a63:	89 10                	mov    DWORD PTR [eax],edx
c0027a65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027a69:	83 ec 0c             	sub    esp,0xc
c0027a6c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027a70:	6a 01                	push   0x1
c0027a72:	68 fc 79 02 c0       	push   0xc00279fc
c0027a77:	6a 08                	push   0x8
c0027a79:	50                   	push   eax
c0027a7a:	e8 43 37 ff ff       	call   c001b1c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0027a7f:	83 c4 20             	add    esp,0x20
c0027a82:	89 c2                	mov    edx,eax
c0027a84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027a88:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0027a8e:	fa                   	cli    
c0027a8f:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027a94:	83 c0 01             	add    eax,0x1
c0027a97:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0027a9c:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027aa1:	83 ec 08             	sub    esp,0x8
c0027aa4:	6a 0b                	push   0xb
c0027aa6:	50                   	push   eax
c0027aa7:	e8 1c df fe ff       	call   c00159c8 <Computer::readCMOS(unsigned char)>
c0027aac:	83 c4 10             	add    esp,0x10
c0027aaf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0027ab3:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027ab8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0027abc:	83 ca 10             	or     edx,0x10
c0027abf:	0f b6 d2             	movzx  edx,dl
c0027ac2:	83 ec 04             	sub    esp,0x4
c0027ac5:	52                   	push   edx
c0027ac6:	6a 0b                	push   0xb
c0027ac8:	50                   	push   eax
c0027ac9:	e8 14 e0 fe ff       	call   c0015ae2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027ace:	83 c4 10             	add    esp,0x10
c0027ad1:	83 ec 0c             	sub    esp,0xc
c0027ad4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027ad8:	e8 91 fa ff ff       	call   c002756e <RTC::completeRTCRefresh()>
c0027add:	83 c4 10             	add    esp,0x10
c0027ae0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027ae5:	83 e8 01             	sub    eax,0x1
c0027ae8:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0027aed:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027af2:	85 c0                	test   eax,eax
c0027af4:	75 01                	jne    c0027af7 <RTC::RTC()+0xb5>
c0027af6:	fb                   	sti    
c0027af7:	90                   	nop
c0027af8:	83 c4 1c             	add    esp,0x1c
c0027afb:	c3                   	ret    

c0027afc <HalConsoleScroll(int, int)>:
c0027afc:	83 ec 10             	sub    esp,0x10
c0027aff:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0027b07:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0027b0f:	90                   	nop
c0027b10:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0027b15:	0f 8f e1 00 00 00    	jg     c0027bfc <HalConsoleScroll(int, int)+0x100>
c0027b1b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0027b23:	90                   	nop
c0027b24:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0027b2c:	0f 8f be 00 00 00    	jg     c0027bf0 <HalConsoleScroll(int, int)+0xf4>
c0027b32:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027b36:	89 d0                	mov    eax,edx
c0027b38:	c1 e0 02             	shl    eax,0x2
c0027b3b:	01 d0                	add    eax,edx
c0027b3d:	c1 e0 05             	shl    eax,0x5
c0027b40:	89 c2                	mov    edx,eax
c0027b42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027b46:	01 d0                	add    eax,edx
c0027b48:	89 c2                	mov    edx,eax
c0027b4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027b4e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0027b51:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027b55:	89 d0                	mov    eax,edx
c0027b57:	c1 e0 02             	shl    eax,0x2
c0027b5a:	01 d0                	add    eax,edx
c0027b5c:	c1 e0 05             	shl    eax,0x5
c0027b5f:	89 c2                	mov    edx,eax
c0027b61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027b65:	01 d0                	add    eax,edx
c0027b67:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0027b6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027b71:	01 c2                	add    edx,eax
c0027b73:	8a 01                	mov    al,BYTE PTR [ecx]
c0027b75:	88 02                	mov    BYTE PTR [edx],al
c0027b77:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0027b7c:	75 66                	jne    c0027be4 <HalConsoleScroll(int, int)+0xe8>
c0027b7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027b82:	83 e0 01             	and    eax,0x1
c0027b85:	74 39                	je     c0027bc0 <HalConsoleScroll(int, int)+0xc4>
c0027b87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027b8b:	83 e0 0f             	and    eax,0xf
c0027b8e:	88 c2                	mov    dl,al
c0027b90:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027b94:	c1 e0 04             	shl    eax,0x4
c0027b97:	09 d0                	or     eax,edx
c0027b99:	88 c1                	mov    cl,al
c0027b9b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027b9f:	89 d0                	mov    eax,edx
c0027ba1:	c1 e0 02             	shl    eax,0x2
c0027ba4:	01 d0                	add    eax,edx
c0027ba6:	c1 e0 05             	shl    eax,0x5
c0027ba9:	89 c2                	mov    edx,eax
c0027bab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027baf:	01 d0                	add    eax,edx
c0027bb1:	89 c2                	mov    edx,eax
c0027bb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027bb7:	01 d0                	add    eax,edx
c0027bb9:	88 ca                	mov    dl,cl
c0027bbb:	88 10                	mov    BYTE PTR [eax],dl
c0027bbd:	eb 25                	jmp    c0027be4 <HalConsoleScroll(int, int)+0xe8>
c0027bbf:	90                   	nop
c0027bc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027bc4:	89 d0                	mov    eax,edx
c0027bc6:	c1 e0 02             	shl    eax,0x2
c0027bc9:	01 d0                	add    eax,edx
c0027bcb:	c1 e0 05             	shl    eax,0x5
c0027bce:	89 c2                	mov    edx,eax
c0027bd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027bd4:	01 d0                	add    eax,edx
c0027bd6:	89 c2                	mov    edx,eax
c0027bd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027bdc:	01 d0                	add    eax,edx
c0027bde:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0027be1:	8d 76 00             	lea    esi,[esi+0x0]
c0027be4:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0027be9:	e9 36 ff ff ff       	jmp    c0027b24 <HalConsoleScroll(int, int)+0x28>
c0027bee:	66 90                	xchg   ax,ax
c0027bf0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0027bf5:	e9 16 ff ff ff       	jmp    c0027b10 <HalConsoleScroll(int, int)+0x14>
c0027bfa:	66 90                	xchg   ax,ax
c0027bfc:	90                   	nop
c0027bfd:	83 c4 10             	add    esp,0x10
c0027c00:	c3                   	ret    
c0027c01:	8d 76 00             	lea    esi,[esi+0x0]

c0027c04 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0027c04:	83 ec 14             	sub    esp,0x14
c0027c07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027c0b:	88 04 24             	mov    BYTE PTR [esp],al
c0027c0e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0027c11:	0f b6 c0             	movzx  eax,al
c0027c14:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027c18:	89 d1                	mov    ecx,edx
c0027c1a:	83 e1 0f             	and    ecx,0xf
c0027c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0027c21:	c1 e2 04             	shl    edx,0x4
c0027c24:	0f b6 d2             	movzx  edx,dl
c0027c27:	09 ca                	or     edx,ecx
c0027c29:	c1 e2 08             	shl    edx,0x8
c0027c2c:	09 d0                	or     eax,edx
c0027c2e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0027c33:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0027c3b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027c3f:	89 d0                	mov    eax,edx
c0027c41:	c1 e0 02             	shl    eax,0x2
c0027c44:	01 d0                	add    eax,edx
c0027c46:	c1 e0 04             	shl    eax,0x4
c0027c49:	89 c2                	mov    edx,eax
c0027c4b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0027c4f:	01 d0                	add    eax,edx
c0027c51:	01 c0                	add    eax,eax
c0027c53:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0027c57:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027c5b:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0027c60:	66 89 02             	mov    WORD PTR [edx],ax
c0027c63:	90                   	nop
c0027c64:	83 c4 14             	add    esp,0x14
c0027c67:	c3                   	ret    

c0027c68 <HalConsoleCursorUpdate(int, int)>:
c0027c68:	83 ec 20             	sub    esp,0x20
c0027c6b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027c6f:	89 c2                	mov    edx,eax
c0027c71:	c1 e2 02             	shl    edx,0x2
c0027c74:	01 d0                	add    eax,edx
c0027c76:	c1 e0 04             	shl    eax,0x4
c0027c79:	89 c2                	mov    edx,eax
c0027c7b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0027c7f:	01 d0                	add    eax,edx
c0027c81:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0027c86:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0027c8d:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0027c92:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0027c96:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0027c9a:	ee                   	out    dx,al
c0027c9b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0027ca0:	0f b6 c0             	movzx  eax,al
c0027ca3:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0027caa:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0027cae:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0027cb2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027cb6:	ee                   	out    dx,al
c0027cb7:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0027cbe:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0027cc3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0027cc7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027ccb:	ee                   	out    dx,al
c0027ccc:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0027cd1:	c1 e8 08             	shr    eax,0x8
c0027cd4:	0f b6 c0             	movzx  eax,al
c0027cd7:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0027cde:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0027ce2:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0027ce6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027cea:	ee                   	out    dx,al
c0027ceb:	90                   	nop
c0027cec:	83 c4 20             	add    esp,0x20
c0027cef:	c3                   	ret    

c0027cf0 <FAT::getName()>:
c0027cf0:	b8 9c 31 03 c0       	mov    eax,0xc003319c
c0027cf5:	c3                   	ret    
c0027cf6:	66 90                	xchg   ax,ax

c0027cf8 <FAT::tell(void*, unsigned long long*)>:
c0027cf8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0027cfd:	75 09                	jne    c0027d08 <FAT::tell(void*, unsigned long long*)+0x10>
c0027cff:	b8 04 00 00 00       	mov    eax,0x4
c0027d04:	c3                   	ret    
c0027d05:	8d 76 00             	lea    esi,[esi+0x0]
c0027d08:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0027d0d:	75 09                	jne    c0027d18 <FAT::tell(void*, unsigned long long*)+0x20>
c0027d0f:	b8 04 00 00 00       	mov    eax,0x4
c0027d14:	c3                   	ret    
c0027d15:	8d 76 00             	lea    esi,[esi+0x0]
c0027d18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027d1c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0027d1f:	ba 00 00 00 00       	mov    edx,0x0
c0027d24:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0027d28:	89 01                	mov    DWORD PTR [ecx],eax
c0027d2a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0027d2d:	b8 00 00 00 00       	mov    eax,0x0
c0027d32:	c3                   	ret    
c0027d33:	90                   	nop

c0027d34 <FAT::stat(void*, unsigned long long*)>:
c0027d34:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0027d39:	75 09                	jne    c0027d44 <FAT::stat(void*, unsigned long long*)+0x10>
c0027d3b:	b8 04 00 00 00       	mov    eax,0x4
c0027d40:	c3                   	ret    
c0027d41:	8d 76 00             	lea    esi,[esi+0x0]
c0027d44:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0027d49:	75 09                	jne    c0027d54 <FAT::stat(void*, unsigned long long*)+0x20>
c0027d4b:	b8 04 00 00 00       	mov    eax,0x4
c0027d50:	c3                   	ret    
c0027d51:	8d 76 00             	lea    esi,[esi+0x0]
c0027d54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027d58:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0027d5b:	ba 00 00 00 00       	mov    edx,0x0
c0027d60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0027d64:	89 01                	mov    DWORD PTR [ecx],eax
c0027d66:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0027d69:	b8 00 00 00 00       	mov    eax,0x0
c0027d6e:	c3                   	ret    
c0027d6f:	90                   	nop

c0027d70 <FAT::~FAT()>:
c0027d70:	83 ec 0c             	sub    esp,0xc
c0027d73:	ba e8 31 03 c0       	mov    edx,0xc00331e8
c0027d78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d7c:	89 10                	mov    DWORD PTR [eax],edx
c0027d7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d82:	83 ec 0c             	sub    esp,0xc
c0027d85:	50                   	push   eax
c0027d86:	e8 93 22 ff ff       	call   c001a01e <Filesystem::~Filesystem()>
c0027d8b:	83 c4 10             	add    esp,0x10
c0027d8e:	90                   	nop
c0027d8f:	83 c4 0c             	add    esp,0xc
c0027d92:	c3                   	ret    
c0027d93:	90                   	nop

c0027d94 <FAT::~FAT()>:
c0027d94:	83 ec 0c             	sub    esp,0xc
c0027d97:	83 ec 0c             	sub    esp,0xc
c0027d9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027d9e:	e8 cd ff ff ff       	call   c0027d70 <FAT::~FAT()>
c0027da3:	83 c4 10             	add    esp,0x10
c0027da6:	83 ec 08             	sub    esp,0x8
c0027da9:	6a 08                	push   0x8
c0027dab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027daf:	e8 b4 12 ff ff       	call   c0019068 <operator delete(void*, unsigned long)>
c0027db4:	83 c4 10             	add    esp,0x10
c0027db7:	83 c4 0c             	add    esp,0xc
c0027dba:	c3                   	ret    
c0027dbb:	90                   	nop

c0027dbc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0027dbc:	83 ec 1c             	sub    esp,0x1c
c0027dbf:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0027dc6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0027dcb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027dcf:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027dd6:	83 f8 ff             	cmp    eax,0xffffffff
c0027dd9:	75 35                	jne    c0027e10 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0027ddb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027ddf:	88 c2                	mov    dl,al
c0027de1:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027de6:	01 d0                	add    eax,edx
c0027de8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0027dec:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c0027df2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027df6:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0027dfd:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027e02:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027e06:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0027e0d:	eb 19                	jmp    c0027e28 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0027e0f:	90                   	nop
c0027e10:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027e14:	88 c2                	mov    dl,al
c0027e16:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027e1a:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027e21:	01 d0                	add    eax,edx
c0027e23:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0027e27:	90                   	nop
c0027e28:	83 ec 04             	sub    esp,0x4
c0027e2b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0027e2f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0027e33:	8d 44 24 15          	lea    eax,[esp+0x15]
c0027e37:	50                   	push   eax
c0027e38:	e8 96 d2 fd ff       	call   c00050d3 <f_getlabel>
c0027e3d:	83 c4 10             	add    esp,0x10
c0027e40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027e44:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0027e49:	75 09                	jne    c0027e54 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0027e4b:	b8 00 00 00 00       	mov    eax,0x0
c0027e50:	eb 0a                	jmp    c0027e5c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0027e52:	66 90                	xchg   ax,ax
c0027e54:	b8 01 00 00 00       	mov    eax,0x1
c0027e59:	8d 76 00             	lea    esi,[esi+0x0]
c0027e5c:	83 c4 1c             	add    esp,0x1c
c0027e5f:	c3                   	ret    

c0027e60 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0027e60:	57                   	push   edi
c0027e61:	83 ec 58             	sub    esp,0x58
c0027e64:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0027e6c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0027e70:	b8 00 00 00 00       	mov    eax,0x0
c0027e75:	b9 0f 00 00 00       	mov    ecx,0xf
c0027e7a:	fc                   	cld    
c0027e7b:	89 d7                	mov    edi,edx
c0027e7d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0027e7f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0027e83:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027e8a:	83 f8 ff             	cmp    eax,0xffffffff
c0027e8d:	75 35                	jne    c0027ec4 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0027e8f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027e93:	88 c2                	mov    dl,al
c0027e95:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027e9a:	01 d0                	add    eax,edx
c0027e9c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0027ea0:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c0027ea6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0027eaa:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0027eb1:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027eb6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0027eba:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0027ec1:	eb 19                	jmp    c0027edc <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0027ec3:	90                   	nop
c0027ec4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027ec8:	88 c2                	mov    dl,al
c0027eca:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0027ece:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027ed5:	01 d0                	add    eax,edx
c0027ed7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0027edb:	90                   	nop
c0027edc:	83 ec 08             	sub    esp,0x8
c0027edf:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0027ee3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0027ee7:	50                   	push   eax
c0027ee8:	e8 53 89 fd ff       	call   c0000840 <strcat>
c0027eed:	83 c4 10             	add    esp,0x10
c0027ef0:	83 ec 0c             	sub    esp,0xc
c0027ef3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0027ef7:	50                   	push   eax
c0027ef8:	e8 27 d3 fd ff       	call   c0005224 <f_setlabel>
c0027efd:	83 c4 10             	add    esp,0x10
c0027f00:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0027f04:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0027f09:	75 09                	jne    c0027f14 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0027f0b:	b8 00 00 00 00       	mov    eax,0x0
c0027f10:	eb 0a                	jmp    c0027f1c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0027f12:	66 90                	xchg   ax,ax
c0027f14:	b8 01 00 00 00       	mov    eax,0x1
c0027f19:	8d 76 00             	lea    esi,[esi+0x0]
c0027f1c:	83 c4 58             	add    esp,0x58
c0027f1f:	5f                   	pop    edi
c0027f20:	c3                   	ret    
c0027f21:	90                   	nop
c0027f22:	66 90                	xchg   ax,ax

c0027f24 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0027f24:	83 ec 2c             	sub    esp,0x2c
c0027f27:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0027f2f:	83 ec 08             	sub    esp,0x8
c0027f32:	68 c0 31 03 c0       	push   0xc00331c0
c0027f37:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0027f3b:	e8 10 88 fd ff       	call   c0000750 <strcmp>
c0027f40:	83 c4 10             	add    esp,0x10
c0027f43:	85 c0                	test   eax,eax
c0027f45:	0f 94 c0             	sete   al
c0027f48:	0f b6 c0             	movzx  eax,al
c0027f4b:	85 c0                	test   eax,eax
c0027f4d:	74 0d                	je     c0027f5c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0027f4f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0027f57:	e9 c0 00 00 00       	jmp    c002801c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0027f5c:	83 ec 08             	sub    esp,0x8
c0027f5f:	68 b2 31 03 c0       	push   0xc00331b2
c0027f64:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0027f68:	e8 e3 87 fd ff       	call   c0000750 <strcmp>
c0027f6d:	83 c4 10             	add    esp,0x10
c0027f70:	85 c0                	test   eax,eax
c0027f72:	0f 94 c0             	sete   al
c0027f75:	0f b6 c0             	movzx  eax,al
c0027f78:	85 c0                	test   eax,eax
c0027f7a:	74 10                	je     c0027f8c <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0027f7c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0027f84:	e9 93 00 00 00       	jmp    c002801c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0027f89:	8d 76 00             	lea    esi,[esi+0x0]
c0027f8c:	83 ec 08             	sub    esp,0x8
c0027f8f:	68 b8 31 03 c0       	push   0xc00331b8
c0027f94:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0027f98:	e8 b3 87 fd ff       	call   c0000750 <strcmp>
c0027f9d:	83 c4 10             	add    esp,0x10
c0027fa0:	85 c0                	test   eax,eax
c0027fa2:	0f 94 c0             	sete   al
c0027fa5:	0f b6 c0             	movzx  eax,al
c0027fa8:	85 c0                	test   eax,eax
c0027faa:	74 0c                	je     c0027fb8 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0027fac:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0027fb4:	eb 66                	jmp    c002801c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0027fb6:	66 90                	xchg   ax,ax
c0027fb8:	83 ec 08             	sub    esp,0x8
c0027fbb:	68 5c f3 02 c0       	push   0xc002f35c
c0027fc0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0027fc4:	e8 87 87 fd ff       	call   c0000750 <strcmp>
c0027fc9:	83 c4 10             	add    esp,0x10
c0027fcc:	85 c0                	test   eax,eax
c0027fce:	0f 94 c0             	sete   al
c0027fd1:	0f b6 c0             	movzx  eax,al
c0027fd4:	85 c0                	test   eax,eax
c0027fd6:	74 0c                	je     c0027fe4 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0027fd8:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0027fe0:	eb 3a                	jmp    c002801c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0027fe2:	66 90                	xchg   ax,ax
c0027fe4:	83 ec 08             	sub    esp,0x8
c0027fe7:	68 be 31 03 c0       	push   0xc00331be
c0027fec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0027ff0:	e8 5b 87 fd ff       	call   c0000750 <strcmp>
c0027ff5:	83 c4 10             	add    esp,0x10
c0027ff8:	85 c0                	test   eax,eax
c0027ffa:	0f 94 c0             	sete   al
c0027ffd:	0f b6 c0             	movzx  eax,al
c0028000:	85 c0                	test   eax,eax
c0028002:	74 0c                	je     c0028010 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0028004:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c002800c:	eb 0e                	jmp    c002801c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c002800e:	66 90                	xchg   ax,ax
c0028010:	b8 08 00 00 00       	mov    eax,0x8
c0028015:	e9 ea 00 00 00       	jmp    c0028104 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c002801a:	66 90                	xchg   ax,ax
c002801c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0028023:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0028028:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002802c:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028033:	83 f8 ff             	cmp    eax,0xffffffff
c0028036:	75 34                	jne    c002806c <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0028038:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002803c:	88 c2                	mov    dl,al
c002803e:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028043:	01 d0                	add    eax,edx
c0028045:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0028049:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c002804f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028053:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c002805a:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c002805f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0028063:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c002806a:	eb 18                	jmp    c0028084 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c002806c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0028070:	88 c2                	mov    dl,al
c0028072:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028076:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c002807d:	01 d0                	add    eax,edx
c002807f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0028083:	90                   	nop
c0028084:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0028088:	88 04 24             	mov    BYTE PTR [esp],al
c002808b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002808f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028093:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002809b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00280a0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00280a8:	83 ec 0c             	sub    esp,0xc
c00280ab:	68 00 20 00 00       	push   0x2000
c00280b0:	e8 51 e2 fe ff       	call   c0016306 <malloc>
c00280b5:	83 c4 10             	add    esp,0x10
c00280b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00280bc:	68 00 20 00 00       	push   0x2000
c00280c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00280c5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00280c9:	50                   	push   eax
c00280ca:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00280ce:	50                   	push   eax
c00280cf:	e8 4d d4 fd ff       	call   c0005521 <f_mkfs>
c00280d4:	83 c4 10             	add    esp,0x10
c00280d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00280db:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00280e0:	75 0a                	jne    c00280ec <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00280e2:	b8 00 00 00 00       	mov    eax,0x0
c00280e7:	eb 1b                	jmp    c0028104 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00280e9:	8d 76 00             	lea    esi,[esi+0x0]
c00280ec:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00280f1:	75 09                	jne    c00280fc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00280f3:	b8 09 00 00 00       	mov    eax,0x9
c00280f8:	eb 0a                	jmp    c0028104 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00280fa:	66 90                	xchg   ax,ax
c00280fc:	b8 01 00 00 00       	mov    eax,0x1
c0028101:	8d 76 00             	lea    esi,[esi+0x0]
c0028104:	83 c4 2c             	add    esp,0x2c
c0028107:	c3                   	ret    

c0028108 <FAT::tryMount(LogicalDisk*, int)>:
c0028108:	81 ec 4c 03 00 00    	sub    esp,0x34c
c002810e:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028113:	83 f8 14             	cmp    eax,0x14
c0028116:	75 18                	jne    c0028130 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0028118:	83 ec 0c             	sub    esp,0xc
c002811b:	68 c4 31 03 c0       	push   0xc00331c4
c0028120:	e8 89 80 ff ff       	call   c00201ae <KePanic(char const*)>
c0028125:	83 c4 10             	add    esp,0x10
c0028128:	b0 00                	mov    al,0x0
c002812a:	e9 ed 01 00 00       	jmp    c002831c <FAT::tryMount(LogicalDisk*, int)+0x214>
c002812f:	90                   	nop
c0028130:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0028137:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002813d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0028143:	3d 00 02 00 00       	cmp    eax,0x200
c0028148:	74 0a                	je     c0028154 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c002814a:	b0 00                	mov    al,0x0
c002814c:	e9 cb 01 00 00       	jmp    c002831c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028151:	8d 76 00             	lea    esi,[esi+0x0]
c0028154:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c002815c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0028163:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c002816a:	83 f8 ff             	cmp    eax,0xffffffff
c002816d:	74 09                	je     c0028178 <FAT::tryMount(LogicalDisk*, int)+0x70>
c002816f:	b0 01                	mov    al,0x1
c0028171:	e9 a6 01 00 00       	jmp    c002831c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028176:	66 90                	xchg   ax,ax
c0028178:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0028182:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c002818a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0028191:	88 c2                	mov    dl,al
c0028193:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028198:	01 d0                	add    eax,edx
c002819a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00281a1:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c00281a7:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00281ae:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c00281b5:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c00281ba:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00281c1:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c00281c8:	83 ec 0c             	sub    esp,0xc
c00281cb:	68 34 02 00 00       	push   0x234
c00281d0:	e8 31 e1 fe ff       	call   c0016306 <malloc>
c00281d5:	83 c4 10             	add    esp,0x10
c00281d8:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00281df:	83 ec 04             	sub    esp,0x4
c00281e2:	6a 00                	push   0x0
c00281e4:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00281eb:	50                   	push   eax
c00281ec:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00281f3:	e8 04 bb fd ff       	call   c0003cfc <f_mount>
c00281f8:	83 c4 10             	add    esp,0x10
c00281fb:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0028202:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c002820a:	74 1c                	je     c0028228 <FAT::tryMount(LogicalDisk*, int)+0x120>
c002820c:	83 ec 0c             	sub    esp,0xc
c002820f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0028216:	e8 0b e1 fe ff       	call   c0016326 <rfree>
c002821b:	83 c4 10             	add    esp,0x10
c002821e:	b0 00                	mov    al,0x0
c0028220:	e9 f7 00 00 00       	jmp    c002831c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028225:	8d 76 00             	lea    esi,[esi+0x0]
c0028228:	83 ec 04             	sub    esp,0x4
c002822b:	68 00 01 00 00       	push   0x100
c0028230:	6a 00                	push   0x0
c0028232:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0028239:	50                   	push   eax
c002823a:	e8 b1 82 fd ff       	call   c00004f0 <memset>
c002823f:	83 c4 10             	add    esp,0x10
c0028242:	83 ec 08             	sub    esp,0x8
c0028245:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c002824c:	50                   	push   eax
c002824d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0028254:	50                   	push   eax
c0028255:	e8 e6 85 fd ff       	call   c0000840 <strcat>
c002825a:	83 c4 10             	add    esp,0x10
c002825d:	83 ec 08             	sub    esp,0x8
c0028260:	68 d2 31 03 c0       	push   0xc00331d2
c0028265:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c002826c:	50                   	push   eax
c002826d:	e8 ce 85 fd ff       	call   c0000840 <strcat>
c0028272:	83 c4 10             	add    esp,0x10
c0028275:	83 ec 04             	sub    esp,0x4
c0028278:	6a 01                	push   0x1
c002827a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0028281:	50                   	push   eax
c0028282:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028286:	50                   	push   eax
c0028287:	e8 d2 ba fd ff       	call   c0003d5e <f_open>
c002828c:	83 c4 10             	add    esp,0x10
c002828f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0028296:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c002829d:	85 c0                	test   eax,eax
c002829f:	74 0b                	je     c00282ac <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00282a1:	78 31                	js     c00282d4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00282a3:	83 e8 04             	sub    eax,0x4
c00282a6:	83 f8 01             	cmp    eax,0x1
c00282a9:	77 29                	ja     c00282d4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00282ab:	90                   	nop
c00282ac:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00282b4:	83 ec 0c             	sub    esp,0xc
c00282b7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00282bb:	50                   	push   eax
c00282bc:	e8 6c c2 fd ff       	call   c000452d <f_close>
c00282c1:	83 c4 10             	add    esp,0x10
c00282c4:	90                   	nop
c00282c5:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c00282cd:	85 c0                	test   eax,eax
c00282cf:	74 43                	je     c0028314 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c00282d1:	eb 31                	jmp    c0028304 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00282d3:	90                   	nop
c00282d4:	83 ec 0c             	sub    esp,0xc
c00282d7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00282de:	e8 43 e0 fe ff       	call   c0016326 <rfree>
c00282e3:	83 c4 10             	add    esp,0x10
c00282e6:	83 ec 04             	sub    esp,0x4
c00282e9:	6a 00                	push   0x0
c00282eb:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00282f2:	50                   	push   eax
c00282f3:	6a 00                	push   0x0
c00282f5:	e8 02 ba fd ff       	call   c0003cfc <f_mount>
c00282fa:	83 c4 10             	add    esp,0x10
c00282fd:	b0 00                	mov    al,0x0
c00282ff:	eb 1b                	jmp    c002831c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028301:	8d 76 00             	lea    esi,[esi+0x0]
c0028304:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028309:	83 c0 01             	add    eax,0x1
c002830c:	a3 80 02 04 c0       	mov    ds:0xc0040280,eax
c0028311:	8d 76 00             	lea    esi,[esi+0x0]
c0028314:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c002831b:	90                   	nop
c002831c:	81 c4 4c 03 00 00    	add    esp,0x34c
c0028322:	c3                   	ret    
c0028323:	90                   	nop

c0028324 <FAT::allocateSwapfile(char const*, int)>:
c0028324:	55                   	push   ebp
c0028325:	57                   	push   edi
c0028326:	56                   	push   esi
c0028327:	53                   	push   ebx
c0028328:	81 ec 3c 04 00 00    	sub    esp,0x43c
c002832e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0028339:	83 ec 0c             	sub    esp,0xc
c002833c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0028343:	e8 be df fe ff       	call   c0016306 <malloc>
c0028348:	83 c4 10             	add    esp,0x10
c002834b:	89 c7                	mov    edi,eax
c002834d:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0028352:	83 ec 04             	sub    esp,0x4
c0028355:	50                   	push   eax
c0028356:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c002835d:	57                   	push   edi
c002835e:	e8 39 20 ff ff       	call   c001a39c <File::File(char const*, Process*)>
c0028363:	83 c4 10             	add    esp,0x10
c0028366:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c002836d:	83 ec 04             	sub    esp,0x4
c0028370:	8d 44 24 13          	lea    eax,[esp+0x13]
c0028374:	50                   	push   eax
c0028375:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028379:	50                   	push   eax
c002837a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028381:	e8 36 23 ff ff       	call   c001a6bc <File::stat(unsigned long long*, bool*)>
c0028386:	83 c4 10             	add    esp,0x10
c0028389:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0028390:	c1 e0 14             	shl    eax,0x14
c0028393:	89 c7                	mov    edi,eax
c0028395:	89 c5                	mov    ebp,eax
c0028397:	c1 fd 1f             	sar    ebp,0x1f
c002839a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002839e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00283a2:	89 f9                	mov    ecx,edi
c00283a4:	31 c1                	xor    ecx,eax
c00283a6:	89 cb                	mov    ebx,ecx
c00283a8:	89 e9                	mov    ecx,ebp
c00283aa:	31 d1                	xor    ecx,edx
c00283ac:	89 ce                	mov    esi,ecx
c00283ae:	89 f0                	mov    eax,esi
c00283b0:	09 d8                	or     eax,ebx
c00283b2:	0f 84 9c 00 00 00    	je     c0028454 <FAT::allocateSwapfile(char const*, int)+0x130>
c00283b8:	83 ec 0c             	sub    esp,0xc
c00283bb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00283c2:	e8 c1 21 ff ff       	call   c001a588 <File::unlink()>
c00283c7:	83 c4 10             	add    esp,0x10
c00283ca:	83 ec 08             	sub    esp,0x8
c00283cd:	6a 12                	push   0x12
c00283cf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00283d6:	e8 df 1f ff ff       	call   c001a3ba <File::open(FileOpenMode)>
c00283db:	83 c4 10             	add    esp,0x10
c00283de:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00283e5:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00283eb:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00283f2:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00283f9:	c1 e0 14             	shl    eax,0x14
c00283fc:	83 ec 04             	sub    esp,0x4
c00283ff:	6a 01                	push   0x1
c0028401:	50                   	push   eax
c0028402:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0028409:	e8 a6 cf fd ff       	call   c00053b4 <f_expand>
c002840e:	83 c4 10             	add    esp,0x10
c0028411:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028418:	8b 00                	mov    eax,DWORD PTR [eax]
c002841a:	83 c0 10             	add    eax,0x10
c002841d:	8b 00                	mov    eax,DWORD PTR [eax]
c002841f:	83 ec 0c             	sub    esp,0xc
c0028422:	8d 54 24 24          	lea    edx,[esp+0x24]
c0028426:	52                   	push   edx
c0028427:	8d 54 24 30          	lea    edx,[esp+0x30]
c002842b:	52                   	push   edx
c002842c:	6a 00                	push   0x0
c002842e:	68 00 04 00 00       	push   0x400
c0028433:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c002843a:	ff d0                	call   eax
c002843c:	83 c4 20             	add    esp,0x20
c002843f:	83 ec 0c             	sub    esp,0xc
c0028442:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028449:	e8 ca 1f ff ff       	call   c001a418 <File::close()>
c002844e:	83 c4 10             	add    esp,0x10
c0028451:	8d 76 00             	lea    esi,[esi+0x0]
c0028454:	83 ec 08             	sub    esp,0x8
c0028457:	6a 01                	push   0x1
c0028459:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028460:	e8 55 1f ff ff       	call   c001a3ba <File::open(FileOpenMode)>
c0028465:	83 c4 10             	add    esp,0x10
c0028468:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c002846f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028471:	83 c0 0c             	add    eax,0xc
c0028474:	8b 00                	mov    eax,DWORD PTR [eax]
c0028476:	83 ec 0c             	sub    esp,0xc
c0028479:	8d 54 24 24          	lea    edx,[esp+0x24]
c002847d:	52                   	push   edx
c002847e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0028482:	52                   	push   edx
c0028483:	6a 00                	push   0x0
c0028485:	6a 04                	push   0x4
c0028487:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c002848e:	ff d0                	call   eax
c0028490:	83 c4 20             	add    esp,0x20
c0028493:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c002849a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00284a0:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00284a7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00284ae:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00284b1:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00284b8:	83 ec 0c             	sub    esp,0xc
c00284bb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00284c2:	e8 51 1f ff ff       	call   c001a418 <File::close()>
c00284c7:	83 c4 10             	add    esp,0x10
c00284ca:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00284d1:	ba 00 00 00 00       	mov    edx,0x0
c00284d6:	81 c4 3c 04 00 00    	add    esp,0x43c
c00284dc:	5b                   	pop    ebx
c00284dd:	5e                   	pop    esi
c00284de:	5f                   	pop    edi
c00284df:	5d                   	pop    ebp
c00284e0:	c3                   	ret    
c00284e1:	90                   	nop
c00284e2:	66 90                	xchg   ax,ax

c00284e4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00284e4:	57                   	push   edi
c00284e5:	56                   	push   esi
c00284e6:	53                   	push   ebx
c00284e7:	81 ec 50 02 00 00    	sub    esp,0x250
c00284ed:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00284f5:	74 0d                	je     c0028504 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00284f7:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00284ff:	75 0f                	jne    c0028510 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0028501:	8d 76 00             	lea    esi,[esi+0x0]
c0028504:	b8 04 00 00 00       	mov    eax,0x4
c0028509:	e9 3a 01 00 00       	jmp    c0028648 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c002850e:	66 90                	xchg   ax,ax
c0028510:	83 ec 08             	sub    esp,0x8
c0028513:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c002851a:	50                   	push   eax
c002851b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0028522:	e8 d3 c2 fd ff       	call   c00047fa <f_readdir>
c0028527:	83 c4 10             	add    esp,0x10
c002852a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0028531:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0028538:	83 ec 0c             	sub    esp,0xc
c002853b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0028542:	83 c0 16             	add    eax,0x16
c0028545:	50                   	push   eax
c0028546:	e8 25 80 fd ff       	call   c0000570 <strlen>
c002854b:	83 c4 10             	add    esp,0x10
c002854e:	ba 00 00 00 00       	mov    edx,0x0
c0028553:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028557:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c002855b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0028562:	0f b6 c0             	movzx  eax,al
c0028565:	83 e0 10             	and    eax,0x10
c0028568:	74 0a                	je     c0028574 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c002856a:	b8 02 00 00 00       	mov    eax,0x2
c002856f:	eb 0b                	jmp    c002857c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0028571:	8d 76 00             	lea    esi,[esi+0x0]
c0028574:	b8 01 00 00 00       	mov    eax,0x1
c0028579:	8d 76 00             	lea    esi,[esi+0x0]
c002857c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028580:	83 ec 08             	sub    esp,0x8
c0028583:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c002858a:	83 c0 16             	add    eax,0x16
c002858d:	50                   	push   eax
c002858e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028592:	83 c0 10             	add    eax,0x10
c0028595:	50                   	push   eax
c0028596:	e8 a5 80 fd ff       	call   c0000640 <strcpy>
c002859b:	83 c4 10             	add    esp,0x10
c002859e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00285a5:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00285ac:	8d 44 24 08          	lea    eax,[esp+0x8]
c00285b0:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00285b7:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00285be:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00285c5:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00285cc:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00285d3:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00285da:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00285e1:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00285e8:	89 c6                	mov    esi,eax
c00285ea:	89 d7                	mov    edi,edx
c00285ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00285ee:	89 c8                	mov    eax,ecx
c00285f0:	89 fa                	mov    edx,edi
c00285f2:	89 f3                	mov    ebx,esi
c00285f4:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00285fb:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0028602:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0028609:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0028610:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0028616:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c002861d:	0f be c0             	movsx  eax,al
c0028620:	85 c0                	test   eax,eax
c0028622:	75 08                	jne    c002862c <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0028624:	b8 07 00 00 00       	mov    eax,0x7
c0028629:	eb 1d                	jmp    c0028648 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c002862b:	90                   	nop
c002862c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0028633:	85 c0                	test   eax,eax
c0028635:	75 09                	jne    c0028640 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0028637:	b8 00 00 00 00       	mov    eax,0x0
c002863c:	eb 0a                	jmp    c0028648 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c002863e:	66 90                	xchg   ax,ax
c0028640:	b8 01 00 00 00       	mov    eax,0x1
c0028645:	8d 76 00             	lea    esi,[esi+0x0]
c0028648:	81 c4 50 02 00 00    	add    esp,0x250
c002864e:	5b                   	pop    ebx
c002864f:	5e                   	pop    esi
c0028650:	5f                   	pop    edi
c0028651:	c3                   	ret    
c0028652:	66 90                	xchg   ax,ax

c0028654 <FAT::read(void*, unsigned long, void*, int*)>:
c0028654:	83 ec 1c             	sub    esp,0x1c
c0028657:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002865c:	74 0a                	je     c0028668 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c002865e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0028663:	75 0b                	jne    c0028670 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0028665:	8d 76 00             	lea    esi,[esi+0x0]
c0028668:	b8 04 00 00 00       	mov    eax,0x4
c002866d:	eb 41                	jmp    c00286b0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c002866f:	90                   	nop
c0028670:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028674:	50                   	push   eax
c0028675:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028679:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002867d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028681:	e8 9b b9 fd ff       	call   c0004021 <f_read>
c0028686:	83 c4 10             	add    esp,0x10
c0028689:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002868d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028691:	89 c2                	mov    edx,eax
c0028693:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0028697:	89 10                	mov    DWORD PTR [eax],edx
c0028699:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002869d:	85 c0                	test   eax,eax
c002869f:	75 07                	jne    c00286a8 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00286a1:	b8 00 00 00 00       	mov    eax,0x0
c00286a6:	eb 08                	jmp    c00286b0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00286a8:	b8 01 00 00 00       	mov    eax,0x1
c00286ad:	8d 76 00             	lea    esi,[esi+0x0]
c00286b0:	83 c4 1c             	add    esp,0x1c
c00286b3:	c3                   	ret    

c00286b4 <FAT::write(void*, unsigned long, void*, int*)>:
c00286b4:	83 ec 1c             	sub    esp,0x1c
c00286b7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00286bc:	74 0a                	je     c00286c8 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00286be:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00286c3:	75 0b                	jne    c00286d0 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00286c5:	8d 76 00             	lea    esi,[esi+0x0]
c00286c8:	b8 04 00 00 00       	mov    eax,0x4
c00286cd:	eb 41                	jmp    c0028710 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00286cf:	90                   	nop
c00286d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00286d4:	50                   	push   eax
c00286d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00286d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00286dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00286e1:	e8 3a bb fd ff       	call   c0004220 <f_write>
c00286e6:	83 c4 10             	add    esp,0x10
c00286e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00286ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00286f1:	89 c2                	mov    edx,eax
c00286f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00286f7:	89 10                	mov    DWORD PTR [eax],edx
c00286f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00286fd:	85 c0                	test   eax,eax
c00286ff:	75 07                	jne    c0028708 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0028701:	b8 00 00 00 00       	mov    eax,0x0
c0028706:	eb 08                	jmp    c0028710 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0028708:	b8 01 00 00 00       	mov    eax,0x1
c002870d:	8d 76 00             	lea    esi,[esi+0x0]
c0028710:	83 c4 1c             	add    esp,0x1c
c0028713:	c3                   	ret    

c0028714 <FAT::close(void*)>:
c0028714:	83 ec 1c             	sub    esp,0x1c
c0028717:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002871c:	75 0a                	jne    c0028728 <FAT::close(void*)+0x14>
c002871e:	b8 04 00 00 00       	mov    eax,0x4
c0028723:	eb 3f                	jmp    c0028764 <FAT::close(void*)+0x50>
c0028725:	8d 76 00             	lea    esi,[esi+0x0]
c0028728:	83 ec 0c             	sub    esp,0xc
c002872b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002872f:	e8 f9 bd fd ff       	call   c000452d <f_close>
c0028734:	83 c4 10             	add    esp,0x10
c0028737:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002873b:	83 ec 0c             	sub    esp,0xc
c002873e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028742:	e8 cf db fe ff       	call   c0016316 <free>
c0028747:	83 c4 10             	add    esp,0x10
c002874a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002874e:	85 c0                	test   eax,eax
c0028750:	75 0a                	jne    c002875c <FAT::close(void*)+0x48>
c0028752:	b8 00 00 00 00       	mov    eax,0x0
c0028757:	eb 0b                	jmp    c0028764 <FAT::close(void*)+0x50>
c0028759:	8d 76 00             	lea    esi,[esi+0x0]
c002875c:	b8 01 00 00 00       	mov    eax,0x1
c0028761:	8d 76 00             	lea    esi,[esi+0x0]
c0028764:	83 c4 1c             	add    esp,0x1c
c0028767:	c3                   	ret    

c0028768 <FAT::closeDir(void*)>:
c0028768:	83 ec 1c             	sub    esp,0x1c
c002876b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028770:	75 0a                	jne    c002877c <FAT::closeDir(void*)+0x14>
c0028772:	b8 04 00 00 00       	mov    eax,0x4
c0028777:	eb 3f                	jmp    c00287b8 <FAT::closeDir(void*)+0x50>
c0028779:	8d 76 00             	lea    esi,[esi+0x0]
c002877c:	83 ec 0c             	sub    esp,0xc
c002877f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028783:	e8 50 c0 fd ff       	call   c00047d8 <f_closedir>
c0028788:	83 c4 10             	add    esp,0x10
c002878b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002878f:	83 ec 0c             	sub    esp,0xc
c0028792:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028796:	e8 7b db fe ff       	call   c0016316 <free>
c002879b:	83 c4 10             	add    esp,0x10
c002879e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00287a2:	85 c0                	test   eax,eax
c00287a4:	75 0a                	jne    c00287b0 <FAT::closeDir(void*)+0x48>
c00287a6:	b8 00 00 00 00       	mov    eax,0x0
c00287ab:	eb 0b                	jmp    c00287b8 <FAT::closeDir(void*)+0x50>
c00287ad:	8d 76 00             	lea    esi,[esi+0x0]
c00287b0:	b8 01 00 00 00       	mov    eax,0x1
c00287b5:	8d 76 00             	lea    esi,[esi+0x0]
c00287b8:	83 c4 1c             	add    esp,0x1c
c00287bb:	c3                   	ret    

c00287bc <FAT::truncate(void*, unsigned long long)>:
c00287bc:	83 ec 2c             	sub    esp,0x2c
c00287bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00287c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00287c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00287cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00287cf:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00287d4:	75 0a                	jne    c00287e0 <FAT::truncate(void*, unsigned long long)+0x24>
c00287d6:	b8 04 00 00 00       	mov    eax,0x4
c00287db:	eb 47                	jmp    c0028824 <FAT::truncate(void*, unsigned long long)+0x68>
c00287dd:	8d 76 00             	lea    esi,[esi+0x0]
c00287e0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00287e4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00287e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00287eb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00287f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00287f7:	83 ec 08             	sub    esp,0x8
c00287fa:	50                   	push   eax
c00287fb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00287ff:	e8 58 bd fd ff       	call   c000455c <f_lseek>
c0028804:	83 c4 10             	add    esp,0x10
c0028807:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002880b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002880f:	85 c0                	test   eax,eax
c0028811:	75 09                	jne    c002881c <FAT::truncate(void*, unsigned long long)+0x60>
c0028813:	b8 00 00 00 00       	mov    eax,0x0
c0028818:	eb 0a                	jmp    c0028824 <FAT::truncate(void*, unsigned long long)+0x68>
c002881a:	66 90                	xchg   ax,ax
c002881c:	b8 01 00 00 00       	mov    eax,0x1
c0028821:	8d 76 00             	lea    esi,[esi+0x0]
c0028824:	83 c4 2c             	add    esp,0x2c
c0028827:	c3                   	ret    

c0028828 <FAT::seek(void*, unsigned long long)>:
c0028828:	83 ec 2c             	sub    esp,0x2c
c002882b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002882f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028833:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0028837:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002883b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0028840:	75 0a                	jne    c002884c <FAT::seek(void*, unsigned long long)+0x24>
c0028842:	b8 04 00 00 00       	mov    eax,0x4
c0028847:	eb 33                	jmp    c002887c <FAT::seek(void*, unsigned long long)+0x54>
c0028849:	8d 76 00             	lea    esi,[esi+0x0]
c002884c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028850:	83 ec 08             	sub    esp,0x8
c0028853:	50                   	push   eax
c0028854:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028858:	e8 ff bc fd ff       	call   c000455c <f_lseek>
c002885d:	83 c4 10             	add    esp,0x10
c0028860:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0028864:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0028868:	85 c0                	test   eax,eax
c002886a:	75 08                	jne    c0028874 <FAT::seek(void*, unsigned long long)+0x4c>
c002886c:	b8 00 00 00 00       	mov    eax,0x0
c0028871:	eb 09                	jmp    c002887c <FAT::seek(void*, unsigned long long)+0x54>
c0028873:	90                   	nop
c0028874:	b8 01 00 00 00       	mov    eax,0x1
c0028879:	8d 76 00             	lea    esi,[esi+0x0]
c002887c:	83 c4 2c             	add    esp,0x2c
c002887f:	c3                   	ret    

c0028880 <fatWrapperReadDisk>:
c0028880:	53                   	push   ebx
c0028881:	83 ec 18             	sub    esp,0x18
c0028884:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028888:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002888c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028891:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0028898:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002889c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00288a0:	ba 00 00 00 00       	mov    edx,0x0
c00288a5:	83 ec 0c             	sub    esp,0xc
c00288a8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00288ac:	53                   	push   ebx
c00288ad:	52                   	push   edx
c00288ae:	50                   	push   eax
c00288af:	51                   	push   ecx
c00288b0:	e8 53 3d ff ff       	call   c001c608 <LogicalDisk::read(unsigned long long, int, void*)>
c00288b5:	83 c4 20             	add    esp,0x20
c00288b8:	83 c4 18             	add    esp,0x18
c00288bb:	5b                   	pop    ebx
c00288bc:	c3                   	ret    
c00288bd:	8d 76 00             	lea    esi,[esi+0x0]

c00288c0 <fatWrapperWriteDisk>:
c00288c0:	53                   	push   ebx
c00288c1:	83 ec 18             	sub    esp,0x18
c00288c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00288c8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00288cc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00288d1:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c00288d8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00288dc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00288e0:	ba 00 00 00 00       	mov    edx,0x0
c00288e5:	83 ec 0c             	sub    esp,0xc
c00288e8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00288ec:	53                   	push   ebx
c00288ed:	52                   	push   edx
c00288ee:	50                   	push   eax
c00288ef:	51                   	push   ecx
c00288f0:	e8 7f 3d ff ff       	call   c001c674 <LogicalDisk::write(unsigned long long, int, void*)>
c00288f5:	83 c4 20             	add    esp,0x20
c00288f8:	83 c4 18             	add    esp,0x18
c00288fb:	5b                   	pop    ebx
c00288fc:	c3                   	ret    
c00288fd:	8d 76 00             	lea    esi,[esi+0x0]

c0028900 <fatWrapperIoctl>:
c0028900:	53                   	push   ebx
c0028901:	83 ec 28             	sub    esp,0x28
c0028904:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0028908:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002890c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0028910:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0028914:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028919:	83 f8 02             	cmp    eax,0x2
c002891c:	75 32                	jne    c0028950 <fatWrapperIoctl+0x50>
c002891e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028922:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0028926:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002892b:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0028932:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028938:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002893e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0028942:	66 89 02             	mov    WORD PTR [edx],ax
c0028945:	b8 00 00 00 00       	mov    eax,0x0
c002894a:	e9 c5 00 00 00       	jmp    c0028a14 <fatWrapperIoctl+0x114>
c002894f:	90                   	nop
c0028950:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028955:	83 f8 01             	cmp    eax,0x1
c0028958:	75 6a                	jne    c00289c4 <fatWrapperIoctl+0xc4>
c002895a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002895e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0028962:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028967:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c002896e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028974:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c002897a:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0028980:	89 c8                	mov    eax,ecx
c0028982:	89 da                	mov    edx,ebx
c0028984:	0f a4 c2 0a          	shld   edx,eax,0xa
c0028988:	c1 e0 0a             	shl    eax,0xa
c002898b:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0028990:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c0028997:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c002899d:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00289a3:	89 cb                	mov    ebx,ecx
c00289a5:	c1 fb 1f             	sar    ebx,0x1f
c00289a8:	53                   	push   ebx
c00289a9:	51                   	push   ecx
c00289aa:	52                   	push   edx
c00289ab:	50                   	push   eax
c00289ac:	e8 af 5b 00 00       	call   c002e560 <__udivdi3>
c00289b1:	83 c4 10             	add    esp,0x10
c00289b4:	89 c2                	mov    edx,eax
c00289b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00289ba:	89 10                	mov    DWORD PTR [eax],edx
c00289bc:	b8 00 00 00 00       	mov    eax,0x0
c00289c1:	eb 51                	jmp    c0028a14 <fatWrapperIoctl+0x114>
c00289c3:	90                   	nop
c00289c4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00289c9:	85 c0                	test   eax,eax
c00289cb:	75 07                	jne    c00289d4 <fatWrapperIoctl+0xd4>
c00289cd:	b8 00 00 00 00       	mov    eax,0x0
c00289d2:	eb 40                	jmp    c0028a14 <fatWrapperIoctl+0x114>
c00289d4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00289d9:	83 f8 03             	cmp    eax,0x3
c00289dc:	75 1a                	jne    c00289f8 <fatWrapperIoctl+0xf8>
c00289de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00289e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00289e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00289ea:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00289f0:	b8 00 00 00 00       	mov    eax,0x0
c00289f5:	eb 1d                	jmp    c0028a14 <fatWrapperIoctl+0x114>
c00289f7:	90                   	nop
c00289f8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00289fd:	83 f8 04             	cmp    eax,0x4
c0028a00:	75 0a                	jne    c0028a0c <fatWrapperIoctl+0x10c>
c0028a02:	b8 00 00 00 00       	mov    eax,0x0
c0028a07:	eb 0b                	jmp    c0028a14 <fatWrapperIoctl+0x114>
c0028a09:	8d 76 00             	lea    esi,[esi+0x0]
c0028a0c:	b8 04 00 00 00       	mov    eax,0x4
c0028a11:	8d 76 00             	lea    esi,[esi+0x0]
c0028a14:	83 c4 28             	add    esp,0x28
c0028a17:	5b                   	pop    ebx
c0028a18:	c3                   	ret    
c0028a19:	90                   	nop
c0028a1a:	66 90                	xchg   ax,ax

c0028a1c <FAT::FAT()>:
c0028a1c:	83 ec 1c             	sub    esp,0x1c
c0028a1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a23:	83 ec 0c             	sub    esp,0xc
c0028a26:	50                   	push   eax
c0028a27:	e8 ce 15 ff ff       	call   c0019ffa <Filesystem::Filesystem()>
c0028a2c:	83 c4 10             	add    esp,0x10
c0028a2f:	ba e8 31 03 c0       	mov    edx,0xc00331e8
c0028a34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a38:	89 10                	mov    DWORD PTR [eax],edx
c0028a3a:	c7 05 80 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040280,0x0
c0028a44:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0028a4c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0028a51:	7f 19                	jg     c0028a6c <FAT::FAT()+0x50>
c0028a53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028a57:	c7 04 85 a0 02 04 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffbfd60],0xffffffff
c0028a62:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0028a67:	eb e3                	jmp    c0028a4c <FAT::FAT()+0x30>
c0028a69:	8d 76 00             	lea    esi,[esi+0x0]
c0028a6c:	90                   	nop
c0028a6d:	83 c4 1c             	add    esp,0x1c
c0028a70:	c3                   	ret    
c0028a71:	90                   	nop
c0028a72:	66 90                	xchg   ax,ax

c0028a74 <FAT::fixFilepath(char*)>:
c0028a74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028a78:	8a 00                	mov    al,BYTE PTR [eax]
c0028a7a:	0f be c0             	movsx  eax,al
c0028a7d:	83 f8 40             	cmp    eax,0x40
c0028a80:	7e 2e                	jle    c0028ab0 <FAT::fixFilepath(char*)+0x3c>
c0028a82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028a86:	8a 00                	mov    al,BYTE PTR [eax]
c0028a88:	83 e8 41             	sub    eax,0x41
c0028a8b:	88 c2                	mov    dl,al
c0028a8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028a91:	88 10                	mov    BYTE PTR [eax],dl
c0028a93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028a97:	8a 00                	mov    al,BYTE PTR [eax]
c0028a99:	0f be c0             	movsx  eax,al
c0028a9c:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028aa3:	83 c0 30             	add    eax,0x30
c0028aa6:	88 c2                	mov    dl,al
c0028aa8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028aac:	88 10                	mov    BYTE PTR [eax],dl
c0028aae:	66 90                	xchg   ax,ax
c0028ab0:	90                   	nop
c0028ab1:	c3                   	ret    
c0028ab2:	66 90                	xchg   ax,ax

c0028ab4 <FAT::open(char const*, void**, FileOpenMode)>:
c0028ab4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028aba:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028ac2:	74 0c                	je     c0028ad0 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0028ac4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0028acc:	75 0e                	jne    c0028adc <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0028ace:	66 90                	xchg   ax,ax
c0028ad0:	b8 04 00 00 00       	mov    eax,0x4
c0028ad5:	e9 46 01 00 00       	jmp    c0028c20 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0028ada:	66 90                	xchg   ax,ax
c0028adc:	83 ec 08             	sub    esp,0x8
c0028adf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028ae6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028aea:	50                   	push   eax
c0028aeb:	e8 50 7b fd ff       	call   c0000640 <strcpy>
c0028af0:	83 c4 10             	add    esp,0x10
c0028af3:	83 ec 08             	sub    esp,0x8
c0028af6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0028afa:	50                   	push   eax
c0028afb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028b02:	e8 6d ff ff ff       	call   c0028a74 <FAT::fixFilepath(char*)>
c0028b07:	83 c4 10             	add    esp,0x10
c0028b0a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0028b12:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028b19:	83 e0 01             	and    eax,0x1
c0028b1c:	74 12                	je     c0028b30 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0028b1e:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028b25:	83 c8 01             	or     eax,0x1
c0028b28:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028b2f:	90                   	nop
c0028b30:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028b37:	83 e0 04             	and    eax,0x4
c0028b3a:	74 24                	je     c0028b60 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0028b3c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028b43:	83 c8 30             	or     eax,0x30
c0028b46:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028b4d:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028b54:	83 c8 02             	or     eax,0x2
c0028b57:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028b5e:	66 90                	xchg   ax,ax
c0028b60:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028b67:	83 e0 02             	and    eax,0x2
c0028b6a:	74 14                	je     c0028b80 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0028b6c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028b73:	83 c8 02             	or     eax,0x2
c0028b76:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0028b80:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028b87:	83 e0 08             	and    eax,0x8
c0028b8a:	74 14                	je     c0028ba0 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0028b8c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028b93:	83 c8 04             	or     eax,0x4
c0028b96:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028b9d:	8d 76 00             	lea    esi,[esi+0x0]
c0028ba0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028ba7:	83 e0 10             	and    eax,0x10
c0028baa:	74 14                	je     c0028bc0 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0028bac:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028bb3:	83 c8 08             	or     eax,0x8
c0028bb6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028bbd:	8d 76 00             	lea    esi,[esi+0x0]
c0028bc0:	83 ec 0c             	sub    esp,0xc
c0028bc3:	68 28 02 00 00       	push   0x228
c0028bc8:	e8 39 d7 fe ff       	call   c0016306 <malloc>
c0028bcd:	83 c4 10             	add    esp,0x10
c0028bd0:	89 c2                	mov    edx,eax
c0028bd2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028bd9:	89 10                	mov    DWORD PTR [eax],edx
c0028bdb:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0028be3:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028bea:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bec:	83 ec 04             	sub    esp,0x4
c0028bef:	52                   	push   edx
c0028bf0:	8d 54 24 10          	lea    edx,[esp+0x10]
c0028bf4:	52                   	push   edx
c0028bf5:	50                   	push   eax
c0028bf6:	e8 63 b1 fd ff       	call   c0003d5e <f_open>
c0028bfb:	83 c4 10             	add    esp,0x10
c0028bfe:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0028c05:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0028c0d:	74 09                	je     c0028c18 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0028c0f:	b8 01 00 00 00       	mov    eax,0x1
c0028c14:	eb 0a                	jmp    c0028c20 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0028c16:	66 90                	xchg   ax,ax
c0028c18:	b8 00 00 00 00       	mov    eax,0x0
c0028c1d:	8d 76 00             	lea    esi,[esi+0x0]
c0028c20:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028c26:	c3                   	ret    
c0028c27:	90                   	nop

c0028c28 <FAT::openDir(char const*, void**)>:
c0028c28:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028c2e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028c36:	74 0c                	je     c0028c44 <FAT::openDir(char const*, void**)+0x1c>
c0028c38:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0028c40:	75 0e                	jne    c0028c50 <FAT::openDir(char const*, void**)+0x28>
c0028c42:	66 90                	xchg   ax,ax
c0028c44:	b8 04 00 00 00       	mov    eax,0x4
c0028c49:	e9 82 00 00 00       	jmp    c0028cd0 <FAT::openDir(char const*, void**)+0xa8>
c0028c4e:	66 90                	xchg   ax,ax
c0028c50:	83 ec 08             	sub    esp,0x8
c0028c53:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028c5a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028c5e:	50                   	push   eax
c0028c5f:	e8 dc 79 fd ff       	call   c0000640 <strcpy>
c0028c64:	83 c4 10             	add    esp,0x10
c0028c67:	83 ec 08             	sub    esp,0x8
c0028c6a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028c6e:	50                   	push   eax
c0028c6f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028c76:	e8 f9 fd ff ff       	call   c0028a74 <FAT::fixFilepath(char*)>
c0028c7b:	83 c4 10             	add    esp,0x10
c0028c7e:	83 ec 0c             	sub    esp,0xc
c0028c81:	6a 30                	push   0x30
c0028c83:	e8 7e d6 fe ff       	call   c0016306 <malloc>
c0028c88:	83 c4 10             	add    esp,0x10
c0028c8b:	89 c2                	mov    edx,eax
c0028c8d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028c94:	89 10                	mov    DWORD PTR [eax],edx
c0028c96:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028c9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c9f:	83 ec 08             	sub    esp,0x8
c0028ca2:	8d 54 24 14          	lea    edx,[esp+0x14]
c0028ca6:	52                   	push   edx
c0028ca7:	50                   	push   eax
c0028ca8:	e8 60 ba fd ff       	call   c000470d <f_opendir>
c0028cad:	83 c4 10             	add    esp,0x10
c0028cb0:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0028cb7:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0028cbf:	74 07                	je     c0028cc8 <FAT::openDir(char const*, void**)+0xa0>
c0028cc1:	b8 01 00 00 00       	mov    eax,0x1
c0028cc6:	eb 08                	jmp    c0028cd0 <FAT::openDir(char const*, void**)+0xa8>
c0028cc8:	b8 00 00 00 00       	mov    eax,0x0
c0028ccd:	8d 76 00             	lea    esi,[esi+0x0]
c0028cd0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028cd6:	c3                   	ret    
c0028cd7:	90                   	nop

c0028cd8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0028cd8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0028cde:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0028ce6:	75 0c                	jne    c0028cf4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0028ce8:	b8 04 00 00 00       	mov    eax,0x4
c0028ced:	e9 d6 00 00 00       	jmp    c0028dc8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028cf2:	66 90                	xchg   ax,ax
c0028cf4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0028cfc:	75 0a                	jne    c0028d08 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0028cfe:	b8 04 00 00 00       	mov    eax,0x4
c0028d03:	e9 c0 00 00 00       	jmp    c0028dc8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028d08:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0028d10:	75 0a                	jne    c0028d1c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0028d12:	b8 04 00 00 00       	mov    eax,0x4
c0028d17:	e9 ac 00 00 00       	jmp    c0028dc8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028d1c:	83 ec 08             	sub    esp,0x8
c0028d1f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0028d26:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0028d2d:	50                   	push   eax
c0028d2e:	e8 0d 79 fd ff       	call   c0000640 <strcpy>
c0028d33:	83 c4 10             	add    esp,0x10
c0028d36:	83 ec 08             	sub    esp,0x8
c0028d39:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0028d40:	50                   	push   eax
c0028d41:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0028d48:	e8 27 fd ff ff       	call   c0028a74 <FAT::fixFilepath(char*)>
c0028d4d:	83 c4 10             	add    esp,0x10
c0028d50:	83 ec 08             	sub    esp,0x8
c0028d53:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0028d57:	50                   	push   eax
c0028d58:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0028d5f:	50                   	push   eax
c0028d60:	e8 27 bb fd ff       	call   c000488c <f_stat>
c0028d65:	83 c4 10             	add    esp,0x10
c0028d68:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0028d6f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0028d76:	85 c0                	test   eax,eax
c0028d78:	74 0a                	je     c0028d84 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0028d7a:	83 f8 04             	cmp    eax,0x4
c0028d7d:	74 39                	je     c0028db8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0028d7f:	eb 3f                	jmp    c0028dc0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0028d81:	8d 76 00             	lea    esi,[esi+0x0]
c0028d84:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0028d88:	0f b6 c0             	movzx  eax,al
c0028d8b:	83 e0 10             	and    eax,0x10
c0028d8e:	0f 95 c2             	setne  dl
c0028d91:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0028d98:	88 10                	mov    BYTE PTR [eax],dl
c0028d9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d9e:	ba 00 00 00 00       	mov    edx,0x0
c0028da3:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0028daa:	89 01                	mov    DWORD PTR [ecx],eax
c0028dac:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0028daf:	b8 00 00 00 00       	mov    eax,0x0
c0028db4:	eb 12                	jmp    c0028dc8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028db6:	66 90                	xchg   ax,ax
c0028db8:	b8 02 00 00 00       	mov    eax,0x2
c0028dbd:	eb 09                	jmp    c0028dc8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028dbf:	90                   	nop
c0028dc0:	b8 01 00 00 00       	mov    eax,0x1
c0028dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0028dc8:	81 c4 2c 02 00 00    	add    esp,0x22c
c0028dce:	c3                   	ret    
c0028dcf:	90                   	nop

c0028dd0 <FAT::unlink(char const*)>:
c0028dd0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028dd6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028dde:	75 08                	jne    c0028de8 <FAT::unlink(char const*)+0x18>
c0028de0:	b8 04 00 00 00       	mov    eax,0x4
c0028de5:	eb 61                	jmp    c0028e48 <FAT::unlink(char const*)+0x78>
c0028de7:	90                   	nop
c0028de8:	83 ec 08             	sub    esp,0x8
c0028deb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028df2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028df6:	50                   	push   eax
c0028df7:	e8 44 78 fd ff       	call   c0000640 <strcpy>
c0028dfc:	83 c4 10             	add    esp,0x10
c0028dff:	83 ec 08             	sub    esp,0x8
c0028e02:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028e06:	50                   	push   eax
c0028e07:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028e0e:	e8 61 fc ff ff       	call   c0028a74 <FAT::fixFilepath(char*)>
c0028e13:	83 c4 10             	add    esp,0x10
c0028e16:	83 ec 0c             	sub    esp,0xc
c0028e19:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028e1d:	50                   	push   eax
c0028e1e:	e8 db bc fd ff       	call   c0004afe <f_unlink>
c0028e23:	83 c4 10             	add    esp,0x10
c0028e26:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0028e2d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0028e34:	85 c0                	test   eax,eax
c0028e36:	75 08                	jne    c0028e40 <FAT::unlink(char const*)+0x70>
c0028e38:	b8 00 00 00 00       	mov    eax,0x0
c0028e3d:	eb 09                	jmp    c0028e48 <FAT::unlink(char const*)+0x78>
c0028e3f:	90                   	nop
c0028e40:	b8 01 00 00 00       	mov    eax,0x1
c0028e45:	8d 76 00             	lea    esi,[esi+0x0]
c0028e48:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028e4e:	c3                   	ret    
c0028e4f:	90                   	nop

c0028e50 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0028e50:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0028e56:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0028e5d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0028e64:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0028e68:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0028e6c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0028e74:	75 0a                	jne    c0028e80 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0028e76:	b8 04 00 00 00       	mov    eax,0x4
c0028e7b:	e9 7c 01 00 00       	jmp    c0028ffc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0028e80:	83 ec 08             	sub    esp,0x8
c0028e83:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0028e8a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0028e8e:	50                   	push   eax
c0028e8f:	e8 ac 77 fd ff       	call   c0000640 <strcpy>
c0028e94:	83 c4 10             	add    esp,0x10
c0028e97:	83 ec 08             	sub    esp,0x8
c0028e9a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0028e9e:	50                   	push   eax
c0028e9f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0028ea6:	e8 c9 fb ff ff       	call   c0028a74 <FAT::fixFilepath(char*)>
c0028eab:	83 c4 10             	add    esp,0x10
c0028eae:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0028eb6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0028ebe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028ec3:	83 e0 01             	and    eax,0x1
c0028ec6:	74 14                	je     c0028edc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c0028ec8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0028ecf:	83 c8 01             	or     eax,0x1
c0028ed2:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0028ed9:	8d 76 00             	lea    esi,[esi+0x0]
c0028edc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028ee1:	83 e0 02             	and    eax,0x2
c0028ee4:	74 12                	je     c0028ef8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c0028ee6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0028eed:	83 c8 20             	or     eax,0x20
c0028ef0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0028ef7:	90                   	nop
c0028ef8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028efd:	83 e0 04             	and    eax,0x4
c0028f00:	74 12                	je     c0028f14 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c0028f02:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0028f09:	83 c8 04             	or     eax,0x4
c0028f0c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0028f13:	90                   	nop
c0028f14:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028f19:	83 e0 08             	and    eax,0x8
c0028f1c:	74 12                	je     c0028f30 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c0028f1e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0028f25:	83 c8 02             	or     eax,0x2
c0028f28:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0028f2f:	90                   	nop
c0028f30:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028f35:	83 e0 01             	and    eax,0x1
c0028f38:	74 12                	je     c0028f4c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0028f3a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0028f41:	83 c8 01             	or     eax,0x1
c0028f44:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0028f4b:	90                   	nop
c0028f4c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028f51:	83 e0 02             	and    eax,0x2
c0028f54:	74 12                	je     c0028f68 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c0028f56:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0028f5d:	83 c8 20             	or     eax,0x20
c0028f60:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0028f67:	90                   	nop
c0028f68:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028f6d:	83 e0 04             	and    eax,0x4
c0028f70:	74 12                	je     c0028f84 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c0028f72:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0028f79:	83 c8 04             	or     eax,0x4
c0028f7c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0028f83:	90                   	nop
c0028f84:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028f89:	83 e0 08             	and    eax,0x8
c0028f8c:	74 12                	je     c0028fa0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c0028f8e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0028f95:	83 c8 02             	or     eax,0x2
c0028f98:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0028f9f:	90                   	nop
c0028fa0:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0028fa7:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0028fae:	09 d0                	or     eax,edx
c0028fb0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0028fb7:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0028fbf:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0028fc7:	83 ec 04             	sub    esp,0x4
c0028fca:	52                   	push   edx
c0028fcb:	50                   	push   eax
c0028fcc:	8d 44 24 24          	lea    eax,[esp+0x24]
c0028fd0:	50                   	push   eax
c0028fd1:	e8 9d bf fd ff       	call   c0004f73 <f_chmod>
c0028fd6:	83 c4 10             	add    esp,0x10
c0028fd9:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0028fe0:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0028fe7:	85 c0                	test   eax,eax
c0028fe9:	75 09                	jne    c0028ff4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c0028feb:	b8 00 00 00 00       	mov    eax,0x0
c0028ff0:	eb 0a                	jmp    c0028ffc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0028ff2:	66 90                	xchg   ax,ax
c0028ff4:	b8 01 00 00 00       	mov    eax,0x1
c0028ff9:	8d 76 00             	lea    esi,[esi+0x0]
c0028ffc:	81 c4 2c 01 00 00    	add    esp,0x12c
c0029002:	c3                   	ret    
c0029003:	90                   	nop

c0029004 <FAT::rename(char const*, char const*)>:
c0029004:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002900a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0029012:	74 0c                	je     c0029020 <FAT::rename(char const*, char const*)+0x1c>
c0029014:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c002901c:	75 0e                	jne    c002902c <FAT::rename(char const*, char const*)+0x28>
c002901e:	66 90                	xchg   ax,ax
c0029020:	b8 04 00 00 00       	mov    eax,0x4
c0029025:	e9 9e 00 00 00       	jmp    c00290c8 <FAT::rename(char const*, char const*)+0xc4>
c002902a:	66 90                	xchg   ax,ax
c002902c:	83 ec 08             	sub    esp,0x8
c002902f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0029036:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002903d:	50                   	push   eax
c002903e:	e8 fd 75 fd ff       	call   c0000640 <strcpy>
c0029043:	83 c4 10             	add    esp,0x10
c0029046:	83 ec 08             	sub    esp,0x8
c0029049:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0029050:	50                   	push   eax
c0029051:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0029058:	e8 17 fa ff ff       	call   c0028a74 <FAT::fixFilepath(char*)>
c002905d:	83 c4 10             	add    esp,0x10
c0029060:	83 ec 08             	sub    esp,0x8
c0029063:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c002906a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002906e:	50                   	push   eax
c002906f:	e8 cc 75 fd ff       	call   c0000640 <strcpy>
c0029074:	83 c4 10             	add    esp,0x10
c0029077:	83 ec 08             	sub    esp,0x8
c002907a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002907e:	50                   	push   eax
c002907f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0029086:	e8 e9 f9 ff ff       	call   c0028a74 <FAT::fixFilepath(char*)>
c002908b:	83 c4 10             	add    esp,0x10
c002908e:	83 ec 08             	sub    esp,0x8
c0029091:	8d 44 24 14          	lea    eax,[esp+0x14]
c0029095:	50                   	push   eax
c0029096:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002909d:	50                   	push   eax
c002909e:	e8 18 bd fd ff       	call   c0004dbb <f_rename>
c00290a3:	83 c4 10             	add    esp,0x10
c00290a6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00290ad:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00290b4:	85 c0                	test   eax,eax
c00290b6:	75 08                	jne    c00290c0 <FAT::rename(char const*, char const*)+0xbc>
c00290b8:	b8 00 00 00 00       	mov    eax,0x0
c00290bd:	eb 09                	jmp    c00290c8 <FAT::rename(char const*, char const*)+0xc4>
c00290bf:	90                   	nop
c00290c0:	b8 01 00 00 00       	mov    eax,0x1
c00290c5:	8d 76 00             	lea    esi,[esi+0x0]
c00290c8:	81 c4 1c 02 00 00    	add    esp,0x21c
c00290ce:	c3                   	ret    
c00290cf:	90                   	nop

c00290d0 <FAT::mkdir(char const*)>:
c00290d0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00290d6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00290de:	75 08                	jne    c00290e8 <FAT::mkdir(char const*)+0x18>
c00290e0:	b8 04 00 00 00       	mov    eax,0x4
c00290e5:	eb 61                	jmp    c0029148 <FAT::mkdir(char const*)+0x78>
c00290e7:	90                   	nop
c00290e8:	83 ec 08             	sub    esp,0x8
c00290eb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00290f2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00290f6:	50                   	push   eax
c00290f7:	e8 44 75 fd ff       	call   c0000640 <strcpy>
c00290fc:	83 c4 10             	add    esp,0x10
c00290ff:	83 ec 08             	sub    esp,0x8
c0029102:	8d 44 24 14          	lea    eax,[esp+0x14]
c0029106:	50                   	push   eax
c0029107:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002910e:	e8 61 f9 ff ff       	call   c0028a74 <FAT::fixFilepath(char*)>
c0029113:	83 c4 10             	add    esp,0x10
c0029116:	83 ec 0c             	sub    esp,0xc
c0029119:	8d 44 24 18          	lea    eax,[esp+0x18]
c002911d:	50                   	push   eax
c002911e:	e8 fd ba fd ff       	call   c0004c20 <f_mkdir>
c0029123:	83 c4 10             	add    esp,0x10
c0029126:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002912d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0029134:	85 c0                	test   eax,eax
c0029136:	75 08                	jne    c0029140 <FAT::mkdir(char const*)+0x70>
c0029138:	b8 00 00 00 00       	mov    eax,0x0
c002913d:	eb 09                	jmp    c0029148 <FAT::mkdir(char const*)+0x78>
c002913f:	90                   	nop
c0029140:	b8 01 00 00 00       	mov    eax,0x1
c0029145:	8d 76 00             	lea    esi,[esi+0x0]
c0029148:	81 c4 1c 01 00 00    	add    esp,0x11c
c002914e:	c3                   	ret    
c002914f:	90                   	nop

c0029150 <FAT::exists(char const*)>:
c0029150:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0029156:	83 ec 08             	sub    esp,0x8
c0029159:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0029160:	8d 44 24 10          	lea    eax,[esp+0x10]
c0029164:	50                   	push   eax
c0029165:	e8 d6 74 fd ff       	call   c0000640 <strcpy>
c002916a:	83 c4 10             	add    esp,0x10
c002916d:	83 ec 08             	sub    esp,0x8
c0029170:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0029174:	50                   	push   eax
c0029175:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002917c:	e8 f3 f8 ff ff       	call   c0028a74 <FAT::fixFilepath(char*)>
c0029181:	83 c4 10             	add    esp,0x10
c0029184:	83 ec 08             	sub    esp,0x8
c0029187:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c002918e:	50                   	push   eax
c002918f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0029193:	50                   	push   eax
c0029194:	e8 f3 b6 fd ff       	call   c000488c <f_stat>
c0029199:	83 c4 10             	add    esp,0x10
c002919c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00291a3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00291aa:	85 c0                	test   eax,eax
c00291ac:	75 06                	jne    c00291b4 <FAT::exists(char const*)+0x64>
c00291ae:	b0 01                	mov    al,0x1
c00291b0:	eb 06                	jmp    c00291b8 <FAT::exists(char const*)+0x68>
c00291b2:	66 90                	xchg   ax,ax
c00291b4:	b0 00                	mov    al,0x0
c00291b6:	66 90                	xchg   ax,ax
c00291b8:	81 c4 2c 02 00 00    	add    esp,0x22c
c00291be:	c3                   	ret    
c00291bf:	90                   	nop

c00291c0 <isoReadDiscSectorHelper>:
c00291c0:	83 ec 2c             	sub    esp,0x2c
c00291c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00291c7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00291cb:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00291d0:	83 e8 41             	sub    eax,0x41
c00291d3:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c00291da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00291de:	ba 00 00 00 00       	mov    edx,0x0
c00291e3:	83 ec 0c             	sub    esp,0xc
c00291e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00291ea:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00291ee:	52                   	push   edx
c00291ef:	50                   	push   eax
c00291f0:	51                   	push   ecx
c00291f1:	e8 12 34 ff ff       	call   c001c608 <LogicalDisk::read(unsigned long long, int, void*)>
c00291f6:	83 c4 20             	add    esp,0x20
c00291f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00291fd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0029202:	74 0c                	je     c0029210 <isoReadDiscSectorHelper+0x50>
c0029204:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0029208:	c1 e0 0b             	shl    eax,0xb
c002920b:	eb 0b                	jmp    c0029218 <isoReadDiscSectorHelper+0x58>
c002920d:	8d 76 00             	lea    esi,[esi+0x0]
c0029210:	b8 00 00 00 00       	mov    eax,0x0
c0029215:	8d 76 00             	lea    esi,[esi+0x0]
c0029218:	83 c4 2c             	add    esp,0x2c
c002921b:	c3                   	ret    

c002921c <iso_kprintf>:
c002921c:	83 ec 0c             	sub    esp,0xc
c002921f:	83 ec 08             	sub    esp,0x8
c0029222:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0029226:	68 96 2f 03 c0       	push   0xc0032f96
c002922b:	e8 65 ff fe ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0029230:	83 c4 10             	add    esp,0x10
c0029233:	90                   	nop
c0029234:	83 c4 0c             	add    esp,0xc
c0029237:	c3                   	ret    

c0029238 <iso_kprintfd>:
c0029238:	83 ec 0c             	sub    esp,0xc
c002923b:	83 ec 08             	sub    esp,0x8
c002923e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0029242:	68 ca 15 03 c0       	push   0xc00315ca
c0029247:	e8 49 ff fe ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c002924c:	83 c4 10             	add    esp,0x10
c002924f:	90                   	nop
c0029250:	83 c4 0c             	add    esp,0xc
c0029253:	c3                   	ret    

c0029254 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0029254:	b8 08 00 00 00       	mov    eax,0x8
c0029259:	c3                   	ret    

c002925a <ISO9660::truncate(void*, unsigned long long)>:
c002925a:	b8 01 00 00 00       	mov    eax,0x1
c002925f:	c3                   	ret    

c0029260 <ISO9660::getName()>:
c0029260:	b8 4c 32 03 c0       	mov    eax,0xc003324c
c0029265:	c3                   	ret    

c0029266 <ISO9660::closeDir(void*)>:
c0029266:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002926a:	8b 00                	mov    eax,DWORD PTR [eax]
c002926c:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c002926f:	90                   	nop

c0029270 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0029270:	b8 01 00 00 00       	mov    eax,0x1
c0029275:	c3                   	ret    

c0029276 <ISO9660::unlink(char const*)>:
c0029276:	b8 01 00 00 00       	mov    eax,0x1
c002927b:	c3                   	ret    

c002927c <ISO9660::write(void*, unsigned long, void*, int*)>:
c002927c:	b8 03 00 00 00       	mov    eax,0x3
c0029281:	c3                   	ret    

c0029282 <ISO9660::rename(char const*, char const*)>:
c0029282:	b8 01 00 00 00       	mov    eax,0x1
c0029287:	c3                   	ret    

c0029288 <ISO9660::mkdir(char const*)>:
c0029288:	b8 01 00 00 00       	mov    eax,0x1
c002928d:	c3                   	ret    

c002928e <ISO9660::~ISO9660()>:
c002928e:	83 ec 0c             	sub    esp,0xc
c0029291:	ba 8c 33 03 c0       	mov    edx,0xc003338c
c0029296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002929a:	89 10                	mov    DWORD PTR [eax],edx
c002929c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292a0:	83 ec 0c             	sub    esp,0xc
c00292a3:	50                   	push   eax
c00292a4:	e8 75 0d ff ff       	call   c001a01e <Filesystem::~Filesystem()>
c00292a9:	83 c4 10             	add    esp,0x10
c00292ac:	90                   	nop
c00292ad:	83 c4 0c             	add    esp,0xc
c00292b0:	c3                   	ret    
c00292b1:	90                   	nop

c00292b2 <ISO9660::~ISO9660()>:
c00292b2:	83 ec 0c             	sub    esp,0xc
c00292b5:	83 ec 0c             	sub    esp,0xc
c00292b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292bc:	e8 cd ff ff ff       	call   c002928e <ISO9660::~ISO9660()>
c00292c1:	83 c4 10             	add    esp,0x10
c00292c4:	83 ec 08             	sub    esp,0x8
c00292c7:	6a 08                	push   0x8
c00292c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292cd:	e8 96 fd fe ff       	call   c0019068 <operator delete(void*, unsigned long)>
c00292d2:	83 c4 10             	add    esp,0x10
c00292d5:	83 c4 0c             	add    esp,0xc
c00292d8:	c3                   	ret    
c00292d9:	90                   	nop

c00292da <ISO9660::exists(char const*)>:
c00292da:	83 ec 18             	sub    esp,0x18
c00292dd:	68 67 32 03 c0       	push   0xc0033267
c00292e2:	e8 c7 6e ff ff       	call   c00201ae <KePanic(char const*)>
c00292e7:	31 c0                	xor    eax,eax
c00292e9:	83 c4 1c             	add    esp,0x1c
c00292ec:	c3                   	ret    
c00292ed:	90                   	nop

c00292ee <ISO9660::open(char const*, void**, FileOpenMode)>:
c00292ee:	56                   	push   esi
c00292ef:	53                   	push   ebx
c00292f0:	53                   	push   ebx
c00292f1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00292f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00292f9:	85 db                	test   ebx,ebx
c00292fb:	0f 84 ca 00 00 00    	je     c00293cb <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0029301:	85 f6                	test   esi,esi
c0029303:	0f 84 c2 00 00 00    	je     c00293cb <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0029309:	b8 03 00 00 00       	mov    eax,0x3
c002930e:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0029313:	0f 85 b7 00 00 00    	jne    c00293d0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0029319:	8a 0b                	mov    cl,BYTE PTR [ebx]
c002931b:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029322:	38 0d 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,cl
c0029328:	74 1b                	je     c0029345 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c002932a:	85 c0                	test   eax,eax
c002932c:	74 10                	je     c002933e <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c002932e:	83 ec 0c             	sub    esp,0xc
c0029331:	68 85 32 03 c0       	push   0xc0033285
c0029336:	e8 73 6e ff ff       	call   c00201ae <KePanic(char const*)>
c002933b:	83 c4 10             	add    esp,0x10
c002933e:	8a 03                	mov    al,BYTE PTR [ebx]
c0029340:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c0029345:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029348:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c002934f:	85 c0                	test   eax,eax
c0029351:	74 09                	je     c002935c <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c0029353:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c002935a:	74 48                	je     c00293a4 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c002935c:	83 ec 0c             	sub    esp,0xc
c002935f:	68 95 32 03 c0       	push   0xc0033295
c0029364:	e8 2c fe fe ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0029369:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c002936c:	83 c4 10             	add    esp,0x10
c002936f:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0029376:	85 c0                	test   eax,eax
c0029378:	74 17                	je     c0029391 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c002937a:	83 ec 0c             	sub    esp,0xc
c002937d:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0029384:	68 b5 32 03 c0       	push   0xc00332b5
c0029389:	e8 07 fe fe ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c002938e:	83 c4 10             	add    esp,0x10
c0029391:	83 ec 0c             	sub    esp,0xc
c0029394:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c002939b:	50                   	push   eax
c002939c:	e8 a9 d7 fd ff       	call   c0006b4a <init_percd>
c00293a1:	83 c4 10             	add    esp,0x10
c00293a4:	83 c3 03             	add    ebx,0x3
c00293a7:	51                   	push   ecx
c00293a8:	51                   	push   ecx
c00293a9:	6a 00                	push   0x0
c00293ab:	53                   	push   ebx
c00293ac:	e8 60 d2 fd ff       	call   c0006611 <iso_open>
c00293b1:	83 c4 10             	add    esp,0x10
c00293b4:	89 c2                	mov    edx,eax
c00293b6:	b8 01 00 00 00       	mov    eax,0x1
c00293bb:	83 fa ff             	cmp    edx,0xffffffff
c00293be:	74 10                	je     c00293d0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00293c0:	83 c2 32             	add    edx,0x32
c00293c3:	31 c0                	xor    eax,eax
c00293c5:	01 d2                	add    edx,edx
c00293c7:	89 16                	mov    DWORD PTR [esi],edx
c00293c9:	eb 05                	jmp    c00293d0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00293cb:	b8 04 00 00 00       	mov    eax,0x4
c00293d0:	5a                   	pop    edx
c00293d1:	5b                   	pop    ebx
c00293d2:	5e                   	pop    esi
c00293d3:	c3                   	ret    

c00293d4 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00293d4:	53                   	push   ebx
c00293d5:	83 ec 08             	sub    esp,0x8
c00293d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00293dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00293e0:	85 c0                	test   eax,eax
c00293e2:	74 2d                	je     c0029411 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00293e4:	85 db                	test   ebx,ebx
c00293e6:	74 29                	je     c0029411 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00293e8:	b9 02 00 00 00       	mov    ecx,0x2
c00293ed:	52                   	push   edx
c00293ee:	99                   	cdq    
c00293ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293f3:	f7 f9                	idiv   ecx
c00293f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00293f9:	83 e8 32             	sub    eax,0x32
c00293fc:	50                   	push   eax
c00293fd:	e8 b7 d2 fd ff       	call   c00066b9 <iso_read>
c0029402:	83 c4 10             	add    esp,0x10
c0029405:	89 03                	mov    DWORD PTR [ebx],eax
c0029407:	09 d0                	or     eax,edx
c0029409:	0f 94 c0             	sete   al
c002940c:	0f b6 c0             	movzx  eax,al
c002940f:	eb 05                	jmp    c0029416 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0029411:	b8 04 00 00 00       	mov    eax,0x4
c0029416:	83 c4 08             	add    esp,0x8
c0029419:	5b                   	pop    ebx
c002941a:	c3                   	ret    
c002941b:	90                   	nop

c002941c <ISO9660::seek(void*, unsigned long long)>:
c002941c:	57                   	push   edi
c002941d:	56                   	push   esi
c002941e:	b8 04 00 00 00       	mov    eax,0x4
c0029423:	51                   	push   ecx
c0029424:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029428:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002942c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0029430:	85 d2                	test   edx,edx
c0029432:	74 26                	je     c002945a <ISO9660::seek(void*, unsigned long long)+0x3e>
c0029434:	6a 00                	push   0x0
c0029436:	b9 02 00 00 00       	mov    ecx,0x2
c002943b:	57                   	push   edi
c002943c:	89 d0                	mov    eax,edx
c002943e:	56                   	push   esi
c002943f:	99                   	cdq    
c0029440:	f7 f9                	idiv   ecx
c0029442:	83 e8 32             	sub    eax,0x32
c0029445:	50                   	push   eax
c0029446:	e8 84 d3 fd ff       	call   c00067cf <iso_seek>
c002944b:	83 c4 10             	add    esp,0x10
c002944e:	31 f0                	xor    eax,esi
c0029450:	31 fa                	xor    edx,edi
c0029452:	09 d0                	or     eax,edx
c0029454:	0f 95 c0             	setne  al
c0029457:	0f b6 c0             	movzx  eax,al
c002945a:	5a                   	pop    edx
c002945b:	5e                   	pop    esi
c002945c:	5f                   	pop    edi
c002945d:	c3                   	ret    

c002945e <ISO9660::tell(void*, unsigned long long*)>:
c002945e:	53                   	push   ebx
c002945f:	83 ec 08             	sub    esp,0x8
c0029462:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0029466:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002946a:	85 c0                	test   eax,eax
c002946c:	74 24                	je     c0029492 <ISO9660::tell(void*, unsigned long long*)+0x34>
c002946e:	85 db                	test   ebx,ebx
c0029470:	74 20                	je     c0029492 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0029472:	83 ec 0c             	sub    esp,0xc
c0029475:	b9 02 00 00 00       	mov    ecx,0x2
c002947a:	99                   	cdq    
c002947b:	f7 f9                	idiv   ecx
c002947d:	83 e8 32             	sub    eax,0x32
c0029480:	50                   	push   eax
c0029481:	e8 cd d3 fd ff       	call   c0006853 <iso_tell>
c0029486:	83 c4 10             	add    esp,0x10
c0029489:	89 03                	mov    DWORD PTR [ebx],eax
c002948b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c002948e:	31 c0                	xor    eax,eax
c0029490:	eb 05                	jmp    c0029497 <ISO9660::tell(void*, unsigned long long*)+0x39>
c0029492:	b8 04 00 00 00       	mov    eax,0x4
c0029497:	83 c4 08             	add    esp,0x8
c002949a:	5b                   	pop    ebx
c002949b:	c3                   	ret    

c002949c <ISO9660::stat(void*, unsigned long long*)>:
c002949c:	53                   	push   ebx
c002949d:	83 ec 14             	sub    esp,0x14
c00294a0:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00294a4:	68 d9 32 03 c0       	push   0xc00332d9
c00294a9:	e8 e7 fc fe ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c00294ae:	83 c4 10             	add    esp,0x10
c00294b1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00294b6:	74 2c                	je     c00294e4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c00294b8:	85 db                	test   ebx,ebx
c00294ba:	74 28                	je     c00294e4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c00294bc:	83 ec 0c             	sub    esp,0xc
c00294bf:	b9 02 00 00 00       	mov    ecx,0x2
c00294c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00294c8:	99                   	cdq    
c00294c9:	f7 f9                	idiv   ecx
c00294cb:	83 e8 32             	sub    eax,0x32
c00294ce:	50                   	push   eax
c00294cf:	e8 b0 d3 fd ff       	call   c0006884 <iso_total>
c00294d4:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00294db:	89 03                	mov    DWORD PTR [ebx],eax
c00294dd:	83 c4 10             	add    esp,0x10
c00294e0:	31 c0                	xor    eax,eax
c00294e2:	eb 05                	jmp    c00294e9 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c00294e4:	b8 04 00 00 00       	mov    eax,0x4
c00294e9:	83 c4 08             	add    esp,0x8
c00294ec:	5b                   	pop    ebx
c00294ed:	c3                   	ret    

c00294ee <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00294ee:	55                   	push   ebp
c00294ef:	57                   	push   edi
c00294f0:	56                   	push   esi
c00294f1:	53                   	push   ebx
c00294f2:	83 ec 18             	sub    esp,0x18
c00294f5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00294f9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00294fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0029501:	68 e1 32 03 c0       	push   0xc00332e1
c0029506:	e8 8a fc fe ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c002950b:	83 c4 10             	add    esp,0x10
c002950e:	85 ff                	test   edi,edi
c0029510:	0f 94 c0             	sete   al
c0029513:	85 f6                	test   esi,esi
c0029515:	0f 94 c2             	sete   dl
c0029518:	09 d0                	or     eax,edx
c002951a:	a8 01                	test   al,0x1
c002951c:	0f 85 dd 00 00 00    	jne    c00295ff <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0029522:	85 db                	test   ebx,ebx
c0029524:	0f 84 d5 00 00 00    	je     c00295ff <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c002952a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002952d:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0029533:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c002953a:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029541:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0029543:	38 0d 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,cl
c0029549:	74 1b                	je     c0029566 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c002954b:	85 c0                	test   eax,eax
c002954d:	74 10                	je     c002955f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c002954f:	83 ec 0c             	sub    esp,0xc
c0029552:	68 85 32 03 c0       	push   0xc0033285
c0029557:	e8 52 6c ff ff       	call   c00201ae <KePanic(char const*)>
c002955c:	83 c4 10             	add    esp,0x10
c002955f:	8a 03                	mov    al,BYTE PTR [ebx]
c0029561:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c0029566:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029569:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0029570:	85 c0                	test   eax,eax
c0029572:	74 09                	je     c002957d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c0029574:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c002957b:	74 51                	je     c00295ce <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c002957d:	83 ec 0c             	sub    esp,0xc
c0029580:	68 e9 32 03 c0       	push   0xc00332e9
c0029585:	e8 0b fc fe ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c002958a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c002958d:	83 c4 10             	add    esp,0x10
c0029590:	83 3c 85 7c f2 03 c0 00 	cmp    DWORD PTR [eax*4-0x3ffc0d84],0x0
c0029598:	74 21                	je     c00295bb <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c002959a:	83 ec 0c             	sub    esp,0xc
c002959d:	68 09 33 03 c0       	push   0xc0033309
c00295a2:	e8 ee fb fe ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c00295a7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00295aa:	83 c4 10             	add    esp,0x10
c00295ad:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c00295b4:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00295bb:	83 ec 0c             	sub    esp,0xc
c00295be:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00295c5:	50                   	push   eax
c00295c6:	e8 7f d5 fd ff       	call   c0006b4a <init_percd>
c00295cb:	83 c4 10             	add    esp,0x10
c00295ce:	83 c3 03             	add    ebx,0x3
c00295d1:	52                   	push   edx
c00295d2:	52                   	push   edx
c00295d3:	6a 00                	push   0x0
c00295d5:	53                   	push   ebx
c00295d6:	e8 36 d0 fd ff       	call   c0006611 <iso_open>
c00295db:	83 c4 10             	add    esp,0x10
c00295de:	89 c5                	mov    ebp,eax
c00295e0:	83 f8 ff             	cmp    eax,0xffffffff
c00295e3:	75 21                	jne    c0029606 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c00295e5:	50                   	push   eax
c00295e6:	50                   	push   eax
c00295e7:	6a 01                	push   0x1
c00295e9:	53                   	push   ebx
c00295ea:	e8 22 d0 fd ff       	call   c0006611 <iso_open>
c00295ef:	83 c4 10             	add    esp,0x10
c00295f2:	ba 02 00 00 00       	mov    edx,0x2
c00295f7:	40                   	inc    eax
c00295f8:	74 2b                	je     c0029625 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c00295fa:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00295fd:	eb 24                	jmp    c0029623 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c00295ff:	ba 04 00 00 00       	mov    edx,0x4
c0029604:	eb 1f                	jmp    c0029625 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0029606:	83 ec 0c             	sub    esp,0xc
c0029609:	50                   	push   eax
c002960a:	e8 75 d2 fd ff       	call   c0006884 <iso_total>
c002960f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0029616:	89 07                	mov    DWORD PTR [edi],eax
c0029618:	89 2c 24             	mov    DWORD PTR [esp],ebp
c002961b:	e8 7b d0 fd ff       	call   c000669b <iso_close>
c0029620:	83 c4 10             	add    esp,0x10
c0029623:	31 d2                	xor    edx,edx
c0029625:	83 c4 0c             	add    esp,0xc
c0029628:	89 d0                	mov    eax,edx
c002962a:	5b                   	pop    ebx
c002962b:	5e                   	pop    esi
c002962c:	5f                   	pop    edi
c002962d:	5d                   	pop    ebp
c002962e:	c3                   	ret    
c002962f:	90                   	nop

c0029630 <ISO9660::close(void*)>:
c0029630:	83 ec 0c             	sub    esp,0xc
c0029633:	b8 04 00 00 00       	mov    eax,0x4
c0029638:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002963c:	85 d2                	test   edx,edx
c002963e:	74 1b                	je     c002965b <ISO9660::close(void*)+0x2b>
c0029640:	83 ec 0c             	sub    esp,0xc
c0029643:	b9 02 00 00 00       	mov    ecx,0x2
c0029648:	89 d0                	mov    eax,edx
c002964a:	99                   	cdq    
c002964b:	f7 f9                	idiv   ecx
c002964d:	83 e8 32             	sub    eax,0x32
c0029650:	50                   	push   eax
c0029651:	e8 45 d0 fd ff       	call   c000669b <iso_close>
c0029656:	83 c4 10             	add    esp,0x10
c0029659:	31 c0                	xor    eax,eax
c002965b:	83 c4 0c             	add    esp,0xc
c002965e:	c3                   	ret    
c002965f:	90                   	nop

c0029660 <ISO9660::openDir(char const*, void**)>:
c0029660:	56                   	push   esi
c0029661:	53                   	push   ebx
c0029662:	50                   	push   eax
c0029663:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0029667:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002966b:	85 db                	test   ebx,ebx
c002966d:	0f 84 bd 00 00 00    	je     c0029730 <ISO9660::openDir(char const*, void**)+0xd0>
c0029673:	85 f6                	test   esi,esi
c0029675:	0f 84 b5 00 00 00    	je     c0029730 <ISO9660::openDir(char const*, void**)+0xd0>
c002967b:	8a 13                	mov    dl,BYTE PTR [ebx]
c002967d:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029684:	38 15 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,dl
c002968a:	74 1b                	je     c00296a7 <ISO9660::openDir(char const*, void**)+0x47>
c002968c:	85 c0                	test   eax,eax
c002968e:	74 10                	je     c00296a0 <ISO9660::openDir(char const*, void**)+0x40>
c0029690:	83 ec 0c             	sub    esp,0xc
c0029693:	68 85 32 03 c0       	push   0xc0033285
c0029698:	e8 11 6b ff ff       	call   c00201ae <KePanic(char const*)>
c002969d:	83 c4 10             	add    esp,0x10
c00296a0:	8a 03                	mov    al,BYTE PTR [ebx]
c00296a2:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c00296a7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00296aa:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c00296b1:	85 c0                	test   eax,eax
c00296b3:	74 10                	je     c00296c5 <ISO9660::openDir(char const*, void**)+0x65>
c00296b5:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00296bc:	74 1a                	je     c00296d8 <ISO9660::openDir(char const*, void**)+0x78>
c00296be:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00296c5:	83 ec 0c             	sub    esp,0xc
c00296c8:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00296cf:	50                   	push   eax
c00296d0:	e8 75 d4 fd ff       	call   c0006b4a <init_percd>
c00296d5:	83 c4 10             	add    esp,0x10
c00296d8:	83 c3 03             	add    ebx,0x3
c00296db:	50                   	push   eax
c00296dc:	50                   	push   eax
c00296dd:	6a 01                	push   0x1
c00296df:	53                   	push   ebx
c00296e0:	e8 2c cf fd ff       	call   c0006611 <iso_open>
c00296e5:	83 c4 10             	add    esp,0x10
c00296e8:	89 c3                	mov    ebx,eax
c00296ea:	83 f8 ff             	cmp    eax,0xffffffff
c00296ed:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00296f2:	75 1c                	jne    c0029710 <ISO9660::openDir(char const*, void**)+0xb0>
c00296f4:	53                   	push   ebx
c00296f5:	53                   	push   ebx
c00296f6:	68 2d 33 03 c0       	push   0xc003332d
c00296fb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029701:	e8 f0 db fe ff       	call   c00172f6 <VgaText::puts(char const*)>
c0029706:	83 c4 10             	add    esp,0x10
c0029709:	b8 01 00 00 00       	mov    eax,0x1
c002970e:	eb 25                	jmp    c0029735 <ISO9660::openDir(char const*, void**)+0xd5>
c0029710:	01 db                	add    ebx,ebx
c0029712:	51                   	push   ecx
c0029713:	83 c3 65             	add    ebx,0x65
c0029716:	51                   	push   ecx
c0029717:	68 40 33 03 c0       	push   0xc0033340
c002971c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029722:	e8 cf db fe ff       	call   c00172f6 <VgaText::puts(char const*)>
c0029727:	89 1e                	mov    DWORD PTR [esi],ebx
c0029729:	83 c4 10             	add    esp,0x10
c002972c:	31 c0                	xor    eax,eax
c002972e:	eb 05                	jmp    c0029735 <ISO9660::openDir(char const*, void**)+0xd5>
c0029730:	b8 04 00 00 00       	mov    eax,0x4
c0029735:	5a                   	pop    edx
c0029736:	5b                   	pop    ebx
c0029737:	5e                   	pop    esi
c0029738:	c3                   	ret    
c0029739:	90                   	nop

c002973a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c002973a:	55                   	push   ebp
c002973b:	57                   	push   edi
c002973c:	56                   	push   esi
c002973d:	53                   	push   ebx
c002973e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0029744:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c002974b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0029752:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c002975a:	0f 84 e7 00 00 00    	je     c0029847 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0029760:	85 db                	test   ebx,ebx
c0029762:	0f 84 df 00 00 00    	je     c0029847 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0029768:	83 ec 0c             	sub    esp,0xc
c002976b:	68 53 33 03 c0       	push   0xc0033353
c0029770:	e8 20 fa fe ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c0029775:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c002977c:	b9 02 00 00 00       	mov    ecx,0x2
c0029781:	99                   	cdq    
c0029782:	f7 f9                	idiv   ecx
c0029784:	83 e8 32             	sub    eax,0x32
c0029787:	89 04 24             	mov    DWORD PTR [esp],eax
c002978a:	e8 47 d1 fd ff       	call   c00068d6 <iso_readdir>
c002978f:	83 c4 10             	add    esp,0x10
c0029792:	89 c6                	mov    esi,eax
c0029794:	85 c0                	test   eax,eax
c0029796:	75 37                	jne    c00297cf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c0029798:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002979d:	56                   	push   esi
c002979e:	56                   	push   esi
c002979f:	68 5e 33 03 c0       	push   0xc003335e
c00297a4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00297aa:	e8 47 db fe ff       	call   c00172f6 <VgaText::puts(char const*)>
c00297af:	83 c4 0c             	add    esp,0xc
c00297b2:	68 10 01 00 00       	push   0x110
c00297b7:	6a 00                	push   0x0
c00297b9:	57                   	push   edi
c00297ba:	e8 31 6d fd ff       	call   c00004f0 <memset>
c00297bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00297c5:	83 c4 10             	add    esp,0x10
c00297c8:	b8 01 00 00 00       	mov    eax,0x1
c00297cd:	eb 7d                	jmp    c002984c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c00297cf:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00297d5:	8d 68 08             	lea    ebp,[eax+0x8]
c00297d8:	83 ec 0c             	sub    esp,0xc
c00297db:	55                   	push   ebp
c00297dc:	e8 8f 6d fd ff       	call   c0000570 <strlen>
c00297e1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00297e9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00297ed:	83 c4 10             	add    esp,0x10
c00297f0:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c00297f4:	75 0a                	jne    c0029800 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c00297f6:	b8 02 00 00 00       	mov    eax,0x2
c00297fb:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c00297fe:	74 05                	je     c0029805 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c0029800:	b8 01 00 00 00       	mov    eax,0x1
c0029805:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0029809:	50                   	push   eax
c002980a:	50                   	push   eax
c002980b:	55                   	push   ebp
c002980c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0029810:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0029814:	50                   	push   eax
c0029815:	e8 26 6e fd ff       	call   c0000640 <strcpy>
c002981a:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0029821:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0029823:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0029829:	5a                   	pop    edx
c002982a:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002982f:	59                   	pop    ecx
c0029830:	68 71 33 03 c0       	push   0xc0033371
c0029835:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c002983b:	e8 b6 da fe ff       	call   c00172f6 <VgaText::puts(char const*)>
c0029840:	83 c4 10             	add    esp,0x10
c0029843:	31 c0                	xor    eax,eax
c0029845:	eb 05                	jmp    c002984c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0029847:	b8 04 00 00 00       	mov    eax,0x4
c002984c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0029852:	5b                   	pop    ebx
c0029853:	5e                   	pop    esi
c0029854:	5f                   	pop    edi
c0029855:	5d                   	pop    ebp
c0029856:	c3                   	ret    

c0029857 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0029857:	57                   	push   edi
c0029858:	56                   	push   esi
c0029859:	53                   	push   ebx
c002985a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002985e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0029862:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0029866:	39 35 84 03 04 c0    	cmp    DWORD PTR ds:0xc0040384,esi
c002986c:	0f be cb             	movsx  ecx,bl
c002986f:	75 0b                	jne    c002987c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c0029871:	0f be 05 c0 45 03 c0 	movsx  eax,BYTE PTR ds:0xc00345c0
c0029878:	39 c8                	cmp    eax,ecx
c002987a:	74 47                	je     c00298c3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c002987c:	83 ec 0c             	sub    esp,0xc
c002987f:	31 d2                	xor    edx,edx
c0029881:	68 a0 03 04 c0       	push   0xc00403a0
c0029886:	6a 01                	push   0x1
c0029888:	52                   	push   edx
c0029889:	56                   	push   esi
c002988a:	ff 34 8d 7c f2 03 c0 	push   DWORD PTR [ecx*4-0x3ffc0d84]
c0029891:	e8 72 2d ff ff       	call   c001c608 <LogicalDisk::read(unsigned long long, int, void*)>
c0029896:	83 c4 20             	add    esp,0x20
c0029899:	85 c0                	test   eax,eax
c002989b:	75 0e                	jne    c00298ab <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c002989d:	89 35 84 03 04 c0    	mov    DWORD PTR ds:0xc0040384,esi
c00298a3:	88 1d c0 45 03 c0    	mov    BYTE PTR ds:0xc00345c0,bl
c00298a9:	eb 18                	jmp    c00298c3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c00298ab:	50                   	push   eax
c00298ac:	68 00 08 00 00       	push   0x800
c00298b1:	6a 00                	push   0x0
c00298b3:	57                   	push   edi
c00298b4:	e8 37 6c fd ff       	call   c00004f0 <memset>
c00298b9:	83 c4 10             	add    esp,0x10
c00298bc:	b8 01 00 00 00       	mov    eax,0x1
c00298c1:	eb 0e                	jmp    c00298d1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c00298c3:	be a0 03 04 c0       	mov    esi,0xc00403a0
c00298c8:	b9 00 08 00 00       	mov    ecx,0x800
c00298cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00298cf:	31 c0                	xor    eax,eax
c00298d1:	5b                   	pop    ebx
c00298d2:	5e                   	pop    esi
c00298d3:	5f                   	pop    edi
c00298d4:	c3                   	ret    
c00298d5:	90                   	nop

c00298d6 <ISO9660::tryMount(LogicalDisk*, int)>:
c00298d6:	53                   	push   ebx
c00298d7:	81 ec 0c 08 00 00    	sub    esp,0x80c
c00298dd:	c7 05 84 03 04 c0 ef be ad de 	mov    DWORD PTR ds:0xc0040384,0xdeadbeef
c00298e7:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c00298ee:	8d 58 41             	lea    ebx,[eax+0x41]
c00298f1:	0f be db             	movsx  ebx,bl
c00298f4:	53                   	push   ebx
c00298f5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00298f9:	50                   	push   eax
c00298fa:	6a 10                	push   0x10
c00298fc:	e8 56 ff ff ff       	call   c0029857 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0029901:	83 c4 10             	add    esp,0x10
c0029904:	31 d2                	xor    edx,edx
c0029906:	85 c0                	test   eax,eax
c0029908:	75 33                	jne    c002993d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c002990a:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c002990f:	75 2c                	jne    c002993d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029911:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0029916:	75 25                	jne    c002993d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029918:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c002991d:	75 1e                	jne    c002993d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c002991f:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0029924:	75 17                	jne    c002993d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029926:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c002992b:	75 10                	jne    c002993d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c002992d:	83 ec 0c             	sub    esp,0xc
c0029930:	53                   	push   ebx
c0029931:	e8 14 d2 fd ff       	call   c0006b4a <init_percd>
c0029936:	83 c4 10             	add    esp,0x10
c0029939:	40                   	inc    eax
c002993a:	0f 95 c2             	setne  dl
c002993d:	88 d0                	mov    al,dl
c002993f:	81 c4 08 08 00 00    	add    esp,0x808
c0029945:	5b                   	pop    ebx
c0029946:	c3                   	ret    
c0029947:	90                   	nop

c0029948 <ISO9660::ISO9660()>:
c0029948:	83 ec 0c             	sub    esp,0xc
c002994b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002994f:	83 ec 0c             	sub    esp,0xc
c0029952:	50                   	push   eax
c0029953:	e8 a2 06 ff ff       	call   c0019ffa <Filesystem::Filesystem()>
c0029958:	83 c4 10             	add    esp,0x10
c002995b:	ba 8c 33 03 c0       	mov    edx,0xc003338c
c0029960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029964:	89 10                	mov    DWORD PTR [eax],edx
c0029966:	e8 f1 d2 fd ff       	call   c0006c5c <fs_iso9660_init>
c002996b:	90                   	nop
c002996c:	83 c4 0c             	add    esp,0xc
c002996f:	c3                   	ret    

c0029970 <SoundCard::beginPlayback()>:
c0029970:	c7 44 24 04 f0 33 03 c0 	mov    DWORD PTR [esp+0x4],0xc00333f0
c0029978:	e9 31 68 ff ff       	jmp    c00201ae <KePanic(char const*)>
c002997d:	90                   	nop

c002997e <SoundCard::stopPlayback()>:
c002997e:	c7 44 24 04 f0 33 03 c0 	mov    DWORD PTR [esp+0x4],0xc00333f0
c0029986:	e9 23 68 ff ff       	jmp    c00201ae <KePanic(char const*)>
c002998b:	90                   	nop

c002998c <SoundCard::SoundCard(char const*)>:
c002998c:	83 ec 1c             	sub    esp,0x1c
c002998f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029993:	83 ec 08             	sub    esp,0x8
c0029996:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002999a:	50                   	push   eax
c002999b:	e8 d8 19 ff ff       	call   c001b378 <Device::Device(char const*)>
c00299a0:	83 c4 10             	add    esp,0x10
c00299a3:	ba 3c 34 03 c0       	mov    edx,0xc003343c
c00299a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00299ac:	89 10                	mov    DWORD PTR [eax],edx
c00299ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00299b2:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c00299b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00299bd:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c00299c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00299cb:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c00299d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00299d9:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c00299e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00299e7:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00299f1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00299f9:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00299fe:	7f 1a                	jg     c0029a1a <SoundCard::SoundCard(char const*)+0x8e>
c0029a00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029a04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0029a08:	83 c2 54             	add    edx,0x54
c0029a0b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0029a13:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0029a18:	eb df                	jmp    c00299f9 <SoundCard::SoundCard(char const*)+0x6d>
c0029a1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029a1e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0029a25:	90                   	nop
c0029a26:	83 c4 1c             	add    esp,0x1c
c0029a29:	c3                   	ret    

c0029a2a <SoundCard::~SoundCard()>:
c0029a2a:	83 ec 0c             	sub    esp,0xc
c0029a2d:	ba 3c 34 03 c0       	mov    edx,0xc003343c
c0029a32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a36:	89 10                	mov    DWORD PTR [eax],edx
c0029a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a3c:	83 ec 0c             	sub    esp,0xc
c0029a3f:	50                   	push   eax
c0029a40:	e8 d3 16 ff ff       	call   c001b118 <Device::~Device()>
c0029a45:	83 c4 10             	add    esp,0x10
c0029a48:	90                   	nop
c0029a49:	83 c4 0c             	add    esp,0xc
c0029a4c:	c3                   	ret    
c0029a4d:	90                   	nop

c0029a4e <SoundCard::~SoundCard()>:
c0029a4e:	83 ec 0c             	sub    esp,0xc
c0029a51:	83 ec 0c             	sub    esp,0xc
c0029a54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a58:	e8 cd ff ff ff       	call   c0029a2a <SoundCard::~SoundCard()>
c0029a5d:	83 c4 10             	add    esp,0x10
c0029a60:	83 ec 08             	sub    esp,0x8
c0029a63:	68 e8 01 00 00       	push   0x1e8
c0029a68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a6c:	e8 f7 f5 fe ff       	call   c0019068 <operator delete(void*, unsigned long)>
c0029a71:	83 c4 10             	add    esp,0x10
c0029a74:	83 c4 0c             	add    esp,0xc
c0029a77:	c3                   	ret    

c0029a78 <SoundCard::configureRates(int, int, int)>:
c0029a78:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0029a7c:	31 c0                	xor    eax,eax
c0029a7e:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0029a85:	75 20                	jne    c0029aa7 <SoundCard::configureRates(int, int, int)+0x2f>
c0029a87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029a8b:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0029a91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0029a95:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0029a9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a9f:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0029aa5:	b0 01                	mov    al,0x1
c0029aa7:	c3                   	ret    

c0029aa8 <SoundCard::getSamples16(int, short*)>:
c0029aa8:	55                   	push   ebp
c0029aa9:	57                   	push   edi
c0029aaa:	31 ff                	xor    edi,edi
c0029aac:	56                   	push   esi
c0029aad:	53                   	push   ebx
c0029aae:	31 db                	xor    ebx,ebx
c0029ab0:	83 ec 10             	sub    esp,0x10
c0029ab3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0029ab7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029abb:	8d 04 36             	lea    eax,[esi+esi*1]
c0029abe:	50                   	push   eax
c0029abf:	6a 00                	push   0x0
c0029ac1:	55                   	push   ebp
c0029ac2:	e8 29 6a fd ff       	call   c00004f0 <memset>
c0029ac7:	83 c4 10             	add    esp,0x10
c0029aca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029ace:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0029ad5:	85 c0                	test   eax,eax
c0029ad7:	74 1b                	je     c0029af4 <SoundCard::getSamples16(int, short*)+0x4c>
c0029ad9:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0029add:	75 15                	jne    c0029af4 <SoundCard::getSamples16(int, short*)+0x4c>
c0029adf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0029ae3:	55                   	push   ebp
c0029ae4:	56                   	push   esi
c0029ae5:	50                   	push   eax
c0029ae6:	e8 f1 02 00 00       	call   c0029ddc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0029aeb:	83 c4 10             	add    esp,0x10
c0029aee:	39 c7                	cmp    edi,eax
c0029af0:	7d 02                	jge    c0029af4 <SoundCard::getSamples16(int, short*)+0x4c>
c0029af2:	89 c7                	mov    edi,eax
c0029af4:	43                   	inc    ebx
c0029af5:	83 fb 20             	cmp    ebx,0x20
c0029af8:	75 d0                	jne    c0029aca <SoundCard::getSamples16(int, short*)+0x22>
c0029afa:	83 c4 0c             	add    esp,0xc
c0029afd:	89 f8                	mov    eax,edi
c0029aff:	5b                   	pop    ebx
c0029b00:	5e                   	pop    esi
c0029b01:	5f                   	pop    edi
c0029b02:	5d                   	pop    ebp
c0029b03:	c3                   	ret    

c0029b04 <SoundCard::getSamples32(int, int*)>:
c0029b04:	55                   	push   ebp
c0029b05:	57                   	push   edi
c0029b06:	31 ff                	xor    edi,edi
c0029b08:	56                   	push   esi
c0029b09:	31 f6                	xor    esi,esi
c0029b0b:	53                   	push   ebx
c0029b0c:	83 ec 10             	sub    esp,0x10
c0029b0f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0029b13:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0029b17:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029b1b:	c1 e0 02             	shl    eax,0x2
c0029b1e:	50                   	push   eax
c0029b1f:	6a 00                	push   0x0
c0029b21:	55                   	push   ebp
c0029b22:	e8 c9 69 fd ff       	call   c00004f0 <memset>
c0029b27:	83 c4 10             	add    esp,0x10
c0029b2a:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0029b31:	85 c0                	test   eax,eax
c0029b33:	74 1b                	je     c0029b50 <SoundCard::getSamples32(int, int*)+0x4c>
c0029b35:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0029b39:	75 15                	jne    c0029b50 <SoundCard::getSamples32(int, int*)+0x4c>
c0029b3b:	53                   	push   ebx
c0029b3c:	55                   	push   ebp
c0029b3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0029b41:	50                   	push   eax
c0029b42:	e8 61 03 00 00       	call   c0029ea8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0029b47:	83 c4 10             	add    esp,0x10
c0029b4a:	39 c6                	cmp    esi,eax
c0029b4c:	7d 02                	jge    c0029b50 <SoundCard::getSamples32(int, int*)+0x4c>
c0029b4e:	89 c6                	mov    esi,eax
c0029b50:	47                   	inc    edi
c0029b51:	83 ff 20             	cmp    edi,0x20
c0029b54:	75 d4                	jne    c0029b2a <SoundCard::getSamples32(int, int*)+0x26>
c0029b56:	85 f6                	test   esi,esi
c0029b58:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c0029b5f:	75 0f                	jne    c0029b70 <SoundCard::getSamples32(int, int*)+0x6c>
c0029b61:	85 c0                	test   eax,eax
c0029b63:	74 1b                	je     c0029b80 <SoundCard::getSamples32(int, int*)+0x7c>
c0029b65:	83 ec 0c             	sub    esp,0xc
c0029b68:	8b 03                	mov    eax,DWORD PTR [ebx]
c0029b6a:	53                   	push   ebx
c0029b6b:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0029b6e:	eb 0d                	jmp    c0029b7d <SoundCard::getSamples32(int, int*)+0x79>
c0029b70:	85 c0                	test   eax,eax
c0029b72:	75 0c                	jne    c0029b80 <SoundCard::getSamples32(int, int*)+0x7c>
c0029b74:	83 ec 0c             	sub    esp,0xc
c0029b77:	8b 03                	mov    eax,DWORD PTR [ebx]
c0029b79:	53                   	push   ebx
c0029b7a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0029b7d:	83 c4 10             	add    esp,0x10
c0029b80:	83 c4 0c             	add    esp,0xc
c0029b83:	89 f0                	mov    eax,esi
c0029b85:	5b                   	pop    ebx
c0029b86:	5e                   	pop    esi
c0029b87:	5f                   	pop    edi
c0029b88:	5d                   	pop    ebp
c0029b89:	c3                   	ret    

c0029b8a <SoundCard::addChannel(SoundPort*)>:
c0029b8a:	83 ec 0c             	sub    esp,0xc
c0029b8d:	31 c0                	xor    eax,eax
c0029b8f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0029b93:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0029b9b:	74 1b                	je     c0029bb8 <SoundCard::addChannel(SoundPort*)+0x2e>
c0029b9d:	40                   	inc    eax
c0029b9e:	83 f8 20             	cmp    eax,0x20
c0029ba1:	75 f0                	jne    c0029b93 <SoundCard::addChannel(SoundPort*)+0x9>
c0029ba3:	83 ec 0c             	sub    esp,0xc
c0029ba6:	68 15 34 03 c0       	push   0xc0033415
c0029bab:	e8 fe 65 ff ff       	call   c00201ae <KePanic(char const*)>
c0029bb0:	83 c4 10             	add    esp,0x10
c0029bb3:	83 c8 ff             	or     eax,0xffffffff
c0029bb6:	eb 0b                	jmp    c0029bc3 <SoundCard::addChannel(SoundPort*)+0x39>
c0029bb8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0029bbc:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0029bc3:	83 c4 0c             	add    esp,0xc
c0029bc6:	c3                   	ret    
c0029bc7:	90                   	nop

c0029bc8 <SoundCard::removeChannel(int)>:
c0029bc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029bcc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0029bd0:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0029bdb:	c3                   	ret    

c0029bdc <SoundPort::SoundPort(int, int, int, int)>:
c0029bdc:	83 ec 0c             	sub    esp,0xc
c0029bdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029be3:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0029bea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bee:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0029bf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bf6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029bfa:	89 10                	mov    DWORD PTR [eax],edx
c0029bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c00:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0029c04:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c0b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0029c0f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029c12:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0029c17:	75 13                	jne    c0029c2c <SoundPort::SoundPort(int, int, int, int)+0x50>
c0029c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0029c1f:	05 a0 0f 00 00       	add    eax,0xfa0
c0029c24:	01 c0                	add    eax,eax
c0029c26:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0029c2a:	66 90                	xchg   ax,ax
c0029c2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c30:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0029c34:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0029c37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c3b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0029c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c46:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0029c49:	c1 e0 02             	shl    eax,0x2
c0029c4c:	83 ec 0c             	sub    esp,0xc
c0029c4f:	50                   	push   eax
c0029c50:	e8 b1 c6 fe ff       	call   c0016306 <malloc>
c0029c55:	83 c4 10             	add    esp,0x10
c0029c58:	89 c2                	mov    edx,eax
c0029c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c5e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0029c61:	90                   	nop
c0029c62:	83 c4 0c             	add    esp,0xc
c0029c65:	c3                   	ret    
c0029c66:	66 90                	xchg   ax,ax

c0029c68 <SoundPort::~SoundPort()>:
c0029c68:	83 ec 0c             	sub    esp,0xc
c0029c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c6f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0029c72:	85 c0                	test   eax,eax
c0029c74:	74 1e                	je     c0029c94 <SoundPort::~SoundPort()+0x2c>
c0029c76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c7a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0029c7d:	83 ec 0c             	sub    esp,0xc
c0029c80:	50                   	push   eax
c0029c81:	e8 90 c6 fe ff       	call   c0016316 <free>
c0029c86:	83 c4 10             	add    esp,0x10
c0029c89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c8d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0029c94:	90                   	nop
c0029c95:	83 c4 0c             	add    esp,0xc
c0029c98:	c3                   	ret    
c0029c99:	90                   	nop
c0029c9a:	66 90                	xchg   ax,ax

c0029c9c <SoundPort::unpause()>:
c0029c9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029ca0:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0029ca4:	c3                   	ret    
c0029ca5:	90                   	nop
c0029ca6:	66 90                	xchg   ax,ax

c0029ca8 <SoundPort::pause()>:
c0029ca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029cac:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0029cb0:	c3                   	ret    
c0029cb1:	90                   	nop
c0029cb2:	66 90                	xchg   ax,ax

c0029cb4 <SoundPort::getBufferUsed()>:
c0029cb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029cb8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0029cbb:	c3                   	ret    

c0029cbc <SoundPort::getBufferSize()>:
c0029cbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029cc0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0029cc3:	c3                   	ret    

c0029cc4 <SoundPort::buffer16(short*, int)>:
c0029cc4:	55                   	push   ebp
c0029cc5:	57                   	push   edi
c0029cc6:	56                   	push   esi
c0029cc7:	53                   	push   ebx
c0029cc8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029ccc:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0029cd0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0029cd3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0029cd6:	74 68                	je     c0029d40 <SoundPort::buffer16(short*, int)+0x7c>
c0029cd8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0029cdc:	85 c9                	test   ecx,ecx
c0029cde:	7e 60                	jle    c0029d40 <SoundPort::buffer16(short*, int)+0x7c>
c0029ce0:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0029ce4:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0029ce7:	c1 e1 0f             	shl    ecx,0xf
c0029cea:	8d 70 01             	lea    esi,[eax+0x1]
c0029ced:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0029cf0:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0029cf3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029cf6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029cf9:	74 4d                	je     c0029d48 <SoundPort::buffer16(short*, int)+0x84>
c0029cfb:	31 f6                	xor    esi,esi
c0029cfd:	eb 21                	jmp    c0029d20 <SoundPort::buffer16(short*, int)+0x5c>
c0029cff:	90                   	nop
c0029d00:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0029d05:	8d 79 01             	lea    edi,[ecx+0x1]
c0029d08:	c1 e3 0f             	shl    ebx,0xf
c0029d0b:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0029d0e:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0029d11:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0029d14:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029d17:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029d1a:	74 1c                	je     c0029d38 <SoundPort::buffer16(short*, int)+0x74>
c0029d1c:	89 c6                	mov    esi,eax
c0029d1e:	66 90                	xchg   ax,ax
c0029d20:	8d 46 01             	lea    eax,[esi+0x1]
c0029d23:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0029d27:	75 d7                	jne    c0029d00 <SoundPort::buffer16(short*, int)+0x3c>
c0029d29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0029d2d:	8d 76 00             	lea    esi,[esi+0x0]
c0029d30:	5b                   	pop    ebx
c0029d31:	5e                   	pop    esi
c0029d32:	5f                   	pop    edi
c0029d33:	5d                   	pop    ebp
c0029d34:	c3                   	ret    
c0029d35:	8d 76 00             	lea    esi,[esi+0x0]
c0029d38:	5b                   	pop    ebx
c0029d39:	8d 46 02             	lea    eax,[esi+0x2]
c0029d3c:	5e                   	pop    esi
c0029d3d:	5f                   	pop    edi
c0029d3e:	5d                   	pop    ebp
c0029d3f:	c3                   	ret    
c0029d40:	5b                   	pop    ebx
c0029d41:	31 c0                	xor    eax,eax
c0029d43:	5e                   	pop    esi
c0029d44:	5f                   	pop    edi
c0029d45:	5d                   	pop    ebp
c0029d46:	c3                   	ret    
c0029d47:	90                   	nop
c0029d48:	b8 01 00 00 00       	mov    eax,0x1
c0029d4d:	eb e1                	jmp    c0029d30 <SoundPort::buffer16(short*, int)+0x6c>
c0029d4f:	90                   	nop

c0029d50 <SoundPort::buffer32(int*, int)>:
c0029d50:	55                   	push   ebp
c0029d51:	57                   	push   edi
c0029d52:	56                   	push   esi
c0029d53:	53                   	push   ebx
c0029d54:	83 ec 04             	sub    esp,0x4
c0029d57:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0029d5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029d5f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029d62:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0029d66:	89 04 24             	mov    DWORD PTR [esp],eax
c0029d69:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029d6c:	74 5a                	je     c0029dc8 <SoundPort::buffer32(int*, int)+0x78>
c0029d6e:	85 c0                	test   eax,eax
c0029d70:	7e 56                	jle    c0029dc8 <SoundPort::buffer32(int*, int)+0x78>
c0029d72:	8d 71 01             	lea    esi,[ecx+0x1]
c0029d75:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0029d78:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0029d7b:	8b 37                	mov    esi,DWORD PTR [edi]
c0029d7d:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0029d80:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029d83:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029d86:	74 4c                	je     c0029dd4 <SoundPort::buffer32(int*, int)+0x84>
c0029d88:	31 f6                	xor    esi,esi
c0029d8a:	eb 1c                	jmp    c0029da8 <SoundPort::buffer32(int*, int)+0x58>
c0029d8c:	8d 69 01             	lea    ebp,[ecx+0x1]
c0029d8f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0029d92:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0029d95:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0029d98:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0029d9c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029d9f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029da2:	74 18                	je     c0029dbc <SoundPort::buffer32(int*, int)+0x6c>
c0029da4:	89 de                	mov    esi,ebx
c0029da6:	66 90                	xchg   ax,ax
c0029da8:	8d 5e 01             	lea    ebx,[esi+0x1]
c0029dab:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0029dae:	75 dc                	jne    c0029d8c <SoundPort::buffer32(int*, int)+0x3c>
c0029db0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0029db3:	90                   	nop
c0029db4:	83 c4 04             	add    esp,0x4
c0029db7:	5b                   	pop    ebx
c0029db8:	5e                   	pop    esi
c0029db9:	5f                   	pop    edi
c0029dba:	5d                   	pop    ebp
c0029dbb:	c3                   	ret    
c0029dbc:	83 c4 04             	add    esp,0x4
c0029dbf:	8d 46 02             	lea    eax,[esi+0x2]
c0029dc2:	5b                   	pop    ebx
c0029dc3:	5e                   	pop    esi
c0029dc4:	5f                   	pop    edi
c0029dc5:	5d                   	pop    ebp
c0029dc6:	c3                   	ret    
c0029dc7:	90                   	nop
c0029dc8:	83 c4 04             	add    esp,0x4
c0029dcb:	31 c0                	xor    eax,eax
c0029dcd:	5b                   	pop    ebx
c0029dce:	5e                   	pop    esi
c0029dcf:	5f                   	pop    edi
c0029dd0:	5d                   	pop    ebp
c0029dd1:	c3                   	ret    
c0029dd2:	66 90                	xchg   ax,ax
c0029dd4:	b8 01 00 00 00       	mov    eax,0x1
c0029dd9:	eb d9                	jmp    c0029db4 <SoundPort::buffer32(int*, int)+0x64>
c0029ddb:	90                   	nop

c0029ddc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0029ddc:	57                   	push   edi
c0029ddd:	56                   	push   esi
c0029dde:	53                   	push   ebx
c0029ddf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0029de3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0029de7:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0029ded:	39 03                	cmp    DWORD PTR [ebx],eax
c0029def:	74 13                	je     c0029e04 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0029df1:	83 ec 0c             	sub    esp,0xc
c0029df4:	68 68 34 03 c0       	push   0xc0033468
c0029df9:	e8 b0 63 ff ff       	call   c00201ae <KePanic(char const*)>
c0029dfe:	83 c4 10             	add    esp,0x10
c0029e01:	8d 76 00             	lea    esi,[esi+0x0]
c0029e04:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0029e0a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0029e0d:	74 11                	je     c0029e20 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0029e0f:	83 ec 0c             	sub    esp,0xc
c0029e12:	68 a7 34 03 c0       	push   0xc00334a7
c0029e17:	e8 92 63 ff ff       	call   c00201ae <KePanic(char const*)>
c0029e1c:	83 c4 10             	add    esp,0x10
c0029e1f:	90                   	nop
c0029e20:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0029e26:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0029e29:	74 11                	je     c0029e3c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0029e2b:	83 ec 0c             	sub    esp,0xc
c0029e2e:	68 a7 34 03 c0       	push   0xc00334a7
c0029e33:	e8 76 63 ff ff       	call   c00201ae <KePanic(char const*)>
c0029e38:	83 c4 10             	add    esp,0x10
c0029e3b:	90                   	nop
c0029e3c:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0029e3f:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0029e43:	7e 07                	jle    c0029e4c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0029e45:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0029e49:	8d 76 00             	lea    esi,[esi+0x0]
c0029e4c:	85 f6                	test   esi,esi
c0029e4e:	7e 2c                	jle    c0029e7c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0029e50:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0029e54:	8d 3c 36             	lea    edi,[esi+esi*1]
c0029e57:	31 c9                	xor    ecx,ecx
c0029e59:	01 d7                	add    edi,edx
c0029e5b:	90                   	nop
c0029e5c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0029e5f:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0029e62:	85 c0                	test   eax,eax
c0029e64:	79 06                	jns    c0029e6c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0029e66:	05 ff 7f 00 00       	add    eax,0x7fff
c0029e6b:	90                   	nop
c0029e6c:	c1 f8 0f             	sar    eax,0xf
c0029e6f:	83 c1 04             	add    ecx,0x4
c0029e72:	66 01 02             	add    WORD PTR [edx],ax
c0029e75:	83 c2 02             	add    edx,0x2
c0029e78:	39 d7                	cmp    edi,edx
c0029e7a:	75 e0                	jne    c0029e5c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0029e7c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0029e7f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0029e82:	83 ec 04             	sub    esp,0x4
c0029e85:	29 f0                	sub    eax,esi
c0029e87:	c1 e0 02             	shl    eax,0x2
c0029e8a:	50                   	push   eax
c0029e8b:	8d 04 b2             	lea    eax,[edx+esi*4]
c0029e8e:	50                   	push   eax
c0029e8f:	52                   	push   edx
c0029e90:	e8 3b 65 fd ff       	call   c00003d0 <memmove>
c0029e95:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0029e98:	83 c4 10             	add    esp,0x10
c0029e9b:	29 f0                	sub    eax,esi
c0029e9d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0029ea0:	89 f0                	mov    eax,esi
c0029ea2:	5b                   	pop    ebx
c0029ea3:	5e                   	pop    esi
c0029ea4:	5f                   	pop    edi
c0029ea5:	c3                   	ret    
c0029ea6:	66 90                	xchg   ax,ax

c0029ea8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0029ea8:	57                   	push   edi
c0029ea9:	56                   	push   esi
c0029eaa:	53                   	push   ebx
c0029eab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0029eaf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0029eb3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0029eb7:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0029ebd:	39 06                	cmp    DWORD PTR [esi],eax
c0029ebf:	74 13                	je     c0029ed4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0029ec1:	83 ec 0c             	sub    esp,0xc
c0029ec4:	68 88 34 03 c0       	push   0xc0033488
c0029ec9:	e8 e0 62 ff ff       	call   c00201ae <KePanic(char const*)>
c0029ece:	83 c4 10             	add    esp,0x10
c0029ed1:	8d 76 00             	lea    esi,[esi+0x0]
c0029ed4:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0029eda:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0029edd:	74 11                	je     c0029ef0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0029edf:	83 ec 0c             	sub    esp,0xc
c0029ee2:	68 c3 34 03 c0       	push   0xc00334c3
c0029ee7:	e8 c2 62 ff ff       	call   c00201ae <KePanic(char const*)>
c0029eec:	83 c4 10             	add    esp,0x10
c0029eef:	90                   	nop
c0029ef0:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0029ef6:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0029ef9:	74 11                	je     c0029f0c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0029efb:	83 ec 0c             	sub    esp,0xc
c0029efe:	68 c3 34 03 c0       	push   0xc00334c3
c0029f03:	e8 a6 62 ff ff       	call   c00201ae <KePanic(char const*)>
c0029f08:	83 c4 10             	add    esp,0x10
c0029f0b:	90                   	nop
c0029f0c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0029f0f:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c0029f13:	7e 07                	jle    c0029f1c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0029f15:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0029f19:	8d 76 00             	lea    esi,[esi+0x0]
c0029f1c:	85 ff                	test   edi,edi
c0029f1e:	7e 1c                	jle    c0029f3c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0029f20:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0029f27:	31 c0                	xor    eax,eax
c0029f29:	8d 76 00             	lea    esi,[esi+0x0]
c0029f2c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0029f2f:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0029f32:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0029f35:	83 c0 04             	add    eax,0x4
c0029f38:	39 c1                	cmp    ecx,eax
c0029f3a:	75 f0                	jne    c0029f2c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0029f3c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0029f3f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0029f42:	83 ec 04             	sub    esp,0x4
c0029f45:	29 f8                	sub    eax,edi
c0029f47:	c1 e0 02             	shl    eax,0x2
c0029f4a:	50                   	push   eax
c0029f4b:	8d 04 ba             	lea    eax,[edx+edi*4]
c0029f4e:	50                   	push   eax
c0029f4f:	52                   	push   edx
c0029f50:	e8 7b 64 fd ff       	call   c00003d0 <memmove>
c0029f55:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0029f58:	83 c4 10             	add    esp,0x10
c0029f5b:	29 f8                	sub    eax,edi
c0029f5d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0029f60:	89 f8                	mov    eax,edi
c0029f62:	5b                   	pop    ebx
c0029f63:	5e                   	pop    esi
c0029f64:	5f                   	pop    edi
c0029f65:	c3                   	ret    

c0029f66 <PCI::open(int, int, void*)>:
c0029f66:	83 ec 18             	sub    esp,0x18
c0029f69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0029f6d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0029f71:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0029f77:	8b 10                	mov    edx,DWORD PTR [eax]
c0029f79:	50                   	push   eax
c0029f7a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0029f7d:	31 c0                	xor    eax,eax
c0029f7f:	83 c4 1c             	add    esp,0x1c
c0029f82:	c3                   	ret    
c0029f83:	90                   	nop

c0029f84 <PCI::close(int, int, void*)>:
c0029f84:	31 c0                	xor    eax,eax
c0029f86:	c3                   	ret    
c0029f87:	90                   	nop

c0029f88 <PCI::PCI()>:
c0029f88:	83 ec 0c             	sub    esp,0xc
c0029f8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f8f:	83 ec 08             	sub    esp,0x8
c0029f92:	68 df 34 03 c0       	push   0xc00334df
c0029f97:	50                   	push   eax
c0029f98:	e8 db 0b ff ff       	call   c001ab78 <Bus::Bus(char const*)>
c0029f9d:	83 c4 10             	add    esp,0x10
c0029fa0:	ba 88 35 03 c0       	mov    edx,0xc0033588
c0029fa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fa9:	89 10                	mov    DWORD PTR [eax],edx
c0029fab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029faf:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0029fb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fbd:	a3 a0 0b 04 c0       	mov    ds:0xc0040ba0,eax
c0029fc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fc6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0029fcc:	0f b6 d0             	movzx  edx,al
c0029fcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fd3:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0029fda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fde:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0029fe4:	0f b6 d0             	movzx  edx,al
c0029fe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029feb:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0029ff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ff4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0029ffa:	8d 50 01             	lea    edx,[eax+0x1]
c0029ffd:	88 d1                	mov    cl,dl
c0029fff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002a003:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002a009:	0f b6 d0             	movzx  edx,al
c002a00c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a010:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002a014:	83 c9 c0             	or     ecx,0xffffffc0
c002a017:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002a01b:	90                   	nop
c002a01c:	83 c4 0c             	add    esp,0xc
c002a01f:	c3                   	ret    

c002a020 <PCI::readBAR8(unsigned int, int)>:
c002a020:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a024:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a028:	f6 c2 01             	test   dl,0x1
c002a02b:	74 07                	je     c002a034 <PCI::readBAR8(unsigned int, int)+0x14>
c002a02d:	83 e2 fc             	and    edx,0xfffffffc
c002a030:	01 c2                	add    edx,eax
c002a032:	ec                   	in     al,dx
c002a033:	c3                   	ret    
c002a034:	83 e2 f0             	and    edx,0xfffffff0
c002a037:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c002a03a:	c3                   	ret    
c002a03b:	90                   	nop

c002a03c <PCI::readBAR16(unsigned int, int)>:
c002a03c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a040:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a044:	f6 c2 01             	test   dl,0x1
c002a047:	74 08                	je     c002a051 <PCI::readBAR16(unsigned int, int)+0x15>
c002a049:	83 e2 fc             	and    edx,0xfffffffc
c002a04c:	01 c2                	add    edx,eax
c002a04e:	66 ed                	in     ax,dx
c002a050:	c3                   	ret    
c002a051:	83 e2 f0             	and    edx,0xfffffff0
c002a054:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c002a058:	c3                   	ret    
c002a059:	90                   	nop

c002a05a <PCI::readBAR32(unsigned int, int)>:
c002a05a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a05e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a062:	f6 c2 01             	test   dl,0x1
c002a065:	74 07                	je     c002a06e <PCI::readBAR32(unsigned int, int)+0x14>
c002a067:	83 e2 fc             	and    edx,0xfffffffc
c002a06a:	01 c2                	add    edx,eax
c002a06c:	ed                   	in     eax,dx
c002a06d:	c3                   	ret    
c002a06e:	83 e2 f0             	and    edx,0xfffffff0
c002a071:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c002a074:	c3                   	ret    
c002a075:	90                   	nop

c002a076 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c002a076:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a07a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a07e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a082:	f6 c2 01             	test   dl,0x1
c002a085:	74 07                	je     c002a08e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c002a087:	83 e2 fc             	and    edx,0xfffffffc
c002a08a:	01 ca                	add    edx,ecx
c002a08c:	ee                   	out    dx,al
c002a08d:	c3                   	ret    
c002a08e:	83 e2 f0             	and    edx,0xfffffff0
c002a091:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c002a094:	c3                   	ret    
c002a095:	90                   	nop

c002a096 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c002a096:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a09a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a09e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a0a2:	f6 c2 01             	test   dl,0x1
c002a0a5:	74 08                	je     c002a0af <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c002a0a7:	83 e2 fc             	and    edx,0xfffffffc
c002a0aa:	01 ca                	add    edx,ecx
c002a0ac:	66 ef                	out    dx,ax
c002a0ae:	c3                   	ret    
c002a0af:	83 e2 f0             	and    edx,0xfffffff0
c002a0b2:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c002a0b6:	c3                   	ret    
c002a0b7:	90                   	nop

c002a0b8 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c002a0b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a0bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a0c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a0c4:	f6 c2 01             	test   dl,0x1
c002a0c7:	74 07                	je     c002a0d0 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c002a0c9:	83 e2 fc             	and    edx,0xfffffffc
c002a0cc:	01 ca                	add    edx,ecx
c002a0ce:	ef                   	out    dx,eax
c002a0cf:	c3                   	ret    
c002a0d0:	83 e2 f0             	and    edx,0xfffffff0
c002a0d3:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c002a0d6:	c3                   	ret    
c002a0d7:	90                   	nop

c002a0d8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a0d8:	55                   	push   ebp
c002a0d9:	57                   	push   edi
c002a0da:	56                   	push   esi
c002a0db:	53                   	push   ebx
c002a0dc:	83 ec 0c             	sub    esp,0xc
c002a0df:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c002a0e4:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c002a0e8:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002a0ec:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002a0f0:	83 fe 07             	cmp    esi,0x7
c002a0f3:	76 10                	jbe    c002a105 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c002a0f5:	83 ec 0c             	sub    esp,0xc
c002a0f8:	68 e7 34 03 c0       	push   0xc00334e7
c002a0fd:	e8 ac 60 ff ff       	call   c00201ae <KePanic(char const*)>
c002a102:	83 c4 10             	add    esp,0x10
c002a105:	0f b6 db             	movzx  ebx,bl
c002a108:	83 fb 0f             	cmp    ebx,0xf
c002a10b:	76 10                	jbe    c002a11d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c002a10d:	83 ec 0c             	sub    esp,0xc
c002a110:	68 17 35 03 c0       	push   0xc0033517
c002a115:	e8 94 60 ff ff       	call   c00201ae <KePanic(char const*)>
c002a11a:	83 c4 10             	add    esp,0x10
c002a11d:	8d 04 36             	lea    eax,[esi+esi*1]
c002a120:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a125:	83 c8 f0             	or     eax,0xfffffff0
c002a128:	ee                   	out    dx,al
c002a129:	ba fa 0c 00 00       	mov    edx,0xcfa
c002a12e:	89 e8                	mov    eax,ebp
c002a130:	ee                   	out    dx,al
c002a131:	83 c4 0c             	add    esp,0xc
c002a134:	89 d8                	mov    eax,ebx
c002a136:	89 f9                	mov    ecx,edi
c002a138:	c1 e0 08             	shl    eax,0x8
c002a13b:	0f b6 d9             	movzx  ebx,cl
c002a13e:	83 e3 fc             	and    ebx,0xfffffffc
c002a141:	09 d8                	or     eax,ebx
c002a143:	5b                   	pop    ebx
c002a144:	0d 00 c0 ff ff       	or     eax,0xffffc000
c002a149:	5e                   	pop    esi
c002a14a:	5f                   	pop    edi
c002a14b:	5d                   	pop    ebp
c002a14c:	c3                   	ret    
c002a14d:	90                   	nop

c002a14e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a14e:	57                   	push   edi
c002a14f:	56                   	push   esi
c002a150:	53                   	push   ebx
c002a151:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002a155:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002a159:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c002a15f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002a163:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a167:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002a16b:	83 ff 01             	cmp    edi,0x1
c002a16e:	75 3f                	jne    c002a1af <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c002a170:	89 de                	mov    esi,ebx
c002a172:	0f b6 c0             	movzx  eax,al
c002a175:	81 e6 fc 00 00 00    	and    esi,0xfc
c002a17b:	c1 e0 10             	shl    eax,0x10
c002a17e:	0f b6 c9             	movzx  ecx,cl
c002a181:	09 f0                	or     eax,esi
c002a183:	c1 e1 08             	shl    ecx,0x8
c002a186:	0f b6 d2             	movzx  edx,dl
c002a189:	09 c8                	or     eax,ecx
c002a18b:	c1 e2 0b             	shl    edx,0xb
c002a18e:	09 d0                	or     eax,edx
c002a190:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a195:	0d 00 00 00 80       	or     eax,0x80000000
c002a19a:	ef                   	out    dx,eax
c002a19b:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a1a0:	ed                   	in     eax,dx
c002a1a1:	83 e3 02             	and    ebx,0x2
c002a1a4:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002a1ab:	d3 e8                	shr    eax,cl
c002a1ad:	eb 44                	jmp    c002a1f3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c002a1af:	83 ff 02             	cmp    edi,0x2
c002a1b2:	75 2d                	jne    c002a1e1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c002a1b4:	83 ec 0c             	sub    esp,0xc
c002a1b7:	0f b6 c9             	movzx  ecx,cl
c002a1ba:	0f b6 d2             	movzx  edx,dl
c002a1bd:	0f b6 fb             	movzx  edi,bl
c002a1c0:	0f b6 c0             	movzx  eax,al
c002a1c3:	57                   	push   edi
c002a1c4:	51                   	push   ecx
c002a1c5:	52                   	push   edx
c002a1c6:	50                   	push   eax
c002a1c7:	56                   	push   esi
c002a1c8:	e8 0b ff ff ff       	call   c002a0d8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a1cd:	89 c2                	mov    edx,eax
c002a1cf:	ed                   	in     eax,dx
c002a1d0:	83 e3 02             	and    ebx,0x2
c002a1d3:	83 c4 20             	add    esp,0x20
c002a1d6:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002a1dd:	d3 e8                	shr    eax,cl
c002a1df:	eb 12                	jmp    c002a1f3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c002a1e1:	83 ec 0c             	sub    esp,0xc
c002a1e4:	68 47 35 03 c0       	push   0xc0033547
c002a1e9:	e8 c0 5f ff ff       	call   c00201ae <KePanic(char const*)>
c002a1ee:	83 c4 10             	add    esp,0x10
c002a1f1:	31 c0                	xor    eax,eax
c002a1f3:	5b                   	pop    ebx
c002a1f4:	5e                   	pop    esi
c002a1f5:	5f                   	pop    edi
c002a1f6:	c3                   	ret    
c002a1f7:	90                   	nop

c002a1f8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002a1f8:	83 ec 18             	sub    esp,0x18
c002a1fb:	6a 00                	push   0x0
c002a1fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a202:	50                   	push   eax
c002a203:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a208:	50                   	push   eax
c002a209:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a20e:	50                   	push   eax
c002a20f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a213:	e8 36 ff ff ff       	call   c002a14e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a218:	83 c4 2c             	add    esp,0x2c
c002a21b:	c3                   	ret    

c002a21c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002a21c:	83 ec 18             	sub    esp,0x18
c002a21f:	6a 0e                	push   0xe
c002a221:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a226:	50                   	push   eax
c002a227:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a22c:	50                   	push   eax
c002a22d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a232:	50                   	push   eax
c002a233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a237:	e8 12 ff ff ff       	call   c002a14e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a23c:	83 c4 2c             	add    esp,0x2c
c002a23f:	0f b6 c0             	movzx  eax,al
c002a242:	c3                   	ret    
c002a243:	90                   	nop

c002a244 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002a244:	55                   	push   ebp
c002a245:	57                   	push   edi
c002a246:	56                   	push   esi
c002a247:	53                   	push   ebx
c002a248:	83 ec 18             	sub    esp,0x18
c002a24b:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c002a250:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c002a255:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c002a25a:	6a 0a                	push   0xa
c002a25c:	56                   	push   esi
c002a25d:	55                   	push   ebp
c002a25e:	57                   	push   edi
c002a25f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002a263:	e8 e6 fe ff ff       	call   c002a14e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a268:	83 c4 14             	add    esp,0x14
c002a26b:	89 c3                	mov    ebx,eax
c002a26d:	6a 0a                	push   0xa
c002a26f:	0f b6 db             	movzx  ebx,bl
c002a272:	56                   	push   esi
c002a273:	55                   	push   ebp
c002a274:	57                   	push   edi
c002a275:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002a279:	e8 d0 fe ff ff       	call   c002a14e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a27e:	83 c4 2c             	add    esp,0x2c
c002a281:	25 00 ff 00 00       	and    eax,0xff00
c002a286:	09 d8                	or     eax,ebx
c002a288:	5b                   	pop    ebx
c002a289:	5e                   	pop    esi
c002a28a:	5f                   	pop    edi
c002a28b:	5d                   	pop    ebp
c002a28c:	c3                   	ret    
c002a28d:	90                   	nop

c002a28e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002a28e:	83 ec 18             	sub    esp,0x18
c002a291:	6a 08                	push   0x8
c002a293:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a298:	50                   	push   eax
c002a299:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a29e:	50                   	push   eax
c002a29f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a2a4:	50                   	push   eax
c002a2a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a2a9:	e8 a0 fe ff ff       	call   c002a14e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a2ae:	83 c4 2c             	add    esp,0x2c
c002a2b1:	0f b6 c4             	movzx  eax,ah
c002a2b4:	c3                   	ret    
c002a2b5:	90                   	nop

c002a2b6 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002a2b6:	83 ec 18             	sub    esp,0x18
c002a2b9:	6a 08                	push   0x8
c002a2bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a2c0:	50                   	push   eax
c002a2c1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a2c6:	50                   	push   eax
c002a2c7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a2cc:	50                   	push   eax
c002a2cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a2d1:	e8 78 fe ff ff       	call   c002a14e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a2d6:	83 c4 2c             	add    esp,0x2c
c002a2d9:	c3                   	ret    

c002a2da <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002a2da:	83 ec 18             	sub    esp,0x18
c002a2dd:	6a 3c                	push   0x3c
c002a2df:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a2e4:	50                   	push   eax
c002a2e5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a2ea:	50                   	push   eax
c002a2eb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a2f0:	50                   	push   eax
c002a2f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a2f5:	e8 54 fe ff ff       	call   c002a14e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a2fa:	83 c4 2c             	add    esp,0x2c
c002a2fd:	c3                   	ret    

c002a2fe <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002a2fe:	83 ec 18             	sub    esp,0x18
c002a301:	6a 18                	push   0x18
c002a303:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a308:	50                   	push   eax
c002a309:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a30e:	50                   	push   eax
c002a30f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a314:	50                   	push   eax
c002a315:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a319:	e8 30 fe ff ff       	call   c002a14e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a31e:	83 c4 2c             	add    esp,0x2c
c002a321:	0f b6 c4             	movzx  eax,ah
c002a324:	c3                   	ret    
c002a325:	90                   	nop

c002a326 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a326:	55                   	push   ebp
c002a327:	57                   	push   edi
c002a328:	56                   	push   esi
c002a329:	53                   	push   ebx
c002a32a:	83 ec 28             	sub    esp,0x28
c002a32d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002a331:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c002a336:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c002a33b:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c002a340:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002a347:	8d 43 12             	lea    eax,[ebx+0x12]
c002a34a:	83 c3 10             	add    ebx,0x10
c002a34d:	0f b6 c0             	movzx  eax,al
c002a350:	0f b6 db             	movzx  ebx,bl
c002a353:	50                   	push   eax
c002a354:	51                   	push   ecx
c002a355:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c002a359:	57                   	push   edi
c002a35a:	55                   	push   ebp
c002a35b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002a35f:	e8 ea fd ff ff       	call   c002a14e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a364:	83 c4 14             	add    esp,0x14
c002a367:	89 c6                	mov    esi,eax
c002a369:	53                   	push   ebx
c002a36a:	c1 e6 10             	shl    esi,0x10
c002a36d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a371:	51                   	push   ecx
c002a372:	57                   	push   edi
c002a373:	55                   	push   ebp
c002a374:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002a378:	e8 d1 fd ff ff       	call   c002a14e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a37d:	83 c4 3c             	add    esp,0x3c
c002a380:	0f b7 c0             	movzx  eax,ax
c002a383:	5b                   	pop    ebx
c002a384:	09 f0                	or     eax,esi
c002a386:	5e                   	pop    esi
c002a387:	5f                   	pop    edi
c002a388:	5d                   	pop    ebp
c002a389:	c3                   	ret    

c002a38a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002a38a:	55                   	push   ebp
c002a38b:	57                   	push   edi
c002a38c:	56                   	push   esi
c002a38d:	53                   	push   ebx
c002a38e:	83 ec 0c             	sub    esp,0xc
c002a391:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002a395:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002a399:	89 f5                	mov    ebp,esi
c002a39b:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c002a3a1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002a3a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002a3a9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002a3ad:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002a3b1:	83 f9 01             	cmp    ecx,0x1
c002a3b4:	75 5d                	jne    c002a413 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c002a3b6:	0f b6 c8             	movzx  ecx,al
c002a3b9:	0f b6 d2             	movzx  edx,dl
c002a3bc:	c1 e1 10             	shl    ecx,0x10
c002a3bf:	c1 e2 0b             	shl    edx,0xb
c002a3c2:	89 f0                	mov    eax,esi
c002a3c4:	25 fc 00 00 00       	and    eax,0xfc
c002a3c9:	09 c1                	or     ecx,eax
c002a3cb:	89 e8                	mov    eax,ebp
c002a3cd:	0f b6 c0             	movzx  eax,al
c002a3d0:	c1 e0 08             	shl    eax,0x8
c002a3d3:	09 c1                	or     ecx,eax
c002a3d5:	09 d1                	or     ecx,edx
c002a3d7:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a3dc:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002a3e2:	89 c8                	mov    eax,ecx
c002a3e4:	ef                   	out    dx,eax
c002a3e5:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a3ea:	ed                   	in     eax,dx
c002a3eb:	0f b7 db             	movzx  ebx,bx
c002a3ee:	83 e6 02             	and    esi,0x2
c002a3f1:	74 0a                	je     c002a3fd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c002a3f3:	0f b7 d0             	movzx  edx,ax
c002a3f6:	c1 e3 10             	shl    ebx,0x10
c002a3f9:	09 d3                	or     ebx,edx
c002a3fb:	eb 05                	jmp    c002a402 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c002a3fd:	66 31 c0             	xor    ax,ax
c002a400:	09 c3                	or     ebx,eax
c002a402:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a407:	89 c8                	mov    eax,ecx
c002a409:	ef                   	out    dx,eax
c002a40a:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a40f:	89 d8                	mov    eax,ebx
c002a411:	eb 41                	jmp    c002a454 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002a413:	83 f9 02             	cmp    ecx,0x2
c002a416:	75 45                	jne    c002a45d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c002a418:	83 ec 0c             	sub    esp,0xc
c002a41b:	0f b6 d2             	movzx  edx,dl
c002a41e:	89 f1                	mov    ecx,esi
c002a420:	0f b6 c0             	movzx  eax,al
c002a423:	0f b6 f1             	movzx  esi,cl
c002a426:	89 e9                	mov    ecx,ebp
c002a428:	56                   	push   esi
c002a429:	0f b6 c9             	movzx  ecx,cl
c002a42c:	51                   	push   ecx
c002a42d:	52                   	push   edx
c002a42e:	50                   	push   eax
c002a42f:	57                   	push   edi
c002a430:	e8 a3 fc ff ff       	call   c002a0d8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a435:	89 c2                	mov    edx,eax
c002a437:	ed                   	in     eax,dx
c002a438:	83 c4 20             	add    esp,0x20
c002a43b:	0f b7 db             	movzx  ebx,bx
c002a43e:	f6 c2 02             	test   dl,0x2
c002a441:	74 0c                	je     c002a44f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c002a443:	0f b7 c8             	movzx  ecx,ax
c002a446:	89 d8                	mov    eax,ebx
c002a448:	c1 e0 10             	shl    eax,0x10
c002a44b:	09 c8                	or     eax,ecx
c002a44d:	eb 05                	jmp    c002a454 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002a44f:	66 31 c0             	xor    ax,ax
c002a452:	09 d8                	or     eax,ebx
c002a454:	ef                   	out    dx,eax
c002a455:	83 c4 0c             	add    esp,0xc
c002a458:	5b                   	pop    ebx
c002a459:	5e                   	pop    esi
c002a45a:	5f                   	pop    edi
c002a45b:	5d                   	pop    ebp
c002a45c:	c3                   	ret    
c002a45d:	c7 44 24 20 47 35 03 c0 	mov    DWORD PTR [esp+0x20],0xc0033547
c002a465:	83 c4 0c             	add    esp,0xc
c002a468:	5b                   	pop    ebx
c002a469:	5e                   	pop    esi
c002a46a:	5f                   	pop    edi
c002a46b:	5d                   	pop    ebp
c002a46c:	e9 3d 5d ff ff       	jmp    c00201ae <KePanic(char const*)>
c002a471:	90                   	nop

c002a472 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c002a472:	55                   	push   ebp
c002a473:	57                   	push   edi
c002a474:	56                   	push   esi
c002a475:	53                   	push   ebx
c002a476:	81 ec 4c 01 00 00    	sub    esp,0x14c
c002a47c:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c002a483:	80 3d ac 0b 04 c0 00 	cmp    BYTE PTR ds:0xc0040bac,0x0
c002a48a:	0f 85 bd 00 00 00    	jne    c002a54d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c002a490:	83 ec 0c             	sub    esp,0xc
c002a493:	68 14 01 00 00       	push   0x114
c002a498:	e8 69 be fe ff       	call   c0016306 <malloc>
c002a49d:	83 c4 0c             	add    esp,0xc
c002a4a0:	89 c3                	mov    ebx,eax
c002a4a2:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c002a4a8:	68 4d 35 03 c0       	push   0xc003354d
c002a4ad:	50                   	push   eax
c002a4ae:	e8 e9 fe fe ff       	call   c001a39c <File::File(char const*, Process*)>
c002a4b3:	83 c4 10             	add    esp,0x10
c002a4b6:	85 db                	test   ebx,ebx
c002a4b8:	0f 84 67 02 00 00    	je     c002a725 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a4be:	56                   	push   esi
c002a4bf:	56                   	push   esi
c002a4c0:	6a 01                	push   0x1
c002a4c2:	53                   	push   ebx
c002a4c3:	e8 f2 fe fe ff       	call   c001a3ba <File::open(FileOpenMode)>
c002a4c8:	83 c4 10             	add    esp,0x10
c002a4cb:	85 c0                	test   eax,eax
c002a4cd:	0f 85 52 02 00 00    	jne    c002a725 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a4d3:	52                   	push   edx
c002a4d4:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c002a4d8:	50                   	push   eax
c002a4d9:	8d 44 24 48          	lea    eax,[esp+0x48]
c002a4dd:	50                   	push   eax
c002a4de:	53                   	push   ebx
c002a4df:	e8 d8 01 ff ff       	call   c001a6bc <File::stat(unsigned long long*, bool*)>
c002a4e4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002a4e8:	40                   	inc    eax
c002a4e9:	89 04 24             	mov    DWORD PTR [esp],eax
c002a4ec:	e8 15 be fe ff       	call   c0016306 <malloc>
c002a4f1:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c002a4f5:	a3 a8 0b 04 c0       	mov    ds:0xc0040ba8,eax
c002a4fa:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c002a4fe:	59                   	pop    ecx
c002a4ff:	8b 13                	mov    edx,DWORD PTR [ebx]
c002a501:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c002a505:	51                   	push   ecx
c002a506:	50                   	push   eax
c002a507:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002a50b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002a50f:	53                   	push   ebx
c002a510:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002a513:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c002a517:	83 c4 20             	add    esp,0x20
c002a51a:	89 c8                	mov    eax,ecx
c002a51c:	99                   	cdq    
c002a51d:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c002a521:	0f 85 fe 01 00 00    	jne    c002a725 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a527:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c002a52b:	0f 85 f4 01 00 00    	jne    c002a725 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a531:	83 ec 0c             	sub    esp,0xc
c002a534:	53                   	push   ebx
c002a535:	e8 de fe fe ff       	call   c001a418 <File::close()>
c002a53a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002a53e:	c6 05 ac 0b 04 c0 01 	mov    BYTE PTR ds:0xc0040bac,0x1
c002a545:	a3 a4 0b 04 c0       	mov    ds:0xc0040ba4,eax
c002a54a:	83 c4 10             	add    esp,0x10
c002a54d:	a1 a4 0b 04 c0       	mov    eax,ds:0xc0040ba4
c002a552:	8b 1d a8 0b 04 c0    	mov    ebx,DWORD PTR ds:0xc0040ba8
c002a558:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002a55c:	31 f6                	xor    esi,esi
c002a55e:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c002a566:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c002a56d:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c002a572:	31 c9                	xor    ecx,ecx
c002a574:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c002a57c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c002a581:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c002a589:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002a58d:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c002a595:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c002a599:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c002a59d:	0f 8e 82 01 00 00    	jle    c002a725 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a5a3:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c002a5a6:	d4 40                	aam    0x40
c002a5a8:	d5 39                	aad    0x39
c002a5aa:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c002a5ae:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c002a5b2:	d4 40                	aam    0x40
c002a5b4:	d5 39                	aad    0x39
c002a5b6:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002a5ba:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c002a5be:	d4 40                	aam    0x40
c002a5c0:	d5 39                	aad    0x39
c002a5c2:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c002a5c6:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c002a5ca:	d4 40                	aam    0x40
c002a5cc:	d5 39                	aad    0x39
c002a5ce:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c002a5d2:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c002a5d6:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c002a5da:	3c 56                	cmp    al,0x56
c002a5dc:	74 43                	je     c002a621 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c002a5de:	d4 40                	aam    0x40
c002a5e0:	d5 39                	aad    0x39
c002a5e2:	8d 48 d0             	lea    ecx,[eax-0x30]
c002a5e5:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c002a5e9:	0f b6 c9             	movzx  ecx,cl
c002a5ec:	c1 e1 04             	shl    ecx,0x4
c002a5ef:	d4 40                	aam    0x40
c002a5f1:	d5 39                	aad    0x39
c002a5f3:	83 e8 30             	sub    eax,0x30
c002a5f6:	0f b6 c0             	movzx  eax,al
c002a5f9:	09 c1                	or     ecx,eax
c002a5fb:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c002a5ff:	c1 e1 04             	shl    ecx,0x4
c002a602:	d4 40                	aam    0x40
c002a604:	d5 39                	aad    0x39
c002a606:	83 e8 30             	sub    eax,0x30
c002a609:	0f b6 c0             	movzx  eax,al
c002a60c:	09 c1                	or     ecx,eax
c002a60e:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c002a612:	c1 e1 04             	shl    ecx,0x4
c002a615:	d4 40                	aam    0x40
c002a617:	d5 39                	aad    0x39
c002a619:	83 e8 30             	sub    eax,0x30
c002a61c:	0f b6 c0             	movzx  eax,al
c002a61f:	09 c1                	or     ecx,eax
c002a621:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c002a625:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c002a629:	3c 58                	cmp    al,0x58
c002a62b:	74 47                	je     c002a674 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c002a62d:	d4 40                	aam    0x40
c002a62f:	d5 39                	aad    0x39
c002a631:	8d 50 d0             	lea    edx,[eax-0x30]
c002a634:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c002a638:	0f b6 d2             	movzx  edx,dl
c002a63b:	c1 e2 04             	shl    edx,0x4
c002a63e:	d4 40                	aam    0x40
c002a640:	d5 39                	aad    0x39
c002a642:	83 e8 30             	sub    eax,0x30
c002a645:	0f b6 c0             	movzx  eax,al
c002a648:	09 c2                	or     edx,eax
c002a64a:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c002a64e:	c1 e2 04             	shl    edx,0x4
c002a651:	d4 40                	aam    0x40
c002a653:	d5 39                	aad    0x39
c002a655:	83 e8 30             	sub    eax,0x30
c002a658:	0f b6 c0             	movzx  eax,al
c002a65b:	09 c2                	or     edx,eax
c002a65d:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c002a661:	c1 e2 04             	shl    edx,0x4
c002a664:	d4 40                	aam    0x40
c002a666:	d5 39                	aad    0x39
c002a668:	83 e8 30             	sub    eax,0x30
c002a66b:	0f b6 c0             	movzx  eax,al
c002a66e:	09 c2                	or     edx,eax
c002a670:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002a674:	83 c6 10             	add    esi,0x10
c002a677:	8d 7c 24 40          	lea    edi,[esp+0x40]
c002a67b:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c002a67f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c002a683:	83 fa 0a             	cmp    edx,0xa
c002a686:	74 0b                	je     c002a693 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c002a688:	47                   	inc    edi
c002a689:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c002a68d:	75 19                	jne    c002a6a8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c002a68f:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c002a693:	31 c0                	xor    eax,eax
c002a695:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c002a69a:	0f 94 c0             	sete   al
c002a69d:	01 c6                	add    esi,eax
c002a69f:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c002a6a4:	75 0b                	jne    c002a6b1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c002a6a6:	eb 14                	jmp    c002a6bc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c002a6a8:	46                   	inc    esi
c002a6a9:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c002a6ac:	c6 07 00             	mov    BYTE PTR [edi],0x0
c002a6af:	eb ca                	jmp    c002a67b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c002a6b1:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c002a6b6:	0f 85 dd fe ff ff    	jne    c002a599 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002a6bc:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c002a6c1:	74 10                	je     c002a6d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c002a6c3:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c002a6c8:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c002a6cd:	0f 85 c6 fe ff ff    	jne    c002a599 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002a6d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002a6d7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002a6db:	83 e8 30             	sub    eax,0x30
c002a6de:	83 ef 30             	sub    edi,0x30
c002a6e1:	c1 e0 04             	shl    eax,0x4
c002a6e4:	09 f8                	or     eax,edi
c002a6e6:	0f b6 c0             	movzx  eax,al
c002a6e9:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c002a6ed:	0f 85 a6 fe ff ff    	jne    c002a599 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002a6f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a6f7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c002a6fb:	83 e8 30             	sub    eax,0x30
c002a6fe:	83 ef 30             	sub    edi,0x30
c002a701:	c1 e0 04             	shl    eax,0x4
c002a704:	09 f8                	or     eax,edi
c002a706:	0f b6 c0             	movzx  eax,al
c002a709:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c002a70d:	0f 85 86 fe ff ff    	jne    c002a599 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002a713:	50                   	push   eax
c002a714:	50                   	push   eax
c002a715:	8d 44 24 48          	lea    eax,[esp+0x48]
c002a719:	50                   	push   eax
c002a71a:	55                   	push   ebp
c002a71b:	e8 20 5f fd ff       	call   c0000640 <strcpy>
c002a720:	83 c4 10             	add    esp,0x10
c002a723:	eb 06                	jmp    c002a72b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c002a725:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c002a729:	31 ed                	xor    ebp,ebp
c002a72b:	81 c4 4c 01 00 00    	add    esp,0x14c
c002a731:	89 e8                	mov    eax,ebp
c002a733:	5b                   	pop    ebx
c002a734:	5e                   	pop    esi
c002a735:	5f                   	pop    edi
c002a736:	5d                   	pop    ebp
c002a737:	c3                   	ret    

c002a738 <PCI::checkBus(unsigned char)>:
c002a738:	56                   	push   esi
c002a739:	53                   	push   ebx
c002a73a:	31 db                	xor    ebx,ebx
c002a73c:	51                   	push   ecx
c002a73d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002a742:	52                   	push   edx
c002a743:	53                   	push   ebx
c002a744:	43                   	inc    ebx
c002a745:	56                   	push   esi
c002a746:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a74a:	e8 03 03 00 00       	call   c002aa52 <PCI::checkDevice(unsigned char, unsigned char)>
c002a74f:	83 c4 10             	add    esp,0x10
c002a752:	83 fb 20             	cmp    ebx,0x20
c002a755:	75 eb                	jne    c002a742 <PCI::checkBus(unsigned char)+0xa>
c002a757:	58                   	pop    eax
c002a758:	5b                   	pop    ebx
c002a759:	5e                   	pop    esi
c002a75a:	c3                   	ret    
c002a75b:	90                   	nop

c002a75c <PCI::foundDevice(PCIDeviceInfo)>:
c002a75c:	55                   	push   ebp
c002a75d:	57                   	push   edi
c002a75e:	56                   	push   esi
c002a75f:	53                   	push   ebx
c002a760:	83 ec 1c             	sub    esp,0x1c
c002a763:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c002a768:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002a76c:	3d ff ff 00 00       	cmp    eax,0xffff
c002a771:	0f 84 57 01 00 00    	je     c002a8ce <PCI::foundDevice(PCIDeviceInfo)+0x172>
c002a777:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c002a77c:	66 3d 06 04          	cmp    ax,0x406
c002a780:	75 2c                	jne    c002a7ae <PCI::foundDevice(PCIDeviceInfo)+0x52>
c002a782:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c002a787:	50                   	push   eax
c002a788:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c002a78d:	50                   	push   eax
c002a78e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c002a793:	50                   	push   eax
c002a794:	53                   	push   ebx
c002a795:	e8 64 fb ff ff       	call   c002a2fe <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002a79a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c002a79e:	0f b6 c0             	movzx  eax,al
c002a7a1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c002a7a5:	83 c4 2c             	add    esp,0x2c
c002a7a8:	5b                   	pop    ebx
c002a7a9:	5e                   	pop    esi
c002a7aa:	5f                   	pop    edi
c002a7ab:	5d                   	pop    ebp
c002a7ac:	eb 8a                	jmp    c002a738 <PCI::checkBus(unsigned char)>
c002a7ae:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002a7b2:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c002a7b8:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002a7bc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c002a7c0:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c002a7c5:	85 d2                	test   edx,edx
c002a7c7:	74 36                	je     c002a7ff <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c002a7c9:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c002a7cc:	85 c9                	test   ecx,ecx
c002a7ce:	74 2b                	je     c002a7fb <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c002a7d0:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c002a7d6:	31 ee                	xor    esi,ebp
c002a7d8:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c002a7de:	75 1b                	jne    c002a7fb <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c002a7e0:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c002a7e4:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c002a7ea:	75 0f                	jne    c002a7fb <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c002a7ec:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c002a7f3:	39 f9                	cmp    ecx,edi
c002a7f5:	0f 84 d3 00 00 00    	je     c002a8ce <PCI::foundDevice(PCIDeviceInfo)+0x172>
c002a7fb:	8b 12                	mov    edx,DWORD PTR [edx]
c002a7fd:	eb c6                	jmp    c002a7c5 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c002a7ff:	3d 01 06 00 00       	cmp    eax,0x601
c002a804:	75 19                	jne    c002a81f <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c002a806:	83 ec 0c             	sub    esp,0xc
c002a809:	68 64 01 00 00       	push   0x164
c002a80e:	e8 f3 ba fe ff       	call   c0016306 <malloc>
c002a813:	89 c5                	mov    ebp,eax
c002a815:	89 04 24             	mov    DWORD PTR [esp],eax
c002a818:	e8 a1 0e 00 00       	call   c002b6be <SATABus::SATABus()>
c002a81d:	eb 1e                	jmp    c002a83d <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c002a81f:	3d 01 01 00 00       	cmp    eax,0x101
c002a824:	75 62                	jne    c002a888 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c002a826:	83 ec 0c             	sub    esp,0xc
c002a829:	68 70 02 00 00       	push   0x270
c002a82e:	e8 d3 ba fe ff       	call   c0016306 <malloc>
c002a833:	89 c5                	mov    ebp,eax
c002a835:	89 04 24             	mov    DWORD PTR [esp],eax
c002a838:	e8 e5 02 00 00       	call   c002ab22 <IDE::IDE()>
c002a83d:	5f                   	pop    edi
c002a83e:	58                   	pop    eax
c002a83f:	55                   	push   ebp
c002a840:	53                   	push   ebx
c002a841:	e8 d0 09 ff ff       	call   c001b216 <Device::addChild(Device*)>
c002a846:	83 ec 1c             	sub    esp,0x1c
c002a849:	b9 09 00 00 00       	mov    ecx,0x9
c002a84e:	fc                   	cld    
c002a84f:	89 e7                	mov    edi,esp
c002a851:	8d 74 24 60          	lea    esi,[esp+0x60]
c002a855:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002a857:	55                   	push   ebp
c002a858:	e8 ff 08 ff ff       	call   c001b15c <Device::preOpenPCI(PCIDeviceInfo)>
c002a85d:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002a860:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c002a864:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c002a86c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c002a874:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c002a87c:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c002a87f:	83 c4 4c             	add    esp,0x4c
c002a882:	5b                   	pop    ebx
c002a883:	5e                   	pop    esi
c002a884:	5f                   	pop    edi
c002a885:	5d                   	pop    ebp
c002a886:	ff e0                	jmp    eax
c002a888:	83 ec 0c             	sub    esp,0xc
c002a88b:	68 58 01 00 00       	push   0x158
c002a890:	e8 71 ba fe ff       	call   c0016306 <malloc>
c002a895:	89 c5                	mov    ebp,eax
c002a897:	58                   	pop    eax
c002a898:	5a                   	pop    edx
c002a899:	68 66 35 03 c0       	push   0xc0033566
c002a89e:	55                   	push   ebp
c002a89f:	e8 26 0c ff ff       	call   c001b4ca <DriverlessDevice::DriverlessDevice(char const*)>
c002a8a4:	59                   	pop    ecx
c002a8a5:	5e                   	pop    esi
c002a8a6:	55                   	push   ebp
c002a8a7:	53                   	push   ebx
c002a8a8:	e8 69 09 ff ff       	call   c001b216 <Device::addChild(Device*)>
c002a8ad:	83 c4 10             	add    esp,0x10
c002a8b0:	b9 09 00 00 00       	mov    ecx,0x9
c002a8b5:	fc                   	cld    
c002a8b6:	8d 7c 24 34          	lea    edi,[esp+0x34]
c002a8ba:	89 fe                	mov    esi,edi
c002a8bc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002a8be:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c002a8c2:	83 c4 1c             	add    esp,0x1c
c002a8c5:	5b                   	pop    ebx
c002a8c6:	5e                   	pop    esi
c002a8c7:	5f                   	pop    edi
c002a8c8:	5d                   	pop    ebp
c002a8c9:	e9 8e 08 ff ff       	jmp    c001b15c <Device::preOpenPCI(PCIDeviceInfo)>
c002a8ce:	83 c4 1c             	add    esp,0x1c
c002a8d1:	5b                   	pop    ebx
c002a8d2:	5e                   	pop    esi
c002a8d3:	5f                   	pop    edi
c002a8d4:	5d                   	pop    ebp
c002a8d5:	c3                   	ret    

c002a8d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002a8d6:	55                   	push   ebp
c002a8d7:	57                   	push   edi
c002a8d8:	56                   	push   esi
c002a8d9:	53                   	push   ebx
c002a8da:	83 ec 68             	sub    esp,0x68
c002a8dd:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c002a8e1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c002a8e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002a8ec:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c002a8f3:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c002a8f8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002a8fc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c002a903:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c002a908:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002a90c:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c002a911:	6a 0c                	push   0xc
c002a913:	57                   	push   edi
c002a914:	53                   	push   ebx
c002a915:	56                   	push   esi
c002a916:	55                   	push   ebp
c002a917:	e8 32 f8 ff ff       	call   c002a14e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a91c:	83 c4 20             	add    esp,0x20
c002a91f:	57                   	push   edi
c002a920:	53                   	push   ebx
c002a921:	56                   	push   esi
c002a922:	55                   	push   ebp
c002a923:	e8 1c f9 ff ff       	call   c002a244 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002a928:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c002a92d:	57                   	push   edi
c002a92e:	53                   	push   ebx
c002a92f:	56                   	push   esi
c002a930:	55                   	push   ebp
c002a931:	e8 a4 f9 ff ff       	call   c002a2da <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002a936:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c002a93a:	83 c4 14             	add    esp,0x14
c002a93d:	6a 3c                	push   0x3c
c002a93f:	57                   	push   edi
c002a940:	53                   	push   ebx
c002a941:	56                   	push   esi
c002a942:	55                   	push   ebp
c002a943:	e8 06 f8 ff ff       	call   c002a14e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a948:	0f b6 c4             	movzx  eax,ah
c002a94b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002a94f:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002a953:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c002a957:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002a95c:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c002a962:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c002a968:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002a96c:	83 c4 20             	add    esp,0x20
c002a96f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c002a974:	74 30                	je     c002a9a6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002a976:	31 c0                	xor    eax,eax
c002a978:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c002a97c:	7e 28                	jle    c002a9a6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002a97e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c002a986:	39 cb                	cmp    ebx,ecx
c002a988:	75 19                	jne    c002a9a3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002a98a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c002a992:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c002a996:	75 0b                	jne    c002a9a3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002a998:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c002a99f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c002a9a3:	40                   	inc    eax
c002a9a4:	eb d2                	jmp    c002a978 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c002a9a6:	31 d2                	xor    edx,edx
c002a9a8:	83 ec 0c             	sub    esp,0xc
c002a9ab:	57                   	push   edi
c002a9ac:	53                   	push   ebx
c002a9ad:	56                   	push   esi
c002a9ae:	52                   	push   edx
c002a9af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c002a9b3:	55                   	push   ebp
c002a9b4:	e8 6d f9 ff ff       	call   c002a326 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a9b9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002a9bd:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002a9c1:	42                   	inc    edx
c002a9c2:	83 c4 20             	add    esp,0x20
c002a9c5:	83 fa 06             	cmp    edx,0x6
c002a9c8:	75 de                	jne    c002a9a8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c002a9ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002a9ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a9d2:	c1 e2 08             	shl    edx,0x8
c002a9d5:	83 ec 0c             	sub    esp,0xc
c002a9d8:	0f b6 c4             	movzx  eax,ah
c002a9db:	09 d0                	or     eax,edx
c002a9dd:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c002a9e2:	6a 02                	push   0x2
c002a9e4:	57                   	push   edi
c002a9e5:	53                   	push   ebx
c002a9e6:	56                   	push   esi
c002a9e7:	55                   	push   ebp
c002a9e8:	e8 61 f7 ff ff       	call   c002a14e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a9ed:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c002a9f2:	83 c4 20             	add    esp,0x20
c002a9f5:	57                   	push   edi
c002a9f6:	53                   	push   ebx
c002a9f7:	56                   	push   esi
c002a9f8:	55                   	push   ebp
c002a9f9:	e8 90 f8 ff ff       	call   c002a28e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002a9fe:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002aa02:	57                   	push   edi
c002aa03:	53                   	push   ebx
c002aa04:	56                   	push   esi
c002aa05:	55                   	push   ebp
c002aa06:	e8 ed f7 ff ff       	call   c002a1f8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002aa0b:	b9 09 00 00 00       	mov    ecx,0x9
c002aa10:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c002aa15:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c002aa19:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c002aa1d:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c002aa21:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c002aa25:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c002aa29:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c002aa2d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002aa31:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c002aa35:	83 ec 0c             	sub    esp,0xc
c002aa38:	fc                   	cld    
c002aa39:	89 e7                	mov    edi,esp
c002aa3b:	8d 74 24 58          	lea    esi,[esp+0x58]
c002aa3f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002aa41:	55                   	push   ebp
c002aa42:	e8 15 fd ff ff       	call   c002a75c <PCI::foundDevice(PCIDeviceInfo)>
c002aa47:	81 c4 8c 00 00 00    	add    esp,0x8c
c002aa4d:	5b                   	pop    ebx
c002aa4e:	5e                   	pop    esi
c002aa4f:	5f                   	pop    edi
c002aa50:	5d                   	pop    ebp
c002aa51:	c3                   	ret    

c002aa52 <PCI::checkDevice(unsigned char, unsigned char)>:
c002aa52:	55                   	push   ebp
c002aa53:	57                   	push   edi
c002aa54:	56                   	push   esi
c002aa55:	53                   	push   ebx
c002aa56:	83 ec 0c             	sub    esp,0xc
c002aa59:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002aa5d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c002aa62:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002aa67:	6a 00                	push   0x0
c002aa69:	56                   	push   esi
c002aa6a:	57                   	push   edi
c002aa6b:	55                   	push   ebp
c002aa6c:	e8 87 f7 ff ff       	call   c002a1f8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002aa71:	6a 00                	push   0x0
c002aa73:	56                   	push   esi
c002aa74:	57                   	push   edi
c002aa75:	55                   	push   ebp
c002aa76:	e8 5b fe ff ff       	call   c002a8d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002aa7b:	83 c4 20             	add    esp,0x20
c002aa7e:	6a 00                	push   0x0
c002aa80:	56                   	push   esi
c002aa81:	57                   	push   edi
c002aa82:	55                   	push   ebp
c002aa83:	e8 94 f7 ff ff       	call   c002a21c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002aa88:	83 c4 10             	add    esp,0x10
c002aa8b:	a8 80                	test   al,0x80
c002aa8d:	74 2d                	je     c002aabc <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c002aa8f:	bb 01 00 00 00       	mov    ebx,0x1
c002aa94:	53                   	push   ebx
c002aa95:	56                   	push   esi
c002aa96:	57                   	push   edi
c002aa97:	55                   	push   ebp
c002aa98:	e8 5b f7 ff ff       	call   c002a1f8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002aa9d:	83 c4 10             	add    esp,0x10
c002aaa0:	0f b7 c0             	movzx  eax,ax
c002aaa3:	3d ff ff 00 00       	cmp    eax,0xffff
c002aaa8:	74 0c                	je     c002aab6 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c002aaaa:	53                   	push   ebx
c002aaab:	56                   	push   esi
c002aaac:	57                   	push   edi
c002aaad:	55                   	push   ebp
c002aaae:	e8 23 fe ff ff       	call   c002a8d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002aab3:	83 c4 10             	add    esp,0x10
c002aab6:	43                   	inc    ebx
c002aab7:	83 fb 08             	cmp    ebx,0x8
c002aaba:	75 d8                	jne    c002aa94 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002aabc:	83 c4 0c             	add    esp,0xc
c002aabf:	5b                   	pop    ebx
c002aac0:	5e                   	pop    esi
c002aac1:	5f                   	pop    edi
c002aac2:	5d                   	pop    ebp
c002aac3:	c3                   	ret    

c002aac4 <PCI::detect()>:
c002aac4:	56                   	push   esi
c002aac5:	53                   	push   ebx
c002aac6:	53                   	push   ebx
c002aac7:	31 db                	xor    ebx,ebx
c002aac9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002aacd:	6a 00                	push   0x0
c002aacf:	6a 00                	push   0x0
c002aad1:	6a 00                	push   0x0
c002aad3:	56                   	push   esi
c002aad4:	e8 43 f7 ff ff       	call   c002a21c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002aad9:	83 c4 10             	add    esp,0x10
c002aadc:	a8 80                	test   al,0x80
c002aade:	75 21                	jne    c002ab01 <PCI::detect()+0x3d>
c002aae0:	51                   	push   ecx
c002aae1:	51                   	push   ecx
c002aae2:	6a 00                	push   0x0
c002aae4:	56                   	push   esi
c002aae5:	e8 4e fc ff ff       	call   c002a738 <PCI::checkBus(unsigned char)>
c002aaea:	83 c4 10             	add    esp,0x10
c002aaed:	eb 2a                	jmp    c002ab19 <PCI::detect()+0x55>
c002aaef:	52                   	push   edx
c002aaf0:	52                   	push   edx
c002aaf1:	53                   	push   ebx
c002aaf2:	43                   	inc    ebx
c002aaf3:	56                   	push   esi
c002aaf4:	e8 3f fc ff ff       	call   c002a738 <PCI::checkBus(unsigned char)>
c002aaf9:	83 c4 10             	add    esp,0x10
c002aafc:	83 fb 08             	cmp    ebx,0x8
c002aaff:	74 18                	je     c002ab19 <PCI::detect()+0x55>
c002ab01:	53                   	push   ebx
c002ab02:	6a 00                	push   0x0
c002ab04:	6a 00                	push   0x0
c002ab06:	56                   	push   esi
c002ab07:	e8 ec f6 ff ff       	call   c002a1f8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002ab0c:	83 c4 10             	add    esp,0x10
c002ab0f:	0f b7 c0             	movzx  eax,ax
c002ab12:	3d ff ff 00 00       	cmp    eax,0xffff
c002ab17:	74 d6                	je     c002aaef <PCI::detect()+0x2b>
c002ab19:	58                   	pop    eax
c002ab1a:	5b                   	pop    ebx
c002ab1b:	5e                   	pop    esi
c002ab1c:	c3                   	ret    
c002ab1d:	90                   	nop

c002ab1e <IDE::close(int, int, void*)>:
c002ab1e:	83 c8 ff             	or     eax,0xffffffff
c002ab21:	c3                   	ret    

c002ab22 <IDE::IDE()>:
c002ab22:	83 ec 0c             	sub    esp,0xc
c002ab25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ab29:	83 ec 08             	sub    esp,0x8
c002ab2c:	68 ac 35 03 c0       	push   0xc00335ac
c002ab31:	50                   	push   eax
c002ab32:	e8 39 0a ff ff       	call   c001b570 <HardDiskController::HardDiskController(char const*)>
c002ab37:	83 c4 10             	add    esp,0x10
c002ab3a:	ba 3c 36 03 c0       	mov    edx,0xc003363c
c002ab3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ab43:	89 10                	mov    DWORD PTR [eax],edx
c002ab45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ab49:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002ab50:	90                   	nop
c002ab51:	83 c4 0c             	add    esp,0xc
c002ab54:	c3                   	ret    
c002ab55:	90                   	nop

c002ab56 <IDE::prepareInterrupt(unsigned char)>:
c002ab56:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002ab5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002ab5f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002ab67:	c3                   	ret    

c002ab68 <selectDrive(unsigned char, unsigned char)>:
c002ab68:	c3                   	ret    
c002ab69:	90                   	nop

c002ab6a <IDE::getBase(unsigned char)>:
c002ab6a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002ab6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ab73:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002ab7b:	c3                   	ret    

c002ab7c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c002ab7c:	55                   	push   ebp
c002ab7d:	57                   	push   edi
c002ab7e:	56                   	push   esi
c002ab7f:	53                   	push   ebx
c002ab80:	83 ec 1c             	sub    esp,0x1c
c002ab83:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002ab87:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002ab8b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c002ab8e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002ab92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002ab96:	80 f9 03             	cmp    cl,0x3
c002ab99:	77 4f                	ja     c002abea <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c002ab9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002ab9f:	0f b6 fa             	movzx  edi,dl
c002aba2:	0f b6 db             	movzx  ebx,bl
c002aba5:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c002aba8:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c002abad:	80 ca 80             	or     dl,0x80
c002abb0:	52                   	push   edx
c002abb1:	6a 0c                	push   0xc
c002abb3:	57                   	push   edi
c002abb4:	56                   	push   esi
c002abb5:	e8 c2 ff ff ff       	call   c002ab7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002abba:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002abbf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002abc3:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002abc7:	ee                   	out    dx,al
c002abc8:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002abcd:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c002abd1:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002abd5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002abd9:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002abe1:	83 c4 2c             	add    esp,0x2c
c002abe4:	5b                   	pop    ebx
c002abe5:	5e                   	pop    esi
c002abe6:	5f                   	pop    edi
c002abe7:	5d                   	pop    ebp
c002abe8:	eb 92                	jmp    c002ab7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002abea:	0f b6 cb             	movzx  ecx,bl
c002abed:	83 f9 07             	cmp    ecx,0x7
c002abf0:	77 12                	ja     c002ac04 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c002abf2:	0f b6 d2             	movzx  edx,dl
c002abf5:	0f b6 db             	movzx  ebx,bl
c002abf8:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c002ac00:	01 da                	add    edx,ebx
c002ac02:	eb 2f                	jmp    c002ac33 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002ac04:	83 f9 0d             	cmp    ecx,0xd
c002ac07:	77 13                	ja     c002ac1c <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c002ac09:	0f b6 d2             	movzx  edx,dl
c002ac0c:	0f b6 db             	movzx  ebx,bl
c002ac0f:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c002ac16:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002ac1a:	eb 17                	jmp    c002ac33 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002ac1c:	83 f9 15             	cmp    ecx,0x15
c002ac1f:	77 13                	ja     c002ac34 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c002ac21:	0f b6 d2             	movzx  edx,dl
c002ac24:	0f b6 db             	movzx  ebx,bl
c002ac27:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c002ac2f:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002ac33:	ee                   	out    dx,al
c002ac34:	83 c4 1c             	add    esp,0x1c
c002ac37:	5b                   	pop    ebx
c002ac38:	5e                   	pop    esi
c002ac39:	5f                   	pop    edi
c002ac3a:	5d                   	pop    ebp
c002ac3b:	c3                   	ret    

c002ac3c <IDE::read(unsigned char, unsigned char)>:
c002ac3c:	55                   	push   ebp
c002ac3d:	57                   	push   edi
c002ac3e:	56                   	push   esi
c002ac3f:	53                   	push   ebx
c002ac40:	83 ec 1c             	sub    esp,0x1c
c002ac43:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002ac47:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002ac4b:	8d 43 f8             	lea    eax,[ebx-0x8]
c002ac4e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002ac52:	3c 03                	cmp    al,0x3
c002ac54:	77 40                	ja     c002ac96 <IDE::read(unsigned char, unsigned char)+0x5a>
c002ac56:	0f b6 f9             	movzx  edi,cl
c002ac59:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c002ac5c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002ac61:	0c 80                	or     al,0x80
c002ac63:	50                   	push   eax
c002ac64:	6a 0c                	push   0xc
c002ac66:	57                   	push   edi
c002ac67:	56                   	push   esi
c002ac68:	e8 0f ff ff ff       	call   c002ab7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ac6d:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c002ac72:	0f b6 d3             	movzx  edx,bl
c002ac75:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002ac79:	ec                   	in     al,dx
c002ac7a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002ac7e:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c002ac83:	52                   	push   edx
c002ac84:	6a 0c                	push   0xc
c002ac86:	57                   	push   edi
c002ac87:	56                   	push   esi
c002ac88:	e8 ef fe ff ff       	call   c002ab7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ac8d:	83 c4 20             	add    esp,0x20
c002ac90:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002ac94:	eb 4c                	jmp    c002ace2 <IDE::read(unsigned char, unsigned char)+0xa6>
c002ac96:	0f b6 d3             	movzx  edx,bl
c002ac99:	83 fa 07             	cmp    edx,0x7
c002ac9c:	77 12                	ja     c002acb0 <IDE::read(unsigned char, unsigned char)+0x74>
c002ac9e:	0f b6 c9             	movzx  ecx,cl
c002aca1:	0f b6 d3             	movzx  edx,bl
c002aca4:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c002acac:	01 c2                	add    edx,eax
c002acae:	eb 31                	jmp    c002ace1 <IDE::read(unsigned char, unsigned char)+0xa5>
c002acb0:	83 fa 0d             	cmp    edx,0xd
c002acb3:	77 13                	ja     c002acc8 <IDE::read(unsigned char, unsigned char)+0x8c>
c002acb5:	0f b6 c9             	movzx  ecx,cl
c002acb8:	0f b6 d3             	movzx  edx,bl
c002acbb:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c002acc2:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002acc6:	eb 19                	jmp    c002ace1 <IDE::read(unsigned char, unsigned char)+0xa5>
c002acc8:	31 c0                	xor    eax,eax
c002acca:	83 fa 15             	cmp    edx,0x15
c002accd:	77 13                	ja     c002ace2 <IDE::read(unsigned char, unsigned char)+0xa6>
c002accf:	0f b6 c9             	movzx  ecx,cl
c002acd2:	0f b6 d3             	movzx  edx,bl
c002acd5:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c002acdd:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002ace1:	ec                   	in     al,dx
c002ace2:	83 c4 1c             	add    esp,0x1c
c002ace5:	5b                   	pop    ebx
c002ace6:	5e                   	pop    esi
c002ace7:	5f                   	pop    edi
c002ace8:	5d                   	pop    ebp
c002ace9:	c3                   	ret    

c002acea <IDE::waitInterrupt(unsigned char)>:
c002acea:	55                   	push   ebp
c002aceb:	57                   	push   edi
c002acec:	56                   	push   esi
c002aced:	53                   	push   ebx
c002acee:	31 db                	xor    ebx,ebx
c002acf0:	83 ec 0c             	sub    esp,0xc
c002acf3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002acf7:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002acfc:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002ad04:	89 e8                	mov    eax,ebp
c002ad06:	84 c0                	test   al,al
c002ad08:	75 30                	jne    c002ad3a <IDE::waitInterrupt(unsigned char)+0x50>
c002ad0a:	50                   	push   eax
c002ad0b:	6a 0c                	push   0xc
c002ad0d:	56                   	push   esi
c002ad0e:	57                   	push   edi
c002ad0f:	e8 28 ff ff ff       	call   c002ac3c <IDE::read(unsigned char, unsigned char)>
c002ad14:	83 c4 10             	add    esp,0x10
c002ad17:	a8 01                	test   al,0x1
c002ad19:	75 27                	jne    c002ad42 <IDE::waitInterrupt(unsigned char)+0x58>
c002ad1b:	f6 c3 04             	test   bl,0x4
c002ad1e:	75 12                	jne    c002ad32 <IDE::waitInterrupt(unsigned char)+0x48>
c002ad20:	83 fb 32             	cmp    ebx,0x32
c002ad23:	7e 0d                	jle    c002ad32 <IDE::waitInterrupt(unsigned char)+0x48>
c002ad25:	83 ec 0c             	sub    esp,0xc
c002ad28:	6a 64                	push   0x64
c002ad2a:	e8 05 a6 ff ff       	call   c0025334 <milliTenthSleep(unsigned int)>
c002ad2f:	83 c4 10             	add    esp,0x10
c002ad32:	83 fb 3c             	cmp    ebx,0x3c
c002ad35:	74 0b                	je     c002ad42 <IDE::waitInterrupt(unsigned char)+0x58>
c002ad37:	43                   	inc    ebx
c002ad38:	eb c2                	jmp    c002acfc <IDE::waitInterrupt(unsigned char)+0x12>
c002ad3a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002ad42:	83 c4 0c             	add    esp,0xc
c002ad45:	89 e8                	mov    eax,ebp
c002ad47:	5b                   	pop    ebx
c002ad48:	5e                   	pop    esi
c002ad49:	5f                   	pop    edi
c002ad4a:	5d                   	pop    ebp
c002ad4b:	c3                   	ret    

c002ad4c <ideChannel0IRQHandler(regs*, void*)>:
c002ad4c:	83 ec 10             	sub    esp,0x10
c002ad4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002ad53:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002ad5a:	6a 07                	push   0x7
c002ad5c:	6a 00                	push   0x0
c002ad5e:	50                   	push   eax
c002ad5f:	e8 d8 fe ff ff       	call   c002ac3c <IDE::read(unsigned char, unsigned char)>
c002ad64:	83 c4 1c             	add    esp,0x1c
c002ad67:	c3                   	ret    

c002ad68 <ideChannel1IRQHandler(regs*, void*)>:
c002ad68:	83 ec 10             	sub    esp,0x10
c002ad6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002ad6f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002ad76:	6a 07                	push   0x7
c002ad78:	6a 01                	push   0x1
c002ad7a:	50                   	push   eax
c002ad7b:	e8 bc fe ff ff       	call   c002ac3c <IDE::read(unsigned char, unsigned char)>
c002ad80:	83 c4 1c             	add    esp,0x1c
c002ad83:	c3                   	ret    

c002ad84 <IDE::enableIRQs(unsigned char, bool)>:
c002ad84:	57                   	push   edi
c002ad85:	b8 02 00 00 00       	mov    eax,0x2
c002ad8a:	56                   	push   esi
c002ad8b:	53                   	push   ebx
c002ad8c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002ad90:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002ad94:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002ad99:	74 02                	je     c002ad9d <IDE::enableIRQs(unsigned char, bool)+0x19>
c002ad9b:	31 c0                	xor    eax,eax
c002ad9d:	0f b6 db             	movzx  ebx,bl
c002ada0:	bf 04 00 00 00       	mov    edi,0x4
c002ada5:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c002adac:	50                   	push   eax
c002adad:	6a 0c                	push   0xc
c002adaf:	53                   	push   ebx
c002adb0:	56                   	push   esi
c002adb1:	e8 c6 fd ff ff       	call   c002ab7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002adb6:	83 c4 10             	add    esp,0x10
c002adb9:	50                   	push   eax
c002adba:	6a 0c                	push   0xc
c002adbc:	53                   	push   ebx
c002adbd:	56                   	push   esi
c002adbe:	e8 79 fe ff ff       	call   c002ac3c <IDE::read(unsigned char, unsigned char)>
c002adc3:	83 c4 10             	add    esp,0x10
c002adc6:	4f                   	dec    edi
c002adc7:	75 f0                	jne    c002adb9 <IDE::enableIRQs(unsigned char, bool)+0x35>
c002adc9:	5b                   	pop    ebx
c002adca:	5e                   	pop    esi
c002adcb:	5f                   	pop    edi
c002adcc:	c3                   	ret    
c002adcd:	90                   	nop

c002adce <IDE::open(int, int, void*)>:
c002adce:	55                   	push   ebp
c002adcf:	57                   	push   edi
c002add0:	56                   	push   esi
c002add1:	53                   	push   ebx
c002add2:	83 ec 1c             	sub    esp,0x1c
c002add5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002add9:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002ade2:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002adeb:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002adf2:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002adf9:	0f 85 de 02 00 00    	jne    c002b0dd <IDE::open(int, int, void*)+0x30f>
c002adff:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002ae05:	88 04 24             	mov    BYTE PTR [esp],al
c002ae08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002ae0b:	83 e0 7f             	and    eax,0x7f
c002ae0e:	83 f8 05             	cmp    eax,0x5
c002ae11:	74 05                	je     c002ae18 <IDE::open(int, int, void*)+0x4a>
c002ae13:	83 f8 0f             	cmp    eax,0xf
c002ae16:	75 32                	jne    c002ae4a <IDE::open(int, int, void*)+0x7c>
c002ae18:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002ae1e:	83 e0 fc             	and    eax,0xfffffffc
c002ae21:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002ae28:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002ae2e:	83 e0 fc             	and    eax,0xfffffffc
c002ae31:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002ae38:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002ae3e:	83 e0 fc             	and    eax,0xfffffffc
c002ae41:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002ae48:	eb 14                	jmp    c002ae5e <IDE::open(int, int, void*)+0x90>
c002ae4a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002ae54:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002ae5e:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002ae65:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002ae6c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002ae70:	89 c6                	mov    esi,eax
c002ae72:	bf f8 0c 00 00       	mov    edi,0xcf8
c002ae77:	c1 e6 10             	shl    esi,0x10
c002ae7a:	89 e8                	mov    eax,ebp
c002ae7c:	89 fa                	mov    edx,edi
c002ae7e:	c1 e0 0b             	shl    eax,0xb
c002ae81:	09 f0                	or     eax,esi
c002ae83:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002ae8a:	c1 e6 08             	shl    esi,0x8
c002ae8d:	09 c6                	or     esi,eax
c002ae8f:	89 f0                	mov    eax,esi
c002ae91:	0d 08 00 00 80       	or     eax,0x80000008
c002ae96:	ef                   	out    dx,eax
c002ae97:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002ae9c:	89 ca                	mov    edx,ecx
c002ae9e:	ed                   	in     eax,dx
c002ae9f:	c1 e8 10             	shr    eax,0x10
c002aea2:	3d ff ff 00 00       	cmp    eax,0xffff
c002aea7:	0f 84 f9 00 00 00    	je     c002afa6 <IDE::open(int, int, void*)+0x1d8>
c002aead:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c002aeb3:	89 fa                	mov    edx,edi
c002aeb5:	89 f0                	mov    eax,esi
c002aeb7:	ef                   	out    dx,eax
c002aeb8:	b0 fe                	mov    al,0xfe
c002aeba:	89 ca                	mov    edx,ecx
c002aebc:	ee                   	out    dx,al
c002aebd:	89 f0                	mov    eax,esi
c002aebf:	89 fa                	mov    edx,edi
c002aec1:	ef                   	out    dx,eax
c002aec2:	89 ca                	mov    edx,ecx
c002aec4:	ed                   	in     eax,dx
c002aec5:	3c fe                	cmp    al,0xfe
c002aec7:	0f 85 a9 00 00 00    	jne    c002af76 <IDE::open(int, int, void*)+0x1a8>
c002aecd:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c002aed3:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c002aeda:	74 33                	je     c002af0f <IDE::open(int, int, void*)+0x141>
c002aedc:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002aee2:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002aee6:	40                   	inc    eax
c002aee7:	83 ec 0c             	sub    esp,0xc
c002aeea:	0f b6 c0             	movzx  eax,al
c002aeed:	50                   	push   eax
c002aeee:	55                   	push   ebp
c002aeef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002aef3:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c002aef9:	51                   	push   ecx
c002aefa:	e8 65 35 ff ff       	call   c001e464 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002aeff:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002af04:	83 c4 1c             	add    esp,0x1c
c002af07:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002af0d:	eb 0a                	jmp    c002af19 <IDE::open(int, int, void*)+0x14b>
c002af0f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002af19:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002af20:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002af27:	c1 e1 10             	shl    ecx,0x10
c002af2a:	c1 e0 08             	shl    eax,0x8
c002af2d:	bf f8 0c 00 00       	mov    edi,0xcf8
c002af32:	09 c1                	or     ecx,eax
c002af34:	89 fa                	mov    edx,edi
c002af36:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002af3d:	c1 e0 0b             	shl    eax,0xb
c002af40:	09 c1                	or     ecx,eax
c002af42:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002af48:	89 c8                	mov    eax,ecx
c002af4a:	ef                   	out    dx,eax
c002af4b:	be fc 0c 00 00       	mov    esi,0xcfc
c002af50:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002af56:	89 f2                	mov    edx,esi
c002af58:	ee                   	out    dx,al
c002af59:	89 c8                	mov    eax,ecx
c002af5b:	89 fa                	mov    edx,edi
c002af5d:	ef                   	out    dx,eax
c002af5e:	89 f2                	mov    edx,esi
c002af60:	ed                   	in     eax,dx
c002af61:	0f b6 c0             	movzx  eax,al
c002af64:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002af6a:	74 4a                	je     c002afb6 <IDE::open(int, int, void*)+0x1e8>
c002af6c:	83 ec 0c             	sub    esp,0xc
c002af6f:	68 c4 35 03 c0       	push   0xc00335c4
c002af74:	eb 38                	jmp    c002afae <IDE::open(int, int, void*)+0x1e0>
c002af76:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002af7f:	75 1b                	jne    c002af9c <IDE::open(int, int, void*)+0x1ce>
c002af81:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c002af85:	3d 80 00 00 00       	cmp    eax,0x80
c002af8a:	74 07                	je     c002af93 <IDE::open(int, int, void*)+0x1c5>
c002af8c:	3d 8a 00 00 00       	cmp    eax,0x8a
c002af91:	75 09                	jne    c002af9c <IDE::open(int, int, void*)+0x1ce>
c002af93:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002af9a:	eb 1a                	jmp    c002afb6 <IDE::open(int, int, void*)+0x1e8>
c002af9c:	83 ec 0c             	sub    esp,0xc
c002af9f:	68 cc 35 03 c0       	push   0xc00335cc
c002afa4:	eb 08                	jmp    c002afae <IDE::open(int, int, void*)+0x1e0>
c002afa6:	83 ec 0c             	sub    esp,0xc
c002afa9:	68 fd 35 03 c0       	push   0xc00335fd
c002afae:	e8 fb 51 ff ff       	call   c00201ae <KePanic(char const*)>
c002afb3:	83 c4 10             	add    esp,0x10
c002afb6:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c002afbd:	74 1a                	je     c002afd9 <IDE::open(int, int, void*)+0x20b>
c002afbf:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002afc5:	83 e0 fc             	and    eax,0xfffffffc
c002afc8:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002afcf:	83 c0 08             	add    eax,0x8
c002afd2:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002afd9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002afdf:	89 c2                	mov    edx,eax
c002afe1:	83 e2 0f             	and    edx,0xf
c002afe4:	83 fa 08             	cmp    edx,0x8
c002afe7:	75 0a                	jne    c002aff3 <IDE::open(int, int, void*)+0x225>
c002afe9:	83 e8 02             	sub    eax,0x2
c002afec:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002aff3:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002aff9:	89 c2                	mov    edx,eax
c002affb:	83 e2 0f             	and    edx,0xf
c002affe:	83 fa 08             	cmp    edx,0x8
c002b001:	75 0a                	jne    c002b00d <IDE::open(int, int, void*)+0x23f>
c002b003:	83 e8 02             	sub    eax,0x2
c002b006:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002b00d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002b014:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002b01b:	89 d0                	mov    eax,edx
c002b01d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b020:	8d 7a 01             	lea    edi,[edx+0x1]
c002b023:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b027:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002b02b:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002b02f:	83 e1 3f             	and    ecx,0x3f
c002b032:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002b036:	89 f9                	mov    ecx,edi
c002b038:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002b03f:	0f b6 c9             	movzx  ecx,cl
c002b042:	8d 78 02             	lea    edi,[eax+0x2]
c002b045:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002b048:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002b04c:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002b050:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002b054:	83 e2 3f             	and    edx,0x3f
c002b057:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002b05b:	89 f9                	mov    ecx,edi
c002b05d:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002b063:	0f b6 d1             	movzx  edx,cl
c002b066:	8d 78 03             	lea    edi,[eax+0x3]
c002b069:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b06c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b070:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002b074:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002b078:	83 e1 3f             	and    ecx,0x3f
c002b07b:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002b07f:	89 f9                	mov    ecx,edi
c002b081:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002b087:	0f b6 c9             	movzx  ecx,cl
c002b08a:	8d 78 04             	lea    edi,[eax+0x4]
c002b08d:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002b090:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002b094:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002b098:	89 fa                	mov    edx,edi
c002b09a:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002b0a0:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002b0a4:	83 e2 3f             	and    edx,0x3f
c002b0a7:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002b0ab:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002b0b2:	66 85 f6             	test   si,si
c002b0b5:	74 65                	je     c002b11c <IDE::open(int, int, void*)+0x34e>
c002b0b7:	89 f9                	mov    ecx,edi
c002b0b9:	83 c0 05             	add    eax,0x5
c002b0bc:	0f b6 d1             	movzx  edx,cl
c002b0bf:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b0c2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b0c6:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002b0ca:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002b0d0:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c002b0d4:	83 e0 3f             	and    eax,0x3f
c002b0d7:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c002b0db:	eb 3f                	jmp    c002b11c <IDE::open(int, int, void*)+0x34e>
c002b0dd:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c002b0e3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002b0ea:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002b0f1:	05 06 02 00 00       	add    eax,0x206
c002b0f6:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b0fd:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c002b104:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002b10b:	05 06 02 00 00       	add    eax,0x206
c002b110:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002b117:	e9 bd fe ff ff       	jmp    c002afd9 <IDE::open(int, int, void*)+0x20b>
c002b11c:	50                   	push   eax
c002b11d:	50                   	push   eax
c002b11e:	6a 00                	push   0x0
c002b120:	53                   	push   ebx
c002b121:	e8 30 fa ff ff       	call   c002ab56 <IDE::prepareInterrupt(unsigned char)>
c002b126:	5a                   	pop    edx
c002b127:	59                   	pop    ecx
c002b128:	6a 01                	push   0x1
c002b12a:	53                   	push   ebx
c002b12b:	e8 26 fa ff ff       	call   c002ab56 <IDE::prepareInterrupt(unsigned char)>
c002b130:	83 c4 0c             	add    esp,0xc
c002b133:	6a 00                	push   0x0
c002b135:	6a 00                	push   0x0
c002b137:	53                   	push   ebx
c002b138:	e8 47 fc ff ff       	call   c002ad84 <IDE::enableIRQs(unsigned char, bool)>
c002b13d:	83 c4 0c             	add    esp,0xc
c002b140:	6a 00                	push   0x0
c002b142:	6a 01                	push   0x1
c002b144:	53                   	push   ebx
c002b145:	e8 3a fc ff ff       	call   c002ad84 <IDE::enableIRQs(unsigned char, bool)>
c002b14a:	83 c4 10             	add    esp,0x10
c002b14d:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002b154:	74 34                	je     c002b18a <IDE::open(int, int, void*)+0x3bc>
c002b156:	83 ec 0c             	sub    esp,0xc
c002b159:	53                   	push   ebx
c002b15a:	6a 01                	push   0x1
c002b15c:	68 4c ad 02 c0       	push   0xc002ad4c
c002b161:	6a 0e                	push   0xe
c002b163:	53                   	push   ebx
c002b164:	e8 59 00 ff ff       	call   c001b1c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b169:	83 c4 14             	add    esp,0x14
c002b16c:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002b172:	53                   	push   ebx
c002b173:	6a 01                	push   0x1
c002b175:	68 68 ad 02 c0       	push   0xc002ad68
c002b17a:	6a 0f                	push   0xf
c002b17c:	53                   	push   ebx
c002b17d:	e8 40 00 ff ff       	call   c001b1c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b182:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002b188:	eb 38                	jmp    c002b1c2 <IDE::open(int, int, void*)+0x3f4>
c002b18a:	83 ec 0c             	sub    esp,0xc
c002b18d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002b197:	53                   	push   ebx
c002b198:	6a 00                	push   0x0
c002b19a:	68 4c ad 02 c0       	push   0xc002ad4c
c002b19f:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002b1a5:	53                   	push   ebx
c002b1a6:	e8 17 00 ff ff       	call   c001b1c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b1ab:	83 c4 14             	add    esp,0x14
c002b1ae:	53                   	push   ebx
c002b1af:	6a 00                	push   0x0
c002b1b1:	68 68 ad 02 c0       	push   0xc002ad68
c002b1b6:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002b1bc:	53                   	push   ebx
c002b1bd:	e8 00 00 ff ff       	call   c001b1c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b1c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c002b1c4:	83 c4 20             	add    esp,0x20
c002b1c7:	83 ec 0c             	sub    esp,0xc
c002b1ca:	53                   	push   ebx
c002b1cb:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002b1ce:	83 c4 0c             	add    esp,0xc
c002b1d1:	6a 07                	push   0x7
c002b1d3:	6a 00                	push   0x0
c002b1d5:	53                   	push   ebx
c002b1d6:	e8 61 fa ff ff       	call   c002ac3c <IDE::read(unsigned char, unsigned char)>
c002b1db:	83 c4 0c             	add    esp,0xc
c002b1de:	6a 07                	push   0x7
c002b1e0:	6a 01                	push   0x1
c002b1e2:	53                   	push   ebx
c002b1e3:	e8 54 fa ff ff       	call   c002ac3c <IDE::read(unsigned char, unsigned char)>
c002b1e8:	83 c4 0c             	add    esp,0xc
c002b1eb:	6a 01                	push   0x1
c002b1ed:	6a 00                	push   0x0
c002b1ef:	53                   	push   ebx
c002b1f0:	e8 8f fb ff ff       	call   c002ad84 <IDE::enableIRQs(unsigned char, bool)>
c002b1f5:	83 c4 0c             	add    esp,0xc
c002b1f8:	6a 01                	push   0x1
c002b1fa:	6a 01                	push   0x1
c002b1fc:	53                   	push   ebx
c002b1fd:	e8 82 fb ff ff       	call   c002ad84 <IDE::enableIRQs(unsigned char, bool)>
c002b202:	83 c4 2c             	add    esp,0x2c
c002b205:	31 c0                	xor    eax,eax
c002b207:	5b                   	pop    ebx
c002b208:	5e                   	pop    esi
c002b209:	5f                   	pop    edi
c002b20a:	5d                   	pop    ebp
c002b20b:	c3                   	ret    

c002b20c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002b20c:	55                   	push   ebp
c002b20d:	57                   	push   edi
c002b20e:	56                   	push   esi
c002b20f:	53                   	push   ebx
c002b210:	83 ec 1c             	sub    esp,0x1c
c002b213:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002b217:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002b21b:	8d 42 f8             	lea    eax,[edx-0x8]
c002b21e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002b222:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002b226:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002b22a:	3c 03                	cmp    al,0x3
c002b22c:	77 5a                	ja     c002b288 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c002b22e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002b232:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002b236:	0f b6 db             	movzx  ebx,bl
c002b239:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002b23c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b241:	0c 80                	or     al,0x80
c002b243:	50                   	push   eax
c002b244:	6a 0c                	push   0xc
c002b246:	53                   	push   ebx
c002b247:	56                   	push   esi
c002b248:	e8 2f f9 ff ff       	call   c002ab7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b24d:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c002b252:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002b256:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002b25a:	0f b6 d2             	movzx  edx,dl
c002b25d:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002b261:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002b263:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b268:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002b26c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002b270:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002b274:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002b27c:	83 c4 2c             	add    esp,0x2c
c002b27f:	5b                   	pop    ebx
c002b280:	5e                   	pop    esi
c002b281:	5f                   	pop    edi
c002b282:	5d                   	pop    ebp
c002b283:	e9 f4 f8 ff ff       	jmp    c002ab7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b288:	0f b6 c2             	movzx  eax,dl
c002b28b:	83 f8 07             	cmp    eax,0x7
c002b28e:	77 12                	ja     c002b2a2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c002b290:	0f b6 c2             	movzx  eax,dl
c002b293:	0f b6 db             	movzx  ebx,bl
c002b296:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c002b29e:	01 c2                	add    edx,eax
c002b2a0:	eb 2f                	jmp    c002b2d1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002b2a2:	83 f8 0d             	cmp    eax,0xd
c002b2a5:	77 13                	ja     c002b2ba <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c002b2a7:	0f b6 db             	movzx  ebx,bl
c002b2aa:	0f b6 d2             	movzx  edx,dl
c002b2ad:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c002b2b4:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002b2b8:	eb 17                	jmp    c002b2d1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002b2ba:	83 f8 15             	cmp    eax,0x15
c002b2bd:	77 14                	ja     c002b2d3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c002b2bf:	0f b6 db             	movzx  ebx,bl
c002b2c2:	0f b6 d2             	movzx  edx,dl
c002b2c5:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c002b2cd:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002b2d1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002b2d3:	83 c4 1c             	add    esp,0x1c
c002b2d6:	5b                   	pop    ebx
c002b2d7:	5e                   	pop    esi
c002b2d8:	5f                   	pop    edi
c002b2d9:	5d                   	pop    ebp
c002b2da:	c3                   	ret    
c002b2db:	90                   	nop

c002b2dc <IDE::detect()>:
c002b2dc:	55                   	push   ebp
c002b2dd:	57                   	push   edi
c002b2de:	56                   	push   esi
c002b2df:	53                   	push   ebx
c002b2e0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002b2e6:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002b2ed:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002b2f4:	0f 85 a4 02 00 00    	jne    c002b59e <IDE::detect()+0x2c2>
c002b2fa:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002b301:	31 f6                	xor    esi,esi
c002b303:	31 ed                	xor    ebp,ebp
c002b305:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002b30d:	89 e8                	mov    eax,ebp
c002b30f:	c1 e0 06             	shl    eax,0x6
c002b312:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002b31a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002b31e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002b322:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002b326:	c1 e0 04             	shl    eax,0x4
c002b329:	83 c8 a0             	or     eax,0xffffffa0
c002b32c:	0f b6 c0             	movzx  eax,al
c002b32f:	50                   	push   eax
c002b330:	6a 06                	push   0x6
c002b332:	56                   	push   esi
c002b333:	53                   	push   ebx
c002b334:	e8 43 f8 ff ff       	call   c002ab7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b339:	83 c4 0c             	add    esp,0xc
c002b33c:	6a 0c                	push   0xc
c002b33e:	56                   	push   esi
c002b33f:	53                   	push   ebx
c002b340:	e8 f7 f8 ff ff       	call   c002ac3c <IDE::read(unsigned char, unsigned char)>
c002b345:	83 c4 0c             	add    esp,0xc
c002b348:	6a 0c                	push   0xc
c002b34a:	56                   	push   esi
c002b34b:	53                   	push   ebx
c002b34c:	e8 eb f8 ff ff       	call   c002ac3c <IDE::read(unsigned char, unsigned char)>
c002b351:	83 c4 0c             	add    esp,0xc
c002b354:	6a 0c                	push   0xc
c002b356:	56                   	push   esi
c002b357:	53                   	push   ebx
c002b358:	e8 df f8 ff ff       	call   c002ac3c <IDE::read(unsigned char, unsigned char)>
c002b35d:	83 c4 0c             	add    esp,0xc
c002b360:	6a 0c                	push   0xc
c002b362:	56                   	push   esi
c002b363:	53                   	push   ebx
c002b364:	e8 d3 f8 ff ff       	call   c002ac3c <IDE::read(unsigned char, unsigned char)>
c002b369:	68 ec 00 00 00       	push   0xec
c002b36e:	6a 07                	push   0x7
c002b370:	56                   	push   esi
c002b371:	53                   	push   ebx
c002b372:	e8 05 f8 ff ff       	call   c002ab7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b377:	83 c4 1c             	add    esp,0x1c
c002b37a:	6a 0c                	push   0xc
c002b37c:	56                   	push   esi
c002b37d:	53                   	push   ebx
c002b37e:	e8 b9 f8 ff ff       	call   c002ac3c <IDE::read(unsigned char, unsigned char)>
c002b383:	83 c4 0c             	add    esp,0xc
c002b386:	6a 0c                	push   0xc
c002b388:	56                   	push   esi
c002b389:	53                   	push   ebx
c002b38a:	e8 ad f8 ff ff       	call   c002ac3c <IDE::read(unsigned char, unsigned char)>
c002b38f:	83 c4 0c             	add    esp,0xc
c002b392:	6a 0c                	push   0xc
c002b394:	56                   	push   esi
c002b395:	53                   	push   ebx
c002b396:	e8 a1 f8 ff ff       	call   c002ac3c <IDE::read(unsigned char, unsigned char)>
c002b39b:	83 c4 0c             	add    esp,0xc
c002b39e:	6a 0c                	push   0xc
c002b3a0:	56                   	push   esi
c002b3a1:	53                   	push   ebx
c002b3a2:	e8 95 f8 ff ff       	call   c002ac3c <IDE::read(unsigned char, unsigned char)>
c002b3a7:	83 c4 0c             	add    esp,0xc
c002b3aa:	6a 0c                	push   0xc
c002b3ac:	56                   	push   esi
c002b3ad:	53                   	push   ebx
c002b3ae:	e8 89 f8 ff ff       	call   c002ac3c <IDE::read(unsigned char, unsigned char)>
c002b3b3:	83 c4 10             	add    esp,0x10
c002b3b6:	84 c0                	test   al,al
c002b3b8:	0f 84 60 01 00 00    	je     c002b51e <IDE::detect()+0x242>
c002b3be:	31 ff                	xor    edi,edi
c002b3c0:	50                   	push   eax
c002b3c1:	6a 0c                	push   0xc
c002b3c3:	56                   	push   esi
c002b3c4:	53                   	push   ebx
c002b3c5:	e8 72 f8 ff ff       	call   c002ac3c <IDE::read(unsigned char, unsigned char)>
c002b3ca:	83 c4 10             	add    esp,0x10
c002b3cd:	a8 01                	test   al,0x1
c002b3cf:	0f 85 6a 01 00 00    	jne    c002b53f <IDE::detect()+0x263>
c002b3d5:	a8 80                	test   al,0x80
c002b3d7:	75 04                	jne    c002b3dd <IDE::detect()+0x101>
c002b3d9:	a8 08                	test   al,0x8
c002b3db:	75 23                	jne    c002b400 <IDE::detect()+0x124>
c002b3dd:	47                   	inc    edi
c002b3de:	81 ff 17 01 00 00    	cmp    edi,0x117
c002b3e4:	7e da                	jle    c002b3c0 <IDE::detect()+0xe4>
c002b3e6:	83 ec 0c             	sub    esp,0xc
c002b3e9:	6a 32                	push   0x32
c002b3eb:	e8 44 9f ff ff       	call   c0025334 <milliTenthSleep(unsigned int)>
c002b3f0:	83 c4 10             	add    esp,0x10
c002b3f3:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002b3f9:	75 c5                	jne    c002b3c0 <IDE::detect()+0xe4>
c002b3fb:	e9 3f 01 00 00       	jmp    c002b53f <IDE::detect()+0x263>
c002b400:	31 c9                	xor    ecx,ecx
c002b402:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002b406:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002b40a:	83 ec 0c             	sub    esp,0xc
c002b40d:	68 80 00 00 00       	push   0x80
c002b412:	57                   	push   edi
c002b413:	6a 00                	push   0x0
c002b415:	56                   	push   esi
c002b416:	53                   	push   ebx
c002b417:	e8 f0 fd ff ff       	call   c002b20c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002b41c:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002b421:	89 e8                	mov    eax,ebp
c002b423:	89 d1                	mov    ecx,edx
c002b425:	c1 e0 06             	shl    eax,0x6
c002b428:	01 d8                	add    eax,ebx
c002b42a:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002b431:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002b438:	89 f2                	mov    edx,esi
c002b43a:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002b440:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002b444:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002b44a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002b44e:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002b455:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002b45d:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002b464:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002b46c:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002b472:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002b479:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002b47f:	8d 54 24 58          	lea    edx,[esp+0x58]
c002b483:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002b487:	83 c4 20             	add    esp,0x20
c002b48a:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c002b48d:	83 c0 02             	add    eax,0x2
c002b490:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002b496:	83 c7 02             	add    edi,0x2
c002b499:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c002b49c:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002b4a2:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002b4a6:	75 e2                	jne    c002b48a <IDE::detect()+0x1ae>
c002b4a8:	89 e8                	mov    eax,ebp
c002b4aa:	c1 e0 06             	shl    eax,0x6
c002b4ad:	01 d8                	add    eax,ebx
c002b4af:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c002b4b6:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002b4bd:	c1 ea 09             	shr    edx,0x9
c002b4c0:	83 e2 01             	and    edx,0x1
c002b4c3:	80 e1 01             	and    cl,0x1
c002b4c6:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002b4cc:	75 22                	jne    c002b4f0 <IDE::detect()+0x214>
c002b4ce:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c002b4d5:	74 46                	je     c002b51d <IDE::detect()+0x241>
c002b4d7:	83 ec 0c             	sub    esp,0xc
c002b4da:	68 7c 01 00 00       	push   0x17c
c002b4df:	e8 22 ae fe ff       	call   c0016306 <malloc>
c002b4e4:	89 c7                	mov    edi,eax
c002b4e6:	89 04 24             	mov    DWORD PTR [esp],eax
c002b4e9:	e8 2e 05 00 00       	call   c002ba1c <ATA::ATA()>
c002b4ee:	eb 17                	jmp    c002b507 <IDE::detect()+0x22b>
c002b4f0:	83 ec 0c             	sub    esp,0xc
c002b4f3:	68 84 01 00 00       	push   0x184
c002b4f8:	e8 09 ae fe ff       	call   c0016306 <malloc>
c002b4fd:	89 c7                	mov    edi,eax
c002b4ff:	89 04 24             	mov    DWORD PTR [esp],eax
c002b502:	e8 59 0e 00 00       	call   c002c360 <ATAPI::ATAPI()>
c002b507:	5a                   	pop    edx
c002b508:	59                   	pop    ecx
c002b509:	57                   	push   edi
c002b50a:	53                   	push   ebx
c002b50b:	e8 06 fd fe ff       	call   c001b216 <Device::addChild(Device*)>
c002b510:	8b 07                	mov    eax,DWORD PTR [edi]
c002b512:	53                   	push   ebx
c002b513:	55                   	push   ebp
c002b514:	6a 00                	push   0x0
c002b516:	57                   	push   edi
c002b517:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002b51a:	83 c4 20             	add    esp,0x20
c002b51d:	45                   	inc    ebp
c002b51e:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c002b523:	74 0d                	je     c002b532 <IDE::detect()+0x256>
c002b525:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c002b52d:	e9 db fd ff ff       	jmp    c002b30d <IDE::detect()+0x31>
c002b532:	4e                   	dec    esi
c002b533:	74 69                	je     c002b59e <IDE::detect()+0x2c2>
c002b535:	be 01 00 00 00       	mov    esi,0x1
c002b53a:	e9 c6 fd ff ff       	jmp    c002b305 <IDE::detect()+0x29>
c002b53f:	50                   	push   eax
c002b540:	6a 04                	push   0x4
c002b542:	56                   	push   esi
c002b543:	53                   	push   ebx
c002b544:	e8 f3 f6 ff ff       	call   c002ac3c <IDE::read(unsigned char, unsigned char)>
c002b549:	83 c4 0c             	add    esp,0xc
c002b54c:	89 c7                	mov    edi,eax
c002b54e:	6a 05                	push   0x5
c002b550:	56                   	push   esi
c002b551:	53                   	push   ebx
c002b552:	e8 e5 f6 ff ff       	call   c002ac3c <IDE::read(unsigned char, unsigned char)>
c002b557:	83 c4 10             	add    esp,0x10
c002b55a:	89 f9                	mov    ecx,edi
c002b55c:	0f b6 c0             	movzx  eax,al
c002b55f:	0f b6 f9             	movzx  edi,cl
c002b562:	83 ff 14             	cmp    edi,0x14
c002b565:	75 07                	jne    c002b56e <IDE::detect()+0x292>
c002b567:	3d eb 00 00 00       	cmp    eax,0xeb
c002b56c:	eb 0a                	jmp    c002b578 <IDE::detect()+0x29c>
c002b56e:	3d 96 00 00 00       	cmp    eax,0x96
c002b573:	75 a9                	jne    c002b51e <IDE::detect()+0x242>
c002b575:	83 ff 69             	cmp    edi,0x69
c002b578:	75 a4                	jne    c002b51e <IDE::detect()+0x242>
c002b57a:	68 a1 00 00 00       	push   0xa1
c002b57f:	6a 07                	push   0x7
c002b581:	56                   	push   esi
c002b582:	53                   	push   ebx
c002b583:	e8 f4 f5 ff ff       	call   c002ab7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b588:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c002b58f:	e8 a0 9d ff ff       	call   c0025334 <milliTenthSleep(unsigned int)>
c002b594:	83 c4 10             	add    esp,0x10
c002b597:	b1 01                	mov    cl,0x1
c002b599:	e9 64 fe ff ff       	jmp    c002b402 <IDE::detect()+0x126>
c002b59e:	81 c4 1c 02 00 00    	add    esp,0x21c
c002b5a4:	5b                   	pop    ebx
c002b5a5:	5e                   	pop    esi
c002b5a6:	5f                   	pop    edi
c002b5a7:	5d                   	pop    ebp
c002b5a8:	c3                   	ret    
c002b5a9:	90                   	nop

c002b5aa <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002b5aa:	55                   	push   ebp
c002b5ab:	57                   	push   edi
c002b5ac:	56                   	push   esi
c002b5ad:	53                   	push   ebx
c002b5ae:	83 ec 1c             	sub    esp,0x1c
c002b5b1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002b5b5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002b5b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002b5bd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002b5c1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002b5c5:	88 c3                	mov    bl,al
c002b5c7:	25 ff 00 00 00       	and    eax,0xff
c002b5cc:	0f 84 88 00 00 00    	je     c002b65a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b5d2:	83 ec 0c             	sub    esp,0xc
c002b5d5:	89 c7                	mov    edi,eax
c002b5d7:	68 27 36 03 c0       	push   0xc0033627
c002b5dc:	e8 b4 db fe ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c002b5e1:	83 c4 10             	add    esp,0x10
c002b5e4:	83 ff 01             	cmp    edi,0x1
c002b5e7:	74 6b                	je     c002b654 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c002b5e9:	83 ff 02             	cmp    edi,0x2
c002b5ec:	75 58                	jne    c002b646 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c002b5ee:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c002b5f3:	01 ff                	add    edi,edi
c002b5f5:	50                   	push   eax
c002b5f6:	09 fe                	or     esi,edi
c002b5f8:	6a 01                	push   0x1
c002b5fa:	89 f0                	mov    eax,esi
c002b5fc:	0f b6 f0             	movzx  esi,al
c002b5ff:	c1 e6 06             	shl    esi,0x6
c002b602:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c002b60a:	50                   	push   eax
c002b60b:	55                   	push   ebp
c002b60c:	e8 2b f6 ff ff       	call   c002ac3c <IDE::read(unsigned char, unsigned char)>
c002b611:	83 c4 10             	add    esp,0x10
c002b614:	a8 01                	test   al,0x1
c002b616:	74 02                	je     c002b61a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c002b618:	b3 07                	mov    bl,0x7
c002b61a:	a8 02                	test   al,0x2
c002b61c:	74 02                	je     c002b620 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c002b61e:	b3 03                	mov    bl,0x3
c002b620:	a8 04                	test   al,0x4
c002b622:	74 02                	je     c002b626 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c002b624:	b3 14                	mov    bl,0x14
c002b626:	a8 08                	test   al,0x8
c002b628:	74 02                	je     c002b62c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c002b62a:	b3 03                	mov    bl,0x3
c002b62c:	a8 10                	test   al,0x10
c002b62e:	74 02                	je     c002b632 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c002b630:	b3 15                	mov    bl,0x15
c002b632:	a8 20                	test   al,0x20
c002b634:	74 02                	je     c002b638 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c002b636:	b3 03                	mov    bl,0x3
c002b638:	a8 40                	test   al,0x40
c002b63a:	74 02                	je     c002b63e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c002b63c:	b3 16                	mov    bl,0x16
c002b63e:	a8 80                	test   al,0x80
c002b640:	74 18                	je     c002b65a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b642:	b3 0d                	mov    bl,0xd
c002b644:	eb 14                	jmp    c002b65a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b646:	83 ff 03             	cmp    edi,0x3
c002b649:	74 0d                	je     c002b658 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c002b64b:	83 ff 04             	cmp    edi,0x4
c002b64e:	75 0a                	jne    c002b65a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b650:	b3 08                	mov    bl,0x8
c002b652:	eb 06                	jmp    c002b65a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b654:	b3 13                	mov    bl,0x13
c002b656:	eb 02                	jmp    c002b65a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b658:	b3 17                	mov    bl,0x17
c002b65a:	83 c4 1c             	add    esp,0x1c
c002b65d:	88 d8                	mov    al,bl
c002b65f:	5b                   	pop    ebx
c002b660:	5e                   	pop    esi
c002b661:	5f                   	pop    edi
c002b662:	5d                   	pop    ebp
c002b663:	c3                   	ret    

c002b664 <IDE::polling(unsigned char, unsigned int)>:
c002b664:	57                   	push   edi
c002b665:	56                   	push   esi
c002b666:	53                   	push   ebx
c002b667:	bb 04 00 00 00       	mov    ebx,0x4
c002b66c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002b670:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002b675:	52                   	push   edx
c002b676:	6a 0c                	push   0xc
c002b678:	56                   	push   esi
c002b679:	57                   	push   edi
c002b67a:	e8 bd f5 ff ff       	call   c002ac3c <IDE::read(unsigned char, unsigned char)>
c002b67f:	83 c4 10             	add    esp,0x10
c002b682:	4b                   	dec    ebx
c002b683:	75 f0                	jne    c002b675 <IDE::polling(unsigned char, unsigned int)+0x11>
c002b685:	bb a0 86 01 00       	mov    ebx,0x186a0
c002b68a:	50                   	push   eax
c002b68b:	6a 0c                	push   0xc
c002b68d:	56                   	push   esi
c002b68e:	57                   	push   edi
c002b68f:	e8 a8 f5 ff ff       	call   c002ac3c <IDE::read(unsigned char, unsigned char)>
c002b694:	83 c4 10             	add    esp,0x10
c002b697:	a8 01                	test   al,0x1
c002b699:	75 17                	jne    c002b6b2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c002b69b:	a8 20                	test   al,0x20
c002b69d:	75 0f                	jne    c002b6ae <IDE::polling(unsigned char, unsigned int)+0x4a>
c002b69f:	4b                   	dec    ebx
c002b6a0:	74 10                	je     c002b6b2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c002b6a2:	a8 80                	test   al,0x80
c002b6a4:	75 e4                	jne    c002b68a <IDE::polling(unsigned char, unsigned int)+0x26>
c002b6a6:	a8 08                	test   al,0x8
c002b6a8:	74 e0                	je     c002b68a <IDE::polling(unsigned char, unsigned int)+0x26>
c002b6aa:	31 c0                	xor    eax,eax
c002b6ac:	eb 06                	jmp    c002b6b4 <IDE::polling(unsigned char, unsigned int)+0x50>
c002b6ae:	b0 01                	mov    al,0x1
c002b6b0:	eb 02                	jmp    c002b6b4 <IDE::polling(unsigned char, unsigned int)+0x50>
c002b6b2:	b0 02                	mov    al,0x2
c002b6b4:	5b                   	pop    ebx
c002b6b5:	5e                   	pop    esi
c002b6b6:	5f                   	pop    edi
c002b6b7:	c3                   	ret    

c002b6b8 <SATABus::close(int, int, void*)>:
c002b6b8:	31 c0                	xor    eax,eax
c002b6ba:	c3                   	ret    
c002b6bb:	90                   	nop

c002b6bc <SATABus::detect()>:
c002b6bc:	c3                   	ret    
c002b6bd:	90                   	nop

c002b6be <SATABus::SATABus()>:
c002b6be:	83 ec 0c             	sub    esp,0xc
c002b6c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b6c5:	83 ec 08             	sub    esp,0x8
c002b6c8:	68 60 36 03 c0       	push   0xc0033660
c002b6cd:	50                   	push   eax
c002b6ce:	e8 9d fe fe ff       	call   c001b570 <HardDiskController::HardDiskController(char const*)>
c002b6d3:	83 c4 10             	add    esp,0x10
c002b6d6:	ba 8c 36 03 c0       	mov    edx,0xc003368c
c002b6db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b6df:	89 10                	mov    DWORD PTR [eax],edx
c002b6e1:	83 ec 0c             	sub    esp,0xc
c002b6e4:	6a 50                	push   0x50
c002b6e6:	e8 f3 af fe ff       	call   c00166de <Phys::allocateContiguousPages(int)>
c002b6eb:	83 c4 10             	add    esp,0x10
c002b6ee:	89 c2                	mov    edx,eax
c002b6f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b6f4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002b6fa:	83 ec 0c             	sub    esp,0xc
c002b6fd:	6a 50                	push   0x50
c002b6ff:	e8 59 c7 fe ff       	call   c0017e5d <Virt::allocateKernelVirtualPages(int)>
c002b704:	83 c4 10             	add    esp,0x10
c002b707:	89 c2                	mov    edx,eax
c002b709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b70d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002b713:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c002b718:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002b71c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002b722:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002b726:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002b72c:	83 ec 0c             	sub    esp,0xc
c002b72f:	6a 03                	push   0x3
c002b731:	6a 50                	push   0x50
c002b733:	51                   	push   ecx
c002b734:	52                   	push   edx
c002b735:	50                   	push   eax
c002b736:	e8 2f d0 fe ff       	call   c001876a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c002b73b:	83 c4 20             	add    esp,0x20
c002b73e:	90                   	nop
c002b73f:	83 c4 0c             	add    esp,0xc
c002b742:	c3                   	ret    
c002b743:	90                   	nop

c002b744 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002b744:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002b748:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c002b74b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002b74e:	09 c2                	or     edx,eax
c002b750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002b754:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002b75a:	8b 08                	mov    ecx,DWORD PTR [eax]
c002b75c:	31 c0                	xor    eax,eax
c002b75e:	c1 e9 08             	shr    ecx,0x8
c002b761:	83 e1 0f             	and    ecx,0xf
c002b764:	39 c8                	cmp    eax,ecx
c002b766:	74 0a                	je     c002b772 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c002b768:	f6 c2 01             	test   dl,0x1
c002b76b:	74 08                	je     c002b775 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002b76d:	d1 ea                	shr    edx,1
c002b76f:	40                   	inc    eax
c002b770:	eb f2                	jmp    c002b764 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c002b772:	83 c8 ff             	or     eax,0xffffffff
c002b775:	c3                   	ret    

c002b776 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c002b776:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002b77a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c002b77d:	89 c2                	mov    edx,eax
c002b77f:	c1 ea 08             	shr    edx,0x8
c002b782:	83 e2 0f             	and    edx,0xf
c002b785:	4a                   	dec    edx
c002b786:	75 32                	jne    c002b7ba <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002b788:	83 e0 0f             	and    eax,0xf
c002b78b:	83 f8 03             	cmp    eax,0x3
c002b78e:	75 2a                	jne    c002b7ba <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002b790:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002b793:	b8 02 00 00 00       	mov    eax,0x2
c002b798:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002b79e:	74 1c                	je     c002b7bc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002b7a0:	b8 04 00 00 00       	mov    eax,0x4
c002b7a5:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c002b7ab:	74 0f                	je     c002b7bc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002b7ad:	31 c0                	xor    eax,eax
c002b7af:	83 fa 03             	cmp    edx,0x3
c002b7b2:	0f 94 c0             	sete   al
c002b7b5:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c002b7b9:	c3                   	ret    
c002b7ba:	31 c0                	xor    eax,eax
c002b7bc:	c3                   	ret    
c002b7bd:	90                   	nop

c002b7be <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c002b7be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002b7c2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b7c5:	0f ba e2 0f          	bt     edx,0xf
c002b7c9:	72 f7                	jb     c002b7c2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c002b7cb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b7ce:	83 ca 10             	or     edx,0x10
c002b7d1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b7d4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b7d7:	83 ca 01             	or     edx,0x1
c002b7da:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b7dd:	c3                   	ret    

c002b7de <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c002b7de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002b7e2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b7e5:	83 e2 fe             	and    edx,0xfffffffe
c002b7e8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b7eb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b7ee:	83 e2 ef             	and    edx,0xffffffef
c002b7f1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b7f4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b7f7:	0f ba e2 0e          	bt     edx,0xe
c002b7fb:	72 f7                	jb     c002b7f4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002b7fd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b800:	0f ba e2 0f          	bt     edx,0xf
c002b804:	72 ee                	jb     c002b7f4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002b806:	c3                   	ret    
c002b807:	90                   	nop

c002b808 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c002b808:	55                   	push   ebp
c002b809:	57                   	push   edi
c002b80a:	56                   	push   esi
c002b80b:	53                   	push   ebx
c002b80c:	83 ec 1c             	sub    esp,0x1c
c002b80f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002b813:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002b817:	53                   	push   ebx
c002b818:	56                   	push   esi
c002b819:	e8 c0 ff ff ff       	call   c002b7de <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002b81e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002b822:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002b828:	83 ec 0c             	sub    esp,0xc
c002b82b:	c1 e5 0a             	shl    ebp,0xa
c002b82e:	01 e8                	add    eax,ebp
c002b830:	89 03                	mov    DWORD PTR [ebx],eax
c002b832:	8b 03                	mov    eax,DWORD PTR [ebx]
c002b834:	68 00 04 00 00       	push   0x400
c002b839:	6a 00                	push   0x0
c002b83b:	50                   	push   eax
c002b83c:	e8 af 4c fd ff       	call   c00004f0 <memset>
c002b841:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c002b847:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c002b84b:	01 e8                	add    eax,ebp
c002b84d:	83 c4 1c             	add    esp,0x1c
c002b850:	89 03                	mov    DWORD PTR [ebx],eax
c002b852:	c1 e2 08             	shl    edx,0x8
c002b855:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002b85c:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c002b862:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002b868:	01 f8                	add    eax,edi
c002b86a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002b86d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c002b870:	68 00 01 00 00       	push   0x100
c002b875:	6a 00                	push   0x0
c002b877:	50                   	push   eax
c002b878:	e8 73 4c fd ff       	call   c00004f0 <memset>
c002b87d:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c002b883:	01 fa                	add    edx,edi
c002b885:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002b889:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c002b88c:	c1 e7 0d             	shl    edi,0xd
c002b88f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002b896:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c002b89c:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c002b8a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002b8a6:	31 ff                	xor    edi,edi
c002b8a8:	83 c4 10             	add    esp,0x10
c002b8ab:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c002b8b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002b8b5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002b8bb:	83 c5 20             	add    ebp,0x20
c002b8be:	01 f8                	add    eax,edi
c002b8c0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002b8c3:	52                   	push   edx
c002b8c4:	68 00 01 00 00       	push   0x100
c002b8c9:	6a 00                	push   0x0
c002b8cb:	50                   	push   eax
c002b8cc:	e8 1f 4c fd ff       	call   c00004f0 <memset>
c002b8d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002b8d5:	83 c4 10             	add    esp,0x10
c002b8d8:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c002b8de:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002b8e5:	01 f8                	add    eax,edi
c002b8e7:	81 c7 00 01 00 00    	add    edi,0x100
c002b8ed:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002b8f0:	81 ff 00 20 00 00    	cmp    edi,0x2000
c002b8f6:	75 b3                	jne    c002b8ab <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c002b8f8:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002b8ff:	50                   	push   eax
c002b900:	50                   	push   eax
c002b901:	53                   	push   ebx
c002b902:	56                   	push   esi
c002b903:	e8 b6 fe ff ff       	call   c002b7be <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002b908:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002b90f:	83 c4 2c             	add    esp,0x2c
c002b912:	5b                   	pop    ebx
c002b913:	5e                   	pop    esi
c002b914:	5f                   	pop    edi
c002b915:	5d                   	pop    ebp
c002b916:	c3                   	ret    
c002b917:	90                   	nop

c002b918 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002b918:	55                   	push   ebp
c002b919:	57                   	push   edi
c002b91a:	56                   	push   esi
c002b91b:	53                   	push   ebx
c002b91c:	31 db                	xor    ebx,ebx
c002b91e:	83 ec 0c             	sub    esp,0xc
c002b921:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002b925:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002b929:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002b92c:	f7 c7 01 00 00 00    	test   edi,0x1
c002b932:	74 7a                	je     c002b9ae <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002b934:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002b938:	89 d8                	mov    eax,ebx
c002b93a:	c1 e0 07             	shl    eax,0x7
c002b93d:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c002b944:	55                   	push   ebp
c002b945:	56                   	push   esi
c002b946:	e8 2b fe ff ff       	call   c002b776 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002b94b:	5a                   	pop    edx
c002b94c:	83 f8 01             	cmp    eax,0x1
c002b94f:	59                   	pop    ecx
c002b950:	75 21                	jne    c002b973 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c002b952:	50                   	push   eax
c002b953:	53                   	push   ebx
c002b954:	55                   	push   ebp
c002b955:	56                   	push   esi
c002b956:	e8 ad fe ff ff       	call   c002b808 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002b95b:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002b962:	e8 9f a9 fe ff       	call   c0016306 <malloc>
c002b967:	89 c5                	mov    ebp,eax
c002b969:	89 04 24             	mov    DWORD PTR [esp],eax
c002b96c:	e8 bb 10 00 00       	call   c002ca2c <SATA::SATA()>
c002b971:	eb 24                	jmp    c002b997 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c002b973:	83 f8 04             	cmp    eax,0x4
c002b976:	75 36                	jne    c002b9ae <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002b978:	51                   	push   ecx
c002b979:	53                   	push   ebx
c002b97a:	55                   	push   ebp
c002b97b:	56                   	push   esi
c002b97c:	e8 87 fe ff ff       	call   c002b808 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002b981:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c002b988:	e8 79 a9 fe ff       	call   c0016306 <malloc>
c002b98d:	89 c5                	mov    ebp,eax
c002b98f:	89 04 24             	mov    DWORD PTR [esp],eax
c002b992:	e8 2b 18 00 00       	call   c002d1c2 <SATAPI::SATAPI()>
c002b997:	58                   	pop    eax
c002b998:	5a                   	pop    edx
c002b999:	55                   	push   ebp
c002b99a:	56                   	push   esi
c002b99b:	e8 76 f8 fe ff       	call   c001b216 <Device::addChild(Device*)>
c002b9a0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002b9a3:	56                   	push   esi
c002b9a4:	6a 00                	push   0x0
c002b9a6:	53                   	push   ebx
c002b9a7:	55                   	push   ebp
c002b9a8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002b9ab:	83 c4 20             	add    esp,0x20
c002b9ae:	d1 ef                	shr    edi,1
c002b9b0:	43                   	inc    ebx
c002b9b1:	83 fb 20             	cmp    ebx,0x20
c002b9b4:	0f 85 72 ff ff ff    	jne    c002b92c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002b9ba:	83 c4 0c             	add    esp,0xc
c002b9bd:	5b                   	pop    ebx
c002b9be:	5e                   	pop    esi
c002b9bf:	5f                   	pop    edi
c002b9c0:	5d                   	pop    ebp
c002b9c1:	c3                   	ret    

c002b9c2 <SATABus::open(int, int, void*)>:
c002b9c2:	53                   	push   ebx
c002b9c3:	83 ec 08             	sub    esp,0x8
c002b9c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002b9ca:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c002b9d0:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002b9d6:	e8 e9 94 ff ff       	call   c0024ec4 <KeDisablePreemption()>
c002b9db:	52                   	push   edx
c002b9dc:	52                   	push   edx
c002b9dd:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c002b9e3:	53                   	push   ebx
c002b9e4:	e8 2f ff ff ff       	call   c002b918 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002b9e9:	e8 fe 94 ff ff       	call   c0024eec <KeRestorePreemption()>
c002b9ee:	31 c0                	xor    eax,eax
c002b9f0:	83 c4 18             	add    esp,0x18
c002b9f3:	5b                   	pop    ebx
c002b9f4:	c3                   	ret    
c002b9f5:	90                   	nop

c002b9f6 <ATA::close(int, int, void*)>:
c002b9f6:	83 ec 0c             	sub    esp,0xc
c002b9f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b9fd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002ba03:	85 c0                	test   eax,eax
c002ba05:	74 0c                	je     c002ba13 <ATA::close(int, int, void*)+0x1d>
c002ba07:	83 ec 0c             	sub    esp,0xc
c002ba0a:	8b 10                	mov    edx,DWORD PTR [eax]
c002ba0c:	50                   	push   eax
c002ba0d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002ba10:	83 c4 10             	add    esp,0x10
c002ba13:	31 c0                	xor    eax,eax
c002ba15:	83 c4 0c             	add    esp,0xc
c002ba18:	c3                   	ret    
c002ba19:	90                   	nop

c002ba1a <ATA::powerSaving(PowerSavingLevel)>:
c002ba1a:	c3                   	ret    
c002ba1b:	90                   	nop

c002ba1c <ATA::ATA()>:
c002ba1c:	83 ec 0c             	sub    esp,0xc
c002ba1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ba23:	83 ec 04             	sub    esp,0x4
c002ba26:	68 00 02 00 00       	push   0x200
c002ba2b:	68 65 37 03 c0       	push   0xc0033765
c002ba30:	50                   	push   eax
c002ba31:	e8 c4 fb fe ff       	call   c001b5fa <PhysicalDisk::PhysicalDisk(char const*, int)>
c002ba36:	83 c4 10             	add    esp,0x10
c002ba39:	ba cc 36 03 c0       	mov    edx,0xc00336cc
c002ba3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ba42:	89 10                	mov    DWORD PTR [eax],edx
c002ba44:	90                   	nop
c002ba45:	83 c4 0c             	add    esp,0xc
c002ba48:	c3                   	ret    
c002ba49:	90                   	nop

c002ba4a <ATA::flush(bool)>:
c002ba4a:	53                   	push   ebx
c002ba4b:	83 ec 08             	sub    esp,0x8
c002ba4e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002ba52:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002ba57:	83 f8 01             	cmp    eax,0x1
c002ba5a:	19 c0                	sbb    eax,eax
c002ba5c:	83 e0 fd             	and    eax,0xfffffffd
c002ba5f:	05 ea 00 00 00       	add    eax,0xea
c002ba64:	50                   	push   eax
c002ba65:	6a 07                	push   0x7
c002ba67:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002ba6e:	50                   	push   eax
c002ba6f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002ba75:	e8 02 f1 ff ff       	call   c002ab7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ba7a:	83 c4 0c             	add    esp,0xc
c002ba7d:	6a 00                	push   0x0
c002ba7f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002ba86:	50                   	push   eax
c002ba87:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002ba8d:	e8 d2 fb ff ff       	call   c002b664 <IDE::polling(unsigned char, unsigned int)>
c002ba92:	83 c4 18             	add    esp,0x18
c002ba95:	5b                   	pop    ebx
c002ba96:	c3                   	ret    
c002ba97:	90                   	nop

c002ba98 <ATA::readyForCommand()>:
c002ba98:	56                   	push   esi
c002ba99:	53                   	push   ebx
c002ba9a:	53                   	push   ebx
c002ba9b:	31 db                	xor    ebx,ebx
c002ba9d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002baa1:	51                   	push   ecx
c002baa2:	6a 0c                	push   0xc
c002baa4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002baab:	50                   	push   eax
c002baac:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002bab2:	e8 85 f1 ff ff       	call   c002ac3c <IDE::read(unsigned char, unsigned char)>
c002bab7:	83 c4 10             	add    esp,0x10
c002baba:	a8 88                	test   al,0x88
c002babc:	74 1f                	je     c002badd <ATA::readyForCommand()+0x45>
c002babe:	43                   	inc    ebx
c002babf:	83 fb 63             	cmp    ebx,0x63
c002bac2:	7e dd                	jle    c002baa1 <ATA::readyForCommand()+0x9>
c002bac4:	83 ec 0c             	sub    esp,0xc
c002bac7:	6a 0a                	push   0xa
c002bac9:	e8 66 98 ff ff       	call   c0025334 <milliTenthSleep(unsigned int)>
c002bace:	83 c4 10             	add    esp,0x10
c002bad1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002bad7:	75 c8                	jne    c002baa1 <ATA::readyForCommand()+0x9>
c002bad9:	31 c0                	xor    eax,eax
c002badb:	eb 02                	jmp    c002badf <ATA::readyForCommand()+0x47>
c002badd:	b0 01                	mov    al,0x1
c002badf:	5a                   	pop    edx
c002bae0:	5b                   	pop    ebx
c002bae1:	5e                   	pop    esi
c002bae2:	c3                   	ret    
c002bae3:	90                   	nop

c002bae4 <ATA::access(unsigned long long, int, void*, bool)>:
c002bae4:	55                   	push   ebp
c002bae5:	57                   	push   edi
c002bae6:	56                   	push   esi
c002bae7:	53                   	push   ebx
c002bae8:	83 ec 2c             	sub    esp,0x2c
c002baeb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002baef:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002baf3:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002baf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002bafb:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002baff:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002bb03:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002bb07:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002bb0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002bb11:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002bb17:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002bb1b:	c1 e0 06             	shl    eax,0x6
c002bb1e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002bb26:	74 5d                	je     c002bb85 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c002bb28:	89 fa                	mov    edx,edi
c002bb2a:	89 f0                	mov    eax,esi
c002bb2c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002bb30:	c1 ea 1c             	shr    edx,0x1c
c002bb33:	89 d1                	mov    ecx,edx
c002bb35:	09 c1                	or     ecx,eax
c002bb37:	74 25                	je     c002bb5e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002bb39:	31 ed                	xor    ebp,ebp
c002bb3b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002bb42:	89 fa                	mov    edx,edi
c002bb44:	89 f0                	mov    eax,esi
c002bb46:	0f ad d0             	shrd   eax,edx,cl
c002bb49:	d3 ea                	shr    edx,cl
c002bb4b:	f6 c1 20             	test   cl,0x20
c002bb4e:	74 02                	je     c002bb52 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002bb50:	89 d0                	mov    eax,edx
c002bb52:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002bb56:	45                   	inc    ebp
c002bb57:	83 fd 06             	cmp    ebp,0x6
c002bb5a:	75 df                	jne    c002bb3b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002bb5c:	eb 76                	jmp    c002bbd4 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002bb5e:	89 f0                	mov    eax,esi
c002bb60:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002bb65:	89 fa                	mov    edx,edi
c002bb67:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002bb6e:	0f ac d0 10          	shrd   eax,edx,0x10
c002bb72:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002bb77:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002bb7b:	c1 ee 18             	shr    esi,0x18
c002bb7e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002bb83:	eb 56                	jmp    c002bbdb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002bb85:	6a 00                	push   0x0
c002bb87:	6a 3f                	push   0x3f
c002bb89:	57                   	push   edi
c002bb8a:	56                   	push   esi
c002bb8b:	e8 d0 2a 00 00       	call   c002e660 <__umoddi3>
c002bb90:	83 c4 10             	add    esp,0x10
c002bb93:	40                   	inc    eax
c002bb94:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002bb98:	6a 00                	push   0x0
c002bb9a:	68 f0 03 00 00       	push   0x3f0
c002bb9f:	57                   	push   edi
c002bba0:	56                   	push   esi
c002bba1:	e8 ba 29 00 00       	call   c002e560 <__udivdi3>
c002bba6:	83 c4 10             	add    esp,0x10
c002bba9:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002bbae:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002bbb5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002bbba:	6a 00                	push   0x0
c002bbbc:	6a 3f                	push   0x3f
c002bbbe:	57                   	push   edi
c002bbbf:	56                   	push   esi
c002bbc0:	e8 9b 29 00 00       	call   c002e560 <__udivdi3>
c002bbc5:	83 c4 10             	add    esp,0x10
c002bbc8:	83 e0 0f             	and    eax,0xf
c002bbcb:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002bbd0:	89 c6                	mov    esi,eax
c002bbd2:	eb 07                	jmp    c002bbdb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002bbd4:	31 f6                	xor    esi,esi
c002bbd6:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002bbdb:	bf 01 00 00 00       	mov    edi,0x1
c002bbe0:	50                   	push   eax
c002bbe1:	6a 00                	push   0x0
c002bbe3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bbea:	50                   	push   eax
c002bbeb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002bbef:	e8 90 f1 ff ff       	call   c002ad84 <IDE::enableIRQs(unsigned char, bool)>
c002bbf4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002bbf7:	e8 9c fe ff ff       	call   c002ba98 <ATA::readyForCommand()>
c002bbfc:	83 c4 10             	add    esp,0x10
c002bbff:	84 c0                	test   al,al
c002bc01:	0f 84 69 02 00 00    	je     c002be70 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c002bc07:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002bc0d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002bc13:	c1 e0 04             	shl    eax,0x4
c002bc16:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002bc1d:	09 c6                	or     esi,eax
c002bc1f:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c002bc24:	75 05                	jne    c002bc2b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002bc26:	83 ce a0             	or     esi,0xffffffa0
c002bc29:	eb 03                	jmp    c002bc2e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c002bc2b:	83 ce e0             	or     esi,0xffffffe0
c002bc2e:	89 f0                	mov    eax,esi
c002bc30:	0f b6 f0             	movzx  esi,al
c002bc33:	56                   	push   esi
c002bc34:	6a 06                	push   0x6
c002bc36:	51                   	push   ecx
c002bc37:	52                   	push   edx
c002bc38:	e8 3f ef ff ff       	call   c002ab7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bc3d:	83 c4 10             	add    esp,0x10
c002bc40:	6a 00                	push   0x0
c002bc42:	6a 01                	push   0x1
c002bc44:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bc4b:	50                   	push   eax
c002bc4c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bc52:	e8 25 ef ff ff       	call   c002ab7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bc57:	83 c4 10             	add    esp,0x10
c002bc5a:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c002bc5f:	83 f8 02             	cmp    eax,0x2
c002bc62:	75 6e                	jne    c002bcd2 <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c002bc64:	6a 00                	push   0x0
c002bc66:	6a 08                	push   0x8
c002bc68:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bc6f:	50                   	push   eax
c002bc70:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bc76:	e8 01 ef ff ff       	call   c002ab7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bc7b:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002bc80:	50                   	push   eax
c002bc81:	6a 09                	push   0x9
c002bc83:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bc8a:	50                   	push   eax
c002bc8b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bc91:	e8 e6 ee ff ff       	call   c002ab7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bc96:	83 c4 20             	add    esp,0x20
c002bc99:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002bc9e:	50                   	push   eax
c002bc9f:	6a 0a                	push   0xa
c002bca1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bca8:	50                   	push   eax
c002bca9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bcaf:	e8 c8 ee ff ff       	call   c002ab7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bcb4:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002bcb9:	50                   	push   eax
c002bcba:	6a 0b                	push   0xb
c002bcbc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bcc3:	50                   	push   eax
c002bcc4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bcca:	e8 ad ee ff ff       	call   c002ab7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bccf:	83 c4 20             	add    esp,0x20
c002bcd2:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002bcd7:	50                   	push   eax
c002bcd8:	6a 02                	push   0x2
c002bcda:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bce1:	50                   	push   eax
c002bce2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bce8:	e8 8f ee ff ff       	call   c002ab7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bced:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002bcf2:	50                   	push   eax
c002bcf3:	6a 03                	push   0x3
c002bcf5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bcfc:	50                   	push   eax
c002bcfd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bd03:	e8 74 ee ff ff       	call   c002ab7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bd08:	83 c4 20             	add    esp,0x20
c002bd0b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002bd10:	50                   	push   eax
c002bd11:	6a 04                	push   0x4
c002bd13:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bd1a:	50                   	push   eax
c002bd1b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bd21:	e8 56 ee ff ff       	call   c002ab7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bd26:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002bd2b:	50                   	push   eax
c002bd2c:	6a 05                	push   0x5
c002bd2e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bd35:	50                   	push   eax
c002bd36:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bd3c:	e8 3b ee ff ff       	call   c002ab7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bd41:	83 c4 20             	add    esp,0x20
c002bd44:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002bd49:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c002bd4e:	74 11                	je     c002bd61 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c002bd50:	b8 30 00 00 00       	mov    eax,0x30
c002bd55:	83 fa 02             	cmp    edx,0x2
c002bd58:	75 16                	jne    c002bd70 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c002bd5a:	b8 34 00 00 00       	mov    eax,0x34
c002bd5f:	eb 0f                	jmp    c002bd70 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c002bd61:	b8 20 00 00 00       	mov    eax,0x20
c002bd66:	83 fa 02             	cmp    edx,0x2
c002bd69:	75 05                	jne    c002bd70 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c002bd6b:	b8 24 00 00 00       	mov    eax,0x24
c002bd70:	50                   	push   eax
c002bd71:	6a 07                	push   0x7
c002bd73:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bd7a:	50                   	push   eax
c002bd7b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bd81:	e8 f6 ed ff ff       	call   c002ab7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bd86:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002bd8a:	83 c4 10             	add    esp,0x10
c002bd8d:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c002bd92:	85 f6                	test   esi,esi
c002bd94:	0f 84 b3 00 00 00    	je     c002be4d <ATA::access(unsigned long long, int, void*, bool)+0x369>
c002bd9a:	50                   	push   eax
c002bd9b:	6a 01                	push   0x1
c002bd9d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bda4:	50                   	push   eax
c002bda5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bdab:	e8 b4 f8 ff ff       	call   c002b664 <IDE::polling(unsigned char, unsigned int)>
c002bdb0:	83 c4 10             	add    esp,0x10
c002bdb3:	0f b6 f8             	movzx  edi,al
c002bdb6:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002bdbc:	85 ff                	test   edi,edi
c002bdbe:	74 1d                	je     c002bddd <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c002bdc0:	57                   	push   edi
c002bdc1:	0f b6 d2             	movzx  edx,dl
c002bdc4:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002bdcb:	50                   	push   eax
c002bdcc:	52                   	push   edx
c002bdcd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bdd3:	e8 d2 f7 ff ff       	call   c002b5aa <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002bdd8:	e9 90 00 00 00       	jmp    c002be6d <ATA::access(unsigned long long, int, void*, bool)+0x389>
c002bddd:	85 ed                	test   ebp,ebp
c002bddf:	74 3b                	je     c002be1c <ATA::access(unsigned long long, int, void*, bool)+0x338>
c002bde1:	31 c9                	xor    ecx,ecx
c002bde3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002bde7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002bdeb:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c002bdef:	50                   	push   eax
c002bdf0:	50                   	push   eax
c002bdf1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bdf8:	50                   	push   eax
c002bdf9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bdff:	e8 66 ed ff ff       	call   c002ab6a <IDE::getBase(unsigned char)>
c002be04:	89 c2                	mov    edx,eax
c002be06:	89 f8                	mov    eax,edi
c002be08:	66 ef                	out    dx,ax
c002be0a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002be0e:	83 c4 10             	add    esp,0x10
c002be11:	41                   	inc    ecx
c002be12:	81 f9 00 01 00 00    	cmp    ecx,0x100
c002be18:	75 c9                	jne    c002bde3 <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c002be1a:	eb 23                	jmp    c002be3f <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c002be1c:	0f b6 d2             	movzx  edx,dl
c002be1f:	51                   	push   ecx
c002be20:	51                   	push   ecx
c002be21:	52                   	push   edx
c002be22:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be28:	e8 3d ed ff ff       	call   c002ab6a <IDE::getBase(unsigned char)>
c002be2d:	b9 00 01 00 00       	mov    ecx,0x100
c002be32:	89 c2                	mov    edx,eax
c002be34:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002be38:	fc                   	cld    
c002be39:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002be3c:	83 c4 10             	add    esp,0x10
c002be3f:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002be47:	4e                   	dec    esi
c002be48:	e9 45 ff ff ff       	jmp    c002bd92 <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c002be4d:	31 ff                	xor    edi,edi
c002be4f:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002be54:	74 1a                	je     c002be70 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c002be56:	50                   	push   eax
c002be57:	50                   	push   eax
c002be58:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c002be5d:	83 f8 02             	cmp    eax,0x2
c002be60:	0f 94 c0             	sete   al
c002be63:	0f b6 c0             	movzx  eax,al
c002be66:	50                   	push   eax
c002be67:	53                   	push   ebx
c002be68:	e8 dd fb ff ff       	call   c002ba4a <ATA::flush(bool)>
c002be6d:	83 c4 10             	add    esp,0x10
c002be70:	83 c4 2c             	add    esp,0x2c
c002be73:	89 f8                	mov    eax,edi
c002be75:	5b                   	pop    ebx
c002be76:	5e                   	pop    esi
c002be77:	5f                   	pop    edi
c002be78:	5d                   	pop    ebp
c002be79:	c3                   	ret    

c002be7a <ATA::detectCHS()>:
c002be7a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002be7e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002be84:	c1 e0 06             	shl    eax,0x6
c002be87:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002be8d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002be97:	c7 44 24 04 b0 36 03 c0 	mov    DWORD PTR [esp+0x4],0xc00336b0
c002be9f:	e9 0a 43 ff ff       	jmp    c00201ae <KePanic(char const*)>

c002bea4 <ATA::open(int, int, void*)>:
c002bea4:	53                   	push   ebx
c002bea5:	83 ec 08             	sub    esp,0x8
c002bea8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002beac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002beb0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002beb4:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002beba:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002bec0:	c1 e0 06             	shl    eax,0x6
c002bec3:	01 d0                	add    eax,edx
c002bec5:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002becc:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002bed2:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002bed9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002bee3:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002bee9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002bef0:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002bef7:	75 0c                	jne    c002bf05 <ATA::open(int, int, void*)+0x61>
c002bef9:	83 ec 0c             	sub    esp,0xc
c002befc:	53                   	push   ebx
c002befd:	e8 78 ff ff ff       	call   c002be7a <ATA::detectCHS()>
c002bf02:	83 c4 10             	add    esp,0x10
c002bf05:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002bf0b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002bf11:	c1 e0 06             	shl    eax,0x6
c002bf14:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002bf1b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002bf25:	d1 e8                	shr    eax,1
c002bf27:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002bf2d:	6a 04                	push   0x4
c002bf2f:	6a 0c                	push   0xc
c002bf31:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bf38:	50                   	push   eax
c002bf39:	52                   	push   edx
c002bf3a:	e8 3d ec ff ff       	call   c002ab7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bf3f:	90                   	nop
c002bf40:	90                   	nop
c002bf41:	6a 00                	push   0x0
c002bf43:	6a 0c                	push   0xc
c002bf45:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bf4c:	50                   	push   eax
c002bf4d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bf53:	e8 24 ec ff ff       	call   c002ab7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bf58:	83 c4 14             	add    esp,0x14
c002bf5b:	53                   	push   ebx
c002bf5c:	e8 01 f7 fe ff       	call   c001b662 <PhysicalDisk::startCache()>
c002bf61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002bf64:	e8 35 09 ff ff       	call   c001c89e <createPartitionsForDisk(PhysicalDisk*)>
c002bf69:	31 c0                	xor    eax,eax
c002bf6b:	83 c4 18             	add    esp,0x18
c002bf6e:	5b                   	pop    ebx
c002bf6f:	c3                   	ret    

c002bf70 <combineCharAndColour(char, unsigned char)>:
c002bf70:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002bf75:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c002bf7b:	c1 e0 08             	shl    eax,0x8
c002bf7e:	09 d0                	or     eax,edx
c002bf80:	c3                   	ret    

c002bf81 <combineColours(unsigned char, unsigned char)>:
c002bf81:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002bf86:	c1 e0 04             	shl    eax,0x4
c002bf89:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c002bf8d:	c3                   	ret    

c002bf8e <ATA::read(unsigned long long, int, void*)>:
c002bf8e:	55                   	push   ebp
c002bf8f:	57                   	push   edi
c002bf90:	56                   	push   esi
c002bf91:	be 04 00 00 00       	mov    esi,0x4
c002bf96:	53                   	push   ebx
c002bf97:	83 ec 0c             	sub    esp,0xc
c002bf9a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002bf9e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002bfa2:	8d 7b ff             	lea    edi,[ebx-0x1]
c002bfa5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002bfa9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002bfad:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002bfb3:	0f 87 a1 01 00 00    	ja     c002c15a <ATA::read(unsigned long long, int, void*)+0x1cc>
c002bfb9:	be 06 00 00 00       	mov    esi,0x6
c002bfbe:	85 c9                	test   ecx,ecx
c002bfc0:	0f 84 94 01 00 00    	je     c002c15a <ATA::read(unsigned long long, int, void*)+0x1cc>
c002bfc6:	55                   	push   ebp
c002bfc7:	55                   	push   ebp
c002bfc8:	6a 00                	push   0x0
c002bfca:	51                   	push   ecx
c002bfcb:	53                   	push   ebx
c002bfcc:	52                   	push   edx
c002bfcd:	50                   	push   eax
c002bfce:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002bfd2:	e8 0d fb ff ff       	call   c002bae4 <ATA::access(unsigned long long, int, void*, bool)>
c002bfd7:	83 c4 20             	add    esp,0x20
c002bfda:	89 c6                	mov    esi,eax
c002bfdc:	85 c0                	test   eax,eax
c002bfde:	0f 85 71 01 00 00    	jne    c002c155 <ATA::read(unsigned long long, int, void*)+0x1c7>
c002bfe4:	03 1d b4 0b 04 c0    	add    ebx,DWORD PTR ds:0xc0040bb4
c002bfea:	89 da                	mov    edx,ebx
c002bfec:	50                   	push   eax
c002bfed:	bd 10 27 00 00       	mov    ebp,0x2710
c002bff2:	50                   	push   eax
c002bff3:	89 1d b4 0b 04 c0    	mov    DWORD PTR ds:0xc0040bb4,ebx
c002bff9:	6a 0f                	push   0xf
c002bffb:	6a 00                	push   0x0
c002bffd:	e8 7f ff ff ff       	call   c002bf81 <combineColours(unsigned char, unsigned char)>
c002c002:	59                   	pop    ecx
c002c003:	b9 0a 00 00 00       	mov    ecx,0xa
c002c008:	5b                   	pop    ebx
c002c009:	0f b6 d8             	movzx  ebx,al
c002c00c:	89 d0                	mov    eax,edx
c002c00e:	53                   	push   ebx
c002c00f:	99                   	cdq    
c002c010:	f7 fd                	idiv   ebp
c002c012:	99                   	cdq    
c002c013:	f7 f9                	idiv   ecx
c002c015:	83 c2 30             	add    edx,0x30
c002c018:	0f b6 d2             	movzx  edx,dl
c002c01b:	52                   	push   edx
c002c01c:	e8 4f ff ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002c021:	5f                   	pop    edi
c002c022:	bf e8 03 00 00       	mov    edi,0x3e8
c002c027:	5a                   	pop    edx
c002c028:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002c02e:	53                   	push   ebx
c002c02f:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c034:	99                   	cdq    
c002c035:	f7 ff                	idiv   edi
c002c037:	99                   	cdq    
c002c038:	f7 f9                	idiv   ecx
c002c03a:	8d 42 30             	lea    eax,[edx+0x30]
c002c03d:	0f b6 c0             	movzx  eax,al
c002c040:	50                   	push   eax
c002c041:	e8 2a ff ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002c046:	5f                   	pop    edi
c002c047:	bf 64 00 00 00       	mov    edi,0x64
c002c04c:	5a                   	pop    edx
c002c04d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002c053:	53                   	push   ebx
c002c054:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c059:	99                   	cdq    
c002c05a:	f7 ff                	idiv   edi
c002c05c:	99                   	cdq    
c002c05d:	f7 f9                	idiv   ecx
c002c05f:	8d 42 30             	lea    eax,[edx+0x30]
c002c062:	0f b6 c0             	movzx  eax,al
c002c065:	50                   	push   eax
c002c066:	e8 05 ff ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002c06b:	5a                   	pop    edx
c002c06c:	5a                   	pop    edx
c002c06d:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002c073:	53                   	push   ebx
c002c074:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c079:	99                   	cdq    
c002c07a:	f7 f9                	idiv   ecx
c002c07c:	99                   	cdq    
c002c07d:	f7 f9                	idiv   ecx
c002c07f:	8d 42 30             	lea    eax,[edx+0x30]
c002c082:	0f b6 c0             	movzx  eax,al
c002c085:	50                   	push   eax
c002c086:	e8 e5 fe ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002c08b:	5a                   	pop    edx
c002c08c:	5a                   	pop    edx
c002c08d:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002c093:	53                   	push   ebx
c002c094:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c099:	99                   	cdq    
c002c09a:	f7 f9                	idiv   ecx
c002c09c:	83 c2 30             	add    edx,0x30
c002c09f:	0f b6 d2             	movzx  edx,dl
c002c0a2:	52                   	push   edx
c002c0a3:	e8 c8 fe ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002c0a8:	5a                   	pop    edx
c002c0a9:	5a                   	pop    edx
c002c0aa:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002c0b0:	53                   	push   ebx
c002c0b1:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c0b6:	99                   	cdq    
c002c0b7:	f7 fd                	idiv   ebp
c002c0b9:	99                   	cdq    
c002c0ba:	f7 f9                	idiv   ecx
c002c0bc:	8d 42 30             	lea    eax,[edx+0x30]
c002c0bf:	0f b6 c0             	movzx  eax,al
c002c0c2:	50                   	push   eax
c002c0c3:	e8 a8 fe ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002c0c8:	5d                   	pop    ebp
c002c0c9:	bd e8 03 00 00       	mov    ebp,0x3e8
c002c0ce:	5a                   	pop    edx
c002c0cf:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002c0d5:	53                   	push   ebx
c002c0d6:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c0db:	99                   	cdq    
c002c0dc:	f7 fd                	idiv   ebp
c002c0de:	99                   	cdq    
c002c0df:	f7 f9                	idiv   ecx
c002c0e1:	8d 42 30             	lea    eax,[edx+0x30]
c002c0e4:	0f b6 c0             	movzx  eax,al
c002c0e7:	50                   	push   eax
c002c0e8:	e8 83 fe ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002c0ed:	5d                   	pop    ebp
c002c0ee:	5a                   	pop    edx
c002c0ef:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002c0f5:	53                   	push   ebx
c002c0f6:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c0fb:	99                   	cdq    
c002c0fc:	f7 ff                	idiv   edi
c002c0fe:	99                   	cdq    
c002c0ff:	f7 f9                	idiv   ecx
c002c101:	8d 42 30             	lea    eax,[edx+0x30]
c002c104:	0f b6 c0             	movzx  eax,al
c002c107:	50                   	push   eax
c002c108:	e8 63 fe ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002c10d:	5f                   	pop    edi
c002c10e:	5d                   	pop    ebp
c002c10f:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002c115:	53                   	push   ebx
c002c116:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c11b:	99                   	cdq    
c002c11c:	f7 f9                	idiv   ecx
c002c11e:	99                   	cdq    
c002c11f:	f7 f9                	idiv   ecx
c002c121:	8d 42 30             	lea    eax,[edx+0x30]
c002c124:	0f b6 c0             	movzx  eax,al
c002c127:	50                   	push   eax
c002c128:	e8 43 fe ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002c12d:	5a                   	pop    edx
c002c12e:	5f                   	pop    edi
c002c12f:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002c135:	53                   	push   ebx
c002c136:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c13b:	99                   	cdq    
c002c13c:	f7 f9                	idiv   ecx
c002c13e:	83 c2 30             	add    edx,0x30
c002c141:	0f b6 d2             	movzx  edx,dl
c002c144:	52                   	push   edx
c002c145:	e8 26 fe ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002c14a:	83 c4 10             	add    esp,0x10
c002c14d:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002c153:	eb 05                	jmp    c002c15a <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c155:	be 01 00 00 00       	mov    esi,0x1
c002c15a:	83 c4 0c             	add    esp,0xc
c002c15d:	89 f0                	mov    eax,esi
c002c15f:	5b                   	pop    ebx
c002c160:	5e                   	pop    esi
c002c161:	5f                   	pop    edi
c002c162:	5d                   	pop    ebp
c002c163:	c3                   	ret    

c002c164 <ATA::write(unsigned long long, int, void*)>:
c002c164:	55                   	push   ebp
c002c165:	57                   	push   edi
c002c166:	56                   	push   esi
c002c167:	be 04 00 00 00       	mov    esi,0x4
c002c16c:	53                   	push   ebx
c002c16d:	83 ec 0c             	sub    esp,0xc
c002c170:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002c174:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c178:	8d 7b ff             	lea    edi,[ebx-0x1]
c002c17b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002c17f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002c183:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002c189:	0f 87 9c 01 00 00    	ja     c002c32b <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c18f:	be 06 00 00 00       	mov    esi,0x6
c002c194:	85 c9                	test   ecx,ecx
c002c196:	0f 84 8f 01 00 00    	je     c002c32b <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c19c:	55                   	push   ebp
c002c19d:	55                   	push   ebp
c002c19e:	6a 01                	push   0x1
c002c1a0:	51                   	push   ecx
c002c1a1:	53                   	push   ebx
c002c1a2:	52                   	push   edx
c002c1a3:	50                   	push   eax
c002c1a4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002c1a8:	e8 37 f9 ff ff       	call   c002bae4 <ATA::access(unsigned long long, int, void*, bool)>
c002c1ad:	83 c4 20             	add    esp,0x20
c002c1b0:	89 c6                	mov    esi,eax
c002c1b2:	85 c0                	test   eax,eax
c002c1b4:	0f 85 6c 01 00 00    	jne    c002c326 <ATA::write(unsigned long long, int, void*)+0x1c2>
c002c1ba:	01 1d b0 0b 04 c0    	add    DWORD PTR ds:0xc0040bb0,ebx
c002c1c0:	bd 10 27 00 00       	mov    ebp,0x2710
c002c1c5:	50                   	push   eax
c002c1c6:	50                   	push   eax
c002c1c7:	6a 0f                	push   0xf
c002c1c9:	6a 00                	push   0x0
c002c1cb:	e8 b1 fd ff ff       	call   c002bf81 <combineColours(unsigned char, unsigned char)>
c002c1d0:	5a                   	pop    edx
c002c1d1:	0f b6 d8             	movzx  ebx,al
c002c1d4:	59                   	pop    ecx
c002c1d5:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c1da:	53                   	push   ebx
c002c1db:	b9 0a 00 00 00       	mov    ecx,0xa
c002c1e0:	99                   	cdq    
c002c1e1:	f7 fd                	idiv   ebp
c002c1e3:	99                   	cdq    
c002c1e4:	f7 f9                	idiv   ecx
c002c1e6:	8d 42 30             	lea    eax,[edx+0x30]
c002c1e9:	0f b6 c0             	movzx  eax,al
c002c1ec:	50                   	push   eax
c002c1ed:	e8 7e fd ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002c1f2:	5f                   	pop    edi
c002c1f3:	bf e8 03 00 00       	mov    edi,0x3e8
c002c1f8:	5a                   	pop    edx
c002c1f9:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002c1ff:	53                   	push   ebx
c002c200:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c205:	99                   	cdq    
c002c206:	f7 ff                	idiv   edi
c002c208:	99                   	cdq    
c002c209:	f7 f9                	idiv   ecx
c002c20b:	8d 42 30             	lea    eax,[edx+0x30]
c002c20e:	0f b6 c0             	movzx  eax,al
c002c211:	50                   	push   eax
c002c212:	e8 59 fd ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002c217:	5f                   	pop    edi
c002c218:	bf 64 00 00 00       	mov    edi,0x64
c002c21d:	5a                   	pop    edx
c002c21e:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002c224:	53                   	push   ebx
c002c225:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c22a:	99                   	cdq    
c002c22b:	f7 ff                	idiv   edi
c002c22d:	99                   	cdq    
c002c22e:	f7 f9                	idiv   ecx
c002c230:	8d 42 30             	lea    eax,[edx+0x30]
c002c233:	0f b6 c0             	movzx  eax,al
c002c236:	50                   	push   eax
c002c237:	e8 34 fd ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002c23c:	5a                   	pop    edx
c002c23d:	5a                   	pop    edx
c002c23e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002c244:	53                   	push   ebx
c002c245:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c24a:	99                   	cdq    
c002c24b:	f7 f9                	idiv   ecx
c002c24d:	99                   	cdq    
c002c24e:	f7 f9                	idiv   ecx
c002c250:	8d 42 30             	lea    eax,[edx+0x30]
c002c253:	0f b6 c0             	movzx  eax,al
c002c256:	50                   	push   eax
c002c257:	e8 14 fd ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002c25c:	5a                   	pop    edx
c002c25d:	5a                   	pop    edx
c002c25e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002c264:	53                   	push   ebx
c002c265:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c26a:	99                   	cdq    
c002c26b:	f7 f9                	idiv   ecx
c002c26d:	8d 42 30             	lea    eax,[edx+0x30]
c002c270:	0f b6 c0             	movzx  eax,al
c002c273:	50                   	push   eax
c002c274:	e8 f7 fc ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002c279:	5a                   	pop    edx
c002c27a:	5a                   	pop    edx
c002c27b:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002c281:	53                   	push   ebx
c002c282:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c287:	99                   	cdq    
c002c288:	f7 fd                	idiv   ebp
c002c28a:	99                   	cdq    
c002c28b:	f7 f9                	idiv   ecx
c002c28d:	8d 42 30             	lea    eax,[edx+0x30]
c002c290:	0f b6 c0             	movzx  eax,al
c002c293:	50                   	push   eax
c002c294:	e8 d7 fc ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002c299:	5d                   	pop    ebp
c002c29a:	bd e8 03 00 00       	mov    ebp,0x3e8
c002c29f:	5a                   	pop    edx
c002c2a0:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002c2a6:	53                   	push   ebx
c002c2a7:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c2ac:	99                   	cdq    
c002c2ad:	f7 fd                	idiv   ebp
c002c2af:	99                   	cdq    
c002c2b0:	f7 f9                	idiv   ecx
c002c2b2:	8d 42 30             	lea    eax,[edx+0x30]
c002c2b5:	0f b6 c0             	movzx  eax,al
c002c2b8:	50                   	push   eax
c002c2b9:	e8 b2 fc ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002c2be:	5d                   	pop    ebp
c002c2bf:	5a                   	pop    edx
c002c2c0:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002c2c6:	53                   	push   ebx
c002c2c7:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c2cc:	99                   	cdq    
c002c2cd:	f7 ff                	idiv   edi
c002c2cf:	99                   	cdq    
c002c2d0:	f7 f9                	idiv   ecx
c002c2d2:	8d 42 30             	lea    eax,[edx+0x30]
c002c2d5:	0f b6 c0             	movzx  eax,al
c002c2d8:	50                   	push   eax
c002c2d9:	e8 92 fc ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002c2de:	5f                   	pop    edi
c002c2df:	5d                   	pop    ebp
c002c2e0:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002c2e6:	53                   	push   ebx
c002c2e7:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c2ec:	99                   	cdq    
c002c2ed:	f7 f9                	idiv   ecx
c002c2ef:	99                   	cdq    
c002c2f0:	f7 f9                	idiv   ecx
c002c2f2:	8d 42 30             	lea    eax,[edx+0x30]
c002c2f5:	0f b6 c0             	movzx  eax,al
c002c2f8:	50                   	push   eax
c002c2f9:	e8 72 fc ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002c2fe:	5a                   	pop    edx
c002c2ff:	5f                   	pop    edi
c002c300:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002c306:	53                   	push   ebx
c002c307:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c30c:	99                   	cdq    
c002c30d:	f7 f9                	idiv   ecx
c002c30f:	83 c2 30             	add    edx,0x30
c002c312:	0f b6 d2             	movzx  edx,dl
c002c315:	52                   	push   edx
c002c316:	e8 55 fc ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002c31b:	83 c4 10             	add    esp,0x10
c002c31e:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002c324:	eb 05                	jmp    c002c32b <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c326:	be 01 00 00 00       	mov    esi,0x1
c002c32b:	83 c4 0c             	add    esp,0xc
c002c32e:	89 f0                	mov    eax,esi
c002c330:	5b                   	pop    ebx
c002c331:	5e                   	pop    esi
c002c332:	5f                   	pop    edi
c002c333:	5d                   	pop    ebp
c002c334:	c3                   	ret    
c002c335:	90                   	nop

c002c336 <ATAPI::write(unsigned long long, int, void*)>:
c002c336:	b8 03 00 00 00       	mov    eax,0x3
c002c33b:	c3                   	ret    

c002c33c <ATAPI::close(int, int, void*)>:
c002c33c:	83 ec 0c             	sub    esp,0xc
c002c33f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c343:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002c349:	85 c0                	test   eax,eax
c002c34b:	74 0c                	je     c002c359 <ATAPI::close(int, int, void*)+0x1d>
c002c34d:	83 ec 0c             	sub    esp,0xc
c002c350:	8b 10                	mov    edx,DWORD PTR [eax]
c002c352:	50                   	push   eax
c002c353:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002c356:	83 c4 10             	add    esp,0x10
c002c359:	31 c0                	xor    eax,eax
c002c35b:	83 c4 0c             	add    esp,0xc
c002c35e:	c3                   	ret    
c002c35f:	90                   	nop

c002c360 <ATAPI::ATAPI()>:
c002c360:	83 ec 0c             	sub    esp,0xc
c002c363:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c367:	83 ec 04             	sub    esp,0x4
c002c36a:	68 00 08 00 00       	push   0x800
c002c36f:	68 05 38 03 c0       	push   0xc0033805
c002c374:	50                   	push   eax
c002c375:	e8 80 f2 fe ff       	call   c001b5fa <PhysicalDisk::PhysicalDisk(char const*, int)>
c002c37a:	83 c4 10             	add    esp,0x10
c002c37d:	ba 14 37 03 c0       	mov    edx,0xc0033714
c002c382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c386:	89 10                	mov    DWORD PTR [eax],edx
c002c388:	90                   	nop
c002c389:	83 c4 0c             	add    esp,0xc
c002c38c:	c3                   	ret    
c002c38d:	90                   	nop

c002c38e <ATAPI::readyForCommand()>:
c002c38e:	56                   	push   esi
c002c38f:	53                   	push   ebx
c002c390:	53                   	push   ebx
c002c391:	31 db                	xor    ebx,ebx
c002c393:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002c397:	51                   	push   ecx
c002c398:	6a 0c                	push   0xc
c002c39a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002c3a1:	50                   	push   eax
c002c3a2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002c3a8:	e8 8f e8 ff ff       	call   c002ac3c <IDE::read(unsigned char, unsigned char)>
c002c3ad:	83 c4 10             	add    esp,0x10
c002c3b0:	a8 88                	test   al,0x88
c002c3b2:	74 25                	je     c002c3d9 <ATAPI::readyForCommand()+0x4b>
c002c3b4:	43                   	inc    ebx
c002c3b5:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c002c3bb:	7e da                	jle    c002c397 <ATAPI::readyForCommand()+0x9>
c002c3bd:	83 ec 0c             	sub    esp,0xc
c002c3c0:	68 5e 01 00 00       	push   0x15e
c002c3c5:	e8 6a 8f ff ff       	call   c0025334 <milliTenthSleep(unsigned int)>
c002c3ca:	83 c4 10             	add    esp,0x10
c002c3cd:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c002c3d3:	75 c2                	jne    c002c397 <ATAPI::readyForCommand()+0x9>
c002c3d5:	31 c0                	xor    eax,eax
c002c3d7:	eb 02                	jmp    c002c3db <ATAPI::readyForCommand()+0x4d>
c002c3d9:	b0 01                	mov    al,0x1
c002c3db:	5a                   	pop    edx
c002c3dc:	5b                   	pop    ebx
c002c3dd:	5e                   	pop    esi
c002c3de:	c3                   	ret    
c002c3df:	90                   	nop

c002c3e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002c3e0:	55                   	push   ebp
c002c3e1:	57                   	push   edi
c002c3e2:	56                   	push   esi
c002c3e3:	53                   	push   ebx
c002c3e4:	83 ec 20             	sub    esp,0x20
c002c3e7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002c3eb:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002c3ef:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002c3f3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002c3f7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002c3fb:	6a 01                	push   0x1
c002c3fd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c404:	50                   	push   eax
c002c405:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c40b:	e8 74 e9 ff ff       	call   c002ad84 <IDE::enableIRQs(unsigned char, bool)>
c002c410:	5e                   	pop    esi
c002c411:	58                   	pop    eax
c002c412:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c419:	50                   	push   eax
c002c41a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c420:	e8 31 e7 ff ff       	call   c002ab56 <IDE::prepareInterrupt(unsigned char)>
c002c425:	89 3c 24             	mov    DWORD PTR [esp],edi
c002c428:	e8 61 ff ff ff       	call   c002c38e <ATAPI::readyForCommand()>
c002c42d:	83 c4 10             	add    esp,0x10
c002c430:	84 c0                	test   al,al
c002c432:	75 0a                	jne    c002c43e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002c434:	bb 01 00 00 00       	mov    ebx,0x1
c002c439:	e9 60 02 00 00       	jmp    c002c69e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002c43e:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c002c444:	c1 e0 04             	shl    eax,0x4
c002c447:	0f b6 c0             	movzx  eax,al
c002c44a:	50                   	push   eax
c002c44b:	6a 06                	push   0x6
c002c44d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c454:	50                   	push   eax
c002c455:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c45b:	e8 1c e7 ff ff       	call   c002ab7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c460:	6a 00                	push   0x0
c002c462:	6a 01                	push   0x1
c002c464:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c46b:	50                   	push   eax
c002c46c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c472:	e8 05 e7 ff ff       	call   c002ab7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c477:	83 c4 20             	add    esp,0x20
c002c47a:	0f b6 c3             	movzx  eax,bl
c002c47d:	0f b6 df             	movzx  ebx,bh
c002c480:	50                   	push   eax
c002c481:	6a 04                	push   0x4
c002c483:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c48a:	50                   	push   eax
c002c48b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c491:	e8 e6 e6 ff ff       	call   c002ab7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c496:	53                   	push   ebx
c002c497:	6a 05                	push   0x5
c002c499:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c4a0:	50                   	push   eax
c002c4a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c4a7:	e8 d0 e6 ff ff       	call   c002ab7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c4ac:	83 c4 20             	add    esp,0x20
c002c4af:	68 a0 00 00 00       	push   0xa0
c002c4b4:	6a 07                	push   0x7
c002c4b6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c4bd:	50                   	push   eax
c002c4be:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c4c4:	e8 b3 e6 ff ff       	call   c002ab7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c4c9:	83 c4 0c             	add    esp,0xc
c002c4cc:	6a 01                	push   0x1
c002c4ce:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c4d5:	50                   	push   eax
c002c4d6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c4dc:	e8 83 f1 ff ff       	call   c002b664 <IDE::polling(unsigned char, unsigned int)>
c002c4e1:	83 c4 10             	add    esp,0x10
c002c4e4:	0f b6 d8             	movzx  ebx,al
c002c4e7:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c002c4ed:	85 db                	test   ebx,ebx
c002c4ef:	74 20                	je     c002c511 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002c4f1:	53                   	push   ebx
c002c4f2:	0f b6 c0             	movzx  eax,al
c002c4f5:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c002c4fc:	52                   	push   edx
c002c4fd:	50                   	push   eax
c002c4fe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c504:	e8 a1 f0 ff ff       	call   c002b5aa <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002c509:	83 c4 10             	add    esp,0x10
c002c50c:	e9 8d 01 00 00       	jmp    c002c69e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002c511:	0f b6 c0             	movzx  eax,al
c002c514:	53                   	push   ebx
c002c515:	53                   	push   ebx
c002c516:	50                   	push   eax
c002c517:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c51d:	e8 48 e6 ff ff       	call   c002ab6a <IDE::getBase(unsigned char)>
c002c522:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002c526:	b9 06 00 00 00       	mov    ecx,0x6
c002c52b:	89 c2                	mov    edx,eax
c002c52d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002c530:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002c534:	83 c4 10             	add    esp,0x10
c002c537:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c002c53c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002c540:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c546:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c54d:	85 db                	test   ebx,ebx
c002c54f:	0f 84 ec 00 00 00    	je     c002c641 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c002c555:	51                   	push   ecx
c002c556:	51                   	push   ecx
c002c557:	52                   	push   edx
c002c558:	50                   	push   eax
c002c559:	e8 8c e7 ff ff       	call   c002acea <IDE::waitInterrupt(unsigned char)>
c002c55e:	83 c4 10             	add    esp,0x10
c002c561:	84 c0                	test   al,al
c002c563:	0f 84 cb fe ff ff    	je     c002c434 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002c569:	56                   	push   esi
c002c56a:	56                   	push   esi
c002c56b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c572:	50                   	push   eax
c002c573:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c579:	e8 d8 e5 ff ff       	call   c002ab56 <IDE::prepareInterrupt(unsigned char)>
c002c57e:	83 c4 0c             	add    esp,0xc
c002c581:	6a 04                	push   0x4
c002c583:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c58a:	50                   	push   eax
c002c58b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c591:	e8 a6 e6 ff ff       	call   c002ac3c <IDE::read(unsigned char, unsigned char)>
c002c596:	83 c4 0c             	add    esp,0xc
c002c599:	89 c6                	mov    esi,eax
c002c59b:	6a 05                	push   0x5
c002c59d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c5a4:	50                   	push   eax
c002c5a5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c5ab:	e8 8c e6 ff ff       	call   c002ac3c <IDE::read(unsigned char, unsigned char)>
c002c5b0:	89 f1                	mov    ecx,esi
c002c5b2:	0f b6 c0             	movzx  eax,al
c002c5b5:	0f b6 f1             	movzx  esi,cl
c002c5b8:	c1 e0 08             	shl    eax,0x8
c002c5bb:	09 c6                	or     esi,eax
c002c5bd:	d1 fe                	sar    esi,1
c002c5bf:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002c5c3:	83 c4 10             	add    esp,0x10
c002c5c6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002c5cb:	74 41                	je     c002c60e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c002c5cd:	31 c9                	xor    ecx,ecx
c002c5cf:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c5d5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c5dc:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002c5e0:	75 0a                	jne    c002c5ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c002c5e2:	01 c9                	add    ecx,ecx
c002c5e4:	01 cd                	add    ebp,ecx
c002c5e6:	4b                   	dec    ebx
c002c5e7:	e9 54 ff ff ff       	jmp    c002c540 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c002c5ec:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002c5f1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002c5f5:	51                   	push   ecx
c002c5f6:	51                   	push   ecx
c002c5f7:	52                   	push   edx
c002c5f8:	50                   	push   eax
c002c5f9:	e8 6c e5 ff ff       	call   c002ab6a <IDE::getBase(unsigned char)>
c002c5fe:	89 c2                	mov    edx,eax
c002c600:	89 f0                	mov    eax,esi
c002c602:	66 ef                	out    dx,ax
c002c604:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002c608:	83 c4 10             	add    esp,0x10
c002c60b:	41                   	inc    ecx
c002c60c:	eb c1                	jmp    c002c5cf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c002c60e:	31 f6                	xor    esi,esi
c002c610:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c616:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c61d:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002c621:	75 06                	jne    c002c629 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c002c623:	01 f6                	add    esi,esi
c002c625:	01 f5                	add    ebp,esi
c002c627:	eb bd                	jmp    c002c5e6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c002c629:	51                   	push   ecx
c002c62a:	51                   	push   ecx
c002c62b:	52                   	push   edx
c002c62c:	50                   	push   eax
c002c62d:	e8 38 e5 ff ff       	call   c002ab6a <IDE::getBase(unsigned char)>
c002c632:	89 c2                	mov    edx,eax
c002c634:	66 ed                	in     ax,dx
c002c636:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002c63b:	83 c4 10             	add    esp,0x10
c002c63e:	46                   	inc    esi
c002c63f:	eb cf                	jmp    c002c610 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c002c641:	51                   	push   ecx
c002c642:	51                   	push   ecx
c002c643:	52                   	push   edx
c002c644:	50                   	push   eax
c002c645:	e8 a0 e6 ff ff       	call   c002acea <IDE::waitInterrupt(unsigned char)>
c002c64a:	83 c4 10             	add    esp,0x10
c002c64d:	84 c0                	test   al,al
c002c64f:	0f 84 df fd ff ff    	je     c002c434 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002c655:	bb a0 86 01 00       	mov    ebx,0x186a0
c002c65a:	52                   	push   edx
c002c65b:	52                   	push   edx
c002c65c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c663:	50                   	push   eax
c002c664:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c66a:	e8 e7 e4 ff ff       	call   c002ab56 <IDE::prepareInterrupt(unsigned char)>
c002c66f:	83 c4 10             	add    esp,0x10
c002c672:	50                   	push   eax
c002c673:	50                   	push   eax
c002c674:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c67b:	50                   	push   eax
c002c67c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c682:	e8 e3 e4 ff ff       	call   c002ab6a <IDE::getBase(unsigned char)>
c002c687:	8d 50 07             	lea    edx,[eax+0x7]
c002c68a:	ec                   	in     al,dx
c002c68b:	83 c4 10             	add    esp,0x10
c002c68e:	a8 88                	test   al,0x88
c002c690:	74 0a                	je     c002c69c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c002c692:	4b                   	dec    ebx
c002c693:	75 dd                	jne    c002c672 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c002c695:	bb 02 00 00 00       	mov    ebx,0x2
c002c69a:	eb 02                	jmp    c002c69e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002c69c:	31 db                	xor    ebx,ebx
c002c69e:	83 c4 1c             	add    esp,0x1c
c002c6a1:	89 d8                	mov    eax,ebx
c002c6a3:	5b                   	pop    ebx
c002c6a4:	5e                   	pop    esi
c002c6a5:	5f                   	pop    edi
c002c6a6:	5d                   	pop    ebp
c002c6a7:	c3                   	ret    

c002c6a8 <ATAPI::diskRemoved()>:
c002c6a8:	53                   	push   ebx
c002c6a9:	83 ec 14             	sub    esp,0x14
c002c6ac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002c6b0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002c6b7:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c002c6bd:	e8 cc fe fe ff       	call   c001c58e <LogicalDisk::unmount()>
c002c6c2:	58                   	pop    eax
c002c6c3:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002c6c9:	e8 9e 08 ff ff       	call   c001cf6c <VCache::writeWriteBuffer()>
c002c6ce:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c002c6d4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002c6d8:	83 c4 18             	add    esp,0x18
c002c6db:	5b                   	pop    ebx
c002c6dc:	e9 7b 08 ff ff       	jmp    c001cf5c <VCache::invalidateReadBuffer()>
c002c6e1:	90                   	nop

c002c6e2 <ATAPI::eject()>:
c002c6e2:	57                   	push   edi
c002c6e3:	b9 03 00 00 00       	mov    ecx,0x3
c002c6e8:	53                   	push   ebx
c002c6e9:	83 ec 14             	sub    esp,0x14
c002c6ec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002c6f0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002c6f4:	fc                   	cld    
c002c6f5:	31 c0                	xor    eax,eax
c002c6f7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002c6f9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002c6fe:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002c703:	50                   	push   eax
c002c704:	50                   	push   eax
c002c705:	6a 00                	push   0x0
c002c707:	6a 00                	push   0x0
c002c709:	6a 00                	push   0x0
c002c70b:	6a 02                	push   0x2
c002c70d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002c711:	50                   	push   eax
c002c712:	53                   	push   ebx
c002c713:	e8 c8 fc ff ff       	call   c002c3e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c718:	83 c4 14             	add    esp,0x14
c002c71b:	53                   	push   ebx
c002c71c:	e8 87 ff ff ff       	call   c002c6a8 <ATAPI::diskRemoved()>
c002c721:	83 c4 24             	add    esp,0x24
c002c724:	31 c0                	xor    eax,eax
c002c726:	5b                   	pop    ebx
c002c727:	5f                   	pop    edi
c002c728:	c3                   	ret    
c002c729:	90                   	nop

c002c72a <ATAPI::diskInserted()>:
c002c72a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002c72e:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c002c735:	c3                   	ret    

c002c736 <ATAPI::detectMedia()>:
c002c736:	56                   	push   esi
c002c737:	53                   	push   ebx
c002c738:	83 ec 28             	sub    esp,0x28
c002c73b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002c73f:	6a 0c                	push   0xc
c002c741:	6a 00                	push   0x0
c002c743:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002c747:	56                   	push   esi
c002c748:	e8 a3 3d fd ff       	call   c00004f0 <memset>
c002c74d:	58                   	pop    eax
c002c74e:	5a                   	pop    edx
c002c74f:	6a 00                	push   0x0
c002c751:	6a 00                	push   0x0
c002c753:	6a 00                	push   0x0
c002c755:	6a 00                	push   0x0
c002c757:	56                   	push   esi
c002c758:	53                   	push   ebx
c002c759:	e8 82 fc ff ff       	call   c002c3e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c75e:	83 c4 1c             	add    esp,0x1c
c002c761:	6a 0c                	push   0xc
c002c763:	6a 00                	push   0x0
c002c765:	56                   	push   esi
c002c766:	e8 85 3d fd ff       	call   c00004f0 <memset>
c002c76b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002c770:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002c775:	59                   	pop    ecx
c002c776:	58                   	pop    eax
c002c777:	6a 01                	push   0x1
c002c779:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002c77d:	50                   	push   eax
c002c77e:	6a 00                	push   0x0
c002c780:	6a 12                	push   0x12
c002c782:	56                   	push   esi
c002c783:	53                   	push   ebx
c002c784:	e8 57 fc ff ff       	call   c002c3e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c789:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002c78d:	83 c4 20             	add    esp,0x20
c002c790:	83 e0 7f             	and    eax,0x7f
c002c793:	83 f8 70             	cmp    eax,0x70
c002c796:	74 15                	je     c002c7ad <ATAPI::detectMedia()+0x77>
c002c798:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c79f:	75 0c                	jne    c002c7ad <ATAPI::detectMedia()+0x77>
c002c7a1:	83 ec 0c             	sub    esp,0xc
c002c7a4:	53                   	push   ebx
c002c7a5:	e8 80 ff ff ff       	call   c002c72a <ATAPI::diskInserted()>
c002c7aa:	83 c4 10             	add    esp,0x10
c002c7ad:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002c7b1:	83 e0 0f             	and    eax,0xf
c002c7b4:	83 f8 02             	cmp    eax,0x2
c002c7b7:	75 1b                	jne    c002c7d4 <ATAPI::detectMedia()+0x9e>
c002c7b9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002c7be:	75 2d                	jne    c002c7ed <ATAPI::detectMedia()+0xb7>
c002c7c0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c7c7:	74 24                	je     c002c7ed <ATAPI::detectMedia()+0xb7>
c002c7c9:	83 ec 0c             	sub    esp,0xc
c002c7cc:	53                   	push   ebx
c002c7cd:	e8 d6 fe ff ff       	call   c002c6a8 <ATAPI::diskRemoved()>
c002c7d2:	eb 16                	jmp    c002c7ea <ATAPI::detectMedia()+0xb4>
c002c7d4:	85 c0                	test   eax,eax
c002c7d6:	75 15                	jne    c002c7ed <ATAPI::detectMedia()+0xb7>
c002c7d8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c7df:	75 0c                	jne    c002c7ed <ATAPI::detectMedia()+0xb7>
c002c7e1:	83 ec 0c             	sub    esp,0xc
c002c7e4:	53                   	push   ebx
c002c7e5:	e8 40 ff ff ff       	call   c002c72a <ATAPI::diskInserted()>
c002c7ea:	83 c4 10             	add    esp,0x10
c002c7ed:	83 c4 24             	add    esp,0x24
c002c7f0:	5b                   	pop    ebx
c002c7f1:	5e                   	pop    esi
c002c7f2:	c3                   	ret    
c002c7f3:	90                   	nop

c002c7f4 <ATAPI::open(int, int, void*)>:
c002c7f4:	56                   	push   esi
c002c7f5:	53                   	push   ebx
c002c7f6:	50                   	push   eax
c002c7f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002c7fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002c7ff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002c803:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002c809:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002c80f:	c1 e0 06             	shl    eax,0x6
c002c812:	01 d0                	add    eax,edx
c002c814:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002c81b:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002c821:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002c828:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002c832:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002c838:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002c83f:	6a 04                	push   0x4
c002c841:	6a 0c                	push   0xc
c002c843:	51                   	push   ecx
c002c844:	52                   	push   edx
c002c845:	e8 32 e3 ff ff       	call   c002ab7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c84a:	90                   	nop
c002c84b:	90                   	nop
c002c84c:	6a 00                	push   0x0
c002c84e:	6a 0c                	push   0xc
c002c850:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c857:	50                   	push   eax
c002c858:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c85e:	e8 19 e3 ff ff       	call   c002ab7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c863:	83 c4 14             	add    esp,0x14
c002c866:	68 78 01 00 00       	push   0x178
c002c86b:	e8 96 9a fe ff       	call   c0016306 <malloc>
c002c870:	83 c4 0c             	add    esp,0xc
c002c873:	89 c6                	mov    esi,eax
c002c875:	6a 00                	push   0x0
c002c877:	68 ff ff ff 7f       	push   0x7fffffff
c002c87c:	6a 00                	push   0x0
c002c87e:	6a 00                	push   0x0
c002c880:	53                   	push   ebx
c002c881:	68 b7 38 03 c0       	push   0xc00338b7
c002c886:	50                   	push   eax
c002c887:	e8 40 fb fe ff       	call   c001c3cc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002c88c:	83 c4 14             	add    esp,0x14
c002c88f:	56                   	push   esi
c002c890:	e8 f7 fb fe ff       	call   c001c48c <LogicalDisk::assignDriveLetter()>
c002c895:	5a                   	pop    edx
c002c896:	0f be c0             	movsx  eax,al
c002c899:	59                   	pop    ecx
c002c89a:	50                   	push   eax
c002c89b:	68 fc 36 03 c0       	push   0xc00336fc
c002c8a0:	e8 f0 c8 fe ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c002c8a5:	58                   	pop    eax
c002c8a6:	5a                   	pop    edx
c002c8a7:	56                   	push   esi
c002c8a8:	53                   	push   ebx
c002c8a9:	e8 68 e9 fe ff       	call   c001b216 <Device::addChild(Device*)>
c002c8ae:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c002c8b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c8b7:	e8 a6 ed fe ff       	call   c001b662 <PhysicalDisk::startCache()>
c002c8bc:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002c8c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c8c6:	e8 6b fe ff ff       	call   c002c736 <ATAPI::detectMedia()>
c002c8cb:	83 c4 14             	add    esp,0x14
c002c8ce:	31 c0                	xor    eax,eax
c002c8d0:	5b                   	pop    ebx
c002c8d1:	5e                   	pop    esi
c002c8d2:	c3                   	ret    
c002c8d3:	90                   	nop

c002c8d4 <ATAPI::read(unsigned long long, int, void*)>:
c002c8d4:	55                   	push   ebp
c002c8d5:	57                   	push   edi
c002c8d6:	56                   	push   esi
c002c8d7:	53                   	push   ebx
c002c8d8:	83 ec 1c             	sub    esp,0x1c
c002c8db:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002c8df:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002c8e3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002c8e7:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c8ee:	74 3c                	je     c002c92c <ATAPI::read(unsigned long long, int, void*)+0x58>
c002c8f0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002c8f4:	b9 03 00 00 00       	mov    ecx,0x3
c002c8f9:	fc                   	cld    
c002c8fa:	31 c0                	xor    eax,eax
c002c8fc:	0f ce                	bswap  esi
c002c8fe:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002c900:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002c905:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c002c909:	89 e8                	mov    eax,ebp
c002c90b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002c90f:	50                   	push   eax
c002c910:	50                   	push   eax
c002c911:	55                   	push   ebp
c002c912:	c1 e5 0b             	shl    ebp,0xb
c002c915:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002c919:	6a 00                	push   0x0
c002c91b:	55                   	push   ebp
c002c91c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002c920:	50                   	push   eax
c002c921:	53                   	push   ebx
c002c922:	e8 b9 fa ff ff       	call   c002c3e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c927:	83 c4 20             	add    esp,0x20
c002c92a:	eb 1a                	jmp    c002c946 <ATAPI::read(unsigned long long, int, void*)+0x72>
c002c92c:	83 ec 0c             	sub    esp,0xc
c002c92f:	53                   	push   ebx
c002c930:	e8 01 fe ff ff       	call   c002c736 <ATAPI::detectMedia()>
c002c935:	83 c4 10             	add    esp,0x10
c002c938:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c93f:	75 af                	jne    c002c8f0 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002c941:	b8 02 00 00 00       	mov    eax,0x2
c002c946:	83 c4 1c             	add    esp,0x1c
c002c949:	5b                   	pop    ebx
c002c94a:	5e                   	pop    esi
c002c94b:	5f                   	pop    edi
c002c94c:	5d                   	pop    ebp
c002c94d:	c3                   	ret    

c002c94e <SATA::close(int, int, void*)>:
c002c94e:	83 ec 0c             	sub    esp,0xc
c002c951:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c955:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002c95b:	85 c0                	test   eax,eax
c002c95d:	74 0c                	je     c002c96b <SATA::close(int, int, void*)+0x1d>
c002c95f:	83 ec 0c             	sub    esp,0xc
c002c962:	8b 10                	mov    edx,DWORD PTR [eax]
c002c964:	50                   	push   eax
c002c965:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002c968:	83 c4 10             	add    esp,0x10
c002c96b:	31 c0                	xor    eax,eax
c002c96d:	83 c4 0c             	add    esp,0xc
c002c970:	c3                   	ret    
c002c971:	90                   	nop

c002c972 <SATA::powerSaving(PowerSavingLevel)>:
c002c972:	c3                   	ret    
c002c973:	90                   	nop

c002c974 <SATA::open(int, int, void*)>:
c002c974:	56                   	push   esi
c002c975:	53                   	push   ebx
c002c976:	83 ec 10             	sub    esp,0x10
c002c979:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002c97d:	68 44 37 03 c0       	push   0xc0033744
c002c982:	e8 0e c8 fe ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c002c987:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002c98b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002c995:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002c99b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002c9a5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c9a9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002c9b3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002c9b9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002c9c0:	e8 4a 9c fe ff       	call   c001660f <Phys::allocatePage()>
c002c9c5:	89 c6                	mov    esi,eax
c002c9c7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002c9cd:	81 c6 00 10 00 00    	add    esi,0x1000
c002c9d3:	e8 37 9c fe ff       	call   c001660f <Phys::allocatePage()>
c002c9d8:	83 c4 10             	add    esp,0x10
c002c9db:	39 c6                	cmp    esi,eax
c002c9dd:	74 10                	je     c002c9ef <SATA::open(int, int, void*)+0x7b>
c002c9df:	83 ec 0c             	sub    esp,0xc
c002c9e2:	68 50 37 03 c0       	push   0xc0033750
c002c9e7:	e8 c2 37 ff ff       	call   c00201ae <KePanic(char const*)>
c002c9ec:	83 c4 10             	add    esp,0x10
c002c9ef:	83 ec 0c             	sub    esp,0xc
c002c9f2:	6a 02                	push   0x2
c002c9f4:	e8 64 b4 fe ff       	call   c0017e5d <Virt::allocateKernelVirtualPages(int)>
c002c9f9:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002c9ff:	6a 03                	push   0x3
c002ca01:	50                   	push   eax
c002ca02:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002ca08:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002ca0e:	e8 5d bb fe ff       	call   c0018570 <VAS::mapPage(unsigned long, unsigned long, int)>
c002ca13:	83 c4 14             	add    esp,0x14
c002ca16:	53                   	push   ebx
c002ca17:	e8 46 ec fe ff       	call   c001b662 <PhysicalDisk::startCache()>
c002ca1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002ca1f:	e8 7a fe fe ff       	call   c001c89e <createPartitionsForDisk(PhysicalDisk*)>
c002ca24:	83 c4 14             	add    esp,0x14
c002ca27:	31 c0                	xor    eax,eax
c002ca29:	5b                   	pop    ebx
c002ca2a:	5e                   	pop    esi
c002ca2b:	c3                   	ret    

c002ca2c <SATA::SATA()>:
c002ca2c:	83 ec 0c             	sub    esp,0xc
c002ca2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ca33:	83 ec 04             	sub    esp,0x4
c002ca36:	68 00 02 00 00       	push   0x200
c002ca3b:	68 64 37 03 c0       	push   0xc0033764
c002ca40:	50                   	push   eax
c002ca41:	e8 b4 eb fe ff       	call   c001b5fa <PhysicalDisk::PhysicalDisk(char const*, int)>
c002ca46:	83 c4 10             	add    esp,0x10
c002ca49:	ba d4 37 03 c0       	mov    edx,0xc00337d4
c002ca4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ca52:	89 10                	mov    DWORD PTR [eax],edx
c002ca54:	90                   	nop
c002ca55:	83 c4 0c             	add    esp,0xc
c002ca58:	c3                   	ret    
c002ca59:	90                   	nop

c002ca5a <SATA::access(unsigned long long, int, void*, bool)>:
c002ca5a:	55                   	push   ebp
c002ca5b:	57                   	push   edi
c002ca5c:	56                   	push   esi
c002ca5d:	53                   	push   ebx
c002ca5e:	83 ec 2c             	sub    esp,0x2c
c002ca61:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002ca65:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002ca69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002ca6d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002ca71:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002ca75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002ca79:	fa                   	cli    
c002ca7a:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002ca80:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002ca85:	7e 10                	jle    c002ca97 <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c002ca87:	83 ec 0c             	sub    esp,0xc
c002ca8a:	68 74 37 03 c0       	push   0xc0033774
c002ca8f:	e8 1a 37 ff ff       	call   c00201ae <KePanic(char const*)>
c002ca94:	83 c4 10             	add    esp,0x10
c002ca97:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002ca9d:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002caa3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002caa9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002caad:	89 d0                	mov    eax,edx
c002caaf:	c1 e0 07             	shl    eax,0x7
c002cab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002cab6:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002cac0:	51                   	push   ecx
c002cac1:	8d 42 02             	lea    eax,[edx+0x2]
c002cac4:	51                   	push   ecx
c002cac5:	c1 e0 07             	shl    eax,0x7
c002cac8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002cacc:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002cad0:	50                   	push   eax
c002cad1:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002cad7:	e8 68 ec ff ff       	call   c002b744 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002cadc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002cae0:	83 c4 10             	add    esp,0x10
c002cae3:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002cae8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002caec:	0f 84 aa 01 00 00    	je     c002cc9c <SATA::access(unsigned long long, int, void*, bool)+0x242>
c002caf2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002caf6:	c1 e0 09             	shl    eax,0x9
c002caf9:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002cafe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002cb02:	74 0e                	je     c002cb12 <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c002cb04:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c002cb0a:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002cb0e:	89 c1                	mov    ecx,eax
c002cb10:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002cb12:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002cb18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002cb1c:	8d 42 02             	lea    eax,[edx+0x2]
c002cb1f:	c1 e0 07             	shl    eax,0x7
c002cb22:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002cb26:	8b 00                	mov    eax,DWORD PTR [eax]
c002cb28:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002cb2e:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002cb34:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002cb38:	c1 e1 05             	shl    ecx,0x5
c002cb3b:	01 c8                	add    eax,ecx
c002cb3d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002cb41:	83 e1 01             	and    ecx,0x1
c002cb44:	89 ce                	mov    esi,ecx
c002cb46:	8a 08                	mov    cl,BYTE PTR [eax]
c002cb48:	c1 e6 06             	shl    esi,0x6
c002cb4b:	83 e1 bf             	and    ecx,0xffffffbf
c002cb4e:	09 f1                	or     ecx,esi
c002cb50:	88 08                	mov    BYTE PTR [eax],cl
c002cb52:	8b 08                	mov    ecx,DWORD PTR [eax]
c002cb54:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002cb5a:	81 c9 05 00 01 00    	or     ecx,0x10005
c002cb60:	89 08                	mov    DWORD PTR [eax],ecx
c002cb62:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002cb68:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002cb6e:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c002cb74:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c002cb77:	50                   	push   eax
c002cb78:	68 90 00 00 00       	push   0x90
c002cb7d:	6a 00                	push   0x0
c002cb7f:	56                   	push   esi
c002cb80:	e8 6b 39 fd ff       	call   c00004f0 <memset>
c002cb85:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002cb8b:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002cb91:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002cb95:	83 c4 10             	add    esp,0x10
c002cb98:	48                   	dec    eax
c002cb99:	25 ff ff 3f 00       	and    eax,0x3fffff
c002cb9e:	89 c1                	mov    ecx,eax
c002cba0:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c002cba6:	25 00 00 c0 ff       	and    eax,0xffc00000
c002cbab:	09 c8                	or     eax,ecx
c002cbad:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002cbb3:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c002cbb9:	83 c8 80             	or     eax,0xffffff80
c002cbbc:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c002cbc2:	66 8b 06             	mov    ax,WORD PTR [esi]
c002cbc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002cbc9:	25 00 7f 00 00       	and    eax,0x7f00
c002cbce:	0d 27 80 ff ff       	or     eax,0xffff8027
c002cbd3:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002cbd8:	66 89 06             	mov    WORD PTR [esi],ax
c002cbdb:	b0 35                	mov    al,0x35
c002cbdd:	75 02                	jne    c002cbe1 <SATA::access(unsigned long long, int, void*, bool)+0x187>
c002cbdf:	b0 25                	mov    al,0x25
c002cbe1:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c002cbe4:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c002cbe8:	89 e8                	mov    eax,ebp
c002cbea:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002cbee:	c1 e8 10             	shr    eax,0x10
c002cbf1:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c002cbf4:	89 e8                	mov    eax,ebp
c002cbf6:	c1 e8 18             	shr    eax,0x18
c002cbf9:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c002cbfc:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002cc00:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c002cc03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002cc07:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002cc0a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002cc0e:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c002cc12:	89 d6                	mov    esi,edx
c002cc14:	31 c0                	xor    eax,eax
c002cc16:	c1 e6 07             	shl    esi,0x7
c002cc19:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c002cc1d:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c002cc23:	80 e1 88             	and    cl,0x88
c002cc26:	74 0a                	je     c002cc32 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c002cc28:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002cc2d:	74 0a                	je     c002cc39 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c002cc2f:	40                   	inc    eax
c002cc30:	eb eb                	jmp    c002cc1d <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c002cc32:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002cc37:	75 0a                	jne    c002cc43 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c002cc39:	83 ec 0c             	sub    esp,0xc
c002cc3c:	68 ad 37 03 c0       	push   0xc00337ad
c002cc41:	eb 36                	jmp    c002cc79 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c002cc43:	b8 01 00 00 00       	mov    eax,0x1
c002cc48:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002cc4c:	c1 e2 07             	shl    edx,0x7
c002cc4f:	d3 e0                	shl    eax,cl
c002cc51:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c002cc55:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002cc5b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c002cc61:	85 c8                	test   eax,ecx
c002cc63:	74 2b                	je     c002cc90 <SATA::access(unsigned long long, int, void*, bool)+0x236>
c002cc65:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c002cc6b:	0f ba e1 1e          	bt     ecx,0x1e
c002cc6f:	73 ea                	jae    c002cc5b <SATA::access(unsigned long long, int, void*, bool)+0x201>
c002cc71:	83 ec 0c             	sub    esp,0xc
c002cc74:	68 bb 37 03 c0       	push   0xc00337bb
c002cc79:	e8 17 c5 fe ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c002cc7e:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002cc83:	83 c4 10             	add    esp,0x10
c002cc86:	48                   	dec    eax
c002cc87:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002cc8c:	85 c0                	test   eax,eax
c002cc8e:	eb 17                	jmp    c002cca7 <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c002cc90:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c002cc96:	0f ba e0 1e          	bt     eax,0x1e
c002cc9a:	73 15                	jae    c002ccb1 <SATA::access(unsigned long long, int, void*, bool)+0x257>
c002cc9c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002cca1:	48                   	dec    eax
c002cca2:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002cca7:	75 01                	jne    c002ccaa <SATA::access(unsigned long long, int, void*, bool)+0x250>
c002cca9:	fb                   	sti    
c002ccaa:	b8 01 00 00 00       	mov    eax,0x1
c002ccaf:	eb 29                	jmp    c002ccda <SATA::access(unsigned long long, int, void*, bool)+0x280>
c002ccb1:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002ccb6:	75 10                	jne    c002ccc8 <SATA::access(unsigned long long, int, void*, bool)+0x26e>
c002ccb8:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002ccbe:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002ccc2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002ccc6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002ccc8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002cccd:	48                   	dec    eax
c002ccce:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002ccd3:	75 03                	jne    c002ccd8 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c002ccd5:	fb                   	sti    
c002ccd6:	eb 02                	jmp    c002ccda <SATA::access(unsigned long long, int, void*, bool)+0x280>
c002ccd8:	31 c0                	xor    eax,eax
c002ccda:	83 c4 2c             	add    esp,0x2c
c002ccdd:	5b                   	pop    ebx
c002ccde:	5e                   	pop    esi
c002ccdf:	5f                   	pop    edi
c002cce0:	5d                   	pop    ebp
c002cce1:	c3                   	ret    

c002cce2 <SATA::read(unsigned long long, int, void*)>:
c002cce2:	55                   	push   ebp
c002cce3:	57                   	push   edi
c002cce4:	56                   	push   esi
c002cce5:	be 04 00 00 00       	mov    esi,0x4
c002ccea:	53                   	push   ebx
c002cceb:	83 ec 0c             	sub    esp,0xc
c002ccee:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002ccf2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002ccf6:	8d 7b ff             	lea    edi,[ebx-0x1]
c002ccf9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002ccfd:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002cd01:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002cd07:	0f 87 1a 02 00 00    	ja     c002cf27 <SATA::read(unsigned long long, int, void*)+0x245>
c002cd0d:	be 06 00 00 00       	mov    esi,0x6
c002cd12:	85 c9                	test   ecx,ecx
c002cd14:	0f 84 0d 02 00 00    	je     c002cf27 <SATA::read(unsigned long long, int, void*)+0x245>
c002cd1a:	56                   	push   esi
c002cd1b:	56                   	push   esi
c002cd1c:	6a 00                	push   0x0
c002cd1e:	51                   	push   ecx
c002cd1f:	53                   	push   ebx
c002cd20:	52                   	push   edx
c002cd21:	50                   	push   eax
c002cd22:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002cd26:	e8 2f fd ff ff       	call   c002ca5a <SATA::access(unsigned long long, int, void*, bool)>
c002cd2b:	83 c4 20             	add    esp,0x20
c002cd2e:	89 c6                	mov    esi,eax
c002cd30:	85 c0                	test   eax,eax
c002cd32:	0f 85 ea 01 00 00    	jne    c002cf22 <SATA::read(unsigned long long, int, void*)+0x240>
c002cd38:	01 1d b4 0b 04 c0    	add    DWORD PTR ds:0xc0040bb4,ebx
c002cd3e:	bb 0a 00 00 00       	mov    ebx,0xa
c002cd43:	50                   	push   eax
c002cd44:	50                   	push   eax
c002cd45:	6a 0f                	push   0xf
c002cd47:	6a 00                	push   0x0
c002cd49:	e8 33 f2 ff ff       	call   c002bf81 <combineColours(unsigned char, unsigned char)>
c002cd4e:	5a                   	pop    edx
c002cd4f:	0f b6 c0             	movzx  eax,al
c002cd52:	59                   	pop    ecx
c002cd53:	b9 10 27 00 00       	mov    ecx,0x2710
c002cd58:	50                   	push   eax
c002cd59:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cd5e:	99                   	cdq    
c002cd5f:	f7 f9                	idiv   ecx
c002cd61:	99                   	cdq    
c002cd62:	f7 fb                	idiv   ebx
c002cd64:	8d 42 30             	lea    eax,[edx+0x30]
c002cd67:	0f b6 c0             	movzx  eax,al
c002cd6a:	50                   	push   eax
c002cd6b:	e8 00 f2 ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002cd70:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002cd76:	5f                   	pop    edi
c002cd77:	5d                   	pop    ebp
c002cd78:	bd e8 03 00 00       	mov    ebp,0x3e8
c002cd7d:	6a 0f                	push   0xf
c002cd7f:	6a 00                	push   0x0
c002cd81:	e8 fb f1 ff ff       	call   c002bf81 <combineColours(unsigned char, unsigned char)>
c002cd86:	5a                   	pop    edx
c002cd87:	0f b6 c0             	movzx  eax,al
c002cd8a:	59                   	pop    ecx
c002cd8b:	50                   	push   eax
c002cd8c:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cd91:	99                   	cdq    
c002cd92:	f7 fd                	idiv   ebp
c002cd94:	99                   	cdq    
c002cd95:	f7 fb                	idiv   ebx
c002cd97:	8d 42 30             	lea    eax,[edx+0x30]
c002cd9a:	0f b6 c0             	movzx  eax,al
c002cd9d:	50                   	push   eax
c002cd9e:	e8 cd f1 ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002cda3:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002cda9:	5f                   	pop    edi
c002cdaa:	bf 64 00 00 00       	mov    edi,0x64
c002cdaf:	58                   	pop    eax
c002cdb0:	6a 0f                	push   0xf
c002cdb2:	6a 00                	push   0x0
c002cdb4:	e8 c8 f1 ff ff       	call   c002bf81 <combineColours(unsigned char, unsigned char)>
c002cdb9:	5a                   	pop    edx
c002cdba:	0f b6 c0             	movzx  eax,al
c002cdbd:	59                   	pop    ecx
c002cdbe:	50                   	push   eax
c002cdbf:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cdc4:	99                   	cdq    
c002cdc5:	f7 ff                	idiv   edi
c002cdc7:	99                   	cdq    
c002cdc8:	f7 fb                	idiv   ebx
c002cdca:	8d 42 30             	lea    eax,[edx+0x30]
c002cdcd:	0f b6 c0             	movzx  eax,al
c002cdd0:	50                   	push   eax
c002cdd1:	e8 9a f1 ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002cdd6:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002cddc:	58                   	pop    eax
c002cddd:	5a                   	pop    edx
c002cdde:	6a 0f                	push   0xf
c002cde0:	6a 00                	push   0x0
c002cde2:	e8 9a f1 ff ff       	call   c002bf81 <combineColours(unsigned char, unsigned char)>
c002cde7:	59                   	pop    ecx
c002cde8:	0f b6 c0             	movzx  eax,al
c002cdeb:	5a                   	pop    edx
c002cdec:	50                   	push   eax
c002cded:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cdf2:	99                   	cdq    
c002cdf3:	f7 fb                	idiv   ebx
c002cdf5:	99                   	cdq    
c002cdf6:	f7 fb                	idiv   ebx
c002cdf8:	8d 42 30             	lea    eax,[edx+0x30]
c002cdfb:	0f b6 c0             	movzx  eax,al
c002cdfe:	50                   	push   eax
c002cdff:	e8 6c f1 ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002ce04:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002ce0a:	59                   	pop    ecx
c002ce0b:	58                   	pop    eax
c002ce0c:	6a 0f                	push   0xf
c002ce0e:	6a 00                	push   0x0
c002ce10:	e8 6c f1 ff ff       	call   c002bf81 <combineColours(unsigned char, unsigned char)>
c002ce15:	5a                   	pop    edx
c002ce16:	0f b6 c0             	movzx  eax,al
c002ce19:	59                   	pop    ecx
c002ce1a:	50                   	push   eax
c002ce1b:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002ce20:	99                   	cdq    
c002ce21:	f7 fb                	idiv   ebx
c002ce23:	8d 42 30             	lea    eax,[edx+0x30]
c002ce26:	0f b6 c0             	movzx  eax,al
c002ce29:	50                   	push   eax
c002ce2a:	e8 41 f1 ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002ce2f:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002ce35:	58                   	pop    eax
c002ce36:	5a                   	pop    edx
c002ce37:	6a 0f                	push   0xf
c002ce39:	6a 00                	push   0x0
c002ce3b:	e8 41 f1 ff ff       	call   c002bf81 <combineColours(unsigned char, unsigned char)>
c002ce40:	59                   	pop    ecx
c002ce41:	0f b6 c0             	movzx  eax,al
c002ce44:	5a                   	pop    edx
c002ce45:	b9 10 27 00 00       	mov    ecx,0x2710
c002ce4a:	50                   	push   eax
c002ce4b:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002ce50:	99                   	cdq    
c002ce51:	f7 f9                	idiv   ecx
c002ce53:	99                   	cdq    
c002ce54:	f7 fb                	idiv   ebx
c002ce56:	8d 42 30             	lea    eax,[edx+0x30]
c002ce59:	0f b6 c0             	movzx  eax,al
c002ce5c:	50                   	push   eax
c002ce5d:	e8 0e f1 ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002ce62:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002ce68:	59                   	pop    ecx
c002ce69:	58                   	pop    eax
c002ce6a:	6a 0f                	push   0xf
c002ce6c:	6a 00                	push   0x0
c002ce6e:	e8 0e f1 ff ff       	call   c002bf81 <combineColours(unsigned char, unsigned char)>
c002ce73:	5a                   	pop    edx
c002ce74:	0f b6 c0             	movzx  eax,al
c002ce77:	59                   	pop    ecx
c002ce78:	50                   	push   eax
c002ce79:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002ce7e:	99                   	cdq    
c002ce7f:	f7 fd                	idiv   ebp
c002ce81:	99                   	cdq    
c002ce82:	f7 fb                	idiv   ebx
c002ce84:	8d 42 30             	lea    eax,[edx+0x30]
c002ce87:	0f b6 c0             	movzx  eax,al
c002ce8a:	50                   	push   eax
c002ce8b:	e8 e0 f0 ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002ce90:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002ce96:	5d                   	pop    ebp
c002ce97:	58                   	pop    eax
c002ce98:	6a 0f                	push   0xf
c002ce9a:	6a 00                	push   0x0
c002ce9c:	e8 e0 f0 ff ff       	call   c002bf81 <combineColours(unsigned char, unsigned char)>
c002cea1:	5a                   	pop    edx
c002cea2:	0f b6 c0             	movzx  eax,al
c002cea5:	59                   	pop    ecx
c002cea6:	50                   	push   eax
c002cea7:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002ceac:	99                   	cdq    
c002cead:	f7 ff                	idiv   edi
c002ceaf:	99                   	cdq    
c002ceb0:	f7 fb                	idiv   ebx
c002ceb2:	8d 42 30             	lea    eax,[edx+0x30]
c002ceb5:	0f b6 c0             	movzx  eax,al
c002ceb8:	50                   	push   eax
c002ceb9:	e8 b2 f0 ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002cebe:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002cec4:	5f                   	pop    edi
c002cec5:	5d                   	pop    ebp
c002cec6:	6a 0f                	push   0xf
c002cec8:	6a 00                	push   0x0
c002ceca:	e8 b2 f0 ff ff       	call   c002bf81 <combineColours(unsigned char, unsigned char)>
c002cecf:	5a                   	pop    edx
c002ced0:	0f b6 c0             	movzx  eax,al
c002ced3:	59                   	pop    ecx
c002ced4:	50                   	push   eax
c002ced5:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002ceda:	99                   	cdq    
c002cedb:	f7 fb                	idiv   ebx
c002cedd:	99                   	cdq    
c002cede:	f7 fb                	idiv   ebx
c002cee0:	8d 42 30             	lea    eax,[edx+0x30]
c002cee3:	0f b6 c0             	movzx  eax,al
c002cee6:	50                   	push   eax
c002cee7:	e8 84 f0 ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002ceec:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002cef2:	5f                   	pop    edi
c002cef3:	5d                   	pop    ebp
c002cef4:	6a 0f                	push   0xf
c002cef6:	6a 00                	push   0x0
c002cef8:	e8 84 f0 ff ff       	call   c002bf81 <combineColours(unsigned char, unsigned char)>
c002cefd:	5a                   	pop    edx
c002cefe:	0f b6 c0             	movzx  eax,al
c002cf01:	59                   	pop    ecx
c002cf02:	50                   	push   eax
c002cf03:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cf08:	99                   	cdq    
c002cf09:	f7 fb                	idiv   ebx
c002cf0b:	83 c2 30             	add    edx,0x30
c002cf0e:	0f b6 d2             	movzx  edx,dl
c002cf11:	52                   	push   edx
c002cf12:	e8 59 f0 ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002cf17:	83 c4 10             	add    esp,0x10
c002cf1a:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002cf20:	eb 05                	jmp    c002cf27 <SATA::read(unsigned long long, int, void*)+0x245>
c002cf22:	be 01 00 00 00       	mov    esi,0x1
c002cf27:	83 c4 0c             	add    esp,0xc
c002cf2a:	89 f0                	mov    eax,esi
c002cf2c:	5b                   	pop    ebx
c002cf2d:	5e                   	pop    esi
c002cf2e:	5f                   	pop    edi
c002cf2f:	5d                   	pop    ebp
c002cf30:	c3                   	ret    
c002cf31:	90                   	nop

c002cf32 <SATA::write(unsigned long long, int, void*)>:
c002cf32:	55                   	push   ebp
c002cf33:	b8 04 00 00 00       	mov    eax,0x4
c002cf38:	57                   	push   edi
c002cf39:	56                   	push   esi
c002cf3a:	53                   	push   ebx
c002cf3b:	83 ec 1c             	sub    esp,0x1c
c002cf3e:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002cf42:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002cf46:	8d 75 ff             	lea    esi,[ebp-0x1]
c002cf49:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002cf4d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c002cf51:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002cf57:	0f 87 32 02 00 00    	ja     c002d18f <SATA::write(unsigned long long, int, void*)+0x25d>
c002cf5d:	b8 06 00 00 00       	mov    eax,0x6
c002cf62:	85 ff                	test   edi,edi
c002cf64:	0f 84 25 02 00 00    	je     c002d18f <SATA::write(unsigned long long, int, void*)+0x25d>
c002cf6a:	89 ee                	mov    esi,ebp
c002cf6c:	c1 e6 09             	shl    esi,0x9
c002cf6f:	01 fe                	add    esi,edi
c002cf71:	89 c8                	mov    eax,ecx
c002cf73:	89 da                	mov    edx,ebx
c002cf75:	83 c0 01             	add    eax,0x1
c002cf78:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002cf7c:	83 d2 00             	adc    edx,0x0
c002cf7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002cf83:	50                   	push   eax
c002cf84:	50                   	push   eax
c002cf85:	6a 01                	push   0x1
c002cf87:	57                   	push   edi
c002cf88:	81 c7 00 02 00 00    	add    edi,0x200
c002cf8e:	6a 01                	push   0x1
c002cf90:	53                   	push   ebx
c002cf91:	51                   	push   ecx
c002cf92:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002cf96:	e8 bf fa ff ff       	call   c002ca5a <SATA::access(unsigned long long, int, void*, bool)>
c002cf9b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c002cf9f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002cfa3:	83 c4 20             	add    esp,0x20
c002cfa6:	39 f7                	cmp    edi,esi
c002cfa8:	75 c7                	jne    c002cf71 <SATA::write(unsigned long long, int, void*)+0x3f>
c002cfaa:	bb 0a 00 00 00       	mov    ebx,0xa
c002cfaf:	01 2d b0 0b 04 c0    	add    DWORD PTR ds:0xc0040bb0,ebp
c002cfb5:	bd 10 27 00 00       	mov    ebp,0x2710
c002cfba:	50                   	push   eax
c002cfbb:	50                   	push   eax
c002cfbc:	6a 0f                	push   0xf
c002cfbe:	6a 00                	push   0x0
c002cfc0:	e8 bc ef ff ff       	call   c002bf81 <combineColours(unsigned char, unsigned char)>
c002cfc5:	5a                   	pop    edx
c002cfc6:	0f b6 c0             	movzx  eax,al
c002cfc9:	59                   	pop    ecx
c002cfca:	50                   	push   eax
c002cfcb:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cfd0:	99                   	cdq    
c002cfd1:	f7 fd                	idiv   ebp
c002cfd3:	99                   	cdq    
c002cfd4:	f7 fb                	idiv   ebx
c002cfd6:	8d 42 30             	lea    eax,[edx+0x30]
c002cfd9:	0f b6 c0             	movzx  eax,al
c002cfdc:	50                   	push   eax
c002cfdd:	e8 8e ef ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002cfe2:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002cfe8:	5e                   	pop    esi
c002cfe9:	5f                   	pop    edi
c002cfea:	bf e8 03 00 00       	mov    edi,0x3e8
c002cfef:	6a 0f                	push   0xf
c002cff1:	6a 00                	push   0x0
c002cff3:	e8 89 ef ff ff       	call   c002bf81 <combineColours(unsigned char, unsigned char)>
c002cff8:	5a                   	pop    edx
c002cff9:	0f b6 c0             	movzx  eax,al
c002cffc:	59                   	pop    ecx
c002cffd:	50                   	push   eax
c002cffe:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d003:	99                   	cdq    
c002d004:	f7 ff                	idiv   edi
c002d006:	99                   	cdq    
c002d007:	f7 fb                	idiv   ebx
c002d009:	8d 42 30             	lea    eax,[edx+0x30]
c002d00c:	0f b6 c0             	movzx  eax,al
c002d00f:	50                   	push   eax
c002d010:	e8 5b ef ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002d015:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002d01b:	5e                   	pop    esi
c002d01c:	be 64 00 00 00       	mov    esi,0x64
c002d021:	58                   	pop    eax
c002d022:	6a 0f                	push   0xf
c002d024:	6a 00                	push   0x0
c002d026:	e8 56 ef ff ff       	call   c002bf81 <combineColours(unsigned char, unsigned char)>
c002d02b:	5a                   	pop    edx
c002d02c:	0f b6 c0             	movzx  eax,al
c002d02f:	59                   	pop    ecx
c002d030:	50                   	push   eax
c002d031:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d036:	99                   	cdq    
c002d037:	f7 fe                	idiv   esi
c002d039:	99                   	cdq    
c002d03a:	f7 fb                	idiv   ebx
c002d03c:	8d 42 30             	lea    eax,[edx+0x30]
c002d03f:	0f b6 c0             	movzx  eax,al
c002d042:	50                   	push   eax
c002d043:	e8 28 ef ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002d048:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002d04e:	58                   	pop    eax
c002d04f:	5a                   	pop    edx
c002d050:	6a 0f                	push   0xf
c002d052:	6a 00                	push   0x0
c002d054:	e8 28 ef ff ff       	call   c002bf81 <combineColours(unsigned char, unsigned char)>
c002d059:	59                   	pop    ecx
c002d05a:	0f b6 c0             	movzx  eax,al
c002d05d:	5a                   	pop    edx
c002d05e:	50                   	push   eax
c002d05f:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d064:	99                   	cdq    
c002d065:	f7 fb                	idiv   ebx
c002d067:	99                   	cdq    
c002d068:	f7 fb                	idiv   ebx
c002d06a:	8d 42 30             	lea    eax,[edx+0x30]
c002d06d:	0f b6 c0             	movzx  eax,al
c002d070:	50                   	push   eax
c002d071:	e8 fa ee ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002d076:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002d07c:	59                   	pop    ecx
c002d07d:	58                   	pop    eax
c002d07e:	6a 0f                	push   0xf
c002d080:	6a 00                	push   0x0
c002d082:	e8 fa ee ff ff       	call   c002bf81 <combineColours(unsigned char, unsigned char)>
c002d087:	5a                   	pop    edx
c002d088:	0f b6 c0             	movzx  eax,al
c002d08b:	59                   	pop    ecx
c002d08c:	50                   	push   eax
c002d08d:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d092:	99                   	cdq    
c002d093:	f7 fb                	idiv   ebx
c002d095:	83 c2 30             	add    edx,0x30
c002d098:	0f b6 d2             	movzx  edx,dl
c002d09b:	52                   	push   edx
c002d09c:	e8 cf ee ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002d0a1:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002d0a7:	58                   	pop    eax
c002d0a8:	5a                   	pop    edx
c002d0a9:	6a 0f                	push   0xf
c002d0ab:	6a 00                	push   0x0
c002d0ad:	e8 cf ee ff ff       	call   c002bf81 <combineColours(unsigned char, unsigned char)>
c002d0b2:	59                   	pop    ecx
c002d0b3:	0f b6 c0             	movzx  eax,al
c002d0b6:	5a                   	pop    edx
c002d0b7:	50                   	push   eax
c002d0b8:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d0bd:	99                   	cdq    
c002d0be:	f7 fd                	idiv   ebp
c002d0c0:	99                   	cdq    
c002d0c1:	f7 fb                	idiv   ebx
c002d0c3:	8d 42 30             	lea    eax,[edx+0x30]
c002d0c6:	0f b6 c0             	movzx  eax,al
c002d0c9:	50                   	push   eax
c002d0ca:	e8 a1 ee ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002d0cf:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002d0d5:	59                   	pop    ecx
c002d0d6:	5d                   	pop    ebp
c002d0d7:	6a 0f                	push   0xf
c002d0d9:	6a 00                	push   0x0
c002d0db:	e8 a1 ee ff ff       	call   c002bf81 <combineColours(unsigned char, unsigned char)>
c002d0e0:	5a                   	pop    edx
c002d0e1:	0f b6 c0             	movzx  eax,al
c002d0e4:	59                   	pop    ecx
c002d0e5:	50                   	push   eax
c002d0e6:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d0eb:	99                   	cdq    
c002d0ec:	f7 ff                	idiv   edi
c002d0ee:	99                   	cdq    
c002d0ef:	f7 fb                	idiv   ebx
c002d0f1:	8d 42 30             	lea    eax,[edx+0x30]
c002d0f4:	0f b6 c0             	movzx  eax,al
c002d0f7:	50                   	push   eax
c002d0f8:	e8 73 ee ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002d0fd:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002d103:	5f                   	pop    edi
c002d104:	5d                   	pop    ebp
c002d105:	6a 0f                	push   0xf
c002d107:	6a 00                	push   0x0
c002d109:	e8 73 ee ff ff       	call   c002bf81 <combineColours(unsigned char, unsigned char)>
c002d10e:	5a                   	pop    edx
c002d10f:	0f b6 c0             	movzx  eax,al
c002d112:	59                   	pop    ecx
c002d113:	50                   	push   eax
c002d114:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d119:	99                   	cdq    
c002d11a:	f7 fe                	idiv   esi
c002d11c:	99                   	cdq    
c002d11d:	f7 fb                	idiv   ebx
c002d11f:	8d 42 30             	lea    eax,[edx+0x30]
c002d122:	0f b6 c0             	movzx  eax,al
c002d125:	50                   	push   eax
c002d126:	e8 45 ee ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002d12b:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002d131:	5e                   	pop    esi
c002d132:	5f                   	pop    edi
c002d133:	6a 0f                	push   0xf
c002d135:	6a 00                	push   0x0
c002d137:	e8 45 ee ff ff       	call   c002bf81 <combineColours(unsigned char, unsigned char)>
c002d13c:	5d                   	pop    ebp
c002d13d:	0f b6 c0             	movzx  eax,al
c002d140:	5a                   	pop    edx
c002d141:	50                   	push   eax
c002d142:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d147:	99                   	cdq    
c002d148:	f7 fb                	idiv   ebx
c002d14a:	99                   	cdq    
c002d14b:	f7 fb                	idiv   ebx
c002d14d:	8d 42 30             	lea    eax,[edx+0x30]
c002d150:	0f b6 c0             	movzx  eax,al
c002d153:	50                   	push   eax
c002d154:	e8 17 ee ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002d159:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002d15f:	59                   	pop    ecx
c002d160:	5e                   	pop    esi
c002d161:	6a 0f                	push   0xf
c002d163:	6a 00                	push   0x0
c002d165:	e8 17 ee ff ff       	call   c002bf81 <combineColours(unsigned char, unsigned char)>
c002d16a:	5f                   	pop    edi
c002d16b:	0f b6 c0             	movzx  eax,al
c002d16e:	5d                   	pop    ebp
c002d16f:	50                   	push   eax
c002d170:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d175:	99                   	cdq    
c002d176:	f7 fb                	idiv   ebx
c002d178:	83 c2 30             	add    edx,0x30
c002d17b:	0f b6 d2             	movzx  edx,dl
c002d17e:	52                   	push   edx
c002d17f:	e8 ec ed ff ff       	call   c002bf70 <combineCharAndColour(char, unsigned char)>
c002d184:	83 c4 10             	add    esp,0x10
c002d187:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002d18d:	31 c0                	xor    eax,eax
c002d18f:	83 c4 1c             	add    esp,0x1c
c002d192:	5b                   	pop    ebx
c002d193:	5e                   	pop    esi
c002d194:	5f                   	pop    edi
c002d195:	5d                   	pop    ebp
c002d196:	c3                   	ret    
c002d197:	90                   	nop

c002d198 <SATAPI::write(unsigned long long, int, void*)>:
c002d198:	b8 03 00 00 00       	mov    eax,0x3
c002d19d:	c3                   	ret    

c002d19e <SATAPI::close(int, int, void*)>:
c002d19e:	83 ec 0c             	sub    esp,0xc
c002d1a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d1a5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002d1ab:	85 c0                	test   eax,eax
c002d1ad:	74 0c                	je     c002d1bb <SATAPI::close(int, int, void*)+0x1d>
c002d1af:	83 ec 0c             	sub    esp,0xc
c002d1b2:	8b 10                	mov    edx,DWORD PTR [eax]
c002d1b4:	50                   	push   eax
c002d1b5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002d1b8:	83 c4 10             	add    esp,0x10
c002d1bb:	31 c0                	xor    eax,eax
c002d1bd:	83 c4 0c             	add    esp,0xc
c002d1c0:	c3                   	ret    
c002d1c1:	90                   	nop

c002d1c2 <SATAPI::SATAPI()>:
c002d1c2:	83 ec 0c             	sub    esp,0xc
c002d1c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d1c9:	83 ec 04             	sub    esp,0x4
c002d1cc:	68 00 08 00 00       	push   0x800
c002d1d1:	68 04 38 03 c0       	push   0xc0033804
c002d1d6:	50                   	push   eax
c002d1d7:	e8 1e e4 fe ff       	call   c001b5fa <PhysicalDisk::PhysicalDisk(char const*, int)>
c002d1dc:	83 c4 10             	add    esp,0x10
c002d1df:	ba f8 38 03 c0       	mov    edx,0xc00338f8
c002d1e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d1e8:	89 10                	mov    DWORD PTR [eax],edx
c002d1ea:	90                   	nop
c002d1eb:	83 c4 0c             	add    esp,0xc
c002d1ee:	c3                   	ret    
c002d1ef:	90                   	nop

c002d1f0 <SATAPI::diskRemoved()>:
c002d1f0:	c3                   	ret    
c002d1f1:	90                   	nop

c002d1f2 <SATAPI::diskInserted()>:
c002d1f2:	83 ec 18             	sub    esp,0x18
c002d1f5:	68 10 38 03 c0       	push   0xc0033810
c002d1fa:	e8 96 bf fe ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c002d1ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d203:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c002d20a:	83 c4 1c             	add    esp,0x1c
c002d20d:	c3                   	ret    

c002d20e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002d20e:	55                   	push   ebp
c002d20f:	57                   	push   edi
c002d210:	56                   	push   esi
c002d211:	53                   	push   ebx
c002d212:	83 ec 34             	sub    esp,0x34
c002d215:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002d219:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002d21d:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c002d221:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002d225:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002d229:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002d22f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002d235:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002d239:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c002d23f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002d243:	83 c0 02             	add    eax,0x2
c002d246:	c1 e0 07             	shl    eax,0x7
c002d249:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002d24d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002d251:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d255:	c1 e0 07             	shl    eax,0x7
c002d258:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002d25c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002d260:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002d26a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d26e:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d274:	e8 cb e4 ff ff       	call   c002b744 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002d279:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002d27d:	83 c4 10             	add    esp,0x10
c002d280:	b8 01 00 00 00       	mov    eax,0x1
c002d285:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002d28a:	0f 84 53 02 00 00    	je     c002d4e3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c002d290:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002d296:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002d29a:	8b 00                	mov    eax,DWORD PTR [eax]
c002d29c:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002d2a2:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002d2a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002d2ac:	c1 e1 05             	shl    ecx,0x5
c002d2af:	01 c8                	add    eax,ecx
c002d2b1:	8b 08                	mov    ecx,DWORD PTR [eax]
c002d2b3:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002d2b9:	81 c9 25 00 01 00    	or     ecx,0x10025
c002d2bf:	89 08                	mov    DWORD PTR [eax],ecx
c002d2c1:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002d2c7:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002d2cd:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002d2d3:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002d2d6:	8d 7b 40             	lea    edi,[ebx+0x40]
c002d2d9:	50                   	push   eax
c002d2da:	68 90 00 00 00       	push   0x90
c002d2df:	6a 00                	push   0x0
c002d2e1:	53                   	push   ebx
c002d2e2:	e8 09 32 fd ff       	call   c00004f0 <memset>
c002d2e7:	b9 0c 00 00 00       	mov    ecx,0xc
c002d2ec:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c002d2f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d2f2:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c002d2f8:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002d2fc:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002d302:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002d306:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002d30a:	48                   	dec    eax
c002d30b:	25 ff ff 3f 00       	and    eax,0x3fffff
c002d310:	89 c1                	mov    ecx,eax
c002d312:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002d318:	25 00 00 c0 ff       	and    eax,0xffc00000
c002d31d:	09 c8                	or     eax,ecx
c002d31f:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002d325:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c002d32b:	83 c8 80             	or     eax,0xffffff80
c002d32e:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c002d334:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002d337:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002d33b:	25 00 7f 00 00       	and    eax,0x7f00
c002d340:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c002d344:	0d 27 80 ff ff       	or     eax,0xffff8027
c002d349:	66 89 03             	mov    WORD PTR [ebx],ax
c002d34c:	89 d0                	mov    eax,edx
c002d34e:	c1 ea 18             	shr    edx,0x18
c002d351:	c1 e8 10             	shr    eax,0x10
c002d354:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c002d357:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002d35a:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002d35e:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002d361:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002d365:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002d368:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002d36c:	83 c4 10             	add    esp,0x10
c002d36f:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002d373:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002d377:	31 c0                	xor    eax,eax
c002d379:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002d37f:	80 e1 88             	and    cl,0x88
c002d382:	74 0a                	je     c002d38e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c002d384:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d389:	74 0a                	je     c002d395 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c002d38b:	40                   	inc    eax
c002d38c:	eb eb                	jmp    c002d379 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c002d38e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d393:	75 43                	jne    c002d3d8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c002d395:	83 ec 0c             	sub    esp,0xc
c002d398:	68 28 38 03 c0       	push   0xc0033828
c002d39d:	e8 f3 bd fe ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c002d3a2:	58                   	pop    eax
c002d3a3:	5a                   	pop    edx
c002d3a4:	68 3d 38 03 c0       	push   0xc003383d
c002d3a9:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002d3af:	e8 42 9f fe ff       	call   c00172f6 <VgaText::puts(char const*)>
c002d3b4:	59                   	pop    ecx
c002d3b5:	5b                   	pop    ebx
c002d3b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d3ba:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d3c0:	e8 19 e4 ff ff       	call   c002b7de <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002d3c5:	5e                   	pop    esi
c002d3c6:	5f                   	pop    edi
c002d3c7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d3cb:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d3d1:	e8 e8 e3 ff ff       	call   c002b7be <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002d3d6:	eb 48                	jmp    c002d420 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c002d3d8:	be 01 00 00 00       	mov    esi,0x1
c002d3dd:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002d3e1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002d3e5:	d3 e6                	shl    esi,cl
c002d3e7:	c1 e7 07             	shl    edi,0x7
c002d3ea:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c002d3f0:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c002d3f5:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c002d3f9:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c002d3ff:	85 c6                	test   esi,eax
c002d401:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c002d407:	0f 84 a3 00 00 00    	je     c002d4b0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c002d40d:	0f ba e0 1e          	bt     eax,0x1e
c002d411:	73 1a                	jae    c002d42d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c002d413:	83 ec 0c             	sub    esp,0xc
c002d416:	68 4f 38 03 c0       	push   0xc003384f
c002d41b:	e8 75 bd fe ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c002d420:	83 c4 10             	add    esp,0x10
c002d423:	b8 01 00 00 00       	mov    eax,0x1
c002d428:	e9 b6 00 00 00       	jmp    c002d4e3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c002d42d:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c002d433:	83 f8 0d             	cmp    eax,0xd
c002d436:	77 0a                	ja     c002d442 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c002d438:	83 ec 0c             	sub    esp,0xc
c002d43b:	68 c8 00 00 00       	push   0xc8
c002d440:	eb 28                	jmp    c002d46a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c002d442:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c002d448:	83 f8 0d             	cmp    eax,0xd
c002d44b:	77 0a                	ja     c002d457 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c002d44d:	83 ec 0c             	sub    esp,0xc
c002d450:	68 58 02 00 00       	push   0x258
c002d455:	eb 13                	jmp    c002d46a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c002d457:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c002d45d:	83 f8 06             	cmp    eax,0x6
c002d460:	77 10                	ja     c002d472 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c002d462:	83 ec 0c             	sub    esp,0xc
c002d465:	68 dc 05 00 00       	push   0x5dc
c002d46a:	e8 c5 7e ff ff       	call   c0025334 <milliTenthSleep(unsigned int)>
c002d46f:	83 c4 10             	add    esp,0x10
c002d472:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002d476:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c002d479:	75 06                	jne    c002d481 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c002d47b:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c002d47f:	74 15                	je     c002d496 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c002d481:	83 fb 06             	cmp    ebx,0x6
c002d484:	77 10                	ja     c002d496 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c002d486:	83 ec 0c             	sub    esp,0xc
c002d489:	68 c4 09 00 00       	push   0x9c4
c002d48e:	e8 a1 7e ff ff       	call   c0025334 <milliTenthSleep(unsigned int)>
c002d493:	83 c4 10             	add    esp,0x10
c002d496:	43                   	inc    ebx
c002d497:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c002d49d:	0f 85 56 ff ff ff    	jne    c002d3f9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c002d4a3:	83 ec 0c             	sub    esp,0xc
c002d4a6:	68 62 38 03 c0       	push   0xc0033862
c002d4ab:	e9 6b ff ff ff       	jmp    c002d41b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c002d4b0:	0f ba e0 1e          	bt     eax,0x1e
c002d4b4:	73 0d                	jae    c002d4c3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c002d4b6:	83 ec 0c             	sub    esp,0xc
c002d4b9:	68 76 38 03 c0       	push   0xc0033876
c002d4be:	e9 58 ff ff ff       	jmp    c002d41b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c002d4c3:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c002d4c8:	74 17                	je     c002d4e1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c002d4ca:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c002d4cf:	74 10                	je     c002d4e1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c002d4d1:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c002d4d7:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002d4db:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c002d4df:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d4e1:	31 c0                	xor    eax,eax
c002d4e3:	83 c4 2c             	add    esp,0x2c
c002d4e6:	5b                   	pop    ebx
c002d4e7:	5e                   	pop    esi
c002d4e8:	5f                   	pop    edi
c002d4e9:	5d                   	pop    ebp
c002d4ea:	c3                   	ret    
c002d4eb:	90                   	nop

c002d4ec <SATAPI::eject()>:
c002d4ec:	57                   	push   edi
c002d4ed:	b9 03 00 00 00       	mov    ecx,0x3
c002d4f2:	83 ec 18             	sub    esp,0x18
c002d4f5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002d4f9:	fc                   	cld    
c002d4fa:	31 c0                	xor    eax,eax
c002d4fc:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d4fe:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002d503:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002d508:	50                   	push   eax
c002d509:	6a 00                	push   0x0
c002d50b:	6a 00                	push   0x0
c002d50d:	6a 00                	push   0x0
c002d50f:	6a 00                	push   0x0
c002d511:	6a 02                	push   0x2
c002d513:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002d517:	50                   	push   eax
c002d518:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002d51c:	e8 ed fc ff ff       	call   c002d20e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d521:	31 c0                	xor    eax,eax
c002d523:	83 c4 38             	add    esp,0x38
c002d526:	5f                   	pop    edi
c002d527:	c3                   	ret    

c002d528 <SATAPI::detectMedia()>:
c002d528:	53                   	push   ebx
c002d529:	83 ec 14             	sub    esp,0x14
c002d52c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002d530:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002d536:	e8 31 fa fe ff       	call   c001cf6c <VCache::writeWriteBuffer()>
c002d53b:	59                   	pop    ecx
c002d53c:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002d542:	e8 15 fa fe ff       	call   c001cf5c <VCache::invalidateReadBuffer()>
c002d547:	c7 04 24 8b 38 03 c0 	mov    DWORD PTR [esp],0xc003388b
c002d54e:	e8 42 bc fe ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c002d553:	83 c4 10             	add    esp,0x10
c002d556:	31 c0                	xor    eax,eax
c002d558:	8b 14 85 80 f3 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc0c80]
c002d55f:	85 d2                	test   edx,edx
c002d561:	74 0f                	je     c002d572 <SATAPI::detectMedia()+0x4a>
c002d563:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c002d569:	75 07                	jne    c002d572 <SATAPI::detectMedia()+0x4a>
c002d56b:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c002d572:	40                   	inc    eax
c002d573:	83 f8 1a             	cmp    eax,0x1a
c002d576:	75 e0                	jne    c002d558 <SATAPI::detectMedia()+0x30>
c002d578:	83 c4 08             	add    esp,0x8
c002d57b:	5b                   	pop    ebx
c002d57c:	c3                   	ret    
c002d57d:	90                   	nop

c002d57e <SATAPI::open(int, int, void*)>:
c002d57e:	56                   	push   esi
c002d57f:	53                   	push   ebx
c002d580:	51                   	push   ecx
c002d581:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002d585:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002d589:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002d593:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002d599:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002d5a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d5a7:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002d5b1:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002d5b7:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002d5be:	e8 4c 90 fe ff       	call   c001660f <Phys::allocatePage()>
c002d5c3:	89 c6                	mov    esi,eax
c002d5c5:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002d5cb:	81 c6 00 10 00 00    	add    esi,0x1000
c002d5d1:	e8 39 90 fe ff       	call   c001660f <Phys::allocatePage()>
c002d5d6:	39 c6                	cmp    esi,eax
c002d5d8:	74 10                	je     c002d5ea <SATAPI::open(int, int, void*)+0x6c>
c002d5da:	83 ec 0c             	sub    esp,0xc
c002d5dd:	68 a0 38 03 c0       	push   0xc00338a0
c002d5e2:	e8 c7 2b ff ff       	call   c00201ae <KePanic(char const*)>
c002d5e7:	83 c4 10             	add    esp,0x10
c002d5ea:	83 ec 0c             	sub    esp,0xc
c002d5ed:	6a 02                	push   0x2
c002d5ef:	e8 69 a8 fe ff       	call   c0017e5d <Virt::allocateKernelVirtualPages(int)>
c002d5f4:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c002d5fa:	6a 03                	push   0x3
c002d5fc:	50                   	push   eax
c002d5fd:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002d603:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002d609:	e8 62 af fe ff       	call   c0018570 <VAS::mapPage(unsigned long, unsigned long, int)>
c002d60e:	83 c4 14             	add    esp,0x14
c002d611:	68 78 01 00 00       	push   0x178
c002d616:	e8 eb 8c fe ff       	call   c0016306 <malloc>
c002d61b:	83 c4 0c             	add    esp,0xc
c002d61e:	89 c6                	mov    esi,eax
c002d620:	6a 00                	push   0x0
c002d622:	68 ff ff ff 7f       	push   0x7fffffff
c002d627:	6a 00                	push   0x0
c002d629:	6a 00                	push   0x0
c002d62b:	53                   	push   ebx
c002d62c:	68 b6 38 03 c0       	push   0xc00338b6
c002d631:	50                   	push   eax
c002d632:	e8 95 ed fe ff       	call   c001c3cc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002d637:	83 c4 14             	add    esp,0x14
c002d63a:	56                   	push   esi
c002d63b:	e8 4c ee fe ff       	call   c001c48c <LogicalDisk::assignDriveLetter()>
c002d640:	5a                   	pop    edx
c002d641:	0f be c0             	movsx  eax,al
c002d644:	59                   	pop    ecx
c002d645:	50                   	push   eax
c002d646:	68 fc 36 03 c0       	push   0xc00336fc
c002d64b:	e8 45 bb fe ff       	call   c0019195 <Dbg::kprintf(char const*, ...)>
c002d650:	58                   	pop    eax
c002d651:	5a                   	pop    edx
c002d652:	56                   	push   esi
c002d653:	53                   	push   ebx
c002d654:	e8 bd db fe ff       	call   c001b216 <Device::addChild(Device*)>
c002d659:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c002d65f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d662:	e8 fb df fe ff       	call   c001b662 <PhysicalDisk::startCache()>
c002d667:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002d66e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d671:	e8 b2 fe ff ff       	call   c002d528 <SATAPI::detectMedia()>
c002d676:	83 c4 14             	add    esp,0x14
c002d679:	31 c0                	xor    eax,eax
c002d67b:	5b                   	pop    ebx
c002d67c:	5e                   	pop    esi
c002d67d:	c3                   	ret    

c002d67e <SATAPI::read(unsigned long long, int, void*)>:
c002d67e:	57                   	push   edi
c002d67f:	56                   	push   esi
c002d680:	53                   	push   ebx
c002d681:	83 ec 30             	sub    esp,0x30
c002d684:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002d688:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c002d68c:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c002d690:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002d694:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002d698:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002d69c:	83 fe 04             	cmp    esi,0x4
c002d69f:	7e 10                	jle    c002d6b1 <SATAPI::read(unsigned long long, int, void*)+0x33>
c002d6a1:	83 ec 0c             	sub    esp,0xc
c002d6a4:	68 c4 38 03 c0       	push   0xc00338c4
c002d6a9:	e8 00 2b ff ff       	call   c00201ae <KePanic(char const*)>
c002d6ae:	83 c4 10             	add    esp,0x10
c002d6b1:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002d6b7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002d6bd:	51                   	push   ecx
c002d6be:	50                   	push   eax
c002d6bf:	83 c0 02             	add    eax,0x2
c002d6c2:	c1 e0 07             	shl    eax,0x7
c002d6c5:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c002d6cb:	50                   	push   eax
c002d6cc:	52                   	push   edx
c002d6cd:	e8 36 e1 ff ff       	call   c002b808 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002d6d2:	8d 7c 24 28          	lea    edi,[esp+0x28]
c002d6d6:	b9 03 00 00 00       	mov    ecx,0x3
c002d6db:	fc                   	cld    
c002d6dc:	31 c0                	xor    eax,eax
c002d6de:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d6e0:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c002d6e5:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c002d6ea:	83 c4 0c             	add    esp,0xc
c002d6ed:	6a 00                	push   0x0
c002d6ef:	6a 00                	push   0x0
c002d6f1:	6a 00                	push   0x0
c002d6f3:	6a 00                	push   0x0
c002d6f5:	6a 02                	push   0x2
c002d6f7:	8d 44 24 30          	lea    eax,[esp+0x30]
c002d6fb:	50                   	push   eax
c002d6fc:	53                   	push   ebx
c002d6fd:	e8 0c fb ff ff       	call   c002d20e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d702:	83 c4 20             	add    esp,0x20
c002d705:	85 c0                	test   eax,eax
c002d707:	75 44                	jne    c002d74d <SATAPI::read(unsigned long long, int, void*)+0xcf>
c002d709:	8d 7c 24 24          	lea    edi,[esp+0x24]
c002d70d:	b9 03 00 00 00       	mov    ecx,0x3
c002d712:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d714:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002d718:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c002d71d:	0f c8                	bswap  eax
c002d71f:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c002d723:	89 f0                	mov    eax,esi
c002d725:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002d729:	50                   	push   eax
c002d72a:	56                   	push   esi
c002d72b:	c1 e6 0b             	shl    esi,0xb
c002d72e:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002d732:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002d736:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002d73a:	56                   	push   esi
c002d73b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c002d73f:	50                   	push   eax
c002d740:	53                   	push   ebx
c002d741:	e8 c8 fa ff ff       	call   c002d20e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d746:	83 c4 20             	add    esp,0x20
c002d749:	85 c0                	test   eax,eax
c002d74b:	74 14                	je     c002d761 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c002d74d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002d751:	83 ec 0c             	sub    esp,0xc
c002d754:	53                   	push   ebx
c002d755:	e8 ce fd ff ff       	call   c002d528 <SATAPI::detectMedia()>
c002d75a:	83 c4 10             	add    esp,0x10
c002d75d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002d761:	83 c4 30             	add    esp,0x30
c002d764:	5b                   	pop    ebx
c002d765:	5e                   	pop    esi
c002d766:	5f                   	pop    edi
c002d767:	c3                   	ret    

c002d768 <IOAPIC::close(int, int, void*)>:
c002d768:	b8 00 00 00 00       	mov    eax,0x0
c002d76d:	c3                   	ret    

c002d76e <apicGetBase()>:
c002d76e:	55                   	push   ebp
c002d76f:	89 e5                	mov    ebp,esp
c002d771:	83 ec 18             	sub    esp,0x18
c002d774:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002d779:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c002d77f:	83 e0 08             	and    eax,0x8
c002d782:	0f b6 c0             	movzx  eax,al
c002d785:	85 c0                	test   eax,eax
c002d787:	75 07                	jne    c002d790 <apicGetBase()+0x22>
c002d789:	b8 00 00 00 00       	mov    eax,0x0
c002d78e:	eb 21                	jmp    c002d7b1 <apicGetBase()+0x43>
c002d790:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002d795:	83 ec 08             	sub    esp,0x8
c002d798:	6a 1b                	push   0x1b
c002d79a:	50                   	push   eax
c002d79b:	e8 70 81 fe ff       	call   c0015910 <Computer::rdmsr(unsigned int)>
c002d7a0:	83 c4 10             	add    esp,0x10
c002d7a3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002d7a6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002d7a9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d7ac:	25 00 00 ff ff       	and    eax,0xffff0000
c002d7b1:	c9                   	leave  
c002d7b2:	c3                   	ret    
c002d7b3:	90                   	nop

c002d7b4 <IOAPIC::IOAPIC()>:
c002d7b4:	83 ec 0c             	sub    esp,0xc
c002d7b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d7bb:	83 ec 08             	sub    esp,0x8
c002d7be:	68 28 39 03 c0       	push   0xc0033928
c002d7c3:	50                   	push   eax
c002d7c4:	e8 af db fe ff       	call   c001b378 <Device::Device(char const*)>
c002d7c9:	83 c4 10             	add    esp,0x10
c002d7cc:	ba 38 39 03 c0       	mov    edx,0xc0033938
c002d7d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d7d5:	89 10                	mov    DWORD PTR [eax],edx
c002d7d7:	90                   	nop
c002d7d8:	83 c4 0c             	add    esp,0xc
c002d7db:	c3                   	ret    

c002d7dc <apicOpen()>:
c002d7dc:	55                   	push   ebp
c002d7dd:	89 e5                	mov    ebp,esp
c002d7df:	53                   	push   ebx
c002d7e0:	83 ec 34             	sub    esp,0x34
c002d7e3:	a0 00 0c 04 c0       	mov    al,ds:0xc0040c00
c002d7e8:	83 f0 01             	xor    eax,0x1
c002d7eb:	0f b6 c0             	movzx  eax,al
c002d7ee:	85 c0                	test   eax,eax
c002d7f0:	0f 84 a3 00 00 00    	je     c002d899 <apicOpen()+0xbd>
c002d7f6:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c002d7fa:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c002d7ff:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002d803:	0f b6 c0             	movzx  eax,al
c002d806:	39 c2                	cmp    edx,eax
c002d808:	0f 83 84 00 00 00    	jae    c002d892 <apicOpen()+0xb6>
c002d80e:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c002d815:	83 ec 0c             	sub    esp,0xc
c002d818:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002d81b:	e8 e6 8a fe ff       	call   c0016306 <malloc>
c002d820:	83 c4 10             	add    esp,0x10
c002d823:	89 c3                	mov    ebx,eax
c002d825:	83 ec 0c             	sub    esp,0xc
c002d828:	53                   	push   ebx
c002d829:	e8 86 ff ff ff       	call   c002d7b4 <IOAPIC::IOAPIC()>
c002d82e:	83 c4 10             	add    esp,0x10
c002d831:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002d834:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c002d838:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002d83b:	89 14 85 e0 0b 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf420],edx
c002d842:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c002d847:	83 c0 01             	add    eax,0x1
c002d84a:	a3 c0 0b 04 c0       	mov    ds:0xc0040bc0,eax
c002d84f:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002d854:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c002d85a:	83 ec 08             	sub    esp,0x8
c002d85d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002d860:	50                   	push   eax
c002d861:	e8 b0 d9 fe ff       	call   c001b216 <Device::addChild(Device*)>
c002d866:	83 c4 10             	add    esp,0x10
c002d869:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002d86c:	8b 00                	mov    eax,DWORD PTR [eax]
c002d86e:	83 c0 08             	add    eax,0x8
c002d871:	8b 00                	mov    eax,DWORD PTR [eax]
c002d873:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002d877:	6a 00                	push   0x0
c002d879:	6a 00                	push   0x0
c002d87b:	52                   	push   edx
c002d87c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002d87f:	ff d0                	call   eax
c002d881:	83 c4 10             	add    esp,0x10
c002d884:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c002d887:	83 c0 01             	add    eax,0x1
c002d88a:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c002d88d:	e9 68 ff ff ff       	jmp    c002d7fa <apicOpen()+0x1e>
c002d892:	c6 05 00 0c 04 c0 01 	mov    BYTE PTR ds:0xc0040c00,0x1
c002d899:	e8 d0 fe ff ff       	call   c002d76e <apicGetBase()>
c002d89e:	05 f0 00 00 00       	add    eax,0xf0
c002d8a3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002d8a6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002d8a9:	8b 00                	mov    eax,DWORD PTR [eax]
c002d8ab:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002d8ae:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c002d8b5:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c002d8bc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002d8bf:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002d8c2:	89 10                	mov    DWORD PTR [eax],edx
c002d8c4:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c002d8cb:	a1 30 f6 03 c0       	mov    eax,ds:0xc003f630
c002d8d0:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c002d8d3:	7d 7c                	jge    c002d951 <apicOpen()+0x175>
c002d8d5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d8d8:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002d8df:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c002d8e2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d8e5:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002d8ec:	c1 e8 08             	shr    eax,0x8
c002d8ef:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c002d8f3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d8f6:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002d8fd:	c1 e8 18             	shr    eax,0x18
c002d900:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c002d903:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c002d907:	3d ff 00 00 00       	cmp    eax,0xff
c002d90c:	75 3a                	jne    c002d948 <apicOpen()+0x16c>
c002d90e:	e8 5b fe ff ff       	call   c002d76e <apicGetBase()>
c002d913:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c002d917:	83 fa 01             	cmp    edx,0x1
c002d91a:	75 07                	jne    c002d923 <apicOpen()+0x147>
c002d91c:	ba 60 03 00 00       	mov    edx,0x360
c002d921:	eb 05                	jmp    c002d928 <apicOpen()+0x14c>
c002d923:	ba 50 03 00 00       	mov    edx,0x350
c002d928:	01 d0                	add    eax,edx
c002d92a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002d92d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002d930:	8b 00                	mov    eax,DWORD PTR [eax]
c002d932:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002d935:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c002d93c:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c002d940:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002d943:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002d946:	89 10                	mov    DWORD PTR [eax],edx
c002d948:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c002d94c:	e9 7a ff ff ff       	jmp    c002d8cb <apicOpen()+0xef>
c002d951:	90                   	nop
c002d952:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002d955:	c9                   	leave  
c002d956:	c3                   	ret    
c002d957:	90                   	nop

c002d958 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002d958:	55                   	push   ebp
c002d959:	89 e5                	mov    ebp,esp
c002d95b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d95e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002d964:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002d967:	72 1d                	jb     c002d986 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002d969:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d96c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002d972:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d975:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002d97b:	01 d0                	add    eax,edx
c002d97d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002d980:	73 04                	jae    c002d986 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002d982:	b0 01                	mov    al,0x1
c002d984:	eb 02                	jmp    c002d988 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002d986:	b0 00                	mov    al,0x0
c002d988:	5d                   	pop    ebp
c002d989:	c3                   	ret    

c002d98a <IOAPIC::read(int)>:
c002d98a:	55                   	push   ebp
c002d98b:	89 e5                	mov    ebp,esp
c002d98d:	83 ec 10             	sub    esp,0x10
c002d990:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d993:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002d999:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002d99c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002d99f:	0f b6 d0             	movzx  edx,al
c002d9a2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002d9a5:	89 10                	mov    DWORD PTR [eax],edx
c002d9a7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002d9aa:	83 c0 10             	add    eax,0x10
c002d9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c002d9af:	c9                   	leave  
c002d9b0:	c3                   	ret    
c002d9b1:	90                   	nop

c002d9b2 <IOAPIC::open(int, int, void*)>:
c002d9b2:	55                   	push   ebp
c002d9b3:	89 e5                	mov    ebp,esp
c002d9b5:	57                   	push   edi
c002d9b6:	56                   	push   esi
c002d9b7:	53                   	push   ebx
c002d9b8:	83 ec 04             	sub    esp,0x4
c002d9bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d9be:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002d9c1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002d9c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d9ca:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002d9d0:	8b 14 85 20 f7 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc08e0]
c002d9d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d9da:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002d9e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d9e3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002d9e9:	8b 14 85 a0 f7 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc0860]
c002d9f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d9f3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002d9f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d9fc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002da02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da05:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002da0b:	0f b6 f0             	movzx  esi,al
c002da0e:	89 d0                	mov    eax,edx
c002da10:	ba 00 00 00 00       	mov    edx,0x0
c002da15:	89 c7                	mov    edi,eax
c002da17:	83 e7 ff             	and    edi,0xffffffff
c002da1a:	89 f9                	mov    ecx,edi
c002da1c:	0f b6 da             	movzx  ebx,dl
c002da1f:	89 c8                	mov    eax,ecx
c002da21:	89 da                	mov    edx,ebx
c002da23:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002da26:	8d 5e 08             	lea    ebx,[esi+0x8]
c002da29:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002da2d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002da31:	83 e0 00             	and    eax,0x0
c002da34:	09 d0                	or     eax,edx
c002da36:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002da3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da3d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002da43:	8d 50 01             	lea    edx,[eax+0x1]
c002da46:	88 d1                	mov    cl,dl
c002da48:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002da4b:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c002da51:	0f b6 d0             	movzx  edx,al
c002da54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da57:	83 c2 08             	add    edx,0x8
c002da5a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002da5e:	0f b6 c9             	movzx  ecx,cl
c002da61:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002da67:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002da6b:	6a 01                	push   0x1
c002da6d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002da70:	e8 15 ff ff ff       	call   c002d98a <IOAPIC::read(int)>
c002da75:	83 c4 08             	add    esp,0x8
c002da78:	c1 f8 10             	sar    eax,0x10
c002da7b:	0f b6 c0             	movzx  eax,al
c002da7e:	8d 50 01             	lea    edx,[eax+0x1]
c002da81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da84:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002da8a:	b8 00 00 00 00       	mov    eax,0x0
c002da8f:	8d 65 f4             	lea    esp,[ebp-0xc]
c002da92:	5b                   	pop    ebx
c002da93:	5e                   	pop    esi
c002da94:	5f                   	pop    edi
c002da95:	5d                   	pop    ebp
c002da96:	c3                   	ret    
c002da97:	90                   	nop

c002da98 <IOAPIC::write(int, int)>:
c002da98:	55                   	push   ebp
c002da99:	89 e5                	mov    ebp,esp
c002da9b:	83 ec 10             	sub    esp,0x10
c002da9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002daa1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002daa7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002daaa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002daad:	0f b6 d0             	movzx  edx,al
c002dab0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002dab3:	89 10                	mov    DWORD PTR [eax],edx
c002dab5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002dab8:	8d 50 10             	lea    edx,[eax+0x10]
c002dabb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002dabe:	89 02                	mov    DWORD PTR [edx],eax
c002dac0:	90                   	nop
c002dac1:	c9                   	leave  
c002dac2:	c3                   	ret    
c002dac3:	90                   	nop

c002dac4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002dac4:	55                   	push   ebp
c002dac5:	89 e5                	mov    ebp,esp
c002dac7:	53                   	push   ebx
c002dac8:	83 ec 2c             	sub    esp,0x2c
c002dacb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002dace:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002dad1:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002dad4:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002dad7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002dada:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002dadd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002dae0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002dae3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002dae6:	88 d8                	mov    al,bl
c002dae8:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002daeb:	88 c8                	mov    al,cl
c002daed:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002daf0:	88 d0                	mov    al,dl
c002daf2:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002daf5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002daf9:	83 c0 08             	add    eax,0x8
c002dafc:	01 c0                	add    eax,eax
c002dafe:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002db01:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002db05:	83 c0 08             	add    eax,0x8
c002db08:	01 c0                	add    eax,eax
c002db0a:	83 c0 01             	add    eax,0x1
c002db0d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002db10:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002db13:	50                   	push   eax
c002db14:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002db17:	e8 6e fe ff ff       	call   c002d98a <IOAPIC::read(int)>
c002db1c:	83 c4 08             	add    esp,0x8
c002db1f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002db22:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002db29:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002db2c:	c1 e0 18             	shl    eax,0x18
c002db2f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002db32:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002db35:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002db38:	52                   	push   edx
c002db39:	50                   	push   eax
c002db3a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002db3d:	e8 56 ff ff ff       	call   c002da98 <IOAPIC::write(int, int)>
c002db42:	83 c4 0c             	add    esp,0xc
c002db45:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002db48:	50                   	push   eax
c002db49:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002db4c:	e8 39 fe ff ff       	call   c002d98a <IOAPIC::read(int)>
c002db51:	83 c4 08             	add    esp,0x8
c002db54:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002db57:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002db5e:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002db65:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002db6c:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c002db70:	85 c0                	test   eax,eax
c002db72:	74 09                	je     c002db7d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c002db74:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002db7b:	eb 07                	jmp    c002db84 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c002db7d:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002db84:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c002db88:	85 c0                	test   eax,eax
c002db8a:	74 09                	je     c002db95 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c002db8c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002db93:	eb 07                	jmp    c002db9c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c002db95:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002db9c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002dba3:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002dba7:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002dbaa:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002dbad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dbb0:	52                   	push   edx
c002dbb1:	50                   	push   eax
c002dbb2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dbb5:	e8 de fe ff ff       	call   c002da98 <IOAPIC::write(int, int)>
c002dbba:	83 c4 0c             	add    esp,0xc
c002dbbd:	90                   	nop
c002dbbe:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002dbc1:	c9                   	leave  
c002dbc2:	c3                   	ret    
c002dbc3:	90                   	nop

c002dbc4 <APICTimer::close(int, int, void*)>:
c002dbc4:	b8 00 00 00 00       	mov    eax,0x0
c002dbc9:	c3                   	ret    
c002dbca:	66 90                	xchg   ax,ax

c002dbcc <apicTimerHandler(regs*, void*)>:
c002dbcc:	83 ec 0c             	sub    esp,0xc
c002dbcf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002dbd3:	8b 08                	mov    ecx,DWORD PTR [eax]
c002dbd5:	b8 10 27 00 00       	mov    eax,0x2710
c002dbda:	ba 00 00 00 00       	mov    edx,0x0
c002dbdf:	f7 f1                	div    ecx
c002dbe1:	83 ec 0c             	sub    esp,0xc
c002dbe4:	50                   	push   eax
c002dbe5:	e8 9e f0 fe ff       	call   c001cc88 <timerHandler(unsigned int)>
c002dbea:	83 c4 10             	add    esp,0x10
c002dbed:	90                   	nop
c002dbee:	83 c4 0c             	add    esp,0xc
c002dbf1:	c3                   	ret    
c002dbf2:	66 90                	xchg   ax,ax

c002dbf4 <APICTimer::open(int, int, void*)>:
c002dbf4:	83 ec 0c             	sub    esp,0xc
c002dbf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dbfb:	8b 00                	mov    eax,DWORD PTR [eax]
c002dbfd:	83 c0 24             	add    eax,0x24
c002dc00:	8b 00                	mov    eax,DWORD PTR [eax]
c002dc02:	83 ec 08             	sub    esp,0x8
c002dc05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002dc09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002dc0d:	ff d0                	call   eax
c002dc0f:	83 c4 10             	add    esp,0x10
c002dc12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dc16:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002dc1a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002dc20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dc24:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002dc28:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002dc2e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002dc32:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002dc38:	83 ec 0c             	sub    esp,0xc
c002dc3b:	51                   	push   ecx
c002dc3c:	6a 01                	push   0x1
c002dc3e:	68 cc db 02 c0       	push   0xc002dbcc
c002dc43:	52                   	push   edx
c002dc44:	50                   	push   eax
c002dc45:	e8 78 d5 fe ff       	call   c001b1c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002dc4a:	83 c4 20             	add    esp,0x20
c002dc4d:	89 c2                	mov    edx,eax
c002dc4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dc53:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002dc59:	b8 00 00 00 00       	mov    eax,0x0
c002dc5e:	83 c4 0c             	add    esp,0xc
c002dc61:	c3                   	ret    
c002dc62:	66 90                	xchg   ax,ax

c002dc64 <APICTimer::write(int)>:
c002dc64:	83 ec 0c             	sub    esp,0xc
c002dc67:	83 ec 0c             	sub    esp,0xc
c002dc6a:	68 5c 39 03 c0       	push   0xc003395c
c002dc6f:	e8 3a 25 ff ff       	call   c00201ae <KePanic(char const*)>
c002dc74:	83 c4 10             	add    esp,0x10
c002dc77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dc7b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002dc7f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002dc85:	90                   	nop
c002dc86:	83 c4 0c             	add    esp,0xc
c002dc89:	c3                   	ret    
c002dc8a:	66 90                	xchg   ax,ax

c002dc8c <APICTimer::APICTimer()>:
c002dc8c:	83 ec 0c             	sub    esp,0xc
c002dc8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dc93:	83 ec 08             	sub    esp,0x8
c002dc96:	68 6c 39 03 c0       	push   0xc003396c
c002dc9b:	50                   	push   eax
c002dc9c:	e8 1b ef fe ff       	call   c001cbbc <Timer::Timer(char const*)>
c002dca1:	83 c4 10             	add    esp,0x10
c002dca4:	ba 80 39 03 c0       	mov    edx,0xc0033980
c002dca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dcad:	89 10                	mov    DWORD PTR [eax],edx
c002dcaf:	90                   	nop
c002dcb0:	83 c4 0c             	add    esp,0xc
c002dcb3:	c3                   	ret    

c002dcb4 <PIT::write(int)>:
c002dcb4:	83 ec 10             	sub    esp,0x10
c002dcb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002dcbb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002dcbf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002dcc5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002dcc9:	a3 04 0c 04 c0       	mov    ds:0xc0040c04,eax
c002dcce:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002dcd3:	89 c2                	mov    edx,eax
c002dcd5:	c1 fa 1f             	sar    edx,0x1f
c002dcd8:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002dcdc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002dce0:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002dce7:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002dcec:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002dcf0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002dcf5:	ee                   	out    dx,al
c002dcf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002dcfa:	0f b6 c0             	movzx  eax,al
c002dcfd:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002dd04:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002dd08:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002dd0c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002dd11:	ee                   	out    dx,al
c002dd12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002dd16:	c1 f8 08             	sar    eax,0x8
c002dd19:	0f b6 c0             	movzx  eax,al
c002dd1c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002dd23:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002dd27:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002dd2b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002dd30:	ee                   	out    dx,al
c002dd31:	90                   	nop
c002dd32:	83 c4 10             	add    esp,0x10
c002dd35:	c3                   	ret    
c002dd36:	66 90                	xchg   ax,ax

c002dd38 <pitHandler(regs*, void*)>:
c002dd38:	83 ec 0c             	sub    esp,0xc
c002dd3b:	8b 0d 04 0c 04 c0    	mov    ecx,DWORD PTR ds:0xc0040c04
c002dd41:	b8 10 27 00 00       	mov    eax,0x2710
c002dd46:	89 c2                	mov    edx,eax
c002dd48:	c1 fa 1f             	sar    edx,0x1f
c002dd4b:	f7 f9                	idiv   ecx
c002dd4d:	83 ec 0c             	sub    esp,0xc
c002dd50:	50                   	push   eax
c002dd51:	e8 32 ef fe ff       	call   c001cc88 <timerHandler(unsigned int)>
c002dd56:	83 c4 10             	add    esp,0x10
c002dd59:	90                   	nop
c002dd5a:	83 c4 0c             	add    esp,0xc
c002dd5d:	c3                   	ret    
c002dd5e:	66 90                	xchg   ax,ax

c002dd60 <PIT::open(int, int, void*)>:
c002dd60:	83 ec 0c             	sub    esp,0xc
c002dd63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dd67:	8b 00                	mov    eax,DWORD PTR [eax]
c002dd69:	83 c0 24             	add    eax,0x24
c002dd6c:	8b 00                	mov    eax,DWORD PTR [eax]
c002dd6e:	83 ec 08             	sub    esp,0x8
c002dd71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002dd75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002dd79:	ff d0                	call   eax
c002dd7b:	83 c4 10             	add    esp,0x10
c002dd7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dd82:	83 ec 0c             	sub    esp,0xc
c002dd85:	6a 00                	push   0x0
c002dd87:	6a 01                	push   0x1
c002dd89:	68 38 dd 02 c0       	push   0xc002dd38
c002dd8e:	6a 00                	push   0x0
c002dd90:	50                   	push   eax
c002dd91:	e8 2c d4 fe ff       	call   c001b1c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002dd96:	83 c4 20             	add    esp,0x20
c002dd99:	89 c2                	mov    edx,eax
c002dd9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dd9f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002dda5:	b8 00 00 00 00       	mov    eax,0x0
c002ddaa:	83 c4 0c             	add    esp,0xc
c002ddad:	c3                   	ret    
c002ddae:	66 90                	xchg   ax,ax

c002ddb0 <PIT::close(int, int, void*)>:
c002ddb0:	83 ec 0c             	sub    esp,0xc
c002ddb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ddb7:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002ddc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ddc5:	6a 01                	push   0x1
c002ddc7:	68 38 dd 02 c0       	push   0xc002dd38
c002ddcc:	6a 00                	push   0x0
c002ddce:	50                   	push   eax
c002ddcf:	e8 24 d4 fe ff       	call   c001b1f8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002ddd4:	83 c4 10             	add    esp,0x10
c002ddd7:	b8 00 00 00 00       	mov    eax,0x0
c002dddc:	83 c4 0c             	add    esp,0xc
c002dddf:	c3                   	ret    

c002dde0 <PIT::PIT()>:
c002dde0:	83 ec 0c             	sub    esp,0xc
c002dde3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dde7:	83 ec 08             	sub    esp,0x8
c002ddea:	68 a8 39 03 c0       	push   0xc00339a8
c002ddef:	50                   	push   eax
c002ddf0:	e8 c7 ed fe ff       	call   c001cbbc <Timer::Timer(char const*)>
c002ddf5:	83 c4 10             	add    esp,0x10
c002ddf8:	ba d0 39 03 c0       	mov    edx,0xc00339d0
c002ddfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de01:	89 10                	mov    DWORD PTR [eax],edx
c002de03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de07:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002de0d:	0f b6 d0             	movzx  edx,al
c002de10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de14:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002de1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de1f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002de25:	0f b6 d0             	movzx  edx,al
c002de28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de2c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002de31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de35:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002de3b:	8d 50 01             	lea    edx,[eax+0x1]
c002de3e:	88 d1                	mov    cl,dl
c002de40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002de44:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002de4a:	0f b6 d0             	movzx  edx,al
c002de4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de51:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002de55:	83 e1 3f             	and    ecx,0x3f
c002de58:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002de5c:	90                   	nop
c002de5d:	83 c4 0c             	add    esp,0xc
c002de60:	c3                   	ret    
c002de61:	66 90                	xchg   ax,ax
c002de63:	66 90                	xchg   ax,ax
c002de65:	66 90                	xchg   ax,ax
c002de67:	66 90                	xchg   ax,ax
c002de69:	66 90                	xchg   ax,ax
c002de6b:	66 90                	xchg   ax,ax
c002de6d:	66 90                	xchg   ax,ax
c002de6f:	90                   	nop

c002de70 <avxDetect>:
c002de70:	b8 01 00 00 00       	mov    eax,0x1
c002de75:	0f a2                	cpuid  
c002de77:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002de7d:	74 15                	je     c002de94 <avxDetect.noAVX>
c002de7f:	b8 01 00 00 00       	mov    eax,0x1
c002de84:	0f a2                	cpuid  
c002de86:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002de8c:	74 06                	je     c002de94 <avxDetect.noAVX>
c002de8e:	b8 01 00 00 00       	mov    eax,0x1
c002de93:	c3                   	ret    

c002de94 <avxDetect.noAVX>:
c002de94:	b8 00 00 00 00       	mov    eax,0x0
c002de99:	c3                   	ret    

c002de9a <avxSave>:
c002de9a:	53                   	push   ebx
c002de9b:	52                   	push   edx
c002de9c:	31 c0                	xor    eax,eax
c002de9e:	48                   	dec    eax
c002de9f:	89 c2                	mov    edx,eax
c002dea1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002dea5:	0f ae 23             	xsave  [ebx]
c002dea8:	5a                   	pop    edx
c002dea9:	5b                   	pop    ebx
c002deaa:	c3                   	ret    

c002deab <avxLoad>:
c002deab:	53                   	push   ebx
c002deac:	52                   	push   edx
c002dead:	31 c0                	xor    eax,eax
c002deaf:	48                   	dec    eax
c002deb0:	89 c2                	mov    edx,eax
c002deb2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002deb6:	0f ae 2b             	xrstor [ebx]
c002deb9:	5a                   	pop    edx
c002deba:	5b                   	pop    ebx
c002debb:	c3                   	ret    

c002debc <avxInit>:
c002debc:	e8 47 03 00 00       	call   c002e208 <sseInit>
c002dec1:	50                   	push   eax
c002dec2:	51                   	push   ecx
c002dec3:	0f 20 e0             	mov    eax,cr4
c002dec6:	0d 00 00 04 00       	or     eax,0x40000
c002decb:	0f 22 e0             	mov    cr4,eax
c002dece:	31 c9                	xor    ecx,ecx
c002ded0:	0f 01 d0             	xgetbv 
c002ded3:	0d 07 00 00 00       	or     eax,0x7
c002ded8:	0f 01 d1             	xsetbv 
c002dedb:	59                   	pop    ecx
c002dedc:	58                   	pop    eax
c002dedd:	c3                   	ret    

c002dede <avxClose>:
c002dede:	c3                   	ret    
c002dedf:	90                   	nop

c002dee0 <isr0>:
c002dee0:	fa                   	cli    
c002dee1:	68 00 00 00 00       	push   0x0
c002dee6:	68 00 00 00 00       	push   0x0
c002deeb:	e9 56 01 00 00       	jmp    c002e046 <int_common_stub>

c002def0 <isr1>:
c002def0:	fa                   	cli    
c002def1:	6a 00                	push   0x0
c002def3:	6a 01                	push   0x1
c002def5:	e9 4c 01 00 00       	jmp    c002e046 <int_common_stub>

c002defa <isr2>:
c002defa:	fa                   	cli    
c002defb:	6a 00                	push   0x0
c002defd:	6a 02                	push   0x2
c002deff:	e9 42 01 00 00       	jmp    c002e046 <int_common_stub>

c002df04 <isr3>:
c002df04:	fa                   	cli    
c002df05:	6a 00                	push   0x0
c002df07:	6a 03                	push   0x3
c002df09:	e9 38 01 00 00       	jmp    c002e046 <int_common_stub>

c002df0e <isr4>:
c002df0e:	fa                   	cli    
c002df0f:	6a 00                	push   0x0
c002df11:	6a 04                	push   0x4
c002df13:	e9 2e 01 00 00       	jmp    c002e046 <int_common_stub>

c002df18 <isr5>:
c002df18:	fa                   	cli    
c002df19:	6a 00                	push   0x0
c002df1b:	6a 05                	push   0x5
c002df1d:	e9 24 01 00 00       	jmp    c002e046 <int_common_stub>

c002df22 <isr6>:
c002df22:	fa                   	cli    
c002df23:	6a 00                	push   0x0
c002df25:	6a 06                	push   0x6
c002df27:	e9 1a 01 00 00       	jmp    c002e046 <int_common_stub>

c002df2c <isr7>:
c002df2c:	fa                   	cli    
c002df2d:	6a 00                	push   0x0
c002df2f:	6a 07                	push   0x7
c002df31:	e9 10 01 00 00       	jmp    c002e046 <int_common_stub>

c002df36 <isr8>:
c002df36:	fa                   	cli    
c002df37:	6a 08                	push   0x8
c002df39:	e9 08 01 00 00       	jmp    c002e046 <int_common_stub>

c002df3e <isr9>:
c002df3e:	fa                   	cli    
c002df3f:	6a 00                	push   0x0
c002df41:	6a 09                	push   0x9
c002df43:	e9 fe 00 00 00       	jmp    c002e046 <int_common_stub>

c002df48 <isr10>:
c002df48:	fa                   	cli    
c002df49:	6a 0a                	push   0xa
c002df4b:	e9 f6 00 00 00       	jmp    c002e046 <int_common_stub>

c002df50 <isr11>:
c002df50:	fa                   	cli    
c002df51:	6a 0b                	push   0xb
c002df53:	e9 ee 00 00 00       	jmp    c002e046 <int_common_stub>

c002df58 <isr12>:
c002df58:	fa                   	cli    
c002df59:	6a 0c                	push   0xc
c002df5b:	e9 e6 00 00 00       	jmp    c002e046 <int_common_stub>

c002df60 <isr13>:
c002df60:	fa                   	cli    
c002df61:	6a 0d                	push   0xd
c002df63:	53                   	push   ebx
c002df64:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002df68:	81 fb 36 e1 02 c0    	cmp    ebx,0xc002e136
c002df6e:	5b                   	pop    ebx
c002df6f:	0f 84 c3 01 00 00    	je     c002e138 <finishSignal2>
c002df75:	e9 cc 00 00 00       	jmp    c002e046 <int_common_stub>

c002df7a <isr14>:
c002df7a:	fa                   	cli    
c002df7b:	6a 0e                	push   0xe
c002df7d:	e9 c4 00 00 00       	jmp    c002e046 <int_common_stub>

c002df82 <isr15>:
c002df82:	fa                   	cli    
c002df83:	6a 00                	push   0x0
c002df85:	6a 0f                	push   0xf
c002df87:	e9 ba 00 00 00       	jmp    c002e046 <int_common_stub>

c002df8c <isr16>:
c002df8c:	fa                   	cli    
c002df8d:	6a 00                	push   0x0
c002df8f:	6a 10                	push   0x10
c002df91:	e9 b0 00 00 00       	jmp    c002e046 <int_common_stub>

c002df96 <isr17>:
c002df96:	fa                   	cli    
c002df97:	6a 00                	push   0x0
c002df99:	6a 11                	push   0x11
c002df9b:	e9 a6 00 00 00       	jmp    c002e046 <int_common_stub>

c002dfa0 <isr18>:
c002dfa0:	fa                   	cli    
c002dfa1:	6a 00                	push   0x0
c002dfa3:	6a 12                	push   0x12
c002dfa5:	e9 9c 00 00 00       	jmp    c002e046 <int_common_stub>

c002dfaa <irq3>:
c002dfaa:	fa                   	cli    
c002dfab:	6a 00                	push   0x0
c002dfad:	6a 23                	push   0x23
c002dfaf:	e9 92 00 00 00       	jmp    c002e046 <int_common_stub>

c002dfb4 <irq4>:
c002dfb4:	fa                   	cli    
c002dfb5:	6a 00                	push   0x0
c002dfb7:	6a 24                	push   0x24
c002dfb9:	e9 88 00 00 00       	jmp    c002e046 <int_common_stub>

c002dfbe <irq5>:
c002dfbe:	fa                   	cli    
c002dfbf:	6a 00                	push   0x0
c002dfc1:	6a 25                	push   0x25
c002dfc3:	e9 7e 00 00 00       	jmp    c002e046 <int_common_stub>

c002dfc8 <irq6>:
c002dfc8:	fa                   	cli    
c002dfc9:	6a 00                	push   0x0
c002dfcb:	6a 26                	push   0x26
c002dfcd:	e9 74 00 00 00       	jmp    c002e046 <int_common_stub>

c002dfd2 <irq7>:
c002dfd2:	fa                   	cli    
c002dfd3:	6a 00                	push   0x0
c002dfd5:	6a 27                	push   0x27
c002dfd7:	e9 6a 00 00 00       	jmp    c002e046 <int_common_stub>

c002dfdc <irq8>:
c002dfdc:	fa                   	cli    
c002dfdd:	6a 00                	push   0x0
c002dfdf:	6a 28                	push   0x28
c002dfe1:	e9 60 00 00 00       	jmp    c002e046 <int_common_stub>

c002dfe6 <irq9>:
c002dfe6:	fa                   	cli    
c002dfe7:	6a 00                	push   0x0
c002dfe9:	6a 29                	push   0x29
c002dfeb:	e9 56 00 00 00       	jmp    c002e046 <int_common_stub>

c002dff0 <irq10>:
c002dff0:	fa                   	cli    
c002dff1:	6a 00                	push   0x0
c002dff3:	6a 2a                	push   0x2a
c002dff5:	e9 4c 00 00 00       	jmp    c002e046 <int_common_stub>

c002dffa <irq11>:
c002dffa:	fa                   	cli    
c002dffb:	6a 00                	push   0x0
c002dffd:	6a 2b                	push   0x2b
c002dfff:	e9 42 00 00 00       	jmp    c002e046 <int_common_stub>

c002e004 <irq12>:
c002e004:	fa                   	cli    
c002e005:	6a 00                	push   0x0
c002e007:	6a 2c                	push   0x2c
c002e009:	e9 38 00 00 00       	jmp    c002e046 <int_common_stub>

c002e00e <irq13>:
c002e00e:	fa                   	cli    
c002e00f:	6a 00                	push   0x0
c002e011:	6a 2d                	push   0x2d
c002e013:	e9 2e 00 00 00       	jmp    c002e046 <int_common_stub>

c002e018 <irq14>:
c002e018:	fa                   	cli    
c002e019:	6a 00                	push   0x0
c002e01b:	6a 2e                	push   0x2e
c002e01d:	e9 24 00 00 00       	jmp    c002e046 <int_common_stub>

c002e022 <irq15>:
c002e022:	fa                   	cli    
c002e023:	6a 00                	push   0x0
c002e025:	6a 2f                	push   0x2f
c002e027:	e9 1a 00 00 00       	jmp    c002e046 <int_common_stub>

c002e02c <irq1>:
c002e02c:	fa                   	cli    
c002e02d:	6a 00                	push   0x0
c002e02f:	6a 21                	push   0x21
c002e031:	eb 13                	jmp    c002e046 <int_common_stub>

c002e033 <irq2>:
c002e033:	fa                   	cli    
c002e034:	6a 00                	push   0x0
c002e036:	6a 22                	push   0x22
c002e038:	eb 0c                	jmp    c002e046 <int_common_stub>

c002e03a <isr96>:
c002e03a:	6a 00                	push   0x0
c002e03c:	6a 60                	push   0x60
c002e03e:	fb                   	sti    
c002e03f:	eb 37                	jmp    c002e078 <syscall_common_stub>

c002e041 <irq0>:
c002e041:	fa                   	cli    
c002e042:	6a 00                	push   0x0
c002e044:	6a 20                	push   0x20

c002e046 <int_common_stub>:
c002e046:	60                   	pusha  
c002e047:	1e                   	push   ds
c002e048:	06                   	push   es
c002e049:	0f a0                	push   fs
c002e04b:	0f a8                	push   gs
c002e04d:	66 b8 10 00          	mov    ax,0x10
c002e051:	66 8e d8             	mov    ds,ax
c002e054:	66 8e c0             	mov    es,ax
c002e057:	66 8e e0             	mov    fs,ax
c002e05a:	66 8e e8             	mov    gs,ax
c002e05d:	54                   	push   esp
c002e05e:	fc                   	cld    
c002e05f:	e8 74 d6 fe ff       	call   c001b6d8 <int_handler>
c002e064:	81 c4 04 00 00 00    	add    esp,0x4
c002e06a:	0f a9                	pop    gs
c002e06c:	0f a1                	pop    fs
c002e06e:	07                   	pop    es
c002e06f:	1f                   	pop    ds
c002e070:	61                   	popa   
c002e071:	81 c4 08 00 00 00    	add    esp,0x8
c002e077:	cf                   	iret   

c002e078 <syscall_common_stub>:
c002e078:	60                   	pusha  
c002e079:	1e                   	push   ds
c002e07a:	06                   	push   es
c002e07b:	0f a0                	push   fs
c002e07d:	0f a8                	push   gs
c002e07f:	66 b8 10 00          	mov    ax,0x10
c002e083:	66 8e d8             	mov    ds,ax
c002e086:	66 8e c0             	mov    es,ax
c002e089:	66 8e e0             	mov    fs,ax
c002e08c:	66 8e e8             	mov    gs,ax
c002e08f:	54                   	push   esp
c002e090:	fc                   	cld    
c002e091:	e8 42 d6 fe ff       	call   c001b6d8 <int_handler>
c002e096:	81 c4 04 00 00 00    	add    esp,0x4
c002e09c:	0f a9                	pop    gs
c002e09e:	0f a1                	pop    fs
c002e0a0:	07                   	pop    es
c002e0a1:	1f                   	pop    ds
c002e0a2:	e8 34 2b ff ff       	call   c0020bdb <KiCheckSignalZ>
c002e0a7:	3d 00 00 00 00       	cmp    eax,0x0
c002e0ac:	0f 84 c0 00 00 00    	je     c002e172 <skipSignals>
c002e0b2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c002e0b7:	61                   	popa   
c002e0b8:	53                   	push   ebx
c002e0b9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c002e0bf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c002e0c2:	5b                   	pop    ebx
c002e0c3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c002e0c8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c002e0cb:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c002e0ce:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002e0d1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c002e0d4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c002e0d7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c002e0da:	81 c4 08 00 00 00    	add    esp,0x8
c002e0e0:	5e                   	pop    esi
c002e0e1:	5b                   	pop    ebx
c002e0e2:	59                   	pop    ecx
c002e0e3:	5a                   	pop    edx
c002e0e4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c002e0e7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c002e0ea:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002e0ed:	52                   	push   edx
c002e0ee:	51                   	push   ecx
c002e0ef:	53                   	push   ebx
c002e0f0:	56                   	push   esi
c002e0f1:	81 ec 08 00 00 00    	sub    esp,0x8
c002e0f7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c002e0fa:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002e0fd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c002e100:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002e103:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002e106:	60                   	pusha  
c002e107:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c002e10d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c002e110:	89 e3                	mov    ebx,esp
c002e112:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c002e115:	52                   	push   edx
c002e116:	68 36 e1 02 c0       	push   0xc002e136
c002e11b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c002e11e:	89 dc                	mov    esp,ebx
c002e120:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c002e123:	68 23 00 00 00       	push   0x23
c002e128:	51                   	push   ecx
c002e129:	68 02 02 00 00       	push   0x202
c002e12e:	68 1b 00 00 00       	push   0x1b
c002e133:	ff 36                	push   DWORD PTR [esi]
c002e135:	cf                   	iret   

c002e136 <finishSignal>:
c002e136:	cd 0f                	int    0xf

c002e138 <finishSignal2>:
c002e138:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c002e13e:	e8 15 2b ff ff       	call   c0020c58 <KiFinishSignalZ>
c002e143:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c002e149:	68 23 00 00 00       	push   0x23
c002e14e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c002e151:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c002e154:	68 1b 00 00 00       	push   0x1b
c002e159:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c002e15c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002e15f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002e162:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002e165:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002e168:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c002e16b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c002e16e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c002e171:	cf                   	iret   

c002e172 <skipSignals>:
c002e172:	61                   	popa   
c002e173:	81 c4 08 00 00 00    	add    esp,0x8
c002e179:	cf                   	iret   
c002e17a:	90                   	nop
c002e17b:	90                   	nop

c002e17c <irq16>:
c002e17c:	fa                   	cli    
c002e17d:	6a 00                	push   0x0
c002e17f:	6a 30                	push   0x30
c002e181:	e9 c0 fe ff ff       	jmp    c002e046 <int_common_stub>

c002e186 <irq17>:
c002e186:	fa                   	cli    
c002e187:	6a 00                	push   0x0
c002e189:	6a 31                	push   0x31
c002e18b:	e9 b6 fe ff ff       	jmp    c002e046 <int_common_stub>

c002e190 <irq18>:
c002e190:	fa                   	cli    
c002e191:	6a 00                	push   0x0
c002e193:	6a 32                	push   0x32
c002e195:	e9 ac fe ff ff       	jmp    c002e046 <int_common_stub>

c002e19a <irq19>:
c002e19a:	fa                   	cli    
c002e19b:	6a 00                	push   0x0
c002e19d:	6a 33                	push   0x33
c002e19f:	e9 a2 fe ff ff       	jmp    c002e046 <int_common_stub>

c002e1a4 <irq20>:
c002e1a4:	fa                   	cli    
c002e1a5:	6a 00                	push   0x0
c002e1a7:	6a 34                	push   0x34
c002e1a9:	e9 98 fe ff ff       	jmp    c002e046 <int_common_stub>

c002e1ae <irq21>:
c002e1ae:	fa                   	cli    
c002e1af:	6a 00                	push   0x0
c002e1b1:	6a 35                	push   0x35
c002e1b3:	e9 8e fe ff ff       	jmp    c002e046 <int_common_stub>

c002e1b8 <irq22>:
c002e1b8:	fa                   	cli    
c002e1b9:	6a 00                	push   0x0
c002e1bb:	6a 36                	push   0x36
c002e1bd:	e9 84 fe ff ff       	jmp    c002e046 <int_common_stub>

c002e1c2 <irq23>:
c002e1c2:	fa                   	cli    
c002e1c3:	6a 00                	push   0x0
c002e1c5:	6a 37                	push   0x37
c002e1c7:	e9 7a fe ff ff       	jmp    c002e046 <int_common_stub>
c002e1cc:	66 90                	xchg   ax,ax
c002e1ce:	66 90                	xchg   ax,ax

c002e1d0 <i386GetRDRAND>:
c002e1d0:	b9 64 00 00 00       	mov    ecx,0x64

c002e1d5 <retry>:
c002e1d5:	0f c7 f0             	rdrand eax
c002e1d8:	72 05                	jb     c002e1df <retry.done>
c002e1da:	e2 f9                	loop   c002e1d5 <retry>

c002e1dc <retry.fail>:
c002e1dc:	31 c0                	xor    eax,eax
c002e1de:	c3                   	ret    

c002e1df <retry.done>:
c002e1df:	c3                   	ret    

c002e1e0 <sseDetect>:
c002e1e0:	b8 01 00 00 00       	mov    eax,0x1
c002e1e5:	0f a2                	cpuid  
c002e1e7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002e1ed:	74 06                	je     c002e1f5 <sseDetect.noSSE>
c002e1ef:	b8 01 00 00 00       	mov    eax,0x1
c002e1f4:	c3                   	ret    

c002e1f5 <sseDetect.noSSE>:
c002e1f5:	31 c0                	xor    eax,eax
c002e1f7:	c3                   	ret    

c002e1f8 <sseSave>:
c002e1f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e1fc:	0f ae 00             	fxsave [eax]
c002e1ff:	c3                   	ret    

c002e200 <sseLoad>:
c002e200:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e204:	0f ae 08             	fxrstor [eax]
c002e207:	c3                   	ret    

c002e208 <sseInit>:
c002e208:	e8 42 00 00 00       	call   c002e24f <x87Init>
c002e20d:	0f 20 e0             	mov    eax,cr4
c002e210:	66 0d 00 06          	or     ax,0x600
c002e214:	0f 22 e0             	mov    cr4,eax
c002e217:	c3                   	ret    

c002e218 <sseClose>:
c002e218:	c3                   	ret    
c002e219:	66 90                	xchg   ax,ax
c002e21b:	66 90                	xchg   ax,ax
c002e21d:	66 90                	xchg   ax,ax
c002e21f:	90                   	nop

c002e220 <value_37F>:
c002e220:	7f 03                	jg     c002e225 <value_37A+0x1>

c002e222 <value_37E>:
c002e222:	7e 03                	jle    c002e227 <x87Detect+0x1>

c002e224 <value_37A>:
c002e224:	7a 03                	jp     c002e229 <x87Detect+0x3>

c002e226 <x87Detect>:
c002e226:	b8 01 00 00 00       	mov    eax,0x1
c002e22b:	0f a2                	cpuid  
c002e22d:	f7 c2 01 00 00 00    	test   edx,0x1
c002e233:	74 06                	je     c002e23b <x87Detect.nox87>
c002e235:	b8 01 00 00 00       	mov    eax,0x1
c002e23a:	c3                   	ret    

c002e23b <x87Detect.nox87>:
c002e23b:	b8 00 00 00 00       	mov    eax,0x0
c002e240:	c3                   	ret    

c002e241 <x87Save>:
c002e241:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e245:	dd 30                	fnsave [eax]
c002e247:	c3                   	ret    

c002e248 <x87Load>:
c002e248:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e24c:	dd 20                	frstor [eax]
c002e24e:	c3                   	ret    

c002e24f <x87Init>:
c002e24f:	0f 20 c0             	mov    eax,cr0
c002e252:	66 25 fb ff          	and    ax,0xfffb
c002e256:	66 0d 22 00          	or     ax,0x22
c002e25a:	0f 22 c0             	mov    cr0,eax
c002e25d:	db e3                	fninit 
c002e25f:	0f 06                	clts   
c002e261:	d9 2d 24 e2 02 c0    	fldcw  WORD PTR ds:0xc002e224
c002e267:	c3                   	ret    

c002e268 <x87Close>:
c002e268:	c3                   	ret    
c002e269:	66 90                	xchg   ax,ax
c002e26b:	90                   	nop

c002e26c <__do_global_ctors_aux>:
c002e26c:	a1 20 f2 02 c0       	mov    eax,ds:0xc002f220
c002e271:	83 f8 ff             	cmp    eax,0xffffffff
c002e274:	74 1a                	je     c002e290 <__do_global_ctors_aux+0x24>
c002e276:	55                   	push   ebp
c002e277:	89 e5                	mov    ebp,esp
c002e279:	53                   	push   ebx
c002e27a:	52                   	push   edx
c002e27b:	bb 20 f2 02 c0       	mov    ebx,0xc002f220
c002e280:	ff d0                	call   eax
c002e282:	83 eb 04             	sub    ebx,0x4
c002e285:	8b 03                	mov    eax,DWORD PTR [ebx]
c002e287:	83 f8 ff             	cmp    eax,0xffffffff
c002e28a:	75 f4                	jne    c002e280 <__do_global_ctors_aux+0x14>
c002e28c:	58                   	pop    eax
c002e28d:	5b                   	pop    ebx
c002e28e:	5d                   	pop    ebp
c002e28f:	c3                   	ret    
c002e290:	c3                   	ret    
c002e291:	66 90                	xchg   ax,ax
c002e293:	90                   	nop

c002e294 <__divdi3>:
c002e294:	55                   	push   ebp
c002e295:	57                   	push   edi
c002e296:	56                   	push   esi
c002e297:	53                   	push   ebx
c002e298:	83 ec 1c             	sub    esp,0x1c
c002e29b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002e29f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002e2a3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002e2a6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002e2aa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002e2ae:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002e2b2:	85 db                	test   ebx,ebx
c002e2b4:	0f 88 8e 00 00 00    	js     c002e348 <__divdi3+0xb4>
c002e2ba:	89 dd                	mov    ebp,ebx
c002e2bc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002e2c4:	89 d3                	mov    ebx,edx
c002e2c6:	85 d2                	test   edx,edx
c002e2c8:	79 0d                	jns    c002e2d7 <__divdi3+0x43>
c002e2ca:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002e2ce:	f7 d8                	neg    eax
c002e2d0:	83 d2 00             	adc    edx,0x0
c002e2d3:	f7 da                	neg    edx
c002e2d5:	89 d3                	mov    ebx,edx
c002e2d7:	89 c7                	mov    edi,eax
c002e2d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002e2dc:	85 db                	test   ebx,ebx
c002e2de:	75 48                	jne    c002e328 <__divdi3+0x94>
c002e2e0:	39 ef                	cmp    edi,ebp
c002e2e2:	76 24                	jbe    c002e308 <__divdi3+0x74>
c002e2e4:	89 ea                	mov    edx,ebp
c002e2e6:	f7 f7                	div    edi
c002e2e8:	89 c1                	mov    ecx,eax
c002e2ea:	31 f6                	xor    esi,esi
c002e2ec:	89 c8                	mov    eax,ecx
c002e2ee:	89 f2                	mov    edx,esi
c002e2f0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e2f4:	85 c9                	test   ecx,ecx
c002e2f6:	74 07                	je     c002e2ff <__divdi3+0x6b>
c002e2f8:	f7 d8                	neg    eax
c002e2fa:	83 d2 00             	adc    edx,0x0
c002e2fd:	f7 da                	neg    edx
c002e2ff:	83 c4 1c             	add    esp,0x1c
c002e302:	5b                   	pop    ebx
c002e303:	5e                   	pop    esi
c002e304:	5f                   	pop    edi
c002e305:	5d                   	pop    ebp
c002e306:	c3                   	ret    
c002e307:	90                   	nop
c002e308:	85 ff                	test   edi,edi
c002e30a:	75 0b                	jne    c002e317 <__divdi3+0x83>
c002e30c:	b8 01 00 00 00       	mov    eax,0x1
c002e311:	31 d2                	xor    edx,edx
c002e313:	f7 f3                	div    ebx
c002e315:	89 c7                	mov    edi,eax
c002e317:	31 d2                	xor    edx,edx
c002e319:	89 e8                	mov    eax,ebp
c002e31b:	f7 f7                	div    edi
c002e31d:	89 c6                	mov    esi,eax
c002e31f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002e322:	f7 f7                	div    edi
c002e324:	89 c1                	mov    ecx,eax
c002e326:	eb c4                	jmp    c002e2ec <__divdi3+0x58>
c002e328:	39 eb                	cmp    ebx,ebp
c002e32a:	77 3c                	ja     c002e368 <__divdi3+0xd4>
c002e32c:	0f bd f3             	bsr    esi,ebx
c002e32f:	83 f6 1f             	xor    esi,0x1f
c002e332:	75 40                	jne    c002e374 <__divdi3+0xe0>
c002e334:	39 eb                	cmp    ebx,ebp
c002e336:	72 09                	jb     c002e341 <__divdi3+0xad>
c002e338:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002e33b:	0f 87 97 00 00 00    	ja     c002e3d8 <__divdi3+0x144>
c002e341:	b9 01 00 00 00       	mov    ecx,0x1
c002e346:	eb a4                	jmp    c002e2ec <__divdi3+0x58>
c002e348:	f7 d9                	neg    ecx
c002e34a:	83 d3 00             	adc    ebx,0x0
c002e34d:	f7 db                	neg    ebx
c002e34f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002e352:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002e356:	89 dd                	mov    ebp,ebx
c002e358:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002e360:	e9 5f ff ff ff       	jmp    c002e2c4 <__divdi3+0x30>
c002e365:	8d 76 00             	lea    esi,[esi+0x0]
c002e368:	31 f6                	xor    esi,esi
c002e36a:	31 c9                	xor    ecx,ecx
c002e36c:	e9 7b ff ff ff       	jmp    c002e2ec <__divdi3+0x58>
c002e371:	8d 76 00             	lea    esi,[esi+0x0]
c002e374:	b8 20 00 00 00       	mov    eax,0x20
c002e379:	29 f0                	sub    eax,esi
c002e37b:	89 f1                	mov    ecx,esi
c002e37d:	d3 e3                	shl    ebx,cl
c002e37f:	89 fa                	mov    edx,edi
c002e381:	88 c1                	mov    cl,al
c002e383:	d3 ea                	shr    edx,cl
c002e385:	09 da                	or     edx,ebx
c002e387:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002e38b:	89 f1                	mov    ecx,esi
c002e38d:	d3 e7                	shl    edi,cl
c002e38f:	89 eb                	mov    ebx,ebp
c002e391:	88 c1                	mov    cl,al
c002e393:	d3 eb                	shr    ebx,cl
c002e395:	89 f1                	mov    ecx,esi
c002e397:	d3 e5                	shl    ebp,cl
c002e399:	8b 14 24             	mov    edx,DWORD PTR [esp]
c002e39c:	88 c1                	mov    cl,al
c002e39e:	d3 ea                	shr    edx,cl
c002e3a0:	09 d5                	or     ebp,edx
c002e3a2:	89 e8                	mov    eax,ebp
c002e3a4:	89 da                	mov    edx,ebx
c002e3a6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002e3aa:	89 d3                	mov    ebx,edx
c002e3ac:	89 c5                	mov    ebp,eax
c002e3ae:	f7 e7                	mul    edi
c002e3b0:	39 d3                	cmp    ebx,edx
c002e3b2:	72 18                	jb     c002e3cc <__divdi3+0x138>
c002e3b4:	74 0a                	je     c002e3c0 <__divdi3+0x12c>
c002e3b6:	89 e9                	mov    ecx,ebp
c002e3b8:	31 f6                	xor    esi,esi
c002e3ba:	e9 2d ff ff ff       	jmp    c002e2ec <__divdi3+0x58>
c002e3bf:	90                   	nop
c002e3c0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002e3c3:	89 f1                	mov    ecx,esi
c002e3c5:	d3 e7                	shl    edi,cl
c002e3c7:	39 c7                	cmp    edi,eax
c002e3c9:	73 eb                	jae    c002e3b6 <__divdi3+0x122>
c002e3cb:	90                   	nop
c002e3cc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002e3cf:	31 f6                	xor    esi,esi
c002e3d1:	e9 16 ff ff ff       	jmp    c002e2ec <__divdi3+0x58>
c002e3d6:	66 90                	xchg   ax,ax
c002e3d8:	31 c9                	xor    ecx,ecx
c002e3da:	e9 0d ff ff ff       	jmp    c002e2ec <__divdi3+0x58>
c002e3df:	90                   	nop

c002e3e0 <__moddi3>:
c002e3e0:	55                   	push   ebp
c002e3e1:	57                   	push   edi
c002e3e2:	56                   	push   esi
c002e3e3:	53                   	push   ebx
c002e3e4:	83 ec 2c             	sub    esp,0x2c
c002e3e7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002e3eb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002e3ef:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002e3f3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002e3f7:	85 db                	test   ebx,ebx
c002e3f9:	0f 88 85 00 00 00    	js     c002e484 <__moddi3+0xa4>
c002e3ff:	89 de                	mov    esi,ebx
c002e401:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002e409:	89 d7                	mov    edi,edx
c002e40b:	85 d2                	test   edx,edx
c002e40d:	79 09                	jns    c002e418 <__moddi3+0x38>
c002e40f:	f7 d8                	neg    eax
c002e411:	83 d2 00             	adc    edx,0x0
c002e414:	f7 da                	neg    edx
c002e416:	89 d7                	mov    edi,edx
c002e418:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e41c:	89 cd                	mov    ebp,ecx
c002e41e:	85 ff                	test   edi,edi
c002e420:	75 52                	jne    c002e474 <__moddi3+0x94>
c002e422:	89 c3                	mov    ebx,eax
c002e424:	39 f0                	cmp    eax,esi
c002e426:	76 24                	jbe    c002e44c <__moddi3+0x6c>
c002e428:	89 c8                	mov    eax,ecx
c002e42a:	89 f2                	mov    edx,esi
c002e42c:	f7 f3                	div    ebx
c002e42e:	89 d6                	mov    esi,edx
c002e430:	89 f0                	mov    eax,esi
c002e432:	31 d2                	xor    edx,edx
c002e434:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002e438:	85 c9                	test   ecx,ecx
c002e43a:	74 07                	je     c002e443 <__moddi3+0x63>
c002e43c:	f7 d8                	neg    eax
c002e43e:	83 d2 00             	adc    edx,0x0
c002e441:	f7 da                	neg    edx
c002e443:	83 c4 2c             	add    esp,0x2c
c002e446:	5b                   	pop    ebx
c002e447:	5e                   	pop    esi
c002e448:	5f                   	pop    edi
c002e449:	5d                   	pop    ebp
c002e44a:	c3                   	ret    
c002e44b:	90                   	nop
c002e44c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e450:	85 db                	test   ebx,ebx
c002e452:	75 0d                	jne    c002e461 <__moddi3+0x81>
c002e454:	b8 01 00 00 00       	mov    eax,0x1
c002e459:	31 d2                	xor    edx,edx
c002e45b:	f7 f7                	div    edi
c002e45d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e461:	89 f0                	mov    eax,esi
c002e463:	31 d2                	xor    edx,edx
c002e465:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002e469:	f7 f7                	div    edi
c002e46b:	89 e8                	mov    eax,ebp
c002e46d:	f7 f7                	div    edi
c002e46f:	89 d6                	mov    esi,edx
c002e471:	eb bd                	jmp    c002e430 <__moddi3+0x50>
c002e473:	90                   	nop
c002e474:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002e478:	39 f7                	cmp    edi,esi
c002e47a:	76 20                	jbe    c002e49c <__moddi3+0xbc>
c002e47c:	89 c8                	mov    eax,ecx
c002e47e:	89 f2                	mov    edx,esi
c002e480:	eb b2                	jmp    c002e434 <__moddi3+0x54>
c002e482:	66 90                	xchg   ax,ax
c002e484:	f7 d9                	neg    ecx
c002e486:	83 d3 00             	adc    ebx,0x0
c002e489:	f7 db                	neg    ebx
c002e48b:	89 de                	mov    esi,ebx
c002e48d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c002e495:	e9 6f ff ff ff       	jmp    c002e409 <__moddi3+0x29>
c002e49a:	66 90                	xchg   ax,ax
c002e49c:	0f bd c7             	bsr    eax,edi
c002e49f:	83 f0 1f             	xor    eax,0x1f
c002e4a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002e4a6:	75 24                	jne    c002e4cc <__moddi3+0xec>
c002e4a8:	39 f7                	cmp    edi,esi
c002e4aa:	72 06                	jb     c002e4b2 <__moddi3+0xd2>
c002e4ac:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002e4b0:	77 0c                	ja     c002e4be <__moddi3+0xde>
c002e4b2:	89 e9                	mov    ecx,ebp
c002e4b4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002e4b8:	19 fe                	sbb    esi,edi
c002e4ba:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002e4be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002e4c2:	89 f2                	mov    edx,esi
c002e4c4:	e9 6b ff ff ff       	jmp    c002e434 <__moddi3+0x54>
c002e4c9:	8d 76 00             	lea    esi,[esi+0x0]
c002e4cc:	b8 20 00 00 00       	mov    eax,0x20
c002e4d1:	89 c2                	mov    edx,eax
c002e4d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002e4d7:	29 da                	sub    edx,ebx
c002e4d9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002e4dd:	88 d9                	mov    cl,bl
c002e4df:	d3 e7                	shl    edi,cl
c002e4e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002e4e5:	88 d1                	mov    cl,dl
c002e4e7:	d3 e8                	shr    eax,cl
c002e4e9:	09 c7                	or     edi,eax
c002e4eb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002e4ef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002e4f3:	89 d8                	mov    eax,ebx
c002e4f5:	88 d9                	mov    cl,bl
c002e4f7:	d3 e7                	shl    edi,cl
c002e4f9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e4fd:	89 f3                	mov    ebx,esi
c002e4ff:	88 d1                	mov    cl,dl
c002e501:	d3 eb                	shr    ebx,cl
c002e503:	89 c7                	mov    edi,eax
c002e505:	88 c1                	mov    cl,al
c002e507:	d3 e6                	shl    esi,cl
c002e509:	89 e8                	mov    eax,ebp
c002e50b:	88 d1                	mov    cl,dl
c002e50d:	d3 e8                	shr    eax,cl
c002e50f:	09 f0                	or     eax,esi
c002e511:	89 f9                	mov    ecx,edi
c002e513:	d3 e5                	shl    ebp,cl
c002e515:	89 da                	mov    edx,ebx
c002e517:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002e51b:	89 d3                	mov    ebx,edx
c002e51d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e521:	89 c6                	mov    esi,eax
c002e523:	89 d1                	mov    ecx,edx
c002e525:	39 d3                	cmp    ebx,edx
c002e527:	72 27                	jb     c002e550 <__moddi3+0x170>
c002e529:	74 21                	je     c002e54c <__moddi3+0x16c>
c002e52b:	29 f5                	sub    ebp,esi
c002e52d:	19 cb                	sbb    ebx,ecx
c002e52f:	89 de                	mov    esi,ebx
c002e531:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c002e535:	d3 e6                	shl    esi,cl
c002e537:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002e53b:	89 f9                	mov    ecx,edi
c002e53d:	d3 ed                	shr    ebp,cl
c002e53f:	09 ee                	or     esi,ebp
c002e541:	89 f0                	mov    eax,esi
c002e543:	d3 eb                	shr    ebx,cl
c002e545:	89 da                	mov    edx,ebx
c002e547:	e9 e8 fe ff ff       	jmp    c002e434 <__moddi3+0x54>
c002e54c:	39 c5                	cmp    ebp,eax
c002e54e:	73 db                	jae    c002e52b <__moddi3+0x14b>
c002e550:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002e554:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002e558:	89 d1                	mov    ecx,edx
c002e55a:	89 c6                	mov    esi,eax
c002e55c:	eb cd                	jmp    c002e52b <__moddi3+0x14b>
c002e55e:	66 90                	xchg   ax,ax

c002e560 <__udivdi3>:
c002e560:	55                   	push   ebp
c002e561:	57                   	push   edi
c002e562:	56                   	push   esi
c002e563:	53                   	push   ebx
c002e564:	83 ec 1c             	sub    esp,0x1c
c002e567:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002e56b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002e56f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002e573:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002e577:	85 d2                	test   edx,edx
c002e579:	75 41                	jne    c002e5bc <__udivdi3+0x5c>
c002e57b:	39 f7                	cmp    edi,esi
c002e57d:	76 15                	jbe    c002e594 <__udivdi3+0x34>
c002e57f:	89 e8                	mov    eax,ebp
c002e581:	89 f2                	mov    edx,esi
c002e583:	f7 f7                	div    edi
c002e585:	31 db                	xor    ebx,ebx
c002e587:	89 da                	mov    edx,ebx
c002e589:	83 c4 1c             	add    esp,0x1c
c002e58c:	5b                   	pop    ebx
c002e58d:	5e                   	pop    esi
c002e58e:	5f                   	pop    edi
c002e58f:	5d                   	pop    ebp
c002e590:	c3                   	ret    
c002e591:	8d 76 00             	lea    esi,[esi+0x0]
c002e594:	89 f9                	mov    ecx,edi
c002e596:	85 ff                	test   edi,edi
c002e598:	75 0b                	jne    c002e5a5 <__udivdi3+0x45>
c002e59a:	b8 01 00 00 00       	mov    eax,0x1
c002e59f:	31 d2                	xor    edx,edx
c002e5a1:	f7 f7                	div    edi
c002e5a3:	89 c1                	mov    ecx,eax
c002e5a5:	31 d2                	xor    edx,edx
c002e5a7:	89 f0                	mov    eax,esi
c002e5a9:	f7 f1                	div    ecx
c002e5ab:	89 c3                	mov    ebx,eax
c002e5ad:	89 e8                	mov    eax,ebp
c002e5af:	f7 f1                	div    ecx
c002e5b1:	89 da                	mov    edx,ebx
c002e5b3:	83 c4 1c             	add    esp,0x1c
c002e5b6:	5b                   	pop    ebx
c002e5b7:	5e                   	pop    esi
c002e5b8:	5f                   	pop    edi
c002e5b9:	5d                   	pop    ebp
c002e5ba:	c3                   	ret    
c002e5bb:	90                   	nop
c002e5bc:	39 f2                	cmp    edx,esi
c002e5be:	77 1c                	ja     c002e5dc <__udivdi3+0x7c>
c002e5c0:	0f bd da             	bsr    ebx,edx
c002e5c3:	83 f3 1f             	xor    ebx,0x1f
c002e5c6:	75 24                	jne    c002e5ec <__udivdi3+0x8c>
c002e5c8:	39 f2                	cmp    edx,esi
c002e5ca:	72 08                	jb     c002e5d4 <__udivdi3+0x74>
c002e5cc:	39 ef                	cmp    edi,ebp
c002e5ce:	0f 87 84 00 00 00    	ja     c002e658 <__udivdi3+0xf8>
c002e5d4:	b8 01 00 00 00       	mov    eax,0x1
c002e5d9:	eb ac                	jmp    c002e587 <__udivdi3+0x27>
c002e5db:	90                   	nop
c002e5dc:	31 db                	xor    ebx,ebx
c002e5de:	31 c0                	xor    eax,eax
c002e5e0:	89 da                	mov    edx,ebx
c002e5e2:	83 c4 1c             	add    esp,0x1c
c002e5e5:	5b                   	pop    ebx
c002e5e6:	5e                   	pop    esi
c002e5e7:	5f                   	pop    edi
c002e5e8:	5d                   	pop    ebp
c002e5e9:	c3                   	ret    
c002e5ea:	66 90                	xchg   ax,ax
c002e5ec:	b8 20 00 00 00       	mov    eax,0x20
c002e5f1:	29 d8                	sub    eax,ebx
c002e5f3:	88 d9                	mov    cl,bl
c002e5f5:	d3 e2                	shl    edx,cl
c002e5f7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002e5fb:	89 fa                	mov    edx,edi
c002e5fd:	88 c1                	mov    cl,al
c002e5ff:	d3 ea                	shr    edx,cl
c002e601:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e605:	09 d1                	or     ecx,edx
c002e607:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002e60b:	88 d9                	mov    cl,bl
c002e60d:	d3 e7                	shl    edi,cl
c002e60f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e613:	89 f7                	mov    edi,esi
c002e615:	88 c1                	mov    cl,al
c002e617:	d3 ef                	shr    edi,cl
c002e619:	88 d9                	mov    cl,bl
c002e61b:	d3 e6                	shl    esi,cl
c002e61d:	89 ea                	mov    edx,ebp
c002e61f:	88 c1                	mov    cl,al
c002e621:	d3 ea                	shr    edx,cl
c002e623:	09 d6                	or     esi,edx
c002e625:	89 f0                	mov    eax,esi
c002e627:	89 fa                	mov    edx,edi
c002e629:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002e62d:	89 d7                	mov    edi,edx
c002e62f:	89 c6                	mov    esi,eax
c002e631:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e635:	39 d7                	cmp    edi,edx
c002e637:	72 13                	jb     c002e64c <__udivdi3+0xec>
c002e639:	74 09                	je     c002e644 <__udivdi3+0xe4>
c002e63b:	89 f0                	mov    eax,esi
c002e63d:	31 db                	xor    ebx,ebx
c002e63f:	e9 43 ff ff ff       	jmp    c002e587 <__udivdi3+0x27>
c002e644:	88 d9                	mov    cl,bl
c002e646:	d3 e5                	shl    ebp,cl
c002e648:	39 c5                	cmp    ebp,eax
c002e64a:	73 ef                	jae    c002e63b <__udivdi3+0xdb>
c002e64c:	8d 46 ff             	lea    eax,[esi-0x1]
c002e64f:	31 db                	xor    ebx,ebx
c002e651:	e9 31 ff ff ff       	jmp    c002e587 <__udivdi3+0x27>
c002e656:	66 90                	xchg   ax,ax
c002e658:	31 c0                	xor    eax,eax
c002e65a:	e9 28 ff ff ff       	jmp    c002e587 <__udivdi3+0x27>
c002e65f:	90                   	nop

c002e660 <__umoddi3>:
c002e660:	55                   	push   ebp
c002e661:	57                   	push   edi
c002e662:	56                   	push   esi
c002e663:	53                   	push   ebx
c002e664:	83 ec 1c             	sub    esp,0x1c
c002e667:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002e66b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002e66f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002e673:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002e677:	89 da                	mov    edx,ebx
c002e679:	85 c0                	test   eax,eax
c002e67b:	75 37                	jne    c002e6b4 <__umoddi3+0x54>
c002e67d:	39 df                	cmp    edi,ebx
c002e67f:	76 13                	jbe    c002e694 <__umoddi3+0x34>
c002e681:	89 f0                	mov    eax,esi
c002e683:	f7 f7                	div    edi
c002e685:	89 d0                	mov    eax,edx
c002e687:	31 d2                	xor    edx,edx
c002e689:	83 c4 1c             	add    esp,0x1c
c002e68c:	5b                   	pop    ebx
c002e68d:	5e                   	pop    esi
c002e68e:	5f                   	pop    edi
c002e68f:	5d                   	pop    ebp
c002e690:	c3                   	ret    
c002e691:	8d 76 00             	lea    esi,[esi+0x0]
c002e694:	89 fd                	mov    ebp,edi
c002e696:	85 ff                	test   edi,edi
c002e698:	75 0b                	jne    c002e6a5 <__umoddi3+0x45>
c002e69a:	b8 01 00 00 00       	mov    eax,0x1
c002e69f:	31 d2                	xor    edx,edx
c002e6a1:	f7 f7                	div    edi
c002e6a3:	89 c5                	mov    ebp,eax
c002e6a5:	89 d8                	mov    eax,ebx
c002e6a7:	31 d2                	xor    edx,edx
c002e6a9:	f7 f5                	div    ebp
c002e6ab:	89 f0                	mov    eax,esi
c002e6ad:	f7 f5                	div    ebp
c002e6af:	89 d0                	mov    eax,edx
c002e6b1:	eb d4                	jmp    c002e687 <__umoddi3+0x27>
c002e6b3:	90                   	nop
c002e6b4:	89 f1                	mov    ecx,esi
c002e6b6:	39 d8                	cmp    eax,ebx
c002e6b8:	76 0a                	jbe    c002e6c4 <__umoddi3+0x64>
c002e6ba:	89 f0                	mov    eax,esi
c002e6bc:	83 c4 1c             	add    esp,0x1c
c002e6bf:	5b                   	pop    ebx
c002e6c0:	5e                   	pop    esi
c002e6c1:	5f                   	pop    edi
c002e6c2:	5d                   	pop    ebp
c002e6c3:	c3                   	ret    
c002e6c4:	0f bd e8             	bsr    ebp,eax
c002e6c7:	83 f5 1f             	xor    ebp,0x1f
c002e6ca:	75 1c                	jne    c002e6e8 <__umoddi3+0x88>
c002e6cc:	39 d8                	cmp    eax,ebx
c002e6ce:	72 04                	jb     c002e6d4 <__umoddi3+0x74>
c002e6d0:	39 f7                	cmp    edi,esi
c002e6d2:	77 08                	ja     c002e6dc <__umoddi3+0x7c>
c002e6d4:	89 da                	mov    edx,ebx
c002e6d6:	29 fe                	sub    esi,edi
c002e6d8:	19 c2                	sbb    edx,eax
c002e6da:	89 f1                	mov    ecx,esi
c002e6dc:	89 c8                	mov    eax,ecx
c002e6de:	83 c4 1c             	add    esp,0x1c
c002e6e1:	5b                   	pop    ebx
c002e6e2:	5e                   	pop    esi
c002e6e3:	5f                   	pop    edi
c002e6e4:	5d                   	pop    ebp
c002e6e5:	c3                   	ret    
c002e6e6:	66 90                	xchg   ax,ax
c002e6e8:	ba 20 00 00 00       	mov    edx,0x20
c002e6ed:	29 ea                	sub    edx,ebp
c002e6ef:	89 e9                	mov    ecx,ebp
c002e6f1:	d3 e0                	shl    eax,cl
c002e6f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002e6f7:	89 f8                	mov    eax,edi
c002e6f9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002e6fd:	88 d1                	mov    cl,dl
c002e6ff:	d3 e8                	shr    eax,cl
c002e701:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e705:	09 c1                	or     ecx,eax
c002e707:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002e70b:	89 e9                	mov    ecx,ebp
c002e70d:	d3 e7                	shl    edi,cl
c002e70f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e713:	89 d8                	mov    eax,ebx
c002e715:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002e719:	88 d1                	mov    cl,dl
c002e71b:	d3 e8                	shr    eax,cl
c002e71d:	89 c7                	mov    edi,eax
c002e71f:	89 e9                	mov    ecx,ebp
c002e721:	d3 e3                	shl    ebx,cl
c002e723:	89 f0                	mov    eax,esi
c002e725:	88 d1                	mov    cl,dl
c002e727:	d3 e8                	shr    eax,cl
c002e729:	09 d8                	or     eax,ebx
c002e72b:	89 e9                	mov    ecx,ebp
c002e72d:	d3 e6                	shl    esi,cl
c002e72f:	89 f3                	mov    ebx,esi
c002e731:	89 fa                	mov    edx,edi
c002e733:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002e737:	89 d1                	mov    ecx,edx
c002e739:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e73d:	89 c6                	mov    esi,eax
c002e73f:	89 d7                	mov    edi,edx
c002e741:	39 d1                	cmp    ecx,edx
c002e743:	72 27                	jb     c002e76c <__umoddi3+0x10c>
c002e745:	74 21                	je     c002e768 <__umoddi3+0x108>
c002e747:	89 ca                	mov    edx,ecx
c002e749:	29 f3                	sub    ebx,esi
c002e74b:	19 fa                	sbb    edx,edi
c002e74d:	89 d0                	mov    eax,edx
c002e74f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002e753:	d3 e0                	shl    eax,cl
c002e755:	89 e9                	mov    ecx,ebp
c002e757:	d3 eb                	shr    ebx,cl
c002e759:	09 d8                	or     eax,ebx
c002e75b:	d3 ea                	shr    edx,cl
c002e75d:	83 c4 1c             	add    esp,0x1c
c002e760:	5b                   	pop    ebx
c002e761:	5e                   	pop    esi
c002e762:	5f                   	pop    edi
c002e763:	5d                   	pop    ebp
c002e764:	c3                   	ret    
c002e765:	8d 76 00             	lea    esi,[esi+0x0]
c002e768:	39 c3                	cmp    ebx,eax
c002e76a:	73 db                	jae    c002e747 <__umoddi3+0xe7>
c002e76c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002e770:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c002e774:	89 d7                	mov    edi,edx
c002e776:	89 c6                	mov    esi,eax
c002e778:	eb cd                	jmp    c002e747 <__umoddi3+0xe7>

Disassembly of section .init:

c002e77a <_init>:
c002e77a:	55                   	push   ebp
c002e77b:	89 e5                	mov    ebp,esp
c002e77d:	e8 72 19 fd ff       	call   c00000f4 <frame_dummy>
c002e782:	e8 e5 fa ff ff       	call   c002e26c <__do_global_ctors_aux>
c002e787:	5d                   	pop    ebp
c002e788:	c3                   	ret    

Disassembly of section .fini:

c002e789 <_fini>:
c002e789:	55                   	push   ebp
c002e78a:	89 e5                	mov    ebp,esp
c002e78c:	e8 f3 18 fd ff       	call   c0000084 <__do_global_dtors_aux>
c002e791:	5d                   	pop    ebp
c002e792:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c002e794 <Computer::~Computer()>:
c002e794:	83 ec 0c             	sub    esp,0xc
c002e797:	ba 44 0f 03 c0       	mov    edx,0xc0030f44
c002e79c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e7a0:	89 10                	mov    DWORD PTR [eax],edx
c002e7a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e7a6:	83 ec 0c             	sub    esp,0xc
c002e7a9:	50                   	push   eax
c002e7aa:	e8 69 c9 fe ff       	call   c001b118 <Device::~Device()>
c002e7af:	83 c4 10             	add    esp,0x10
c002e7b2:	90                   	nop
c002e7b3:	83 c4 0c             	add    esp,0xc
c002e7b6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002e7b8 <Computer::~Computer()>:
c002e7b8:	83 ec 0c             	sub    esp,0xc
c002e7bb:	83 ec 0c             	sub    esp,0xc
c002e7be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e7c2:	e8 cd ff ff ff       	call   c002e794 <Computer::~Computer()>
c002e7c7:	83 c4 10             	add    esp,0x10
c002e7ca:	83 ec 08             	sub    esp,0x8
c002e7cd:	68 70 01 00 00       	push   0x170
c002e7d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e7d6:	e8 8d a8 fe ff       	call   c0019068 <operator delete(void*, unsigned long)>
c002e7db:	83 c4 10             	add    esp,0x10
c002e7de:	83 c4 0c             	add    esp,0xc
c002e7e1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c002e7e2 <idleCommon()>:
c002e7e2:	83 ec 0c             	sub    esp,0xc
c002e7e5:	fa                   	cli    
c002e7e6:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002e7ec:	e8 6b 69 ff ff       	call   c002515c <schedule()>
c002e7f1:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002e7f6:	48                   	dec    eax
c002e7f7:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002e7fc:	75 01                	jne    c002e7ff <idleCommon()+0x1d>
c002e7fe:	fb                   	sti    
c002e7ff:	83 c4 0c             	add    esp,0xc
c002e802:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002e804 <LinkedList<UnixFile>::~LinkedList()>:
c002e804:	90                   	nop
c002e805:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002e806 <LinkedList<UnixFile>::LinkedList()>:
c002e806:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e80a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002e810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e814:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002e81b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e81f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e826:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e82a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002e830:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e834:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002e83b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e83f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e846:	90                   	nop
c002e847:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002e848 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002e848:	83 ec 0c             	sub    esp,0xc
c002e84b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002e850:	75 10                	jne    c002e862 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002e852:	83 ec 0c             	sub    esp,0xc
c002e855:	68 58 11 03 c0       	push   0xc0031158
c002e85a:	e8 4f 19 ff ff       	call   c00201ae <KePanic(char const*)>
c002e85f:	83 c4 10             	add    esp,0x10
c002e862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e866:	8b 00                	mov    eax,DWORD PTR [eax]
c002e868:	85 c0                	test   eax,eax
c002e86a:	74 34                	je     c002e8a0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002e86c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e870:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e873:	85 c0                	test   eax,eax
c002e875:	74 29                	je     c002e8a0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002e877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e87b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e87e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e882:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002e885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e889:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e88d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002e890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e894:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e897:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e89e:	eb 65                	jmp    c002e905 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002e8a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e8a4:	8b 00                	mov    eax,DWORD PTR [eax]
c002e8a6:	85 c0                	test   eax,eax
c002e8a8:	75 4b                	jne    c002e8f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002e8aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e8ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e8b1:	85 c0                	test   eax,eax
c002e8b3:	75 40                	jne    c002e8f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002e8b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e8b9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e8bd:	89 10                	mov    DWORD PTR [eax],edx
c002e8bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e8c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e8c7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002e8ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e8ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e8d1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e8d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e8dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e8df:	85 c0                	test   eax,eax
c002e8e1:	74 22                	je     c002e905 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002e8e3:	83 ec 0c             	sub    esp,0xc
c002e8e6:	68 7a 11 03 c0       	push   0xc003117a
c002e8eb:	e8 be 18 ff ff       	call   c00201ae <KePanic(char const*)>
c002e8f0:	83 c4 10             	add    esp,0x10
c002e8f3:	eb 10                	jmp    c002e905 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002e8f5:	83 ec 0c             	sub    esp,0xc
c002e8f8:	68 84 11 03 c0       	push   0xc0031184
c002e8fd:	e8 ac 18 ff ff       	call   c00201ae <KePanic(char const*)>
c002e902:	83 c4 10             	add    esp,0x10
c002e905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e909:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e90c:	8d 50 01             	lea    edx,[eax+0x1]
c002e90f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e913:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002e916:	90                   	nop
c002e917:	83 c4 0c             	add    esp,0xc
c002e91a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002e91c <LinkedList<UnixFile>::getFirstElement()>:
c002e91c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e920:	8b 00                	mov    eax,DWORD PTR [eax]
c002e922:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002e924 <LinkedList<UnixFile>::removeFirst()>:
c002e924:	83 ec 0c             	sub    esp,0xc
c002e927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e92b:	8b 00                	mov    eax,DWORD PTR [eax]
c002e92d:	85 c0                	test   eax,eax
c002e92f:	75 12                	jne    c002e943 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002e931:	83 ec 0c             	sub    esp,0xc
c002e934:	68 90 11 03 c0       	push   0xc0031190
c002e939:	e8 70 18 ff ff       	call   c00201ae <KePanic(char const*)>
c002e93e:	83 c4 10             	add    esp,0x10
c002e941:	eb 7e                	jmp    c002e9c1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002e943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e947:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e94a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e94d:	85 c0                	test   eax,eax
c002e94f:	74 10                	je     c002e961 <LinkedList<UnixFile>::removeFirst()+0x3d>
c002e951:	83 ec 0c             	sub    esp,0xc
c002e954:	68 db 11 03 c0       	push   0xc00311db
c002e959:	e8 50 18 ff ff       	call   c00201ae <KePanic(char const*)>
c002e95e:	83 c4 10             	add    esp,0x10
c002e961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e965:	8b 00                	mov    eax,DWORD PTR [eax]
c002e967:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e96a:	85 c0                	test   eax,eax
c002e96c:	75 33                	jne    c002e9a1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c002e96e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e972:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002e978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e97c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002e983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e987:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e98a:	83 f8 01             	cmp    eax,0x1
c002e98d:	74 21                	je     c002e9b0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002e98f:	83 ec 0c             	sub    esp,0xc
c002e992:	68 b4 11 03 c0       	push   0xc00311b4
c002e997:	e8 12 18 ff ff       	call   c00201ae <KePanic(char const*)>
c002e99c:	83 c4 10             	add    esp,0x10
c002e99f:	eb 0f                	jmp    c002e9b0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002e9a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9a5:	8b 00                	mov    eax,DWORD PTR [eax]
c002e9a7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002e9aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9ae:	89 10                	mov    DWORD PTR [eax],edx
c002e9b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e9b7:	8d 50 ff             	lea    edx,[eax-0x1]
c002e9ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002e9c1:	83 c4 0c             	add    esp,0xc
c002e9c4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002e9c6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002e9c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002e9ca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e9cd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002e9ce <DriverlessDevice::~DriverlessDevice()>:
c002e9ce:	ba 08 1e 03 c0       	mov    edx,0xc0031e08
c002e9d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e9d7:	89 10                	mov    DWORD PTR [eax],edx
c002e9d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e9dd:	50                   	push   eax
c002e9de:	e8 35 c7 fe ff       	call   c001b118 <Device::~Device()>
c002e9e3:	83 c4 04             	add    esp,0x4
c002e9e6:	90                   	nop
c002e9e7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002e9e8 <DriverlessDevice::~DriverlessDevice()>:
c002e9e8:	83 ec 0c             	sub    esp,0xc
c002e9eb:	83 ec 0c             	sub    esp,0xc
c002e9ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e9f2:	e8 d7 ff ff ff       	call   c002e9ce <DriverlessDevice::~DriverlessDevice()>
c002e9f7:	83 c4 10             	add    esp,0x10
c002e9fa:	83 ec 08             	sub    esp,0x8
c002e9fd:	68 58 01 00 00       	push   0x158
c002ea02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ea06:	e8 5d a6 fe ff       	call   c0019068 <operator delete(void*, unsigned long)>
c002ea0b:	83 c4 10             	add    esp,0x10
c002ea0e:	83 c4 0c             	add    esp,0xc
c002ea11:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002ea12 <LinkedList<Device>::addElement(Device*)>:
c002ea12:	83 ec 0c             	sub    esp,0xc
c002ea15:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002ea1a:	75 10                	jne    c002ea2c <LinkedList<Device>::addElement(Device*)+0x1a>
c002ea1c:	83 ec 0c             	sub    esp,0xc
c002ea1f:	68 58 11 03 c0       	push   0xc0031158
c002ea24:	e8 85 17 ff ff       	call   c00201ae <KePanic(char const*)>
c002ea29:	83 c4 10             	add    esp,0x10
c002ea2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea30:	8b 00                	mov    eax,DWORD PTR [eax]
c002ea32:	85 c0                	test   eax,eax
c002ea34:	74 3a                	je     c002ea70 <LinkedList<Device>::addElement(Device*)+0x5e>
c002ea36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ea3d:	85 c0                	test   eax,eax
c002ea3f:	74 2f                	je     c002ea70 <LinkedList<Device>::addElement(Device*)+0x5e>
c002ea41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea45:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ea48:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ea4c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002ea52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea56:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ea5a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ea5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea61:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ea64:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002ea6e:	eb 68                	jmp    c002ead8 <LinkedList<Device>::addElement(Device*)+0xc6>
c002ea70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea74:	8b 00                	mov    eax,DWORD PTR [eax]
c002ea76:	85 c0                	test   eax,eax
c002ea78:	75 4e                	jne    c002eac8 <LinkedList<Device>::addElement(Device*)+0xb6>
c002ea7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ea81:	85 c0                	test   eax,eax
c002ea83:	75 43                	jne    c002eac8 <LinkedList<Device>::addElement(Device*)+0xb6>
c002ea85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea89:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ea8d:	89 10                	mov    DWORD PTR [eax],edx
c002ea8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea93:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ea97:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ea9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eaa1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002eaab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eaaf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eab2:	85 c0                	test   eax,eax
c002eab4:	74 22                	je     c002ead8 <LinkedList<Device>::addElement(Device*)+0xc6>
c002eab6:	83 ec 0c             	sub    esp,0xc
c002eab9:	68 7a 11 03 c0       	push   0xc003117a
c002eabe:	e8 eb 16 ff ff       	call   c00201ae <KePanic(char const*)>
c002eac3:	83 c4 10             	add    esp,0x10
c002eac6:	eb 10                	jmp    c002ead8 <LinkedList<Device>::addElement(Device*)+0xc6>
c002eac8:	83 ec 0c             	sub    esp,0xc
c002eacb:	68 84 11 03 c0       	push   0xc0031184
c002ead0:	e8 d9 16 ff ff       	call   c00201ae <KePanic(char const*)>
c002ead5:	83 c4 10             	add    esp,0x10
c002ead8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eadc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eadf:	8d 50 01             	lea    edx,[eax+0x1]
c002eae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eae6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002eae9:	90                   	nop
c002eaea:	83 c4 0c             	add    esp,0xc
c002eaed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002eaee <LinkedList<Device>::LinkedList()>:
c002eaee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eaf2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002eaf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eafc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002eb03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb07:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002eb0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb12:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002eb18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002eb23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb27:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002eb2e:	90                   	nop
c002eb2f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002eb30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002eb30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb34:	8b 00                	mov    eax,DWORD PTR [eax]
c002eb36:	85 c0                	test   eax,eax
c002eb38:	75 0e                	jne    c002eb48 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002eb3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eb41:	85 c0                	test   eax,eax
c002eb43:	75 03                	jne    c002eb48 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002eb45:	b0 01                	mov    al,0x1
c002eb47:	c3                   	ret    
c002eb48:	b0 00                	mov    al,0x0
c002eb4a:	90                   	nop
c002eb4b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002eb4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002eb4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb50:	8b 00                	mov    eax,DWORD PTR [eax]
c002eb52:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002eb54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002eb54:	83 ec 0c             	sub    esp,0xc
c002eb57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb5b:	8b 00                	mov    eax,DWORD PTR [eax]
c002eb5d:	85 c0                	test   eax,eax
c002eb5f:	75 17                	jne    c002eb78 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c002eb61:	83 ec 0c             	sub    esp,0xc
c002eb64:	68 90 11 03 c0       	push   0xc0031190
c002eb69:	e8 40 16 ff ff       	call   c00201ae <KePanic(char const*)>
c002eb6e:	83 c4 10             	add    esp,0x10
c002eb71:	e9 96 00 00 00       	jmp    c002ec0c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c002eb76:	66 90                	xchg   ax,ax
c002eb78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eb7f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002eb82:	85 c0                	test   eax,eax
c002eb84:	0f 95 c0             	setne  al
c002eb87:	0f b6 c0             	movzx  eax,al
c002eb8a:	85 c0                	test   eax,eax
c002eb8c:	74 12                	je     c002eba0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c002eb8e:	83 ec 0c             	sub    esp,0xc
c002eb91:	68 db 11 03 c0       	push   0xc00311db
c002eb96:	e8 13 16 ff ff       	call   c00201ae <KePanic(char const*)>
c002eb9b:	83 c4 10             	add    esp,0x10
c002eb9e:	66 90                	xchg   ax,ax
c002eba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eba4:	8b 00                	mov    eax,DWORD PTR [eax]
c002eba6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002eba9:	85 c0                	test   eax,eax
c002ebab:	0f 94 c0             	sete   al
c002ebae:	0f b6 c0             	movzx  eax,al
c002ebb1:	85 c0                	test   eax,eax
c002ebb3:	74 33                	je     c002ebe8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c002ebb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebb9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ebbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebc3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ebca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebce:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ebd1:	83 f8 01             	cmp    eax,0x1
c002ebd4:	74 22                	je     c002ebf8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002ebd6:	83 ec 0c             	sub    esp,0xc
c002ebd9:	68 b4 11 03 c0       	push   0xc00311b4
c002ebde:	e8 cb 15 ff ff       	call   c00201ae <KePanic(char const*)>
c002ebe3:	83 c4 10             	add    esp,0x10
c002ebe6:	eb 10                	jmp    c002ebf8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002ebe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebec:	8b 00                	mov    eax,DWORD PTR [eax]
c002ebee:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002ebf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebf5:	89 10                	mov    DWORD PTR [eax],edx
c002ebf7:	90                   	nop
c002ebf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebfc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ebff:	8d 50 ff             	lea    edx,[eax-0x1]
c002ec02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec06:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ec09:	8d 76 00             	lea    esi,[esi+0x0]
c002ec0c:	83 c4 0c             	add    esp,0xc
c002ec0f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002ec10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002ec10:	83 ec 0c             	sub    esp,0xc
c002ec13:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002ec18:	75 12                	jne    c002ec2c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c002ec1a:	83 ec 0c             	sub    esp,0xc
c002ec1d:	68 58 11 03 c0       	push   0xc0031158
c002ec22:	e8 87 15 ff ff       	call   c00201ae <KePanic(char const*)>
c002ec27:	83 c4 10             	add    esp,0x10
c002ec2a:	66 90                	xchg   ax,ax
c002ec2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec30:	8b 00                	mov    eax,DWORD PTR [eax]
c002ec32:	85 c0                	test   eax,eax
c002ec34:	74 36                	je     c002ec6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002ec36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ec3d:	85 c0                	test   eax,eax
c002ec3f:	74 2b                	je     c002ec6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002ec41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec45:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ec48:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ec4c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002ec4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec53:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ec57:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ec5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ec61:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002ec68:	eb 6a                	jmp    c002ecd4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002ec6a:	66 90                	xchg   ax,ax
c002ec6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec70:	8b 00                	mov    eax,DWORD PTR [eax]
c002ec72:	85 c0                	test   eax,eax
c002ec74:	75 4e                	jne    c002ecc4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002ec76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ec7d:	85 c0                	test   eax,eax
c002ec7f:	75 43                	jne    c002ecc4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002ec81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec85:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ec89:	89 10                	mov    DWORD PTR [eax],edx
c002ec8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec8f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ec93:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ec96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ec9d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002eca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eca8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ecab:	85 c0                	test   eax,eax
c002ecad:	74 25                	je     c002ecd4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002ecaf:	83 ec 0c             	sub    esp,0xc
c002ecb2:	68 7a 11 03 c0       	push   0xc003117a
c002ecb7:	e8 f2 14 ff ff       	call   c00201ae <KePanic(char const*)>
c002ecbc:	83 c4 10             	add    esp,0x10
c002ecbf:	eb 13                	jmp    c002ecd4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002ecc1:	8d 76 00             	lea    esi,[esi+0x0]
c002ecc4:	83 ec 0c             	sub    esp,0xc
c002ecc7:	68 84 11 03 c0       	push   0xc0031184
c002eccc:	e8 dd 14 ff ff       	call   c00201ae <KePanic(char const*)>
c002ecd1:	83 c4 10             	add    esp,0x10
c002ecd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecd8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ecdb:	8d 50 01             	lea    edx,[eax+0x1]
c002ecde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ece2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ece5:	90                   	nop
c002ece6:	83 c4 0c             	add    esp,0xc
c002ece9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c002ecec <ACPI::~ACPI()>:
c002ecec:	83 ec 0c             	sub    esp,0xc
c002ecef:	ba c0 24 03 c0       	mov    edx,0xc00324c0
c002ecf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecf8:	89 10                	mov    DWORD PTR [eax],edx
c002ecfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecfe:	83 ec 0c             	sub    esp,0xc
c002ed01:	50                   	push   eax
c002ed02:	e8 11 c4 fe ff       	call   c001b118 <Device::~Device()>
c002ed07:	83 c4 10             	add    esp,0x10
c002ed0a:	90                   	nop
c002ed0b:	83 c4 0c             	add    esp,0xc
c002ed0e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002ed10 <ACPI::~ACPI()>:
c002ed10:	83 ec 0c             	sub    esp,0xc
c002ed13:	83 ec 0c             	sub    esp,0xc
c002ed16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ed1a:	e8 cd ff ff ff       	call   c002ecec <ACPI::~ACPI()>
c002ed1f:	83 c4 10             	add    esp,0x10
c002ed22:	83 ec 08             	sub    esp,0x8
c002ed25:	68 64 12 00 00       	push   0x1264
c002ed2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ed2e:	e8 35 a3 fe ff       	call   c0019068 <operator delete(void*, unsigned long)>
c002ed33:	83 c4 10             	add    esp,0x10
c002ed36:	83 c4 0c             	add    esp,0xc
c002ed39:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002ed3c <LinkedList<Device>::~LinkedList()>:
c002ed3c:	90                   	nop
c002ed3d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002ed40 <LinkedList<Device>::isEmpty()>:
c002ed40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ed44:	8b 00                	mov    eax,DWORD PTR [eax]
c002ed46:	85 c0                	test   eax,eax
c002ed48:	75 0e                	jne    c002ed58 <LinkedList<Device>::isEmpty()+0x18>
c002ed4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ed4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ed51:	85 c0                	test   eax,eax
c002ed53:	75 03                	jne    c002ed58 <LinkedList<Device>::isEmpty()+0x18>
c002ed55:	b0 01                	mov    al,0x1
c002ed57:	c3                   	ret    
c002ed58:	b0 00                	mov    al,0x0
c002ed5a:	90                   	nop
c002ed5b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002ed5c <LinkedList<Device>::getFirstElement()>:
c002ed5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ed60:	8b 00                	mov    eax,DWORD PTR [eax]
c002ed62:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c002ed64 <LinkedList<Device>::removeFirst()>:
c002ed64:	83 ec 0c             	sub    esp,0xc
c002ed67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed6b:	8b 00                	mov    eax,DWORD PTR [eax]
c002ed6d:	85 c0                	test   eax,eax
c002ed6f:	75 17                	jne    c002ed88 <LinkedList<Device>::removeFirst()+0x24>
c002ed71:	83 ec 0c             	sub    esp,0xc
c002ed74:	68 90 11 03 c0       	push   0xc0031190
c002ed79:	e8 30 14 ff ff       	call   c00201ae <KePanic(char const*)>
c002ed7e:	83 c4 10             	add    esp,0x10
c002ed81:	e9 92 00 00 00       	jmp    c002ee18 <LinkedList<Device>::removeFirst()+0xb4>
c002ed86:	66 90                	xchg   ax,ax
c002ed88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ed8f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002ed95:	85 c0                	test   eax,eax
c002ed97:	74 13                	je     c002edac <LinkedList<Device>::removeFirst()+0x48>
c002ed99:	83 ec 0c             	sub    esp,0xc
c002ed9c:	68 db 11 03 c0       	push   0xc00311db
c002eda1:	e8 08 14 ff ff       	call   c00201ae <KePanic(char const*)>
c002eda6:	83 c4 10             	add    esp,0x10
c002eda9:	8d 76 00             	lea    esi,[esi+0x0]
c002edac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edb0:	8b 00                	mov    eax,DWORD PTR [eax]
c002edb2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002edb8:	85 c0                	test   eax,eax
c002edba:	75 34                	jne    c002edf0 <LinkedList<Device>::removeFirst()+0x8c>
c002edbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edc0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002edc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002edd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edd5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002edd8:	83 f8 01             	cmp    eax,0x1
c002eddb:	74 27                	je     c002ee04 <LinkedList<Device>::removeFirst()+0xa0>
c002eddd:	83 ec 0c             	sub    esp,0xc
c002ede0:	68 b4 11 03 c0       	push   0xc00311b4
c002ede5:	e8 c4 13 ff ff       	call   c00201ae <KePanic(char const*)>
c002edea:	83 c4 10             	add    esp,0x10
c002eded:	eb 15                	jmp    c002ee04 <LinkedList<Device>::removeFirst()+0xa0>
c002edef:	90                   	nop
c002edf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edf4:	8b 00                	mov    eax,DWORD PTR [eax]
c002edf6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002edfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee00:	89 10                	mov    DWORD PTR [eax],edx
c002ee02:	66 90                	xchg   ax,ax
c002ee04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee08:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ee0b:	8d 50 ff             	lea    edx,[eax-0x1]
c002ee0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee12:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ee15:	8d 76 00             	lea    esi,[esi+0x0]
c002ee18:	83 c4 0c             	add    esp,0xc
c002ee1b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002ee1c <CPU::~CPU()>:
c002ee1c:	83 ec 0c             	sub    esp,0xc
c002ee1f:	ba 68 26 03 c0       	mov    edx,0xc0032668
c002ee24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee28:	89 10                	mov    DWORD PTR [eax],edx
c002ee2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee2e:	83 ec 0c             	sub    esp,0xc
c002ee31:	50                   	push   eax
c002ee32:	e8 e1 c2 fe ff       	call   c001b118 <Device::~Device()>
c002ee37:	83 c4 10             	add    esp,0x10
c002ee3a:	90                   	nop
c002ee3b:	83 c4 0c             	add    esp,0xc
c002ee3e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002ee40 <CPU::~CPU()>:
c002ee40:	83 ec 0c             	sub    esp,0xc
c002ee43:	83 ec 0c             	sub    esp,0xc
c002ee46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ee4a:	e8 cd ff ff ff       	call   c002ee1c <CPU::~CPU()>
c002ee4f:	83 c4 10             	add    esp,0x10
c002ee52:	83 ec 08             	sub    esp,0x8
c002ee55:	68 94 11 00 00       	push   0x1194
c002ee5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ee5e:	e8 05 a2 fe ff       	call   c0019068 <operator delete(void*, unsigned long)>
c002ee63:	83 c4 10             	add    esp,0x10
c002ee66:	83 c4 0c             	add    esp,0xc
c002ee69:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002ee6c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002ee6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002ee70:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002ee73:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002ee74 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002ee74:	90                   	nop
c002ee75:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c002ee78 <ThreadControlBlock::ThreadControlBlock()>:
c002ee78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee7c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002ee83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee87:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002ee8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee92:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c002ee99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee9d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002eea4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eea8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002eeaf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eeb3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002eeb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eebb:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002eebf:	90                   	nop
c002eec0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002eec4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002eec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eec8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002eece:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eed2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002eed9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eedd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002eee4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eee8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002eeee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eef2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002eef9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eefd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ef04:	90                   	nop
c002ef05:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002ef06 <PCI::~PCI()>:
c002ef06:	83 ec 0c             	sub    esp,0xc
c002ef09:	ba 88 35 03 c0       	mov    edx,0xc0033588
c002ef0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef12:	89 10                	mov    DWORD PTR [eax],edx
c002ef14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef18:	83 ec 0c             	sub    esp,0xc
c002ef1b:	50                   	push   eax
c002ef1c:	e8 8f bc fe ff       	call   c001abb0 <Bus::~Bus()>
c002ef21:	83 c4 10             	add    esp,0x10
c002ef24:	90                   	nop
c002ef25:	83 c4 0c             	add    esp,0xc
c002ef28:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002ef2a <PCI::~PCI()>:
c002ef2a:	83 ec 0c             	sub    esp,0xc
c002ef2d:	83 ec 0c             	sub    esp,0xc
c002ef30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ef34:	e8 cd ff ff ff       	call   c002ef06 <PCI::~PCI()>
c002ef39:	83 c4 10             	add    esp,0x10
c002ef3c:	83 ec 08             	sub    esp,0x8
c002ef3f:	68 5c 01 00 00       	push   0x15c
c002ef44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ef48:	e8 1b a1 fe ff       	call   c0019068 <operator delete(void*, unsigned long)>
c002ef4d:	83 c4 10             	add    esp,0x10
c002ef50:	83 c4 0c             	add    esp,0xc
c002ef53:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002ef54 <IDE::~IDE()>:
c002ef54:	83 ec 0c             	sub    esp,0xc
c002ef57:	ba 3c 36 03 c0       	mov    edx,0xc003363c
c002ef5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef60:	89 10                	mov    DWORD PTR [eax],edx
c002ef62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef66:	83 ec 0c             	sub    esp,0xc
c002ef69:	50                   	push   eax
c002ef6a:	e8 39 c6 fe ff       	call   c001b5a8 <HardDiskController::~HardDiskController()>
c002ef6f:	83 c4 10             	add    esp,0x10
c002ef72:	90                   	nop
c002ef73:	83 c4 0c             	add    esp,0xc
c002ef76:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002ef78 <IDE::~IDE()>:
c002ef78:	83 ec 0c             	sub    esp,0xc
c002ef7b:	83 ec 0c             	sub    esp,0xc
c002ef7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ef82:	e8 cd ff ff ff       	call   c002ef54 <IDE::~IDE()>
c002ef87:	83 c4 10             	add    esp,0x10
c002ef8a:	83 ec 08             	sub    esp,0x8
c002ef8d:	68 70 02 00 00       	push   0x270
c002ef92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ef96:	e8 cd a0 fe ff       	call   c0019068 <operator delete(void*, unsigned long)>
c002ef9b:	83 c4 10             	add    esp,0x10
c002ef9e:	83 c4 0c             	add    esp,0xc
c002efa1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002efa2 <SATABus::~SATABus()>:
c002efa2:	83 ec 0c             	sub    esp,0xc
c002efa5:	ba 8c 36 03 c0       	mov    edx,0xc003368c
c002efaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efae:	89 10                	mov    DWORD PTR [eax],edx
c002efb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efb4:	83 ec 0c             	sub    esp,0xc
c002efb7:	50                   	push   eax
c002efb8:	e8 eb c5 fe ff       	call   c001b5a8 <HardDiskController::~HardDiskController()>
c002efbd:	83 c4 10             	add    esp,0x10
c002efc0:	90                   	nop
c002efc1:	83 c4 0c             	add    esp,0xc
c002efc4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002efc6 <SATABus::~SATABus()>:
c002efc6:	83 ec 0c             	sub    esp,0xc
c002efc9:	83 ec 0c             	sub    esp,0xc
c002efcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002efd0:	e8 cd ff ff ff       	call   c002efa2 <SATABus::~SATABus()>
c002efd5:	83 c4 10             	add    esp,0x10
c002efd8:	83 ec 08             	sub    esp,0x8
c002efdb:	68 64 01 00 00       	push   0x164
c002efe0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002efe4:	e8 7f a0 fe ff       	call   c0019068 <operator delete(void*, unsigned long)>
c002efe9:	83 c4 10             	add    esp,0x10
c002efec:	83 c4 0c             	add    esp,0xc
c002efef:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c002eff0 <ATA::~ATA()>:
c002eff0:	83 ec 0c             	sub    esp,0xc
c002eff3:	ba cc 36 03 c0       	mov    edx,0xc00336cc
c002eff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002effc:	89 10                	mov    DWORD PTR [eax],edx
c002effe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f002:	83 ec 0c             	sub    esp,0xc
c002f005:	50                   	push   eax
c002f006:	e8 7f c6 fe ff       	call   c001b68a <PhysicalDisk::~PhysicalDisk()>
c002f00b:	83 c4 10             	add    esp,0x10
c002f00e:	90                   	nop
c002f00f:	83 c4 0c             	add    esp,0xc
c002f012:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002f014 <ATA::~ATA()>:
c002f014:	83 ec 0c             	sub    esp,0xc
c002f017:	83 ec 0c             	sub    esp,0xc
c002f01a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f01e:	e8 cd ff ff ff       	call   c002eff0 <ATA::~ATA()>
c002f023:	83 c4 10             	add    esp,0x10
c002f026:	83 ec 08             	sub    esp,0x8
c002f029:	68 7c 01 00 00       	push   0x17c
c002f02e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f032:	e8 31 a0 fe ff       	call   c0019068 <operator delete(void*, unsigned long)>
c002f037:	83 c4 10             	add    esp,0x10
c002f03a:	83 c4 0c             	add    esp,0xc
c002f03d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002f03e <ATAPI::~ATAPI()>:
c002f03e:	83 ec 0c             	sub    esp,0xc
c002f041:	ba 14 37 03 c0       	mov    edx,0xc0033714
c002f046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f04a:	89 10                	mov    DWORD PTR [eax],edx
c002f04c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f050:	83 ec 0c             	sub    esp,0xc
c002f053:	50                   	push   eax
c002f054:	e8 31 c6 fe ff       	call   c001b68a <PhysicalDisk::~PhysicalDisk()>
c002f059:	83 c4 10             	add    esp,0x10
c002f05c:	90                   	nop
c002f05d:	83 c4 0c             	add    esp,0xc
c002f060:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002f062 <ATAPI::~ATAPI()>:
c002f062:	83 ec 0c             	sub    esp,0xc
c002f065:	83 ec 0c             	sub    esp,0xc
c002f068:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f06c:	e8 cd ff ff ff       	call   c002f03e <ATAPI::~ATAPI()>
c002f071:	83 c4 10             	add    esp,0x10
c002f074:	83 ec 08             	sub    esp,0x8
c002f077:	68 84 01 00 00       	push   0x184
c002f07c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f080:	e8 e3 9f fe ff       	call   c0019068 <operator delete(void*, unsigned long)>
c002f085:	83 c4 10             	add    esp,0x10
c002f088:	83 c4 0c             	add    esp,0xc
c002f08b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002f08c <SATA::~SATA()>:
c002f08c:	83 ec 0c             	sub    esp,0xc
c002f08f:	ba d4 37 03 c0       	mov    edx,0xc00337d4
c002f094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f098:	89 10                	mov    DWORD PTR [eax],edx
c002f09a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f09e:	83 ec 0c             	sub    esp,0xc
c002f0a1:	50                   	push   eax
c002f0a2:	e8 e3 c5 fe ff       	call   c001b68a <PhysicalDisk::~PhysicalDisk()>
c002f0a7:	83 c4 10             	add    esp,0x10
c002f0aa:	90                   	nop
c002f0ab:	83 c4 0c             	add    esp,0xc
c002f0ae:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c002f0b0 <SATA::~SATA()>:
c002f0b0:	83 ec 0c             	sub    esp,0xc
c002f0b3:	83 ec 0c             	sub    esp,0xc
c002f0b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f0ba:	e8 cd ff ff ff       	call   c002f08c <SATA::~SATA()>
c002f0bf:	83 c4 10             	add    esp,0x10
c002f0c2:	83 ec 08             	sub    esp,0x8
c002f0c5:	68 7c 01 00 00       	push   0x17c
c002f0ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f0ce:	e8 95 9f fe ff       	call   c0019068 <operator delete(void*, unsigned long)>
c002f0d3:	83 c4 10             	add    esp,0x10
c002f0d6:	83 c4 0c             	add    esp,0xc
c002f0d9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002f0da <SATAPI::~SATAPI()>:
c002f0da:	83 ec 0c             	sub    esp,0xc
c002f0dd:	ba f8 38 03 c0       	mov    edx,0xc00338f8
c002f0e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0e6:	89 10                	mov    DWORD PTR [eax],edx
c002f0e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0ec:	83 ec 0c             	sub    esp,0xc
c002f0ef:	50                   	push   eax
c002f0f0:	e8 95 c5 fe ff       	call   c001b68a <PhysicalDisk::~PhysicalDisk()>
c002f0f5:	83 c4 10             	add    esp,0x10
c002f0f8:	90                   	nop
c002f0f9:	83 c4 0c             	add    esp,0xc
c002f0fc:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002f0fe <SATAPI::~SATAPI()>:
c002f0fe:	83 ec 0c             	sub    esp,0xc
c002f101:	83 ec 0c             	sub    esp,0xc
c002f104:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f108:	e8 cd ff ff ff       	call   c002f0da <SATAPI::~SATAPI()>
c002f10d:	83 c4 10             	add    esp,0x10
c002f110:	83 ec 08             	sub    esp,0x8
c002f113:	68 84 01 00 00       	push   0x184
c002f118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f11c:	e8 47 9f fe ff       	call   c0019068 <operator delete(void*, unsigned long)>
c002f121:	83 c4 10             	add    esp,0x10
c002f124:	83 c4 0c             	add    esp,0xc
c002f127:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002f128 <IOAPIC::~IOAPIC()>:
c002f128:	83 ec 0c             	sub    esp,0xc
c002f12b:	ba 38 39 03 c0       	mov    edx,0xc0033938
c002f130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f134:	89 10                	mov    DWORD PTR [eax],edx
c002f136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f13a:	83 ec 0c             	sub    esp,0xc
c002f13d:	50                   	push   eax
c002f13e:	e8 d5 bf fe ff       	call   c001b118 <Device::~Device()>
c002f143:	83 c4 10             	add    esp,0x10
c002f146:	90                   	nop
c002f147:	83 c4 0c             	add    esp,0xc
c002f14a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002f14c <IOAPIC::~IOAPIC()>:
c002f14c:	83 ec 0c             	sub    esp,0xc
c002f14f:	83 ec 0c             	sub    esp,0xc
c002f152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f156:	e8 cd ff ff ff       	call   c002f128 <IOAPIC::~IOAPIC()>
c002f15b:	83 c4 10             	add    esp,0x10
c002f15e:	83 ec 08             	sub    esp,0x8
c002f161:	68 68 01 00 00       	push   0x168
c002f166:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f16a:	e8 f9 9e fe ff       	call   c0019068 <operator delete(void*, unsigned long)>
c002f16f:	83 c4 10             	add    esp,0x10
c002f172:	83 c4 0c             	add    esp,0xc
c002f175:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002f178 <APICTimer::~APICTimer()>:
c002f178:	83 ec 0c             	sub    esp,0xc
c002f17b:	ba 80 39 03 c0       	mov    edx,0xc0033980
c002f180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f184:	89 10                	mov    DWORD PTR [eax],edx
c002f186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f18a:	83 ec 0c             	sub    esp,0xc
c002f18d:	50                   	push   eax
c002f18e:	e8 61 da fe ff       	call   c001cbf4 <Timer::~Timer()>
c002f193:	83 c4 10             	add    esp,0x10
c002f196:	90                   	nop
c002f197:	83 c4 0c             	add    esp,0xc
c002f19a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002f19c <APICTimer::~APICTimer()>:
c002f19c:	83 ec 0c             	sub    esp,0xc
c002f19f:	83 ec 0c             	sub    esp,0xc
c002f1a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f1a6:	e8 cd ff ff ff       	call   c002f178 <APICTimer::~APICTimer()>
c002f1ab:	83 c4 10             	add    esp,0x10
c002f1ae:	83 ec 08             	sub    esp,0x8
c002f1b1:	68 60 01 00 00       	push   0x160
c002f1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f1ba:	e8 a9 9e fe ff       	call   c0019068 <operator delete(void*, unsigned long)>
c002f1bf:	83 c4 10             	add    esp,0x10
c002f1c2:	83 c4 0c             	add    esp,0xc
c002f1c5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002f1c8 <PIT::~PIT()>:
c002f1c8:	83 ec 0c             	sub    esp,0xc
c002f1cb:	ba d0 39 03 c0       	mov    edx,0xc00339d0
c002f1d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1d4:	89 10                	mov    DWORD PTR [eax],edx
c002f1d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1da:	83 ec 0c             	sub    esp,0xc
c002f1dd:	50                   	push   eax
c002f1de:	e8 11 da fe ff       	call   c001cbf4 <Timer::~Timer()>
c002f1e3:	83 c4 10             	add    esp,0x10
c002f1e6:	90                   	nop
c002f1e7:	83 c4 0c             	add    esp,0xc
c002f1ea:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002f1ec <PIT::~PIT()>:
c002f1ec:	83 ec 0c             	sub    esp,0xc
c002f1ef:	83 ec 0c             	sub    esp,0xc
c002f1f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f1f6:	e8 cd ff ff ff       	call   c002f1c8 <PIT::~PIT()>
c002f1fb:	83 c4 10             	add    esp,0x10
c002f1fe:	83 ec 08             	sub    esp,0x8
c002f201:	68 5c 01 00 00       	push   0x15c
c002f206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f20a:	e8 59 9e fe ff       	call   c0019068 <operator delete(void*, unsigned long)>
c002f20f:	83 c4 10             	add    esp,0x10
c002f212:	83 c4 0c             	add    esp,0xc
c002f215:	c3                   	ret    

Disassembly of section userkernel:

c0035000 <KiDefaultSignalHandlerAbort(int)>:
c0035000:	57                   	push   edi
c0035001:	b9 07 00 00 00       	mov    ecx,0x7
c0035006:	56                   	push   esi
c0035007:	be bb 27 03 c0       	mov    esi,0xc00327bb
c003500c:	83 ec 24             	sub    esp,0x24
c003500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0035013:	fc                   	cld    
c0035014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0035016:	8d 44 24 04          	lea    eax,[esp+0x4]
c003501a:	50                   	push   eax
c003501b:	6a 00                	push   0x0
c003501d:	6a 38                	push   0x38
c003501f:	6a 01                	push   0x1
c0035021:	e8 2c 00 00 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0035026:	83 c4 34             	add    esp,0x34
c0035029:	5e                   	pop    esi
c003502a:	5f                   	pop    edi
c003502b:	c3                   	ret    

c003502c <KiDefaultSignalHandlerTerminate(int)>:
c003502c:	57                   	push   edi
c003502d:	b9 08 00 00 00       	mov    ecx,0x8
c0035032:	56                   	push   esi
c0035033:	be d7 27 03 c0       	mov    esi,0xc00327d7
c0035038:	83 ec 24             	sub    esp,0x24
c003503b:	89 e7                	mov    edi,esp
c003503d:	fc                   	cld    
c003503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0035040:	54                   	push   esp
c0035041:	6a 00                	push   0x0
c0035043:	6a 37                	push   0x37
c0035045:	6a 01                	push   0x1
c0035047:	e8 06 00 00 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c003504c:	83 c4 34             	add    esp,0x34
c003504f:	5e                   	pop    esi
c0035050:	5f                   	pop    edi
c0035051:	c3                   	ret    

c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0035052:	53                   	push   ebx
c0035053:	83 ec 10             	sub    esp,0x10
c0035056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c003505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c003505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0035062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0035066:	cd 60                	int    0x60
c0035068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c003506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0035070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0035074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0035078:	83 c4 10             	add    esp,0x10
c003507b:	5b                   	pop    ebx
c003507c:	c3                   	ret    

Disassembly of section align_previous:

c0036000 <DO_NOT_DELETE()>:
c0036000:	c3                   	ret    
