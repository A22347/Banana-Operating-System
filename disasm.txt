
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 72 f8 00 00       	call   c000f892 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 c3 71 02 00       	call   c00271e8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 44 7d 02 c0       	mov    ebx,0xc0027d44
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 50 7d 02 c0    	cmp    ebx,0xc0027d50
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 78 c1 02 c0       	mov    eax,0xc002c178
c0000049:	3d 78 c1 02 c0       	cmp    eax,0xc002c178
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 78 c1 02 c0       	push   0xc002c178
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 78 c1 02 c0       	mov    eax,0xc002c178
c0000075:	2d 78 c1 02 c0       	sub    eax,0xc002c178
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 78 c1 02 c0       	push   0xc002c178
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d a8 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c7a8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 58 7d 02 c0       	mov    ebx,0xc0027d58
c00000bb:	81 eb 54 7d 02 c0    	sub    ebx,0xc0027d54
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 54 7d 02 c0       	mov    esi,0xc0027d54
c00000ca:	a1 ac c7 02 c0       	mov    eax,ds:0xc002c7ac
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 ac c7 02 c0       	mov    ds:0xc002c7ac,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 ac c7 02 c0       	mov    eax,ds:0xc002c7ac
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 78 c1 02 c0       	push   0xc002c178
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 a8 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c7a8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 b0 c7 02 c0       	push   0xc002c7b0
c000012c:	68 78 c1 02 c0       	push   0xc002c178
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000179:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000017c:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c000017f:	0f 02 ff             	lar    edi,di
c0000182:	c1 ef 0d             	shr    edi,0xd
c0000185:	66 81 e7 03 00       	and    di,0x3
c000018a:	75 09                	jne    c0000195 <voodooXADD.usermode>
c000018c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c000018f:	81 c4 14 00 00 00    	add    esp,0x14

c0000195 <voodooXADD.usermode>:
c0000195:	89 35 30 02 00 c0    	mov    DWORD PTR ds:0xc0000230,esi
c000019b:	89 25 2c 02 00 c0    	mov    DWORD PTR ds:0xc000022c,esp
c00001a1:	60                   	pusha  
c00001a2:	b0 90                	mov    al,0x90
c00001a4:	b9 20 00 00 00       	mov    ecx,0x20
c00001a9:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001ae:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001b0:	61                   	popa   
c00001b1:	60                   	pusha  
c00001b2:	89 d6                	mov    esi,edx
c00001b4:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001bb:	61                   	popa   
c00001bc:	60                   	pusha  
c00001bd:	89 d6                	mov    esi,edx
c00001bf:	bf 13 02 00 c0       	mov    edi,0xc0000213
c00001c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001c6:	61                   	popa   
c00001c7:	b1 90                	mov    cl,0x90
c00001c9:	85 db                	test   ebx,ebx
c00001cb:	74 06                	je     c00001d3 <voodooXADD.skipChange>
c00001cd:	8a 8b 02 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdfe]

c00001d3 <voodooXADD.skipChange>:
c00001d3:	88 8b 03 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdfd],cl
c00001d9:	80 ab 04 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdfc],0x3a
c00001e0:	88 8b 13 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffded],cl
c00001e6:	80 ab 14 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffdec],0xbe
c00001ed:	89 c4                	mov    esp,eax
c00001ef:	81 c4 10 00 00 00    	add    esp,0x10
c00001f5:	5f                   	pop    edi
c00001f6:	5e                   	pop    esi
c00001f7:	5d                   	pop    ebp
c00001f8:	5b                   	pop    ebx
c00001f9:	5b                   	pop    ebx
c00001fa:	5a                   	pop    edx
c00001fb:	59                   	pop    ecx
c00001fc:	58                   	pop    eax
c00001fd:	8b 25 30 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000230

c0000203 <voodooXADD.helper>:
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	90                   	nop
c0000217:	90                   	nop
c0000218:	90                   	nop
c0000219:	90                   	nop
c000021a:	90                   	nop
c000021b:	90                   	nop
c000021c:	90                   	nop
c000021d:	90                   	nop
c000021e:	90                   	nop
c000021f:	90                   	nop
c0000220:	90                   	nop
c0000221:	90                   	nop
c0000222:	90                   	nop
c0000223:	8b 25 2c 02 00 c0    	mov    esp,DWORD PTR ds:0xc000022c
c0000229:	61                   	popa   
c000022a:	c9                   	leave  
c000022b:	c3                   	ret    

c000022c <voodooXADD.oldStack>:
c000022c:	00 00                	add    BYTE PTR [eax],al
	...

c0000230 <voodooXADD.newStack>:
c0000230:	00 00                	add    BYTE PTR [eax],al
	...

c0000234 <doTPAUSE>:
c0000234:	fb                   	sti    
c0000235:	31 c0                	xor    eax,eax
c0000237:	31 d2                	xor    edx,edx
c0000239:	66 0f ae f0          	tpause eax
c000023d:	c3                   	ret    

c000023e <hasLegacyFPU>:
c000023e:	0f 20 c2             	mov    edx,cr0
c0000241:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000247:	0f 22 c2             	mov    cr0,edx
c000024a:	db e3                	fninit 
c000024c:	dd 3d 61 02 00 c0    	fnstsw WORD PTR ds:0xc0000261
c0000252:	31 c0                	xor    eax,eax
c0000254:	66 81 3d 61 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000261,0x0
c000025d:	75 01                	jne    c0000260 <hasLegacyFPU.nofpu>

c000025f <hasLegacyFPU.hasfpu>:
c000025f:	40                   	inc    eax

c0000260 <hasLegacyFPU.nofpu>:
c0000260:	c3                   	ret    

c0000261 <testword>:
c0000261:	aa                   	stos   BYTE PTR es:[edi],al
c0000262:	55                   	push   ebp

c0000263 <is486>:
c0000263:	0f 09                	wbinvd 
c0000265:	31 c0                	xor    eax,eax
c0000267:	40                   	inc    eax
c0000268:	c3                   	ret    
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	90                   	nop
c000027e:	90                   	nop
c000027f:	90                   	nop
c0000280:	90                   	nop
c0000281:	90                   	nop
c0000282:	90                   	nop
c0000283:	90                   	nop
c0000284:	90                   	nop
c0000285:	90                   	nop
c0000286:	90                   	nop
c0000287:	90                   	nop
c0000288:	90                   	nop
c0000289:	90                   	nop
c000028a:	90                   	nop
c000028b:	90                   	nop
c000028c:	90                   	nop
c000028d:	90                   	nop
c000028e:	90                   	nop
c000028f:	90                   	nop
c0000290:	90                   	nop
c0000291:	90                   	nop
c0000292:	90                   	nop
c0000293:	90                   	nop
c0000294:	90                   	nop
c0000295:	90                   	nop
c0000296:	31 c0                	xor    eax,eax
c0000298:	c3                   	ret    

c0000299 <detectCPUID>:
c0000299:	9c                   	pushf  
c000029a:	9c                   	pushf  
c000029b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002a2:	9d                   	popf   
c00002a3:	9c                   	pushf  
c00002a4:	58                   	pop    eax
c00002a5:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002a8:	9d                   	popf   
c00002a9:	25 00 00 20 00       	and    eax,0x200000
c00002ae:	c3                   	ret    

c00002af <goToVM86>:
c00002af:	55                   	push   ebp
c00002b0:	89 e5                	mov    ebp,esp
c00002b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00002b5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00002b8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00002bb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00002be:	25 ff ff 00 00       	and    eax,0xffff
c00002c3:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00002c9:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002cf:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002d5:	52                   	push   edx
c00002d6:	51                   	push   ecx
c00002d7:	68 02 02 02 00       	push   0x20202
c00002dc:	53                   	push   ebx
c00002dd:	50                   	push   eax
c00002de:	cf                   	iret   

c00002df <goToUsermode>:
c00002df:	55                   	push   ebp
c00002e0:	89 e5                	mov    ebp,esp
c00002e2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002e5:	66 b8 23 00          	mov    ax,0x23
c00002e9:	66 8e d8             	mov    ds,ax
c00002ec:	66 8e c0             	mov    es,ax
c00002ef:	66 8e e0             	mov    fs,ax
c00002f2:	66 8e e8             	mov    gs,ax
c00002f5:	89 e0                	mov    eax,esp
c00002f7:	68 23 00 00 00       	push   0x23
c00002fc:	50                   	push   eax
c00002fd:	68 02 02 00 00       	push   0x202
c0000302:	68 1b 00 00 00       	push   0x1b
c0000307:	53                   	push   ebx
c0000308:	cf                   	iret   

c0000309 <switchToThreadASMFirstTime>:
c0000309:	9c                   	pushf  
c000030a:	fa                   	cli    
c000030b:	50                   	push   eax
c000030c:	53                   	push   ebx
c000030d:	51                   	push   ecx
c000030e:	52                   	push   edx
c000030f:	56                   	push   esi
c0000310:	57                   	push   edi
c0000311:	55                   	push   ebp
c0000312:	e9 11 00 00 00       	jmp    c0000328 <commonThreadSwitch>

c0000317 <switchToThreadASM>:
c0000317:	9c                   	pushf  
c0000318:	50                   	push   eax
c0000319:	53                   	push   ebx
c000031a:	51                   	push   ecx
c000031b:	52                   	push   edx
c000031c:	56                   	push   esi
c000031d:	57                   	push   edi
c000031e:	55                   	push   ebp
c000031f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000325:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000328 <commonThreadSwitch>:
c0000328:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000032c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000332:	8b 06                	mov    eax,DWORD PTR [esi]
c0000334:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000337:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000033a:	0f 20 d9             	mov    ecx,cr3
c000033d:	39 c8                	cmp    eax,ecx
c000033f:	74 03                	je     c0000344 <commonThreadSwitch.doneVAS>
c0000341:	0f 22 d8             	mov    cr3,eax

c0000344 <commonThreadSwitch.doneVAS>:
c0000344:	85 d2                	test   edx,edx
c0000346:	75 11                	jne    c0000359 <commonThreadSwitch.firstTime>
c0000348:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000034b:	e8 5c c7 01 00       	call   c001caac <changeTSS>
c0000350:	5d                   	pop    ebp
c0000351:	5f                   	pop    edi
c0000352:	5e                   	pop    esi
c0000353:	5a                   	pop    edx
c0000354:	59                   	pop    ecx
c0000355:	5b                   	pop    ebx
c0000356:	58                   	pop    eax
c0000357:	9d                   	popf   
c0000358:	c3                   	ret    

c0000359 <commonThreadSwitch.firstTime>:
c0000359:	fa                   	cli    
c000035a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000035d:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000362:	60                   	pusha  
c0000363:	e8 f5 21 01 00       	call   c001255d <mapVASFirstTime>
c0000368:	61                   	popa   
c0000369:	89 c4                	mov    esp,eax
c000036b:	56                   	push   esi
c000036c:	52                   	push   edx
c000036d:	e8 3a c7 01 00       	call   c001caac <changeTSS>
c0000372:	5a                   	pop    edx
c0000373:	5e                   	pop    esi
c0000374:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000037b:	5d                   	pop    ebp
c000037c:	5f                   	pop    edi
c000037d:	5e                   	pop    esi
c000037e:	59                   	pop    ecx
c000037f:	59                   	pop    ecx
c0000380:	5b                   	pop    ebx
c0000381:	58                   	pop    eax
c0000382:	81 c4 04 00 00 00    	add    esp,0x4
c0000388:	6a 02                	push   0x2
c000038a:	9d                   	popf   
c000038b:	52                   	push   edx
c000038c:	e8 88 cb 01 00       	call   c001cf19 <taskStartupFunction>
c0000391:	5a                   	pop    edx
c0000392:	50                   	push   eax
c0000393:	ff d2                	call   edx
c0000395:	e8 36 d1 01 00       	call   c001d4d0 <taskReturned>
c000039a:	e9 fb ff ff ff       	jmp    c000039a <commonThreadSwitch.firstTime+0x41>

c000039f <asmQuickAcquireLock>:
c000039f:	55                   	push   ebp
c00003a0:	89 e5                	mov    ebp,esp
c00003a2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003a5 <asmQuickAcquireLock.retry>:
c00003a5:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003aa:	72 02                	jb     c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003ac:	fa                   	cli    
c00003ad:	c3                   	ret    

c00003ae <asmQuickAcquireLock.spin_with_pause>:
c00003ae:	f3 90                	pause  
c00003b0:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003b6:	75 f6                	jne    c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003b8:	e9 e8 ff ff ff       	jmp    c00003a5 <asmQuickAcquireLock.retry>

c00003bd <asmQuickReleaseLock>:
c00003bd:	55                   	push   ebp
c00003be:	89 e5                	mov    ebp,esp
c00003c0:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003c7:	5d                   	pop    ebp
c00003c8:	c3                   	ret    

c00003c9 <asmAcquireLock>:
c00003c9:	55                   	push   ebp
c00003ca:	89 e5                	mov    ebp,esp
c00003cc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003cf <asmAcquireLock.retry>:
c00003cf:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003d4:	72 05                	jb     c00003db <asmAcquireLock.spin_with_pause>
c00003d6:	9c                   	pushf  
c00003d7:	58                   	pop    eax
c00003d8:	fa                   	cli    
c00003d9:	5d                   	pop    ebp
c00003da:	c3                   	ret    

c00003db <asmAcquireLock.spin_with_pause>:
c00003db:	f3 90                	pause  
c00003dd:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003e3:	75 f6                	jne    c00003db <asmAcquireLock.spin_with_pause>
c00003e5:	e9 e5 ff ff ff       	jmp    c00003cf <asmAcquireLock.retry>

c00003ea <asmReleaseLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003f3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003f9:	52                   	push   edx
c00003fa:	9d                   	popf   
c00003fb:	5d                   	pop    ebp
c00003fc:	c3                   	ret    

c00003fd <loadGDT>:
c00003fd:	0f 01 15 f0 cb 02 c0 	lgdtd  ds:0xc002cbf0
c0000404:	66 b8 10 00          	mov    ax,0x10
c0000408:	66 8e d8             	mov    ds,ax
c000040b:	66 8e c0             	mov    es,ax
c000040e:	66 8e e0             	mov    fs,ax
c0000411:	66 8e e8             	mov    gs,ax
c0000414:	66 8e d0             	mov    ss,ax
c0000417:	e9 00 00 00 00       	jmp    c000041c <flush2>

c000041c <flush2>:
c000041c:	c3                   	ret    

c000041d <isr0>:
c000041d:	fa                   	cli    
c000041e:	68 00 00 00 00       	push   0x0
c0000423:	68 00 00 00 00       	push   0x0
c0000428:	e9 44 01 00 00       	jmp    c0000571 <int_common_stub>

c000042d <isr1>:
c000042d:	fa                   	cli    
c000042e:	6a 00                	push   0x0
c0000430:	6a 01                	push   0x1
c0000432:	e9 3a 01 00 00       	jmp    c0000571 <int_common_stub>

c0000437 <isr2>:
c0000437:	fa                   	cli    
c0000438:	6a 00                	push   0x0
c000043a:	6a 02                	push   0x2
c000043c:	e9 30 01 00 00       	jmp    c0000571 <int_common_stub>

c0000441 <isr3>:
c0000441:	fa                   	cli    
c0000442:	6a 00                	push   0x0
c0000444:	6a 03                	push   0x3
c0000446:	e9 26 01 00 00       	jmp    c0000571 <int_common_stub>

c000044b <isr4>:
c000044b:	fa                   	cli    
c000044c:	6a 00                	push   0x0
c000044e:	6a 04                	push   0x4
c0000450:	e9 1c 01 00 00       	jmp    c0000571 <int_common_stub>

c0000455 <isr5>:
c0000455:	fa                   	cli    
c0000456:	6a 00                	push   0x0
c0000458:	6a 05                	push   0x5
c000045a:	e9 12 01 00 00       	jmp    c0000571 <int_common_stub>

c000045f <isr6>:
c000045f:	fa                   	cli    
c0000460:	6a 00                	push   0x0
c0000462:	6a 06                	push   0x6
c0000464:	e9 08 01 00 00       	jmp    c0000571 <int_common_stub>

c0000469 <isr7>:
c0000469:	fa                   	cli    
c000046a:	6a 00                	push   0x0
c000046c:	6a 07                	push   0x7
c000046e:	e9 fe 00 00 00       	jmp    c0000571 <int_common_stub>

c0000473 <isr8>:
c0000473:	fa                   	cli    
c0000474:	6a 08                	push   0x8
c0000476:	e9 f6 00 00 00       	jmp    c0000571 <int_common_stub>

c000047b <isr9>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 09                	push   0x9
c0000480:	e9 ec 00 00 00       	jmp    c0000571 <int_common_stub>

c0000485 <isr10>:
c0000485:	fa                   	cli    
c0000486:	6a 0a                	push   0xa
c0000488:	e9 e4 00 00 00       	jmp    c0000571 <int_common_stub>

c000048d <isr11>:
c000048d:	fa                   	cli    
c000048e:	6a 0b                	push   0xb
c0000490:	e9 dc 00 00 00       	jmp    c0000571 <int_common_stub>

c0000495 <isr12>:
c0000495:	fa                   	cli    
c0000496:	6a 0c                	push   0xc
c0000498:	e9 d4 00 00 00       	jmp    c0000571 <int_common_stub>

c000049d <isr13>:
c000049d:	fa                   	cli    
c000049e:	6a 0d                	push   0xd
c00004a0:	e9 cc 00 00 00       	jmp    c0000571 <int_common_stub>

c00004a5 <isr14>:
c00004a5:	fa                   	cli    
c00004a6:	6a 0e                	push   0xe
c00004a8:	e9 c4 00 00 00       	jmp    c0000571 <int_common_stub>

c00004ad <isr15>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 0f                	push   0xf
c00004b2:	e9 ba 00 00 00       	jmp    c0000571 <int_common_stub>

c00004b7 <isr16>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 10                	push   0x10
c00004bc:	e9 b0 00 00 00       	jmp    c0000571 <int_common_stub>

c00004c1 <isr17>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 11                	push   0x11
c00004c6:	e9 a6 00 00 00       	jmp    c0000571 <int_common_stub>

c00004cb <isr18>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 12                	push   0x12
c00004d0:	e9 9c 00 00 00       	jmp    c0000571 <int_common_stub>

c00004d5 <irq3>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 23                	push   0x23
c00004da:	e9 92 00 00 00       	jmp    c0000571 <int_common_stub>

c00004df <irq4>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 24                	push   0x24
c00004e4:	e9 88 00 00 00       	jmp    c0000571 <int_common_stub>

c00004e9 <irq5>:
c00004e9:	fa                   	cli    
c00004ea:	6a 00                	push   0x0
c00004ec:	6a 25                	push   0x25
c00004ee:	e9 7e 00 00 00       	jmp    c0000571 <int_common_stub>

c00004f3 <irq6>:
c00004f3:	fa                   	cli    
c00004f4:	6a 00                	push   0x0
c00004f6:	6a 26                	push   0x26
c00004f8:	e9 74 00 00 00       	jmp    c0000571 <int_common_stub>

c00004fd <irq7>:
c00004fd:	fa                   	cli    
c00004fe:	6a 00                	push   0x0
c0000500:	6a 27                	push   0x27
c0000502:	e9 6a 00 00 00       	jmp    c0000571 <int_common_stub>

c0000507 <irq8>:
c0000507:	fa                   	cli    
c0000508:	6a 00                	push   0x0
c000050a:	6a 28                	push   0x28
c000050c:	e9 60 00 00 00       	jmp    c0000571 <int_common_stub>

c0000511 <irq9>:
c0000511:	fa                   	cli    
c0000512:	6a 00                	push   0x0
c0000514:	6a 29                	push   0x29
c0000516:	e9 56 00 00 00       	jmp    c0000571 <int_common_stub>

c000051b <irq10>:
c000051b:	fa                   	cli    
c000051c:	6a 00                	push   0x0
c000051e:	6a 2a                	push   0x2a
c0000520:	e9 4c 00 00 00       	jmp    c0000571 <int_common_stub>

c0000525 <irq11>:
c0000525:	fa                   	cli    
c0000526:	6a 00                	push   0x0
c0000528:	6a 2b                	push   0x2b
c000052a:	e9 42 00 00 00       	jmp    c0000571 <int_common_stub>

c000052f <irq12>:
c000052f:	fa                   	cli    
c0000530:	6a 00                	push   0x0
c0000532:	6a 2c                	push   0x2c
c0000534:	e9 38 00 00 00       	jmp    c0000571 <int_common_stub>

c0000539 <irq13>:
c0000539:	fa                   	cli    
c000053a:	6a 00                	push   0x0
c000053c:	6a 2d                	push   0x2d
c000053e:	e9 2e 00 00 00       	jmp    c0000571 <int_common_stub>

c0000543 <irq14>:
c0000543:	fa                   	cli    
c0000544:	6a 00                	push   0x0
c0000546:	6a 2e                	push   0x2e
c0000548:	e9 24 00 00 00       	jmp    c0000571 <int_common_stub>

c000054d <irq15>:
c000054d:	fa                   	cli    
c000054e:	6a 00                	push   0x0
c0000550:	6a 2f                	push   0x2f
c0000552:	e9 1a 00 00 00       	jmp    c0000571 <int_common_stub>

c0000557 <irq1>:
c0000557:	fa                   	cli    
c0000558:	6a 00                	push   0x0
c000055a:	6a 21                	push   0x21
c000055c:	eb 13                	jmp    c0000571 <int_common_stub>

c000055e <irq2>:
c000055e:	fa                   	cli    
c000055f:	6a 00                	push   0x0
c0000561:	6a 22                	push   0x22
c0000563:	eb 0c                	jmp    c0000571 <int_common_stub>

c0000565 <isr96>:
c0000565:	6a 00                	push   0x0
c0000567:	6a 60                	push   0x60
c0000569:	fb                   	sti    
c000056a:	eb 05                	jmp    c0000571 <int_common_stub>

c000056c <irq0>:
c000056c:	fa                   	cli    
c000056d:	6a 00                	push   0x0
c000056f:	6a 20                	push   0x20

c0000571 <int_common_stub>:
c0000571:	60                   	pusha  
c0000572:	1e                   	push   ds
c0000573:	06                   	push   es
c0000574:	0f a0                	push   fs
c0000576:	0f a8                	push   gs
c0000578:	66 b8 10 00          	mov    ax,0x10
c000057c:	66 8e d8             	mov    ds,ax
c000057f:	66 8e c0             	mov    es,ax
c0000582:	66 8e e0             	mov    fs,ax
c0000585:	66 8e e8             	mov    gs,ax
c0000588:	54                   	push   esp
c0000589:	e8 bf 3e 01 00       	call   c001444d <int_handler>
c000058e:	81 c4 04 00 00 00    	add    esp,0x4
c0000594:	0f a9                	pop    gs
c0000596:	0f a1                	pop    fs
c0000598:	07                   	pop    es
c0000599:	1f                   	pop    ds
c000059a:	61                   	popa   
c000059b:	81 c4 08 00 00 00    	add    esp,0x8
c00005a1:	cf                   	iret   

c00005a2 <irq16>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 30                	push   0x30
c00005a7:	e9 c5 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005ac <irq17>:
c00005ac:	fa                   	cli    
c00005ad:	6a 00                	push   0x0
c00005af:	6a 31                	push   0x31
c00005b1:	e9 bb ff ff ff       	jmp    c0000571 <int_common_stub>

c00005b6 <irq18>:
c00005b6:	fa                   	cli    
c00005b7:	6a 00                	push   0x0
c00005b9:	6a 32                	push   0x32
c00005bb:	e9 b1 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005c0 <irq19>:
c00005c0:	fa                   	cli    
c00005c1:	6a 00                	push   0x0
c00005c3:	6a 33                	push   0x33
c00005c5:	e9 a7 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005ca <irq20>:
c00005ca:	fa                   	cli    
c00005cb:	6a 00                	push   0x0
c00005cd:	6a 34                	push   0x34
c00005cf:	e9 9d ff ff ff       	jmp    c0000571 <int_common_stub>

c00005d4 <irq21>:
c00005d4:	fa                   	cli    
c00005d5:	6a 00                	push   0x0
c00005d7:	6a 35                	push   0x35
c00005d9:	e9 93 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005de <irq22>:
c00005de:	fa                   	cli    
c00005df:	6a 00                	push   0x0
c00005e1:	6a 36                	push   0x36
c00005e3:	e9 89 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005e8 <irq23>:
c00005e8:	fa                   	cli    
c00005e9:	6a 00                	push   0x0
c00005eb:	6a 37                	push   0x37
c00005ed:	e9 7f ff ff ff       	jmp    c0000571 <int_common_stub>

c00005f2 <memcmp>:
c00005f2:	56                   	push   esi
c00005f3:	53                   	push   ebx
c00005f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00005f8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000600:	01 d6                	add    esi,edx
c0000602:	39 f2                	cmp    edx,esi
c0000604:	74 0e                	je     c0000614 <memcmp+0x22>
c0000606:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000609:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000060c:	38 c8                	cmp    al,cl
c000060e:	75 08                	jne    c0000618 <memcmp+0x26>
c0000610:	42                   	inc    edx
c0000611:	43                   	inc    ebx
c0000612:	eb ee                	jmp    c0000602 <memcmp+0x10>
c0000614:	31 c0                	xor    eax,eax
c0000616:	eb 02                	jmp    c000061a <memcmp+0x28>
c0000618:	29 c8                	sub    eax,ecx
c000061a:	5b                   	pop    ebx
c000061b:	5e                   	pop    esi
c000061c:	c3                   	ret    

c000061d <memmove>:
c000061d:	56                   	push   esi
c000061e:	53                   	push   ebx
c000061f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000623:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000062b:	39 c8                	cmp    eax,ecx
c000062d:	73 12                	jae    c0000641 <memmove+0x24>
c000062f:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000632:	89 c3                	mov    ebx,eax
c0000634:	39 f1                	cmp    ecx,esi
c0000636:	74 1a                	je     c0000652 <memmove+0x35>
c0000638:	8a 11                	mov    dl,BYTE PTR [ecx]
c000063a:	43                   	inc    ebx
c000063b:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c000063e:	41                   	inc    ecx
c000063f:	eb f3                	jmp    c0000634 <memmove+0x17>
c0000641:	76 0f                	jbe    c0000652 <memmove+0x35>
c0000643:	85 d2                	test   edx,edx
c0000645:	74 0b                	je     c0000652 <memmove+0x35>
c0000647:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000064b:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000064f:	4a                   	dec    edx
c0000650:	eb f1                	jmp    c0000643 <memmove+0x26>
c0000652:	5b                   	pop    ebx
c0000653:	5e                   	pop    esi
c0000654:	c3                   	ret    

c0000655 <memcpy>:
c0000655:	57                   	push   edi
c0000656:	56                   	push   esi
c0000657:	53                   	push   ebx
c0000658:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000065c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000660:	89 da                	mov    edx,ebx
c0000662:	89 d9                	mov    ecx,ebx
c0000664:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000668:	83 e2 fc             	and    edx,0xfffffffc
c000066b:	c1 e9 02             	shr    ecx,0x2
c000066e:	89 c7                	mov    edi,eax
c0000670:	fc                   	cld    
c0000671:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000673:	8d 0c 16             	lea    ecx,[esi+edx*1]
c0000676:	01 c2                	add    edx,eax
c0000678:	01 de                	add    esi,ebx
c000067a:	39 f1                	cmp    ecx,esi
c000067c:	74 09                	je     c0000687 <memcpy+0x32>
c000067e:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000680:	42                   	inc    edx
c0000681:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000684:	41                   	inc    ecx
c0000685:	eb f3                	jmp    c000067a <memcpy+0x25>
c0000687:	5b                   	pop    ebx
c0000688:	5e                   	pop    esi
c0000689:	5f                   	pop    edi
c000068a:	c3                   	ret    

c000068b <memset>:
c000068b:	53                   	push   ebx
c000068c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000690:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000694:	89 c2                	mov    edx,eax
c0000696:	01 c1                	add    ecx,eax
c0000698:	39 ca                	cmp    edx,ecx
c000069a:	74 0a                	je     c00006a6 <memset+0x1b>
c000069c:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006a0:	42                   	inc    edx
c00006a1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006a4:	eb f2                	jmp    c0000698 <memset+0xd>
c00006a6:	5b                   	pop    ebx
c00006a7:	c3                   	ret    

c00006a8 <strlen>:
c00006a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006ac:	31 c0                	xor    eax,eax
c00006ae:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b2:	74 03                	je     c00006b7 <strlen+0xf>
c00006b4:	40                   	inc    eax
c00006b5:	eb f7                	jmp    c00006ae <strlen+0x6>
c00006b7:	c3                   	ret    

c00006b8 <strpbrk>:
c00006b8:	53                   	push   ebx
c00006b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006bd:	8a 08                	mov    cl,BYTE PTR [eax]
c00006bf:	84 c9                	test   cl,cl
c00006c1:	74 14                	je     c00006d7 <strpbrk+0x1f>
c00006c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006c7:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006c9:	84 db                	test   bl,bl
c00006cb:	74 07                	je     c00006d4 <strpbrk+0x1c>
c00006cd:	38 cb                	cmp    bl,cl
c00006cf:	74 08                	je     c00006d9 <strpbrk+0x21>
c00006d1:	42                   	inc    edx
c00006d2:	eb f3                	jmp    c00006c7 <strpbrk+0xf>
c00006d4:	40                   	inc    eax
c00006d5:	eb e6                	jmp    c00006bd <strpbrk+0x5>
c00006d7:	31 c0                	xor    eax,eax
c00006d9:	5b                   	pop    ebx
c00006da:	c3                   	ret    

c00006db <strtok>:
c00006db:	56                   	push   esi
c00006dc:	53                   	push   ebx
c00006dd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006e5:	85 db                	test   ebx,ebx
c00006e7:	75 0e                	jne    c00006f7 <strtok+0x1c>
c00006e9:	8b 1d c8 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c7c8
c00006ef:	85 db                	test   ebx,ebx
c00006f1:	75 04                	jne    c00006f7 <strtok+0x1c>
c00006f3:	31 db                	xor    ebx,ebx
c00006f5:	eb 2e                	jmp    c0000725 <strtok+0x4a>
c00006f7:	56                   	push   esi
c00006f8:	53                   	push   ebx
c00006f9:	e8 ba ff ff ff       	call   c00006b8 <strpbrk>
c00006fe:	5a                   	pop    edx
c00006ff:	a3 c8 c7 02 c0       	mov    ds:0xc002c7c8,eax
c0000704:	59                   	pop    ecx
c0000705:	a1 c8 c7 02 c0       	mov    eax,ds:0xc002c7c8
c000070a:	39 d8                	cmp    eax,ebx
c000070c:	75 07                	jne    c0000715 <strtok+0x3a>
c000070e:	43                   	inc    ebx
c000070f:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000713:	eb e2                	jmp    c00006f7 <strtok+0x1c>
c0000715:	85 c0                	test   eax,eax
c0000717:	74 da                	je     c00006f3 <strtok+0x18>
c0000719:	8d 50 01             	lea    edx,[eax+0x1]
c000071c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000071f:	89 15 c8 c7 02 c0    	mov    DWORD PTR ds:0xc002c7c8,edx
c0000725:	89 d8                	mov    eax,ebx
c0000727:	5b                   	pop    ebx
c0000728:	5e                   	pop    esi
c0000729:	c3                   	ret    

c000072a <strcpy>:
c000072a:	53                   	push   ebx
c000072b:	31 d2                	xor    edx,edx
c000072d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000731:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000735:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000738:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000073b:	84 c9                	test   cl,cl
c000073d:	74 06                	je     c0000745 <strcpy+0x1b>
c000073f:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000742:	42                   	inc    edx
c0000743:	eb ec                	jmp    c0000731 <strcpy+0x7>
c0000745:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000748:	5b                   	pop    ebx
c0000749:	c3                   	ret    

c000074a <strncpy>:
c000074a:	56                   	push   esi
c000074b:	53                   	push   ebx
c000074c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000750:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000754:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000758:	89 c3                	mov    ebx,eax
c000075a:	85 c9                	test   ecx,ecx
c000075c:	74 1a                	je     c0000778 <strncpy+0x2e>
c000075e:	46                   	inc    esi
c000075f:	43                   	inc    ebx
c0000760:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000763:	49                   	dec    ecx
c0000764:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000767:	84 d2                	test   dl,dl
c0000769:	75 ef                	jne    c000075a <strncpy+0x10>
c000076b:	31 d2                	xor    edx,edx
c000076d:	39 d1                	cmp    ecx,edx
c000076f:	74 07                	je     c0000778 <strncpy+0x2e>
c0000771:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c0000775:	42                   	inc    edx
c0000776:	eb f5                	jmp    c000076d <strncpy+0x23>
c0000778:	5b                   	pop    ebx
c0000779:	5e                   	pop    esi
c000077a:	c3                   	ret    

c000077b <strcmp>:
c000077b:	31 c9                	xor    ecx,ecx
c000077d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000781:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000785:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000789:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000078d:	38 d0                	cmp    al,dl
c000078f:	75 08                	jne    c0000799 <strcmp+0x1e>
c0000791:	41                   	inc    ecx
c0000792:	84 c0                	test   al,al
c0000794:	75 e7                	jne    c000077d <strcmp+0x2>
c0000796:	31 c0                	xor    eax,eax
c0000798:	c3                   	ret    
c0000799:	29 d0                	sub    eax,edx
c000079b:	c3                   	ret    

c000079c <strchr>:
c000079c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007a0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007a2:	84 d2                	test   dl,dl
c00007a4:	74 09                	je     c00007af <strchr+0x13>
c00007a6:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007aa:	74 05                	je     c00007b1 <strchr+0x15>
c00007ac:	40                   	inc    eax
c00007ad:	eb f1                	jmp    c00007a0 <strchr+0x4>
c00007af:	31 c0                	xor    eax,eax
c00007b1:	c3                   	ret    

c00007b2 <strncmp>:
c00007b2:	56                   	push   esi
c00007b3:	53                   	push   ebx
c00007b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007b8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007c0:	01 d6                	add    esi,edx
c00007c2:	39 f2                	cmp    edx,esi
c00007c4:	74 12                	je     c00007d8 <strncmp+0x26>
c00007c6:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007c9:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007cc:	38 c8                	cmp    al,cl
c00007ce:	75 0c                	jne    c00007dc <strncmp+0x2a>
c00007d0:	42                   	inc    edx
c00007d1:	84 c0                	test   al,al
c00007d3:	74 03                	je     c00007d8 <strncmp+0x26>
c00007d5:	43                   	inc    ebx
c00007d6:	eb ea                	jmp    c00007c2 <strncmp+0x10>
c00007d8:	31 c0                	xor    eax,eax
c00007da:	eb 02                	jmp    c00007de <strncmp+0x2c>
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5b                   	pop    ebx
c00007df:	5e                   	pop    esi
c00007e0:	c3                   	ret    

c00007e1 <strcat>:
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007e6:	89 c1                	mov    ecx,eax
c00007e8:	8d 51 01             	lea    edx,[ecx+0x1]
c00007eb:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007ef:	74 04                	je     c00007f5 <strcat+0x14>
c00007f1:	89 d1                	mov    ecx,edx
c00007f3:	eb f3                	jmp    c00007e8 <strcat+0x7>
c00007f5:	31 d2                	xor    edx,edx
c00007f7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007fb:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c00007fe:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000801:	42                   	inc    edx
c0000802:	84 db                	test   bl,bl
c0000804:	75 f1                	jne    c00007f7 <strcat+0x16>
c0000806:	5b                   	pop    ebx
c0000807:	c3                   	ret    

c0000808 <strncat>:
c0000808:	56                   	push   esi
c0000809:	53                   	push   ebx
c000080a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000080e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000812:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000816:	89 c2                	mov    edx,eax
c0000818:	85 db                	test   ebx,ebx
c000081a:	74 23                	je     c000083f <strncat+0x37>
c000081c:	8d 72 01             	lea    esi,[edx+0x1]
c000081f:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000823:	74 04                	je     c0000829 <strncat+0x21>
c0000825:	89 f2                	mov    edx,esi
c0000827:	eb f3                	jmp    c000081c <strncat+0x14>
c0000829:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000082c:	41                   	inc    ecx
c000082d:	42                   	inc    edx
c000082e:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000831:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000834:	84 db                	test   bl,bl
c0000836:	74 07                	je     c000083f <strncat+0x37>
c0000838:	39 f1                	cmp    ecx,esi
c000083a:	75 f0                	jne    c000082c <strncat+0x24>
c000083c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000083f:	5b                   	pop    ebx
c0000840:	5e                   	pop    esi
c0000841:	c3                   	ret    

c0000842 <strstr>:
c0000842:	57                   	push   edi
c0000843:	56                   	push   esi
c0000844:	53                   	push   ebx
c0000845:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000849:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000084d:	57                   	push   edi
c000084e:	e8 55 fe ff ff       	call   c00006a8 <strlen>
c0000853:	59                   	pop    ecx
c0000854:	89 c6                	mov    esi,eax
c0000856:	85 c0                	test   eax,eax
c0000858:	74 1f                	je     c0000879 <strstr+0x37>
c000085a:	53                   	push   ebx
c000085b:	e8 48 fe ff ff       	call   c00006a8 <strlen>
c0000860:	5a                   	pop    edx
c0000861:	39 f0                	cmp    eax,esi
c0000863:	72 12                	jb     c0000877 <strstr+0x35>
c0000865:	56                   	push   esi
c0000866:	57                   	push   edi
c0000867:	53                   	push   ebx
c0000868:	e8 85 fd ff ff       	call   c00005f2 <memcmp>
c000086d:	83 c4 0c             	add    esp,0xc
c0000870:	85 c0                	test   eax,eax
c0000872:	74 05                	je     c0000879 <strstr+0x37>
c0000874:	43                   	inc    ebx
c0000875:	eb e3                	jmp    c000085a <strstr+0x18>
c0000877:	31 db                	xor    ebx,ebx
c0000879:	89 d8                	mov    eax,ebx
c000087b:	5b                   	pop    ebx
c000087c:	5e                   	pop    esi
c000087d:	5f                   	pop    edi
c000087e:	c3                   	ret    

c000087f <toupper>:
c000087f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000883:	0f b6 d0             	movzx  edx,al
c0000886:	f6 82 60 7d 02 c0 02 	test   BYTE PTR [edx-0x3ffd82a0],0x2
c000088d:	74 03                	je     c0000892 <toupper+0x13>
c000088f:	83 e8 20             	sub    eax,0x20
c0000892:	c3                   	ret    

c0000893 <tolower>:
c0000893:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000897:	0f b6 d0             	movzx  edx,al
c000089a:	f6 82 60 7d 02 c0 01 	test   BYTE PTR [edx-0x3ffd82a0],0x1
c00008a1:	74 03                	je     c00008a6 <tolower+0x13>
c00008a3:	83 c0 20             	add    eax,0x20
c00008a6:	c3                   	ret    

c00008a7 <simple_strtoul>:
c00008a7:	55                   	push   ebp
c00008a8:	57                   	push   edi
c00008a9:	56                   	push   esi
c00008aa:	53                   	push   ebx
c00008ab:	83 ec 08             	sub    esp,0x8
c00008ae:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008b2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008b6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008b9:	f6 82 60 7d 02 c0 08 	test   BYTE PTR [edx-0x3ffd82a0],0x8
c00008c0:	74 03                	je     c00008c5 <simple_strtoul+0x1e>
c00008c2:	41                   	inc    ecx
c00008c3:	eb f1                	jmp    c00008b6 <simple_strtoul+0xf>
c00008c5:	80 fa 09             	cmp    dl,0x9
c00008c8:	74 f8                	je     c00008c2 <simple_strtoul+0x1b>
c00008ca:	80 fa 2d             	cmp    dl,0x2d
c00008cd:	75 0b                	jne    c00008da <simple_strtoul+0x33>
c00008cf:	41                   	inc    ecx
c00008d0:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00008d8:	eb 0e                	jmp    c00008e8 <simple_strtoul+0x41>
c00008da:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00008e2:	80 fa 2b             	cmp    dl,0x2b
c00008e5:	75 01                	jne    c00008e8 <simple_strtoul+0x41>
c00008e7:	41                   	inc    ecx
c00008e8:	85 f6                	test   esi,esi
c00008ea:	75 22                	jne    c000090e <simple_strtoul+0x67>
c00008ec:	be 0a 00 00 00       	mov    esi,0xa
c00008f1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008f4:	75 5a                	jne    c0000950 <simple_strtoul+0xa9>
c00008f6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008fa:	50                   	push   eax
c00008fb:	e8 93 ff ff ff       	call   c0000893 <tolower>
c0000900:	5a                   	pop    edx
c0000901:	83 f8 78             	cmp    eax,0x78
c0000904:	74 03                	je     c0000909 <simple_strtoul+0x62>
c0000906:	41                   	inc    ecx
c0000907:	eb 16                	jmp    c000091f <simple_strtoul+0x78>
c0000909:	83 c1 02             	add    ecx,0x2
c000090c:	eb 22                	jmp    c0000930 <simple_strtoul+0x89>
c000090e:	8d 46 fe             	lea    eax,[esi-0x2]
c0000911:	83 f8 22             	cmp    eax,0x22
c0000914:	0f 87 b7 00 00 00    	ja     c00009d1 <simple_strtoul+0x12a>
c000091a:	83 fe 08             	cmp    esi,0x8
c000091d:	75 0c                	jne    c000092b <simple_strtoul+0x84>
c000091f:	be 08 00 00 00       	mov    esi,0x8
c0000924:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000927:	75 27                	jne    c0000950 <simple_strtoul+0xa9>
c0000929:	eb 1f                	jmp    c000094a <simple_strtoul+0xa3>
c000092b:	83 fe 10             	cmp    esi,0x10
c000092e:	75 20                	jne    c0000950 <simple_strtoul+0xa9>
c0000930:	be 10 00 00 00       	mov    esi,0x10
c0000935:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000938:	75 16                	jne    c0000950 <simple_strtoul+0xa9>
c000093a:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000093e:	50                   	push   eax
c000093f:	e8 4f ff ff ff       	call   c0000893 <tolower>
c0000944:	5d                   	pop    ebp
c0000945:	83 f8 78             	cmp    eax,0x78
c0000948:	74 03                	je     c000094d <simple_strtoul+0xa6>
c000094a:	41                   	inc    ecx
c000094b:	eb 03                	jmp    c0000950 <simple_strtoul+0xa9>
c000094d:	83 c1 02             	add    ecx,0x2
c0000950:	31 ed                	xor    ebp,ebp
c0000952:	31 db                	xor    ebx,ebx
c0000954:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000095b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000095d:	84 d2                	test   dl,dl
c000095f:	74 27                	je     c0000988 <simple_strtoul+0xe1>
c0000961:	0f b6 fa             	movzx  edi,dl
c0000964:	f6 87 60 7d 02 c0 04 	test   BYTE PTR [edi-0x3ffd82a0],0x4
c000096b:	74 05                	je     c0000972 <simple_strtoul+0xcb>
c000096d:	83 ef 30             	sub    edi,0x30
c0000970:	eb 22                	jmp    c0000994 <simple_strtoul+0xed>
c0000972:	0f be d2             	movsx  edx,dl
c0000975:	52                   	push   edx
c0000976:	e8 04 ff ff ff       	call   c000087f <toupper>
c000097b:	5f                   	pop    edi
c000097c:	0f b6 d0             	movzx  edx,al
c000097f:	f6 82 60 7d 02 c0 01 	test   BYTE PTR [edx-0x3ffd82a0],0x1
c0000986:	75 09                	jne    c0000991 <simple_strtoul+0xea>
c0000988:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000098d:	75 2d                	jne    c00009bc <simple_strtoul+0x115>
c000098f:	eb 57                	jmp    c00009e8 <simple_strtoul+0x141>
c0000991:	8d 78 c9             	lea    edi,[eax-0x37]
c0000994:	39 f7                	cmp    edi,esi
c0000996:	73 f0                	jae    c0000988 <simple_strtoul+0xe1>
c0000998:	31 d2                	xor    edx,edx
c000099a:	89 f8                	mov    eax,edi
c000099c:	f7 d0                	not    eax
c000099e:	f7 f6                	div    esi
c00009a0:	39 d8                	cmp    eax,ebx
c00009a2:	72 0e                	jb     c00009b2 <simple_strtoul+0x10b>
c00009a4:	0f af de             	imul   ebx,esi
c00009a7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009ae:	01 fb                	add    ebx,edi
c00009b0:	eb 07                	jmp    c00009b9 <simple_strtoul+0x112>
c00009b2:	bd 01 00 00 00       	mov    ebp,0x1
c00009b7:	31 db                	xor    ebx,ebx
c00009b9:	41                   	inc    ecx
c00009ba:	eb 9f                	jmp    c000095b <simple_strtoul+0xb4>
c00009bc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009bf:	09 d8                	or     eax,ebx
c00009c1:	75 1f                	jne    c00009e2 <simple_strtoul+0x13b>
c00009c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009c7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00009cb:	31 db                	xor    ebx,ebx
c00009cd:	89 38                	mov    DWORD PTR [eax],edi
c00009cf:	eb 17                	jmp    c00009e8 <simple_strtoul+0x141>
c00009d1:	31 db                	xor    ebx,ebx
c00009d3:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009d8:	74 14                	je     c00009ee <simple_strtoul+0x147>
c00009da:	31 ed                	xor    ebp,ebp
c00009dc:	85 c9                	test   ecx,ecx
c00009de:	75 e3                	jne    c00009c3 <simple_strtoul+0x11c>
c00009e0:	31 db                	xor    ebx,ebx
c00009e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e6:	89 08                	mov    DWORD PTR [eax],ecx
c00009e8:	4d                   	dec    ebp
c00009e9:	75 03                	jne    c00009ee <simple_strtoul+0x147>
c00009eb:	83 cb ff             	or     ebx,0xffffffff
c00009ee:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009f3:	75 02                	jne    c00009f7 <simple_strtoul+0x150>
c00009f5:	f7 db                	neg    ebx
c00009f7:	83 c4 08             	add    esp,0x8
c00009fa:	89 d8                	mov    eax,ebx
c00009fc:	5b                   	pop    ebx
c00009fd:	5e                   	pop    esi
c00009fe:	5f                   	pop    edi
c00009ff:	5d                   	pop    ebp
c0000a00:	c3                   	ret    

c0000a01 <largebin_index>:
c0000a01:	89 c2                	mov    edx,eax
c0000a03:	c1 ea 08             	shr    edx,0x8
c0000a06:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a0c:	77 10                	ja     c0000a1e <largebin_index+0x1d>
c0000a0e:	0f bd d2             	bsr    edx,edx
c0000a11:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a14:	d3 e8                	shr    eax,cl
c0000a16:	83 e0 03             	and    eax,0x3
c0000a19:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a1d:	c3                   	ret    
c0000a1e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a23:	c3                   	ret    

c0000a24 <malloc_init_state>:
c0000a24:	53                   	push   ebx
c0000a25:	8d 50 34             	lea    edx,[eax+0x34]
c0000a28:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a2e:	89 d1                	mov    ecx,edx
c0000a30:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a33:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a36:	83 c2 08             	add    edx,0x8
c0000a39:	39 da                	cmp    edx,ebx
c0000a3b:	75 f3                	jne    c0000a30 <malloc_init_state+0xc>
c0000a3d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a3f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a49:	83 e2 03             	and    edx,0x3
c0000a4c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a56:	83 ca 48             	or     edx,0x48
c0000a59:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a63:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a6d:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000a74:	89 10                	mov    DWORD PTR [eax],edx
c0000a76:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000a79:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a83:	5b                   	pop    ebx
c0000a84:	c3                   	ret    

c0000a85 <malloc_consolidate>:
c0000a85:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a87:	85 d2                	test   edx,edx
c0000a89:	0f 84 d8 00 00 00    	je     c0000b67 <malloc_consolidate+0xe2>
c0000a8f:	55                   	push   ebp
c0000a90:	83 e2 fd             	and    edx,0xfffffffd
c0000a93:	57                   	push   edi
c0000a94:	89 c5                	mov    ebp,eax
c0000a96:	56                   	push   esi
c0000a97:	8d 78 34             	lea    edi,[eax+0x34]
c0000a9a:	53                   	push   ebx
c0000a9b:	83 ec 10             	sub    esp,0x10
c0000a9e:	89 10                	mov    DWORD PTR [eax],edx
c0000aa0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000aa4:	c1 ea 03             	shr    edx,0x3
c0000aa7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000aab:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000aaf:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ab2:	85 d2                	test   edx,edx
c0000ab4:	0f 84 98 00 00 00    	je     c0000b52 <malloc_consolidate+0xcd>
c0000aba:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ac1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000ac4:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ac7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000acb:	89 f9                	mov    ecx,edi
c0000acd:	83 e1 fe             	and    ecx,0xfffffffe
c0000ad0:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ad3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000ad6:	83 e3 fc             	and    ebx,0xfffffffc
c0000ad9:	83 e7 01             	and    edi,0x1
c0000adc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000adf:	75 14                	jne    c0000af5 <malloc_consolidate+0x70>
c0000ae1:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000ae3:	29 fa                	sub    edx,edi
c0000ae5:	01 f9                	add    ecx,edi
c0000ae7:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000aea:	89 fb                	mov    ebx,edi
c0000aec:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000aef:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000af2:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000af5:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000af8:	74 40                	je     c0000b3a <malloc_consolidate+0xb5>
c0000afa:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000afd:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b00:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b04:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b07:	83 e7 01             	and    edi,0x1
c0000b0a:	75 0e                	jne    c0000b1a <malloc_consolidate+0x95>
c0000b0c:	01 d9                	add    ecx,ebx
c0000b0e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b11:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b14:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b17:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b1a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b1d:	89 ce                	mov    esi,ecx
c0000b1f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b22:	83 ce 01             	or     esi,0x1
c0000b25:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b28:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b2b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b2e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b32:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b35:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b38:	eb 0c                	jmp    c0000b46 <malloc_consolidate+0xc1>
c0000b3a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b3d:	83 c9 01             	or     ecx,0x1
c0000b40:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b43:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b46:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b4a:	85 d2                	test   edx,edx
c0000b4c:	0f 85 6f ff ff ff    	jne    c0000ac1 <malloc_consolidate+0x3c>
c0000b52:	83 c5 04             	add    ebp,0x4
c0000b55:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b59:	0f 85 50 ff ff ff    	jne    c0000aaf <malloc_consolidate+0x2a>
c0000b5f:	83 c4 10             	add    esp,0x10
c0000b62:	5b                   	pop    ebx
c0000b63:	5e                   	pop    esi
c0000b64:	5f                   	pop    edi
c0000b65:	5d                   	pop    ebp
c0000b66:	c3                   	ret    
c0000b67:	e9 b8 fe ff ff       	jmp    c0000a24 <malloc_init_state>

c0000b6c <dlfree>:
c0000b6c:	57                   	push   edi
c0000b6d:	56                   	push   esi
c0000b6e:	53                   	push   ebx
c0000b6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000b73:	85 db                	test   ebx,ebx
c0000b75:	0f 84 e2 00 00 00    	je     c0000c5d <dlfree+0xf1>
c0000b7b:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000b7e:	8b 0d e0 c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c7e0
c0000b84:	89 f0                	mov    eax,esi
c0000b86:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b89:	83 e0 fc             	and    eax,0xfffffffc
c0000b8c:	39 c1                	cmp    ecx,eax
c0000b8e:	72 24                	jb     c0000bb4 <dlfree+0x48>
c0000b90:	83 c9 03             	or     ecx,0x3
c0000b93:	c1 e8 03             	shr    eax,0x3
c0000b96:	89 0d e0 c7 02 c0    	mov    DWORD PTR ds:0xc002c7e0,ecx
c0000b9c:	83 e8 02             	sub    eax,0x2
c0000b9f:	8b 0c 85 e4 c7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd381c]
c0000ba6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000ba8:	89 14 85 e4 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd381c],edx
c0000baf:	e9 a9 00 00 00       	jmp    c0000c5d <dlfree+0xf1>
c0000bb4:	83 e6 02             	and    esi,0x2
c0000bb7:	0f 85 a0 00 00 00    	jne    c0000c5d <dlfree+0xf1>
c0000bbd:	83 c9 01             	or     ecx,0x1
c0000bc0:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bc3:	89 0d e0 c7 02 c0    	mov    DWORD PTR ds:0xc002c7e0,ecx
c0000bc9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bcc:	83 e1 fc             	and    ecx,0xfffffffc
c0000bcf:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000bd3:	75 13                	jne    c0000be8 <dlfree+0x7c>
c0000bd5:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000bd8:	29 da                	sub    edx,ebx
c0000bda:	01 d8                	add    eax,ebx
c0000bdc:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000bdf:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000be2:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000be5:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000be8:	39 35 0c c8 02 c0    	cmp    DWORD PTR ds:0xc002c80c,esi
c0000bee:	74 40                	je     c0000c30 <dlfree+0xc4>
c0000bf0:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000bf4:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000bf7:	80 e3 01             	and    bl,0x1
c0000bfa:	75 0e                	jne    c0000c0a <dlfree+0x9e>
c0000bfc:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000bff:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c02:	01 c8                	add    eax,ecx
c0000c04:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c07:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c0a:	8b 0d 1c c8 02 c0    	mov    ecx,DWORD PTR ds:0xc002c81c
c0000c10:	c7 42 0c 14 c8 02 c0 	mov    DWORD PTR [edx+0xc],0xc002c814
c0000c17:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c1a:	89 15 1c c8 02 c0    	mov    DWORD PTR ds:0xc002c81c,edx
c0000c20:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c23:	89 c1                	mov    ecx,eax
c0000c25:	83 c9 01             	or     ecx,0x1
c0000c28:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c2b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c2e:	eb 10                	jmp    c0000c40 <dlfree+0xd4>
c0000c30:	01 c8                	add    eax,ecx
c0000c32:	89 c1                	mov    ecx,eax
c0000c34:	83 c9 01             	or     ecx,0x1
c0000c37:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c3a:	89 15 0c c8 02 c0    	mov    DWORD PTR ds:0xc002c80c,edx
c0000c40:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c45:	76 16                	jbe    c0000c5d <dlfree+0xf1>
c0000c47:	f6 05 e0 c7 02 c0 02 	test   BYTE PTR ds:0xc002c7e0,0x2
c0000c4e:	74 0d                	je     c0000c5d <dlfree+0xf1>
c0000c50:	5b                   	pop    ebx
c0000c51:	b8 e0 c7 02 c0       	mov    eax,0xc002c7e0
c0000c56:	5e                   	pop    esi
c0000c57:	5f                   	pop    edi
c0000c58:	e9 28 fe ff ff       	jmp    c0000a85 <malloc_consolidate>
c0000c5d:	5b                   	pop    ebx
c0000c5e:	5e                   	pop    esi
c0000c5f:	5f                   	pop    edi
c0000c60:	c3                   	ret    

c0000c61 <sYSMALLOc>:
c0000c61:	55                   	push   ebp
c0000c62:	57                   	push   edi
c0000c63:	56                   	push   esi
c0000c64:	53                   	push   ebx
c0000c65:	89 d3                	mov    ebx,edx
c0000c67:	83 ec 2c             	sub    esp,0x2c
c0000c6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000c6e:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000c74:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000c77:	8d 42 ff             	lea    eax,[edx-0x1]
c0000c7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000c7e:	74 1f                	je     c0000c9f <sYSMALLOc+0x3e>
c0000c80:	89 d8                	mov    eax,ebx
c0000c82:	e8 fe fd ff ff       	call   c0000a85 <malloc_consolidate>
c0000c87:	83 ec 0c             	sub    esp,0xc
c0000c8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c8e:	83 e8 07             	sub    eax,0x7
c0000c91:	50                   	push   eax
c0000c92:	e8 30 02 00 00       	call   c0000ec7 <dlmalloc>
c0000c97:	83 c4 10             	add    esp,0x10
c0000c9a:	e9 20 02 00 00       	jmp    c0000ebf <sYSMALLOc+0x25e>
c0000c9f:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ca2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ca8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000cab:	83 e0 fc             	and    eax,0xfffffffc
c0000cae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000cb6:	83 c0 10             	add    eax,0x10
c0000cb9:	01 c1                	add    ecx,eax
c0000cbb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cc6:	74 04                	je     c0000ccc <sYSMALLOc+0x6b>
c0000cc8:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ccc:	f7 da                	neg    edx
c0000cce:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000cd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000cd6:	21 d1                	and    ecx,edx
c0000cd8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000cdc:	7f 07                	jg     c0000ce5 <sYSMALLOc+0x84>
c0000cde:	31 c0                	xor    eax,eax
c0000ce0:	e9 da 01 00 00       	jmp    c0000ebf <sYSMALLOc+0x25e>
c0000ce5:	83 ec 0c             	sub    esp,0xc
c0000ce8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000cec:	e8 40 e6 00 00       	call   c000f331 <sbrk>
c0000cf1:	83 c4 10             	add    esp,0x10
c0000cf4:	89 c6                	mov    esi,eax
c0000cf6:	83 f8 ff             	cmp    eax,0xffffffff
c0000cf9:	74 e3                	je     c0000cde <sYSMALLOc+0x7d>
c0000cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000cff:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d03:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d06:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d0c:	39 f1                	cmp    ecx,esi
c0000d0e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d14:	75 13                	jne    c0000d29 <sYSMALLOc+0xc8>
c0000d16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d1a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d1e:	83 c8 01             	or     eax,0x1
c0000d21:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d24:	e9 3e 01 00 00       	jmp    c0000e67 <sYSMALLOc+0x206>
c0000d29:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d2f:	88 d0                	mov    al,dl
c0000d31:	83 e0 01             	and    eax,0x1
c0000d34:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d39:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d3d:	0f 95 c0             	setne  al
c0000d40:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d44:	39 f1                	cmp    ecx,esi
c0000d46:	76 12                	jbe    c0000d5a <sYSMALLOc+0xf9>
c0000d48:	84 c0                	test   al,al
c0000d4a:	74 0e                	je     c0000d5a <sYSMALLOc+0xf9>
c0000d4c:	83 e2 fe             	and    edx,0xfffffffe
c0000d4f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d55:	e9 83 00 00 00       	jmp    c0000ddd <sYSMALLOc+0x17c>
c0000d5a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d5f:	74 7c                	je     c0000ddd <sYSMALLOc+0x17c>
c0000d61:	84 c0                	test   al,al
c0000d63:	74 0c                	je     c0000d71 <sYSMALLOc+0x110>
c0000d65:	89 f0                	mov    eax,esi
c0000d67:	29 c8                	sub    eax,ecx
c0000d69:	01 e8                	add    eax,ebp
c0000d6b:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000d71:	89 f2                	mov    edx,esi
c0000d73:	83 e2 07             	and    edx,0x7
c0000d76:	74 0c                	je     c0000d84 <sYSMALLOc+0x123>
c0000d78:	b8 08 00 00 00       	mov    eax,0x8
c0000d7d:	29 d0                	sub    eax,edx
c0000d7f:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000d82:	eb 04                	jmp    c0000d88 <sYSMALLOc+0x127>
c0000d84:	89 f5                	mov    ebp,esi
c0000d86:	31 c0                	xor    eax,eax
c0000d88:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d8c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d94:	01 c1                	add    ecx,eax
c0000d96:	83 ec 0c             	sub    esp,0xc
c0000d99:	01 f1                	add    ecx,esi
c0000d9b:	01 ca                	add    edx,ecx
c0000d9d:	29 c8                	sub    eax,ecx
c0000d9f:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000da3:	01 c2                	add    edx,eax
c0000da5:	52                   	push   edx
c0000da6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000daa:	e8 82 e5 00 00       	call   c000f331 <sbrk>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	83 f8 ff             	cmp    eax,0xffffffff
c0000db5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000db9:	75 0f                	jne    c0000dca <sYSMALLOc+0x169>
c0000dbb:	83 ec 0c             	sub    esp,0xc
c0000dbe:	6a 00                	push   0x0
c0000dc0:	e8 6c e5 00 00       	call   c000f331 <sbrk>
c0000dc5:	83 c4 10             	add    esp,0x10
c0000dc8:	eb 30                	jmp    c0000dfa <sYSMALLOc+0x199>
c0000dca:	39 c6                	cmp    esi,eax
c0000dcc:	76 33                	jbe    c0000e01 <sYSMALLOc+0x1a0>
c0000dce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000dd2:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000dd9:	01 f0                	add    eax,esi
c0000ddb:	eb 1d                	jmp    c0000dfa <sYSMALLOc+0x199>
c0000ddd:	83 ec 0c             	sub    esp,0xc
c0000de0:	89 f5                	mov    ebp,esi
c0000de2:	6a 00                	push   0x0
c0000de4:	e8 48 e5 00 00       	call   c000f331 <sbrk>
c0000de9:	89 c2                	mov    edx,eax
c0000deb:	29 f2                	sub    edx,esi
c0000ded:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000df1:	83 c4 10             	add    esp,0x10
c0000df4:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000dfa:	31 d2                	xor    edx,edx
c0000dfc:	83 f8 ff             	cmp    eax,0xffffffff
c0000dff:	74 66                	je     c0000e67 <sYSMALLOc+0x206>
c0000e01:	29 e8                	sub    eax,ebp
c0000e03:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e06:	01 d0                	add    eax,edx
c0000e08:	83 c8 01             	or     eax,0x1
c0000e0b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e0e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e14:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e19:	74 4c                	je     c0000e67 <sYSMALLOc+0x206>
c0000e1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e1f:	83 e8 0c             	sub    eax,0xc
c0000e22:	83 e0 f8             	and    eax,0xfffffff8
c0000e25:	89 c2                	mov    edx,eax
c0000e27:	83 ca 01             	or     edx,0x1
c0000e2a:	83 f8 0f             	cmp    eax,0xf
c0000e2d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e30:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e38:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e40:	76 25                	jbe    c0000e67 <sYSMALLOc+0x206>
c0000e42:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e48:	83 ec 0c             	sub    esp,0xc
c0000e4b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e55:	83 c7 08             	add    edi,0x8
c0000e58:	57                   	push   edi
c0000e59:	e8 0e fd ff ff       	call   c0000b6c <dlfree>
c0000e5e:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e64:	83 c4 10             	add    esp,0x10
c0000e67:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000e6d:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000e73:	73 06                	jae    c0000e7b <sYSMALLOc+0x21a>
c0000e75:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000e7b:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e81:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e87:	73 06                	jae    c0000e8f <sYSMALLOc+0x22e>
c0000e89:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e8f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e92:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e95:	83 e2 fc             	and    edx,0xfffffffc
c0000e98:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e9c:	0f 82 3c fe ff ff    	jb     c0000cde <sYSMALLOc+0x7d>
c0000ea2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ea6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ea9:	29 fa                	sub    edx,edi
c0000eab:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000eae:	83 ca 01             	or     edx,0x1
c0000eb1:	89 fb                	mov    ebx,edi
c0000eb3:	83 c0 08             	add    eax,0x8
c0000eb6:	83 cb 01             	or     ebx,0x1
c0000eb9:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000ebc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000ebf:	83 c4 2c             	add    esp,0x2c
c0000ec2:	5b                   	pop    ebx
c0000ec3:	5e                   	pop    esi
c0000ec4:	5f                   	pop    edi
c0000ec5:	5d                   	pop    ebp
c0000ec6:	c3                   	ret    

c0000ec7 <dlmalloc>:
c0000ec7:	55                   	push   ebp
c0000ec8:	57                   	push   edi
c0000ec9:	56                   	push   esi
c0000eca:	53                   	push   ebx
c0000ecb:	83 ec 1c             	sub    esp,0x1c
c0000ece:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000ed2:	83 f8 df             	cmp    eax,0xffffffdf
c0000ed5:	0f 87 70 03 00 00    	ja     c000124b <dlmalloc+0x384>
c0000edb:	83 c0 0b             	add    eax,0xb
c0000ede:	be 10 00 00 00       	mov    esi,0x10
c0000ee3:	83 f8 0f             	cmp    eax,0xf
c0000ee6:	76 05                	jbe    c0000eed <dlmalloc+0x26>
c0000ee8:	83 e0 f8             	and    eax,0xfffffff8
c0000eeb:	89 c6                	mov    esi,eax
c0000eed:	8b 3d e0 c7 02 c0    	mov    edi,DWORD PTR ds:0xc002c7e0
c0000ef3:	f7 c7 01 00 00 00    	test   edi,0x1
c0000ef9:	75 17                	jne    c0000f12 <dlmalloc+0x4b>
c0000efb:	85 ff                	test   edi,edi
c0000efd:	0f 85 05 03 00 00    	jne    c0001208 <dlmalloc+0x341>
c0000f03:	b8 e0 c7 02 c0       	mov    eax,0xc002c7e0
c0000f08:	e8 78 fb ff ff       	call   c0000a85 <malloc_consolidate>
c0000f0d:	e9 f6 02 00 00       	jmp    c0001208 <dlmalloc+0x341>
c0000f12:	39 f7                	cmp    edi,esi
c0000f14:	72 1f                	jb     c0000f35 <dlmalloc+0x6e>
c0000f16:	89 f2                	mov    edx,esi
c0000f18:	c1 ea 03             	shr    edx,0x3
c0000f1b:	83 ea 02             	sub    edx,0x2
c0000f1e:	8b 04 95 e4 c7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd381c]
c0000f25:	85 c0                	test   eax,eax
c0000f27:	74 0c                	je     c0000f35 <dlmalloc+0x6e>
c0000f29:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f2c:	89 0c 95 e4 c7 02 c0 	mov    DWORD PTR [edx*4-0x3ffd381c],ecx
c0000f33:	eb 30                	jmp    c0000f65 <dlmalloc+0x9e>
c0000f35:	89 f0                	mov    eax,esi
c0000f37:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f3d:	77 2e                	ja     c0000f6d <dlmalloc+0xa6>
c0000f3f:	c1 e8 03             	shr    eax,0x3
c0000f42:	8d 14 c5 14 c8 02 c0 	lea    edx,[eax*8-0x3ffd37ec]
c0000f49:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f4d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f50:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f53:	39 c3                	cmp    ebx,eax
c0000f55:	74 2e                	je     c0000f85 <dlmalloc+0xbe>
c0000f57:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f5a:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f62:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f65:	83 c0 08             	add    eax,0x8
c0000f68:	e9 e0 02 00 00       	jmp    c000124d <dlmalloc+0x386>
c0000f6d:	e8 8f fa ff ff       	call   c0000a01 <largebin_index>
c0000f72:	83 e7 02             	and    edi,0x2
c0000f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f79:	74 0a                	je     c0000f85 <dlmalloc+0xbe>
c0000f7b:	b8 e0 c7 02 c0       	mov    eax,0xc002c7e0
c0000f80:	e8 00 fb ff ff       	call   c0000a85 <malloc_consolidate>
c0000f85:	8d 46 10             	lea    eax,[esi+0x10]
c0000f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f8c:	8b 1d 20 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c820
c0000f92:	81 fb 14 c8 02 c0    	cmp    ebx,0xc002c814
c0000f98:	0f 84 13 01 00 00    	je     c00010b1 <dlmalloc+0x1ea>
c0000f9e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fa1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fa4:	83 e7 fc             	and    edi,0xfffffffc
c0000fa7:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fad:	77 4c                	ja     c0000ffb <dlmalloc+0x134>
c0000faf:	3d 14 c8 02 c0       	cmp    eax,0xc002c814
c0000fb4:	75 45                	jne    c0000ffb <dlmalloc+0x134>
c0000fb6:	39 1d 10 c8 02 c0    	cmp    DWORD PTR ds:0xc002c810,ebx
c0000fbc:	75 3d                	jne    c0000ffb <dlmalloc+0x134>
c0000fbe:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000fc2:	73 37                	jae    c0000ffb <dlmalloc+0x134>
c0000fc4:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000fc7:	89 fa                	mov    edx,edi
c0000fc9:	a3 1c c8 02 c0       	mov    ds:0xc002c81c,eax
c0000fce:	a3 20 c8 02 c0       	mov    ds:0xc002c820,eax
c0000fd3:	a3 10 c8 02 c0       	mov    ds:0xc002c810,eax
c0000fd8:	29 f2                	sub    edx,esi
c0000fda:	c7 40 08 14 c8 02 c0 	mov    DWORD PTR [eax+0x8],0xc002c814
c0000fe1:	c7 40 0c 14 c8 02 c0 	mov    DWORD PTR [eax+0xc],0xc002c814
c0000fe8:	83 ce 01             	or     esi,0x1
c0000feb:	89 d1                	mov    ecx,edx
c0000fed:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000ff0:	83 c9 01             	or     ecx,0x1
c0000ff3:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000ff6:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000ff9:	eb 15                	jmp    c0001010 <dlmalloc+0x149>
c0000ffb:	a3 20 c8 02 c0       	mov    ds:0xc002c820,eax
c0001000:	39 fe                	cmp    esi,edi
c0001002:	c7 40 08 14 c8 02 c0 	mov    DWORD PTR [eax+0x8],0xc002c814
c0001009:	75 0d                	jne    c0001018 <dlmalloc+0x151>
c000100b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001010:	8d 43 08             	lea    eax,[ebx+0x8]
c0001013:	e9 35 02 00 00       	jmp    c000124d <dlmalloc+0x386>
c0001018:	89 f8                	mov    eax,edi
c000101a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001020:	77 19                	ja     c000103b <dlmalloc+0x174>
c0001022:	c1 e8 03             	shr    eax,0x3
c0001025:	8d 14 00             	lea    edx,[eax+eax*1]
c0001028:	83 c2 0d             	add    edx,0xd
c000102b:	8d 2c 95 d8 c7 02 c0 	lea    ebp,[edx*4-0x3ffd3828]
c0001032:	8b 14 95 e0 c7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3820]
c0001039:	eb 46                	jmp    c0001081 <dlmalloc+0x1ba>
c000103b:	e8 c1 f9 ff ff       	call   c0000a01 <largebin_index>
c0001040:	8d 14 00             	lea    edx,[eax+eax*1]
c0001043:	83 c2 0d             	add    edx,0xd
c0001046:	8d 0c 95 e0 c7 02 c0 	lea    ecx,[edx*4-0x3ffd3820]
c000104d:	8b 14 95 e0 c7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3820]
c0001054:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001057:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000105b:	89 d5                	mov    ebp,edx
c000105d:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001061:	74 1e                	je     c0001081 <dlmalloc+0x1ba>
c0001063:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001066:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001069:	77 12                	ja     c000107d <dlmalloc+0x1b6>
c000106b:	83 cf 01             	or     edi,0x1
c000106e:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001071:	76 05                	jbe    c0001078 <dlmalloc+0x1b1>
c0001073:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001076:	eb f6                	jmp    c000106e <dlmalloc+0x1a7>
c0001078:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000107b:	eb 04                	jmp    c0001081 <dlmalloc+0x1ba>
c000107d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001081:	89 c7                	mov    edi,eax
c0001083:	88 c1                	mov    cl,al
c0001085:	c1 ff 05             	sar    edi,0x5
c0001088:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000108c:	bf 01 00 00 00       	mov    edi,0x1
c0001091:	d3 e7                	shl    edi,cl
c0001093:	89 f8                	mov    eax,edi
c0001095:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001099:	09 04 bd 14 cb 02 c0 	or     DWORD PTR [edi*4-0x3ffd34ec],eax
c00010a0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010a3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010a6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010a9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010ac:	e9 db fe ff ff       	jmp    c0000f8c <dlmalloc+0xc5>
c00010b1:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010b7:	76 78                	jbe    c0001131 <dlmalloc+0x26a>
c00010b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010bd:	8d 04 c5 14 c8 02 c0 	lea    eax,[eax*8-0x3ffd37ec]
c00010c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010c7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010ca:	39 ca                	cmp    edx,ecx
c00010cc:	74 63                	je     c0001131 <dlmalloc+0x26a>
c00010ce:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00010d1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00010d4:	83 e3 fc             	and    ebx,0xfffffffc
c00010d7:	39 de                	cmp    esi,ebx
c00010d9:	77 52                	ja     c000112d <dlmalloc+0x266>
c00010db:	89 df                	mov    edi,ebx
c00010dd:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00010e0:	29 f7                	sub    edi,esi
c00010e2:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00010e5:	01 d3                	add    ebx,edx
c00010e7:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00010ea:	83 ff 0f             	cmp    edi,0xf
c00010ed:	8d 42 08             	lea    eax,[edx+0x8]
c00010f0:	77 09                	ja     c00010fb <dlmalloc+0x234>
c00010f2:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00010f6:	e9 52 01 00 00       	jmp    c000124d <dlmalloc+0x386>
c00010fb:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00010fe:	83 ce 01             	or     esi,0x1
c0001101:	89 0d 1c c8 02 c0    	mov    DWORD PTR ds:0xc002c81c,ecx
c0001107:	89 0d 20 c8 02 c0    	mov    DWORD PTR ds:0xc002c820,ecx
c000110d:	c7 41 08 14 c8 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002c814
c0001114:	c7 41 0c 14 c8 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002c814
c000111b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000111e:	89 fa                	mov    edx,edi
c0001120:	83 ca 01             	or     edx,0x1
c0001123:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001126:	89 3b                	mov    DWORD PTR [ebx],edi
c0001128:	e9 20 01 00 00       	jmp    c000124d <dlmalloc+0x386>
c000112d:	89 c2                	mov    edx,eax
c000112f:	eb 99                	jmp    c00010ca <dlmalloc+0x203>
c0001131:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001135:	b8 01 00 00 00       	mov    eax,0x1
c000113a:	41                   	inc    ecx
c000113b:	89 cb                	mov    ebx,ecx
c000113d:	8d 14 cd 0c c8 02 c0 	lea    edx,[ecx*8-0x3ffd37f4]
c0001144:	c1 eb 05             	shr    ebx,0x5
c0001147:	d3 e0                	shl    eax,cl
c0001149:	8b 3c 9d 14 cb 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd34ec]
c0001150:	39 f8                	cmp    eax,edi
c0001152:	77 04                	ja     c0001158 <dlmalloc+0x291>
c0001154:	85 c0                	test   eax,eax
c0001156:	75 26                	jne    c000117e <dlmalloc+0x2b7>
c0001158:	43                   	inc    ebx
c0001159:	83 fb 02             	cmp    ebx,0x2
c000115c:	0f 87 a6 00 00 00    	ja     c0001208 <dlmalloc+0x341>
c0001162:	8b 3c 9d 14 cb 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd34ec]
c0001169:	85 ff                	test   edi,edi
c000116b:	74 eb                	je     c0001158 <dlmalloc+0x291>
c000116d:	89 d8                	mov    eax,ebx
c000116f:	c1 e0 06             	shl    eax,0x6
c0001172:	8d 14 85 0c c8 02 c0 	lea    edx,[eax*4-0x3ffd37f4]
c0001179:	b8 01 00 00 00       	mov    eax,0x1
c000117e:	85 f8                	test   eax,edi
c0001180:	75 07                	jne    c0001189 <dlmalloc+0x2c2>
c0001182:	83 c2 08             	add    edx,0x8
c0001185:	01 c0                	add    eax,eax
c0001187:	eb f5                	jmp    c000117e <dlmalloc+0x2b7>
c0001189:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000118c:	39 ca                	cmp    edx,ecx
c000118e:	75 14                	jne    c00011a4 <dlmalloc+0x2dd>
c0001190:	89 c1                	mov    ecx,eax
c0001192:	83 c2 08             	add    edx,0x8
c0001195:	f7 d1                	not    ecx
c0001197:	01 c0                	add    eax,eax
c0001199:	21 cf                	and    edi,ecx
c000119b:	89 3c 9d 14 cb 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd34ec],edi
c00011a2:	eb ac                	jmp    c0001150 <dlmalloc+0x289>
c00011a4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011a7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011aa:	83 e0 fc             	and    eax,0xfffffffc
c00011ad:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011b0:	89 c3                	mov    ebx,eax
c00011b2:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011b5:	29 f3                	sub    ebx,esi
c00011b7:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011ba:	83 fb 0f             	cmp    ebx,0xf
c00011bd:	8d 41 08             	lea    eax,[ecx+0x8]
c00011c0:	77 09                	ja     c00011cb <dlmalloc+0x304>
c00011c2:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011c6:	e9 82 00 00 00       	jmp    c000124d <dlmalloc+0x386>
c00011cb:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00011ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d4:	89 3d 1c c8 02 c0    	mov    DWORD PTR ds:0xc002c81c,edi
c00011da:	89 3d 20 c8 02 c0    	mov    DWORD PTR ds:0xc002c820,edi
c00011e0:	c7 47 08 14 c8 02 c0 	mov    DWORD PTR [edi+0x8],0xc002c814
c00011e7:	c7 47 0c 14 c8 02 c0 	mov    DWORD PTR [edi+0xc],0xc002c814
c00011ee:	77 06                	ja     c00011f6 <dlmalloc+0x32f>
c00011f0:	89 3d 10 c8 02 c0    	mov    DWORD PTR ds:0xc002c810,edi
c00011f6:	83 ce 01             	or     esi,0x1
c00011f9:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00011fc:	89 d9                	mov    ecx,ebx
c00011fe:	83 c9 01             	or     ecx,0x1
c0001201:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001204:	89 1a                	mov    DWORD PTR [edx],ebx
c0001206:	eb 45                	jmp    c000124d <dlmalloc+0x386>
c0001208:	a1 0c c8 02 c0       	mov    eax,ds:0xc002c80c
c000120d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001210:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001213:	83 e2 fc             	and    edx,0xfffffffc
c0001216:	39 d1                	cmp    ecx,edx
c0001218:	77 1e                	ja     c0001238 <dlmalloc+0x371>
c000121a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000121d:	89 f3                	mov    ebx,esi
c000121f:	89 0d 0c c8 02 c0    	mov    DWORD PTR ds:0xc002c80c,ecx
c0001225:	83 cb 01             	or     ebx,0x1
c0001228:	29 f2                	sub    edx,esi
c000122a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000122d:	83 ca 01             	or     edx,0x1
c0001230:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001233:	e9 2d fd ff ff       	jmp    c0000f65 <dlmalloc+0x9e>
c0001238:	83 c4 1c             	add    esp,0x1c
c000123b:	89 f0                	mov    eax,esi
c000123d:	5b                   	pop    ebx
c000123e:	ba e0 c7 02 c0       	mov    edx,0xc002c7e0
c0001243:	5e                   	pop    esi
c0001244:	5f                   	pop    edi
c0001245:	5d                   	pop    ebp
c0001246:	e9 16 fa ff ff       	jmp    c0000c61 <sYSMALLOc>
c000124b:	31 c0                	xor    eax,eax
c000124d:	83 c4 1c             	add    esp,0x1c
c0001250:	5b                   	pop    ebx
c0001251:	5e                   	pop    esi
c0001252:	5f                   	pop    edi
c0001253:	5d                   	pop    ebp
c0001254:	c3                   	ret    

c0001255 <iALLOc>:
c0001255:	55                   	push   ebp
c0001256:	89 c5                	mov    ebp,eax
c0001258:	57                   	push   edi
c0001259:	56                   	push   esi
c000125a:	53                   	push   ebx
c000125b:	83 ec 2c             	sub    esp,0x2c
c000125e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001262:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001266:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000126a:	83 3d e0 c7 02 c0 00 	cmp    DWORD PTR ds:0xc002c7e0,0x0
c0001271:	75 12                	jne    c0001285 <iALLOc+0x30>
c0001273:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001277:	b8 e0 c7 02 c0       	mov    eax,0xc002c7e0
c000127c:	e8 04 f8 ff ff       	call   c0000a85 <malloc_consolidate>
c0001281:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001285:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000128a:	74 12                	je     c000129e <iALLOc+0x49>
c000128c:	85 ed                	test   ebp,ebp
c000128e:	0f 84 64 01 00 00    	je     c00013f8 <iALLOc+0x1a3>
c0001294:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000129c:	eb 33                	jmp    c00012d1 <iALLOc+0x7c>
c000129e:	85 ed                	test   ebp,ebp
c00012a0:	75 14                	jne    c00012b6 <iALLOc+0x61>
c00012a2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012aa:	83 c4 2c             	add    esp,0x2c
c00012ad:	5b                   	pop    ebx
c00012ae:	5e                   	pop    esi
c00012af:	5f                   	pop    edi
c00012b0:	5d                   	pop    ebp
c00012b1:	e9 11 fc ff ff       	jmp    c0000ec7 <dlmalloc>
c00012b6:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012bd:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012c5:	83 f8 0f             	cmp    eax,0xf
c00012c8:	76 07                	jbe    c00012d1 <iALLOc+0x7c>
c00012ca:	83 e0 f8             	and    eax,0xfffffff8
c00012cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00012d1:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00012d6:	75 09                	jne    c00012e1 <iALLOc+0x8c>
c00012d8:	89 d0                	mov    eax,edx
c00012da:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00012dd:	31 f6                	xor    esi,esi
c00012df:	eb 3b                	jmp    c000131c <iALLOc+0xc7>
c00012e1:	8b 02                	mov    eax,DWORD PTR [edx]
c00012e3:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00012eb:	83 c0 0b             	add    eax,0xb
c00012ee:	83 f8 0f             	cmp    eax,0xf
c00012f1:	76 07                	jbe    c00012fa <iALLOc+0xa5>
c00012f3:	83 e0 f8             	and    eax,0xfffffff8
c00012f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00012fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00012fe:	0f af f5             	imul   esi,ebp
c0001301:	eb 25                	jmp    c0001328 <iALLOc+0xd3>
c0001303:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001305:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001308:	bb 10 00 00 00       	mov    ebx,0x10
c000130d:	83 f9 0f             	cmp    ecx,0xf
c0001310:	76 05                	jbe    c0001317 <iALLOc+0xc2>
c0001312:	83 e1 f8             	and    ecx,0xfffffff8
c0001315:	89 cb                	mov    ebx,ecx
c0001317:	01 de                	add    esi,ebx
c0001319:	83 c0 04             	add    eax,0x4
c000131c:	39 c7                	cmp    edi,eax
c000131e:	75 e3                	jne    c0001303 <iALLOc+0xae>
c0001320:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001328:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000132c:	8b 1d 34 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb34
c0001332:	83 ec 0c             	sub    esp,0xc
c0001335:	c7 05 34 cb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cb34,0x0
c000133f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001343:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001347:	50                   	push   eax
c0001348:	e8 7a fb ff ff       	call   c0000ec7 <dlmalloc>
c000134d:	83 c4 10             	add    esp,0x10
c0001350:	89 1d 34 cb 02 c0    	mov    DWORD PTR ds:0xc002cb34,ebx
c0001356:	85 c0                	test   eax,eax
c0001358:	0f 84 92 00 00 00    	je     c00013f0 <iALLOc+0x19b>
c000135e:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001361:	8d 78 f8             	lea    edi,[eax-0x8]
c0001364:	83 e3 fc             	and    ebx,0xfffffffc
c0001367:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000136b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001370:	74 1e                	je     c0001390 <iALLOc+0x13b>
c0001372:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001376:	89 d9                	mov    ecx,ebx
c0001378:	52                   	push   edx
c0001379:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000137d:	83 e9 04             	sub    ecx,0x4
c0001380:	51                   	push   ecx
c0001381:	6a 00                	push   0x0
c0001383:	50                   	push   eax
c0001384:	e8 02 f3 ff ff       	call   c000068b <memset>
c0001389:	83 c4 10             	add    esp,0x10
c000138c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001390:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001395:	75 14                	jne    c00013ab <iALLOc+0x156>
c0001397:	8d 04 37             	lea    eax,[edi+esi*1]
c000139a:	29 f3                	sub    ebx,esi
c000139c:	8d 48 08             	lea    ecx,[eax+0x8]
c000139f:	83 cb 01             	or     ebx,0x1
c00013a2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013a6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013a9:	89 f3                	mov    ebx,esi
c00013ab:	31 c0                	xor    eax,eax
c00013ad:	4d                   	dec    ebp
c00013ae:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013b1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013b5:	39 c5                	cmp    ebp,eax
c00013b7:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013ba:	74 2c                	je     c00013e8 <iALLOc+0x193>
c00013bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013c0:	85 c9                	test   ecx,ecx
c00013c2:	75 15                	jne    c00013d9 <iALLOc+0x184>
c00013c4:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013c7:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013ca:	b9 10 00 00 00       	mov    ecx,0x10
c00013cf:	83 fe 0f             	cmp    esi,0xf
c00013d2:	76 05                	jbe    c00013d9 <iALLOc+0x184>
c00013d4:	83 e6 f8             	and    esi,0xfffffff8
c00013d7:	89 f1                	mov    ecx,esi
c00013d9:	89 ce                	mov    esi,ecx
c00013db:	29 cb                	sub    ebx,ecx
c00013dd:	83 ce 01             	or     esi,0x1
c00013e0:	40                   	inc    eax
c00013e1:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00013e4:	01 cf                	add    edi,ecx
c00013e6:	eb c6                	jmp    c00013ae <iALLOc+0x159>
c00013e8:	83 cb 01             	or     ebx,0x1
c00013eb:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00013ee:	eb 08                	jmp    c00013f8 <iALLOc+0x1a3>
c00013f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00013f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00013fc:	83 c4 2c             	add    esp,0x2c
c00013ff:	5b                   	pop    ebx
c0001400:	5e                   	pop    esi
c0001401:	5f                   	pop    edi
c0001402:	5d                   	pop    ebp
c0001403:	c3                   	ret    

c0001404 <dlrealloc>:
c0001404:	55                   	push   ebp
c0001405:	57                   	push   edi
c0001406:	56                   	push   esi
c0001407:	53                   	push   ebx
c0001408:	83 ec 1c             	sub    esp,0x1c
c000140b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000140f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001413:	85 db                	test   ebx,ebx
c0001415:	75 10                	jne    c0001427 <dlrealloc+0x23>
c0001417:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000141b:	83 c4 1c             	add    esp,0x1c
c000141e:	5b                   	pop    ebx
c000141f:	5e                   	pop    esi
c0001420:	5f                   	pop    edi
c0001421:	5d                   	pop    ebp
c0001422:	e9 a0 fa ff ff       	jmp    c0000ec7 <dlmalloc>
c0001427:	83 f8 df             	cmp    eax,0xffffffdf
c000142a:	76 07                	jbe    c0001433 <dlrealloc+0x2f>
c000142c:	31 db                	xor    ebx,ebx
c000142e:	e9 7c 01 00 00       	jmp    c00015af <dlrealloc+0x1ab>
c0001433:	83 c0 0b             	add    eax,0xb
c0001436:	bf 10 00 00 00       	mov    edi,0x10
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 05                	jbe    c0001445 <dlrealloc+0x41>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 c7                	mov    edi,eax
c0001445:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001448:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000144b:	89 c6                	mov    esi,eax
c000144d:	83 e6 fc             	and    esi,0xfffffffc
c0001450:	a8 02                	test   al,0x2
c0001452:	75 d8                	jne    c000142c <dlrealloc+0x28>
c0001454:	39 f7                	cmp    edi,esi
c0001456:	0f 86 15 01 00 00    	jbe    c0001571 <dlrealloc+0x16d>
c000145c:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001460:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001463:	39 15 0c c8 02 c0    	cmp    DWORD PTR ds:0xc002c80c,edx
c0001469:	75 33                	jne    c000149e <dlrealloc+0x9a>
c000146b:	83 e1 fc             	and    ecx,0xfffffffc
c000146e:	01 f1                	add    ecx,esi
c0001470:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001474:	8d 4f 10             	lea    ecx,[edi+0x10]
c0001477:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000147b:	77 49                	ja     c00014c6 <dlrealloc+0xc2>
c000147d:	01 fd                	add    ebp,edi
c000147f:	83 e0 01             	and    eax,0x1
c0001482:	09 f8                	or     eax,edi
c0001484:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001487:	89 2d 0c c8 02 c0    	mov    DWORD PTR ds:0xc002c80c,ebp
c000148d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001491:	29 f8                	sub    eax,edi
c0001493:	83 c8 01             	or     eax,0x1
c0001496:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001499:	e9 11 01 00 00       	jmp    c00015af <dlrealloc+0x1ab>
c000149e:	89 c8                	mov    eax,ecx
c00014a0:	83 e0 fe             	and    eax,0xfffffffe
c00014a3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014a8:	75 1c                	jne    c00014c6 <dlrealloc+0xc2>
c00014aa:	83 e1 fc             	and    ecx,0xfffffffc
c00014ad:	01 f1                	add    ecx,esi
c00014af:	39 cf                	cmp    edi,ecx
c00014b1:	77 13                	ja     c00014c6 <dlrealloc+0xc2>
c00014b3:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014b6:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014b9:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014bc:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014bf:	89 ce                	mov    esi,ecx
c00014c1:	e9 ab 00 00 00       	jmp    c0001571 <dlrealloc+0x16d>
c00014c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014ca:	8d 47 f9             	lea    eax,[edi-0x7]
c00014cd:	83 ec 0c             	sub    esp,0xc
c00014d0:	50                   	push   eax
c00014d1:	e8 f1 f9 ff ff       	call   c0000ec7 <dlmalloc>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	89 c1                	mov    ecx,eax
c00014db:	85 c0                	test   eax,eax
c00014dd:	0f 84 49 ff ff ff    	je     c000142c <dlrealloc+0x28>
c00014e3:	8d 40 f8             	lea    eax,[eax-0x8]
c00014e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00014ea:	39 c2                	cmp    edx,eax
c00014ec:	75 0a                	jne    c00014f8 <dlrealloc+0xf4>
c00014ee:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00014f1:	83 e0 fc             	and    eax,0xfffffffc
c00014f4:	01 c6                	add    esi,eax
c00014f6:	eb 79                	jmp    c0001571 <dlrealloc+0x16d>
c00014f8:	83 ee 04             	sub    esi,0x4
c00014fb:	83 fe 27             	cmp    esi,0x27
c00014fe:	76 16                	jbe    c0001516 <dlrealloc+0x112>
c0001500:	50                   	push   eax
c0001501:	56                   	push   esi
c0001502:	53                   	push   ebx
c0001503:	51                   	push   ecx
c0001504:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001508:	e8 48 f1 ff ff       	call   c0000655 <memcpy>
c000150d:	83 c4 10             	add    esp,0x10
c0001510:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001514:	eb 43                	jmp    c0001559 <dlrealloc+0x155>
c0001516:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001518:	83 fe 13             	cmp    esi,0x13
c000151b:	89 01                	mov    DWORD PTR [ecx],eax
c000151d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001520:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001523:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001526:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001529:	76 2e                	jbe    c0001559 <dlrealloc+0x155>
c000152b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000152e:	83 fe 1b             	cmp    esi,0x1b
c0001531:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001534:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001537:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000153a:	76 1d                	jbe    c0001559 <dlrealloc+0x155>
c000153c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000153f:	83 fe 23             	cmp    esi,0x23
c0001542:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001545:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001548:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000154b:	76 0c                	jbe    c0001559 <dlrealloc+0x155>
c000154d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001550:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001553:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001556:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001559:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000155d:	83 ec 0c             	sub    esp,0xc
c0001560:	53                   	push   ebx
c0001561:	e8 06 f6 ff ff       	call   c0000b6c <dlfree>
c0001566:	83 c4 10             	add    esp,0x10
c0001569:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000156d:	89 cb                	mov    ebx,ecx
c000156f:	eb 3e                	jmp    c00015af <dlrealloc+0x1ab>
c0001571:	89 f2                	mov    edx,esi
c0001573:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001576:	29 fa                	sub    edx,edi
c0001578:	83 e1 01             	and    ecx,0x1
c000157b:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c000157f:	83 fa 0f             	cmp    edx,0xf
c0001582:	77 0b                	ja     c000158f <dlrealloc+0x18b>
c0001584:	09 ce                	or     esi,ecx
c0001586:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001589:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000158d:	eb 20                	jmp    c00015af <dlrealloc+0x1ab>
c000158f:	01 fd                	add    ebp,edi
c0001591:	83 ec 0c             	sub    esp,0xc
c0001594:	09 cf                	or     edi,ecx
c0001596:	83 ca 01             	or     edx,0x1
c0001599:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c000159c:	83 c5 08             	add    ebp,0x8
c000159f:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015a2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015a6:	55                   	push   ebp
c00015a7:	e8 c0 f5 ff ff       	call   c0000b6c <dlfree>
c00015ac:	83 c4 10             	add    esp,0x10
c00015af:	83 c4 1c             	add    esp,0x1c
c00015b2:	89 d8                	mov    eax,ebx
c00015b4:	5b                   	pop    ebx
c00015b5:	5e                   	pop    esi
c00015b6:	5f                   	pop    edi
c00015b7:	5d                   	pop    ebp
c00015b8:	c3                   	ret    

c00015b9 <dlmemalign>:
c00015b9:	55                   	push   ebp
c00015ba:	57                   	push   edi
c00015bb:	56                   	push   esi
c00015bc:	53                   	push   ebx
c00015bd:	83 ec 0c             	sub    esp,0xc
c00015c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015c8:	83 fa 08             	cmp    edx,0x8
c00015cb:	77 10                	ja     c00015dd <dlmemalign+0x24>
c00015cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00015d1:	83 c4 0c             	add    esp,0xc
c00015d4:	5b                   	pop    ebx
c00015d5:	5e                   	pop    esi
c00015d6:	5f                   	pop    edi
c00015d7:	5d                   	pop    ebp
c00015d8:	e9 ea f8 ff ff       	jmp    c0000ec7 <dlmalloc>
c00015dd:	bf 10 00 00 00       	mov    edi,0x10
c00015e2:	83 fa 0f             	cmp    edx,0xf
c00015e5:	76 13                	jbe    c00015fa <dlmemalign+0x41>
c00015e7:	8d 4a ff             	lea    ecx,[edx-0x1]
c00015ea:	85 d1                	test   ecx,edx
c00015ec:	75 04                	jne    c00015f2 <dlmemalign+0x39>
c00015ee:	89 d7                	mov    edi,edx
c00015f0:	eb 08                	jmp    c00015fa <dlmemalign+0x41>
c00015f2:	39 d7                	cmp    edi,edx
c00015f4:	73 04                	jae    c00015fa <dlmemalign+0x41>
c00015f6:	01 ff                	add    edi,edi
c00015f8:	eb f8                	jmp    c00015f2 <dlmemalign+0x39>
c00015fa:	83 f8 df             	cmp    eax,0xffffffdf
c00015fd:	76 07                	jbe    c0001606 <dlmemalign+0x4d>
c00015ff:	31 c0                	xor    eax,eax
c0001601:	e9 ce 00 00 00       	jmp    c00016d4 <dlmemalign+0x11b>
c0001606:	83 c0 0b             	add    eax,0xb
c0001609:	bd 10 00 00 00       	mov    ebp,0x10
c000160e:	83 f8 0f             	cmp    eax,0xf
c0001611:	76 05                	jbe    c0001618 <dlmemalign+0x5f>
c0001613:	83 e0 f8             	and    eax,0xfffffff8
c0001616:	89 c5                	mov    ebp,eax
c0001618:	83 ec 0c             	sub    esp,0xc
c000161b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000161f:	50                   	push   eax
c0001620:	e8 a2 f8 ff ff       	call   c0000ec7 <dlmalloc>
c0001625:	83 c4 10             	add    esp,0x10
c0001628:	89 c1                	mov    ecx,eax
c000162a:	85 c0                	test   eax,eax
c000162c:	74 d1                	je     c00015ff <dlmemalign+0x46>
c000162e:	31 d2                	xor    edx,edx
c0001630:	8d 70 f8             	lea    esi,[eax-0x8]
c0001633:	f7 f7                	div    edi
c0001635:	85 d2                	test   edx,edx
c0001637:	74 62                	je     c000169b <dlmemalign+0xe2>
c0001639:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000163d:	89 f8                	mov    eax,edi
c000163f:	f7 d8                	neg    eax
c0001641:	21 c3                	and    ebx,eax
c0001643:	83 eb 08             	sub    ebx,0x8
c0001646:	89 d8                	mov    eax,ebx
c0001648:	29 f0                	sub    eax,esi
c000164a:	83 f8 0f             	cmp    eax,0xf
c000164d:	77 02                	ja     c0001651 <dlmemalign+0x98>
c000164f:	01 fb                	add    ebx,edi
c0001651:	89 d8                	mov    eax,ebx
c0001653:	29 f0                	sub    eax,esi
c0001655:	89 c6                	mov    esi,eax
c0001657:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000165a:	89 c2                	mov    edx,eax
c000165c:	83 e2 fc             	and    edx,0xfffffffc
c000165f:	29 f2                	sub    edx,esi
c0001661:	a8 02                	test   al,0x2
c0001663:	74 10                	je     c0001675 <dlmemalign+0xbc>
c0001665:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001668:	83 ca 02             	or     edx,0x2
c000166b:	8d 43 08             	lea    eax,[ebx+0x8]
c000166e:	89 33                	mov    DWORD PTR [ebx],esi
c0001670:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001673:	eb 5f                	jmp    c00016d4 <dlmemalign+0x11b>
c0001675:	83 ec 0c             	sub    esp,0xc
c0001678:	89 d0                	mov    eax,edx
c000167a:	83 c8 01             	or     eax,0x1
c000167d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001680:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001685:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001688:	83 e0 01             	and    eax,0x1
c000168b:	09 f0                	or     eax,esi
c000168d:	89 de                	mov    esi,ebx
c000168f:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001692:	51                   	push   ecx
c0001693:	e8 d4 f4 ff ff       	call   c0000b6c <dlfree>
c0001698:	83 c4 10             	add    esp,0x10
c000169b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000169e:	a8 02                	test   al,0x2
c00016a0:	75 2f                	jne    c00016d1 <dlmemalign+0x118>
c00016a2:	83 e0 fc             	and    eax,0xfffffffc
c00016a5:	8d 55 10             	lea    edx,[ebp+0x10]
c00016a8:	39 c2                	cmp    edx,eax
c00016aa:	73 25                	jae    c00016d1 <dlmemalign+0x118>
c00016ac:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016af:	83 ec 0c             	sub    esp,0xc
c00016b2:	29 e8                	sub    eax,ebp
c00016b4:	83 c2 08             	add    edx,0x8
c00016b7:	83 c8 01             	or     eax,0x1
c00016ba:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016bd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016c0:	83 e0 01             	and    eax,0x1
c00016c3:	09 c5                	or     ebp,eax
c00016c5:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016c8:	52                   	push   edx
c00016c9:	e8 9e f4 ff ff       	call   c0000b6c <dlfree>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	8d 46 08             	lea    eax,[esi+0x8]
c00016d4:	83 c4 0c             	add    esp,0xc
c00016d7:	5b                   	pop    ebx
c00016d8:	5e                   	pop    esi
c00016d9:	5f                   	pop    edi
c00016da:	5d                   	pop    ebp
c00016db:	c3                   	ret    

c00016dc <dlcalloc>:
c00016dc:	53                   	push   ebx
c00016dd:	83 ec 14             	sub    esp,0x14
c00016e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016e4:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00016e9:	50                   	push   eax
c00016ea:	e8 d8 f7 ff ff       	call   c0000ec7 <dlmalloc>
c00016ef:	83 c4 10             	add    esp,0x10
c00016f2:	89 c3                	mov    ebx,eax
c00016f4:	85 c0                	test   eax,eax
c00016f6:	74 77                	je     c000176f <dlcalloc+0x93>
c00016f8:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00016fb:	89 d0                	mov    eax,edx
c00016fd:	83 e0 fc             	and    eax,0xfffffffc
c0001700:	80 e2 02             	and    dl,0x2
c0001703:	75 5a                	jne    c000175f <dlcalloc+0x83>
c0001705:	83 e8 04             	sub    eax,0x4
c0001708:	83 f8 27             	cmp    eax,0x27
c000170b:	76 03                	jbe    c0001710 <dlcalloc+0x34>
c000170d:	51                   	push   ecx
c000170e:	eb 53                	jmp    c0001763 <dlcalloc+0x87>
c0001710:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001716:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000171d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001724:	83 f8 13             	cmp    eax,0x13
c0001727:	76 46                	jbe    c000176f <dlcalloc+0x93>
c0001729:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001730:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001737:	83 f8 1b             	cmp    eax,0x1b
c000173a:	76 33                	jbe    c000176f <dlcalloc+0x93>
c000173c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001743:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000174a:	83 f8 23             	cmp    eax,0x23
c000174d:	76 20                	jbe    c000176f <dlcalloc+0x93>
c000174f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001756:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000175d:	eb 10                	jmp    c000176f <dlcalloc+0x93>
c000175f:	83 e8 08             	sub    eax,0x8
c0001762:	52                   	push   edx
c0001763:	50                   	push   eax
c0001764:	6a 00                	push   0x0
c0001766:	53                   	push   ebx
c0001767:	e8 1f ef ff ff       	call   c000068b <memset>
c000176c:	83 c4 10             	add    esp,0x10
c000176f:	89 d8                	mov    eax,ebx
c0001771:	83 c4 08             	add    esp,0x8
c0001774:	5b                   	pop    ebx
c0001775:	c3                   	ret    

c0001776 <dlcfree>:
c0001776:	e9 f1 f3 ff ff       	jmp    c0000b6c <dlfree>

c000177b <dlindependent_calloc>:
c000177b:	83 ec 28             	sub    esp,0x28
c000177e:	b9 03 00 00 00       	mov    ecx,0x3
c0001783:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001787:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000178b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000178f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001793:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001797:	e8 b9 fa ff ff       	call   c0001255 <iALLOc>
c000179c:	83 c4 2c             	add    esp,0x2c
c000179f:	c3                   	ret    

c00017a0 <dlindependent_comalloc>:
c00017a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017a8:	31 c9                	xor    ecx,ecx
c00017aa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017b2:	e9 9e fa ff ff       	jmp    c0001255 <iALLOc>

c00017b7 <dlvalloc>:
c00017b7:	83 ec 0c             	sub    esp,0xc
c00017ba:	83 3d e0 c7 02 c0 00 	cmp    DWORD PTR ds:0xc002c7e0,0x0
c00017c1:	75 0a                	jne    c00017cd <dlvalloc+0x16>
c00017c3:	b8 e0 c7 02 c0       	mov    eax,0xc002c7e0
c00017c8:	e8 b8 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c00017cd:	50                   	push   eax
c00017ce:	50                   	push   eax
c00017cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00017d3:	ff 35 3c cb 02 c0    	push   DWORD PTR ds:0xc002cb3c
c00017d9:	e8 db fd ff ff       	call   c00015b9 <dlmemalign>
c00017de:	83 c4 1c             	add    esp,0x1c
c00017e1:	c3                   	ret    

c00017e2 <dlpvalloc>:
c00017e2:	83 ec 0c             	sub    esp,0xc
c00017e5:	83 3d e0 c7 02 c0 00 	cmp    DWORD PTR ds:0xc002c7e0,0x0
c00017ec:	75 0a                	jne    c00017f8 <dlpvalloc+0x16>
c00017ee:	b8 e0 c7 02 c0       	mov    eax,0xc002c7e0
c00017f3:	e8 8d f2 ff ff       	call   c0000a85 <malloc_consolidate>
c00017f8:	a1 3c cb 02 c0       	mov    eax,ds:0xc002cb3c
c00017fd:	89 c1                	mov    ecx,eax
c00017ff:	52                   	push   edx
c0001800:	f7 d9                	neg    ecx
c0001802:	52                   	push   edx
c0001803:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001807:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000180b:	21 ca                	and    edx,ecx
c000180d:	52                   	push   edx
c000180e:	50                   	push   eax
c000180f:	e8 a5 fd ff ff       	call   c00015b9 <dlmemalign>
c0001814:	83 c4 1c             	add    esp,0x1c
c0001817:	c3                   	ret    

c0001818 <dlmalloc_trim>:
c0001818:	b8 e0 c7 02 c0       	mov    eax,0xc002c7e0
c000181d:	e8 63 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c0001822:	31 c0                	xor    eax,eax
c0001824:	c3                   	ret    

c0001825 <dlmalloc_usable_size>:
c0001825:	53                   	push   ebx
c0001826:	31 c0                	xor    eax,eax
c0001828:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000182c:	85 c9                	test   ecx,ecx
c000182e:	74 24                	je     c0001854 <dlmalloc_usable_size+0x2f>
c0001830:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001833:	f6 c2 02             	test   dl,0x2
c0001836:	74 08                	je     c0001840 <dlmalloc_usable_size+0x1b>
c0001838:	83 e2 fc             	and    edx,0xfffffffc
c000183b:	8d 42 f8             	lea    eax,[edx-0x8]
c000183e:	eb 14                	jmp    c0001854 <dlmalloc_usable_size+0x2f>
c0001840:	89 d3                	mov    ebx,edx
c0001842:	31 c0                	xor    eax,eax
c0001844:	83 e3 fe             	and    ebx,0xfffffffe
c0001847:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000184c:	74 06                	je     c0001854 <dlmalloc_usable_size+0x2f>
c000184e:	83 e2 fc             	and    edx,0xfffffffc
c0001851:	8d 42 fc             	lea    eax,[edx-0x4]
c0001854:	5b                   	pop    ebx
c0001855:	c3                   	ret    

c0001856 <dlmallinfo>:
c0001856:	55                   	push   ebp
c0001857:	57                   	push   edi
c0001858:	56                   	push   esi
c0001859:	53                   	push   ebx
c000185a:	83 ec 08             	sub    esp,0x8
c000185d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001861:	83 3d 0c c8 02 c0 00 	cmp    DWORD PTR ds:0xc002c80c,0x0
c0001868:	75 0a                	jne    c0001874 <dlmallinfo+0x1e>
c000186a:	b8 e0 c7 02 c0       	mov    eax,0xc002c7e0
c000186f:	e8 11 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c0001874:	a1 0c c8 02 c0       	mov    eax,ds:0xc002c80c
c0001879:	31 ed                	xor    ebp,ebp
c000187b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000187e:	31 c9                	xor    ecx,ecx
c0001880:	83 e0 fc             	and    eax,0xfffffffc
c0001883:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001887:	31 c0                	xor    eax,eax
c0001889:	8b 14 85 e4 c7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd381c]
c0001890:	85 d2                	test   edx,edx
c0001892:	74 0e                	je     c00018a2 <dlmallinfo+0x4c>
c0001894:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001897:	45                   	inc    ebp
c0001898:	83 e6 fc             	and    esi,0xfffffffc
c000189b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000189e:	01 f1                	add    ecx,esi
c00018a0:	eb ee                	jmp    c0001890 <dlmallinfo+0x3a>
c00018a2:	40                   	inc    eax
c00018a3:	83 f8 0a             	cmp    eax,0xa
c00018a6:	75 e1                	jne    c0001889 <dlmallinfo+0x33>
c00018a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018ac:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018b3:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018b6:	b8 14 c8 02 c0       	mov    eax,0xc002c814
c00018bb:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018be:	39 f0                	cmp    eax,esi
c00018c0:	74 10                	je     c00018d2 <dlmallinfo+0x7c>
c00018c2:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018c5:	ff 04 24             	inc    DWORD PTR [esp]
c00018c8:	83 e7 fc             	and    edi,0xfffffffc
c00018cb:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00018ce:	01 fa                	add    edx,edi
c00018d0:	eb ec                	jmp    c00018be <dlmallinfo+0x68>
c00018d2:	83 c0 08             	add    eax,0x8
c00018d5:	3d 0c cb 02 c0       	cmp    eax,0xc002cb0c
c00018da:	75 df                	jne    c00018bb <dlmallinfo+0x65>
c00018dc:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00018df:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00018e2:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00018e5:	a1 48 cb 02 c0       	mov    eax,ds:0xc002cb48
c00018ea:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00018ed:	89 03                	mov    DWORD PTR [ebx],eax
c00018ef:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00018f2:	8b 35 30 cb 02 c0    	mov    esi,DWORD PTR ds:0xc002cb30
c00018f8:	29 d0                	sub    eax,edx
c00018fa:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00018fd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001900:	8b 35 44 cb 02 c0    	mov    esi,DWORD PTR ds:0xc002cb44
c0001906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000190a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000190d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001910:	8b 35 54 cb 02 c0    	mov    esi,DWORD PTR ds:0xc002cb54
c0001916:	89 d8                	mov    eax,ebx
c0001918:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000191b:	83 c4 08             	add    esp,0x8
c000191e:	5b                   	pop    ebx
c000191f:	5e                   	pop    esi
c0001920:	5f                   	pop    edi
c0001921:	5d                   	pop    ebp
c0001922:	c2 04 00             	ret    0x4

c0001925 <dlmalloc_stats>:
c0001925:	83 ec 30             	sub    esp,0x30
c0001928:	8d 44 24 08          	lea    eax,[esp+0x8]
c000192c:	50                   	push   eax
c000192d:	e8 24 ff ff ff       	call   c0001856 <dlmallinfo>
c0001932:	83 c4 30             	add    esp,0x30
c0001935:	c3                   	ret    

c0001936 <dlmallopt>:
c0001936:	56                   	push   esi
c0001937:	b8 e0 c7 02 c0       	mov    eax,0xc002c7e0
c000193c:	53                   	push   ebx
c000193d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001941:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001945:	e8 3b f1 ff ff       	call   c0000a85 <malloc_consolidate>
c000194a:	8d 46 04             	lea    eax,[esi+0x4]
c000194d:	83 f8 05             	cmp    eax,0x5
c0001950:	77 67                	ja     c00019b9 <dlmallopt+0x83>
c0001952:	ff 24 85 64 7e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd819c]
c0001959:	83 fb 50             	cmp    ebx,0x50
c000195c:	77 5b                	ja     c00019b9 <dlmallopt+0x83>
c000195e:	ba 08 00 00 00       	mov    edx,0x8
c0001963:	85 db                	test   ebx,ebx
c0001965:	74 12                	je     c0001979 <dlmallopt+0x43>
c0001967:	83 c3 0b             	add    ebx,0xb
c000196a:	ba 10 00 00 00       	mov    edx,0x10
c000196f:	83 fb 0f             	cmp    ebx,0xf
c0001972:	76 05                	jbe    c0001979 <dlmallopt+0x43>
c0001974:	89 da                	mov    edx,ebx
c0001976:	83 e2 f8             	and    edx,0xfffffff8
c0001979:	a1 e0 c7 02 c0       	mov    eax,ds:0xc002c7e0
c000197e:	83 e0 03             	and    eax,0x3
c0001981:	09 d0                	or     eax,edx
c0001983:	a3 e0 c7 02 c0       	mov    ds:0xc002c7e0,eax
c0001988:	eb 31                	jmp    c00019bb <dlmallopt+0x85>
c000198a:	89 1d 24 cb 02 c0    	mov    DWORD PTR ds:0xc002cb24,ebx
c0001990:	eb 06                	jmp    c0001998 <dlmallopt+0x62>
c0001992:	89 1d 28 cb 02 c0    	mov    DWORD PTR ds:0xc002cb28,ebx
c0001998:	be 01 00 00 00       	mov    esi,0x1
c000199d:	eb 1c                	jmp    c00019bb <dlmallopt+0x85>
c000199f:	89 1d 2c cb 02 c0    	mov    DWORD PTR ds:0xc002cb2c,ebx
c00019a5:	eb f1                	jmp    c0001998 <dlmallopt+0x62>
c00019a7:	31 f6                	xor    esi,esi
c00019a9:	85 db                	test   ebx,ebx
c00019ab:	75 0e                	jne    c00019bb <dlmallopt+0x85>
c00019ad:	c7 05 34 cb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cb34,0x0
c00019b7:	eb df                	jmp    c0001998 <dlmallopt+0x62>
c00019b9:	31 f6                	xor    esi,esi
c00019bb:	89 f0                	mov    eax,esi
c00019bd:	5b                   	pop    ebx
c00019be:	5e                   	pop    esi
c00019bf:	c3                   	ret    

c00019c0 <disk_status>:
c00019c0:	31 c0                	xor    eax,eax
c00019c2:	c3                   	ret    

c00019c3 <disk_initialize>:
c00019c3:	31 c0                	xor    eax,eax
c00019c5:	c3                   	ret    

c00019c6 <disk_read>:
c00019c6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019cb:	0f b6 04 85 a0 e2 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1d60]
c00019d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d7:	e9 ec e4 01 00       	jmp    c001fec8 <fatWrapperReadDisk>

c00019dc <disk_write>:
c00019dc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019e1:	0f b6 04 85 a0 e2 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1d60]
c00019e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019ed:	e9 1d e5 01 00       	jmp    c001ff0f <fatWrapperWriteDisk>

c00019f2 <disk_ioctl>:
c00019f2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00019f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00019fb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a00:	0f b6 04 85 a0 e2 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1d60]
c0001a08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a0c:	e9 45 e5 01 00       	jmp    c001ff56 <fatWrapperIoctl>

c0001a11 <ld_word>:
c0001a11:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a15:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a18:	c1 e2 08             	shl    edx,0x8
c0001a1b:	09 d0                	or     eax,edx
c0001a1d:	c3                   	ret    

c0001a1e <ld_dword>:
c0001a1e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a22:	89 d1                	mov    ecx,edx
c0001a24:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a28:	c1 e1 08             	shl    ecx,0x8
c0001a2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a2e:	09 ca                	or     edx,ecx
c0001a30:	c1 e2 08             	shl    edx,0x8
c0001a33:	09 d0                	or     eax,edx
c0001a35:	c3                   	ret    

c0001a36 <ld_qword>:
c0001a36:	57                   	push   edi
c0001a37:	56                   	push   esi
c0001a38:	53                   	push   ebx
c0001a39:	31 db                	xor    ebx,ebx
c0001a3b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a3e:	89 df                	mov    edi,ebx
c0001a40:	89 ce                	mov    esi,ecx
c0001a42:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a46:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a4a:	c1 e6 08             	shl    esi,0x8
c0001a4d:	09 f2                	or     edx,esi
c0001a4f:	89 d6                	mov    esi,edx
c0001a51:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a55:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a59:	c1 e6 08             	shl    esi,0x8
c0001a5c:	09 f2                	or     edx,esi
c0001a5e:	89 d6                	mov    esi,edx
c0001a60:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a64:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a68:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a6b:	c1 e6 08             	shl    esi,0x8
c0001a6e:	89 fb                	mov    ebx,edi
c0001a70:	09 f2                	or     edx,esi
c0001a72:	89 d1                	mov    ecx,edx
c0001a74:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001a78:	c1 e1 08             	shl    ecx,0x8
c0001a7b:	89 da                	mov    edx,ebx
c0001a7d:	09 c8                	or     eax,ecx
c0001a7f:	5b                   	pop    ebx
c0001a80:	5e                   	pop    esi
c0001a81:	5f                   	pop    edi
c0001a82:	c3                   	ret    

c0001a83 <st_word>:
c0001a83:	66 89 10             	mov    WORD PTR [eax],dx
c0001a86:	c3                   	ret    

c0001a87 <st_dword>:
c0001a87:	89 10                	mov    DWORD PTR [eax],edx
c0001a89:	c3                   	ret    

c0001a8a <st_qword>:
c0001a8a:	89 10                	mov    DWORD PTR [eax],edx
c0001a8c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a8f:	c3                   	ret    

c0001a90 <mem_cpy>:
c0001a90:	85 c9                	test   ecx,ecx
c0001a92:	74 10                	je     c0001aa4 <mem_cpy+0x14>
c0001a94:	57                   	push   edi
c0001a95:	01 c1                	add    ecx,eax
c0001a97:	56                   	push   esi
c0001a98:	89 c7                	mov    edi,eax
c0001a9a:	89 d6                	mov    esi,edx
c0001a9c:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a9d:	39 f9                	cmp    ecx,edi
c0001a9f:	75 fb                	jne    c0001a9c <mem_cpy+0xc>
c0001aa1:	5e                   	pop    esi
c0001aa2:	5f                   	pop    edi
c0001aa3:	c3                   	ret    
c0001aa4:	c3                   	ret    

c0001aa5 <mem_set>:
c0001aa5:	01 c1                	add    ecx,eax
c0001aa7:	40                   	inc    eax
c0001aa8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001aab:	39 c8                	cmp    eax,ecx
c0001aad:	75 f8                	jne    c0001aa7 <mem_set+0x2>
c0001aaf:	c3                   	ret    

c0001ab0 <mem_cmp>:
c0001ab0:	57                   	push   edi
c0001ab1:	56                   	push   esi
c0001ab2:	89 c6                	mov    esi,eax
c0001ab4:	53                   	push   ebx
c0001ab5:	46                   	inc    esi
c0001ab6:	42                   	inc    edx
c0001ab7:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001abb:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001abf:	29 fb                	sub    ebx,edi
c0001ac1:	89 cf                	mov    edi,ecx
c0001ac3:	29 f7                	sub    edi,esi
c0001ac5:	01 c7                	add    edi,eax
c0001ac7:	74 04                	je     c0001acd <mem_cmp+0x1d>
c0001ac9:	85 db                	test   ebx,ebx
c0001acb:	74 e8                	je     c0001ab5 <mem_cmp+0x5>
c0001acd:	89 d8                	mov    eax,ebx
c0001acf:	5b                   	pop    ebx
c0001ad0:	5e                   	pop    esi
c0001ad1:	5f                   	pop    edi
c0001ad2:	c3                   	ret    

c0001ad3 <chk_chr>:
c0001ad3:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001ad6:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001ad9:	74 07                	je     c0001ae2 <chk_chr+0xf>
c0001adb:	39 d1                	cmp    ecx,edx
c0001add:	74 03                	je     c0001ae2 <chk_chr+0xf>
c0001adf:	40                   	inc    eax
c0001ae0:	eb f1                	jmp    c0001ad3 <chk_chr>
c0001ae2:	89 c8                	mov    eax,ecx
c0001ae4:	c3                   	ret    

c0001ae5 <dbc_1st>:
c0001ae5:	31 c0                	xor    eax,eax
c0001ae7:	c3                   	ret    

c0001ae8 <dbc_2nd>:
c0001ae8:	31 c0                	xor    eax,eax
c0001aea:	c3                   	ret    

c0001aeb <tchar2uni>:
c0001aeb:	57                   	push   edi
c0001aec:	89 c7                	mov    edi,eax
c0001aee:	56                   	push   esi
c0001aef:	53                   	push   ebx
c0001af0:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001af2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001af4:	8d 73 01             	lea    esi,[ebx+0x1]
c0001af7:	84 c9                	test   cl,cl
c0001af9:	78 0a                	js     c0001b05 <tchar2uni+0x1a>
c0001afb:	0f b6 d1             	movzx  edx,cl
c0001afe:	89 f3                	mov    ebx,esi
c0001b00:	e9 9f 00 00 00       	jmp    c0001ba4 <tchar2uni+0xb9>
c0001b05:	88 ca                	mov    dl,cl
c0001b07:	83 e2 e0             	and    edx,0xffffffe0
c0001b0a:	80 fa c0             	cmp    dl,0xc0
c0001b0d:	75 0c                	jne    c0001b1b <tchar2uni+0x30>
c0001b0f:	89 ca                	mov    edx,ecx
c0001b11:	b9 01 00 00 00       	mov    ecx,0x1
c0001b16:	83 e2 1f             	and    edx,0x1f
c0001b19:	eb 2e                	jmp    c0001b49 <tchar2uni+0x5e>
c0001b1b:	88 ca                	mov    dl,cl
c0001b1d:	83 e2 f0             	and    edx,0xfffffff0
c0001b20:	80 fa e0             	cmp    dl,0xe0
c0001b23:	75 0c                	jne    c0001b31 <tchar2uni+0x46>
c0001b25:	89 ca                	mov    edx,ecx
c0001b27:	b9 02 00 00 00       	mov    ecx,0x2
c0001b2c:	83 e2 0f             	and    edx,0xf
c0001b2f:	eb 18                	jmp    c0001b49 <tchar2uni+0x5e>
c0001b31:	88 ca                	mov    dl,cl
c0001b33:	83 e2 f8             	and    edx,0xfffffff8
c0001b36:	88 d0                	mov    al,dl
c0001b38:	83 ca ff             	or     edx,0xffffffff
c0001b3b:	3c f0                	cmp    al,0xf0
c0001b3d:	75 6c                	jne    c0001bab <tchar2uni+0xc0>
c0001b3f:	89 ca                	mov    edx,ecx
c0001b41:	b9 03 00 00 00       	mov    ecx,0x3
c0001b46:	83 e2 07             	and    edx,0x7
c0001b49:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b4d:	46                   	inc    esi
c0001b4e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b51:	88 c8                	mov    al,cl
c0001b53:	83 e0 c0             	and    eax,0xffffffc0
c0001b56:	3c 80                	cmp    al,0x80
c0001b58:	75 4e                	jne    c0001ba8 <tchar2uni+0xbd>
c0001b5a:	c1 e2 06             	shl    edx,0x6
c0001b5d:	83 e1 3f             	and    ecx,0x3f
c0001b60:	09 ca                	or     edx,ecx
c0001b62:	39 de                	cmp    esi,ebx
c0001b64:	75 e7                	jne    c0001b4d <tchar2uni+0x62>
c0001b66:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001b69:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001b6f:	77 37                	ja     c0001ba8 <tchar2uni+0xbd>
c0001b71:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001b77:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b7d:	76 29                	jbe    c0001ba8 <tchar2uni+0xbd>
c0001b7f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b85:	76 1d                	jbe    c0001ba4 <tchar2uni+0xb9>
c0001b87:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b8d:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b93:	c1 e1 06             	shl    ecx,0x6
c0001b96:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b9c:	09 ca                	or     edx,ecx
c0001b9e:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001ba4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001ba6:	eb 03                	jmp    c0001bab <tchar2uni+0xc0>
c0001ba8:	83 ca ff             	or     edx,0xffffffff
c0001bab:	5b                   	pop    ebx
c0001bac:	89 d0                	mov    eax,edx
c0001bae:	5e                   	pop    esi
c0001baf:	5f                   	pop    edi
c0001bb0:	c3                   	ret    

c0001bb1 <put_utf>:
c0001bb1:	53                   	push   ebx
c0001bb2:	83 f8 7f             	cmp    eax,0x7f
c0001bb5:	89 c3                	mov    ebx,eax
c0001bb7:	b0 00                	mov    al,0x0
c0001bb9:	77 11                	ja     c0001bcc <put_utf+0x1b>
c0001bbb:	85 c9                	test   ecx,ecx
c0001bbd:	0f 84 e5 00 00 00    	je     c0001ca8 <put_utf+0xf7>
c0001bc3:	88 1a                	mov    BYTE PTR [edx],bl
c0001bc5:	b0 01                	mov    al,0x1
c0001bc7:	e9 dc 00 00 00       	jmp    c0001ca8 <put_utf+0xf7>
c0001bcc:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001bd2:	77 23                	ja     c0001bf7 <put_utf+0x46>
c0001bd4:	83 f9 01             	cmp    ecx,0x1
c0001bd7:	0f 86 cb 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001bdd:	89 d8                	mov    eax,ebx
c0001bdf:	83 e3 3f             	and    ebx,0x3f
c0001be2:	c1 e8 06             	shr    eax,0x6
c0001be5:	83 cb 80             	or     ebx,0xffffff80
c0001be8:	83 c8 c0             	or     eax,0xffffffc0
c0001beb:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001bee:	88 02                	mov    BYTE PTR [edx],al
c0001bf0:	b0 02                	mov    al,0x2
c0001bf2:	e9 b1 00 00 00       	jmp    c0001ca8 <put_utf+0xf7>
c0001bf7:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001bfd:	77 40                	ja     c0001c3f <put_utf+0x8e>
c0001bff:	83 f9 02             	cmp    ecx,0x2
c0001c02:	0f 86 a0 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001c08:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c0e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c14:	0f 86 8e 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001c1a:	89 d8                	mov    eax,ebx
c0001c1c:	c1 e8 0c             	shr    eax,0xc
c0001c1f:	83 c8 e0             	or     eax,0xffffffe0
c0001c22:	88 02                	mov    BYTE PTR [edx],al
c0001c24:	89 d8                	mov    eax,ebx
c0001c26:	83 e3 3f             	and    ebx,0x3f
c0001c29:	c1 e8 06             	shr    eax,0x6
c0001c2c:	83 cb 80             	or     ebx,0xffffff80
c0001c2f:	83 e0 3f             	and    eax,0x3f
c0001c32:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c35:	83 c8 80             	or     eax,0xffffff80
c0001c38:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c3b:	b0 03                	mov    al,0x3
c0001c3d:	eb 69                	jmp    c0001ca8 <put_utf+0xf7>
c0001c3f:	83 f9 03             	cmp    ecx,0x3
c0001c42:	76 64                	jbe    c0001ca8 <put_utf+0xf7>
c0001c44:	89 d9                	mov    ecx,ebx
c0001c46:	0f b7 c3             	movzx  eax,bx
c0001c49:	66 31 c9             	xor    cx,cx
c0001c4c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c52:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c58:	c1 e9 06             	shr    ecx,0x6
c0001c5b:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c61:	77 43                	ja     c0001ca6 <put_utf+0xf5>
c0001c63:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c69:	77 3b                	ja     c0001ca6 <put_utf+0xf5>
c0001c6b:	09 cb                	or     ebx,ecx
c0001c6d:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001c73:	89 d8                	mov    eax,ebx
c0001c75:	c1 e8 12             	shr    eax,0x12
c0001c78:	83 c8 f0             	or     eax,0xfffffff0
c0001c7b:	88 02                	mov    BYTE PTR [edx],al
c0001c7d:	89 d8                	mov    eax,ebx
c0001c7f:	c1 e8 0c             	shr    eax,0xc
c0001c82:	83 e0 3f             	and    eax,0x3f
c0001c85:	83 c8 80             	or     eax,0xffffff80
c0001c88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c8b:	89 d8                	mov    eax,ebx
c0001c8d:	83 e3 3f             	and    ebx,0x3f
c0001c90:	c1 e8 06             	shr    eax,0x6
c0001c93:	83 cb 80             	or     ebx,0xffffff80
c0001c96:	83 e0 3f             	and    eax,0x3f
c0001c99:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c9c:	83 c8 80             	or     eax,0xffffff80
c0001c9f:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ca2:	b0 04                	mov    al,0x4
c0001ca4:	eb 02                	jmp    c0001ca8 <put_utf+0xf7>
c0001ca6:	31 c0                	xor    eax,eax
c0001ca8:	5b                   	pop    ebx
c0001ca9:	c3                   	ret    

c0001caa <clst2sect>:
c0001caa:	89 c1                	mov    ecx,eax
c0001cac:	83 ea 02             	sub    edx,0x2
c0001caf:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001cb2:	83 e8 02             	sub    eax,0x2
c0001cb5:	39 d0                	cmp    eax,edx
c0001cb7:	76 0d                	jbe    c0001cc6 <clst2sect+0x1c>
c0001cb9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cbd:	f7 e2                	mul    edx
c0001cbf:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cc2:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cc5:	c3                   	ret    
c0001cc6:	31 c0                	xor    eax,eax
c0001cc8:	31 d2                	xor    edx,edx
c0001cca:	c3                   	ret    

c0001ccb <clmt_clust>:
c0001ccb:	57                   	push   edi
c0001ccc:	89 cf                	mov    edi,ecx
c0001cce:	56                   	push   esi
c0001ccf:	89 d6                	mov    esi,edx
c0001cd1:	53                   	push   ebx
c0001cd2:	0f ac fe 09          	shrd   esi,edi,0x9
c0001cd6:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001cd9:	89 f2                	mov    edx,esi
c0001cdb:	8b 00                	mov    eax,DWORD PTR [eax]
c0001cdd:	c1 ef 09             	shr    edi,0x9
c0001ce0:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001ce4:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001ce7:	89 f9                	mov    ecx,edi
c0001ce9:	31 ff                	xor    edi,edi
c0001ceb:	57                   	push   edi
c0001cec:	56                   	push   esi
c0001ced:	51                   	push   ecx
c0001cee:	52                   	push   edx
c0001cef:	e8 58 38 02 00       	call   c002554c <__udivdi3>
c0001cf4:	83 c4 10             	add    esp,0x10
c0001cf7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001cf9:	85 d2                	test   edx,edx
c0001cfb:	74 10                	je     c0001d0d <clmt_clust+0x42>
c0001cfd:	39 d0                	cmp    eax,edx
c0001cff:	72 07                	jb     c0001d08 <clmt_clust+0x3d>
c0001d01:	29 d0                	sub    eax,edx
c0001d03:	83 c3 08             	add    ebx,0x8
c0001d06:	eb ef                	jmp    c0001cf7 <clmt_clust+0x2c>
c0001d08:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d0b:	89 c2                	mov    edx,eax
c0001d0d:	5b                   	pop    ebx
c0001d0e:	89 d0                	mov    eax,edx
c0001d10:	5e                   	pop    esi
c0001d11:	5f                   	pop    edi
c0001d12:	c3                   	ret    

c0001d13 <pick_lfn>:
c0001d13:	55                   	push   ebp
c0001d14:	57                   	push   edi
c0001d15:	56                   	push   esi
c0001d16:	89 d6                	mov    esi,edx
c0001d18:	53                   	push   ebx
c0001d19:	89 c3                	mov    ebx,eax
c0001d1b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d1e:	e8 ee fc ff ff       	call   c0001a11 <ld_word>
c0001d23:	66 85 c0             	test   ax,ax
c0001d26:	74 04                	je     c0001d2c <pick_lfn+0x19>
c0001d28:	31 c0                	xor    eax,eax
c0001d2a:	eb 5c                	jmp    c0001d88 <pick_lfn+0x75>
c0001d2c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d2f:	bd 01 00 00 00       	mov    ebp,0x1
c0001d34:	83 e1 bf             	and    ecx,0xffffffbf
c0001d37:	31 ff                	xor    edi,edi
c0001d39:	49                   	dec    ecx
c0001d3a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d3d:	0f b6 87 80 7f 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd8080]
c0001d44:	01 f0                	add    eax,esi
c0001d46:	e8 c6 fc ff ff       	call   c0001a11 <ld_word>
c0001d4b:	66 85 ed             	test   bp,bp
c0001d4e:	74 11                	je     c0001d61 <pick_lfn+0x4e>
c0001d50:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d56:	77 d0                	ja     c0001d28 <pick_lfn+0x15>
c0001d58:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d5c:	89 c5                	mov    ebp,eax
c0001d5e:	41                   	inc    ecx
c0001d5f:	eb 04                	jmp    c0001d65 <pick_lfn+0x52>
c0001d61:	66 40                	inc    ax
c0001d63:	75 c3                	jne    c0001d28 <pick_lfn+0x15>
c0001d65:	47                   	inc    edi
c0001d66:	83 ff 0d             	cmp    edi,0xd
c0001d69:	75 d2                	jne    c0001d3d <pick_lfn+0x2a>
c0001d6b:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001d6e:	74 13                	je     c0001d83 <pick_lfn+0x70>
c0001d70:	66 85 ed             	test   bp,bp
c0001d73:	74 0e                	je     c0001d83 <pick_lfn+0x70>
c0001d75:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d7b:	77 ab                	ja     c0001d28 <pick_lfn+0x15>
c0001d7d:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d83:	b8 01 00 00 00       	mov    eax,0x1
c0001d88:	5b                   	pop    ebx
c0001d89:	5e                   	pop    esi
c0001d8a:	5f                   	pop    edi
c0001d8b:	5d                   	pop    ebp
c0001d8c:	c3                   	ret    

c0001d8d <put_lfn>:
c0001d8d:	55                   	push   ebp
c0001d8e:	31 ed                	xor    ebp,ebp
c0001d90:	57                   	push   edi
c0001d91:	89 d7                	mov    edi,edx
c0001d93:	56                   	push   esi
c0001d94:	31 f6                	xor    esi,esi
c0001d96:	53                   	push   ebx
c0001d97:	83 ec 08             	sub    esp,0x8
c0001d9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d9d:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001da1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001da5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001dab:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001dae:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001db1:	31 d2                	xor    edx,edx
c0001db3:	e8 cb fc ff ff       	call   c0001a83 <st_word>
c0001db8:	0f b6 d9             	movzx  ebx,cl
c0001dbb:	4b                   	dec    ebx
c0001dbc:	6b db 0d             	imul   ebx,ebx,0xd
c0001dbf:	66 83 fe ff          	cmp    si,0xffff
c0001dc3:	74 08                	je     c0001dcd <put_lfn+0x40>
c0001dc5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001dc8:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001dcc:	43                   	inc    ebx
c0001dcd:	0f b6 85 80 7f 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd8080]
c0001dd4:	0f b7 d6             	movzx  edx,si
c0001dd7:	01 f8                	add    eax,edi
c0001dd9:	e8 a5 fc ff ff       	call   c0001a83 <st_word>
c0001dde:	66 85 f6             	test   si,si
c0001de1:	75 03                	jne    c0001de6 <put_lfn+0x59>
c0001de3:	83 ce ff             	or     esi,0xffffffff
c0001de6:	45                   	inc    ebp
c0001de7:	83 fd 0d             	cmp    ebp,0xd
c0001dea:	75 d3                	jne    c0001dbf <put_lfn+0x32>
c0001dec:	66 46                	inc    si
c0001dee:	74 0a                	je     c0001dfa <put_lfn+0x6d>
c0001df0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001df3:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001df8:	75 09                	jne    c0001e03 <put_lfn+0x76>
c0001dfa:	88 c8                	mov    al,cl
c0001dfc:	83 c8 40             	or     eax,0x40
c0001dff:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e03:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e07:	88 07                	mov    BYTE PTR [edi],al
c0001e09:	83 c4 08             	add    esp,0x8
c0001e0c:	5b                   	pop    ebx
c0001e0d:	5e                   	pop    esi
c0001e0e:	5f                   	pop    edi
c0001e0f:	5d                   	pop    ebp
c0001e10:	c3                   	ret    

c0001e11 <gen_numname>:
c0001e11:	57                   	push   edi
c0001e12:	89 cf                	mov    edi,ecx
c0001e14:	56                   	push   esi
c0001e15:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e1a:	53                   	push   ebx
c0001e1b:	89 c6                	mov    esi,eax
c0001e1d:	83 ec 10             	sub    esp,0x10
c0001e20:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e24:	e8 67 fc ff ff       	call   c0001a90 <mem_cpy>
c0001e29:	83 fb 05             	cmp    ebx,0x5
c0001e2c:	76 2d                	jbe    c0001e5b <gen_numname+0x4a>
c0001e2e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e31:	66 85 c0             	test   ax,ax
c0001e34:	74 25                	je     c0001e5b <gen_numname+0x4a>
c0001e36:	83 c7 02             	add    edi,0x2
c0001e39:	ba 10 00 00 00       	mov    edx,0x10
c0001e3e:	01 db                	add    ebx,ebx
c0001e40:	89 c1                	mov    ecx,eax
c0001e42:	66 d1 e8             	shr    ax,1
c0001e45:	83 e1 01             	and    ecx,0x1
c0001e48:	01 cb                	add    ebx,ecx
c0001e4a:	0f ba e3 10          	bt     ebx,0x10
c0001e4e:	73 06                	jae    c0001e56 <gen_numname+0x45>
c0001e50:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e56:	4a                   	dec    edx
c0001e57:	75 e5                	jne    c0001e3e <gen_numname+0x2d>
c0001e59:	eb d3                	jmp    c0001e2e <gen_numname+0x1d>
c0001e5b:	b8 07 00 00 00       	mov    eax,0x7
c0001e60:	88 d9                	mov    cl,bl
c0001e62:	83 e1 0f             	and    ecx,0xf
c0001e65:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e68:	80 fa 39             	cmp    dl,0x39
c0001e6b:	76 03                	jbe    c0001e70 <gen_numname+0x5f>
c0001e6d:	8d 51 37             	lea    edx,[ecx+0x37]
c0001e70:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001e73:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001e77:	89 da                	mov    edx,ebx
c0001e79:	c1 ea 04             	shr    edx,0x4
c0001e7c:	83 fb 0f             	cmp    ebx,0xf
c0001e7f:	76 06                	jbe    c0001e87 <gen_numname+0x76>
c0001e81:	89 c8                	mov    eax,ecx
c0001e83:	89 d3                	mov    ebx,edx
c0001e85:	eb d9                	jmp    c0001e60 <gen_numname+0x4f>
c0001e87:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e8c:	31 d2                	xor    edx,edx
c0001e8e:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e91:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e94:	39 ca                	cmp    edx,ecx
c0001e96:	73 18                	jae    c0001eb0 <gen_numname+0x9f>
c0001e98:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e9b:	3c 20                	cmp    al,0x20
c0001e9d:	74 11                	je     c0001eb0 <gen_numname+0x9f>
c0001e9f:	e8 41 fc ff ff       	call   c0001ae5 <dbc_1st>
c0001ea4:	85 c0                	test   eax,eax
c0001ea6:	74 05                	je     c0001ead <gen_numname+0x9c>
c0001ea8:	39 d3                	cmp    ebx,edx
c0001eaa:	74 04                	je     c0001eb0 <gen_numname+0x9f>
c0001eac:	42                   	inc    edx
c0001ead:	42                   	inc    edx
c0001eae:	eb e1                	jmp    c0001e91 <gen_numname+0x80>
c0001eb0:	b0 20                	mov    al,0x20
c0001eb2:	83 f9 07             	cmp    ecx,0x7
c0001eb5:	77 05                	ja     c0001ebc <gen_numname+0xab>
c0001eb7:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ebb:	41                   	inc    ecx
c0001ebc:	42                   	inc    edx
c0001ebd:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001ec1:	83 fa 07             	cmp    edx,0x7
c0001ec4:	76 ea                	jbe    c0001eb0 <gen_numname+0x9f>
c0001ec6:	83 c4 10             	add    esp,0x10
c0001ec9:	5b                   	pop    ebx
c0001eca:	5e                   	pop    esi
c0001ecb:	5f                   	pop    edi
c0001ecc:	c3                   	ret    

c0001ecd <sum_sfn>:
c0001ecd:	31 c9                	xor    ecx,ecx
c0001ecf:	31 d2                	xor    edx,edx
c0001ed1:	d0 ca                	ror    dl,1
c0001ed3:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001ed6:	41                   	inc    ecx
c0001ed7:	83 f9 0b             	cmp    ecx,0xb
c0001eda:	75 f5                	jne    c0001ed1 <sum_sfn+0x4>
c0001edc:	88 d0                	mov    al,dl
c0001ede:	c3                   	ret    

c0001edf <xdir_sum>:
c0001edf:	56                   	push   esi
c0001ee0:	31 c9                	xor    ecx,ecx
c0001ee2:	53                   	push   ebx
c0001ee3:	31 d2                	xor    edx,edx
c0001ee5:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001ee9:	43                   	inc    ebx
c0001eea:	c1 e3 05             	shl    ebx,0x5
c0001eed:	83 fa 02             	cmp    edx,0x2
c0001ef0:	74 0b                	je     c0001efd <xdir_sum+0x1e>
c0001ef2:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001ef6:	66 d1 c9             	ror    cx,1
c0001ef9:	01 f1                	add    ecx,esi
c0001efb:	eb 05                	jmp    c0001f02 <xdir_sum+0x23>
c0001efd:	ba 03 00 00 00       	mov    edx,0x3
c0001f02:	42                   	inc    edx
c0001f03:	39 d3                	cmp    ebx,edx
c0001f05:	77 e6                	ja     c0001eed <xdir_sum+0xe>
c0001f07:	89 c8                	mov    eax,ecx
c0001f09:	5b                   	pop    ebx
c0001f0a:	5e                   	pop    esi
c0001f0b:	c3                   	ret    

c0001f0c <xsum32>:
c0001f0c:	d1 ca                	ror    edx,1
c0001f0e:	0f b6 c0             	movzx  eax,al
c0001f11:	01 d0                	add    eax,edx
c0001f13:	c3                   	ret    

c0001f14 <get_xfileinfo>:
c0001f14:	55                   	push   ebp
c0001f15:	31 c9                	xor    ecx,ecx
c0001f17:	57                   	push   edi
c0001f18:	bd 40 00 00 00       	mov    ebp,0x40
c0001f1d:	56                   	push   esi
c0001f1e:	31 ff                	xor    edi,edi
c0001f20:	53                   	push   ebx
c0001f21:	89 c6                	mov    esi,eax
c0001f23:	83 ec 0c             	sub    esp,0xc
c0001f26:	89 d3                	mov    ebx,edx
c0001f28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f2f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f33:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f36:	76 6d                	jbe    c0001fa5 <get_xfileinfo+0x91>
c0001f38:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f3e:	76 0b                	jbe    c0001f4b <get_xfileinfo+0x37>
c0001f40:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f44:	bf 01 00 00 00       	mov    edi,0x1
c0001f49:	eb 63                	jmp    c0001fae <get_xfileinfo+0x9a>
c0001f4b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f51:	75 03                	jne    c0001f56 <get_xfileinfo+0x42>
c0001f53:	83 c5 02             	add    ebp,0x2
c0001f56:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f59:	83 c5 02             	add    ebp,0x2
c0001f5c:	e8 b0 fa ff ff       	call   c0001a11 <ld_word>
c0001f61:	ff 04 24             	inc    DWORD PTR [esp]
c0001f64:	66 85 c9             	test   cx,cx
c0001f67:	75 0d                	jne    c0001f76 <get_xfileinfo+0x62>
c0001f69:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001f6f:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001f74:	76 2b                	jbe    c0001fa1 <get_xfileinfo+0x8d>
c0001f76:	c1 e1 10             	shl    ecx,0x10
c0001f79:	ba ff 00 00 00       	mov    edx,0xff
c0001f7e:	0f b7 c0             	movzx  eax,ax
c0001f81:	29 fa                	sub    edx,edi
c0001f83:	09 c8                	or     eax,ecx
c0001f85:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f89:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f8d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f91:	e8 1b fc ff ff       	call   c0001bb1 <put_utf>
c0001f96:	84 c0                	test   al,al
c0001f98:	74 a6                	je     c0001f40 <get_xfileinfo+0x2c>
c0001f9a:	0f b6 c0             	movzx  eax,al
c0001f9d:	01 c7                	add    edi,eax
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	89 c1                	mov    ecx,eax
c0001fa3:	eb 8a                	jmp    c0001f2f <get_xfileinfo+0x1b>
c0001fa5:	85 ff                	test   edi,edi
c0001fa7:	74 97                	je     c0001f40 <get_xfileinfo+0x2c>
c0001fa9:	66 85 c9             	test   cx,cx
c0001fac:	75 92                	jne    c0001f40 <get_xfileinfo+0x2c>
c0001fae:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fb3:	31 c0                	xor    eax,eax
c0001fb5:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001fb9:	31 d2                	xor    edx,edx
c0001fbb:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001fbe:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001fc1:	80 e1 10             	and    cl,0x10
c0001fc4:	75 08                	jne    c0001fce <get_xfileinfo+0xba>
c0001fc6:	8d 46 38             	lea    eax,[esi+0x38]
c0001fc9:	e8 68 fa ff ff       	call   c0001a36 <ld_qword>
c0001fce:	89 03                	mov    DWORD PTR [ebx],eax
c0001fd0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001fd3:	8d 46 0c             	lea    eax,[esi+0xc]
c0001fd6:	e8 36 fa ff ff       	call   c0001a11 <ld_word>
c0001fdb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001fdf:	8d 46 0e             	lea    eax,[esi+0xe]
c0001fe2:	e8 2a fa ff ff       	call   c0001a11 <ld_word>
c0001fe7:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001feb:	83 c4 0c             	add    esp,0xc
c0001fee:	5b                   	pop    ebx
c0001fef:	5e                   	pop    esi
c0001ff0:	5f                   	pop    edi
c0001ff1:	5d                   	pop    ebp
c0001ff2:	c3                   	ret    

c0001ff3 <get_ldnumber>:
c0001ff3:	8b 10                	mov    edx,DWORD PTR [eax]
c0001ff5:	85 d2                	test   edx,edx
c0001ff7:	74 14                	je     c000200d <get_ldnumber+0x1a>
c0001ff9:	56                   	push   esi
c0001ffa:	53                   	push   ebx
c0001ffb:	89 d3                	mov    ebx,edx
c0001ffd:	43                   	inc    ebx
c0001ffe:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002001:	80 f9 1f             	cmp    cl,0x1f
c0002004:	76 0d                	jbe    c0002013 <get_ldnumber+0x20>
c0002006:	80 f9 3a             	cmp    cl,0x3a
c0002009:	75 f2                	jne    c0001ffd <get_ldnumber+0xa>
c000200b:	eb 0a                	jmp    c0002017 <get_ldnumber+0x24>
c000200d:	83 c9 ff             	or     ecx,0xffffffff
c0002010:	89 c8                	mov    eax,ecx
c0002012:	c3                   	ret    
c0002013:	31 c9                	xor    ecx,ecx
c0002015:	eb 24                	jmp    c000203b <get_ldnumber+0x48>
c0002017:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000201a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000201d:	80 f9 09             	cmp    cl,0x9
c0002020:	77 16                	ja     c0002038 <get_ldnumber+0x45>
c0002022:	83 c2 02             	add    edx,0x2
c0002025:	83 c9 ff             	or     ecx,0xffffffff
c0002028:	39 d3                	cmp    ebx,edx
c000202a:	75 0f                	jne    c000203b <get_ldnumber+0x48>
c000202c:	89 f2                	mov    edx,esi
c000202e:	89 18                	mov    DWORD PTR [eax],ebx
c0002030:	0f be ca             	movsx  ecx,dl
c0002033:	83 e9 30             	sub    ecx,0x30
c0002036:	eb 03                	jmp    c000203b <get_ldnumber+0x48>
c0002038:	83 c9 ff             	or     ecx,0xffffffff
c000203b:	89 c8                	mov    eax,ecx
c000203d:	5b                   	pop    ebx
c000203e:	5e                   	pop    esi
c000203f:	c3                   	ret    

c0002040 <crc32>:
c0002040:	56                   	push   esi
c0002041:	89 d6                	mov    esi,edx
c0002043:	53                   	push   ebx
c0002044:	b2 01                	mov    dl,0x1
c0002046:	bb 08 00 00 00       	mov    ebx,0x8
c000204b:	89 f1                	mov    ecx,esi
c000204d:	84 d1                	test   cl,dl
c000204f:	0f 95 c1             	setne  cl
c0002052:	0f b6 c9             	movzx  ecx,cl
c0002055:	31 c1                	xor    ecx,eax
c0002057:	89 c8                	mov    eax,ecx
c0002059:	d1 e8                	shr    eax,1
c000205b:	80 e1 01             	and    cl,0x1
c000205e:	74 05                	je     c0002065 <crc32+0x25>
c0002060:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002065:	d1 e2                	shl    edx,1
c0002067:	4b                   	dec    ebx
c0002068:	75 e1                	jne    c000204b <crc32+0xb>
c000206a:	5b                   	pop    ebx
c000206b:	5e                   	pop    esi
c000206c:	c3                   	ret    

c000206d <test_gpt_header>:
c000206d:	55                   	push   ebp
c000206e:	b9 10 00 00 00       	mov    ecx,0x10
c0002073:	57                   	push   edi
c0002074:	ba 80 7e 02 c0       	mov    edx,0xc0027e80
c0002079:	56                   	push   esi
c000207a:	31 ff                	xor    edi,edi
c000207c:	53                   	push   ebx
c000207d:	89 c3                	mov    ebx,eax
c000207f:	e8 2c fa ff ff       	call   c0001ab0 <mem_cmp>
c0002084:	85 c0                	test   eax,eax
c0002086:	75 55                	jne    c00020dd <test_gpt_header+0x70>
c0002088:	89 c7                	mov    edi,eax
c000208a:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000208f:	83 ce ff             	or     esi,0xffffffff
c0002092:	31 d2                	xor    edx,edx
c0002094:	83 fd 03             	cmp    ebp,0x3
c0002097:	76 05                	jbe    c000209e <test_gpt_header+0x31>
c0002099:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000209e:	89 f0                	mov    eax,esi
c00020a0:	45                   	inc    ebp
c00020a1:	e8 9a ff ff ff       	call   c0002040 <crc32>
c00020a6:	83 fd 4c             	cmp    ebp,0x4c
c00020a9:	89 c6                	mov    esi,eax
c00020ab:	75 e5                	jne    c0002092 <test_gpt_header+0x25>
c00020ad:	8d 43 10             	lea    eax,[ebx+0x10]
c00020b0:	f7 d6                	not    esi
c00020b2:	e8 67 f9 ff ff       	call   c0001a1e <ld_dword>
c00020b7:	39 c6                	cmp    esi,eax
c00020b9:	75 22                	jne    c00020dd <test_gpt_header+0x70>
c00020bb:	8d 43 54             	lea    eax,[ebx+0x54]
c00020be:	e8 5b f9 ff ff       	call   c0001a1e <ld_dword>
c00020c3:	83 c0 80             	add    eax,0xffffff80
c00020c6:	75 15                	jne    c00020dd <test_gpt_header+0x70>
c00020c8:	8d 43 50             	lea    eax,[ebx+0x50]
c00020cb:	e8 4e f9 ff ff       	call   c0001a1e <ld_dword>
c00020d0:	3d 80 00 00 00       	cmp    eax,0x80
c00020d5:	0f 96 c0             	setbe  al
c00020d8:	0f b6 c0             	movzx  eax,al
c00020db:	89 c7                	mov    edi,eax
c00020dd:	5b                   	pop    ebx
c00020de:	89 f8                	mov    eax,edi
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	5d                   	pop    ebp
c00020e3:	c3                   	ret    

c00020e4 <make_rand>:
c00020e4:	56                   	push   esi
c00020e5:	85 c0                	test   eax,eax
c00020e7:	53                   	push   ebx
c00020e8:	75 05                	jne    c00020ef <make_rand+0xb>
c00020ea:	b8 01 00 00 00       	mov    eax,0x1
c00020ef:	01 d1                	add    ecx,edx
c00020f1:	bb 08 00 00 00       	mov    ebx,0x8
c00020f6:	89 c6                	mov    esi,eax
c00020f8:	d1 e8                	shr    eax,1
c00020fa:	83 e6 01             	and    esi,0x1
c00020fd:	85 f6                	test   esi,esi
c00020ff:	74 05                	je     c0002106 <make_rand+0x22>
c0002101:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002106:	4b                   	dec    ebx
c0002107:	75 ed                	jne    c00020f6 <make_rand+0x12>
c0002109:	42                   	inc    edx
c000210a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000210d:	39 ca                	cmp    edx,ecx
c000210f:	75 e0                	jne    c00020f1 <make_rand+0xd>
c0002111:	5b                   	pop    ebx
c0002112:	5e                   	pop    esi
c0002113:	c3                   	ret    

c0002114 <validate>:
c0002114:	56                   	push   esi
c0002115:	53                   	push   ebx
c0002116:	89 d6                	mov    esi,edx
c0002118:	51                   	push   ecx
c0002119:	85 c0                	test   eax,eax
c000211b:	75 09                	jne    c0002126 <validate+0x12>
c000211d:	b8 09 00 00 00       	mov    eax,0x9
c0002122:	31 c9                	xor    ecx,ecx
c0002124:	eb 2f                	jmp    c0002155 <validate+0x41>
c0002126:	89 c3                	mov    ebx,eax
c0002128:	8b 00                	mov    eax,DWORD PTR [eax]
c000212a:	85 c0                	test   eax,eax
c000212c:	74 ef                	je     c000211d <validate+0x9>
c000212e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002131:	74 ea                	je     c000211d <validate+0x9>
c0002133:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002137:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000213b:	75 e0                	jne    c000211d <validate+0x9>
c000213d:	83 ec 0c             	sub    esp,0xc
c0002140:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002144:	50                   	push   eax
c0002145:	e8 76 f8 ff ff       	call   c00019c0 <disk_status>
c000214a:	83 c4 10             	add    esp,0x10
c000214d:	a8 01                	test   al,0x1
c000214f:	75 cc                	jne    c000211d <validate+0x9>
c0002151:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002153:	31 c0                	xor    eax,eax
c0002155:	89 0e                	mov    DWORD PTR [esi],ecx
c0002157:	5a                   	pop    edx
c0002158:	5b                   	pop    ebx
c0002159:	5e                   	pop    esi
c000215a:	c3                   	ret    

c000215b <sync_window>:
c000215b:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000215f:	0f 84 85 00 00 00    	je     c00021ea <sync_window+0x8f>
c0002165:	55                   	push   ebp
c0002166:	8d 68 54             	lea    ebp,[eax+0x54]
c0002169:	57                   	push   edi
c000216a:	56                   	push   esi
c000216b:	53                   	push   ebx
c000216c:	89 c3                	mov    ebx,eax
c000216e:	83 ec 28             	sub    esp,0x28
c0002171:	6a 01                	push   0x1
c0002173:	ff 70 50             	push   DWORD PTR [eax+0x50]
c0002176:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c0002179:	55                   	push   ebp
c000217a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000217e:	50                   	push   eax
c000217f:	e8 58 f8 ff ff       	call   c00019dc <disk_write>
c0002184:	83 c4 20             	add    esp,0x20
c0002187:	ba 01 00 00 00       	mov    edx,0x1
c000218c:	85 c0                	test   eax,eax
c000218e:	75 50                	jne    c00021e0 <sync_window+0x85>
c0002190:	31 ff                	xor    edi,edi
c0002192:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002195:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002199:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000219d:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021a0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021a3:	89 c6                	mov    esi,eax
c00021a5:	89 d7                	mov    edi,edx
c00021a7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021aa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021ae:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021b1:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021b5:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021b9:	73 23                	jae    c00021de <sync_window+0x83>
c00021bb:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021bf:	75 1d                	jne    c00021de <sync_window+0x83>
c00021c1:	83 ec 0c             	sub    esp,0xc
c00021c4:	6a 01                	push   0x1
c00021c6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021ca:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021ce:	52                   	push   edx
c00021cf:	50                   	push   eax
c00021d0:	55                   	push   ebp
c00021d1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021d5:	50                   	push   eax
c00021d6:	e8 01 f8 ff ff       	call   c00019dc <disk_write>
c00021db:	83 c4 20             	add    esp,0x20
c00021de:	31 d2                	xor    edx,edx
c00021e0:	83 c4 1c             	add    esp,0x1c
c00021e3:	89 d0                	mov    eax,edx
c00021e5:	5b                   	pop    ebx
c00021e6:	5e                   	pop    esi
c00021e7:	5f                   	pop    edi
c00021e8:	5d                   	pop    ebp
c00021e9:	c3                   	ret    
c00021ea:	31 d2                	xor    edx,edx
c00021ec:	89 d0                	mov    eax,edx
c00021ee:	c3                   	ret    

c00021ef <move_window>:
c00021ef:	56                   	push   esi
c00021f0:	53                   	push   ebx
c00021f1:	89 c3                	mov    ebx,eax
c00021f3:	83 ec 14             	sub    esp,0x14
c00021f6:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c00021f9:	75 07                	jne    c0002202 <move_window+0x13>
c00021fb:	31 f6                	xor    esi,esi
c00021fd:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002200:	74 59                	je     c000225b <move_window+0x6c>
c0002202:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002206:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000220a:	89 d8                	mov    eax,ebx
c000220c:	e8 4a ff ff ff       	call   c000215b <sync_window>
c0002211:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002215:	89 c6                	mov    esi,eax
c0002217:	85 c0                	test   eax,eax
c0002219:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000221d:	75 3c                	jne    c000225b <move_window+0x6c>
c000221f:	83 ec 0c             	sub    esp,0xc
c0002222:	8d 43 54             	lea    eax,[ebx+0x54]
c0002225:	6a 01                	push   0x1
c0002227:	51                   	push   ecx
c0002228:	52                   	push   edx
c0002229:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000222d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002231:	50                   	push   eax
c0002232:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002236:	50                   	push   eax
c0002237:	e8 8a f7 ff ff       	call   c00019c6 <disk_read>
c000223c:	83 c4 20             	add    esp,0x20
c000223f:	85 c0                	test   eax,eax
c0002241:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002245:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002249:	74 0a                	je     c0002255 <move_window+0x66>
c000224b:	83 ca ff             	or     edx,0xffffffff
c000224e:	be 01 00 00 00       	mov    esi,0x1
c0002253:	89 d1                	mov    ecx,edx
c0002255:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002258:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000225b:	89 f0                	mov    eax,esi
c000225d:	83 c4 14             	add    esp,0x14
c0002260:	5b                   	pop    ebx
c0002261:	5e                   	pop    esi
c0002262:	c3                   	ret    

c0002263 <check_fs>:
c0002263:	53                   	push   ebx
c0002264:	89 c3                	mov    ebx,eax
c0002266:	83 ec 08             	sub    esp,0x8
c0002269:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000226d:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c0002274:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c000227b:	e8 6f ff ff ff       	call   c00021ef <move_window>
c0002280:	ba 04 00 00 00       	mov    edx,0x4
c0002285:	85 c0                	test   eax,eax
c0002287:	0f 85 89 00 00 00    	jne    c0002316 <check_fs+0xb3>
c000228d:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002293:	e8 79 f7 ff ff       	call   c0001a11 <ld_word>
c0002298:	ba 03 00 00 00       	mov    edx,0x3
c000229d:	66 3d 55 aa          	cmp    ax,0xaa55
c00022a1:	75 73                	jne    c0002316 <check_fs+0xb3>
c00022a3:	ba a0 7f 02 c0       	mov    edx,0xc0027fa0
c00022a8:	8d 43 54             	lea    eax,[ebx+0x54]
c00022ab:	b9 0b 00 00 00       	mov    ecx,0xb
c00022b0:	e8 fb f7 ff ff       	call   c0001ab0 <mem_cmp>
c00022b5:	ba 01 00 00 00       	mov    edx,0x1
c00022ba:	85 c0                	test   eax,eax
c00022bc:	74 58                	je     c0002316 <check_fs+0xb3>
c00022be:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022c1:	8d 50 18             	lea    edx,[eax+0x18]
c00022c4:	80 fa 01             	cmp    dl,0x1
c00022c7:	76 09                	jbe    c00022d2 <check_fs+0x6f>
c00022c9:	ba 02 00 00 00       	mov    edx,0x2
c00022ce:	3c eb                	cmp    al,0xeb
c00022d0:	75 44                	jne    c0002316 <check_fs+0xb3>
c00022d2:	ba 3c b0 02 c0       	mov    edx,0xc002b03c
c00022d7:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00022dd:	b9 03 00 00 00       	mov    ecx,0x3
c00022e2:	e8 c9 f7 ff ff       	call   c0001ab0 <mem_cmp>
c00022e7:	31 d2                	xor    edx,edx
c00022e9:	85 c0                	test   eax,eax
c00022eb:	74 29                	je     c0002316 <check_fs+0xb3>
c00022ed:	ba ac 7f 02 c0       	mov    edx,0xc0027fac
c00022f2:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c00022f8:	b9 05 00 00 00       	mov    ecx,0x5
c00022fd:	e8 ae f7 ff ff       	call   c0001ab0 <mem_cmp>
c0002302:	31 d2                	xor    edx,edx
c0002304:	85 c0                	test   eax,eax
c0002306:	74 0e                	je     c0002316 <check_fs+0xb3>
c0002308:	31 d2                	xor    edx,edx
c000230a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002311:	0f 95 c2             	setne  dl
c0002314:	01 d2                	add    edx,edx
c0002316:	89 d0                	mov    eax,edx
c0002318:	83 c4 08             	add    esp,0x8
c000231b:	5b                   	pop    ebx
c000231c:	c3                   	ret    

c000231d <find_volume>:
c000231d:	55                   	push   ebp
c000231e:	31 c9                	xor    ecx,ecx
c0002320:	57                   	push   edi
c0002321:	56                   	push   esi
c0002322:	89 d6                	mov    esi,edx
c0002324:	53                   	push   ebx
c0002325:	31 d2                	xor    edx,edx
c0002327:	83 ec 3c             	sub    esp,0x3c
c000232a:	89 c3                	mov    ebx,eax
c000232c:	e8 32 ff ff ff       	call   c0002263 <check_fs>
c0002331:	83 f8 02             	cmp    eax,0x2
c0002334:	74 0e                	je     c0002344 <find_volume+0x27>
c0002336:	0f 87 5d 01 00 00    	ja     c0002499 <find_volume+0x17c>
c000233c:	85 f6                	test   esi,esi
c000233e:	0f 84 55 01 00 00    	je     c0002499 <find_volume+0x17c>
c0002344:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000234b:	0f 85 dd 00 00 00    	jne    c000242e <find_volume+0x111>
c0002351:	31 c9                	xor    ecx,ecx
c0002353:	ba 01 00 00 00       	mov    edx,0x1
c0002358:	89 d8                	mov    eax,ebx
c000235a:	e8 90 fe ff ff       	call   c00021ef <move_window>
c000235f:	85 c0                	test   eax,eax
c0002361:	74 0a                	je     c000236d <find_volume+0x50>
c0002363:	b8 04 00 00 00       	mov    eax,0x4
c0002368:	e9 2c 01 00 00       	jmp    c0002499 <find_volume+0x17c>
c000236d:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002370:	89 e8                	mov    eax,ebp
c0002372:	e8 f6 fc ff ff       	call   c000206d <test_gpt_header>
c0002377:	85 c0                	test   eax,eax
c0002379:	75 0a                	jne    c0002385 <find_volume+0x68>
c000237b:	b8 03 00 00 00       	mov    eax,0x3
c0002380:	e9 14 01 00 00       	jmp    c0002499 <find_volume+0x17c>
c0002385:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c000238b:	e8 8e f6 ff ff       	call   c0001a1e <ld_dword>
c0002390:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002394:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c000239a:	e8 97 f6 ff ff       	call   c0001a36 <ld_qword>
c000239f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023ab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023af:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023b7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023bb:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023bf:	74 ba                	je     c000237b <find_volume+0x5e>
c00023c1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023c5:	31 c9                	xor    ecx,ecx
c00023c7:	c1 e7 07             	shl    edi,0x7
c00023ca:	89 d8                	mov    eax,ebx
c00023cc:	89 fa                	mov    edx,edi
c00023ce:	c1 ea 09             	shr    edx,0x9
c00023d1:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00023d5:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00023d9:	e8 11 fe ff ff       	call   c00021ef <move_window>
c00023de:	85 c0                	test   eax,eax
c00023e0:	75 81                	jne    c0002363 <find_volume+0x46>
c00023e2:	81 e7 80 01 00 00    	and    edi,0x180
c00023e8:	b9 10 00 00 00       	mov    ecx,0x10
c00023ed:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c00023f1:	ba 90 7f 02 c0       	mov    edx,0xc0027f90
c00023f6:	e8 b5 f6 ff ff       	call   c0001ab0 <mem_cmp>
c00023fb:	85 c0                	test   eax,eax
c00023fd:	75 29                	jne    c0002428 <find_volume+0x10b>
c00023ff:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002403:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002407:	e8 2a f6 ff ff       	call   c0001a36 <ld_qword>
c000240c:	89 d1                	mov    ecx,edx
c000240e:	89 c2                	mov    edx,eax
c0002410:	89 d8                	mov    eax,ebx
c0002412:	e8 4c fe ff ff       	call   c0002263 <check_fs>
c0002417:	85 f6                	test   esi,esi
c0002419:	75 07                	jne    c0002422 <find_volume+0x105>
c000241b:	83 f8 01             	cmp    eax,0x1
c000241e:	77 08                	ja     c0002428 <find_volume+0x10b>
c0002420:	eb 77                	jmp    c0002499 <find_volume+0x17c>
c0002422:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002426:	74 71                	je     c0002499 <find_volume+0x17c>
c0002428:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000242c:	eb 89                	jmp    c00023b7 <find_volume+0x9a>
c000242e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002432:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002438:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000243e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002442:	89 cd                	mov    ebp,ecx
c0002444:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002448:	89 f8                	mov    eax,edi
c000244a:	83 c7 10             	add    edi,0x10
c000244d:	e8 cc f5 ff ff       	call   c0001a1e <ld_dword>
c0002452:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002456:	89 01                	mov    DWORD PTR [ecx],eax
c0002458:	83 c1 04             	add    ecx,0x4
c000245b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000245f:	75 e3                	jne    c0002444 <find_volume+0x127>
c0002461:	31 ff                	xor    edi,edi
c0002463:	85 f6                	test   esi,esi
c0002465:	74 03                	je     c000246a <find_volume+0x14d>
c0002467:	8d 7e ff             	lea    edi,[esi-0x1]
c000246a:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c000246e:	85 d2                	test   edx,edx
c0002470:	74 14                	je     c0002486 <find_volume+0x169>
c0002472:	31 c9                	xor    ecx,ecx
c0002474:	89 d8                	mov    eax,ebx
c0002476:	e8 e8 fd ff ff       	call   c0002263 <check_fs>
c000247b:	83 f8 01             	cmp    eax,0x1
c000247e:	76 19                	jbe    c0002499 <find_volume+0x17c>
c0002480:	85 f6                	test   esi,esi
c0002482:	74 0f                	je     c0002493 <find_volume+0x176>
c0002484:	eb 13                	jmp    c0002499 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 85 ed fe ff ff    	jne    c000237b <find_volume+0x5e>
c000248e:	b8 03 00 00 00       	mov    eax,0x3
c0002493:	47                   	inc    edi
c0002494:	83 ff 03             	cmp    edi,0x3
c0002497:	76 d1                	jbe    c000246a <find_volume+0x14d>
c0002499:	83 c4 3c             	add    esp,0x3c
c000249c:	5b                   	pop    ebx
c000249d:	5e                   	pop    esi
c000249e:	5f                   	pop    edi
c000249f:	5d                   	pop    ebp
c00024a0:	c3                   	ret    

c00024a1 <mount_volume>:
c00024a1:	55                   	push   ebp
c00024a2:	57                   	push   edi
c00024a3:	89 cf                	mov    edi,ecx
c00024a5:	56                   	push   esi
c00024a6:	53                   	push   ebx
c00024a7:	bb 0b 00 00 00       	mov    ebx,0xb
c00024ac:	83 ec 3c             	sub    esp,0x3c
c00024af:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024b5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024b9:	e8 35 fb ff ff       	call   c0001ff3 <get_ldnumber>
c00024be:	85 c0                	test   eax,eax
c00024c0:	0f 88 3a 05 00 00    	js     c0002a00 <mount_volume+0x55f>
c00024c6:	8b 2c 85 80 cb 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd3480]
c00024cd:	89 c6                	mov    esi,eax
c00024cf:	bb 0c 00 00 00       	mov    ebx,0xc
c00024d4:	85 ed                	test   ebp,ebp
c00024d6:	0f 84 24 05 00 00    	je     c0002a00 <mount_volume+0x55f>
c00024dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024e0:	83 e7 fe             	and    edi,0xfffffffe
c00024e3:	89 2a                	mov    DWORD PTR [edx],ebp
c00024e5:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00024e9:	74 32                	je     c000251d <mount_volume+0x7c>
c00024eb:	83 ec 0c             	sub    esp,0xc
c00024ee:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00024f2:	50                   	push   eax
c00024f3:	e8 c8 f4 ff ff       	call   c00019c0 <disk_status>
c00024f8:	83 c4 10             	add    esp,0x10
c00024fb:	a8 01                	test   al,0x1
c00024fd:	75 1e                	jne    c000251d <mount_volume+0x7c>
c00024ff:	31 db                	xor    ebx,ebx
c0002501:	89 f9                	mov    ecx,edi
c0002503:	84 c9                	test   cl,cl
c0002505:	0f 84 f5 04 00 00    	je     c0002a00 <mount_volume+0x55f>
c000250b:	a8 04                	test   al,0x4
c000250d:	0f 84 ed 04 00 00    	je     c0002a00 <mount_volume+0x55f>
c0002513:	bb 0a 00 00 00       	mov    ebx,0xa
c0002518:	e9 e3 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	89 f0                	mov    eax,esi
c0002522:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002526:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002529:	0f b6 f0             	movzx  esi,al
c000252c:	bb 03 00 00 00       	mov    ebx,0x3
c0002531:	56                   	push   esi
c0002532:	e8 8c f4 ff ff       	call   c00019c3 <disk_initialize>
c0002537:	83 c4 10             	add    esp,0x10
c000253a:	a8 01                	test   al,0x1
c000253c:	0f 85 be 04 00 00    	jne    c0002a00 <mount_volume+0x55f>
c0002542:	89 f9                	mov    ecx,edi
c0002544:	84 c9                	test   cl,cl
c0002546:	74 04                	je     c000254c <mount_volume+0xab>
c0002548:	a8 04                	test   al,0x4
c000254a:	75 c7                	jne    c0002513 <mount_volume+0x72>
c000254c:	31 d2                	xor    edx,edx
c000254e:	89 e8                	mov    eax,ebp
c0002550:	e8 c8 fd ff ff       	call   c000231d <find_volume>
c0002555:	83 f8 04             	cmp    eax,0x4
c0002558:	75 0a                	jne    c0002564 <mount_volume+0xc3>
c000255a:	bb 01 00 00 00       	mov    ebx,0x1
c000255f:	e9 9c 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c0002564:	83 f8 01             	cmp    eax,0x1
c0002567:	76 0a                	jbe    c0002573 <mount_volume+0xd2>
c0002569:	bb 0d 00 00 00       	mov    ebx,0xd
c000256e:	e9 8d 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c0002573:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c0002576:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c0002579:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000257d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002581:	75 17                	jne    c000259a <mount_volume+0xf9>
c0002583:	b8 0b 00 00 00       	mov    eax,0xb
c0002588:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000258d:	75 da                	jne    c0002569 <mount_volume+0xc8>
c000258f:	40                   	inc    eax
c0002590:	83 f8 40             	cmp    eax,0x40
c0002593:	75 f3                	jne    c0002588 <mount_volume+0xe7>
c0002595:	e9 5a 02 00 00       	jmp    c00027f4 <mount_volume+0x353>
c000259a:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000259d:	e8 6f f4 ff ff       	call   c0001a11 <ld_word>
c00025a2:	66 3d 00 02          	cmp    ax,0x200
c00025a6:	75 c1                	jne    c0002569 <mount_volume+0xc8>
c00025a8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025ab:	e8 61 f4 ff ff       	call   c0001a11 <ld_word>
c00025b0:	0f b7 c0             	movzx  eax,ax
c00025b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025b7:	85 c0                	test   eax,eax
c00025b9:	75 0c                	jne    c00025c7 <mount_volume+0x126>
c00025bb:	8d 45 78             	lea    eax,[ebp+0x78]
c00025be:	e8 5b f4 ff ff       	call   c0001a1e <ld_dword>
c00025c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025cb:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025ce:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00025d1:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00025d5:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00025d8:	48                   	dec    eax
c00025d9:	3c 01                	cmp    al,0x1
c00025db:	77 8c                	ja     c0002569 <mount_volume+0xc8>
c00025dd:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00025e1:	89 c3                	mov    ebx,eax
c00025e3:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00025e7:	66 85 c0             	test   ax,ax
c00025ea:	0f 84 79 ff ff ff    	je     c0002569 <mount_volume+0xc8>
c00025f0:	8d 40 ff             	lea    eax,[eax-0x1]
c00025f3:	85 d8                	test   eax,ebx
c00025f5:	0f 85 6e ff ff ff    	jne    c0002569 <mount_volume+0xc8>
c00025fb:	8d 45 65             	lea    eax,[ebp+0x65]
c00025fe:	e8 0e f4 ff ff       	call   c0001a11 <ld_word>
c0002603:	89 c7                	mov    edi,eax
c0002605:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002609:	a8 0f                	test   al,0xf
c000260b:	0f 85 58 ff ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002611:	8d 45 67             	lea    eax,[ebp+0x67]
c0002614:	e8 f8 f3 ff ff       	call   c0001a11 <ld_word>
c0002619:	0f b7 f0             	movzx  esi,ax
c000261c:	85 f6                	test   esi,esi
c000261e:	75 0a                	jne    c000262a <mount_volume+0x189>
c0002620:	8d 45 74             	lea    eax,[ebp+0x74]
c0002623:	e8 f6 f3 ff ff       	call   c0001a1e <ld_dword>
c0002628:	89 c6                	mov    esi,eax
c000262a:	8d 45 62             	lea    eax,[ebp+0x62]
c000262d:	e8 df f3 ff ff       	call   c0001a11 <ld_word>
c0002632:	66 85 c0             	test   ax,ax
c0002635:	0f 84 2e ff ff ff    	je     c0002569 <mount_volume+0xc8>
c000263b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002640:	0f b7 c8             	movzx  ecx,ax
c0002643:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002648:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000264c:	89 fa                	mov    edx,edi
c000264e:	66 c1 ea 04          	shr    dx,0x4
c0002652:	0f b7 d2             	movzx  edx,dx
c0002655:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002659:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000265c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002660:	39 c6                	cmp    esi,eax
c0002662:	0f 82 01 ff ff ff    	jb     c0002569 <mount_volume+0xc8>
c0002668:	29 c6                	sub    esi,eax
c000266a:	31 d2                	xor    edx,edx
c000266c:	89 f0                	mov    eax,esi
c000266e:	f7 f3                	div    ebx
c0002670:	39 de                	cmp    esi,ebx
c0002672:	0f 82 f1 fe ff ff    	jb     c0002569 <mount_volume+0xc8>
c0002678:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000267d:	0f 87 e6 fe ff ff    	ja     c0002569 <mount_volume+0xc8>
c0002683:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002688:	0f 86 63 03 00 00    	jbe    c00029f1 <mount_volume+0x550>
c000268e:	bb 03 00 00 00       	mov    ebx,0x3
c0002693:	8d 70 02             	lea    esi,[eax+0x2]
c0002696:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000269a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000269e:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026a1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026a4:	31 d2                	xor    edx,edx
c00026a6:	89 c8                	mov    eax,ecx
c00026a8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026ab:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026af:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026b3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026b7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026bb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026be:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026c5:	31 d2                	xor    edx,edx
c00026c7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026cb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026cf:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00026d2:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00026d5:	83 fb 03             	cmp    ebx,0x3
c00026d8:	75 2b                	jne    c0002705 <mount_volume+0x264>
c00026da:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00026dd:	e8 2f f3 ff ff       	call   c0001a11 <ld_word>
c00026e2:	66 09 c7             	or     di,ax
c00026e5:	0f 85 7e fe ff ff    	jne    c0002569 <mount_volume+0xc8>
c00026eb:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c00026f1:	c1 e6 02             	shl    esi,0x2
c00026f4:	e8 25 f3 ff ff       	call   c0001a1e <ld_dword>
c00026f9:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002700:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002703:	eb 30                	jmp    c0002735 <mount_volume+0x294>
c0002705:	66 85 ff             	test   di,di
c0002708:	0f 84 5b fe ff ff    	je     c0002569 <mount_volume+0xc8>
c000270e:	31 d2                	xor    edx,edx
c0002710:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002714:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002718:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000271c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000271f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002722:	83 fb 02             	cmp    ebx,0x2
c0002725:	75 04                	jne    c000272b <mount_volume+0x28a>
c0002727:	01 f6                	add    esi,esi
c0002729:	eb 0a                	jmp    c0002735 <mount_volume+0x294>
c000272b:	8d 04 76             	lea    eax,[esi+esi*2]
c000272e:	83 e6 01             	and    esi,0x1
c0002731:	d1 e8                	shr    eax,1
c0002733:	01 c6                	add    esi,eax
c0002735:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000273b:	c1 ee 09             	shr    esi,0x9
c000273e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002742:	0f 87 21 fe ff ff    	ja     c0002569 <mount_volume+0xc8>
c0002748:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000274f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002756:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000275a:	83 fb 03             	cmp    ebx,0x3
c000275d:	75 7a                	jne    c00027d9 <mount_volume+0x338>
c000275f:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002765:	e8 a7 f2 ff ff       	call   c0001a11 <ld_word>
c000276a:	66 48                	dec    ax
c000276c:	75 6b                	jne    c00027d9 <mount_volume+0x338>
c000276e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002772:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002776:	83 c2 01             	add    edx,0x1
c0002779:	89 e8                	mov    eax,ebp
c000277b:	83 d1 00             	adc    ecx,0x0
c000277e:	e8 6c fa ff ff       	call   c00021ef <move_window>
c0002783:	85 c0                	test   eax,eax
c0002785:	75 52                	jne    c00027d9 <mount_volume+0x338>
c0002787:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c000278b:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002791:	e8 7b f2 ff ff       	call   c0001a11 <ld_word>
c0002796:	66 3d 55 aa          	cmp    ax,0xaa55
c000279a:	75 3d                	jne    c00027d9 <mount_volume+0x338>
c000279c:	8d 45 54             	lea    eax,[ebp+0x54]
c000279f:	e8 7a f2 ff ff       	call   c0001a1e <ld_dword>
c00027a4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027a9:	75 2e                	jne    c00027d9 <mount_volume+0x338>
c00027ab:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027b1:	e8 68 f2 ff ff       	call   c0001a1e <ld_dword>
c00027b6:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027bb:	75 1c                	jne    c00027d9 <mount_volume+0x338>
c00027bd:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027c3:	e8 56 f2 ff ff       	call   c0001a1e <ld_dword>
c00027c8:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027cb:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00027d1:	e8 48 f2 ff ff       	call   c0001a1e <ld_dword>
c00027d6:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00027d9:	66 a1 60 cb 02 c0    	mov    ax,ds:0xc002cb60
c00027df:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00027e2:	40                   	inc    eax
c00027e3:	31 db                	xor    ebx,ebx
c00027e5:	66 a3 60 cb 02 c0    	mov    ds:0xc002cb60,ax
c00027eb:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c00027ef:	e9 0c 02 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c00027f4:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c00027fa:	e8 12 f2 ff ff       	call   c0001a11 <ld_word>
c00027ff:	66 3d 00 01          	cmp    ax,0x100
c0002803:	0f 85 60 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002809:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002810:	0f 85 53 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002816:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000281c:	e8 15 f2 ff ff       	call   c0001a36 <ld_qword>
c0002821:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002825:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002829:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000282f:	e8 ea f1 ff ff       	call   c0001a1e <ld_dword>
c0002834:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002837:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000283d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002840:	fe c8                	dec    al
c0002842:	0f 85 21 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002848:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c000284f:	bb 01 00 00 00       	mov    ebx,0x1
c0002854:	d3 e3                	shl    ebx,cl
c0002856:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000285a:	66 85 db             	test   bx,bx
c000285d:	0f 84 06 fd ff ff    	je     c0002569 <mount_volume+0xc8>
c0002863:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002869:	e8 b0 f1 ff ff       	call   c0001a1e <ld_dword>
c000286e:	89 c6                	mov    esi,eax
c0002870:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002875:	0f 87 ee fc ff ff    	ja     c0002569 <mount_volume+0xc8>
c000287b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000287f:	8d 40 02             	lea    eax,[eax+0x2]
c0002882:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002885:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002888:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000288c:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000288f:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002895:	e8 84 f1 ff ff       	call   c0001a1e <ld_dword>
c000289a:	31 d2                	xor    edx,edx
c000289c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028a0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028ac:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028af:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028b2:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028b8:	e8 61 f1 ff ff       	call   c0001a1e <ld_dword>
c00028bd:	31 d2                	xor    edx,edx
c00028bf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028c3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028cb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028ce:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d1:	0f b7 c3             	movzx  eax,bx
c00028d4:	31 d2                	xor    edx,edx
c00028d6:	0f af f0             	imul   esi,eax
c00028d9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00028e3:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c00028e7:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00028eb:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c00028ef:	39 c1                	cmp    ecx,eax
c00028f1:	89 df                	mov    edi,ebx
c00028f3:	19 d7                	sbb    edi,edx
c00028f5:	0f 82 6e fc ff ff    	jb     c0002569 <mount_volume+0xc8>
c00028fb:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002901:	31 db                	xor    ebx,ebx
c0002903:	e8 16 f1 ff ff       	call   c0001a1e <ld_dword>
c0002908:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000290f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002912:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000291a:	85 db                	test   ebx,ebx
c000291c:	75 39                	jne    c0002957 <mount_volume+0x4b6>
c000291e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002922:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002926:	0f 86 3d fc ff ff    	jbe    c0002569 <mount_volume+0xc8>
c000292c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c000292f:	31 ff                	xor    edi,edi
c0002931:	89 e8                	mov    eax,ebp
c0002933:	e8 72 f3 ff ff       	call   c0001caa <clst2sect>
c0002938:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000293c:	01 c6                	add    esi,eax
c000293e:	89 e8                	mov    eax,ebp
c0002940:	11 d7                	adc    edi,edx
c0002942:	89 f2                	mov    edx,esi
c0002944:	89 f9                	mov    ecx,edi
c0002946:	e8 a4 f8 ff ff       	call   c00021ef <move_window>
c000294b:	85 c0                	test   eax,eax
c000294d:	0f 85 07 fc ff ff    	jne    c000255a <mount_volume+0xb9>
c0002953:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002957:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c000295c:	74 0b                	je     c0002969 <mount_volume+0x4c8>
c000295e:	83 c3 20             	add    ebx,0x20
c0002961:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002967:	eb b1                	jmp    c000291a <mount_volume+0x479>
c0002969:	8d 75 54             	lea    esi,[ebp+0x54]
c000296c:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002970:	e8 a9 f0 ff ff       	call   c0001a1e <ld_dword>
c0002975:	89 c3                	mov    ebx,eax
c0002977:	83 f8 01             	cmp    eax,0x1
c000297a:	0f 86 e9 fb ff ff    	jbe    c0002569 <mount_volume+0xc8>
c0002980:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002983:	0f 86 e0 fb ff ff    	jbe    c0002569 <mount_volume+0xc8>
c0002989:	8d 53 fe             	lea    edx,[ebx-0x2]
c000298c:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002990:	0f af c2             	imul   eax,edx
c0002993:	31 d2                	xor    edx,edx
c0002995:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002998:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c000299b:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000299e:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029a1:	31 c9                	xor    ecx,ecx
c00029a3:	89 da                	mov    edx,ebx
c00029a5:	89 e8                	mov    eax,ebp
c00029a7:	c1 ea 07             	shr    edx,0x7
c00029aa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029ad:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029b0:	e8 3a f8 ff ff       	call   c00021ef <move_window>
c00029b5:	85 c0                	test   eax,eax
c00029b7:	0f 85 9d fb ff ff    	jne    c000255a <mount_volume+0xb9>
c00029bd:	89 d8                	mov    eax,ebx
c00029bf:	83 e0 7f             	and    eax,0x7f
c00029c2:	8d 04 86             	lea    eax,[esi+eax*4]
c00029c5:	e8 54 f0 ff ff       	call   c0001a1e <ld_dword>
c00029ca:	83 f8 ff             	cmp    eax,0xffffffff
c00029cd:	74 0a                	je     c00029d9 <mount_volume+0x538>
c00029cf:	43                   	inc    ebx
c00029d0:	39 d8                	cmp    eax,ebx
c00029d2:	74 cd                	je     c00029a1 <mount_volume+0x500>
c00029d4:	e9 90 fb ff ff       	jmp    c0002569 <mount_volume+0xc8>
c00029d9:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029e0:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029e7:	bb 04 00 00 00       	mov    ebx,0x4
c00029ec:	e9 e8 fd ff ff       	jmp    c00027d9 <mount_volume+0x338>
c00029f1:	3d f6 0f 00 00       	cmp    eax,0xff6
c00029f6:	19 db                	sbb    ebx,ebx
c00029f8:	83 c3 02             	add    ebx,0x2
c00029fb:	e9 93 fc ff ff       	jmp    c0002693 <mount_volume+0x1f2>
c0002a00:	83 c4 3c             	add    esp,0x3c
c0002a03:	89 d8                	mov    eax,ebx
c0002a05:	5b                   	pop    ebx
c0002a06:	5e                   	pop    esi
c0002a07:	5f                   	pop    edi
c0002a08:	5d                   	pop    ebp
c0002a09:	c3                   	ret    

c0002a0a <find_bitmap>:
c0002a0a:	55                   	push   ebp
c0002a0b:	57                   	push   edi
c0002a0c:	89 c7                	mov    edi,eax
c0002a0e:	56                   	push   esi
c0002a0f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a12:	53                   	push   ebx
c0002a13:	83 ec 1c             	sub    esp,0x1c
c0002a16:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a19:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a1d:	83 e8 02             	sub    eax,0x2
c0002a20:	39 f0                	cmp    eax,esi
c0002a22:	77 02                	ja     c0002a26 <find_bitmap+0x1c>
c0002a24:	31 f6                	xor    esi,esi
c0002a26:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a2a:	89 f3                	mov    ebx,esi
c0002a2c:	31 ed                	xor    ebp,ebp
c0002a2e:	31 c9                	xor    ecx,ecx
c0002a30:	89 da                	mov    edx,ebx
c0002a32:	89 f8                	mov    eax,edi
c0002a34:	c1 ea 0c             	shr    edx,0xc
c0002a37:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a3a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a3d:	e8 ad f7 ff ff       	call   c00021ef <move_window>
c0002a42:	85 c0                	test   eax,eax
c0002a44:	75 68                	jne    c0002aae <find_bitmap+0xa4>
c0002a46:	89 da                	mov    edx,ebx
c0002a48:	89 d9                	mov    ecx,ebx
c0002a4a:	c1 ea 03             	shr    edx,0x3
c0002a4d:	83 e1 07             	and    ecx,0x7
c0002a50:	b8 01 00 00 00       	mov    eax,0x1
c0002a55:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a5b:	d3 e0                	shl    eax,cl
c0002a5d:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a60:	83 e9 02             	sub    ecx,0x2
c0002a63:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a67:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a6b:	43                   	inc    ebx
c0002a6c:	21 c1                	and    ecx,eax
c0002a6e:	d1 e0                	shl    eax,1
c0002a70:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002a74:	77 09                	ja     c0002a7f <find_bitmap+0x75>
c0002a76:	31 db                	xor    ebx,ebx
c0002a78:	ba 00 02 00 00       	mov    edx,0x200
c0002a7d:	31 c0                	xor    eax,eax
c0002a7f:	84 c9                	test   cl,cl
c0002a81:	75 10                	jne    c0002a93 <find_bitmap+0x89>
c0002a83:	45                   	inc    ebp
c0002a84:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a88:	75 0f                	jne    c0002a99 <find_bitmap+0x8f>
c0002a8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a8e:	83 c0 02             	add    eax,0x2
c0002a91:	eb 22                	jmp    c0002ab5 <find_bitmap+0xab>
c0002a93:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a97:	31 ed                	xor    ebp,ebp
c0002a99:	39 de                	cmp    esi,ebx
c0002a9b:	74 16                	je     c0002ab3 <find_bitmap+0xa9>
c0002a9d:	84 c0                	test   al,al
c0002a9f:	75 c6                	jne    c0002a67 <find_bitmap+0x5d>
c0002aa1:	42                   	inc    edx
c0002aa2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002aa8:	77 84                	ja     c0002a2e <find_bitmap+0x24>
c0002aaa:	b0 01                	mov    al,0x1
c0002aac:	eb b9                	jmp    c0002a67 <find_bitmap+0x5d>
c0002aae:	83 c8 ff             	or     eax,0xffffffff
c0002ab1:	eb 02                	jmp    c0002ab5 <find_bitmap+0xab>
c0002ab3:	31 c0                	xor    eax,eax
c0002ab5:	83 c4 1c             	add    esp,0x1c
c0002ab8:	5b                   	pop    ebx
c0002ab9:	5e                   	pop    esi
c0002aba:	5f                   	pop    edi
c0002abb:	5d                   	pop    ebp
c0002abc:	c3                   	ret    

c0002abd <change_bitmap>:
c0002abd:	55                   	push   ebp
c0002abe:	89 cd                	mov    ebp,ecx
c0002ac0:	57                   	push   edi
c0002ac1:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002ac4:	56                   	push   esi
c0002ac5:	89 c7                	mov    edi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	89 c8                	mov    eax,ecx
c0002aca:	83 ec 1c             	sub    esp,0x1c
c0002acd:	31 d2                	xor    edx,edx
c0002acf:	89 ce                	mov    esi,ecx
c0002ad1:	c1 e8 0c             	shr    eax,0xc
c0002ad4:	bb 01 00 00 00       	mov    ebx,0x1
c0002ad9:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002adc:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002adf:	c1 ee 03             	shr    esi,0x3
c0002ae2:	83 e1 07             	and    ecx,0x7
c0002ae5:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002aeb:	d3 e3                	shl    ebx,cl
c0002aed:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002af1:	89 c1                	mov    ecx,eax
c0002af3:	89 d3                	mov    ebx,edx
c0002af5:	83 c1 01             	add    ecx,0x1
c0002af8:	83 d3 00             	adc    ebx,0x0
c0002afb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002aff:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b03:	89 d1                	mov    ecx,edx
c0002b05:	89 c2                	mov    edx,eax
c0002b07:	89 f8                	mov    eax,edi
c0002b09:	e8 e1 f6 ff ff       	call   c00021ef <move_window>
c0002b0e:	89 c1                	mov    ecx,eax
c0002b10:	85 c0                	test   eax,eax
c0002b12:	75 48                	jne    c0002b5c <change_bitmap+0x9f>
c0002b14:	31 d2                	xor    edx,edx
c0002b16:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b1a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b1e:	0f 95 c2             	setne  dl
c0002b21:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b25:	74 3c                	je     c0002b63 <change_bitmap+0xa6>
c0002b27:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b2b:	4d                   	dec    ebp
c0002b2c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b34:	74 32                	je     c0002b68 <change_bitmap+0xab>
c0002b36:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b3a:	75 d8                	jne    c0002b14 <change_bitmap+0x57>
c0002b3c:	8d 46 01             	lea    eax,[esi+0x1]
c0002b3f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b44:	89 c3                	mov    ebx,eax
c0002b46:	31 f6                	xor    esi,esi
c0002b48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b50:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b56:	74 99                	je     c0002af1 <change_bitmap+0x34>
c0002b58:	89 de                	mov    esi,ebx
c0002b5a:	eb b8                	jmp    c0002b14 <change_bitmap+0x57>
c0002b5c:	b9 01 00 00 00       	mov    ecx,0x1
c0002b61:	eb 05                	jmp    c0002b68 <change_bitmap+0xab>
c0002b63:	b9 02 00 00 00       	mov    ecx,0x2
c0002b68:	83 c4 1c             	add    esp,0x1c
c0002b6b:	89 c8                	mov    eax,ecx
c0002b6d:	5b                   	pop    ebx
c0002b6e:	5e                   	pop    esi
c0002b6f:	5f                   	pop    edi
c0002b70:	5d                   	pop    ebp
c0002b71:	c3                   	ret    

c0002b72 <put_fat>:
c0002b72:	83 fa 01             	cmp    edx,0x1
c0002b75:	0f 86 7b 01 00 00    	jbe    c0002cf6 <put_fat+0x184>
c0002b7b:	55                   	push   ebp
c0002b7c:	57                   	push   edi
c0002b7d:	89 cf                	mov    edi,ecx
c0002b7f:	56                   	push   esi
c0002b80:	b9 02 00 00 00       	mov    ecx,0x2
c0002b85:	53                   	push   ebx
c0002b86:	89 c6                	mov    esi,eax
c0002b88:	83 ec 1c             	sub    esp,0x1c
c0002b8b:	89 d3                	mov    ebx,edx
c0002b8d:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b90:	0f 86 68 01 00 00    	jbe    c0002cfe <put_fat+0x18c>
c0002b96:	8a 00                	mov    al,BYTE PTR [eax]
c0002b98:	3c 02                	cmp    al,0x2
c0002b9a:	0f 84 c7 00 00 00    	je     c0002c67 <put_fat+0xf5>
c0002ba0:	77 09                	ja     c0002bab <put_fat+0x39>
c0002ba2:	fe c8                	dec    al
c0002ba4:	74 17                	je     c0002bbd <put_fat+0x4b>
c0002ba6:	e9 53 01 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002bab:	b9 02 00 00 00       	mov    ecx,0x2
c0002bb0:	3c 04                	cmp    al,0x4
c0002bb2:	0f 86 e1 00 00 00    	jbe    c0002c99 <put_fat+0x127>
c0002bb8:	e9 41 01 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002bbd:	89 d5                	mov    ebp,edx
c0002bbf:	31 c9                	xor    ecx,ecx
c0002bc1:	d1 ed                	shr    ebp,1
c0002bc3:	89 f0                	mov    eax,esi
c0002bc5:	01 d5                	add    ebp,edx
c0002bc7:	89 ea                	mov    edx,ebp
c0002bc9:	c1 ea 09             	shr    edx,0x9
c0002bcc:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bcf:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bd2:	e8 18 f6 ff ff       	call   c00021ef <move_window>
c0002bd7:	89 c1                	mov    ecx,eax
c0002bd9:	85 c0                	test   eax,eax
c0002bdb:	0f 85 1d 01 00 00    	jne    c0002cfe <put_fat+0x18c>
c0002be1:	8d 46 54             	lea    eax,[esi+0x54]
c0002be4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002be8:	8d 45 01             	lea    eax,[ebp+0x1]
c0002beb:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bf1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bf5:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bf9:	89 f8                	mov    eax,edi
c0002bfb:	83 e3 01             	and    ebx,0x1
c0002bfe:	74 0d                	je     c0002c0d <put_fat+0x9b>
c0002c00:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c03:	89 fa                	mov    edx,edi
c0002c05:	83 e0 0f             	and    eax,0xf
c0002c08:	c1 e2 04             	shl    edx,0x4
c0002c0b:	09 d0                	or     eax,edx
c0002c0d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c10:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c14:	31 c9                	xor    ecx,ecx
c0002c16:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c1a:	c1 ea 09             	shr    edx,0x9
c0002c1d:	89 f0                	mov    eax,esi
c0002c1f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c22:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c25:	e8 c5 f5 ff ff       	call   c00021ef <move_window>
c0002c2a:	89 c1                	mov    ecx,eax
c0002c2c:	85 c0                	test   eax,eax
c0002c2e:	0f 85 ca 00 00 00    	jne    c0002cfe <put_fat+0x18c>
c0002c34:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c38:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c3e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c42:	85 db                	test   ebx,ebx
c0002c44:	74 07                	je     c0002c4d <put_fat+0xdb>
c0002c46:	c1 ef 04             	shr    edi,0x4
c0002c49:	89 fa                	mov    edx,edi
c0002c4b:	eb 0e                	jmp    c0002c5b <put_fat+0xe9>
c0002c4d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c50:	c1 ef 08             	shr    edi,0x8
c0002c53:	83 e2 f0             	and    edx,0xfffffff0
c0002c56:	83 e7 0f             	and    edi,0xf
c0002c59:	09 fa                	or     edx,edi
c0002c5b:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c5e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c62:	e9 97 00 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002c67:	31 c9                	xor    ecx,ecx
c0002c69:	c1 ea 08             	shr    edx,0x8
c0002c6c:	89 f0                	mov    eax,esi
c0002c6e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c71:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c74:	e8 76 f5 ff ff       	call   c00021ef <move_window>
c0002c79:	89 c1                	mov    ecx,eax
c0002c7b:	85 c0                	test   eax,eax
c0002c7d:	75 7f                	jne    c0002cfe <put_fat+0x18c>
c0002c7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c83:	01 db                	add    ebx,ebx
c0002c85:	0f b7 d7             	movzx  edx,di
c0002c88:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c8e:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c92:	e8 ec ed ff ff       	call   c0001a83 <st_word>
c0002c97:	eb 53                	jmp    c0002cec <put_fat+0x17a>
c0002c99:	31 c9                	xor    ecx,ecx
c0002c9b:	c1 ea 07             	shr    edx,0x7
c0002c9e:	89 f0                	mov    eax,esi
c0002ca0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ca3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ca6:	e8 44 f5 ff ff       	call   c00021ef <move_window>
c0002cab:	89 c1                	mov    ecx,eax
c0002cad:	85 c0                	test   eax,eax
c0002caf:	75 4d                	jne    c0002cfe <put_fat+0x18c>
c0002cb1:	c1 e3 02             	shl    ebx,0x2
c0002cb4:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cba:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cbd:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cc1:	74 1c                	je     c0002cdf <put_fat+0x16d>
c0002cc3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cc7:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ccd:	89 d8                	mov    eax,ebx
c0002ccf:	e8 4a ed ff ff       	call   c0001a1e <ld_dword>
c0002cd4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cd8:	25 00 00 00 f0       	and    eax,0xf0000000
c0002cdd:	09 c7                	or     edi,eax
c0002cdf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ce3:	89 fa                	mov    edx,edi
c0002ce5:	89 d8                	mov    eax,ebx
c0002ce7:	e8 9b ed ff ff       	call   c0001a87 <st_dword>
c0002cec:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002cf0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cf4:	eb 08                	jmp    c0002cfe <put_fat+0x18c>
c0002cf6:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfb:	89 c8                	mov    eax,ecx
c0002cfd:	c3                   	ret    
c0002cfe:	83 c4 1c             	add    esp,0x1c
c0002d01:	89 c8                	mov    eax,ecx
c0002d03:	5b                   	pop    ebx
c0002d04:	5e                   	pop    esi
c0002d05:	5f                   	pop    edi
c0002d06:	5d                   	pop    ebp
c0002d07:	c3                   	ret    

c0002d08 <fill_last_frag>:
c0002d08:	57                   	push   edi
c0002d09:	89 cf                	mov    edi,ecx
c0002d0b:	56                   	push   esi
c0002d0c:	89 d6                	mov    esi,edx
c0002d0e:	53                   	push   ebx
c0002d0f:	89 c3                	mov    ebx,eax
c0002d11:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d14:	85 c0                	test   eax,eax
c0002d16:	74 21                	je     c0002d39 <fill_last_frag+0x31>
c0002d18:	89 f9                	mov    ecx,edi
c0002d1a:	83 f8 01             	cmp    eax,0x1
c0002d1d:	76 05                	jbe    c0002d24 <fill_last_frag+0x1c>
c0002d1f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d22:	29 c1                	sub    ecx,eax
c0002d24:	8d 56 01             	lea    edx,[esi+0x1]
c0002d27:	29 c2                	sub    edx,eax
c0002d29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d2b:	e8 42 fe ff ff       	call   c0002b72 <put_fat>
c0002d30:	85 c0                	test   eax,eax
c0002d32:	75 05                	jne    c0002d39 <fill_last_frag+0x31>
c0002d34:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d37:	eb d8                	jmp    c0002d11 <fill_last_frag+0x9>
c0002d39:	5b                   	pop    ebx
c0002d3a:	5e                   	pop    esi
c0002d3b:	5f                   	pop    edi
c0002d3c:	c3                   	ret    

c0002d3d <fill_first_frag>:
c0002d3d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d41:	75 2d                	jne    c0002d70 <fill_first_frag+0x33>
c0002d43:	57                   	push   edi
c0002d44:	56                   	push   esi
c0002d45:	53                   	push   ebx
c0002d46:	89 c3                	mov    ebx,eax
c0002d48:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d4b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d4e:	01 d7                	add    edi,edx
c0002d50:	39 fa                	cmp    edx,edi
c0002d52:	74 14                	je     c0002d68 <fill_first_frag+0x2b>
c0002d54:	8d 72 01             	lea    esi,[edx+0x1]
c0002d57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d59:	89 f1                	mov    ecx,esi
c0002d5b:	e8 12 fe ff ff       	call   c0002b72 <put_fat>
c0002d60:	89 f2                	mov    edx,esi
c0002d62:	85 c0                	test   eax,eax
c0002d64:	74 ea                	je     c0002d50 <fill_first_frag+0x13>
c0002d66:	eb 0b                	jmp    c0002d73 <fill_first_frag+0x36>
c0002d68:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d6c:	31 c0                	xor    eax,eax
c0002d6e:	eb 03                	jmp    c0002d73 <fill_first_frag+0x36>
c0002d70:	31 c0                	xor    eax,eax
c0002d72:	c3                   	ret    
c0002d73:	5b                   	pop    ebx
c0002d74:	5e                   	pop    esi
c0002d75:	5f                   	pop    edi
c0002d76:	c3                   	ret    

c0002d77 <get_fat>:
c0002d77:	83 fa 01             	cmp    edx,0x1
c0002d7a:	0f 86 db 01 00 00    	jbe    c0002f5b <get_fat+0x1e4>
c0002d80:	55                   	push   ebp
c0002d81:	b9 01 00 00 00       	mov    ecx,0x1
c0002d86:	57                   	push   edi
c0002d87:	56                   	push   esi
c0002d88:	53                   	push   ebx
c0002d89:	83 ec 1c             	sub    esp,0x1c
c0002d8c:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d8e:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d91:	0f 86 cc 01 00 00    	jbe    c0002f63 <get_fat+0x1ec>
c0002d97:	89 c3                	mov    ebx,eax
c0002d99:	89 d6                	mov    esi,edx
c0002d9b:	8a 07                	mov    al,BYTE PTR [edi]
c0002d9d:	3c 02                	cmp    al,0x2
c0002d9f:	0f 84 99 00 00 00    	je     c0002e3e <get_fat+0xc7>
c0002da5:	77 09                	ja     c0002db0 <get_fat+0x39>
c0002da7:	fe c8                	dec    al
c0002da9:	74 1a                	je     c0002dc5 <get_fat+0x4e>
c0002dab:	e9 b3 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002db0:	3c 03                	cmp    al,0x3
c0002db2:	0f 84 b5 00 00 00    	je     c0002e6d <get_fat+0xf6>
c0002db8:	3c 04                	cmp    al,0x4
c0002dba:	0f 84 e3 00 00 00    	je     c0002ea3 <get_fat+0x12c>
c0002dc0:	e9 9e 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002dc5:	89 d3                	mov    ebx,edx
c0002dc7:	31 c9                	xor    ecx,ecx
c0002dc9:	d1 eb                	shr    ebx,1
c0002dcb:	89 f8                	mov    eax,edi
c0002dcd:	01 d3                	add    ebx,edx
c0002dcf:	89 da                	mov    edx,ebx
c0002dd1:	c1 ea 09             	shr    edx,0x9
c0002dd4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dd7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dda:	e8 10 f4 ff ff       	call   c00021ef <move_window>
c0002ddf:	85 c0                	test   eax,eax
c0002de1:	74 08                	je     c0002deb <get_fat+0x74>
c0002de3:	83 c9 ff             	or     ecx,0xffffffff
c0002de6:	e9 78 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002deb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002dee:	31 c9                	xor    ecx,ecx
c0002df0:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002df6:	89 ea                	mov    edx,ebp
c0002df8:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002dfc:	c1 ea 09             	shr    edx,0x9
c0002dff:	89 f8                	mov    eax,edi
c0002e01:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e04:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e07:	e8 e3 f3 ff ff       	call   c00021ef <move_window>
c0002e0c:	85 c0                	test   eax,eax
c0002e0e:	75 d3                	jne    c0002de3 <get_fat+0x6c>
c0002e10:	0f b6 c3             	movzx  eax,bl
c0002e13:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e19:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e1e:	c1 e3 08             	shl    ebx,0x8
c0002e21:	09 c3                	or     ebx,eax
c0002e23:	89 d9                	mov    ecx,ebx
c0002e25:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e2b:	83 e6 01             	and    esi,0x1
c0002e2e:	0f 84 2f 01 00 00    	je     c0002f63 <get_fat+0x1ec>
c0002e34:	89 d9                	mov    ecx,ebx
c0002e36:	c1 e9 04             	shr    ecx,0x4
c0002e39:	e9 25 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002e3e:	31 c9                	xor    ecx,ecx
c0002e40:	c1 ea 08             	shr    edx,0x8
c0002e43:	89 f8                	mov    eax,edi
c0002e45:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e48:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e4b:	e8 9f f3 ff ff       	call   c00021ef <move_window>
c0002e50:	85 c0                	test   eax,eax
c0002e52:	75 8f                	jne    c0002de3 <get_fat+0x6c>
c0002e54:	01 f6                	add    esi,esi
c0002e56:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e5c:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e60:	e8 ac eb ff ff       	call   c0001a11 <ld_word>
c0002e65:	0f b7 c8             	movzx  ecx,ax
c0002e68:	e9 f6 00 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002e6d:	31 c9                	xor    ecx,ecx
c0002e6f:	c1 ea 07             	shr    edx,0x7
c0002e72:	89 f8                	mov    eax,edi
c0002e74:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e77:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e7a:	e8 70 f3 ff ff       	call   c00021ef <move_window>
c0002e7f:	85 c0                	test   eax,eax
c0002e81:	0f 85 5c ff ff ff    	jne    c0002de3 <get_fat+0x6c>
c0002e87:	c1 e6 02             	shl    esi,0x2
c0002e8a:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e90:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e94:	e8 85 eb ff ff       	call   c0001a1e <ld_dword>
c0002e99:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e9e:	e9 b4 00 00 00       	jmp    c0002f57 <get_fat+0x1e0>
c0002ea3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ea6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ea9:	89 d1                	mov    ecx,edx
c0002eab:	09 c1                	or     ecx,eax
c0002ead:	74 06                	je     c0002eb5 <get_fat+0x13e>
c0002eaf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002eb3:	75 0f                	jne    c0002ec4 <get_fat+0x14d>
c0002eb5:	b9 01 00 00 00       	mov    ecx,0x1
c0002eba:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002ebe:	0f 85 9f 00 00 00    	jne    c0002f63 <get_fat+0x1ec>
c0002ec4:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002ec8:	89 f5                	mov    ebp,esi
c0002eca:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002ecf:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002ed2:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002ed5:	80 f9 02             	cmp    cl,0x2
c0002ed8:	75 35                	jne    c0002f0f <get_fat+0x198>
c0002eda:	83 c0 ff             	add    eax,0xffffffff
c0002edd:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002ee2:	83 d2 ff             	adc    edx,0xffffffff
c0002ee5:	31 db                	xor    ebx,ebx
c0002ee7:	0f ac d0 09          	shrd   eax,edx,0x9
c0002eeb:	53                   	push   ebx
c0002eec:	c1 ea 09             	shr    edx,0x9
c0002eef:	51                   	push   ecx
c0002ef0:	52                   	push   edx
c0002ef1:	50                   	push   eax
c0002ef2:	e8 55 26 02 00       	call   c002554c <__udivdi3>
c0002ef7:	83 c4 10             	add    esp,0x10
c0002efa:	b9 01 00 00 00       	mov    ecx,0x1
c0002eff:	39 c5                	cmp    ebp,eax
c0002f01:	77 60                	ja     c0002f63 <get_fat+0x1ec>
c0002f03:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f08:	74 59                	je     c0002f63 <get_fat+0x1ec>
c0002f0a:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f0d:	eb 54                	jmp    c0002f63 <get_fat+0x1ec>
c0002f0f:	80 f9 03             	cmp    cl,0x3
c0002f12:	75 05                	jne    c0002f19 <get_fat+0x1a2>
c0002f14:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f17:	77 f1                	ja     c0002f0a <get_fat+0x193>
c0002f19:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f1e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f22:	75 3f                	jne    c0002f63 <get_fat+0x1ec>
c0002f24:	31 c9                	xor    ecx,ecx
c0002f26:	89 f2                	mov    edx,esi
c0002f28:	89 f8                	mov    eax,edi
c0002f2a:	c1 ea 07             	shr    edx,0x7
c0002f2d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f30:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f33:	e8 b7 f2 ff ff       	call   c00021ef <move_window>
c0002f38:	85 c0                	test   eax,eax
c0002f3a:	0f 85 a3 fe ff ff    	jne    c0002de3 <get_fat+0x6c>
c0002f40:	c1 e6 02             	shl    esi,0x2
c0002f43:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f49:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f4d:	e8 cc ea ff ff       	call   c0001a1e <ld_dword>
c0002f52:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f57:	89 c1                	mov    ecx,eax
c0002f59:	eb 08                	jmp    c0002f63 <get_fat+0x1ec>
c0002f5b:	b9 01 00 00 00       	mov    ecx,0x1
c0002f60:	89 c8                	mov    eax,ecx
c0002f62:	c3                   	ret    
c0002f63:	83 c4 1c             	add    esp,0x1c
c0002f66:	89 c8                	mov    eax,ecx
c0002f68:	5b                   	pop    ebx
c0002f69:	5e                   	pop    esi
c0002f6a:	5f                   	pop    edi
c0002f6b:	5d                   	pop    ebp
c0002f6c:	c3                   	ret    

c0002f6d <dir_sdi>:
c0002f6d:	55                   	push   ebp
c0002f6e:	57                   	push   edi
c0002f6f:	56                   	push   esi
c0002f70:	53                   	push   ebx
c0002f71:	89 c3                	mov    ebx,eax
c0002f73:	83 ec 1c             	sub    esp,0x1c
c0002f76:	8b 38                	mov    edi,DWORD PTR [eax]
c0002f78:	31 c0                	xor    eax,eax
c0002f7a:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002f7d:	0f 94 c0             	sete   al
c0002f80:	48                   	dec    eax
c0002f81:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f86:	05 00 00 00 10       	add    eax,0x10000000
c0002f8b:	39 d0                	cmp    eax,edx
c0002f8d:	77 0a                	ja     c0002f99 <dir_sdi+0x2c>
c0002f8f:	b8 02 00 00 00       	mov    eax,0x2
c0002f94:	e9 c4 00 00 00       	jmp    c000305d <dir_sdi+0xf0>
c0002f99:	89 d6                	mov    esi,edx
c0002f9b:	f6 c2 1f             	test   dl,0x1f
c0002f9e:	75 ef                	jne    c0002f8f <dir_sdi+0x22>
c0002fa0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fa3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fa6:	85 c9                	test   ecx,ecx
c0002fa8:	75 2d                	jne    c0002fd7 <dir_sdi+0x6a>
c0002faa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fad:	77 1b                	ja     c0002fca <dir_sdi+0x5d>
c0002faf:	89 f2                	mov    edx,esi
c0002fb1:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fb5:	c1 ea 05             	shr    edx,0x5
c0002fb8:	39 c2                	cmp    edx,eax
c0002fba:	73 d3                	jae    c0002f8f <dir_sdi+0x22>
c0002fbc:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fbf:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002fc2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fc5:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fc8:	eb 4b                	jmp    c0003015 <dir_sdi+0xa8>
c0002fca:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fcd:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 da                	je     c0002faf <dir_sdi+0x42>
c0002fd5:	89 c1                	mov    ecx,eax
c0002fd7:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002fdb:	c1 e5 09             	shl    ebp,0x9
c0002fde:	89 ca                	mov    edx,ecx
c0002fe0:	39 ee                	cmp    esi,ebp
c0002fe2:	72 1c                	jb     c0003000 <dir_sdi+0x93>
c0002fe4:	89 d8                	mov    eax,ebx
c0002fe6:	e8 8c fd ff ff       	call   c0002d77 <get_fat>
c0002feb:	89 c1                	mov    ecx,eax
c0002fed:	83 f8 ff             	cmp    eax,0xffffffff
c0002ff0:	74 66                	je     c0003058 <dir_sdi+0xeb>
c0002ff2:	83 f8 01             	cmp    eax,0x1
c0002ff5:	76 98                	jbe    c0002f8f <dir_sdi+0x22>
c0002ff7:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002ffa:	76 93                	jbe    c0002f8f <dir_sdi+0x22>
c0002ffc:	29 ee                	sub    esi,ebp
c0002ffe:	eb de                	jmp    c0002fde <dir_sdi+0x71>
c0003000:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003004:	89 f8                	mov    eax,edi
c0003006:	e8 9f ec ff ff       	call   c0001caa <clst2sect>
c000300b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000300f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003012:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003015:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003018:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000301b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000301e:	89 d1                	mov    ecx,edx
c0003020:	09 c1                	or     ecx,eax
c0003022:	0f 84 67 ff ff ff    	je     c0002f8f <dir_sdi+0x22>
c0003028:	89 f1                	mov    ecx,esi
c000302a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003032:	c1 e9 09             	shr    ecx,0x9
c0003035:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003039:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000303d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003041:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003044:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000304a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000304d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003051:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003054:	31 c0                	xor    eax,eax
c0003056:	eb 05                	jmp    c000305d <dir_sdi+0xf0>
c0003058:	b8 01 00 00 00       	mov    eax,0x1
c000305d:	83 c4 1c             	add    esp,0x1c
c0003060:	5b                   	pop    ebx
c0003061:	5e                   	pop    esi
c0003062:	5f                   	pop    edi
c0003063:	5d                   	pop    ebp
c0003064:	c3                   	ret    

c0003065 <create_chain>:
c0003065:	55                   	push   ebp
c0003066:	89 c5                	mov    ebp,eax
c0003068:	57                   	push   edi
c0003069:	56                   	push   esi
c000306a:	53                   	push   ebx
c000306b:	83 ec 1c             	sub    esp,0x1c
c000306e:	85 d2                	test   edx,edx
c0003070:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003074:	8b 30                	mov    esi,DWORD PTR [eax]
c0003076:	75 0e                	jne    c0003086 <create_chain+0x21>
c0003078:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000307b:	85 ff                	test   edi,edi
c000307d:	74 39                	je     c00030b8 <create_chain+0x53>
c000307f:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003082:	77 39                	ja     c00030bd <create_chain+0x58>
c0003084:	eb 32                	jmp    c00030b8 <create_chain+0x53>
c0003086:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000308a:	e8 e8 fc ff ff       	call   c0002d77 <get_fat>
c000308f:	89 c3                	mov    ebx,eax
c0003091:	83 f8 01             	cmp    eax,0x1
c0003094:	77 0a                	ja     c00030a0 <create_chain+0x3b>
c0003096:	bb 01 00 00 00       	mov    ebx,0x1
c000309b:	e9 ba 01 00 00       	jmp    c000325a <create_chain+0x1f5>
c00030a0:	83 f8 ff             	cmp    eax,0xffffffff
c00030a3:	0f 84 62 01 00 00    	je     c000320b <create_chain+0x1a6>
c00030a9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030ac:	0f 87 a8 01 00 00    	ja     c000325a <create_chain+0x1f5>
c00030b2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030b6:	eb 05                	jmp    c00030bd <create_chain+0x58>
c00030b8:	bf 01 00 00 00       	mov    edi,0x1
c00030bd:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030c1:	75 07                	jne    c00030ca <create_chain+0x65>
c00030c3:	31 db                	xor    ebx,ebx
c00030c5:	e9 90 01 00 00       	jmp    c000325a <create_chain+0x1f5>
c00030ca:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030cd:	75 74                	jne    c0003143 <create_chain+0xde>
c00030cf:	b9 01 00 00 00       	mov    ecx,0x1
c00030d4:	89 fa                	mov    edx,edi
c00030d6:	89 f0                	mov    eax,esi
c00030d8:	e8 2d f9 ff ff       	call   c0002a0a <find_bitmap>
c00030dd:	89 c3                	mov    ebx,eax
c00030df:	8d 40 ff             	lea    eax,[eax-0x1]
c00030e2:	83 f8 fd             	cmp    eax,0xfffffffd
c00030e5:	0f 87 6f 01 00 00    	ja     c000325a <create_chain+0x1f5>
c00030eb:	83 ec 0c             	sub    esp,0xc
c00030ee:	b9 01 00 00 00       	mov    ecx,0x1
c00030f3:	6a 01                	push   0x1
c00030f5:	89 da                	mov    edx,ebx
c00030f7:	89 f0                	mov    eax,esi
c00030f9:	e8 bf f9 ff ff       	call   c0002abd <change_bitmap>
c00030fe:	83 c4 10             	add    esp,0x10
c0003101:	83 f8 02             	cmp    eax,0x2
c0003104:	74 90                	je     c0003096 <create_chain+0x31>
c0003106:	83 f8 01             	cmp    eax,0x1
c0003109:	0f 84 fc 00 00 00    	je     c000320b <create_chain+0x1a6>
c000310f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003114:	75 09                	jne    c000311f <create_chain+0xba>
c0003116:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000311a:	e9 0c 01 00 00       	jmp    c000322b <create_chain+0x1c6>
c000311f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003123:	0f 85 e7 00 00 00    	jne    c0003210 <create_chain+0x1ab>
c0003129:	8d 57 01             	lea    edx,[edi+0x1]
c000312c:	39 da                	cmp    edx,ebx
c000312e:	0f 84 f7 00 00 00    	je     c000322b <create_chain+0x1c6>
c0003134:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003137:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000313b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000313e:	e9 cd 00 00 00       	jmp    c0003210 <create_chain+0x1ab>
c0003143:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003147:	75 41                	jne    c000318a <create_chain+0x125>
c0003149:	8d 5f 01             	lea    ebx,[edi+0x1]
c000314c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000314f:	77 05                	ja     c0003156 <create_chain+0xf1>
c0003151:	bb 02 00 00 00       	mov    ebx,0x2
c0003156:	89 da                	mov    edx,ebx
c0003158:	89 e8                	mov    eax,ebp
c000315a:	e8 18 fc ff ff       	call   c0002d77 <get_fat>
c000315f:	83 f8 01             	cmp    eax,0x1
c0003162:	0f 84 2e ff ff ff    	je     c0003096 <create_chain+0x31>
c0003168:	83 f8 ff             	cmp    eax,0xffffffff
c000316b:	0f 84 9a 00 00 00    	je     c000320b <create_chain+0x1a6>
c0003171:	85 c0                	test   eax,eax
c0003173:	74 11                	je     c0003186 <create_chain+0x121>
c0003175:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003178:	83 f8 01             	cmp    eax,0x1
c000317b:	76 0d                	jbe    c000318a <create_chain+0x125>
c000317d:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003180:	76 08                	jbe    c000318a <create_chain+0x125>
c0003182:	89 c7                	mov    edi,eax
c0003184:	eb 04                	jmp    c000318a <create_chain+0x125>
c0003186:	85 db                	test   ebx,ebx
c0003188:	75 38                	jne    c00031c2 <create_chain+0x15d>
c000318a:	89 fb                	mov    ebx,edi
c000318c:	43                   	inc    ebx
c000318d:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003190:	77 0e                	ja     c00031a0 <create_chain+0x13b>
c0003192:	83 ff 01             	cmp    edi,0x1
c0003195:	0f 86 28 ff ff ff    	jbe    c00030c3 <create_chain+0x5e>
c000319b:	bb 02 00 00 00       	mov    ebx,0x2
c00031a0:	89 da                	mov    edx,ebx
c00031a2:	89 e8                	mov    eax,ebp
c00031a4:	e8 ce fb ff ff       	call   c0002d77 <get_fat>
c00031a9:	85 c0                	test   eax,eax
c00031ab:	74 15                	je     c00031c2 <create_chain+0x15d>
c00031ad:	83 f8 01             	cmp    eax,0x1
c00031b0:	0f 84 e0 fe ff ff    	je     c0003096 <create_chain+0x31>
c00031b6:	40                   	inc    eax
c00031b7:	74 52                	je     c000320b <create_chain+0x1a6>
c00031b9:	39 fb                	cmp    ebx,edi
c00031bb:	75 cf                	jne    c000318c <create_chain+0x127>
c00031bd:	e9 01 ff ff ff       	jmp    c00030c3 <create_chain+0x5e>
c00031c2:	83 c9 ff             	or     ecx,0xffffffff
c00031c5:	89 da                	mov    edx,ebx
c00031c7:	89 f0                	mov    eax,esi
c00031c9:	e8 a4 f9 ff ff       	call   c0002b72 <put_fat>
c00031ce:	85 c0                	test   eax,eax
c00031d0:	75 32                	jne    c0003204 <create_chain+0x19f>
c00031d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00031d7:	74 11                	je     c00031ea <create_chain+0x185>
c00031d9:	89 d9                	mov    ecx,ebx
c00031db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031df:	89 f0                	mov    eax,esi
c00031e1:	e8 8c f9 ff ff       	call   c0002b72 <put_fat>
c00031e6:	85 c0                	test   eax,eax
c00031e8:	75 1a                	jne    c0003204 <create_chain+0x19f>
c00031ea:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00031ed:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c00031f0:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c00031f3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00031f6:	39 d0                	cmp    eax,edx
c00031f8:	77 04                	ja     c00031fe <create_chain+0x199>
c00031fa:	48                   	dec    eax
c00031fb:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00031fe:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003202:	eb 56                	jmp    c000325a <create_chain+0x1f5>
c0003204:	48                   	dec    eax
c0003205:	0f 85 8b fe ff ff    	jne    c0003096 <create_chain+0x31>
c000320b:	83 cb ff             	or     ebx,0xffffffff
c000320e:	eb 4a                	jmp    c000325a <create_chain+0x1f5>
c0003210:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003214:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003217:	41                   	inc    ecx
c0003218:	39 d9                	cmp    ecx,ebx
c000321a:	75 19                	jne    c0003235 <create_chain+0x1d0>
c000321c:	b9 02 00 00 00       	mov    ecx,0x2
c0003221:	85 d2                	test   edx,edx
c0003223:	74 03                	je     c0003228 <create_chain+0x1c3>
c0003225:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003228:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000322b:	85 c0                	test   eax,eax
c000322d:	0f 85 63 fe ff ff    	jne    c0003096 <create_chain+0x31>
c0003233:	eb b5                	jmp    c00031ea <create_chain+0x185>
c0003235:	85 d2                	test   edx,edx
c0003237:	75 07                	jne    c0003240 <create_chain+0x1db>
c0003239:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003240:	89 d9                	mov    ecx,ebx
c0003242:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003246:	89 e8                	mov    eax,ebp
c0003248:	e8 bb fa ff ff       	call   c0002d08 <fill_last_frag>
c000324d:	85 c0                	test   eax,eax
c000324f:	75 b3                	jne    c0003204 <create_chain+0x19f>
c0003251:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003258:	eb 90                	jmp    c00031ea <create_chain+0x185>
c000325a:	83 c4 1c             	add    esp,0x1c
c000325d:	89 d8                	mov    eax,ebx
c000325f:	5b                   	pop    ebx
c0003260:	5e                   	pop    esi
c0003261:	5f                   	pop    edi
c0003262:	5d                   	pop    ebp
c0003263:	c3                   	ret    

c0003264 <remove_chain>:
c0003264:	55                   	push   ebp
c0003265:	57                   	push   edi
c0003266:	56                   	push   esi
c0003267:	53                   	push   ebx
c0003268:	83 ec 1c             	sub    esp,0x1c
c000326b:	83 fa 01             	cmp    edx,0x1
c000326e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003272:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003274:	77 0a                	ja     c0003280 <remove_chain+0x1c>
c0003276:	b8 02 00 00 00       	mov    eax,0x2
c000327b:	e9 24 01 00 00       	jmp    c00033a4 <remove_chain+0x140>
c0003280:	89 d6                	mov    esi,edx
c0003282:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003285:	76 ef                	jbe    c0003276 <remove_chain+0x12>
c0003287:	89 c7                	mov    edi,eax
c0003289:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000328e:	75 06                	jne    c0003296 <remove_chain+0x32>
c0003290:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003294:	eb 54                	jmp    c00032ea <remove_chain+0x86>
c0003296:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003299:	75 06                	jne    c00032a1 <remove_chain+0x3d>
c000329b:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000329f:	74 ef                	je     c0003290 <remove_chain+0x2c>
c00032a1:	83 c9 ff             	or     ecx,0xffffffff
c00032a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032a8:	89 d8                	mov    eax,ebx
c00032aa:	e8 c3 f8 ff ff       	call   c0002b72 <put_fat>
c00032af:	85 c0                	test   eax,eax
c00032b1:	74 dd                	je     c0003290 <remove_chain+0x2c>
c00032b3:	e9 ec 00 00 00       	jmp    c00033a4 <remove_chain+0x140>
c00032b8:	83 f8 01             	cmp    eax,0x1
c00032bb:	74 b9                	je     c0003276 <remove_chain+0x12>
c00032bd:	83 f8 ff             	cmp    eax,0xffffffff
c00032c0:	74 6d                	je     c000332f <remove_chain+0xcb>
c00032c2:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c5:	75 6f                	jne    c0003336 <remove_chain+0xd2>
c00032c7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032ca:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032cd:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032d0:	39 d0                	cmp    eax,edx
c00032d2:	73 08                	jae    c00032dc <remove_chain+0x78>
c00032d4:	40                   	inc    eax
c00032d5:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00032d9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00032dc:	8d 4e 01             	lea    ecx,[esi+0x1]
c00032df:	39 e9                	cmp    ecx,ebp
c00032e1:	75 64                	jne    c0003347 <remove_chain+0xe3>
c00032e3:	89 ee                	mov    esi,ebp
c00032e5:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00032e8:	76 0f                	jbe    c00032f9 <remove_chain+0x95>
c00032ea:	89 f2                	mov    edx,esi
c00032ec:	89 f8                	mov    eax,edi
c00032ee:	e8 84 fa ff ff       	call   c0002d77 <get_fat>
c00032f3:	89 c5                	mov    ebp,eax
c00032f5:	85 c0                	test   eax,eax
c00032f7:	75 bf                	jne    c00032b8 <remove_chain+0x54>
c00032f9:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032fc:	0f 85 a0 00 00 00    	jne    c00033a2 <remove_chain+0x13e>
c0003302:	eb 6c                	jmp    c0003370 <remove_chain+0x10c>
c0003304:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003307:	84 c0                	test   al,al
c0003309:	75 7d                	jne    c0003388 <remove_chain+0x124>
c000330b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000330e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003312:	0f 84 86 00 00 00    	je     c000339e <remove_chain+0x13a>
c0003318:	89 da                	mov    edx,ebx
c000331a:	89 f8                	mov    eax,edi
c000331c:	e8 56 fa ff ff       	call   c0002d77 <get_fat>
c0003321:	83 f8 01             	cmp    eax,0x1
c0003324:	0f 86 4c ff ff ff    	jbe    c0003276 <remove_chain+0x12>
c000332a:	83 f8 ff             	cmp    eax,0xffffffff
c000332d:	75 4e                	jne    c000337d <remove_chain+0x119>
c000332f:	b8 01 00 00 00       	mov    eax,0x1
c0003334:	eb 6e                	jmp    c00033a4 <remove_chain+0x140>
c0003336:	31 c9                	xor    ecx,ecx
c0003338:	89 f2                	mov    edx,esi
c000333a:	89 d8                	mov    eax,ebx
c000333c:	e8 31 f8 ff ff       	call   c0002b72 <put_fat>
c0003341:	85 c0                	test   eax,eax
c0003343:	74 82                	je     c00032c7 <remove_chain+0x63>
c0003345:	eb 5d                	jmp    c00033a4 <remove_chain+0x140>
c0003347:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000334a:	75 1b                	jne    c0003367 <remove_chain+0x103>
c000334c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003350:	89 d8                	mov    eax,ebx
c0003352:	83 ec 0c             	sub    esp,0xc
c0003355:	6a 00                	push   0x0
c0003357:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000335b:	e8 5d f7 ff ff       	call   c0002abd <change_bitmap>
c0003360:	83 c4 10             	add    esp,0x10
c0003363:	85 c0                	test   eax,eax
c0003365:	75 3d                	jne    c00033a4 <remove_chain+0x140>
c0003367:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000336b:	e9 73 ff ff ff       	jmp    c00032e3 <remove_chain+0x7f>
c0003370:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003375:	75 8d                	jne    c0003304 <remove_chain+0xa0>
c0003377:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c000337b:	eb 25                	jmp    c00033a2 <remove_chain+0x13e>
c000337d:	8d 53 01             	lea    edx,[ebx+0x1]
c0003380:	89 c3                	mov    ebx,eax
c0003382:	39 c2                	cmp    edx,eax
c0003384:	74 88                	je     c000330e <remove_chain+0xaa>
c0003386:	eb 1a                	jmp    c00033a2 <remove_chain+0x13e>
c0003388:	3c 03                	cmp    al,0x3
c000338a:	75 16                	jne    c00033a2 <remove_chain+0x13e>
c000338c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000338f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003393:	77 0d                	ja     c00033a2 <remove_chain+0x13e>
c0003395:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003398:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000339c:	72 04                	jb     c00033a2 <remove_chain+0x13e>
c000339e:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033a2:	31 c0                	xor    eax,eax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <dir_clear>:
c00033ac:	55                   	push   ebp
c00033ad:	57                   	push   edi
c00033ae:	56                   	push   esi
c00033af:	89 c6                	mov    esi,eax
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033b9:	e8 9d ed ff ff       	call   c000215b <sync_window>
c00033be:	85 c0                	test   eax,eax
c00033c0:	0f 85 de 00 00 00    	jne    c00034a4 <dir_clear+0xf8>
c00033c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033ca:	89 f0                	mov    eax,esi
c00033cc:	8d 6e 54             	lea    ebp,[esi+0x54]
c00033cf:	e8 d6 e8 ff ff       	call   c0001caa <clst2sect>
c00033d4:	b9 00 02 00 00       	mov    ecx,0x200
c00033d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00033dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00033e1:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00033e4:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00033e7:	89 e8                	mov    eax,ebp
c00033e9:	31 d2                	xor    edx,edx
c00033eb:	e8 b5 e6 ff ff       	call   c0001aa5 <mem_set>
c00033f0:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c00033f4:	c1 e3 09             	shl    ebx,0x9
c00033f7:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c00033fd:	76 1f                	jbe    c000341e <dir_clear+0x72>
c00033ff:	bb 00 80 00 00       	mov    ebx,0x8000
c0003404:	eb 18                	jmp    c000341e <dir_clear+0x72>
c0003406:	83 ec 0c             	sub    esp,0xc
c0003409:	53                   	push   ebx
c000340a:	e8 35 4e 00 00       	call   c0008244 <ff_memalloc>
c000340f:	83 c4 10             	add    esp,0x10
c0003412:	89 c7                	mov    edi,eax
c0003414:	85 c0                	test   eax,eax
c0003416:	0f 85 8f 00 00 00    	jne    c00034ab <dir_clear+0xff>
c000341c:	d1 eb                	shr    ebx,1
c000341e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003424:	77 e0                	ja     c0003406 <dir_clear+0x5a>
c0003426:	31 db                	xor    ebx,ebx
c0003428:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000342c:	39 d8                	cmp    eax,ebx
c000342e:	76 66                	jbe    c0003496 <dir_clear+0xea>
c0003430:	83 ec 0c             	sub    esp,0xc
c0003433:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003437:	6a 01                	push   0x1
c0003439:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000343d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003441:	55                   	push   ebp
c0003442:	50                   	push   eax
c0003443:	e8 94 e5 ff ff       	call   c00019dc <disk_write>
c0003448:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000344d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003452:	83 c4 20             	add    esp,0x20
c0003455:	85 c0                	test   eax,eax
c0003457:	75 3d                	jne    c0003496 <dir_clear+0xea>
c0003459:	43                   	inc    ebx
c000345a:	eb cc                	jmp    c0003428 <dir_clear+0x7c>
c000345c:	83 ec 0c             	sub    esp,0xc
c000345f:	31 d2                	xor    edx,edx
c0003461:	55                   	push   ebp
c0003462:	89 d8                	mov    eax,ebx
c0003464:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003468:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000346c:	52                   	push   edx
c000346d:	50                   	push   eax
c000346e:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003472:	57                   	push   edi
c0003473:	50                   	push   eax
c0003474:	e8 63 e5 ff ff       	call   c00019dc <disk_write>
c0003479:	83 c4 20             	add    esp,0x20
c000347c:	85 c0                	test   eax,eax
c000347e:	75 0a                	jne    c000348a <dir_clear+0xde>
c0003480:	01 eb                	add    ebx,ebp
c0003482:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003486:	39 d8                	cmp    eax,ebx
c0003488:	77 d2                	ja     c000345c <dir_clear+0xb0>
c000348a:	83 ec 0c             	sub    esp,0xc
c000348d:	57                   	push   edi
c000348e:	e8 c7 4d 00 00       	call   c000825a <ff_memfree>
c0003493:	83 c4 10             	add    esp,0x10
c0003496:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000349a:	39 d8                	cmp    eax,ebx
c000349c:	0f 95 c0             	setne  al
c000349f:	0f b6 c0             	movzx  eax,al
c00034a2:	eb 19                	jmp    c00034bd <dir_clear+0x111>
c00034a4:	b8 01 00 00 00       	mov    eax,0x1
c00034a9:	eb 12                	jmp    c00034bd <dir_clear+0x111>
c00034ab:	89 d9                	mov    ecx,ebx
c00034ad:	31 d2                	xor    edx,edx
c00034af:	c1 eb 09             	shr    ebx,0x9
c00034b2:	e8 ee e5 ff ff       	call   c0001aa5 <mem_set>
c00034b7:	89 dd                	mov    ebp,ebx
c00034b9:	31 db                	xor    ebx,ebx
c00034bb:	eb c5                	jmp    c0003482 <dir_clear+0xd6>
c00034bd:	83 c4 1c             	add    esp,0x1c
c00034c0:	5b                   	pop    ebx
c00034c1:	5e                   	pop    esi
c00034c2:	5f                   	pop    edi
c00034c3:	5d                   	pop    ebp
c00034c4:	c3                   	ret    

c00034c5 <dir_next>:
c00034c5:	55                   	push   ebp
c00034c6:	57                   	push   edi
c00034c7:	56                   	push   esi
c00034c8:	53                   	push   ebx
c00034c9:	89 c3                	mov    ebx,eax
c00034cb:	83 ec 1c             	sub    esp,0x1c
c00034ce:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00034d4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00034d7:	8d 78 20             	lea    edi,[eax+0x20]
c00034da:	31 c0                	xor    eax,eax
c00034dc:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00034e0:	0f 94 c0             	sete   al
c00034e3:	48                   	dec    eax
c00034e4:	25 00 00 20 f0       	and    eax,0xf0200000
c00034e9:	05 00 00 00 10       	add    eax,0x10000000
c00034ee:	39 f8                	cmp    eax,edi
c00034f0:	77 0e                	ja     c0003500 <dir_next+0x3b>
c00034f2:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034f9:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003500:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003503:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003506:	b8 04 00 00 00       	mov    eax,0x4
c000350b:	89 ce                	mov    esi,ecx
c000350d:	09 d6                	or     esi,edx
c000350f:	0f 84 da 00 00 00    	je     c00035ef <dir_next+0x12a>
c0003515:	89 f8                	mov    eax,edi
c0003517:	25 ff 01 00 00       	and    eax,0x1ff
c000351c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003520:	0f 85 b9 00 00 00    	jne    c00035df <dir_next+0x11a>
c0003526:	83 c2 01             	add    edx,0x1
c0003529:	83 d1 00             	adc    ecx,0x0
c000352c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000352f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003532:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003535:	85 d2                	test   edx,edx
c0003537:	75 29                	jne    c0003562 <dir_next+0x9d>
c0003539:	89 fa                	mov    edx,edi
c000353b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000353f:	c1 ea 05             	shr    edx,0x5
c0003542:	39 c2                	cmp    edx,eax
c0003544:	0f 82 95 00 00 00    	jb     c00035df <dir_next+0x11a>
c000354a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003551:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003558:	b8 04 00 00 00       	mov    eax,0x4
c000355d:	e9 8d 00 00 00       	jmp    c00035ef <dir_next+0x12a>
c0003562:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003566:	89 f9                	mov    ecx,edi
c0003568:	48                   	dec    eax
c0003569:	c1 e9 09             	shr    ecx,0x9
c000356c:	85 c8                	test   eax,ecx
c000356e:	75 6f                	jne    c00035df <dir_next+0x11a>
c0003570:	89 d8                	mov    eax,ebx
c0003572:	e8 00 f8 ff ff       	call   c0002d77 <get_fat>
c0003577:	89 c6                	mov    esi,eax
c0003579:	83 f8 01             	cmp    eax,0x1
c000357c:	77 07                	ja     c0003585 <dir_next+0xc0>
c000357e:	b8 02 00 00 00       	mov    eax,0x2
c0003583:	eb 6a                	jmp    c00035ef <dir_next+0x12a>
c0003585:	83 f8 ff             	cmp    eax,0xffffffff
c0003588:	75 07                	jne    c0003591 <dir_next+0xcc>
c000358a:	b8 01 00 00 00       	mov    eax,0x1
c000358f:	eb 5e                	jmp    c00035ef <dir_next+0x12a>
c0003591:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003594:	77 37                	ja     c00035cd <dir_next+0x108>
c0003596:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000359b:	74 ad                	je     c000354a <dir_next+0x85>
c000359d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	e8 be fa ff ff       	call   c0003065 <create_chain>
c00035a7:	89 c6                	mov    esi,eax
c00035a9:	b8 07 00 00 00       	mov    eax,0x7
c00035ae:	85 f6                	test   esi,esi
c00035b0:	74 3d                	je     c00035ef <dir_next+0x12a>
c00035b2:	83 fe 01             	cmp    esi,0x1
c00035b5:	74 c7                	je     c000357e <dir_next+0xb9>
c00035b7:	83 fe ff             	cmp    esi,0xffffffff
c00035ba:	74 ce                	je     c000358a <dir_next+0xc5>
c00035bc:	89 f2                	mov    edx,esi
c00035be:	89 e8                	mov    eax,ebp
c00035c0:	e8 e7 fd ff ff       	call   c00033ac <dir_clear>
c00035c5:	85 c0                	test   eax,eax
c00035c7:	75 c1                	jne    c000358a <dir_next+0xc5>
c00035c9:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035cd:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035d0:	89 f2                	mov    edx,esi
c00035d2:	89 e8                	mov    eax,ebp
c00035d4:	e8 d1 e6 ff ff       	call   c0001caa <clst2sect>
c00035d9:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00035dc:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00035df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035e3:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00035e6:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c00035ea:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00035ed:	31 c0                	xor    eax,eax
c00035ef:	83 c4 1c             	add    esp,0x1c
c00035f2:	5b                   	pop    ebx
c00035f3:	5e                   	pop    esi
c00035f4:	5f                   	pop    edi
c00035f5:	5d                   	pop    ebp
c00035f6:	c3                   	ret    

c00035f7 <load_xdir>:
c00035f7:	55                   	push   ebp
c00035f8:	57                   	push   edi
c00035f9:	56                   	push   esi
c00035fa:	89 c6                	mov    esi,eax
c00035fc:	53                   	push   ebx
c00035fd:	83 ec 1c             	sub    esp,0x1c
c0003600:	8b 00                	mov    eax,DWORD PTR [eax]
c0003602:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003605:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003608:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000360b:	e8 df eb ff ff       	call   c00021ef <move_window>
c0003610:	89 c3                	mov    ebx,eax
c0003612:	85 c0                	test   eax,eax
c0003614:	0f 85 0c 01 00 00    	jne    c0003726 <load_xdir+0x12f>
c000361a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000361d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003620:	0f 85 fb 00 00 00    	jne    c0003721 <load_xdir+0x12a>
c0003626:	89 f8                	mov    eax,edi
c0003628:	b9 20 00 00 00       	mov    ecx,0x20
c000362d:	e8 5e e4 ff ff       	call   c0001a90 <mem_cpy>
c0003632:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003636:	40                   	inc    eax
c0003637:	c1 e0 05             	shl    eax,0x5
c000363a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000363e:	83 e8 60             	sub    eax,0x60
c0003641:	3d 00 02 00 00       	cmp    eax,0x200
c0003646:	0f 87 d5 00 00 00    	ja     c0003721 <load_xdir+0x12a>
c000364c:	31 d2                	xor    edx,edx
c000364e:	89 f0                	mov    eax,esi
c0003650:	e8 70 fe ff ff       	call   c00034c5 <dir_next>
c0003655:	89 c3                	mov    ebx,eax
c0003657:	83 f8 04             	cmp    eax,0x4
c000365a:	0f 84 c1 00 00 00    	je     c0003721 <load_xdir+0x12a>
c0003660:	85 c0                	test   eax,eax
c0003662:	0f 85 be 00 00 00    	jne    c0003726 <load_xdir+0x12f>
c0003668:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000366b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000366e:	8b 06                	mov    eax,DWORD PTR [esi]
c0003670:	e8 7a eb ff ff       	call   c00021ef <move_window>
c0003675:	89 c3                	mov    ebx,eax
c0003677:	85 c0                	test   eax,eax
c0003679:	0f 85 a7 00 00 00    	jne    c0003726 <load_xdir+0x12f>
c000367f:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003682:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003685:	0f 85 96 00 00 00    	jne    c0003721 <load_xdir+0x12a>
c000368b:	8d 47 20             	lea    eax,[edi+0x20]
c000368e:	b9 20 00 00 00       	mov    ecx,0x20
c0003693:	e8 f8 e3 ff ff       	call   c0001a90 <mem_cpy>
c0003698:	31 d2                	xor    edx,edx
c000369a:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000369e:	b9 0f 00 00 00       	mov    ecx,0xf
c00036a3:	83 c0 2c             	add    eax,0x2c
c00036a6:	f7 f1                	div    ecx
c00036a8:	c1 e0 05             	shl    eax,0x5
c00036ab:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036af:	77 70                	ja     c0003721 <load_xdir+0x12a>
c00036b1:	bd 40 00 00 00       	mov    ebp,0x40
c00036b6:	31 d2                	xor    edx,edx
c00036b8:	89 f0                	mov    eax,esi
c00036ba:	e8 06 fe ff ff       	call   c00034c5 <dir_next>
c00036bf:	89 c3                	mov    ebx,eax
c00036c1:	83 f8 04             	cmp    eax,0x4
c00036c4:	74 5b                	je     c0003721 <load_xdir+0x12a>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 5c                	jne    c0003726 <load_xdir+0x12f>
c00036ca:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036cd:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036d0:	8b 06                	mov    eax,DWORD PTR [esi]
c00036d2:	e8 18 eb ff ff       	call   c00021ef <move_window>
c00036d7:	89 c3                	mov    ebx,eax
c00036d9:	85 c0                	test   eax,eax
c00036db:	75 49                	jne    c0003726 <load_xdir+0x12f>
c00036dd:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036e0:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00036e3:	75 3c                	jne    c0003721 <load_xdir+0x12a>
c00036e5:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c00036eb:	77 0d                	ja     c00036fa <load_xdir+0x103>
c00036ed:	8d 04 2f             	lea    eax,[edi+ebp*1]
c00036f0:	b9 20 00 00 00       	mov    ecx,0x20
c00036f5:	e8 96 e3 ff ff       	call   c0001a90 <mem_cpy>
c00036fa:	83 c5 20             	add    ebp,0x20
c00036fd:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003701:	77 b3                	ja     c00036b6 <load_xdir+0xbf>
c0003703:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003709:	77 1b                	ja     c0003726 <load_xdir+0x12f>
c000370b:	89 f8                	mov    eax,edi
c000370d:	e8 cd e7 ff ff       	call   c0001edf <xdir_sum>
c0003712:	89 c1                	mov    ecx,eax
c0003714:	8d 47 02             	lea    eax,[edi+0x2]
c0003717:	e8 f5 e2 ff ff       	call   c0001a11 <ld_word>
c000371c:	66 39 c1             	cmp    cx,ax
c000371f:	74 05                	je     c0003726 <load_xdir+0x12f>
c0003721:	bb 02 00 00 00       	mov    ebx,0x2
c0003726:	83 c4 1c             	add    esp,0x1c
c0003729:	89 d8                	mov    eax,ebx
c000372b:	5b                   	pop    ebx
c000372c:	5e                   	pop    esi
c000372d:	5f                   	pop    edi
c000372e:	5d                   	pop    ebp
c000372f:	c3                   	ret    

c0003730 <load_obj_xdir>:
c0003730:	53                   	push   ebx
c0003731:	89 c3                	mov    ebx,eax
c0003733:	83 ec 08             	sub    esp,0x8
c0003736:	8b 02                	mov    eax,DWORD PTR [edx]
c0003738:	89 03                	mov    DWORD PTR [ebx],eax
c000373a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000373d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003740:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003743:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003746:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003749:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003750:	30 c0                	xor    al,al
c0003752:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003759:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000375c:	89 d8                	mov    eax,ebx
c000375e:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003761:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003764:	e8 04 f8 ff ff       	call   c0002f6d <dir_sdi>
c0003769:	85 c0                	test   eax,eax
c000376b:	75 0b                	jne    c0003778 <load_obj_xdir+0x48>
c000376d:	89 d8                	mov    eax,ebx
c000376f:	83 c4 08             	add    esp,0x8
c0003772:	5b                   	pop    ebx
c0003773:	e9 7f fe ff ff       	jmp    c00035f7 <load_xdir>
c0003778:	83 c4 08             	add    esp,0x8
c000377b:	5b                   	pop    ebx
c000377c:	c3                   	ret    

c000377d <dir_read>:
c000377d:	55                   	push   ebp
c000377e:	bd 04 00 00 00       	mov    ebp,0x4
c0003783:	57                   	push   edi
c0003784:	56                   	push   esi
c0003785:	be ff ff ff ff       	mov    esi,0xffffffff
c000378a:	53                   	push   ebx
c000378b:	89 c3                	mov    ebx,eax
c000378d:	83 ec 1c             	sub    esp,0x1c
c0003790:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003794:	8b 38                	mov    edi,DWORD PTR [eax]
c0003796:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000379b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000379e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037a1:	89 c8                	mov    eax,ecx
c00037a3:	09 d0                	or     eax,edx
c00037a5:	0f 84 25 01 00 00    	je     c00038d0 <dir_read+0x153>
c00037ab:	89 f8                	mov    eax,edi
c00037ad:	e8 3d ea ff ff       	call   c00021ef <move_window>
c00037b2:	89 c5                	mov    ebp,eax
c00037b4:	85 c0                	test   eax,eax
c00037b6:	0f 85 23 01 00 00    	jne    c00038df <dir_read+0x162>
c00037bc:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037bf:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037c1:	84 c9                	test   cl,cl
c00037c3:	0f 84 11 01 00 00    	je     c00038da <dir_read+0x15d>
c00037c9:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037cc:	75 48                	jne    c0003816 <dir_read+0x99>
c00037ce:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037d3:	74 10                	je     c00037e5 <dir_read+0x68>
c00037d5:	80 f9 83             	cmp    cl,0x83
c00037d8:	0f 85 dd 00 00 00    	jne    c00038bb <dir_read+0x13e>
c00037de:	31 ed                	xor    ebp,ebp
c00037e0:	e9 08 01 00 00       	jmp    c00038ed <dir_read+0x170>
c00037e5:	80 f9 85             	cmp    cl,0x85
c00037e8:	0f 85 cd 00 00 00    	jne    c00038bb <dir_read+0x13e>
c00037ee:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037f1:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037f4:	89 d8                	mov    eax,ebx
c00037f6:	e8 fc fd ff ff       	call   c00035f7 <load_xdir>
c00037fb:	89 c5                	mov    ebp,eax
c00037fd:	85 c0                	test   eax,eax
c00037ff:	0f 85 da 00 00 00    	jne    c00038df <dir_read+0x162>
c0003805:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003808:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000380b:	83 e0 3f             	and    eax,0x3f
c000380e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003811:	e9 d7 00 00 00       	jmp    c00038ed <dir_read+0x170>
c0003816:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003819:	83 e0 3f             	and    eax,0x3f
c000381c:	80 f9 2e             	cmp    cl,0x2e
c000381f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003823:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003826:	0f 84 8a 00 00 00    	je     c00038b6 <dir_read+0x139>
c000382c:	80 f9 e5             	cmp    cl,0xe5
c000382f:	0f 84 81 00 00 00    	je     c00038b6 <dir_read+0x139>
c0003835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003839:	83 e0 1f             	and    eax,0x1f
c000383c:	83 f8 08             	cmp    eax,0x8
c000383f:	0f 94 c0             	sete   al
c0003842:	0f b6 c0             	movzx  eax,al
c0003845:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003849:	75 6b                	jne    c00038b6 <dir_read+0x139>
c000384b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003850:	75 44                	jne    c0003896 <dir_read+0x119>
c0003852:	f6 c1 40             	test   cl,0x40
c0003855:	74 12                	je     c0003869 <dir_read+0xec>
c0003857:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000385a:	83 e1 bf             	and    ecx,0xffffffbf
c000385d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003861:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003864:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003867:	eb 06                	jmp    c000386f <dir_read+0xf2>
c0003869:	89 f0                	mov    eax,esi
c000386b:	38 c8                	cmp    al,cl
c000386d:	75 47                	jne    c00038b6 <dir_read+0x139>
c000386f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003873:	be ff ff ff ff       	mov    esi,0xffffffff
c0003878:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c000387b:	75 3e                	jne    c00038bb <dir_read+0x13e>
c000387d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003881:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003884:	e8 8a e4 ff ff       	call   c0001d13 <pick_lfn>
c0003889:	85 c0                	test   eax,eax
c000388b:	74 2e                	je     c00038bb <dir_read+0x13e>
c000388d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003891:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003894:	eb 25                	jmp    c00038bb <dir_read+0x13e>
c0003896:	89 f0                	mov    eax,esi
c0003898:	84 c0                	test   al,al
c000389a:	75 11                	jne    c00038ad <dir_read+0x130>
c000389c:	89 d0                	mov    eax,edx
c000389e:	e8 2a e6 ff ff       	call   c0001ecd <sum_sfn>
c00038a3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038a7:	0f 84 31 ff ff ff    	je     c00037de <dir_read+0x61>
c00038ad:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038b4:	eb 37                	jmp    c00038ed <dir_read+0x170>
c00038b6:	be ff ff ff ff       	mov    esi,0xffffffff
c00038bb:	31 d2                	xor    edx,edx
c00038bd:	89 d8                	mov    eax,ebx
c00038bf:	e8 01 fc ff ff       	call   c00034c5 <dir_next>
c00038c4:	89 c5                	mov    ebp,eax
c00038c6:	85 c0                	test   eax,eax
c00038c8:	0f 84 cd fe ff ff    	je     c000379b <dir_read+0x1e>
c00038ce:	eb 0f                	jmp    c00038df <dir_read+0x162>
c00038d0:	85 ed                	test   ebp,ebp
c00038d2:	0f 84 06 ff ff ff    	je     c00037de <dir_read+0x61>
c00038d8:	eb 05                	jmp    c00038df <dir_read+0x162>
c00038da:	bd 04 00 00 00       	mov    ebp,0x4
c00038df:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00038e6:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00038ed:	83 c4 1c             	add    esp,0x1c
c00038f0:	89 e8                	mov    eax,ebp
c00038f2:	5b                   	pop    ebx
c00038f3:	5e                   	pop    esi
c00038f4:	5f                   	pop    edi
c00038f5:	5d                   	pop    ebp
c00038f6:	c3                   	ret    

c00038f7 <dir_alloc>:
c00038f7:	55                   	push   ebp
c00038f8:	89 d5                	mov    ebp,edx
c00038fa:	57                   	push   edi
c00038fb:	31 d2                	xor    edx,edx
c00038fd:	56                   	push   esi
c00038fe:	53                   	push   ebx
c00038ff:	89 c3                	mov    ebx,eax
c0003901:	83 ec 0c             	sub    esp,0xc
c0003904:	8b 38                	mov    edi,DWORD PTR [eax]
c0003906:	e8 62 f6 ff ff       	call   c0002f6d <dir_sdi>
c000390b:	85 c0                	test   eax,eax
c000390d:	75 4e                	jne    c000395d <dir_alloc+0x66>
c000390f:	31 f6                	xor    esi,esi
c0003911:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003914:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003917:	89 f8                	mov    eax,edi
c0003919:	e8 d1 e8 ff ff       	call   c00021ef <move_window>
c000391e:	85 c0                	test   eax,eax
c0003920:	75 3b                	jne    c000395d <dir_alloc+0x66>
c0003922:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003925:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003928:	8a 12                	mov    dl,BYTE PTR [edx]
c000392a:	75 07                	jne    c0003933 <dir_alloc+0x3c>
c000392c:	f7 d2                	not    edx
c000392e:	c0 ea 07             	shr    dl,0x7
c0003931:	eb 0d                	jmp    c0003940 <dir_alloc+0x49>
c0003933:	84 d2                	test   dl,dl
c0003935:	0f 94 c1             	sete   cl
c0003938:	80 fa e5             	cmp    dl,0xe5
c000393b:	0f 94 c2             	sete   dl
c000393e:	09 ca                	or     edx,ecx
c0003940:	84 d2                	test   dl,dl
c0003942:	74 07                	je     c000394b <dir_alloc+0x54>
c0003944:	46                   	inc    esi
c0003945:	39 ee                	cmp    esi,ebp
c0003947:	75 04                	jne    c000394d <dir_alloc+0x56>
c0003949:	eb 1c                	jmp    c0003967 <dir_alloc+0x70>
c000394b:	31 f6                	xor    esi,esi
c000394d:	ba 01 00 00 00       	mov    edx,0x1
c0003952:	89 d8                	mov    eax,ebx
c0003954:	e8 6c fb ff ff       	call   c00034c5 <dir_next>
c0003959:	85 c0                	test   eax,eax
c000395b:	74 b4                	je     c0003911 <dir_alloc+0x1a>
c000395d:	83 f8 04             	cmp    eax,0x4
c0003960:	75 05                	jne    c0003967 <dir_alloc+0x70>
c0003962:	b8 07 00 00 00       	mov    eax,0x7
c0003967:	83 c4 0c             	add    esp,0xc
c000396a:	5b                   	pop    ebx
c000396b:	5e                   	pop    esi
c000396c:	5f                   	pop    edi
c000396d:	5d                   	pop    ebp
c000396e:	c3                   	ret    

c000396f <store_xdir>:
c000396f:	55                   	push   ebp
c0003970:	57                   	push   edi
c0003971:	89 c7                	mov    edi,eax
c0003973:	56                   	push   esi
c0003974:	53                   	push   ebx
c0003975:	83 ec 0c             	sub    esp,0xc
c0003978:	8b 00                	mov    eax,DWORD PTR [eax]
c000397a:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c000397d:	89 e8                	mov    eax,ebp
c000397f:	e8 5b e5 ff ff       	call   c0001edf <xdir_sum>
c0003984:	0f b7 d0             	movzx  edx,ax
c0003987:	8d 45 02             	lea    eax,[ebp+0x2]
c000398a:	e8 f4 e0 ff ff       	call   c0001a83 <st_word>
c000398f:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003993:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003996:	89 f8                	mov    eax,edi
c0003998:	e8 d0 f5 ff ff       	call   c0002f6d <dir_sdi>
c000399d:	89 c6                	mov    esi,eax
c000399f:	85 f6                	test   esi,esi
c00039a1:	75 3d                	jne    c00039e0 <store_xdir+0x71>
c00039a3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039a6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039a9:	8b 07                	mov    eax,DWORD PTR [edi]
c00039ab:	e8 3f e8 ff ff       	call   c00021ef <move_window>
c00039b0:	89 c6                	mov    esi,eax
c00039b2:	85 c0                	test   eax,eax
c00039b4:	75 2a                	jne    c00039e0 <store_xdir+0x71>
c00039b6:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039b9:	b9 20 00 00 00       	mov    ecx,0x20
c00039be:	89 ea                	mov    edx,ebp
c00039c0:	e8 cb e0 ff ff       	call   c0001a90 <mem_cpy>
c00039c5:	8b 07                	mov    eax,DWORD PTR [edi]
c00039c7:	85 db                	test   ebx,ebx
c00039c9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039cd:	74 11                	je     c00039e0 <store_xdir+0x71>
c00039cf:	31 d2                	xor    edx,edx
c00039d1:	89 f8                	mov    eax,edi
c00039d3:	83 c5 20             	add    ebp,0x20
c00039d6:	e8 ea fa ff ff       	call   c00034c5 <dir_next>
c00039db:	4b                   	dec    ebx
c00039dc:	89 c6                	mov    esi,eax
c00039de:	eb bf                	jmp    c000399f <store_xdir+0x30>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	83 fe 02             	cmp    esi,0x2
c00039e5:	76 05                	jbe    c00039ec <store_xdir+0x7d>
c00039e7:	b8 02 00 00 00       	mov    eax,0x2
c00039ec:	83 c4 0c             	add    esp,0xc
c00039ef:	5b                   	pop    ebx
c00039f0:	5e                   	pop    esi
c00039f1:	5f                   	pop    edi
c00039f2:	5d                   	pop    ebp
c00039f3:	c3                   	ret    

c00039f4 <dir_remove>:
c00039f4:	57                   	push   edi
c00039f5:	56                   	push   esi
c00039f6:	53                   	push   ebx
c00039f7:	89 c3                	mov    ebx,eax
c00039f9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00039fc:	8b 30                	mov    esi,DWORD PTR [eax]
c00039fe:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a01:	83 fa ff             	cmp    edx,0xffffffff
c0003a04:	74 09                	je     c0003a0f <dir_remove+0x1b>
c0003a06:	e8 62 f5 ff ff       	call   c0002f6d <dir_sdi>
c0003a0b:	85 c0                	test   eax,eax
c0003a0d:	75 41                	jne    c0003a50 <dir_remove+0x5c>
c0003a0f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a12:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a15:	89 f0                	mov    eax,esi
c0003a17:	e8 d3 e7 ff ff       	call   c00021ef <move_window>
c0003a1c:	85 c0                	test   eax,eax
c0003a1e:	75 26                	jne    c0003a46 <dir_remove+0x52>
c0003a20:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a23:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a26:	75 05                	jne    c0003a2d <dir_remove+0x39>
c0003a28:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a2b:	eb 03                	jmp    c0003a30 <dir_remove+0x3c>
c0003a2d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a30:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a34:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a37:	73 17                	jae    c0003a50 <dir_remove+0x5c>
c0003a39:	31 d2                	xor    edx,edx
c0003a3b:	89 d8                	mov    eax,ebx
c0003a3d:	e8 83 fa ff ff       	call   c00034c5 <dir_next>
c0003a42:	85 c0                	test   eax,eax
c0003a44:	74 c9                	je     c0003a0f <dir_remove+0x1b>
c0003a46:	83 f8 04             	cmp    eax,0x4
c0003a49:	75 05                	jne    c0003a50 <dir_remove+0x5c>
c0003a4b:	b8 02 00 00 00       	mov    eax,0x2
c0003a50:	5b                   	pop    ebx
c0003a51:	5e                   	pop    esi
c0003a52:	5f                   	pop    edi
c0003a53:	c3                   	ret    

c0003a54 <create_name>:
c0003a54:	55                   	push   ebp
c0003a55:	89 d5                	mov    ebp,edx
c0003a57:	57                   	push   edi
c0003a58:	89 c7                	mov    edi,eax
c0003a5a:	56                   	push   esi
c0003a5b:	31 f6                	xor    esi,esi
c0003a5d:	53                   	push   ebx
c0003a5e:	83 ec 3c             	sub    esp,0x3c
c0003a61:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a63:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a67:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a69:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003a70:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003a74:	e8 72 e0 ff ff       	call   c0001aeb <tchar2uni>
c0003a79:	89 c3                	mov    ebx,eax
c0003a7b:	83 f8 ff             	cmp    eax,0xffffffff
c0003a7e:	75 0a                	jne    c0003a8a <create_name+0x36>
c0003a80:	b8 06 00 00 00       	mov    eax,0x6
c0003a85:	e9 9e 02 00 00       	jmp    c0003d28 <create_name+0x2d4>
c0003a8a:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a8f:	76 0c                	jbe    c0003a9d <create_name+0x49>
c0003a91:	c1 e8 10             	shr    eax,0x10
c0003a94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a98:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a9c:	46                   	inc    esi
c0003a9d:	66 83 fb 1f          	cmp    bx,0x1f
c0003aa1:	76 4f                	jbe    c0003af2 <create_name+0x9e>
c0003aa3:	66 83 fb 5c          	cmp    bx,0x5c
c0003aa7:	74 35                	je     c0003ade <create_name+0x8a>
c0003aa9:	66 83 fb 2f          	cmp    bx,0x2f
c0003aad:	74 2f                	je     c0003ade <create_name+0x8a>
c0003aaf:	66 83 fb 7f          	cmp    bx,0x7f
c0003ab3:	77 11                	ja     c0003ac6 <create_name+0x72>
c0003ab5:	0f b7 d3             	movzx  edx,bx
c0003ab8:	b8 b2 7f 02 c0       	mov    eax,0xc0027fb2
c0003abd:	e8 11 e0 ff ff       	call   c0001ad3 <chk_chr>
c0003ac2:	85 c0                	test   eax,eax
c0003ac4:	75 ba                	jne    c0003a80 <create_name+0x2c>
c0003ac6:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003acc:	77 b2                	ja     c0003a80 <create_name+0x2c>
c0003ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ad2:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003ad6:	46                   	inc    esi
c0003ad7:	eb 97                	jmp    c0003a70 <create_name+0x1c>
c0003ad9:	40                   	inc    eax
c0003ada:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ade:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003ae2:	8a 10                	mov    dl,BYTE PTR [eax]
c0003ae4:	80 fa 2f             	cmp    dl,0x2f
c0003ae7:	74 f0                	je     c0003ad9 <create_name+0x85>
c0003ae9:	80 fa 5c             	cmp    dl,0x5c
c0003aec:	74 eb                	je     c0003ad9 <create_name+0x85>
c0003aee:	31 db                	xor    ebx,ebx
c0003af0:	eb 02                	jmp    c0003af4 <create_name+0xa0>
c0003af2:	b3 04                	mov    bl,0x4
c0003af4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003af8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003afb:	85 f6                	test   esi,esi
c0003afd:	74 18                	je     c0003b17 <create_name+0xc3>
c0003aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b03:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b08:	66 83 f8 20          	cmp    ax,0x20
c0003b0c:	74 06                	je     c0003b14 <create_name+0xc0>
c0003b0e:	66 83 f8 2e          	cmp    ax,0x2e
c0003b12:	75 03                	jne    c0003b17 <create_name+0xc3>
c0003b14:	4e                   	dec    esi
c0003b15:	eb e4                	jmp    c0003afb <create_name+0xa7>
c0003b17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b1b:	31 ed                	xor    ebp,ebp
c0003b1d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b23:	85 f6                	test   esi,esi
c0003b25:	0f 84 55 ff ff ff    	je     c0003a80 <create_name+0x2c>
c0003b2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b2f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b32:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b36:	66 83 f8 20          	cmp    ax,0x20
c0003b3a:	75 04                	jne    c0003b40 <create_name+0xec>
c0003b3c:	89 d5                	mov    ebp,edx
c0003b3e:	eb eb                	jmp    c0003b2b <create_name+0xd7>
c0003b40:	85 ed                	test   ebp,ebp
c0003b42:	75 06                	jne    c0003b4a <create_name+0xf6>
c0003b44:	66 83 f8 2e          	cmp    ax,0x2e
c0003b48:	75 08                	jne    c0003b52 <create_name+0xfe>
c0003b4a:	83 cb 03             	or     ebx,0x3
c0003b4d:	eb 03                	jmp    c0003b52 <create_name+0xfe>
c0003b4f:	4e                   	dec    esi
c0003b50:	74 0c                	je     c0003b5e <create_name+0x10a>
c0003b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b56:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b5c:	75 f1                	jne    c0003b4f <create_name+0xfb>
c0003b5e:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b63:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b66:	ba 20 00 00 00       	mov    edx,0x20
c0003b6b:	e8 35 df ff ff       	call   c0001aa5 <mem_set>
c0003b70:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003b78:	31 c9                	xor    ecx,ecx
c0003b7a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003b7f:	8d 45 01             	lea    eax,[ebp+0x1]
c0003b82:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b8a:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b8e:	66 85 ed             	test   bp,bp
c0003b91:	0f 84 30 01 00 00    	je     c0003cc7 <create_name+0x273>
c0003b97:	66 83 fd 20          	cmp    bp,0x20
c0003b9b:	74 10                	je     c0003bad <create_name+0x159>
c0003b9d:	66 83 fd 2e          	cmp    bp,0x2e
c0003ba1:	75 13                	jne    c0003bb6 <create_name+0x162>
c0003ba3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003ba7:	0f 84 6b 01 00 00    	je     c0003d18 <create_name+0x2c4>
c0003bad:	83 cb 03             	or     ebx,0x3
c0003bb0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003bb4:	eb c9                	jmp    c0003b7f <create_name+0x12b>
c0003bb6:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003bba:	73 0b                	jae    c0003bc7 <create_name+0x173>
c0003bbc:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bc0:	75 47                	jne    c0003c09 <create_name+0x1b5>
c0003bc2:	e9 51 01 00 00       	jmp    c0003d18 <create_name+0x2c4>
c0003bc7:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003bcc:	75 10                	jne    c0003bde <create_name+0x18a>
c0003bce:	83 cb 03             	or     ebx,0x3
c0003bd1:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003bd9:	e9 e9 00 00 00       	jmp    c0003cc7 <create_name+0x273>
c0003bde:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003be2:	74 0d                	je     c0003bf1 <create_name+0x19d>
c0003be4:	83 cb 03             	or     ebx,0x3
c0003be7:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003beb:	0f 87 d6 00 00 00    	ja     c0003cc7 <create_name+0x273>
c0003bf1:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003bf6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003bfa:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c02:	b9 08 00 00 00       	mov    ecx,0x8
c0003c07:	eb a7                	jmp    c0003bb0 <create_name+0x15c>
c0003c09:	66 83 fd 7f          	cmp    bp,0x7f
c0003c0d:	76 68                	jbe    c0003c77 <create_name+0x223>
c0003c0f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c13:	88 da                	mov    dl,bl
c0003c15:	83 ca 02             	or     edx,0x2
c0003c18:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c1c:	50                   	push   eax
c0003c1d:	50                   	push   eax
c0003c1e:	68 b5 01 00 00       	push   0x1b5
c0003c23:	55                   	push   ebp
c0003c24:	e8 48 46 00 00       	call   c0008271 <ff_uni2oem>
c0003c29:	83 c4 10             	add    esp,0x10
c0003c2c:	89 c5                	mov    ebp,eax
c0003c2e:	a8 80                	test   al,0x80
c0003c30:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c34:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c38:	74 0c                	je     c0003c46 <create_name+0x1f2>
c0003c3a:	83 e5 7f             	and    ebp,0x7f
c0003c3d:	0f b6 ad 00 7f 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd8100]
c0003c44:	eb 2a                	jmp    c0003c70 <create_name+0x21c>
c0003c46:	66 3d ff 00          	cmp    ax,0xff
c0003c4a:	76 24                	jbe    c0003c70 <create_name+0x21c>
c0003c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c50:	48                   	dec    eax
c0003c51:	39 c8                	cmp    eax,ecx
c0003c53:	77 0c                	ja     c0003c61 <create_name+0x20d>
c0003c55:	83 cb 03             	or     ebx,0x3
c0003c58:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c5c:	e9 4f ff ff ff       	jmp    c0003bb0 <create_name+0x15c>
c0003c61:	89 e8                	mov    eax,ebp
c0003c63:	88 d3                	mov    bl,dl
c0003c65:	66 c1 e8 08          	shr    ax,0x8
c0003c69:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c6d:	41                   	inc    ecx
c0003c6e:	eb 4b                	jmp    c0003cbb <create_name+0x267>
c0003c70:	88 d3                	mov    bl,dl
c0003c72:	66 85 ed             	test   bp,bp
c0003c75:	74 19                	je     c0003c90 <create_name+0x23c>
c0003c77:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003c7b:	0f b7 d5             	movzx  edx,bp
c0003c7e:	b8 bb 7f 02 c0       	mov    eax,0xc0027fbb
c0003c83:	e8 4b de ff ff       	call   c0001ad3 <chk_chr>
c0003c88:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c8c:	85 c0                	test   eax,eax
c0003c8e:	74 0a                	je     c0003c9a <create_name+0x246>
c0003c90:	83 cb 03             	or     ebx,0x3
c0003c93:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c98:	eb 21                	jmp    c0003cbb <create_name+0x267>
c0003c9a:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c9d:	66 83 f8 19          	cmp    ax,0x19
c0003ca1:	77 07                	ja     c0003caa <create_name+0x256>
c0003ca3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ca8:	eb 11                	jmp    c0003cbb <create_name+0x267>
c0003caa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003cad:	66 83 f8 19          	cmp    ax,0x19
c0003cb1:	77 08                	ja     c0003cbb <create_name+0x267>
c0003cb3:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003cb8:	83 ed 20             	sub    ebp,0x20
c0003cbb:	89 e8                	mov    eax,ebp
c0003cbd:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cc1:	41                   	inc    ecx
c0003cc2:	e9 e9 fe ff ff       	jmp    c0003bb0 <create_name+0x15c>
c0003cc7:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ccb:	75 04                	jne    c0003cd1 <create_name+0x27d>
c0003ccd:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cd1:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003cd6:	75 05                	jne    c0003cdd <create_name+0x289>
c0003cd8:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003cdd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ce1:	83 e0 0c             	and    eax,0xc
c0003ce4:	3c 0c                	cmp    al,0xc
c0003ce6:	74 0b                	je     c0003cf3 <create_name+0x29f>
c0003ce8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003cec:	83 e0 03             	and    eax,0x3
c0003cef:	3c 03                	cmp    al,0x3
c0003cf1:	75 05                	jne    c0003cf8 <create_name+0x2a4>
c0003cf3:	83 cb 02             	or     ebx,0x2
c0003cf6:	eb 19                	jmp    c0003d11 <create_name+0x2bd>
c0003cf8:	f6 c3 02             	test   bl,0x2
c0003cfb:	75 14                	jne    c0003d11 <create_name+0x2bd>
c0003cfd:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d02:	74 03                	je     c0003d07 <create_name+0x2b3>
c0003d04:	83 cb 10             	or     ebx,0x10
c0003d07:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d0c:	74 03                	je     c0003d11 <create_name+0x2bd>
c0003d0e:	83 cb 08             	or     ebx,0x8
c0003d11:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d14:	31 c0                	xor    eax,eax
c0003d16:	eb 10                	jmp    c0003d28 <create_name+0x2d4>
c0003d18:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d1d:	0f 85 ce fe ff ff    	jne    c0003bf1 <create_name+0x19d>
c0003d23:	e9 a6 fe ff ff       	jmp    c0003bce <create_name+0x17a>
c0003d28:	83 c4 3c             	add    esp,0x3c
c0003d2b:	5b                   	pop    ebx
c0003d2c:	5e                   	pop    esi
c0003d2d:	5f                   	pop    edi
c0003d2e:	5d                   	pop    ebp
c0003d2f:	c3                   	ret    

c0003d30 <xname_sum>:
c0003d30:	56                   	push   esi
c0003d31:	53                   	push   ebx
c0003d32:	89 c6                	mov    esi,eax
c0003d34:	51                   	push   ecx
c0003d35:	31 db                	xor    ebx,ebx
c0003d37:	83 c6 02             	add    esi,0x2
c0003d3a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d3e:	66 85 c0             	test   ax,ax
c0003d41:	74 1f                	je     c0003d62 <xname_sum+0x32>
c0003d43:	83 ec 0c             	sub    esp,0xc
c0003d46:	66 d1 cb             	ror    bx,1
c0003d49:	50                   	push   eax
c0003d4a:	e8 1e 46 00 00       	call   c000836d <ff_wtoupper>
c0003d4f:	83 c4 10             	add    esp,0x10
c0003d52:	0f b6 d0             	movzx  edx,al
c0003d55:	66 c1 e8 08          	shr    ax,0x8
c0003d59:	01 d3                	add    ebx,edx
c0003d5b:	66 d1 cb             	ror    bx,1
c0003d5e:	01 c3                	add    ebx,eax
c0003d60:	eb d5                	jmp    c0003d37 <xname_sum+0x7>
c0003d62:	89 d8                	mov    eax,ebx
c0003d64:	5a                   	pop    edx
c0003d65:	5b                   	pop    ebx
c0003d66:	5e                   	pop    esi
c0003d67:	c3                   	ret    

c0003d68 <create_xdir>:
c0003d68:	55                   	push   ebp
c0003d69:	b9 40 00 00 00       	mov    ecx,0x40
c0003d6e:	57                   	push   edi
c0003d6f:	bd 01 00 00 00       	mov    ebp,0x1
c0003d74:	56                   	push   esi
c0003d75:	31 ff                	xor    edi,edi
c0003d77:	53                   	push   ebx
c0003d78:	be 40 00 00 00       	mov    esi,0x40
c0003d7d:	89 c3                	mov    ebx,eax
c0003d7f:	83 ec 1c             	sub    esp,0x1c
c0003d82:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d86:	31 d2                	xor    edx,edx
c0003d88:	e8 18 dd ff ff       	call   c0001aa5 <mem_set>
c0003d8d:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d90:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d94:	31 c9                	xor    ecx,ecx
c0003d96:	8d 46 01             	lea    eax,[esi+0x1]
c0003d99:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d9d:	83 c6 02             	add    esi,0x2
c0003da0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	74 12                	je     c0003dbb <create_xdir+0x53>
c0003da9:	0f b6 c1             	movzx  eax,cl
c0003dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003db0:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003db4:	66 83 fd 01          	cmp    bp,0x1
c0003db8:	80 d9 ff             	sbb    cl,0xff
c0003dbb:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003dbe:	0f b7 d5             	movzx  edx,bp
c0003dc1:	83 c6 02             	add    esi,0x2
c0003dc4:	e8 ba dc ff ff       	call   c0001a83 <st_word>
c0003dc9:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003dcf:	75 d3                	jne    c0003da4 <create_xdir+0x3c>
c0003dd1:	8d 47 01             	lea    eax,[edi+0x1]
c0003dd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dd8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ddc:	0f b6 c1             	movzx  eax,cl
c0003ddf:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003de4:	74 07                	je     c0003ded <create_xdir+0x85>
c0003de6:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003deb:	eb a9                	jmp    c0003d96 <create_xdir+0x2e>
c0003ded:	8d 47 02             	lea    eax,[edi+0x2]
c0003df0:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003df3:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003df6:	89 d0                	mov    eax,edx
c0003df8:	e8 33 ff ff ff       	call   c0003d30 <xname_sum>
c0003dfd:	83 c4 1c             	add    esp,0x1c
c0003e00:	0f b7 d0             	movzx  edx,ax
c0003e03:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e06:	5b                   	pop    ebx
c0003e07:	5e                   	pop    esi
c0003e08:	5f                   	pop    edi
c0003e09:	5d                   	pop    ebp
c0003e0a:	e9 74 dc ff ff       	jmp    c0001a83 <st_word>

c0003e0f <cmp_lfn>:
c0003e0f:	55                   	push   ebp
c0003e10:	57                   	push   edi
c0003e11:	89 d7                	mov    edi,edx
c0003e13:	56                   	push   esi
c0003e14:	53                   	push   ebx
c0003e15:	83 ec 1c             	sub    esp,0x1c
c0003e18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e1c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e1f:	e8 ed db ff ff       	call   c0001a11 <ld_word>
c0003e24:	66 85 c0             	test   ax,ax
c0003e27:	74 07                	je     c0003e30 <cmp_lfn+0x21>
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	e9 9a 00 00 00       	jmp    c0003eca <cmp_lfn+0xbb>
c0003e30:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e32:	bd 01 00 00 00       	mov    ebp,0x1
c0003e37:	83 e3 3f             	and    ebx,0x3f
c0003e3a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e42:	4b                   	dec    ebx
c0003e43:	6b db 0d             	imul   ebx,ebx,0xd
c0003e46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e4a:	0f b6 80 80 7f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd8080]
c0003e51:	01 f8                	add    eax,edi
c0003e53:	e8 b9 db ff ff       	call   c0001a11 <ld_word>
c0003e58:	66 85 ed             	test   bp,bp
c0003e5b:	89 c6                	mov    esi,eax
c0003e5d:	74 3c                	je     c0003e9b <cmp_lfn+0x8c>
c0003e5f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e65:	77 c2                	ja     c0003e29 <cmp_lfn+0x1a>
c0003e67:	83 ec 0c             	sub    esp,0xc
c0003e6a:	0f b7 c0             	movzx  eax,ax
c0003e6d:	50                   	push   eax
c0003e6e:	e8 fa 44 00 00       	call   c000836d <ff_wtoupper>
c0003e73:	89 c5                	mov    ebp,eax
c0003e75:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e78:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e80:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e84:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e87:	e8 e1 44 00 00       	call   c000836d <ff_wtoupper>
c0003e8c:	83 c4 10             	add    esp,0x10
c0003e8f:	39 c5                	cmp    ebp,eax
c0003e91:	75 96                	jne    c0003e29 <cmp_lfn+0x1a>
c0003e93:	89 f5                	mov    ebp,esi
c0003e95:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e99:	eb 04                	jmp    c0003e9f <cmp_lfn+0x90>
c0003e9b:	66 46                	inc    si
c0003e9d:	75 8a                	jne    c0003e29 <cmp_lfn+0x1a>
c0003e9f:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003ea3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ea8:	75 9c                	jne    c0003e46 <cmp_lfn+0x37>
c0003eaa:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ead:	74 16                	je     c0003ec5 <cmp_lfn+0xb6>
c0003eaf:	66 85 ed             	test   bp,bp
c0003eb2:	74 11                	je     c0003ec5 <cmp_lfn+0xb6>
c0003eb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eb8:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ebd:	0f 94 c0             	sete   al
c0003ec0:	0f b6 c0             	movzx  eax,al
c0003ec3:	eb 05                	jmp    c0003eca <cmp_lfn+0xbb>
c0003ec5:	b8 01 00 00 00       	mov    eax,0x1
c0003eca:	83 c4 1c             	add    esp,0x1c
c0003ecd:	5b                   	pop    ebx
c0003ece:	5e                   	pop    esi
c0003ecf:	5f                   	pop    edi
c0003ed0:	5d                   	pop    ebp
c0003ed1:	c3                   	ret    

c0003ed2 <dir_find>:
c0003ed2:	55                   	push   ebp
c0003ed3:	31 d2                	xor    edx,edx
c0003ed5:	57                   	push   edi
c0003ed6:	56                   	push   esi
c0003ed7:	53                   	push   ebx
c0003ed8:	89 c3                	mov    ebx,eax
c0003eda:	83 ec 1c             	sub    esp,0x1c
c0003edd:	8b 30                	mov    esi,DWORD PTR [eax]
c0003edf:	e8 89 f0 ff ff       	call   c0002f6d <dir_sdi>
c0003ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ee7:	85 c0                	test   eax,eax
c0003ee9:	0f 85 9e 01 00 00    	jne    c000408d <dir_find+0x1bb>
c0003eef:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003ef2:	0f 85 8d 00 00 00    	jne    c0003f85 <dir_find+0xb3>
c0003ef8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003efb:	e8 30 fe ff ff       	call   c0003d30 <xname_sum>
c0003f00:	89 c7                	mov    edi,eax
c0003f02:	31 d2                	xor    edx,edx
c0003f04:	89 d8                	mov    eax,ebx
c0003f06:	e8 72 f8 ff ff       	call   c000377d <dir_read>
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	0f 85 5e 01 00 00    	jne    c0004071 <dir_find+0x19f>
c0003f13:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f16:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f19:	e8 f3 da ff ff       	call   c0001a11 <ld_word>
c0003f1e:	66 39 f8             	cmp    ax,di
c0003f21:	75 df                	jne    c0003f02 <dir_find+0x30>
c0003f23:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f26:	31 ed                	xor    ebp,ebp
c0003f28:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f2c:	ba 40 00 00 00       	mov    edx,0x40
c0003f31:	89 e9                	mov    ecx,ebp
c0003f33:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f37:	0f 84 42 01 00 00    	je     c000407f <dir_find+0x1ad>
c0003f3d:	f6 c2 1f             	test   dl,0x1f
c0003f40:	75 03                	jne    c0003f45 <dir_find+0x73>
c0003f42:	83 c2 02             	add    edx,0x2
c0003f45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f49:	89 d0                	mov    eax,edx
c0003f4b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f4e:	e8 be da ff ff       	call   c0001a11 <ld_word>
c0003f53:	83 ec 0c             	sub    esp,0xc
c0003f56:	0f b7 c0             	movzx  eax,ax
c0003f59:	50                   	push   eax
c0003f5a:	e8 0e 44 00 00       	call   c000836d <ff_wtoupper>
c0003f5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f63:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f66:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003f6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f6d:	e8 fb 43 00 00       	call   c000836d <ff_wtoupper>
c0003f72:	83 c4 10             	add    esp,0x10
c0003f75:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f79:	75 87                	jne    c0003f02 <dir_find+0x30>
c0003f7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003f7f:	45                   	inc    ebp
c0003f80:	83 c2 02             	add    edx,0x2
c0003f83:	eb ac                	jmp    c0003f31 <dir_find+0x5f>
c0003f85:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f8c:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f91:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f96:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f99:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f9c:	89 f0                	mov    eax,esi
c0003f9e:	e8 4c e2 ff ff       	call   c00021ef <move_window>
c0003fa3:	85 c0                	test   eax,eax
c0003fa5:	0f 85 c6 00 00 00    	jne    c0004071 <dir_find+0x19f>
c0003fab:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fae:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fb1:	84 c9                	test   cl,cl
c0003fb3:	0f 84 bd 00 00 00    	je     c0004076 <dir_find+0x1a4>
c0003fb9:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fbc:	88 d0                	mov    al,dl
c0003fbe:	83 e0 3f             	and    eax,0x3f
c0003fc1:	80 f9 e5             	cmp    cl,0xe5
c0003fc4:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fc7:	0f 84 87 00 00 00    	je     c0004054 <dir_find+0x182>
c0003fcd:	80 e2 08             	and    dl,0x8
c0003fd0:	74 06                	je     c0003fd8 <dir_find+0x106>
c0003fd2:	3c 0f                	cmp    al,0xf
c0003fd4:	75 7e                	jne    c0004054 <dir_find+0x182>
c0003fd6:	eb 04                	jmp    c0003fdc <dir_find+0x10a>
c0003fd8:	3c 0f                	cmp    al,0xf
c0003fda:	75 4c                	jne    c0004028 <dir_find+0x156>
c0003fdc:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003fe0:	75 7e                	jne    c0004060 <dir_find+0x18e>
c0003fe2:	f6 c1 40             	test   cl,0x40
c0003fe5:	74 12                	je     c0003ff9 <dir_find+0x127>
c0003fe7:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003fea:	83 e1 bf             	and    ecx,0xffffffbf
c0003fed:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003ff1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ff4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ff7:	eb 06                	jmp    c0003fff <dir_find+0x12d>
c0003ff9:	89 f8                	mov    eax,edi
c0003ffb:	38 c8                	cmp    al,cl
c0003ffd:	75 5c                	jne    c000405b <dir_find+0x189>
c0003fff:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004003:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004008:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000400b:	75 53                	jne    c0004060 <dir_find+0x18e>
c000400d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004011:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004014:	89 ea                	mov    edx,ebp
c0004016:	e8 f4 fd ff ff       	call   c0003e0f <cmp_lfn>
c000401b:	85 c0                	test   eax,eax
c000401d:	74 41                	je     c0004060 <dir_find+0x18e>
c000401f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004023:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004026:	eb 38                	jmp    c0004060 <dir_find+0x18e>
c0004028:	89 f8                	mov    eax,edi
c000402a:	84 c0                	test   al,al
c000402c:	75 0d                	jne    c000403b <dir_find+0x169>
c000402e:	89 e8                	mov    eax,ebp
c0004030:	e8 98 de ff ff       	call   c0001ecd <sum_sfn>
c0004035:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004039:	74 52                	je     c000408d <dir_find+0x1bb>
c000403b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000403f:	75 13                	jne    c0004054 <dir_find+0x182>
c0004041:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004044:	b9 0b 00 00 00       	mov    ecx,0xb
c0004049:	89 e8                	mov    eax,ebp
c000404b:	e8 60 da ff ff       	call   c0001ab0 <mem_cmp>
c0004050:	85 c0                	test   eax,eax
c0004052:	74 39                	je     c000408d <dir_find+0x1bb>
c0004054:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000405b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004060:	31 d2                	xor    edx,edx
c0004062:	89 d8                	mov    eax,ebx
c0004064:	e8 5c f4 ff ff       	call   c00034c5 <dir_next>
c0004069:	85 c0                	test   eax,eax
c000406b:	0f 84 25 ff ff ff    	je     c0003f96 <dir_find+0xc4>
c0004071:	89 04 24             	mov    DWORD PTR [esp],eax
c0004074:	eb 17                	jmp    c000408d <dir_find+0x1bb>
c0004076:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000407d:	eb 0e                	jmp    c000408d <dir_find+0x1bb>
c000407f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004082:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004087:	0f 85 75 fe ff ff    	jne    c0003f02 <dir_find+0x30>
c000408d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004090:	83 c4 1c             	add    esp,0x1c
c0004093:	5b                   	pop    ebx
c0004094:	5e                   	pop    esi
c0004095:	5f                   	pop    edi
c0004096:	5d                   	pop    ebp
c0004097:	c3                   	ret    

c0004098 <dir_register>:
c0004098:	55                   	push   ebp
c0004099:	57                   	push   edi
c000409a:	56                   	push   esi
c000409b:	be 06 00 00 00       	mov    esi,0x6
c00040a0:	53                   	push   ebx
c00040a1:	83 ec 6c             	sub    esp,0x6c
c00040a4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040a8:	0f 85 62 02 00 00    	jne    c0004310 <dir_register+0x278>
c00040ae:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040b0:	31 ff                	xor    edi,edi
c00040b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040b5:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040ba:	74 03                	je     c00040bf <dir_register+0x27>
c00040bc:	47                   	inc    edi
c00040bd:	eb f6                	jmp    c00040b5 <dir_register+0x1d>
c00040bf:	89 c3                	mov    ebx,eax
c00040c1:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040c5:	0f 85 e1 00 00 00    	jne    c00041ac <dir_register+0x114>
c00040cb:	83 c7 0e             	add    edi,0xe
c00040ce:	b9 0f 00 00 00       	mov    ecx,0xf
c00040d3:	89 f8                	mov    eax,edi
c00040d5:	31 d2                	xor    edx,edx
c00040d7:	f7 f1                	div    ecx
c00040d9:	8d 50 02             	lea    edx,[eax+0x2]
c00040dc:	89 c7                	mov    edi,eax
c00040de:	89 d8                	mov    eax,ebx
c00040e0:	e8 12 f8 ff ff       	call   c00038f7 <dir_alloc>
c00040e5:	89 c6                	mov    esi,eax
c00040e7:	85 c0                	test   eax,eax
c00040e9:	0f 85 21 02 00 00    	jne    c0004310 <dir_register+0x278>
c00040ef:	81 c7 01 00 00 08    	add    edi,0x8000001
c00040f5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00040f8:	c1 e7 05             	shl    edi,0x5
c00040fb:	29 f8                	sub    eax,edi
c00040fd:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004100:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004103:	a8 04                	test   al,0x4
c0004105:	0f 84 91 00 00 00    	je     c000419c <dir_register+0x104>
c000410b:	83 e0 fb             	and    eax,0xfffffffb
c000410e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004111:	89 d8                	mov    eax,ebx
c0004113:	e8 25 ec ff ff       	call   c0002d3d <fill_first_frag>
c0004118:	85 c0                	test   eax,eax
c000411a:	0f 85 ee 01 00 00    	jne    c000430e <dir_register+0x276>
c0004120:	83 c9 ff             	or     ecx,0xffffffff
c0004123:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004126:	89 d8                	mov    eax,ebx
c0004128:	e8 db eb ff ff       	call   c0002d08 <fill_last_frag>
c000412d:	85 c0                	test   eax,eax
c000412f:	0f 85 d9 01 00 00    	jne    c000430e <dir_register+0x276>
c0004135:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004139:	74 61                	je     c000419c <dir_register+0x104>
c000413b:	89 da                	mov    edx,ebx
c000413d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004141:	e8 ea f5 ff ff       	call   c0003730 <load_obj_xdir>
c0004146:	85 c0                	test   eax,eax
c0004148:	0f 85 c0 01 00 00    	jne    c000430e <dir_register+0x276>
c000414e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004152:	31 c9                	xor    ecx,ecx
c0004154:	c1 e2 09             	shl    edx,0x9
c0004157:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000415a:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000415d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004160:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004163:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004166:	83 c0 38             	add    eax,0x38
c0004169:	e8 1c d9 ff ff       	call   c0001a8a <st_qword>
c000416e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004171:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004174:	83 c0 28             	add    eax,0x28
c0004177:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000417a:	e8 0b d9 ff ff       	call   c0001a8a <st_qword>
c000417f:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004182:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004185:	83 c8 01             	or     eax,0x1
c0004188:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c000418b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000418f:	e8 db f7 ff ff       	call   c000396f <store_xdir>
c0004194:	85 c0                	test   eax,eax
c0004196:	0f 85 72 01 00 00    	jne    c000430e <dir_register+0x276>
c000419c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000419f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041a2:	e8 c1 fb ff ff       	call   c0003d68 <create_xdir>
c00041a7:	e9 64 01 00 00       	jmp    c0004310 <dir_register+0x278>
c00041ac:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041af:	b9 0c 00 00 00       	mov    ecx,0xc
c00041b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041b8:	89 c2                	mov    edx,eax
c00041ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041be:	e8 cd d8 ff ff       	call   c0001a90 <mem_cpy>
c00041c3:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041c8:	74 58                	je     c0004222 <dir_register+0x18a>
c00041ca:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041ce:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041d6:	83 ec 0c             	sub    esp,0xc
c00041d9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041e0:	8d 54 24 24          	lea    edx,[esp+0x24]
c00041e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041e8:	e8 24 dc ff ff       	call   c0001e11 <gen_numname>
c00041ed:	89 d8                	mov    eax,ebx
c00041ef:	e8 de fc ff ff       	call   c0003ed2 <dir_find>
c00041f4:	83 c4 10             	add    esp,0x10
c00041f7:	89 c6                	mov    esi,eax
c00041f9:	85 c0                	test   eax,eax
c00041fb:	75 15                	jne    c0004212 <dir_register+0x17a>
c00041fd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004201:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004206:	75 ce                	jne    c00041d6 <dir_register+0x13e>
c0004208:	be 07 00 00 00       	mov    esi,0x7
c000420d:	e9 fe 00 00 00       	jmp    c0004310 <dir_register+0x278>
c0004212:	83 f8 04             	cmp    eax,0x4
c0004215:	0f 85 f5 00 00 00    	jne    c0004310 <dir_register+0x278>
c000421b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000421f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004222:	b9 01 00 00 00       	mov    ecx,0x1
c0004227:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000422c:	74 0f                	je     c000423d <dir_register+0x1a5>
c000422e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004233:	8d 47 0c             	lea    eax,[edi+0xc]
c0004236:	31 d2                	xor    edx,edx
c0004238:	f7 f1                	div    ecx
c000423a:	8d 48 01             	lea    ecx,[eax+0x1]
c000423d:	89 ca                	mov    edx,ecx
c000423f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004243:	89 d8                	mov    eax,ebx
c0004245:	e8 ad f6 ff ff       	call   c00038f7 <dir_alloc>
c000424a:	89 c6                	mov    esi,eax
c000424c:	85 c0                	test   eax,eax
c000424e:	0f 85 bc 00 00 00    	jne    c0004310 <dir_register+0x278>
c0004254:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004258:	49                   	dec    ecx
c0004259:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000425d:	74 6a                	je     c00042c9 <dir_register+0x231>
c000425f:	89 c8                	mov    eax,ecx
c0004261:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004264:	c1 e0 05             	shl    eax,0x5
c0004267:	29 c2                	sub    edx,eax
c0004269:	89 d8                	mov    eax,ebx
c000426b:	e8 fd ec ff ff       	call   c0002f6d <dir_sdi>
c0004270:	89 c6                	mov    esi,eax
c0004272:	85 c0                	test   eax,eax
c0004274:	0f 85 96 00 00 00    	jne    c0004310 <dir_register+0x278>
c000427a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000427e:	e8 4a dc ff ff       	call   c0001ecd <sum_sfn>
c0004283:	0f b6 f8             	movzx  edi,al
c0004286:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004289:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000428c:	89 e8                	mov    eax,ebp
c000428e:	e8 5c df ff ff       	call   c00021ef <move_window>
c0004293:	89 c6                	mov    esi,eax
c0004295:	85 c0                	test   eax,eax
c0004297:	75 77                	jne    c0004310 <dir_register+0x278>
c0004299:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000429e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042a1:	83 ec 0c             	sub    esp,0xc
c00042a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042a7:	57                   	push   edi
c00042a8:	e8 e0 da ff ff       	call   c0001d8d <put_lfn>
c00042ad:	31 d2                	xor    edx,edx
c00042af:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042b3:	89 d8                	mov    eax,ebx
c00042b5:	e8 0b f2 ff ff       	call   c00034c5 <dir_next>
c00042ba:	83 c4 10             	add    esp,0x10
c00042bd:	89 c6                	mov    esi,eax
c00042bf:	85 c0                	test   eax,eax
c00042c1:	75 4d                	jne    c0004310 <dir_register+0x278>
c00042c3:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00042c7:	75 bd                	jne    c0004286 <dir_register+0x1ee>
c00042c9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042cc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042cf:	89 e8                	mov    eax,ebp
c00042d1:	e8 19 df ff ff       	call   c00021ef <move_window>
c00042d6:	89 c6                	mov    esi,eax
c00042d8:	85 c0                	test   eax,eax
c00042da:	75 34                	jne    c0004310 <dir_register+0x278>
c00042dc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042df:	b9 20 00 00 00       	mov    ecx,0x20
c00042e4:	31 d2                	xor    edx,edx
c00042e6:	e8 ba d7 ff ff       	call   c0001aa5 <mem_set>
c00042eb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00042f2:	b9 0b 00 00 00       	mov    ecx,0xb
c00042f7:	e8 94 d7 ff ff       	call   c0001a90 <mem_cpy>
c00042fc:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c00042ff:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004302:	83 e0 18             	and    eax,0x18
c0004305:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004308:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000430c:	eb 02                	jmp    c0004310 <dir_register+0x278>
c000430e:	89 c6                	mov    esi,eax
c0004310:	83 c4 6c             	add    esp,0x6c
c0004313:	89 f0                	mov    eax,esi
c0004315:	5b                   	pop    ebx
c0004316:	5e                   	pop    esi
c0004317:	5f                   	pop    edi
c0004318:	5d                   	pop    ebp
c0004319:	c3                   	ret    

c000431a <sync_fs>:
c000431a:	56                   	push   esi
c000431b:	53                   	push   ebx
c000431c:	53                   	push   ebx
c000431d:	89 c3                	mov    ebx,eax
c000431f:	e8 37 de ff ff       	call   c000215b <sync_window>
c0004324:	85 c0                	test   eax,eax
c0004326:	0f 85 b1 00 00 00    	jne    c00043dd <sync_fs+0xc3>
c000432c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000432f:	0f 85 8e 00 00 00    	jne    c00043c3 <sync_fs+0xa9>
c0004335:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004339:	0f 85 84 00 00 00    	jne    c00043c3 <sync_fs+0xa9>
c000433f:	b9 00 02 00 00       	mov    ecx,0x200
c0004344:	8d 73 54             	lea    esi,[ebx+0x54]
c0004347:	31 d2                	xor    edx,edx
c0004349:	89 f0                	mov    eax,esi
c000434b:	e8 55 d7 ff ff       	call   c0001aa5 <mem_set>
c0004350:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004356:	ba 55 aa 00 00       	mov    edx,0xaa55
c000435b:	e8 23 d7 ff ff       	call   c0001a83 <st_word>
c0004360:	ba 52 52 61 41       	mov    edx,0x41615252
c0004365:	89 f0                	mov    eax,esi
c0004367:	e8 1b d7 ff ff       	call   c0001a87 <st_dword>
c000436c:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004372:	ba 72 72 41 61       	mov    edx,0x61417272
c0004377:	e8 0b d7 ff ff       	call   c0001a87 <st_dword>
c000437c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000437f:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004385:	e8 fd d6 ff ff       	call   c0001a87 <st_dword>
c000438a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000438d:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004393:	e8 ef d6 ff ff       	call   c0001a87 <st_dword>
c0004398:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000439b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000439e:	83 c0 01             	add    eax,0x1
c00043a1:	83 d2 00             	adc    edx,0x0
c00043a4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043a7:	83 ec 0c             	sub    esp,0xc
c00043aa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043ad:	6a 01                	push   0x1
c00043af:	52                   	push   edx
c00043b0:	50                   	push   eax
c00043b1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043b5:	56                   	push   esi
c00043b6:	50                   	push   eax
c00043b7:	e8 20 d6 ff ff       	call   c00019dc <disk_write>
c00043bc:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043c0:	83 c4 20             	add    esp,0x20
c00043c3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043c7:	51                   	push   ecx
c00043c8:	6a 00                	push   0x0
c00043ca:	6a 00                	push   0x0
c00043cc:	50                   	push   eax
c00043cd:	e8 20 d6 ff ff       	call   c00019f2 <disk_ioctl>
c00043d2:	83 c4 10             	add    esp,0x10
c00043d5:	85 c0                	test   eax,eax
c00043d7:	0f 95 c0             	setne  al
c00043da:	0f b6 c0             	movzx  eax,al
c00043dd:	5a                   	pop    edx
c00043de:	5b                   	pop    ebx
c00043df:	5e                   	pop    esi
c00043e0:	c3                   	ret    

c00043e1 <create_partition>:
c00043e1:	55                   	push   ebp
c00043e2:	0f b6 c0             	movzx  eax,al
c00043e5:	57                   	push   edi
c00043e6:	56                   	push   esi
c00043e7:	53                   	push   ebx
c00043e8:	83 ec 60             	sub    esp,0x60
c00043eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043ef:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00043f3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00043f7:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00043fb:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c00043ff:	50                   	push   eax
c0004400:	6a 01                	push   0x1
c0004402:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004406:	e8 e7 d5 ff ff       	call   c00019f2 <disk_ioctl>
c000440b:	83 c4 10             	add    esp,0x10
c000440e:	85 c0                	test   eax,eax
c0004410:	74 0a                	je     c000441c <create_partition+0x3b>
c0004412:	b8 01 00 00 00       	mov    eax,0x1
c0004417:	e9 67 05 00 00       	jmp    c0004983 <create_partition+0x5a2>
c000441c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004420:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004424:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004428:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000442c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004431:	0f 86 ed 03 00 00    	jbe    c0004824 <create_partition+0x443>
c0004437:	83 c0 df             	add    eax,0xffffffdf
c000443a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004442:	83 d2 ff             	adc    edx,0xffffffff
c0004445:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004449:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000444d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004451:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004455:	83 c0 bd             	add    eax,0xffffffbd
c0004458:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000445f:	83 d2 ff             	adc    edx,0xffffffff
c0004462:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004466:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000446a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004472:	be 22 00 00 00       	mov    esi,0x22
c0004477:	31 ff                	xor    edi,edi
c0004479:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004481:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004489:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0004491:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004495:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000449b:	75 0e                	jne    c00044ab <create_partition+0xca>
c000449d:	b9 00 02 00 00       	mov    ecx,0x200
c00044a2:	31 d2                	xor    edx,edx
c00044a4:	89 d8                	mov    eax,ebx
c00044a6:	e8 fa d5 ff ff       	call   c0001aa5 <mem_set>
c00044ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044b7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044ba:	0f 84 23 01 00 00    	je     c00045e3 <create_partition+0x202>
c00044c0:	89 f0                	mov    eax,esi
c00044c2:	89 fa                	mov    edx,edi
c00044c4:	05 ff 07 00 00       	add    eax,0x7ff
c00044c9:	83 d2 00             	adc    edx,0x0
c00044cc:	89 c1                	mov    ecx,eax
c00044ce:	89 d7                	mov    edi,edx
c00044d0:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044d6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044da:	89 ce                	mov    esi,ecx
c00044dc:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044e0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044e4:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00044e8:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00044eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00044f2:	b8 64 00 00 00       	mov    eax,0x64
c00044f7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00044fa:	b8 00 00 00 00       	mov    eax,0x0
c00044ff:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004503:	72 41                	jb     c0004546 <create_partition+0x165>
c0004505:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004509:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000450d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004511:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004516:	01 c1                	add    ecx,eax
c0004518:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000451c:	f7 24 24             	mul    DWORD PTR [esp]
c000451f:	6a 00                	push   0x0
c0004521:	01 ca                	add    edx,ecx
c0004523:	6a 64                	push   0x64
c0004525:	52                   	push   edx
c0004526:	50                   	push   eax
c0004527:	e8 20 10 02 00       	call   c002554c <__udivdi3>
c000452c:	83 c4 10             	add    esp,0x10
c000452f:	05 ff 07 00 00       	add    eax,0x7ff
c0004534:	83 d2 00             	adc    edx,0x0
c0004537:	89 c1                	mov    ecx,eax
c0004539:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000453d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004543:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004546:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004549:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000454d:	01 f0                	add    eax,esi
c000454f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004553:	11 fa                	adc    edx,edi
c0004555:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004559:	19 d1                	sbb    ecx,edx
c000455b:	73 2e                	jae    c000458b <create_partition+0x1aa>
c000455d:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004561:	89 f8                	mov    eax,edi
c0004563:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000456a:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c000456e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004576:	73 6b                	jae    c00045e3 <create_partition+0x202>
c0004578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000457c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004580:	29 f0                	sub    eax,esi
c0004582:	19 fa                	sbb    edx,edi
c0004584:	89 04 24             	mov    DWORD PTR [esp],eax
c0004587:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000458b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000458f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004592:	74 4f                	je     c00045e3 <create_partition+0x202>
c0004594:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004597:	b9 10 00 00 00       	mov    ecx,0x10
c000459c:	ba 90 7f 02 c0       	mov    edx,0xc0027f90
c00045a1:	e8 ea d4 ff ff       	call   c0001a90 <mem_cpy>
c00045a6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045aa:	b9 10 00 00 00       	mov    ecx,0x10
c00045af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045b3:	e8 2c db ff ff       	call   c00020e4 <make_rand>
c00045b8:	89 f2                	mov    edx,esi
c00045ba:	89 f9                	mov    ecx,edi
c00045bc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045c0:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045c4:	e8 c1 d4 ff ff       	call   c0001a8a <st_qword>
c00045c9:	03 34 24             	add    esi,DWORD PTR [esp]
c00045cc:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045d0:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045d4:	89 f2                	mov    edx,esi
c00045d6:	89 f9                	mov    ecx,edi
c00045d8:	83 c2 ff             	add    edx,0xffffffff
c00045db:	83 d1 ff             	adc    ecx,0xffffffff
c00045de:	e8 a7 d4 ff ff       	call   c0001a8a <st_qword>
c00045e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00045e7:	83 e8 80             	sub    eax,0xffffff80
c00045ea:	89 c5                	mov    ebp,eax
c00045ec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045f0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045f6:	75 6b                	jne    c0004663 <create_partition+0x282>
c00045f8:	45                   	inc    ebp
c00045f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045fd:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004602:	e8 39 da ff ff       	call   c0002040 <crc32>
c0004607:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000460d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004611:	75 e5                	jne    c00045f8 <create_partition+0x217>
c0004613:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004617:	31 d2                	xor    edx,edx
c0004619:	83 ec 0c             	sub    esp,0xc
c000461c:	c1 ed 09             	shr    ebp,0x9
c000461f:	6a 01                	push   0x1
c0004621:	8d 45 02             	lea    eax,[ebp+0x2]
c0004624:	52                   	push   edx
c0004625:	50                   	push   eax
c0004626:	53                   	push   ebx
c0004627:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000462b:	e8 ac d3 ff ff       	call   c00019dc <disk_write>
c0004630:	83 c4 20             	add    esp,0x20
c0004633:	85 c0                	test   eax,eax
c0004635:	0f 85 d7 fd ff ff    	jne    c0004412 <create_partition+0x31>
c000463b:	83 ec 0c             	sub    esp,0xc
c000463e:	31 d2                	xor    edx,edx
c0004640:	6a 01                	push   0x1
c0004642:	89 e8                	mov    eax,ebp
c0004644:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004648:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000464c:	52                   	push   edx
c000464d:	50                   	push   eax
c000464e:	53                   	push   ebx
c000464f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004653:	e8 84 d3 ff ff       	call   c00019dc <disk_write>
c0004658:	83 c4 20             	add    esp,0x20
c000465b:	85 c0                	test   eax,eax
c000465d:	0f 85 af fd ff ff    	jne    c0004412 <create_partition+0x31>
c0004663:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004667:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000466b:	3d 00 40 00 00       	cmp    eax,0x4000
c0004670:	74 0d                	je     c000467f <create_partition+0x29e>
c0004672:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004676:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000467a:	e9 12 fe ff ff       	jmp    c0004491 <create_partition+0xb0>
c000467f:	31 d2                	xor    edx,edx
c0004681:	b9 00 02 00 00       	mov    ecx,0x200
c0004686:	89 d8                	mov    eax,ebx
c0004688:	8d 6b 20             	lea    ebp,[ebx+0x20]
c000468b:	e8 15 d4 ff ff       	call   c0001aa5 <mem_set>
c0004690:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004693:	b9 10 00 00 00       	mov    ecx,0x10
c0004698:	ba 80 7e 02 c0       	mov    edx,0xc0027e80
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 ec d3 ff ff       	call   c0001a90 <mem_cpy>
c00046a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046a8:	8d 43 58             	lea    eax,[ebx+0x58]
c00046ab:	f7 d2                	not    edx
c00046ad:	e8 d5 d3 ff ff       	call   c0001a87 <st_dword>
c00046b2:	8d 43 18             	lea    eax,[ebx+0x18]
c00046b5:	31 c9                	xor    ecx,ecx
c00046b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00046ba:	ba 01 00 00 00       	mov    edx,0x1
c00046bf:	e8 c6 d3 ff ff       	call   c0001a8a <st_qword>
c00046c4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046c8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046cc:	83 c2 ff             	add    edx,0xffffffff
c00046cf:	89 e8                	mov    eax,ebp
c00046d1:	83 d1 ff             	adc    ecx,0xffffffff
c00046d4:	e8 b1 d3 ff ff       	call   c0001a8a <st_qword>
c00046d9:	31 c9                	xor    ecx,ecx
c00046db:	8d 43 28             	lea    eax,[ebx+0x28]
c00046de:	ba 22 00 00 00       	mov    edx,0x22
c00046e3:	e8 a2 d3 ff ff       	call   c0001a8a <st_qword>
c00046e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00046ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00046f0:	83 c2 de             	add    edx,0xffffffde
c00046f3:	8d 43 30             	lea    eax,[ebx+0x30]
c00046f6:	83 d1 ff             	adc    ecx,0xffffffff
c00046f9:	31 f6                	xor    esi,esi
c00046fb:	e8 8a d3 ff ff       	call   c0001a8a <st_qword>
c0004700:	8d 43 54             	lea    eax,[ebx+0x54]
c0004703:	ba 80 00 00 00       	mov    edx,0x80
c0004708:	e8 7a d3 ff ff       	call   c0001a87 <st_dword>
c000470d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004710:	ba 80 00 00 00       	mov    edx,0x80
c0004715:	e8 6d d3 ff ff       	call   c0001a87 <st_dword>
c000471a:	ba 02 00 00 00       	mov    edx,0x2
c000471f:	89 f8                	mov    eax,edi
c0004721:	e8 61 d3 ff ff       	call   c0001a87 <st_dword>
c0004726:	8d 53 38             	lea    edx,[ebx+0x38]
c0004729:	b9 10 00 00 00       	mov    ecx,0x10
c000472e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004732:	e8 ad d9 ff ff       	call   c00020e4 <make_rand>
c0004737:	83 c8 ff             	or     eax,0xffffffff
c000473a:	46                   	inc    esi
c000473b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004740:	e8 fb d8 ff ff       	call   c0002040 <crc32>
c0004745:	83 fe 5c             	cmp    esi,0x5c
c0004748:	75 f0                	jne    c000473a <create_partition+0x359>
c000474a:	f7 d0                	not    eax
c000474c:	8d 73 10             	lea    esi,[ebx+0x10]
c000474f:	89 c2                	mov    edx,eax
c0004751:	89 f0                	mov    eax,esi
c0004753:	e8 2f d3 ff ff       	call   c0001a87 <st_dword>
c0004758:	83 ec 0c             	sub    esp,0xc
c000475b:	6a 01                	push   0x1
c000475d:	6a 00                	push   0x0
c000475f:	6a 01                	push   0x1
c0004761:	53                   	push   ebx
c0004762:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004766:	e8 71 d2 ff ff       	call   c00019dc <disk_write>
c000476b:	83 c4 20             	add    esp,0x20
c000476e:	85 c0                	test   eax,eax
c0004770:	0f 85 9c fc ff ff    	jne    c0004412 <create_partition+0x31>
c0004776:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000477a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000477e:	83 c2 ff             	add    edx,0xffffffff
c0004781:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004784:	83 d1 ff             	adc    ecx,0xffffffff
c0004787:	e8 fe d2 ff ff       	call   c0001a8a <st_qword>
c000478c:	ba 01 00 00 00       	mov    edx,0x1
c0004791:	31 c9                	xor    ecx,ecx
c0004793:	89 e8                	mov    eax,ebp
c0004795:	e8 f0 d2 ff ff       	call   c0001a8a <st_qword>
c000479a:	89 f8                	mov    eax,edi
c000479c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047a0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a4:	31 ff                	xor    edi,edi
c00047a6:	e8 df d2 ff ff       	call   c0001a8a <st_qword>
c00047ab:	89 f0                	mov    eax,esi
c00047ad:	31 d2                	xor    edx,edx
c00047af:	e8 d3 d2 ff ff       	call   c0001a87 <st_dword>
c00047b4:	83 c8 ff             	or     eax,0xffffffff
c00047b7:	47                   	inc    edi
c00047b8:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047bd:	e8 7e d8 ff ff       	call   c0002040 <crc32>
c00047c2:	83 ff 5c             	cmp    edi,0x5c
c00047c5:	75 f0                	jne    c00047b7 <create_partition+0x3d6>
c00047c7:	f7 d0                	not    eax
c00047c9:	89 c2                	mov    edx,eax
c00047cb:	89 f0                	mov    eax,esi
c00047cd:	e8 b5 d2 ff ff       	call   c0001a87 <st_dword>
c00047d2:	83 ec 0c             	sub    esp,0xc
c00047d5:	6a 01                	push   0x1
c00047d7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047db:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047df:	83 c0 ff             	add    eax,0xffffffff
c00047e2:	83 d2 ff             	adc    edx,0xffffffff
c00047e5:	52                   	push   edx
c00047e6:	50                   	push   eax
c00047e7:	53                   	push   ebx
c00047e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047ec:	e8 eb d1 ff ff       	call   c00019dc <disk_write>
c00047f1:	83 c4 20             	add    esp,0x20
c00047f4:	85 c0                	test   eax,eax
c00047f6:	0f 85 16 fc ff ff    	jne    c0004412 <create_partition+0x31>
c00047fc:	31 d2                	xor    edx,edx
c00047fe:	89 d8                	mov    eax,ebx
c0004800:	b9 00 02 00 00       	mov    ecx,0x200
c0004805:	e8 9b d2 ff ff       	call   c0001aa5 <mem_set>
c000480a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004810:	b9 10 00 00 00       	mov    ecx,0x10
c0004815:	ba 90 7e 02 c0       	mov    edx,0xc0027e90
c000481a:	e8 71 d2 ff ff       	call   c0001a90 <mem_cpy>
c000481f:	e9 21 01 00 00       	jmp    c0004945 <create_partition+0x564>
c0004824:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004828:	b9 05 00 00 00       	mov    ecx,0x5
c000482d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004830:	bf 08 00 00 00       	mov    edi,0x8
c0004835:	89 f8                	mov    eax,edi
c0004837:	31 d2                	xor    edx,edx
c0004839:	0f b6 f0             	movzx  esi,al
c000483c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000483f:	f7 f6                	div    esi
c0004841:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004846:	76 0a                	jbe    c0004852 <create_partition+0x471>
c0004848:	d1 e7                	shl    edi,1
c000484a:	49                   	dec    ecx
c000484b:	75 e8                	jne    c0004835 <create_partition+0x454>
c000484d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004852:	b9 00 02 00 00       	mov    ecx,0x200
c0004857:	31 d2                	xor    edx,edx
c0004859:	89 d8                	mov    eax,ebx
c000485b:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004861:	e8 3f d2 ff ff       	call   c0001aa5 <mem_set>
c0004866:	b9 64 00 00 00       	mov    ecx,0x64
c000486b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000486e:	31 d2                	xor    edx,edx
c0004870:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004878:	f7 f1                	div    ecx
c000487a:	b9 3f 00 00 00       	mov    ecx,0x3f
c000487f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004883:	89 f8                	mov    eax,edi
c0004885:	0f b6 c0             	movzx  eax,al
c0004888:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000488c:	e9 80 00 00 00       	jmp    c0004911 <create_partition+0x530>
c0004891:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004894:	29 cf                	sub    edi,ecx
c0004896:	89 ca                	mov    edx,ecx
c0004898:	89 f0                	mov    eax,esi
c000489a:	bd 3f 00 00 00       	mov    ebp,0x3f
c000489f:	e8 e3 d1 ff ff       	call   c0001a87 <st_dword>
c00048a4:	8d 46 04             	lea    eax,[esi+0x4]
c00048a7:	89 fa                	mov    edx,edi
c00048a9:	83 c6 10             	add    esi,0x10
c00048ac:	e8 d6 d1 ff ff       	call   c0001a87 <st_dword>
c00048b1:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048b5:	31 d2                	xor    edx,edx
c00048b7:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048ba:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048be:	89 c8                	mov    eax,ecx
c00048c0:	01 f9                	add    ecx,edi
c00048c2:	f7 f5                	div    ebp
c00048c4:	89 d5                	mov    ebp,edx
c00048c6:	31 d2                	xor    edx,edx
c00048c8:	45                   	inc    ebp
c00048c9:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048cd:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c00048d0:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c00048d3:	89 c2                	mov    edx,eax
c00048d5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00048d8:	c1 ea 02             	shr    edx,0x2
c00048db:	83 e2 c0             	and    edx,0xffffffc0
c00048de:	09 ea                	or     edx,ebp
c00048e0:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048e5:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c00048e8:	31 d2                	xor    edx,edx
c00048ea:	f7 f5                	div    ebp
c00048ec:	89 d7                	mov    edi,edx
c00048ee:	31 d2                	xor    edx,edx
c00048f0:	47                   	inc    edi
c00048f1:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048f5:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c00048f8:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c00048fb:	89 c5                	mov    ebp,eax
c00048fd:	c1 ed 02             	shr    ebp,0x2
c0004900:	83 e5 c0             	and    ebp,0xffffffc0
c0004903:	09 ef                	or     edi,ebp
c0004905:	89 fa                	mov    edx,edi
c0004907:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c000490a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000490f:	74 34                	je     c0004945 <create_partition+0x564>
c0004911:	85 c9                	test   ecx,ecx
c0004913:	74 30                	je     c0004945 <create_partition+0x564>
c0004915:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004918:	76 2b                	jbe    c0004945 <create_partition+0x564>
c000491a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000491e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004922:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004925:	83 ff 64             	cmp    edi,0x64
c0004928:	76 4b                	jbe    c0004975 <create_partition+0x594>
c000492a:	89 f8                	mov    eax,edi
c000492c:	01 c8                	add    eax,ecx
c000492e:	0f 82 5d ff ff ff    	jb     c0004891 <create_partition+0x4b0>
c0004934:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004937:	0f 87 54 ff ff ff    	ja     c0004891 <create_partition+0x4b0>
c000493d:	85 ff                	test   edi,edi
c000493f:	0f 85 51 ff ff ff    	jne    c0004896 <create_partition+0x4b5>
c0004945:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000494b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004950:	e8 2e d1 ff ff       	call   c0001a83 <st_word>
c0004955:	83 ec 0c             	sub    esp,0xc
c0004958:	6a 01                	push   0x1
c000495a:	6a 00                	push   0x0
c000495c:	6a 00                	push   0x0
c000495e:	53                   	push   ebx
c000495f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004963:	e8 74 d0 ff ff       	call   c00019dc <disk_write>
c0004968:	83 c4 20             	add    esp,0x20
c000496b:	85 c0                	test   eax,eax
c000496d:	0f 95 c0             	setne  al
c0004970:	0f b6 c0             	movzx  eax,al
c0004973:	eb 0e                	jmp    c0004983 <create_partition+0x5a2>
c0004975:	74 07                	je     c000497e <create_partition+0x59d>
c0004977:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c000497c:	eb ac                	jmp    c000492a <create_partition+0x549>
c000497e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004981:	eb a7                	jmp    c000492a <create_partition+0x549>
c0004983:	83 c4 5c             	add    esp,0x5c
c0004986:	5b                   	pop    ebx
c0004987:	5e                   	pop    esi
c0004988:	5f                   	pop    edi
c0004989:	5d                   	pop    ebp
c000498a:	c3                   	ret    

c000498b <get_fileinfo>:
c000498b:	55                   	push   ebp
c000498c:	57                   	push   edi
c000498d:	56                   	push   esi
c000498e:	53                   	push   ebx
c000498f:	83 ec 1c             	sub    esp,0x1c
c0004992:	8b 30                	mov    esi,DWORD PTR [eax]
c0004994:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004998:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000499c:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000499f:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049a2:	0f 84 dc 01 00 00    	je     c0004b84 <get_fileinfo+0x1f9>
c00049a8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049ab:	75 0f                	jne    c00049bc <get_fileinfo+0x31>
c00049ad:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049b0:	83 c4 1c             	add    esp,0x1c
c00049b3:	5b                   	pop    ebx
c00049b4:	5e                   	pop    esi
c00049b5:	5f                   	pop    edi
c00049b6:	5d                   	pop    ebp
c00049b7:	e9 58 d5 ff ff       	jmp    c0001f14 <get_xfileinfo>
c00049bc:	89 d3                	mov    ebx,edx
c00049be:	89 c6                	mov    esi,eax
c00049c0:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049c4:	74 6a                	je     c0004a30 <get_fileinfo+0xa5>
c00049c6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049ce:	31 ed                	xor    ebp,ebp
c00049d0:	31 ff                	xor    edi,edi
c00049d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00049dd:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c00049e1:	66 85 d2             	test   dx,dx
c00049e4:	74 3e                	je     c0004a24 <get_fileinfo+0x99>
c00049e6:	66 85 ed             	test   bp,bp
c00049e9:	75 0c                	jne    c00049f7 <get_fileinfo+0x6c>
c00049eb:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c00049f1:	66 3d ff 07          	cmp    ax,0x7ff
c00049f5:	76 22                	jbe    c0004a19 <get_fileinfo+0x8e>
c00049f7:	b9 ff 00 00 00       	mov    ecx,0xff
c00049fc:	89 e8                	mov    eax,ebp
c00049fe:	29 f9                	sub    ecx,edi
c0004a00:	c1 e0 10             	shl    eax,0x10
c0004a03:	09 d0                	or     eax,edx
c0004a05:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a09:	e8 a3 d1 ff ff       	call   c0001bb1 <put_utf>
c0004a0e:	84 c0                	test   al,al
c0004a10:	74 10                	je     c0004a22 <get_fileinfo+0x97>
c0004a12:	0f b6 c0             	movzx  eax,al
c0004a15:	31 d2                	xor    edx,edx
c0004a17:	01 c7                	add    edi,eax
c0004a19:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a1e:	89 d5                	mov    ebp,edx
c0004a20:	eb b0                	jmp    c00049d2 <get_fileinfo+0x47>
c0004a22:	31 ff                	xor    edi,edi
c0004a24:	66 85 ed             	test   bp,bp
c0004a27:	74 02                	je     c0004a2b <get_fileinfo+0xa0>
c0004a29:	31 ff                	xor    edi,edi
c0004a2b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a30:	31 ff                	xor    edi,edi
c0004a32:	31 c9                	xor    ecx,ecx
c0004a34:	83 f9 0a             	cmp    ecx,0xa
c0004a37:	0f 87 ad 00 00 00    	ja     c0004aea <get_fileinfo+0x15f>
c0004a3d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a40:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a43:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a47:	66 83 fa 20          	cmp    dx,0x20
c0004a4b:	0f 84 92 00 00 00    	je     c0004ae3 <get_fileinfo+0x158>
c0004a51:	66 83 fa 05          	cmp    dx,0x5
c0004a55:	75 05                	jne    c0004a5c <get_fileinfo+0xd1>
c0004a57:	ba e5 00 00 00       	mov    edx,0xe5
c0004a5c:	83 ff 0b             	cmp    edi,0xb
c0004a5f:	77 0b                	ja     c0004a6c <get_fileinfo+0xe1>
c0004a61:	83 fd 09             	cmp    ebp,0x9
c0004a64:	75 06                	jne    c0004a6c <get_fileinfo+0xe1>
c0004a66:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a6b:	47                   	inc    edi
c0004a6c:	0f b7 c2             	movzx  eax,dx
c0004a6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a73:	e8 6d d0 ff ff       	call   c0001ae5 <dbc_1st>
c0004a78:	85 c0                	test   eax,eax
c0004a7a:	74 2f                	je     c0004aab <get_fileinfo+0x120>
c0004a7c:	83 fd 08             	cmp    ebp,0x8
c0004a7f:	74 2a                	je     c0004aab <get_fileinfo+0x120>
c0004a81:	83 fd 0b             	cmp    ebp,0xb
c0004a84:	74 25                	je     c0004aab <get_fileinfo+0x120>
c0004a86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a89:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a8d:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a91:	e8 52 d0 ff ff       	call   c0001ae8 <dbc_2nd>
c0004a96:	85 c0                	test   eax,eax
c0004a98:	74 11                	je     c0004aab <get_fileinfo+0x120>
c0004a9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a9e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004aa3:	c1 e2 08             	shl    edx,0x8
c0004aa6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004aa9:	09 c2                	or     edx,eax
c0004aab:	0f b7 d2             	movzx  edx,dx
c0004aae:	50                   	push   eax
c0004aaf:	50                   	push   eax
c0004ab0:	68 b5 01 00 00       	push   0x1b5
c0004ab5:	52                   	push   edx
c0004ab6:	e8 46 38 00 00       	call   c0008301 <ff_oem2uni>
c0004abb:	83 c4 10             	add    esp,0x10
c0004abe:	66 85 c0             	test   ax,ax
c0004ac1:	75 04                	jne    c0004ac7 <get_fileinfo+0x13c>
c0004ac3:	31 ff                	xor    edi,edi
c0004ac5:	eb 23                	jmp    c0004aea <get_fileinfo+0x15f>
c0004ac7:	b9 0c 00 00 00       	mov    ecx,0xc
c0004acc:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ad0:	29 f9                	sub    ecx,edi
c0004ad2:	0f b7 c0             	movzx  eax,ax
c0004ad5:	e8 d7 d0 ff ff       	call   c0001bb1 <put_utf>
c0004ada:	84 c0                	test   al,al
c0004adc:	74 e5                	je     c0004ac3 <get_fileinfo+0x138>
c0004ade:	0f b6 c0             	movzx  eax,al
c0004ae1:	01 c7                	add    edi,eax
c0004ae3:	89 e9                	mov    ecx,ebp
c0004ae5:	e9 4a ff ff ff       	jmp    c0004a34 <get_fileinfo+0xa9>
c0004aea:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004aef:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004af3:	75 54                	jne    c0004b49 <get_fileinfo+0x1be>
c0004af5:	85 ff                	test   edi,edi
c0004af7:	75 0b                	jne    c0004b04 <get_fileinfo+0x179>
c0004af9:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004afd:	ba 01 00 00 00       	mov    edx,0x1
c0004b02:	eb 33                	jmp    c0004b37 <get_fileinfo+0x1ac>
c0004b04:	b1 08                	mov    cl,0x8
c0004b06:	31 d2                	xor    edx,edx
c0004b08:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b0e:	84 c0                	test   al,al
c0004b10:	74 25                	je     c0004b37 <get_fileinfo+0x1ac>
c0004b12:	66 83 f8 2e          	cmp    ax,0x2e
c0004b16:	74 16                	je     c0004b2e <get_fileinfo+0x1a3>
c0004b18:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b1b:	66 83 ff 19          	cmp    di,0x19
c0004b1f:	77 0f                	ja     c0004b30 <get_fileinfo+0x1a5>
c0004b21:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b24:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b27:	74 07                	je     c0004b30 <get_fileinfo+0x1a5>
c0004b29:	83 c0 20             	add    eax,0x20
c0004b2c:	eb 02                	jmp    c0004b30 <get_fileinfo+0x1a5>
c0004b2e:	b1 10                	mov    cl,0x10
c0004b30:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b34:	42                   	inc    edx
c0004b35:	eb d1                	jmp    c0004b08 <get_fileinfo+0x17d>
c0004b37:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b3c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b3f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b43:	75 04                	jne    c0004b49 <get_fileinfo+0x1be>
c0004b45:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b49:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b4c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b4f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b55:	83 c0 1c             	add    eax,0x1c
c0004b58:	e8 c1 ce ff ff       	call   c0001a1e <ld_dword>
c0004b5d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b64:	89 03                	mov    DWORD PTR [ebx],eax
c0004b66:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b69:	83 c0 16             	add    eax,0x16
c0004b6c:	e8 a0 ce ff ff       	call   c0001a11 <ld_word>
c0004b71:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b75:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b78:	83 c0 18             	add    eax,0x18
c0004b7b:	e8 91 ce ff ff       	call   c0001a11 <ld_word>
c0004b80:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b84:	83 c4 1c             	add    esp,0x1c
c0004b87:	5b                   	pop    ebx
c0004b88:	5e                   	pop    esi
c0004b89:	5f                   	pop    edi
c0004b8a:	5d                   	pop    ebp
c0004b8b:	c3                   	ret    

c0004b8c <ld_clust.isra.0>:
c0004b8c:	56                   	push   esi
c0004b8d:	89 c6                	mov    esi,eax
c0004b8f:	53                   	push   ebx
c0004b90:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b93:	89 d3                	mov    ebx,edx
c0004b95:	e8 77 ce ff ff       	call   c0001a11 <ld_word>
c0004b9a:	0f b7 c8             	movzx  ecx,ax
c0004b9d:	89 f0                	mov    eax,esi
c0004b9f:	3c 03                	cmp    al,0x3
c0004ba1:	75 0d                	jne    c0004bb0 <ld_clust.isra.0+0x24>
c0004ba3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004ba6:	e8 66 ce ff ff       	call   c0001a11 <ld_word>
c0004bab:	c1 e0 10             	shl    eax,0x10
c0004bae:	09 c1                	or     ecx,eax
c0004bb0:	89 c8                	mov    eax,ecx
c0004bb2:	5b                   	pop    ebx
c0004bb3:	5e                   	pop    esi
c0004bb4:	c3                   	ret    

c0004bb5 <st_clust.isra.1>:
c0004bb5:	56                   	push   esi
c0004bb6:	89 c6                	mov    esi,eax
c0004bb8:	53                   	push   ebx
c0004bb9:	89 d3                	mov    ebx,edx
c0004bbb:	0f b7 d1             	movzx  edx,cx
c0004bbe:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bc1:	e8 bd ce ff ff       	call   c0001a83 <st_word>
c0004bc6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004bc9:	75 0f                	jne    c0004bda <st_clust.isra.1+0x25>
c0004bcb:	c1 e9 10             	shr    ecx,0x10
c0004bce:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bd1:	89 ca                	mov    edx,ecx
c0004bd3:	5b                   	pop    ebx
c0004bd4:	5e                   	pop    esi
c0004bd5:	e9 a9 ce ff ff       	jmp    c0001a83 <st_word>
c0004bda:	5b                   	pop    ebx
c0004bdb:	5e                   	pop    esi
c0004bdc:	c3                   	ret    

c0004bdd <init_alloc_info.isra.2>:
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	89 c6                	mov    esi,eax
c0004be1:	89 d3                	mov    ebx,edx
c0004be3:	51                   	push   ecx
c0004be4:	8b 00                	mov    eax,DWORD PTR [eax]
c0004be6:	83 c0 34             	add    eax,0x34
c0004be9:	e8 30 ce ff ff       	call   c0001a1e <ld_dword>
c0004bee:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004bf1:	8b 06                	mov    eax,DWORD PTR [esi]
c0004bf3:	83 c0 38             	add    eax,0x38
c0004bf6:	e8 3b ce ff ff       	call   c0001a36 <ld_qword>
c0004bfb:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004bfe:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c01:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c03:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c06:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c0d:	83 e0 02             	and    eax,0x2
c0004c10:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c13:	5b                   	pop    ebx
c0004c14:	5b                   	pop    ebx
c0004c15:	5e                   	pop    esi
c0004c16:	c3                   	ret    

c0004c17 <follow_path>:
c0004c17:	56                   	push   esi
c0004c18:	53                   	push   ebx
c0004c19:	89 c3                	mov    ebx,eax
c0004c1b:	83 ec 14             	sub    esp,0x14
c0004c1e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c22:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c28:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c2a:	80 fa 5c             	cmp    dl,0x5c
c0004c2d:	75 07                	jne    c0004c36 <follow_path+0x1f>
c0004c2f:	40                   	inc    eax
c0004c30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c34:	eb ee                	jmp    c0004c24 <follow_path+0xd>
c0004c36:	80 fa 2f             	cmp    dl,0x2f
c0004c39:	74 f4                	je     c0004c2f <follow_path+0x18>
c0004c3b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c42:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c49:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c4c:	77 52                	ja     c0004ca0 <follow_path+0x89>
c0004c4e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c52:	31 d2                	xor    edx,edx
c0004c54:	89 d8                	mov    eax,ebx
c0004c56:	e8 12 e3 ff ff       	call   c0002f6d <dir_sdi>
c0004c5b:	eb 7c                	jmp    c0004cd9 <follow_path+0xc2>
c0004c5d:	89 d8                	mov    eax,ebx
c0004c5f:	e8 6e f2 ff ff       	call   c0003ed2 <dir_find>
c0004c64:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c67:	85 c0                	test   eax,eax
c0004c69:	75 46                	jne    c0004cb1 <follow_path+0x9a>
c0004c6b:	80 e2 04             	and    dl,0x4
c0004c6e:	75 69                	jne    c0004cd9 <follow_path+0xc2>
c0004c70:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c74:	74 5e                	je     c0004cd4 <follow_path+0xbd>
c0004c76:	8a 06                	mov    al,BYTE PTR [esi]
c0004c78:	3c 04                	cmp    al,0x4
c0004c7a:	75 41                	jne    c0004cbd <follow_path+0xa6>
c0004c7c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004c7f:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c83:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c86:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c89:	30 c0                	xor    al,al
c0004c8b:	09 d0                	or     eax,edx
c0004c8d:	89 da                	mov    edx,ebx
c0004c8f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c92:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c95:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c98:	8d 46 10             	lea    eax,[esi+0x10]
c0004c9b:	e8 3d ff ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004ca0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ca4:	89 d8                	mov    eax,ebx
c0004ca6:	e8 a9 ed ff ff       	call   c0003a54 <create_name>
c0004cab:	85 c0                	test   eax,eax
c0004cad:	74 ae                	je     c0004c5d <follow_path+0x46>
c0004caf:	eb 28                	jmp    c0004cd9 <follow_path+0xc2>
c0004cb1:	83 f8 04             	cmp    eax,0x4
c0004cb4:	75 23                	jne    c0004cd9 <follow_path+0xc2>
c0004cb6:	80 e2 04             	and    dl,0x4
c0004cb9:	74 19                	je     c0004cd4 <follow_path+0xbd>
c0004cbb:	eb 1c                	jmp    c0004cd9 <follow_path+0xc2>
c0004cbd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cc0:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cc6:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004cca:	e8 bd fe ff ff       	call   c0004b8c <ld_clust.isra.0>
c0004ccf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cd2:	eb cc                	jmp    c0004ca0 <follow_path+0x89>
c0004cd4:	b8 05 00 00 00       	mov    eax,0x5
c0004cd9:	83 c4 14             	add    esp,0x14
c0004cdc:	5b                   	pop    ebx
c0004cdd:	5e                   	pop    esi
c0004cde:	c3                   	ret    

c0004cdf <f_mount>:
c0004cdf:	53                   	push   ebx
c0004ce0:	83 ec 18             	sub    esp,0x18
c0004ce3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004ce7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004ceb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004cf3:	e8 fb d2 ff ff       	call   c0001ff3 <get_ldnumber>
c0004cf8:	89 c2                	mov    edx,eax
c0004cfa:	b8 0b 00 00 00       	mov    eax,0xb
c0004cff:	85 d2                	test   edx,edx
c0004d01:	78 39                	js     c0004d3c <f_mount+0x5d>
c0004d03:	8b 04 95 80 cb 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3480]
c0004d0a:	85 c0                	test   eax,eax
c0004d0c:	74 03                	je     c0004d11 <f_mount+0x32>
c0004d0e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d15:	85 c0                	test   eax,eax
c0004d17:	74 03                	je     c0004d1c <f_mount+0x3d>
c0004d19:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d20:	89 04 95 80 cb 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3480],eax
c0004d27:	31 c0                	xor    eax,eax
c0004d29:	84 db                	test   bl,bl
c0004d2b:	74 0f                	je     c0004d3c <f_mount+0x5d>
c0004d2d:	31 c9                	xor    ecx,ecx
c0004d2f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d33:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d37:	e8 65 d7 ff ff       	call   c00024a1 <mount_volume>
c0004d3c:	83 c4 18             	add    esp,0x18
c0004d3f:	5b                   	pop    ebx
c0004d40:	c3                   	ret    

c0004d41 <f_open>:
c0004d41:	55                   	push   ebp
c0004d42:	bd 09 00 00 00       	mov    ebp,0x9
c0004d47:	57                   	push   edi
c0004d48:	56                   	push   esi
c0004d49:	53                   	push   ebx
c0004d4a:	83 ec 7c             	sub    esp,0x7c
c0004d4d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d54:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d5b:	85 db                	test   ebx,ebx
c0004d5d:	0f 84 10 04 00 00    	je     c0005173 <f_open+0x432>
c0004d63:	89 fe                	mov    esi,edi
c0004d65:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d69:	83 e6 3f             	and    esi,0x3f
c0004d6c:	89 f0                	mov    eax,esi
c0004d6e:	0f b6 c8             	movzx  ecx,al
c0004d71:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d78:	e8 24 d7 ff ff       	call   c00024a1 <mount_volume>
c0004d7d:	89 c5                	mov    ebp,eax
c0004d7f:	85 c0                	test   eax,eax
c0004d81:	0f 85 e6 03 00 00    	jne    c000516d <f_open+0x42c>
c0004d87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d8b:	bd 11 00 00 00       	mov    ebp,0x11
c0004d90:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d94:	83 ec 0c             	sub    esp,0xc
c0004d97:	68 60 04 00 00       	push   0x460
c0004d9c:	e8 a3 34 00 00       	call   c0008244 <ff_memalloc>
c0004da1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004da5:	83 c4 10             	add    esp,0x10
c0004da8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004dad:	0f 84 c0 03 00 00    	je     c0005173 <f_open+0x432>
c0004db3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004db7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dbb:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004dc1:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004dc4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004dc7:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dce:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004dd2:	e8 40 fe ff ff       	call   c0004c17 <follow_path>
c0004dd7:	89 c5                	mov    ebp,eax
c0004dd9:	85 c0                	test   eax,eax
c0004ddb:	75 0c                	jne    c0004de9 <f_open+0xa8>
c0004ddd:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004de2:	79 05                	jns    c0004de9 <f_open+0xa8>
c0004de4:	bd 06 00 00 00       	mov    ebp,0x6
c0004de9:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004def:	0f 84 84 01 00 00    	je     c0004f79 <f_open+0x238>
c0004df5:	85 ed                	test   ebp,ebp
c0004df7:	74 20                	je     c0004e19 <f_open+0xd8>
c0004df9:	83 fd 04             	cmp    ebp,0x4
c0004dfc:	0f 85 58 03 00 00    	jne    c000515a <f_open+0x419>
c0004e02:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e06:	83 ce 08             	or     esi,0x8
c0004e09:	e8 8a f2 ff ff       	call   c0004098 <dir_register>
c0004e0e:	89 c5                	mov    ebp,eax
c0004e10:	85 c0                	test   eax,eax
c0004e12:	74 2f                	je     c0004e43 <f_open+0x102>
c0004e14:	e9 41 03 00 00       	jmp    c000515a <f_open+0x419>
c0004e19:	bd 07 00 00 00       	mov    ebp,0x7
c0004e1e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e23:	0f 85 31 03 00 00    	jne    c000515a <f_open+0x419>
c0004e29:	bd 08 00 00 00       	mov    ebp,0x8
c0004e2e:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e34:	0f 85 20 03 00 00    	jne    c000515a <f_open+0x419>
c0004e3a:	83 e7 08             	and    edi,0x8
c0004e3d:	0f 84 65 01 00 00    	je     c0004fa8 <f_open+0x267>
c0004e43:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e47:	8a 02                	mov    al,BYTE PTR [edx]
c0004e49:	3c 04                	cmp    al,0x4
c0004e4b:	0f 85 97 00 00 00    	jne    c0004ee8 <f_open+0x1a7>
c0004e51:	8d 42 10             	lea    eax,[edx+0x10]
c0004e54:	89 13                	mov    DWORD PTR [ebx],edx
c0004e56:	89 da                	mov    edx,ebx
c0004e58:	e8 80 fd ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004e5d:	31 d2                	xor    edx,edx
c0004e5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e63:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e68:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e6b:	83 c0 02             	add    eax,0x2
c0004e6e:	e8 32 cc ff ff       	call   c0001aa5 <mem_set>
c0004e73:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004e78:	31 d2                	xor    edx,edx
c0004e7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e81:	83 c0 26             	add    eax,0x26
c0004e84:	e8 1c cc ff ff       	call   c0001aa5 <mem_set>
c0004e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e8d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e90:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e94:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e99:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e9c:	83 c0 08             	add    eax,0x8
c0004e9f:	e8 e3 cb ff ff       	call   c0001a87 <st_dword>
c0004ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eab:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004eaf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eb3:	e8 b7 ea ff ff       	call   c000396f <store_xdir>
c0004eb8:	89 c5                	mov    ebp,eax
c0004eba:	85 c0                	test   eax,eax
c0004ebc:	0f 85 98 02 00 00    	jne    c000515a <f_open+0x419>
c0004ec2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004ec5:	85 d2                	test   edx,edx
c0004ec7:	0f 84 db 00 00 00    	je     c0004fa8 <f_open+0x267>
c0004ecd:	31 c9                	xor    ecx,ecx
c0004ecf:	89 d8                	mov    eax,ebx
c0004ed1:	e8 8e e3 ff ff       	call   c0003264 <remove_chain>
c0004ed6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004eda:	89 c5                	mov    ebp,eax
c0004edc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004edf:	48                   	dec    eax
c0004ee0:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004ee3:	e9 b8 00 00 00       	jmp    c0004fa0 <f_open+0x25f>
c0004ee8:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004eec:	89 ea                	mov    edx,ebp
c0004eee:	e8 99 fc ff ff       	call   c0004b8c <ld_clust.isra.0>
c0004ef3:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ef8:	89 c7                	mov    edi,eax
c0004efa:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004efd:	e8 85 cb ff ff       	call   c0001a87 <st_dword>
c0004f02:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f06:	31 c9                	xor    ecx,ecx
c0004f08:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f10:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f14:	e8 9c fc ff ff       	call   c0004bb5 <st_clust.isra.1>
c0004f19:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f1d:	31 d2                	xor    edx,edx
c0004f1f:	83 c0 1c             	add    eax,0x1c
c0004f22:	e8 60 cb ff ff       	call   c0001a87 <st_dword>
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 ff                	test   edi,edi
c0004f2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f31:	74 75                	je     c0004fa8 <f_open+0x267>
c0004f33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f37:	31 c9                	xor    ecx,ecx
c0004f39:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f3c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f47:	89 fa                	mov    edx,edi
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 12 e3 ff ff       	call   c0003264 <remove_chain>
c0004f52:	89 c5                	mov    ebp,eax
c0004f54:	85 c0                	test   eax,eax
c0004f56:	0f 85 fe 01 00 00    	jne    c000515a <f_open+0x419>
c0004f5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f68:	4f                   	dec    edi
c0004f69:	e8 81 d2 ff ff       	call   c00021ef <move_window>
c0004f6e:	89 c5                	mov    ebp,eax
c0004f70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f74:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f77:	eb 27                	jmp    c0004fa0 <f_open+0x25f>
c0004f79:	85 ed                	test   ebp,ebp
c0004f7b:	0f 85 d9 01 00 00    	jne    c000515a <f_open+0x419>
c0004f81:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f85:	bd 04 00 00 00       	mov    ebp,0x4
c0004f8a:	a8 10                	test   al,0x10
c0004f8c:	0f 85 c8 01 00 00    	jne    c000515a <f_open+0x419>
c0004f92:	83 e7 02             	and    edi,0x2
c0004f95:	74 11                	je     c0004fa8 <f_open+0x267>
c0004f97:	bd 07 00 00 00       	mov    ebp,0x7
c0004f9c:	a8 01                	test   al,0x1
c0004f9e:	eb 02                	jmp    c0004fa2 <f_open+0x261>
c0004fa0:	85 ed                	test   ebp,ebp
c0004fa2:	0f 85 b2 01 00 00    	jne    c000515a <f_open+0x419>
c0004fa8:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fae:	74 03                	je     c0004fb3 <f_open+0x272>
c0004fb0:	83 ce 40             	or     esi,0x40
c0004fb3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fb7:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fba:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004fbd:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fc0:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fc3:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fc7:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004fca:	8a 02                	mov    al,BYTE PTR [edx]
c0004fcc:	3c 04                	cmp    al,0x4
c0004fce:	75 2a                	jne    c0004ffa <f_open+0x2b9>
c0004fd0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004fd4:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004fd9:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004fdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004fe0:	30 c0                	xor    al,al
c0004fe2:	09 c8                	or     eax,ecx
c0004fe4:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004fe7:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004feb:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004fee:	8d 42 10             	lea    eax,[edx+0x10]
c0004ff1:	89 da                	mov    edx,ebx
c0004ff3:	e8 e5 fb ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004ff8:	eb 1c                	jmp    c0005016 <f_open+0x2d5>
c0004ffa:	89 fa                	mov    edx,edi
c0004ffc:	e8 8b fb ff ff       	call   c0004b8c <ld_clust.isra.0>
c0005001:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005004:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005007:	e8 12 ca ff ff       	call   c0001a1e <ld_dword>
c000500c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005013:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005016:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000501a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005021:	89 03                	mov    DWORD PTR [ebx],eax
c0005023:	31 d2                	xor    edx,edx
c0005025:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005029:	b9 00 02 00 00       	mov    ecx,0x200
c000502e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005032:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005036:	89 f0                	mov    eax,esi
c0005038:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000503f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005042:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005049:	8d 43 50             	lea    eax,[ebx+0x50]
c000504c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005053:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000505a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000505e:	e8 42 ca ff ff       	call   c0001aa5 <mem_set>
c0005063:	83 e6 20             	and    esi,0x20
c0005066:	75 07                	jne    c000506f <f_open+0x32e>
c0005068:	31 ed                	xor    ebp,ebp
c000506a:	e9 eb 00 00 00       	jmp    c000515a <f_open+0x419>
c000506f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005072:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005075:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005079:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000507d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005081:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005085:	74 e1                	je     c0005068 <f_open+0x327>
c0005087:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000508b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000508f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005092:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005095:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005099:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000509c:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050a0:	31 ff                	xor    edi,edi
c00050a2:	c1 e5 09             	shl    ebp,0x9
c00050a5:	89 ee                	mov    esi,ebp
c00050a7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050ab:	89 f8                	mov    eax,edi
c00050ad:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050b1:	73 22                	jae    c00050d5 <f_open+0x394>
c00050b3:	89 d8                	mov    eax,ebx
c00050b5:	e8 bd dc ff ff       	call   c0002d77 <get_fat>
c00050ba:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050be:	89 c2                	mov    edx,eax
c00050c0:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050c4:	83 f8 01             	cmp    eax,0x1
c00050c7:	76 10                	jbe    c00050d9 <f_open+0x398>
c00050c9:	83 f8 ff             	cmp    eax,0xffffffff
c00050cc:	75 d9                	jne    c00050a7 <f_open+0x366>
c00050ce:	bd 01 00 00 00       	mov    ebp,0x1
c00050d3:	eb 09                	jmp    c00050de <f_open+0x39d>
c00050d5:	31 ed                	xor    ebp,ebp
c00050d7:	eb 05                	jmp    c00050de <f_open+0x39d>
c00050d9:	bd 02 00 00 00       	mov    ebp,0x2
c00050de:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00050e1:	85 ed                	test   ebp,ebp
c00050e3:	75 75                	jne    c000515a <f_open+0x419>
c00050e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050e9:	25 ff 01 00 00       	and    eax,0x1ff
c00050ee:	0f 84 74 ff ff ff    	je     c0005068 <f_open+0x327>
c00050f4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00050f8:	bd 02 00 00 00       	mov    ebp,0x2
c00050fd:	89 c8                	mov    eax,ecx
c00050ff:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005103:	e8 a2 cb ff ff       	call   c0001caa <clst2sect>
c0005108:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000510c:	89 d7                	mov    edi,edx
c000510e:	09 c7                	or     edi,eax
c0005110:	74 48                	je     c000515a <f_open+0x419>
c0005112:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005116:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000511a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005122:	0f ac fe 09          	shrd   esi,edi,0x9
c0005126:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000512a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000512e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005131:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005135:	83 ec 0c             	sub    esp,0xc
c0005138:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000513b:	6a 01                	push   0x1
c000513d:	52                   	push   edx
c000513e:	50                   	push   eax
c000513f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005143:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005147:	50                   	push   eax
c0005148:	e8 79 c8 ff ff       	call   c00019c6 <disk_read>
c000514d:	83 c4 20             	add    esp,0x20
c0005150:	85 c0                	test   eax,eax
c0005152:	0f 95 c0             	setne  al
c0005155:	0f b6 c0             	movzx  eax,al
c0005158:	89 c5                	mov    ebp,eax
c000515a:	83 ec 0c             	sub    esp,0xc
c000515d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005161:	e8 f4 30 00 00       	call   c000825a <ff_memfree>
c0005166:	83 c4 10             	add    esp,0x10
c0005169:	85 ed                	test   ebp,ebp
c000516b:	74 06                	je     c0005173 <f_open+0x432>
c000516d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005173:	83 c4 7c             	add    esp,0x7c
c0005176:	89 e8                	mov    eax,ebp
c0005178:	5b                   	pop    ebx
c0005179:	5e                   	pop    esi
c000517a:	5f                   	pop    edi
c000517b:	5d                   	pop    ebp
c000517c:	c3                   	ret    

c000517d <f_read>:
c000517d:	55                   	push   ebp
c000517e:	57                   	push   edi
c000517f:	56                   	push   esi
c0005180:	53                   	push   ebx
c0005181:	83 ec 2c             	sub    esp,0x2c
c0005184:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005188:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000518c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005192:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005196:	89 d8                	mov    eax,ebx
c0005198:	e8 77 cf ff ff       	call   c0002114 <validate>
c000519d:	89 c5                	mov    ebp,eax
c000519f:	85 c0                	test   eax,eax
c00051a1:	0f 85 4c 02 00 00    	jne    c00053f3 <f_read+0x276>
c00051a7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051ab:	85 ed                	test   ebp,ebp
c00051ad:	0f 85 40 02 00 00    	jne    c00053f3 <f_read+0x276>
c00051b3:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051b7:	0f 84 31 02 00 00    	je     c00053ee <f_read+0x271>
c00051bd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051c0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051c3:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051c6:	bf 00 00 00 00       	mov    edi,0x0
c00051cb:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051ce:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051d2:	89 d1                	mov    ecx,edx
c00051d4:	19 f9                	sbb    ecx,edi
c00051d6:	0f 83 cf 00 00 00    	jae    c00052ab <f_read+0x12e>
c00051dc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00051e0:	e9 c6 00 00 00       	jmp    c00052ab <f_read+0x12e>
c00051e5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00051e8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00051eb:	89 d0                	mov    eax,edx
c00051ed:	25 ff 01 00 00       	and    eax,0x1ff
c00051f2:	0f 85 c9 01 00 00    	jne    c00053c1 <f_read+0x244>
c00051f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051fc:	89 d6                	mov    esi,edx
c00051fe:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005202:	89 cf                	mov    edi,ecx
c0005204:	48                   	dec    eax
c0005205:	0f ac fe 09          	shrd   esi,edi,0x9
c0005209:	21 f0                	and    eax,esi
c000520b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000520f:	0f 84 a6 00 00 00    	je     c00052bb <f_read+0x13e>
c0005215:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005219:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000521c:	89 c8                	mov    eax,ecx
c000521e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005221:	e8 84 ca ff ff       	call   c0001caa <clst2sect>
c0005226:	89 d7                	mov    edi,edx
c0005228:	09 c7                	or     edi,eax
c000522a:	0f 84 b4 00 00 00    	je     c00052e4 <f_read+0x167>
c0005230:	31 ff                	xor    edi,edi
c0005232:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005236:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005239:	01 c6                	add    esi,eax
c000523b:	11 d7                	adc    edi,edx
c000523d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005245:	0f 86 fd 00 00 00    	jbe    c0005348 <f_read+0x1cb>
c000524b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000524f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005253:	c1 e8 09             	shr    eax,0x9
c0005256:	89 04 24             	mov    DWORD PTR [esp],eax
c0005259:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000525d:	03 14 24             	add    edx,DWORD PTR [esp]
c0005260:	39 c2                	cmp    edx,eax
c0005262:	76 07                	jbe    c000526b <f_read+0xee>
c0005264:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005268:	89 04 24             	mov    DWORD PTR [esp],eax
c000526b:	83 ec 0c             	sub    esp,0xc
c000526e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005272:	57                   	push   edi
c0005273:	56                   	push   esi
c0005274:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005278:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000527c:	50                   	push   eax
c000527d:	e8 44 c7 ff ff       	call   c00019c6 <disk_read>
c0005282:	83 c4 20             	add    esp,0x20
c0005285:	85 c0                	test   eax,eax
c0005287:	75 6e                	jne    c00052f7 <f_read+0x17a>
c0005289:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000528d:	78 7e                	js     c000530d <f_read+0x190>
c000528f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005292:	c1 e6 09             	shl    esi,0x9
c0005295:	31 ff                	xor    edi,edi
c0005297:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000529b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000529f:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052a3:	01 30                	add    DWORD PTR [eax],esi
c00052a5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052a8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052ab:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052b0:	0f 85 2f ff ff ff    	jne    c00051e5 <f_read+0x68>
c00052b6:	e9 38 01 00 00       	jmp    c00053f3 <f_read+0x276>
c00052bb:	89 c8                	mov    eax,ecx
c00052bd:	09 d0                	or     eax,edx
c00052bf:	75 05                	jne    c00052c6 <f_read+0x149>
c00052c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052c4:	eb 19                	jmp    c00052df <f_read+0x162>
c00052c6:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052ca:	74 09                	je     c00052d5 <f_read+0x158>
c00052cc:	89 d8                	mov    eax,ebx
c00052ce:	e8 f8 c9 ff ff       	call   c0001ccb <clmt_clust>
c00052d3:	eb 0a                	jmp    c00052df <f_read+0x162>
c00052d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052d8:	89 d8                	mov    eax,ebx
c00052da:	e8 98 da ff ff       	call   c0002d77 <get_fat>
c00052df:	83 f8 01             	cmp    eax,0x1
c00052e2:	77 0e                	ja     c00052f2 <f_read+0x175>
c00052e4:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00052e8:	bd 02 00 00 00       	mov    ebp,0x2
c00052ed:	e9 01 01 00 00       	jmp    c00053f3 <f_read+0x276>
c00052f2:	83 f8 ff             	cmp    eax,0xffffffff
c00052f5:	75 0e                	jne    c0005305 <f_read+0x188>
c00052f7:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00052fb:	bd 01 00 00 00       	mov    ebp,0x1
c0005300:	e9 ee 00 00 00       	jmp    c00053f3 <f_read+0x276>
c0005305:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005308:	e9 08 ff ff ff       	jmp    c0005215 <f_read+0x98>
c000530d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005310:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005313:	29 f0                	sub    eax,esi
c0005315:	19 fa                	sbb    edx,edi
c0005317:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000531a:	89 d7                	mov    edi,edx
c000531c:	ba 00 00 00 00       	mov    edx,0x0
c0005321:	89 f9                	mov    ecx,edi
c0005323:	19 d1                	sbb    ecx,edx
c0005325:	0f 83 64 ff ff ff    	jae    c000528f <f_read+0x112>
c000532b:	89 c7                	mov    edi,eax
c000532d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005337:	b9 00 02 00 00       	mov    ecx,0x200
c000533c:	01 f8                	add    eax,edi
c000533e:	e8 4d c7 ff ff       	call   c0001a90 <mem_cpy>
c0005343:	e9 47 ff ff ff       	jmp    c000528f <f_read+0x112>
c0005348:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000534b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000534e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005351:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005355:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005359:	75 05                	jne    c0005360 <f_read+0x1e3>
c000535b:	39 34 24             	cmp    DWORD PTR [esp],esi
c000535e:	74 5b                	je     c00053bb <f_read+0x23e>
c0005360:	8d 43 50             	lea    eax,[ebx+0x50]
c0005363:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005367:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000536b:	79 2a                	jns    c0005397 <f_read+0x21a>
c000536d:	83 ec 0c             	sub    esp,0xc
c0005370:	6a 01                	push   0x1
c0005372:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005376:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000537a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000537e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005382:	50                   	push   eax
c0005383:	e8 54 c6 ff ff       	call   c00019dc <disk_write>
c0005388:	83 c4 20             	add    esp,0x20
c000538b:	85 c0                	test   eax,eax
c000538d:	0f 85 64 ff ff ff    	jne    c00052f7 <f_read+0x17a>
c0005393:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005397:	83 ec 0c             	sub    esp,0xc
c000539a:	6a 01                	push   0x1
c000539c:	57                   	push   edi
c000539d:	56                   	push   esi
c000539e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053a2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053aa:	50                   	push   eax
c00053ab:	e8 16 c6 ff ff       	call   c00019c6 <disk_read>
c00053b0:	83 c4 20             	add    esp,0x20
c00053b3:	85 c0                	test   eax,eax
c00053b5:	0f 85 3c ff ff ff    	jne    c00052f7 <f_read+0x17a>
c00053bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053c4:	ba 00 02 00 00       	mov    edx,0x200
c00053c9:	25 ff 01 00 00       	and    eax,0x1ff
c00053ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053d2:	29 c2                	sub    edx,eax
c00053d4:	39 d6                	cmp    esi,edx
c00053d6:	76 02                	jbe    c00053da <f_read+0x25d>
c00053d8:	89 d6                	mov    esi,edx
c00053da:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00053de:	89 f1                	mov    ecx,esi
c00053e0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e4:	e8 a7 c6 ff ff       	call   c0001a90 <mem_cpy>
c00053e9:	e9 a7 fe ff ff       	jmp    c0005295 <f_read+0x118>
c00053ee:	bd 07 00 00 00       	mov    ebp,0x7
c00053f3:	83 c4 2c             	add    esp,0x2c
c00053f6:	89 e8                	mov    eax,ebp
c00053f8:	5b                   	pop    ebx
c00053f9:	5e                   	pop    esi
c00053fa:	5f                   	pop    edi
c00053fb:	5d                   	pop    ebp
c00053fc:	c3                   	ret    

c00053fd <f_write>:
c00053fd:	55                   	push   ebp
c00053fe:	57                   	push   edi
c00053ff:	56                   	push   esi
c0005400:	53                   	push   ebx
c0005401:	83 ec 2c             	sub    esp,0x2c
c0005404:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005408:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000540c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005412:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f7 cc ff ff       	call   c0002114 <validate>
c000541d:	89 c5                	mov    ebp,eax
c000541f:	85 c0                	test   eax,eax
c0005421:	0f 85 86 02 00 00    	jne    c00056ad <f_write+0x2b0>
c0005427:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000542b:	85 ed                	test   ebp,ebp
c000542d:	0f 85 7a 02 00 00    	jne    c00056ad <f_write+0x2b0>
c0005433:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005437:	0f 84 6b 02 00 00    	je     c00056a8 <f_write+0x2ab>
c000543d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005441:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005444:	0f 84 43 01 00 00    	je     c000558d <f_write+0x190>
c000544a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000544d:	89 c1                	mov    ecx,eax
c000544f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005453:	0f 83 34 01 00 00    	jae    c000558d <f_write+0x190>
c0005459:	f7 d0                	not    eax
c000545b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000545f:	e9 29 01 00 00       	jmp    c000558d <f_write+0x190>
c0005464:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005467:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000546a:	89 d0                	mov    eax,edx
c000546c:	25 ff 01 00 00       	and    eax,0x1ff
c0005471:	0f 85 00 02 00 00    	jne    c0005677 <f_write+0x27a>
c0005477:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000547b:	89 d6                	mov    esi,edx
c000547d:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005481:	89 cf                	mov    edi,ecx
c0005483:	48                   	dec    eax
c0005484:	0f ac fe 09          	shrd   esi,edi,0x9
c0005488:	21 f0                	and    eax,esi
c000548a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000548e:	0f 84 06 01 00 00    	je     c000559a <f_write+0x19d>
c0005494:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005498:	0f 88 6e 01 00 00    	js     c000560c <f_write+0x20f>
c000549e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054a2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054a5:	89 c8                	mov    eax,ecx
c00054a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054ab:	e8 fa c7 ff ff       	call   c0001caa <clst2sect>
c00054b0:	89 d1                	mov    ecx,edx
c00054b2:	09 c1                	or     ecx,eax
c00054b4:	0f 84 1c 01 00 00    	je     c00055d6 <f_write+0x1d9>
c00054ba:	31 ff                	xor    edi,edi
c00054bc:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054c4:	01 c6                	add    esi,eax
c00054c6:	11 d7                	adc    edi,edx
c00054c8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054d0:	0f 86 63 01 00 00    	jbe    c0005639 <f_write+0x23c>
c00054d6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054de:	c1 e8 09             	shr    eax,0x9
c00054e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054e5:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054e9:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00054ed:	39 c2                	cmp    edx,eax
c00054ef:	76 08                	jbe    c00054f9 <f_write+0xfc>
c00054f1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054f9:	83 ec 0c             	sub    esp,0xc
c00054fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005500:	57                   	push   edi
c0005501:	56                   	push   esi
c0005502:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005506:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000550a:	50                   	push   eax
c000550b:	e8 cc c4 ff ff       	call   c00019dc <disk_write>
c0005510:	83 c4 20             	add    esp,0x20
c0005513:	85 c0                	test   eax,eax
c0005515:	0f 85 ce 00 00 00    	jne    c00055e9 <f_write+0x1ec>
c000551b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000551e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005521:	29 f0                	sub    eax,esi
c0005523:	19 fa                	sbb    edx,edi
c0005525:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005529:	89 d7                	mov    edi,edx
c000552b:	ba 00 00 00 00       	mov    edx,0x0
c0005530:	89 f9                	mov    ecx,edi
c0005532:	19 d1                	sbb    ecx,edx
c0005534:	73 1c                	jae    c0005552 <f_write+0x155>
c0005536:	89 c7                	mov    edi,eax
c0005538:	b9 00 02 00 00       	mov    ecx,0x200
c000553d:	c1 e7 09             	shl    edi,0x9
c0005540:	8d 43 50             	lea    eax,[ebx+0x50]
c0005543:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005547:	89 fa                	mov    edx,edi
c0005549:	e8 42 c5 ff ff       	call   c0001a90 <mem_cpy>
c000554e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005552:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005556:	c1 e6 09             	shl    esi,0x9
c0005559:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000555d:	31 ff                	xor    edi,edi
c000555f:	01 30                	add    DWORD PTR [eax],esi
c0005561:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005565:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005569:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000556c:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c000556f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005572:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c0005575:	89 c1                	mov    ecx,eax
c0005577:	39 f2                	cmp    edx,esi
c0005579:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000557c:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000557f:	19 f9                	sbb    ecx,edi
c0005581:	73 04                	jae    c0005587 <f_write+0x18a>
c0005583:	89 f2                	mov    edx,esi
c0005585:	89 f8                	mov    eax,edi
c0005587:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000558a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000558d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005592:	0f 85 cc fe ff ff    	jne    c0005464 <f_write+0x67>
c0005598:	eb 2e                	jmp    c00055c8 <f_write+0x1cb>
c000559a:	89 c8                	mov    eax,ecx
c000559c:	09 d0                	or     eax,edx
c000559e:	75 0b                	jne    c00055ab <f_write+0x1ae>
c00055a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055a3:	31 d2                	xor    edx,edx
c00055a5:	85 c0                	test   eax,eax
c00055a7:	75 28                	jne    c00055d1 <f_write+0x1d4>
c00055a9:	eb 12                	jmp    c00055bd <f_write+0x1c0>
c00055ab:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055af:	74 09                	je     c00055ba <f_write+0x1bd>
c00055b1:	89 d8                	mov    eax,ebx
c00055b3:	e8 13 c7 ff ff       	call   c0001ccb <clmt_clust>
c00055b8:	eb 0a                	jmp    c00055c4 <f_write+0x1c7>
c00055ba:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055bd:	89 d8                	mov    eax,ebx
c00055bf:	e8 a1 da ff ff       	call   c0003065 <create_chain>
c00055c4:	85 c0                	test   eax,eax
c00055c6:	75 09                	jne    c00055d1 <f_write+0x1d4>
c00055c8:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055cc:	e9 dc 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055d1:	83 f8 01             	cmp    eax,0x1
c00055d4:	75 0e                	jne    c00055e4 <f_write+0x1e7>
c00055d6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055da:	bd 02 00 00 00       	mov    ebp,0x2
c00055df:	e9 c9 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055e4:	83 f8 ff             	cmp    eax,0xffffffff
c00055e7:	75 0e                	jne    c00055f7 <f_write+0x1fa>
c00055e9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00055ed:	bd 01 00 00 00       	mov    ebp,0x1
c00055f2:	e9 b6 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055f7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00055fa:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00055fe:	0f 85 90 fe ff ff    	jne    c0005494 <f_write+0x97>
c0005604:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005607:	e9 88 fe ff ff       	jmp    c0005494 <f_write+0x97>
c000560c:	83 ec 0c             	sub    esp,0xc
c000560f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005612:	6a 01                	push   0x1
c0005614:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005617:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000561a:	50                   	push   eax
c000561b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000561f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005623:	50                   	push   eax
c0005624:	e8 b3 c3 ff ff       	call   c00019dc <disk_write>
c0005629:	83 c4 20             	add    esp,0x20
c000562c:	85 c0                	test   eax,eax
c000562e:	75 b9                	jne    c00055e9 <f_write+0x1ec>
c0005630:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005634:	e9 65 fe ff ff       	jmp    c000549e <f_write+0xa1>
c0005639:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000563c:	75 05                	jne    c0005643 <f_write+0x246>
c000563e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005641:	74 2e                	je     c0005671 <f_write+0x274>
c0005643:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005646:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005649:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000564c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000564f:	73 20                	jae    c0005671 <f_write+0x274>
c0005651:	83 ec 0c             	sub    esp,0xc
c0005654:	8d 43 50             	lea    eax,[ebx+0x50]
c0005657:	6a 01                	push   0x1
c0005659:	57                   	push   edi
c000565a:	56                   	push   esi
c000565b:	50                   	push   eax
c000565c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005660:	50                   	push   eax
c0005661:	e8 60 c3 ff ff       	call   c00019c6 <disk_read>
c0005666:	83 c4 20             	add    esp,0x20
c0005669:	85 c0                	test   eax,eax
c000566b:	0f 85 78 ff ff ff    	jne    c00055e9 <f_write+0x1ec>
c0005671:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005674:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005677:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000567a:	ba 00 02 00 00       	mov    edx,0x200
c000567f:	25 ff 01 00 00       	and    eax,0x1ff
c0005684:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005688:	29 c2                	sub    edx,eax
c000568a:	39 d6                	cmp    esi,edx
c000568c:	76 02                	jbe    c0005690 <f_write+0x293>
c000568e:	89 d6                	mov    esi,edx
c0005690:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005694:	89 f1                	mov    ecx,esi
c0005696:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000569a:	e8 f1 c3 ff ff       	call   c0001a90 <mem_cpy>
c000569f:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056a3:	e9 b1 fe ff ff       	jmp    c0005559 <f_write+0x15c>
c00056a8:	bd 07 00 00 00       	mov    ebp,0x7
c00056ad:	83 c4 2c             	add    esp,0x2c
c00056b0:	89 e8                	mov    eax,ebp
c00056b2:	5b                   	pop    ebx
c00056b3:	5e                   	pop    esi
c00056b4:	5f                   	pop    edi
c00056b5:	5d                   	pop    ebp
c00056b6:	c3                   	ret    

c00056b7 <f_sync>:
c00056b7:	56                   	push   esi
c00056b8:	53                   	push   ebx
c00056b9:	83 ec 64             	sub    esp,0x64
c00056bc:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056c0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056c4:	89 d8                	mov    eax,ebx
c00056c6:	e8 49 ca ff ff       	call   c0002114 <validate>
c00056cb:	85 c0                	test   eax,eax
c00056cd:	0f 85 ba 01 00 00    	jne    c000588d <f_sync+0x1d6>
c00056d3:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056d6:	f6 c2 40             	test   dl,0x40
c00056d9:	0f 84 ae 01 00 00    	je     c000588d <f_sync+0x1d6>
c00056df:	84 d2                	test   dl,dl
c00056e1:	79 33                	jns    c0005716 <f_sync+0x5f>
c00056e3:	83 ec 0c             	sub    esp,0xc
c00056e6:	8d 43 50             	lea    eax,[ebx+0x50]
c00056e9:	6a 01                	push   0x1
c00056eb:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00056ee:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00056f1:	50                   	push   eax
c00056f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00056fa:	50                   	push   eax
c00056fb:	e8 dc c2 ff ff       	call   c00019dc <disk_write>
c0005700:	83 c4 20             	add    esp,0x20
c0005703:	89 c2                	mov    edx,eax
c0005705:	b8 01 00 00 00       	mov    eax,0x1
c000570a:	85 d2                	test   edx,edx
c000570c:	0f 85 7b 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005712:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000571a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000571d:	0f 85 11 01 00 00    	jne    c0005834 <f_sync+0x17d>
c0005723:	89 d8                	mov    eax,ebx
c0005725:	e8 13 d6 ff ff       	call   c0002d3d <fill_first_frag>
c000572a:	85 c0                	test   eax,eax
c000572c:	0f 85 5b 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005732:	83 c9 ff             	or     ecx,0xffffffff
c0005735:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005738:	89 d8                	mov    eax,ebx
c000573a:	e8 c9 d5 ff ff       	call   c0002d08 <fill_last_frag>
c000573f:	85 c0                	test   eax,eax
c0005741:	0f 85 46 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005747:	83 ec 0c             	sub    esp,0xc
c000574a:	68 60 04 00 00       	push   0x460
c000574f:	e8 f0 2a 00 00       	call   c0008244 <ff_memalloc>
c0005754:	83 c4 10             	add    esp,0x10
c0005757:	89 c6                	mov    esi,eax
c0005759:	b8 11 00 00 00       	mov    eax,0x11
c000575e:	85 f6                	test   esi,esi
c0005760:	0f 84 27 01 00 00    	je     c000588d <f_sync+0x1d6>
c0005766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000576a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005770:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005773:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005776:	89 da                	mov    edx,ebx
c0005778:	8d 44 24 14          	lea    eax,[esp+0x14]
c000577c:	e8 af df ff ff       	call   c0003730 <load_obj_xdir>
c0005781:	85 c0                	test   eax,eax
c0005783:	0f 85 95 00 00 00    	jne    c000581e <f_sync+0x167>
c0005789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000578d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005790:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005794:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005797:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c000579a:	83 ca 01             	or     edx,0x1
c000579d:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057a0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057a6:	83 c0 34             	add    eax,0x34
c00057a9:	e8 d9 c2 ff ff       	call   c0001a87 <st_dword>
c00057ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057b2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057b5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057b8:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057bb:	83 c0 38             	add    eax,0x38
c00057be:	e8 c7 c2 ff ff       	call   c0001a8a <st_qword>
c00057c3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ca:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057cd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d0:	83 c0 28             	add    eax,0x28
c00057d3:	e8 b2 c2 ff ff       	call   c0001a8a <st_qword>
c00057d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057dc:	ba 00 00 21 50       	mov    edx,0x50210000
c00057e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057e4:	83 c0 0c             	add    eax,0xc
c00057e7:	e8 9b c2 ff ff       	call   c0001a87 <st_dword>
c00057ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057f3:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c00057f7:	31 d2                	xor    edx,edx
c00057f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057fc:	83 c0 10             	add    eax,0x10
c00057ff:	e8 83 c2 ff ff       	call   c0001a87 <st_dword>
c0005804:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005808:	e8 62 e1 ff ff       	call   c000396f <store_xdir>
c000580d:	85 c0                	test   eax,eax
c000580f:	75 0d                	jne    c000581e <f_sync+0x167>
c0005811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005815:	e8 00 eb ff ff       	call   c000431a <sync_fs>
c000581a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000581e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	56                   	push   esi
c0005826:	e8 2f 2a 00 00       	call   c000825a <ff_memfree>
c000582b:	83 c4 10             	add    esp,0x10
c000582e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005832:	eb 59                	jmp    c000588d <f_sync+0x1d6>
c0005834:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005837:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000583a:	e8 b0 c9 ff ff       	call   c00021ef <move_window>
c000583f:	85 c0                	test   eax,eax
c0005841:	75 4a                	jne    c000588d <f_sync+0x1d6>
c0005843:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005846:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000584a:	89 f2                	mov    edx,esi
c000584c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000584f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005851:	e8 5f f3 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0005856:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005859:	8d 46 1c             	lea    eax,[esi+0x1c]
c000585c:	e8 26 c2 ff ff       	call   c0001a87 <st_dword>
c0005861:	8d 46 16             	lea    eax,[esi+0x16]
c0005864:	ba 00 00 21 50       	mov    edx,0x50210000
c0005869:	e8 19 c2 ff ff       	call   c0001a87 <st_dword>
c000586e:	8d 46 12             	lea    eax,[esi+0x12]
c0005871:	31 d2                	xor    edx,edx
c0005873:	e8 0b c2 ff ff       	call   c0001a83 <st_word>
c0005878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000587c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005884:	e8 91 ea ff ff       	call   c000431a <sync_fs>
c0005889:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000588d:	83 c4 64             	add    esp,0x64
c0005890:	5b                   	pop    ebx
c0005891:	5e                   	pop    esi
c0005892:	c3                   	ret    

c0005893 <f_close>:
c0005893:	53                   	push   ebx
c0005894:	83 ec 24             	sub    esp,0x24
c0005897:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000589b:	53                   	push   ebx
c000589c:	e8 16 fe ff ff       	call   c00056b7 <f_sync>
c00058a1:	83 c4 10             	add    esp,0x10
c00058a4:	85 c0                	test   eax,eax
c00058a6:	75 15                	jne    c00058bd <f_close+0x2a>
c00058a8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058ac:	89 d8                	mov    eax,ebx
c00058ae:	e8 61 c8 ff ff       	call   c0002114 <validate>
c00058b3:	85 c0                	test   eax,eax
c00058b5:	75 06                	jne    c00058bd <f_close+0x2a>
c00058b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058bd:	83 c4 18             	add    esp,0x18
c00058c0:	5b                   	pop    ebx
c00058c1:	c3                   	ret    

c00058c2 <f_lseek>:
c00058c2:	55                   	push   ebp
c00058c3:	57                   	push   edi
c00058c4:	56                   	push   esi
c00058c5:	53                   	push   ebx
c00058c6:	83 ec 3c             	sub    esp,0x3c
c00058c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058cd:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058d1:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00058d8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00058dc:	89 d8                	mov    eax,ebx
c00058de:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00058e2:	e8 2d c8 ff ff       	call   c0002114 <validate>
c00058e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058eb:	85 c0                	test   eax,eax
c00058ed:	0f 85 7a 04 00 00    	jne    c0005d6d <f_lseek+0x4ab>
c00058f3:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c00058f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058fb:	85 c0                	test   eax,eax
c00058fd:	0f 85 6a 04 00 00    	jne    c0005d6d <f_lseek+0x4ab>
c0005903:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005907:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000590a:	74 0c                	je     c0005918 <f_lseek+0x56>
c000590c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000590f:	85 c0                	test   eax,eax
c0005911:	75 1f                	jne    c0005932 <f_lseek+0x70>
c0005913:	e9 b5 01 00 00       	jmp    c0005acd <f_lseek+0x20b>
c0005918:	83 c9 ff             	or     ecx,0xffffffff
c000591b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000591e:	89 d8                	mov    eax,ebx
c0005920:	e8 e3 d3 ff ff       	call   c0002d08 <fill_last_frag>
c0005925:	85 c0                	test   eax,eax
c0005927:	74 e3                	je     c000590c <f_lseek+0x4a>
c0005929:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000592d:	e9 3b 04 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c0005932:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005937:	0f 85 ac 00 00 00    	jne    c00059e9 <f_lseek+0x127>
c000593d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005941:	0f 85 a2 00 00 00    	jne    c00059e9 <f_lseek+0x127>
c0005947:	8d 78 04             	lea    edi,[eax+0x4]
c000594a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c000594d:	8b 00                	mov    eax,DWORD PTR [eax]
c000594f:	be 02 00 00 00       	mov    esi,0x2
c0005954:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005958:	85 ed                	test   ebp,ebp
c000595a:	74 73                	je     c00059cf <f_lseek+0x10d>
c000595c:	89 e9                	mov    ecx,ebp
c000595e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005965:	ff 04 24             	inc    DWORD PTR [esp]
c0005968:	89 ca                	mov    edx,ecx
c000596a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000596e:	89 d8                	mov    eax,ebx
c0005970:	e8 02 d4 ff ff       	call   c0002d77 <get_fat>
c0005975:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005979:	83 f8 01             	cmp    eax,0x1
c000597c:	77 11                	ja     c000598f <f_lseek+0xcd>
c000597e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005982:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c000598a:	e9 de 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c000598f:	83 f8 ff             	cmp    eax,0xffffffff
c0005992:	75 11                	jne    c00059a5 <f_lseek+0xe3>
c0005994:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005998:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059a0:	e9 c8 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c00059a5:	8d 51 01             	lea    edx,[ecx+0x1]
c00059a8:	89 c1                	mov    ecx,eax
c00059aa:	39 c2                	cmp    edx,eax
c00059ac:	74 b7                	je     c0005965 <f_lseek+0xa3>
c00059ae:	83 c6 02             	add    esi,0x2
c00059b1:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059b5:	72 0b                	jb     c00059c2 <f_lseek+0x100>
c00059b7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059ba:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059bd:	89 0f                	mov    DWORD PTR [edi],ecx
c00059bf:	83 c7 08             	add    edi,0x8
c00059c2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059c6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059c9:	76 04                	jbe    c00059cf <f_lseek+0x10d>
c00059cb:	89 c5                	mov    ebp,eax
c00059cd:	eb 8d                	jmp    c000595c <f_lseek+0x9a>
c00059cf:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059d2:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00059d6:	89 30                	mov    DWORD PTR [eax],esi
c00059d8:	0f 87 87 03 00 00    	ja     c0005d65 <f_lseek+0x4a3>
c00059de:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00059e4:	e9 84 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c00059e9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00059ec:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00059ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00059f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00059f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00059fb:	39 04 24             	cmp    DWORD PTR [esp],eax
c00059fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a02:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a06:	73 0f                	jae    c0005a17 <f_lseek+0x155>
c0005a08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a0b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a1b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a1f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a22:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a29:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a2d:	0f 84 3a 03 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005a33:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a37:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a3b:	83 c6 ff             	add    esi,0xffffffff
c0005a3e:	89 d8                	mov    eax,ebx
c0005a40:	83 d7 ff             	adc    edi,0xffffffff
c0005a43:	89 f2                	mov    edx,esi
c0005a45:	89 f9                	mov    ecx,edi
c0005a47:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a4b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a4e:	e8 78 c2 ff ff       	call   c0001ccb <clmt_clust>
c0005a53:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a57:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a5a:	89 c2                	mov    edx,eax
c0005a5c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a60:	89 c8                	mov    eax,ecx
c0005a62:	e8 43 c2 ff ff       	call   c0001caa <clst2sect>
c0005a67:	89 d7                	mov    edi,edx
c0005a69:	09 c7                	or     edi,eax
c0005a6b:	0f 84 0d ff ff ff    	je     c000597e <f_lseek+0xbc>
c0005a71:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005a75:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005a7b:	0f 84 ec 02 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005a81:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a85:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a89:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a8c:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a90:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a94:	4d                   	dec    ebp
c0005a95:	31 ff                	xor    edi,edi
c0005a97:	21 ee                	and    esi,ebp
c0005a99:	01 c6                	add    esi,eax
c0005a9b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a9e:	11 d7                	adc    edi,edx
c0005aa0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005aa3:	39 fa                	cmp    edx,edi
c0005aa5:	75 08                	jne    c0005aaf <f_lseek+0x1ed>
c0005aa7:	39 f0                	cmp    eax,esi
c0005aa9:	0f 84 be 02 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005aaf:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005ab2:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ab6:	0f 89 80 02 00 00    	jns    c0005d3c <f_lseek+0x47a>
c0005abc:	83 ec 0c             	sub    esp,0xc
c0005abf:	6a 01                	push   0x1
c0005ac1:	52                   	push   edx
c0005ac2:	50                   	push   eax
c0005ac3:	55                   	push   ebp
c0005ac4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005ac8:	e9 5a 02 00 00       	jmp    c0005d27 <f_lseek+0x465>
c0005acd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ad1:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ad4:	74 16                	je     c0005aec <f_lseek+0x22a>
c0005ad6:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005adb:	76 0f                	jbe    c0005aec <f_lseek+0x22a>
c0005add:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005ae4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005aec:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aef:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005af2:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005af5:	89 c7                	mov    edi,eax
c0005af7:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005afb:	73 0d                	jae    c0005b0a <f_lseek+0x248>
c0005afd:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b01:	75 07                	jne    c0005b0a <f_lseek+0x248>
c0005b03:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b0a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b0d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b10:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b14:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b1b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b22:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b25:	75 09                	jne    c0005b30 <f_lseek+0x26e>
c0005b27:	31 f6                	xor    esi,esi
c0005b29:	31 ff                	xor    edi,edi
c0005b2b:	e9 af 01 00 00       	jmp    c0005cdf <f_lseek+0x41d>
c0005b30:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b34:	89 d7                	mov    edi,edx
c0005b36:	c1 e1 09             	shl    ecx,0x9
c0005b39:	09 c7                	or     edi,eax
c0005b3b:	89 cd                	mov    ebp,ecx
c0005b3d:	74 6d                	je     c0005bac <f_lseek+0x2ea>
c0005b3f:	83 c0 ff             	add    eax,0xffffffff
c0005b42:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b46:	83 d2 ff             	adc    edx,0xffffffff
c0005b49:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b50:	83 c0 ff             	add    eax,0xffffffff
c0005b53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b57:	83 d2 ff             	adc    edx,0xffffffff
c0005b5a:	31 ff                	xor    edi,edi
c0005b5c:	57                   	push   edi
c0005b5d:	51                   	push   ecx
c0005b5e:	52                   	push   edx
c0005b5f:	50                   	push   eax
c0005b60:	e8 e7 f9 01 00       	call   c002554c <__udivdi3>
c0005b65:	83 c4 10             	add    esp,0x10
c0005b68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005b70:	57                   	push   edi
c0005b71:	55                   	push   ebp
c0005b72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b7a:	e8 cd f9 01 00       	call   c002554c <__udivdi3>
c0005b7f:	83 c4 10             	add    esp,0x10
c0005b82:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b86:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b8a:	19 d1                	sbb    ecx,edx
c0005b8c:	72 1e                	jb     c0005bac <f_lseek+0x2ea>
c0005b8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b92:	89 e9                	mov    ecx,ebp
c0005b94:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b97:	f7 d9                	neg    ecx
c0005b99:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b9c:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005ba0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ba3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005ba6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005baa:	eb 28                	jmp    c0005bd4 <f_lseek+0x312>
c0005bac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005baf:	85 c0                	test   eax,eax
c0005bb1:	75 1e                	jne    c0005bd1 <f_lseek+0x30f>
c0005bb3:	31 d2                	xor    edx,edx
c0005bb5:	89 d8                	mov    eax,ebx
c0005bb7:	e8 a9 d4 ff ff       	call   c0003065 <create_chain>
c0005bbc:	83 f8 01             	cmp    eax,0x1
c0005bbf:	0f 84 b9 fd ff ff    	je     c000597e <f_lseek+0xbc>
c0005bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0005bc8:	0f 84 c6 fd ff ff    	je     c0005994 <f_lseek+0xd2>
c0005bce:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bd1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bd4:	85 c0                	test   eax,eax
c0005bd6:	0f 84 4b ff ff ff    	je     c0005b27 <f_lseek+0x265>
c0005bdc:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005be0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005be8:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005beb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005bef:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005bf2:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005bf5:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005bf9:	0f 83 9d 00 00 00    	jae    c0005c9c <f_lseek+0x3da>
c0005bff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c03:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c07:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c0a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c0e:	01 f2                	add    edx,esi
c0005c10:	11 f9                	adc    ecx,edi
c0005c12:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c16:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c1a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c1d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c20:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c23:	f6 c1 02             	test   cl,0x2
c0005c26:	74 35                	je     c0005c5d <f_lseek+0x39b>
c0005c28:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c2c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c2f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c32:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c36:	73 16                	jae    c0005c4e <f_lseek+0x38c>
c0005c38:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c3c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c40:	88 ca                	mov    dl,cl
c0005c42:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c45:	83 ca 40             	or     edx,0x40
c0005c48:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c4b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c4e:	89 c2                	mov    edx,eax
c0005c50:	89 d8                	mov    eax,ebx
c0005c52:	e8 0e d4 ff ff       	call   c0003065 <create_chain>
c0005c57:	85 c0                	test   eax,eax
c0005c59:	75 0b                	jne    c0005c66 <f_lseek+0x3a4>
c0005c5b:	eb 30                	jmp    c0005c8d <f_lseek+0x3cb>
c0005c5d:	89 c2                	mov    edx,eax
c0005c5f:	89 d8                	mov    eax,ebx
c0005c61:	e8 11 d1 ff ff       	call   c0002d77 <get_fat>
c0005c66:	83 f8 ff             	cmp    eax,0xffffffff
c0005c69:	0f 84 25 fd ff ff    	je     c0005994 <f_lseek+0xd2>
c0005c6f:	83 f8 01             	cmp    eax,0x1
c0005c72:	0f 86 06 fd ff ff    	jbe    c000597e <f_lseek+0xbc>
c0005c78:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c7c:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c7f:	0f 86 f9 fc ff ff    	jbe    c000597e <f_lseek+0xbc>
c0005c85:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c88:	e9 5b ff ff ff       	jmp    c0005be8 <f_lseek+0x326>
c0005c8d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c94:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c9c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c9f:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ca3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ca6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ca9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005cac:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005cb2:	0f 84 6f fe ff ff    	je     c0005b27 <f_lseek+0x265>
c0005cb8:	89 c2                	mov    edx,eax
c0005cba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cbe:	e8 e7 bf ff ff       	call   c0001caa <clst2sect>
c0005cc3:	89 d7                	mov    edi,edx
c0005cc5:	09 c7                	or     edi,eax
c0005cc7:	0f 84 b1 fc ff ff    	je     c000597e <f_lseek+0xbc>
c0005ccd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cd4:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cd8:	c1 ef 09             	shr    edi,0x9
c0005cdb:	01 c6                	add    esi,eax
c0005cdd:	11 d7                	adc    edi,edx
c0005cdf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ce2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005ce5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005ce8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005ceb:	19 d1                	sbb    ecx,edx
c0005ced:	73 0a                	jae    c0005cf9 <f_lseek+0x437>
c0005cef:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005cf2:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005cf5:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005cf9:	a9 ff 01 00 00       	test   eax,0x1ff
c0005cfe:	74 6d                	je     c0005d6d <f_lseek+0x4ab>
c0005d00:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d03:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d06:	39 fa                	cmp    edx,edi
c0005d08:	75 04                	jne    c0005d0e <f_lseek+0x44c>
c0005d0a:	39 f0                	cmp    eax,esi
c0005d0c:	74 5f                	je     c0005d6d <f_lseek+0x4ab>
c0005d0e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d11:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d15:	79 25                	jns    c0005d3c <f_lseek+0x47a>
c0005d17:	83 ec 0c             	sub    esp,0xc
c0005d1a:	6a 01                	push   0x1
c0005d1c:	52                   	push   edx
c0005d1d:	50                   	push   eax
c0005d1e:	55                   	push   ebp
c0005d1f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d23:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d27:	50                   	push   eax
c0005d28:	e8 af bc ff ff       	call   c00019dc <disk_write>
c0005d2d:	83 c4 20             	add    esp,0x20
c0005d30:	85 c0                	test   eax,eax
c0005d32:	0f 85 5c fc ff ff    	jne    c0005994 <f_lseek+0xd2>
c0005d38:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d3c:	83 ec 0c             	sub    esp,0xc
c0005d3f:	6a 01                	push   0x1
c0005d41:	57                   	push   edi
c0005d42:	56                   	push   esi
c0005d43:	55                   	push   ebp
c0005d44:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d48:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d4c:	50                   	push   eax
c0005d4d:	e8 74 bc ff ff       	call   c00019c6 <disk_read>
c0005d52:	83 c4 20             	add    esp,0x20
c0005d55:	85 c0                	test   eax,eax
c0005d57:	0f 85 37 fc ff ff    	jne    c0005994 <f_lseek+0xd2>
c0005d5d:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d60:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d63:	eb 08                	jmp    c0005d6d <f_lseek+0x4ab>
c0005d65:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005d6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005d71:	83 c4 3c             	add    esp,0x3c
c0005d74:	5b                   	pop    ebx
c0005d75:	5e                   	pop    esi
c0005d76:	5f                   	pop    edi
c0005d77:	5d                   	pop    ebp
c0005d78:	c3                   	ret    

c0005d79 <f_opendir>:
c0005d79:	56                   	push   esi
c0005d7a:	b8 09 00 00 00       	mov    eax,0x9
c0005d7f:	53                   	push   ebx
c0005d80:	83 ec 24             	sub    esp,0x24
c0005d83:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d87:	85 db                	test   ebx,ebx
c0005d89:	0f 84 e6 00 00 00    	je     c0005e75 <f_opendir+0xfc>
c0005d8f:	31 c9                	xor    ecx,ecx
c0005d91:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d95:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d99:	e8 03 c7 ff ff       	call   c00024a1 <mount_volume>
c0005d9e:	85 c0                	test   eax,eax
c0005da0:	0f 85 c9 00 00 00    	jne    c0005e6f <f_opendir+0xf6>
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	83 ec 0c             	sub    esp,0xc
c0005dad:	89 03                	mov    DWORD PTR [ebx],eax
c0005daf:	68 60 04 00 00       	push   0x460
c0005db4:	e8 8b 24 00 00       	call   c0008244 <ff_memalloc>
c0005db9:	83 c4 10             	add    esp,0x10
c0005dbc:	89 c6                	mov    esi,eax
c0005dbe:	b8 11 00 00 00       	mov    eax,0x11
c0005dc3:	85 f6                	test   esi,esi
c0005dc5:	0f 84 aa 00 00 00    	je     c0005e75 <f_opendir+0xfc>
c0005dcb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005dcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005dd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005dd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ddb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ddf:	89 d8                	mov    eax,ebx
c0005de1:	e8 31 ee ff ff       	call   c0004c17 <follow_path>
c0005de6:	85 c0                	test   eax,eax
c0005de8:	75 61                	jne    c0005e4b <f_opendir+0xd2>
c0005dea:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005dee:	78 46                	js     c0005e36 <f_opendir+0xbd>
c0005df0:	b8 05 00 00 00       	mov    eax,0x5
c0005df5:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005df9:	74 50                	je     c0005e4b <f_opendir+0xd2>
c0005dfb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dff:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e01:	3c 04                	cmp    al,0x4
c0005e03:	75 26                	jne    c0005e2b <f_opendir+0xb2>
c0005e05:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e08:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e0b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e0e:	30 d2                	xor    dl,dl
c0005e10:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e14:	09 c2                	or     edx,eax
c0005e16:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e19:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e1c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e1f:	89 da                	mov    edx,ebx
c0005e21:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e24:	e8 b4 ed ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0005e29:	eb 0b                	jmp    c0005e36 <f_opendir+0xbd>
c0005e2b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e2e:	e8 59 ed ff ff       	call   c0004b8c <ld_clust.isra.0>
c0005e33:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3a:	31 d2                	xor    edx,edx
c0005e3c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e40:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e44:	89 d8                	mov    eax,ebx
c0005e46:	e8 22 d1 ff ff       	call   c0002f6d <dir_sdi>
c0005e4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	56                   	push   esi
c0005e53:	e8 02 24 00 00       	call   c000825a <ff_memfree>
c0005e58:	83 c4 10             	add    esp,0x10
c0005e5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e5f:	83 f8 04             	cmp    eax,0x4
c0005e62:	74 06                	je     c0005e6a <f_opendir+0xf1>
c0005e64:	85 c0                	test   eax,eax
c0005e66:	74 0d                	je     c0005e75 <f_opendir+0xfc>
c0005e68:	eb 05                	jmp    c0005e6f <f_opendir+0xf6>
c0005e6a:	b8 05 00 00 00       	mov    eax,0x5
c0005e6f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e75:	83 c4 24             	add    esp,0x24
c0005e78:	5b                   	pop    ebx
c0005e79:	5e                   	pop    esi
c0005e7a:	c3                   	ret    

c0005e7b <f_closedir>:
c0005e7b:	53                   	push   ebx
c0005e7c:	83 ec 18             	sub    esp,0x18
c0005e7f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e83:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e87:	89 d8                	mov    eax,ebx
c0005e89:	e8 86 c2 ff ff       	call   c0002114 <validate>
c0005e8e:	85 c0                	test   eax,eax
c0005e90:	75 06                	jne    c0005e98 <f_closedir+0x1d>
c0005e92:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e98:	83 c4 18             	add    esp,0x18
c0005e9b:	5b                   	pop    ebx
c0005e9c:	c3                   	ret    

c0005e9d <f_readdir>:
c0005e9d:	57                   	push   edi
c0005e9e:	56                   	push   esi
c0005e9f:	53                   	push   ebx
c0005ea0:	83 ec 20             	sub    esp,0x20
c0005ea3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ea7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005eab:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 5e c2 ff ff       	call   c0002114 <validate>
c0005eb6:	85 c0                	test   eax,eax
c0005eb8:	75 77                	jne    c0005f31 <f_readdir+0x94>
c0005eba:	85 ff                	test   edi,edi
c0005ebc:	75 0b                	jne    c0005ec9 <f_readdir+0x2c>
c0005ebe:	31 d2                	xor    edx,edx
c0005ec0:	89 d8                	mov    eax,ebx
c0005ec2:	e8 a6 d0 ff ff       	call   c0002f6d <dir_sdi>
c0005ec7:	eb 68                	jmp    c0005f31 <f_readdir+0x94>
c0005ec9:	83 ec 0c             	sub    esp,0xc
c0005ecc:	68 60 04 00 00       	push   0x460
c0005ed1:	e8 6e 23 00 00       	call   c0008244 <ff_memalloc>
c0005ed6:	83 c4 10             	add    esp,0x10
c0005ed9:	89 c6                	mov    esi,eax
c0005edb:	b8 11 00 00 00       	mov    eax,0x11
c0005ee0:	85 f6                	test   esi,esi
c0005ee2:	74 4d                	je     c0005f31 <f_readdir+0x94>
c0005ee4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ee8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005eee:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ef1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ef4:	31 d2                	xor    edx,edx
c0005ef6:	89 d8                	mov    eax,ebx
c0005ef8:	e8 80 d8 ff ff       	call   c000377d <dir_read>
c0005efd:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f02:	75 19                	jne    c0005f1d <f_readdir+0x80>
c0005f04:	89 fa                	mov    edx,edi
c0005f06:	89 d8                	mov    eax,ebx
c0005f08:	e8 7e ea ff ff       	call   c000498b <get_fileinfo>
c0005f0d:	31 d2                	xor    edx,edx
c0005f0f:	89 d8                	mov    eax,ebx
c0005f11:	e8 af d5 ff ff       	call   c00034c5 <dir_next>
c0005f16:	83 f8 04             	cmp    eax,0x4
c0005f19:	75 02                	jne    c0005f1d <f_readdir+0x80>
c0005f1b:	31 c0                	xor    eax,eax
c0005f1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f21:	83 ec 0c             	sub    esp,0xc
c0005f24:	56                   	push   esi
c0005f25:	e8 30 23 00 00       	call   c000825a <ff_memfree>
c0005f2a:	83 c4 10             	add    esp,0x10
c0005f2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f31:	83 c4 20             	add    esp,0x20
c0005f34:	5b                   	pop    ebx
c0005f35:	5e                   	pop    esi
c0005f36:	5f                   	pop    edi
c0005f37:	c3                   	ret    

c0005f38 <f_stat>:
c0005f38:	57                   	push   edi
c0005f39:	31 c9                	xor    ecx,ecx
c0005f3b:	56                   	push   esi
c0005f3c:	53                   	push   ebx
c0005f3d:	83 ec 50             	sub    esp,0x50
c0005f40:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f44:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f48:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f4c:	e8 50 c5 ff ff       	call   c00024a1 <mount_volume>
c0005f51:	89 c3                	mov    ebx,eax
c0005f53:	85 c0                	test   eax,eax
c0005f55:	75 67                	jne    c0005fbe <f_stat+0x86>
c0005f57:	83 ec 0c             	sub    esp,0xc
c0005f5a:	bb 11 00 00 00       	mov    ebx,0x11
c0005f5f:	68 60 04 00 00       	push   0x460
c0005f64:	e8 db 22 00 00       	call   c0008244 <ff_memalloc>
c0005f69:	83 c4 10             	add    esp,0x10
c0005f6c:	89 c6                	mov    esi,eax
c0005f6e:	85 c0                	test   eax,eax
c0005f70:	74 4c                	je     c0005fbe <f_stat+0x86>
c0005f72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f76:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f7c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f7f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f82:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f86:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f8a:	e8 88 ec ff ff       	call   c0004c17 <follow_path>
c0005f8f:	89 c3                	mov    ebx,eax
c0005f91:	85 c0                	test   eax,eax
c0005f93:	75 1d                	jne    c0005fb2 <f_stat+0x7a>
c0005f95:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f9a:	78 11                	js     c0005fad <f_stat+0x75>
c0005f9c:	85 ff                	test   edi,edi
c0005f9e:	74 12                	je     c0005fb2 <f_stat+0x7a>
c0005fa0:	89 fa                	mov    edx,edi
c0005fa2:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fa6:	e8 e0 e9 ff ff       	call   c000498b <get_fileinfo>
c0005fab:	eb 05                	jmp    c0005fb2 <f_stat+0x7a>
c0005fad:	bb 06 00 00 00       	mov    ebx,0x6
c0005fb2:	83 ec 0c             	sub    esp,0xc
c0005fb5:	56                   	push   esi
c0005fb6:	e8 9f 22 00 00       	call   c000825a <ff_memfree>
c0005fbb:	83 c4 10             	add    esp,0x10
c0005fbe:	83 c4 50             	add    esp,0x50
c0005fc1:	89 d8                	mov    eax,ebx
c0005fc3:	5b                   	pop    ebx
c0005fc4:	5e                   	pop    esi
c0005fc5:	5f                   	pop    edi
c0005fc6:	c3                   	ret    

c0005fc7 <f_getfree>:
c0005fc7:	55                   	push   ebp
c0005fc8:	31 c9                	xor    ecx,ecx
c0005fca:	57                   	push   edi
c0005fcb:	56                   	push   esi
c0005fcc:	53                   	push   ebx
c0005fcd:	83 ec 5c             	sub    esp,0x5c
c0005fd0:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005fd4:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fd8:	e8 c4 c4 ff ff       	call   c00024a1 <mount_volume>
c0005fdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fe1:	85 c0                	test   eax,eax
c0005fe3:	0f 85 9d 01 00 00    	jne    c0006186 <f_getfree+0x1bf>
c0005fe9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fed:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005ff1:	89 02                	mov    DWORD PTR [edx],eax
c0005ff3:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005ff6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005ff9:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005ffc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006000:	39 f2                	cmp    edx,esi
c0006002:	77 0b                	ja     c000600f <f_getfree+0x48>
c0006004:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006008:	89 10                	mov    DWORD PTR [eax],edx
c000600a:	e9 77 01 00 00       	jmp    c0006186 <f_getfree+0x1bf>
c000600f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006011:	80 fa 01             	cmp    dl,0x1
c0006014:	75 3a                	jne    c0006050 <f_getfree+0x89>
c0006016:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000601a:	be 02 00 00 00       	mov    esi,0x2
c000601f:	31 db                	xor    ebx,ebx
c0006021:	89 f2                	mov    edx,esi
c0006023:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006027:	e8 4b cd ff ff       	call   c0002d77 <get_fat>
c000602c:	83 f8 ff             	cmp    eax,0xffffffff
c000602f:	0f 84 28 01 00 00    	je     c000615d <f_getfree+0x196>
c0006035:	83 f8 01             	cmp    eax,0x1
c0006038:	0f 84 29 01 00 00    	je     c0006167 <f_getfree+0x1a0>
c000603e:	83 d3 00             	adc    ebx,0x0
c0006041:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006045:	46                   	inc    esi
c0006046:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006049:	77 d6                	ja     c0006021 <f_getfree+0x5a>
c000604b:	e9 25 01 00 00       	jmp    c0006175 <f_getfree+0x1ae>
c0006050:	80 fa 04             	cmp    dl,0x4
c0006053:	0f 85 88 00 00 00    	jne    c00060e1 <f_getfree+0x11a>
c0006059:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000605c:	31 ed                	xor    ebp,ebp
c000605e:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006061:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006065:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006069:	31 db                	xor    ebx,ebx
c000606b:	85 ed                	test   ebp,ebp
c000606d:	75 3f                	jne    c00060ae <f_getfree+0xe7>
c000606f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006073:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006077:	83 c0 01             	add    eax,0x1
c000607a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000607e:	83 d2 00             	adc    edx,0x0
c0006081:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006085:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006089:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000608d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006091:	e8 59 c1 ff ff       	call   c00021ef <move_window>
c0006096:	85 c0                	test   eax,eax
c0006098:	0f 85 d3 00 00 00    	jne    c0006171 <f_getfree+0x1aa>
c000609e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00060a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060aa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060ae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060b2:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060b5:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060b9:	89 cf                	mov    edi,ecx
c00060bb:	85 f6                	test   esi,esi
c00060bd:	74 12                	je     c00060d1 <f_getfree+0x10a>
c00060bf:	88 c1                	mov    cl,al
c00060c1:	83 e1 01             	and    ecx,0x1
c00060c4:	80 f9 01             	cmp    cl,0x1
c00060c7:	83 d3 00             	adc    ebx,0x0
c00060ca:	d0 e8                	shr    al,1
c00060cc:	4e                   	dec    esi
c00060cd:	39 fe                	cmp    esi,edi
c00060cf:	75 ea                	jne    c00060bb <f_getfree+0xf4>
c00060d1:	45                   	inc    ebp
c00060d2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00060d8:	85 f6                	test   esi,esi
c00060da:	75 8f                	jne    c000606b <f_getfree+0xa4>
c00060dc:	e9 94 00 00 00       	jmp    c0006175 <f_getfree+0x1ae>
c00060e1:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060e4:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060e7:	31 f6                	xor    esi,esi
c00060e9:	31 db                	xor    ebx,ebx
c00060eb:	85 f6                	test   esi,esi
c00060ed:	75 1b                	jne    c000610a <f_getfree+0x143>
c00060ef:	89 d7                	mov    edi,edx
c00060f1:	89 cd                	mov    ebp,ecx
c00060f3:	83 c7 01             	add    edi,0x1
c00060f6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fa:	83 d5 00             	adc    ebp,0x0
c00060fd:	e8 ed c0 ff ff       	call   c00021ef <move_window>
c0006102:	85 c0                	test   eax,eax
c0006104:	75 6b                	jne    c0006171 <f_getfree+0x1aa>
c0006106:	89 fa                	mov    edx,edi
c0006108:	89 e9                	mov    ecx,ebp
c000610a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000610e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006112:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006116:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006119:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000611d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006121:	75 11                	jne    c0006134 <f_getfree+0x16d>
c0006123:	e8 e9 b8 ff ff       	call   c0001a11 <ld_word>
c0006128:	66 83 f8 01          	cmp    ax,0x1
c000612c:	83 d3 00             	adc    ebx,0x0
c000612f:	83 c6 02             	add    esi,0x2
c0006132:	eb 13                	jmp    c0006147 <f_getfree+0x180>
c0006134:	e8 e5 b8 ff ff       	call   c0001a1e <ld_dword>
c0006139:	25 ff ff ff 0f       	and    eax,0xfffffff
c000613e:	83 f8 01             	cmp    eax,0x1
c0006141:	83 d3 00             	adc    ebx,0x0
c0006144:	83 c6 04             	add    esi,0x4
c0006147:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000614d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006151:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006155:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006159:	75 90                	jne    c00060eb <f_getfree+0x124>
c000615b:	eb 18                	jmp    c0006175 <f_getfree+0x1ae>
c000615d:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006165:	eb 0e                	jmp    c0006175 <f_getfree+0x1ae>
c0006167:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c000616f:	eb 04                	jmp    c0006175 <f_getfree+0x1ae>
c0006171:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006175:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006179:	89 18                	mov    DWORD PTR [eax],ebx
c000617b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000617f:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006182:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006186:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000618a:	83 c4 5c             	add    esp,0x5c
c000618d:	5b                   	pop    ebx
c000618e:	5e                   	pop    esi
c000618f:	5f                   	pop    edi
c0006190:	5d                   	pop    ebp
c0006191:	c3                   	ret    

c0006192 <f_truncate>:
c0006192:	56                   	push   esi
c0006193:	53                   	push   ebx
c0006194:	83 ec 14             	sub    esp,0x14
c0006197:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000619b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000619f:	89 d8                	mov    eax,ebx
c00061a1:	e8 6e bf ff ff       	call   c0002114 <validate>
c00061a6:	89 c6                	mov    esi,eax
c00061a8:	85 c0                	test   eax,eax
c00061aa:	0f 85 d2 00 00 00    	jne    c0006282 <f_truncate+0xf0>
c00061b0:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061b4:	85 f6                	test   esi,esi
c00061b6:	0f 85 c6 00 00 00    	jne    c0006282 <f_truncate+0xf0>
c00061bc:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061c0:	0f 84 b7 00 00 00    	je     c000627d <f_truncate+0xeb>
c00061c6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061c9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061cc:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061cf:	89 d1                	mov    ecx,edx
c00061d1:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061d4:	0f 83 a8 00 00 00    	jae    c0006282 <f_truncate+0xf0>
c00061da:	09 c2                	or     edx,eax
c00061dc:	75 15                	jne    c00061f3 <f_truncate+0x61>
c00061de:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061e1:	31 c9                	xor    ecx,ecx
c00061e3:	89 d8                	mov    eax,ebx
c00061e5:	e8 7a d0 ff ff       	call   c0003264 <remove_chain>
c00061ea:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061f1:	eb 35                	jmp    c0006228 <f_truncate+0x96>
c00061f3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061f6:	89 d8                	mov    eax,ebx
c00061f8:	e8 7a cb ff ff       	call   c0002d77 <get_fat>
c00061fd:	89 c2                	mov    edx,eax
c00061ff:	b8 01 00 00 00       	mov    eax,0x1
c0006204:	83 fa ff             	cmp    edx,0xffffffff
c0006207:	74 1f                	je     c0006228 <f_truncate+0x96>
c0006209:	b8 02 00 00 00       	mov    eax,0x2
c000620e:	83 fa 01             	cmp    edx,0x1
c0006211:	74 15                	je     c0006228 <f_truncate+0x96>
c0006213:	31 c0                	xor    eax,eax
c0006215:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006219:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000621c:	76 0a                	jbe    c0006228 <f_truncate+0x96>
c000621e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006221:	89 d8                	mov    eax,ebx
c0006223:	e8 3c d0 ff ff       	call   c0003264 <remove_chain>
c0006228:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000622b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000622e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006231:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006234:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006237:	83 ca 40             	or     edx,0x40
c000623a:	85 c0                	test   eax,eax
c000623c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000623f:	75 35                	jne    c0006276 <f_truncate+0xe4>
c0006241:	84 d2                	test   dl,dl
c0006243:	79 3d                	jns    c0006282 <f_truncate+0xf0>
c0006245:	83 ec 0c             	sub    esp,0xc
c0006248:	8d 43 50             	lea    eax,[ebx+0x50]
c000624b:	6a 01                	push   0x1
c000624d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006250:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006253:	50                   	push   eax
c0006254:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006258:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000625c:	50                   	push   eax
c000625d:	e8 7a b7 ff ff       	call   c00019dc <disk_write>
c0006262:	83 c4 20             	add    esp,0x20
c0006265:	85 c0                	test   eax,eax
c0006267:	75 08                	jne    c0006271 <f_truncate+0xdf>
c0006269:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000626d:	31 f6                	xor    esi,esi
c000626f:	eb 11                	jmp    c0006282 <f_truncate+0xf0>
c0006271:	b8 01 00 00 00       	mov    eax,0x1
c0006276:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006279:	89 c6                	mov    esi,eax
c000627b:	eb 05                	jmp    c0006282 <f_truncate+0xf0>
c000627d:	be 07 00 00 00       	mov    esi,0x7
c0006282:	89 f0                	mov    eax,esi
c0006284:	83 c4 14             	add    esp,0x14
c0006287:	5b                   	pop    ebx
c0006288:	5e                   	pop    esi
c0006289:	c3                   	ret    

c000628a <f_unlink>:
c000628a:	56                   	push   esi
c000628b:	b9 02 00 00 00       	mov    ecx,0x2
c0006290:	53                   	push   ebx
c0006291:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006297:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000629b:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062a2:	e8 fa c1 ff ff       	call   c00024a1 <mount_volume>
c00062a7:	85 c0                	test   eax,eax
c00062a9:	0f 85 55 01 00 00    	jne    c0006404 <f_unlink+0x17a>
c00062af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062b3:	83 ec 0c             	sub    esp,0xc
c00062b6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062ba:	68 60 04 00 00       	push   0x460
c00062bf:	e8 80 1f 00 00       	call   c0008244 <ff_memalloc>
c00062c4:	83 c4 10             	add    esp,0x10
c00062c7:	89 c3                	mov    ebx,eax
c00062c9:	b8 11 00 00 00       	mov    eax,0x11
c00062ce:	85 db                	test   ebx,ebx
c00062d0:	0f 84 2e 01 00 00    	je     c0006404 <f_unlink+0x17a>
c00062d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062da:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062e0:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062e6:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062ed:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062f1:	e8 21 e9 ff ff       	call   c0004c17 <follow_path>
c00062f6:	85 c0                	test   eax,eax
c00062f8:	0f 85 f2 00 00 00    	jne    c00063f0 <f_unlink+0x166>
c00062fe:	b8 06 00 00 00       	mov    eax,0x6
c0006303:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000630b:	0f 88 df 00 00 00    	js     c00063f0 <f_unlink+0x166>
c0006311:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006316:	74 0a                	je     c0006322 <f_unlink+0x98>
c0006318:	b8 07 00 00 00       	mov    eax,0x7
c000631d:	e9 ce 00 00 00       	jmp    c00063f0 <f_unlink+0x166>
c0006322:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006326:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000632a:	8a 02                	mov    al,BYTE PTR [edx]
c000632c:	3c 04                	cmp    al,0x4
c000632e:	75 12                	jne    c0006342 <f_unlink+0xb8>
c0006330:	8d 42 10             	lea    eax,[edx+0x10]
c0006333:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006337:	e8 a1 e8 ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c000633c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006340:	eb 0e                	jmp    c0006350 <f_unlink+0xc6>
c0006342:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006349:	e8 3e e8 ff ff       	call   c0004b8c <ld_clust.isra.0>
c000634e:	89 c6                	mov    esi,eax
c0006350:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006355:	75 12                	jne    c0006369 <f_unlink+0xdf>
c0006357:	8d 44 24 48          	lea    eax,[esp+0x48]
c000635b:	e8 94 d6 ff ff       	call   c00039f4 <dir_remove>
c0006360:	85 c0                	test   eax,eax
c0006362:	74 6c                	je     c00063d0 <f_unlink+0x146>
c0006364:	e9 87 00 00 00       	jmp    c00063f0 <f_unlink+0x166>
c0006369:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000636d:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006374:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c000637b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000637e:	75 21                	jne    c00063a1 <f_unlink+0x117>
c0006380:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006384:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006388:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000638f:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006396:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c000639a:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063a1:	31 d2                	xor    edx,edx
c00063a3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063aa:	e8 be cb ff ff       	call   c0002f6d <dir_sdi>
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 3d                	jne    c00063f0 <f_unlink+0x166>
c00063b3:	31 d2                	xor    edx,edx
c00063b5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063bc:	e8 bc d3 ff ff       	call   c000377d <dir_read>
c00063c1:	85 c0                	test   eax,eax
c00063c3:	0f 84 4f ff ff ff    	je     c0006318 <f_unlink+0x8e>
c00063c9:	83 f8 04             	cmp    eax,0x4
c00063cc:	75 22                	jne    c00063f0 <f_unlink+0x166>
c00063ce:	eb 87                	jmp    c0006357 <f_unlink+0xcd>
c00063d0:	85 f6                	test   esi,esi
c00063d2:	75 0b                	jne    c00063df <f_unlink+0x155>
c00063d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063d8:	e8 3d df ff ff       	call   c000431a <sync_fs>
c00063dd:	eb 11                	jmp    c00063f0 <f_unlink+0x166>
c00063df:	31 c9                	xor    ecx,ecx
c00063e1:	89 f2                	mov    edx,esi
c00063e3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00063e7:	e8 78 ce ff ff       	call   c0003264 <remove_chain>
c00063ec:	85 c0                	test   eax,eax
c00063ee:	74 e4                	je     c00063d4 <f_unlink+0x14a>
c00063f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063f4:	83 ec 0c             	sub    esp,0xc
c00063f7:	53                   	push   ebx
c00063f8:	e8 5d 1e 00 00       	call   c000825a <ff_memfree>
c00063fd:	83 c4 10             	add    esp,0x10
c0006400:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006404:	81 c4 e4 00 00 00    	add    esp,0xe4
c000640a:	5b                   	pop    ebx
c000640b:	5e                   	pop    esi
c000640c:	c3                   	ret    

c000640d <f_mkdir>:
c000640d:	57                   	push   edi
c000640e:	b9 02 00 00 00       	mov    ecx,0x2
c0006413:	56                   	push   esi
c0006414:	53                   	push   ebx
c0006415:	83 c4 80             	add    esp,0xffffff80
c0006418:	8d 54 24 08          	lea    edx,[esp+0x8]
c000641c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006423:	e8 79 c0 ff ff       	call   c00024a1 <mount_volume>
c0006428:	89 c3                	mov    ebx,eax
c000642a:	85 c0                	test   eax,eax
c000642c:	0f 85 fe 01 00 00    	jne    c0006630 <f_mkdir+0x223>
c0006432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006436:	bb 11 00 00 00       	mov    ebx,0x11
c000643b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000643f:	83 ec 0c             	sub    esp,0xc
c0006442:	68 60 04 00 00       	push   0x460
c0006447:	e8 f8 1d 00 00       	call   c0008244 <ff_memalloc>
c000644c:	83 c4 10             	add    esp,0x10
c000644f:	89 c7                	mov    edi,eax
c0006451:	85 c0                	test   eax,eax
c0006453:	0f 84 d7 01 00 00    	je     c0006630 <f_mkdir+0x223>
c0006459:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000645d:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006463:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006466:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006469:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006470:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006474:	e8 9e e7 ff ff       	call   c0004c17 <follow_path>
c0006479:	89 c3                	mov    ebx,eax
c000647b:	85 c0                	test   eax,eax
c000647d:	74 3e                	je     c00064bd <f_mkdir+0xb0>
c000647f:	83 f8 04             	cmp    eax,0x4
c0006482:	75 3e                	jne    c00064c2 <f_mkdir+0xb5>
c0006484:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006488:	31 d2                	xor    edx,edx
c000648a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000648e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006492:	e8 ce cb ff ff       	call   c0003065 <create_chain>
c0006497:	89 c6                	mov    esi,eax
c0006499:	85 c0                	test   eax,eax
c000649b:	74 0c                	je     c00064a9 <f_mkdir+0x9c>
c000649d:	bb 02 00 00 00       	mov    ebx,0x2
c00064a2:	83 f8 01             	cmp    eax,0x1
c00064a5:	74 07                	je     c00064ae <f_mkdir+0xa1>
c00064a7:	eb 2a                	jmp    c00064d3 <f_mkdir+0xc6>
c00064a9:	bb 07 00 00 00       	mov    ebx,0x7
c00064ae:	31 c9                	xor    ecx,ecx
c00064b0:	89 f2                	mov    edx,esi
c00064b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064b6:	e8 a9 cd ff ff       	call   c0003264 <remove_chain>
c00064bb:	eb 05                	jmp    c00064c2 <f_mkdir+0xb5>
c00064bd:	bb 08 00 00 00       	mov    ebx,0x8
c00064c2:	83 ec 0c             	sub    esp,0xc
c00064c5:	57                   	push   edi
c00064c6:	e8 8f 1d 00 00       	call   c000825a <ff_memfree>
c00064cb:	83 c4 10             	add    esp,0x10
c00064ce:	e9 5d 01 00 00       	jmp    c0006630 <f_mkdir+0x223>
c00064d3:	bb 01 00 00 00       	mov    ebx,0x1
c00064d8:	83 f8 ff             	cmp    eax,0xffffffff
c00064db:	74 d1                	je     c00064ae <f_mkdir+0xa1>
c00064dd:	89 f2                	mov    edx,esi
c00064df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e3:	e8 c4 ce ff ff       	call   c00033ac <dir_clear>
c00064e8:	89 c3                	mov    ebx,eax
c00064ea:	85 c0                	test   eax,eax
c00064ec:	75 c0                	jne    c00064ae <f_mkdir+0xa1>
c00064ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064f5:	74 69                	je     c0006560 <f_mkdir+0x153>
c00064f7:	b9 0b 00 00 00       	mov    ecx,0xb
c00064fc:	83 c0 54             	add    eax,0x54
c00064ff:	ba 20 00 00 00       	mov    edx,0x20
c0006504:	e8 9c b5 ff ff       	call   c0001aa5 <mem_set>
c0006509:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006512:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006516:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000651a:	83 c0 6a             	add    eax,0x6a
c000651d:	e8 65 b5 ff ff       	call   c0001a87 <st_dword>
c0006522:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006526:	89 f1                	mov    ecx,esi
c0006528:	8d 50 54             	lea    edx,[eax+0x54]
c000652b:	e8 85 e6 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006534:	b9 20 00 00 00       	mov    ecx,0x20
c0006539:	8d 50 54             	lea    edx,[eax+0x54]
c000653c:	83 c0 74             	add    eax,0x74
c000653f:	e8 4c b5 ff ff       	call   c0001a90 <mem_cpy>
c0006544:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006548:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000654c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006550:	8d 50 74             	lea    edx,[eax+0x74]
c0006553:	e8 5d e6 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006558:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000655c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006560:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006564:	e8 2f db ff ff       	call   c0004098 <dir_register>
c0006569:	89 c3                	mov    ebx,eax
c000656b:	85 c0                	test   eax,eax
c000656d:	0f 85 3b ff ff ff    	jne    c00064ae <f_mkdir+0xa1>
c0006573:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006577:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000657a:	75 74                	jne    c00065f0 <f_mkdir+0x1e3>
c000657c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000657f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006584:	83 c0 0c             	add    eax,0xc
c0006587:	e8 fb b4 ff ff       	call   c0001a87 <st_dword>
c000658c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006590:	89 f2                	mov    edx,esi
c0006592:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006595:	83 c0 34             	add    eax,0x34
c0006598:	e8 ea b4 ff ff       	call   c0001a87 <st_dword>
c000659d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065a5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065a8:	c1 e2 09             	shl    edx,0x9
c00065ab:	83 c0 38             	add    eax,0x38
c00065ae:	e8 d4 b4 ff ff       	call   c0001a87 <st_dword>
c00065b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065be:	c1 e2 09             	shl    edx,0x9
c00065c1:	83 c0 28             	add    eax,0x28
c00065c4:	e8 be b4 ff ff       	call   c0001a87 <st_dword>
c00065c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065d0:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065d7:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065db:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065df:	e8 8b d3 ff ff       	call   c000396f <store_xdir>
c00065e4:	89 c3                	mov    ebx,eax
c00065e6:	85 c0                	test   eax,eax
c00065e8:	0f 85 d4 fe ff ff    	jne    c00064c2 <f_mkdir+0xb5>
c00065ee:	eb 30                	jmp    c0006620 <f_mkdir+0x213>
c00065f0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065f4:	ba 00 00 21 50       	mov    edx,0x50210000
c00065f9:	83 c0 16             	add    eax,0x16
c00065fc:	e8 86 b4 ff ff       	call   c0001a87 <st_dword>
c0006601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006605:	89 f1                	mov    ecx,esi
c0006607:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000660b:	e8 a5 e5 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006610:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006614:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006618:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000661c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006624:	e8 f1 dc ff ff       	call   c000431a <sync_fs>
c0006629:	89 c3                	mov    ebx,eax
c000662b:	e9 92 fe ff ff       	jmp    c00064c2 <f_mkdir+0xb5>
c0006630:	83 ec 80             	sub    esp,0xffffff80
c0006633:	89 d8                	mov    eax,ebx
c0006635:	5b                   	pop    ebx
c0006636:	5e                   	pop    esi
c0006637:	5f                   	pop    edi
c0006638:	c3                   	ret    

c0006639 <f_rename>:
c0006639:	55                   	push   ebp
c000663a:	57                   	push   edi
c000663b:	56                   	push   esi
c000663c:	53                   	push   ebx
c000663d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006643:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000664a:	e8 a4 b9 ff ff       	call   c0001ff3 <get_ldnumber>
c000664f:	b9 02 00 00 00       	mov    ecx,0x2
c0006654:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006658:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c000665f:	e8 3d be ff ff       	call   c00024a1 <mount_volume>
c0006664:	85 c0                	test   eax,eax
c0006666:	0f 85 b5 02 00 00    	jne    c0006921 <f_rename+0x2e8>
c000666c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006670:	83 ec 0c             	sub    esp,0xc
c0006673:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006677:	68 60 04 00 00       	push   0x460
c000667c:	e8 c3 1b 00 00       	call   c0008244 <ff_memalloc>
c0006681:	83 c4 10             	add    esp,0x10
c0006684:	89 c3                	mov    ebx,eax
c0006686:	b8 11 00 00 00       	mov    eax,0x11
c000668b:	85 db                	test   ebx,ebx
c000668d:	0f 84 8e 02 00 00    	je     c0006921 <f_rename+0x2e8>
c0006693:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006697:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000669d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066a3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066aa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066ae:	e8 64 e5 ff ff       	call   c0004c17 <follow_path>
c00066b3:	85 c0                	test   eax,eax
c00066b5:	0f 85 52 02 00 00    	jne    c000690d <f_rename+0x2d4>
c00066bb:	b8 06 00 00 00       	mov    eax,0x6
c00066c0:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066c8:	0f 85 3f 02 00 00    	jne    c000690d <f_rename+0x2d4>
c00066ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066d5:	0f 85 05 01 00 00    	jne    c00067e0 <f_rename+0x1a7>
c00066db:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066de:	b9 40 00 00 00       	mov    ecx,0x40
c00066e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066e7:	e8 a4 b3 ff ff       	call   c0001a90 <mem_cpy>
c00066ec:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066f1:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066f5:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066fc:	e8 8f b3 ff ff       	call   c0001a90 <mem_cpy>
c0006701:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006708:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000670f:	e8 03 e5 ff ff       	call   c0004c17 <follow_path>
c0006714:	85 c0                	test   eax,eax
c0006716:	75 29                	jne    c0006741 <f_rename+0x108>
c0006718:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000671c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006723:	74 0a                	je     c000672f <f_rename+0xf6>
c0006725:	b8 08 00 00 00       	mov    eax,0x8
c000672a:	e9 de 01 00 00       	jmp    c000690d <f_rename+0x2d4>
c000672f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006736:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000673d:	75 e6                	jne    c0006725 <f_rename+0xec>
c000673f:	eb 09                	jmp    c000674a <f_rename+0x111>
c0006741:	83 f8 04             	cmp    eax,0x4
c0006744:	0f 85 c3 01 00 00    	jne    c000690d <f_rename+0x2d4>
c000674a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006751:	e8 42 d9 ff ff       	call   c0004098 <dir_register>
c0006756:	85 c0                	test   eax,eax
c0006758:	0f 85 af 01 00 00    	jne    c000690d <f_rename+0x2d4>
c000675e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006762:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006765:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006768:	89 c5                	mov    ebp,eax
c000676a:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000676d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006771:	8d 46 24             	lea    eax,[esi+0x24]
c0006774:	e8 98 b2 ff ff       	call   c0001a11 <ld_word>
c0006779:	b9 40 00 00 00       	mov    ecx,0x40
c000677e:	89 c7                	mov    edi,eax
c0006780:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006784:	89 f0                	mov    eax,esi
c0006786:	e8 05 b3 ff ff       	call   c0001a90 <mem_cpy>
c000678b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000678f:	89 e9                	mov    ecx,ebp
c0006791:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006794:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006797:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c000679b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000679f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067a2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067a5:	0f b7 d7             	movzx  edx,di
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 24             	add    eax,0x24
c00067ae:	e8 d0 b2 ff ff       	call   c0001a83 <st_word>
c00067b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067b7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067ba:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067bd:	a8 10                	test   al,0x10
c00067bf:	75 06                	jne    c00067c7 <f_rename+0x18e>
c00067c1:	83 c8 20             	or     eax,0x20
c00067c4:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067c7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067ce:	e8 9c d1 ff ff       	call   c000396f <store_xdir>
c00067d3:	85 c0                	test   eax,eax
c00067d5:	0f 84 1c 01 00 00    	je     c00068f7 <f_rename+0x2be>
c00067db:	e9 2d 01 00 00       	jmp    c000690d <f_rename+0x2d4>
c00067e0:	b9 20 00 00 00       	mov    ecx,0x20
c00067e5:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067ec:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067f0:	e8 9b b2 ff ff       	call   c0001a90 <mem_cpy>
c00067f5:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067fa:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067fe:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006805:	e8 86 b2 ff ff       	call   c0001a90 <mem_cpy>
c000680a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006811:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006818:	e8 fa e3 ff ff       	call   c0004c17 <follow_path>
c000681d:	85 c0                	test   eax,eax
c000681f:	75 27                	jne    c0006848 <f_rename+0x20f>
c0006821:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006825:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000682c:	0f 85 f3 fe ff ff    	jne    c0006725 <f_rename+0xec>
c0006832:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006839:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006840:	0f 85 df fe ff ff    	jne    c0006725 <f_rename+0xec>
c0006846:	eb 09                	jmp    c0006851 <f_rename+0x218>
c0006848:	83 f8 04             	cmp    eax,0x4
c000684b:	0f 85 bc 00 00 00    	jne    c000690d <f_rename+0x2d4>
c0006851:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006858:	e8 3b d8 ff ff       	call   c0004098 <dir_register>
c000685d:	85 c0                	test   eax,eax
c000685f:	0f 85 a8 00 00 00    	jne    c000690d <f_rename+0x2d4>
c0006865:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c000686c:	b9 13 00 00 00       	mov    ecx,0x13
c0006871:	8d 46 0d             	lea    eax,[esi+0xd]
c0006874:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006878:	e8 13 b2 ff ff       	call   c0001a90 <mem_cpy>
c000687d:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006881:	a8 10                	test   al,0x10
c0006883:	75 03                	jne    c0006888 <f_rename+0x24f>
c0006885:	83 c8 20             	or     eax,0x20
c0006888:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c000688b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000688f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006893:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006897:	74 5e                	je     c00068f7 <f_rename+0x2be>
c0006899:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068a0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068a4:	74 51                	je     c00068f7 <f_rename+0x2be>
c00068a6:	89 f2                	mov    edx,esi
c00068a8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068ac:	8a 07                	mov    al,BYTE PTR [edi]
c00068ae:	e8 d9 e2 ff ff       	call   c0004b8c <ld_clust.isra.0>
c00068b3:	89 c2                	mov    edx,eax
c00068b5:	89 f8                	mov    eax,edi
c00068b7:	e8 ee b3 ff ff       	call   c0001caa <clst2sect>
c00068bc:	89 c6                	mov    esi,eax
c00068be:	89 d1                	mov    ecx,edx
c00068c0:	b8 02 00 00 00       	mov    eax,0x2
c00068c5:	09 f2                	or     edx,esi
c00068c7:	74 44                	je     c000690d <f_rename+0x2d4>
c00068c9:	89 f2                	mov    edx,esi
c00068cb:	89 f8                	mov    eax,edi
c00068cd:	e8 1d b9 ff ff       	call   c00021ef <move_window>
c00068d2:	85 c0                	test   eax,eax
c00068d4:	75 37                	jne    c000690d <f_rename+0x2d4>
c00068d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068da:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068de:	75 17                	jne    c00068f7 <f_rename+0x2be>
c00068e0:	8d 50 74             	lea    edx,[eax+0x74]
c00068e3:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068ea:	e8 c6 e2 ff ff       	call   c0004bb5 <st_clust.isra.1>
c00068ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068f7:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fb:	e8 f4 d0 ff ff       	call   c00039f4 <dir_remove>
c0006900:	85 c0                	test   eax,eax
c0006902:	75 09                	jne    c000690d <f_rename+0x2d4>
c0006904:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006908:	e8 0d da ff ff       	call   c000431a <sync_fs>
c000690d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006911:	83 ec 0c             	sub    esp,0xc
c0006914:	53                   	push   ebx
c0006915:	e8 40 19 00 00       	call   c000825a <ff_memfree>
c000691a:	83 c4 10             	add    esp,0x10
c000691d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006921:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006927:	5b                   	pop    ebx
c0006928:	5e                   	pop    esi
c0006929:	5f                   	pop    edi
c000692a:	5d                   	pop    ebp
c000692b:	c3                   	ret    

c000692c <f_chmod>:
c000692c:	57                   	push   edi
c000692d:	b9 02 00 00 00       	mov    ecx,0x2
c0006932:	56                   	push   esi
c0006933:	53                   	push   ebx
c0006934:	83 ec 60             	sub    esp,0x60
c0006937:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000693b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000693f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006943:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006947:	e8 55 bb ff ff       	call   c00024a1 <mount_volume>
c000694c:	85 c0                	test   eax,eax
c000694e:	0f 85 af 00 00 00    	jne    c0006a03 <f_chmod+0xd7>
c0006954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006958:	83 ec 0c             	sub    esp,0xc
c000695b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000695f:	68 60 04 00 00       	push   0x460
c0006964:	e8 db 18 00 00       	call   c0008244 <ff_memalloc>
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	89 c6                	mov    esi,eax
c000696e:	b8 11 00 00 00       	mov    eax,0x11
c0006973:	85 f6                	test   esi,esi
c0006975:	0f 84 88 00 00 00    	je     c0006a03 <f_chmod+0xd7>
c000697b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000697f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006985:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006988:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000698b:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000698f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006993:	e8 7f e2 ff ff       	call   c0004c17 <follow_path>
c0006998:	85 c0                	test   eax,eax
c000699a:	75 53                	jne    c00069ef <f_chmod+0xc3>
c000699c:	b8 06 00 00 00       	mov    eax,0x6
c00069a1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069a6:	75 47                	jne    c00069ef <f_chmod+0xc3>
c00069a8:	89 f9                	mov    ecx,edi
c00069aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ae:	83 e1 27             	and    ecx,0x27
c00069b1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069b4:	75 1d                	jne    c00069d3 <f_chmod+0xa7>
c00069b6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069b9:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069bc:	21 cb                	and    ebx,ecx
c00069be:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069c1:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069c4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069c8:	e8 a2 cf ff ff       	call   c000396f <store_xdir>
c00069cd:	85 c0                	test   eax,eax
c00069cf:	75 1e                	jne    c00069ef <f_chmod+0xc3>
c00069d1:	eb 13                	jmp    c00069e6 <f_chmod+0xba>
c00069d3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069d7:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069da:	21 cb                	and    ebx,ecx
c00069dc:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069df:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069e2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ea:	e8 2b d9 ff ff       	call   c000431a <sync_fs>
c00069ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069f3:	83 ec 0c             	sub    esp,0xc
c00069f6:	56                   	push   esi
c00069f7:	e8 5e 18 00 00       	call   c000825a <ff_memfree>
c00069fc:	83 c4 10             	add    esp,0x10
c00069ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a03:	83 c4 60             	add    esp,0x60
c0006a06:	5b                   	pop    ebx
c0006a07:	5e                   	pop    esi
c0006a08:	5f                   	pop    edi
c0006a09:	c3                   	ret    

c0006a0a <f_utime>:
c0006a0a:	56                   	push   esi
c0006a0b:	b9 02 00 00 00       	mov    ecx,0x2
c0006a10:	53                   	push   ebx
c0006a11:	83 ec 64             	sub    esp,0x64
c0006a14:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a18:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a1c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a20:	e8 7c ba ff ff       	call   c00024a1 <mount_volume>
c0006a25:	85 c0                	test   eax,eax
c0006a27:	0f 85 b5 00 00 00    	jne    c0006ae2 <f_utime+0xd8>
c0006a2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a31:	83 ec 0c             	sub    esp,0xc
c0006a34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a38:	68 60 04 00 00       	push   0x460
c0006a3d:	e8 02 18 00 00       	call   c0008244 <ff_memalloc>
c0006a42:	83 c4 10             	add    esp,0x10
c0006a45:	89 c3                	mov    ebx,eax
c0006a47:	b8 11 00 00 00       	mov    eax,0x11
c0006a4c:	85 db                	test   ebx,ebx
c0006a4e:	0f 84 8e 00 00 00    	je     c0006ae2 <f_utime+0xd8>
c0006a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a58:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a5e:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a61:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a64:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a68:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a6c:	e8 a6 e1 ff ff       	call   c0004c17 <follow_path>
c0006a71:	85 c0                	test   eax,eax
c0006a73:	75 59                	jne    c0006ace <f_utime+0xc4>
c0006a75:	b8 06 00 00 00       	mov    eax,0x6
c0006a7a:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a7f:	75 4d                	jne    c0006ace <f_utime+0xc4>
c0006a81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a85:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a89:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a8d:	c1 e2 10             	shl    edx,0x10
c0006a90:	09 ca                	or     edx,ecx
c0006a92:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a95:	75 1a                	jne    c0006ab1 <f_utime+0xa7>
c0006a97:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a9a:	83 c0 0c             	add    eax,0xc
c0006a9d:	e8 e5 af ff ff       	call   c0001a87 <st_dword>
c0006aa2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aa6:	e8 c4 ce ff ff       	call   c000396f <store_xdir>
c0006aab:	85 c0                	test   eax,eax
c0006aad:	75 1f                	jne    c0006ace <f_utime+0xc4>
c0006aaf:	eb 14                	jmp    c0006ac5 <f_utime+0xbb>
c0006ab1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ab5:	83 c0 16             	add    eax,0x16
c0006ab8:	e8 ca af ff ff       	call   c0001a87 <st_dword>
c0006abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	e8 4c d8 ff ff       	call   c000431a <sync_fs>
c0006ace:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ad2:	83 ec 0c             	sub    esp,0xc
c0006ad5:	53                   	push   ebx
c0006ad6:	e8 7f 17 00 00       	call   c000825a <ff_memfree>
c0006adb:	83 c4 10             	add    esp,0x10
c0006ade:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ae2:	83 c4 64             	add    esp,0x64
c0006ae5:	5b                   	pop    ebx
c0006ae6:	5e                   	pop    esi
c0006ae7:	c3                   	ret    

c0006ae8 <f_getlabel>:
c0006ae8:	55                   	push   ebp
c0006ae9:	31 c9                	xor    ecx,ecx
c0006aeb:	57                   	push   edi
c0006aec:	56                   	push   esi
c0006aed:	53                   	push   ebx
c0006aee:	83 ec 6c             	sub    esp,0x6c
c0006af1:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006af5:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006afc:	e8 a0 b9 ff ff       	call   c00024a1 <mount_volume>
c0006b01:	89 c6                	mov    esi,eax
c0006b03:	85 c0                	test   eax,eax
c0006b05:	0f 85 c1 01 00 00    	jne    c0006ccc <f_getlabel+0x1e4>
c0006b0b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b13:	0f 84 5f 01 00 00    	je     c0006c78 <f_getlabel+0x190>
c0006b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b1d:	31 d2                	xor    edx,edx
c0006b1f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b23:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b2b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b2f:	e8 39 c4 ff ff       	call   c0002f6d <dir_sdi>
c0006b34:	85 c0                	test   eax,eax
c0006b36:	0f 85 2d 01 00 00    	jne    c0006c69 <f_getlabel+0x181>
c0006b3c:	ba 01 00 00 00       	mov    edx,0x1
c0006b41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b45:	e8 33 cc ff ff       	call   c000377d <dir_read>
c0006b4a:	85 c0                	test   eax,eax
c0006b4c:	0f 85 17 01 00 00    	jne    c0006c69 <f_getlabel+0x181>
c0006b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b56:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b59:	74 09                	je     c0006b64 <f_getlabel+0x7c>
c0006b5b:	31 db                	xor    ebx,ebx
c0006b5d:	31 c9                	xor    ecx,ecx
c0006b5f:	e9 c8 00 00 00       	jmp    c0006c2c <f_getlabel+0x144>
c0006b64:	31 ed                	xor    ebp,ebp
c0006b66:	31 db                	xor    ebx,ebx
c0006b68:	31 ff                	xor    edi,edi
c0006b6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b72:	39 fa                	cmp    edx,edi
c0006b74:	76 4b                	jbe    c0006bc1 <f_getlabel+0xd9>
c0006b76:	47                   	inc    edi
c0006b77:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b7a:	01 d0                	add    eax,edx
c0006b7c:	e8 90 ae ff ff       	call   c0001a11 <ld_word>
c0006b81:	66 85 ed             	test   bp,bp
c0006b84:	75 0d                	jne    c0006b93 <f_getlabel+0xab>
c0006b86:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b8c:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b91:	76 28                	jbe    c0006bbb <f_getlabel+0xd3>
c0006b93:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b9a:	89 e9                	mov    ecx,ebp
c0006b9c:	01 da                	add    edx,ebx
c0006b9e:	c1 e1 10             	shl    ecx,0x10
c0006ba1:	0f b7 c0             	movzx  eax,ax
c0006ba4:	09 c8                	or     eax,ecx
c0006ba6:	b9 04 00 00 00       	mov    ecx,0x4
c0006bab:	e8 01 b0 ff ff       	call   c0001bb1 <put_utf>
c0006bb0:	84 c0                	test   al,al
c0006bb2:	74 0b                	je     c0006bbf <f_getlabel+0xd7>
c0006bb4:	0f b6 c0             	movzx  eax,al
c0006bb7:	01 c3                	add    ebx,eax
c0006bb9:	31 c0                	xor    eax,eax
c0006bbb:	89 c5                	mov    ebp,eax
c0006bbd:	eb ab                	jmp    c0006b6a <f_getlabel+0x82>
c0006bbf:	31 db                	xor    ebx,ebx
c0006bc1:	66 85 ed             	test   bp,bp
c0006bc4:	74 02                	je     c0006bc8 <f_getlabel+0xe0>
c0006bc6:	31 db                	xor    ebx,ebx
c0006bc8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bcf:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006bd3:	e9 a0 00 00 00       	jmp    c0006c78 <f_getlabel+0x190>
c0006bd8:	83 ff 0b             	cmp    edi,0xb
c0006bdb:	74 11                	je     c0006bee <f_getlabel+0x106>
c0006bdd:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006be2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006be6:	8d 79 02             	lea    edi,[ecx+0x2]
c0006be9:	c1 e0 08             	shl    eax,0x8
c0006bec:	09 c2                	or     edx,eax
c0006bee:	0f b7 d2             	movzx  edx,dx
c0006bf1:	50                   	push   eax
c0006bf2:	50                   	push   eax
c0006bf3:	68 b5 01 00 00       	push   0x1b5
c0006bf8:	52                   	push   edx
c0006bf9:	e8 03 17 00 00       	call   c0008301 <ff_oem2uni>
c0006bfe:	83 c4 10             	add    esp,0x10
c0006c01:	66 85 c0             	test   ax,ax
c0006c04:	74 46                	je     c0006c4c <f_getlabel+0x164>
c0006c06:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c0d:	0f b7 c0             	movzx  eax,ax
c0006c10:	01 da                	add    edx,ebx
c0006c12:	b9 04 00 00 00       	mov    ecx,0x4
c0006c17:	e8 95 af ff ff       	call   c0001bb1 <put_utf>
c0006c1c:	84 c0                	test   al,al
c0006c1e:	74 2c                	je     c0006c4c <f_getlabel+0x164>
c0006c20:	0f b6 c0             	movzx  eax,al
c0006c23:	01 c3                	add    ebx,eax
c0006c25:	83 ff 0b             	cmp    edi,0xb
c0006c28:	74 24                	je     c0006c4e <f_getlabel+0x166>
c0006c2a:	89 f9                	mov    ecx,edi
c0006c2c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c30:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c33:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c38:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c41:	e8 9f ae ff ff       	call   c0001ae5 <dbc_1st>
c0006c46:	85 c0                	test   eax,eax
c0006c48:	74 a4                	je     c0006bee <f_getlabel+0x106>
c0006c4a:	eb 8c                	jmp    c0006bd8 <f_getlabel+0xf0>
c0006c4c:	31 db                	xor    ebx,ebx
c0006c4e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c55:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c58:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c5f:	74 17                	je     c0006c78 <f_getlabel+0x190>
c0006c61:	4b                   	dec    ebx
c0006c62:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c65:	74 ee                	je     c0006c55 <f_getlabel+0x16d>
c0006c67:	eb 0f                	jmp    c0006c78 <f_getlabel+0x190>
c0006c69:	83 f8 04             	cmp    eax,0x4
c0006c6c:	75 5c                	jne    c0006cca <f_getlabel+0x1e2>
c0006c6e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c75:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c78:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c80:	74 4a                	je     c0006ccc <f_getlabel+0x1e4>
c0006c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c86:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c89:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c8c:	e8 5e b5 ff ff       	call   c00021ef <move_window>
c0006c91:	89 c6                	mov    esi,eax
c0006c93:	85 c0                	test   eax,eax
c0006c95:	75 35                	jne    c0006ccc <f_getlabel+0x1e4>
c0006c97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c9b:	b8 43 00 00 00       	mov    eax,0x43
c0006ca0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ca2:	80 f9 03             	cmp    cl,0x3
c0006ca5:	74 0f                	je     c0006cb6 <f_getlabel+0x1ce>
c0006ca7:	31 c0                	xor    eax,eax
c0006ca9:	80 f9 04             	cmp    cl,0x4
c0006cac:	0f 94 c0             	sete   al
c0006caf:	48                   	dec    eax
c0006cb0:	83 e0 c3             	and    eax,0xffffffc3
c0006cb3:	83 c0 64             	add    eax,0x64
c0006cb6:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cba:	e8 5f ad ff ff       	call   c0001a1e <ld_dword>
c0006cbf:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cc6:	89 07                	mov    DWORD PTR [edi],eax
c0006cc8:	eb 02                	jmp    c0006ccc <f_getlabel+0x1e4>
c0006cca:	89 c6                	mov    esi,eax
c0006ccc:	83 c4 6c             	add    esp,0x6c
c0006ccf:	89 f0                	mov    eax,esi
c0006cd1:	5b                   	pop    ebx
c0006cd2:	5e                   	pop    esi
c0006cd3:	5f                   	pop    edi
c0006cd4:	5d                   	pop    ebp
c0006cd5:	c3                   	ret    

c0006cd6 <f_setlabel>:
c0006cd6:	56                   	push   esi
c0006cd7:	b9 02 00 00 00       	mov    ecx,0x2
c0006cdc:	53                   	push   ebx
c0006cdd:	83 ec 74             	sub    esp,0x74
c0006ce0:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006ce4:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006ceb:	e8 b1 b7 ff ff       	call   c00024a1 <mount_volume>
c0006cf0:	89 c6                	mov    esi,eax
c0006cf2:	85 c0                	test   eax,eax
c0006cf4:	0f 85 41 02 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006cfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006cfe:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d01:	0f 85 8e 00 00 00    	jne    c0006d95 <f_setlabel+0xbf>
c0006d07:	b9 16 00 00 00       	mov    ecx,0x16
c0006d0c:	31 d2                	xor    edx,edx
c0006d0e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d12:	31 db                	xor    ebx,ebx
c0006d14:	e8 8c ad ff ff       	call   c0001aa5 <mem_set>
c0006d19:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d20:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d23:	0f 86 0a 01 00 00    	jbe    c0006e33 <f_setlabel+0x15d>
c0006d29:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d30:	e8 b6 ad ff ff       	call   c0001aeb <tchar2uni>
c0006d35:	89 c6                	mov    esi,eax
c0006d37:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d3c:	76 2a                	jbe    c0006d68 <f_setlabel+0x92>
c0006d3e:	83 f8 ff             	cmp    eax,0xffffffff
c0006d41:	74 05                	je     c0006d48 <f_setlabel+0x72>
c0006d43:	83 fb 09             	cmp    ebx,0x9
c0006d46:	76 0a                	jbe    c0006d52 <f_setlabel+0x7c>
c0006d48:	be 06 00 00 00       	mov    esi,0x6
c0006d4d:	e9 e9 01 00 00       	jmp    c0006f3b <f_setlabel+0x265>
c0006d52:	89 c2                	mov    edx,eax
c0006d54:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d58:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d5b:	c1 ea 10             	shr    edx,0x10
c0006d5e:	01 c8                	add    eax,ecx
c0006d60:	43                   	inc    ebx
c0006d61:	e8 1d ad ff ff       	call   c0001a83 <st_word>
c0006d66:	eb 04                	jmp    c0006d6c <f_setlabel+0x96>
c0006d68:	85 c0                	test   eax,eax
c0006d6a:	74 dc                	je     c0006d48 <f_setlabel+0x72>
c0006d6c:	89 f2                	mov    edx,esi
c0006d6e:	b8 d7 7e 02 c0       	mov    eax,0xc0027ed7
c0006d73:	e8 5b ad ff ff       	call   c0001ad3 <chk_chr>
c0006d78:	85 c0                	test   eax,eax
c0006d7a:	75 cc                	jne    c0006d48 <f_setlabel+0x72>
c0006d7c:	83 fb 0a             	cmp    ebx,0xa
c0006d7f:	77 c7                	ja     c0006d48 <f_setlabel+0x72>
c0006d81:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d84:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d88:	0f b7 d6             	movzx  edx,si
c0006d8b:	01 c8                	add    eax,ecx
c0006d8d:	43                   	inc    ebx
c0006d8e:	e8 f0 ac ff ff       	call   c0001a83 <st_word>
c0006d93:	eb 84                	jmp    c0006d19 <f_setlabel+0x43>
c0006d95:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d9a:	ba 20 00 00 00       	mov    edx,0x20
c0006d9f:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006da3:	31 db                	xor    ebx,ebx
c0006da5:	e8 fb ac ff ff       	call   c0001aa5 <mem_set>
c0006daa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006db1:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006db4:	76 60                	jbe    c0006e16 <f_setlabel+0x140>
c0006db6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006dbd:	e8 29 ad ff ff       	call   c0001aeb <tchar2uni>
c0006dc2:	3d ff ff 00 00       	cmp    eax,0xffff
c0006dc7:	0f 87 7b ff ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006dcd:	83 ec 0c             	sub    esp,0xc
c0006dd0:	50                   	push   eax
c0006dd1:	e8 97 15 00 00       	call   c000836d <ff_wtoupper>
c0006dd6:	5a                   	pop    edx
c0006dd7:	59                   	pop    ecx
c0006dd8:	68 b5 01 00 00       	push   0x1b5
c0006ddd:	50                   	push   eax
c0006dde:	e8 8e 14 00 00       	call   c0008271 <ff_uni2oem>
c0006de3:	83 c4 10             	add    esp,0x10
c0006de6:	89 c6                	mov    esi,eax
c0006de8:	66 85 c0             	test   ax,ax
c0006deb:	0f 84 57 ff ff ff    	je     c0006d48 <f_setlabel+0x72>
c0006df1:	0f b7 d0             	movzx  edx,ax
c0006df4:	b8 d0 7e 02 c0       	mov    eax,0xc0027ed0
c0006df9:	e8 d5 ac ff ff       	call   c0001ad3 <chk_chr>
c0006dfe:	85 c0                	test   eax,eax
c0006e00:	0f 85 42 ff ff ff    	jne    c0006d48 <f_setlabel+0x72>
c0006e06:	66 81 fe ff 00       	cmp    si,0xff
c0006e0b:	0f 87 14 01 00 00    	ja     c0006f25 <f_setlabel+0x24f>
c0006e11:	e9 fa 00 00 00       	jmp    c0006f10 <f_setlabel+0x23a>
c0006e16:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e1b:	0f 84 27 ff ff ff    	je     c0006d48 <f_setlabel+0x72>
c0006e21:	85 db                	test   ebx,ebx
c0006e23:	74 0e                	je     c0006e33 <f_setlabel+0x15d>
c0006e25:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e28:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e2d:	75 04                	jne    c0006e33 <f_setlabel+0x15d>
c0006e2f:	89 c3                	mov    ebx,eax
c0006e31:	eb ee                	jmp    c0006e21 <f_setlabel+0x14b>
c0006e33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e37:	31 d2                	xor    edx,edx
c0006e39:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e3d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e45:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e49:	e8 1f c1 ff ff       	call   c0002f6d <dir_sdi>
c0006e4e:	89 c6                	mov    esi,eax
c0006e50:	85 c0                	test   eax,eax
c0006e52:	0f 85 e3 00 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006e58:	ba 01 00 00 00       	mov    edx,0x1
c0006e5d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e61:	e8 17 c9 ff ff       	call   c000377d <dir_read>
c0006e66:	85 c0                	test   eax,eax
c0006e68:	75 21                	jne    c0006e8b <f_setlabel+0x1b5>
c0006e6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e6e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e72:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e75:	74 5d                	je     c0006ed4 <f_setlabel+0x1fe>
c0006e77:	85 db                	test   ebx,ebx
c0006e79:	74 0b                	je     c0006e86 <f_setlabel+0x1b0>
c0006e7b:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e80:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e84:	eb 70                	jmp    c0006ef6 <f_setlabel+0x220>
c0006e86:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e89:	eb 70                	jmp    c0006efb <f_setlabel+0x225>
c0006e8b:	83 f8 04             	cmp    eax,0x4
c0006e8e:	75 7c                	jne    c0006f0c <f_setlabel+0x236>
c0006e90:	85 db                	test   ebx,ebx
c0006e92:	0f 84 a3 00 00 00    	je     c0006f3b <f_setlabel+0x265>
c0006e98:	ba 01 00 00 00       	mov    edx,0x1
c0006e9d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ea1:	e8 51 ca ff ff       	call   c00038f7 <dir_alloc>
c0006ea6:	89 c6                	mov    esi,eax
c0006ea8:	85 c0                	test   eax,eax
c0006eaa:	0f 85 8b 00 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006eb0:	31 d2                	xor    edx,edx
c0006eb2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eb6:	b9 20 00 00 00       	mov    ecx,0x20
c0006ebb:	e8 e5 ab ff ff       	call   c0001aa5 <mem_set>
c0006ec0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ec4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ec7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ecb:	75 18                	jne    c0006ee5 <f_setlabel+0x20f>
c0006ecd:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ed0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed4:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ed7:	b9 16 00 00 00       	mov    ecx,0x16
c0006edc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee0:	83 c0 02             	add    eax,0x2
c0006ee3:	eb 9b                	jmp    c0006e80 <f_setlabel+0x1aa>
c0006ee5:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006ee9:	b9 0b 00 00 00       	mov    ecx,0xb
c0006eee:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ef2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ef6:	e8 95 ab ff ff       	call   c0001a90 <mem_cpy>
c0006efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eff:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f07:	e8 0e d4 ff ff       	call   c000431a <sync_fs>
c0006f0c:	89 c6                	mov    esi,eax
c0006f0e:	eb 2b                	jmp    c0006f3b <f_setlabel+0x265>
c0006f10:	83 fb 0a             	cmp    ebx,0xa
c0006f13:	0f 87 2f fe ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006f19:	89 f0                	mov    eax,esi
c0006f1b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f1f:	43                   	inc    ebx
c0006f20:	e9 85 fe ff ff       	jmp    c0006daa <f_setlabel+0xd4>
c0006f25:	83 fb 09             	cmp    ebx,0x9
c0006f28:	0f 87 1a fe ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006f2e:	89 f0                	mov    eax,esi
c0006f30:	66 c1 e8 08          	shr    ax,0x8
c0006f34:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f38:	43                   	inc    ebx
c0006f39:	eb de                	jmp    c0006f19 <f_setlabel+0x243>
c0006f3b:	89 f0                	mov    eax,esi
c0006f3d:	83 c4 74             	add    esp,0x74
c0006f40:	5b                   	pop    ebx
c0006f41:	5e                   	pop    esi
c0006f42:	c3                   	ret    

c0006f43 <f_forward>:
c0006f43:	55                   	push   ebp
c0006f44:	57                   	push   edi
c0006f45:	56                   	push   esi
c0006f46:	53                   	push   ebx
c0006f47:	83 ec 2c             	sub    esp,0x2c
c0006f4a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f4e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f58:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f5c:	89 d8                	mov    eax,ebx
c0006f5e:	e8 b1 b1 ff ff       	call   c0002114 <validate>
c0006f63:	89 c5                	mov    ebp,eax
c0006f65:	85 c0                	test   eax,eax
c0006f67:	0f 85 aa 01 00 00    	jne    c0007117 <f_forward+0x1d4>
c0006f6d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f71:	85 ed                	test   ebp,ebp
c0006f73:	0f 85 9e 01 00 00    	jne    c0007117 <f_forward+0x1d4>
c0006f79:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f7d:	0f 84 8f 01 00 00    	je     c0007112 <f_forward+0x1cf>
c0006f83:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f86:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f89:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f8c:	bf 00 00 00 00       	mov    edi,0x0
c0006f91:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f94:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f98:	89 d1                	mov    ecx,edx
c0006f9a:	19 f9                	sbb    ecx,edi
c0006f9c:	0f 83 cf 00 00 00    	jae    c0007071 <f_forward+0x12e>
c0006fa2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006fa6:	e9 c6 00 00 00       	jmp    c0007071 <f_forward+0x12e>
c0006fab:	50                   	push   eax
c0006fac:	50                   	push   eax
c0006fad:	6a 00                	push   0x0
c0006faf:	6a 00                	push   0x0
c0006fb1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fb5:	83 c4 10             	add    esp,0x10
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	0f 84 57 01 00 00    	je     c0007117 <f_forward+0x1d4>
c0006fc0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fc3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fc7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fca:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fce:	89 d7                	mov    edi,edx
c0006fd0:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fd3:	89 c6                	mov    esi,eax
c0006fd5:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fd9:	21 ce                	and    esi,ecx
c0006fdb:	89 c1                	mov    ecx,eax
c0006fdd:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fe3:	0f 84 98 00 00 00    	je     c0007081 <f_forward+0x13e>
c0006fe9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fed:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006ff0:	89 c8                	mov    eax,ecx
c0006ff2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006ff6:	e8 af ac ff ff       	call   c0001caa <clst2sect>
c0006ffb:	89 d7                	mov    edi,edx
c0006ffd:	09 c7                	or     edi,eax
c0006fff:	0f 84 9e 00 00 00    	je     c00070a3 <f_forward+0x160>
c0007005:	31 ff                	xor    edi,edi
c0007007:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000700a:	01 c6                	add    esi,eax
c000700c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007010:	11 d7                	adc    edi,edx
c0007012:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007015:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007018:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000701c:	39 fa                	cmp    edx,edi
c000701e:	0f 85 a2 00 00 00    	jne    c00070c6 <f_forward+0x183>
c0007024:	39 f0                	cmp    eax,esi
c0007026:	0f 85 9a 00 00 00    	jne    c00070c6 <f_forward+0x183>
c000702c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000702f:	ba 00 02 00 00       	mov    edx,0x200
c0007034:	25 ff 01 00 00       	and    eax,0x1ff
c0007039:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000703d:	29 c2                	sub    edx,eax
c000703f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007042:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007045:	39 d1                	cmp    ecx,edx
c0007047:	76 02                	jbe    c000704b <f_forward+0x108>
c0007049:	89 d1                	mov    ecx,edx
c000704b:	8d 73 50             	lea    esi,[ebx+0x50]
c000704e:	52                   	push   edx
c000704f:	01 c6                	add    esi,eax
c0007051:	52                   	push   edx
c0007052:	51                   	push   ecx
c0007053:	56                   	push   esi
c0007054:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007058:	83 c4 10             	add    esp,0x10
c000705b:	85 c0                	test   eax,eax
c000705d:	74 44                	je     c00070a3 <f_forward+0x160>
c000705f:	31 ff                	xor    edi,edi
c0007061:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007064:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007067:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000706b:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c000706f:	01 07                	add    DWORD PTR [edi],eax
c0007071:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007076:	0f 85 2f ff ff ff    	jne    c0006fab <f_forward+0x68>
c000707c:	e9 96 00 00 00       	jmp    c0007117 <f_forward+0x1d4>
c0007081:	85 f6                	test   esi,esi
c0007083:	0f 85 60 ff ff ff    	jne    c0006fe9 <f_forward+0xa6>
c0007089:	89 d7                	mov    edi,edx
c000708b:	09 c7                	or     edi,eax
c000708d:	75 05                	jne    c0007094 <f_forward+0x151>
c000708f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007092:	eb 0a                	jmp    c000709e <f_forward+0x15b>
c0007094:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007097:	89 d8                	mov    eax,ebx
c0007099:	e8 d9 bc ff ff       	call   c0002d77 <get_fat>
c000709e:	83 f8 01             	cmp    eax,0x1
c00070a1:	77 0b                	ja     c00070ae <f_forward+0x16b>
c00070a3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070a7:	bd 02 00 00 00       	mov    ebp,0x2
c00070ac:	eb 69                	jmp    c0007117 <f_forward+0x1d4>
c00070ae:	83 f8 ff             	cmp    eax,0xffffffff
c00070b1:	75 0b                	jne    c00070be <f_forward+0x17b>
c00070b3:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070b7:	bd 01 00 00 00       	mov    ebp,0x1
c00070bc:	eb 59                	jmp    c0007117 <f_forward+0x1d4>
c00070be:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070c1:	e9 23 ff ff ff       	jmp    c0006fe9 <f_forward+0xa6>
c00070c6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070ca:	79 20                	jns    c00070ec <f_forward+0x1a9>
c00070cc:	83 ec 0c             	sub    esp,0xc
c00070cf:	6a 01                	push   0x1
c00070d1:	52                   	push   edx
c00070d2:	50                   	push   eax
c00070d3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070d7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070db:	50                   	push   eax
c00070dc:	e8 fb a8 ff ff       	call   c00019dc <disk_write>
c00070e1:	83 c4 20             	add    esp,0x20
c00070e4:	85 c0                	test   eax,eax
c00070e6:	75 cb                	jne    c00070b3 <f_forward+0x170>
c00070e8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070ec:	83 ec 0c             	sub    esp,0xc
c00070ef:	6a 01                	push   0x1
c00070f1:	57                   	push   edi
c00070f2:	56                   	push   esi
c00070f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070fb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070ff:	50                   	push   eax
c0007100:	e8 c1 a8 ff ff       	call   c00019c6 <disk_read>
c0007105:	83 c4 20             	add    esp,0x20
c0007108:	85 c0                	test   eax,eax
c000710a:	0f 84 1c ff ff ff    	je     c000702c <f_forward+0xe9>
c0007110:	eb a1                	jmp    c00070b3 <f_forward+0x170>
c0007112:	bd 07 00 00 00       	mov    ebp,0x7
c0007117:	83 c4 2c             	add    esp,0x2c
c000711a:	89 e8                	mov    eax,ebp
c000711c:	5b                   	pop    ebx
c000711d:	5e                   	pop    esi
c000711e:	5f                   	pop    edi
c000711f:	5d                   	pop    ebp
c0007120:	c3                   	ret    

c0007121 <f_mkfs>:
c0007121:	55                   	push   ebp
c0007122:	57                   	push   edi
c0007123:	56                   	push   esi
c0007124:	53                   	push   ebx
c0007125:	bb 0b 00 00 00       	mov    ebx,0xb
c000712a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007130:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007137:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000713e:	e8 b0 ae ff ff       	call   c0001ff3 <get_ldnumber>
c0007143:	85 c0                	test   eax,eax
c0007145:	0f 88 ec 10 00 00    	js     c0008237 <f_mkfs+0x1116>
c000714b:	8b 14 85 80 cb 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3480]
c0007152:	85 d2                	test   edx,edx
c0007154:	74 03                	je     c0007159 <f_mkfs+0x38>
c0007156:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007159:	85 f6                	test   esi,esi
c000715b:	75 05                	jne    c0007162 <f_mkfs+0x41>
c000715d:	be c0 7e 02 c0       	mov    esi,0xc0027ec0
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	0f b6 c0             	movzx  eax,al
c0007168:	bb 03 00 00 00       	mov    ebx,0x3
c000716d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007171:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007175:	e8 49 a8 ff ff       	call   c00019c3 <disk_initialize>
c000717a:	83 c4 10             	add    esp,0x10
c000717d:	a8 01                	test   al,0x1
c000717f:	0f 85 b2 10 00 00    	jne    c0008237 <f_mkfs+0x1116>
c0007185:	bb 0a 00 00 00       	mov    ebx,0xa
c000718a:	a8 04                	test   al,0x4
c000718c:	0f 85 a5 10 00 00    	jne    c0008237 <f_mkfs+0x1116>
c0007192:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007195:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007199:	85 c0                	test   eax,eax
c000719b:	75 20                	jne    c00071bd <f_mkfs+0x9c>
c000719d:	51                   	push   ecx
c000719e:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071a2:	50                   	push   eax
c00071a3:	6a 03                	push   0x3
c00071a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071a9:	e8 44 a8 ff ff       	call   c00019f2 <disk_ioctl>
c00071ae:	83 c4 10             	add    esp,0x10
c00071b1:	85 c0                	test   eax,eax
c00071b3:	74 08                	je     c00071bd <f_mkfs+0x9c>
c00071b5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071bd:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071c1:	8d 42 ff             	lea    eax,[edx-0x1]
c00071c4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071c9:	77 04                	ja     c00071cf <f_mkfs+0xae>
c00071cb:	85 c2                	test   edx,eax
c00071cd:	74 08                	je     c00071d7 <f_mkfs+0xb6>
c00071cf:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071d7:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071da:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00071de:	48                   	dec    eax
c00071df:	3c 01                	cmp    al,0x1
c00071e1:	76 05                	jbe    c00071e8 <f_mkfs+0xc7>
c00071e3:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00071e8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071ef:	48                   	dec    eax
c00071f0:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071f5:	77 07                	ja     c00071fe <f_mkfs+0xdd>
c00071f7:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071fc:	74 08                	je     c0007206 <f_mkfs+0xe5>
c00071fe:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007206:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007209:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000720f:	77 07                	ja     c0007218 <f_mkfs+0xf7>
c0007211:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007214:	85 d8                	test   eax,ebx
c0007216:	74 02                	je     c000721a <f_mkfs+0xf9>
c0007218:	31 db                	xor    ebx,ebx
c000721a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007225:	77 0a                	ja     c0007231 <f_mkfs+0x110>
c0007227:	bb 11 00 00 00       	mov    ebx,0x11
c000722c:	e9 06 10 00 00       	jmp    c0008237 <f_mkfs+0x1116>
c0007231:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007238:	8b 36                	mov    esi,DWORD PTR [esi]
c000723a:	85 ed                	test   ebp,ebp
c000723c:	75 1e                	jne    c000725c <f_mkfs+0x13b>
c000723e:	83 ec 0c             	sub    esp,0xc
c0007241:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007248:	25 00 fe ff ff       	and    eax,0xfffffe00
c000724d:	50                   	push   eax
c000724e:	e8 f1 0f 00 00       	call   c0008244 <ff_memalloc>
c0007253:	83 c4 10             	add    esp,0x10
c0007256:	89 c5                	mov    ebp,eax
c0007258:	85 c0                	test   eax,eax
c000725a:	74 cb                	je     c0007227 <f_mkfs+0x106>
c000725c:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007264:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000726c:	52                   	push   edx
c000726d:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007271:	50                   	push   eax
c0007272:	6a 01                	push   0x1
c0007274:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007278:	e8 75 a7 ff ff       	call   c00019f2 <disk_ioctl>
c000727d:	83 c4 10             	add    esp,0x10
c0007280:	85 c0                	test   eax,eax
c0007282:	0f 85 4a 0f 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007288:	89 f1                	mov    ecx,esi
c000728a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007292:	83 e1 0f             	and    ecx,0xf
c0007295:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000729d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072a1:	83 e6 08             	and    esi,0x8
c00072a4:	75 56                	jne    c00072fc <f_mkfs+0x1db>
c00072a6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072aa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072ae:	83 ff 00             	cmp    edi,0x0
c00072b1:	76 20                	jbe    c00072d3 <f_mkfs+0x1b2>
c00072b3:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072b8:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072c0:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072c6:	83 d7 ff             	adc    edi,0xffffffff
c00072c9:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072cd:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072d1:	eb 21                	jmp    c00072f4 <f_mkfs+0x1d3>
c00072d3:	ba 3f 00 00 00       	mov    edx,0x3f
c00072d8:	39 f2                	cmp    edx,esi
c00072da:	19 f8                	sbb    eax,edi
c00072dc:	73 1e                	jae    c00072fc <f_mkfs+0x1db>
c00072de:	83 c6 c1             	add    esi,0xffffffc1
c00072e1:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072e9:	83 d7 ff             	adc    edi,0xffffffff
c00072ec:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072f0:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072f4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072fc:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007300:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007304:	89 04 24             	mov    DWORD PTR [esp],eax
c0007307:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000730b:	31 c0                	xor    eax,eax
c000730d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007312:	89 c7                	mov    edi,eax
c0007314:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007317:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000731b:	0f 83 c5 0a 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c0007321:	89 df                	mov    edi,ebx
c0007323:	c1 ef 09             	shr    edi,0x9
c0007326:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000732a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007331:	c1 ef 09             	shr    edi,0x9
c0007334:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007339:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000733d:	74 29                	je     c0007368 <f_mkfs+0x247>
c000733f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007345:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000734a:	0f 97 c2             	seta   dl
c000734d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007350:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007354:	0f 92 c0             	setb   al
c0007357:	08 c2                	or     dl,al
c0007359:	75 5b                	jne    c00073b6 <f_mkfs+0x295>
c000735b:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000735f:	83 e0 07             	and    eax,0x7
c0007362:	3c 04                	cmp    al,0x4
c0007364:	74 50                	je     c00073b6 <f_mkfs+0x295>
c0007366:	eb 1b                	jmp    c0007383 <f_mkfs+0x262>
c0007368:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000736d:	0f 87 73 0a 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c0007373:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007379:	76 08                	jbe    c0007383 <f_mkfs+0x262>
c000737b:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007383:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007387:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000738b:	83 e0 01             	and    eax,0x1
c000738e:	80 e1 02             	and    cl,0x2
c0007391:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007395:	74 0d                	je     c00073a4 <f_mkfs+0x283>
c0007397:	84 c0                	test   al,al
c0007399:	0f 84 53 09 00 00    	je     c0007cf2 <f_mkfs+0xbd1>
c000739f:	e9 12 08 00 00       	jmp    c0007bb6 <f_mkfs+0xa95>
c00073a4:	bb 13 00 00 00       	mov    ebx,0x13
c00073a9:	84 c0                	test   al,al
c00073ab:	0f 85 05 08 00 00    	jne    c0007bb6 <f_mkfs+0xa95>
c00073b1:	e9 39 0e 00 00       	jmp    c00081ef <f_mkfs+0x10ce>
c00073b6:	31 c0                	xor    eax,eax
c00073b8:	ba ff 0f 00 00       	mov    edx,0xfff
c00073bd:	89 c7                	mov    edi,eax
c00073bf:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073c2:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073c6:	0f 83 1a 0a 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c00073cc:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073d2:	77 39                	ja     c000740d <f_mkfs+0x2ec>
c00073d4:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073d9:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073e1:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073e4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073e8:	73 08                	jae    c00073f2 <f_mkfs+0x2d1>
c00073ea:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073f2:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073f7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073fa:	b8 00 00 00 00       	mov    eax,0x0
c00073ff:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007403:	73 08                	jae    c000740d <f_mkfs+0x2ec>
c0007405:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000740d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007411:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007415:	83 c0 20             	add    eax,0x20
c0007418:	83 d2 00             	adc    edx,0x0
c000741b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000741f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007423:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007427:	31 d2                	xor    edx,edx
c0007429:	31 ff                	xor    edi,edi
c000742b:	52                   	push   edx
c000742c:	89 fb                	mov    ebx,edi
c000742e:	50                   	push   eax
c000742f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007433:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007437:	e8 10 e1 01 00       	call   c002554c <__udivdi3>
c000743c:	83 c4 10             	add    esp,0x10
c000743f:	c1 e0 02             	shl    eax,0x2
c0007442:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007446:	05 07 02 00 00       	add    eax,0x207
c000744b:	89 f1                	mov    ecx,esi
c000744d:	c1 e8 09             	shr    eax,0x9
c0007450:	83 c1 ff             	add    ecx,0xffffffff
c0007453:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007457:	83 d3 ff             	adc    ebx,0xffffffff
c000745a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000745e:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007462:	31 d2                	xor    edx,edx
c0007464:	01 c8                	add    eax,ecx
c0007466:	11 da                	adc    edx,ebx
c0007468:	89 c1                	mov    ecx,eax
c000746a:	f7 de                	neg    esi
c000746c:	89 d0                	mov    eax,edx
c000746e:	83 d7 00             	adc    edi,0x0
c0007471:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007475:	f7 df                	neg    edi
c0007477:	21 f1                	and    ecx,esi
c0007479:	21 f8                	and    eax,edi
c000747b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000747f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007483:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007487:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000748b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000748f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007492:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007496:	0f ac d0 01          	shrd   eax,edx,0x1
c000749a:	89 df                	mov    edi,ebx
c000749c:	d1 ea                	shr    edx,1
c000749e:	39 c1                	cmp    ecx,eax
c00074a0:	19 d7                	sbb    edi,edx
c00074a2:	0f 83 3e 09 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c00074a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074ac:	31 d2                	xor    edx,edx
c00074ae:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074b6:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074ba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074bd:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074c1:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074c5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074cd:	83 f8 0f             	cmp    eax,0xf
c00074d0:	0f 86 10 09 00 00    	jbe    c0007de6 <f_mkfs+0xcc5>
c00074d6:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074de:	0f 87 02 09 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c00074e4:	31 d2                	xor    edx,edx
c00074e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074ea:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074f2:	83 c0 07             	add    eax,0x7
c00074f5:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074fd:	c1 e8 03             	shr    eax,0x3
c0007500:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007507:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000750b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000750f:	c1 e0 09             	shl    eax,0x9
c0007512:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007516:	48                   	dec    eax
c0007517:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000751b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000751f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007523:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007527:	31 d2                	xor    edx,edx
c0007529:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000752d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007534:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007538:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000753d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007541:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007545:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007549:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000754d:	31 ff                	xor    edi,edi
c000754f:	31 f6                	xor    esi,esi
c0007551:	31 db                	xor    ebx,ebx
c0007553:	85 ff                	test   edi,edi
c0007555:	74 05                	je     c000755c <f_mkfs+0x43b>
c0007557:	4f                   	dec    edi
c0007558:	74 44                	je     c000759e <f_mkfs+0x47d>
c000755a:	eb 4f                	jmp    c00075ab <f_mkfs+0x48a>
c000755c:	83 ec 0c             	sub    esp,0xc
c000755f:	0f b7 c3             	movzx  eax,bx
c0007562:	50                   	push   eax
c0007563:	e8 05 0e 00 00       	call   c000836d <ff_wtoupper>
c0007568:	83 c4 10             	add    esp,0x10
c000756b:	89 c1                	mov    ecx,eax
c000756d:	8d 53 01             	lea    edx,[ebx+0x1]
c0007570:	66 39 c3             	cmp    bx,ax
c0007573:	75 3e                	jne    c00075b3 <f_mkfs+0x492>
c0007575:	be 01 00 00 00       	mov    esi,0x1
c000757a:	89 df                	mov    edi,ebx
c000757c:	66 01 f7             	add    di,si
c000757f:	75 07                	jne    c0007588 <f_mkfs+0x467>
c0007581:	83 fe 7f             	cmp    esi,0x7f
c0007584:	77 31                	ja     c00075b7 <f_mkfs+0x496>
c0007586:	eb 16                	jmp    c000759e <f_mkfs+0x47d>
c0007588:	83 ec 0c             	sub    esp,0xc
c000758b:	0f b7 ff             	movzx  edi,di
c000758e:	57                   	push   edi
c000758f:	e8 d9 0d 00 00       	call   c000836d <ff_wtoupper>
c0007594:	83 c4 10             	add    esp,0x10
c0007597:	39 c7                	cmp    edi,eax
c0007599:	75 e6                	jne    c0007581 <f_mkfs+0x460>
c000759b:	46                   	inc    esi
c000759c:	eb dc                	jmp    c000757a <f_mkfs+0x459>
c000759e:	31 c0                	xor    eax,eax
c00075a0:	89 d9                	mov    ecx,ebx
c00075a2:	4e                   	dec    esi
c00075a3:	0f 95 c0             	setne  al
c00075a6:	43                   	inc    ebx
c00075a7:	89 c7                	mov    edi,eax
c00075a9:	eb 14                	jmp    c00075bf <f_mkfs+0x49e>
c00075ab:	89 f1                	mov    ecx,esi
c00075ad:	01 f3                	add    ebx,esi
c00075af:	31 ff                	xor    edi,edi
c00075b1:	eb 0c                	jmp    c00075bf <f_mkfs+0x49e>
c00075b3:	89 d3                	mov    ebx,edx
c00075b5:	eb 08                	jmp    c00075bf <f_mkfs+0x49e>
c00075b7:	bf 02 00 00 00       	mov    edi,0x2
c00075bc:	83 c9 ff             	or     ecx,0xffffffff
c00075bf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075c6:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075ca:	0f b6 c1             	movzx  eax,cl
c00075cd:	e8 3a a9 ff ff       	call   c0001f0c <xsum32>
c00075d2:	66 c1 e9 08          	shr    cx,0x8
c00075d6:	89 c2                	mov    edx,eax
c00075d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075db:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075df:	0f b7 c1             	movzx  eax,cx
c00075e2:	e8 25 a9 ff ff       	call   c0001f0c <xsum32>
c00075e7:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075ec:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075f0:	66 85 db             	test   bx,bx
c00075f3:	74 1f                	je     c0007614 <f_mkfs+0x4f3>
c00075f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075f8:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075ff:	83 c0 02             	add    eax,0x2
c0007602:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007608:	39 c2                	cmp    edx,eax
c000760a:	74 08                	je     c0007614 <f_mkfs+0x4f3>
c000760c:	89 04 24             	mov    DWORD PTR [esp],eax
c000760f:	e9 3f ff ff ff       	jmp    c0007553 <f_mkfs+0x432>
c0007614:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007617:	83 ec 0c             	sub    esp,0xc
c000761a:	05 01 02 00 00       	add    eax,0x201
c000761f:	c1 e8 09             	shr    eax,0x9
c0007622:	50                   	push   eax
c0007623:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007627:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000762b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000762f:	55                   	push   ebp
c0007630:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007634:	e8 a3 a3 ff ff       	call   c00019dc <disk_write>
c0007639:	83 c4 20             	add    esp,0x20
c000763c:	85 c0                	test   eax,eax
c000763e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007641:	0f 85 8b 0b 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007647:	89 d0                	mov    eax,edx
c0007649:	31 d2                	xor    edx,edx
c000764b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000764f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007653:	66 85 db             	test   bx,bx
c0007656:	74 04                	je     c000765c <f_mkfs+0x53b>
c0007658:	31 c0                	xor    eax,eax
c000765a:	eb b0                	jmp    c000760c <f_mkfs+0x4eb>
c000765c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007660:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007664:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007668:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c000766e:	31 d2                	xor    edx,edx
c0007670:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c000767b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000767f:	c1 eb 09             	shr    ebx,0x9
c0007682:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007689:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000768d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007691:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007695:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007699:	8d 70 01             	lea    esi,[eax+0x1]
c000769c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076a4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076ab:	31 d2                	xor    edx,edx
c00076ad:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00076b5:	89 c1                	mov    ecx,eax
c00076b7:	89 e8                	mov    eax,ebp
c00076b9:	e8 e7 a3 ff ff       	call   c0001aa5 <mem_set>
c00076be:	31 c0                	xor    eax,eax
c00076c0:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076c3:	76 10                	jbe    c00076d5 <f_mkfs+0x5b4>
c00076c5:	83 fe 07             	cmp    esi,0x7
c00076c8:	76 0b                	jbe    c00076d5 <f_mkfs+0x5b4>
c00076ca:	40                   	inc    eax
c00076cb:	83 ee 08             	sub    esi,0x8
c00076ce:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076d3:	eb eb                	jmp    c00076c0 <f_mkfs+0x59f>
c00076d5:	b2 01                	mov    dl,0x1
c00076d7:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076db:	85 f6                	test   esi,esi
c00076dd:	74 0c                	je     c00076eb <f_mkfs+0x5ca>
c00076df:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076e2:	76 07                	jbe    c00076eb <f_mkfs+0x5ca>
c00076e4:	08 11                	or     BYTE PTR [ecx],dl
c00076e6:	4e                   	dec    esi
c00076e7:	d1 e2                	shl    edx,1
c00076e9:	eb f0                	jmp    c00076db <f_mkfs+0x5ba>
c00076eb:	89 df                	mov    edi,ebx
c00076ed:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076f1:	76 04                	jbe    c00076f7 <f_mkfs+0x5d6>
c00076f3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076f7:	83 ec 0c             	sub    esp,0xc
c00076fa:	57                   	push   edi
c00076fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007703:	55                   	push   ebp
c0007704:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007708:	e8 cf a2 ff ff       	call   c00019dc <disk_write>
c000770d:	83 c4 20             	add    esp,0x20
c0007710:	85 c0                	test   eax,eax
c0007712:	0f 85 ba 0a 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007718:	31 d2                	xor    edx,edx
c000771a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000771e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007722:	29 fb                	sub    ebx,edi
c0007724:	0f 85 7a ff ff ff    	jne    c00076a4 <f_mkfs+0x583>
c000772a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000772e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007736:	31 f6                	xor    esi,esi
c0007738:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000773c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000773f:	31 d2                	xor    edx,edx
c0007741:	89 e8                	mov    eax,ebp
c0007743:	e8 5d a3 ff ff       	call   c0001aa5 <mem_set>
c0007748:	31 c9                	xor    ecx,ecx
c000774a:	85 db                	test   ebx,ebx
c000774c:	75 40                	jne    c000778e <f_mkfs+0x66d>
c000774e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007753:	89 e8                	mov    eax,ebp
c0007755:	bb 02 00 00 00       	mov    ebx,0x2
c000775a:	e8 28 a3 ff ff       	call   c0001a87 <st_dword>
c000775f:	8d 45 04             	lea    eax,[ebp+0x4]
c0007762:	83 ca ff             	or     edx,0xffffffff
c0007765:	e8 1d a3 ff ff       	call   c0001a87 <st_dword>
c000776a:	b9 08 00 00 00       	mov    ecx,0x8
c000776f:	eb 1d                	jmp    c000778e <f_mkfs+0x66d>
c0007771:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007774:	76 3b                	jbe    c00077b1 <f_mkfs+0x690>
c0007776:	43                   	inc    ebx
c0007777:	83 fe 01             	cmp    esi,0x1
c000777a:	89 da                	mov    edx,ebx
c000777c:	77 03                	ja     c0007781 <f_mkfs+0x660>
c000777e:	83 ca ff             	or     edx,0xffffffff
c0007781:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007785:	4e                   	dec    esi
c0007786:	e8 fc a2 ff ff       	call   c0001a87 <st_dword>
c000778b:	83 c1 04             	add    ecx,0x4
c000778e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007792:	85 f6                	test   esi,esi
c0007794:	75 db                	jne    c0007771 <f_mkfs+0x650>
c0007796:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c000779b:	77 14                	ja     c00077b1 <f_mkfs+0x690>
c000779d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077a1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077a8:	85 f6                	test   esi,esi
c00077aa:	74 05                	je     c00077b1 <f_mkfs+0x690>
c00077ac:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077af:	77 dd                	ja     c000778e <f_mkfs+0x66d>
c00077b1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077b5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077b9:	39 cf                	cmp    edi,ecx
c00077bb:	76 02                	jbe    c00077bf <f_mkfs+0x69e>
c00077bd:	89 cf                	mov    edi,ecx
c00077bf:	83 ec 0c             	sub    esp,0xc
c00077c2:	57                   	push   edi
c00077c3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077c7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077cb:	55                   	push   ebp
c00077cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077d0:	e8 07 a2 ff ff       	call   c00019dc <disk_write>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	85 c0                	test   eax,eax
c00077da:	0f 85 f2 09 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c00077e0:	31 d2                	xor    edx,edx
c00077e2:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00077e6:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c00077ea:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c00077ee:	0f 85 48 ff ff ff    	jne    c000773c <f_mkfs+0x61b>
c00077f4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077f7:	31 d2                	xor    edx,edx
c00077f9:	89 e8                	mov    eax,ebp
c00077fb:	31 ff                	xor    edi,edi
c00077fd:	e8 a3 a2 ff ff       	call   c0001aa5 <mem_set>
c0007802:	8d 45 34             	lea    eax,[ebp+0x34]
c0007805:	ba 02 00 00 00       	mov    edx,0x2
c000780a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000780e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007812:	e8 70 a2 ff ff       	call   c0001a87 <st_dword>
c0007817:	8d 45 38             	lea    eax,[ebp+0x38]
c000781a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000781e:	e8 64 a2 ff ff       	call   c0001a87 <st_dword>
c0007823:	8d 45 44             	lea    eax,[ebp+0x44]
c0007826:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000782a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c000782e:	e8 54 a2 ff ff       	call   c0001a87 <st_dword>
c0007833:	8d 45 54             	lea    eax,[ebp+0x54]
c0007836:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000783a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000783e:	83 c2 02             	add    edx,0x2
c0007841:	e8 41 a2 ff ff       	call   c0001a87 <st_dword>
c0007846:	8d 45 58             	lea    eax,[ebp+0x58]
c0007849:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c000784d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007851:	e8 31 a2 ff ff       	call   c0001a87 <st_dword>
c0007856:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000785a:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000785f:	89 c6                	mov    esi,eax
c0007861:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007865:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007869:	89 04 24             	mov    DWORD PTR [esp],eax
c000786c:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007870:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007873:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007877:	39 cb                	cmp    ebx,ecx
c0007879:	76 02                	jbe    c000787d <f_mkfs+0x75c>
c000787b:	89 cb                	mov    ebx,ecx
c000787d:	83 ec 0c             	sub    esp,0xc
c0007880:	53                   	push   ebx
c0007881:	57                   	push   edi
c0007882:	56                   	push   esi
c0007883:	55                   	push   ebp
c0007884:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007888:	e8 4f a1 ff ff       	call   c00019dc <disk_write>
c000788d:	83 c4 20             	add    esp,0x20
c0007890:	85 c0                	test   eax,eax
c0007892:	0f 85 3a 09 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007898:	31 d2                	xor    edx,edx
c000789a:	b9 00 02 00 00       	mov    ecx,0x200
c000789f:	89 e8                	mov    eax,ebp
c00078a1:	e8 ff a1 ff ff       	call   c0001aa5 <mem_set>
c00078a6:	31 d2                	xor    edx,edx
c00078a8:	01 de                	add    esi,ebx
c00078aa:	11 d7                	adc    edi,edx
c00078ac:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078af:	75 bf                	jne    c0007870 <f_mkfs+0x74f>
c00078b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078b5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078b9:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078c1:	b9 00 02 00 00       	mov    ecx,0x200
c00078c6:	31 d2                	xor    edx,edx
c00078c8:	89 e8                	mov    eax,ebp
c00078ca:	e8 d6 a1 ff ff       	call   c0001aa5 <mem_set>
c00078cf:	b9 0b 00 00 00       	mov    ecx,0xb
c00078d4:	ba a0 7f 02 c0       	mov    edx,0xc0027fa0
c00078d9:	89 e8                	mov    eax,ebp
c00078db:	e8 b0 a1 ff ff       	call   c0001a90 <mem_cpy>
c00078e0:	8d 45 40             	lea    eax,[ebp+0x40]
c00078e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078e7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078eb:	e8 9a a1 ff ff       	call   c0001a8a <st_qword>
c00078f0:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078f4:	8d 45 48             	lea    eax,[ebp+0x48]
c00078f7:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078fb:	e8 8a a1 ff ff       	call   c0001a8a <st_qword>
c0007900:	8d 45 50             	lea    eax,[ebp+0x50]
c0007903:	ba 20 00 00 00       	mov    edx,0x20
c0007908:	e8 7a a1 ff ff       	call   c0001a87 <st_dword>
c000790d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007911:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007915:	e8 6d a1 ff ff       	call   c0001a87 <st_dword>
c000791a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000791e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007922:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007926:	e8 5c a1 ff ff       	call   c0001a87 <st_dword>
c000792b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c000792e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007932:	e8 50 a1 ff ff       	call   c0001a87 <st_dword>
c0007937:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000793b:	8d 50 02             	lea    edx,[eax+0x2]
c000793e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007941:	e8 41 a1 ff ff       	call   c0001a87 <st_dword>
c0007946:	8d 45 64             	lea    eax,[ebp+0x64]
c0007949:	ba 00 00 21 50       	mov    edx,0x50210000
c000794e:	e8 34 a1 ff ff       	call   c0001a87 <st_dword>
c0007953:	8d 45 68             	lea    eax,[ebp+0x68]
c0007956:	ba 00 01 00 00       	mov    edx,0x100
c000795b:	e8 23 a1 ff ff       	call   c0001a83 <st_word>
c0007960:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007964:	b8 0a 00 00 00       	mov    eax,0xa
c0007969:	48                   	dec    eax
c000796a:	74 05                	je     c0007971 <f_mkfs+0x850>
c000796c:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c000796f:	eb f8                	jmp    c0007969 <f_mkfs+0x848>
c0007971:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007975:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007979:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000797d:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007981:	74 05                	je     c0007988 <f_mkfs+0x867>
c0007983:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007986:	eb f5                	jmp    c000797d <f_mkfs+0x85c>
c0007988:	8d 45 78             	lea    eax,[ebp+0x78]
c000798b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007990:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007996:	31 db                	xor    ebx,ebx
c0007998:	e8 e6 a0 ff ff       	call   c0001a83 <st_word>
c000799d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079a3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00079ab:	e8 d3 a0 ff ff       	call   c0001a83 <st_word>
c00079b0:	31 c9                	xor    ecx,ecx
c00079b2:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079b5:	83 f8 01             	cmp    eax,0x1
c00079b8:	76 13                	jbe    c00079cd <f_mkfs+0x8ac>
c00079ba:	83 f9 70             	cmp    ecx,0x70
c00079bd:	74 0e                	je     c00079cd <f_mkfs+0x8ac>
c00079bf:	89 da                	mov    edx,ebx
c00079c1:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079c6:	e8 41 a5 ff ff       	call   c0001f0c <xsum32>
c00079cb:	89 c3                	mov    ebx,eax
c00079cd:	41                   	inc    ecx
c00079ce:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079d4:	75 dc                	jne    c00079b2 <f_mkfs+0x891>
c00079d6:	89 f0                	mov    eax,esi
c00079d8:	89 fa                	mov    edx,edi
c00079da:	83 c0 01             	add    eax,0x1
c00079dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079e1:	83 d2 00             	adc    edx,0x0
c00079e4:	83 ec 0c             	sub    esp,0xc
c00079e7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00079eb:	6a 01                	push   0x1
c00079ed:	57                   	push   edi
c00079ee:	56                   	push   esi
c00079ef:	55                   	push   ebp
c00079f0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079f4:	e8 e3 9f ff ff       	call   c00019dc <disk_write>
c00079f9:	83 c4 20             	add    esp,0x20
c00079fc:	85 c0                	test   eax,eax
c00079fe:	0f 85 ce 07 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007a04:	31 d2                	xor    edx,edx
c0007a06:	b9 00 02 00 00       	mov    ecx,0x200
c0007a0b:	89 e8                	mov    eax,ebp
c0007a0d:	e8 93 a0 ff ff       	call   c0001aa5 <mem_set>
c0007a12:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a17:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a1a:	e8 64 a0 ff ff       	call   c0001a83 <st_word>
c0007a1f:	89 f0                	mov    eax,esi
c0007a21:	89 fa                	mov    edx,edi
c0007a23:	83 c0 09             	add    eax,0x9
c0007a26:	83 d2 00             	adc    edx,0x0
c0007a29:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a2c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a30:	31 c9                	xor    ecx,ecx
c0007a32:	41                   	inc    ecx
c0007a33:	89 da                	mov    edx,ebx
c0007a35:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a3a:	e8 cd a4 ff ff       	call   c0001f0c <xsum32>
c0007a3f:	89 c3                	mov    ebx,eax
c0007a41:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a47:	75 e9                	jne    c0007a32 <f_mkfs+0x911>
c0007a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a4d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a51:	83 c0 01             	add    eax,0x1
c0007a54:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a58:	83 d2 00             	adc    edx,0x0
c0007a5b:	83 ec 0c             	sub    esp,0xc
c0007a5e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a62:	6a 01                	push   0x1
c0007a64:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a68:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a6c:	55                   	push   ebp
c0007a6d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a71:	e8 66 9f ff ff       	call   c00019dc <disk_write>
c0007a76:	83 c4 20             	add    esp,0x20
c0007a79:	85 c0                	test   eax,eax
c0007a7b:	0f 85 51 07 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007a81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a85:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a89:	75 09                	jne    c0007a94 <f_mkfs+0x973>
c0007a8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a8e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a92:	74 12                	je     c0007aa6 <f_mkfs+0x985>
c0007a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a98:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a9c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007aa0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007aa4:	eb 8a                	jmp    c0007a30 <f_mkfs+0x90f>
c0007aa6:	31 d2                	xor    edx,edx
c0007aa8:	b9 00 02 00 00       	mov    ecx,0x200
c0007aad:	89 e8                	mov    eax,ebp
c0007aaf:	e8 f1 9f ff ff       	call   c0001aa5 <mem_set>
c0007ab4:	83 c6 0b             	add    esi,0xb
c0007ab7:	83 d7 00             	adc    edi,0x0
c0007aba:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007abe:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007ac2:	31 c9                	xor    ecx,ecx
c0007ac4:	41                   	inc    ecx
c0007ac5:	89 da                	mov    edx,ebx
c0007ac7:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007acc:	e8 3b a4 ff ff       	call   c0001f0c <xsum32>
c0007ad1:	89 c3                	mov    ebx,eax
c0007ad3:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ad9:	75 e9                	jne    c0007ac4 <f_mkfs+0x9a3>
c0007adb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ade:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ae2:	83 c6 01             	add    esi,0x1
c0007ae5:	83 d7 00             	adc    edi,0x0
c0007ae8:	83 ec 0c             	sub    esp,0xc
c0007aeb:	6a 01                	push   0x1
c0007aed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007af1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007af5:	55                   	push   ebp
c0007af6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007afa:	e8 dd 9e ff ff       	call   c00019dc <disk_write>
c0007aff:	83 c4 20             	add    esp,0x20
c0007b02:	85 c0                	test   eax,eax
c0007b04:	0f 85 c8 06 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007b0a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b0e:	75 06                	jne    c0007b16 <f_mkfs+0x9f5>
c0007b10:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b14:	74 09                	je     c0007b1f <f_mkfs+0x9fe>
c0007b16:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b19:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b1d:	eb a3                	jmp    c0007ac2 <f_mkfs+0x9a1>
c0007b1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b23:	89 da                	mov    edx,ebx
c0007b25:	01 e8                	add    eax,ebp
c0007b27:	e8 5b 9f ff ff       	call   c0001a87 <st_dword>
c0007b2c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b31:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b39:	75 e4                	jne    c0007b1f <f_mkfs+0x9fe>
c0007b3b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b3e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b42:	83 c6 02             	add    esi,0x2
c0007b45:	83 d7 00             	adc    edi,0x0
c0007b48:	83 ec 0c             	sub    esp,0xc
c0007b4b:	6a 01                	push   0x1
c0007b4d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b51:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b55:	55                   	push   ebp
c0007b56:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b5a:	e8 7d 9e ff ff       	call   c00019dc <disk_write>
c0007b5f:	83 c4 20             	add    esp,0x20
c0007b62:	85 c0                	test   eax,eax
c0007b64:	0f 85 68 06 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007b6a:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b6f:	74 0d                	je     c0007b7e <f_mkfs+0xa5d>
c0007b71:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b79:	e9 43 fd ff ff       	jmp    c00078c1 <f_mkfs+0x7a0>
c0007b7e:	b1 07                	mov    cl,0x7
c0007b80:	e9 e3 05 00 00       	jmp    c0008168 <f_mkfs+0x1047>
c0007b85:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b8a:	0f 85 4f 02 00 00    	jne    c0007ddf <f_mkfs+0xcbe>
c0007b90:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b95:	0f 86 22 02 00 00    	jbe    c0007dbd <f_mkfs+0xc9c>
c0007b9b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ba0:	0f 85 81 06 00 00    	jne    c0008227 <f_mkfs+0x1106>
c0007ba6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ba9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bad:	83 f8 40             	cmp    eax,0x40
c0007bb0:	0f 87 51 06 00 00    	ja     c0008207 <f_mkfs+0x10e6>
c0007bb6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bba:	85 ff                	test   edi,edi
c0007bbc:	75 1c                	jne    c0007bda <f_mkfs+0xab9>
c0007bbe:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bc1:	ba a0 7e 02 c0       	mov    edx,0xc0027ea0
c0007bc6:	c1 e9 0c             	shr    ecx,0xc
c0007bc9:	bf 01 00 00 00       	mov    edi,0x1
c0007bce:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bd1:	66 85 c0             	test   ax,ax
c0007bd4:	0f 85 95 01 00 00    	jne    c0007d6f <f_mkfs+0xc4e>
c0007bda:	31 d2                	xor    edx,edx
c0007bdc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bdf:	f7 f7                	div    edi
c0007be1:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007be6:	0f 86 95 01 00 00    	jbe    c0007d81 <f_mkfs+0xc60>
c0007bec:	83 c0 02             	add    eax,0x2
c0007bef:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007bf4:	01 c0                	add    eax,eax
c0007bf6:	05 ff 01 00 00       	add    eax,0x1ff
c0007bfb:	be 01 00 00 00       	mov    esi,0x1
c0007c00:	c1 e8 09             	shr    eax,0x9
c0007c03:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c0b:	c1 e0 05             	shl    eax,0x5
c0007c0e:	c1 e8 09             	shr    eax,0x9
c0007c11:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c15:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c20:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c24:	89 f0                	mov    eax,esi
c0007c26:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c2a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c2e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c32:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c3a:	31 d2                	xor    edx,edx
c0007c3c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c41:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c45:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c49:	31 db                	xor    ebx,ebx
c0007c4b:	01 c8                	add    eax,ecx
c0007c4d:	11 da                	adc    edx,ebx
c0007c4f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c53:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c57:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c5b:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c5f:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c63:	f7 da                	neg    edx
c0007c65:	21 d1                	and    ecx,edx
c0007c67:	29 d9                	sub    ecx,ebx
c0007c69:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c6e:	0f 85 20 01 00 00    	jne    c0007d94 <f_mkfs+0xc73>
c0007c74:	31 db                	xor    ebx,ebx
c0007c76:	01 ce                	add    esi,ecx
c0007c78:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c7c:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c80:	31 d2                	xor    edx,edx
c0007c82:	89 f8                	mov    eax,edi
c0007c84:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c88:	c1 e0 04             	shl    eax,0x4
c0007c8b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c8f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c93:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c97:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c9b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c9e:	19 d3                	sbb    ebx,edx
c0007ca0:	0f 82 40 01 00 00    	jb     c0007de6 <f_mkfs+0xcc5>
c0007ca6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ca9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cad:	89 c8                	mov    eax,ecx
c0007caf:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007cb4:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007cb8:	29 f0                	sub    eax,esi
c0007cba:	29 d0                	sub    eax,edx
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	f7 f7                	div    edi
c0007cc0:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cc5:	89 c3                	mov    ebx,eax
c0007cc7:	0f 85 b8 fe ff ff    	jne    c0007b85 <f_mkfs+0xa64>
c0007ccd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cd2:	0f 87 1d 01 00 00    	ja     c0007df5 <f_mkfs+0xcd4>
c0007cd8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cdd:	0f 85 03 01 00 00    	jne    c0007de6 <f_mkfs+0xcc5>
c0007ce3:	83 ff 01             	cmp    edi,0x1
c0007ce6:	0f 86 fa 00 00 00    	jbe    c0007de6 <f_mkfs+0xcc5>
c0007cec:	d1 ef                	shr    edi,1
c0007cee:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007cf2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007cf6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007cf9:	85 db                	test   ebx,ebx
c0007cfb:	75 2d                	jne    c0007d2a <f_mkfs+0xc09>
c0007cfd:	89 cb                	mov    ebx,ecx
c0007cff:	ba b0 7e 02 c0       	mov    edx,0xc0027eb0
c0007d04:	c1 eb 11             	shr    ebx,0x11
c0007d07:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d0f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d12:	66 85 c0             	test   ax,ax
c0007d15:	74 11                	je     c0007d28 <f_mkfs+0xc07>
c0007d17:	83 c2 02             	add    edx,0x2
c0007d1a:	39 d8                	cmp    eax,ebx
c0007d1c:	77 0a                	ja     c0007d28 <f_mkfs+0xc07>
c0007d1e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d22:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d26:	eb e7                	jmp    c0007d0f <f_mkfs+0xbee>
c0007d28:	31 db                	xor    ebx,ebx
c0007d2a:	31 d2                	xor    edx,edx
c0007d2c:	89 c8                	mov    eax,ecx
c0007d2e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d32:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d39:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d3e:	c1 ea 09             	shr    edx,0x9
c0007d41:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d46:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d4a:	0f 87 96 00 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c0007d50:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d54:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d5c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d60:	be 20 00 00 00       	mov    esi,0x20
c0007d65:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d6a:	e9 a6 fe ff ff       	jmp    c0007c15 <f_mkfs+0xaf4>
c0007d6f:	83 c2 02             	add    edx,0x2
c0007d72:	39 c8                	cmp    eax,ecx
c0007d74:	0f 87 60 fe ff ff    	ja     c0007bda <f_mkfs+0xab9>
c0007d7a:	01 ff                	add    edi,edi
c0007d7c:	e9 4d fe ff ff       	jmp    c0007bce <f_mkfs+0xaad>
c0007d81:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d84:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d89:	40                   	inc    eax
c0007d8a:	d1 e8                	shr    eax,1
c0007d8c:	83 c0 03             	add    eax,0x3
c0007d8f:	e9 62 fe ff ff       	jmp    c0007bf6 <f_mkfs+0xad5>
c0007d94:	31 d2                	xor    edx,edx
c0007d96:	89 c8                	mov    eax,ecx
c0007d98:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d9c:	85 d2                	test   edx,edx
c0007d9e:	74 0c                	je     c0007dac <f_mkfs+0xc8b>
c0007da0:	49                   	dec    ecx
c0007da1:	46                   	inc    esi
c0007da2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007da7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007dac:	89 c8                	mov    eax,ecx
c0007dae:	31 d2                	xor    edx,edx
c0007db0:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007db4:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007db8:	e9 c3 fe ff ff       	jmp    c0007c80 <f_mkfs+0xb5f>
c0007dbd:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dc2:	77 31                	ja     c0007df5 <f_mkfs+0xcd4>
c0007dc4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dc9:	75 1b                	jne    c0007de6 <f_mkfs+0xcc5>
c0007dcb:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dd2:	3d 80 00 00 00       	cmp    eax,0x80
c0007dd7:	0f 86 d9 fd ff ff    	jbe    c0007bb6 <f_mkfs+0xa95>
c0007ddd:	eb 07                	jmp    c0007de6 <f_mkfs+0xcc5>
c0007ddf:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007de4:	76 0a                	jbe    c0007df0 <f_mkfs+0xccf>
c0007de6:	bb 0e 00 00 00       	mov    ebx,0xe
c0007deb:	e9 ff 03 00 00       	jmp    c00081ef <f_mkfs+0x10ce>
c0007df0:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007df5:	31 d2                	xor    edx,edx
c0007df7:	b9 00 02 00 00       	mov    ecx,0x200
c0007dfc:	89 e8                	mov    eax,ebp
c0007dfe:	e8 a2 9c ff ff       	call   c0001aa5 <mem_set>
c0007e03:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e08:	ba c2 7f 02 c0       	mov    edx,0xc0027fc2
c0007e0d:	89 e8                	mov    eax,ebp
c0007e0f:	e8 7c 9c ff ff       	call   c0001a90 <mem_cpy>
c0007e14:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e17:	ba 00 02 00 00       	mov    edx,0x200
c0007e1c:	e8 62 9c ff ff       	call   c0001a83 <st_word>
c0007e21:	89 f8                	mov    eax,edi
c0007e23:	0f b7 d6             	movzx  edx,si
c0007e26:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e29:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e2c:	e8 52 9c ff ff       	call   c0001a83 <st_word>
c0007e31:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e35:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e3a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e3d:	75 08                	jne    c0007e47 <f_mkfs+0xd26>
c0007e3f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e47:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e4e:	e8 30 9c ff ff       	call   c0001a83 <st_word>
c0007e53:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e58:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e5c:	39 d0                	cmp    eax,edx
c0007e5e:	b8 00 00 00 00       	mov    eax,0x0
c0007e63:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e67:	72 0a                	jb     c0007e73 <f_mkfs+0xd52>
c0007e69:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e6c:	e8 12 9c ff ff       	call   c0001a83 <st_word>
c0007e71:	eb 08                	jmp    c0007e7b <f_mkfs+0xd5a>
c0007e73:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e76:	e8 0c 9c ff ff       	call   c0001a87 <st_dword>
c0007e7b:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e7e:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e83:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e87:	e8 f7 9b ff ff       	call   c0001a83 <st_word>
c0007e8c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e8f:	ba ff 00 00 00       	mov    edx,0xff
c0007e94:	e8 ea 9b ff ff       	call   c0001a83 <st_word>
c0007e99:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007ea0:	e8 e2 9b ff ff       	call   c0001a87 <st_dword>
c0007ea5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eaa:	75 57                	jne    c0007f03 <f_mkfs+0xde2>
c0007eac:	8d 45 43             	lea    eax,[ebp+0x43]
c0007eaf:	ba 00 00 21 50       	mov    edx,0x50210000
c0007eb4:	e8 ce 9b ff ff       	call   c0001a87 <st_dword>
c0007eb9:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ebc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec0:	e8 c2 9b ff ff       	call   c0001a87 <st_dword>
c0007ec5:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007ec8:	ba 02 00 00 00       	mov    edx,0x2
c0007ecd:	e8 b5 9b ff ff       	call   c0001a87 <st_dword>
c0007ed2:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ed5:	ba 01 00 00 00       	mov    edx,0x1
c0007eda:	e8 a4 9b ff ff       	call   c0001a83 <st_word>
c0007edf:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ee2:	ba 06 00 00 00       	mov    edx,0x6
c0007ee7:	e8 97 9b ff ff       	call   c0001a83 <st_word>
c0007eec:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ef0:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007ef4:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ef7:	b9 13 00 00 00       	mov    ecx,0x13
c0007efc:	ba ce 7f 02 c0       	mov    edx,0xc0027fce
c0007f01:	eb 2f                	jmp    c0007f32 <f_mkfs+0xe11>
c0007f03:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f06:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f0b:	e8 77 9b ff ff       	call   c0001a87 <st_dword>
c0007f10:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f15:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f18:	e8 66 9b ff ff       	call   c0001a83 <st_word>
c0007f1d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f21:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f25:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f28:	b9 13 00 00 00       	mov    ecx,0x13
c0007f2d:	ba e2 7f 02 c0       	mov    edx,0xc0027fe2
c0007f32:	e8 59 9b ff ff       	call   c0001a90 <mem_cpy>
c0007f37:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f42:	89 f0                	mov    eax,esi
c0007f44:	e8 3a 9b ff ff       	call   c0001a83 <st_word>
c0007f49:	83 ec 0c             	sub    esp,0xc
c0007f4c:	6a 01                	push   0x1
c0007f4e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f52:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f56:	55                   	push   ebp
c0007f57:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f5b:	e8 7c 9a ff ff       	call   c00019dc <disk_write>
c0007f60:	83 c4 20             	add    esp,0x20
c0007f63:	85 c0                	test   eax,eax
c0007f65:	0f 85 67 02 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007f6b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f70:	0f 85 b7 00 00 00    	jne    c000802d <f_mkfs+0xf0c>
c0007f76:	83 ec 0c             	sub    esp,0xc
c0007f79:	6a 01                	push   0x1
c0007f7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f7f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f83:	83 c0 06             	add    eax,0x6
c0007f86:	83 d2 00             	adc    edx,0x0
c0007f89:	52                   	push   edx
c0007f8a:	50                   	push   eax
c0007f8b:	55                   	push   ebp
c0007f8c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f90:	e8 47 9a ff ff       	call   c00019dc <disk_write>
c0007f95:	83 c4 20             	add    esp,0x20
c0007f98:	b9 00 02 00 00       	mov    ecx,0x200
c0007f9d:	31 d2                	xor    edx,edx
c0007f9f:	89 e8                	mov    eax,ebp
c0007fa1:	e8 ff 9a ff ff       	call   c0001aa5 <mem_set>
c0007fa6:	ba 52 52 61 41       	mov    edx,0x41615252
c0007fab:	89 e8                	mov    eax,ebp
c0007fad:	e8 d5 9a ff ff       	call   c0001a87 <st_dword>
c0007fb2:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007fb8:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fbd:	e8 c5 9a ff ff       	call   c0001a87 <st_dword>
c0007fc2:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fc5:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fcb:	e8 b7 9a ff ff       	call   c0001a87 <st_dword>
c0007fd0:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fd6:	ba 02 00 00 00       	mov    edx,0x2
c0007fdb:	e8 a7 9a ff ff       	call   c0001a87 <st_dword>
c0007fe0:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fe5:	89 f0                	mov    eax,esi
c0007fe7:	e8 97 9a ff ff       	call   c0001a83 <st_word>
c0007fec:	83 ec 0c             	sub    esp,0xc
c0007fef:	6a 01                	push   0x1
c0007ff1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ff5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ff9:	83 c0 07             	add    eax,0x7
c0007ffc:	83 d2 00             	adc    edx,0x0
c0007fff:	52                   	push   edx
c0008000:	50                   	push   eax
c0008001:	55                   	push   ebp
c0008002:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008006:	e8 d1 99 ff ff       	call   c00019dc <disk_write>
c000800b:	83 c4 14             	add    esp,0x14
c000800e:	6a 01                	push   0x1
c0008010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008014:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008018:	83 c0 01             	add    eax,0x1
c000801b:	83 d2 00             	adc    edx,0x0
c000801e:	52                   	push   edx
c000801f:	50                   	push   eax
c0008020:	55                   	push   ebp
c0008021:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008025:	e8 b2 99 ff ff       	call   c00019dc <disk_write>
c000802a:	83 c4 20             	add    esp,0x20
c000802d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008034:	31 d2                	xor    edx,edx
c0008036:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000803c:	31 db                	xor    ebx,ebx
c000803e:	89 e8                	mov    eax,ebp
c0008040:	e8 60 9a ff ff       	call   c0001aa5 <mem_set>
c0008045:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000804a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008051:	0f 94 c3             	sete   bl
c0008054:	4b                   	dec    ebx
c0008055:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000805b:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008061:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008066:	75 21                	jne    c0008089 <f_mkfs+0xf68>
c0008068:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000806d:	89 e8                	mov    eax,ebp
c000806f:	e8 13 9a ff ff       	call   c0001a87 <st_dword>
c0008074:	8d 45 04             	lea    eax,[ebp+0x4]
c0008077:	83 ca ff             	or     edx,0xffffffff
c000807a:	e8 08 9a ff ff       	call   c0001a87 <st_dword>
c000807f:	8d 45 08             	lea    eax,[ebp+0x8]
c0008082:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008087:	eb 04                	jmp    c000808d <f_mkfs+0xf6c>
c0008089:	89 da                	mov    edx,ebx
c000808b:	89 e8                	mov    eax,ebp
c000808d:	e8 f5 99 ff ff       	call   c0001a87 <st_dword>
c0008092:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008096:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000809a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000809e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080a2:	39 ce                	cmp    esi,ecx
c00080a4:	76 02                	jbe    c00080a8 <f_mkfs+0xf87>
c00080a6:	89 ce                	mov    esi,ecx
c00080a8:	83 ec 0c             	sub    esp,0xc
c00080ab:	56                   	push   esi
c00080ac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080b0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080b4:	55                   	push   ebp
c00080b5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080b9:	e8 1e 99 ff ff       	call   c00019dc <disk_write>
c00080be:	83 c4 20             	add    esp,0x20
c00080c1:	85 c0                	test   eax,eax
c00080c3:	0f 85 09 01 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c00080c9:	31 d2                	xor    edx,edx
c00080cb:	b9 00 02 00 00       	mov    ecx,0x200
c00080d0:	89 e8                	mov    eax,ebp
c00080d2:	e8 ce 99 ff ff       	call   c0001aa5 <mem_set>
c00080d7:	31 d2                	xor    edx,edx
c00080d9:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080dd:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080e1:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080e5:	75 b3                	jne    c000809a <f_mkfs+0xf79>
c00080e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080ea:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080f1:	40                   	inc    eax
c00080f2:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c00080f6:	0f 87 65 ff ff ff    	ja     c0008061 <f_mkfs+0xf40>
c00080fc:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008101:	74 04                	je     c0008107 <f_mkfs+0xfe6>
c0008103:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008107:	89 fb                	mov    ebx,edi
c0008109:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000810d:	76 04                	jbe    c0008113 <f_mkfs+0xff2>
c000810f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008113:	83 ec 0c             	sub    esp,0xc
c0008116:	53                   	push   ebx
c0008117:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000811b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000811f:	55                   	push   ebp
c0008120:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008124:	e8 b3 98 ff ff       	call   c00019dc <disk_write>
c0008129:	83 c4 20             	add    esp,0x20
c000812c:	85 c0                	test   eax,eax
c000812e:	0f 85 9e 00 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0008134:	31 d2                	xor    edx,edx
c0008136:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000813a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000813e:	29 df                	sub    edi,ebx
c0008140:	75 c5                	jne    c0008107 <f_mkfs+0xfe6>
c0008142:	b1 0c                	mov    cl,0xc
c0008144:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008149:	74 1d                	je     c0008168 <f_mkfs+0x1047>
c000814b:	b8 ff ff 00 00       	mov    eax,0xffff
c0008150:	b1 06                	mov    cl,0x6
c0008152:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008156:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000815a:	72 0c                	jb     c0008168 <f_mkfs+0x1047>
c000815c:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008161:	0f 94 c1             	sete   cl
c0008164:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008168:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000816d:	75 4c                	jne    c00081bb <f_mkfs+0x109a>
c000816f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008173:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008177:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000817e:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008185:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008190:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000819b:	0f b6 c9             	movzx  ecx,cl
c000819e:	83 ec 0c             	sub    esp,0xc
c00081a1:	55                   	push   ebp
c00081a2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081ad:	e8 2f c2 ff ff       	call   c00043e1 <create_partition>
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	89 c3                	mov    ebx,eax
c00081b7:	85 c0                	test   eax,eax
c00081b9:	75 34                	jne    c00081ef <f_mkfs+0x10ce>
c00081bb:	31 db                	xor    ebx,ebx
c00081bd:	50                   	push   eax
c00081be:	6a 00                	push   0x0
c00081c0:	6a 00                	push   0x0
c00081c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081c6:	e8 27 98 ff ff       	call   c00019f2 <disk_ioctl>
c00081cb:	83 c4 10             	add    esp,0x10
c00081ce:	85 c0                	test   eax,eax
c00081d0:	74 1d                	je     c00081ef <f_mkfs+0x10ce>
c00081d2:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081da:	75 0c                	jne    c00081e8 <f_mkfs+0x10c7>
c00081dc:	83 ec 0c             	sub    esp,0xc
c00081df:	55                   	push   ebp
c00081e0:	e8 75 00 00 00       	call   c000825a <ff_memfree>
c00081e5:	83 c4 10             	add    esp,0x10
c00081e8:	bb 01 00 00 00       	mov    ebx,0x1
c00081ed:	eb 48                	jmp    c0008237 <f_mkfs+0x1116>
c00081ef:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081f7:	75 3e                	jne    c0008237 <f_mkfs+0x1116>
c00081f9:	83 ec 0c             	sub    esp,0xc
c00081fc:	55                   	push   ebp
c00081fd:	e8 58 00 00 00       	call   c000825a <ff_memfree>
c0008202:	83 c4 10             	add    esp,0x10
c0008205:	eb 30                	jmp    c0008237 <f_mkfs+0x1116>
c0008207:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000820c:	0f 85 eb fa ff ff    	jne    c0007cfd <f_mkfs+0xbdc>
c0008212:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008216:	81 ff 80 00 00 00    	cmp    edi,0x80
c000821c:	0f 86 b8 f9 ff ff    	jbe    c0007bda <f_mkfs+0xab9>
c0008222:	e9 bf fb ff ff       	jmp    c0007de6 <f_mkfs+0xcc5>
c0008227:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000822c:	0f 85 c0 fa ff ff    	jne    c0007cf2 <f_mkfs+0xbd1>
c0008232:	e9 af fb ff ff       	jmp    c0007de6 <f_mkfs+0xcc5>
c0008237:	81 c4 9c 00 00 00    	add    esp,0x9c
c000823d:	89 d8                	mov    eax,ebx
c000823f:	5b                   	pop    ebx
c0008240:	5e                   	pop    esi
c0008241:	5f                   	pop    edi
c0008242:	5d                   	pop    ebp
c0008243:	c3                   	ret    

c0008244 <ff_memalloc>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 87 72 00 00       	call   c000f4da <malloc>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 c4 0c             	add    esp,0xc
c0008259:	c3                   	ret    

c000825a <ff_memfree>:
c000825a:	83 ec 0c             	sub    esp,0xc
c000825d:	83 ec 0c             	sub    esp,0xc
c0008260:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008264:	e8 81 72 00 00       	call   c000f4ea <free>
c0008269:	83 c4 10             	add    esp,0x10
c000826c:	90                   	nop
c000826d:	83 c4 0c             	add    esp,0xc
c0008270:	c3                   	ret    

c0008271 <ff_uni2oem>:
c0008271:	83 ec 14             	sub    esp,0x14
c0008274:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008278:	66 89 04 24          	mov    WORD PTR [esp],ax
c000827c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008283:	c7 44 24 0c 00 83 02 c0 	mov    DWORD PTR [esp+0xc],0xc0028300
c000828b:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008290:	77 0b                	ja     c000829d <ff_uni2oem+0x2c>
c0008292:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008296:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000829b:	eb 5b                	jmp    c00082f8 <ff_uni2oem+0x87>
c000829d:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082a5:	77 51                	ja     c00082f8 <ff_uni2oem+0x87>
c00082a7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082ad:	75 49                	jne    c00082f8 <ff_uni2oem+0x87>
c00082af:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082b6:	eb 0b                	jmp    c00082c3 <ff_uni2oem+0x52>
c00082b8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082bd:	40                   	inc    eax
c00082be:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082c3:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082c9:	77 1b                	ja     c00082e6 <ff_uni2oem+0x75>
c00082cb:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00082d0:	01 c0                	add    eax,eax
c00082d2:	89 c2                	mov    edx,eax
c00082d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082d8:	01 d0                	add    eax,edx
c00082da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082dd:	0f b7 c0             	movzx  eax,ax
c00082e0:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082e4:	75 d2                	jne    c00082b8 <ff_uni2oem+0x47>
c00082e6:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082eb:	83 e8 80             	sub    eax,0xffffff80
c00082ee:	25 ff 00 00 00       	and    eax,0xff
c00082f3:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082f8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082fd:	83 c4 14             	add    esp,0x14
c0008300:	c3                   	ret    

c0008301 <ff_oem2uni>:
c0008301:	83 ec 18             	sub    esp,0x18
c0008304:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008308:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000830c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008311:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008315:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000831c:	c7 44 24 10 00 83 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028300
c0008324:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000832a:	77 0b                	ja     c0008337 <ff_oem2uni+0x36>
c000832c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008330:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008335:	eb 2d                	jmp    c0008364 <ff_oem2uni+0x63>
c0008337:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000833d:	75 25                	jne    c0008364 <ff_oem2uni+0x63>
c000833f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008346:	77 1c                	ja     c0008364 <ff_oem2uni+0x63>
c0008348:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000834d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008352:	01 c0                	add    eax,eax
c0008354:	89 c2                	mov    edx,eax
c0008356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000835a:	01 d0                	add    eax,edx
c000835c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000835f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008364:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008369:	83 c4 18             	add    esp,0x18
c000836c:	c3                   	ret    

c000836d <ff_wtoupper>:
c000836d:	83 ec 10             	sub    esp,0x10
c0008370:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008378:	0f 87 3e 01 00 00    	ja     c00084bc <ff_wtoupper+0x14f>
c000837e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008382:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008387:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000838e:	77 07                	ja     c0008397 <ff_wtoupper+0x2a>
c0008390:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0008395:	eb 05                	jmp    c000839c <ff_wtoupper+0x2f>
c0008397:	b8 40 80 02 c0       	mov    eax,0xc0028040
c000839c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	8d 50 02             	lea    edx,[eax+0x2]
c00083a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083ab:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083ae:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083b3:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083b9:	0f 84 f4 00 00 00    	je     c00084b3 <ff_wtoupper+0x146>
c00083bf:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083c4:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083c9:	0f 82 e4 00 00 00    	jb     c00084b3 <ff_wtoupper+0x146>
c00083cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083d3:	8d 50 02             	lea    edx,[eax+0x2]
c00083d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083dd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083e2:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083e7:	66 c1 e8 08          	shr    ax,0x8
c00083eb:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083f0:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083f7:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00083fc:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008401:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008406:	01 ca                	add    edx,ecx
c0008408:	39 d0                	cmp    eax,edx
c000840a:	0f 8d 86 00 00 00    	jge    c0008496 <ff_wtoupper+0x129>
c0008410:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008415:	83 f8 08             	cmp    eax,0x8
c0008418:	0f 87 94 00 00 00    	ja     c00084b2 <ff_wtoupper+0x145>
c000841e:	8b 04 85 00 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8000]
c0008425:	ff e0                	jmp    eax
c0008427:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000842c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008431:	29 c2                	sub    edx,eax
c0008433:	89 d0                	mov    eax,edx
c0008435:	01 c0                	add    eax,eax
c0008437:	89 c2                	mov    edx,eax
c0008439:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000843d:	01 d0                	add    eax,edx
c000843f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008442:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008447:	eb 4b                	jmp    c0008494 <ff_wtoupper+0x127>
c0008449:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000844e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008452:	83 e0 01             	and    eax,0x1
c0008455:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000845a:	eb 38                	jmp    c0008494 <ff_wtoupper+0x127>
c000845c:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008462:	eb 30                	jmp    c0008494 <ff_wtoupper+0x127>
c0008464:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000846a:	eb 28                	jmp    c0008494 <ff_wtoupper+0x127>
c000846c:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008472:	eb 20                	jmp    c0008494 <ff_wtoupper+0x127>
c0008474:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000847a:	eb 18                	jmp    c0008494 <ff_wtoupper+0x127>
c000847c:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008482:	eb 10                	jmp    c0008494 <ff_wtoupper+0x127>
c0008484:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000848a:	eb 08                	jmp    c0008494 <ff_wtoupper+0x127>
c000848c:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008493:	90                   	nop
c0008494:	eb 1c                	jmp    c00084b2 <ff_wtoupper+0x145>
c0008496:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000849c:	0f 85 fe fe ff ff    	jne    c00083a0 <ff_wtoupper+0x33>
c00084a2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084a7:	01 c0                	add    eax,eax
c00084a9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084ad:	e9 ee fe ff ff       	jmp    c00083a0 <ff_wtoupper+0x33>
c00084b2:	90                   	nop
c00084b3:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084c0:	83 c4 10             	add    esp,0x10
c00084c3:	c3                   	ret    

c00084c4 <psrc_set_converter>:
c00084c4:	56                   	push   esi
c00084c5:	89 d6                	mov    esi,edx
c00084c7:	53                   	push   ebx
c00084c8:	89 c3                	mov    ebx,eax
c00084ca:	83 ec 0c             	sub    esp,0xc
c00084cd:	52                   	push   edx
c00084ce:	50                   	push   eax
c00084cf:	e8 6f 55 00 00       	call   c000da43 <sinc_set_converter>
c00084d4:	83 c4 10             	add    esp,0x10
c00084d7:	85 c0                	test   eax,eax
c00084d9:	74 25                	je     c0008500 <psrc_set_converter+0x3c>
c00084db:	50                   	push   eax
c00084dc:	50                   	push   eax
c00084dd:	56                   	push   esi
c00084de:	53                   	push   ebx
c00084df:	e8 17 5d 00 00       	call   c000e1fb <zoh_set_converter>
c00084e4:	83 c4 10             	add    esp,0x10
c00084e7:	85 c0                	test   eax,eax
c00084e9:	74 15                	je     c0008500 <psrc_set_converter+0x3c>
c00084eb:	51                   	push   ecx
c00084ec:	51                   	push   ecx
c00084ed:	56                   	push   esi
c00084ee:	53                   	push   ebx
c00084ef:	e8 0f 11 00 00       	call   c0009603 <linear_set_converter>
c00084f4:	83 c4 10             	add    esp,0x10
c00084f7:	ba 0a 00 00 00       	mov    edx,0xa
c00084fc:	85 c0                	test   eax,eax
c00084fe:	75 02                	jne    c0008502 <psrc_set_converter+0x3e>
c0008500:	31 d2                	xor    edx,edx
c0008502:	89 d0                	mov    eax,edx
c0008504:	5a                   	pop    edx
c0008505:	5b                   	pop    ebx
c0008506:	5e                   	pop    esi
c0008507:	c3                   	ret    

c0008508 <src_delete>:
c0008508:	53                   	push   ebx
c0008509:	83 ec 08             	sub    esp,0x8
c000850c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008510:	85 db                	test   ebx,ebx
c0008512:	74 29                	je     c000853d <src_delete+0x35>
c0008514:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008517:	85 c0                	test   eax,eax
c0008519:	74 0c                	je     c0008527 <src_delete+0x1f>
c000851b:	83 ec 0c             	sub    esp,0xc
c000851e:	50                   	push   eax
c000851f:	e8 c6 6f 00 00       	call   c000f4ea <free>
c0008524:	83 c4 10             	add    esp,0x10
c0008527:	50                   	push   eax
c0008528:	6a 3c                	push   0x3c
c000852a:	6a 00                	push   0x0
c000852c:	53                   	push   ebx
c000852d:	e8 59 81 ff ff       	call   c000068b <memset>
c0008532:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008535:	e8 b0 6f 00 00       	call   c000f4ea <free>
c000853a:	83 c4 10             	add    esp,0x10
c000853d:	31 c0                	xor    eax,eax
c000853f:	83 c4 08             	add    esp,0x8
c0008542:	5b                   	pop    ebx
c0008543:	c3                   	ret    

c0008544 <src_process>:
c0008544:	55                   	push   ebp
c0008545:	57                   	push   edi
c0008546:	56                   	push   esi
c0008547:	53                   	push   ebx
c0008548:	83 ec 1c             	sub    esp,0x1c
c000854b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000854f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008553:	85 ed                	test   ebp,ebp
c0008555:	0f 84 6f 01 00 00    	je     c00086ca <src_process+0x186>
c000855b:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c000855f:	0f 84 6c 01 00 00    	je     c00086d1 <src_process+0x18d>
c0008565:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0008569:	0f 84 62 01 00 00    	je     c00086d1 <src_process+0x18d>
c000856f:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c0008576:	0f 85 5c 01 00 00    	jne    c00086d8 <src_process+0x194>
c000857c:	85 db                	test   ebx,ebx
c000857e:	0f 84 5b 01 00 00    	je     c00086df <src_process+0x19b>
c0008584:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008586:	85 f6                	test   esi,esi
c0008588:	0f 84 58 01 00 00    	je     c00086e6 <src_process+0x1a2>
c000858e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008591:	85 ff                	test   edi,edi
c0008593:	0f 84 4d 01 00 00    	je     c00086e6 <src_process+0x1a2>
c0008599:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000859c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000859f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00085a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085a7:	68 00 00 70 3f       	push   0x3f700000
c00085ac:	6a 00                	push   0x0
c00085ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085b6:	e8 64 ea 01 00       	call   c002701f <__ltdf2>
c00085bb:	83 c4 10             	add    esp,0x10
c00085be:	85 c0                	test   eax,eax
c00085c0:	0f 88 27 01 00 00    	js     c00086ed <src_process+0x1a9>
c00085c6:	68 00 00 70 40       	push   0x40700000
c00085cb:	6a 00                	push   0x0
c00085cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085d5:	e8 27 ea 01 00       	call   c0027001 <__gtdf2>
c00085da:	83 c4 10             	add    esp,0x10
c00085dd:	85 c0                	test   eax,eax
c00085df:	0f 8f 08 01 00 00    	jg     c00086ed <src_process+0x1a9>
c00085e5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00085e9:	79 07                	jns    c00085f2 <src_process+0xae>
c00085eb:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00085f2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00085f5:	85 c0                	test   eax,eax
c00085f7:	79 50                	jns    c0008649 <src_process+0x105>
c00085f9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008600:	39 fe                	cmp    esi,edi
c0008602:	72 37                	jb     c000863b <src_process+0xf7>
c0008604:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000860b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008612:	68 00 00 70 3f       	push   0x3f700000
c0008617:	6a 00                	push   0x0
c0008619:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000861c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000861f:	e8 fb e9 01 00       	call   c002701f <__ltdf2>
c0008624:	83 c4 10             	add    esp,0x10
c0008627:	85 c0                	test   eax,eax
c0008629:	79 37                	jns    c0008662 <src_process+0x11e>
c000862b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000862f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008633:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008636:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008639:	eb 27                	jmp    c0008662 <src_process+0x11e>
c000863b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000863e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008642:	8d 04 86             	lea    eax,[esi+eax*4]
c0008645:	39 c7                	cmp    edi,eax
c0008647:	eb 0d                	jmp    c0008656 <src_process+0x112>
c0008649:	39 fe                	cmp    esi,edi
c000864b:	72 ee                	jb     c000863b <src_process+0xf7>
c000864d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008651:	8d 04 87             	lea    eax,[edi+eax*4]
c0008654:	39 c6                	cmp    esi,eax
c0008656:	73 ac                	jae    c0008604 <src_process+0xc0>
c0008658:	b8 10 00 00 00       	mov    eax,0x10
c000865d:	e9 90 00 00 00       	jmp    c00086f2 <src_process+0x1ae>
c0008662:	83 ec 10             	sub    esp,0x10
c0008665:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008668:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000866b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000866e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008671:	e8 ae e0 01 00       	call   c0026724 <__subdf3>
c0008676:	83 c4 18             	add    esp,0x18
c0008679:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000867d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008681:	52                   	push   edx
c0008682:	50                   	push   eax
c0008683:	e8 28 eb 01 00       	call   c00271b0 <fabs>
c0008688:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000868c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008690:	83 c4 10             	add    esp,0x10
c0008693:	68 af 03 d2 3c       	push   0x3cd203af
c0008698:	68 16 56 e7 9e       	push   0x9ee75616
c000869d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086a5:	e8 75 e9 01 00       	call   c002701f <__ltdf2>
c00086aa:	83 c4 10             	add    esp,0x10
c00086ad:	85 c0                	test   eax,eax
c00086af:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00086b3:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00086b7:	79 05                	jns    c00086be <src_process+0x17a>
c00086b9:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00086bc:	eb 03                	jmp    c00086c1 <src_process+0x17d>
c00086be:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00086c1:	83 c4 1c             	add    esp,0x1c
c00086c4:	5b                   	pop    ebx
c00086c5:	5e                   	pop    esi
c00086c6:	5f                   	pop    edi
c00086c7:	5d                   	pop    ebp
c00086c8:	ff e0                	jmp    eax
c00086ca:	b8 02 00 00 00       	mov    eax,0x2
c00086cf:	eb 21                	jmp    c00086f2 <src_process+0x1ae>
c00086d1:	b8 07 00 00 00       	mov    eax,0x7
c00086d6:	eb 1a                	jmp    c00086f2 <src_process+0x1ae>
c00086d8:	b8 12 00 00 00       	mov    eax,0x12
c00086dd:	eb 13                	jmp    c00086f2 <src_process+0x1ae>
c00086df:	b8 03 00 00 00       	mov    eax,0x3
c00086e4:	eb 0c                	jmp    c00086f2 <src_process+0x1ae>
c00086e6:	b8 04 00 00 00       	mov    eax,0x4
c00086eb:	eb 05                	jmp    c00086f2 <src_process+0x1ae>
c00086ed:	b8 06 00 00 00       	mov    eax,0x6
c00086f2:	83 c4 1c             	add    esp,0x1c
c00086f5:	5b                   	pop    ebx
c00086f6:	5e                   	pop    esi
c00086f7:	5f                   	pop    edi
c00086f8:	5d                   	pop    ebp
c00086f9:	c3                   	ret    

c00086fa <src_callback_read>:
c00086fa:	55                   	push   ebp
c00086fb:	57                   	push   edi
c00086fc:	56                   	push   esi
c00086fd:	53                   	push   ebx
c00086fe:	83 ec 3c             	sub    esp,0x3c
c0008701:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008705:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008709:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000870d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008711:	85 ed                	test   ebp,ebp
c0008713:	0f 8e 52 01 00 00    	jle    c000886b <src_callback_read+0x171>
c0008719:	85 db                	test   ebx,ebx
c000871b:	0f 84 4a 01 00 00    	je     c000886b <src_callback_read+0x171>
c0008721:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008728:	74 0c                	je     c0008736 <src_callback_read+0x3c>
c000872a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008731:	e9 35 01 00 00       	jmp    c000886b <src_callback_read+0x171>
c0008736:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000873a:	75 0c                	jne    c0008748 <src_callback_read+0x4e>
c000873c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008743:	e9 23 01 00 00       	jmp    c000886b <src_callback_read+0x171>
c0008748:	51                   	push   ecx
c0008749:	6a 24                	push   0x24
c000874b:	6a 00                	push   0x0
c000874d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008751:	50                   	push   eax
c0008752:	e8 34 7f ff ff       	call   c000068b <memset>
c0008757:	83 c4 10             	add    esp,0x10
c000875a:	68 00 00 70 3f       	push   0x3f700000
c000875f:	6a 00                	push   0x0
c0008761:	57                   	push   edi
c0008762:	56                   	push   esi
c0008763:	e8 b7 e8 01 00       	call   c002701f <__ltdf2>
c0008768:	83 c4 10             	add    esp,0x10
c000876b:	85 c0                	test   eax,eax
c000876d:	78 3e                	js     c00087ad <src_callback_read+0xb3>
c000876f:	68 00 00 70 40       	push   0x40700000
c0008774:	6a 00                	push   0x0
c0008776:	57                   	push   edi
c0008777:	56                   	push   esi
c0008778:	e8 84 e8 01 00       	call   c0027001 <__gtdf2>
c000877d:	83 c4 10             	add    esp,0x10
c0008780:	85 c0                	test   eax,eax
c0008782:	7f 29                	jg     c00087ad <src_callback_read+0xb3>
c0008784:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0008788:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000878c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008790:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008794:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008797:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000879b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000879f:	31 f6                	xor    esi,esi
c00087a1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00087a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00087a8:	e9 97 00 00 00       	jmp    c0008844 <src_callback_read+0x14a>
c00087ad:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087b4:	e9 b2 00 00 00       	jmp    c000886b <src_callback_read+0x171>
c00087b9:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087c1:	52                   	push   edx
c00087c2:	52                   	push   edx
c00087c3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00087c7:	50                   	push   eax
c00087c8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087cb:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00087ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00087d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00087d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00087da:	83 c4 10             	add    esp,0x10
c00087dd:	85 c0                	test   eax,eax
c00087df:	75 08                	jne    c00087e9 <src_callback_read+0xef>
c00087e1:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00087e9:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087f0:	50                   	push   eax
c00087f1:	50                   	push   eax
c00087f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00087f6:	50                   	push   eax
c00087f7:	53                   	push   ebx
c00087f8:	e8 47 fd ff ff       	call   c0008544 <src_process>
c00087fd:	83 c4 10             	add    esp,0x10
c0008800:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008807:	85 c0                	test   eax,eax
c0008809:	75 49                	jne    c0008854 <src_callback_read+0x15a>
c000880b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000880f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008812:	89 f9                	mov    ecx,edi
c0008814:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008818:	0f af ca             	imul   ecx,edx
c000881b:	c1 e1 02             	shl    ecx,0x2
c000881e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008822:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008826:	0f af d1             	imul   edx,ecx
c0008829:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c000882d:	c1 e2 02             	shl    edx,0x2
c0008830:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008834:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008837:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000883c:	74 12                	je     c0008850 <src_callback_read+0x156>
c000883e:	39 d5                	cmp    ebp,edx
c0008840:	7e 14                	jle    c0008856 <src_callback_read+0x15c>
c0008842:	89 d6                	mov    esi,edx
c0008844:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008849:	75 9e                	jne    c00087e9 <src_callback_read+0xef>
c000884b:	e9 69 ff ff ff       	jmp    c00087b9 <src_callback_read+0xbf>
c0008850:	85 c9                	test   ecx,ecx
c0008852:	75 ea                	jne    c000883e <src_callback_read+0x144>
c0008854:	89 f2                	mov    edx,esi
c0008856:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000885a:	85 c0                	test   eax,eax
c000885c:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c000885f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008863:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008866:	74 05                	je     c000886d <src_callback_read+0x173>
c0008868:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000886b:	31 d2                	xor    edx,edx
c000886d:	83 c4 3c             	add    esp,0x3c
c0008870:	89 d0                	mov    eax,edx
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	5f                   	pop    edi
c0008875:	5d                   	pop    ebp
c0008876:	c3                   	ret    

c0008877 <src_set_ratio>:
c0008877:	57                   	push   edi
c0008878:	ba 02 00 00 00       	mov    edx,0x2
c000887d:	56                   	push   esi
c000887e:	53                   	push   ebx
c000887f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008883:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008887:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000888b:	85 db                	test   ebx,ebx
c000888d:	74 4c                	je     c00088db <src_set_ratio+0x64>
c000888f:	ba 07 00 00 00       	mov    edx,0x7
c0008894:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008898:	74 41                	je     c00088db <src_set_ratio+0x64>
c000889a:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c000889e:	74 3b                	je     c00088db <src_set_ratio+0x64>
c00088a0:	68 00 00 70 3f       	push   0x3f700000
c00088a5:	6a 00                	push   0x0
c00088a7:	57                   	push   edi
c00088a8:	56                   	push   esi
c00088a9:	e8 71 e7 01 00       	call   c002701f <__ltdf2>
c00088ae:	83 c4 10             	add    esp,0x10
c00088b1:	ba 06 00 00 00       	mov    edx,0x6
c00088b6:	85 c0                	test   eax,eax
c00088b8:	78 21                	js     c00088db <src_set_ratio+0x64>
c00088ba:	68 00 00 70 40       	push   0x40700000
c00088bf:	6a 00                	push   0x0
c00088c1:	57                   	push   edi
c00088c2:	56                   	push   esi
c00088c3:	e8 39 e7 01 00       	call   c0027001 <__gtdf2>
c00088c8:	83 c4 10             	add    esp,0x10
c00088cb:	ba 06 00 00 00       	mov    edx,0x6
c00088d0:	85 c0                	test   eax,eax
c00088d2:	7f 07                	jg     c00088db <src_set_ratio+0x64>
c00088d4:	89 33                	mov    DWORD PTR [ebx],esi
c00088d6:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00088d9:	31 d2                	xor    edx,edx
c00088db:	5b                   	pop    ebx
c00088dc:	89 d0                	mov    eax,edx
c00088de:	5e                   	pop    esi
c00088df:	5f                   	pop    edi
c00088e0:	c3                   	ret    

c00088e1 <src_get_channels>:
c00088e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088e5:	b8 02 00 00 00       	mov    eax,0x2
c00088ea:	85 d2                	test   edx,edx
c00088ec:	74 14                	je     c0008902 <src_get_channels+0x21>
c00088ee:	b8 07 00 00 00       	mov    eax,0x7
c00088f3:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00088f7:	74 09                	je     c0008902 <src_get_channels+0x21>
c00088f9:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00088fd:	74 03                	je     c0008902 <src_get_channels+0x21>
c00088ff:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008902:	c3                   	ret    

c0008903 <src_reset>:
c0008903:	53                   	push   ebx
c0008904:	b8 02 00 00 00       	mov    eax,0x2
c0008909:	83 ec 08             	sub    esp,0x8
c000890c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008910:	85 db                	test   ebx,ebx
c0008912:	74 36                	je     c000894a <src_reset+0x47>
c0008914:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008917:	85 c0                	test   eax,eax
c0008919:	74 09                	je     c0008924 <src_reset+0x21>
c000891b:	83 ec 0c             	sub    esp,0xc
c000891e:	53                   	push   ebx
c000891f:	ff d0                	call   eax
c0008921:	83 c4 10             	add    esp,0x10
c0008924:	31 c0                	xor    eax,eax
c0008926:	31 d2                	xor    edx,edx
c0008928:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000892b:	89 03                	mov    DWORD PTR [ebx],eax
c000892d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008930:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008933:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000893a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008941:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008948:	31 c0                	xor    eax,eax
c000894a:	83 c4 08             	add    esp,0x8
c000894d:	5b                   	pop    ebx
c000894e:	c3                   	ret    

c000894f <src_new>:
c000894f:	57                   	push   edi
c0008950:	56                   	push   esi
c0008951:	53                   	push   ebx
c0008952:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008956:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000895a:	85 f6                	test   esi,esi
c000895c:	74 73                	je     c00089d1 <src_new+0x82>
c000895e:	85 ff                	test   edi,edi
c0008960:	7f 08                	jg     c000896a <src_new+0x1b>
c0008962:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008968:	eb 1e                	jmp    c0008988 <src_new+0x39>
c000896a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008970:	50                   	push   eax
c0008971:	50                   	push   eax
c0008972:	6a 3c                	push   0x3c
c0008974:	6a 01                	push   0x1
c0008976:	e8 8f 6b 00 00       	call   c000f50a <calloc>
c000897b:	83 c4 10             	add    esp,0x10
c000897e:	89 c3                	mov    ebx,eax
c0008980:	85 c0                	test   eax,eax
c0008982:	75 10                	jne    c0008994 <src_new+0x45>
c0008984:	85 f6                	test   esi,esi
c0008986:	75 04                	jne    c000898c <src_new+0x3d>
c0008988:	31 db                	xor    ebx,ebx
c000898a:	eb 4b                	jmp    c00089d7 <src_new+0x88>
c000898c:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008992:	eb 43                	jmp    c00089d7 <src_new+0x88>
c0008994:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008997:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000899e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00089a2:	e8 1d fb ff ff       	call   c00084c4 <psrc_set_converter>
c00089a7:	85 c0                	test   eax,eax
c00089a9:	74 18                	je     c00089c3 <src_new+0x74>
c00089ab:	85 f6                	test   esi,esi
c00089ad:	74 06                	je     c00089b5 <src_new+0x66>
c00089af:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089b5:	83 ec 0c             	sub    esp,0xc
c00089b8:	53                   	push   ebx
c00089b9:	31 db                	xor    ebx,ebx
c00089bb:	e8 2a 6b 00 00       	call   c000f4ea <free>
c00089c0:	83 c4 10             	add    esp,0x10
c00089c3:	83 ec 0c             	sub    esp,0xc
c00089c6:	53                   	push   ebx
c00089c7:	e8 37 ff ff ff       	call   c0008903 <src_reset>
c00089cc:	83 c4 10             	add    esp,0x10
c00089cf:	eb 06                	jmp    c00089d7 <src_new+0x88>
c00089d1:	85 ff                	test   edi,edi
c00089d3:	7f 9b                	jg     c0008970 <src_new+0x21>
c00089d5:	eb b1                	jmp    c0008988 <src_new+0x39>
c00089d7:	89 d8                	mov    eax,ebx
c00089d9:	5b                   	pop    ebx
c00089da:	5e                   	pop    esi
c00089db:	5f                   	pop    edi
c00089dc:	c3                   	ret    

c00089dd <src_callback_new>:
c00089dd:	56                   	push   esi
c00089de:	53                   	push   ebx
c00089df:	53                   	push   ebx
c00089e0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00089e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089e8:	85 f6                	test   esi,esi
c00089ea:	75 0e                	jne    c00089fa <src_callback_new+0x1d>
c00089ec:	31 db                	xor    ebx,ebx
c00089ee:	85 c0                	test   eax,eax
c00089f0:	74 47                	je     c0008a39 <src_callback_new+0x5c>
c00089f2:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00089f8:	eb 3f                	jmp    c0008a39 <src_callback_new+0x5c>
c00089fa:	85 c0                	test   eax,eax
c00089fc:	74 06                	je     c0008a04 <src_callback_new+0x27>
c00089fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a04:	51                   	push   ecx
c0008a05:	50                   	push   eax
c0008a06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a0e:	e8 3c ff ff ff       	call   c000894f <src_new>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	89 c3                	mov    ebx,eax
c0008a18:	85 c0                	test   eax,eax
c0008a1a:	74 1d                	je     c0008a39 <src_callback_new+0x5c>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	50                   	push   eax
c0008a20:	e8 de fe ff ff       	call   c0008903 <src_reset>
c0008a25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a29:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a30:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a33:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a36:	83 c4 10             	add    esp,0x10
c0008a39:	89 d8                	mov    eax,ebx
c0008a3b:	5a                   	pop    edx
c0008a3c:	5b                   	pop    ebx
c0008a3d:	5e                   	pop    esi
c0008a3e:	c3                   	ret    

c0008a3f <src_get_name>:
c0008a3f:	53                   	push   ebx
c0008a40:	83 ec 14             	sub    esp,0x14
c0008a43:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a47:	53                   	push   ebx
c0008a48:	e8 d0 4f 00 00       	call   c000da1d <sinc_get_name>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	85 c0                	test   eax,eax
c0008a52:	75 1d                	jne    c0008a71 <src_get_name+0x32>
c0008a54:	83 ec 0c             	sub    esp,0xc
c0008a57:	53                   	push   ebx
c0008a58:	e8 80 57 00 00       	call   c000e1dd <zoh_get_name>
c0008a5d:	83 c4 10             	add    esp,0x10
c0008a60:	85 c0                	test   eax,eax
c0008a62:	75 0d                	jne    c0008a71 <src_get_name+0x32>
c0008a64:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a68:	83 c4 08             	add    esp,0x8
c0008a6b:	5b                   	pop    ebx
c0008a6c:	e9 74 0b 00 00       	jmp    c00095e5 <linear_get_name>
c0008a71:	83 c4 08             	add    esp,0x8
c0008a74:	5b                   	pop    ebx
c0008a75:	c3                   	ret    

c0008a76 <src_get_description>:
c0008a76:	53                   	push   ebx
c0008a77:	83 ec 14             	sub    esp,0x14
c0008a7a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a7e:	53                   	push   ebx
c0008a7f:	e8 ac 4f 00 00       	call   c000da30 <sinc_get_description>
c0008a84:	83 c4 10             	add    esp,0x10
c0008a87:	85 c0                	test   eax,eax
c0008a89:	75 1d                	jne    c0008aa8 <src_get_description+0x32>
c0008a8b:	83 ec 0c             	sub    esp,0xc
c0008a8e:	53                   	push   ebx
c0008a8f:	e8 58 57 00 00       	call   c000e1ec <zoh_get_description>
c0008a94:	83 c4 10             	add    esp,0x10
c0008a97:	85 c0                	test   eax,eax
c0008a99:	75 0d                	jne    c0008aa8 <src_get_description+0x32>
c0008a9b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a9f:	83 c4 08             	add    esp,0x8
c0008aa2:	5b                   	pop    ebx
c0008aa3:	e9 4c 0b 00 00       	jmp    c00095f4 <linear_get_description>
c0008aa8:	83 c4 08             	add    esp,0x8
c0008aab:	5b                   	pop    ebx
c0008aac:	c3                   	ret    

c0008aad <src_get_version>:
c0008aad:	b8 00 84 02 c0       	mov    eax,0xc0028400
c0008ab2:	c3                   	ret    

c0008ab3 <src_is_valid_ratio>:
c0008ab3:	83 ec 1c             	sub    esp,0x1c
c0008ab6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008aba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008abe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ac2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ac6:	68 00 00 70 3f       	push   0x3f700000
c0008acb:	6a 00                	push   0x0
c0008acd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ad1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ad5:	e8 45 e5 01 00       	call   c002701f <__ltdf2>
c0008ada:	83 c4 10             	add    esp,0x10
c0008add:	31 d2                	xor    edx,edx
c0008adf:	85 c0                	test   eax,eax
c0008ae1:	78 1e                	js     c0008b01 <src_is_valid_ratio+0x4e>
c0008ae3:	68 00 00 70 40       	push   0x40700000
c0008ae8:	6a 00                	push   0x0
c0008aea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008aee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008af2:	e8 0a e5 01 00       	call   c0027001 <__gtdf2>
c0008af7:	31 d2                	xor    edx,edx
c0008af9:	83 c4 10             	add    esp,0x10
c0008afc:	85 c0                	test   eax,eax
c0008afe:	0f 9e c2             	setle  dl
c0008b01:	89 d0                	mov    eax,edx
c0008b03:	83 c4 1c             	add    esp,0x1c
c0008b06:	c3                   	ret    

c0008b07 <src_error>:
c0008b07:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b0b:	31 c0                	xor    eax,eax
c0008b0d:	85 d2                	test   edx,edx
c0008b0f:	74 03                	je     c0008b14 <src_error+0xd>
c0008b11:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b14:	c3                   	ret    

c0008b15 <src_strerror>:
c0008b15:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b19:	31 c0                	xor    eax,eax
c0008b1b:	83 fa 17             	cmp    edx,0x17
c0008b1e:	77 07                	ja     c0008b27 <src_strerror+0x12>
c0008b20:	8b 04 95 60 88 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd77a0]
c0008b27:	c3                   	ret    

c0008b28 <src_simple>:
c0008b28:	56                   	push   esi
c0008b29:	53                   	push   ebx
c0008b2a:	83 ec 18             	sub    esp,0x18
c0008b2d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b31:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b35:	50                   	push   eax
c0008b36:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b3a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b3e:	e8 0c fe ff ff       	call   c000894f <src_new>
c0008b43:	83 c4 10             	add    esp,0x10
c0008b46:	85 c0                	test   eax,eax
c0008b48:	75 06                	jne    c0008b50 <src_simple+0x28>
c0008b4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b4e:	eb 25                	jmp    c0008b75 <src_simple+0x4d>
c0008b50:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b57:	89 c3                	mov    ebx,eax
c0008b59:	50                   	push   eax
c0008b5a:	50                   	push   eax
c0008b5b:	56                   	push   esi
c0008b5c:	53                   	push   ebx
c0008b5d:	e8 e2 f9 ff ff       	call   c0008544 <src_process>
c0008b62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b69:	e8 9a f9 ff ff       	call   c0008508 <src_delete>
c0008b6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b72:	83 c4 10             	add    esp,0x10
c0008b75:	83 c4 14             	add    esp,0x14
c0008b78:	5b                   	pop    ebx
c0008b79:	5e                   	pop    esi
c0008b7a:	c3                   	ret    

c0008b7b <src_short_to_float_array>:
c0008b7b:	53                   	push   ebx
c0008b7c:	83 ec 18             	sub    esp,0x18
c0008b7f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b83:	85 db                	test   ebx,ebx
c0008b85:	74 54                	je     c0008bdb <src_short_to_float_array+0x60>
c0008b87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b8b:	4b                   	dec    ebx
c0008b8c:	83 ec 0c             	sub    esp,0xc
c0008b8f:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008b93:	50                   	push   eax
c0008b94:	e8 1a e2 01 00       	call   c0026db3 <__floatsidf>
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ba0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ba4:	68 00 00 00 3f       	push   0x3f000000
c0008ba9:	6a 00                	push   0x0
c0008bab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008baf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb3:	e8 98 db 01 00       	call   c0026750 <__muldf3>
c0008bb8:	59                   	pop    ecx
c0008bb9:	59                   	pop    ecx
c0008bba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bbe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bca:	e8 54 e4 01 00       	call   c0027023 <__truncdfsf2>
c0008bcf:	83 c4 10             	add    esp,0x10
c0008bd2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008bd6:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008bd9:	eb a8                	jmp    c0008b83 <src_short_to_float_array+0x8>
c0008bdb:	83 c4 18             	add    esp,0x18
c0008bde:	5b                   	pop    ebx
c0008bdf:	c3                   	ret    

c0008be0 <src_float_to_short_array>:
c0008be0:	56                   	push   esi
c0008be1:	53                   	push   ebx
c0008be2:	83 ec 14             	sub    esp,0x14
c0008be5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008be9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bed:	85 db                	test   ebx,ebx
c0008bef:	0f 84 a4 00 00 00    	je     c0008c99 <src_float_to_short_array+0xb9>
c0008bf5:	83 ec 0c             	sub    esp,0xc
c0008bf8:	4b                   	dec    ebx
c0008bf9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008bfd:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c00:	e8 42 e5 01 00       	call   c0027147 <__extendsfdf2>
c0008c05:	83 c4 10             	add    esp,0x10
c0008c08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c0c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c10:	68 00 00 e0 41       	push   0x41e00000
c0008c15:	6a 00                	push   0x0
c0008c17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1f:	e8 2c db 01 00       	call   c0026750 <__muldf3>
c0008c24:	83 c4 10             	add    esp,0x10
c0008c27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c2b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c2f:	68 ff ff df 41       	push   0x41dfffff
c0008c34:	68 00 00 c0 ff       	push   0xffc00000
c0008c39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c41:	e8 d7 e3 01 00       	call   c002701d <__gedf2>
c0008c46:	83 c4 10             	add    esp,0x10
c0008c49:	85 c0                	test   eax,eax
c0008c4b:	78 08                	js     c0008c55 <src_float_to_short_array+0x75>
c0008c4d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c53:	eb 98                	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c55:	68 00 00 e0 c1       	push   0xc1e00000
c0008c5a:	6a 00                	push   0x0
c0008c5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c64:	e8 b8 e3 01 00       	call   c0027021 <__ledf2>
c0008c69:	83 c4 10             	add    esp,0x10
c0008c6c:	85 c0                	test   eax,eax
c0008c6e:	7f 0b                	jg     c0008c7b <src_float_to_short_array+0x9b>
c0008c70:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008c76:	e9 72 ff ff ff       	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c7b:	50                   	push   eax
c0008c7c:	50                   	push   eax
c0008c7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c85:	e8 46 e5 01 00       	call   c00271d0 <lrint>
c0008c8a:	83 c4 10             	add    esp,0x10
c0008c8d:	c1 f8 10             	sar    eax,0x10
c0008c90:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008c94:	e9 54 ff ff ff       	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c99:	83 c4 14             	add    esp,0x14
c0008c9c:	5b                   	pop    ebx
c0008c9d:	5e                   	pop    esi
c0008c9e:	c3                   	ret    

c0008c9f <src_int_to_float_array>:
c0008c9f:	53                   	push   ebx
c0008ca0:	83 ec 18             	sub    esp,0x18
c0008ca3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ca7:	85 db                	test   ebx,ebx
c0008ca9:	74 52                	je     c0008cfd <src_int_to_float_array+0x5e>
c0008cab:	83 ec 0c             	sub    esp,0xc
c0008cae:	4b                   	dec    ebx
c0008caf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008cb3:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008cb6:	e8 f8 e0 01 00       	call   c0026db3 <__floatsidf>
c0008cbb:	83 c4 10             	add    esp,0x10
c0008cbe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cc2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cc6:	68 00 00 00 3e       	push   0x3e000000
c0008ccb:	6a 00                	push   0x0
c0008ccd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd5:	e8 76 da 01 00       	call   c0026750 <__muldf3>
c0008cda:	59                   	pop    ecx
c0008cdb:	59                   	pop    ecx
c0008cdc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ce0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008ce4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cec:	e8 32 e3 01 00       	call   c0027023 <__truncdfsf2>
c0008cf1:	83 c4 10             	add    esp,0x10
c0008cf4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cf8:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008cfb:	eb aa                	jmp    c0008ca7 <src_int_to_float_array+0x8>
c0008cfd:	83 c4 18             	add    esp,0x18
c0008d00:	5b                   	pop    ebx
c0008d01:	c3                   	ret    

c0008d02 <src_float_to_int_array>:
c0008d02:	56                   	push   esi
c0008d03:	53                   	push   ebx
c0008d04:	83 ec 14             	sub    esp,0x14
c0008d07:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d0b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d0f:	85 db                	test   ebx,ebx
c0008d11:	0f 84 a2 00 00 00    	je     c0008db9 <src_float_to_int_array+0xb7>
c0008d17:	83 ec 0c             	sub    esp,0xc
c0008d1a:	4b                   	dec    ebx
c0008d1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d1f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d22:	e8 20 e4 01 00       	call   c0027147 <__extendsfdf2>
c0008d27:	83 c4 10             	add    esp,0x10
c0008d2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d32:	68 00 00 e0 41       	push   0x41e00000
c0008d37:	6a 00                	push   0x0
c0008d39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d41:	e8 0a da 01 00       	call   c0026750 <__muldf3>
c0008d46:	83 c4 10             	add    esp,0x10
c0008d49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d51:	68 ff ff df 41       	push   0x41dfffff
c0008d56:	68 00 00 c0 ff       	push   0xffc00000
c0008d5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d63:	e8 b5 e2 01 00       	call   c002701d <__gedf2>
c0008d68:	83 c4 10             	add    esp,0x10
c0008d6b:	85 c0                	test   eax,eax
c0008d6d:	78 09                	js     c0008d78 <src_float_to_int_array+0x76>
c0008d6f:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008d76:	eb 97                	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008d78:	68 00 00 e0 c1       	push   0xc1e00000
c0008d7d:	6a 00                	push   0x0
c0008d7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d87:	e8 95 e2 01 00       	call   c0027021 <__ledf2>
c0008d8c:	83 c4 10             	add    esp,0x10
c0008d8f:	85 c0                	test   eax,eax
c0008d91:	7f 0c                	jg     c0008d9f <src_float_to_int_array+0x9d>
c0008d93:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008d9a:	e9 70 ff ff ff       	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008d9f:	50                   	push   eax
c0008da0:	50                   	push   eax
c0008da1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008da5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008da9:	e8 22 e4 01 00       	call   c00271d0 <lrint>
c0008dae:	83 c4 10             	add    esp,0x10
c0008db1:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008db4:	e9 56 ff ff ff       	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008db9:	83 c4 14             	add    esp,0x14
c0008dbc:	5b                   	pop    ebx
c0008dbd:	5e                   	pop    esi
c0008dbe:	c3                   	ret    

c0008dbf <linear_vari_process>:
c0008dbf:	55                   	push   ebp
c0008dc0:	31 d2                	xor    edx,edx
c0008dc2:	57                   	push   edi
c0008dc3:	56                   	push   esi
c0008dc4:	53                   	push   ebx
c0008dc5:	83 ec 3c             	sub    esp,0x3c
c0008dc8:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008dcc:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008dd0:	0f 8e d3 07 00 00    	jle    c00095a9 <linear_vari_process+0x7ea>
c0008dd6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008dda:	ba 05 00 00 00       	mov    edx,0x5
c0008ddf:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008de2:	85 db                	test   ebx,ebx
c0008de4:	0f 84 bf 07 00 00    	je     c00095a9 <linear_vari_process+0x7ea>
c0008dea:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008ded:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008df1:	74 19                	je     c0008e0c <linear_vari_process+0x4d>
c0008df3:	31 d2                	xor    edx,edx
c0008df5:	39 c2                	cmp    edx,eax
c0008df7:	7d 0c                	jge    c0008e05 <linear_vari_process+0x46>
c0008df9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008dfb:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008dfe:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008e02:	42                   	inc    edx
c0008e03:	eb f0                	jmp    c0008df5 <linear_vari_process+0x36>
c0008e05:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008e0c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008e0f:	0f af d0             	imul   edx,eax
c0008e12:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008e15:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008e19:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008e20:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008e23:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008e2a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e2e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e31:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e3b:	68 00 00 70 3f       	push   0x3f700000
c0008e40:	6a 00                	push   0x0
c0008e42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e4a:	e8 d0 e1 01 00       	call   c002701f <__ltdf2>
c0008e4f:	83 c4 10             	add    esp,0x10
c0008e52:	ba 16 00 00 00       	mov    edx,0x16
c0008e57:	85 c0                	test   eax,eax
c0008e59:	0f 88 4a 07 00 00    	js     c00095a9 <linear_vari_process+0x7ea>
c0008e5f:	68 00 00 70 40       	push   0x40700000
c0008e64:	6a 00                	push   0x0
c0008e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e6e:	e8 8e e1 01 00       	call   c0027001 <__gtdf2>
c0008e73:	83 c4 10             	add    esp,0x10
c0008e76:	ba 16 00 00 00       	mov    edx,0x16
c0008e7b:	85 c0                	test   eax,eax
c0008e7d:	0f 8f 26 07 00 00    	jg     c00095a9 <linear_vari_process+0x7ea>
c0008e83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e87:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008e8a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e95:	68 00 00 f0 3f       	push   0x3ff00000
c0008e9a:	6a 00                	push   0x0
c0008e9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ea0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ea4:	e8 76 e1 01 00       	call   c002701f <__ltdf2>
c0008ea9:	83 c4 10             	add    esp,0x10
c0008eac:	85 c0                	test   eax,eax
c0008eae:	0f 89 89 02 00 00    	jns    c000913d <linear_vari_process+0x37e>
c0008eb4:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008eb7:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008eba:	0f 8d 7d 02 00 00    	jge    c000913d <linear_vari_process+0x37e>
c0008ec0:	83 ec 0c             	sub    esp,0xc
c0008ec3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008ec6:	e8 e8 de 01 00       	call   c0026db3 <__floatsidf>
c0008ecb:	83 c4 10             	add    esp,0x10
c0008ece:	89 04 24             	mov    DWORD PTR [esp],eax
c0008ed1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008ed5:	68 00 00 f0 3f       	push   0x3ff00000
c0008eda:	6a 00                	push   0x0
c0008edc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee4:	e8 ea d1 01 00       	call   c00260d3 <__adddf3>
c0008ee9:	83 c4 10             	add    esp,0x10
c0008eec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ef0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ef4:	52                   	push   edx
c0008ef5:	50                   	push   eax
c0008ef6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008efa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008efe:	e8 4d d8 01 00       	call   c0026750 <__muldf3>
c0008f03:	5d                   	pop    ebp
c0008f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f08:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f0c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008f0f:	e8 9f de 01 00       	call   c0026db3 <__floatsidf>
c0008f14:	83 c4 10             	add    esp,0x10
c0008f17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f1b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f1f:	52                   	push   edx
c0008f20:	50                   	push   eax
c0008f21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f25:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f29:	e8 a5 d1 01 00       	call   c00260d3 <__adddf3>
c0008f2e:	59                   	pop    ecx
c0008f2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f33:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f37:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008f3a:	e8 74 de 01 00       	call   c0026db3 <__floatsidf>
c0008f3f:	83 c4 10             	add    esp,0x10
c0008f42:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f46:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f4a:	52                   	push   edx
c0008f4b:	50                   	push   eax
c0008f4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f54:	e8 c4 e0 01 00       	call   c002701d <__gedf2>
c0008f59:	83 c4 10             	add    esp,0x10
c0008f5c:	85 c0                	test   eax,eax
c0008f5e:	0f 89 d9 01 00 00    	jns    c000913d <linear_vari_process+0x37e>
c0008f64:	85 ff                	test   edi,edi
c0008f66:	0f 8e f4 00 00 00    	jle    c0009060 <linear_vari_process+0x2a1>
c0008f6c:	83 ec 10             	sub    esp,0x10
c0008f6f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008f72:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008f75:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0008f79:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0008f7c:	ff 30                	push   DWORD PTR [eax]
c0008f7e:	e8 a1 d7 01 00       	call   c0026724 <__subdf3>
c0008f83:	83 c4 18             	add    esp,0x18
c0008f86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f8e:	52                   	push   edx
c0008f8f:	50                   	push   eax
c0008f90:	e8 1b e2 01 00       	call   c00271b0 <fabs>
c0008f95:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f99:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f9d:	83 c4 10             	add    esp,0x10
c0008fa0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0008fa5:	68 23 42 92 0c       	push   0xc924223
c0008faa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fb2:	e8 4a e0 01 00       	call   c0027001 <__gtdf2>
c0008fb7:	83 c4 10             	add    esp,0x10
c0008fba:	85 c0                	test   eax,eax
c0008fbc:	0f 8e 9e 00 00 00    	jle    c0009060 <linear_vari_process+0x2a1>
c0008fc2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008fc6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008fc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0008fcb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008fcf:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fd2:	52                   	push   edx
c0008fd3:	50                   	push   eax
c0008fd4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008fd7:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008fda:	e8 45 d7 01 00       	call   c0026724 <__subdf3>
c0008fdf:	59                   	pop    ecx
c0008fe0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fe4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0008fe8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008feb:	e8 c3 dd 01 00       	call   c0026db3 <__floatsidf>
c0008ff0:	83 c4 10             	add    esp,0x10
c0008ff3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ff7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ffb:	52                   	push   edx
c0008ffc:	50                   	push   eax
c0008ffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009005:	e8 46 d7 01 00       	call   c0026750 <__muldf3>
c000900a:	5f                   	pop    edi
c000900b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000900f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009013:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009016:	e8 98 dd 01 00       	call   c0026db3 <__floatsidf>
c000901b:	83 c4 10             	add    esp,0x10
c000901e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009022:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009026:	52                   	push   edx
c0009027:	50                   	push   eax
c0009028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000902c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009030:	e8 ff d9 01 00       	call   c0026a34 <__divdf3>
c0009035:	83 c4 10             	add    esp,0x10
c0009038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000903c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009040:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009044:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000904c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009050:	e8 7e d0 01 00       	call   c00260d3 <__adddf3>
c0009055:	83 c4 10             	add    esp,0x10
c0009058:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000905c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009060:	31 ff                	xor    edi,edi
c0009062:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009065:	0f 8e 9d 00 00 00    	jle    c0009108 <linear_vari_process+0x349>
c000906b:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c000906e:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009072:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009075:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009079:	89 04 24             	mov    DWORD PTR [esp],eax
c000907c:	8b 06                	mov    eax,DWORD PTR [esi]
c000907e:	52                   	push   edx
c000907f:	52                   	push   edx
c0009080:	55                   	push   ebp
c0009081:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c0009084:	47                   	inc    edi
c0009085:	e8 de c9 01 00       	call   c0025a68 <__subsf3>
c000908a:	89 04 24             	mov    DWORD PTR [esp],eax
c000908d:	e8 b5 e0 01 00       	call   c0027147 <__extendsfdf2>
c0009092:	83 c4 10             	add    esp,0x10
c0009095:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009099:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000909d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090a1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ad:	e8 9e d6 01 00       	call   c0026750 <__muldf3>
c00090b2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00090b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00090b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00090bd:	e8 85 e0 01 00       	call   c0027147 <__extendsfdf2>
c00090c2:	83 c4 10             	add    esp,0x10
c00090c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090c9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090cd:	52                   	push   edx
c00090ce:	50                   	push   eax
c00090cf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090d7:	e8 f7 cf 01 00       	call   c00260d3 <__adddf3>
c00090dc:	59                   	pop    ecx
c00090dd:	5d                   	pop    ebp
c00090de:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090e2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ee:	e8 30 df 01 00       	call   c0027023 <__truncdfsf2>
c00090f3:	83 c4 10             	add    esp,0x10
c00090f6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00090f9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00090fd:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009100:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009103:	e9 5a ff ff ff       	jmp    c0009062 <linear_vari_process+0x2a3>
c0009108:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000910c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009110:	68 00 00 f0 3f       	push   0x3ff00000
c0009115:	6a 00                	push   0x0
c0009117:	e8 18 d9 01 00       	call   c0026a34 <__divdf3>
c000911c:	83 c4 10             	add    esp,0x10
c000911f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009122:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009126:	52                   	push   edx
c0009127:	50                   	push   eax
c0009128:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	e8 9e cf 01 00       	call   c00260d3 <__adddf3>
c0009135:	83 c4 10             	add    esp,0x10
c0009138:	e9 50 fd ff ff       	jmp    c0008e8d <linear_vari_process+0xce>
c000913d:	50                   	push   eax
c000913e:	50                   	push   eax
c000913f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009143:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009147:	e8 84 e0 01 00       	call   c00271d0 <lrint>
c000914c:	83 ec 0c             	sub    esp,0xc
c000914f:	50                   	push   eax
c0009150:	e8 5e dc 01 00       	call   c0026db3 <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000915c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009166:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000916a:	e8 b5 d5 01 00       	call   c0026724 <__subdf3>
c000916f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009173:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009177:	83 c4 20             	add    esp,0x20
c000917a:	6a 00                	push   0x0
c000917c:	6a 00                	push   0x0
c000917e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009182:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009186:	e8 94 de 01 00       	call   c002701f <__ltdf2>
c000918b:	83 c4 10             	add    esp,0x10
c000918e:	85 c0                	test   eax,eax
c0009190:	79 1e                	jns    c00091b0 <linear_vari_process+0x3f1>
c0009192:	68 00 00 f0 3f       	push   0x3ff00000
c0009197:	6a 00                	push   0x0
c0009199:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000919d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a1:	e8 2d cf 01 00       	call   c00260d3 <__adddf3>
c00091a6:	83 c4 10             	add    esp,0x10
c00091a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00091ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00091b3:	83 ec 10             	sub    esp,0x10
c00091b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091c6:	e8 59 d5 01 00       	call   c0026724 <__subdf3>
c00091cb:	83 c4 18             	add    esp,0x18
c00091ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091d6:	52                   	push   edx
c00091d7:	50                   	push   eax
c00091d8:	e8 f3 df 01 00       	call   c00271d0 <lrint>
c00091dd:	83 c4 10             	add    esp,0x10
c00091e0:	0f af f8             	imul   edi,eax
c00091e3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00091e6:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00091e9:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00091ec:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00091ef:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c00091f2:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00091f6:	0f 8d 13 03 00 00    	jge    c000950f <linear_vari_process+0x750>
c00091fc:	83 ec 0c             	sub    esp,0xc
c00091ff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009202:	e8 ac db 01 00       	call   c0026db3 <__floatsidf>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000920e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009212:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009216:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000921a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000921e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009222:	e8 29 d5 01 00       	call   c0026750 <__muldf3>
c0009227:	89 3c 24             	mov    DWORD PTR [esp],edi
c000922a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000922e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009232:	e8 7c db 01 00       	call   c0026db3 <__floatsidf>
c0009237:	83 c4 10             	add    esp,0x10
c000923a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000923e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009242:	52                   	push   edx
c0009243:	50                   	push   eax
c0009244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009248:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000924c:	e8 82 ce 01 00       	call   c00260d3 <__adddf3>
c0009251:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009254:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009258:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000925c:	e8 52 db 01 00       	call   c0026db3 <__floatsidf>
c0009261:	83 c4 10             	add    esp,0x10
c0009264:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009268:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000926c:	52                   	push   edx
c000926d:	50                   	push   eax
c000926e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009272:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009276:	e8 a4 dd 01 00       	call   c002701f <__ltdf2>
c000927b:	83 c4 10             	add    esp,0x10
c000927e:	85 c0                	test   eax,eax
c0009280:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009284:	0f 89 85 02 00 00    	jns    c000950f <linear_vari_process+0x750>
c000928a:	85 c9                	test   ecx,ecx
c000928c:	0f 8e f5 00 00 00    	jle    c0009387 <linear_vari_process+0x5c8>
c0009292:	83 ec 10             	sub    esp,0x10
c0009295:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009298:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000929b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000929f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00092a2:	ff 30                	push   DWORD PTR [eax]
c00092a4:	e8 7b d4 01 00       	call   c0026724 <__subdf3>
c00092a9:	83 c4 18             	add    esp,0x18
c00092ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b4:	52                   	push   edx
c00092b5:	50                   	push   eax
c00092b6:	e8 f5 de 01 00       	call   c00271b0 <fabs>
c00092bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092bf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092c3:	83 c4 10             	add    esp,0x10
c00092c6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00092cb:	68 23 42 92 0c       	push   0xc924223
c00092d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d8:	e8 24 dd 01 00       	call   c0027001 <__gtdf2>
c00092dd:	83 c4 10             	add    esp,0x10
c00092e0:	85 c0                	test   eax,eax
c00092e2:	0f 8e 9f 00 00 00    	jle    c0009387 <linear_vari_process+0x5c8>
c00092e8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00092ec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00092ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00092f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00092f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00092f9:	52                   	push   edx
c00092fa:	50                   	push   eax
c00092fb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092fe:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009301:	e8 1e d4 01 00       	call   c0026724 <__subdf3>
c0009306:	5f                   	pop    edi
c0009307:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000930b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000930f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009312:	e8 9c da 01 00       	call   c0026db3 <__floatsidf>
c0009317:	83 c4 10             	add    esp,0x10
c000931a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000931e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009322:	52                   	push   edx
c0009323:	50                   	push   eax
c0009324:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000932c:	e8 1f d4 01 00       	call   c0026750 <__muldf3>
c0009331:	5d                   	pop    ebp
c0009332:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009336:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000933a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000933d:	e8 71 da 01 00       	call   c0026db3 <__floatsidf>
c0009342:	83 c4 10             	add    esp,0x10
c0009345:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009349:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000934d:	52                   	push   edx
c000934e:	50                   	push   eax
c000934f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009353:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009357:	e8 d8 d6 01 00       	call   c0026a34 <__divdf3>
c000935c:	83 c4 10             	add    esp,0x10
c000935f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009363:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009367:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000936b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000936f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009373:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009377:	e8 57 cd 01 00       	call   c00260d3 <__adddf3>
c000937c:	83 c4 10             	add    esp,0x10
c000937f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009383:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009387:	31 ff                	xor    edi,edi
c0009389:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000938c:	39 f8                	cmp    eax,edi
c000938e:	0f 8e ac 00 00 00    	jle    c0009440 <linear_vari_process+0x681>
c0009394:	8b 16                	mov    edx,DWORD PTR [esi]
c0009396:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0009399:	29 c1                	sub    ecx,eax
c000939b:	89 c8                	mov    eax,ecx
c000939d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00093a0:	01 f8                	add    eax,edi
c00093a2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00093a6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00093a9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00093ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093b0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00093b3:	51                   	push   ecx
c00093b4:	01 f8                	add    eax,edi
c00093b6:	51                   	push   ecx
c00093b7:	47                   	inc    edi
c00093b8:	55                   	push   ebp
c00093b9:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00093bc:	e8 a7 c6 01 00       	call   c0025a68 <__subsf3>
c00093c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c4:	e8 7e dd 01 00       	call   c0027147 <__extendsfdf2>
c00093c9:	83 c4 10             	add    esp,0x10
c00093cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093d0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093d4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093d8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093e4:	e8 67 d3 01 00       	call   c0026750 <__muldf3>
c00093e9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00093f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00093f4:	e8 4e dd 01 00       	call   c0027147 <__extendsfdf2>
c00093f9:	83 c4 10             	add    esp,0x10
c00093fc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009400:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009404:	52                   	push   edx
c0009405:	50                   	push   eax
c0009406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000940a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000940e:	e8 c0 cc 01 00       	call   c00260d3 <__adddf3>
c0009413:	5d                   	pop    ebp
c0009414:	59                   	pop    ecx
c0009415:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009419:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000941d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009421:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009425:	e8 f9 db 01 00       	call   c0027023 <__truncdfsf2>
c000942a:	83 c4 10             	add    esp,0x10
c000942d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009431:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009435:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009438:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000943b:	e9 49 ff ff ff       	jmp    c0009389 <linear_vari_process+0x5ca>
c0009440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009444:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009448:	68 00 00 f0 3f       	push   0x3ff00000
c000944d:	6a 00                	push   0x0
c000944f:	e8 e0 d5 01 00       	call   c0026a34 <__divdf3>
c0009454:	83 c4 10             	add    esp,0x10
c0009457:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000945f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009463:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009467:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946f:	e8 5f cc 01 00       	call   c00260d3 <__adddf3>
c0009474:	59                   	pop    ecx
c0009475:	5f                   	pop    edi
c0009476:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000947a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000947e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009482:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009486:	e8 45 dd 01 00       	call   c00271d0 <lrint>
c000948b:	83 ec 0c             	sub    esp,0xc
c000948e:	50                   	push   eax
c000948f:	e8 1f d9 01 00       	call   c0026db3 <__floatsidf>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000949b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000949f:	52                   	push   edx
c00094a0:	50                   	push   eax
c00094a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a9:	e8 76 d2 01 00       	call   c0026724 <__subdf3>
c00094ae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00094b2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00094b6:	83 c4 20             	add    esp,0x20
c00094b9:	6a 00                	push   0x0
c00094bb:	6a 00                	push   0x0
c00094bd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094c1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094c5:	e8 55 db 01 00       	call   c002701f <__ltdf2>
c00094ca:	83 c4 10             	add    esp,0x10
c00094cd:	85 c0                	test   eax,eax
c00094cf:	79 1e                	jns    c00094ef <linear_vari_process+0x730>
c00094d1:	68 00 00 f0 3f       	push   0x3ff00000
c00094d6:	6a 00                	push   0x0
c00094d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094e0:	e8 ee cb 01 00       	call   c00260d3 <__adddf3>
c00094e5:	83 c4 10             	add    esp,0x10
c00094e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00094eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00094ef:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00094f2:	83 ec 10             	sub    esp,0x10
c00094f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009501:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009505:	e8 1a d2 01 00       	call   c0026724 <__subdf3>
c000950a:	e9 bc fc ff ff       	jmp    c00091cb <linear_vari_process+0x40c>
c000950f:	39 fd                	cmp    ebp,edi
c0009511:	7d 38                	jge    c000954b <linear_vari_process+0x78c>
c0009513:	83 ec 0c             	sub    esp,0xc
c0009516:	89 f8                	mov    eax,edi
c0009518:	29 e8                	sub    eax,ebp
c000951a:	99                   	cdq    
c000951b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000951e:	50                   	push   eax
c000951f:	e8 8f d8 01 00       	call   c0026db3 <__floatsidf>
c0009524:	83 c4 10             	add    esp,0x10
c0009527:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000952b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000952f:	52                   	push   edx
c0009530:	50                   	push   eax
c0009531:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009535:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009539:	e8 95 cb 01 00       	call   c00260d3 <__adddf3>
c000953e:	83 c4 10             	add    esp,0x10
c0009541:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009544:	89 04 24             	mov    DWORD PTR [esp],eax
c0009547:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000954b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000954f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009552:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009556:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0009559:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000955c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000955f:	85 c0                	test   eax,eax
c0009561:	7f 29                	jg     c000958c <linear_vari_process+0x7cd>
c0009563:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000956b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000956f:	89 01                	mov    DWORD PTR [ecx],eax
c0009571:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0009574:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009577:	99                   	cdq    
c0009578:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000957b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000957e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009581:	99                   	cdq    
c0009582:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009585:	31 d2                	xor    edx,edx
c0009587:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000958a:	eb 1d                	jmp    c00095a9 <linear_vari_process+0x7ea>
c000958c:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000958f:	31 d2                	xor    edx,edx
c0009591:	29 c8                	sub    eax,ecx
c0009593:	c1 e0 02             	shl    eax,0x2
c0009596:	39 d1                	cmp    ecx,edx
c0009598:	7e c9                	jle    c0009563 <linear_vari_process+0x7a4>
c000959a:	8b 3e                	mov    edi,DWORD PTR [esi]
c000959c:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c000959f:	83 c0 04             	add    eax,0x4
c00095a2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00095a6:	42                   	inc    edx
c00095a7:	eb ed                	jmp    c0009596 <linear_vari_process+0x7d7>
c00095a9:	83 c4 3c             	add    esp,0x3c
c00095ac:	89 d0                	mov    eax,edx
c00095ae:	5b                   	pop    ebx
c00095af:	5e                   	pop    esi
c00095b0:	5f                   	pop    edi
c00095b1:	5d                   	pop    ebp
c00095b2:	c3                   	ret    

c00095b3 <linear_reset>:
c00095b3:	83 ec 0c             	sub    esp,0xc
c00095b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095ba:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095bd:	85 c0                	test   eax,eax
c00095bf:	74 20                	je     c00095e1 <linear_reset+0x2e>
c00095c1:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095c4:	83 c0 1c             	add    eax,0x1c
c00095c7:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00095ca:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00095d1:	c1 e2 02             	shl    edx,0x2
c00095d4:	51                   	push   ecx
c00095d5:	52                   	push   edx
c00095d6:	6a 00                	push   0x0
c00095d8:	50                   	push   eax
c00095d9:	e8 ad 70 ff ff       	call   c000068b <memset>
c00095de:	83 c4 10             	add    esp,0x10
c00095e1:	83 c4 0c             	add    esp,0xc
c00095e4:	c3                   	ret    

c00095e5 <linear_get_name>:
c00095e5:	31 c0                	xor    eax,eax
c00095e7:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095ec:	75 05                	jne    c00095f3 <linear_get_name+0xe>
c00095ee:	b8 c0 88 02 c0       	mov    eax,0xc00288c0
c00095f3:	c3                   	ret    

c00095f4 <linear_get_description>:
c00095f4:	31 c0                	xor    eax,eax
c00095f6:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095fb:	75 05                	jne    c0009602 <linear_get_description+0xe>
c00095fd:	b8 d4 88 02 c0       	mov    eax,0xc00288d4
c0009602:	c3                   	ret    

c0009603 <linear_set_converter>:
c0009603:	53                   	push   ebx
c0009604:	b8 0a 00 00 00       	mov    eax,0xa
c0009609:	83 ec 08             	sub    esp,0x8
c000960c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009610:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009615:	75 6e                	jne    c0009685 <linear_set_converter+0x82>
c0009617:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000961a:	85 c0                	test   eax,eax
c000961c:	74 13                	je     c0009631 <linear_set_converter+0x2e>
c000961e:	83 ec 0c             	sub    esp,0xc
c0009621:	50                   	push   eax
c0009622:	e8 c3 5e 00 00       	call   c000f4ea <free>
c0009627:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000962e:	83 c4 10             	add    esp,0x10
c0009631:	50                   	push   eax
c0009632:	50                   	push   eax
c0009633:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009636:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000963d:	50                   	push   eax
c000963e:	6a 01                	push   0x1
c0009640:	e8 c5 5e 00 00       	call   c000f50a <calloc>
c0009645:	83 c4 10             	add    esp,0x10
c0009648:	89 c2                	mov    edx,eax
c000964a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000964d:	85 d2                	test   edx,edx
c000964f:	b8 01 00 00 00       	mov    eax,0x1
c0009654:	74 2f                	je     c0009685 <linear_set_converter+0x82>
c0009656:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009659:	83 ec 0c             	sub    esp,0xc
c000965c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000965f:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009665:	c7 43 24 bf 8d 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008dbf
c000966c:	c7 43 20 bf 8d 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008dbf
c0009673:	c7 43 28 b3 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095b3
c000967a:	53                   	push   ebx
c000967b:	e8 33 ff ff ff       	call   c00095b3 <linear_reset>
c0009680:	83 c4 10             	add    esp,0x10
c0009683:	31 c0                	xor    eax,eax
c0009685:	83 c4 08             	add    esp,0x8
c0009688:	5b                   	pop    ebx
c0009689:	c3                   	ret    

c000968a <int_to_fp>:
c000968a:	c1 e0 0c             	shl    eax,0xc
c000968d:	c3                   	ret    

c000968e <fp_to_int>:
c000968e:	c1 f8 0c             	sar    eax,0xc
c0009691:	c3                   	ret    

c0009692 <fp_fraction_part>:
c0009692:	25 ff 0f 00 00       	and    eax,0xfff
c0009697:	c3                   	ret    

c0009698 <fp_to_double>:
c0009698:	83 ec 1c             	sub    esp,0x1c
c000969b:	e8 f2 ff ff ff       	call   c0009692 <fp_fraction_part>
c00096a0:	83 ec 0c             	sub    esp,0xc
c00096a3:	50                   	push   eax
c00096a4:	e8 0a d7 01 00       	call   c0026db3 <__floatsidf>
c00096a9:	83 c4 10             	add    esp,0x10
c00096ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096b4:	68 00 00 30 3f       	push   0x3f300000
c00096b9:	6a 00                	push   0x0
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c3:	e8 88 d0 01 00       	call   c0026750 <__muldf3>
c00096c8:	83 c4 2c             	add    esp,0x2c
c00096cb:	c3                   	ret    

c00096cc <calc_output_single>:
c00096cc:	55                   	push   ebp
c00096cd:	57                   	push   edi
c00096ce:	56                   	push   esi
c00096cf:	89 c6                	mov    esi,eax
c00096d1:	53                   	push   ebx
c00096d2:	89 d3                	mov    ebx,edx
c00096d4:	83 ec 4c             	sub    esp,0x4c
c00096d7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00096db:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00096de:	e8 a7 ff ff ff       	call   c000968a <int_to_fp>
c00096e3:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00096e6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00096ea:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00096ee:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00096f2:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c00096f5:	99                   	cdq    
c00096f6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00096fe:	f7 fb                	idiv   ebx
c0009700:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009708:	89 da                	mov    edx,ebx
c000970a:	0f af d0             	imul   edx,eax
c000970d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009711:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009715:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009719:	29 c2                	sub    edx,eax
c000971b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000971e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009722:	83 c5 04             	add    ebp,0x4
c0009725:	e8 6e ff ff ff       	call   c0009698 <fp_to_double>
c000972a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000972e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009736:	e8 53 ff ff ff       	call   c000968e <fp_to_int>
c000973b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000973e:	52                   	push   edx
c000973f:	52                   	push   edx
c0009740:	51                   	push   ecx
c0009741:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009745:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009749:	e8 1a c3 01 00       	call   c0025a68 <__subsf3>
c000974e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009751:	e8 f1 d9 01 00       	call   c0027147 <__extendsfdf2>
c0009756:	83 c4 10             	add    esp,0x10
c0009759:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000975d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009761:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009765:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009769:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000976d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009771:	e8 da cf 01 00       	call   c0026750 <__muldf3>
c0009776:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000977a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000977e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009781:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009785:	e8 bd d9 01 00       	call   c0027147 <__extendsfdf2>
c000978a:	83 c4 10             	add    esp,0x10
c000978d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009791:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009795:	52                   	push   edx
c0009796:	50                   	push   eax
c0009797:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000979b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000979f:	e8 2f c9 01 00       	call   c00260d3 <__adddf3>
c00097a4:	59                   	pop    ecx
c00097a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00097a9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00097ad:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00097b3:	e8 8f d9 01 00       	call   c0027147 <__extendsfdf2>
c00097b8:	83 c4 10             	add    esp,0x10
c00097bb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097bf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097c3:	52                   	push   edx
c00097c4:	50                   	push   eax
c00097c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097cd:	e8 7e cf 01 00       	call   c0026750 <__muldf3>
c00097d2:	83 c4 10             	add    esp,0x10
c00097d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00097d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00097dd:	52                   	push   edx
c00097de:	50                   	push   eax
c00097df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097e7:	e8 e7 c8 01 00       	call   c00260d3 <__adddf3>
c00097ec:	83 c4 10             	add    esp,0x10
c00097ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00097f7:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c00097fb:	0f 89 1d ff ff ff    	jns    c000971e <calc_output_single+0x52>
c0009801:	89 d9                	mov    ecx,ebx
c0009803:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009807:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000980b:	89 dd                	mov    ebp,ebx
c000980d:	29 c8                	sub    eax,ecx
c000980f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009817:	99                   	cdq    
c0009818:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009820:	f7 fb                	idiv   ebx
c0009822:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009826:	0f af e8             	imul   ebp,eax
c0009829:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c000982d:	01 cd                	add    ebp,ecx
c000982f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009832:	89 e8                	mov    eax,ebp
c0009834:	83 ee 04             	sub    esi,0x4
c0009837:	e8 5c fe ff ff       	call   c0009698 <fp_to_double>
c000983c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009840:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009844:	89 e8                	mov    eax,ebp
c0009846:	29 dd                	sub    ebp,ebx
c0009848:	e8 41 fe ff ff       	call   c000968e <fp_to_int>
c000984d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009850:	52                   	push   edx
c0009851:	52                   	push   edx
c0009852:	51                   	push   ecx
c0009853:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009857:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000985b:	e8 08 c2 01 00       	call   c0025a68 <__subsf3>
c0009860:	89 04 24             	mov    DWORD PTR [esp],eax
c0009863:	e8 df d8 01 00       	call   c0027147 <__extendsfdf2>
c0009868:	83 c4 10             	add    esp,0x10
c000986b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000986f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009877:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000987b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000987f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009883:	e8 c8 ce 01 00       	call   c0026750 <__muldf3>
c0009888:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000988c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009890:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009893:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009897:	e8 ab d8 01 00       	call   c0027147 <__extendsfdf2>
c000989c:	83 c4 10             	add    esp,0x10
c000989f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098a3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098a7:	52                   	push   edx
c00098a8:	50                   	push   eax
c00098a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098b1:	e8 1d c8 01 00       	call   c00260d3 <__adddf3>
c00098b6:	59                   	pop    ecx
c00098b7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00098bb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00098bf:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c00098c5:	e8 7d d8 01 00       	call   c0027147 <__extendsfdf2>
c00098ca:	83 c4 10             	add    esp,0x10
c00098cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098d1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098d5:	52                   	push   edx
c00098d6:	50                   	push   eax
c00098d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098df:	e8 6c ce 01 00       	call   c0026750 <__muldf3>
c00098e4:	83 c4 10             	add    esp,0x10
c00098e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098ef:	52                   	push   edx
c00098f0:	50                   	push   eax
c00098f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098f9:	e8 d5 c7 01 00       	call   c00260d3 <__adddf3>
c00098fe:	83 c4 10             	add    esp,0x10
c0009901:	85 ed                	test   ebp,ebp
c0009903:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009907:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000990b:	0f 8f 21 ff ff ff    	jg     c0009832 <calc_output_single+0x166>
c0009911:	52                   	push   edx
c0009912:	50                   	push   eax
c0009913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009917:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000991b:	e8 b3 c7 01 00       	call   c00260d3 <__adddf3>
c0009920:	83 c4 5c             	add    esp,0x5c
c0009923:	5b                   	pop    ebx
c0009924:	5e                   	pop    esi
c0009925:	5f                   	pop    edi
c0009926:	5d                   	pop    ebp
c0009927:	c3                   	ret    

c0009928 <calc_output_stereo>:
c0009928:	55                   	push   ebp
c0009929:	89 cd                	mov    ebp,ecx
c000992b:	57                   	push   edi
c000992c:	56                   	push   esi
c000992d:	53                   	push   ebx
c000992e:	89 c3                	mov    ebx,eax
c0009930:	83 ec 6c             	sub    esp,0x6c
c0009933:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009937:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000993e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009945:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009949:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000994d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009950:	e8 35 fd ff ff       	call   c000968a <int_to_fp>
c0009955:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000995d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009961:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009969:	29 c8                	sub    eax,ecx
c000996b:	99                   	cdq    
c000996c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009970:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009974:	0f af d0             	imul   edx,eax
c0009977:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000997a:	31 d2                	xor    edx,edx
c000997c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009980:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009984:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009987:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000998b:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c000998e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009992:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009996:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009999:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000999e:	29 c1                	sub    ecx,eax
c00099a0:	31 c0                	xor    eax,eax
c00099a2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c00099a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099ad:	83 c7 08             	add    edi,0x8
c00099b0:	e8 e3 fc ff ff       	call   c0009698 <fp_to_double>
c00099b5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00099b9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00099bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099c1:	e8 c8 fc ff ff       	call   c000968e <fp_to_int>
c00099c6:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c00099c9:	52                   	push   edx
c00099ca:	52                   	push   edx
c00099cb:	51                   	push   ecx
c00099cc:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c00099d0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c00099d4:	e8 8f c0 01 00       	call   c0025a68 <__subsf3>
c00099d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00099dc:	e8 66 d7 01 00       	call   c0027147 <__extendsfdf2>
c00099e1:	83 c4 10             	add    esp,0x10
c00099e4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00099e8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c00099ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099f0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099fc:	e8 4f cd 01 00       	call   c0026750 <__muldf3>
c0009a01:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a05:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a0c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a10:	e8 32 d7 01 00       	call   c0027147 <__extendsfdf2>
c0009a15:	83 c4 10             	add    esp,0x10
c0009a18:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a1c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a20:	52                   	push   edx
c0009a21:	50                   	push   eax
c0009a22:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a26:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a2a:	e8 a4 c6 01 00       	call   c00260d3 <__adddf3>
c0009a2f:	59                   	pop    ecx
c0009a30:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a34:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009a38:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009a3e:	e8 04 d7 01 00       	call   c0027147 <__extendsfdf2>
c0009a43:	83 c4 10             	add    esp,0x10
c0009a46:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a4a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a4e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a52:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a56:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a5a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a5e:	e8 ed cc 01 00       	call   c0026750 <__muldf3>
c0009a63:	83 c4 10             	add    esp,0x10
c0009a66:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a6a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a6e:	52                   	push   edx
c0009a6f:	50                   	push   eax
c0009a70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a78:	e8 56 c6 01 00       	call   c00260d3 <__adddf3>
c0009a7d:	59                   	pop    ecx
c0009a7e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009a82:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009a86:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009a8c:	e8 b6 d6 01 00       	call   c0027147 <__extendsfdf2>
c0009a91:	83 c4 10             	add    esp,0x10
c0009a94:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a98:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a9c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aa0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aa4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009aa8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009aac:	e8 9f cc 01 00       	call   c0026750 <__muldf3>
c0009ab1:	83 c4 10             	add    esp,0x10
c0009ab4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009ab8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009abc:	52                   	push   edx
c0009abd:	50                   	push   eax
c0009abe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ac2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ac6:	e8 08 c6 01 00       	call   c00260d3 <__adddf3>
c0009acb:	83 c4 10             	add    esp,0x10
c0009ace:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ad2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ad6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ada:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009ade:	0f 89 c5 fe ff ff    	jns    c00099a9 <calc_output_stereo+0x81>
c0009ae4:	29 e9                	sub    ecx,ebp
c0009ae6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009aea:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009aee:	29 c8                	sub    eax,ecx
c0009af0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009af8:	99                   	cdq    
c0009af9:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009afd:	31 d2                	xor    edx,edx
c0009aff:	0f af f8             	imul   edi,eax
c0009b02:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b06:	40                   	inc    eax
c0009b07:	01 cf                	add    edi,ecx
c0009b09:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b0e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b12:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b1a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b1d:	31 c0                	xor    eax,eax
c0009b1f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b23:	89 f8                	mov    eax,edi
c0009b25:	83 eb 08             	sub    ebx,0x8
c0009b28:	e8 6b fb ff ff       	call   c0009698 <fp_to_double>
c0009b2d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b31:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b35:	89 f8                	mov    eax,edi
c0009b37:	e8 52 fb ff ff       	call   c000968e <fp_to_int>
c0009b3c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009b3f:	52                   	push   edx
c0009b40:	52                   	push   edx
c0009b41:	55                   	push   ebp
c0009b42:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009b46:	e8 1d bf 01 00       	call   c0025a68 <__subsf3>
c0009b4b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b4e:	e8 f4 d5 01 00       	call   c0027147 <__extendsfdf2>
c0009b53:	83 c4 10             	add    esp,0x10
c0009b56:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b5a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b6a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b6e:	e8 dd cb 01 00       	call   c0026750 <__muldf3>
c0009b73:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009b76:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b7a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b7e:	e8 c4 d5 01 00       	call   c0027147 <__extendsfdf2>
c0009b83:	83 c4 10             	add    esp,0x10
c0009b86:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b8a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b8e:	52                   	push   edx
c0009b8f:	50                   	push   eax
c0009b90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b98:	e8 36 c5 01 00       	call   c00260d3 <__adddf3>
c0009b9d:	59                   	pop    ecx
c0009b9e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009ba2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009ba6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009bac:	e8 96 d5 01 00       	call   c0027147 <__extendsfdf2>
c0009bb1:	83 c4 10             	add    esp,0x10
c0009bb4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bbc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bc0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bc4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bc8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bcc:	e8 7f cb 01 00       	call   c0026750 <__muldf3>
c0009bd1:	83 c4 10             	add    esp,0x10
c0009bd4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bd8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bdc:	52                   	push   edx
c0009bdd:	50                   	push   eax
c0009bde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009be2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009be6:	e8 e8 c4 01 00       	call   c00260d3 <__adddf3>
c0009beb:	5d                   	pop    ebp
c0009bec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009bf0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009bf4:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009bfa:	e8 48 d5 01 00       	call   c0027147 <__extendsfdf2>
c0009bff:	83 c4 10             	add    esp,0x10
c0009c02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c06:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c0a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c0e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c12:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c16:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c1a:	e8 31 cb 01 00       	call   c0026750 <__muldf3>
c0009c1f:	83 c4 10             	add    esp,0x10
c0009c22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c26:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c2a:	52                   	push   edx
c0009c2b:	50                   	push   eax
c0009c2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c30:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c34:	e8 9a c4 01 00       	call   c00260d3 <__adddf3>
c0009c39:	83 c4 10             	add    esp,0x10
c0009c3c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009c40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c44:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c48:	85 ff                	test   edi,edi
c0009c4a:	0f 8f d3 fe ff ff    	jg     c0009b23 <calc_output_stereo+0x1fb>
c0009c50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c60:	e8 6e c4 01 00       	call   c00260d3 <__adddf3>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c70:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c74:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c80:	e8 cb ca 01 00       	call   c0026750 <__muldf3>
c0009c85:	59                   	pop    ecx
c0009c86:	5b                   	pop    ebx
c0009c87:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009c8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c97:	e8 87 d3 01 00       	call   c0027023 <__truncdfsf2>
c0009c9c:	83 c4 10             	add    esp,0x10
c0009c9f:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ca6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb8:	e8 16 c4 01 00       	call   c00260d3 <__adddf3>
c0009cbd:	83 c4 10             	add    esp,0x10
c0009cc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cc8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ccc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd8:	e8 73 ca 01 00       	call   c0026750 <__muldf3>
c0009cdd:	5e                   	pop    esi
c0009cde:	5f                   	pop    edi
c0009cdf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ce3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cef:	e8 2f d3 01 00       	call   c0027023 <__truncdfsf2>
c0009cf4:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009cfb:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009cfe:	83 c4 7c             	add    esp,0x7c
c0009d01:	5b                   	pop    ebx
c0009d02:	5e                   	pop    esi
c0009d03:	5f                   	pop    edi
c0009d04:	5d                   	pop    ebp
c0009d05:	c3                   	ret    

c0009d06 <calc_output_quad>:
c0009d06:	55                   	push   ebp
c0009d07:	57                   	push   edi
c0009d08:	56                   	push   esi
c0009d09:	89 c6                	mov    esi,eax
c0009d0b:	53                   	push   ebx
c0009d0c:	83 ec 7c             	sub    esp,0x7c
c0009d0f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d13:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d17:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d1e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d25:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d2d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d30:	e8 55 f9 ff ff       	call   c000968a <int_to_fp>
c0009d35:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009d38:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009d3b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009d3f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009d43:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009d47:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009d4b:	99                   	cdq    
c0009d4c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009d50:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d54:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009d57:	31 d2                	xor    edx,edx
c0009d59:	0f af d8             	imul   ebx,eax
c0009d5c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009d64:	0f af c7             	imul   eax,edi
c0009d67:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009d6b:	29 c1                	sub    ecx,eax
c0009d6d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009d75:	31 c0                	xor    eax,eax
c0009d77:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009d7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d7e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d8a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d8e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d92:	89 d8                	mov    eax,ebx
c0009d94:	83 c7 10             	add    edi,0x10
c0009d97:	e8 fc f8 ff ff       	call   c0009698 <fp_to_double>
c0009d9c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009da0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da4:	89 d8                	mov    eax,ebx
c0009da6:	e8 e3 f8 ff ff       	call   c000968e <fp_to_int>
c0009dab:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009daf:	52                   	push   edx
c0009db0:	52                   	push   edx
c0009db1:	51                   	push   ecx
c0009db2:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009db6:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009dba:	e8 a9 bc 01 00       	call   c0025a68 <__subsf3>
c0009dbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0009dc2:	e8 80 d3 01 00       	call   c0027147 <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009dce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009dd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dda:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009dde:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009de2:	e8 69 c9 01 00       	call   c0026750 <__muldf3>
c0009de7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009deb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009def:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009df2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009df6:	e8 4c d3 01 00       	call   c0027147 <__extendsfdf2>
c0009dfb:	83 c4 10             	add    esp,0x10
c0009dfe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e02:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e06:	52                   	push   edx
c0009e07:	50                   	push   eax
c0009e08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e10:	e8 be c2 01 00       	call   c00260d3 <__adddf3>
c0009e15:	59                   	pop    ecx
c0009e16:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e1a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e1e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e24:	e8 1e d3 01 00       	call   c0027147 <__extendsfdf2>
c0009e29:	83 c4 10             	add    esp,0x10
c0009e2c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e30:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e3c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e40:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e44:	e8 07 c9 01 00       	call   c0026750 <__muldf3>
c0009e49:	83 c4 10             	add    esp,0x10
c0009e4c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e50:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e54:	52                   	push   edx
c0009e55:	50                   	push   eax
c0009e56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e5e:	e8 70 c2 01 00       	call   c00260d3 <__adddf3>
c0009e63:	59                   	pop    ecx
c0009e64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009e68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009e6c:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009e72:	e8 d0 d2 01 00       	call   c0027147 <__extendsfdf2>
c0009e77:	83 c4 10             	add    esp,0x10
c0009e7a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e7e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e8a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e8e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e92:	e8 b9 c8 01 00       	call   c0026750 <__muldf3>
c0009e97:	83 c4 10             	add    esp,0x10
c0009e9a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e9e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ea2:	52                   	push   edx
c0009ea3:	50                   	push   eax
c0009ea4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ea8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009eac:	e8 22 c2 01 00       	call   c00260d3 <__adddf3>
c0009eb1:	59                   	pop    ecx
c0009eb2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009eb6:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009eba:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009ec0:	e8 82 d2 01 00       	call   c0027147 <__extendsfdf2>
c0009ec5:	83 c4 10             	add    esp,0x10
c0009ec8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ecc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009edc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ee0:	e8 6b c8 01 00       	call   c0026750 <__muldf3>
c0009ee5:	83 c4 10             	add    esp,0x10
c0009ee8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009eec:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ef0:	52                   	push   edx
c0009ef1:	50                   	push   eax
c0009ef2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009ef6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009efa:	e8 d4 c1 01 00       	call   c00260d3 <__adddf3>
c0009eff:	59                   	pop    ecx
c0009f00:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f04:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f08:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f0e:	e8 34 d2 01 00       	call   c0027147 <__extendsfdf2>
c0009f13:	83 c4 10             	add    esp,0x10
c0009f16:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f1a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f26:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f2a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f2e:	e8 1d c8 01 00       	call   c0026750 <__muldf3>
c0009f33:	83 c4 10             	add    esp,0x10
c0009f36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f3a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f3e:	52                   	push   edx
c0009f3f:	50                   	push   eax
c0009f40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f48:	e8 86 c1 01 00       	call   c00260d3 <__adddf3>
c0009f4d:	83 c4 10             	add    esp,0x10
c0009f50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009f54:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009f58:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009f5c:	0f 89 30 fe ff ff    	jns    c0009d92 <calc_output_quad+0x8c>
c0009f62:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009f66:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f6a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f6e:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009f72:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009f7a:	29 c8                	sub    eax,ecx
c0009f7c:	99                   	cdq    
c0009f7d:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f81:	31 d2                	xor    edx,edx
c0009f83:	0f af d8             	imul   ebx,eax
c0009f86:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009f8a:	40                   	inc    eax
c0009f8b:	01 cb                	add    ebx,ecx
c0009f8d:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009f92:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009f96:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c0009f9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009f9e:	8d 34 86             	lea    esi,[esi+eax*4]
c0009fa1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0009fa9:	31 c0                	xor    eax,eax
c0009fab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009faf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fb7:	89 d8                	mov    eax,ebx
c0009fb9:	83 ee 10             	sub    esi,0x10
c0009fbc:	e8 d7 f6 ff ff       	call   c0009698 <fp_to_double>
c0009fc1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fc9:	89 d8                	mov    eax,ebx
c0009fcb:	e8 be f6 ff ff       	call   c000968e <fp_to_int>
c0009fd0:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c0009fd4:	52                   	push   edx
c0009fd5:	52                   	push   edx
c0009fd6:	57                   	push   edi
c0009fd7:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fdb:	e8 88 ba 01 00       	call   c0025a68 <__subsf3>
c0009fe0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fe3:	e8 5f d1 01 00       	call   c0027147 <__extendsfdf2>
c0009fe8:	83 c4 10             	add    esp,0x10
c0009feb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fef:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ffb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009fff:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a003:	e8 48 c7 01 00       	call   c0026750 <__muldf3>
c000a008:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a00b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a00f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a013:	e8 2f d1 01 00       	call   c0027147 <__extendsfdf2>
c000a018:	83 c4 10             	add    esp,0x10
c000a01b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a023:	52                   	push   edx
c000a024:	50                   	push   eax
c000a025:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a029:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a02d:	e8 a1 c0 01 00       	call   c00260d3 <__adddf3>
c000a032:	59                   	pop    ecx
c000a033:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a037:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a03b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a041:	e8 01 d1 01 00       	call   c0027147 <__extendsfdf2>
c000a046:	83 c4 10             	add    esp,0x10
c000a049:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a04d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a051:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a055:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a059:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a061:	e8 ea c6 01 00       	call   c0026750 <__muldf3>
c000a066:	83 c4 10             	add    esp,0x10
c000a069:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a06d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a071:	52                   	push   edx
c000a072:	50                   	push   eax
c000a073:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a077:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a07b:	e8 53 c0 01 00       	call   c00260d3 <__adddf3>
c000a080:	5f                   	pop    edi
c000a081:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a085:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a089:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a08f:	e8 b3 d0 01 00       	call   c0027147 <__extendsfdf2>
c000a094:	83 c4 10             	add    esp,0x10
c000a097:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a09b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a09f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ab:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0af:	e8 9c c6 01 00       	call   c0026750 <__muldf3>
c000a0b4:	83 c4 10             	add    esp,0x10
c000a0b7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0bb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0bf:	52                   	push   edx
c000a0c0:	50                   	push   eax
c000a0c1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0c5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0c9:	e8 05 c0 01 00       	call   c00260d3 <__adddf3>
c000a0ce:	59                   	pop    ecx
c000a0cf:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a0d3:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a0d7:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a0dd:	e8 65 d0 01 00       	call   c0027147 <__extendsfdf2>
c000a0e2:	83 c4 10             	add    esp,0x10
c000a0e5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0f5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0fd:	e8 4e c6 01 00       	call   c0026750 <__muldf3>
c000a102:	83 c4 10             	add    esp,0x10
c000a105:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a109:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a10d:	52                   	push   edx
c000a10e:	50                   	push   eax
c000a10f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a113:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a117:	e8 b7 bf 01 00       	call   c00260d3 <__adddf3>
c000a11c:	5f                   	pop    edi
c000a11d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a121:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a125:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a12b:	e8 17 d0 01 00       	call   c0027147 <__extendsfdf2>
c000a130:	83 c4 10             	add    esp,0x10
c000a133:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a137:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a13b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a143:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a147:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a14b:	e8 00 c6 01 00       	call   c0026750 <__muldf3>
c000a150:	83 c4 10             	add    esp,0x10
c000a153:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a157:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a15b:	52                   	push   edx
c000a15c:	50                   	push   eax
c000a15d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a161:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a165:	e8 69 bf 01 00       	call   c00260d3 <__adddf3>
c000a16a:	83 c4 10             	add    esp,0x10
c000a16d:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a171:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a175:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a179:	85 db                	test   ebx,ebx
c000a17b:	0f 8f 36 fe ff ff    	jg     c0009fb7 <calc_output_quad+0x2b1>
c000a181:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a185:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a189:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a18d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a191:	e8 3d bf 01 00       	call   c00260d3 <__adddf3>
c000a196:	83 c4 10             	add    esp,0x10
c000a199:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a19d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1b1:	e8 9a c5 01 00       	call   c0026750 <__muldf3>
c000a1b6:	59                   	pop    ecx
c000a1b7:	5b                   	pop    ebx
c000a1b8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a1bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c8:	e8 56 ce 01 00       	call   c0027023 <__truncdfsf2>
c000a1cd:	83 c4 10             	add    esp,0x10
c000a1d0:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a1d7:	89 06                	mov    DWORD PTR [esi],eax
c000a1d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1e1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1e5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1e9:	e8 e5 be 01 00       	call   c00260d3 <__adddf3>
c000a1ee:	83 c4 10             	add    esp,0x10
c000a1f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a201:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a205:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a209:	e8 42 c5 01 00       	call   c0026750 <__muldf3>
c000a20e:	5e                   	pop    esi
c000a20f:	5f                   	pop    edi
c000a210:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a214:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a21c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a220:	e8 fe cd 01 00       	call   c0027023 <__truncdfsf2>
c000a225:	83 c4 10             	add    esp,0x10
c000a228:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a22f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a232:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a236:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a23a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a23e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a242:	e8 8c be 01 00       	call   c00260d3 <__adddf3>
c000a247:	83 c4 10             	add    esp,0x10
c000a24a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a24e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a252:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a256:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a25a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a25e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a262:	e8 e9 c4 01 00       	call   c0026750 <__muldf3>
c000a267:	5d                   	pop    ebp
c000a268:	59                   	pop    ecx
c000a269:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a26d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a271:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a275:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a279:	e8 a5 cd 01 00       	call   c0027023 <__truncdfsf2>
c000a27e:	83 c4 10             	add    esp,0x10
c000a281:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a288:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a28b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a28f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a293:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a297:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a29b:	e8 33 be 01 00       	call   c00260d3 <__adddf3>
c000a2a0:	83 c4 10             	add    esp,0x10
c000a2a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2bb:	e8 90 c4 01 00       	call   c0026750 <__muldf3>
c000a2c0:	5b                   	pop    ebx
c000a2c1:	5e                   	pop    esi
c000a2c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2d2:	e8 4c cd 01 00       	call   c0027023 <__truncdfsf2>
c000a2d7:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a2de:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a2e1:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a2e7:	5b                   	pop    ebx
c000a2e8:	5e                   	pop    esi
c000a2e9:	5f                   	pop    edi
c000a2ea:	5d                   	pop    ebp
c000a2eb:	c3                   	ret    

c000a2ec <calc_output_hex>:
c000a2ec:	55                   	push   ebp
c000a2ed:	89 cd                	mov    ebp,ecx
c000a2ef:	57                   	push   edi
c000a2f0:	56                   	push   esi
c000a2f1:	53                   	push   ebx
c000a2f2:	89 c3                	mov    ebx,eax
c000a2f4:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a2fa:	89 14 24             	mov    DWORD PTR [esp],edx
c000a2fd:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a304:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a30b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a30f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a313:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a316:	e8 6f f3 ff ff       	call   c000968a <int_to_fp>
c000a31b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a31e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a322:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a325:	29 c8                	sub    eax,ecx
c000a327:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a32b:	99                   	cdq    
c000a32c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a334:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a337:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a33f:	0f af f8             	imul   edi,eax
c000a342:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a345:	01 cf                	add    edi,ecx
c000a347:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a34b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a34e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a352:	0f af c2             	imul   eax,edx
c000a355:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a359:	29 c1                	sub    ecx,eax
c000a35b:	31 d2                	xor    edx,edx
c000a35d:	31 c0                	xor    eax,eax
c000a35f:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a362:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a366:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a36a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a36e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a372:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a376:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a37a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a37e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a382:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a386:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a38a:	89 f8                	mov    eax,edi
c000a38c:	e8 07 f3 ff ff       	call   c0009698 <fp_to_double>
c000a391:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a395:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a399:	89 f8                	mov    eax,edi
c000a39b:	e8 ee f2 ff ff       	call   c000968e <fp_to_int>
c000a3a0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3a4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a3a7:	52                   	push   edx
c000a3a8:	52                   	push   edx
c000a3a9:	51                   	push   ecx
c000a3aa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a3ae:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a3b5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a3b9:	e8 aa b6 01 00       	call   c0025a68 <__subsf3>
c000a3be:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3c1:	e8 81 cd 01 00       	call   c0027147 <__extendsfdf2>
c000a3c6:	83 c4 10             	add    esp,0x10
c000a3c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3e1:	e8 6a c3 01 00       	call   c0026750 <__muldf3>
c000a3e6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a3ee:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a3f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a3f5:	e8 4d cd 01 00       	call   c0027147 <__extendsfdf2>
c000a3fa:	83 c4 10             	add    esp,0x10
c000a3fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a401:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a405:	52                   	push   edx
c000a406:	50                   	push   eax
c000a407:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a40b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a40f:	e8 bf bc 01 00       	call   c00260d3 <__adddf3>
c000a414:	59                   	pop    ecx
c000a415:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a419:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a41d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a423:	e8 1f cd 01 00       	call   c0027147 <__extendsfdf2>
c000a428:	83 c4 10             	add    esp,0x10
c000a42b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a42f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a433:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a437:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a43b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a43f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a443:	e8 08 c3 01 00       	call   c0026750 <__muldf3>
c000a448:	83 c4 10             	add    esp,0x10
c000a44b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a44f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a453:	52                   	push   edx
c000a454:	50                   	push   eax
c000a455:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a459:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a45d:	e8 71 bc 01 00       	call   c00260d3 <__adddf3>
c000a462:	59                   	pop    ecx
c000a463:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a467:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a46b:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a471:	e8 d1 cc 01 00       	call   c0027147 <__extendsfdf2>
c000a476:	83 c4 10             	add    esp,0x10
c000a479:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a47d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a481:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a485:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a489:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a48d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a491:	e8 ba c2 01 00       	call   c0026750 <__muldf3>
c000a496:	83 c4 10             	add    esp,0x10
c000a499:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a49d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4a1:	52                   	push   edx
c000a4a2:	50                   	push   eax
c000a4a3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ab:	e8 23 bc 01 00       	call   c00260d3 <__adddf3>
c000a4b0:	59                   	pop    ecx
c000a4b1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a4b5:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a4b9:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a4bf:	e8 83 cc 01 00       	call   c0027147 <__extendsfdf2>
c000a4c4:	83 c4 10             	add    esp,0x10
c000a4c7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4cb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4db:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4df:	e8 6c c2 01 00       	call   c0026750 <__muldf3>
c000a4e4:	83 c4 10             	add    esp,0x10
c000a4e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4ef:	52                   	push   edx
c000a4f0:	50                   	push   eax
c000a4f1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4f5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4f9:	e8 d5 bb 01 00       	call   c00260d3 <__adddf3>
c000a4fe:	59                   	pop    ecx
c000a4ff:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a503:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a507:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a50d:	e8 35 cc 01 00       	call   c0027147 <__extendsfdf2>
c000a512:	83 c4 10             	add    esp,0x10
c000a515:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a519:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a51d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a525:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a529:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a52d:	e8 1e c2 01 00       	call   c0026750 <__muldf3>
c000a532:	83 c4 10             	add    esp,0x10
c000a535:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a539:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a53d:	52                   	push   edx
c000a53e:	50                   	push   eax
c000a53f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a543:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a547:	e8 87 bb 01 00       	call   c00260d3 <__adddf3>
c000a54c:	59                   	pop    ecx
c000a54d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a551:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a555:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a55b:	e8 e7 cb 01 00       	call   c0027147 <__extendsfdf2>
c000a560:	83 c4 10             	add    esp,0x10
c000a563:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a567:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a573:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a577:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a57b:	e8 d0 c1 01 00       	call   c0026750 <__muldf3>
c000a580:	83 c4 10             	add    esp,0x10
c000a583:	83 c6 18             	add    esi,0x18
c000a586:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a58a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a58e:	52                   	push   edx
c000a58f:	50                   	push   eax
c000a590:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a594:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a598:	e8 36 bb 01 00       	call   c00260d3 <__adddf3>
c000a59d:	59                   	pop    ecx
c000a59e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5a2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a5a6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a5ac:	e8 96 cb 01 00       	call   c0027147 <__extendsfdf2>
c000a5b1:	83 c4 10             	add    esp,0x10
c000a5b4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5b8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5c4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5c8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5cc:	e8 7f c1 01 00       	call   c0026750 <__muldf3>
c000a5d1:	83 c4 10             	add    esp,0x10
c000a5d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5d8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5dc:	52                   	push   edx
c000a5dd:	50                   	push   eax
c000a5de:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5e2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5e6:	e8 e8 ba 01 00       	call   c00260d3 <__adddf3>
c000a5eb:	83 c4 10             	add    esp,0x10
c000a5ee:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a5f2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a5f6:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a5f9:	0f 89 8b fd ff ff    	jns    c000a38a <calc_output_hex+0x9e>
c000a5ff:	31 f6                	xor    esi,esi
c000a601:	31 ff                	xor    edi,edi
c000a603:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a607:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a60a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a60e:	29 e9                	sub    ecx,ebp
c000a610:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a614:	29 c8                	sub    eax,ecx
c000a616:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a619:	99                   	cdq    
c000a61a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a61e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a621:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a625:	0f af e8             	imul   ebp,eax
c000a628:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a62c:	40                   	inc    eax
c000a62d:	01 cd                	add    ebp,ecx
c000a62f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a634:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a638:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a63c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a640:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a643:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a647:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a64b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a64f:	89 e8                	mov    eax,ebp
c000a651:	e8 42 f0 ff ff       	call   c0009698 <fp_to_double>
c000a656:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a65a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a65e:	89 e8                	mov    eax,ebp
c000a660:	e8 29 f0 ff ff       	call   c000968e <fp_to_int>
c000a665:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a669:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a66c:	52                   	push   edx
c000a66d:	52                   	push   edx
c000a66e:	51                   	push   ecx
c000a66f:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a676:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a67d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a681:	e8 e2 b3 01 00       	call   c0025a68 <__subsf3>
c000a686:	89 04 24             	mov    DWORD PTR [esp],eax
c000a689:	e8 b9 ca 01 00       	call   c0027147 <__extendsfdf2>
c000a68e:	83 c4 10             	add    esp,0x10
c000a691:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a695:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a699:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6a5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6a9:	e8 a2 c0 01 00       	call   c0026750 <__muldf3>
c000a6ae:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a6b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6b9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a6bc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a6c0:	e8 82 ca 01 00       	call   c0027147 <__extendsfdf2>
c000a6c5:	83 c4 10             	add    esp,0x10
c000a6c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6d0:	52                   	push   edx
c000a6d1:	50                   	push   eax
c000a6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6da:	e8 f4 b9 01 00       	call   c00260d3 <__adddf3>
c000a6df:	59                   	pop    ecx
c000a6e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a6e4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a6e8:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a6ee:	e8 54 ca 01 00       	call   c0027147 <__extendsfdf2>
c000a6f3:	83 c4 10             	add    esp,0x10
c000a6f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a702:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a706:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a70a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a70e:	e8 3d c0 01 00       	call   c0026750 <__muldf3>
c000a713:	83 c4 10             	add    esp,0x10
c000a716:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a71a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a71e:	52                   	push   edx
c000a71f:	50                   	push   eax
c000a720:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a724:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a728:	e8 a6 b9 01 00       	call   c00260d3 <__adddf3>
c000a72d:	59                   	pop    ecx
c000a72e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a732:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a736:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a73c:	e8 06 ca 01 00       	call   c0027147 <__extendsfdf2>
c000a741:	83 c4 10             	add    esp,0x10
c000a744:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a748:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a74c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a750:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a754:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a758:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a75c:	e8 ef bf 01 00       	call   c0026750 <__muldf3>
c000a761:	83 c4 10             	add    esp,0x10
c000a764:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a768:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a76c:	52                   	push   edx
c000a76d:	50                   	push   eax
c000a76e:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a772:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a776:	e8 58 b9 01 00       	call   c00260d3 <__adddf3>
c000a77b:	59                   	pop    ecx
c000a77c:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a780:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a784:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a78a:	e8 b8 c9 01 00       	call   c0027147 <__extendsfdf2>
c000a78f:	83 c4 10             	add    esp,0x10
c000a792:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a796:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a79a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a79e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7a2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7a6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7aa:	e8 a1 bf 01 00       	call   c0026750 <__muldf3>
c000a7af:	83 c4 10             	add    esp,0x10
c000a7b2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7b6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7ba:	52                   	push   edx
c000a7bb:	50                   	push   eax
c000a7bc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c4:	e8 0a b9 01 00       	call   c00260d3 <__adddf3>
c000a7c9:	59                   	pop    ecx
c000a7ca:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a7ce:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a7d2:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a7d8:	e8 6a c9 01 00       	call   c0027147 <__extendsfdf2>
c000a7dd:	83 c4 10             	add    esp,0x10
c000a7e0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7e4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7f0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7f4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7f8:	e8 53 bf 01 00       	call   c0026750 <__muldf3>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a804:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a808:	52                   	push   edx
c000a809:	50                   	push   eax
c000a80a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a80e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a812:	e8 bc b8 01 00       	call   c00260d3 <__adddf3>
c000a817:	59                   	pop    ecx
c000a818:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a81c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a820:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a826:	e8 1c c9 01 00       	call   c0027147 <__extendsfdf2>
c000a82b:	83 c4 10             	add    esp,0x10
c000a82e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a832:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a836:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a83a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a83e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a842:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a846:	e8 05 bf 01 00       	call   c0026750 <__muldf3>
c000a84b:	83 c4 10             	add    esp,0x10
c000a84e:	83 eb 18             	sub    ebx,0x18
c000a851:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a855:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a859:	52                   	push   edx
c000a85a:	50                   	push   eax
c000a85b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a85f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a863:	e8 6b b8 01 00       	call   c00260d3 <__adddf3>
c000a868:	59                   	pop    ecx
c000a869:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a86d:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a871:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a877:	e8 cb c8 01 00       	call   c0027147 <__extendsfdf2>
c000a87c:	83 c4 10             	add    esp,0x10
c000a87f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a883:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a887:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a88b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a88f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a893:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a897:	e8 b4 be 01 00       	call   c0026750 <__muldf3>
c000a89c:	83 c4 10             	add    esp,0x10
c000a89f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8a7:	52                   	push   edx
c000a8a8:	50                   	push   eax
c000a8a9:	57                   	push   edi
c000a8aa:	56                   	push   esi
c000a8ab:	e8 23 b8 01 00       	call   c00260d3 <__adddf3>
c000a8b0:	83 c4 10             	add    esp,0x10
c000a8b3:	89 c6                	mov    esi,eax
c000a8b5:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a8b8:	89 d7                	mov    edi,edx
c000a8ba:	85 ed                	test   ebp,ebp
c000a8bc:	0f 8f 8d fd ff ff    	jg     c000a64f <calc_output_hex+0x363>
c000a8c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8d2:	e8 fc b7 01 00       	call   c00260d3 <__adddf3>
c000a8d7:	83 c4 10             	add    esp,0x10
c000a8da:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8f1:	e8 5a be 01 00       	call   c0026750 <__muldf3>
c000a8f6:	59                   	pop    ecx
c000a8f7:	5b                   	pop    ebx
c000a8f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a8fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a900:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a904:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a908:	e8 16 c7 01 00       	call   c0027023 <__truncdfsf2>
c000a90d:	83 c4 10             	add    esp,0x10
c000a910:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a917:	89 03                	mov    DWORD PTR [ebx],eax
c000a919:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a91d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a921:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a925:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a929:	e8 a5 b7 01 00       	call   c00260d3 <__adddf3>
c000a92e:	83 c4 10             	add    esp,0x10
c000a931:	89 04 24             	mov    DWORD PTR [esp],eax
c000a934:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a938:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a93c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a940:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a944:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a948:	e8 03 be 01 00       	call   c0026750 <__muldf3>
c000a94d:	5d                   	pop    ebp
c000a94e:	59                   	pop    ecx
c000a94f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a953:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a957:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95f:	e8 bf c6 01 00       	call   c0027023 <__truncdfsf2>
c000a964:	83 c4 10             	add    esp,0x10
c000a967:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a96e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a971:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a975:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a979:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a97d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a981:	e8 4d b7 01 00       	call   c00260d3 <__adddf3>
c000a986:	83 c4 10             	add    esp,0x10
c000a989:	89 04 24             	mov    DWORD PTR [esp],eax
c000a98c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a990:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a994:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a998:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a99c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9a0:	e8 ab bd 01 00       	call   c0026750 <__muldf3>
c000a9a5:	5b                   	pop    ebx
c000a9a6:	5d                   	pop    ebp
c000a9a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b7:	e8 67 c6 01 00       	call   c0027023 <__truncdfsf2>
c000a9bc:	83 c4 10             	add    esp,0x10
c000a9bf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9c6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000a9c9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9cd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9d9:	e8 f5 b6 01 00       	call   c00260d3 <__adddf3>
c000a9de:	83 c4 10             	add    esp,0x10
c000a9e1:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9e4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f8:	e8 53 bd 01 00       	call   c0026750 <__muldf3>
c000a9fd:	59                   	pop    ecx
c000a9fe:	5b                   	pop    ebx
c000a9ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0f:	e8 0f c6 01 00       	call   c0027023 <__truncdfsf2>
c000aa14:	83 c4 10             	add    esp,0x10
c000aa17:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa1e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa21:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa25:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa2d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa31:	e8 9d b6 01 00       	call   c00260d3 <__adddf3>
c000aa36:	83 c4 10             	add    esp,0x10
c000aa39:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa48:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa50:	e8 fb bc 01 00       	call   c0026750 <__muldf3>
c000aa55:	5d                   	pop    ebp
c000aa56:	59                   	pop    ecx
c000aa57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa67:	e8 b7 c5 01 00       	call   c0027023 <__truncdfsf2>
c000aa6c:	83 c4 10             	add    esp,0x10
c000aa6f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa76:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aa79:	57                   	push   edi
c000aa7a:	56                   	push   esi
c000aa7b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa7f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa83:	e8 4b b6 01 00       	call   c00260d3 <__adddf3>
c000aa88:	83 c4 10             	add    esp,0x10
c000aa8b:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa8e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa92:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa96:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaa2:	e8 a9 bc 01 00       	call   c0026750 <__muldf3>
c000aaa7:	5b                   	pop    ebx
c000aaa8:	5e                   	pop    esi
c000aaa9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aaad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aab1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab9:	e8 65 c5 01 00       	call   c0027023 <__truncdfsf2>
c000aabe:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000aac5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000aac8:	81 c4 9c 00 00 00    	add    esp,0x9c
c000aace:	5b                   	pop    ebx
c000aacf:	5e                   	pop    esi
c000aad0:	5f                   	pop    edi
c000aad1:	5d                   	pop    ebp
c000aad2:	c3                   	ret    

c000aad3 <sinc_reset>:
c000aad3:	56                   	push   esi
c000aad4:	53                   	push   ebx
c000aad5:	51                   	push   ecx
c000aad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aada:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000aadd:	85 db                	test   ebx,ebx
c000aadf:	74 59                	je     c000ab3a <sinc_reset+0x67>
c000aae1:	31 d2                	xor    edx,edx
c000aae3:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000aaea:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000aaed:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000aaf0:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000aaf7:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000aafe:	31 c0                	xor    eax,eax
c000ab00:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab06:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab09:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab0c:	52                   	push   edx
c000ab0d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab10:	c1 e0 02             	shl    eax,0x2
c000ab13:	50                   	push   eax
c000ab14:	6a 00                	push   0x0
c000ab16:	56                   	push   esi
c000ab17:	e8 6f 5b ff ff       	call   c000068b <memset>
c000ab1c:	83 c4 0c             	add    esp,0xc
c000ab1f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab22:	c1 e0 02             	shl    eax,0x2
c000ab25:	50                   	push   eax
c000ab26:	68 aa 00 00 00       	push   0xaa
c000ab2b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab2e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab31:	50                   	push   eax
c000ab32:	e8 54 5b ff ff       	call   c000068b <memset>
c000ab37:	83 c4 10             	add    esp,0x10
c000ab3a:	58                   	pop    eax
c000ab3b:	5b                   	pop    ebx
c000ab3c:	5e                   	pop    esi
c000ab3d:	c3                   	ret    

c000ab3e <calc_output_multi>:
c000ab3e:	55                   	push   ebp
c000ab3f:	57                   	push   edi
c000ab40:	56                   	push   esi
c000ab41:	89 c6                	mov    esi,eax
c000ab43:	53                   	push   ebx
c000ab44:	83 ec 4c             	sub    esp,0x4c
c000ab47:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab4b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ab4f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab53:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ab57:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ab5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ab63:	8d 46 44             	lea    eax,[esi+0x44]
c000ab66:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab69:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ab6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ab73:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ab76:	e8 0f eb ff ff       	call   c000968a <int_to_fp>
c000ab7b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ab7e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ab82:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ab86:	99                   	cdq    
c000ab87:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ab8b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ab8f:	0f af d0             	imul   edx,eax
c000ab92:	0f af c3             	imul   eax,ebx
c000ab95:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ab99:	29 c1                	sub    ecx,eax
c000ab9b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ab9f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000aba3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000abaa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000abae:	57                   	push   edi
c000abaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000abb3:	6a 00                	push   0x0
c000abb5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb9:	e8 cd 5a ff ff       	call   c000068b <memset>
c000abbe:	83 c4 10             	add    esp,0x10
c000abc1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abc5:	89 df                	mov    edi,ebx
c000abc7:	e8 cc ea ff ff       	call   c0009698 <fp_to_double>
c000abcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000abd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000abd4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abd8:	e8 b1 ea ff ff       	call   c000968e <fp_to_int>
c000abdd:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000abe0:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000abe3:	51                   	push   ecx
c000abe4:	51                   	push   ecx
c000abe5:	55                   	push   ebp
c000abe6:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000abea:	e8 79 ae 01 00       	call   c0025a68 <__subsf3>
c000abef:	89 04 24             	mov    DWORD PTR [esp],eax
c000abf2:	e8 50 c5 01 00       	call   c0027147 <__extendsfdf2>
c000abf7:	83 c4 10             	add    esp,0x10
c000abfa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000abfe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac0a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac0e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac12:	e8 39 bb 01 00       	call   c0026750 <__muldf3>
c000ac17:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac1a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac1e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac22:	e8 20 c5 01 00       	call   c0027147 <__extendsfdf2>
c000ac27:	83 c4 10             	add    esp,0x10
c000ac2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac2e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac32:	52                   	push   edx
c000ac33:	50                   	push   eax
c000ac34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac3c:	e8 92 b4 01 00       	call   c00260d3 <__adddf3>
c000ac41:	83 c4 10             	add    esp,0x10
c000ac44:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac48:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac4c:	89 f8                	mov    eax,edi
c000ac4e:	b9 08 00 00 00       	mov    ecx,0x8
c000ac53:	99                   	cdq    
c000ac54:	f7 f9                	idiv   ecx
c000ac56:	4a                   	dec    edx
c000ac57:	83 fa 06             	cmp    edx,0x6
c000ac5a:	77 07                	ja     c000ac63 <calc_output_multi+0x125>
c000ac5c:	ff 24 95 04 89 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd76fc]
c000ac63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ac66:	4f                   	dec    edi
c000ac67:	83 ec 0c             	sub    esp,0xc
c000ac6a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ac6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac71:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ac78:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ac7c:	e8 c6 c4 01 00       	call   c0027147 <__extendsfdf2>
c000ac81:	83 c4 10             	add    esp,0x10
c000ac84:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac88:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac9c:	e8 af ba 01 00       	call   c0026750 <__muldf3>
c000aca1:	83 c4 10             	add    esp,0x10
c000aca4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aca8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acac:	52                   	push   edx
c000acad:	50                   	push   eax
c000acae:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000acb1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000acb4:	e8 1a b4 01 00       	call   c00260d3 <__adddf3>
c000acb9:	83 c4 10             	add    esp,0x10
c000acbc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000acbf:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000acc2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acc5:	4f                   	dec    edi
c000acc6:	83 ec 0c             	sub    esp,0xc
c000acc9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000accc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acd0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000acd7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000acdb:	e8 67 c4 01 00       	call   c0027147 <__extendsfdf2>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ace7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acf3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acf7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acfb:	e8 50 ba 01 00       	call   c0026750 <__muldf3>
c000ad00:	83 c4 10             	add    esp,0x10
c000ad03:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad07:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad0b:	52                   	push   edx
c000ad0c:	50                   	push   eax
c000ad0d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad10:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad13:	e8 bb b3 01 00       	call   c00260d3 <__adddf3>
c000ad18:	83 c4 10             	add    esp,0x10
c000ad1b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad1e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad21:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad24:	4f                   	dec    edi
c000ad25:	83 ec 0c             	sub    esp,0xc
c000ad28:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad2f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad36:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad3a:	e8 08 c4 01 00       	call   c0027147 <__extendsfdf2>
c000ad3f:	83 c4 10             	add    esp,0x10
c000ad42:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad46:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad52:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad56:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad5a:	e8 f1 b9 01 00       	call   c0026750 <__muldf3>
c000ad5f:	83 c4 10             	add    esp,0x10
c000ad62:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad66:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad6a:	52                   	push   edx
c000ad6b:	50                   	push   eax
c000ad6c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad6f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad72:	e8 5c b3 01 00       	call   c00260d3 <__adddf3>
c000ad77:	83 c4 10             	add    esp,0x10
c000ad7a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad7d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad80:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad83:	4f                   	dec    edi
c000ad84:	83 ec 0c             	sub    esp,0xc
c000ad87:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad8e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad95:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad99:	e8 a9 c3 01 00       	call   c0027147 <__extendsfdf2>
c000ad9e:	83 c4 10             	add    esp,0x10
c000ada1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ada5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ada9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adb1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adb5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adb9:	e8 92 b9 01 00       	call   c0026750 <__muldf3>
c000adbe:	83 c4 10             	add    esp,0x10
c000adc1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adc5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adc9:	52                   	push   edx
c000adca:	50                   	push   eax
c000adcb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000adce:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000add1:	e8 fd b2 01 00       	call   c00260d3 <__adddf3>
c000add6:	83 c4 10             	add    esp,0x10
c000add9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000addc:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000addf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ade2:	4f                   	dec    edi
c000ade3:	83 ec 0c             	sub    esp,0xc
c000ade6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ade9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aded:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000adf4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000adf8:	e8 4a c3 01 00       	call   c0027147 <__extendsfdf2>
c000adfd:	83 c4 10             	add    esp,0x10
c000ae00:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae04:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae10:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae18:	e8 33 b9 01 00       	call   c0026750 <__muldf3>
c000ae1d:	83 c4 10             	add    esp,0x10
c000ae20:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae24:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae28:	52                   	push   edx
c000ae29:	50                   	push   eax
c000ae2a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae2d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae30:	e8 9e b2 01 00       	call   c00260d3 <__adddf3>
c000ae35:	83 c4 10             	add    esp,0x10
c000ae38:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae3b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae3e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae41:	4f                   	dec    edi
c000ae42:	83 ec 0c             	sub    esp,0xc
c000ae45:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae4c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae53:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae57:	e8 eb c2 01 00       	call   c0027147 <__extendsfdf2>
c000ae5c:	83 c4 10             	add    esp,0x10
c000ae5f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae63:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae6f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae73:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae77:	e8 d4 b8 01 00       	call   c0026750 <__muldf3>
c000ae7c:	83 c4 10             	add    esp,0x10
c000ae7f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae83:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae87:	52                   	push   edx
c000ae88:	50                   	push   eax
c000ae89:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae8c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae8f:	e8 3f b2 01 00       	call   c00260d3 <__adddf3>
c000ae94:	83 c4 10             	add    esp,0x10
c000ae97:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae9a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae9d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aea0:	4f                   	dec    edi
c000aea1:	83 ec 0c             	sub    esp,0xc
c000aea4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aea7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aeab:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeb2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aeb6:	e8 8c c2 01 00       	call   c0027147 <__extendsfdf2>
c000aebb:	83 c4 10             	add    esp,0x10
c000aebe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aec2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aece:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed6:	e8 75 b8 01 00       	call   c0026750 <__muldf3>
c000aedb:	83 c4 10             	add    esp,0x10
c000aede:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aee2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aee6:	52                   	push   edx
c000aee7:	50                   	push   eax
c000aee8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aeeb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeee:	e8 e0 b1 01 00       	call   c00260d3 <__adddf3>
c000aef3:	83 c4 10             	add    esp,0x10
c000aef6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aef9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aefc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeff:	4f                   	dec    edi
c000af00:	83 ec 0c             	sub    esp,0xc
c000af03:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af0a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af11:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af15:	e8 2d c2 01 00       	call   c0027147 <__extendsfdf2>
c000af1a:	83 c4 10             	add    esp,0x10
c000af1d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af21:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af2d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af31:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af35:	e8 16 b8 01 00       	call   c0026750 <__muldf3>
c000af3a:	83 c4 10             	add    esp,0x10
c000af3d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af41:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af45:	52                   	push   edx
c000af46:	50                   	push   eax
c000af47:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af4a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af4d:	e8 81 b1 01 00       	call   c00260d3 <__adddf3>
c000af52:	83 c4 10             	add    esp,0x10
c000af55:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af58:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af5b:	85 ff                	test   edi,edi
c000af5d:	0f 8f e9 fc ff ff    	jg     c000ac4c <calc_output_multi+0x10e>
c000af63:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000af67:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000af6b:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000af6f:	0f 89 4c fc ff ff    	jns    c000abc1 <calc_output_multi+0x83>
c000af75:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000af79:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000af7d:	29 c8                	sub    eax,ecx
c000af7f:	99                   	cdq    
c000af80:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000af84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000af88:	0f af d0             	imul   edx,eax
c000af8b:	40                   	inc    eax
c000af8c:	01 d1                	add    ecx,edx
c000af8e:	0f af c3             	imul   eax,ebx
c000af91:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000af95:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000af98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af9c:	55                   	push   ebp
c000af9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afa1:	6a 00                	push   0x0
c000afa3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afa7:	e8 df 56 ff ff       	call   c000068b <memset>
c000afac:	83 c4 10             	add    esp,0x10
c000afaf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afb3:	e8 e0 e6 ff ff       	call   c0009698 <fp_to_double>
c000afb8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afbc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000afc0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afc4:	e8 c5 e6 ff ff       	call   c000968e <fp_to_int>
c000afc9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000afcc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000afcf:	57                   	push   edi
c000afd0:	57                   	push   edi
c000afd1:	89 df                	mov    edi,ebx
c000afd3:	55                   	push   ebp
c000afd4:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000afd8:	e8 8b aa 01 00       	call   c0025a68 <__subsf3>
c000afdd:	89 04 24             	mov    DWORD PTR [esp],eax
c000afe0:	e8 62 c1 01 00       	call   c0027147 <__extendsfdf2>
c000afe5:	83 c4 10             	add    esp,0x10
c000afe8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000afec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000aff0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aff4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aff8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000affc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b000:	e8 4b b7 01 00       	call   c0026750 <__muldf3>
c000b005:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b008:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b00c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b010:	e8 32 c1 01 00       	call   c0027147 <__extendsfdf2>
c000b015:	83 c4 10             	add    esp,0x10
c000b018:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b01c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b020:	52                   	push   edx
c000b021:	50                   	push   eax
c000b022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b02a:	e8 a4 b0 01 00       	call   c00260d3 <__adddf3>
c000b02f:	83 c4 10             	add    esp,0x10
c000b032:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b036:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b03a:	89 f8                	mov    eax,edi
c000b03c:	b9 08 00 00 00       	mov    ecx,0x8
c000b041:	99                   	cdq    
c000b042:	f7 f9                	idiv   ecx
c000b044:	4a                   	dec    edx
c000b045:	83 fa 06             	cmp    edx,0x6
c000b048:	77 07                	ja     c000b051 <calc_output_multi+0x513>
c000b04a:	ff 24 95 20 89 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd76e0]
c000b051:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b055:	4f                   	dec    edi
c000b056:	83 ec 0c             	sub    esp,0xc
c000b059:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b060:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b067:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06b:	e8 d7 c0 01 00       	call   c0027147 <__extendsfdf2>
c000b070:	83 c4 10             	add    esp,0x10
c000b073:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b077:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b07b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b07f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b083:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b087:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b08b:	e8 c0 b6 01 00       	call   c0026750 <__muldf3>
c000b090:	83 c4 10             	add    esp,0x10
c000b093:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b097:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b09b:	52                   	push   edx
c000b09c:	50                   	push   eax
c000b09d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a3:	e8 2b b0 01 00       	call   c00260d3 <__adddf3>
c000b0a8:	83 c4 10             	add    esp,0x10
c000b0ab:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ae:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0b5:	4f                   	dec    edi
c000b0b6:	83 ec 0c             	sub    esp,0xc
c000b0b9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cb:	e8 77 c0 01 00       	call   c0027147 <__extendsfdf2>
c000b0d0:	83 c4 10             	add    esp,0x10
c000b0d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0eb:	e8 60 b6 01 00       	call   c0026750 <__muldf3>
c000b0f0:	83 c4 10             	add    esp,0x10
c000b0f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0fb:	52                   	push   edx
c000b0fc:	50                   	push   eax
c000b0fd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b100:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b103:	e8 cb af 01 00       	call   c00260d3 <__adddf3>
c000b108:	83 c4 10             	add    esp,0x10
c000b10b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b111:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 17 c0 01 00       	call   c0027147 <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b137:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b147:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b14b:	e8 00 b6 01 00       	call   c0026750 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b157:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 6b af 01 00       	call   c00260d3 <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b175:	4f                   	dec    edi
c000b176:	83 ec 0c             	sub    esp,0xc
c000b179:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b17c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b180:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b187:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b18b:	e8 b7 bf 01 00       	call   c0027147 <__extendsfdf2>
c000b190:	83 c4 10             	add    esp,0x10
c000b193:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b197:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b19b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1ab:	e8 a0 b5 01 00       	call   c0026750 <__muldf3>
c000b1b0:	83 c4 10             	add    esp,0x10
c000b1b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1bb:	52                   	push   edx
c000b1bc:	50                   	push   eax
c000b1bd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1c0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1c3:	e8 0b af 01 00       	call   c00260d3 <__adddf3>
c000b1c8:	83 c4 10             	add    esp,0x10
c000b1cb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1ce:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1d5:	4f                   	dec    edi
c000b1d6:	83 ec 0c             	sub    esp,0xc
c000b1d9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1e0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1e7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1eb:	e8 57 bf 01 00       	call   c0027147 <__extendsfdf2>
c000b1f0:	83 c4 10             	add    esp,0x10
c000b1f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b203:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b207:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b20b:	e8 40 b5 01 00       	call   c0026750 <__muldf3>
c000b210:	83 c4 10             	add    esp,0x10
c000b213:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b217:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b21b:	52                   	push   edx
c000b21c:	50                   	push   eax
c000b21d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b220:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b223:	e8 ab ae 01 00       	call   c00260d3 <__adddf3>
c000b228:	83 c4 10             	add    esp,0x10
c000b22b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b22e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b231:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b235:	4f                   	dec    edi
c000b236:	83 ec 0c             	sub    esp,0xc
c000b239:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b23c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b240:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b247:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b24b:	e8 f7 be 01 00       	call   c0027147 <__extendsfdf2>
c000b250:	83 c4 10             	add    esp,0x10
c000b253:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b257:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b25b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b25f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b263:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b267:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b26b:	e8 e0 b4 01 00       	call   c0026750 <__muldf3>
c000b270:	83 c4 10             	add    esp,0x10
c000b273:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b277:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b27b:	52                   	push   edx
c000b27c:	50                   	push   eax
c000b27d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b280:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b283:	e8 4b ae 01 00       	call   c00260d3 <__adddf3>
c000b288:	83 c4 10             	add    esp,0x10
c000b28b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b28e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b291:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b295:	4f                   	dec    edi
c000b296:	83 ec 0c             	sub    esp,0xc
c000b299:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b29c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2a0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2a7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2ab:	e8 97 be 01 00       	call   c0027147 <__extendsfdf2>
c000b2b0:	83 c4 10             	add    esp,0x10
c000b2b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2cb:	e8 80 b4 01 00       	call   c0026750 <__muldf3>
c000b2d0:	83 c4 10             	add    esp,0x10
c000b2d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2db:	52                   	push   edx
c000b2dc:	50                   	push   eax
c000b2dd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2e0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2e3:	e8 eb ad 01 00       	call   c00260d3 <__adddf3>
c000b2e8:	83 c4 10             	add    esp,0x10
c000b2eb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2ee:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2f5:	4f                   	dec    edi
c000b2f6:	83 ec 0c             	sub    esp,0xc
c000b2f9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b300:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b307:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b30b:	e8 37 be 01 00       	call   c0027147 <__extendsfdf2>
c000b310:	83 c4 10             	add    esp,0x10
c000b313:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b317:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b31b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b31f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b323:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b327:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b32b:	e8 20 b4 01 00       	call   c0026750 <__muldf3>
c000b330:	83 c4 10             	add    esp,0x10
c000b333:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b337:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b33b:	52                   	push   edx
c000b33c:	50                   	push   eax
c000b33d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b340:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b343:	e8 8b ad 01 00       	call   c00260d3 <__adddf3>
c000b348:	83 c4 10             	add    esp,0x10
c000b34b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b34e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b351:	85 ff                	test   edi,edi
c000b353:	0f 8f e1 fc ff ff    	jg     c000b03a <calc_output_multi+0x4fc>
c000b359:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b35d:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b361:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b365:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b36a:	0f 8f 3f fc ff ff    	jg     c000afaf <calc_output_multi+0x471>
c000b370:	be 08 00 00 00       	mov    esi,0x8
c000b375:	89 d8                	mov    eax,ebx
c000b377:	99                   	cdq    
c000b378:	f7 fe                	idiv   esi
c000b37a:	4a                   	dec    edx
c000b37b:	83 fa 06             	cmp    edx,0x6
c000b37e:	77 07                	ja     c000b387 <calc_output_multi+0x849>
c000b380:	ff 24 95 3c 89 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd76c4]
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4b                   	dec    ebx
c000b38c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b390:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b393:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b397:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b39b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b39e:	e8 30 ad 01 00       	call   c00260d3 <__adddf3>
c000b3a3:	83 c4 10             	add    esp,0x10
c000b3a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3be:	e8 8d b3 01 00       	call   c0026750 <__muldf3>
c000b3c3:	5d                   	pop    ebp
c000b3c4:	59                   	pop    ecx
c000b3c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b3c9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b3cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d5:	e8 49 bc 01 00       	call   c0027023 <__truncdfsf2>
c000b3da:	83 c4 10             	add    esp,0x10
c000b3dd:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b3e1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b3e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3e8:	4b                   	dec    ebx
c000b3e9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3ed:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3f4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3f8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3fb:	e8 d3 ac 01 00       	call   c00260d3 <__adddf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b407:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b40b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b40f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b41b:	e8 30 b3 01 00       	call   c0026750 <__muldf3>
c000b420:	59                   	pop    ecx
c000b421:	5f                   	pop    edi
c000b422:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b42a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b432:	e8 ec bb 01 00       	call   c0027023 <__truncdfsf2>
c000b437:	83 c4 10             	add    esp,0x10
c000b43a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b43e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b441:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b445:	4b                   	dec    ebx
c000b446:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b44a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b44d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b451:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b455:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b458:	e8 76 ac 01 00       	call   c00260d3 <__adddf3>
c000b45d:	83 c4 10             	add    esp,0x10
c000b460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b46c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b478:	e8 d3 b2 01 00       	call   c0026750 <__muldf3>
c000b47d:	5f                   	pop    edi
c000b47e:	5d                   	pop    ebp
c000b47f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b483:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b48f:	e8 8f bb 01 00       	call   c0027023 <__truncdfsf2>
c000b494:	83 c4 10             	add    esp,0x10
c000b497:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b49b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b49e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4a2:	4b                   	dec    ebx
c000b4a3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4a7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4ae:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4b2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4b5:	e8 19 ac 01 00       	call   c00260d3 <__adddf3>
c000b4ba:	83 c4 10             	add    esp,0x10
c000b4bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	e8 76 b2 01 00       	call   c0026750 <__muldf3>
c000b4da:	5d                   	pop    ebp
c000b4db:	59                   	pop    ecx
c000b4dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4e0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4ec:	e8 32 bb 01 00       	call   c0027023 <__truncdfsf2>
c000b4f1:	83 c4 10             	add    esp,0x10
c000b4f4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4f8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ff:	4b                   	dec    ebx
c000b500:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b504:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b507:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b50b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b50f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b512:	e8 bc ab 01 00       	call   c00260d3 <__adddf3>
c000b517:	83 c4 10             	add    esp,0x10
c000b51a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b51e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b52a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b532:	e8 19 b2 01 00       	call   c0026750 <__muldf3>
c000b537:	59                   	pop    ecx
c000b538:	5f                   	pop    edi
c000b539:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b53d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b541:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b549:	e8 d5 ba 01 00       	call   c0027023 <__truncdfsf2>
c000b54e:	83 c4 10             	add    esp,0x10
c000b551:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b555:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b55c:	4b                   	dec    ebx
c000b55d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b561:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b564:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b568:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b56c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b56f:	e8 5f ab 01 00       	call   c00260d3 <__adddf3>
c000b574:	83 c4 10             	add    esp,0x10
c000b577:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b57b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b57f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b587:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58f:	e8 bc b1 01 00       	call   c0026750 <__muldf3>
c000b594:	5f                   	pop    edi
c000b595:	5d                   	pop    ebp
c000b596:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b59a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5a6:	e8 78 ba 01 00       	call   c0027023 <__truncdfsf2>
c000b5ab:	83 c4 10             	add    esp,0x10
c000b5ae:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5b2:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5b9:	4b                   	dec    ebx
c000b5ba:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5be:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5c5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5c9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5cc:	e8 02 ab 01 00       	call   c00260d3 <__adddf3>
c000b5d1:	83 c4 10             	add    esp,0x10
c000b5d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ec:	e8 5f b1 01 00       	call   c0026750 <__muldf3>
c000b5f1:	5d                   	pop    ebp
c000b5f2:	59                   	pop    ecx
c000b5f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b603:	e8 1b ba 01 00       	call   c0027023 <__truncdfsf2>
c000b608:	83 c4 10             	add    esp,0x10
c000b60b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b60f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b616:	4b                   	dec    ebx
c000b617:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b61b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b61e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b622:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b626:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b629:	e8 a5 aa 01 00       	call   c00260d3 <__adddf3>
c000b62e:	83 c4 10             	add    esp,0x10
c000b631:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b635:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b639:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b63d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b641:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b649:	e8 02 b1 01 00       	call   c0026750 <__muldf3>
c000b64e:	59                   	pop    ecx
c000b64f:	5f                   	pop    edi
c000b650:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b654:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b658:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b65c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b660:	e8 be b9 01 00       	call   c0027023 <__truncdfsf2>
c000b665:	83 c4 10             	add    esp,0x10
c000b668:	85 db                	test   ebx,ebx
c000b66a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b66e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b671:	0f 8f fe fc ff ff    	jg     c000b375 <calc_output_multi+0x837>
c000b677:	83 c4 4c             	add    esp,0x4c
c000b67a:	5b                   	pop    ebx
c000b67b:	5e                   	pop    esi
c000b67c:	5f                   	pop    edi
c000b67d:	5d                   	pop    ebp
c000b67e:	c3                   	ret    

c000b67f <double_to_fp>:
c000b67f:	83 ec 0c             	sub    esp,0xc
c000b682:	68 00 00 b0 40       	push   0x40b00000
c000b687:	6a 00                	push   0x0
c000b689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b68d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b691:	e8 ba b0 01 00       	call   c0026750 <__muldf3>
c000b696:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b69a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b69e:	83 c4 1c             	add    esp,0x1c
c000b6a1:	e9 2a bb 01 00       	jmp    c00271d0 <lrint>

c000b6a6 <prepare_data>:
c000b6a6:	55                   	push   ebp
c000b6a7:	57                   	push   edi
c000b6a8:	56                   	push   esi
c000b6a9:	53                   	push   ebx
c000b6aa:	83 ec 1c             	sub    esp,0x1c
c000b6ad:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b6b1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b6b5:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b6b9:	0f 89 57 01 00 00    	jns    c000b816 <prepare_data+0x170>
c000b6bf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b6c2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6c5:	85 d2                	test   edx,edx
c000b6c7:	75 0d                	jne    c000b6d6 <prepare_data+0x30>
c000b6c9:	8d 14 36             	lea    edx,[esi+esi*1]
c000b6cc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b6cf:	29 d0                	sub    eax,edx
c000b6d1:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b6d4:	eb 44                	jmp    c000b71a <prepare_data+0x74>
c000b6d6:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b6d9:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b6dc:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b6df:	39 c1                	cmp    ecx,eax
c000b6e1:	7d 04                	jge    c000b6e7 <prepare_data+0x41>
c000b6e3:	29 d0                	sub    eax,edx
c000b6e5:	eb 2d                	jmp    c000b714 <prepare_data+0x6e>
c000b6e7:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b6ed:	29 d7                	sub    edi,edx
c000b6ef:	01 f7                	add    edi,esi
c000b6f1:	51                   	push   ecx
c000b6f2:	29 f2                	sub    edx,esi
c000b6f4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b6fb:	8d 14 90             	lea    edx,[eax+edx*4]
c000b6fe:	51                   	push   ecx
c000b6ff:	52                   	push   edx
c000b700:	50                   	push   eax
c000b701:	e8 17 4f ff ff       	call   c000061d <memmove>
c000b706:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b709:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b70c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b70f:	29 f0                	sub    eax,esi
c000b711:	83 c4 10             	add    esp,0x10
c000b714:	29 f0                	sub    eax,esi
c000b716:	79 02                	jns    c000b71a <prepare_data+0x74>
c000b718:	31 c0                	xor    eax,eax
c000b71a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b71d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b720:	29 ef                	sub    edi,ebp
c000b722:	39 c7                	cmp    edi,eax
c000b724:	7e 02                	jle    c000b728 <prepare_data+0x82>
c000b726:	89 c7                	mov    edi,eax
c000b728:	89 f8                	mov    eax,edi
c000b72a:	99                   	cdq    
c000b72b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b72e:	b8 15 00 00 00       	mov    eax,0x15
c000b733:	29 d7                	sub    edi,edx
c000b735:	0f 88 dd 00 00 00    	js     c000b818 <prepare_data+0x172>
c000b73b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b73e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b741:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b744:	0f 8f ce 00 00 00    	jg     c000b818 <prepare_data+0x172>
c000b74a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b750:	50                   	push   eax
c000b751:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b758:	50                   	push   eax
c000b759:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b75d:	8b 00                	mov    eax,DWORD PTR [eax]
c000b75f:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b762:	50                   	push   eax
c000b763:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b766:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b76a:	50                   	push   eax
c000b76b:	e8 e5 4e ff ff       	call   c0000655 <memcpy>
c000b770:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b773:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b776:	01 fd                	add    ebp,edi
c000b778:	01 f9                	add    ecx,edi
c000b77a:	83 c4 10             	add    esp,0x10
c000b77d:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b780:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b783:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b786:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b78a:	0f 85 86 00 00 00    	jne    c000b816 <prepare_data+0x170>
c000b790:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b793:	89 e8                	mov    eax,ebp
c000b795:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b798:	29 c8                	sub    eax,ecx
c000b79a:	39 f8                	cmp    eax,edi
c000b79c:	7d 78                	jge    c000b816 <prepare_data+0x170>
c000b79e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7a2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b7a6:	74 6e                	je     c000b816 <prepare_data+0x170>
c000b7a8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b7ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b7af:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b7b2:	29 ef                	sub    edi,ebp
c000b7b4:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b7b8:	7c 29                	jl     c000b7e3 <prepare_data+0x13d>
c000b7ba:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7bd:	29 f1                	sub    ecx,esi
c000b7bf:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b7c6:	55                   	push   ebp
c000b7c7:	50                   	push   eax
c000b7c8:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b7cb:	50                   	push   eax
c000b7cc:	52                   	push   edx
c000b7cd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b7d1:	e8 47 4e ff ff       	call   c000061d <memmove>
c000b7d6:	83 c4 10             	add    esp,0x10
c000b7d9:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b7dc:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b7df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7e3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b7e6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b7e9:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b7ec:	83 c6 05             	add    esi,0x5
c000b7ef:	78 07                	js     c000b7f8 <prepare_data+0x152>
c000b7f1:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7f4:	39 cf                	cmp    edi,ecx
c000b7f6:	7e 04                	jle    c000b7fc <prepare_data+0x156>
c000b7f8:	89 ce                	mov    esi,ecx
c000b7fa:	29 c6                	sub    esi,eax
c000b7fc:	8d 04 82             	lea    eax,[edx+eax*4]
c000b7ff:	51                   	push   ecx
c000b800:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b807:	51                   	push   ecx
c000b808:	6a 00                	push   0x0
c000b80a:	50                   	push   eax
c000b80b:	e8 7b 4e ff ff       	call   c000068b <memset>
c000b810:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b813:	83 c4 10             	add    esp,0x10
c000b816:	31 c0                	xor    eax,eax
c000b818:	83 c4 1c             	add    esp,0x1c
c000b81b:	5b                   	pop    ebx
c000b81c:	5e                   	pop    esi
c000b81d:	5f                   	pop    edi
c000b81e:	5d                   	pop    ebp
c000b81f:	c3                   	ret    

c000b820 <sinc_multichan_vari_process>:
c000b820:	55                   	push   ebp
c000b821:	ba 05 00 00 00       	mov    edx,0x5
c000b826:	57                   	push   edi
c000b827:	56                   	push   esi
c000b828:	53                   	push   ebx
c000b829:	83 ec 4c             	sub    esp,0x4c
c000b82c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b830:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000b834:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b837:	85 db                	test   ebx,ebx
c000b839:	0f 84 9b 06 00 00    	je     c000beda <sinc_multichan_vari_process+0x6ba>
c000b83f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b842:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b845:	0f af c5             	imul   eax,ebp
c000b848:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000b84b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b84e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b855:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b85c:	0f af c5             	imul   eax,ebp
c000b85f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b862:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b865:	8b 06                	mov    eax,DWORD PTR [esi]
c000b867:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86f:	68 00 00 70 3f       	push   0x3f700000
c000b874:	6a 00                	push   0x0
c000b876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87e:	e8 9c b7 01 00       	call   c002701f <__ltdf2>
c000b883:	83 c4 10             	add    esp,0x10
c000b886:	ba 16 00 00 00       	mov    edx,0x16
c000b88b:	85 c0                	test   eax,eax
c000b88d:	0f 88 47 06 00 00    	js     c000beda <sinc_multichan_vari_process+0x6ba>
c000b893:	68 00 00 70 40       	push   0x40700000
c000b898:	6a 00                	push   0x0
c000b89a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b89e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a2:	e8 5a b7 01 00       	call   c0027001 <__gtdf2>
c000b8a7:	83 c4 10             	add    esp,0x10
c000b8aa:	ba 16 00 00 00       	mov    edx,0x16
c000b8af:	85 c0                	test   eax,eax
c000b8b1:	0f 8f 23 06 00 00    	jg     c000beda <sinc_multichan_vari_process+0x6ba>
c000b8b7:	83 ec 0c             	sub    esp,0xc
c000b8ba:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b8bd:	e8 f1 b4 01 00       	call   c0026db3 <__floatsidf>
c000b8c2:	83 c4 10             	add    esp,0x10
c000b8c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8cd:	68 00 00 00 40       	push   0x40000000
c000b8d2:	6a 00                	push   0x0
c000b8d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8dc:	e8 f2 a7 01 00       	call   c00260d3 <__adddf3>
c000b8e1:	59                   	pop    ecx
c000b8e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b8e6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b8ea:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b8ed:	e8 c1 b4 01 00       	call   c0026db3 <__floatsidf>
c000b8f2:	83 c4 10             	add    esp,0x10
c000b8f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b8f9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b8fd:	52                   	push   edx
c000b8fe:	50                   	push   eax
c000b8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b907:	e8 28 b1 01 00       	call   c0026a34 <__divdf3>
c000b90c:	83 c4 10             	add    esp,0x10
c000b90f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b913:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b917:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000b91a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000b91d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b921:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b925:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b929:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b92d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b931:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b935:	e8 c7 b6 01 00       	call   c0027001 <__gtdf2>
c000b93a:	83 c4 10             	add    esp,0x10
c000b93d:	85 c0                	test   eax,eax
c000b93f:	7e 2d                	jle    c000b96e <sinc_multichan_vari_process+0x14e>
c000b941:	68 00 00 f0 3f       	push   0x3ff00000
c000b946:	6a 00                	push   0x0
c000b948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b94c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b950:	e8 ca b6 01 00       	call   c002701f <__ltdf2>
c000b955:	83 c4 10             	add    esp,0x10
c000b958:	85 c0                	test   eax,eax
c000b95a:	79 4d                	jns    c000b9a9 <sinc_multichan_vari_process+0x189>
c000b95c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b960:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b964:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b968:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b96c:	eb 1b                	jmp    c000b989 <sinc_multichan_vari_process+0x169>
c000b96e:	68 00 00 f0 3f       	push   0x3ff00000
c000b973:	6a 00                	push   0x0
c000b975:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b979:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97d:	e8 9d b6 01 00       	call   c002701f <__ltdf2>
c000b982:	83 c4 10             	add    esp,0x10
c000b985:	85 c0                	test   eax,eax
c000b987:	79 20                	jns    c000b9a9 <sinc_multichan_vari_process+0x189>
c000b989:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b98d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b991:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b995:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b999:	e8 96 b0 01 00       	call   c0026a34 <__divdf3>
c000b99e:	83 c4 10             	add    esp,0x10
c000b9a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9a9:	50                   	push   eax
c000b9aa:	50                   	push   eax
c000b9ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9b3:	e8 18 b8 01 00       	call   c00271d0 <lrint>
c000b9b8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000b9bb:	40                   	inc    eax
c000b9bc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9c0:	0f af c5             	imul   eax,ebp
c000b9c3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b9c7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000b9ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b9ce:	58                   	pop    eax
c000b9cf:	5a                   	pop    edx
c000b9d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d8:	e8 f3 b7 01 00       	call   c00271d0 <lrint>
c000b9dd:	83 ec 0c             	sub    esp,0xc
c000b9e0:	50                   	push   eax
c000b9e1:	e8 cd b3 01 00       	call   c0026db3 <__floatsidf>
c000b9e6:	83 c4 10             	add    esp,0x10
c000b9e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9f1:	52                   	push   edx
c000b9f2:	50                   	push   eax
c000b9f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9fb:	e8 24 ad 01 00       	call   c0026724 <__subdf3>
c000ba00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba08:	83 c4 20             	add    esp,0x20
c000ba0b:	6a 00                	push   0x0
c000ba0d:	6a 00                	push   0x0
c000ba0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba17:	e8 03 b6 01 00       	call   c002701f <__ltdf2>
c000ba1c:	83 c4 10             	add    esp,0x10
c000ba1f:	85 c0                	test   eax,eax
c000ba21:	79 1f                	jns    c000ba42 <sinc_multichan_vari_process+0x222>
c000ba23:	68 00 00 f0 3f       	push   0x3ff00000
c000ba28:	6a 00                	push   0x0
c000ba2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba32:	e8 9c a6 01 00       	call   c00260d3 <__adddf3>
c000ba37:	83 c4 10             	add    esp,0x10
c000ba3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba42:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ba45:	83 ec 10             	sub    esp,0x10
c000ba48:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba4c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba57:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba5b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba5f:	e8 c0 ac 01 00       	call   c0026724 <__subdf3>
c000ba64:	83 c4 18             	add    esp,0x18
c000ba67:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ba6b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ba6f:	52                   	push   edx
c000ba70:	50                   	push   eax
c000ba71:	e8 5a b7 01 00       	call   c00271d0 <lrint>
c000ba76:	0f af e8             	imul   ebp,eax
c000ba79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba7d:	01 e8                	add    eax,ebp
c000ba7f:	99                   	cdq    
c000ba80:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ba83:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ba86:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8e:	68 00 00 f0 3f       	push   0x3ff00000
c000ba93:	6a 00                	push   0x0
c000ba95:	e8 9a af 01 00       	call   c0026a34 <__divdf3>
c000ba9a:	83 c4 10             	add    esp,0x10
c000ba9d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000baa1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000baa5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000baaa:	68 23 42 92 0c       	push   0xc924223
c000baaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bab3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bab7:	e8 17 a6 01 00       	call   c00260d3 <__adddf3>
c000babc:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bac0:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bac4:	83 c4 20             	add    esp,0x20
c000bac7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bacf:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bad7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bada:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000badd:	7d 50                	jge    c000bb2f <sinc_multichan_vari_process+0x30f>
c000badf:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bae2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bae5:	01 c8                	add    eax,ecx
c000bae7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000baea:	99                   	cdq    
c000baeb:	f7 f9                	idiv   ecx
c000baed:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000baf1:	7d 0c                	jge    c000baff <sinc_multichan_vari_process+0x2df>
c000baf3:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000baf6:	85 ed                	test   ebp,ebp
c000baf8:	79 6b                	jns    c000bb65 <sinc_multichan_vari_process+0x345>
c000bafa:	e9 e6 00 00 00       	jmp    c000bbe5 <sinc_multichan_vari_process+0x3c5>
c000baff:	50                   	push   eax
c000bb00:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bb04:	57                   	push   edi
c000bb05:	53                   	push   ebx
c000bb06:	e8 9b fb ff ff       	call   c000b6a6 <prepare_data>
c000bb0b:	83 c4 10             	add    esp,0x10
c000bb0e:	89 c2                	mov    edx,eax
c000bb10:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb13:	85 c0                	test   eax,eax
c000bb15:	0f 85 bf 03 00 00    	jne    c000beda <sinc_multichan_vari_process+0x6ba>
c000bb1b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb1e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb21:	01 c8                	add    eax,ecx
c000bb23:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb26:	99                   	cdq    
c000bb27:	f7 f9                	idiv   ecx
c000bb29:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb2d:	7c c4                	jl     c000baf3 <sinc_multichan_vari_process+0x2d3>
c000bb2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb37:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb3a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb41:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb45:	89 06                	mov    DWORD PTR [esi],eax
c000bb47:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bb4a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb4d:	99                   	cdq    
c000bb4e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb51:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bb54:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bb57:	99                   	cdq    
c000bb58:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb5b:	31 d2                	xor    edx,edx
c000bb5d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bb60:	e9 75 03 00 00       	jmp    c000beda <sinc_multichan_vari_process+0x6ba>
c000bb65:	83 ec 0c             	sub    esp,0xc
c000bb68:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bb6b:	e8 43 b2 01 00       	call   c0026db3 <__floatsidf>
c000bb70:	83 c4 10             	add    esp,0x10
c000bb73:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb77:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb7b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb7f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb8b:	e8 43 a5 01 00       	call   c00260d3 <__adddf3>
c000bb90:	83 c4 10             	add    esp,0x10
c000bb93:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb97:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb9b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb9f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bba3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bba7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbab:	e8 23 a5 01 00       	call   c00260d3 <__adddf3>
c000bbb0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bbb3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bbb7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bbbb:	e8 f3 b1 01 00       	call   c0026db3 <__floatsidf>
c000bbc0:	83 c4 10             	add    esp,0x10
c000bbc3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbc7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbcb:	52                   	push   edx
c000bbcc:	50                   	push   eax
c000bbcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd5:	e8 43 b4 01 00       	call   c002701d <__gedf2>
c000bbda:	83 c4 10             	add    esp,0x10
c000bbdd:	85 c0                	test   eax,eax
c000bbdf:	0f 89 4a ff ff ff    	jns    c000bb2f <sinc_multichan_vari_process+0x30f>
c000bbe5:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bbe9:	0f 8e ed 00 00 00    	jle    c000bcdc <sinc_multichan_vari_process+0x4bc>
c000bbef:	83 ec 10             	sub    esp,0x10
c000bbf2:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bbf5:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bbf8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bbfb:	ff 36                	push   DWORD PTR [esi]
c000bbfd:	e8 22 ab 01 00       	call   c0026724 <__subdf3>
c000bc02:	83 c4 18             	add    esp,0x18
c000bc05:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc0d:	52                   	push   edx
c000bc0e:	50                   	push   eax
c000bc0f:	e8 9c b5 01 00       	call   c00271b0 <fabs>
c000bc14:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc18:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bc1c:	83 c4 10             	add    esp,0x10
c000bc1f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc24:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bc29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc31:	e8 cb b3 01 00       	call   c0027001 <__gtdf2>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	85 c0                	test   eax,eax
c000bc3b:	0f 8e 9b 00 00 00    	jle    c000bcdc <sinc_multichan_vari_process+0x4bc>
c000bc41:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc43:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bc46:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc4a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bc4e:	52                   	push   edx
c000bc4f:	50                   	push   eax
c000bc50:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc53:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc56:	e8 c9 aa 01 00       	call   c0026724 <__subdf3>
c000bc5b:	59                   	pop    ecx
c000bc5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc60:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc64:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bc67:	e8 47 b1 01 00       	call   c0026db3 <__floatsidf>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc73:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc77:	52                   	push   edx
c000bc78:	50                   	push   eax
c000bc79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc81:	e8 ca aa 01 00       	call   c0026750 <__muldf3>
c000bc86:	5d                   	pop    ebp
c000bc87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc8b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc8f:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bc92:	e8 1c b1 01 00       	call   c0026db3 <__floatsidf>
c000bc97:	83 c4 10             	add    esp,0x10
c000bc9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bca2:	52                   	push   edx
c000bca3:	50                   	push   eax
c000bca4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcac:	e8 83 ad 01 00       	call   c0026a34 <__divdf3>
c000bcb1:	83 c4 10             	add    esp,0x10
c000bcb4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcb8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bccc:	e8 02 a4 01 00       	call   c00260d3 <__adddf3>
c000bcd1:	83 c4 10             	add    esp,0x10
c000bcd4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcd8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bcdc:	83 ec 0c             	sub    esp,0xc
c000bcdf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bce2:	e8 cc b0 01 00       	call   c0026db3 <__floatsidf>
c000bce7:	83 c4 10             	add    esp,0x10
c000bcea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd02:	e8 18 b3 01 00       	call   c002701f <__ltdf2>
c000bd07:	83 c4 10             	add    esp,0x10
c000bd0a:	85 c0                	test   eax,eax
c000bd0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd10:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd14:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bd18:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bd1c:	78 10                	js     c000bd2e <sinc_multichan_vari_process+0x50e>
c000bd1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd22:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd26:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd2a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd3a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd3e:	e8 0d aa 01 00       	call   c0026750 <__muldf3>
c000bd43:	59                   	pop    ecx
c000bd44:	5d                   	pop    ebp
c000bd45:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd49:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd55:	e8 25 f9 ff ff       	call   c000b67f <double_to_fp>
c000bd5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd5e:	89 c5                	mov    ebp,eax
c000bd60:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd6c:	e8 df a9 01 00       	call   c0026750 <__muldf3>
c000bd71:	83 c4 18             	add    esp,0x18
c000bd74:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bd78:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bd7c:	52                   	push   edx
c000bd7d:	50                   	push   eax
c000bd7e:	e8 fc f8 ff ff       	call   c000b67f <double_to_fp>
c000bd83:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bd86:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bd8a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bd8d:	8d 04 90             	lea    eax,[eax+edx*4]
c000bd90:	50                   	push   eax
c000bd91:	50                   	push   eax
c000bd92:	50                   	push   eax
c000bd93:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd96:	e8 18 b0 01 00       	call   c0026db3 <__floatsidf>
c000bd9b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bd9f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bda3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bda7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdaf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdb3:	e8 7c ac 01 00       	call   c0026a34 <__divdf3>
c000bdb8:	83 c4 1c             	add    esp,0x1c
c000bdbb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bdbf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bdc3:	52                   	push   edx
c000bdc4:	89 ea                	mov    edx,ebp
c000bdc6:	50                   	push   eax
c000bdc7:	89 d8                	mov    eax,ebx
c000bdc9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bdcc:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bdd0:	e8 69 ed ff ff       	call   c000ab3e <calc_output_multi>
c000bdd5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bdd8:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bddb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bddf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bde3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bde7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bdeb:	e8 44 ac 01 00       	call   c0026a34 <__divdf3>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000bdf7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000bdfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be03:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be07:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be0b:	e8 c3 a2 01 00       	call   c00260d3 <__adddf3>
c000be10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000be14:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000be18:	83 c4 28             	add    esp,0x28
c000be1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be23:	e8 a8 b3 01 00       	call   c00271d0 <lrint>
c000be28:	83 ec 0c             	sub    esp,0xc
c000be2b:	50                   	push   eax
c000be2c:	e8 82 af 01 00       	call   c0026db3 <__floatsidf>
c000be31:	83 c4 10             	add    esp,0x10
c000be34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be38:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be3c:	52                   	push   edx
c000be3d:	50                   	push   eax
c000be3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be42:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be46:	e8 d9 a8 01 00       	call   c0026724 <__subdf3>
c000be4b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be4f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be53:	83 c4 20             	add    esp,0x20
c000be56:	6a 00                	push   0x0
c000be58:	6a 00                	push   0x0
c000be5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be62:	e8 b8 b1 01 00       	call   c002701f <__ltdf2>
c000be67:	83 c4 10             	add    esp,0x10
c000be6a:	85 c0                	test   eax,eax
c000be6c:	79 20                	jns    c000be8e <sinc_multichan_vari_process+0x66e>
c000be6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7e:	e8 50 a2 01 00       	call   c00260d3 <__adddf3>
c000be83:	83 c4 10             	add    esp,0x10
c000be86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be8e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000be91:	83 ec 10             	sub    esp,0x10
c000be94:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be98:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000be9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bea3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bea7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000beab:	e8 74 a8 01 00       	call   c0026724 <__subdf3>
c000beb0:	83 c4 18             	add    esp,0x18
c000beb3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bebb:	52                   	push   edx
c000bebc:	50                   	push   eax
c000bebd:	e8 0e b3 01 00       	call   c00271d0 <lrint>
c000bec2:	0f af e8             	imul   ebp,eax
c000bec5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bec9:	83 c4 10             	add    esp,0x10
c000becc:	01 e8                	add    eax,ebp
c000bece:	99                   	cdq    
c000becf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bed2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bed5:	e9 fd fb ff ff       	jmp    c000bad7 <sinc_multichan_vari_process+0x2b7>
c000beda:	83 c4 4c             	add    esp,0x4c
c000bedd:	89 d0                	mov    eax,edx
c000bedf:	5b                   	pop    ebx
c000bee0:	5e                   	pop    esi
c000bee1:	5f                   	pop    edi
c000bee2:	5d                   	pop    ebp
c000bee3:	c3                   	ret    

c000bee4 <sinc_hex_vari_process>:
c000bee4:	55                   	push   ebp
c000bee5:	ba 05 00 00 00       	mov    edx,0x5
c000beea:	57                   	push   edi
c000beeb:	56                   	push   esi
c000beec:	53                   	push   ebx
c000beed:	83 ec 4c             	sub    esp,0x4c
c000bef0:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bef4:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bef8:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000befb:	85 db                	test   ebx,ebx
c000befd:	0f 84 9c 06 00 00    	je     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf03:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bf06:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bf09:	0f af c7             	imul   eax,edi
c000bf0c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bf0f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000bf12:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf19:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf20:	0f af c7             	imul   eax,edi
c000bf23:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf26:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf29:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf2c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf34:	68 00 00 70 3f       	push   0x3f700000
c000bf39:	6a 00                	push   0x0
c000bf3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf43:	e8 d7 b0 01 00       	call   c002701f <__ltdf2>
c000bf48:	83 c4 10             	add    esp,0x10
c000bf4b:	ba 16 00 00 00       	mov    edx,0x16
c000bf50:	85 c0                	test   eax,eax
c000bf52:	0f 88 47 06 00 00    	js     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf58:	68 00 00 70 40       	push   0x40700000
c000bf5d:	6a 00                	push   0x0
c000bf5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf67:	e8 95 b0 01 00       	call   c0027001 <__gtdf2>
c000bf6c:	83 c4 10             	add    esp,0x10
c000bf6f:	ba 16 00 00 00       	mov    edx,0x16
c000bf74:	85 c0                	test   eax,eax
c000bf76:	0f 8f 23 06 00 00    	jg     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf7c:	83 ec 0c             	sub    esp,0xc
c000bf7f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bf82:	e8 2c ae 01 00       	call   c0026db3 <__floatsidf>
c000bf87:	83 c4 10             	add    esp,0x10
c000bf8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bf92:	68 00 00 00 40       	push   0x40000000
c000bf97:	6a 00                	push   0x0
c000bf99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfa1:	e8 2d a1 01 00       	call   c00260d3 <__adddf3>
c000bfa6:	59                   	pop    ecx
c000bfa7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bfab:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bfaf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfb2:	e8 fc ad 01 00       	call   c0026db3 <__floatsidf>
c000bfb7:	83 c4 10             	add    esp,0x10
c000bfba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfbe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfc2:	52                   	push   edx
c000bfc3:	50                   	push   eax
c000bfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfcc:	e8 63 aa 01 00       	call   c0026a34 <__divdf3>
c000bfd1:	83 c4 10             	add    esp,0x10
c000bfd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfdc:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000bfdf:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000bfe2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfe6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bfea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bffa:	e8 02 b0 01 00       	call   c0027001 <__gtdf2>
c000bfff:	83 c4 10             	add    esp,0x10
c000c002:	85 c0                	test   eax,eax
c000c004:	7e 2d                	jle    c000c033 <sinc_hex_vari_process+0x14f>
c000c006:	68 00 00 f0 3f       	push   0x3ff00000
c000c00b:	6a 00                	push   0x0
c000c00d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c011:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c015:	e8 05 b0 01 00       	call   c002701f <__ltdf2>
c000c01a:	83 c4 10             	add    esp,0x10
c000c01d:	85 c0                	test   eax,eax
c000c01f:	79 4d                	jns    c000c06e <sinc_hex_vari_process+0x18a>
c000c021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c025:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c029:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c02d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c031:	eb 1b                	jmp    c000c04e <sinc_hex_vari_process+0x16a>
c000c033:	68 00 00 f0 3f       	push   0x3ff00000
c000c038:	6a 00                	push   0x0
c000c03a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c03e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c042:	e8 d8 af 01 00       	call   c002701f <__ltdf2>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	85 c0                	test   eax,eax
c000c04c:	79 20                	jns    c000c06e <sinc_hex_vari_process+0x18a>
c000c04e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c052:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c056:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c05a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c05e:	e8 d1 a9 01 00       	call   c0026a34 <__divdf3>
c000c063:	83 c4 10             	add    esp,0x10
c000c066:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c06a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c06e:	50                   	push   eax
c000c06f:	50                   	push   eax
c000c070:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c074:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c078:	e8 53 b1 01 00       	call   c00271d0 <lrint>
c000c07d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c080:	40                   	inc    eax
c000c081:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c085:	0f af c7             	imul   eax,edi
c000c088:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c08c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c08f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c093:	58                   	pop    eax
c000c094:	5a                   	pop    edx
c000c095:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c099:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c09d:	e8 2e b1 01 00       	call   c00271d0 <lrint>
c000c0a2:	83 ec 0c             	sub    esp,0xc
c000c0a5:	50                   	push   eax
c000c0a6:	e8 08 ad 01 00       	call   c0026db3 <__floatsidf>
c000c0ab:	83 c4 10             	add    esp,0x10
c000c0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0b6:	52                   	push   edx
c000c0b7:	50                   	push   eax
c000c0b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0c0:	e8 5f a6 01 00       	call   c0026724 <__subdf3>
c000c0c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	83 c4 20             	add    esp,0x20
c000c0d0:	6a 00                	push   0x0
c000c0d2:	6a 00                	push   0x0
c000c0d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0dc:	e8 3e af 01 00       	call   c002701f <__ltdf2>
c000c0e1:	83 c4 10             	add    esp,0x10
c000c0e4:	85 c0                	test   eax,eax
c000c0e6:	79 1f                	jns    c000c107 <sinc_hex_vari_process+0x223>
c000c0e8:	68 00 00 f0 3f       	push   0x3ff00000
c000c0ed:	6a 00                	push   0x0
c000c0ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0f7:	e8 d7 9f 01 00       	call   c00260d3 <__adddf3>
c000c0fc:	83 c4 10             	add    esp,0x10
c000c0ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c103:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c107:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c10a:	83 ec 10             	sub    esp,0x10
c000c10d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c111:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c11c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c120:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c124:	e8 fb a5 01 00       	call   c0026724 <__subdf3>
c000c129:	83 c4 18             	add    esp,0x18
c000c12c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c130:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c134:	52                   	push   edx
c000c135:	50                   	push   eax
c000c136:	e8 95 b0 01 00       	call   c00271d0 <lrint>
c000c13b:	0f af f8             	imul   edi,eax
c000c13e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c142:	01 f8                	add    eax,edi
c000c144:	99                   	cdq    
c000c145:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c148:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c14b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c14f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c153:	68 00 00 f0 3f       	push   0x3ff00000
c000c158:	6a 00                	push   0x0
c000c15a:	e8 d5 a8 01 00       	call   c0026a34 <__divdf3>
c000c15f:	83 c4 10             	add    esp,0x10
c000c162:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c166:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c16a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c16f:	68 23 42 92 0c       	push   0xc924223
c000c174:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c178:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c17c:	e8 52 9f 01 00       	call   c00260d3 <__adddf3>
c000c181:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c185:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c189:	83 c4 20             	add    esp,0x20
c000c18c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c194:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c19c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c19f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c1a2:	7d 50                	jge    c000c1f4 <sinc_hex_vari_process+0x310>
c000c1a4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1a7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1aa:	01 c8                	add    eax,ecx
c000c1ac:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1af:	99                   	cdq    
c000c1b0:	f7 f9                	idiv   ecx
c000c1b2:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1b6:	7d 0c                	jge    c000c1c4 <sinc_hex_vari_process+0x2e0>
c000c1b8:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c1bb:	85 ff                	test   edi,edi
c000c1bd:	79 6c                	jns    c000c22b <sinc_hex_vari_process+0x347>
c000c1bf:	e9 e7 00 00 00       	jmp    c000c2ab <sinc_hex_vari_process+0x3c7>
c000c1c4:	50                   	push   eax
c000c1c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c1c9:	56                   	push   esi
c000c1ca:	53                   	push   ebx
c000c1cb:	e8 d6 f4 ff ff       	call   c000b6a6 <prepare_data>
c000c1d0:	83 c4 10             	add    esp,0x10
c000c1d3:	89 c2                	mov    edx,eax
c000c1d5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c1d8:	85 c0                	test   eax,eax
c000c1da:	0f 85 bf 03 00 00    	jne    c000c59f <sinc_hex_vari_process+0x6bb>
c000c1e0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1e3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1e6:	01 c8                	add    eax,ecx
c000c1e8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1eb:	99                   	cdq    
c000c1ec:	f7 f9                	idiv   ecx
c000c1ee:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1f2:	7c c4                	jl     c000c1b8 <sinc_hex_vari_process+0x2d4>
c000c1f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c1f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1fc:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c1ff:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c206:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c20a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c20d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c210:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c213:	99                   	cdq    
c000c214:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c217:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c21a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c21d:	99                   	cdq    
c000c21e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c221:	31 d2                	xor    edx,edx
c000c223:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c226:	e9 74 03 00 00       	jmp    c000c59f <sinc_hex_vari_process+0x6bb>
c000c22b:	83 ec 0c             	sub    esp,0xc
c000c22e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c231:	e8 7d ab 01 00       	call   c0026db3 <__floatsidf>
c000c236:	83 c4 10             	add    esp,0x10
c000c239:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c23d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c241:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c249:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c251:	e8 7d 9e 01 00       	call   c00260d3 <__adddf3>
c000c256:	83 c4 10             	add    esp,0x10
c000c259:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c25d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c261:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c265:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c269:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c271:	e8 5d 9e 01 00       	call   c00260d3 <__adddf3>
c000c276:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c279:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c27d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c281:	e8 2d ab 01 00       	call   c0026db3 <__floatsidf>
c000c286:	83 c4 10             	add    esp,0x10
c000c289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c291:	52                   	push   edx
c000c292:	50                   	push   eax
c000c293:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c297:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c29b:	e8 7d ad 01 00       	call   c002701d <__gedf2>
c000c2a0:	83 c4 10             	add    esp,0x10
c000c2a3:	85 c0                	test   eax,eax
c000c2a5:	0f 89 49 ff ff ff    	jns    c000c1f4 <sinc_hex_vari_process+0x310>
c000c2ab:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c2af:	0f 8e ef 00 00 00    	jle    c000c3a4 <sinc_hex_vari_process+0x4c0>
c000c2b5:	83 ec 10             	sub    esp,0x10
c000c2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2be:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c2c1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c2c4:	e8 5b a4 01 00       	call   c0026724 <__subdf3>
c000c2c9:	83 c4 18             	add    esp,0x18
c000c2cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d4:	52                   	push   edx
c000c2d5:	50                   	push   eax
c000c2d6:	e8 d5 ae 01 00       	call   c00271b0 <fabs>
c000c2db:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c2df:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c2e3:	83 c4 10             	add    esp,0x10
c000c2e6:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c2eb:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2f8:	e8 04 ad 01 00       	call   c0027001 <__gtdf2>
c000c2fd:	83 c4 10             	add    esp,0x10
c000c300:	85 c0                	test   eax,eax
c000c302:	0f 8e 9c 00 00 00    	jle    c000c3a4 <sinc_hex_vari_process+0x4c0>
c000c308:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c30b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c30e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c312:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c316:	52                   	push   edx
c000c317:	50                   	push   eax
c000c318:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c31b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c31e:	e8 01 a4 01 00       	call   c0026724 <__subdf3>
c000c323:	59                   	pop    ecx
c000c324:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c328:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c32c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c32f:	e8 7f aa 01 00       	call   c0026db3 <__floatsidf>
c000c334:	83 c4 10             	add    esp,0x10
c000c337:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c33b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c33f:	52                   	push   edx
c000c340:	50                   	push   eax
c000c341:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c345:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c349:	e8 02 a4 01 00       	call   c0026750 <__muldf3>
c000c34e:	5f                   	pop    edi
c000c34f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c353:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c357:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c35a:	e8 54 aa 01 00       	call   c0026db3 <__floatsidf>
c000c35f:	83 c4 10             	add    esp,0x10
c000c362:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c366:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c36a:	52                   	push   edx
c000c36b:	50                   	push   eax
c000c36c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c370:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c374:	e8 bb a6 01 00       	call   c0026a34 <__divdf3>
c000c379:	83 c4 10             	add    esp,0x10
c000c37c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c380:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c384:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c388:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c38c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c390:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c394:	e8 3a 9d 01 00       	call   c00260d3 <__adddf3>
c000c399:	83 c4 10             	add    esp,0x10
c000c39c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c3a0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c3a4:	83 ec 0c             	sub    esp,0xc
c000c3a7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3aa:	e8 04 aa 01 00       	call   c0026db3 <__floatsidf>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ca:	e8 50 ac 01 00       	call   c002701f <__ltdf2>
c000c3cf:	83 c4 10             	add    esp,0x10
c000c3d2:	85 c0                	test   eax,eax
c000c3d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c3dc:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c3e0:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c3e4:	78 10                	js     c000c3f6 <sinc_hex_vari_process+0x512>
c000c3e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c3ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c3ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3f2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c406:	e8 45 a3 01 00       	call   c0026750 <__muldf3>
c000c40b:	59                   	pop    ecx
c000c40c:	5f                   	pop    edi
c000c40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c411:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c415:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c419:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c41d:	e8 5d f2 ff ff       	call   c000b67f <double_to_fp>
c000c422:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c426:	89 c7                	mov    edi,eax
c000c428:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c42c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c430:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c434:	e8 17 a3 01 00       	call   c0026750 <__muldf3>
c000c439:	83 c4 18             	add    esp,0x18
c000c43c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c440:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c444:	52                   	push   edx
c000c445:	50                   	push   eax
c000c446:	e8 34 f2 ff ff       	call   c000b67f <double_to_fp>
c000c44b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c44e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c452:	83 c4 0c             	add    esp,0xc
c000c455:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c458:	8d 04 90             	lea    eax,[eax+edx*4]
c000c45b:	50                   	push   eax
c000c45c:	50                   	push   eax
c000c45d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c460:	e8 4e a9 01 00       	call   c0026db3 <__floatsidf>
c000c465:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c469:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c46d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c471:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c475:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c479:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c47d:	e8 b2 a5 01 00       	call   c0026a34 <__divdf3>
c000c482:	83 c4 18             	add    esp,0x18
c000c485:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c489:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c48d:	52                   	push   edx
c000c48e:	89 fa                	mov    edx,edi
c000c490:	50                   	push   eax
c000c491:	89 d8                	mov    eax,ebx
c000c493:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c497:	e8 50 de ff ff       	call   c000a2ec <calc_output_hex>
c000c49c:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c4a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b0:	e8 7f a5 01 00       	call   c0026a34 <__divdf3>
c000c4b5:	83 c4 10             	add    esp,0x10
c000c4b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4bc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4d0:	e8 fe 9b 01 00       	call   c00260d3 <__adddf3>
c000c4d5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c4d9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c4dd:	83 c4 18             	add    esp,0x18
c000c4e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e8:	e8 e3 ac 01 00       	call   c00271d0 <lrint>
c000c4ed:	83 ec 0c             	sub    esp,0xc
c000c4f0:	50                   	push   eax
c000c4f1:	e8 bd a8 01 00       	call   c0026db3 <__floatsidf>
c000c4f6:	83 c4 10             	add    esp,0x10
c000c4f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4fd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c501:	52                   	push   edx
c000c502:	50                   	push   eax
c000c503:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c507:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c50b:	e8 14 a2 01 00       	call   c0026724 <__subdf3>
c000c510:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c514:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c518:	83 c4 20             	add    esp,0x20
c000c51b:	6a 00                	push   0x0
c000c51d:	6a 00                	push   0x0
c000c51f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c523:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c527:	e8 f3 aa 01 00       	call   c002701f <__ltdf2>
c000c52c:	83 c4 10             	add    esp,0x10
c000c52f:	85 c0                	test   eax,eax
c000c531:	79 20                	jns    c000c553 <sinc_hex_vari_process+0x66f>
c000c533:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c537:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c53b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c53f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c543:	e8 8b 9b 01 00       	call   c00260d3 <__adddf3>
c000c548:	83 c4 10             	add    esp,0x10
c000c54b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c54f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c553:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c556:	83 ec 10             	sub    esp,0x10
c000c559:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c55d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c568:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c56c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c570:	e8 af a1 01 00       	call   c0026724 <__subdf3>
c000c575:	83 c4 18             	add    esp,0x18
c000c578:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c57c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	e8 49 ac 01 00       	call   c00271d0 <lrint>
c000c587:	0f af f8             	imul   edi,eax
c000c58a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c58e:	83 c4 10             	add    esp,0x10
c000c591:	01 f8                	add    eax,edi
c000c593:	99                   	cdq    
c000c594:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c597:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c59a:	e9 fd fb ff ff       	jmp    c000c19c <sinc_hex_vari_process+0x2b8>
c000c59f:	83 c4 4c             	add    esp,0x4c
c000c5a2:	89 d0                	mov    eax,edx
c000c5a4:	5b                   	pop    ebx
c000c5a5:	5e                   	pop    esi
c000c5a6:	5f                   	pop    edi
c000c5a7:	5d                   	pop    ebp
c000c5a8:	c3                   	ret    

c000c5a9 <sinc_quad_vari_process>:
c000c5a9:	55                   	push   ebp
c000c5aa:	ba 05 00 00 00       	mov    edx,0x5
c000c5af:	57                   	push   edi
c000c5b0:	56                   	push   esi
c000c5b1:	53                   	push   ebx
c000c5b2:	83 ec 4c             	sub    esp,0x4c
c000c5b5:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c5b9:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c5bd:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c5c0:	85 db                	test   ebx,ebx
c000c5c2:	0f 84 9c 06 00 00    	je     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c5c8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c5cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c5ce:	0f af c7             	imul   eax,edi
c000c5d1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c5d4:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c5d7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c5de:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c5e5:	0f af c7             	imul   eax,edi
c000c5e8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c5eb:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c5ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f9:	68 00 00 70 3f       	push   0x3f700000
c000c5fe:	6a 00                	push   0x0
c000c600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c604:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c608:	e8 12 aa 01 00       	call   c002701f <__ltdf2>
c000c60d:	83 c4 10             	add    esp,0x10
c000c610:	ba 16 00 00 00       	mov    edx,0x16
c000c615:	85 c0                	test   eax,eax
c000c617:	0f 88 47 06 00 00    	js     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c61d:	68 00 00 70 40       	push   0x40700000
c000c622:	6a 00                	push   0x0
c000c624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c628:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c62c:	e8 d0 a9 01 00       	call   c0027001 <__gtdf2>
c000c631:	83 c4 10             	add    esp,0x10
c000c634:	ba 16 00 00 00       	mov    edx,0x16
c000c639:	85 c0                	test   eax,eax
c000c63b:	0f 8f 23 06 00 00    	jg     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c641:	83 ec 0c             	sub    esp,0xc
c000c644:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c647:	e8 67 a7 01 00       	call   c0026db3 <__floatsidf>
c000c64c:	83 c4 10             	add    esp,0x10
c000c64f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c653:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c657:	68 00 00 00 40       	push   0x40000000
c000c65c:	6a 00                	push   0x0
c000c65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c662:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c666:	e8 68 9a 01 00       	call   c00260d3 <__adddf3>
c000c66b:	59                   	pop    ecx
c000c66c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c670:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c674:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c677:	e8 37 a7 01 00       	call   c0026db3 <__floatsidf>
c000c67c:	83 c4 10             	add    esp,0x10
c000c67f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c683:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c687:	52                   	push   edx
c000c688:	50                   	push   eax
c000c689:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c68d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c691:	e8 9e a3 01 00       	call   c0026a34 <__divdf3>
c000c696:	83 c4 10             	add    esp,0x10
c000c699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c69d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6a1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c6a4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c6a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6bf:	e8 3d a9 01 00       	call   c0027001 <__gtdf2>
c000c6c4:	83 c4 10             	add    esp,0x10
c000c6c7:	85 c0                	test   eax,eax
c000c6c9:	7e 2d                	jle    c000c6f8 <sinc_quad_vari_process+0x14f>
c000c6cb:	68 00 00 f0 3f       	push   0x3ff00000
c000c6d0:	6a 00                	push   0x0
c000c6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	e8 40 a9 01 00       	call   c002701f <__ltdf2>
c000c6df:	83 c4 10             	add    esp,0x10
c000c6e2:	85 c0                	test   eax,eax
c000c6e4:	79 4d                	jns    c000c733 <sinc_quad_vari_process+0x18a>
c000c6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6f6:	eb 1b                	jmp    c000c713 <sinc_quad_vari_process+0x16a>
c000c6f8:	68 00 00 f0 3f       	push   0x3ff00000
c000c6fd:	6a 00                	push   0x0
c000c6ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c707:	e8 13 a9 01 00       	call   c002701f <__ltdf2>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	85 c0                	test   eax,eax
c000c711:	79 20                	jns    c000c733 <sinc_quad_vari_process+0x18a>
c000c713:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c717:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c71b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c71f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c723:	e8 0c a3 01 00       	call   c0026a34 <__divdf3>
c000c728:	83 c4 10             	add    esp,0x10
c000c72b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c72f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c733:	50                   	push   eax
c000c734:	50                   	push   eax
c000c735:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c739:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c73d:	e8 8e aa 01 00       	call   c00271d0 <lrint>
c000c742:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c745:	40                   	inc    eax
c000c746:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c74a:	0f af c7             	imul   eax,edi
c000c74d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c754:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c758:	58                   	pop    eax
c000c759:	5a                   	pop    edx
c000c75a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c75e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c762:	e8 69 aa 01 00       	call   c00271d0 <lrint>
c000c767:	83 ec 0c             	sub    esp,0xc
c000c76a:	50                   	push   eax
c000c76b:	e8 43 a6 01 00       	call   c0026db3 <__floatsidf>
c000c770:	83 c4 10             	add    esp,0x10
c000c773:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c777:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c77b:	52                   	push   edx
c000c77c:	50                   	push   eax
c000c77d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c781:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c785:	e8 9a 9f 01 00       	call   c0026724 <__subdf3>
c000c78a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	83 c4 20             	add    esp,0x20
c000c795:	6a 00                	push   0x0
c000c797:	6a 00                	push   0x0
c000c799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7a1:	e8 79 a8 01 00       	call   c002701f <__ltdf2>
c000c7a6:	83 c4 10             	add    esp,0x10
c000c7a9:	85 c0                	test   eax,eax
c000c7ab:	79 1f                	jns    c000c7cc <sinc_quad_vari_process+0x223>
c000c7ad:	68 00 00 f0 3f       	push   0x3ff00000
c000c7b2:	6a 00                	push   0x0
c000c7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7bc:	e8 12 99 01 00       	call   c00260d3 <__adddf3>
c000c7c1:	83 c4 10             	add    esp,0x10
c000c7c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7cc:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7cf:	83 ec 10             	sub    esp,0x10
c000c7d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c7d6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7e9:	e8 36 9f 01 00       	call   c0026724 <__subdf3>
c000c7ee:	83 c4 18             	add    esp,0x18
c000c7f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c7f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c7f9:	52                   	push   edx
c000c7fa:	50                   	push   eax
c000c7fb:	e8 d0 a9 01 00       	call   c00271d0 <lrint>
c000c800:	0f af f8             	imul   edi,eax
c000c803:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c807:	01 f8                	add    eax,edi
c000c809:	99                   	cdq    
c000c80a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c80d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c810:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c814:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c818:	68 00 00 f0 3f       	push   0x3ff00000
c000c81d:	6a 00                	push   0x0
c000c81f:	e8 10 a2 01 00       	call   c0026a34 <__divdf3>
c000c824:	83 c4 10             	add    esp,0x10
c000c827:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c82b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c82f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c834:	68 23 42 92 0c       	push   0xc924223
c000c839:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c83d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c841:	e8 8d 98 01 00       	call   c00260d3 <__adddf3>
c000c846:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c84a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c84e:	83 c4 20             	add    esp,0x20
c000c851:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c859:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c861:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c864:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c867:	7d 50                	jge    c000c8b9 <sinc_quad_vari_process+0x310>
c000c869:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c86c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c86f:	01 c8                	add    eax,ecx
c000c871:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c874:	99                   	cdq    
c000c875:	f7 f9                	idiv   ecx
c000c877:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c87b:	7d 0c                	jge    c000c889 <sinc_quad_vari_process+0x2e0>
c000c87d:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c880:	85 ff                	test   edi,edi
c000c882:	79 6c                	jns    c000c8f0 <sinc_quad_vari_process+0x347>
c000c884:	e9 e7 00 00 00       	jmp    c000c970 <sinc_quad_vari_process+0x3c7>
c000c889:	50                   	push   eax
c000c88a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c88e:	56                   	push   esi
c000c88f:	53                   	push   ebx
c000c890:	e8 11 ee ff ff       	call   c000b6a6 <prepare_data>
c000c895:	83 c4 10             	add    esp,0x10
c000c898:	89 c2                	mov    edx,eax
c000c89a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c89d:	85 c0                	test   eax,eax
c000c89f:	0f 85 bf 03 00 00    	jne    c000cc64 <sinc_quad_vari_process+0x6bb>
c000c8a5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c8a8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c8ab:	01 c8                	add    eax,ecx
c000c8ad:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8b0:	99                   	cdq    
c000c8b1:	f7 f9                	idiv   ecx
c000c8b3:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8b7:	7c c4                	jl     c000c87d <sinc_quad_vari_process+0x2d4>
c000c8b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8c1:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c8c4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c8cf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c8d2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c8d5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c8d8:	99                   	cdq    
c000c8d9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8dc:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c8df:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c8e2:	99                   	cdq    
c000c8e3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8e6:	31 d2                	xor    edx,edx
c000c8e8:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c8eb:	e9 74 03 00 00       	jmp    c000cc64 <sinc_quad_vari_process+0x6bb>
c000c8f0:	83 ec 0c             	sub    esp,0xc
c000c8f3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c8f6:	e8 b8 a4 01 00       	call   c0026db3 <__floatsidf>
c000c8fb:	83 c4 10             	add    esp,0x10
c000c8fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c902:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c906:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c90a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c90e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c912:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c916:	e8 b8 97 01 00       	call   c00260d3 <__adddf3>
c000c91b:	83 c4 10             	add    esp,0x10
c000c91e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c922:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c926:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c932:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c936:	e8 98 97 01 00       	call   c00260d3 <__adddf3>
c000c93b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c93e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c942:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c946:	e8 68 a4 01 00       	call   c0026db3 <__floatsidf>
c000c94b:	83 c4 10             	add    esp,0x10
c000c94e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c952:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c956:	52                   	push   edx
c000c957:	50                   	push   eax
c000c958:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c95c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c960:	e8 b8 a6 01 00       	call   c002701d <__gedf2>
c000c965:	83 c4 10             	add    esp,0x10
c000c968:	85 c0                	test   eax,eax
c000c96a:	0f 89 49 ff ff ff    	jns    c000c8b9 <sinc_quad_vari_process+0x310>
c000c970:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c974:	0f 8e ef 00 00 00    	jle    c000ca69 <sinc_quad_vari_process+0x4c0>
c000c97a:	83 ec 10             	sub    esp,0x10
c000c97d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c980:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c983:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c986:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c989:	e8 96 9d 01 00       	call   c0026724 <__subdf3>
c000c98e:	83 c4 18             	add    esp,0x18
c000c991:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c995:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c999:	52                   	push   edx
c000c99a:	50                   	push   eax
c000c99b:	e8 10 a8 01 00       	call   c00271b0 <fabs>
c000c9a0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9a4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c9a8:	83 c4 10             	add    esp,0x10
c000c9ab:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c9b0:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c9b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9bd:	e8 3f a6 01 00       	call   c0027001 <__gtdf2>
c000c9c2:	83 c4 10             	add    esp,0x10
c000c9c5:	85 c0                	test   eax,eax
c000c9c7:	0f 8e 9c 00 00 00    	jle    c000ca69 <sinc_quad_vari_process+0x4c0>
c000c9cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c9d0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c9d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c9d7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c9db:	52                   	push   edx
c000c9dc:	50                   	push   eax
c000c9dd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c9e0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c9e3:	e8 3c 9d 01 00       	call   c0026724 <__subdf3>
c000c9e8:	59                   	pop    ecx
c000c9e9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c9ed:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c9f1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c9f4:	e8 ba a3 01 00       	call   c0026db3 <__floatsidf>
c000c9f9:	83 c4 10             	add    esp,0x10
c000c9fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca00:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca04:	52                   	push   edx
c000ca05:	50                   	push   eax
c000ca06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca0e:	e8 3d 9d 01 00       	call   c0026750 <__muldf3>
c000ca13:	5f                   	pop    edi
c000ca14:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca18:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca1c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ca1f:	e8 8f a3 01 00       	call   c0026db3 <__floatsidf>
c000ca24:	83 c4 10             	add    esp,0x10
c000ca27:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca2b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca2f:	52                   	push   edx
c000ca30:	50                   	push   eax
c000ca31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca39:	e8 f6 9f 01 00       	call   c0026a34 <__divdf3>
c000ca3e:	83 c4 10             	add    esp,0x10
c000ca41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca45:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca59:	e8 75 96 01 00       	call   c00260d3 <__adddf3>
c000ca5e:	83 c4 10             	add    esp,0x10
c000ca61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca65:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca69:	83 ec 0c             	sub    esp,0xc
c000ca6c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ca6f:	e8 3f a3 01 00       	call   c0026db3 <__floatsidf>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8f:	e8 8b a5 01 00       	call   c002701f <__ltdf2>
c000ca94:	83 c4 10             	add    esp,0x10
c000ca97:	85 c0                	test   eax,eax
c000ca99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca9d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000caa1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000caa5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000caa9:	78 10                	js     c000cabb <sinc_quad_vari_process+0x512>
c000caab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000caaf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cab3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cab7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cabb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cabf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cac3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cac7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cacb:	e8 80 9c 01 00       	call   c0026750 <__muldf3>
c000cad0:	59                   	pop    ecx
c000cad1:	5f                   	pop    edi
c000cad2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cad6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cada:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cade:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cae2:	e8 98 eb ff ff       	call   c000b67f <double_to_fp>
c000cae7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caeb:	89 c7                	mov    edi,eax
c000caed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caf1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf9:	e8 52 9c 01 00       	call   c0026750 <__muldf3>
c000cafe:	83 c4 18             	add    esp,0x18
c000cb01:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb05:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb09:	52                   	push   edx
c000cb0a:	50                   	push   eax
c000cb0b:	e8 6f eb ff ff       	call   c000b67f <double_to_fp>
c000cb10:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cb13:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb17:	83 c4 0c             	add    esp,0xc
c000cb1a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cb1d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cb20:	50                   	push   eax
c000cb21:	50                   	push   eax
c000cb22:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb25:	e8 89 a2 01 00       	call   c0026db3 <__floatsidf>
c000cb2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cb2e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cb32:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb36:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb3a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb42:	e8 ed 9e 01 00       	call   c0026a34 <__divdf3>
c000cb47:	83 c4 18             	add    esp,0x18
c000cb4a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb4e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb52:	52                   	push   edx
c000cb53:	89 fa                	mov    edx,edi
c000cb55:	50                   	push   eax
c000cb56:	89 d8                	mov    eax,ebx
c000cb58:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cb5c:	e8 a5 d1 ff ff       	call   c0009d06 <calc_output_quad>
c000cb61:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cb65:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb69:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb75:	e8 ba 9e 01 00       	call   c0026a34 <__divdf3>
c000cb7a:	83 c4 10             	add    esp,0x10
c000cb7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb81:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb8d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb91:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb95:	e8 39 95 01 00       	call   c00260d3 <__adddf3>
c000cb9a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cb9e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cba2:	83 c4 18             	add    esp,0x18
c000cba5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cba9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbad:	e8 1e a6 01 00       	call   c00271d0 <lrint>
c000cbb2:	83 ec 0c             	sub    esp,0xc
c000cbb5:	50                   	push   eax
c000cbb6:	e8 f8 a1 01 00       	call   c0026db3 <__floatsidf>
c000cbbb:	83 c4 10             	add    esp,0x10
c000cbbe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbc2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbc6:	52                   	push   edx
c000cbc7:	50                   	push   eax
c000cbc8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbcc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbd0:	e8 4f 9b 01 00       	call   c0026724 <__subdf3>
c000cbd5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbd9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbdd:	83 c4 20             	add    esp,0x20
c000cbe0:	6a 00                	push   0x0
c000cbe2:	6a 00                	push   0x0
c000cbe4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbe8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbec:	e8 2e a4 01 00       	call   c002701f <__ltdf2>
c000cbf1:	83 c4 10             	add    esp,0x10
c000cbf4:	85 c0                	test   eax,eax
c000cbf6:	79 20                	jns    c000cc18 <sinc_quad_vari_process+0x66f>
c000cbf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc08:	e8 c6 94 01 00       	call   c00260d3 <__adddf3>
c000cc0d:	83 c4 10             	add    esp,0x10
c000cc10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc18:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc1b:	83 ec 10             	sub    esp,0x10
c000cc1e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cc22:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc31:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc35:	e8 ea 9a 01 00       	call   c0026724 <__subdf3>
c000cc3a:	83 c4 18             	add    esp,0x18
c000cc3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc41:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	e8 84 a5 01 00       	call   c00271d0 <lrint>
c000cc4c:	0f af f8             	imul   edi,eax
c000cc4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc53:	83 c4 10             	add    esp,0x10
c000cc56:	01 f8                	add    eax,edi
c000cc58:	99                   	cdq    
c000cc59:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc5c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc5f:	e9 fd fb ff ff       	jmp    c000c861 <sinc_quad_vari_process+0x2b8>
c000cc64:	83 c4 4c             	add    esp,0x4c
c000cc67:	89 d0                	mov    eax,edx
c000cc69:	5b                   	pop    ebx
c000cc6a:	5e                   	pop    esi
c000cc6b:	5f                   	pop    edi
c000cc6c:	5d                   	pop    ebp
c000cc6d:	c3                   	ret    

c000cc6e <sinc_stereo_vari_process>:
c000cc6e:	55                   	push   ebp
c000cc6f:	ba 05 00 00 00       	mov    edx,0x5
c000cc74:	57                   	push   edi
c000cc75:	56                   	push   esi
c000cc76:	53                   	push   ebx
c000cc77:	83 ec 4c             	sub    esp,0x4c
c000cc7a:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cc7e:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000cc82:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cc85:	85 db                	test   ebx,ebx
c000cc87:	0f 84 9c 06 00 00    	je     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cc8d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cc90:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc93:	0f af c7             	imul   eax,edi
c000cc96:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cc99:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cc9c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cca3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ccaa:	0f af c7             	imul   eax,edi
c000ccad:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ccb0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ccb3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ccb6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccbe:	68 00 00 70 3f       	push   0x3f700000
c000ccc3:	6a 00                	push   0x0
c000ccc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cccd:	e8 4d a3 01 00       	call   c002701f <__ltdf2>
c000ccd2:	83 c4 10             	add    esp,0x10
c000ccd5:	ba 16 00 00 00       	mov    edx,0x16
c000ccda:	85 c0                	test   eax,eax
c000ccdc:	0f 88 47 06 00 00    	js     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cce2:	68 00 00 70 40       	push   0x40700000
c000cce7:	6a 00                	push   0x0
c000cce9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cced:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccf1:	e8 0b a3 01 00       	call   c0027001 <__gtdf2>
c000ccf6:	83 c4 10             	add    esp,0x10
c000ccf9:	ba 16 00 00 00       	mov    edx,0x16
c000ccfe:	85 c0                	test   eax,eax
c000cd00:	0f 8f 23 06 00 00    	jg     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cd06:	83 ec 0c             	sub    esp,0xc
c000cd09:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cd0c:	e8 a2 a0 01 00       	call   c0026db3 <__floatsidf>
c000cd11:	83 c4 10             	add    esp,0x10
c000cd14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd1c:	68 00 00 00 40       	push   0x40000000
c000cd21:	6a 00                	push   0x0
c000cd23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd2b:	e8 a3 93 01 00       	call   c00260d3 <__adddf3>
c000cd30:	59                   	pop    ecx
c000cd31:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd35:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd39:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3c:	e8 72 a0 01 00       	call   c0026db3 <__floatsidf>
c000cd41:	83 c4 10             	add    esp,0x10
c000cd44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd48:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd4c:	52                   	push   edx
c000cd4d:	50                   	push   eax
c000cd4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd56:	e8 d9 9c 01 00       	call   c0026a34 <__divdf3>
c000cd5b:	83 c4 10             	add    esp,0x10
c000cd5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd62:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd66:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cd69:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cd6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd84:	e8 78 a2 01 00       	call   c0027001 <__gtdf2>
c000cd89:	83 c4 10             	add    esp,0x10
c000cd8c:	85 c0                	test   eax,eax
c000cd8e:	7e 2d                	jle    c000cdbd <sinc_stereo_vari_process+0x14f>
c000cd90:	68 00 00 f0 3f       	push   0x3ff00000
c000cd95:	6a 00                	push   0x0
c000cd97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	e8 7b a2 01 00       	call   c002701f <__ltdf2>
c000cda4:	83 c4 10             	add    esp,0x10
c000cda7:	85 c0                	test   eax,eax
c000cda9:	79 4d                	jns    c000cdf8 <sinc_stereo_vari_process+0x18a>
c000cdab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdaf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cdb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cdb7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdbb:	eb 1b                	jmp    c000cdd8 <sinc_stereo_vari_process+0x16a>
c000cdbd:	68 00 00 f0 3f       	push   0x3ff00000
c000cdc2:	6a 00                	push   0x0
c000cdc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdcc:	e8 4e a2 01 00       	call   c002701f <__ltdf2>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	85 c0                	test   eax,eax
c000cdd6:	79 20                	jns    c000cdf8 <sinc_stereo_vari_process+0x18a>
c000cdd8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cddc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cde0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde8:	e8 47 9c 01 00       	call   c0026a34 <__divdf3>
c000cded:	83 c4 10             	add    esp,0x10
c000cdf0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdf4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdf8:	50                   	push   eax
c000cdf9:	50                   	push   eax
c000cdfa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdfe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce02:	e8 c9 a3 01 00       	call   c00271d0 <lrint>
c000ce07:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000ce0a:	40                   	inc    eax
c000ce0b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce0f:	0f af c7             	imul   eax,edi
c000ce12:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ce16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce1d:	58                   	pop    eax
c000ce1e:	5a                   	pop    edx
c000ce1f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce27:	e8 a4 a3 01 00       	call   c00271d0 <lrint>
c000ce2c:	83 ec 0c             	sub    esp,0xc
c000ce2f:	50                   	push   eax
c000ce30:	e8 7e 9f 01 00       	call   c0026db3 <__floatsidf>
c000ce35:	83 c4 10             	add    esp,0x10
c000ce38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce3c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce40:	52                   	push   edx
c000ce41:	50                   	push   eax
c000ce42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce4a:	e8 d5 98 01 00       	call   c0026724 <__subdf3>
c000ce4f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	83 c4 20             	add    esp,0x20
c000ce5a:	6a 00                	push   0x0
c000ce5c:	6a 00                	push   0x0
c000ce5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce66:	e8 b4 a1 01 00       	call   c002701f <__ltdf2>
c000ce6b:	83 c4 10             	add    esp,0x10
c000ce6e:	85 c0                	test   eax,eax
c000ce70:	79 1f                	jns    c000ce91 <sinc_stereo_vari_process+0x223>
c000ce72:	68 00 00 f0 3f       	push   0x3ff00000
c000ce77:	6a 00                	push   0x0
c000ce79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce81:	e8 4d 92 01 00       	call   c00260d3 <__adddf3>
c000ce86:	83 c4 10             	add    esp,0x10
c000ce89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce8d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce91:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce94:	83 ec 10             	sub    esp,0x10
c000ce97:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ce9b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ceaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ceae:	e8 71 98 01 00       	call   c0026724 <__subdf3>
c000ceb3:	83 c4 18             	add    esp,0x18
c000ceb6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ceba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cebe:	52                   	push   edx
c000cebf:	50                   	push   eax
c000cec0:	e8 0b a3 01 00       	call   c00271d0 <lrint>
c000cec5:	0f af f8             	imul   edi,eax
c000cec8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cecc:	01 f8                	add    eax,edi
c000cece:	99                   	cdq    
c000cecf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ced2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ced5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ced9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cedd:	68 00 00 f0 3f       	push   0x3ff00000
c000cee2:	6a 00                	push   0x0
c000cee4:	e8 4b 9b 01 00       	call   c0026a34 <__divdf3>
c000cee9:	83 c4 10             	add    esp,0x10
c000ceec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cef0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cef4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cef9:	68 23 42 92 0c       	push   0xc924223
c000cefe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf02:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf06:	e8 c8 91 01 00       	call   c00260d3 <__adddf3>
c000cf0b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cf0f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cf13:	83 c4 20             	add    esp,0x20
c000cf16:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cf1e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cf26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cf29:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cf2c:	7d 50                	jge    c000cf7e <sinc_stereo_vari_process+0x310>
c000cf2e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf31:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf34:	01 c8                	add    eax,ecx
c000cf36:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf39:	99                   	cdq    
c000cf3a:	f7 f9                	idiv   ecx
c000cf3c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf40:	7d 0c                	jge    c000cf4e <sinc_stereo_vari_process+0x2e0>
c000cf42:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cf45:	85 ff                	test   edi,edi
c000cf47:	79 6c                	jns    c000cfb5 <sinc_stereo_vari_process+0x347>
c000cf49:	e9 e7 00 00 00       	jmp    c000d035 <sinc_stereo_vari_process+0x3c7>
c000cf4e:	50                   	push   eax
c000cf4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf53:	56                   	push   esi
c000cf54:	53                   	push   ebx
c000cf55:	e8 4c e7 ff ff       	call   c000b6a6 <prepare_data>
c000cf5a:	83 c4 10             	add    esp,0x10
c000cf5d:	89 c2                	mov    edx,eax
c000cf5f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cf62:	85 c0                	test   eax,eax
c000cf64:	0f 85 bf 03 00 00    	jne    c000d329 <sinc_stereo_vari_process+0x6bb>
c000cf6a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf6d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf70:	01 c8                	add    eax,ecx
c000cf72:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf75:	99                   	cdq    
c000cf76:	f7 f9                	idiv   ecx
c000cf78:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf7c:	7c c4                	jl     c000cf42 <sinc_stereo_vari_process+0x2d4>
c000cf7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cf82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cf86:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cf89:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cf8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cf94:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cf97:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cf9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cf9d:	99                   	cdq    
c000cf9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfa1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cfa4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cfa7:	99                   	cdq    
c000cfa8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfab:	31 d2                	xor    edx,edx
c000cfad:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cfb0:	e9 74 03 00 00       	jmp    c000d329 <sinc_stereo_vari_process+0x6bb>
c000cfb5:	83 ec 0c             	sub    esp,0xc
c000cfb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cfbb:	e8 f3 9d 01 00       	call   c0026db3 <__floatsidf>
c000cfc0:	83 c4 10             	add    esp,0x10
c000cfc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfdb:	e8 f3 90 01 00       	call   c00260d3 <__adddf3>
c000cfe0:	83 c4 10             	add    esp,0x10
c000cfe3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfe7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cff3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cffb:	e8 d3 90 01 00       	call   c00260d3 <__adddf3>
c000d000:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d003:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d007:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d00b:	e8 a3 9d 01 00       	call   c0026db3 <__floatsidf>
c000d010:	83 c4 10             	add    esp,0x10
c000d013:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d017:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d01b:	52                   	push   edx
c000d01c:	50                   	push   eax
c000d01d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d021:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d025:	e8 f3 9f 01 00       	call   c002701d <__gedf2>
c000d02a:	83 c4 10             	add    esp,0x10
c000d02d:	85 c0                	test   eax,eax
c000d02f:	0f 89 49 ff ff ff    	jns    c000cf7e <sinc_stereo_vari_process+0x310>
c000d035:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d039:	0f 8e ef 00 00 00    	jle    c000d12e <sinc_stereo_vari_process+0x4c0>
c000d03f:	83 ec 10             	sub    esp,0x10
c000d042:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d045:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d048:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d04b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d04e:	e8 d1 96 01 00       	call   c0026724 <__subdf3>
c000d053:	83 c4 18             	add    esp,0x18
c000d056:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d05a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05e:	52                   	push   edx
c000d05f:	50                   	push   eax
c000d060:	e8 4b a1 01 00       	call   c00271b0 <fabs>
c000d065:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d069:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d06d:	83 c4 10             	add    esp,0x10
c000d070:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d075:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d07a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d07e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d082:	e8 7a 9f 01 00       	call   c0027001 <__gtdf2>
c000d087:	83 c4 10             	add    esp,0x10
c000d08a:	85 c0                	test   eax,eax
c000d08c:	0f 8e 9c 00 00 00    	jle    c000d12e <sinc_stereo_vari_process+0x4c0>
c000d092:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d095:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d098:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d09c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d0a0:	52                   	push   edx
c000d0a1:	50                   	push   eax
c000d0a2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d0a5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d0a8:	e8 77 96 01 00       	call   c0026724 <__subdf3>
c000d0ad:	59                   	pop    ecx
c000d0ae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0b2:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0b6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d0b9:	e8 f5 9c 01 00       	call   c0026db3 <__floatsidf>
c000d0be:	83 c4 10             	add    esp,0x10
c000d0c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0c9:	52                   	push   edx
c000d0ca:	50                   	push   eax
c000d0cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0d3:	e8 78 96 01 00       	call   c0026750 <__muldf3>
c000d0d8:	5f                   	pop    edi
c000d0d9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0dd:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0e1:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d0e4:	e8 ca 9c 01 00       	call   c0026db3 <__floatsidf>
c000d0e9:	83 c4 10             	add    esp,0x10
c000d0ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0f4:	52                   	push   edx
c000d0f5:	50                   	push   eax
c000d0f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0fe:	e8 31 99 01 00       	call   c0026a34 <__divdf3>
c000d103:	83 c4 10             	add    esp,0x10
c000d106:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d112:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d116:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d11a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d11e:	e8 b0 8f 01 00       	call   c00260d3 <__adddf3>
c000d123:	83 c4 10             	add    esp,0x10
c000d126:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d12a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d12e:	83 ec 0c             	sub    esp,0xc
c000d131:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d134:	e8 7a 9c 01 00       	call   c0026db3 <__floatsidf>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d14c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d154:	e8 c6 9e 01 00       	call   c002701f <__ltdf2>
c000d159:	83 c4 10             	add    esp,0x10
c000d15c:	85 c0                	test   eax,eax
c000d15e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d162:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d166:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d16a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d16e:	78 10                	js     c000d180 <sinc_stereo_vari_process+0x512>
c000d170:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d174:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d178:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d17c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d180:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d184:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d188:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d18c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d190:	e8 bb 95 01 00       	call   c0026750 <__muldf3>
c000d195:	59                   	pop    ecx
c000d196:	5f                   	pop    edi
c000d197:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d19b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d19f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1a7:	e8 d3 e4 ff ff       	call   c000b67f <double_to_fp>
c000d1ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1b0:	89 c7                	mov    edi,eax
c000d1b2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1be:	e8 8d 95 01 00       	call   c0026750 <__muldf3>
c000d1c3:	83 c4 18             	add    esp,0x18
c000d1c6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d1ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d1ce:	52                   	push   edx
c000d1cf:	50                   	push   eax
c000d1d0:	e8 aa e4 ff ff       	call   c000b67f <double_to_fp>
c000d1d5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d1d8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d1dc:	83 c4 0c             	add    esp,0xc
c000d1df:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d1e2:	8d 04 90             	lea    eax,[eax+edx*4]
c000d1e5:	50                   	push   eax
c000d1e6:	50                   	push   eax
c000d1e7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d1ea:	e8 c4 9b 01 00       	call   c0026db3 <__floatsidf>
c000d1ef:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d1f3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d1f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d203:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d207:	e8 28 98 01 00       	call   c0026a34 <__divdf3>
c000d20c:	83 c4 18             	add    esp,0x18
c000d20f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d213:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d217:	52                   	push   edx
c000d218:	89 fa                	mov    edx,edi
c000d21a:	50                   	push   eax
c000d21b:	89 d8                	mov    eax,ebx
c000d21d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d221:	e8 02 c7 ff ff       	call   c0009928 <calc_output_stereo>
c000d226:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d22a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d22e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d232:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d236:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23a:	e8 f5 97 01 00       	call   c0026a34 <__divdf3>
c000d23f:	83 c4 10             	add    esp,0x10
c000d242:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d246:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d24a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d24e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d252:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d256:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d25a:	e8 74 8e 01 00       	call   c00260d3 <__adddf3>
c000d25f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d263:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d267:	83 c4 18             	add    esp,0x18
c000d26a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d26e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d272:	e8 59 9f 01 00       	call   c00271d0 <lrint>
c000d277:	83 ec 0c             	sub    esp,0xc
c000d27a:	50                   	push   eax
c000d27b:	e8 33 9b 01 00       	call   c0026db3 <__floatsidf>
c000d280:	83 c4 10             	add    esp,0x10
c000d283:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d28b:	52                   	push   edx
c000d28c:	50                   	push   eax
c000d28d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d291:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d295:	e8 8a 94 01 00       	call   c0026724 <__subdf3>
c000d29a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d29e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2a2:	83 c4 20             	add    esp,0x20
c000d2a5:	6a 00                	push   0x0
c000d2a7:	6a 00                	push   0x0
c000d2a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2b1:	e8 69 9d 01 00       	call   c002701f <__ltdf2>
c000d2b6:	83 c4 10             	add    esp,0x10
c000d2b9:	85 c0                	test   eax,eax
c000d2bb:	79 20                	jns    c000d2dd <sinc_stereo_vari_process+0x66f>
c000d2bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2cd:	e8 01 8e 01 00       	call   c00260d3 <__adddf3>
c000d2d2:	83 c4 10             	add    esp,0x10
c000d2d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2dd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d2e0:	83 ec 10             	sub    esp,0x10
c000d2e3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d2e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2fa:	e8 25 94 01 00       	call   c0026724 <__subdf3>
c000d2ff:	83 c4 18             	add    esp,0x18
c000d302:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d306:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	e8 bf 9e 01 00       	call   c00271d0 <lrint>
c000d311:	0f af f8             	imul   edi,eax
c000d314:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d318:	83 c4 10             	add    esp,0x10
c000d31b:	01 f8                	add    eax,edi
c000d31d:	99                   	cdq    
c000d31e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d321:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d324:	e9 fd fb ff ff       	jmp    c000cf26 <sinc_stereo_vari_process+0x2b8>
c000d329:	83 c4 4c             	add    esp,0x4c
c000d32c:	89 d0                	mov    eax,edx
c000d32e:	5b                   	pop    ebx
c000d32f:	5e                   	pop    esi
c000d330:	5f                   	pop    edi
c000d331:	5d                   	pop    ebp
c000d332:	c3                   	ret    

c000d333 <sinc_mono_vari_process>:
c000d333:	55                   	push   ebp
c000d334:	ba 05 00 00 00       	mov    edx,0x5
c000d339:	57                   	push   edi
c000d33a:	56                   	push   esi
c000d33b:	53                   	push   ebx
c000d33c:	83 ec 4c             	sub    esp,0x4c
c000d33f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d343:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d347:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d34a:	85 db                	test   ebx,ebx
c000d34c:	0f 84 c1 06 00 00    	je     c000da13 <sinc_mono_vari_process+0x6e0>
c000d352:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d355:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d358:	0f af c7             	imul   eax,edi
c000d35b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d35e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d361:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d368:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d36f:	0f af c7             	imul   eax,edi
c000d372:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d375:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d379:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d37c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d37e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d382:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d386:	68 00 00 70 3f       	push   0x3f700000
c000d38b:	6a 00                	push   0x0
c000d38d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d391:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d395:	e8 85 9c 01 00       	call   c002701f <__ltdf2>
c000d39a:	83 c4 10             	add    esp,0x10
c000d39d:	ba 16 00 00 00       	mov    edx,0x16
c000d3a2:	85 c0                	test   eax,eax
c000d3a4:	0f 88 69 06 00 00    	js     c000da13 <sinc_mono_vari_process+0x6e0>
c000d3aa:	68 00 00 70 40       	push   0x40700000
c000d3af:	6a 00                	push   0x0
c000d3b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b9:	e8 43 9c 01 00       	call   c0027001 <__gtdf2>
c000d3be:	83 c4 10             	add    esp,0x10
c000d3c1:	ba 16 00 00 00       	mov    edx,0x16
c000d3c6:	85 c0                	test   eax,eax
c000d3c8:	0f 8f 45 06 00 00    	jg     c000da13 <sinc_mono_vari_process+0x6e0>
c000d3ce:	83 ec 0c             	sub    esp,0xc
c000d3d1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d3d4:	e8 da 99 01 00       	call   c0026db3 <__floatsidf>
c000d3d9:	83 c4 10             	add    esp,0x10
c000d3dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d3e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d3e4:	68 00 00 00 40       	push   0x40000000
c000d3e9:	6a 00                	push   0x0
c000d3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3f3:	e8 db 8c 01 00       	call   c00260d3 <__adddf3>
c000d3f8:	59                   	pop    ecx
c000d3f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d3fd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d401:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d404:	e8 aa 99 01 00       	call   c0026db3 <__floatsidf>
c000d409:	83 c4 10             	add    esp,0x10
c000d40c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d410:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d414:	52                   	push   edx
c000d415:	50                   	push   eax
c000d416:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d41a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d41e:	e8 11 96 01 00       	call   c0026a34 <__divdf3>
c000d423:	83 c4 10             	add    esp,0x10
c000d426:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d42a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d42e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d431:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d434:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d438:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d43c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d444:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d448:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d44c:	e8 b0 9b 01 00       	call   c0027001 <__gtdf2>
c000d451:	83 c4 10             	add    esp,0x10
c000d454:	85 c0                	test   eax,eax
c000d456:	7e 2d                	jle    c000d485 <sinc_mono_vari_process+0x152>
c000d458:	68 00 00 f0 3f       	push   0x3ff00000
c000d45d:	6a 00                	push   0x0
c000d45f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d463:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d467:	e8 b3 9b 01 00       	call   c002701f <__ltdf2>
c000d46c:	83 c4 10             	add    esp,0x10
c000d46f:	85 c0                	test   eax,eax
c000d471:	79 4d                	jns    c000d4c0 <sinc_mono_vari_process+0x18d>
c000d473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d477:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d47b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d47f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d483:	eb 1b                	jmp    c000d4a0 <sinc_mono_vari_process+0x16d>
c000d485:	68 00 00 f0 3f       	push   0x3ff00000
c000d48a:	6a 00                	push   0x0
c000d48c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d490:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d494:	e8 86 9b 01 00       	call   c002701f <__ltdf2>
c000d499:	83 c4 10             	add    esp,0x10
c000d49c:	85 c0                	test   eax,eax
c000d49e:	79 20                	jns    c000d4c0 <sinc_mono_vari_process+0x18d>
c000d4a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4a8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4b0:	e8 7f 95 01 00       	call   c0026a34 <__divdf3>
c000d4b5:	83 c4 10             	add    esp,0x10
c000d4b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4bc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4c0:	50                   	push   eax
c000d4c1:	50                   	push   eax
c000d4c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ca:	e8 01 9d 01 00       	call   c00271d0 <lrint>
c000d4cf:	40                   	inc    eax
c000d4d0:	0f af c7             	imul   eax,edi
c000d4d3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d4d7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d4db:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d4de:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d4e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4e9:	58                   	pop    eax
c000d4ea:	5a                   	pop    edx
c000d4eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4f3:	e8 d8 9c 01 00       	call   c00271d0 <lrint>
c000d4f8:	83 ec 0c             	sub    esp,0xc
c000d4fb:	50                   	push   eax
c000d4fc:	e8 b2 98 01 00       	call   c0026db3 <__floatsidf>
c000d501:	83 c4 10             	add    esp,0x10
c000d504:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d508:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d50c:	52                   	push   edx
c000d50d:	50                   	push   eax
c000d50e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d512:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d516:	e8 09 92 01 00       	call   c0026724 <__subdf3>
c000d51b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d51f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d523:	83 c4 20             	add    esp,0x20
c000d526:	6a 00                	push   0x0
c000d528:	6a 00                	push   0x0
c000d52a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d52e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d532:	e8 e8 9a 01 00       	call   c002701f <__ltdf2>
c000d537:	83 c4 10             	add    esp,0x10
c000d53a:	85 c0                	test   eax,eax
c000d53c:	79 1f                	jns    c000d55d <sinc_mono_vari_process+0x22a>
c000d53e:	68 00 00 f0 3f       	push   0x3ff00000
c000d543:	6a 00                	push   0x0
c000d545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d549:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d54d:	e8 81 8b 01 00       	call   c00260d3 <__adddf3>
c000d552:	83 c4 10             	add    esp,0x10
c000d555:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d559:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d55d:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d560:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d563:	83 ec 10             	sub    esp,0x10
c000d566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d572:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d576:	e8 a9 91 01 00       	call   c0026724 <__subdf3>
c000d57b:	83 c4 18             	add    esp,0x18
c000d57e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d582:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d586:	52                   	push   edx
c000d587:	50                   	push   eax
c000d588:	e8 43 9c 01 00       	call   c00271d0 <lrint>
c000d58d:	0f af f8             	imul   edi,eax
c000d590:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d593:	31 ff                	xor    edi,edi
c000d595:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d59a:	99                   	cdq    
c000d59b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d59e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d5a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5a9:	55                   	push   ebp
c000d5aa:	57                   	push   edi
c000d5ab:	e8 84 94 01 00       	call   c0026a34 <__divdf3>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5bb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d5c0:	68 23 42 92 0c       	push   0xc924223
c000d5c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5cd:	e8 01 8b 01 00       	call   c00260d3 <__adddf3>
c000d5d2:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d5d6:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d5da:	83 c4 20             	add    esp,0x20
c000d5dd:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d5e1:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d5e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d5e8:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d5eb:	7d 54                	jge    c000d641 <sinc_mono_vari_process+0x30e>
c000d5ed:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d5f0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d5f3:	01 c8                	add    eax,ecx
c000d5f5:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d5f8:	99                   	cdq    
c000d5f9:	f7 f9                	idiv   ecx
c000d5fb:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d5ff:	7d 0c                	jge    c000d60d <sinc_mono_vari_process+0x2da>
c000d601:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d604:	85 ff                	test   edi,edi
c000d606:	79 73                	jns    c000d67b <sinc_mono_vari_process+0x348>
c000d608:	e9 ee 00 00 00       	jmp    c000d6fb <sinc_mono_vari_process+0x3c8>
c000d60d:	50                   	push   eax
c000d60e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d612:	56                   	push   esi
c000d613:	53                   	push   ebx
c000d614:	e8 8d e0 ff ff       	call   c000b6a6 <prepare_data>
c000d619:	89 c2                	mov    edx,eax
c000d61b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d625:	85 d2                	test   edx,edx
c000d627:	0f 85 e6 03 00 00    	jne    c000da13 <sinc_mono_vari_process+0x6e0>
c000d62d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d630:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d633:	01 c8                	add    eax,ecx
c000d635:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d638:	99                   	cdq    
c000d639:	f7 f9                	idiv   ecx
c000d63b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d63f:	7c c0                	jl     c000d601 <sinc_mono_vari_process+0x2ce>
c000d641:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d645:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d649:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d64d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d650:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d657:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d65b:	89 01                	mov    DWORD PTR [ecx],eax
c000d65d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d660:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d663:	99                   	cdq    
c000d664:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d66a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d66d:	99                   	cdq    
c000d66e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d671:	31 d2                	xor    edx,edx
c000d673:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d676:	e9 98 03 00 00       	jmp    c000da13 <sinc_mono_vari_process+0x6e0>
c000d67b:	83 ec 0c             	sub    esp,0xc
c000d67e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d681:	e8 2d 97 01 00       	call   c0026db3 <__floatsidf>
c000d686:	83 c4 10             	add    esp,0x10
c000d689:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d68d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d691:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d695:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d699:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d69d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6a1:	e8 2d 8a 01 00       	call   c00260d3 <__adddf3>
c000d6a6:	83 c4 10             	add    esp,0x10
c000d6a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6c1:	e8 0d 8a 01 00       	call   c00260d3 <__adddf3>
c000d6c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d6c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d6cd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d6d1:	e8 dd 96 01 00       	call   c0026db3 <__floatsidf>
c000d6d6:	83 c4 10             	add    esp,0x10
c000d6d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6dd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d6e1:	52                   	push   edx
c000d6e2:	50                   	push   eax
c000d6e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6eb:	e8 11 99 01 00       	call   c0027001 <__gtdf2>
c000d6f0:	83 c4 10             	add    esp,0x10
c000d6f3:	85 c0                	test   eax,eax
c000d6f5:	0f 8f 46 ff ff ff    	jg     c000d641 <sinc_mono_vari_process+0x30e>
c000d6fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d6ff:	0f 8e f5 00 00 00    	jle    c000d7fa <sinc_mono_vari_process+0x4c7>
c000d705:	83 ec 10             	sub    esp,0x10
c000d708:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d70b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d70e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d712:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d715:	ff 30                	push   DWORD PTR [eax]
c000d717:	e8 08 90 01 00       	call   c0026724 <__subdf3>
c000d71c:	83 c4 18             	add    esp,0x18
c000d71f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d723:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d727:	52                   	push   edx
c000d728:	50                   	push   eax
c000d729:	e8 82 9a 01 00       	call   c00271b0 <fabs>
c000d72e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d732:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d736:	83 c4 10             	add    esp,0x10
c000d739:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d73e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d743:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d747:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d74b:	e8 b1 98 01 00       	call   c0027001 <__gtdf2>
c000d750:	83 c4 10             	add    esp,0x10
c000d753:	85 c0                	test   eax,eax
c000d755:	0f 8e 9f 00 00 00    	jle    c000d7fa <sinc_mono_vari_process+0x4c7>
c000d75b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d75f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d762:	8b 00                	mov    eax,DWORD PTR [eax]
c000d764:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d768:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d76c:	52                   	push   edx
c000d76d:	50                   	push   eax
c000d76e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d771:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d774:	e8 ab 8f 01 00       	call   c0026724 <__subdf3>
c000d779:	5f                   	pop    edi
c000d77a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d77e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d782:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d785:	e8 29 96 01 00       	call   c0026db3 <__floatsidf>
c000d78a:	83 c4 10             	add    esp,0x10
c000d78d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d791:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d795:	52                   	push   edx
c000d796:	50                   	push   eax
c000d797:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d79b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d79f:	e8 ac 8f 01 00       	call   c0026750 <__muldf3>
c000d7a4:	5d                   	pop    ebp
c000d7a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7a9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7ad:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d7b0:	e8 fe 95 01 00       	call   c0026db3 <__floatsidf>
c000d7b5:	83 c4 10             	add    esp,0x10
c000d7b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7bc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7c0:	52                   	push   edx
c000d7c1:	50                   	push   eax
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ca:	e8 65 92 01 00       	call   c0026a34 <__divdf3>
c000d7cf:	83 c4 10             	add    esp,0x10
c000d7d2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7d6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7e2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ea:	e8 e4 88 01 00       	call   c00260d3 <__adddf3>
c000d7ef:	83 c4 10             	add    esp,0x10
c000d7f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7fa:	83 ec 0c             	sub    esp,0xc
c000d7fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d800:	e8 ae 95 01 00       	call   c0026db3 <__floatsidf>
c000d805:	83 c4 10             	add    esp,0x10
c000d808:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d80c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d81c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d820:	e8 fa 97 01 00       	call   c002701f <__ltdf2>
c000d825:	83 c4 10             	add    esp,0x10
c000d828:	85 c0                	test   eax,eax
c000d82a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d82e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000d832:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000d836:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000d83a:	78 10                	js     c000d84c <sinc_mono_vari_process+0x519>
c000d83c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d840:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d844:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d848:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d84c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d850:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d854:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d858:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d85c:	e8 ef 8e 01 00       	call   c0026750 <__muldf3>
c000d861:	59                   	pop    ecx
c000d862:	5f                   	pop    edi
c000d863:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d867:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d86b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d86f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d873:	e8 07 de ff ff       	call   c000b67f <double_to_fp>
c000d878:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d87c:	89 c7                	mov    edi,eax
c000d87e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d882:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d886:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d88a:	e8 c1 8e 01 00       	call   c0026750 <__muldf3>
c000d88f:	83 c4 18             	add    esp,0x18
c000d892:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d896:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d89a:	52                   	push   edx
c000d89b:	50                   	push   eax
c000d89c:	e8 de dd ff ff       	call   c000b67f <double_to_fp>
c000d8a1:	83 ec 0c             	sub    esp,0xc
c000d8a4:	89 c5                	mov    ebp,eax
c000d8a6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d8a9:	e8 05 95 01 00       	call   c0026db3 <__floatsidf>
c000d8ae:	83 c4 10             	add    esp,0x10
c000d8b1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8b5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8b9:	52                   	push   edx
c000d8ba:	50                   	push   eax
c000d8bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8c3:	e8 6c 91 01 00       	call   c0026a34 <__divdf3>
c000d8c8:	83 c4 10             	add    esp,0x10
c000d8cb:	89 e9                	mov    ecx,ebp
c000d8cd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8d1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8d5:	89 d8                	mov    eax,ebx
c000d8d7:	89 fa                	mov    edx,edi
c000d8d9:	e8 ee bd ff ff       	call   c00096cc <calc_output_single>
c000d8de:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000d8e1:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d8e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8ec:	52                   	push   edx
c000d8ed:	50                   	push   eax
c000d8ee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8f2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8f6:	e8 55 8e 01 00       	call   c0026750 <__muldf3>
c000d8fb:	59                   	pop    ecx
c000d8fc:	59                   	pop    ecx
c000d8fd:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d901:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d905:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d909:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d90d:	e8 11 97 01 00       	call   c0027023 <__truncdfsf2>
c000d912:	83 c4 10             	add    esp,0x10
c000d915:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000d918:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d91b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d91f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d923:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d927:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d92b:	e8 04 91 01 00       	call   c0026a34 <__divdf3>
c000d930:	83 c4 10             	add    esp,0x10
c000d933:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d937:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d93b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d93f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d943:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d947:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d94b:	e8 83 87 01 00       	call   c00260d3 <__adddf3>
c000d950:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000d954:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d958:	83 c4 18             	add    esp,0x18
c000d95b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d963:	e8 68 98 01 00       	call   c00271d0 <lrint>
c000d968:	83 ec 0c             	sub    esp,0xc
c000d96b:	50                   	push   eax
c000d96c:	e8 42 94 01 00       	call   c0026db3 <__floatsidf>
c000d971:	83 c4 10             	add    esp,0x10
c000d974:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d978:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d97c:	52                   	push   edx
c000d97d:	50                   	push   eax
c000d97e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d982:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d986:	e8 99 8d 01 00       	call   c0026724 <__subdf3>
c000d98b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d98f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d993:	83 c4 20             	add    esp,0x20
c000d996:	6a 00                	push   0x0
c000d998:	6a 00                	push   0x0
c000d99a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d99e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9a2:	e8 78 96 01 00       	call   c002701f <__ltdf2>
c000d9a7:	83 c4 10             	add    esp,0x10
c000d9aa:	85 c0                	test   eax,eax
c000d9ac:	79 20                	jns    c000d9ce <sinc_mono_vari_process+0x69b>
c000d9ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9be:	e8 10 87 01 00       	call   c00260d3 <__adddf3>
c000d9c3:	83 c4 10             	add    esp,0x10
c000d9c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9ce:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d9d1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d9d4:	83 ec 10             	sub    esp,0x10
c000d9d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9df:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9e3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9e7:	e8 38 8d 01 00       	call   c0026724 <__subdf3>
c000d9ec:	83 c4 18             	add    esp,0x18
c000d9ef:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9f7:	52                   	push   edx
c000d9f8:	50                   	push   eax
c000d9f9:	e8 d2 97 01 00       	call   c00271d0 <lrint>
c000d9fe:	83 c4 10             	add    esp,0x10
c000da01:	0f af f8             	imul   edi,eax
c000da04:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000da07:	99                   	cdq    
c000da08:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000da0b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000da0e:	e9 d2 fb ff ff       	jmp    c000d5e5 <sinc_mono_vari_process+0x2b2>
c000da13:	83 c4 4c             	add    esp,0x4c
c000da16:	89 d0                	mov    eax,edx
c000da18:	5b                   	pop    ebx
c000da19:	5e                   	pop    esi
c000da1a:	5f                   	pop    edi
c000da1b:	5d                   	pop    ebp
c000da1c:	c3                   	ret    

c000da1d <sinc_get_name>:
c000da1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da21:	31 c0                	xor    eax,eax
c000da23:	83 fa 02             	cmp    edx,0x2
c000da26:	77 07                	ja     c000da2f <sinc_get_name+0x12>
c000da28:	8b 04 95 64 89 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd769c]
c000da2f:	c3                   	ret    

c000da30 <sinc_get_description>:
c000da30:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da34:	31 c0                	xor    eax,eax
c000da36:	83 fa 02             	cmp    edx,0x2
c000da39:	77 07                	ja     c000da42 <sinc_get_description+0x12>
c000da3b:	8b 04 95 58 89 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd76a8]
c000da42:	c3                   	ret    

c000da43 <sinc_set_converter>:
c000da43:	53                   	push   ebx
c000da44:	81 ec 58 08 00 00    	sub    esp,0x858
c000da4a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000da51:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000da54:	85 c0                	test   eax,eax
c000da56:	74 13                	je     c000da6b <sinc_set_converter+0x28>
c000da58:	83 ec 0c             	sub    esp,0xc
c000da5b:	50                   	push   eax
c000da5c:	e8 89 1a 00 00       	call   c000f4ea <free>
c000da61:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000da68:	83 c4 10             	add    esp,0x10
c000da6b:	50                   	push   eax
c000da6c:	68 44 08 00 00       	push   0x844
c000da71:	6a 00                	push   0x0
c000da73:	8d 44 24 18          	lea    eax,[esp+0x18]
c000da77:	50                   	push   eax
c000da78:	e8 0e 2c ff ff       	call   c000068b <memset>
c000da7d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000da80:	83 c4 10             	add    esp,0x10
c000da83:	b8 0b 00 00 00       	mov    eax,0xb
c000da88:	81 fa 80 00 00 00    	cmp    edx,0x80
c000da8e:	7f 6e                	jg     c000dafe <sinc_set_converter+0xbb>
c000da90:	83 fa 01             	cmp    edx,0x1
c000da93:	75 10                	jne    c000daa5 <sinc_set_converter+0x62>
c000da95:	c7 43 24 33 d3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d333
c000da9c:	c7 43 20 33 d3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d333
c000daa3:	eb 4d                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000daa5:	83 fa 02             	cmp    edx,0x2
c000daa8:	75 10                	jne    c000daba <sinc_set_converter+0x77>
c000daaa:	c7 43 24 6e cc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cc6e
c000dab1:	c7 43 20 6e cc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cc6e
c000dab8:	eb 38                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000daba:	83 fa 04             	cmp    edx,0x4
c000dabd:	75 10                	jne    c000dacf <sinc_set_converter+0x8c>
c000dabf:	c7 43 24 a9 c5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c5a9
c000dac6:	c7 43 20 a9 c5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c5a9
c000dacd:	eb 23                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000dacf:	83 fa 06             	cmp    edx,0x6
c000dad2:	75 10                	jne    c000dae4 <sinc_set_converter+0xa1>
c000dad4:	c7 43 24 e4 be 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bee4
c000dadb:	c7 43 20 e4 be 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bee4
c000dae2:	eb 0e                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000dae4:	c7 43 24 20 b8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b820
c000daeb:	c7 43 20 20 b8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b820
c000daf2:	c7 43 28 d3 aa 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000aad3
c000daf9:	b8 0a 00 00 00       	mov    eax,0xa
c000dafe:	81 c4 58 08 00 00    	add    esp,0x858
c000db04:	5b                   	pop    ebx
c000db05:	c3                   	ret    

c000db06 <zoh_vari_process>:
c000db06:	55                   	push   ebp
c000db07:	31 d2                	xor    edx,edx
c000db09:	57                   	push   edi
c000db0a:	56                   	push   esi
c000db0b:	53                   	push   ebx
c000db0c:	83 ec 3c             	sub    esp,0x3c
c000db0f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000db13:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000db17:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000db1b:	0f 8e 80 06 00 00    	jle    c000e1a1 <zoh_vari_process+0x69b>
c000db21:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000db24:	ba 05 00 00 00       	mov    edx,0x5
c000db29:	85 db                	test   ebx,ebx
c000db2b:	0f 84 70 06 00 00    	je     c000e1a1 <zoh_vari_process+0x69b>
c000db31:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000db34:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000db38:	74 19                	je     c000db53 <zoh_vari_process+0x4d>
c000db3a:	31 d2                	xor    edx,edx
c000db3c:	39 c2                	cmp    edx,eax
c000db3e:	7d 0c                	jge    c000db4c <zoh_vari_process+0x46>
c000db40:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000db42:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000db45:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000db49:	42                   	inc    edx
c000db4a:	eb f0                	jmp    c000db3c <zoh_vari_process+0x36>
c000db4c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000db53:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000db56:	0f af d0             	imul   edx,eax
c000db59:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000db5c:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000db60:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000db67:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000db6a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000db71:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000db74:	8b 07                	mov    eax,DWORD PTR [edi]
c000db76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db7e:	68 00 00 70 3f       	push   0x3f700000
c000db83:	6a 00                	push   0x0
c000db85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db8d:	e8 8d 94 01 00       	call   c002701f <__ltdf2>
c000db92:	83 c4 10             	add    esp,0x10
c000db95:	ba 16 00 00 00       	mov    edx,0x16
c000db9a:	85 c0                	test   eax,eax
c000db9c:	0f 88 ff 05 00 00    	js     c000e1a1 <zoh_vari_process+0x69b>
c000dba2:	68 00 00 70 40       	push   0x40700000
c000dba7:	6a 00                	push   0x0
c000dba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb1:	e8 4b 94 01 00       	call   c0027001 <__gtdf2>
c000dbb6:	83 c4 10             	add    esp,0x10
c000dbb9:	ba 16 00 00 00       	mov    edx,0x16
c000dbbe:	85 c0                	test   eax,eax
c000dbc0:	0f 8f db 05 00 00    	jg     c000e1a1 <zoh_vari_process+0x69b>
c000dbc6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dbc9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dbcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dbd4:	68 00 00 f0 3f       	push   0x3ff00000
c000dbd9:	6a 00                	push   0x0
c000dbdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe3:	e8 37 94 01 00       	call   c002701f <__ltdf2>
c000dbe8:	83 c4 10             	add    esp,0x10
c000dbeb:	85 c0                	test   eax,eax
c000dbed:	0f 89 da 01 00 00    	jns    c000ddcd <zoh_vari_process+0x2c7>
c000dbf3:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dbf6:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000dbf9:	0f 8d ce 01 00 00    	jge    c000ddcd <zoh_vari_process+0x2c7>
c000dbff:	83 ec 0c             	sub    esp,0xc
c000dc02:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc05:	e8 a9 91 01 00       	call   c0026db3 <__floatsidf>
c000dc0a:	83 c4 10             	add    esp,0x10
c000dc0d:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc10:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dc14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc24:	e8 27 8b 01 00       	call   c0026750 <__muldf3>
c000dc29:	59                   	pop    ecx
c000dc2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc2e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dc35:	e8 79 91 01 00       	call   c0026db3 <__floatsidf>
c000dc3a:	83 c4 10             	add    esp,0x10
c000dc3d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc41:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc45:	52                   	push   edx
c000dc46:	50                   	push   eax
c000dc47:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc4b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc4f:	e8 7f 84 01 00       	call   c00260d3 <__adddf3>
c000dc54:	59                   	pop    ecx
c000dc55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc59:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc5d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dc60:	e8 4e 91 01 00       	call   c0026db3 <__floatsidf>
c000dc65:	83 c4 10             	add    esp,0x10
c000dc68:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc70:	52                   	push   edx
c000dc71:	50                   	push   eax
c000dc72:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc76:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc7a:	e8 9e 93 01 00       	call   c002701d <__gedf2>
c000dc7f:	83 c4 10             	add    esp,0x10
c000dc82:	85 c0                	test   eax,eax
c000dc84:	0f 89 43 01 00 00    	jns    c000ddcd <zoh_vari_process+0x2c7>
c000dc8a:	85 ed                	test   ebp,ebp
c000dc8c:	0f 8e ec 00 00 00    	jle    c000dd7e <zoh_vari_process+0x278>
c000dc92:	83 ec 10             	sub    esp,0x10
c000dc95:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc98:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc9b:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000dc9e:	ff 37                	push   DWORD PTR [edi]
c000dca0:	e8 7f 8a 01 00       	call   c0026724 <__subdf3>
c000dca5:	83 c4 18             	add    esp,0x18
c000dca8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dcac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dcb0:	52                   	push   edx
c000dcb1:	50                   	push   eax
c000dcb2:	e8 f9 94 01 00       	call   c00271b0 <fabs>
c000dcb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcbf:	83 c4 10             	add    esp,0x10
c000dcc2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dcc7:	68 23 42 92 0c       	push   0xc924223
c000dccc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcd0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcd4:	e8 28 93 01 00       	call   c0027001 <__gtdf2>
c000dcd9:	83 c4 10             	add    esp,0x10
c000dcdc:	85 c0                	test   eax,eax
c000dcde:	0f 8e 9a 00 00 00    	jle    c000dd7e <zoh_vari_process+0x278>
c000dce4:	8b 07                	mov    eax,DWORD PTR [edi]
c000dce6:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dce9:	89 04 24             	mov    DWORD PTR [esp],eax
c000dcec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dcf0:	52                   	push   edx
c000dcf1:	50                   	push   eax
c000dcf2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dcf5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dcf8:	e8 27 8a 01 00       	call   c0026724 <__subdf3>
c000dcfd:	59                   	pop    ecx
c000dcfe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd02:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd06:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dd09:	e8 a5 90 01 00       	call   c0026db3 <__floatsidf>
c000dd0e:	83 c4 10             	add    esp,0x10
c000dd11:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd15:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd19:	52                   	push   edx
c000dd1a:	50                   	push   eax
c000dd1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd23:	e8 28 8a 01 00       	call   c0026750 <__muldf3>
c000dd28:	5d                   	pop    ebp
c000dd29:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd2d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd31:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dd34:	e8 7a 90 01 00       	call   c0026db3 <__floatsidf>
c000dd39:	83 c4 10             	add    esp,0x10
c000dd3c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd40:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd44:	52                   	push   edx
c000dd45:	50                   	push   eax
c000dd46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd4e:	e8 e1 8c 01 00       	call   c0026a34 <__divdf3>
c000dd53:	83 c4 10             	add    esp,0x10
c000dd56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd5e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd62:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd6e:	e8 60 83 01 00       	call   c00260d3 <__adddf3>
c000dd73:	83 c4 10             	add    esp,0x10
c000dd76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd7a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd7e:	31 c0                	xor    eax,eax
c000dd80:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dd83:	7e 13                	jle    c000dd98 <zoh_vari_process+0x292>
c000dd85:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dd89:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dd8c:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dd8f:	40                   	inc    eax
c000dd90:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dd93:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dd96:	eb e8                	jmp    c000dd80 <zoh_vari_process+0x27a>
c000dd98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dda0:	68 00 00 f0 3f       	push   0x3ff00000
c000dda5:	6a 00                	push   0x0
c000dda7:	e8 88 8c 01 00       	call   c0026a34 <__divdf3>
c000ddac:	83 c4 10             	add    esp,0x10
c000ddaf:	89 04 24             	mov    DWORD PTR [esp],eax
c000ddb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ddb6:	52                   	push   edx
c000ddb7:	50                   	push   eax
c000ddb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddc0:	e8 0e 83 01 00       	call   c00260d3 <__adddf3>
c000ddc5:	83 c4 10             	add    esp,0x10
c000ddc8:	e9 ff fd ff ff       	jmp    c000dbcc <zoh_vari_process+0xc6>
c000ddcd:	55                   	push   ebp
c000ddce:	55                   	push   ebp
c000ddcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddd7:	e8 f4 93 01 00       	call   c00271d0 <lrint>
c000dddc:	83 ec 0c             	sub    esp,0xc
c000dddf:	50                   	push   eax
c000dde0:	e8 ce 8f 01 00       	call   c0026db3 <__floatsidf>
c000dde5:	83 c4 10             	add    esp,0x10
c000dde8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddf0:	52                   	push   edx
c000ddf1:	50                   	push   eax
c000ddf2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddf6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddfa:	e8 25 89 01 00       	call   c0026724 <__subdf3>
c000ddff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000de03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000de07:	83 c4 20             	add    esp,0x20
c000de0a:	6a 00                	push   0x0
c000de0c:	6a 00                	push   0x0
c000de0e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de12:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de16:	e8 04 92 01 00       	call   c002701f <__ltdf2>
c000de1b:	83 c4 10             	add    esp,0x10
c000de1e:	85 c0                	test   eax,eax
c000de20:	79 1e                	jns    c000de40 <zoh_vari_process+0x33a>
c000de22:	68 00 00 f0 3f       	push   0x3ff00000
c000de27:	6a 00                	push   0x0
c000de29:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de31:	e8 9d 82 01 00       	call   c00260d3 <__adddf3>
c000de36:	83 c4 10             	add    esp,0x10
c000de39:	89 04 24             	mov    DWORD PTR [esp],eax
c000de3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de40:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000de43:	83 ec 10             	sub    esp,0x10
c000de46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de56:	e8 c9 88 01 00       	call   c0026724 <__subdf3>
c000de5b:	83 c4 18             	add    esp,0x18
c000de5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de62:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de66:	52                   	push   edx
c000de67:	50                   	push   eax
c000de68:	e8 63 93 01 00       	call   c00271d0 <lrint>
c000de6d:	83 c4 10             	add    esp,0x10
c000de70:	0f af e8             	imul   ebp,eax
c000de73:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000de76:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000de79:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000de7d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de80:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000de83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de87:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000de8a:	0f 8d 7a 02 00 00    	jge    c000e10a <zoh_vari_process+0x604>
c000de90:	83 ec 0c             	sub    esp,0xc
c000de93:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de96:	e8 18 8f 01 00       	call   c0026db3 <__floatsidf>
c000de9b:	83 c4 10             	add    esp,0x10
c000de9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dea2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dea6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000deaa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000deae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deb2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deb6:	e8 95 88 01 00       	call   c0026750 <__muldf3>
c000debb:	59                   	pop    ecx
c000debc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dec0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000dec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dec8:	e8 e6 8e 01 00       	call   c0026db3 <__floatsidf>
c000decd:	83 c4 10             	add    esp,0x10
c000ded0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ded4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ded8:	52                   	push   edx
c000ded9:	50                   	push   eax
c000deda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dede:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dee2:	e8 ec 81 01 00       	call   c00260d3 <__adddf3>
c000dee7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000deea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000deee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000def2:	e8 bc 8e 01 00       	call   c0026db3 <__floatsidf>
c000def7:	83 c4 10             	add    esp,0x10
c000defa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000defe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df02:	52                   	push   edx
c000df03:	50                   	push   eax
c000df04:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df0c:	e8 10 91 01 00       	call   c0027021 <__ledf2>
c000df11:	83 c4 10             	add    esp,0x10
c000df14:	85 c0                	test   eax,eax
c000df16:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000df1a:	0f 8f ea 01 00 00    	jg     c000e10a <zoh_vari_process+0x604>
c000df20:	85 c9                	test   ecx,ecx
c000df22:	0f 8e ed 00 00 00    	jle    c000e015 <zoh_vari_process+0x50f>
c000df28:	83 ec 10             	sub    esp,0x10
c000df2b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df2e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df31:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000df34:	ff 37                	push   DWORD PTR [edi]
c000df36:	e8 e9 87 01 00       	call   c0026724 <__subdf3>
c000df3b:	83 c4 18             	add    esp,0x18
c000df3e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df42:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df46:	52                   	push   edx
c000df47:	50                   	push   eax
c000df48:	e8 63 92 01 00       	call   c00271b0 <fabs>
c000df4d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df51:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df55:	83 c4 10             	add    esp,0x10
c000df58:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df5d:	68 23 42 92 0c       	push   0xc924223
c000df62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df6a:	e8 92 90 01 00       	call   c0027001 <__gtdf2>
c000df6f:	83 c4 10             	add    esp,0x10
c000df72:	85 c0                	test   eax,eax
c000df74:	0f 8e 9b 00 00 00    	jle    c000e015 <zoh_vari_process+0x50f>
c000df7a:	8b 07                	mov    eax,DWORD PTR [edi]
c000df7c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df87:	52                   	push   edx
c000df88:	50                   	push   eax
c000df89:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df8c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df8f:	e8 90 87 01 00       	call   c0026724 <__subdf3>
c000df94:	5d                   	pop    ebp
c000df95:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000df99:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000df9d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dfa0:	e8 0e 8e 01 00       	call   c0026db3 <__floatsidf>
c000dfa5:	83 c4 10             	add    esp,0x10
c000dfa8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfb0:	52                   	push   edx
c000dfb1:	50                   	push   eax
c000dfb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfba:	e8 91 87 01 00       	call   c0026750 <__muldf3>
c000dfbf:	59                   	pop    ecx
c000dfc0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfc4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dfc8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dfcb:	e8 e3 8d 01 00       	call   c0026db3 <__floatsidf>
c000dfd0:	83 c4 10             	add    esp,0x10
c000dfd3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfd7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfdb:	52                   	push   edx
c000dfdc:	50                   	push   eax
c000dfdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe5:	e8 4a 8a 01 00       	call   c0026a34 <__divdf3>
c000dfea:	83 c4 10             	add    esp,0x10
c000dfed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dff1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dff5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e005:	e8 c9 80 01 00       	call   c00260d3 <__adddf3>
c000e00a:	83 c4 10             	add    esp,0x10
c000e00d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e011:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e015:	31 d2                	xor    edx,edx
c000e017:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e01a:	39 d0                	cmp    eax,edx
c000e01c:	7e 1d                	jle    c000e03b <zoh_vari_process+0x535>
c000e01e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e021:	29 c1                	sub    ecx,eax
c000e023:	89 c8                	mov    eax,ecx
c000e025:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e027:	01 d0                	add    eax,edx
c000e029:	42                   	inc    edx
c000e02a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e02d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e030:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e033:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e036:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e039:	eb dc                	jmp    c000e017 <zoh_vari_process+0x511>
c000e03b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	68 00 00 f0 3f       	push   0x3ff00000
c000e048:	6a 00                	push   0x0
c000e04a:	e8 e5 89 01 00       	call   c0026a34 <__divdf3>
c000e04f:	83 c4 10             	add    esp,0x10
c000e052:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e056:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e05a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e05e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e06a:	e8 64 80 01 00       	call   c00260d3 <__adddf3>
c000e06f:	5d                   	pop    ebp
c000e070:	59                   	pop    ecx
c000e071:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e075:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e079:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e07d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e081:	e8 4a 91 01 00       	call   c00271d0 <lrint>
c000e086:	83 ec 0c             	sub    esp,0xc
c000e089:	50                   	push   eax
c000e08a:	e8 24 8d 01 00       	call   c0026db3 <__floatsidf>
c000e08f:	83 c4 10             	add    esp,0x10
c000e092:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e096:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e09a:	52                   	push   edx
c000e09b:	50                   	push   eax
c000e09c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a4:	e8 7b 86 01 00       	call   c0026724 <__subdf3>
c000e0a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0b1:	83 c4 20             	add    esp,0x20
c000e0b4:	6a 00                	push   0x0
c000e0b6:	6a 00                	push   0x0
c000e0b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0bc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c0:	e8 5a 8f 01 00       	call   c002701f <__ltdf2>
c000e0c5:	83 c4 10             	add    esp,0x10
c000e0c8:	85 c0                	test   eax,eax
c000e0ca:	79 1e                	jns    c000e0ea <zoh_vari_process+0x5e4>
c000e0cc:	68 00 00 f0 3f       	push   0x3ff00000
c000e0d1:	6a 00                	push   0x0
c000e0d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0db:	e8 f3 7f 01 00       	call   c00260d3 <__adddf3>
c000e0e0:	83 c4 10             	add    esp,0x10
c000e0e3:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0e6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e0ea:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e0ed:	83 ec 10             	sub    esp,0x10
c000e0f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e100:	e8 1f 86 01 00       	call   c0026724 <__subdf3>
c000e105:	e9 51 fd ff ff       	jmp    c000de5b <zoh_vari_process+0x355>
c000e10a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e10e:	7d 3a                	jge    c000e14a <zoh_vari_process+0x644>
c000e110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e114:	83 ec 0c             	sub    esp,0xc
c000e117:	29 e8                	sub    eax,ebp
c000e119:	99                   	cdq    
c000e11a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e11d:	50                   	push   eax
c000e11e:	e8 90 8c 01 00       	call   c0026db3 <__floatsidf>
c000e123:	83 c4 10             	add    esp,0x10
c000e126:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e12a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e12e:	52                   	push   edx
c000e12f:	50                   	push   eax
c000e130:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e134:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e138:	e8 96 7f 01 00       	call   c00260d3 <__adddf3>
c000e13d:	83 c4 10             	add    esp,0x10
c000e140:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e143:	89 04 24             	mov    DWORD PTR [esp],eax
c000e146:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e14a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e14d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e151:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e154:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e157:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e15a:	85 c0                	test   eax,eax
c000e15c:	7f 25                	jg     c000e183 <zoh_vari_process+0x67d>
c000e15e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e162:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e166:	89 07                	mov    DWORD PTR [edi],eax
c000e168:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e16b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e16e:	99                   	cdq    
c000e16f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e172:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e175:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e178:	99                   	cdq    
c000e179:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e17c:	31 d2                	xor    edx,edx
c000e17e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e181:	eb 1e                	jmp    c000e1a1 <zoh_vari_process+0x69b>
c000e183:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e186:	31 d2                	xor    edx,edx
c000e188:	29 c8                	sub    eax,ecx
c000e18a:	c1 e0 02             	shl    eax,0x2
c000e18d:	39 d1                	cmp    ecx,edx
c000e18f:	7e cd                	jle    c000e15e <zoh_vari_process+0x658>
c000e191:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e193:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e197:	83 c0 04             	add    eax,0x4
c000e19a:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e19e:	42                   	inc    edx
c000e19f:	eb ec                	jmp    c000e18d <zoh_vari_process+0x687>
c000e1a1:	83 c4 3c             	add    esp,0x3c
c000e1a4:	89 d0                	mov    eax,edx
c000e1a6:	5b                   	pop    ebx
c000e1a7:	5e                   	pop    esi
c000e1a8:	5f                   	pop    edi
c000e1a9:	5d                   	pop    ebp
c000e1aa:	c3                   	ret    

c000e1ab <zoh_reset>:
c000e1ab:	83 ec 0c             	sub    esp,0xc
c000e1ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1b2:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e1b5:	85 c0                	test   eax,eax
c000e1b7:	74 20                	je     c000e1d9 <zoh_reset+0x2e>
c000e1b9:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e1bc:	83 c0 1c             	add    eax,0x1c
c000e1bf:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e1c2:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e1c9:	c1 e2 02             	shl    edx,0x2
c000e1cc:	51                   	push   ecx
c000e1cd:	52                   	push   edx
c000e1ce:	6a 00                	push   0x0
c000e1d0:	50                   	push   eax
c000e1d1:	e8 b5 24 ff ff       	call   c000068b <memset>
c000e1d6:	83 c4 10             	add    esp,0x10
c000e1d9:	83 c4 0c             	add    esp,0xc
c000e1dc:	c3                   	ret    

c000e1dd <zoh_get_name>:
c000e1dd:	31 c0                	xor    eax,eax
c000e1df:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1e4:	75 05                	jne    c000e1eb <zoh_get_name+0xe>
c000e1e6:	b8 7e 8a 02 c0       	mov    eax,0xc0028a7e
c000e1eb:	c3                   	ret    

c000e1ec <zoh_get_description>:
c000e1ec:	31 c0                	xor    eax,eax
c000e1ee:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1f3:	75 05                	jne    c000e1fa <zoh_get_description+0xe>
c000e1f5:	b8 8f 8a 02 c0       	mov    eax,0xc0028a8f
c000e1fa:	c3                   	ret    

c000e1fb <zoh_set_converter>:
c000e1fb:	53                   	push   ebx
c000e1fc:	b8 0a 00 00 00       	mov    eax,0xa
c000e201:	83 ec 08             	sub    esp,0x8
c000e204:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e208:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e20d:	75 6e                	jne    c000e27d <zoh_set_converter+0x82>
c000e20f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e212:	85 c0                	test   eax,eax
c000e214:	74 13                	je     c000e229 <zoh_set_converter+0x2e>
c000e216:	83 ec 0c             	sub    esp,0xc
c000e219:	50                   	push   eax
c000e21a:	e8 cb 12 00 00       	call   c000f4ea <free>
c000e21f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e226:	83 c4 10             	add    esp,0x10
c000e229:	50                   	push   eax
c000e22a:	50                   	push   eax
c000e22b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e22e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e235:	50                   	push   eax
c000e236:	6a 01                	push   0x1
c000e238:	e8 cd 12 00 00       	call   c000f50a <calloc>
c000e23d:	83 c4 10             	add    esp,0x10
c000e240:	89 c2                	mov    edx,eax
c000e242:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e245:	85 d2                	test   edx,edx
c000e247:	b8 01 00 00 00       	mov    eax,0x1
c000e24c:	74 2f                	je     c000e27d <zoh_set_converter+0x82>
c000e24e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e251:	83 ec 0c             	sub    esp,0xc
c000e254:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e257:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e25d:	c7 43 24 06 db 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000db06
c000e264:	c7 43 20 06 db 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000db06
c000e26b:	c7 43 28 ab e1 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e1ab
c000e272:	53                   	push   ebx
c000e273:	e8 33 ff ff ff       	call   c000e1ab <zoh_reset>
c000e278:	83 c4 10             	add    esp,0x10
c000e27b:	31 c0                	xor    eax,eax
c000e27d:	83 c4 08             	add    esp,0x8
c000e280:	5b                   	pop    ebx
c000e281:	c3                   	ret    

c000e282 <CPU::current()>:
c000e282:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c000e287:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e28d:	90                   	nop
c000e28e:	c3                   	ret    

c000e28f <operator new(unsigned long)>:
c000e28f:	83 ec 0c             	sub    esp,0xc
c000e292:	83 ec 0c             	sub    esp,0xc
c000e295:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e299:	e8 3c 12 00 00       	call   c000f4da <malloc>
c000e29e:	83 c4 10             	add    esp,0x10
c000e2a1:	83 c4 0c             	add    esp,0xc
c000e2a4:	c3                   	ret    
c000e2a5:	90                   	nop

c000e2a6 <Computer::close(int, int, void*)>:
c000e2a6:	57                   	push   edi
c000e2a7:	56                   	push   esi
c000e2a8:	53                   	push   ebx
c000e2a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e2ad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e2b1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e2b5:	83 ec 0c             	sub    esp,0xc
c000e2b8:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e2be:	e8 59 5a 00 00       	call   c0013d1c <Device::closeAll()>
c000e2c3:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e2c9:	83 c4 10             	add    esp,0x10
c000e2cc:	8b 10                	mov    edx,DWORD PTR [eax]
c000e2ce:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e2d2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e2da:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e2de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e2:	5b                   	pop    ebx
c000e2e3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e2e6:	5e                   	pop    esi
c000e2e7:	5f                   	pop    edi
c000e2e8:	ff e0                	jmp    eax

c000e2ea <Krnl::firstTask()>:
c000e2ea:	53                   	push   ebx
c000e2eb:	83 ec 14             	sub    esp,0x14
c000e2ee:	fb                   	sti    
c000e2ef:	68 3f 07 00 00       	push   0x73f
c000e2f4:	e8 e1 11 00 00       	call   c000f4da <malloc>
c000e2f9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e300:	89 c3                	mov    ebx,eax
c000e302:	ff 35 34 e1 02 c0    	push   DWORD PTR ds:0xc002e134
c000e308:	68 c6 8a 02 c0       	push   0xc0028ac6
c000e30d:	6a 01                	push   0x1
c000e30f:	50                   	push   eax
c000e310:	e8 05 ea 00 00       	call   c001cd1a <Process::Process(bool, char const*, Process*, char**)>
c000e315:	83 c4 20             	add    esp,0x20
c000e318:	68 ff 00 00 00       	push   0xff
c000e31d:	6a 00                	push   0x0
c000e31f:	68 6f ee 00 c0       	push   0xc000ee6f
c000e324:	53                   	push   ebx
c000e325:	e8 ee ec 00 00       	call   c001d018 <Process::createThread(void (*)(void*), void*, int)>
c000e32a:	6a 7a                	push   0x7a
c000e32c:	6a 00                	push   0x0
c000e32e:	68 76 d8 01 c0       	push   0xc001d876
c000e333:	ff 35 34 e1 02 c0    	push   DWORD PTR ds:0xc002e134
c000e339:	e8 da ec 00 00       	call   c001d018 <Process::createThread(void (*)(void*), void*, int)>
c000e33e:	83 c4 20             	add    esp,0x20
c000e341:	a3 e8 e0 02 c0       	mov    ds:0xc002e0e8,eax
c000e346:	c6 05 ed cb 02 c0 01 	mov    BYTE PTR ds:0xc002cbed,0x1
c000e34d:	e8 a5 f8 00 00       	call   c001dbf7 <Vm::initialise8086()>
c000e352:	e8 ad 47 00 00       	call   c0012b04 <Fs::initVFS()>
c000e357:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c000e35c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e362:	8b 10                	mov    edx,DWORD PTR [eax]
c000e364:	6a 00                	push   0x0
c000e366:	6a 00                	push   0x0
c000e368:	6a 00                	push   0x0
c000e36a:	50                   	push   eax
c000e36b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e36e:	e8 3b d3 00 00       	call   c001b6ae <Sys::loadSyscalls()>
c000e373:	e8 20 b4 00 00       	call   c0019798 <Krnl::loadSystemEnv()>
c000e378:	83 c4 0c             	add    esp,0xc
c000e37b:	6a 3a                	push   0x3a
c000e37d:	68 d3 8a 02 c0       	push   0xc0028ad3
c000e382:	68 dc 8a 02 c0       	push   0xc0028adc
c000e387:	e8 c8 c0 00 00       	call   c001a454 <Reg::readIntWithDefault(char*, char*, int)>
c000e38c:	89 04 24             	mov    DWORD PTR [esp],eax
c000e38f:	e8 58 52 00 00       	call   c00135ec <User::loadClockSettings(int)>
c000e394:	58                   	pop    eax
c000e395:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c000e39a:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e3a0:	e8 4b 59 00 00       	call   c0013cf0 <Device::loadDriversForAll()>
c000e3a5:	5a                   	pop    edx
c000e3a6:	8b 1d e8 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cbe8
c000e3ac:	59                   	pop    ecx
c000e3ad:	6a 01                	push   0x1
c000e3af:	68 e4 8a 02 c0       	push   0xc0028ae4
c000e3b4:	e8 b9 e4 00 00       	call   c001c872 <Thr::loadDLL(char const*, bool)>
c000e3b9:	5a                   	pop    edx
c000e3ba:	59                   	pop    ecx
c000e3bb:	53                   	push   ebx
c000e3bc:	50                   	push   eax
c000e3bd:	e8 bf e6 00 00       	call   c001ca81 <Thr::executeDLL(unsigned long, void*)>
c000e3c2:	83 c4 10             	add    esp,0x10
c000e3c5:	83 ec 0c             	sub    esp,0xc
c000e3c8:	6a 02                	push   0x2
c000e3ca:	e8 ad ef 00 00       	call   c001d37c <blockTask(TaskState)>
c000e3cf:	83 c4 10             	add    esp,0x10
c000e3d2:	eb f1                	jmp    c000e3c5 <Krnl::firstTask()+0xdb>

c000e3d4 <Computer::Computer()>:
c000e3d4:	83 ec 0c             	sub    esp,0xc
c000e3d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3db:	83 ec 08             	sub    esp,0x8
c000e3de:	68 00 8b 02 c0       	push   0xc0028b00
c000e3e3:	50                   	push   eax
c000e3e4:	e8 ad 59 00 00       	call   c0013d96 <Device::Device(char const*)>
c000e3e9:	83 c4 10             	add    esp,0x10
c000e3ec:	ba a0 8c 02 c0       	mov    edx,0xc0028ca0
c000e3f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3f5:	89 10                	mov    DWORD PTR [eax],edx
c000e3f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3fb:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e409:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e413:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e417:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e41d:	83 ca 04             	or     edx,0x4
c000e420:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e42a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e430:	0f b6 d0             	movzx  edx,al
c000e433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e437:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e43e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e442:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e448:	0f b6 d0             	movzx  edx,al
c000e44b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e44f:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e458:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e45e:	8d 50 01             	lea    edx,[eax+0x1]
c000e461:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e465:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e46b:	0f b6 d0             	movzx  edx,al
c000e46e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e472:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e476:	83 e1 3f             	and    ecx,0x3f
c000e479:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e47d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e481:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e487:	0f b6 d0             	movzx  edx,al
c000e48a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e48e:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e499:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e49f:	0f b6 d0             	movzx  edx,al
c000e4a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4a6:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e4ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4af:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e4b5:	8d 50 01             	lea    edx,[eax+0x1]
c000e4b8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e4bc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e4c2:	0f b6 d0             	movzx  edx,al
c000e4c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4c9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e4cd:	83 e1 3f             	and    ecx,0x3f
c000e4d0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e4d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4d8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e4de:	0f b6 d0             	movzx  edx,al
c000e4e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4e5:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e4ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4f0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e4f6:	0f b6 d0             	movzx  edx,al
c000e4f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4fd:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e506:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e50c:	8d 50 01             	lea    edx,[eax+0x1]
c000e50f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e513:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e519:	0f b6 d0             	movzx  edx,al
c000e51c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e520:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e524:	83 e1 3f             	and    ecx,0x3f
c000e527:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e52b:	90                   	nop
c000e52c:	83 c4 0c             	add    esp,0xc
c000e52f:	c3                   	ret    

c000e530 <Computer::setBootMessage(char const*)>:
c000e530:	c3                   	ret    
c000e531:	90                   	nop

c000e532 <Computer::detectFeatures()>:
c000e532:	55                   	push   ebp
c000e533:	57                   	push   edi
c000e534:	56                   	push   esi
c000e535:	53                   	push   ebx
c000e536:	83 ec 1c             	sub    esp,0x1c
c000e539:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e53d:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e547:	e8 4d 1d ff ff       	call   c0000299 <detectCPUID>
c000e54c:	85 c0                	test   eax,eax
c000e54e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e554:	0f 95 c2             	setne  dl
c000e557:	83 e0 fd             	and    eax,0xfffffffd
c000e55a:	d1 e2                	shl    edx,1
c000e55c:	09 d0                	or     eax,edx
c000e55e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e564:	a8 02                	test   al,0x2
c000e566:	75 46                	jne    c000e5ae <Computer::detectFeatures()+0x7c>
c000e568:	f6 05 01 cc 02 c0 04 	test   BYTE PTR ds:0xc002cc01,0x4
c000e56f:	74 07                	je     c000e578 <Computer::detectFeatures()+0x46>
c000e571:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e578:	e8 99 6c 01 00       	call   c0025216 <x87Detect>
c000e57d:	83 e0 01             	and    eax,0x1
c000e580:	c1 e0 04             	shl    eax,0x4
c000e583:	88 c2                	mov    dl,al
c000e585:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e58b:	83 e0 ef             	and    eax,0xffffffef
c000e58e:	09 d0                	or     eax,edx
c000e590:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e596:	a8 10                	test   al,0x10
c000e598:	0f 85 2a 01 00 00    	jne    c000e6c8 <Computer::detectFeatures()+0x196>
c000e59e:	84 c0                	test   al,al
c000e5a0:	0f 88 45 01 00 00    	js     c000e6eb <Computer::detectFeatures()+0x1b9>
c000e5a6:	83 c4 1c             	add    esp,0x1c
c000e5a9:	5b                   	pop    ebx
c000e5aa:	5e                   	pop    esi
c000e5ab:	5f                   	pop    edi
c000e5ac:	5d                   	pop    ebp
c000e5ad:	c3                   	ret    
c000e5ae:	83 ec 0c             	sub    esp,0xc
c000e5b1:	6a 20                	push   0x20
c000e5b3:	e8 a2 9b 00 00       	call   c001815a <CPU::cpuidCheckEDX(unsigned int)>
c000e5b8:	83 e0 01             	and    eax,0x1
c000e5bb:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e5c2:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e5c8:	83 e0 f7             	and    eax,0xfffffff7
c000e5cb:	09 d0                	or     eax,edx
c000e5cd:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e5d3:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e5da:	e8 7b 9b 00 00       	call   c001815a <CPU::cpuidCheckEDX(unsigned int)>
c000e5df:	83 e0 01             	and    eax,0x1
c000e5e2:	88 c2                	mov    dl,al
c000e5e4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e5ea:	83 e0 fe             	and    eax,0xfffffffe
c000e5ed:	09 d0                	or     eax,edx
c000e5ef:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e5f5:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e5fc:	e8 59 9b 00 00       	call   c001815a <CPU::cpuidCheckEDX(unsigned int)>
c000e601:	c1 e0 07             	shl    eax,0x7
c000e604:	88 c2                	mov    dl,al
c000e606:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e60c:	83 e0 7f             	and    eax,0x7f
c000e60f:	09 d0                	or     eax,edx
c000e611:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e617:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e61e:	e8 37 9b 00 00       	call   c001815a <CPU::cpuidCheckEDX(unsigned int)>
c000e623:	83 c4 10             	add    esp,0x10
c000e626:	83 e0 01             	and    eax,0x1
c000e629:	c1 e0 05             	shl    eax,0x5
c000e62c:	88 c2                	mov    dl,al
c000e62e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e634:	83 e0 df             	and    eax,0xffffffdf
c000e637:	09 d0                	or     eax,edx
c000e639:	f7 05 00 cc 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002cc00,0x401
c000e643:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e649:	0f 84 c2 00 00 00    	je     c000e711 <Computer::detectFeatures()+0x1df>
c000e64f:	83 e0 fe             	and    eax,0xfffffffe
c000e652:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e658:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e65e:	88 c2                	mov    dl,al
c000e660:	83 e2 09             	and    edx,0x9
c000e663:	fe ca                	dec    dl
c000e665:	75 09                	jne    c000e670 <Computer::detectFeatures()+0x13e>
c000e667:	83 e0 fe             	and    eax,0xfffffffe
c000e66a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e670:	83 ec 0c             	sub    esp,0xc
c000e673:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e677:	50                   	push   eax
c000e678:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e67c:	55                   	push   ebp
c000e67d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e681:	57                   	push   edi
c000e682:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e686:	56                   	push   esi
c000e687:	68 00 00 00 80       	push   0x80000000
c000e68c:	e8 45 9a 00 00       	call   c00180d6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e691:	83 c4 20             	add    esp,0x20
c000e694:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e69b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e69f:	0f 86 c3 fe ff ff    	jbe    c000e568 <Computer::detectFeatures()+0x36>
c000e6a5:	83 ec 0c             	sub    esp,0xc
c000e6a8:	50                   	push   eax
c000e6a9:	55                   	push   ebp
c000e6aa:	57                   	push   edi
c000e6ab:	56                   	push   esi
c000e6ac:	68 01 00 00 80       	push   0x80000001
c000e6b1:	e8 20 9a 00 00       	call   c00180d6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e6b6:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e6c0:	83 c4 20             	add    esp,0x20
c000e6c3:	e9 a0 fe ff ff       	jmp    c000e568 <Computer::detectFeatures()+0x36>
c000e6c8:	e8 03 6b 01 00       	call   c00251d0 <absolutelyNoChanceInHell>
c000e6cd:	88 c2                	mov    dl,al
c000e6cf:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e6d5:	c1 e2 07             	shl    edx,0x7
c000e6d8:	83 e0 7f             	and    eax,0x7f
c000e6db:	09 d0                	or     eax,edx
c000e6dd:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6e3:	84 c0                	test   al,al
c000e6e5:	0f 89 bb fe ff ff    	jns    c000e5a6 <Computer::detectFeatures()+0x74>
c000e6eb:	e8 c0 6a 01 00       	call   c00251b0 <avxDetect>
c000e6f0:	83 e0 01             	and    eax,0x1
c000e6f3:	c1 e0 05             	shl    eax,0x5
c000e6f6:	88 c2                	mov    dl,al
c000e6f8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e6fe:	83 e0 df             	and    eax,0xffffffdf
c000e701:	09 d0                	or     eax,edx
c000e703:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e709:	83 c4 1c             	add    esp,0x1c
c000e70c:	5b                   	pop    ebx
c000e70d:	5e                   	pop    esi
c000e70e:	5f                   	pop    edi
c000e70f:	5d                   	pop    ebp
c000e710:	c3                   	ret    
c000e711:	83 ec 0c             	sub    esp,0xc
c000e714:	68 00 02 00 00       	push   0x200
c000e719:	e8 3c 9a 00 00       	call   c001815a <CPU::cpuidCheckEDX(unsigned int)>
c000e71e:	83 c4 10             	add    esp,0x10
c000e721:	83 e0 01             	and    eax,0x1
c000e724:	88 c2                	mov    dl,al
c000e726:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e72c:	83 e0 fe             	and    eax,0xfffffffe
c000e72f:	09 d0                	or     eax,edx
c000e731:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e737:	e9 1c ff ff ff       	jmp    c000e658 <Computer::detectFeatures()+0x126>

c000e73c <Computer::displayFeatures()>:
c000e73c:	53                   	push   ebx
c000e73d:	83 ec 14             	sub    esp,0x14
c000e740:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e744:	68 10 8b 02 c0       	push   0xc0028b10
c000e749:	e8 31 40 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c000e74e:	83 c4 10             	add    esp,0x10
c000e751:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e758:	0f 85 73 02 00 00    	jne    c000e9d1 <Computer::displayFeatures()+0x295>
c000e75e:	b8 0d 8b 02 c0       	mov    eax,0xc0028b0d
c000e763:	83 ec 08             	sub    esp,0x8
c000e766:	50                   	push   eax
c000e767:	68 23 8b 02 c0       	push   0xc0028b23
c000e76c:	e8 0e 40 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c000e771:	83 c4 10             	add    esp,0x10
c000e774:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e77b:	0f 85 8c 02 00 00    	jne    c000ea0d <Computer::displayFeatures()+0x2d1>
c000e781:	b8 0d 8b 02 c0       	mov    eax,0xc0028b0d
c000e786:	83 ec 08             	sub    esp,0x8
c000e789:	50                   	push   eax
c000e78a:	68 34 8b 02 c0       	push   0xc0028b34
c000e78f:	e8 eb 3f 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c000e794:	83 c4 10             	add    esp,0x10
c000e797:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e79e:	0f 85 5f 02 00 00    	jne    c000ea03 <Computer::displayFeatures()+0x2c7>
c000e7a4:	b8 0d 8b 02 c0       	mov    eax,0xc0028b0d
c000e7a9:	83 ec 08             	sub    esp,0x8
c000e7ac:	50                   	push   eax
c000e7ad:	68 45 8b 02 c0       	push   0xc0028b45
c000e7b2:	e8 c8 3f 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c000e7b7:	83 c4 10             	add    esp,0x10
c000e7ba:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e7c1:	0f 85 32 02 00 00    	jne    c000e9f9 <Computer::displayFeatures()+0x2bd>
c000e7c7:	b8 0d 8b 02 c0       	mov    eax,0xc0028b0d
c000e7cc:	83 ec 08             	sub    esp,0x8
c000e7cf:	50                   	push   eax
c000e7d0:	68 56 8b 02 c0       	push   0xc0028b56
c000e7d5:	e8 a5 3f 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c000e7da:	83 c4 10             	add    esp,0x10
c000e7dd:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e7e4:	0f 85 05 02 00 00    	jne    c000e9ef <Computer::displayFeatures()+0x2b3>
c000e7ea:	b8 0d 8b 02 c0       	mov    eax,0xc0028b0d
c000e7ef:	83 ec 08             	sub    esp,0x8
c000e7f2:	50                   	push   eax
c000e7f3:	68 67 8b 02 c0       	push   0xc0028b67
c000e7f8:	e8 82 3f 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c000e7fd:	83 c4 10             	add    esp,0x10
c000e800:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e807:	0f 85 d8 01 00 00    	jne    c000e9e5 <Computer::displayFeatures()+0x2a9>
c000e80d:	b8 0d 8b 02 c0       	mov    eax,0xc0028b0d
c000e812:	83 ec 08             	sub    esp,0x8
c000e815:	50                   	push   eax
c000e816:	68 78 8b 02 c0       	push   0xc0028b78
c000e81b:	e8 5f 3f 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c000e820:	83 c4 10             	add    esp,0x10
c000e823:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e82a:	0f 85 ab 01 00 00    	jne    c000e9db <Computer::displayFeatures()+0x29f>
c000e830:	b8 0d 8b 02 c0       	mov    eax,0xc0028b0d
c000e835:	83 ec 08             	sub    esp,0x8
c000e838:	50                   	push   eax
c000e839:	68 89 8b 02 c0       	push   0xc0028b89
c000e83e:	e8 3c 3f 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c000e843:	83 c4 10             	add    esp,0x10
c000e846:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e84d:	0f 88 1b 02 00 00    	js     c000ea6e <Computer::displayFeatures()+0x332>
c000e853:	b8 0d 8b 02 c0       	mov    eax,0xc0028b0d
c000e858:	83 ec 08             	sub    esp,0x8
c000e85b:	50                   	push   eax
c000e85c:	68 9a 8b 02 c0       	push   0xc0028b9a
c000e861:	e8 19 3f 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c000e866:	83 c4 10             	add    esp,0x10
c000e869:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e870:	0f 85 a1 01 00 00    	jne    c000ea17 <Computer::displayFeatures()+0x2db>
c000e876:	b8 0d 8b 02 c0       	mov    eax,0xc0028b0d
c000e87b:	83 ec 08             	sub    esp,0x8
c000e87e:	50                   	push   eax
c000e87f:	68 ab 8b 02 c0       	push   0xc0028bab
c000e884:	e8 f6 3e 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c000e889:	83 c4 10             	add    esp,0x10
c000e88c:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e893:	0f 85 cb 01 00 00    	jne    c000ea64 <Computer::displayFeatures()+0x328>
c000e899:	b8 0d 8b 02 c0       	mov    eax,0xc0028b0d
c000e89e:	83 ec 08             	sub    esp,0x8
c000e8a1:	50                   	push   eax
c000e8a2:	68 bc 8b 02 c0       	push   0xc0028bbc
c000e8a7:	e8 d3 3e 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c000e8ac:	83 c4 10             	add    esp,0x10
c000e8af:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e8b6:	0f 85 9e 01 00 00    	jne    c000ea5a <Computer::displayFeatures()+0x31e>
c000e8bc:	b8 0d 8b 02 c0       	mov    eax,0xc0028b0d
c000e8c1:	83 ec 08             	sub    esp,0x8
c000e8c4:	50                   	push   eax
c000e8c5:	68 cd 8b 02 c0       	push   0xc0028bcd
c000e8ca:	e8 b0 3e 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c000e8cf:	83 c4 10             	add    esp,0x10
c000e8d2:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000e8d9:	0f 85 71 01 00 00    	jne    c000ea50 <Computer::displayFeatures()+0x314>
c000e8df:	b8 0d 8b 02 c0       	mov    eax,0xc0028b0d
c000e8e4:	83 ec 08             	sub    esp,0x8
c000e8e7:	50                   	push   eax
c000e8e8:	68 de 8b 02 c0       	push   0xc0028bde
c000e8ed:	e8 8d 3e 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c000e8f2:	83 c4 10             	add    esp,0x10
c000e8f5:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000e8fc:	0f 85 44 01 00 00    	jne    c000ea46 <Computer::displayFeatures()+0x30a>
c000e902:	b8 0d 8b 02 c0       	mov    eax,0xc0028b0d
c000e907:	83 ec 08             	sub    esp,0x8
c000e90a:	50                   	push   eax
c000e90b:	68 ef 8b 02 c0       	push   0xc0028bef
c000e910:	e8 6a 3e 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c000e915:	83 c4 10             	add    esp,0x10
c000e918:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000e91f:	0f 85 17 01 00 00    	jne    c000ea3c <Computer::displayFeatures()+0x300>
c000e925:	b8 0d 8b 02 c0       	mov    eax,0xc0028b0d
c000e92a:	83 ec 08             	sub    esp,0x8
c000e92d:	50                   	push   eax
c000e92e:	68 00 8c 02 c0       	push   0xc0028c00
c000e933:	e8 47 3e 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c000e938:	83 c4 10             	add    esp,0x10
c000e93b:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000e942:	0f 85 ea 00 00 00    	jne    c000ea32 <Computer::displayFeatures()+0x2f6>
c000e948:	b8 0d 8b 02 c0       	mov    eax,0xc0028b0d
c000e94d:	83 ec 08             	sub    esp,0x8
c000e950:	50                   	push   eax
c000e951:	68 11 8c 02 c0       	push   0xc0028c11
c000e956:	e8 24 3e 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c000e95b:	83 c4 10             	add    esp,0x10
c000e95e:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000e965:	0f 88 0d 01 00 00    	js     c000ea78 <Computer::displayFeatures()+0x33c>
c000e96b:	b8 0d 8b 02 c0       	mov    eax,0xc0028b0d
c000e970:	83 ec 08             	sub    esp,0x8
c000e973:	50                   	push   eax
c000e974:	68 22 8c 02 c0       	push   0xc0028c22
c000e979:	e8 01 3e 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c000e97e:	83 c4 10             	add    esp,0x10
c000e981:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000e988:	0f 85 9a 00 00 00    	jne    c000ea28 <Computer::displayFeatures()+0x2ec>
c000e98e:	b8 0d 8b 02 c0       	mov    eax,0xc0028b0d
c000e993:	83 ec 08             	sub    esp,0x8
c000e996:	50                   	push   eax
c000e997:	68 33 8c 02 c0       	push   0xc0028c33
c000e99c:	e8 de 3d 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c000e9a1:	83 c4 10             	add    esp,0x10
c000e9a4:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000e9ab:	75 74                	jne    c000ea21 <Computer::displayFeatures()+0x2e5>
c000e9ad:	b8 0d 8b 02 c0       	mov    eax,0xc0028b0d
c000e9b2:	83 ec 08             	sub    esp,0x8
c000e9b5:	50                   	push   eax
c000e9b6:	68 44 8c 02 c0       	push   0xc0028c44
c000e9bb:	e8 bf 3d 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c000e9c0:	c7 44 24 20 3b a4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a43b
c000e9c8:	83 c4 18             	add    esp,0x18
c000e9cb:	5b                   	pop    ebx
c000e9cc:	e9 ae 3d 00 00       	jmp    c001277f <Dbg::kprintf(char const*, ...)>
c000e9d1:	b8 09 8b 02 c0       	mov    eax,0xc0028b09
c000e9d6:	e9 88 fd ff ff       	jmp    c000e763 <Computer::displayFeatures()+0x27>
c000e9db:	b8 09 8b 02 c0       	mov    eax,0xc0028b09
c000e9e0:	e9 50 fe ff ff       	jmp    c000e835 <Computer::displayFeatures()+0xf9>
c000e9e5:	b8 09 8b 02 c0       	mov    eax,0xc0028b09
c000e9ea:	e9 23 fe ff ff       	jmp    c000e812 <Computer::displayFeatures()+0xd6>
c000e9ef:	b8 09 8b 02 c0       	mov    eax,0xc0028b09
c000e9f4:	e9 f6 fd ff ff       	jmp    c000e7ef <Computer::displayFeatures()+0xb3>
c000e9f9:	b8 09 8b 02 c0       	mov    eax,0xc0028b09
c000e9fe:	e9 c9 fd ff ff       	jmp    c000e7cc <Computer::displayFeatures()+0x90>
c000ea03:	b8 09 8b 02 c0       	mov    eax,0xc0028b09
c000ea08:	e9 9c fd ff ff       	jmp    c000e7a9 <Computer::displayFeatures()+0x6d>
c000ea0d:	b8 09 8b 02 c0       	mov    eax,0xc0028b09
c000ea12:	e9 6f fd ff ff       	jmp    c000e786 <Computer::displayFeatures()+0x4a>
c000ea17:	b8 09 8b 02 c0       	mov    eax,0xc0028b09
c000ea1c:	e9 5a fe ff ff       	jmp    c000e87b <Computer::displayFeatures()+0x13f>
c000ea21:	b8 09 8b 02 c0       	mov    eax,0xc0028b09
c000ea26:	eb 8a                	jmp    c000e9b2 <Computer::displayFeatures()+0x276>
c000ea28:	b8 09 8b 02 c0       	mov    eax,0xc0028b09
c000ea2d:	e9 61 ff ff ff       	jmp    c000e993 <Computer::displayFeatures()+0x257>
c000ea32:	b8 09 8b 02 c0       	mov    eax,0xc0028b09
c000ea37:	e9 11 ff ff ff       	jmp    c000e94d <Computer::displayFeatures()+0x211>
c000ea3c:	b8 09 8b 02 c0       	mov    eax,0xc0028b09
c000ea41:	e9 e4 fe ff ff       	jmp    c000e92a <Computer::displayFeatures()+0x1ee>
c000ea46:	b8 09 8b 02 c0       	mov    eax,0xc0028b09
c000ea4b:	e9 b7 fe ff ff       	jmp    c000e907 <Computer::displayFeatures()+0x1cb>
c000ea50:	b8 09 8b 02 c0       	mov    eax,0xc0028b09
c000ea55:	e9 8a fe ff ff       	jmp    c000e8e4 <Computer::displayFeatures()+0x1a8>
c000ea5a:	b8 09 8b 02 c0       	mov    eax,0xc0028b09
c000ea5f:	e9 5d fe ff ff       	jmp    c000e8c1 <Computer::displayFeatures()+0x185>
c000ea64:	b8 09 8b 02 c0       	mov    eax,0xc0028b09
c000ea69:	e9 30 fe ff ff       	jmp    c000e89e <Computer::displayFeatures()+0x162>
c000ea6e:	b8 09 8b 02 c0       	mov    eax,0xc0028b09
c000ea73:	e9 e0 fd ff ff       	jmp    c000e858 <Computer::displayFeatures()+0x11c>
c000ea78:	b8 09 8b 02 c0       	mov    eax,0xc0028b09
c000ea7d:	e9 ee fe ff ff       	jmp    c000e970 <Computer::displayFeatures()+0x234>

c000ea82 <Computer::rdmsr(unsigned int)>:
c000ea82:	83 ec 0c             	sub    esp,0xc
c000ea85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea89:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ea90:	74 0a                	je     c000ea9c <Computer::rdmsr(unsigned int)+0x1a>
c000ea92:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ea96:	0f 32                	rdmsr  
c000ea98:	83 c4 0c             	add    esp,0xc
c000ea9b:	c3                   	ret    
c000ea9c:	83 ec 0c             	sub    esp,0xc
c000ea9f:	68 55 8c 02 c0       	push   0xc0028c55
c000eaa4:	e8 28 ae 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c000eaa9:	83 c4 10             	add    esp,0x10
c000eaac:	eb e4                	jmp    c000ea92 <Computer::rdmsr(unsigned int)+0x10>

c000eaae <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eaae:	57                   	push   edi
c000eaaf:	56                   	push   esi
c000eab0:	52                   	push   edx
c000eab1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eab5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eab9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eabd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eac4:	74 0e                	je     c000ead4 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eac6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eaca:	89 f0                	mov    eax,esi
c000eacc:	89 fa                	mov    edx,edi
c000eace:	0f 30                	wrmsr  
c000ead0:	58                   	pop    eax
c000ead1:	5e                   	pop    esi
c000ead2:	5f                   	pop    edi
c000ead3:	c3                   	ret    
c000ead4:	83 ec 0c             	sub    esp,0xc
c000ead7:	68 5b 8c 02 c0       	push   0xc0028c5b
c000eadc:	e8 f0 ad 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c000eae1:	83 c4 10             	add    esp,0x10
c000eae4:	eb e0                	jmp    c000eac6 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eae6 <Computer::nmiEnabled()>:
c000eae6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eaea:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eaf0:	c3                   	ret    
c000eaf1:	90                   	nop

c000eaf2 <Computer::readCMOS(unsigned char)>:
c000eaf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eaf6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eafd:	19 c0                	sbb    eax,eax
c000eaff:	83 e0 80             	and    eax,0xffffff80
c000eb02:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eb06:	e6 70                	out    0x70,al
c000eb08:	e4 71                	in     al,0x71
c000eb0a:	c3                   	ret    
c000eb0b:	90                   	nop

c000eb0c <Computer::enableNMI(bool)>:
c000eb0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb14:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eb1a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eb22:	eb ce                	jmp    c000eaf2 <Computer::readCMOS(unsigned char)>

c000eb24 <Computer::open(int, int, void*)>:
c000eb24:	56                   	push   esi
c000eb25:	53                   	push   ebx
c000eb26:	83 ec 10             	sub    esp,0x10
c000eb29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb2d:	f6 05 00 cc 02 c0 04 	test   BYTE PTR ds:0xc002cc00,0x4
c000eb34:	68 68 22 00 00       	push   0x2268
c000eb39:	0f 94 05 24 bb 02 c0 	sete   BYTE PTR ds:0xc002bb24
c000eb40:	e8 95 09 00 00       	call   c000f4da <malloc>
c000eb45:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb48:	89 c6                	mov    esi,eax
c000eb4a:	e8 17 8c 00 00       	call   c0017766 <ACPI::ACPI()>
c000eb4f:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eb55:	58                   	pop    eax
c000eb56:	5a                   	pop    edx
c000eb57:	56                   	push   esi
c000eb58:	53                   	push   ebx
c000eb59:	e8 48 50 00 00       	call   c0013ba6 <Device::addChild(Device*)>
c000eb5e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb61:	e8 cc f9 ff ff       	call   c000e532 <Computer::detectFeatures()>
c000eb66:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb69:	e8 ce fb ff ff       	call   c000e73c <Computer::displayFeatures()>
c000eb6e:	59                   	pop    ecx
c000eb6f:	5e                   	pop    esi
c000eb70:	6a 01                	push   0x1
c000eb72:	53                   	push   ebx
c000eb73:	e8 94 ff ff ff       	call   c000eb0c <Computer::enableNMI(bool)>
c000eb78:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eb7f:	e8 56 09 00 00       	call   c000f4da <malloc>
c000eb84:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb87:	89 c6                	mov    esi,eax
c000eb89:	e8 84 96 00 00       	call   c0018212 <CPU::CPU()>
c000eb8e:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eb94:	58                   	pop    eax
c000eb95:	5a                   	pop    edx
c000eb96:	56                   	push   esi
c000eb97:	53                   	push   ebx
c000eb98:	e8 09 50 00 00       	call   c0013ba6 <Device::addChild(Device*)>
c000eb9d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000eba3:	8b 10                	mov    edx,DWORD PTR [eax]
c000eba5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eba9:	6a 00                	push   0x0
c000ebab:	6a 00                	push   0x0
c000ebad:	50                   	push   eax
c000ebae:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebb1:	83 c4 20             	add    esp,0x20
c000ebb4:	e8 5f 55 00 00       	call   c0014118 <setupFPU()>
c000ebb9:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ebbf:	85 c0                	test   eax,eax
c000ebc1:	74 1f                	je     c000ebe2 <Computer::open(int, int, void*)+0xbe>
c000ebc3:	83 ec 08             	sub    esp,0x8
c000ebc6:	50                   	push   eax
c000ebc7:	53                   	push   ebx
c000ebc8:	e8 d9 4f 00 00       	call   c0013ba6 <Device::addChild(Device*)>
c000ebcd:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ebd3:	8b 10                	mov    edx,DWORD PTR [eax]
c000ebd5:	6a 00                	push   0x0
c000ebd7:	6a 00                	push   0x0
c000ebd9:	6a 00                	push   0x0
c000ebdb:	50                   	push   eax
c000ebdc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebdf:	83 c4 20             	add    esp,0x20
c000ebe2:	83 ec 0c             	sub    esp,0xc
c000ebe5:	68 ea e2 00 c0       	push   0xc000e2ea
c000ebea:	e8 29 e5 00 00       	call   c001d118 <setupMultitasking(void (*)())>
c000ebef:	83 c4 14             	add    esp,0x14
c000ebf2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ebf7:	5b                   	pop    ebx
c000ebf8:	5e                   	pop    esi
c000ebf9:	c3                   	ret    

c000ebfa <Computer::disableNMI()>:
c000ebfa:	6a 00                	push   0x0
c000ebfc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ec00:	e8 07 ff ff ff       	call   c000eb0c <Computer::enableNMI(bool)>
c000ec05:	58                   	pop    eax
c000ec06:	5a                   	pop    edx
c000ec07:	c3                   	ret    

c000ec08 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ec08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec0c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ec13:	19 c0                	sbb    eax,eax
c000ec15:	83 e0 80             	and    eax,0xffffff80
c000ec18:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ec1c:	e6 70                	out    0x70,al
c000ec1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec22:	e6 71                	out    0x71,al
c000ec24:	c3                   	ret    
c000ec25:	90                   	nop

c000ec26 <Computer::handleNMI()>:
c000ec26:	56                   	push   esi
c000ec27:	53                   	push   ebx
c000ec28:	83 ec 10             	sub    esp,0x10
c000ec2b:	e4 92                	in     al,0x92
c000ec2d:	89 c6                	mov    esi,eax
c000ec2f:	e4 61                	in     al,0x61
c000ec31:	68 61 8c 02 c0       	push   0xc0028c61
c000ec36:	88 c3                	mov    bl,al
c000ec38:	e8 42 3b 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c000ec3d:	83 c4 10             	add    esp,0x10
c000ec40:	83 e6 10             	and    esi,0x10
c000ec43:	75 0d                	jne    c000ec52 <Computer::handleNMI()+0x2c>
c000ec45:	f6 c3 40             	test   bl,0x40
c000ec48:	75 1d                	jne    c000ec67 <Computer::handleNMI()+0x41>
c000ec4a:	84 db                	test   bl,bl
c000ec4c:	78 2d                	js     c000ec7b <Computer::handleNMI()+0x55>
c000ec4e:	58                   	pop    eax
c000ec4f:	5b                   	pop    ebx
c000ec50:	5e                   	pop    esi
c000ec51:	c3                   	ret    
c000ec52:	83 ec 0c             	sub    esp,0xc
c000ec55:	68 72 8c 02 c0       	push   0xc0028c72
c000ec5a:	e8 72 ac 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c000ec5f:	83 c4 10             	add    esp,0x10
c000ec62:	f6 c3 40             	test   bl,0x40
c000ec65:	74 e3                	je     c000ec4a <Computer::handleNMI()+0x24>
c000ec67:	83 ec 0c             	sub    esp,0xc
c000ec6a:	68 7f 8c 02 c0       	push   0xc0028c7f
c000ec6f:	e8 5d ac 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c000ec74:	83 c4 10             	add    esp,0x10
c000ec77:	84 db                	test   bl,bl
c000ec79:	79 d3                	jns    c000ec4e <Computer::handleNMI()+0x28>
c000ec7b:	c7 44 24 10 89 8c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028c89
c000ec83:	5a                   	pop    edx
c000ec84:	5b                   	pop    ebx
c000ec85:	5e                   	pop    esi
c000ec86:	e9 46 ac 00 00       	jmp    c00198d1 <Krnl::panic(char const*)>
c000ec8b:	90                   	nop

c000ec8c <Computer::setDiskActivityLight(int, bool)>:
c000ec8c:	56                   	push   esi
c000ec8d:	53                   	push   ebx
c000ec8e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ec92:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ec97:	77 1b                	ja     c000ecb4 <Computer::setDiskActivityLight(int, bool)+0x28>
c000ec99:	e4 92                	in     al,0x92
c000ec9b:	bb 40 00 00 00       	mov    ebx,0x40
c000eca0:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000eca4:	89 da                	mov    edx,ebx
c000eca6:	d3 e2                	shl    edx,cl
c000eca8:	89 f1                	mov    ecx,esi
c000ecaa:	f7 d2                	not    edx
c000ecac:	d3 e3                	shl    ebx,cl
c000ecae:	21 d0                	and    eax,edx
c000ecb0:	09 d8                	or     eax,ebx
c000ecb2:	e6 92                	out    0x92,al
c000ecb4:	5b                   	pop    ebx
c000ecb5:	5e                   	pop    esi
c000ecb6:	c3                   	ret    
c000ecb7:	90                   	nop

c000ecb8 <GDTEntry::setBase(unsigned int)>:
c000ecb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecbc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ecc0:	89 c1                	mov    ecx,eax
c000ecc2:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ecc6:	c1 e9 10             	shr    ecx,0x10
c000ecc9:	c1 e8 18             	shr    eax,0x18
c000eccc:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000eccf:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000ecd2:	c3                   	ret    
c000ecd3:	90                   	nop

c000ecd4 <GDTEntry::setLimit(unsigned int)>:
c000ecd4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ecd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecdc:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ecdf:	66 89 01             	mov    WORD PTR [ecx],ax
c000ece2:	83 e2 f0             	and    edx,0xfffffff0
c000ece5:	c1 e8 10             	shr    eax,0x10
c000ece8:	83 e0 0f             	and    eax,0xf
c000eceb:	09 d0                	or     eax,edx
c000eced:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ecf0:	c3                   	ret    
c000ecf1:	90                   	nop

c000ecf2 <GDT::GDT()>:
c000ecf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecf6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ecfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed00:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ed06:	90                   	nop
c000ed07:	c3                   	ret    

c000ed08 <GDT::addEntry(GDTEntry)>:
c000ed08:	53                   	push   ebx
c000ed09:	83 ec 0c             	sub    esp,0xc
c000ed0c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ed10:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed12:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ed19:	52                   	push   edx
c000ed1a:	50                   	push   eax
c000ed1b:	68 c4 8c 02 c0       	push   0xc0028cc4
c000ed20:	e8 5a 3a 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c000ed25:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed27:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ed2b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ed2f:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000ed33:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000ed37:	8d 50 01             	lea    edx,[eax+0x1]
c000ed3a:	c1 e0 03             	shl    eax,0x3
c000ed3d:	89 13                	mov    DWORD PTR [ebx],edx
c000ed3f:	83 c4 18             	add    esp,0x18
c000ed42:	5b                   	pop    ebx
c000ed43:	c3                   	ret    

c000ed44 <GDT::getNumberOfEntries()>:
c000ed44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed48:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed4a:	c3                   	ret    
c000ed4b:	90                   	nop

c000ed4c <GDT::flush()>:
c000ed4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed50:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed52:	83 c0 04             	add    eax,0x4
c000ed55:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ed5c:	a3 f2 cb 02 c0       	mov    ds:0xc002cbf2,eax
c000ed61:	66 89 15 f0 cb 02 c0 	mov    WORD PTR ds:0xc002cbf0,dx
c000ed68:	e9 90 16 ff ff       	jmp    c00003fd <loadGDT>
c000ed6d:	90                   	nop

c000ed6e <GDT::setup()>:
c000ed6e:	55                   	push   ebp
c000ed6f:	57                   	push   edi
c000ed70:	56                   	push   esi
c000ed71:	53                   	push   ebx
c000ed72:	83 ec 3c             	sub    esp,0x3c
c000ed75:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ed79:	6a 00                	push   0x0
c000ed7b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ed7f:	53                   	push   ebx
c000ed80:	e8 33 ff ff ff       	call   c000ecb8 <GDTEntry::setBase(unsigned int)>
c000ed85:	6a 00                	push   0x0
c000ed87:	53                   	push   ebx
c000ed88:	e8 47 ff ff ff       	call   c000ecd4 <GDTEntry::setLimit(unsigned int)>
c000ed8d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ed95:	6a 00                	push   0x0
c000ed97:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ed9b:	53                   	push   ebx
c000ed9c:	e8 17 ff ff ff       	call   c000ecb8 <GDTEntry::setBase(unsigned int)>
c000eda1:	68 ff ff ff 00       	push   0xffffff
c000eda6:	53                   	push   ebx
c000eda7:	e8 28 ff ff ff       	call   c000ecd4 <GDTEntry::setLimit(unsigned int)>
c000edac:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000edb0:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000edb5:	0d 00 9a c0 00       	or     eax,0xc09a00
c000edba:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000edbe:	83 c4 20             	add    esp,0x20
c000edc1:	6a 00                	push   0x0
c000edc3:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000edc7:	53                   	push   ebx
c000edc8:	e8 eb fe ff ff       	call   c000ecb8 <GDTEntry::setBase(unsigned int)>
c000edcd:	68 ff ff ff 00       	push   0xffffff
c000edd2:	53                   	push   ebx
c000edd3:	e8 fc fe ff ff       	call   c000ecd4 <GDTEntry::setLimit(unsigned int)>
c000edd8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000eddc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ede0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ede4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ede8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000edec:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000edf1:	0d 00 92 c0 00       	or     eax,0xc09200
c000edf6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000edfa:	89 d8                	mov    eax,ebx
c000edfc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ee00:	80 cc 60             	or     ah,0x60
c000ee03:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ee07:	83 c4 0c             	add    esp,0xc
c000ee0a:	89 f8                	mov    eax,edi
c000ee0c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee10:	80 cc 60             	or     ah,0x60
c000ee13:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee17:	89 c7                	mov    edi,eax
c000ee19:	55                   	push   ebp
c000ee1a:	e8 e9 fe ff ff       	call   c000ed08 <GDT::addEntry(GDTEntry)>
c000ee1f:	83 c4 0c             	add    esp,0xc
c000ee22:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee26:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee2a:	55                   	push   ebp
c000ee2b:	e8 d8 fe ff ff       	call   c000ed08 <GDT::addEntry(GDTEntry)>
c000ee30:	83 c4 0c             	add    esp,0xc
c000ee33:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee37:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee3b:	55                   	push   ebp
c000ee3c:	e8 c7 fe ff ff       	call   c000ed08 <GDT::addEntry(GDTEntry)>
c000ee41:	83 c4 0c             	add    esp,0xc
c000ee44:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee48:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ee4c:	53                   	push   ebx
c000ee4d:	51                   	push   ecx
c000ee4e:	55                   	push   ebp
c000ee4f:	e8 b4 fe ff ff       	call   c000ed08 <GDT::addEntry(GDTEntry)>
c000ee54:	83 c4 0c             	add    esp,0xc
c000ee57:	57                   	push   edi
c000ee58:	56                   	push   esi
c000ee59:	55                   	push   ebp
c000ee5a:	e8 a9 fe ff ff       	call   c000ed08 <GDT::addEntry(GDTEntry)>
c000ee5f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ee62:	e8 e5 fe ff ff       	call   c000ed4c <GDT::flush()>
c000ee67:	83 c4 4c             	add    esp,0x4c
c000ee6a:	5b                   	pop    ebx
c000ee6b:	5e                   	pop    esi
c000ee6c:	5f                   	pop    edi
c000ee6d:	5d                   	pop    ebp
c000ee6e:	c3                   	ret    

c000ee6f <idleFunction(void*)>:
c000ee6f:	53                   	push   ebx
c000ee70:	83 ec 08             	sub    esp,0x8
c000ee73:	e8 70 e0 00 00       	call   c001cee8 <unlockScheduler()>
c000ee78:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c000ee7d:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ee83:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ee8a:	74 3c                	je     c000eec8 <idleFunction(void*)+0x59>
c000ee8c:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee93:	74 33                	je     c000eec8 <idleFunction(void*)+0x59>
c000ee95:	31 db                	xor    ebx,ebx
c000ee97:	52                   	push   edx
c000ee98:	52                   	push   edx
c000ee99:	68 e1 00 00 00       	push   0xe1
c000ee9e:	50                   	push   eax
c000ee9f:	e8 de fb ff ff       	call   c000ea82 <Computer::rdmsr(unsigned int)>
c000eea4:	53                   	push   ebx
c000eea5:	83 e0 02             	and    eax,0x2
c000eea8:	50                   	push   eax
c000eea9:	68 e1 00 00 00       	push   0xe1
c000eeae:	ff 35 e8 cb 02 c0    	push   DWORD PTR ds:0xc002cbe8
c000eeb4:	e8 f5 fb ff ff       	call   c000eaae <Computer::wrmsr(unsigned int, unsigned long long)>
c000eeb9:	83 c4 20             	add    esp,0x20
c000eebc:	e8 73 13 ff ff       	call   c0000234 <doTPAUSE>
c000eec1:	e8 8a 83 01 00       	call   c0027250 <idleCommon()>
c000eec6:	eb f4                	jmp    c000eebc <idleFunction(void*)+0x4d>
c000eec8:	fb                   	sti    
c000eec9:	f4                   	hlt    
c000eeca:	e8 81 83 01 00       	call   c0027250 <idleCommon()>
c000eecf:	eb f7                	jmp    c000eec8 <idleFunction(void*)+0x59>
c000eed1:	90                   	nop

c000eed2 <IDTEntry::IDTEntry(bool)>:
c000eed2:	83 ec 04             	sub    esp,0x4
c000eed5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eed9:	88 04 24             	mov    BYTE PTR [esp],al
c000eedc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eee0:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eee6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eeea:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eeee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eef2:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eef5:	83 e2 f0             	and    edx,0xfffffff0
c000eef8:	83 ca 0e             	or     edx,0xe
c000eefb:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eefe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef02:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef05:	83 e2 ef             	and    edx,0xffffffef
c000ef08:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef0b:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000ef0f:	74 04                	je     c000ef15 <IDTEntry::IDTEntry(bool)+0x43>
c000ef11:	b2 03                	mov    dl,0x3
c000ef13:	eb 02                	jmp    c000ef17 <IDTEntry::IDTEntry(bool)+0x45>
c000ef15:	b2 00                	mov    dl,0x0
c000ef17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef1b:	83 e2 03             	and    edx,0x3
c000ef1e:	88 d1                	mov    cl,dl
c000ef20:	c1 e1 05             	shl    ecx,0x5
c000ef23:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef26:	83 e2 9f             	and    edx,0xffffff9f
c000ef29:	09 ca                	or     edx,ecx
c000ef2b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef32:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef35:	83 ca 80             	or     edx,0xffffff80
c000ef38:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef3b:	90                   	nop
c000ef3c:	83 c4 04             	add    esp,0x4
c000ef3f:	c3                   	ret    

c000ef40 <IDTEntry::setOffset(unsigned int)>:
c000ef40:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ef44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef48:	66 89 02             	mov    WORD PTR [edx],ax
c000ef4b:	c1 e8 10             	shr    eax,0x10
c000ef4e:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ef52:	c3                   	ret    
c000ef53:	90                   	nop

c000ef54 <IDT::IDT()>:
c000ef54:	90                   	nop
c000ef55:	c3                   	ret    

c000ef56 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ef56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef5a:	83 c0 30             	add    eax,0x30
c000ef5d:	c3                   	ret    

c000ef5e <IDT::addEntry(IDTEntry, int)>:
c000ef5e:	53                   	push   ebx
c000ef5f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ef67:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef6f:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ef72:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ef76:	5b                   	pop    ebx
c000ef77:	c3                   	ret    

c000ef78 <IDT::addEntry(int, void (*)(), bool)>:
c000ef78:	53                   	push   ebx
c000ef79:	83 ec 10             	sub    esp,0x10
c000ef7c:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ef81:	50                   	push   eax
c000ef82:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ef86:	53                   	push   ebx
c000ef87:	e8 46 ff ff ff       	call   c000eed2 <IDTEntry::IDTEntry(bool)>
c000ef8c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef90:	53                   	push   ebx
c000ef91:	e8 aa ff ff ff       	call   c000ef40 <IDTEntry::setOffset(unsigned int)>
c000ef96:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef9a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef9e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000efa2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000efa6:	e8 b3 ff ff ff       	call   c000ef5e <IDT::addEntry(IDTEntry, int)>
c000efab:	83 c4 30             	add    esp,0x30
c000efae:	5b                   	pop    ebx
c000efaf:	c3                   	ret    

c000efb0 <IDT::flush()>:
c000efb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efb4:	66 c7 05 f8 cb 02 c0 ff 07 	mov    WORD PTR ds:0xc002cbf8,0x7ff
c000efbd:	a3 fa cb 02 c0       	mov    ds:0xc002cbfa,eax
c000efc2:	0f 01 1d f8 cb 02 c0 	lidtd  ds:0xc002cbf8
c000efc9:	c3                   	ret    

c000efca <IDT::setup()>:
c000efca:	57                   	push   edi
c000efcb:	56                   	push   esi
c000efcc:	53                   	push   ebx
c000efcd:	83 ec 10             	sub    esp,0x10
c000efd0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000efd4:	6a 00                	push   0x0
c000efd6:	68 1d 04 00 c0       	push   0xc000041d
c000efdb:	6a 00                	push   0x0
c000efdd:	53                   	push   ebx
c000efde:	e8 95 ff ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000efe3:	6a 00                	push   0x0
c000efe5:	68 2d 04 00 c0       	push   0xc000042d
c000efea:	6a 01                	push   0x1
c000efec:	53                   	push   ebx
c000efed:	e8 86 ff ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000eff2:	83 c4 20             	add    esp,0x20
c000eff5:	6a 00                	push   0x0
c000eff7:	68 37 04 00 c0       	push   0xc0000437
c000effc:	6a 02                	push   0x2
c000effe:	53                   	push   ebx
c000efff:	e8 74 ff ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f004:	6a 00                	push   0x0
c000f006:	68 41 04 00 c0       	push   0xc0000441
c000f00b:	6a 03                	push   0x3
c000f00d:	53                   	push   ebx
c000f00e:	e8 65 ff ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f013:	83 c4 20             	add    esp,0x20
c000f016:	6a 00                	push   0x0
c000f018:	68 4b 04 00 c0       	push   0xc000044b
c000f01d:	6a 04                	push   0x4
c000f01f:	53                   	push   ebx
c000f020:	e8 53 ff ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f025:	6a 00                	push   0x0
c000f027:	68 55 04 00 c0       	push   0xc0000455
c000f02c:	6a 05                	push   0x5
c000f02e:	53                   	push   ebx
c000f02f:	e8 44 ff ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f034:	83 c4 20             	add    esp,0x20
c000f037:	6a 00                	push   0x0
c000f039:	68 5f 04 00 c0       	push   0xc000045f
c000f03e:	6a 06                	push   0x6
c000f040:	53                   	push   ebx
c000f041:	e8 32 ff ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f046:	6a 00                	push   0x0
c000f048:	68 69 04 00 c0       	push   0xc0000469
c000f04d:	6a 07                	push   0x7
c000f04f:	53                   	push   ebx
c000f050:	e8 23 ff ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f055:	83 c4 20             	add    esp,0x20
c000f058:	6a 00                	push   0x0
c000f05a:	68 73 04 00 c0       	push   0xc0000473
c000f05f:	6a 08                	push   0x8
c000f061:	53                   	push   ebx
c000f062:	e8 11 ff ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f067:	6a 00                	push   0x0
c000f069:	68 7b 04 00 c0       	push   0xc000047b
c000f06e:	6a 09                	push   0x9
c000f070:	53                   	push   ebx
c000f071:	e8 02 ff ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f076:	83 c4 20             	add    esp,0x20
c000f079:	6a 00                	push   0x0
c000f07b:	68 85 04 00 c0       	push   0xc0000485
c000f080:	6a 0a                	push   0xa
c000f082:	53                   	push   ebx
c000f083:	e8 f0 fe ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f088:	6a 00                	push   0x0
c000f08a:	68 8d 04 00 c0       	push   0xc000048d
c000f08f:	6a 0b                	push   0xb
c000f091:	53                   	push   ebx
c000f092:	e8 e1 fe ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f097:	83 c4 20             	add    esp,0x20
c000f09a:	6a 00                	push   0x0
c000f09c:	68 95 04 00 c0       	push   0xc0000495
c000f0a1:	6a 0c                	push   0xc
c000f0a3:	53                   	push   ebx
c000f0a4:	e8 cf fe ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f0a9:	6a 00                	push   0x0
c000f0ab:	68 9d 04 00 c0       	push   0xc000049d
c000f0b0:	6a 0d                	push   0xd
c000f0b2:	53                   	push   ebx
c000f0b3:	e8 c0 fe ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f0b8:	83 c4 20             	add    esp,0x20
c000f0bb:	6a 00                	push   0x0
c000f0bd:	68 a5 04 00 c0       	push   0xc00004a5
c000f0c2:	6a 0e                	push   0xe
c000f0c4:	53                   	push   ebx
c000f0c5:	e8 ae fe ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f0ca:	6a 00                	push   0x0
c000f0cc:	68 ad 04 00 c0       	push   0xc00004ad
c000f0d1:	6a 0f                	push   0xf
c000f0d3:	53                   	push   ebx
c000f0d4:	e8 9f fe ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f0d9:	83 c4 20             	add    esp,0x20
c000f0dc:	6a 00                	push   0x0
c000f0de:	68 b7 04 00 c0       	push   0xc00004b7
c000f0e3:	6a 10                	push   0x10
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 8d fe ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	68 c1 04 00 c0       	push   0xc00004c1
c000f0f2:	6a 11                	push   0x11
c000f0f4:	53                   	push   ebx
c000f0f5:	e8 7e fe ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f0fa:	83 c4 20             	add    esp,0x20
c000f0fd:	6a 00                	push   0x0
c000f0ff:	68 cb 04 00 c0       	push   0xc00004cb
c000f104:	6a 12                	push   0x12
c000f106:	53                   	push   ebx
c000f107:	e8 6c fe ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f10c:	6a 01                	push   0x1
c000f10e:	68 65 05 00 c0       	push   0xc0000565
c000f113:	6a 60                	push   0x60
c000f115:	53                   	push   ebx
c000f116:	e8 5d fe ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f11b:	83 c4 20             	add    esp,0x20
c000f11e:	6a 00                	push   0x0
c000f120:	68 6c 05 00 c0       	push   0xc000056c
c000f125:	6a 20                	push   0x20
c000f127:	53                   	push   ebx
c000f128:	e8 4b fe ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f12d:	6a 00                	push   0x0
c000f12f:	68 57 05 00 c0       	push   0xc0000557
c000f134:	6a 21                	push   0x21
c000f136:	53                   	push   ebx
c000f137:	e8 3c fe ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f13c:	83 c4 20             	add    esp,0x20
c000f13f:	6a 00                	push   0x0
c000f141:	68 5e 05 00 c0       	push   0xc000055e
c000f146:	6a 22                	push   0x22
c000f148:	53                   	push   ebx
c000f149:	e8 2a fe ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f14e:	6a 00                	push   0x0
c000f150:	68 d5 04 00 c0       	push   0xc00004d5
c000f155:	6a 23                	push   0x23
c000f157:	53                   	push   ebx
c000f158:	e8 1b fe ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f15d:	83 c4 20             	add    esp,0x20
c000f160:	6a 00                	push   0x0
c000f162:	68 df 04 00 c0       	push   0xc00004df
c000f167:	6a 24                	push   0x24
c000f169:	53                   	push   ebx
c000f16a:	e8 09 fe ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f16f:	6a 00                	push   0x0
c000f171:	68 e9 04 00 c0       	push   0xc00004e9
c000f176:	6a 25                	push   0x25
c000f178:	53                   	push   ebx
c000f179:	e8 fa fd ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f17e:	83 c4 20             	add    esp,0x20
c000f181:	6a 00                	push   0x0
c000f183:	68 f3 04 00 c0       	push   0xc00004f3
c000f188:	6a 26                	push   0x26
c000f18a:	53                   	push   ebx
c000f18b:	e8 e8 fd ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f190:	6a 00                	push   0x0
c000f192:	68 fd 04 00 c0       	push   0xc00004fd
c000f197:	6a 27                	push   0x27
c000f199:	53                   	push   ebx
c000f19a:	e8 d9 fd ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f19f:	83 c4 20             	add    esp,0x20
c000f1a2:	6a 00                	push   0x0
c000f1a4:	68 07 05 00 c0       	push   0xc0000507
c000f1a9:	6a 28                	push   0x28
c000f1ab:	53                   	push   ebx
c000f1ac:	e8 c7 fd ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f1b1:	6a 00                	push   0x0
c000f1b3:	68 11 05 00 c0       	push   0xc0000511
c000f1b8:	6a 29                	push   0x29
c000f1ba:	53                   	push   ebx
c000f1bb:	e8 b8 fd ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f1c0:	83 c4 20             	add    esp,0x20
c000f1c3:	6a 00                	push   0x0
c000f1c5:	68 1b 05 00 c0       	push   0xc000051b
c000f1ca:	6a 2a                	push   0x2a
c000f1cc:	53                   	push   ebx
c000f1cd:	e8 a6 fd ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f1d2:	6a 00                	push   0x0
c000f1d4:	68 25 05 00 c0       	push   0xc0000525
c000f1d9:	6a 2b                	push   0x2b
c000f1db:	53                   	push   ebx
c000f1dc:	e8 97 fd ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f1e1:	83 c4 20             	add    esp,0x20
c000f1e4:	6a 00                	push   0x0
c000f1e6:	68 2f 05 00 c0       	push   0xc000052f
c000f1eb:	6a 2c                	push   0x2c
c000f1ed:	53                   	push   ebx
c000f1ee:	e8 85 fd ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f1f3:	6a 00                	push   0x0
c000f1f5:	68 39 05 00 c0       	push   0xc0000539
c000f1fa:	6a 2d                	push   0x2d
c000f1fc:	53                   	push   ebx
c000f1fd:	e8 76 fd ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f202:	83 c4 20             	add    esp,0x20
c000f205:	6a 00                	push   0x0
c000f207:	68 43 05 00 c0       	push   0xc0000543
c000f20c:	6a 2e                	push   0x2e
c000f20e:	53                   	push   ebx
c000f20f:	e8 64 fd ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f214:	6a 00                	push   0x0
c000f216:	68 4d 05 00 c0       	push   0xc000054d
c000f21b:	6a 2f                	push   0x2f
c000f21d:	53                   	push   ebx
c000f21e:	e8 55 fd ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f223:	83 c4 20             	add    esp,0x20
c000f226:	6a 00                	push   0x0
c000f228:	68 a2 05 00 c0       	push   0xc00005a2
c000f22d:	6a 30                	push   0x30
c000f22f:	53                   	push   ebx
c000f230:	e8 43 fd ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f235:	6a 00                	push   0x0
c000f237:	68 ac 05 00 c0       	push   0xc00005ac
c000f23c:	6a 31                	push   0x31
c000f23e:	53                   	push   ebx
c000f23f:	e8 34 fd ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f244:	83 c4 20             	add    esp,0x20
c000f247:	6a 00                	push   0x0
c000f249:	68 b6 05 00 c0       	push   0xc00005b6
c000f24e:	6a 32                	push   0x32
c000f250:	53                   	push   ebx
c000f251:	e8 22 fd ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f256:	6a 00                	push   0x0
c000f258:	68 c0 05 00 c0       	push   0xc00005c0
c000f25d:	6a 33                	push   0x33
c000f25f:	53                   	push   ebx
c000f260:	e8 13 fd ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f265:	83 c4 20             	add    esp,0x20
c000f268:	6a 00                	push   0x0
c000f26a:	68 ca 05 00 c0       	push   0xc00005ca
c000f26f:	6a 34                	push   0x34
c000f271:	53                   	push   ebx
c000f272:	e8 01 fd ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f277:	6a 00                	push   0x0
c000f279:	68 d4 05 00 c0       	push   0xc00005d4
c000f27e:	6a 35                	push   0x35
c000f280:	53                   	push   ebx
c000f281:	e8 f2 fc ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f286:	83 c4 20             	add    esp,0x20
c000f289:	6a 00                	push   0x0
c000f28b:	68 de 05 00 c0       	push   0xc00005de
c000f290:	6a 36                	push   0x36
c000f292:	53                   	push   ebx
c000f293:	e8 e0 fc ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f298:	6a 00                	push   0x0
c000f29a:	68 e8 05 00 c0       	push   0xc00005e8
c000f29f:	6a 37                	push   0x37
c000f2a1:	53                   	push   ebx
c000f2a2:	e8 d1 fc ff ff       	call   c000ef78 <IDT::addEntry(int, void (*)(), bool)>
c000f2a7:	83 c4 20             	add    esp,0x20
c000f2aa:	e8 70 26 00 00       	call   c001191f <Virt::getAKernelVAS()>
c000f2af:	52                   	push   edx
c000f2b0:	6a 03                	push   0x3
c000f2b2:	6a 02                	push   0x2
c000f2b4:	50                   	push   eax
c000f2b5:	e8 a0 2c 00 00       	call   c0011f5a <VAS::allocatePages(int, int)>
c000f2ba:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f2c1:	89 c6                	mov    esi,eax
c000f2c3:	e8 12 02 00 00       	call   c000f4da <malloc>
c000f2c8:	81 c6 00 20 00 00    	add    esi,0x2000
c000f2ce:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2d1:	89 c7                	mov    edi,eax
c000f2d3:	e8 e8 1d 00 00       	call   c00110c0 <TSS::TSS()>
c000f2d8:	83 c4 0c             	add    esp,0xc
c000f2db:	68 73 04 00 c0       	push   0xc0000473
c000f2e0:	56                   	push   esi
c000f2e1:	57                   	push   edi
c000f2e2:	e8 19 1e 00 00       	call   c0011100 <TSS::setup(unsigned long, unsigned long)>
c000f2e7:	59                   	pop    ecx
c000f2e8:	89 c6                	mov    esi,eax
c000f2ea:	5f                   	pop    edi
c000f2eb:	6a 00                	push   0x0
c000f2ed:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f2f1:	50                   	push   eax
c000f2f2:	e8 db fb ff ff       	call   c000eed2 <IDTEntry::IDTEntry(bool)>
c000f2f7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f2fb:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f300:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f307:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f30d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f311:	80 ce 05             	or     dh,0x5
c000f314:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f317:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f31b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f31f:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f322:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f325:	e8 86 fc ff ff       	call   c000efb0 <IDT::flush()>
c000f32a:	83 c4 20             	add    esp,0x20
c000f32d:	5b                   	pop    ebx
c000f32e:	5e                   	pop    esi
c000f32f:	5f                   	pop    edi
c000f330:	c3                   	ret    

c000f331 <sbrk>:
c000f331:	55                   	push   ebp
c000f332:	57                   	push   edi
c000f333:	56                   	push   esi
c000f334:	53                   	push   ebx
c000f335:	83 ec 1c             	sub    esp,0x1c
c000f338:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f33c:	85 c0                	test   eax,eax
c000f33e:	74 3e                	je     c000f37e <sbrk+0x4d>
c000f340:	78 43                	js     c000f385 <sbrk+0x54>
c000f342:	8b 15 e8 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cbe8
c000f348:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f34e:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f354:	83 e2 01             	and    edx,0x1
c000f357:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f35b:	8b 0d 08 bb 02 c0    	mov    ecx,DWORD PTR ds:0xc002bb08
c000f361:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f365:	05 ff 0f 00 00       	add    eax,0xfff
c000f36a:	89 c2                	mov    edx,eax
c000f36c:	78 2f                	js     c000f39d <sbrk+0x6c>
c000f36e:	c1 fa 0c             	sar    edx,0xc
c000f371:	89 d7                	mov    edi,edx
c000f373:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f377:	be 00 00 00 00       	mov    esi,0x0
c000f37c:	eb 36                	jmp    c000f3b4 <sbrk+0x83>
c000f37e:	a1 08 bb 02 c0       	mov    eax,ds:0xc002bb08
c000f383:	eb 74                	jmp    c000f3f9 <sbrk+0xc8>
c000f385:	83 ec 08             	sub    esp,0x8
c000f388:	50                   	push   eax
c000f389:	68 e0 8c 02 c0       	push   0xc0028ce0
c000f38e:	e8 ec 33 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c000f393:	83 c4 10             	add    esp,0x10
c000f396:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f39b:	eb 5c                	jmp    c000f3f9 <sbrk+0xc8>
c000f39d:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f3a3:	eb c9                	jmp    c000f36e <sbrk+0x3d>
c000f3a5:	81 05 08 bb 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002bb08,0x1000
c000f3af:	46                   	inc    esi
c000f3b0:	39 f7                	cmp    edi,esi
c000f3b2:	74 34                	je     c000f3e8 <sbrk+0xb7>
c000f3b4:	e8 66 25 00 00       	call   c001191f <Virt::getAKernelVAS()>
c000f3b9:	89 c3                	mov    ebx,eax
c000f3bb:	8b 2d 08 bb 02 c0    	mov    ebp,DWORD PTR ds:0xc002bb08
c000f3c1:	e8 87 07 00 00       	call   c000fb4d <Phys::allocatePage()>
c000f3c6:	68 01 04 00 00       	push   0x401
c000f3cb:	55                   	push   ebp
c000f3cc:	50                   	push   eax
c000f3cd:	53                   	push   ebx
c000f3ce:	e8 87 2a 00 00       	call   c0011e5a <VAS::mapPage(unsigned long, unsigned long, int)>
c000f3d3:	83 c4 10             	add    esp,0x10
c000f3d6:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3db:	74 c8                	je     c000f3a5 <sbrk+0x74>
c000f3dd:	8b 1d 08 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb08
c000f3e3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f3e6:	eb bd                	jmp    c000f3a5 <sbrk+0x74>
c000f3e8:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3ed:	75 12                	jne    c000f401 <sbrk+0xd0>
c000f3ef:	0f 20 d8             	mov    eax,cr3
c000f3f2:	0f 22 d8             	mov    cr3,eax
c000f3f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3f9:	83 c4 1c             	add    esp,0x1c
c000f3fc:	5b                   	pop    ebx
c000f3fd:	5e                   	pop    esi
c000f3fe:	5f                   	pop    edi
c000f3ff:	5d                   	pop    ebp
c000f400:	c3                   	ret    
c000f401:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f405:	89 cb                	mov    ebx,ecx
c000f407:	c1 eb 0a             	shr    ebx,0xa
c000f40a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f410:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f416:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f41a:	c1 e0 0c             	shl    eax,0xc
c000f41d:	01 c8                	add    eax,ecx
c000f41f:	c1 e8 0a             	shr    eax,0xa
c000f422:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f427:	2d 00 00 40 00       	sub    eax,0x400000
c000f42c:	39 c3                	cmp    ebx,eax
c000f42e:	77 c5                	ja     c000f3f5 <sbrk+0xc4>
c000f430:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f433:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f439:	39 d8                	cmp    eax,ebx
c000f43b:	73 f3                	jae    c000f430 <sbrk+0xff>
c000f43d:	eb b6                	jmp    c000f3f5 <sbrk+0xc4>

c000f43f <mmap>:
c000f43f:	83 ec 18             	sub    esp,0x18
c000f442:	68 10 8d 02 c0       	push   0xc0028d10
c000f447:	e8 85 a4 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c000f44c:	b8 00 00 00 00       	mov    eax,0x0
c000f451:	83 c4 1c             	add    esp,0x1c
c000f454:	c3                   	ret    

c000f455 <munmap>:
c000f455:	83 ec 18             	sub    esp,0x18
c000f458:	68 15 8d 02 c0       	push   0xc0028d15
c000f45d:	e8 6f a4 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c000f462:	b8 00 00 00 00       	mov    eax,0x0
c000f467:	83 c4 1c             	add    esp,0x1c
c000f46a:	c3                   	ret    

c000f46b <liballoc_lock()>:
c000f46b:	83 ec 0c             	sub    esp,0xc
c000f46e:	e8 73 da 00 00       	call   c001cee6 <lockScheduler()>
c000f473:	b8 00 00 00 00       	mov    eax,0x0
c000f478:	83 c4 0c             	add    esp,0xc
c000f47b:	c3                   	ret    

c000f47c <liballoc_unlock()>:
c000f47c:	83 ec 0c             	sub    esp,0xc
c000f47f:	e8 64 da 00 00       	call   c001cee8 <unlockScheduler()>
c000f484:	b8 00 00 00 00       	mov    eax,0x0
c000f489:	83 c4 0c             	add    esp,0xc
c000f48c:	c3                   	ret    

c000f48d <liballoc_alloc(int)>:
c000f48d:	83 ec 0c             	sub    esp,0xc
c000f490:	e8 8a 24 00 00       	call   c001191f <Virt::getAKernelVAS()>
c000f495:	83 ec 04             	sub    esp,0x4
c000f498:	6a 01                	push   0x1
c000f49a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f49e:	50                   	push   eax
c000f49f:	e8 b6 2a 00 00       	call   c0011f5a <VAS::allocatePages(int, int)>
c000f4a4:	83 c4 1c             	add    esp,0x1c
c000f4a7:	c3                   	ret    

c000f4a8 <liballoc_free(void*, int)>:
c000f4a8:	83 ec 0c             	sub    esp,0xc
c000f4ab:	e8 6f 24 00 00       	call   c001191f <Virt::getAKernelVAS()>
c000f4b0:	83 ec 08             	sub    esp,0x8
c000f4b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f4b7:	50                   	push   eax
c000f4b8:	e8 59 27 00 00       	call   c0011c16 <VAS::freeAllocatedPages(unsigned long)>
c000f4bd:	b8 00 00 00 00       	mov    eax,0x0
c000f4c2:	83 c4 1c             	add    esp,0x1c
c000f4c5:	c3                   	ret    

c000f4c6 <realloc>:
c000f4c6:	83 ec 14             	sub    esp,0x14
c000f4c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4d1:	e8 2e 1f ff ff       	call   c0001404 <dlrealloc>
c000f4d6:	83 c4 1c             	add    esp,0x1c
c000f4d9:	c3                   	ret    

c000f4da <malloc>:
c000f4da:	83 ec 18             	sub    esp,0x18
c000f4dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4e1:	e8 e1 19 ff ff       	call   c0000ec7 <dlmalloc>
c000f4e6:	83 c4 1c             	add    esp,0x1c
c000f4e9:	c3                   	ret    

c000f4ea <free>:
c000f4ea:	83 ec 18             	sub    esp,0x18
c000f4ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4f1:	e8 76 16 ff ff       	call   c0000b6c <dlfree>
c000f4f6:	83 c4 1c             	add    esp,0x1c
c000f4f9:	c3                   	ret    

c000f4fa <rfree>:
c000f4fa:	83 ec 18             	sub    esp,0x18
c000f4fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f501:	e8 66 16 ff ff       	call   c0000b6c <dlfree>
c000f506:	83 c4 1c             	add    esp,0x1c
c000f509:	c3                   	ret    

c000f50a <calloc>:
c000f50a:	56                   	push   esi
c000f50b:	53                   	push   ebx
c000f50c:	83 ec 10             	sub    esp,0x10
c000f50f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f513:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f518:	53                   	push   ebx
c000f519:	e8 bc ff ff ff       	call   c000f4da <malloc>
c000f51e:	89 c6                	mov    esi,eax
c000f520:	83 c4 0c             	add    esp,0xc
c000f523:	53                   	push   ebx
c000f524:	6a 00                	push   0x0
c000f526:	50                   	push   eax
c000f527:	e8 5f 11 ff ff       	call   c000068b <memset>
c000f52c:	89 f0                	mov    eax,esi
c000f52e:	83 c4 14             	add    esp,0x14
c000f531:	5b                   	pop    ebx
c000f532:	5e                   	pop    esi
c000f533:	c3                   	ret    

c000f534 <hwTextMode_loadInData(VgaText*)>:
c000f534:	55                   	push   ebp
c000f535:	a1 20 bb 02 c0       	mov    eax,ds:0xc002bb20
c000f53a:	57                   	push   edi
c000f53b:	56                   	push   esi
c000f53c:	53                   	push   ebx
c000f53d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f541:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f547:	85 d2                	test   edx,edx
c000f549:	7e 2f                	jle    c000f57a <hwTextMode_loadInData(VgaText*)+0x46>
c000f54b:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f551:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f554:	31 f6                	xor    esi,esi
c000f556:	29 fd                	sub    ebp,edi
c000f558:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f55b:	31 c0                	xor    eax,eax
c000f55d:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f561:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f565:	40                   	inc    eax
c000f566:	83 f8 50             	cmp    eax,0x50
c000f569:	75 f2                	jne    c000f55d <hwTextMode_loadInData(VgaText*)+0x29>
c000f56b:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f571:	46                   	inc    esi
c000f572:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f578:	7f de                	jg     c000f558 <hwTextMode_loadInData(VgaText*)+0x24>
c000f57a:	5b                   	pop    ebx
c000f57b:	5e                   	pop    esi
c000f57c:	5f                   	pop    edi
c000f57d:	5d                   	pop    ebp
c000f57e:	c3                   	ret    

c000f57f <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f57f:	55                   	push   ebp
c000f580:	80 3d 80 cc 02 c0 00 	cmp    BYTE PTR ds:0xc002cc80,0x0
c000f587:	57                   	push   edi
c000f588:	56                   	push   esi
c000f589:	53                   	push   ebx
c000f58a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f58e:	75 50                	jne    c000f5e0 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f590:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f596:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f59c:	8b 15 20 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb20
c000f5a2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f5a6:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f5ac:	eb 0e                	jmp    c000f5bc <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f5ae:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f5b4:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f5ba:	89 da                	mov    edx,ebx
c000f5bc:	83 e5 0f             	and    ebp,0xf
c000f5bf:	c1 e0 04             	shl    eax,0x4
c000f5c2:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f5c5:	0f b6 c0             	movzx  eax,al
c000f5c8:	41                   	inc    ecx
c000f5c9:	09 e8                	or     eax,ebp
c000f5cb:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f5cf:	c1 e0 08             	shl    eax,0x8
c000f5d2:	09 e8                	or     eax,ebp
c000f5d4:	39 fb                	cmp    ebx,edi
c000f5d6:	66 89 02             	mov    WORD PTR [edx],ax
c000f5d9:	75 d3                	jne    c000f5ae <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f5db:	5b                   	pop    ebx
c000f5dc:	5e                   	pop    esi
c000f5dd:	5f                   	pop    edi
c000f5de:	5d                   	pop    ebp
c000f5df:	c3                   	ret    
c000f5e0:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f5ea:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f5f4:	31 c0                	xor    eax,eax
c000f5f6:	bd 02 00 00 00       	mov    ebp,0x2
c000f5fb:	eb 9f                	jmp    c000f59c <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f5fd <hwTextMode_showCursor(VgaText*, bool)>:
c000f5fd:	56                   	push   esi
c000f5fe:	80 3d 80 cc 02 c0 00 	cmp    BYTE PTR ds:0xc002cc80,0x0
c000f605:	53                   	push   ebx
c000f606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f60a:	75 39                	jne    c000f645 <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f60c:	84 c0                	test   al,al
c000f60e:	74 38                	je     c000f648 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f610:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f615:	b0 0a                	mov    al,0xa
c000f617:	89 da                	mov    edx,ebx
c000f619:	ee                   	out    dx,al
c000f61a:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f61f:	89 ca                	mov    edx,ecx
c000f621:	ec                   	in     al,dx
c000f622:	b2 0f                	mov    dl,0xf
c000f624:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f628:	83 e0 c0             	and    eax,0xffffffc0
c000f62b:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f631:	09 d0                	or     eax,edx
c000f633:	89 ca                	mov    edx,ecx
c000f635:	ee                   	out    dx,al
c000f636:	b0 0b                	mov    al,0xb
c000f638:	89 da                	mov    edx,ebx
c000f63a:	ee                   	out    dx,al
c000f63b:	89 ca                	mov    edx,ecx
c000f63d:	ec                   	in     al,dx
c000f63e:	83 e0 e0             	and    eax,0xffffffe0
c000f641:	83 c8 0f             	or     eax,0xf
c000f644:	ee                   	out    dx,al
c000f645:	5b                   	pop    ebx
c000f646:	5e                   	pop    esi
c000f647:	c3                   	ret    
c000f648:	b0 0a                	mov    al,0xa
c000f64a:	ba d4 03 00 00       	mov    edx,0x3d4
c000f64f:	ee                   	out    dx,al
c000f650:	b0 20                	mov    al,0x20
c000f652:	ba d5 03 00 00       	mov    edx,0x3d5
c000f657:	ee                   	out    dx,al
c000f658:	5b                   	pop    ebx
c000f659:	5e                   	pop    esi
c000f65a:	c3                   	ret    

c000f65b <hwTextMode_update(VgaText*)>:
c000f65b:	c3                   	ret    

c000f65c <hwTextMode_updateCursor(VgaText*)>:
c000f65c:	56                   	push   esi
c000f65d:	80 3d 80 cc 02 c0 00 	cmp    BYTE PTR ds:0xc002cc80,0x0
c000f664:	53                   	push   ebx
c000f665:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f669:	75 3f                	jne    c000f6aa <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f66b:	be d4 03 00 00       	mov    esi,0x3d4
c000f670:	b9 19 00 00 00       	mov    ecx,0x19
c000f675:	89 f2                	mov    edx,esi
c000f677:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f67d:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f683:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f686:	c1 e1 04             	shl    ecx,0x4
c000f689:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f68f:	b0 0f                	mov    al,0xf
c000f691:	ee                   	out    dx,al
c000f692:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f697:	88 c8                	mov    al,cl
c000f699:	89 da                	mov    edx,ebx
c000f69b:	ee                   	out    dx,al
c000f69c:	b0 0e                	mov    al,0xe
c000f69e:	89 f2                	mov    edx,esi
c000f6a0:	ee                   	out    dx,al
c000f6a1:	89 c8                	mov    eax,ecx
c000f6a3:	89 da                	mov    edx,ebx
c000f6a5:	66 c1 e8 08          	shr    ax,0x8
c000f6a9:	ee                   	out    dx,al
c000f6aa:	5b                   	pop    ebx
c000f6ab:	5e                   	pop    esi
c000f6ac:	c3                   	ret    

c000f6ad <hwTextMode_disableBlink(VgaText*, bool)>:
c000f6ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f6b1:	80 3d 80 cc 02 c0 00 	cmp    BYTE PTR ds:0xc002cc80,0x0
c000f6b8:	75 38                	jne    c000f6f2 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000f6ba:	ba da 03 00 00       	mov    edx,0x3da
c000f6bf:	84 c0                	test   al,al
c000f6c1:	75 18                	jne    c000f6db <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000f6c3:	ec                   	in     al,dx
c000f6c4:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f6c9:	b0 30                	mov    al,0x30
c000f6cb:	89 ca                	mov    edx,ecx
c000f6cd:	ee                   	out    dx,al
c000f6ce:	ba c1 03 00 00       	mov    edx,0x3c1
c000f6d3:	ec                   	in     al,dx
c000f6d4:	83 c8 08             	or     eax,0x8
c000f6d7:	89 ca                	mov    edx,ecx
c000f6d9:	ee                   	out    dx,al
c000f6da:	c3                   	ret    
c000f6db:	ec                   	in     al,dx
c000f6dc:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f6e1:	b0 30                	mov    al,0x30
c000f6e3:	89 ca                	mov    edx,ecx
c000f6e5:	ee                   	out    dx,al
c000f6e6:	ba c1 03 00 00       	mov    edx,0x3c1
c000f6eb:	ec                   	in     al,dx
c000f6ec:	83 e0 f7             	and    eax,0xfffffff7
c000f6ef:	89 ca                	mov    edx,ecx
c000f6f1:	ee                   	out    dx,al
c000f6f2:	c3                   	ret    

c000f6f3 <hwTextMode_scrollScreen(VgaText*)>:
c000f6f3:	55                   	push   ebp
c000f6f4:	57                   	push   edi
c000f6f5:	56                   	push   esi
c000f6f6:	53                   	push   ebx
c000f6f7:	83 ec 1c             	sub    esp,0x1c
c000f6fa:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f6fe:	80 3d 80 cc 02 c0 00 	cmp    BYTE PTR ds:0xc002cc80,0x0
c000f705:	74 14                	je     c000f71b <hwTextMode_scrollScreen(VgaText*)+0x28>
c000f707:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000f711:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000f71b:	a1 20 bb 02 c0       	mov    eax,ds:0xc002bb20
c000f720:	bd 02 00 00 00       	mov    ebp,0x2
c000f725:	05 a0 00 00 00       	add    eax,0xa0
c000f72a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f72e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f732:	31 c0                	xor    eax,eax
c000f734:	eb 0b                	jmp    c000f741 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000f736:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f73c:	74 57                	je     c000f795 <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000f73e:	43                   	inc    ebx
c000f73f:	89 f0                	mov    eax,esi
c000f741:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f747:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f74d:	88 13                	mov    BYTE PTR [ebx],dl
c000f74f:	8d 70 01             	lea    esi,[eax+0x1]
c000f752:	83 fd 18             	cmp    ebp,0x18
c000f755:	75 df                	jne    c000f736 <hwTextMode_scrollScreen(VgaText*)+0x43>
c000f757:	a8 01                	test   al,0x1
c000f759:	75 13                	jne    c000f76e <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f75b:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f75e:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f764:	75 d8                	jne    c000f73e <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000f766:	83 c4 1c             	add    esp,0x1c
c000f769:	5b                   	pop    ebx
c000f76a:	5e                   	pop    esi
c000f76b:	5f                   	pop    edi
c000f76c:	5d                   	pop    ebp
c000f76d:	c3                   	ret    
c000f76e:	83 ec 08             	sub    esp,0x8
c000f771:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000f778:	50                   	push   eax
c000f779:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000f77d:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000f784:	50                   	push   eax
c000f785:	e8 08 0c 00 00       	call   c0010392 <VgaText::combineColours(unsigned char, unsigned char)>
c000f78a:	83 c4 10             	add    esp,0x10
c000f78d:	88 07                	mov    BYTE PTR [edi],al
c000f78f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f793:	eb c9                	jmp    c000f75e <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000f795:	45                   	inc    ebp
c000f796:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f79e:	eb 8e                	jmp    c000f72e <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000f7a0 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f7a0:	57                   	push   edi
c000f7a1:	80 3d 80 cc 02 c0 00 	cmp    BYTE PTR ds:0xc002cc80,0x0
c000f7a8:	56                   	push   esi
c000f7a9:	53                   	push   ebx
c000f7aa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f7ae:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000f7b2:	75 65                	jne    c000f819 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000f7b4:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000f7b9:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000f7be:	83 ec 08             	sub    esp,0x8
c000f7c1:	52                   	push   edx
c000f7c2:	50                   	push   eax
c000f7c3:	e8 ca 0b 00 00       	call   c0010392 <VgaText::combineColours(unsigned char, unsigned char)>
c000f7c8:	5a                   	pop    edx
c000f7c9:	0f b6 c0             	movzx  eax,al
c000f7cc:	59                   	pop    ecx
c000f7cd:	50                   	push   eax
c000f7ce:	0f be c3             	movsx  eax,bl
c000f7d1:	50                   	push   eax
c000f7d2:	e8 61 0c 00 00       	call   c0010438 <VgaText::combineCharAndColour(char, unsigned char)>
c000f7d7:	83 c4 10             	add    esp,0x10
c000f7da:	8b 35 20 bb 02 c0    	mov    esi,DWORD PTR ds:0xc002bb20
c000f7e0:	80 3d 80 cc 02 c0 00 	cmp    BYTE PTR ds:0xc002cc80,0x0
c000f7e7:	74 07                	je     c000f7f0 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000f7e9:	66 0f be c3          	movsx  ax,bl
c000f7ed:	80 cc 02             	or     ah,0x2
c000f7f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f7f4:	ba 19 00 00 00       	mov    edx,0x19
c000f7f9:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f7ff:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000f802:	8d 14 92             	lea    edx,[edx+edx*4]
c000f805:	c1 e1 04             	shl    ecx,0x4
c000f808:	c1 e2 04             	shl    edx,0x4
c000f80b:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000f80f:	01 ca                	add    edx,ecx
c000f811:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000f815:	5b                   	pop    ebx
c000f816:	5e                   	pop    esi
c000f817:	5f                   	pop    edi
c000f818:	c3                   	ret    
c000f819:	b8 02 00 00 00       	mov    eax,0x2
c000f81e:	31 d2                	xor    edx,edx
c000f820:	eb 9c                	jmp    c000f7be <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000f822 <setupTextMode()>:
c000f822:	a1 10 04 00 00       	mov    eax,ds:0x410
c000f827:	83 e0 30             	and    eax,0x30
c000f82a:	66 83 f8 30          	cmp    ax,0x30
c000f82e:	75 11                	jne    c000f841 <setupTextMode()+0x1f>
c000f830:	81 2d 20 bb 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002bb20,0x8000
c000f83a:	c6 05 80 cc 02 c0 01 	mov    BYTE PTR ds:0xc002cc80,0x1
c000f841:	c7 05 b8 cc 02 c0 ad f6 00 c0 	mov    DWORD PTR ds:0xc002ccb8,0xc000f6ad
c000f84b:	c7 05 a4 cc 02 c0 34 f5 00 c0 	mov    DWORD PTR ds:0xc002cca4,0xc000f534
c000f855:	c7 05 a0 cc 02 c0 7f f5 00 c0 	mov    DWORD PTR ds:0xc002cca0,0xc000f57f
c000f85f:	c7 05 ac cc 02 c0 f3 f6 00 c0 	mov    DWORD PTR ds:0xc002ccac,0xc000f6f3
c000f869:	c7 05 b4 cc 02 c0 fd f5 00 c0 	mov    DWORD PTR ds:0xc002ccb4,0xc000f5fd
c000f873:	c7 05 a8 cc 02 c0 5b f6 00 c0 	mov    DWORD PTR ds:0xc002cca8,0xc000f65b
c000f87d:	c7 05 b0 cc 02 c0 5c f6 00 c0 	mov    DWORD PTR ds:0xc002ccb0,0xc000f65c
c000f887:	c7 05 bc cc 02 c0 a0 f7 00 c0 	mov    DWORD PTR ds:0xc002ccbc,0xc000f7a0
c000f891:	c3                   	ret    

c000f892 <kernel_main>:
c000f892:	57                   	push   edi
c000f893:	bf f9 03 00 00       	mov    edi,0x3f9
c000f898:	56                   	push   esi
c000f899:	31 f6                	xor    esi,esi
c000f89b:	53                   	push   ebx
c000f89c:	83 ec 10             	sub    esp,0x10
c000f89f:	e8 48 09 00 00       	call   c00101ec <installVgaTextImplementation()>
c000f8a4:	e8 79 ff ff ff       	call   c000f822 <setupTextMode()>
c000f8a9:	89 f0                	mov    eax,esi
c000f8ab:	89 fa                	mov    edx,edi
c000f8ad:	ee                   	out    dx,al
c000f8ae:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f8b3:	b0 80                	mov    al,0x80
c000f8b5:	89 da                	mov    edx,ebx
c000f8b7:	ee                   	out    dx,al
c000f8b8:	b1 03                	mov    cl,0x3
c000f8ba:	ba f8 03 00 00       	mov    edx,0x3f8
c000f8bf:	88 c8                	mov    al,cl
c000f8c1:	ee                   	out    dx,al
c000f8c2:	89 f0                	mov    eax,esi
c000f8c4:	89 fa                	mov    edx,edi
c000f8c6:	ee                   	out    dx,al
c000f8c7:	88 c8                	mov    al,cl
c000f8c9:	89 da                	mov    edx,ebx
c000f8cb:	ee                   	out    dx,al
c000f8cc:	b0 c7                	mov    al,0xc7
c000f8ce:	ba fa 03 00 00       	mov    edx,0x3fa
c000f8d3:	ee                   	out    dx,al
c000f8d4:	b0 0b                	mov    al,0xb
c000f8d6:	ba fc 03 00 00       	mov    edx,0x3fc
c000f8db:	ee                   	out    dx,al
c000f8dc:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f8e1:	83 ec 0c             	sub    esp,0xc
c000f8e4:	05 ff 0f 00 00       	add    eax,0xfff
c000f8e9:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f8ee:	50                   	push   eax
c000f8ef:	e8 b3 03 00 00       	call   c000fca7 <Phys::physicalMemorySetup(unsigned int)>
c000f8f4:	e8 a7 1f 00 00       	call   c00118a0 <Virt::virtualMemorySetup()>
c000f8f9:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000f8ff:	83 c4 10             	add    esp,0x10
c000f902:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000f908:	75 0e                	jne    c000f918 <kernel_main+0x86>
c000f90a:	89 d8                	mov    eax,ebx
c000f90c:	25 48 03 00 00       	and    eax,0x348
c000f911:	3d 00 03 00 00       	cmp    eax,0x300
c000f916:	74 10                	je     c000f928 <kernel_main+0x96>
c000f918:	83 ec 0c             	sub    esp,0xc
c000f91b:	68 3c a4 02 c0       	push   0xc002a43c
c000f920:	e8 ac 9f 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c000f925:	83 c4 10             	add    esp,0x10
c000f928:	83 ec 0c             	sub    esp,0xc
c000f92b:	89 1d 00 cc 02 c0    	mov    DWORD PTR ds:0xc002cc00,ebx
c000f931:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f935:	53                   	push   ebx
c000f936:	e8 19 21 00 00       	call   c0011a54 <VAS::VAS()>
c000f93b:	89 1d 64 cd 02 c0    	mov    DWORD PTR ds:0xc002cd64,ebx
c000f941:	e8 da 06 ff ff       	call   c0000020 <callGlobalConstructors>
c000f946:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f94d:	e8 88 fb ff ff       	call   c000f4da <malloc>
c000f952:	89 04 24             	mov    DWORD PTR [esp],eax
c000f955:	89 c6                	mov    esi,eax
c000f957:	e8 78 ea ff ff       	call   c000e3d4 <Computer::Computer()>
c000f95c:	6a 00                	push   0x0
c000f95e:	89 35 e8 cb 02 c0    	mov    DWORD PTR ds:0xc002cbe8,esi
c000f964:	6a 00                	push   0x0
c000f966:	6a 00                	push   0x0
c000f968:	56                   	push   esi
c000f969:	e8 b6 f1 ff ff       	call   c000eb24 <Computer::open(int, int, void*)>
c000f96e:	83 c4 14             	add    esp,0x14
c000f971:	53                   	push   ebx
c000f972:	e8 77 23 00 00       	call   c0011cee <VAS::~VAS()>
c000f977:	c7 04 24 1c 8d 02 c0 	mov    DWORD PTR [esp],0xc0028d1c
c000f97e:	e8 4e 9f 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c000f983:	83 c4 20             	add    esp,0x20
c000f986:	5b                   	pop    ebx
c000f987:	5e                   	pop    esi
c000f988:	5f                   	pop    edi
c000f989:	c3                   	ret    

c000f98a <Phys::allocateDMA(unsigned long)>:
c000f98a:	55                   	push   ebp
c000f98b:	31 d2                	xor    edx,edx
c000f98d:	57                   	push   edi
c000f98e:	31 ed                	xor    ebp,ebp
c000f990:	56                   	push   esi
c000f991:	31 c9                	xor    ecx,ecx
c000f993:	53                   	push   ebx
c000f994:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f998:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f99e:	31 c0                	xor    eax,eax
c000f9a0:	c1 ee 0c             	shr    esi,0xc
c000f9a3:	eb 17                	jmp    c000f9bc <Phys::allocateDMA(unsigned long)+0x32>
c000f9a5:	85 c9                	test   ecx,ecx
c000f9a7:	75 04                	jne    c000f9ad <Phys::allocateDMA(unsigned long)+0x23>
c000f9a9:	89 d5                	mov    ebp,edx
c000f9ab:	89 d0                	mov    eax,edx
c000f9ad:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f9b0:	39 de                	cmp    esi,ebx
c000f9b2:	74 20                	je     c000f9d4 <Phys::allocateDMA(unsigned long)+0x4a>
c000f9b4:	42                   	inc    edx
c000f9b5:	89 d9                	mov    ecx,ebx
c000f9b7:	83 fa 2f             	cmp    edx,0x2f
c000f9ba:	7f 11                	jg     c000f9cd <Phys::allocateDMA(unsigned long)+0x43>
c000f9bc:	80 ba 40 cc 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd33c0],0x0
c000f9c3:	74 e0                	je     c000f9a5 <Phys::allocateDMA(unsigned long)+0x1b>
c000f9c5:	31 c9                	xor    ecx,ecx
c000f9c7:	42                   	inc    edx
c000f9c8:	83 fa 2f             	cmp    edx,0x2f
c000f9cb:	7e ef                	jle    c000f9bc <Phys::allocateDMA(unsigned long)+0x32>
c000f9cd:	5b                   	pop    ebx
c000f9ce:	31 c0                	xor    eax,eax
c000f9d0:	5e                   	pop    esi
c000f9d1:	5f                   	pop    edi
c000f9d2:	5d                   	pop    ebp
c000f9d3:	c3                   	ret    
c000f9d4:	8d 14 30             	lea    edx,[eax+esi*1]
c000f9d7:	89 d7                	mov    edi,edx
c000f9d9:	4f                   	dec    edi
c000f9da:	79 03                	jns    c000f9df <Phys::allocateDMA(unsigned long)+0x55>
c000f9dc:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f9df:	c1 ff 04             	sar    edi,0x4
c000f9e2:	89 c2                	mov    edx,eax
c000f9e4:	c1 fa 04             	sar    edx,0x4
c000f9e7:	39 fa                	cmp    edx,edi
c000f9e9:	75 2f                	jne    c000fa1a <Phys::allocateDMA(unsigned long)+0x90>
c000f9eb:	85 db                	test   ebx,ebx
c000f9ed:	74 1a                	je     c000fa09 <Phys::allocateDMA(unsigned long)+0x7f>
c000f9ef:	be 40 cc 02 c0       	mov    esi,0xc002cc40
c000f9f4:	8d 90 40 cc 02 c0    	lea    edx,[eax-0x3ffd33c0]
c000f9fa:	f7 d6                	not    esi
c000f9fc:	29 c6                	sub    esi,eax
c000f9fe:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fa01:	42                   	inc    edx
c000fa02:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fa05:	39 d9                	cmp    ecx,ebx
c000fa07:	7f f5                	jg     c000f9fe <Phys::allocateDMA(unsigned long)+0x74>
c000fa09:	85 ff                	test   edi,edi
c000fa0b:	74 13                	je     c000fa20 <Phys::allocateDMA(unsigned long)+0x96>
c000fa0d:	5b                   	pop    ebx
c000fa0e:	05 50 20 0c 00       	add    eax,0xc2050
c000fa13:	5e                   	pop    esi
c000fa14:	c1 e0 0c             	shl    eax,0xc
c000fa17:	5f                   	pop    edi
c000fa18:	5d                   	pop    ebp
c000fa19:	c3                   	ret    
c000fa1a:	89 ea                	mov    edx,ebp
c000fa1c:	31 c9                	xor    ecx,ecx
c000fa1e:	eb a7                	jmp    c000f9c7 <Phys::allocateDMA(unsigned long)+0x3d>
c000fa20:	5b                   	pop    ebx
c000fa21:	c1 e0 0c             	shl    eax,0xc
c000fa24:	5e                   	pop    esi
c000fa25:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fa2a:	5f                   	pop    edi
c000fa2b:	5d                   	pop    ebp
c000fa2c:	c3                   	ret    

c000fa2d <Phys::freeDMA(unsigned long, unsigned long)>:
c000fa2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fa31:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fa35:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fa3b:	c1 e9 0c             	shr    ecx,0xc
c000fa3e:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fa43:	76 25                	jbe    c000fa6a <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fa45:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fa4a:	c1 e8 0c             	shr    eax,0xc
c000fa4d:	8d 50 10             	lea    edx,[eax+0x10]
c000fa50:	85 c9                	test   ecx,ecx
c000fa52:	74 15                	je     c000fa69 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fa54:	8d 82 40 cc 02 c0    	lea    eax,[edx-0x3ffd33c0]
c000fa5a:	8d 94 11 40 cc 02 c0 	lea    edx,[ecx+edx*1-0x3ffd33c0]
c000fa61:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fa64:	40                   	inc    eax
c000fa65:	39 d0                	cmp    eax,edx
c000fa67:	75 f8                	jne    c000fa61 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fa69:	c3                   	ret    
c000fa6a:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fa70:	c1 ea 0c             	shr    edx,0xc
c000fa73:	eb db                	jmp    c000fa50 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fa75 <Phys::setPageState(unsigned long, bool)>:
c000fa75:	56                   	push   esi
c000fa76:	ba 01 00 00 00       	mov    edx,0x1
c000fa7b:	53                   	push   ebx
c000fa7c:	8b 35 0c bb 02 c0    	mov    esi,DWORD PTR ds:0xc002bb0c
c000fa82:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa86:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fa8a:	89 c8                	mov    eax,ecx
c000fa8c:	83 e1 07             	and    ecx,0x7
c000fa8f:	c1 e8 03             	shr    eax,0x3
c000fa92:	d3 e3                	shl    ebx,cl
c000fa94:	01 c6                	add    esi,eax
c000fa96:	d3 e2                	shl    edx,cl
c000fa98:	f7 d2                	not    edx
c000fa9a:	20 16                	and    BYTE PTR [esi],dl
c000fa9c:	03 05 0c bb 02 c0    	add    eax,DWORD PTR ds:0xc002bb0c
c000faa2:	08 18                	or     BYTE PTR [eax],bl
c000faa4:	5b                   	pop    ebx
c000faa5:	5e                   	pop    esi
c000faa6:	c3                   	ret    

c000faa7 <Phys::getPageState(unsigned long)>:
c000faa7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000faab:	8b 15 0c bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb0c
c000fab1:	89 c8                	mov    eax,ecx
c000fab3:	83 e1 07             	and    ecx,0x7
c000fab6:	c1 e8 03             	shr    eax,0x3
c000fab9:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fabd:	d3 f8                	sar    eax,cl
c000fabf:	83 e0 01             	and    eax,0x1
c000fac2:	c3                   	ret    

c000fac3 <Phys::freePage(unsigned long)>:
c000fac3:	53                   	push   ebx
c000fac4:	83 ec 08             	sub    esp,0x8
c000fac7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000facb:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fad1:	76 57                	jbe    c000fb2a <Phys::freePage(unsigned long)+0x67>
c000fad3:	c1 eb 0c             	shr    ebx,0xc
c000fad6:	53                   	push   ebx
c000fad7:	e8 cb ff ff ff       	call   c000faa7 <Phys::getPageState(unsigned long)>
c000fadc:	5a                   	pop    edx
c000fadd:	84 c0                	test   al,al
c000fadf:	74 5b                	je     c000fb3c <Phys::freePage(unsigned long)+0x79>
c000fae1:	a1 2c cc 02 c0       	mov    eax,ds:0xc002cc2c
c000fae6:	48                   	dec    eax
c000fae7:	a3 2c cc 02 c0       	mov    ds:0xc002cc2c,eax
c000faec:	8d 04 80             	lea    eax,[eax+eax*4]
c000faef:	8d 04 80             	lea    eax,[eax+eax*4]
c000faf2:	c1 e0 02             	shl    eax,0x2
c000faf5:	99                   	cdq    
c000faf6:	f7 3d 30 cc 02 c0    	idiv   DWORD PTR ds:0xc002cc30
c000fafc:	39 05 28 cc 02 c0    	cmp    DWORD PTR ds:0xc002cc28,eax
c000fb02:	75 13                	jne    c000fb17 <Phys::freePage(unsigned long)+0x54>
c000fb04:	83 ec 08             	sub    esp,0x8
c000fb07:	6a 00                	push   0x0
c000fb09:	53                   	push   ebx
c000fb0a:	e8 66 ff ff ff       	call   c000fa75 <Phys::setPageState(unsigned long, bool)>
c000fb0f:	83 c4 10             	add    esp,0x10
c000fb12:	83 c4 08             	add    esp,0x8
c000fb15:	5b                   	pop    ebx
c000fb16:	c3                   	ret    
c000fb17:	83 ec 0c             	sub    esp,0xc
c000fb1a:	a3 28 cc 02 c0       	mov    ds:0xc002cc28,eax
c000fb1f:	50                   	push   eax
c000fb20:	e8 5b 0a 00 00       	call   c0010580 <VgaText::updateRAMUsageDisplay(int)>
c000fb25:	83 c4 10             	add    esp,0x10
c000fb28:	eb da                	jmp    c000fb04 <Phys::freePage(unsigned long)+0x41>
c000fb2a:	68 00 10 00 00       	push   0x1000
c000fb2f:	53                   	push   ebx
c000fb30:	e8 f8 fe ff ff       	call   c000fa2d <Phys::freeDMA(unsigned long, unsigned long)>
c000fb35:	59                   	pop    ecx
c000fb36:	5b                   	pop    ebx
c000fb37:	83 c4 08             	add    esp,0x8
c000fb3a:	5b                   	pop    ebx
c000fb3b:	c3                   	ret    
c000fb3c:	c7 44 24 10 37 8d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028d37
c000fb44:	83 c4 08             	add    esp,0x8
c000fb47:	5b                   	pop    ebx
c000fb48:	e9 84 9d 00 00       	jmp    c00198d1 <Krnl::panic(char const*)>

c000fb4d <Phys::allocatePage()>:
c000fb4d:	56                   	push   esi
c000fb4e:	53                   	push   ebx
c000fb4f:	51                   	push   ecx
c000fb50:	8b 35 20 cc 02 c0    	mov    esi,DWORD PTR ds:0xc002cc20
c000fb56:	89 f3                	mov    ebx,esi
c000fb58:	eb 0a                	jmp    c000fb64 <Phys::allocatePage()+0x17>
c000fb5a:	89 1d 20 cc 02 c0    	mov    DWORD PTR ds:0xc002cc20,ebx
c000fb60:	39 de                	cmp    esi,ebx
c000fb62:	74 24                	je     c000fb88 <Phys::allocatePage()+0x3b>
c000fb64:	53                   	push   ebx
c000fb65:	e8 3d ff ff ff       	call   c000faa7 <Phys::getPageState(unsigned long)>
c000fb6a:	5a                   	pop    edx
c000fb6b:	84 c0                	test   al,al
c000fb6d:	74 5a                	je     c000fbc9 <Phys::allocatePage()+0x7c>
c000fb6f:	43                   	inc    ebx
c000fb70:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fb76:	75 e2                	jne    c000fb5a <Phys::allocatePage()+0xd>
c000fb78:	31 db                	xor    ebx,ebx
c000fb7a:	c7 05 20 cc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cc20,0x0
c000fb84:	39 de                	cmp    esi,ebx
c000fb86:	75 dc                	jne    c000fb64 <Phys::allocatePage()+0x17>
c000fb88:	83 ec 0c             	sub    esp,0xc
c000fb8b:	68 4d 8d 02 c0       	push   0xc0028d4d
c000fb90:	e8 ea 2b 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c000fb95:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fb9c:	e8 e9 fd ff ff       	call   c000f98a <Phys::allocateDMA(unsigned long)>
c000fba1:	83 c4 10             	add    esp,0x10
c000fba4:	85 c0                	test   eax,eax
c000fba6:	75 56                	jne    c000fbfe <Phys::allocatePage()+0xb1>
c000fba8:	83 ec 0c             	sub    esp,0xc
c000fbab:	68 5e 8d 02 c0       	push   0xc0028d5e
c000fbb0:	e8 1c 9d 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c000fbb5:	83 c4 10             	add    esp,0x10
c000fbb8:	8b 1d 20 cc 02 c0    	mov    ebx,DWORD PTR ds:0xc002cc20
c000fbbe:	53                   	push   ebx
c000fbbf:	e8 e3 fe ff ff       	call   c000faa7 <Phys::getPageState(unsigned long)>
c000fbc4:	5a                   	pop    edx
c000fbc5:	84 c0                	test   al,al
c000fbc7:	75 a6                	jne    c000fb6f <Phys::allocatePage()+0x22>
c000fbc9:	6a 01                	push   0x1
c000fbcb:	53                   	push   ebx
c000fbcc:	e8 a4 fe ff ff       	call   c000fa75 <Phys::setPageState(unsigned long, bool)>
c000fbd1:	a1 2c cc 02 c0       	mov    eax,ds:0xc002cc2c
c000fbd6:	59                   	pop    ecx
c000fbd7:	40                   	inc    eax
c000fbd8:	5b                   	pop    ebx
c000fbd9:	a3 2c cc 02 c0       	mov    ds:0xc002cc2c,eax
c000fbde:	8d 04 80             	lea    eax,[eax+eax*4]
c000fbe1:	8d 04 80             	lea    eax,[eax+eax*4]
c000fbe4:	c1 e0 02             	shl    eax,0x2
c000fbe7:	99                   	cdq    
c000fbe8:	f7 3d 30 cc 02 c0    	idiv   DWORD PTR ds:0xc002cc30
c000fbee:	39 05 28 cc 02 c0    	cmp    DWORD PTR ds:0xc002cc28,eax
c000fbf4:	75 0c                	jne    c000fc02 <Phys::allocatePage()+0xb5>
c000fbf6:	a1 20 cc 02 c0       	mov    eax,ds:0xc002cc20
c000fbfb:	c1 e0 0c             	shl    eax,0xc
c000fbfe:	5a                   	pop    edx
c000fbff:	5b                   	pop    ebx
c000fc00:	5e                   	pop    esi
c000fc01:	c3                   	ret    
c000fc02:	83 ec 0c             	sub    esp,0xc
c000fc05:	a3 28 cc 02 c0       	mov    ds:0xc002cc28,eax
c000fc0a:	50                   	push   eax
c000fc0b:	e8 70 09 00 00       	call   c0010580 <VgaText::updateRAMUsageDisplay(int)>
c000fc10:	83 c4 10             	add    esp,0x10
c000fc13:	eb e1                	jmp    c000fbf6 <Phys::allocatePage()+0xa9>

c000fc15 <Phys::allocateContiguousPages(int)>:
c000fc15:	57                   	push   edi
c000fc16:	56                   	push   esi
c000fc17:	53                   	push   ebx
c000fc18:	31 db                	xor    ebx,ebx
c000fc1a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000fc1e:	e8 c3 d2 00 00       	call   c001cee6 <lockScheduler()>
c000fc23:	85 db                	test   ebx,ebx
c000fc25:	75 11                	jne    c000fc38 <Phys::allocateContiguousPages(int)+0x23>
c000fc27:	e8 21 ff ff ff       	call   c000fb4d <Phys::allocatePage()>
c000fc2c:	83 ff 01             	cmp    edi,0x1
c000fc2f:	89 c6                	mov    esi,eax
c000fc31:	74 21                	je     c000fc54 <Phys::allocateContiguousPages(int)+0x3f>
c000fc33:	bb 01 00 00 00       	mov    ebx,0x1
c000fc38:	e8 10 ff ff ff       	call   c000fb4d <Phys::allocatePage()>
c000fc3d:	89 da                	mov    edx,ebx
c000fc3f:	c1 e2 0c             	shl    edx,0xc
c000fc42:	01 f2                	add    edx,esi
c000fc44:	39 c2                	cmp    edx,eax
c000fc46:	74 17                	je     c000fc5f <Phys::allocateContiguousPages(int)+0x4a>
c000fc48:	bb 01 00 00 00       	mov    ebx,0x1
c000fc4d:	89 c6                	mov    esi,eax
c000fc4f:	83 ff 01             	cmp    edi,0x1
c000fc52:	75 e4                	jne    c000fc38 <Phys::allocateContiguousPages(int)+0x23>
c000fc54:	e8 8f d2 00 00       	call   c001cee8 <unlockScheduler()>
c000fc59:	89 f0                	mov    eax,esi
c000fc5b:	5b                   	pop    ebx
c000fc5c:	5e                   	pop    esi
c000fc5d:	5f                   	pop    edi
c000fc5e:	c3                   	ret    
c000fc5f:	43                   	inc    ebx
c000fc60:	39 fb                	cmp    ebx,edi
c000fc62:	75 bf                	jne    c000fc23 <Phys::allocateContiguousPages(int)+0xe>
c000fc64:	e8 7f d2 00 00       	call   c001cee8 <unlockScheduler()>
c000fc69:	89 f0                	mov    eax,esi
c000fc6b:	5b                   	pop    ebx
c000fc6c:	5e                   	pop    esi
c000fc6d:	5f                   	pop    edi
c000fc6e:	c3                   	ret    

c000fc6f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fc6f:	56                   	push   esi
c000fc70:	53                   	push   ebx
c000fc71:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc75:	39 1d 24 cc 02 c0    	cmp    DWORD PTR ds:0xc002cc24,ebx
c000fc7b:	73 06                	jae    c000fc83 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fc7d:	89 1d 24 cc 02 c0    	mov    DWORD PTR ds:0xc002cc24,ebx
c000fc83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc87:	c1 eb 0c             	shr    ebx,0xc
c000fc8a:	c1 e8 0c             	shr    eax,0xc
c000fc8d:	39 d8                	cmp    eax,ebx
c000fc8f:	73 13                	jae    c000fca4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fc91:	6a 00                	push   0x0
c000fc93:	8d 70 01             	lea    esi,[eax+0x1]
c000fc96:	50                   	push   eax
c000fc97:	e8 d9 fd ff ff       	call   c000fa75 <Phys::setPageState(unsigned long, bool)>
c000fc9c:	5a                   	pop    edx
c000fc9d:	89 f0                	mov    eax,esi
c000fc9f:	59                   	pop    ecx
c000fca0:	39 f3                	cmp    ebx,esi
c000fca2:	75 ed                	jne    c000fc91 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fca4:	5b                   	pop    ebx
c000fca5:	5e                   	pop    esi
c000fca6:	c3                   	ret    

c000fca7 <Phys::physicalMemorySetup(unsigned int)>:
c000fca7:	55                   	push   ebp
c000fca8:	57                   	push   edi
c000fca9:	56                   	push   esi
c000fcaa:	53                   	push   ebx
c000fcab:	31 db                	xor    ebx,ebx
c000fcad:	83 ec 40             	sub    esp,0x40
c000fcb0:	6a 30                	push   0x30
c000fcb2:	6a 00                	push   0x0
c000fcb4:	68 40 cc 02 c0       	push   0xc002cc40
c000fcb9:	e8 cd 09 ff ff       	call   c000068b <memset>
c000fcbe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fcc2:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fcc7:	05 00 10 00 00       	add    eax,0x1000
c000fccc:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fcd0:	83 c4 10             	add    esp,0x10
c000fcd3:	83 ec 08             	sub    esp,0x8
c000fcd6:	6a 01                	push   0x1
c000fcd8:	53                   	push   ebx
c000fcd9:	43                   	inc    ebx
c000fcda:	e8 96 fd ff ff       	call   c000fa75 <Phys::setPageState(unsigned long, bool)>
c000fcdf:	83 c4 10             	add    esp,0x10
c000fce2:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fce8:	75 e9                	jne    c000fcd3 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fcea:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fcf1:	66 85 c0             	test   ax,ax
c000fcf4:	0f 84 8e 01 00 00    	je     c000fe88 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fcfa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fcfe:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fd06:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd0a:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fd0f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fd13:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fd1b:	eb 15                	jmp    c000fd32 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fd1d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fd21:	83 c3 18             	add    ebx,0x18
c000fd24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd28:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fd2c:	0f 84 66 01 00 00    	je     c000fe98 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fd32:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fd35:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fd38:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fd3b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd3f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd43:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fd45:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fd48:	01 f0                	add    eax,esi
c000fd4a:	55                   	push   ebp
c000fd4b:	11 fa                	adc    edx,edi
c000fd4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fd51:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fd55:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fd59:	56                   	push   esi
c000fd5a:	68 98 8d 02 c0       	push   0xc0028d98
c000fd5f:	e8 1b 2a 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c000fd64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fd68:	83 c4 10             	add    esp,0x10
c000fd6b:	09 f8                	or     eax,edi
c000fd6d:	0f 85 25 01 00 00    	jne    c000fe98 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fd73:	4d                   	dec    ebp
c000fd74:	75 a7                	jne    c000fd1d <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd76:	ba 00 00 08 00       	mov    edx,0x80000
c000fd7b:	89 c1                	mov    ecx,eax
c000fd7d:	39 f2                	cmp    edx,esi
c000fd7f:	19 f9                	sbb    ecx,edi
c000fd81:	0f 82 a7 00 00 00    	jb     c000fe2e <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fd87:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fd8b:	89 c1                	mov    ecx,eax
c000fd8d:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fd91:	0f 83 97 00 00 00    	jae    c000fe2e <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fd97:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fd9c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fda0:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fda4:	39 fa                	cmp    edx,edi
c000fda6:	19 e8                	sbb    eax,ebp
c000fda8:	0f 82 14 01 00 00    	jb     c000fec2 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000fdae:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fdb2:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fdb6:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fdbc:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fdc1:	83 d5 ff             	adc    ebp,0xffffffff
c000fdc4:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fdc8:	31 c0                	xor    eax,eax
c000fdca:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fdce:	39 fa                	cmp    edx,edi
c000fdd0:	89 c1                	mov    ecx,eax
c000fdd2:	19 e9                	sbb    ecx,ebp
c000fdd4:	0f 83 43 ff ff ff    	jae    c000fd1d <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fdda:	be 00 00 08 00       	mov    esi,0x80000
c000fddf:	50                   	push   eax
c000fde0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fde4:	57                   	push   edi
c000fde5:	56                   	push   esi
c000fde6:	68 bc 8d 02 c0       	push   0xc0028dbc
c000fdeb:	e8 8f 29 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c000fdf0:	5a                   	pop    edx
c000fdf1:	59                   	pop    ecx
c000fdf2:	57                   	push   edi
c000fdf3:	56                   	push   esi
c000fdf4:	e8 76 fe ff ff       	call   c000fc6f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fdf9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fdfd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fe01:	83 c4 0c             	add    esp,0xc
c000fe04:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fe08:	03 05 30 cc 02 c0    	add    eax,DWORD PTR ds:0xc002cc30
c000fe0e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fe15:	a3 30 cc 02 c0       	mov    ds:0xc002cc30,eax
c000fe1a:	52                   	push   edx
c000fe1b:	50                   	push   eax
c000fe1c:	68 7a 8d 02 c0       	push   0xc0028d7a
c000fe21:	e8 59 29 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c000fe26:	83 c4 10             	add    esp,0x10
c000fe29:	e9 ef fe ff ff       	jmp    c000fd1d <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe2e:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fe32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe36:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe3a:	39 ea                	cmp    edx,ebp
c000fe3c:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fe40:	0f 82 d7 fe ff ff    	jb     c000fd1d <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe46:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fe4b:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fe4f:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fe53:	0f 83 c4 fe ff ff    	jae    c000fd1d <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe59:	39 ee                	cmp    esi,ebp
c000fe5b:	89 f8                	mov    eax,edi
c000fe5d:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fe61:	0f 83 78 ff ff ff    	jae    c000fddf <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fe67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fe6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fe6f:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fe73:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fe77:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fe7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe7f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fe83:	e9 57 ff ff ff       	jmp    c000fddf <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fe88:	83 ec 0c             	sub    esp,0xc
c000fe8b:	68 6c 8d 02 c0       	push   0xc0028d6c
c000fe90:	e8 3c 9a 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c000fe95:	83 c4 10             	add    esp,0x10
c000fe98:	bb 40 01 00 00       	mov    ebx,0x140
c000fe9d:	83 ec 08             	sub    esp,0x8
c000fea0:	6a 00                	push   0x0
c000fea2:	53                   	push   ebx
c000fea3:	43                   	inc    ebx
c000fea4:	e8 cc fb ff ff       	call   c000fa75 <Phys::setPageState(unsigned long, bool)>
c000fea9:	ff 05 30 cc 02 c0    	inc    DWORD PTR ds:0xc002cc30
c000feaf:	83 c4 10             	add    esp,0x10
c000feb2:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000feb8:	75 e3                	jne    c000fe9d <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000feba:	83 c4 3c             	add    esp,0x3c
c000febd:	5b                   	pop    ebx
c000febe:	5e                   	pop    esi
c000febf:	5f                   	pop    edi
c000fec0:	5d                   	pop    ebp
c000fec1:	c3                   	ret    
c000fec2:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000feca:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fed2:	e9 d7 fe ff ff       	jmp    c000fdae <Phys::physicalMemorySetup(unsigned int)+0x107>
c000fed7:	90                   	nop

c000fed8 <Pipe::isAtty()>:
c000fed8:	31 c0                	xor    eax,eax
c000feda:	c3                   	ret    
c000fedb:	90                   	nop

c000fedc <Pipe::~Pipe()>:
c000fedc:	83 ec 0c             	sub    esp,0xc
c000fedf:	ba 28 8e 02 c0       	mov    edx,0xc0028e28
c000fee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fee8:	89 10                	mov    DWORD PTR [eax],edx
c000feea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000feee:	83 ec 0c             	sub    esp,0xc
c000fef1:	50                   	push   eax
c000fef2:	e8 37 16 00 00       	call   c001152e <UnixFile::~UnixFile()>
c000fef7:	83 c4 10             	add    esp,0x10
c000fefa:	90                   	nop
c000fefb:	83 c4 0c             	add    esp,0xc
c000fefe:	c3                   	ret    
c000feff:	90                   	nop

c000ff00 <Pipe::~Pipe()>:
c000ff00:	83 ec 0c             	sub    esp,0xc
c000ff03:	83 ec 0c             	sub    esp,0xc
c000ff06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff0a:	e8 cd ff ff ff       	call   c000fedc <Pipe::~Pipe()>
c000ff0f:	83 c4 10             	add    esp,0x10
c000ff12:	83 ec 08             	sub    esp,0x8
c000ff15:	6a 20                	push   0x20
c000ff17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff1b:	e8 7f 27 00 00       	call   c001269f <operator delete(void*, unsigned long)>
c000ff20:	83 c4 10             	add    esp,0x10
c000ff23:	83 c4 0c             	add    esp,0xc
c000ff26:	c3                   	ret    
c000ff27:	90                   	nop

c000ff28 <Pipe::read(unsigned long long, void*, int*)>:
c000ff28:	55                   	push   ebp
c000ff29:	57                   	push   edi
c000ff2a:	56                   	push   esi
c000ff2b:	53                   	push   ebx
c000ff2c:	83 ec 1c             	sub    esp,0x1c
c000ff2f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ff33:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000ff37:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ff3b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000ff3e:	89 c8                	mov    eax,ecx
c000ff40:	99                   	cdq    
c000ff41:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000ff45:	74 19                	je     c000ff60 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000ff47:	39 f9                	cmp    ecx,edi
c000ff49:	89 d1                	mov    ecx,edx
c000ff4b:	19 f1                	sbb    ecx,esi
c000ff4d:	73 11                	jae    c000ff60 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000ff4f:	e8 92 cf 00 00       	call   c001cee6 <lockScheduler()>
c000ff54:	e8 c9 d2 00 00       	call   c001d222 <schedule()>
c000ff59:	e8 8a cf 00 00       	call   c001cee8 <unlockScheduler()>
c000ff5e:	eb db                	jmp    c000ff3b <Pipe::read(unsigned long long, void*, int*)+0x13>
c000ff60:	39 f8                	cmp    eax,edi
c000ff62:	89 d1                	mov    ecx,edx
c000ff64:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000ff68:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000ff6c:	19 f1                	sbb    ecx,esi
c000ff6e:	73 08                	jae    c000ff78 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000ff70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ff74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ff78:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ff7b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000ff7e:	29 c6                	sub    esi,eax
c000ff80:	89 f1                	mov    ecx,esi
c000ff82:	c1 f9 1f             	sar    ecx,0x1f
c000ff85:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000ff89:	89 ca                	mov    edx,ecx
c000ff8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ff8f:	19 d1                	sbb    ecx,edx
c000ff91:	73 04                	jae    c000ff97 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000ff93:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000ff97:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ff9b:	89 fd                	mov    ebp,edi
c000ff9d:	29 f5                	sub    ebp,esi
c000ff9f:	85 f6                	test   esi,esi
c000ffa1:	74 12                	je     c000ffb5 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000ffa3:	52                   	push   edx
c000ffa4:	56                   	push   esi
c000ffa5:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000ffa8:	50                   	push   eax
c000ffa9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ffad:	e8 a3 06 ff ff       	call   c0000655 <memcpy>
c000ffb2:	83 c4 10             	add    esp,0x10
c000ffb5:	85 ed                	test   ebp,ebp
c000ffb7:	74 12                	je     c000ffcb <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000ffb9:	50                   	push   eax
c000ffba:	55                   	push   ebp
c000ffbb:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000ffbe:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000ffc2:	56                   	push   esi
c000ffc3:	e8 8d 06 ff ff       	call   c0000655 <memcpy>
c000ffc8:	83 c4 10             	add    esp,0x10
c000ffcb:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000ffce:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ffd1:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000ffd4:	99                   	cdq    
c000ffd5:	89 f7                	mov    edi,esi
c000ffd7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ffdb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000ffdf:	c1 ff 1f             	sar    edi,0x1f
c000ffe2:	57                   	push   edi
c000ffe3:	56                   	push   esi
c000ffe4:	52                   	push   edx
c000ffe5:	50                   	push   eax
c000ffe6:	e8 61 56 01 00       	call   c002564c <__umoddi3>
c000ffeb:	83 c4 10             	add    esp,0x10
c000ffee:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fff1:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fff6:	75 10                	jne    c0010008 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000fff8:	83 ec 0c             	sub    esp,0xc
c000fffb:	68 e5 8d 02 c0       	push   0xc0028de5
c0010000:	e8 cc 98 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c0010005:	83 c4 10             	add    esp,0x10
c0010008:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001000c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010010:	89 10                	mov    DWORD PTR [eax],edx
c0010012:	83 c4 1c             	add    esp,0x1c
c0010015:	31 c0                	xor    eax,eax
c0010017:	5b                   	pop    ebx
c0010018:	5e                   	pop    esi
c0010019:	5f                   	pop    edi
c001001a:	5d                   	pop    ebp
c001001b:	c3                   	ret    

c001001c <Pipe::write(unsigned long long, void*, int*)>:
c001001c:	55                   	push   ebp
c001001d:	57                   	push   edi
c001001e:	56                   	push   esi
c001001f:	53                   	push   ebx
c0010020:	83 ec 1c             	sub    esp,0x1c
c0010023:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010027:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001002b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001002f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010032:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0010035:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0010038:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001003c:	89 de                	mov    esi,ebx
c001003e:	89 df                	mov    edi,ebx
c0010040:	c1 ff 1f             	sar    edi,0x1f
c0010043:	01 c6                	add    esi,eax
c0010045:	89 c8                	mov    eax,ecx
c0010047:	11 d7                	adc    edi,edx
c0010049:	99                   	cdq    
c001004a:	39 f1                	cmp    ecx,esi
c001004c:	89 d0                	mov    eax,edx
c001004e:	19 f8                	sbb    eax,edi
c0010050:	b8 01 00 00 00       	mov    eax,0x1
c0010055:	0f 82 80 00 00 00    	jb     c00100db <Pipe::write(unsigned long long, void*, int*)+0xbf>
c001005b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001005e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0010061:	01 d8                	add    eax,ebx
c0010063:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010067:	99                   	cdq    
c0010068:	f7 f9                	idiv   ecx
c001006a:	29 d1                	sub    ecx,edx
c001006c:	89 d7                	mov    edi,edx
c001006e:	89 c8                	mov    eax,ecx
c0010070:	99                   	cdq    
c0010071:	39 ce                	cmp    esi,ecx
c0010073:	19 d3                	sbb    ebx,edx
c0010075:	bb 00 00 00 00       	mov    ebx,0x0
c001007a:	72 04                	jb     c0010080 <Pipe::write(unsigned long long, void*, int*)+0x64>
c001007c:	89 f3                	mov    ebx,esi
c001007e:	29 cb                	sub    ebx,ecx
c0010080:	89 f1                	mov    ecx,esi
c0010082:	29 d9                	sub    ecx,ebx
c0010084:	74 1a                	je     c00100a0 <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010086:	52                   	push   edx
c0010087:	51                   	push   ecx
c0010088:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001008c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010090:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010093:	57                   	push   edi
c0010094:	e8 bc 05 ff ff       	call   c0000655 <memcpy>
c0010099:	83 c4 10             	add    esp,0x10
c001009c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00100a0:	85 db                	test   ebx,ebx
c00100a2:	74 12                	je     c00100b6 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c00100a4:	50                   	push   eax
c00100a5:	53                   	push   ebx
c00100a6:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c00100aa:	51                   	push   ecx
c00100ab:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00100ae:	e8 a2 05 ff ff       	call   c0000655 <memcpy>
c00100b3:	83 c4 10             	add    esp,0x10
c00100b6:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c00100b9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00100be:	75 10                	jne    c00100d0 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c00100c0:	83 ec 0c             	sub    esp,0xc
c00100c3:	68 01 8e 02 c0       	push   0xc0028e01
c00100c8:	e8 04 98 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c00100cd:	83 c4 10             	add    esp,0x10
c00100d0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00100d4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00100d7:	89 38                	mov    DWORD PTR [eax],edi
c00100d9:	31 c0                	xor    eax,eax
c00100db:	83 c4 1c             	add    esp,0x1c
c00100de:	5b                   	pop    ebx
c00100df:	5e                   	pop    esi
c00100e0:	5f                   	pop    edi
c00100e1:	5d                   	pop    ebp
c00100e2:	c3                   	ret    
c00100e3:	90                   	nop

c00100e4 <Pipe::Pipe(int)>:
c00100e4:	83 ec 0c             	sub    esp,0xc
c00100e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100eb:	83 ec 08             	sub    esp,0x8
c00100ee:	6a 00                	push   0x0
c00100f0:	50                   	push   eax
c00100f1:	e8 56 12 00 00       	call   c001134c <UnixFile::UnixFile(int)>
c00100f6:	83 c4 10             	add    esp,0x10
c00100f9:	ba 28 8e 02 c0       	mov    edx,0xc0028e28
c00100fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010102:	89 10                	mov    DWORD PTR [eax],edx
c0010104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010108:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001010c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001010f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010113:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001011a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001011e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010125:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010129:	83 ec 0c             	sub    esp,0xc
c001012c:	50                   	push   eax
c001012d:	e8 a8 f3 ff ff       	call   c000f4da <malloc>
c0010132:	83 c4 10             	add    esp,0x10
c0010135:	89 c2                	mov    edx,eax
c0010137:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001013b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001013e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010142:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010146:	90                   	nop
c0010147:	83 c4 0c             	add    esp,0xc
c001014a:	c3                   	ret    
c001014b:	90                   	nop

c001014c <VgaText::isAtty()>:
c001014c:	b0 01                	mov    al,0x1
c001014e:	c3                   	ret    
c001014f:	90                   	nop

c0010150 <VgaText::~VgaText()>:
c0010150:	83 ec 0c             	sub    esp,0xc
c0010153:	ba e4 8e 02 c0       	mov    edx,0xc0028ee4
c0010158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001015c:	89 10                	mov    DWORD PTR [eax],edx
c001015e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010162:	83 ec 0c             	sub    esp,0xc
c0010165:	50                   	push   eax
c0010166:	e8 c3 13 00 00       	call   c001152e <UnixFile::~UnixFile()>
c001016b:	83 c4 10             	add    esp,0x10
c001016e:	90                   	nop
c001016f:	83 c4 0c             	add    esp,0xc
c0010172:	c3                   	ret    
c0010173:	90                   	nop

c0010174 <VgaText::~VgaText()>:
c0010174:	83 ec 0c             	sub    esp,0xc
c0010177:	83 ec 0c             	sub    esp,0xc
c001017a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001017e:	e8 cd ff ff ff       	call   c0010150 <VgaText::~VgaText()>
c0010183:	83 c4 10             	add    esp,0x10
c0010186:	83 ec 08             	sub    esp,0x8
c0010189:	68 60 12 00 00       	push   0x1260
c001018e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010192:	e8 08 25 00 00       	call   c001269f <operator delete(void*, unsigned long)>
c0010197:	83 c4 10             	add    esp,0x10
c001019a:	83 c4 0c             	add    esp,0xc
c001019d:	c3                   	ret    

c001019e <VgaText::read(unsigned long long, void*, int*)>:
c001019e:	83 ec 10             	sub    esp,0x10
c00101a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00101a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00101a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101ad:	e8 39 58 00 00       	call   c00159eb <readKeyboard(VgaText*, char*, unsigned long)>
c00101b2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00101b6:	89 02                	mov    DWORD PTR [edx],eax
c00101b8:	31 c0                	xor    eax,eax
c00101ba:	83 c4 1c             	add    esp,0x1c
c00101bd:	c3                   	ret    

c00101be <setTerminalScrollLock(bool)>:
c00101be:	c3                   	ret    

c00101bf <addToTerminalCycle(VgaText*)>:
c00101bf:	8b 15 c0 cc 02 c0    	mov    edx,DWORD PTR ds:0xc002ccc0
c00101c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101c9:	85 d2                	test   edx,edx
c00101cb:	75 0c                	jne    c00101d9 <addToTerminalCycle(VgaText*)+0x1a>
c00101cd:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00101d3:	a3 c0 cc 02 c0       	mov    ds:0xc002ccc0,eax
c00101d8:	c3                   	ret    
c00101d9:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00101df:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00101e5:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00101eb:	c3                   	ret    

c00101ec <installVgaTextImplementation()>:
c00101ec:	83 ec 10             	sub    esp,0x10
c00101ef:	6a 20                	push   0x20
c00101f1:	6a 00                	push   0x0
c00101f3:	68 a0 cc 02 c0       	push   0xc002cca0
c00101f8:	e8 8e 04 ff ff       	call   c000068b <memset>
c00101fd:	83 c4 1c             	add    esp,0x1c
c0010200:	c3                   	ret    

c0010201 <scrollTerminalScrollLock(int)>:
c0010201:	c3                   	ret    

c0010202 <VgaText::load()>:
c0010202:	53                   	push   ebx
c0010203:	31 c0                	xor    eax,eax
c0010205:	83 ec 58             	sub    esp,0x58
c0010208:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001020c:	89 e2                	mov    edx,esp
c001020e:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010212:	40                   	inc    eax
c0010213:	83 f8 50             	cmp    eax,0x50
c0010216:	75 f6                	jne    c001020e <VgaText::load()+0xc>
c0010218:	31 c0                	xor    eax,eax
c001021a:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010221:	84 c9                	test   cl,cl
c0010223:	74 06                	je     c001022b <VgaText::load()+0x29>
c0010225:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010228:	40                   	inc    eax
c0010229:	eb ef                	jmp    c001021a <VgaText::load()+0x18>
c001022b:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010231:	85 c0                	test   eax,eax
c0010233:	74 09                	je     c001023e <VgaText::load()+0x3c>
c0010235:	51                   	push   ecx
c0010236:	51                   	push   ecx
c0010237:	52                   	push   edx
c0010238:	53                   	push   ebx
c0010239:	ff d0                	call   eax
c001023b:	83 c4 10             	add    esp,0x10
c001023e:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010244:	85 c0                	test   eax,eax
c0010246:	74 09                	je     c0010251 <VgaText::load()+0x4f>
c0010248:	83 ec 0c             	sub    esp,0xc
c001024b:	53                   	push   ebx
c001024c:	ff d0                	call   eax
c001024e:	83 c4 10             	add    esp,0x10
c0010251:	83 c4 58             	add    esp,0x58
c0010254:	5b                   	pop    ebx
c0010255:	c3                   	ret    

c0010256 <VgaText::updateCursor()>:
c0010256:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001025a:	39 05 c4 cc 02 c0    	cmp    DWORD PTR ds:0xc002ccc4,eax
c0010260:	75 0c                	jne    c001026e <VgaText::updateCursor()+0x18>
c0010262:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010268:	85 c0                	test   eax,eax
c001026a:	74 02                	je     c001026e <VgaText::updateCursor()+0x18>
c001026c:	ff e0                	jmp    eax
c001026e:	c3                   	ret    
c001026f:	90                   	nop

c0010270 <VgaText::showCursor(bool)>:
c0010270:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010274:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010278:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c001027e:	c3                   	ret    
c001027f:	90                   	nop

c0010280 <VgaText::disableBlink(bool)>:
c0010280:	56                   	push   esi
c0010281:	53                   	push   ebx
c0010282:	51                   	push   ecx
c0010283:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010287:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001028b:	39 1d c4 cc 02 c0    	cmp    DWORD PTR ds:0xc002ccc4,ebx
c0010291:	75 18                	jne    c00102ab <VgaText::disableBlink(bool)+0x2b>
c0010293:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010299:	85 c0                	test   eax,eax
c001029b:	74 0e                	je     c00102ab <VgaText::disableBlink(bool)+0x2b>
c001029d:	89 f1                	mov    ecx,esi
c001029f:	52                   	push   edx
c00102a0:	52                   	push   edx
c00102a1:	0f b6 d1             	movzx  edx,cl
c00102a4:	52                   	push   edx
c00102a5:	53                   	push   ebx
c00102a6:	ff d0                	call   eax
c00102a8:	83 c4 10             	add    esp,0x10
c00102ab:	89 f0                	mov    eax,esi
c00102ad:	83 f0 01             	xor    eax,0x1
c00102b0:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00102b6:	58                   	pop    eax
c00102b7:	5b                   	pop    ebx
c00102b8:	5e                   	pop    esi
c00102b9:	c3                   	ret    

c00102ba <VgaText::doANSI_SGR(int)>:
c00102ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102c2:	85 d2                	test   edx,edx
c00102c4:	75 14                	jne    c00102da <VgaText::doANSI_SGR(int)+0x20>
c00102c6:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00102cc:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00102d2:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00102d8:	eb 65                	jmp    c001033f <VgaText::doANSI_SGR(int)+0x85>
c00102da:	83 fa 07             	cmp    edx,0x7
c00102dd:	75 14                	jne    c00102f3 <VgaText::doANSI_SGR(int)+0x39>
c00102df:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00102e5:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00102eb:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c00102f1:	eb 4c                	jmp    c001033f <VgaText::doANSI_SGR(int)+0x85>
c00102f3:	83 fa 1b             	cmp    edx,0x1b
c00102f6:	74 ce                	je     c00102c6 <VgaText::doANSI_SGR(int)+0xc>
c00102f8:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00102fb:	83 f9 07             	cmp    ecx,0x7
c00102fe:	77 09                	ja     c0010309 <VgaText::doANSI_SGR(int)+0x4f>
c0010300:	8b 14 8d 40 bb 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd44c0]
c0010307:	eb 20                	jmp    c0010329 <VgaText::doANSI_SGR(int)+0x6f>
c0010309:	8d 4a d8             	lea    ecx,[edx-0x28]
c001030c:	83 f9 07             	cmp    ecx,0x7
c001030f:	77 09                	ja     c001031a <VgaText::doANSI_SGR(int)+0x60>
c0010311:	8b 14 8d 40 bb 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd44c0]
c0010318:	eb 25                	jmp    c001033f <VgaText::doANSI_SGR(int)+0x85>
c001031a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001031d:	83 f9 07             	cmp    ecx,0x7
c0010320:	77 0e                	ja     c0010330 <VgaText::doANSI_SGR(int)+0x76>
c0010322:	8b 14 95 f8 b9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4608]
c0010329:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001032f:	c3                   	ret    
c0010330:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010333:	83 f9 07             	cmp    ecx,0x7
c0010336:	77 0d                	ja     c0010345 <VgaText::doANSI_SGR(int)+0x8b>
c0010338:	8b 14 95 d0 b9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4630]
c001033f:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010345:	c3                   	ret    

c0010346 <VgaText::setDefaultBgColour(VgaColour)>:
c0010346:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001034a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001034e:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010354:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001035a:	c3                   	ret    
c001035b:	90                   	nop

c001035c <VgaText::setDefaultFgColour(VgaColour)>:
c001035c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010360:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010364:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c001036a:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010370:	c3                   	ret    
c0010371:	90                   	nop

c0010372 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010372:	53                   	push   ebx
c0010373:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010377:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001037b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001037f:	51                   	push   ecx
c0010380:	e8 c1 ff ff ff       	call   c0010346 <VgaText::setDefaultBgColour(VgaColour)>
c0010385:	58                   	pop    eax
c0010386:	5a                   	pop    edx
c0010387:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001038b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001038f:	5b                   	pop    ebx
c0010390:	eb ca                	jmp    c001035c <VgaText::setDefaultFgColour(VgaColour)>

c0010392 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010392:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010396:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001039b:	83 e0 0f             	and    eax,0xf
c001039e:	c1 e2 04             	shl    edx,0x4
c00103a1:	09 d0                	or     eax,edx
c00103a3:	c3                   	ret    

c00103a4 <VgaText::scrollScreen()>:
c00103a4:	57                   	push   edi
c00103a5:	56                   	push   esi
c00103a6:	be 01 00 00 00       	mov    esi,0x1
c00103ab:	53                   	push   ebx
c00103ac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103b0:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00103b6:	31 ff                	xor    edi,edi
c00103b8:	01 d9                	add    ecx,ebx
c00103ba:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00103bd:	83 fe 17             	cmp    esi,0x17
c00103c0:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00103c6:	75 28                	jne    c00103f0 <VgaText::scrollScreen()+0x4c>
c00103c8:	f7 c7 01 00 00 00    	test   edi,0x1
c00103ce:	74 1c                	je     c00103ec <VgaText::scrollScreen()+0x48>
c00103d0:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00103d7:	50                   	push   eax
c00103d8:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00103df:	50                   	push   eax
c00103e0:	e8 ad ff ff ff       	call   c0010392 <VgaText::combineColours(unsigned char, unsigned char)>
c00103e5:	5a                   	pop    edx
c00103e6:	5a                   	pop    edx
c00103e7:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00103ea:	eb 04                	jmp    c00103f0 <VgaText::scrollScreen()+0x4c>
c00103ec:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00103f0:	47                   	inc    edi
c00103f1:	41                   	inc    ecx
c00103f2:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00103f8:	75 c0                	jne    c00103ba <VgaText::scrollScreen()+0x16>
c00103fa:	46                   	inc    esi
c00103fb:	83 fe 18             	cmp    esi,0x18
c00103fe:	75 b0                	jne    c00103b0 <VgaText::scrollScreen()+0xc>
c0010400:	39 1d c4 cc 02 c0    	cmp    DWORD PTR ds:0xc002ccc4,ebx
c0010406:	75 24                	jne    c001042c <VgaText::scrollScreen()+0x88>
c0010408:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001040f:	74 08                	je     c0010419 <VgaText::scrollScreen()+0x75>
c0010411:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010417:	eb 13                	jmp    c001042c <VgaText::scrollScreen()+0x88>
c0010419:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c001041f:	85 c0                	test   eax,eax
c0010421:	74 09                	je     c001042c <VgaText::scrollScreen()+0x88>
c0010423:	83 ec 0c             	sub    esp,0xc
c0010426:	53                   	push   ebx
c0010427:	ff d0                	call   eax
c0010429:	83 c4 10             	add    esp,0x10
c001042c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010430:	5b                   	pop    ebx
c0010431:	5e                   	pop    esi
c0010432:	5f                   	pop    edi
c0010433:	e9 1e fe ff ff       	jmp    c0010256 <VgaText::updateCursor()>

c0010438 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010438:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001043d:	c1 e0 08             	shl    eax,0x8
c0010440:	89 c2                	mov    edx,eax
c0010442:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010447:	09 d0                	or     eax,edx
c0010449:	c3                   	ret    

c001044a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001044a:	53                   	push   ebx
c001044b:	83 ec 08             	sub    esp,0x8
c001044e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010452:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010457:	50                   	push   eax
c0010458:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001045d:	50                   	push   eax
c001045e:	e8 2f ff ff ff       	call   c0010392 <VgaText::combineColours(unsigned char, unsigned char)>
c0010463:	5a                   	pop    edx
c0010464:	0f b6 c0             	movzx  eax,al
c0010467:	5b                   	pop    ebx
c0010468:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c001046d:	50                   	push   eax
c001046e:	53                   	push   ebx
c001046f:	e8 c4 ff ff ff       	call   c0010438 <VgaText::combineCharAndColour(char, unsigned char)>
c0010474:	5a                   	pop    edx
c0010475:	5a                   	pop    edx
c0010476:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001047c:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010480:	0f b7 d2             	movzx  edx,dx
c0010483:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010488:	39 0d c4 cc 02 c0    	cmp    DWORD PTR ds:0xc002ccc4,ecx
c001048e:	75 14                	jne    c00104a4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010490:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010496:	85 c0                	test   eax,eax
c0010498:	74 0a                	je     c00104a4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001049a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001049e:	83 c4 08             	add    esp,0x8
c00104a1:	5b                   	pop    ebx
c00104a2:	ff e0                	jmp    eax
c00104a4:	83 c4 08             	add    esp,0x8
c00104a7:	5b                   	pop    ebx
c00104a8:	c3                   	ret    
c00104a9:	90                   	nop

c00104aa <VgaText::getCursorX()>:
c00104aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104ae:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00104b4:	c3                   	ret    
c00104b5:	90                   	nop

c00104b6 <VgaText::getCursorY()>:
c00104b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104ba:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00104c0:	c3                   	ret    
c00104c1:	90                   	nop

c00104c2 <VgaText::setCursor(int, int)>:
c00104c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104ca:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00104d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00104d4:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00104da:	e9 77 fd ff ff       	jmp    c0010256 <VgaText::updateCursor()>
c00104df:	90                   	nop

c00104e0 <VgaText::setCursorX(int)>:
c00104e0:	83 ec 10             	sub    esp,0x10
c00104e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104e7:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00104ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104f1:	50                   	push   eax
c00104f2:	e8 cb ff ff ff       	call   c00104c2 <VgaText::setCursor(int, int)>
c00104f7:	83 c4 1c             	add    esp,0x1c
c00104fa:	c3                   	ret    
c00104fb:	90                   	nop

c00104fc <VgaText::setCursorY(int)>:
c00104fc:	83 ec 10             	sub    esp,0x10
c00104ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010503:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010507:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c001050d:	50                   	push   eax
c001050e:	e8 af ff ff ff       	call   c00104c2 <VgaText::setCursor(int, int)>
c0010513:	83 c4 1c             	add    esp,0x1c
c0010516:	c3                   	ret    
c0010517:	90                   	nop

c0010518 <VgaText::incrementCursor(bool)>:
c0010518:	56                   	push   esi
c0010519:	53                   	push   ebx
c001051a:	51                   	push   ecx
c001051b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001051f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010523:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010529:	40                   	inc    eax
c001052a:	83 f8 50             	cmp    eax,0x50
c001052d:	74 08                	je     c0010537 <VgaText::incrementCursor(bool)+0x1f>
c001052f:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010535:	eb 33                	jmp    c001056a <VgaText::incrementCursor(bool)+0x52>
c0010537:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001053d:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010547:	8d 50 01             	lea    edx,[eax+0x1]
c001054a:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010550:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010556:	75 12                	jne    c001056a <VgaText::incrementCursor(bool)+0x52>
c0010558:	83 ec 0c             	sub    esp,0xc
c001055b:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010561:	53                   	push   ebx
c0010562:	e8 3d fe ff ff       	call   c00103a4 <VgaText::scrollScreen()>
c0010567:	83 c4 10             	add    esp,0x10
c001056a:	89 f0                	mov    eax,esi
c001056c:	84 c0                	test   al,al
c001056e:	74 0c                	je     c001057c <VgaText::incrementCursor(bool)+0x64>
c0010570:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010574:	5a                   	pop    edx
c0010575:	5b                   	pop    ebx
c0010576:	5e                   	pop    esi
c0010577:	e9 da fc ff ff       	jmp    c0010256 <VgaText::updateCursor()>
c001057c:	58                   	pop    eax
c001057d:	5b                   	pop    ebx
c001057e:	5e                   	pop    esi
c001057f:	c3                   	ret    

c0010580 <VgaText::updateRAMUsageDisplay(int)>:
c0010580:	56                   	push   esi
c0010581:	8b 35 20 bb 02 c0    	mov    esi,DWORD PTR ds:0xc002bb20
c0010587:	53                   	push   ebx
c0010588:	bb 0a 00 00 00       	mov    ebx,0xa
c001058d:	6a 0f                	push   0xf
c001058f:	6a 00                	push   0x0
c0010591:	e8 fc fd ff ff       	call   c0010392 <VgaText::combineColours(unsigned char, unsigned char)>
c0010596:	5a                   	pop    edx
c0010597:	59                   	pop    ecx
c0010598:	0f b6 c8             	movzx  ecx,al
c001059b:	51                   	push   ecx
c001059c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105a0:	99                   	cdq    
c00105a1:	f7 fb                	idiv   ebx
c00105a3:	89 d3                	mov    ebx,edx
c00105a5:	83 c0 30             	add    eax,0x30
c00105a8:	83 c3 30             	add    ebx,0x30
c00105ab:	0f be c0             	movsx  eax,al
c00105ae:	0f b6 db             	movzx  ebx,bl
c00105b1:	50                   	push   eax
c00105b2:	e8 81 fe ff ff       	call   c0010438 <VgaText::combineCharAndColour(char, unsigned char)>
c00105b7:	5a                   	pop    edx
c00105b8:	5a                   	pop    edx
c00105b9:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00105c0:	51                   	push   ecx
c00105c1:	53                   	push   ebx
c00105c2:	e8 71 fe ff ff       	call   c0010438 <VgaText::combineCharAndColour(char, unsigned char)>
c00105c7:	5b                   	pop    ebx
c00105c8:	5a                   	pop    edx
c00105c9:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00105d0:	51                   	push   ecx
c00105d1:	6a 25                	push   0x25
c00105d3:	e8 60 fe ff ff       	call   c0010438 <VgaText::combineCharAndColour(char, unsigned char)>
c00105d8:	59                   	pop    ecx
c00105d9:	5b                   	pop    ebx
c00105da:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00105e1:	5b                   	pop    ebx
c00105e2:	5e                   	pop    esi
c00105e3:	c3                   	ret    

c00105e4 <VgaText::updateDiskUsage()>:
c00105e4:	55                   	push   ebp
c00105e5:	bd 10 27 00 00       	mov    ebp,0x2710
c00105ea:	57                   	push   edi
c00105eb:	8b 3d 20 bb 02 c0    	mov    edi,DWORD PTR ds:0xc002bb20
c00105f1:	56                   	push   esi
c00105f2:	53                   	push   ebx
c00105f3:	6a 0f                	push   0xf
c00105f5:	6a 00                	push   0x0
c00105f7:	e8 96 fd ff ff       	call   c0010392 <VgaText::combineColours(unsigned char, unsigned char)>
c00105fc:	5a                   	pop    edx
c00105fd:	0f b6 d8             	movzx  ebx,al
c0010600:	59                   	pop    ecx
c0010601:	8b 35 28 ef 02 c0    	mov    esi,DWORD PTR ds:0xc002ef28
c0010607:	53                   	push   ebx
c0010608:	b9 0a 00 00 00       	mov    ecx,0xa
c001060d:	89 f0                	mov    eax,esi
c001060f:	99                   	cdq    
c0010610:	f7 fd                	idiv   ebp
c0010612:	99                   	cdq    
c0010613:	f7 f9                	idiv   ecx
c0010615:	8d 42 30             	lea    eax,[edx+0x30]
c0010618:	0f b6 c0             	movzx  eax,al
c001061b:	50                   	push   eax
c001061c:	e8 17 fe ff ff       	call   c0010438 <VgaText::combineCharAndColour(char, unsigned char)>
c0010621:	5d                   	pop    ebp
c0010622:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010627:	5a                   	pop    edx
c0010628:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c001062c:	53                   	push   ebx
c001062d:	89 f0                	mov    eax,esi
c001062f:	99                   	cdq    
c0010630:	f7 fd                	idiv   ebp
c0010632:	99                   	cdq    
c0010633:	f7 f9                	idiv   ecx
c0010635:	8d 42 30             	lea    eax,[edx+0x30]
c0010638:	0f b6 c0             	movzx  eax,al
c001063b:	50                   	push   eax
c001063c:	e8 f7 fd ff ff       	call   c0010438 <VgaText::combineCharAndColour(char, unsigned char)>
c0010641:	5d                   	pop    ebp
c0010642:	bd 64 00 00 00       	mov    ebp,0x64
c0010647:	5a                   	pop    edx
c0010648:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c001064f:	53                   	push   ebx
c0010650:	89 f0                	mov    eax,esi
c0010652:	99                   	cdq    
c0010653:	f7 fd                	idiv   ebp
c0010655:	99                   	cdq    
c0010656:	f7 f9                	idiv   ecx
c0010658:	8d 42 30             	lea    eax,[edx+0x30]
c001065b:	0f b6 c0             	movzx  eax,al
c001065e:	50                   	push   eax
c001065f:	e8 d4 fd ff ff       	call   c0010438 <VgaText::combineCharAndColour(char, unsigned char)>
c0010664:	5d                   	pop    ebp
c0010665:	5a                   	pop    edx
c0010666:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c001066d:	53                   	push   ebx
c001066e:	89 f0                	mov    eax,esi
c0010670:	99                   	cdq    
c0010671:	f7 f9                	idiv   ecx
c0010673:	89 d6                	mov    esi,edx
c0010675:	99                   	cdq    
c0010676:	f7 f9                	idiv   ecx
c0010678:	8d 42 30             	lea    eax,[edx+0x30]
c001067b:	0f b6 c0             	movzx  eax,al
c001067e:	50                   	push   eax
c001067f:	e8 b4 fd ff ff       	call   c0010438 <VgaText::combineCharAndColour(char, unsigned char)>
c0010684:	5d                   	pop    ebp
c0010685:	5a                   	pop    edx
c0010686:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c001068d:	53                   	push   ebx
c001068e:	8d 46 30             	lea    eax,[esi+0x30]
c0010691:	0f b6 f0             	movzx  esi,al
c0010694:	56                   	push   esi
c0010695:	e8 9e fd ff ff       	call   c0010438 <VgaText::combineCharAndColour(char, unsigned char)>
c001069a:	5e                   	pop    esi
c001069b:	8b 35 24 ef 02 c0    	mov    esi,DWORD PTR ds:0xc002ef24
c00106a1:	5d                   	pop    ebp
c00106a2:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c00106a9:	bd 10 27 00 00       	mov    ebp,0x2710
c00106ae:	53                   	push   ebx
c00106af:	89 f0                	mov    eax,esi
c00106b1:	99                   	cdq    
c00106b2:	f7 fd                	idiv   ebp
c00106b4:	99                   	cdq    
c00106b5:	f7 f9                	idiv   ecx
c00106b7:	8d 42 30             	lea    eax,[edx+0x30]
c00106ba:	0f b6 c0             	movzx  eax,al
c00106bd:	50                   	push   eax
c00106be:	e8 75 fd ff ff       	call   c0010438 <VgaText::combineCharAndColour(char, unsigned char)>
c00106c3:	5a                   	pop    edx
c00106c4:	5d                   	pop    ebp
c00106c5:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c00106cc:	bd e8 03 00 00       	mov    ebp,0x3e8
c00106d1:	53                   	push   ebx
c00106d2:	89 f0                	mov    eax,esi
c00106d4:	99                   	cdq    
c00106d5:	f7 fd                	idiv   ebp
c00106d7:	99                   	cdq    
c00106d8:	f7 f9                	idiv   ecx
c00106da:	8d 42 30             	lea    eax,[edx+0x30]
c00106dd:	0f b6 c0             	movzx  eax,al
c00106e0:	50                   	push   eax
c00106e1:	e8 52 fd ff ff       	call   c0010438 <VgaText::combineCharAndColour(char, unsigned char)>
c00106e6:	5a                   	pop    edx
c00106e7:	5d                   	pop    ebp
c00106e8:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c00106ef:	bd 64 00 00 00       	mov    ebp,0x64
c00106f4:	53                   	push   ebx
c00106f5:	89 f0                	mov    eax,esi
c00106f7:	99                   	cdq    
c00106f8:	f7 fd                	idiv   ebp
c00106fa:	99                   	cdq    
c00106fb:	f7 f9                	idiv   ecx
c00106fd:	83 c2 30             	add    edx,0x30
c0010700:	0f b6 d2             	movzx  edx,dl
c0010703:	52                   	push   edx
c0010704:	e8 2f fd ff ff       	call   c0010438 <VgaText::combineCharAndColour(char, unsigned char)>
c0010709:	5a                   	pop    edx
c001070a:	5d                   	pop    ebp
c001070b:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010712:	53                   	push   ebx
c0010713:	89 f0                	mov    eax,esi
c0010715:	99                   	cdq    
c0010716:	f7 f9                	idiv   ecx
c0010718:	89 d6                	mov    esi,edx
c001071a:	99                   	cdq    
c001071b:	f7 f9                	idiv   ecx
c001071d:	8d 42 30             	lea    eax,[edx+0x30]
c0010720:	0f b6 c0             	movzx  eax,al
c0010723:	50                   	push   eax
c0010724:	e8 0f fd ff ff       	call   c0010438 <VgaText::combineCharAndColour(char, unsigned char)>
c0010729:	5a                   	pop    edx
c001072a:	59                   	pop    ecx
c001072b:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010732:	53                   	push   ebx
c0010733:	8d 46 30             	lea    eax,[esi+0x30]
c0010736:	0f b6 f0             	movzx  esi,al
c0010739:	56                   	push   esi
c001073a:	e8 f9 fc ff ff       	call   c0010438 <VgaText::combineCharAndColour(char, unsigned char)>
c001073f:	5b                   	pop    ebx
c0010740:	5e                   	pop    esi
c0010741:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010748:	5b                   	pop    ebx
c0010749:	5e                   	pop    esi
c001074a:	5f                   	pop    edi
c001074b:	5d                   	pop    ebp
c001074c:	c3                   	ret    
c001074d:	90                   	nop

c001074e <VgaText::updateTitle()>:
c001074e:	53                   	push   ebx
c001074f:	31 c0                	xor    eax,eax
c0010751:	83 ec 58             	sub    esp,0x58
c0010754:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010758:	89 e1                	mov    ecx,esp
c001075a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001075e:	40                   	inc    eax
c001075f:	83 f8 50             	cmp    eax,0x50
c0010762:	75 f6                	jne    c001075a <VgaText::updateTitle()+0xc>
c0010764:	31 c0                	xor    eax,eax
c0010766:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c001076d:	84 db                	test   bl,bl
c001076f:	74 06                	je     c0010777 <VgaText::updateTitle()+0x29>
c0010771:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010774:	40                   	inc    eax
c0010775:	eb ef                	jmp    c0010766 <VgaText::updateTitle()+0x18>
c0010777:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c001077d:	85 c0                	test   eax,eax
c001077f:	74 09                	je     c001078a <VgaText::updateTitle()+0x3c>
c0010781:	53                   	push   ebx
c0010782:	53                   	push   ebx
c0010783:	51                   	push   ecx
c0010784:	52                   	push   edx
c0010785:	ff d0                	call   eax
c0010787:	83 c4 10             	add    esp,0x10
c001078a:	e8 55 fe ff ff       	call   c00105e4 <VgaText::updateDiskUsage()>
c001078f:	83 c4 58             	add    esp,0x58
c0010792:	5b                   	pop    ebx
c0010793:	c3                   	ret    

c0010794 <VgaText::setTitleTextColour(VgaColour)>:
c0010794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010798:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001079c:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c00107a2:	eb aa                	jmp    c001074e <VgaText::updateTitle()>

c00107a4 <VgaText::setTitleColour(VgaColour)>:
c00107a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00107ac:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c00107b2:	eb 9a                	jmp    c001074e <VgaText::updateTitle()>

c00107b4 <VgaText::setTitle(char*)>:
c00107b4:	53                   	push   ebx
c00107b5:	83 ec 10             	sub    esp,0x10
c00107b8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00107bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107c0:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c00107c6:	50                   	push   eax
c00107c7:	e8 5e ff fe ff       	call   c000072a <strcpy>
c00107cc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00107d0:	83 c4 18             	add    esp,0x18
c00107d3:	5b                   	pop    ebx
c00107d4:	e9 75 ff ff ff       	jmp    c001074e <VgaText::updateTitle()>
c00107d9:	90                   	nop

c00107da <VgaText::decrementCursor(bool)>:
c00107da:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00107de:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00107e2:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c00107e8:	85 c0                	test   eax,eax
c00107ea:	74 07                	je     c00107f3 <VgaText::decrementCursor(bool)+0x19>
c00107ec:	48                   	dec    eax
c00107ed:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c00107f3:	84 c9                	test   cl,cl
c00107f5:	74 09                	je     c0010800 <VgaText::decrementCursor(bool)+0x26>
c00107f7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00107fb:	e9 56 fa ff ff       	jmp    c0010256 <VgaText::updateCursor()>
c0010800:	c3                   	ret    
c0010801:	90                   	nop

c0010802 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010802:	53                   	push   ebx
c0010803:	83 ec 08             	sub    esp,0x8
c0010806:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001080a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001080e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010812:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010816:	3c 07                	cmp    al,0x7
c0010818:	75 2a                	jne    c0010844 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001081a:	a1 6c cd 02 c0       	mov    eax,ds:0xc002cd6c
c001081f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010827:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c001082f:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010837:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001083b:	83 c4 08             	add    esp,0x8
c001083e:	5b                   	pop    ebx
c001083f:	e9 3a 2d 00 00       	jmp    c001357e <Buzzer::beep(int, int, bool)>
c0010844:	3c 0d                	cmp    al,0xd
c0010846:	75 0c                	jne    c0010854 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010848:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010852:	eb 3b                	jmp    c001088f <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010854:	3c 0a                	cmp    al,0xa
c0010856:	75 40                	jne    c0010898 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010858:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001085e:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010868:	8d 50 01             	lea    edx,[eax+0x1]
c001086b:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010871:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010877:	75 12                	jne    c001088b <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010879:	83 ec 0c             	sub    esp,0xc
c001087c:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010882:	53                   	push   ebx
c0010883:	e8 1c fb ff ff       	call   c00103a4 <VgaText::scrollScreen()>
c0010888:	83 c4 10             	add    esp,0x10
c001088b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001088f:	83 c4 08             	add    esp,0x8
c0010892:	5b                   	pop    ebx
c0010893:	e9 be f9 ff ff       	jmp    c0010256 <VgaText::updateCursor()>
c0010898:	3c 08                	cmp    al,0x8
c001089a:	75 31                	jne    c00108cd <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c001089c:	50                   	push   eax
c001089d:	50                   	push   eax
c001089e:	6a 01                	push   0x1
c00108a0:	53                   	push   ebx
c00108a1:	e8 34 ff ff ff       	call   c00107da <VgaText::decrementCursor(bool)>
c00108a6:	5a                   	pop    edx
c00108a7:	59                   	pop    ecx
c00108a8:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00108ae:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00108b4:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00108ba:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00108c0:	6a 20                	push   0x20
c00108c2:	53                   	push   ebx
c00108c3:	e8 82 fb ff ff       	call   c001044a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00108c8:	83 c4 28             	add    esp,0x28
c00108cb:	5b                   	pop    ebx
c00108cc:	c3                   	ret    
c00108cd:	83 ec 08             	sub    esp,0x8
c00108d0:	0f be c0             	movsx  eax,al
c00108d3:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00108d9:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00108df:	51                   	push   ecx
c00108e0:	52                   	push   edx
c00108e1:	50                   	push   eax
c00108e2:	53                   	push   ebx
c00108e3:	e8 62 fb ff ff       	call   c001044a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00108e8:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00108ec:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00108f4:	83 c4 28             	add    esp,0x28
c00108f7:	5b                   	pop    ebx
c00108f8:	e9 1b fc ff ff       	jmp    c0010518 <VgaText::incrementCursor(bool)>
c00108fd:	90                   	nop

c00108fe <VgaText::isShowingCursor()>:
c00108fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010902:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010908:	c3                   	ret    
c0010909:	90                   	nop

c001090a <VgaText::isBlinkDisabled()>:
c001090a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001090e:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010914:	83 f0 01             	xor    eax,0x1
c0010917:	c3                   	ret    

c0010918 <VgaText::setCursorHeight(int)>:
c0010918:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001091c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010920:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010926:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c001092d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010931:	e9 3a f9 ff ff       	jmp    c0010270 <VgaText::showCursor(bool)>

c0010936 <VgaText::getCursorHeight()>:
c0010936:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001093a:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010940:	c3                   	ret    

c0010941 <setActiveTerminal(VgaText*)>:
c0010941:	53                   	push   ebx
c0010942:	83 ec 08             	sub    esp,0x8
c0010945:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010949:	85 db                	test   ebx,ebx
c001094b:	75 11                	jne    c001095e <setActiveTerminal(VgaText*)+0x1d>
c001094d:	c7 44 24 10 3c 8e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028e3c
c0010955:	83 c4 08             	add    esp,0x8
c0010958:	5b                   	pop    ebx
c0010959:	e9 73 8f 00 00       	jmp    c00198d1 <Krnl::panic(char const*)>
c001095e:	50                   	push   eax
c001095f:	50                   	push   eax
c0010960:	53                   	push   ebx
c0010961:	68 4a 8e 02 c0       	push   0xc0028e4a
c0010966:	e8 14 1e 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001096b:	a1 c4 cc 02 c0       	mov    eax,ds:0xc002ccc4
c0010970:	83 c4 10             	add    esp,0x10
c0010973:	85 c0                	test   eax,eax
c0010975:	74 0c                	je     c0010983 <setActiveTerminal(VgaText*)+0x42>
c0010977:	83 ec 0c             	sub    esp,0xc
c001097a:	50                   	push   eax
c001097b:	e8 d6 f8 ff ff       	call   c0010256 <VgaText::updateCursor()>
c0010980:	83 c4 10             	add    esp,0x10
c0010983:	89 1d c4 cc 02 c0    	mov    DWORD PTR ds:0xc002ccc4,ebx
c0010989:	51                   	push   ecx
c001098a:	51                   	push   ecx
c001098b:	53                   	push   ebx
c001098c:	68 62 8e 02 c0       	push   0xc0028e62
c0010991:	e8 e9 1d 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0010996:	83 c4 0c             	add    esp,0xc
c0010999:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c001099f:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00109a5:	53                   	push   ebx
c00109a6:	e8 17 fb ff ff       	call   c00104c2 <VgaText::setCursor(int, int)>
c00109ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109ae:	e8 57 ff ff ff       	call   c001090a <VgaText::isBlinkDisabled()>
c00109b3:	5a                   	pop    edx
c00109b4:	0f b6 c0             	movzx  eax,al
c00109b7:	59                   	pop    ecx
c00109b8:	50                   	push   eax
c00109b9:	53                   	push   ebx
c00109ba:	e8 c1 f8 ff ff       	call   c0010280 <VgaText::disableBlink(bool)>
c00109bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109c2:	e8 6f ff ff ff       	call   c0010936 <VgaText::getCursorHeight()>
c00109c7:	5a                   	pop    edx
c00109c8:	59                   	pop    ecx
c00109c9:	50                   	push   eax
c00109ca:	53                   	push   ebx
c00109cb:	e8 48 ff ff ff       	call   c0010918 <VgaText::setCursorHeight(int)>
c00109d0:	83 c4 10             	add    esp,0x10
c00109d3:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00109da:	75 0a                	jne    c00109e6 <setActiveTerminal(VgaText*)+0xa5>
c00109dc:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c00109e6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00109ea:	83 c4 08             	add    esp,0x8
c00109ed:	5b                   	pop    ebx
c00109ee:	e9 0f f8 ff ff       	jmp    c0010202 <VgaText::load()>

c00109f3 <doTerminalCycle()>:
c00109f3:	83 ec 18             	sub    esp,0x18
c00109f6:	a1 c0 cc 02 c0       	mov    eax,ds:0xc002ccc0
c00109fb:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010a01:	50                   	push   eax
c0010a02:	a3 c0 cc 02 c0       	mov    ds:0xc002ccc0,eax
c0010a07:	e8 35 ff ff ff       	call   c0010941 <setActiveTerminal(VgaText*)>
c0010a0c:	83 c4 1c             	add    esp,0x1c
c0010a0f:	c3                   	ret    

c0010a10 <VgaText::doUpdate()>:
c0010a10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a14:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010a1a:	85 c0                	test   eax,eax
c0010a1c:	74 02                	je     c0010a20 <VgaText::doUpdate()+0x10>
c0010a1e:	ff e0                	jmp    eax
c0010a20:	c3                   	ret    
c0010a21:	90                   	nop

c0010a22 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010a22:	55                   	push   ebp
c0010a23:	57                   	push   edi
c0010a24:	56                   	push   esi
c0010a25:	53                   	push   ebx
c0010a26:	83 ec 1c             	sub    esp,0x1c
c0010a29:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010a2d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010a32:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010a39:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010a3c:	50                   	push   eax
c0010a3d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010a42:	50                   	push   eax
c0010a43:	e8 4a f9 ff ff       	call   c0010392 <VgaText::combineColours(unsigned char, unsigned char)>
c0010a48:	59                   	pop    ecx
c0010a49:	0f b6 c0             	movzx  eax,al
c0010a4c:	5b                   	pop    ebx
c0010a4d:	31 c9                	xor    ecx,ecx
c0010a4f:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010a57:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010a5b:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010a61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010a65:	0f b7 db             	movzx  ebx,bx
c0010a68:	01 db                	add    ebx,ebx
c0010a6a:	01 fb                	add    ebx,edi
c0010a6c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010a6f:	84 c0                	test   al,al
c0010a71:	0f 84 38 01 00 00    	je     c0010baf <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010a77:	3c 0d                	cmp    al,0xd
c0010a79:	75 0f                	jne    c0010a8a <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010a7b:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010a85:	e9 1f 01 00 00       	jmp    c0010ba9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010a8a:	3c 0a                	cmp    al,0xa
c0010a8c:	75 5b                	jne    c0010ae9 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010a8e:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010a94:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010a9e:	8d 48 01             	lea    ecx,[eax+0x1]
c0010aa1:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010aa7:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010aad:	75 12                	jne    c0010ac1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010aaf:	83 ec 0c             	sub    esp,0xc
c0010ab2:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010ab8:	55                   	push   ebp
c0010ab9:	e8 e6 f8 ff ff       	call   c00103a4 <VgaText::scrollScreen()>
c0010abe:	83 c4 10             	add    esp,0x10
c0010ac1:	83 ec 0c             	sub    esp,0xc
c0010ac4:	55                   	push   ebp
c0010ac5:	e8 8c f7 ff ff       	call   c0010256 <VgaText::updateCursor()>
c0010aca:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ad2:	83 c4 10             	add    esp,0x10
c0010ad5:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010adb:	31 c9                	xor    ecx,ecx
c0010add:	0f b7 db             	movzx  ebx,bx
c0010ae0:	01 db                	add    ebx,ebx
c0010ae2:	01 fb                	add    ebx,edi
c0010ae4:	e9 c0 00 00 00       	jmp    c0010ba9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ae9:	3c 08                	cmp    al,0x8
c0010aeb:	75 4e                	jne    c0010b3b <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010aed:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010af1:	53                   	push   ebx
c0010af2:	53                   	push   ebx
c0010af3:	6a 01                	push   0x1
c0010af5:	55                   	push   ebp
c0010af6:	e8 df fc ff ff       	call   c00107da <VgaText::decrementCursor(bool)>
c0010afb:	58                   	pop    eax
c0010afc:	5a                   	pop    edx
c0010afd:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010b03:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010b09:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010b0f:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010b15:	6a 20                	push   0x20
c0010b17:	55                   	push   ebp
c0010b18:	e8 2d f9 ff ff       	call   c001044a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010b1d:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010b25:	83 c4 20             	add    esp,0x20
c0010b28:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010b2e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010b32:	0f b7 db             	movzx  ebx,bx
c0010b35:	01 db                	add    ebx,ebx
c0010b37:	01 fb                	add    ebx,edi
c0010b39:	eb 6e                	jmp    c0010ba9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010b3b:	51                   	push   ecx
c0010b3c:	51                   	push   ecx
c0010b3d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010b41:	50                   	push   eax
c0010b42:	e8 f1 f8 ff ff       	call   c0010438 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b47:	83 c4 10             	add    esp,0x10
c0010b4a:	66 89 03             	mov    WORD PTR [ebx],ax
c0010b4d:	39 2d c4 cc 02 c0    	cmp    DWORD PTR ds:0xc002ccc4,ebp
c0010b53:	75 2a                	jne    c0010b7f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010b55:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010b5b:	85 c0                	test   eax,eax
c0010b5d:	74 20                	je     c0010b7f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010b5f:	52                   	push   edx
c0010b60:	52                   	push   edx
c0010b61:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010b67:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010b6d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010b71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010b75:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010b78:	51                   	push   ecx
c0010b79:	55                   	push   ebp
c0010b7a:	ff d0                	call   eax
c0010b7c:	83 c4 20             	add    esp,0x20
c0010b7f:	83 c3 02             	add    ebx,0x2
c0010b82:	50                   	push   eax
c0010b83:	50                   	push   eax
c0010b84:	6a 00                	push   0x0
c0010b86:	55                   	push   ebp
c0010b87:	e8 8c f9 ff ff       	call   c0010518 <VgaText::incrementCursor(bool)>
c0010b8c:	83 c4 10             	add    esp,0x10
c0010b8f:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010b96:	75 0f                	jne    c0010ba7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010b98:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ba0:	0f b7 db             	movzx  ebx,bx
c0010ba3:	01 db                	add    ebx,ebx
c0010ba5:	01 fb                	add    ebx,edi
c0010ba7:	b1 01                	mov    cl,0x1
c0010ba9:	46                   	inc    esi
c0010baa:	e9 bd fe ff ff       	jmp    c0010a6c <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010baf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010bb3:	83 ec 0c             	sub    esp,0xc
c0010bb6:	55                   	push   ebp
c0010bb7:	e8 9a f6 ff ff       	call   c0010256 <VgaText::updateCursor()>
c0010bbc:	83 c4 10             	add    esp,0x10
c0010bbf:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010bc3:	84 c9                	test   cl,cl
c0010bc5:	74 0c                	je     c0010bd3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010bc7:	83 ec 0c             	sub    esp,0xc
c0010bca:	55                   	push   ebp
c0010bcb:	e8 40 fe ff ff       	call   c0010a10 <VgaText::doUpdate()>
c0010bd0:	83 c4 10             	add    esp,0x10
c0010bd3:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010bda:	83 c4 1c             	add    esp,0x1c
c0010bdd:	5b                   	pop    ebx
c0010bde:	5e                   	pop    esi
c0010bdf:	5f                   	pop    edi
c0010be0:	5d                   	pop    ebp
c0010be1:	c3                   	ret    

c0010be2 <VgaText::clearScreen()>:
c0010be2:	57                   	push   edi
c0010be3:	56                   	push   esi
c0010be4:	31 f6                	xor    esi,esi
c0010be6:	53                   	push   ebx
c0010be7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010beb:	52                   	push   edx
c0010bec:	6a 00                	push   0x0
c0010bee:	6a 00                	push   0x0
c0010bf0:	53                   	push   ebx
c0010bf1:	e8 cc f8 ff ff       	call   c00104c2 <VgaText::setCursor(int, int)>
c0010bf6:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010bfd:	83 c4 10             	add    esp,0x10
c0010c00:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010c06:	7e 26                	jle    c0010c2e <VgaText::clearScreen()+0x4c>
c0010c08:	31 ff                	xor    edi,edi
c0010c0a:	50                   	push   eax
c0010c0b:	50                   	push   eax
c0010c0c:	56                   	push   esi
c0010c0d:	57                   	push   edi
c0010c0e:	47                   	inc    edi
c0010c0f:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c15:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c1b:	6a 20                	push   0x20
c0010c1d:	53                   	push   ebx
c0010c1e:	e8 27 f8 ff ff       	call   c001044a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c23:	83 c4 20             	add    esp,0x20
c0010c26:	83 ff 50             	cmp    edi,0x50
c0010c29:	75 df                	jne    c0010c0a <VgaText::clearScreen()+0x28>
c0010c2b:	46                   	inc    esi
c0010c2c:	eb d2                	jmp    c0010c00 <VgaText::clearScreen()+0x1e>
c0010c2e:	83 ec 0c             	sub    esp,0xc
c0010c31:	53                   	push   ebx
c0010c32:	e8 d9 fd ff ff       	call   c0010a10 <VgaText::doUpdate()>
c0010c37:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010c3e:	83 c4 10             	add    esp,0x10
c0010c41:	5b                   	pop    ebx
c0010c42:	5e                   	pop    esi
c0010c43:	5f                   	pop    edi
c0010c44:	c3                   	ret    
c0010c45:	90                   	nop

c0010c46 <VgaText::putchar(char)>:
c0010c46:	56                   	push   esi
c0010c47:	53                   	push   ebx
c0010c48:	83 ec 14             	sub    esp,0x14
c0010c4b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010c4f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010c53:	3c 5b                	cmp    al,0x5b
c0010c55:	75 21                	jne    c0010c78 <VgaText::putchar(char)+0x32>
c0010c57:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010c5e:	74 28                	je     c0010c88 <VgaText::putchar(char)+0x42>
c0010c60:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010c69:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010c73:	e9 e2 00 00 00       	jmp    c0010d5a <VgaText::putchar(char)+0x114>
c0010c78:	3c 1b                	cmp    al,0x1b
c0010c7a:	75 0c                	jne    c0010c88 <VgaText::putchar(char)+0x42>
c0010c7c:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010c83:	e9 d2 00 00 00       	jmp    c0010d5a <VgaText::putchar(char)+0x114>
c0010c88:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010c8e:	84 c9                	test   cl,cl
c0010c90:	0f 84 ab 00 00 00    	je     c0010d41 <VgaText::putchar(char)+0xfb>
c0010c96:	8d 50 c0             	lea    edx,[eax-0x40]
c0010c99:	80 fa 3e             	cmp    dl,0x3e
c0010c9c:	0f 87 82 00 00 00    	ja     c0010d24 <VgaText::putchar(char)+0xde>
c0010ca2:	3c 6d                	cmp    al,0x6d
c0010ca4:	75 4d                	jne    c0010cf3 <VgaText::putchar(char)+0xad>
c0010ca6:	31 f6                	xor    esi,esi
c0010ca8:	31 d2                	xor    edx,edx
c0010caa:	31 c0                	xor    eax,eax
c0010cac:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010cb2:	7e 30                	jle    c0010ce4 <VgaText::putchar(char)+0x9e>
c0010cb4:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010cbc:	80 fa 3b             	cmp    dl,0x3b
c0010cbf:	75 17                	jne    c0010cd8 <VgaText::putchar(char)+0x92>
c0010cc1:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010cc5:	50                   	push   eax
c0010cc6:	53                   	push   ebx
c0010cc7:	e8 ee f5 ff ff       	call   c00102ba <VgaText::doANSI_SGR(int)>
c0010ccc:	59                   	pop    ecx
c0010ccd:	31 d2                	xor    edx,edx
c0010ccf:	58                   	pop    eax
c0010cd0:	31 c0                	xor    eax,eax
c0010cd2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010cd6:	eb 09                	jmp    c0010ce1 <VgaText::putchar(char)+0x9b>
c0010cd8:	6b c0 0a             	imul   eax,eax,0xa
c0010cdb:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010cdf:	88 ca                	mov    dl,cl
c0010ce1:	46                   	inc    esi
c0010ce2:	eb c8                	jmp    c0010cac <VgaText::putchar(char)+0x66>
c0010ce4:	84 d2                	test   dl,dl
c0010ce6:	74 31                	je     c0010d19 <VgaText::putchar(char)+0xd3>
c0010ce8:	50                   	push   eax
c0010ce9:	53                   	push   ebx
c0010cea:	e8 cb f5 ff ff       	call   c00102ba <VgaText::doANSI_SGR(int)>
c0010cef:	58                   	pop    eax
c0010cf0:	5a                   	pop    edx
c0010cf1:	eb 26                	jmp    c0010d19 <VgaText::putchar(char)+0xd3>
c0010cf3:	3c 4a                	cmp    al,0x4a
c0010cf5:	75 22                	jne    c0010d19 <VgaText::putchar(char)+0xd3>
c0010cf7:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010cfe:	75 19                	jne    c0010d19 <VgaText::putchar(char)+0xd3>
c0010d00:	83 ec 0c             	sub    esp,0xc
c0010d03:	53                   	push   ebx
c0010d04:	e8 d9 fe ff ff       	call   c0010be2 <VgaText::clearScreen()>
c0010d09:	83 c4 0c             	add    esp,0xc
c0010d0c:	6a 00                	push   0x0
c0010d0e:	6a 00                	push   0x0
c0010d10:	53                   	push   ebx
c0010d11:	e8 ac f7 ff ff       	call   c00104c2 <VgaText::setCursor(int, int)>
c0010d16:	83 c4 10             	add    esp,0x10
c0010d19:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010d22:	eb 36                	jmp    c0010d5a <VgaText::putchar(char)+0x114>
c0010d24:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010d2a:	83 fa 0e             	cmp    edx,0xe
c0010d2d:	7f 2b                	jg     c0010d5a <VgaText::putchar(char)+0x114>
c0010d2f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010d32:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010d38:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010d3f:	eb 19                	jmp    c0010d5a <VgaText::putchar(char)+0x114>
c0010d41:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010d47:	0f be c0             	movsx  eax,al
c0010d4a:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010d50:	50                   	push   eax
c0010d51:	53                   	push   ebx
c0010d52:	e8 ab fa ff ff       	call   c0010802 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010d57:	83 c4 10             	add    esp,0x10
c0010d5a:	83 c4 14             	add    esp,0x14
c0010d5d:	5b                   	pop    ebx
c0010d5e:	5e                   	pop    esi
c0010d5f:	c3                   	ret    

c0010d60 <VgaText::puts(char const*)>:
c0010d60:	53                   	push   ebx
c0010d61:	83 ec 08             	sub    esp,0x8
c0010d64:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010d68:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010d6b:	84 c0                	test   al,al
c0010d6d:	74 12                	je     c0010d81 <VgaText::puts(char const*)+0x21>
c0010d6f:	43                   	inc    ebx
c0010d70:	51                   	push   ecx
c0010d71:	51                   	push   ecx
c0010d72:	50                   	push   eax
c0010d73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d77:	e8 ca fe ff ff       	call   c0010c46 <VgaText::putchar(char)>
c0010d7c:	83 c4 10             	add    esp,0x10
c0010d7f:	eb e7                	jmp    c0010d68 <VgaText::puts(char const*)+0x8>
c0010d81:	83 c4 08             	add    esp,0x8
c0010d84:	5b                   	pop    ebx
c0010d85:	c3                   	ret    

c0010d86 <VgaText::putx(unsigned int)>:
c0010d86:	57                   	push   edi
c0010d87:	b9 11 00 00 00       	mov    ecx,0x11
c0010d8c:	56                   	push   esi
c0010d8d:	be 7e 8e 02 c0       	mov    esi,0xc0028e7e
c0010d92:	53                   	push   ebx
c0010d93:	83 ec 20             	sub    esp,0x20
c0010d96:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010d9a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010d9e:	fc                   	cld    
c0010d9f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010da1:	be 08 00 00 00       	mov    esi,0x8
c0010da6:	50                   	push   eax
c0010da7:	50                   	push   eax
c0010da8:	89 d8                	mov    eax,ebx
c0010daa:	c1 e3 04             	shl    ebx,0x4
c0010dad:	c1 e8 1c             	shr    eax,0x1c
c0010db0:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010db5:	50                   	push   eax
c0010db6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010dba:	e8 87 fe ff ff       	call   c0010c46 <VgaText::putchar(char)>
c0010dbf:	83 c4 10             	add    esp,0x10
c0010dc2:	4e                   	dec    esi
c0010dc3:	75 e1                	jne    c0010da6 <VgaText::putx(unsigned int)+0x20>
c0010dc5:	83 c4 20             	add    esp,0x20
c0010dc8:	5b                   	pop    ebx
c0010dc9:	5e                   	pop    esi
c0010dca:	5f                   	pop    edi
c0010dcb:	c3                   	ret    

c0010dcc <VgaText::VgaText(char const*)>:
c0010dcc:	57                   	push   edi
c0010dcd:	56                   	push   esi
c0010dce:	53                   	push   ebx
c0010dcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dd3:	83 ec 08             	sub    esp,0x8
c0010dd6:	6a 00                	push   0x0
c0010dd8:	50                   	push   eax
c0010dd9:	e8 6e 05 00 00       	call   c001134c <UnixFile::UnixFile(int)>
c0010dde:	83 c4 10             	add    esp,0x10
c0010de1:	ba e4 8e 02 c0       	mov    edx,0xc0028ee4
c0010de6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dea:	89 10                	mov    DWORD PTR [eax],edx
c0010dec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010df0:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010dfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dfe:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010e08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e0c:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010e13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e17:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010e1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e22:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010e2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e30:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010e3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e3e:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e49:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e54:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010e5a:	bb a0 cc 02 c0       	mov    ebx,0xc002cca0
c0010e5f:	b8 08 00 00 00       	mov    eax,0x8
c0010e64:	fc                   	cld    
c0010e65:	89 d7                	mov    edi,edx
c0010e67:	89 de                	mov    esi,ebx
c0010e69:	89 c1                	mov    ecx,eax
c0010e6b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010e6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e71:	05 1e 10 00 00       	add    eax,0x101e
c0010e76:	83 ec 08             	sub    esp,0x8
c0010e79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e7d:	50                   	push   eax
c0010e7e:	e8 a7 f8 fe ff       	call   c000072a <strcpy>
c0010e83:	83 c4 10             	add    esp,0x10
c0010e86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e8a:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0010e94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e98:	83 c0 0c             	add    eax,0xc
c0010e9b:	83 ec 04             	sub    esp,0x4
c0010e9e:	68 00 0f 00 00       	push   0xf00
c0010ea3:	6a 00                	push   0x0
c0010ea5:	50                   	push   eax
c0010ea6:	e8 e0 f7 fe ff       	call   c000068b <memset>
c0010eab:	83 c4 10             	add    esp,0x10
c0010eae:	83 ec 04             	sub    esp,0x4
c0010eb1:	6a 00                	push   0x0
c0010eb3:	6a 07                	push   0x7
c0010eb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010eb9:	e8 b4 f4 ff ff       	call   c0010372 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010ebe:	83 c4 10             	add    esp,0x10
c0010ec1:	83 ec 08             	sub    esp,0x8
c0010ec4:	6a 02                	push   0x2
c0010ec6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010eca:	e8 49 fa ff ff       	call   c0010918 <VgaText::setCursorHeight(int)>
c0010ecf:	83 c4 10             	add    esp,0x10
c0010ed2:	83 ec 04             	sub    esp,0x4
c0010ed5:	6a 00                	push   0x0
c0010ed7:	6a 00                	push   0x0
c0010ed9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010edd:	e8 e0 f5 ff ff       	call   c00104c2 <VgaText::setCursor(int, int)>
c0010ee2:	83 c4 10             	add    esp,0x10
c0010ee5:	83 ec 08             	sub    esp,0x8
c0010ee8:	6a 01                	push   0x1
c0010eea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010eee:	e8 7d f3 ff ff       	call   c0010270 <VgaText::showCursor(bool)>
c0010ef3:	83 c4 10             	add    esp,0x10
c0010ef6:	83 ec 08             	sub    esp,0x8
c0010ef9:	6a 01                	push   0x1
c0010efb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010eff:	e8 7c f3 ff ff       	call   c0010280 <VgaText::disableBlink(bool)>
c0010f04:	83 c4 10             	add    esp,0x10
c0010f07:	83 ec 0c             	sub    esp,0xc
c0010f0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f0e:	e8 cf fc ff ff       	call   c0010be2 <VgaText::clearScreen()>
c0010f13:	83 c4 10             	add    esp,0x10
c0010f16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f1a:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010f21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f25:	05 9e 10 00 00       	add    eax,0x109e
c0010f2a:	83 ec 04             	sub    esp,0x4
c0010f2d:	68 96 00 00 00       	push   0x96
c0010f32:	6a 00                	push   0x0
c0010f34:	50                   	push   eax
c0010f35:	e8 51 f7 fe ff       	call   c000068b <memset>
c0010f3a:	83 c4 10             	add    esp,0x10
c0010f3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f41:	05 34 11 00 00       	add    eax,0x1134
c0010f46:	83 ec 04             	sub    esp,0x4
c0010f49:	68 2c 01 00 00       	push   0x12c
c0010f4e:	6a 00                	push   0x0
c0010f50:	50                   	push   eax
c0010f51:	e8 35 f7 fe ff       	call   c000068b <memset>
c0010f56:	83 c4 10             	add    esp,0x10
c0010f59:	90                   	nop
c0010f5a:	5b                   	pop    ebx
c0010f5b:	5e                   	pop    esi
c0010f5c:	5f                   	pop    edi
c0010f5d:	c3                   	ret    

c0010f5e <VgaText::receiveKey(unsigned char)>:
c0010f5e:	55                   	push   ebp
c0010f5f:	57                   	push   edi
c0010f60:	56                   	push   esi
c0010f61:	53                   	push   ebx
c0010f62:	83 ec 1c             	sub    esp,0x1c
c0010f65:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010f69:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010f6d:	84 db                	test   bl,bl
c0010f6f:	0f 84 c9 00 00 00    	je     c001103e <VgaText::receiveKey(unsigned char)+0xe0>
c0010f75:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010f7b:	80 fb 08             	cmp    bl,0x8
c0010f7e:	75 2c                	jne    c0010fac <VgaText::receiveKey(unsigned char)+0x4e>
c0010f80:	83 ec 0c             	sub    esp,0xc
c0010f83:	57                   	push   edi
c0010f84:	e8 1f f7 fe ff       	call   c00006a8 <strlen>
c0010f89:	83 c4 10             	add    esp,0x10
c0010f8c:	85 c0                	test   eax,eax
c0010f8e:	74 41                	je     c0010fd1 <VgaText::receiveKey(unsigned char)+0x73>
c0010f90:	50                   	push   eax
c0010f91:	50                   	push   eax
c0010f92:	6a 08                	push   0x8
c0010f94:	56                   	push   esi
c0010f95:	e8 ac fc ff ff       	call   c0010c46 <VgaText::putchar(char)>
c0010f9a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010f9d:	e8 06 f7 fe ff       	call   c00006a8 <strlen>
c0010fa2:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010faa:	eb 22                	jmp    c0010fce <VgaText::receiveKey(unsigned char)+0x70>
c0010fac:	0f be c3             	movsx  eax,bl
c0010faf:	52                   	push   edx
c0010fb0:	52                   	push   edx
c0010fb1:	50                   	push   eax
c0010fb2:	56                   	push   esi
c0010fb3:	e8 8e fc ff ff       	call   c0010c46 <VgaText::putchar(char)>
c0010fb8:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010fbc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010fc1:	59                   	pop    ecx
c0010fc2:	5d                   	pop    ebp
c0010fc3:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010fc7:	50                   	push   eax
c0010fc8:	57                   	push   edi
c0010fc9:	e8 13 f8 fe ff       	call   c00007e1 <strcat>
c0010fce:	83 c4 10             	add    esp,0x10
c0010fd1:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010fd8:	75 05                	jne    c0010fdf <VgaText::receiveKey(unsigned char)+0x81>
c0010fda:	80 fb 0a             	cmp    bl,0xa
c0010fdd:	75 53                	jne    c0011032 <VgaText::receiveKey(unsigned char)+0xd4>
c0010fdf:	83 ec 0c             	sub    esp,0xc
c0010fe2:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010fe8:	53                   	push   ebx
c0010fe9:	e8 ba f6 fe ff       	call   c00006a8 <strlen>
c0010fee:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010ff1:	89 c5                	mov    ebp,eax
c0010ff3:	e8 b0 f6 fe ff       	call   c00006a8 <strlen>
c0010ff8:	83 c4 10             	add    esp,0x10
c0010ffb:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010fff:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011004:	76 10                	jbe    c0011016 <VgaText::receiveKey(unsigned char)+0xb8>
c0011006:	83 ec 0c             	sub    esp,0xc
c0011009:	68 8f 8e 02 c0       	push   0xc0028e8f
c001100e:	e8 be 88 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c0011013:	83 c4 10             	add    esp,0x10
c0011016:	50                   	push   eax
c0011017:	50                   	push   eax
c0011018:	57                   	push   edi
c0011019:	53                   	push   ebx
c001101a:	e8 c2 f7 fe ff       	call   c00007e1 <strcat>
c001101f:	83 c4 0c             	add    esp,0xc
c0011022:	68 96 00 00 00       	push   0x96
c0011027:	6a 00                	push   0x0
c0011029:	57                   	push   edi
c001102a:	e8 5c f6 fe ff       	call   c000068b <memset>
c001102f:	83 c4 10             	add    esp,0x10
c0011032:	83 ec 0c             	sub    esp,0xc
c0011035:	56                   	push   esi
c0011036:	e8 d5 f9 ff ff       	call   c0010a10 <VgaText::doUpdate()>
c001103b:	83 c4 10             	add    esp,0x10
c001103e:	83 c4 1c             	add    esp,0x1c
c0011041:	5b                   	pop    ebx
c0011042:	5e                   	pop    esi
c0011043:	5f                   	pop    edi
c0011044:	5d                   	pop    ebp
c0011045:	c3                   	ret    

c0011046 <VgaText::write(unsigned long long, void*, int*)>:
c0011046:	55                   	push   ebp
c0011047:	57                   	push   edi
c0011048:	56                   	push   esi
c0011049:	53                   	push   ebx
c001104a:	83 ec 0c             	sub    esp,0xc
c001104d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011051:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011055:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011059:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0011060:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011063:	39 eb                	cmp    ebx,ebp
c0011065:	74 13                	je     c001107a <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011067:	43                   	inc    ebx
c0011068:	50                   	push   eax
c0011069:	50                   	push   eax
c001106a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001106e:	50                   	push   eax
c001106f:	56                   	push   esi
c0011070:	e8 d1 fb ff ff       	call   c0010c46 <VgaText::putchar(char)>
c0011075:	83 c4 10             	add    esp,0x10
c0011078:	eb e9                	jmp    c0011063 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001107a:	83 ec 0c             	sub    esp,0xc
c001107d:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011084:	56                   	push   esi
c0011085:	e8 86 f9 ff ff       	call   c0010a10 <VgaText::doUpdate()>
c001108a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001108e:	89 38                	mov    DWORD PTR [eax],edi
c0011090:	83 c4 1c             	add    esp,0x1c
c0011093:	31 c0                	xor    eax,eax
c0011095:	5b                   	pop    ebx
c0011096:	5e                   	pop    esi
c0011097:	5f                   	pop    edi
c0011098:	5d                   	pop    ebp
c0011099:	c3                   	ret    

c001109a <newTerminal(char*)>:
c001109a:	83 ec 28             	sub    esp,0x28
c001109d:	68 60 12 00 00       	push   0x1260
c00110a2:	e8 33 e4 ff ff       	call   c000f4da <malloc>
c00110a7:	5a                   	pop    edx
c00110a8:	59                   	pop    ecx
c00110a9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00110ad:	50                   	push   eax
c00110ae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00110b2:	e8 15 fd ff ff       	call   c0010dcc <VgaText::VgaText(char const*)>
c00110b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110bb:	83 c4 2c             	add    esp,0x2c
c00110be:	c3                   	ret    
c00110bf:	90                   	nop

c00110c0 <TSS::TSS()>:
c00110c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110c4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00110cb:	90                   	nop
c00110cc:	c3                   	ret    
c00110cd:	90                   	nop

c00110ce <TSS::setESP(unsigned long)>:
c00110ce:	55                   	push   ebp
c00110cf:	89 e5                	mov    ebp,esp
c00110d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110d7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00110da:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00110dd:	90                   	nop
c00110de:	5d                   	pop    ebp
c00110df:	c3                   	ret    

c00110e0 <TSS::flush()>:
c00110e0:	55                   	push   ebp
c00110e1:	89 e5                	mov    ebp,esp
c00110e3:	83 ec 10             	sub    esp,0x10
c00110e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00110eb:	83 c8 03             	or     eax,0x3
c00110ee:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00110f2:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00110f6:	66 89 d0             	mov    ax,dx
c00110f9:	0f 00 d8             	ltr    ax
c00110fc:	90                   	nop
c00110fd:	c9                   	leave  
c00110fe:	c3                   	ret    
c00110ff:	90                   	nop

c0011100 <TSS::setup(unsigned long, unsigned long)>:
c0011100:	55                   	push   ebp
c0011101:	89 e5                	mov    ebp,esp
c0011103:	83 ec 18             	sub    esp,0x18
c0011106:	83 ec 0c             	sub    esp,0xc
c0011109:	6a 68                	push   0x68
c001110b:	e8 ca e3 ff ff       	call   c000f4da <malloc>
c0011110:	83 c4 10             	add    esp,0x10
c0011113:	89 c2                	mov    edx,eax
c0011115:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011118:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001111b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001111e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011121:	83 ec 04             	sub    esp,0x4
c0011124:	6a 68                	push   0x68
c0011126:	6a 00                	push   0x0
c0011128:	50                   	push   eax
c0011129:	e8 5d f5 fe ff       	call   c000068b <memset>
c001112e:	83 c4 10             	add    esp,0x10
c0011131:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011134:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011137:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001113d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011140:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011143:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011149:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001114c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001114f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011152:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011155:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011158:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001115b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011161:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011164:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011167:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001116d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011170:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011173:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011179:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001117c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001117f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011185:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011188:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001118b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011191:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011194:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011197:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001119d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111a3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00111a6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00111a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111af:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00111b2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00111b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111bb:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00111c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111c8:	0f 20 da             	mov    edx,cr3
c00111cb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00111ce:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00111d1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00111d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111d7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111da:	83 ec 08             	sub    esp,0x8
c00111dd:	50                   	push   eax
c00111de:	8d 45 ec             	lea    eax,[ebp-0x14]
c00111e1:	50                   	push   eax
c00111e2:	e8 d1 da ff ff       	call   c000ecb8 <GDTEntry::setBase(unsigned int)>
c00111e7:	83 c4 10             	add    esp,0x10
c00111ea:	83 ec 08             	sub    esp,0x8
c00111ed:	6a 68                	push   0x68
c00111ef:	8d 45 ec             	lea    eax,[ebp-0x14]
c00111f2:	50                   	push   eax
c00111f3:	e8 dc da ff ff       	call   c000ecd4 <GDTEntry::setLimit(unsigned int)>
c00111f8:	83 c4 10             	add    esp,0x10
c00111fb:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00111ff:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011202:	83 e0 0f             	and    eax,0xf
c0011205:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011208:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001120b:	83 c8 40             	or     eax,0x40
c001120e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011211:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c0011216:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001121c:	05 78 01 00 00       	add    eax,0x178
c0011221:	83 ec 04             	sub    esp,0x4
c0011224:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011227:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001122a:	50                   	push   eax
c001122b:	e8 d8 da ff ff       	call   c000ed08 <GDT::addEntry(GDTEntry)>
c0011230:	83 c4 10             	add    esp,0x10
c0011233:	89 c2                	mov    edx,eax
c0011235:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011238:	89 10                	mov    DWORD PTR [eax],edx
c001123a:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c001123f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011245:	05 78 01 00 00       	add    eax,0x178
c001124a:	83 ec 0c             	sub    esp,0xc
c001124d:	50                   	push   eax
c001124e:	e8 f9 da ff ff       	call   c000ed4c <GDT::flush()>
c0011253:	83 c4 10             	add    esp,0x10
c0011256:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011259:	8b 00                	mov    eax,DWORD PTR [eax]
c001125b:	83 ec 08             	sub    esp,0x8
c001125e:	50                   	push   eax
c001125f:	68 f8 8e 02 c0       	push   0xc0028ef8
c0011264:	e8 16 15 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0011269:	83 c4 10             	add    esp,0x10
c001126c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001126f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011271:	c9                   	leave  
c0011272:	c3                   	ret    
c0011273:	90                   	nop

c0011274 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011278:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001127c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001127f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011284:	75 08                	jne    c001128e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011286:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001128c:	eb 38                	jmp    c00112c6 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001128e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011293:	75 17                	jne    c00112ac <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011295:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001129a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001129d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00112a3:	8b 10                	mov    edx,DWORD PTR [eax]
c00112a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00112a9:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00112ac:	89 c1                	mov    ecx,eax
c00112ae:	83 e1 fd             	and    ecx,0xfffffffd
c00112b1:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00112b7:	74 cd                	je     c0011286 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00112b9:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00112be:	83 e0 ef             	and    eax,0xffffffef
c00112c1:	83 f8 08             	cmp    eax,0x8
c00112c4:	76 c0                	jbe    c0011286 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00112c6:	31 c0                	xor    eax,eax
c00112c8:	c3                   	ret    
c00112c9:	90                   	nop

c00112ca <ReservedFilename::isAtty()>:
c00112ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112ce:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00112d1:	31 c0                	xor    eax,eax
c00112d3:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00112d9:	74 09                	je     c00112e4 <ReservedFilename::isAtty()+0x1a>
c00112db:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00112e1:	0f 94 c0             	sete   al
c00112e4:	c3                   	ret    
c00112e5:	90                   	nop

c00112e6 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00112e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00112ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00112f5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00112fa:	75 08                	jne    c0011304 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00112fc:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011302:	eb 3d                	jmp    c0011341 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011304:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011309:	75 17                	jne    c0011322 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001130b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011310:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011313:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011319:	8b 10                	mov    edx,DWORD PTR [eax]
c001131b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001131f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011322:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011327:	75 04                	jne    c001132d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011329:	89 0a                	mov    DWORD PTR [edx],ecx
c001132b:	eb 14                	jmp    c0011341 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001132d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011332:	74 c8                	je     c00112fc <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011334:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011339:	83 e0 ef             	and    eax,0xffffffef
c001133c:	83 f8 08             	cmp    eax,0x8
c001133f:	76 bb                	jbe    c00112fc <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011341:	31 c0                	xor    eax,eax
c0011343:	c3                   	ret    

c0011344 <UnixFile::getFileDescriptor()>:
c0011344:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011348:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001134b:	c3                   	ret    

c001134c <UnixFile::UnixFile(int)>:
c001134c:	53                   	push   ebx
c001134d:	83 ec 28             	sub    esp,0x28
c0011350:	ba e4 8f 02 c0       	mov    edx,0xc0028fe4
c0011355:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011359:	89 10                	mov    DWORD PTR [eax],edx
c001135b:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011363:	0f 8f 8c 01 00 00    	jg     c00114f5 <UnixFile::UnixFile(int)+0x1a9>
c0011369:	a1 80 bb 02 c0       	mov    eax,ds:0xc002bb80
c001136e:	8d 50 01             	lea    edx,[eax+0x1]
c0011371:	89 15 80 bb 02 c0    	mov    DWORD PTR ds:0xc002bb80,edx
c0011377:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001137b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001137e:	83 ec 08             	sub    esp,0x8
c0011381:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011385:	68 58 cd 02 c0       	push   0xc002cd58
c001138a:	e8 31 5f 01 00       	call   c00272c0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001138f:	83 c4 10             	add    esp,0x10
c0011392:	a0 54 cd 02 c0       	mov    al,ds:0xc002cd54
c0011397:	83 f0 01             	xor    eax,0x1
c001139a:	84 c0                	test   al,al
c001139c:	0f 84 54 01 00 00    	je     c00114f6 <UnixFile::UnixFile(int)+0x1aa>
c00113a2:	c6 05 54 cd 02 c0 01 	mov    BYTE PTR ds:0xc002cd54,0x1
c00113a9:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00113b1:	83 ec 0c             	sub    esp,0xc
c00113b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113b8:	e8 1d e1 ff ff       	call   c000f4da <malloc>
c00113bd:	83 c4 10             	add    esp,0x10
c00113c0:	89 c3                	mov    ebx,eax
c00113c2:	83 ec 08             	sub    esp,0x8
c00113c5:	68 03 ff ff 0f       	push   0xfffff03
c00113ca:	53                   	push   ebx
c00113cb:	e8 2c 01 00 00       	call   c00114fc <ReservedFilename::ReservedFilename(int)>
c00113d0:	83 c4 10             	add    esp,0x10
c00113d3:	89 1d 4c cd 02 c0    	mov    DWORD PTR ds:0xc002cd4c,ebx
c00113d9:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00113e1:	83 ec 0c             	sub    esp,0xc
c00113e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113e8:	e8 ed e0 ff ff       	call   c000f4da <malloc>
c00113ed:	83 c4 10             	add    esp,0x10
c00113f0:	89 c3                	mov    ebx,eax
c00113f2:	83 ec 08             	sub    esp,0x8
c00113f5:	68 01 ff ff 0f       	push   0xfffff01
c00113fa:	53                   	push   ebx
c00113fb:	e8 fc 00 00 00       	call   c00114fc <ReservedFilename::ReservedFilename(int)>
c0011400:	83 c4 10             	add    esp,0x10
c0011403:	89 1d 50 cd 02 c0    	mov    DWORD PTR ds:0xc002cd50,ebx
c0011409:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011411:	83 ec 0c             	sub    esp,0xc
c0011414:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011418:	e8 bd e0 ff ff       	call   c000f4da <malloc>
c001141d:	83 c4 10             	add    esp,0x10
c0011420:	89 c3                	mov    ebx,eax
c0011422:	83 ec 08             	sub    esp,0x8
c0011425:	68 00 ff ff 0f       	push   0xfffff00
c001142a:	53                   	push   ebx
c001142b:	e8 cc 00 00 00       	call   c00114fc <ReservedFilename::ReservedFilename(int)>
c0011430:	83 c4 10             	add    esp,0x10
c0011433:	89 1d 44 cd 02 c0    	mov    DWORD PTR ds:0xc002cd44,ebx
c0011439:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011441:	83 ec 0c             	sub    esp,0xc
c0011444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011448:	e8 8d e0 ff ff       	call   c000f4da <malloc>
c001144d:	83 c4 10             	add    esp,0x10
c0011450:	89 c3                	mov    ebx,eax
c0011452:	83 ec 08             	sub    esp,0x8
c0011455:	68 02 ff ff 0f       	push   0xfffff02
c001145a:	53                   	push   ebx
c001145b:	e8 9c 00 00 00       	call   c00114fc <ReservedFilename::ReservedFilename(int)>
c0011460:	83 c4 10             	add    esp,0x10
c0011463:	89 1d 48 cd 02 c0    	mov    DWORD PTR ds:0xc002cd48,ebx
c0011469:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011471:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011476:	7f 7e                	jg     c00114f6 <UnixFile::UnixFile(int)+0x1aa>
c0011478:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011480:	83 ec 0c             	sub    esp,0xc
c0011483:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011487:	e8 4e e0 ff ff       	call   c000f4da <malloc>
c001148c:	83 c4 10             	add    esp,0x10
c001148f:	89 c3                	mov    ebx,eax
c0011491:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011495:	05 10 ff ff 0f       	add    eax,0xfffff10
c001149a:	83 ec 08             	sub    esp,0x8
c001149d:	50                   	push   eax
c001149e:	53                   	push   ebx
c001149f:	e8 58 00 00 00       	call   c00114fc <ReservedFilename::ReservedFilename(int)>
c00114a4:	83 c4 10             	add    esp,0x10
c00114a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114ab:	89 1c 85 20 cd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd32e0],ebx
c00114b2:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00114ba:	83 ec 0c             	sub    esp,0xc
c00114bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00114c1:	e8 14 e0 ff ff       	call   c000f4da <malloc>
c00114c6:	83 c4 10             	add    esp,0x10
c00114c9:	89 c3                	mov    ebx,eax
c00114cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114cf:	05 20 ff ff 0f       	add    eax,0xfffff20
c00114d4:	83 ec 08             	sub    esp,0x8
c00114d7:	50                   	push   eax
c00114d8:	53                   	push   ebx
c00114d9:	e8 1e 00 00 00       	call   c00114fc <ReservedFilename::ReservedFilename(int)>
c00114de:	83 c4 10             	add    esp,0x10
c00114e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114e5:	89 1c 85 e0 cc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3320],ebx
c00114ec:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00114f0:	e9 7c ff ff ff       	jmp    c0011471 <UnixFile::UnixFile(int)+0x125>
c00114f5:	90                   	nop
c00114f6:	83 c4 28             	add    esp,0x28
c00114f9:	5b                   	pop    ebx
c00114fa:	c3                   	ret    
c00114fb:	90                   	nop

c00114fc <ReservedFilename::ReservedFilename(int)>:
c00114fc:	83 ec 0c             	sub    esp,0xc
c00114ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011503:	83 ec 08             	sub    esp,0x8
c0011506:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001150a:	50                   	push   eax
c001150b:	e8 3c fe ff ff       	call   c001134c <UnixFile::UnixFile(int)>
c0011510:	83 c4 10             	add    esp,0x10
c0011513:	ba 00 90 02 c0       	mov    edx,0xc0029000
c0011518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001151c:	89 10                	mov    DWORD PTR [eax],edx
c001151e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011522:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011526:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011529:	90                   	nop
c001152a:	83 c4 0c             	add    esp,0xc
c001152d:	c3                   	ret    

c001152e <UnixFile::~UnixFile()>:
c001152e:	83 ec 1c             	sub    esp,0x1c
c0011531:	ba e4 8f 02 c0       	mov    edx,0xc0028fe4
c0011536:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001153a:	89 10                	mov    DWORD PTR [eax],edx
c001153c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011540:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011543:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011548:	7f 73                	jg     c00115bd <UnixFile::~UnixFile()+0x8f>
c001154a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011552:	83 ec 0c             	sub    esp,0xc
c0011555:	68 58 cd 02 c0       	push   0xc002cd58
c001155a:	e8 35 5e 01 00       	call   c0027394 <LinkedList<UnixFile>::getFirstElement()>
c001155f:	83 c4 10             	add    esp,0x10
c0011562:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011566:	83 ec 0c             	sub    esp,0xc
c0011569:	68 58 cd 02 c0       	push   0xc002cd58
c001156e:	e8 29 5e 01 00       	call   c002739c <LinkedList<UnixFile>::removeFirst()>
c0011573:	83 c4 10             	add    esp,0x10
c0011576:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001157a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001157e:	74 40                	je     c00115c0 <UnixFile::~UnixFile()+0x92>
c0011580:	83 ec 08             	sub    esp,0x8
c0011583:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011587:	68 58 cd 02 c0       	push   0xc002cd58
c001158c:	e8 2f 5d 01 00       	call   c00272c0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011591:	83 c4 10             	add    esp,0x10
c0011594:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011598:	8d 50 01             	lea    edx,[eax+0x1]
c001159b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001159f:	3d 88 13 00 00       	cmp    eax,0x1388
c00115a4:	0f 94 c0             	sete   al
c00115a7:	84 c0                	test   al,al
c00115a9:	74 a7                	je     c0011552 <UnixFile::~UnixFile()+0x24>
c00115ab:	83 ec 0c             	sub    esp,0xc
c00115ae:	68 bc 8f 02 c0       	push   0xc0028fbc
c00115b3:	e8 19 83 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c00115b8:	83 c4 10             	add    esp,0x10
c00115bb:	eb 95                	jmp    c0011552 <UnixFile::~UnixFile()+0x24>
c00115bd:	90                   	nop
c00115be:	eb 01                	jmp    c00115c1 <UnixFile::~UnixFile()+0x93>
c00115c0:	90                   	nop
c00115c1:	90                   	nop
c00115c2:	83 c4 1c             	add    esp,0x1c
c00115c5:	c3                   	ret    

c00115c6 <UnixFile::~UnixFile()>:
c00115c6:	83 ec 0c             	sub    esp,0xc
c00115c9:	83 ec 0c             	sub    esp,0xc
c00115cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115d0:	e8 59 ff ff ff       	call   c001152e <UnixFile::~UnixFile()>
c00115d5:	83 c4 10             	add    esp,0x10
c00115d8:	83 ec 08             	sub    esp,0x8
c00115db:	6a 0c                	push   0xc
c00115dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115e1:	e8 b9 10 00 00       	call   c001269f <operator delete(void*, unsigned long)>
c00115e6:	83 c4 10             	add    esp,0x10
c00115e9:	83 c4 0c             	add    esp,0xc
c00115ec:	c3                   	ret    
c00115ed:	90                   	nop

c00115ee <ReservedFilename::~ReservedFilename()>:
c00115ee:	83 ec 0c             	sub    esp,0xc
c00115f1:	ba 00 90 02 c0       	mov    edx,0xc0029000
c00115f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115fa:	89 10                	mov    DWORD PTR [eax],edx
c00115fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011600:	83 ec 0c             	sub    esp,0xc
c0011603:	50                   	push   eax
c0011604:	e8 25 ff ff ff       	call   c001152e <UnixFile::~UnixFile()>
c0011609:	83 c4 10             	add    esp,0x10
c001160c:	90                   	nop
c001160d:	83 c4 0c             	add    esp,0xc
c0011610:	c3                   	ret    
c0011611:	90                   	nop

c0011612 <ReservedFilename::~ReservedFilename()>:
c0011612:	83 ec 0c             	sub    esp,0xc
c0011615:	83 ec 0c             	sub    esp,0xc
c0011618:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001161c:	e8 cd ff ff ff       	call   c00115ee <ReservedFilename::~ReservedFilename()>
c0011621:	83 c4 10             	add    esp,0x10
c0011624:	83 ec 08             	sub    esp,0x8
c0011627:	6a 0c                	push   0xc
c0011629:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001162d:	e8 6d 10 00 00       	call   c001269f <operator delete(void*, unsigned long)>
c0011632:	83 c4 10             	add    esp,0x10
c0011635:	83 c4 0c             	add    esp,0xc
c0011638:	c3                   	ret    

c0011639 <getFromFileDescriptor(int)>:
c0011639:	53                   	push   ebx
c001163a:	83 ec 08             	sub    esp,0x8
c001163d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011641:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011647:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001164d:	7f 2c                	jg     c001167b <getFromFileDescriptor(int)+0x42>
c001164f:	83 ec 0c             	sub    esp,0xc
c0011652:	68 58 cd 02 c0       	push   0xc002cd58
c0011657:	e8 38 5d 01 00       	call   c0027394 <LinkedList<UnixFile>::getFirstElement()>
c001165c:	83 c4 10             	add    esp,0x10
c001165f:	85 c0                	test   eax,eax
c0011661:	75 04                	jne    c0011667 <getFromFileDescriptor(int)+0x2e>
c0011663:	31 c0                	xor    eax,eax
c0011665:	eb 6e                	jmp    c00116d5 <getFromFileDescriptor(int)+0x9c>
c0011667:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001166a:	74 69                	je     c00116d5 <getFromFileDescriptor(int)+0x9c>
c001166c:	52                   	push   edx
c001166d:	52                   	push   edx
c001166e:	50                   	push   eax
c001166f:	68 58 cd 02 c0       	push   0xc002cd58
c0011674:	e8 c5 5d 01 00       	call   c002743e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011679:	eb e1                	jmp    c001165c <getFromFileDescriptor(int)+0x23>
c001167b:	a1 4c cd 02 c0       	mov    eax,ds:0xc002cd4c
c0011680:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011686:	74 4d                	je     c00116d5 <getFromFileDescriptor(int)+0x9c>
c0011688:	a1 50 cd 02 c0       	mov    eax,ds:0xc002cd50
c001168d:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011693:	74 40                	je     c00116d5 <getFromFileDescriptor(int)+0x9c>
c0011695:	a1 48 cd 02 c0       	mov    eax,ds:0xc002cd48
c001169a:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00116a0:	74 33                	je     c00116d5 <getFromFileDescriptor(int)+0x9c>
c00116a2:	a1 44 cd 02 c0       	mov    eax,ds:0xc002cd44
c00116a7:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00116ad:	74 26                	je     c00116d5 <getFromFileDescriptor(int)+0x9c>
c00116af:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00116b5:	83 f8 08             	cmp    eax,0x8
c00116b8:	77 09                	ja     c00116c3 <getFromFileDescriptor(int)+0x8a>
c00116ba:	8b 04 85 20 cd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd32e0]
c00116c1:	eb 12                	jmp    c00116d5 <getFromFileDescriptor(int)+0x9c>
c00116c3:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00116c9:	83 fb 08             	cmp    ebx,0x8
c00116cc:	77 95                	ja     c0011663 <getFromFileDescriptor(int)+0x2a>
c00116ce:	8b 04 9d e0 cc 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3320]
c00116d5:	83 c4 08             	add    esp,0x8
c00116d8:	5b                   	pop    ebx
c00116d9:	c3                   	ret    

c00116da <__static_initialization_and_destruction_0(int, int)>:
c00116da:	83 ec 0c             	sub    esp,0xc
c00116dd:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00116e2:	75 34                	jne    c0011718 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00116e4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00116ec:	75 2a                	jne    c0011718 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00116ee:	83 ec 0c             	sub    esp,0xc
c00116f1:	68 58 cd 02 c0       	push   0xc002cd58
c00116f6:	e8 6d 5b 01 00       	call   c0027268 <LinkedList<UnixFile>::LinkedList()>
c00116fb:	83 c4 10             	add    esp,0x10
c00116fe:	83 ec 04             	sub    esp,0x4
c0011701:	68 04 bb 02 c0       	push   0xc002bb04
c0011706:	68 58 cd 02 c0       	push   0xc002cd58
c001170b:	68 66 72 02 c0       	push   0xc0027266
c0011710:	e8 04 0f 00 00       	call   c0012619 <__cxa_atexit>
c0011715:	83 c4 10             	add    esp,0x10
c0011718:	90                   	nop
c0011719:	83 c4 0c             	add    esp,0xc
c001171c:	c3                   	ret    

c001171d <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001171d:	83 ec 0c             	sub    esp,0xc
c0011720:	83 ec 08             	sub    esp,0x8
c0011723:	68 ff ff 00 00       	push   0xffff
c0011728:	6a 01                	push   0x1
c001172a:	e8 ab ff ff ff       	call   c00116da <__static_initialization_and_destruction_0(int, int)>
c001172f:	83 c4 10             	add    esp,0x10
c0011732:	83 c4 0c             	add    esp,0xc
c0011735:	c3                   	ret    

c0011736 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011736:	53                   	push   ebx
c0011737:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001173b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001173f:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011745:	89 c8                	mov    eax,ecx
c0011747:	d1 e8                	shr    eax,1
c0011749:	03 05 88 bb 02 c0    	add    eax,DWORD PTR ds:0xc002bb88
c001174f:	83 e1 01             	and    ecx,0x1
c0011752:	8a 10                	mov    dl,BYTE PTR [eax]
c0011754:	75 09                	jne    c001175f <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011756:	83 e2 f0             	and    edx,0xfffffff0
c0011759:	09 da                	or     edx,ebx
c001175b:	88 10                	mov    BYTE PTR [eax],dl
c001175d:	5b                   	pop    ebx
c001175e:	c3                   	ret    
c001175f:	c1 e3 04             	shl    ebx,0x4
c0011762:	83 e2 0f             	and    edx,0xf
c0011765:	09 da                	or     edx,ebx
c0011767:	88 10                	mov    BYTE PTR [eax],dl
c0011769:	5b                   	pop    ebx
c001176a:	c3                   	ret    

c001176b <Virt::getPageState(unsigned long)>:
c001176b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001176f:	8b 0d 88 bb 02 c0    	mov    ecx,DWORD PTR ds:0xc002bb88
c0011775:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001177b:	89 d0                	mov    eax,edx
c001177d:	d1 e8                	shr    eax,1
c001177f:	83 e2 01             	and    edx,0x1
c0011782:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011785:	75 04                	jne    c001178b <Virt::getPageState(unsigned long)+0x20>
c0011787:	83 e0 0f             	and    eax,0xf
c001178a:	c3                   	ret    
c001178b:	c0 e8 04             	shr    al,0x4
c001178e:	c3                   	ret    

c001178f <Virt::allocateKernelVirtualPages(int)>:
c001178f:	55                   	push   ebp
c0011790:	31 ed                	xor    ebp,ebp
c0011792:	57                   	push   edi
c0011793:	56                   	push   esi
c0011794:	53                   	push   ebx
c0011795:	31 db                	xor    ebx,ebx
c0011797:	83 ec 1c             	sub    esp,0x1c
c001179a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001179e:	8b 3d 84 bb 02 c0    	mov    edi,DWORD PTR ds:0xc002bb84
c00117a4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00117a9:	57                   	push   edi
c00117aa:	e8 bc ff ff ff       	call   c001176b <Virt::getPageState(unsigned long)>
c00117af:	5a                   	pop    edx
c00117b0:	84 c0                	test   al,al
c00117b2:	75 3a                	jne    c00117ee <Virt::allocateKernelVirtualPages(int)+0x5f>
c00117b4:	85 db                	test   ebx,ebx
c00117b6:	75 02                	jne    c00117ba <Virt::allocateKernelVirtualPages(int)+0x2b>
c00117b8:	89 fd                	mov    ebp,edi
c00117ba:	43                   	inc    ebx
c00117bb:	39 f3                	cmp    ebx,esi
c00117bd:	74 5a                	je     c0011819 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00117bf:	47                   	inc    edi
c00117c0:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00117c6:	76 31                	jbe    c00117f9 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00117c8:	c7 05 84 bb 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002bb84,0xc8000
c00117d2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00117d7:	75 28                	jne    c0011801 <Virt::allocateKernelVirtualPages(int)+0x72>
c00117d9:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00117de:	bf 00 80 0c 00       	mov    edi,0xc8000
c00117e3:	57                   	push   edi
c00117e4:	e8 82 ff ff ff       	call   c001176b <Virt::getPageState(unsigned long)>
c00117e9:	5a                   	pop    edx
c00117ea:	84 c0                	test   al,al
c00117ec:	74 c6                	je     c00117b4 <Virt::allocateKernelVirtualPages(int)+0x25>
c00117ee:	31 db                	xor    ebx,ebx
c00117f0:	47                   	inc    edi
c00117f1:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00117f7:	77 cf                	ja     c00117c8 <Virt::allocateKernelVirtualPages(int)+0x39>
c00117f9:	89 3d 84 bb 02 c0    	mov    DWORD PTR ds:0xc002bb84,edi
c00117ff:	eb a8                	jmp    c00117a9 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011801:	83 ec 0c             	sub    esp,0xc
c0011804:	68 14 90 02 c0       	push   0xc0029014
c0011809:	e8 c3 80 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c001180e:	8b 3d 84 bb 02 c0    	mov    edi,DWORD PTR ds:0xc002bb84
c0011814:	83 c4 10             	add    esp,0x10
c0011817:	eb 90                	jmp    c00117a9 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011819:	89 2d 84 bb 02 c0    	mov    DWORD PTR ds:0xc002bb84,ebp
c001181f:	4b                   	dec    ebx
c0011820:	74 5f                	je     c0011881 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011822:	85 f6                	test   esi,esi
c0011824:	74 3d                	je     c0011863 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011826:	89 e8                	mov    eax,ebp
c0011828:	31 db                	xor    ebx,ebx
c001182a:	8d 7e ff             	lea    edi,[esi-0x1]
c001182d:	eb 14                	jmp    c0011843 <Virt::allocateKernelVirtualPages(int)+0xb4>
c001182f:	6a 01                	push   0x1
c0011831:	43                   	inc    ebx
c0011832:	50                   	push   eax
c0011833:	e8 fe fe ff ff       	call   c0011736 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011838:	58                   	pop    eax
c0011839:	39 f3                	cmp    ebx,esi
c001183b:	5a                   	pop    edx
c001183c:	74 25                	je     c0011863 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001183e:	a1 84 bb 02 c0       	mov    eax,ds:0xc002bb84
c0011843:	8d 50 01             	lea    edx,[eax+0x1]
c0011846:	85 db                	test   ebx,ebx
c0011848:	89 15 84 bb 02 c0    	mov    DWORD PTR ds:0xc002bb84,edx
c001184e:	74 20                	je     c0011870 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011850:	39 df                	cmp    edi,ebx
c0011852:	75 db                	jne    c001182f <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011854:	6a 03                	push   0x3
c0011856:	43                   	inc    ebx
c0011857:	50                   	push   eax
c0011858:	e8 d9 fe ff ff       	call   c0011736 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001185d:	59                   	pop    ecx
c001185e:	39 f3                	cmp    ebx,esi
c0011860:	58                   	pop    eax
c0011861:	75 db                	jne    c001183e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011863:	83 c4 1c             	add    esp,0x1c
c0011866:	89 e8                	mov    eax,ebp
c0011868:	5b                   	pop    ebx
c0011869:	c1 e0 0c             	shl    eax,0xc
c001186c:	5e                   	pop    esi
c001186d:	5f                   	pop    edi
c001186e:	5d                   	pop    ebp
c001186f:	c3                   	ret    
c0011870:	6a 02                	push   0x2
c0011872:	bb 01 00 00 00       	mov    ebx,0x1
c0011877:	50                   	push   eax
c0011878:	e8 b9 fe ff ff       	call   c0011736 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001187d:	58                   	pop    eax
c001187e:	5a                   	pop    edx
c001187f:	eb bd                	jmp    c001183e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011881:	6a 04                	push   0x4
c0011883:	8d 45 01             	lea    eax,[ebp+0x1]
c0011886:	55                   	push   ebp
c0011887:	a3 84 bb 02 c0       	mov    ds:0xc002bb84,eax
c001188c:	e8 a5 fe ff ff       	call   c0011736 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011891:	59                   	pop    ecx
c0011892:	89 e8                	mov    eax,ebp
c0011894:	5b                   	pop    ebx
c0011895:	c1 e0 0c             	shl    eax,0xc
c0011898:	83 c4 1c             	add    esp,0x1c
c001189b:	5b                   	pop    ebx
c001189c:	5e                   	pop    esi
c001189d:	5f                   	pop    edi
c001189e:	5d                   	pop    ebp
c001189f:	c3                   	ret    

c00118a0 <Virt::virtualMemorySetup()>:
c00118a0:	53                   	push   ebx
c00118a1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00118a6:	83 ec 08             	sub    esp,0x8
c00118a9:	6a 0f                	push   0xf
c00118ab:	53                   	push   ebx
c00118ac:	43                   	inc    ebx
c00118ad:	e8 84 fe ff ff       	call   c0011736 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00118b2:	59                   	pop    ecx
c00118b3:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00118b9:	58                   	pop    eax
c00118ba:	75 ed                	jne    c00118a9 <Virt::virtualMemorySetup()+0x9>
c00118bc:	83 ec 08             	sub    esp,0x8
c00118bf:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00118c4:	68 00 00 00 c8       	push   0xc8000000
c00118c9:	68 9b 91 02 c0       	push   0xc002919b
c00118ce:	e8 ac 0e 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c00118d3:	58                   	pop    eax
c00118d4:	5a                   	pop    edx
c00118d5:	68 00 f0 ff ef       	push   0xeffff000
c00118da:	68 af 91 02 c0       	push   0xc00291af
c00118df:	e8 9b 0e 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c00118e4:	83 c4 10             	add    esp,0x10
c00118e7:	83 ec 08             	sub    esp,0x8
c00118ea:	6a 00                	push   0x0
c00118ec:	53                   	push   ebx
c00118ed:	43                   	inc    ebx
c00118ee:	e8 43 fe ff ff       	call   c0011736 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00118f3:	83 c4 10             	add    esp,0x10
c00118f6:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00118fc:	75 e9                	jne    c00118e7 <Virt::virtualMemorySetup()+0x47>
c00118fe:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011903:	83 ec 08             	sub    esp,0x8
c0011906:	6a 0f                	push   0xf
c0011908:	53                   	push   ebx
c0011909:	43                   	inc    ebx
c001190a:	e8 27 fe ff ff       	call   c0011736 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001190f:	83 c4 10             	add    esp,0x10
c0011912:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011918:	75 e9                	jne    c0011903 <Virt::virtualMemorySetup()+0x63>
c001191a:	83 c4 08             	add    esp,0x8
c001191d:	5b                   	pop    ebx
c001191e:	c3                   	ret    

c001191f <Virt::getAKernelVAS()>:
c001191f:	a1 64 cd 02 c0       	mov    eax,ds:0xc002cd64
c0011924:	c3                   	ret    

c0011925 <Virt::setupPageSwapping(int)>:
c0011925:	57                   	push   edi
c0011926:	56                   	push   esi
c0011927:	53                   	push   ebx
c0011928:	83 ec 1c             	sub    esp,0x1c
c001192b:	68 14 01 00 00       	push   0x114
c0011930:	e8 a5 db ff ff       	call   c000f4da <malloc>
c0011935:	83 c4 0c             	add    esp,0xc
c0011938:	89 c6                	mov    esi,eax
c001193a:	ff 35 34 e1 02 c0    	push   DWORD PTR ds:0xc002e134
c0011940:	68 c3 91 02 c0       	push   0xc00291c3
c0011945:	50                   	push   eax
c0011946:	e8 8d 13 00 00       	call   c0012cd8 <File::File(char const*, Process*)>
c001194b:	89 34 24             	mov    DWORD PTR [esp],esi
c001194e:	e8 61 15 00 00       	call   c0012eb4 <File::unlink()>
c0011953:	58                   	pop    eax
c0011954:	5a                   	pop    edx
c0011955:	6a 12                	push   0x12
c0011957:	56                   	push   esi
c0011958:	e8 df 13 00 00       	call   c0012d3c <File::open(FileOpenMode)>
c001195d:	83 c4 10             	add    esp,0x10
c0011960:	85 c0                	test   eax,eax
c0011962:	0f 85 ca 00 00 00    	jne    c0011a32 <Virt::setupPageSwapping(int)+0x10d>
c0011968:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001196c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011974:	c1 e3 08             	shl    ebx,0x8
c0011977:	83 ec 0c             	sub    esp,0xc
c001197a:	68 00 00 01 00       	push   0x10000
c001197f:	e8 56 db ff ff       	call   c000f4da <malloc>
c0011984:	83 c4 0c             	add    esp,0xc
c0011987:	89 c7                	mov    edi,eax
c0011989:	68 00 00 01 00       	push   0x10000
c001198e:	6a 00                	push   0x0
c0011990:	50                   	push   eax
c0011991:	e8 f5 ec fe ff       	call   c000068b <memset>
c0011996:	83 c4 10             	add    esp,0x10
c0011999:	85 db                	test   ebx,ebx
c001199b:	79 03                	jns    c00119a0 <Virt::setupPageSwapping(int)+0x7b>
c001199d:	83 c3 0f             	add    ebx,0xf
c00119a0:	c1 fb 04             	sar    ebx,0x4
c00119a3:	4b                   	dec    ebx
c00119a4:	83 fb ff             	cmp    ebx,0xffffffff
c00119a7:	74 4b                	je     c00119f4 <Virt::setupPageSwapping(int)+0xcf>
c00119a9:	83 ec 0c             	sub    esp,0xc
c00119ac:	8b 06                	mov    eax,DWORD PTR [esi]
c00119ae:	8d 54 24 18          	lea    edx,[esp+0x18]
c00119b2:	52                   	push   edx
c00119b3:	57                   	push   edi
c00119b4:	6a 00                	push   0x0
c00119b6:	68 00 00 01 00       	push   0x10000
c00119bb:	56                   	push   esi
c00119bc:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00119bf:	83 c4 20             	add    esp,0x20
c00119c2:	85 c0                	test   eax,eax
c00119c4:	75 59                	jne    c0011a1f <Virt::setupPageSwapping(int)+0xfa>
c00119c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119ca:	3d 00 00 01 00       	cmp    eax,0x10000
c00119cf:	74 d2                	je     c00119a3 <Virt::setupPageSwapping(int)+0x7e>
c00119d1:	83 ec 08             	sub    esp,0x8
c00119d4:	4b                   	dec    ebx
c00119d5:	50                   	push   eax
c00119d6:	68 16 92 02 c0       	push   0xc0029216
c00119db:	e8 9f 0d 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c00119e0:	c7 04 24 1f 92 02 c0 	mov    DWORD PTR [esp],0xc002921f
c00119e7:	e8 e5 7e 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c00119ec:	83 c4 10             	add    esp,0x10
c00119ef:	83 fb ff             	cmp    ebx,0xffffffff
c00119f2:	75 b5                	jne    c00119a9 <Virt::setupPageSwapping(int)+0x84>
c00119f4:	83 ec 0c             	sub    esp,0xc
c00119f7:	56                   	push   esi
c00119f8:	e8 9d 13 00 00       	call   c0012d9a <File::close()>
c00119fd:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011a00:	e8 f5 da ff ff       	call   c000f4fa <rfree>
c0011a05:	83 c4 10             	add    esp,0x10
c0011a08:	85 f6                	test   esi,esi
c0011a0a:	74 0c                	je     c0011a18 <Virt::setupPageSwapping(int)+0xf3>
c0011a0c:	83 ec 0c             	sub    esp,0xc
c0011a0f:	8b 06                	mov    eax,DWORD PTR [esi]
c0011a11:	56                   	push   esi
c0011a12:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011a15:	83 c4 10             	add    esp,0x10
c0011a18:	83 c4 10             	add    esp,0x10
c0011a1b:	5b                   	pop    ebx
c0011a1c:	5e                   	pop    esi
c0011a1d:	5f                   	pop    edi
c0011a1e:	c3                   	ret    
c0011a1f:	83 ec 08             	sub    esp,0x8
c0011a22:	50                   	push   eax
c0011a23:	68 fe 91 02 c0       	push   0xc00291fe
c0011a28:	e8 52 0d 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0011a2d:	83 c4 10             	add    esp,0x10
c0011a30:	eb 94                	jmp    c00119c6 <Virt::setupPageSwapping(int)+0xa1>
c0011a32:	83 ec 08             	sub    esp,0x8
c0011a35:	50                   	push   eax
c0011a36:	68 da 91 02 c0       	push   0xc00291da
c0011a3b:	e8 3f 0d 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0011a40:	c7 04 24 e3 91 02 c0 	mov    DWORD PTR [esp],0xc00291e3
c0011a47:	e8 85 7e 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c0011a4c:	83 c4 10             	add    esp,0x10
c0011a4f:	e9 14 ff ff ff       	jmp    c0011968 <Virt::setupPageSwapping(int)+0x43>

c0011a54 <VAS::VAS()>:
c0011a54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a58:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011a5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a63:	a3 64 cd 02 c0       	mov    ds:0xc002cd64,eax
c0011a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a6c:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011a70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a74:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011a77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a7b:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011a82:	90                   	nop
c0011a83:	c3                   	ret    

c0011a84 <VAS::VAS(VAS*)>:
c0011a84:	83 ec 0c             	sub    esp,0xc
c0011a87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a8b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011a92:	83 ec 0c             	sub    esp,0xc
c0011a95:	68 34 90 02 c0       	push   0xc0029034
c0011a9a:	e8 32 7e 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c0011a9f:	83 c4 10             	add    esp,0x10
c0011aa2:	90                   	nop
c0011aa3:	83 c4 0c             	add    esp,0xc
c0011aa6:	c3                   	ret    
c0011aa7:	90                   	nop

c0011aa8 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011aa8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011aac:	89 c2                	mov    edx,eax
c0011aae:	c1 e8 0a             	shr    eax,0xa
c0011ab1:	c1 ea 16             	shr    edx,0x16
c0011ab4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011ab9:	19 c9                	sbb    ecx,ecx
c0011abb:	c1 e2 0c             	shl    edx,0xc
c0011abe:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011ac4:	25 fc 0f 00 00       	and    eax,0xffc
c0011ac9:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011ad0:	01 d0                	add    eax,edx
c0011ad2:	c3                   	ret    
c0011ad3:	90                   	nop

c0011ad4 <VAS::getPageTableEntry(unsigned long)>:
c0011ad4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ad8:	89 ca                	mov    edx,ecx
c0011ada:	c1 e9 0a             	shr    ecx,0xa
c0011add:	c1 ea 16             	shr    edx,0x16
c0011ae0:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011ae6:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011aec:	c1 e0 0c             	shl    eax,0xc
c0011aef:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011af2:	c3                   	ret    

c0011af3 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011af3:	57                   	push   edi
c0011af4:	56                   	push   esi
c0011af5:	be 01 00 00 00       	mov    esi,0x1
c0011afa:	53                   	push   ebx
c0011afb:	83 ec 10             	sub    esp,0x10
c0011afe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b02:	c1 eb 0c             	shr    ebx,0xc
c0011b05:	eb 3f                	jmp    c0011b46 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011b07:	e8 13 fe ff ff       	call   c001191f <Virt::getAKernelVAS()>
c0011b0c:	83 ec 08             	sub    esp,0x8
c0011b0f:	57                   	push   edi
c0011b10:	50                   	push   eax
c0011b11:	e8 be ff ff ff       	call   c0011ad4 <VAS::getPageTableEntry(unsigned long)>
c0011b16:	83 c4 10             	add    esp,0x10
c0011b19:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b1b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011b1f:	f6 c4 04             	test   ah,0x4
c0011b22:	75 5f                	jne    c0011b83 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011b24:	80 fa 04             	cmp    dl,0x4
c0011b27:	74 78                	je     c0011ba1 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011b29:	80 fa 02             	cmp    dl,0x2
c0011b2c:	0f 84 88 00 00 00    	je     c0011bba <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011b32:	80 fa 03             	cmp    dl,0x3
c0011b35:	0f 84 ad 00 00 00    	je     c0011be8 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011b3b:	fe ca                	dec    dl
c0011b3d:	0f 84 92 00 00 00    	je     c0011bd5 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011b43:	43                   	inc    ebx
c0011b44:	31 f6                	xor    esi,esi
c0011b46:	53                   	push   ebx
c0011b47:	e8 1f fc ff ff       	call   c001176b <Virt::getPageState(unsigned long)>
c0011b4c:	5f                   	pop    edi
c0011b4d:	89 df                	mov    edi,ebx
c0011b4f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011b53:	c1 e7 0c             	shl    edi,0xc
c0011b56:	84 c0                	test   al,al
c0011b58:	75 ad                	jne    c0011b07 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011b5a:	83 ec 0c             	sub    esp,0xc
c0011b5d:	68 25 92 02 c0       	push   0xc0029225
c0011b62:	e8 6a 7d 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c0011b67:	e8 b3 fd ff ff       	call   c001191f <Virt::getAKernelVAS()>
c0011b6c:	5a                   	pop    edx
c0011b6d:	59                   	pop    ecx
c0011b6e:	57                   	push   edi
c0011b6f:	50                   	push   eax
c0011b70:	e8 5f ff ff ff       	call   c0011ad4 <VAS::getPageTableEntry(unsigned long)>
c0011b75:	83 c4 10             	add    esp,0x10
c0011b78:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b7a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011b7e:	f6 c4 04             	test   ah,0x4
c0011b81:	74 c0                	je     c0011b43 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011b83:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011b87:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011b8c:	83 ec 0c             	sub    esp,0xc
c0011b8f:	50                   	push   eax
c0011b90:	e8 2e df ff ff       	call   c000fac3 <Phys::freePage(unsigned long)>
c0011b95:	83 c4 10             	add    esp,0x10
c0011b98:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011b9c:	80 fa 04             	cmp    dl,0x4
c0011b9f:	75 88                	jne    c0011b29 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011ba1:	89 f0                	mov    eax,esi
c0011ba3:	84 c0                	test   al,al
c0011ba5:	75 47                	jne    c0011bee <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011ba7:	c7 44 24 20 58 90 02 c0 	mov    DWORD PTR [esp+0x20],0xc0029058
c0011baf:	83 c4 10             	add    esp,0x10
c0011bb2:	5b                   	pop    ebx
c0011bb3:	5e                   	pop    esi
c0011bb4:	5f                   	pop    edi
c0011bb5:	e9 17 7d 00 00       	jmp    c00198d1 <Krnl::panic(char const*)>
c0011bba:	89 f0                	mov    eax,esi
c0011bbc:	84 c0                	test   al,al
c0011bbe:	75 15                	jne    c0011bd5 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011bc0:	83 ec 0c             	sub    esp,0xc
c0011bc3:	68 41 92 02 c0       	push   0xc0029241
c0011bc8:	e8 04 7d 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c0011bcd:	83 c4 10             	add    esp,0x10
c0011bd0:	e9 6e ff ff ff       	jmp    c0011b43 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011bd5:	83 ec 08             	sub    esp,0x8
c0011bd8:	6a 00                	push   0x0
c0011bda:	53                   	push   ebx
c0011bdb:	e8 56 fb ff ff       	call   c0011736 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011be0:	83 c4 10             	add    esp,0x10
c0011be3:	e9 5b ff ff ff       	jmp    c0011b43 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011be8:	89 f0                	mov    eax,esi
c0011bea:	84 c0                	test   al,al
c0011bec:	75 15                	jne    c0011c03 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011bee:	83 ec 08             	sub    esp,0x8
c0011bf1:	6a 00                	push   0x0
c0011bf3:	53                   	push   ebx
c0011bf4:	e8 3d fb ff ff       	call   c0011736 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bf9:	83 c4 10             	add    esp,0x10
c0011bfc:	83 c4 10             	add    esp,0x10
c0011bff:	5b                   	pop    ebx
c0011c00:	5e                   	pop    esi
c0011c01:	5f                   	pop    edi
c0011c02:	c3                   	ret    
c0011c03:	c7 44 24 20 5d 92 02 c0 	mov    DWORD PTR [esp+0x20],0xc002925d
c0011c0b:	83 c4 10             	add    esp,0x10
c0011c0e:	5b                   	pop    ebx
c0011c0f:	5e                   	pop    esi
c0011c10:	5f                   	pop    edi
c0011c11:	e9 bb 7c 00 00       	jmp    c00198d1 <Krnl::panic(char const*)>

c0011c16 <VAS::freeAllocatedPages(unsigned long)>:
c0011c16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011c1e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011c22:	74 09                	je     c0011c2d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011c24:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011c28:	e9 c6 fe ff ff       	jmp    c0011af3 <Virt::freeKernelVirtualPages(unsigned long)>
c0011c2d:	c7 44 24 04 7c 90 02 c0 	mov    DWORD PTR [esp+0x4],0xc002907c
c0011c35:	e9 45 0b 00 00       	jmp    c001277f <Dbg::kprintf(char const*, ...)>

c0011c3a <VAS::virtualToPhysical(unsigned long)>:
c0011c3a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011c3e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011c42:	e8 8d fe ff ff       	call   c0011ad4 <VAS::getPageTableEntry(unsigned long)>
c0011c47:	5a                   	pop    edx
c0011c48:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c4a:	59                   	pop    ecx
c0011c4b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c50:	c3                   	ret    
c0011c51:	90                   	nop

c0011c52 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011c52:	55                   	push   ebp
c0011c53:	57                   	push   edi
c0011c54:	56                   	push   esi
c0011c55:	53                   	push   ebx
c0011c56:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011c5a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011c5e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011c62:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011c66:	85 db                	test   ebx,ebx
c0011c68:	7e 22                	jle    c0011c8c <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011c6a:	c1 e3 0c             	shl    ebx,0xc
c0011c6d:	01 f3                	add    ebx,esi
c0011c6f:	56                   	push   esi
c0011c70:	81 c6 00 10 00 00    	add    esi,0x1000
c0011c76:	55                   	push   ebp
c0011c77:	e8 58 fe ff ff       	call   c0011ad4 <VAS::getPageTableEntry(unsigned long)>
c0011c7c:	5a                   	pop    edx
c0011c7d:	59                   	pop    ecx
c0011c7e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011c80:	21 f9                	and    ecx,edi
c0011c82:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011c86:	39 f3                	cmp    ebx,esi
c0011c88:	89 08                	mov    DWORD PTR [eax],ecx
c0011c8a:	75 e3                	jne    c0011c6f <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011c8c:	5b                   	pop    ebx
c0011c8d:	5e                   	pop    esi
c0011c8e:	5f                   	pop    edi
c0011c8f:	5d                   	pop    ebp
c0011c90:	c3                   	ret    
c0011c91:	90                   	nop

c0011c92 <VAS::setToWriteCombining(unsigned long, int)>:
c0011c92:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c0011c97:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c9d:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011ca4:	75 01                	jne    c0011ca7 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011ca6:	c3                   	ret    
c0011ca7:	68 80 00 00 00       	push   0x80
c0011cac:	6a ff                	push   0xffffffff
c0011cae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011cb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011cb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011cba:	e8 93 ff ff ff       	call   c0011c52 <VAS::reflagRange(unsigned long, int, int, int)>
c0011cbf:	83 c4 14             	add    esp,0x14
c0011cc2:	c3                   	ret    
c0011cc3:	90                   	nop

c0011cc4 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011cc4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011cc9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ccd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011cd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cd4:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0011cd7:	19 c0                	sbb    eax,eax
c0011cd9:	83 ca 03             	or     edx,0x3
c0011cdc:	83 e0 fc             	and    eax,0xfffffffc
c0011cdf:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011ce6:	0f 20 d8             	mov    eax,cr3
c0011ce9:	0f 22 d8             	mov    cr3,eax
c0011cec:	c3                   	ret    
c0011ced:	90                   	nop

c0011cee <VAS::~VAS()>:
c0011cee:	83 ec 2c             	sub    esp,0x2c
c0011cf1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011cf9:	e8 e8 b1 00 00       	call   c001cee6 <lockScheduler()>
c0011cfe:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011d03:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d05:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011d08:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011d0e:	83 ec 04             	sub    esp,0x4
c0011d11:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011d15:	6a 01                	push   0x1
c0011d17:	50                   	push   eax
c0011d18:	e8 a7 ff ff ff       	call   c0011cc4 <VAS::mapOtherVASIn(bool, VAS*)>
c0011d1d:	83 c4 10             	add    esp,0x10
c0011d20:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011d28:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011d30:	0f 8f d7 00 00 00    	jg     c0011e0d <VAS::~VAS()+0x11f>
c0011d36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d3a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011d3d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011d41:	c1 e2 02             	shl    edx,0x2
c0011d44:	01 d0                	add    eax,edx
c0011d46:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d48:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011d4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d50:	83 e0 01             	and    eax,0x1
c0011d53:	0f 84 ab 00 00 00    	je     c0011e04 <VAS::~VAS()+0x116>
c0011d59:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011d61:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011d69:	7f 75                	jg     c0011de0 <VAS::~VAS()+0xf2>
c0011d6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011d6f:	c1 e0 0a             	shl    eax,0xa
c0011d72:	89 c2                	mov    edx,eax
c0011d74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011d78:	01 d0                	add    eax,edx
c0011d7a:	c1 e0 0c             	shl    eax,0xc
c0011d7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d81:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011d86:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d88:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011d8b:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011d91:	83 ec 04             	sub    esp,0x4
c0011d94:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011d98:	6a 01                	push   0x1
c0011d9a:	50                   	push   eax
c0011d9b:	e8 08 fd ff ff       	call   c0011aa8 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011da0:	83 c4 10             	add    esp,0x10
c0011da3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011da7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011dab:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011db1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011db5:	25 01 04 00 00       	and    eax,0x401
c0011dba:	3d 01 04 00 00       	cmp    eax,0x401
c0011dbf:	75 19                	jne    c0011dda <VAS::~VAS()+0xec>
c0011dc1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011dc5:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011dca:	83 ec 0c             	sub    esp,0xc
c0011dcd:	50                   	push   eax
c0011dce:	e8 f0 dc ff ff       	call   c000fac3 <Phys::freePage(unsigned long)>
c0011dd3:	83 c4 10             	add    esp,0x10
c0011dd6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011dda:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011dde:	eb 81                	jmp    c0011d61 <VAS::~VAS()+0x73>
c0011de0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011de4:	25 00 04 00 00       	and    eax,0x400
c0011de9:	74 19                	je     c0011e04 <VAS::~VAS()+0x116>
c0011deb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011def:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011df4:	83 ec 0c             	sub    esp,0xc
c0011df7:	50                   	push   eax
c0011df8:	e8 c6 dc ff ff       	call   c000fac3 <Phys::freePage(unsigned long)>
c0011dfd:	83 c4 10             	add    esp,0x10
c0011e00:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011e04:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011e08:	e9 1b ff ff ff       	jmp    c0011d28 <VAS::~VAS()+0x3a>
c0011e0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e11:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011e14:	83 ec 0c             	sub    esp,0xc
c0011e17:	50                   	push   eax
c0011e18:	e8 d6 fc ff ff       	call   c0011af3 <Virt::freeKernelVirtualPages(unsigned long)>
c0011e1d:	83 c4 10             	add    esp,0x10
c0011e20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011e27:	83 ec 0c             	sub    esp,0xc
c0011e2a:	50                   	push   eax
c0011e2b:	e8 93 dc ff ff       	call   c000fac3 <Phys::freePage(unsigned long)>
c0011e30:	83 c4 10             	add    esp,0x10
c0011e33:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011e37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011e3b:	c1 e0 02             	shl    eax,0x2
c0011e3e:	83 ec 08             	sub    esp,0x8
c0011e41:	50                   	push   eax
c0011e42:	68 a0 90 02 c0       	push   0xc00290a0
c0011e47:	e8 33 09 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0011e4c:	83 c4 10             	add    esp,0x10
c0011e4f:	e8 94 b0 00 00       	call   c001cee8 <unlockScheduler()>
c0011e54:	90                   	nop
c0011e55:	83 c4 2c             	add    esp,0x2c
c0011e58:	c3                   	ret    
c0011e59:	90                   	nop

c0011e5a <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011e5a:	55                   	push   ebp
c0011e5b:	57                   	push   edi
c0011e5c:	56                   	push   esi
c0011e5d:	53                   	push   ebx
c0011e5e:	83 ec 1c             	sub    esp,0x1c
c0011e61:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011e65:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011e69:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011e6f:	77 08                	ja     c0011e79 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011e71:	0f 20 d8             	mov    eax,cr3
c0011e74:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011e77:	75 47                	jne    c0011ec0 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011e79:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e7d:	09 d8                	or     eax,ebx
c0011e7f:	a9 ff 0f 00 00       	test   eax,0xfff
c0011e84:	75 57                	jne    c0011edd <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011e86:	89 de                	mov    esi,ebx
c0011e88:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011e8b:	c1 ee 16             	shr    esi,0x16
c0011e8e:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011e95:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011e99:	74 54                	je     c0011eef <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011e9b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011e9f:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011ea5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011ea9:	c1 e6 0c             	shl    esi,0xc
c0011eac:	c1 eb 0a             	shr    ebx,0xa
c0011eaf:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011eb5:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011eb8:	83 c4 1c             	add    esp,0x1c
c0011ebb:	5b                   	pop    ebx
c0011ebc:	5e                   	pop    esi
c0011ebd:	5f                   	pop    edi
c0011ebe:	5d                   	pop    ebp
c0011ebf:	c3                   	ret    
c0011ec0:	83 ec 0c             	sub    esp,0xc
c0011ec3:	68 c0 90 02 c0       	push   0xc00290c0
c0011ec8:	e8 b2 08 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0011ecd:	83 c4 10             	add    esp,0x10
c0011ed0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ed4:	09 d8                	or     eax,ebx
c0011ed6:	a9 ff 0f 00 00       	test   eax,0xfff
c0011edb:	74 a9                	je     c0011e86 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011edd:	83 ec 0c             	sub    esp,0xc
c0011ee0:	68 28 91 02 c0       	push   0xc0029128
c0011ee5:	e8 e7 79 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c0011eea:	83 c4 10             	add    esp,0x10
c0011eed:	eb 97                	jmp    c0011e86 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011eef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011ef3:	e8 55 dc ff ff       	call   c000fb4d <Phys::allocatePage()>
c0011ef8:	89 c5                	mov    ebp,eax
c0011efa:	e8 20 fa ff ff       	call   c001191f <Virt::getAKernelVAS()>
c0011eff:	83 ec 0c             	sub    esp,0xc
c0011f02:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011f06:	6a 01                	push   0x1
c0011f08:	e8 82 f8 ff ff       	call   c001178f <Virt::allocateKernelVirtualPages(int)>
c0011f0d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011f14:	6a 01                	push   0x1
c0011f16:	50                   	push   eax
c0011f17:	55                   	push   ebp
c0011f18:	81 cd 07 04 00 00    	or     ebp,0x407
c0011f1e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011f22:	51                   	push   ecx
c0011f23:	e8 26 02 00 00       	call   c001214e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f28:	83 c4 1c             	add    esp,0x1c
c0011f2b:	68 00 10 00 00       	push   0x1000
c0011f30:	6a 00                	push   0x0
c0011f32:	50                   	push   eax
c0011f33:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011f37:	e8 4f e7 fe ff       	call   c000068b <memset>
c0011f3c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011f40:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011f43:	e8 ab fb ff ff       	call   c0011af3 <Virt::freeKernelVirtualPages(unsigned long)>
c0011f48:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011f4c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011f4f:	83 c4 10             	add    esp,0x10
c0011f52:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011f55:	e9 41 ff ff ff       	jmp    c0011e9b <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011f5a <VAS::allocatePages(int, int)>:
c0011f5a:	55                   	push   ebp
c0011f5b:	57                   	push   edi
c0011f5c:	56                   	push   esi
c0011f5d:	53                   	push   ebx
c0011f5e:	83 ec 1c             	sub    esp,0x1c
c0011f61:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011f65:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c0011f6a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f70:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011f76:	83 e0 01             	and    eax,0x1
c0011f79:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011f7d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011f81:	0f 85 cc 00 00 00    	jne    c0012053 <VAS::allocatePages(int, int)+0xf9>
c0011f87:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011f8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011f8e:	85 c0                	test   eax,eax
c0011f90:	0f 84 a1 00 00 00    	je     c0012037 <VAS::allocatePages(int, int)+0xdd>
c0011f96:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011f9a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f9e:	c1 e6 0c             	shl    esi,0xc
c0011fa1:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011fa5:	85 c0                	test   eax,eax
c0011fa7:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011faa:	7e 33                	jle    c0011fdf <VAS::allocatePages(int, int)+0x85>
c0011fac:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011fb0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011fb4:	81 cd 00 04 00 00    	or     ebp,0x400
c0011fba:	e8 8e db ff ff       	call   c000fb4d <Phys::allocatePage()>
c0011fbf:	55                   	push   ebp
c0011fc0:	53                   	push   ebx
c0011fc1:	50                   	push   eax
c0011fc2:	57                   	push   edi
c0011fc3:	e8 92 fe ff ff       	call   c0011e5a <VAS::mapPage(unsigned long, unsigned long, int)>
c0011fc8:	83 c4 10             	add    esp,0x10
c0011fcb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011fd0:	74 03                	je     c0011fd5 <VAS::allocatePages(int, int)+0x7b>
c0011fd2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011fd5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011fdb:	39 de                	cmp    esi,ebx
c0011fdd:	75 db                	jne    c0011fba <VAS::allocatePages(int, int)+0x60>
c0011fdf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011fe4:	75 12                	jne    c0011ff8 <VAS::allocatePages(int, int)+0x9e>
c0011fe6:	0f 20 d8             	mov    eax,cr3
c0011fe9:	0f 22 d8             	mov    cr3,eax
c0011fec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ff0:	83 c4 1c             	add    esp,0x1c
c0011ff3:	5b                   	pop    ebx
c0011ff4:	5e                   	pop    esi
c0011ff5:	5f                   	pop    edi
c0011ff6:	5d                   	pop    ebp
c0011ff7:	c3                   	ret    
c0011ff8:	c1 ee 0a             	shr    esi,0xa
c0011ffb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011fff:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012005:	c1 eb 0a             	shr    ebx,0xa
c0012008:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c001200e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012014:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001201a:	39 c3                	cmp    ebx,eax
c001201c:	77 ce                	ja     c0011fec <VAS::allocatePages(int, int)+0x92>
c001201e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012021:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012027:	39 d8                	cmp    eax,ebx
c0012029:	73 f3                	jae    c001201e <VAS::allocatePages(int, int)+0xc4>
c001202b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001202f:	83 c4 1c             	add    esp,0x1c
c0012032:	5b                   	pop    ebx
c0012033:	5e                   	pop    esi
c0012034:	5f                   	pop    edi
c0012035:	5d                   	pop    ebp
c0012036:	c3                   	ret    
c0012037:	83 ec 0c             	sub    esp,0xc
c001203a:	68 4c 91 02 c0       	push   0xc002914c
c001203f:	e8 8d 78 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c0012044:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012047:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001204b:	83 c4 10             	add    esp,0x10
c001204e:	e9 43 ff ff ff       	jmp    c0011f96 <VAS::allocatePages(int, int)+0x3c>
c0012053:	83 ec 0c             	sub    esp,0xc
c0012056:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001205a:	e8 30 f7 ff ff       	call   c001178f <Virt::allocateKernelVirtualPages(int)>
c001205f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012063:	83 c4 10             	add    esp,0x10
c0012066:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001206b:	0f 87 9b 00 00 00    	ja     c001210c <VAS::allocatePages(int, int)+0x1b2>
c0012071:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012075:	85 d2                	test   edx,edx
c0012077:	7e 3c                	jle    c00120b5 <VAS::allocatePages(int, int)+0x15b>
c0012079:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001207d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012081:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012085:	c1 e5 0c             	shl    ebp,0xc
c0012088:	81 ce 00 04 00 00    	or     esi,0x400
c001208e:	01 dd                	add    ebp,ebx
c0012090:	e8 b8 da ff ff       	call   c000fb4d <Phys::allocatePage()>
c0012095:	56                   	push   esi
c0012096:	53                   	push   ebx
c0012097:	50                   	push   eax
c0012098:	57                   	push   edi
c0012099:	e8 bc fd ff ff       	call   c0011e5a <VAS::mapPage(unsigned long, unsigned long, int)>
c001209e:	83 c4 10             	add    esp,0x10
c00120a1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120a6:	74 03                	je     c00120ab <VAS::allocatePages(int, int)+0x151>
c00120a8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00120ab:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120b1:	39 dd                	cmp    ebp,ebx
c00120b3:	75 db                	jne    c0012090 <VAS::allocatePages(int, int)+0x136>
c00120b5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120ba:	0f 84 26 ff ff ff    	je     c0011fe6 <VAS::allocatePages(int, int)+0x8c>
c00120c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00120c4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00120c8:	89 d3                	mov    ebx,edx
c00120ca:	c1 e0 0c             	shl    eax,0xc
c00120cd:	c1 eb 0a             	shr    ebx,0xa
c00120d0:	01 d0                	add    eax,edx
c00120d2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00120d8:	c1 e8 0a             	shr    eax,0xa
c00120db:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00120e1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120e6:	2d 00 00 40 00       	sub    eax,0x400000
c00120eb:	39 c3                	cmp    ebx,eax
c00120ed:	0f 87 f9 fe ff ff    	ja     c0011fec <VAS::allocatePages(int, int)+0x92>
c00120f3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00120f6:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120fc:	39 d8                	cmp    eax,ebx
c00120fe:	73 f3                	jae    c00120f3 <VAS::allocatePages(int, int)+0x199>
c0012100:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012104:	83 c4 1c             	add    esp,0x1c
c0012107:	5b                   	pop    ebx
c0012108:	5e                   	pop    esi
c0012109:	5f                   	pop    edi
c001210a:	5d                   	pop    ebp
c001210b:	c3                   	ret    
c001210c:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c0012111:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012117:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c001211e:	0f 84 4d ff ff ff    	je     c0012071 <VAS::allocatePages(int, int)+0x117>
c0012124:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c001212c:	e9 40 ff ff ff       	jmp    c0012071 <VAS::allocatePages(int, int)+0x117>
c0012131:	90                   	nop

c0012132 <VAS::setCPUSpecific(unsigned long)>:
c0012132:	83 ec 0c             	sub    esp,0xc
c0012135:	6a 05                	push   0x5
c0012137:	68 00 00 40 c2       	push   0xc2400000
c001213c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012140:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012144:	e8 11 fd ff ff       	call   c0011e5a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012149:	83 c4 1c             	add    esp,0x1c
c001214c:	c3                   	ret    
c001214d:	90                   	nop

c001214e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001214e:	55                   	push   ebp
c001214f:	57                   	push   edi
c0012150:	56                   	push   esi
c0012151:	53                   	push   ebx
c0012152:	83 ec 1c             	sub    esp,0x1c
c0012155:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c001215a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001215e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012164:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012168:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001216e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012172:	83 e0 01             	and    eax,0x1
c0012175:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012179:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001217d:	85 c0                	test   eax,eax
c001217f:	7e 39                	jle    c00121ba <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012181:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012185:	89 f3                	mov    ebx,esi
c0012187:	c1 e0 0c             	shl    eax,0xc
c001218a:	01 f0                	add    eax,esi
c001218c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012190:	55                   	push   ebp
c0012191:	53                   	push   ebx
c0012192:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012196:	29 f0                	sub    eax,esi
c0012198:	01 d8                	add    eax,ebx
c001219a:	50                   	push   eax
c001219b:	57                   	push   edi
c001219c:	e8 b9 fc ff ff       	call   c0011e5a <VAS::mapPage(unsigned long, unsigned long, int)>
c00121a1:	83 c4 10             	add    esp,0x10
c00121a4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00121a9:	74 03                	je     c00121ae <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00121ab:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00121ae:	81 c3 00 10 00 00    	add    ebx,0x1000
c00121b4:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00121b8:	75 d6                	jne    c0012190 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00121ba:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00121bf:	75 10                	jne    c00121d1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00121c1:	0f 20 d8             	mov    eax,cr3
c00121c4:	0f 22 d8             	mov    cr3,eax
c00121c7:	83 c4 1c             	add    esp,0x1c
c00121ca:	89 f0                	mov    eax,esi
c00121cc:	5b                   	pop    ebx
c00121cd:	5e                   	pop    esi
c00121ce:	5f                   	pop    edi
c00121cf:	5d                   	pop    ebp
c00121d0:	c3                   	ret    
c00121d1:	89 f3                	mov    ebx,esi
c00121d3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00121d7:	c1 eb 0a             	shr    ebx,0xa
c00121da:	c1 e0 0c             	shl    eax,0xc
c00121dd:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00121e3:	01 f0                	add    eax,esi
c00121e5:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00121eb:	c1 e8 0a             	shr    eax,0xa
c00121ee:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121f3:	2d 00 00 40 00       	sub    eax,0x400000
c00121f8:	39 c3                	cmp    ebx,eax
c00121fa:	77 cb                	ja     c00121c7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00121fc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00121ff:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012205:	39 d8                	cmp    eax,ebx
c0012207:	73 f3                	jae    c00121fc <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012209:	83 c4 1c             	add    esp,0x1c
c001220c:	89 f0                	mov    eax,esi
c001220e:	5b                   	pop    ebx
c001220f:	5e                   	pop    esi
c0012210:	5f                   	pop    edi
c0012211:	5d                   	pop    ebp
c0012212:	c3                   	ret    
c0012213:	90                   	nop

c0012214 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012214:	55                   	push   ebp
c0012215:	57                   	push   edi
c0012216:	56                   	push   esi
c0012217:	53                   	push   ebx
c0012218:	83 ec 1c             	sub    esp,0x1c
c001221b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001221f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012223:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012227:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001222b:	a9 ff 0f 00 00       	test   eax,0xfff
c0012230:	75 4a                	jne    c001227c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012232:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012236:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012239:	c1 eb 16             	shr    ebx,0x16
c001223c:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012243:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012247:	74 4d                	je     c0012296 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012249:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001224d:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012251:	c1 e8 0a             	shr    eax,0xa
c0012254:	80 fa 01             	cmp    dl,0x1
c0012257:	19 d2                	sbb    edx,edx
c0012259:	c1 e3 0c             	shl    ebx,0xc
c001225c:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012260:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012266:	25 fc 0f 00 00       	and    eax,0xffc
c001226b:	01 d8                	add    eax,ebx
c001226d:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012274:	83 c4 1c             	add    esp,0x1c
c0012277:	5b                   	pop    ebx
c0012278:	5e                   	pop    esi
c0012279:	5f                   	pop    edi
c001227a:	5d                   	pop    ebp
c001227b:	c3                   	ret    
c001227c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012280:	83 ec 0c             	sub    esp,0xc
c0012283:	68 78 91 02 c0       	push   0xc0029178
c0012288:	e8 44 76 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c001228d:	83 c4 10             	add    esp,0x10
c0012290:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012294:	eb 9c                	jmp    c0012232 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012296:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001229a:	e8 ae d8 ff ff       	call   c000fb4d <Phys::allocatePage()>
c001229f:	89 c5                	mov    ebp,eax
c00122a1:	e8 79 f6 ff ff       	call   c001191f <Virt::getAKernelVAS()>
c00122a6:	83 ec 0c             	sub    esp,0xc
c00122a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00122ad:	6a 01                	push   0x1
c00122af:	e8 db f4 ff ff       	call   c001178f <Virt::allocateKernelVirtualPages(int)>
c00122b4:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00122bb:	6a 01                	push   0x1
c00122bd:	50                   	push   eax
c00122be:	55                   	push   ebp
c00122bf:	81 cd 07 04 00 00    	or     ebp,0x407
c00122c5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00122c9:	51                   	push   ecx
c00122ca:	e8 7f fe ff ff       	call   c001214e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00122cf:	83 c4 1c             	add    esp,0x1c
c00122d2:	68 00 10 00 00       	push   0x1000
c00122d7:	6a 00                	push   0x0
c00122d9:	50                   	push   eax
c00122da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122de:	e8 a8 e3 fe ff       	call   c000068b <memset>
c00122e3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00122e7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00122ea:	e8 04 f8 ff ff       	call   c0011af3 <Virt::freeKernelVirtualPages(unsigned long)>
c00122ef:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00122f2:	83 c4 10             	add    esp,0x10
c00122f5:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00122f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00122fc:	e9 48 ff ff ff       	jmp    c0012249 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012301:	90                   	nop

c0012302 <VAS::VAS(bool)>:
c0012302:	53                   	push   ebx
c0012303:	83 ec 28             	sub    esp,0x28
c0012306:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001230a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001230e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012312:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012319:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001231d:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012321:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012324:	e8 24 d8 ff ff       	call   c000fb4d <Phys::allocatePage()>
c0012329:	89 c2                	mov    edx,eax
c001232b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001232f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012332:	e8 e8 f5 ff ff       	call   c001191f <Virt::getAKernelVAS()>
c0012337:	89 c3                	mov    ebx,eax
c0012339:	83 ec 0c             	sub    esp,0xc
c001233c:	6a 01                	push   0x1
c001233e:	e8 4c f4 ff ff       	call   c001178f <Virt::allocateKernelVirtualPages(int)>
c0012343:	83 c4 10             	add    esp,0x10
c0012346:	89 c2                	mov    edx,eax
c0012348:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001234c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001234f:	83 ec 0c             	sub    esp,0xc
c0012352:	6a 03                	push   0x3
c0012354:	6a 01                	push   0x1
c0012356:	52                   	push   edx
c0012357:	50                   	push   eax
c0012358:	53                   	push   ebx
c0012359:	e8 f0 fd ff ff       	call   c001214e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001235e:	83 c4 20             	add    esp,0x20
c0012361:	89 c2                	mov    edx,eax
c0012363:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012367:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001236a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012372:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001237a:	7f 1c                	jg     c0012398 <VAS::VAS(bool)+0x96>
c001237c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012380:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012383:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012387:	c1 e2 02             	shl    edx,0x2
c001238a:	01 d0                	add    eax,edx
c001238c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012392:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012396:	eb da                	jmp    c0012372 <VAS::VAS(bool)+0x70>
c0012398:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00123a0:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00123a8:	7f 7a                	jg     c0012424 <VAS::VAS(bool)+0x122>
c00123aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00123ae:	2d 00 02 00 00       	sub    eax,0x200
c00123b3:	c1 e0 0c             	shl    eax,0xc
c00123b6:	83 c8 03             	or     eax,0x3
c00123b9:	89 c2                	mov    edx,eax
c00123bb:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c00123c0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123c6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00123cc:	83 e0 10             	and    eax,0x10
c00123cf:	84 c0                	test   al,al
c00123d1:	74 07                	je     c00123da <VAS::VAS(bool)+0xd8>
c00123d3:	b8 00 01 00 00       	mov    eax,0x100
c00123d8:	eb 05                	jmp    c00123df <VAS::VAS(bool)+0xdd>
c00123da:	b8 00 00 00 00       	mov    eax,0x0
c00123df:	09 d0                	or     eax,edx
c00123e1:	89 c1                	mov    ecx,eax
c00123e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123e7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00123ea:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00123ee:	c1 e2 02             	shl    edx,0x2
c00123f1:	01 d0                	add    eax,edx
c00123f3:	89 ca                	mov    edx,ecx
c00123f5:	89 10                	mov    DWORD PTR [eax],edx
c00123f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00123fb:	2d 40 03 00 00       	sub    eax,0x340
c0012400:	83 f8 7f             	cmp    eax,0x7f
c0012403:	77 16                	ja     c001241b <VAS::VAS(bool)+0x119>
c0012405:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012409:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001240c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012410:	c1 e2 02             	shl    edx,0x2
c0012413:	01 d0                	add    eax,edx
c0012415:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001241b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001241f:	e9 7c ff ff ff       	jmp    c00123a0 <VAS::VAS(bool)+0x9e>
c0012424:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c0012429:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001242f:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012435:	83 e0 10             	and    eax,0x10
c0012438:	84 c0                	test   al,al
c001243a:	74 07                	je     c0012443 <VAS::VAS(bool)+0x141>
c001243c:	b8 03 41 00 00       	mov    eax,0x4103
c0012441:	eb 05                	jmp    c0012448 <VAS::VAS(bool)+0x146>
c0012443:	b8 03 40 00 00       	mov    eax,0x4003
c0012448:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001244c:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001244f:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012455:	89 02                	mov    DWORD PTR [edx],eax
c0012457:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c001245c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012462:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012468:	83 ec 08             	sub    esp,0x8
c001246b:	50                   	push   eax
c001246c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012470:	e8 bd fc ff ff       	call   c0012132 <VAS::setCPUSpecific(unsigned long)>
c0012475:	83 c4 10             	add    esp,0x10
c0012478:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001247c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001247f:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c0012484:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001248a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012490:	83 e0 10             	and    eax,0x10
c0012493:	84 c0                	test   al,al
c0012495:	74 07                	je     c001249e <VAS::VAS(bool)+0x19c>
c0012497:	b8 00 01 00 00       	mov    eax,0x100
c001249c:	eb 05                	jmp    c00124a3 <VAS::VAS(bool)+0x1a1>
c001249e:	b8 00 00 00 00       	mov    eax,0x0
c00124a3:	09 c2                	or     edx,eax
c00124a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124a9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00124ac:	05 fc 0f 00 00       	add    eax,0xffc
c00124b1:	83 ca 03             	or     edx,0x3
c00124b4:	89 10                	mov    DWORD PTR [eax],edx
c00124b6:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c00124bb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124c1:	83 ec 0c             	sub    esp,0xc
c00124c4:	50                   	push   eax
c00124c5:	e8 c8 19 00 00       	call   c0013e92 <Device::getName()>
c00124ca:	83 c4 10             	add    esp,0x10
c00124cd:	83 ec 08             	sub    esp,0x8
c00124d0:	68 77 92 02 c0       	push   0xc0029277
c00124d5:	50                   	push   eax
c00124d6:	e8 a0 e2 fe ff       	call   c000077b <strcmp>
c00124db:	83 c4 10             	add    esp,0x10
c00124de:	85 c0                	test   eax,eax
c00124e0:	0f 94 c0             	sete   al
c00124e3:	84 c0                	test   al,al
c00124e5:	74 70                	je     c0012557 <VAS::VAS(bool)+0x255>
c00124e7:	e8 dd a9 00 00       	call   c001cec9 <disableIRQs()>
c00124ec:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c00124f1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124f7:	05 7c 09 00 00       	add    eax,0x97c
c00124fc:	83 ec 0c             	sub    esp,0xc
c00124ff:	50                   	push   eax
c0012500:	e8 51 ca ff ff       	call   c000ef56 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012505:	83 c4 10             	add    esp,0x10
c0012508:	25 00 f0 ff ff       	and    eax,0xfffff000
c001250d:	89 c3                	mov    ebx,eax
c001250f:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c0012514:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001251a:	05 7c 09 00 00       	add    eax,0x97c
c001251f:	83 ec 0c             	sub    esp,0xc
c0012522:	50                   	push   eax
c0012523:	e8 2e ca ff ff       	call   c000ef56 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012528:	83 c4 10             	add    esp,0x10
c001252b:	83 ec 08             	sub    esp,0x8
c001252e:	50                   	push   eax
c001252f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012533:	e8 9c f5 ff ff       	call   c0011ad4 <VAS::getPageTableEntry(unsigned long)>
c0012538:	83 c4 10             	add    esp,0x10
c001253b:	8b 00                	mov    eax,DWORD PTR [eax]
c001253d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012542:	6a 11                	push   0x11
c0012544:	53                   	push   ebx
c0012545:	50                   	push   eax
c0012546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001254a:	e8 0b f9 ff ff       	call   c0011e5a <VAS::mapPage(unsigned long, unsigned long, int)>
c001254f:	83 c4 10             	add    esp,0x10
c0012552:	e8 80 a9 00 00       	call   c001ced7 <enableIRQs()>
c0012557:	90                   	nop
c0012558:	83 c4 28             	add    esp,0x28
c001255b:	5b                   	pop    ebx
c001255c:	c3                   	ret    

c001255d <mapVASFirstTime>:
c001255d:	55                   	push   ebp
c001255e:	57                   	push   edi
c001255f:	56                   	push   esi
c0012560:	53                   	push   ebx
c0012561:	83 ec 0c             	sub    esp,0xc
c0012564:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012569:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001256c:	4a                   	dec    edx
c001256d:	0f 84 8e 00 00 00    	je     c0012601 <mapVASFirstTime+0xa4>
c0012573:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012576:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012579:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001257e:	c1 e5 15             	shl    ebp,0x15
c0012581:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012586:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c001258c:	29 eb                	sub    ebx,ebp
c001258e:	29 ee                	sub    esi,ebp
c0012590:	e8 b8 d5 ff ff       	call   c000fb4d <Phys::allocatePage()>
c0012595:	83 ec 0c             	sub    esp,0xc
c0012598:	68 03 04 00 00       	push   0x403
c001259d:	6a 01                	push   0x1
c001259f:	53                   	push   ebx
c00125a0:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00125a6:	50                   	push   eax
c00125a7:	57                   	push   edi
c00125a8:	e8 a1 fb ff ff       	call   c001214e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00125ad:	83 c4 20             	add    esp,0x20
c00125b0:	39 f3                	cmp    ebx,esi
c00125b2:	75 dc                	jne    c0012590 <mapVASFirstTime+0x33>
c00125b4:	be 00 f0 ff 01       	mov    esi,0x1fff000
c00125b9:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c00125be:	29 ee                	sub    esi,ebp
c00125c0:	29 e8                	sub    eax,ebp
c00125c2:	89 c5                	mov    ebp,eax
c00125c4:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c00125c8:	19 db                	sbb    ebx,ebx
c00125ca:	e8 7e d5 ff ff       	call   c000fb4d <Phys::allocatePage()>
c00125cf:	83 e3 04             	and    ebx,0x4
c00125d2:	83 ec 0c             	sub    esp,0xc
c00125d5:	81 c3 03 04 00 00    	add    ebx,0x403
c00125db:	53                   	push   ebx
c00125dc:	6a 01                	push   0x1
c00125de:	56                   	push   esi
c00125df:	81 ee 00 10 00 00    	sub    esi,0x1000
c00125e5:	50                   	push   eax
c00125e6:	57                   	push   edi
c00125e7:	e8 62 fb ff ff       	call   c001214e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00125ec:	83 c4 20             	add    esp,0x20
c00125ef:	39 f5                	cmp    ebp,esi
c00125f1:	75 d1                	jne    c00125c4 <mapVASFirstTime+0x67>
c00125f3:	0f 20 d8             	mov    eax,cr3
c00125f6:	0f 22 d8             	mov    cr3,eax
c00125f9:	83 c4 0c             	add    esp,0xc
c00125fc:	5b                   	pop    ebx
c00125fd:	5e                   	pop    esi
c00125fe:	5f                   	pop    edi
c00125ff:	5d                   	pop    ebp
c0012600:	c3                   	ret    
c0012601:	83 ec 0c             	sub    esp,0xc
c0012604:	68 85 92 02 c0       	push   0xc0029285
c0012609:	e8 71 01 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001260e:	83 c4 10             	add    esp,0x10
c0012611:	83 c4 0c             	add    esp,0xc
c0012614:	5b                   	pop    ebx
c0012615:	5e                   	pop    esi
c0012616:	5f                   	pop    edi
c0012617:	5d                   	pop    ebp
c0012618:	c3                   	ret    

c0012619 <__cxa_atexit>:
c0012619:	31 c0                	xor    eax,eax
c001261b:	c3                   	ret    

c001261c <__cxa_finalize>:
c001261c:	c3                   	ret    

c001261d <__stack_chk_fail>:
c001261d:	55                   	push   ebp
c001261e:	89 e5                	mov    ebp,esp
c0012620:	83 ec 14             	sub    esp,0x14
c0012623:	68 9e 92 02 c0       	push   0xc002929e
c0012628:	e8 52 01 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001262d:	58                   	pop    eax
c001262e:	5a                   	pop    edx
c001262f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012632:	68 ee 92 02 c0       	push   0xc00292ee
c0012637:	e8 43 01 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001263c:	59                   	pop    ecx
c001263d:	58                   	pop    eax
c001263e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012641:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012644:	68 ee 92 02 c0       	push   0xc00292ee
c0012649:	e8 31 01 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001264e:	5a                   	pop    edx
c001264f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012652:	59                   	pop    ecx
c0012653:	8b 00                	mov    eax,DWORD PTR [eax]
c0012655:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012658:	68 ee 92 02 c0       	push   0xc00292ee
c001265d:	e8 1d 01 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0012662:	5a                   	pop    edx
c0012663:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012666:	59                   	pop    ecx
c0012667:	8b 00                	mov    eax,DWORD PTR [eax]
c0012669:	8b 00                	mov    eax,DWORD PTR [eax]
c001266b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001266e:	68 ee 92 02 c0       	push   0xc00292ee
c0012673:	e8 07 01 00 00       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0012678:	c7 04 24 f6 92 02 c0 	mov    DWORD PTR [esp],0xc00292f6
c001267f:	e8 4d 72 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c0012684:	83 c4 10             	add    esp,0x10
c0012687:	c9                   	leave  
c0012688:	c3                   	ret    

c0012689 <__cxa_pure_virtual>:
c0012689:	83 ec 18             	sub    esp,0x18
c001268c:	68 0e 93 02 c0       	push   0xc002930e
c0012691:	e8 3b 72 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c0012696:	83 c4 1c             	add    esp,0x1c
c0012699:	c3                   	ret    

c001269a <operator new[](unsigned long)>:
c001269a:	e9 3b ce ff ff       	jmp    c000f4da <malloc>

c001269f <operator delete(void*, unsigned long)>:
c001269f:	e9 56 ce ff ff       	jmp    c000f4fa <rfree>

c00126a4 <operator delete[](void*)>:
c00126a4:	e9 51 ce ff ff       	jmp    c000f4fa <rfree>

c00126a9 <operator delete[](void*, unsigned long)>:
c00126a9:	e9 4c ce ff ff       	jmp    c000f4fa <rfree>

c00126ae <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00126ae:	57                   	push   edi
c00126af:	b9 3f 00 00 00       	mov    ecx,0x3f
c00126b4:	56                   	push   esi
c00126b5:	be 24 93 02 c0       	mov    esi,0xc0029324
c00126ba:	53                   	push   ebx
c00126bb:	83 ec 40             	sub    esp,0x40
c00126be:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00126c2:	8d 7c 24 01          	lea    edi,[esp+0x1]
c00126c6:	fc                   	cld    
c00126c7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00126c9:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c00126cd:	83 f9 3e             	cmp    ecx,0x3e
c00126d0:	7e 05                	jle    c00126d7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c00126d2:	b9 3e 00 00 00       	mov    ecx,0x3e
c00126d7:	89 df                	mov    edi,ebx
c00126d9:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00126dd:	eb 02                	jmp    c00126e1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c00126df:	89 c7                	mov    edi,eax
c00126e1:	31 d2                	xor    edx,edx
c00126e3:	46                   	inc    esi
c00126e4:	89 f8                	mov    eax,edi
c00126e6:	f7 f1                	div    ecx
c00126e8:	39 cf                	cmp    edi,ecx
c00126ea:	73 f3                	jae    c00126df <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c00126ec:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00126ef:	eb 02                	jmp    c00126f3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c00126f1:	89 c3                	mov    ebx,eax
c00126f3:	31 d2                	xor    edx,edx
c00126f5:	4e                   	dec    esi
c00126f6:	89 d8                	mov    eax,ebx
c00126f8:	f7 f1                	div    ecx
c00126fa:	39 cb                	cmp    ebx,ecx
c00126fc:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012700:	88 16                	mov    BYTE PTR [esi],dl
c0012702:	73 ed                	jae    c00126f1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012704:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012708:	83 c4 40             	add    esp,0x40
c001270b:	5b                   	pop    ebx
c001270c:	5e                   	pop    esi
c001270d:	5f                   	pop    edi
c001270e:	c3                   	ret    

c001270f <Dbg::logc(char)>:
c001270f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012713:	ba fd 03 00 00       	mov    edx,0x3fd
c0012718:	ec                   	in     al,dx
c0012719:	a8 20                	test   al,0x20
c001271b:	74 fb                	je     c0012718 <Dbg::logc(char)+0x9>
c001271d:	ba f8 03 00 00       	mov    edx,0x3f8
c0012722:	88 c8                	mov    al,cl
c0012724:	ee                   	out    dx,al
c0012725:	c3                   	ret    

c0012726 <Dbg::logs(char*)>:
c0012726:	53                   	push   ebx
c0012727:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001272b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001272e:	84 c0                	test   al,al
c0012730:	74 0f                	je     c0012741 <Dbg::logs(char*)+0x1b>
c0012732:	50                   	push   eax
c0012733:	43                   	inc    ebx
c0012734:	e8 d6 ff ff ff       	call   c001270f <Dbg::logc(char)>
c0012739:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001273c:	5a                   	pop    edx
c001273d:	84 c0                	test   al,al
c001273f:	75 f1                	jne    c0012732 <Dbg::logs(char*)+0xc>
c0012741:	5b                   	pop    ebx
c0012742:	c3                   	ret    

c0012743 <Dbg::logWriteInt(unsigned int)>:
c0012743:	83 ec 10             	sub    esp,0x10
c0012746:	6a 0a                	push   0xa
c0012748:	8d 44 24 08          	lea    eax,[esp+0x8]
c001274c:	50                   	push   eax
c001274d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012751:	e8 58 ff ff ff       	call   c00126ae <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012756:	50                   	push   eax
c0012757:	e8 ca ff ff ff       	call   c0012726 <Dbg::logs(char*)>
c001275c:	83 c4 20             	add    esp,0x20
c001275f:	c3                   	ret    

c0012760 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012760:	83 ec 10             	sub    esp,0x10
c0012763:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012767:	8d 44 24 08          	lea    eax,[esp+0x8]
c001276b:	50                   	push   eax
c001276c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012770:	e8 39 ff ff ff       	call   c00126ae <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012775:	50                   	push   eax
c0012776:	e8 ab ff ff ff       	call   c0012726 <Dbg::logs(char*)>
c001277b:	83 c4 20             	add    esp,0x20
c001277e:	c3                   	ret    

c001277f <Dbg::kprintf(char const*, ...)>:
c001277f:	55                   	push   ebp
c0012780:	57                   	push   edi
c0012781:	56                   	push   esi
c0012782:	53                   	push   ebx
c0012783:	83 ec 0c             	sub    esp,0xc
c0012786:	8d 44 24 24          	lea    eax,[esp+0x24]
c001278a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001278e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012792:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012795:	84 c0                	test   al,al
c0012797:	74 4a                	je     c00127e3 <Dbg::kprintf(char const*, ...)+0x64>
c0012799:	31 db                	xor    ebx,ebx
c001279b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001279e:	3c 25                	cmp    al,0x25
c00127a0:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00127a3:	0f 85 e4 00 00 00    	jne    c001288d <Dbg::kprintf(char const*, ...)+0x10e>
c00127a9:	83 c3 02             	add    ebx,0x2
c00127ac:	8a 07                	mov    al,BYTE PTR [edi]
c00127ae:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00127b1:	83 e8 25             	sub    eax,0x25
c00127b4:	3c 53                	cmp    al,0x53
c00127b6:	0f 87 ba 00 00 00    	ja     c0012876 <Dbg::kprintf(char const*, ...)+0xf7>
c00127bc:	0f b6 c0             	movzx  eax,al
c00127bf:	ff 24 85 64 93 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6c9c]
c00127c6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00127ca:	89 c8                	mov    eax,ecx
c00127cc:	83 c1 04             	add    ecx,0x4
c00127cf:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00127d3:	ff 30                	push   DWORD PTR [eax]
c00127d5:	e8 4c ff ff ff       	call   c0012726 <Dbg::logs(char*)>
c00127da:	58                   	pop    eax
c00127db:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00127df:	84 c0                	test   al,al
c00127e1:	75 b8                	jne    c001279b <Dbg::kprintf(char const*, ...)+0x1c>
c00127e3:	83 c4 0c             	add    esp,0xc
c00127e6:	5b                   	pop    ebx
c00127e7:	5e                   	pop    esi
c00127e8:	5f                   	pop    edi
c00127e9:	5d                   	pop    ebp
c00127ea:	c3                   	ret    
c00127eb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00127ef:	89 d0                	mov    eax,edx
c00127f1:	83 c2 04             	add    edx,0x4
c00127f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00127f8:	ff 30                	push   DWORD PTR [eax]
c00127fa:	e8 44 ff ff ff       	call   c0012743 <Dbg::logWriteInt(unsigned int)>
c00127ff:	58                   	pop    eax
c0012800:	eb d9                	jmp    c00127db <Dbg::kprintf(char const*, ...)+0x5c>
c0012802:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012806:	89 d0                	mov    eax,edx
c0012808:	83 c2 04             	add    edx,0x4
c001280b:	0f be 00             	movsx  eax,BYTE PTR [eax]
c001280e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012812:	50                   	push   eax
c0012813:	e8 f7 fe ff ff       	call   c001270f <Dbg::logc(char)>
c0012818:	58                   	pop    eax
c0012819:	eb c0                	jmp    c00127db <Dbg::kprintf(char const*, ...)+0x5c>
c001281b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001281f:	89 c8                	mov    eax,ecx
c0012821:	83 c1 04             	add    ecx,0x4
c0012824:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012828:	ff 30                	push   DWORD PTR [eax]
c001282a:	e8 14 ff ff ff       	call   c0012743 <Dbg::logWriteInt(unsigned int)>
c001282f:	5f                   	pop    edi
c0012830:	eb a9                	jmp    c00127db <Dbg::kprintf(char const*, ...)+0x5c>
c0012832:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012836:	89 c8                	mov    eax,ecx
c0012838:	83 c1 04             	add    ecx,0x4
c001283b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001283f:	6a 10                	push   0x10
c0012841:	ff 30                	push   DWORD PTR [eax]
c0012843:	e8 18 ff ff ff       	call   c0012760 <Dbg::logWriteIntBase(unsigned int, int)>
c0012848:	59                   	pop    ecx
c0012849:	5f                   	pop    edi
c001284a:	eb 8f                	jmp    c00127db <Dbg::kprintf(char const*, ...)+0x5c>
c001284c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012850:	89 d0                	mov    eax,edx
c0012852:	83 c2 08             	add    edx,0x8
c0012855:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012859:	6a 10                	push   0x10
c001285b:	ff 30                	push   DWORD PTR [eax]
c001285d:	e8 fe fe ff ff       	call   c0012760 <Dbg::logWriteIntBase(unsigned int, int)>
c0012862:	58                   	pop    eax
c0012863:	5a                   	pop    edx
c0012864:	e9 72 ff ff ff       	jmp    c00127db <Dbg::kprintf(char const*, ...)+0x5c>
c0012869:	6a 25                	push   0x25
c001286b:	e8 9f fe ff ff       	call   c001270f <Dbg::logc(char)>
c0012870:	58                   	pop    eax
c0012871:	e9 65 ff ff ff       	jmp    c00127db <Dbg::kprintf(char const*, ...)+0x5c>
c0012876:	6a 25                	push   0x25
c0012878:	e8 92 fe ff ff       	call   c001270f <Dbg::logc(char)>
c001287d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012880:	50                   	push   eax
c0012881:	e8 89 fe ff ff       	call   c001270f <Dbg::logc(char)>
c0012886:	5a                   	pop    edx
c0012887:	59                   	pop    ecx
c0012888:	e9 4e ff ff ff       	jmp    c00127db <Dbg::kprintf(char const*, ...)+0x5c>
c001288d:	50                   	push   eax
c001288e:	89 eb                	mov    ebx,ebp
c0012890:	e8 7a fe ff ff       	call   c001270f <Dbg::logc(char)>
c0012895:	89 fd                	mov    ebp,edi
c0012897:	58                   	pop    eax
c0012898:	e9 3e ff ff ff       	jmp    c00127db <Dbg::kprintf(char const*, ...)+0x5c>
c001289d:	90                   	nop

c001289e <File::read(unsigned long long, void*, int*)>:
c001289e:	53                   	push   ebx
c001289f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00128a3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00128a7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00128ae:	3c 19                	cmp    al,0x19
c00128b0:	77 35                	ja     c00128e7 <File::read(unsigned long long, void*, int*)+0x49>
c00128b2:	8b 04 85 00 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2e00]
c00128b9:	85 c0                	test   eax,eax
c00128bb:	74 2a                	je     c00128e7 <File::read(unsigned long long, void*, int*)+0x49>
c00128bd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00128c3:	85 c0                	test   eax,eax
c00128c5:	74 20                	je     c00128e7 <File::read(unsigned long long, void*, int*)+0x49>
c00128c7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00128cb:	74 21                	je     c00128ee <File::read(unsigned long long, void*, int*)+0x50>
c00128cd:	8b 08                	mov    ecx,DWORD PTR [eax]
c00128cf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00128d3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00128d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00128dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00128e1:	5b                   	pop    ebx
c00128e2:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00128e5:	ff e0                	jmp    eax
c00128e7:	b8 0b 00 00 00       	mov    eax,0xb
c00128ec:	eb 05                	jmp    c00128f3 <File::read(unsigned long long, void*, int*)+0x55>
c00128ee:	b8 05 00 00 00       	mov    eax,0x5
c00128f3:	5b                   	pop    ebx
c00128f4:	c3                   	ret    
c00128f5:	90                   	nop

c00128f6 <File::write(unsigned long long, void*, int*)>:
c00128f6:	53                   	push   ebx
c00128f7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00128fb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00128ff:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012906:	3c 19                	cmp    al,0x19
c0012908:	77 35                	ja     c001293f <File::write(unsigned long long, void*, int*)+0x49>
c001290a:	8b 04 85 00 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2e00]
c0012911:	85 c0                	test   eax,eax
c0012913:	74 2a                	je     c001293f <File::write(unsigned long long, void*, int*)+0x49>
c0012915:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001291b:	85 c0                	test   eax,eax
c001291d:	74 20                	je     c001293f <File::write(unsigned long long, void*, int*)+0x49>
c001291f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012923:	74 21                	je     c0012946 <File::write(unsigned long long, void*, int*)+0x50>
c0012925:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012927:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001292b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012931:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012935:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012939:	5b                   	pop    ebx
c001293a:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001293d:	ff e0                	jmp    eax
c001293f:	b8 0b 00 00 00       	mov    eax,0xb
c0012944:	eb 05                	jmp    c001294b <File::write(unsigned long long, void*, int*)+0x55>
c0012946:	b8 05 00 00 00       	mov    eax,0x5
c001294b:	5b                   	pop    ebx
c001294c:	c3                   	ret    
c001294d:	90                   	nop

c001294e <Directory::read(unsigned long long, void*, int*)>:
c001294e:	53                   	push   ebx
c001294f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012953:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012957:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001295e:	3c 19                	cmp    al,0x19
c0012960:	77 35                	ja     c0012997 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012962:	8b 04 85 00 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2e00]
c0012969:	85 c0                	test   eax,eax
c001296b:	74 2a                	je     c0012997 <Directory::read(unsigned long long, void*, int*)+0x49>
c001296d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012973:	85 c0                	test   eax,eax
c0012975:	74 20                	je     c0012997 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012977:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001297b:	74 21                	je     c001299e <Directory::read(unsigned long long, void*, int*)+0x50>
c001297d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001297f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012983:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012989:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001298d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012991:	5b                   	pop    ebx
c0012992:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012995:	ff e0                	jmp    eax
c0012997:	b8 0b 00 00 00       	mov    eax,0xb
c001299c:	eb 05                	jmp    c00129a3 <Directory::read(unsigned long long, void*, int*)+0x55>
c001299e:	b8 05 00 00 00       	mov    eax,0x5
c00129a3:	5b                   	pop    ebx
c00129a4:	c3                   	ret    
c00129a5:	90                   	nop

c00129a6 <Directory::write(unsigned long long, void*, int*)>:
c00129a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129aa:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00129b1:	b8 0b 00 00 00       	mov    eax,0xb
c00129b6:	80 fa 19             	cmp    dl,0x19
c00129b9:	77 18                	ja     c00129d3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00129bb:	8b 14 95 00 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e00]
c00129c2:	85 d2                	test   edx,edx
c00129c4:	74 0d                	je     c00129d3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00129c6:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00129cd:	19 c0                	sbb    eax,eax
c00129cf:	83 e0 0a             	and    eax,0xa
c00129d2:	40                   	inc    eax
c00129d3:	c3                   	ret    

c00129d4 <File::isAtty()>:
c00129d4:	31 c0                	xor    eax,eax
c00129d6:	c3                   	ret    
c00129d7:	90                   	nop

c00129d8 <Directory::isAtty()>:
c00129d8:	31 c0                	xor    eax,eax
c00129da:	c3                   	ret    
c00129db:	90                   	nop

c00129dc <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00129dc:	b8 0a 00 00 00       	mov    eax,0xa
c00129e1:	c3                   	ret    

c00129e2 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00129e2:	b8 0a 00 00 00       	mov    eax,0xa
c00129e7:	c3                   	ret    

c00129e8 <File::~File()>:
c00129e8:	83 ec 0c             	sub    esp,0xc
c00129eb:	ba 20 95 02 c0       	mov    edx,0xc0029520
c00129f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129f4:	89 10                	mov    DWORD PTR [eax],edx
c00129f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129fa:	83 ec 0c             	sub    esp,0xc
c00129fd:	50                   	push   eax
c00129fe:	e8 2b eb ff ff       	call   c001152e <UnixFile::~UnixFile()>
c0012a03:	83 c4 10             	add    esp,0x10
c0012a06:	90                   	nop
c0012a07:	83 c4 0c             	add    esp,0xc
c0012a0a:	c3                   	ret    
c0012a0b:	90                   	nop

c0012a0c <File::~File()>:
c0012a0c:	83 ec 0c             	sub    esp,0xc
c0012a0f:	83 ec 0c             	sub    esp,0xc
c0012a12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a16:	e8 cd ff ff ff       	call   c00129e8 <File::~File()>
c0012a1b:	83 c4 10             	add    esp,0x10
c0012a1e:	83 ec 08             	sub    esp,0x8
c0012a21:	68 14 01 00 00       	push   0x114
c0012a26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a2a:	e8 70 fc ff ff       	call   c001269f <operator delete(void*, unsigned long)>
c0012a2f:	83 c4 10             	add    esp,0x10
c0012a32:	83 c4 0c             	add    esp,0xc
c0012a35:	c3                   	ret    

c0012a36 <Directory::~Directory()>:
c0012a36:	83 ec 0c             	sub    esp,0xc
c0012a39:	ba 3c 95 02 c0       	mov    edx,0xc002953c
c0012a3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a42:	89 10                	mov    DWORD PTR [eax],edx
c0012a44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a48:	83 ec 0c             	sub    esp,0xc
c0012a4b:	50                   	push   eax
c0012a4c:	e8 dd ea ff ff       	call   c001152e <UnixFile::~UnixFile()>
c0012a51:	83 c4 10             	add    esp,0x10
c0012a54:	90                   	nop
c0012a55:	83 c4 0c             	add    esp,0xc
c0012a58:	c3                   	ret    
c0012a59:	90                   	nop

c0012a5a <Directory::~Directory()>:
c0012a5a:	83 ec 0c             	sub    esp,0xc
c0012a5d:	83 ec 0c             	sub    esp,0xc
c0012a60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a64:	e8 cd ff ff ff       	call   c0012a36 <Directory::~Directory()>
c0012a69:	83 c4 10             	add    esp,0x10
c0012a6c:	83 ec 08             	sub    esp,0x8
c0012a6f:	68 14 01 00 00       	push   0x114
c0012a74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a78:	e8 22 fc ff ff       	call   c001269f <operator delete(void*, unsigned long)>
c0012a7d:	83 c4 10             	add    esp,0x10
c0012a80:	83 c4 0c             	add    esp,0xc
c0012a83:	c3                   	ret    

c0012a84 <Filesystem::Filesystem()>:
c0012a84:	ba bc 94 02 c0       	mov    edx,0xc00294bc
c0012a89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a8d:	89 10                	mov    DWORD PTR [eax],edx
c0012a8f:	8b 15 68 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cd68
c0012a95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a99:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012a9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012aa0:	a3 68 cd 02 c0       	mov    ds:0xc002cd68,eax
c0012aa5:	90                   	nop
c0012aa6:	c3                   	ret    
c0012aa7:	90                   	nop

c0012aa8 <Filesystem::~Filesystem()>:
c0012aa8:	ba bc 94 02 c0       	mov    edx,0xc00294bc
c0012aad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ab1:	89 10                	mov    DWORD PTR [eax],edx
c0012ab3:	90                   	nop
c0012ab4:	c3                   	ret    
c0012ab5:	90                   	nop

c0012ab6 <Filesystem::~Filesystem()>:
c0012ab6:	83 ec 0c             	sub    esp,0xc
c0012ab9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012abd:	e8 e6 ff ff ff       	call   c0012aa8 <Filesystem::~Filesystem()>
c0012ac2:	83 c4 04             	add    esp,0x4
c0012ac5:	83 ec 08             	sub    esp,0x8
c0012ac8:	6a 08                	push   0x8
c0012aca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ace:	e8 cc fb ff ff       	call   c001269f <operator delete(void*, unsigned long)>
c0012ad3:	83 c4 10             	add    esp,0x10
c0012ad6:	83 c4 0c             	add    esp,0xc
c0012ad9:	c3                   	ret    

c0012ada <Fs::getcwd(Process*, char*, int)>:
c0012ada:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ade:	31 c0                	xor    eax,eax
c0012ae0:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012ae3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012ae7:	7d 15                	jge    c0012afe <Fs::getcwd(Process*, char*, int)+0x24>
c0012ae9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012aed:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012af4:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012af7:	84 c9                	test   cl,cl
c0012af9:	74 06                	je     c0012b01 <Fs::getcwd(Process*, char*, int)+0x27>
c0012afb:	40                   	inc    eax
c0012afc:	eb e2                	jmp    c0012ae0 <Fs::getcwd(Process*, char*, int)+0x6>
c0012afe:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012b01:	31 c0                	xor    eax,eax
c0012b03:	c3                   	ret    

c0012b04 <Fs::initVFS()>:
c0012b04:	83 ec 18             	sub    esp,0x18
c0012b07:	6a 08                	push   0x8
c0012b09:	e8 cc c9 ff ff       	call   c000f4da <malloc>
c0012b0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0012b11:	e8 44 d5 00 00       	call   c002005a <FAT::FAT()>
c0012b16:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012b1d:	e8 b8 c9 ff ff       	call   c000f4da <malloc>
c0012b22:	89 04 24             	mov    DWORD PTR [esp],eax
c0012b25:	e8 88 e7 00 00       	call   c00212b2 <ISO9660::ISO9660()>
c0012b2a:	83 c4 1c             	add    esp,0x1c
c0012b2d:	c3                   	ret    

c0012b2e <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012b2e:	55                   	push   ebp
c0012b2f:	57                   	push   edi
c0012b30:	56                   	push   esi
c0012b31:	53                   	push   ebx
c0012b32:	81 ec 10 04 00 00    	sub    esp,0x410
c0012b38:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012b3f:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012b46:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012b4d:	68 00 04 00 00       	push   0x400
c0012b52:	6a 00                	push   0x0
c0012b54:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012b58:	56                   	push   esi
c0012b59:	e8 2d db fe ff       	call   c000068b <memset>
c0012b5e:	83 c4 10             	add    esp,0x10
c0012b61:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012b65:	75 0b                	jne    c0012b72 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012b67:	50                   	push   eax
c0012b68:	50                   	push   eax
c0012b69:	57                   	push   edi
c0012b6a:	56                   	push   esi
c0012b6b:	e8 ba db fe ff       	call   c000072a <strcpy>
c0012b70:	eb 41                	jmp    c0012bb3 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012b72:	8a 07                	mov    al,BYTE PTR [edi]
c0012b74:	3c 5c                	cmp    al,0x5c
c0012b76:	74 04                	je     c0012b7c <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012b78:	3c 2f                	cmp    al,0x2f
c0012b7a:	75 18                	jne    c0012b94 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012b7c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012b7f:	3c 60                	cmp    al,0x60
c0012b81:	7e 03                	jle    c0012b86 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012b83:	83 e8 20             	sub    eax,0x20
c0012b86:	88 04 24             	mov    BYTE PTR [esp],al
c0012b89:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012b90:	50                   	push   eax
c0012b91:	50                   	push   eax
c0012b92:	eb 18                	jmp    c0012bac <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012b94:	50                   	push   eax
c0012b95:	50                   	push   eax
c0012b96:	55                   	push   ebp
c0012b97:	56                   	push   esi
c0012b98:	e8 8d db fe ff       	call   c000072a <strcpy>
c0012b9d:	5a                   	pop    edx
c0012b9e:	59                   	pop    ecx
c0012b9f:	68 12 aa 02 c0       	push   0xc002aa12
c0012ba4:	56                   	push   esi
c0012ba5:	e8 37 dc fe ff       	call   c00007e1 <strcat>
c0012baa:	5d                   	pop    ebp
c0012bab:	58                   	pop    eax
c0012bac:	57                   	push   edi
c0012bad:	56                   	push   esi
c0012bae:	e8 2e dc fe ff       	call   c00007e1 <strcat>
c0012bb3:	83 c4 10             	add    esp,0x10
c0012bb6:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012bb9:	3c 60                	cmp    al,0x60
c0012bbb:	7e 03                	jle    c0012bc0 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012bbd:	83 e8 20             	sub    eax,0x20
c0012bc0:	88 04 24             	mov    BYTE PTR [esp],al
c0012bc3:	88 03                	mov    BYTE PTR [ebx],al
c0012bc5:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012bcc:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012bd2:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012bd6:	bf 03 00 00 00       	mov    edi,0x3
c0012bdb:	b8 03 00 00 00       	mov    eax,0x3
c0012be0:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012be3:	84 d2                	test   dl,dl
c0012be5:	0f 84 91 00 00 00    	je     c0012c7c <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012beb:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012bee:	80 fa 5c             	cmp    dl,0x5c
c0012bf1:	74 05                	je     c0012bf8 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012bf3:	80 fa 2f             	cmp    dl,0x2f
c0012bf6:	75 12                	jne    c0012c0a <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012bf8:	89 c5                	mov    ebp,eax
c0012bfa:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012bff:	74 09                	je     c0012c0a <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012c01:	40                   	inc    eax
c0012c02:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012c06:	89 cf                	mov    edi,ecx
c0012c08:	eb d6                	jmp    c0012be0 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012c0a:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012c0f:	75 5b                	jne    c0012c6c <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012c11:	80 fa 2e             	cmp    dl,0x2e
c0012c14:	75 56                	jne    c0012c6c <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012c16:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012c1a:	74 19                	je     c0012c35 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012c1c:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012c21:	74 53                	je     c0012c76 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012c23:	89 f9                	mov    ecx,edi
c0012c25:	41                   	inc    ecx
c0012c26:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012c29:	80 fa 2f             	cmp    dl,0x2f
c0012c2c:	74 f7                	je     c0012c25 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012c2e:	80 fa 5c             	cmp    dl,0x5c
c0012c31:	74 f2                	je     c0012c25 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012c33:	eb d1                	jmp    c0012c06 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c35:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012c3a:	74 3a                	je     c0012c76 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012c3c:	83 f8 03             	cmp    eax,0x3
c0012c3f:	74 c5                	je     c0012c06 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c41:	41                   	inc    ecx
c0012c42:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012c45:	80 fa 2f             	cmp    dl,0x2f
c0012c48:	74 f7                	je     c0012c41 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012c4a:	80 fa 5c             	cmp    dl,0x5c
c0012c4d:	74 f2                	je     c0012c41 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012c4f:	48                   	dec    eax
c0012c50:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012c54:	75 06                	jne    c0012c5c <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012c56:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c5a:	eb f3                	jmp    c0012c4f <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012c5c:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012c60:	74 07                	je     c0012c69 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012c62:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c66:	48                   	dec    eax
c0012c67:	eb f3                	jmp    c0012c5c <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012c69:	40                   	inc    eax
c0012c6a:	eb 9a                	jmp    c0012c06 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c6c:	80 fa 2f             	cmp    dl,0x2f
c0012c6f:	74 95                	je     c0012c06 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c71:	80 fa 5c             	cmp    dl,0x5c
c0012c74:	74 90                	je     c0012c06 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c76:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012c79:	40                   	inc    eax
c0012c7a:	eb 8a                	jmp    c0012c06 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c7c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c80:	83 ec 0c             	sub    esp,0xc
c0012c83:	53                   	push   ebx
c0012c84:	e8 1f da fe ff       	call   c00006a8 <strlen>
c0012c89:	83 c4 10             	add    esp,0x10
c0012c8c:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012c91:	75 26                	jne    c0012cb9 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012c93:	83 ec 0c             	sub    esp,0xc
c0012c96:	53                   	push   ebx
c0012c97:	e8 0c da fe ff       	call   c00006a8 <strlen>
c0012c9c:	83 c4 10             	add    esp,0x10
c0012c9f:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012ca4:	74 26                	je     c0012ccc <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012ca6:	83 ec 0c             	sub    esp,0xc
c0012ca9:	53                   	push   ebx
c0012caa:	e8 f9 d9 fe ff       	call   c00006a8 <strlen>
c0012caf:	83 c4 10             	add    esp,0x10
c0012cb2:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012cb7:	eb c7                	jmp    c0012c80 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012cb9:	83 ec 0c             	sub    esp,0xc
c0012cbc:	53                   	push   ebx
c0012cbd:	e8 e6 d9 fe ff       	call   c00006a8 <strlen>
c0012cc2:	83 c4 10             	add    esp,0x10
c0012cc5:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012cca:	74 c7                	je     c0012c93 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012ccc:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012cd2:	5b                   	pop    ebx
c0012cd3:	5e                   	pop    esi
c0012cd4:	5f                   	pop    edi
c0012cd5:	5d                   	pop    ebp
c0012cd6:	c3                   	ret    
c0012cd7:	90                   	nop

c0012cd8 <File::File(char const*, Process*)>:
c0012cd8:	83 ec 0c             	sub    esp,0xc
c0012cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cdf:	83 ec 08             	sub    esp,0x8
c0012ce2:	6a 00                	push   0x0
c0012ce4:	50                   	push   eax
c0012ce5:	e8 62 e6 ff ff       	call   c001134c <UnixFile::UnixFile(int)>
c0012cea:	83 c4 10             	add    esp,0x10
c0012ced:	ba 20 95 02 c0       	mov    edx,0xc0029520
c0012cf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cf6:	89 10                	mov    DWORD PTR [eax],edx
c0012cf8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012cfc:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d06:	83 c0 0d             	add    eax,0xd
c0012d09:	83 ec 04             	sub    esp,0x4
c0012d0c:	52                   	push   edx
c0012d0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d11:	50                   	push   eax
c0012d12:	e8 17 fe ff ff       	call   c0012b2e <Fs::standardiseFiles(char*, char const*, char const*)>
c0012d17:	83 c4 10             	add    esp,0x10
c0012d1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d1e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012d21:	8d 50 bf             	lea    edx,[eax-0x41]
c0012d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d28:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d32:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012d36:	90                   	nop
c0012d37:	83 c4 0c             	add    esp,0xc
c0012d3a:	c3                   	ret    
c0012d3b:	90                   	nop

c0012d3c <File::open(FileOpenMode)>:
c0012d3c:	53                   	push   ebx
c0012d3d:	b8 0b 00 00 00       	mov    eax,0xb
c0012d42:	83 ec 08             	sub    esp,0x8
c0012d45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012d49:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012d50:	80 fa 19             	cmp    dl,0x19
c0012d53:	77 40                	ja     c0012d95 <File::open(FileOpenMode)+0x59>
c0012d55:	8b 14 95 00 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e00]
c0012d5c:	85 d2                	test   edx,edx
c0012d5e:	74 35                	je     c0012d95 <File::open(FileOpenMode)+0x59>
c0012d60:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d66:	85 d2                	test   edx,edx
c0012d68:	74 2b                	je     c0012d95 <File::open(FileOpenMode)+0x59>
c0012d6a:	b8 06 00 00 00       	mov    eax,0x6
c0012d6f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012d73:	75 20                	jne    c0012d95 <File::open(FileOpenMode)+0x59>
c0012d75:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d77:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012d7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d81:	51                   	push   ecx
c0012d82:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012d85:	51                   	push   ecx
c0012d86:	52                   	push   edx
c0012d87:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012d8a:	83 c4 10             	add    esp,0x10
c0012d8d:	85 c0                	test   eax,eax
c0012d8f:	75 04                	jne    c0012d95 <File::open(FileOpenMode)+0x59>
c0012d91:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012d95:	83 c4 08             	add    esp,0x8
c0012d98:	5b                   	pop    ebx
c0012d99:	c3                   	ret    

c0012d9a <File::close()>:
c0012d9a:	53                   	push   ebx
c0012d9b:	b8 0b 00 00 00       	mov    eax,0xb
c0012da0:	83 ec 08             	sub    esp,0x8
c0012da3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012da7:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012dae:	80 fa 19             	cmp    dl,0x19
c0012db1:	77 41                	ja     c0012df4 <File::close()+0x5a>
c0012db3:	8b 1c 95 00 d2 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2e00]
c0012dba:	85 db                	test   ebx,ebx
c0012dbc:	74 36                	je     c0012df4 <File::close()+0x5a>
c0012dbe:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012dc5:	74 2d                	je     c0012df4 <File::close()+0x5a>
c0012dc7:	b8 05 00 00 00       	mov    eax,0x5
c0012dcc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012dd0:	74 22                	je     c0012df4 <File::close()+0x5a>
c0012dd2:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012dd6:	8b 04 95 00 d2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2e00]
c0012ddd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012de3:	53                   	push   ebx
c0012de4:	53                   	push   ebx
c0012de5:	8b 10                	mov    edx,DWORD PTR [eax]
c0012de7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012ded:	50                   	push   eax
c0012dee:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012df1:	83 c4 10             	add    esp,0x10
c0012df4:	83 c4 08             	add    esp,0x8
c0012df7:	5b                   	pop    ebx
c0012df8:	c3                   	ret    
c0012df9:	90                   	nop

c0012dfa <File::seek(unsigned long long)>:
c0012dfa:	56                   	push   esi
c0012dfb:	53                   	push   ebx
c0012dfc:	b8 0b 00 00 00       	mov    eax,0xb
c0012e01:	51                   	push   ecx
c0012e02:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012e06:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012e0a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012e11:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012e15:	80 fa 19             	cmp    dl,0x19
c0012e18:	77 31                	ja     c0012e4b <File::seek(unsigned long long)+0x51>
c0012e1a:	8b 14 95 00 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e00]
c0012e21:	85 d2                	test   edx,edx
c0012e23:	74 26                	je     c0012e4b <File::seek(unsigned long long)+0x51>
c0012e25:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e2b:	85 d2                	test   edx,edx
c0012e2d:	74 1c                	je     c0012e4b <File::seek(unsigned long long)+0x51>
c0012e2f:	b8 05 00 00 00       	mov    eax,0x5
c0012e34:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012e38:	74 11                	je     c0012e4b <File::seek(unsigned long long)+0x51>
c0012e3a:	8b 02                	mov    eax,DWORD PTR [edx]
c0012e3c:	53                   	push   ebx
c0012e3d:	51                   	push   ecx
c0012e3e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012e44:	52                   	push   edx
c0012e45:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012e48:	83 c4 10             	add    esp,0x10
c0012e4b:	5a                   	pop    edx
c0012e4c:	5b                   	pop    ebx
c0012e4d:	5e                   	pop    esi
c0012e4e:	c3                   	ret    
c0012e4f:	90                   	nop

c0012e50 <File::tell(unsigned long long*)>:
c0012e50:	83 ec 0c             	sub    esp,0xc
c0012e53:	b8 0b 00 00 00       	mov    eax,0xb
c0012e58:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012e5c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e63:	80 fa 19             	cmp    dl,0x19
c0012e66:	77 34                	ja     c0012e9c <File::tell(unsigned long long*)+0x4c>
c0012e68:	8b 14 95 00 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e00]
c0012e6f:	85 d2                	test   edx,edx
c0012e71:	74 29                	je     c0012e9c <File::tell(unsigned long long*)+0x4c>
c0012e73:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e79:	85 d2                	test   edx,edx
c0012e7b:	74 1f                	je     c0012e9c <File::tell(unsigned long long*)+0x4c>
c0012e7d:	b8 05 00 00 00       	mov    eax,0x5
c0012e82:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012e86:	74 14                	je     c0012e9c <File::tell(unsigned long long*)+0x4c>
c0012e88:	50                   	push   eax
c0012e89:	8b 02                	mov    eax,DWORD PTR [edx]
c0012e8b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e8f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012e95:	52                   	push   edx
c0012e96:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012e99:	83 c4 10             	add    esp,0x10
c0012e9c:	83 c4 0c             	add    esp,0xc
c0012e9f:	c3                   	ret    

c0012ea0 <File::rewind()>:
c0012ea0:	83 ec 10             	sub    esp,0x10
c0012ea3:	6a 00                	push   0x0
c0012ea5:	6a 00                	push   0x0
c0012ea7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012eab:	e8 4a ff ff ff       	call   c0012dfa <File::seek(unsigned long long)>
c0012eb0:	83 c4 1c             	add    esp,0x1c
c0012eb3:	c3                   	ret    

c0012eb4 <File::unlink()>:
c0012eb4:	83 ec 0c             	sub    esp,0xc
c0012eb7:	b8 0b 00 00 00       	mov    eax,0xb
c0012ebc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ec0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ec7:	80 f9 19             	cmp    cl,0x19
c0012eca:	77 2f                	ja     c0012efb <File::unlink()+0x47>
c0012ecc:	8b 0c 8d 00 d2 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2e00]
c0012ed3:	85 c9                	test   ecx,ecx
c0012ed5:	74 24                	je     c0012efb <File::unlink()+0x47>
c0012ed7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012edd:	85 c9                	test   ecx,ecx
c0012edf:	74 1a                	je     c0012efb <File::unlink()+0x47>
c0012ee1:	b8 06 00 00 00       	mov    eax,0x6
c0012ee6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012eea:	75 0f                	jne    c0012efb <File::unlink()+0x47>
c0012eec:	83 c2 0d             	add    edx,0xd
c0012eef:	50                   	push   eax
c0012ef0:	50                   	push   eax
c0012ef1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ef3:	52                   	push   edx
c0012ef4:	51                   	push   ecx
c0012ef5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012ef8:	83 c4 10             	add    esp,0x10
c0012efb:	83 c4 0c             	add    esp,0xc
c0012efe:	c3                   	ret    
c0012eff:	90                   	nop

c0012f00 <File::rename(char const*)>:
c0012f00:	83 ec 0c             	sub    esp,0xc
c0012f03:	b8 0b 00 00 00       	mov    eax,0xb
c0012f08:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f0c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f13:	80 f9 19             	cmp    cl,0x19
c0012f16:	77 32                	ja     c0012f4a <File::rename(char const*)+0x4a>
c0012f18:	8b 0c 8d 00 d2 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2e00]
c0012f1f:	85 c9                	test   ecx,ecx
c0012f21:	74 27                	je     c0012f4a <File::rename(char const*)+0x4a>
c0012f23:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f29:	85 c9                	test   ecx,ecx
c0012f2b:	74 1d                	je     c0012f4a <File::rename(char const*)+0x4a>
c0012f2d:	b8 06 00 00 00       	mov    eax,0x6
c0012f32:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f36:	75 12                	jne    c0012f4a <File::rename(char const*)+0x4a>
c0012f38:	83 c2 0d             	add    edx,0xd
c0012f3b:	50                   	push   eax
c0012f3c:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f42:	52                   	push   edx
c0012f43:	51                   	push   ecx
c0012f44:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012f47:	83 c4 10             	add    esp,0x10
c0012f4a:	83 c4 0c             	add    esp,0xc
c0012f4d:	c3                   	ret    

c0012f4e <File::chfatattr(unsigned char, unsigned char)>:
c0012f4e:	57                   	push   edi
c0012f4f:	b8 0b 00 00 00       	mov    eax,0xb
c0012f54:	56                   	push   esi
c0012f55:	53                   	push   ebx
c0012f56:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f5a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012f5e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f65:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012f69:	80 f9 19             	cmp    cl,0x19
c0012f6c:	77 37                	ja     c0012fa5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f6e:	8b 0c 8d 00 d2 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2e00]
c0012f75:	85 c9                	test   ecx,ecx
c0012f77:	74 2c                	je     c0012fa5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f79:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f7f:	85 c9                	test   ecx,ecx
c0012f81:	74 22                	je     c0012fa5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f83:	b8 06 00 00 00       	mov    eax,0x6
c0012f88:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f8c:	75 17                	jne    c0012fa5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f8e:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012f90:	89 f0                	mov    eax,esi
c0012f92:	83 c2 0d             	add    edx,0xd
c0012f95:	0f b6 f0             	movzx  esi,al
c0012f98:	0f b6 db             	movzx  ebx,bl
c0012f9b:	56                   	push   esi
c0012f9c:	53                   	push   ebx
c0012f9d:	52                   	push   edx
c0012f9e:	51                   	push   ecx
c0012f9f:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012fa2:	83 c4 10             	add    esp,0x10
c0012fa5:	5b                   	pop    ebx
c0012fa6:	5e                   	pop    esi
c0012fa7:	5f                   	pop    edi
c0012fa8:	c3                   	ret    
c0012fa9:	90                   	nop

c0012faa <File::exists()>:
c0012faa:	83 ec 0c             	sub    esp,0xc
c0012fad:	31 c0                	xor    eax,eax
c0012faf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012fb3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012fba:	80 f9 19             	cmp    cl,0x19
c0012fbd:	77 24                	ja     c0012fe3 <File::exists()+0x39>
c0012fbf:	8b 0c 8d 00 d2 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2e00]
c0012fc6:	85 c9                	test   ecx,ecx
c0012fc8:	74 19                	je     c0012fe3 <File::exists()+0x39>
c0012fca:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012fd0:	85 c9                	test   ecx,ecx
c0012fd2:	74 0f                	je     c0012fe3 <File::exists()+0x39>
c0012fd4:	83 c2 0d             	add    edx,0xd
c0012fd7:	50                   	push   eax
c0012fd8:	50                   	push   eax
c0012fd9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012fdb:	52                   	push   edx
c0012fdc:	51                   	push   ecx
c0012fdd:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012fe0:	83 c4 10             	add    esp,0x10
c0012fe3:	83 c4 0c             	add    esp,0xc
c0012fe6:	c3                   	ret    
c0012fe7:	90                   	nop

c0012fe8 <File::stat(unsigned long long*, bool*)>:
c0012fe8:	56                   	push   esi
c0012fe9:	53                   	push   ebx
c0012fea:	50                   	push   eax
c0012feb:	b8 0b 00 00 00       	mov    eax,0xb
c0012ff0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012ff8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012fff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013003:	80 f9 19             	cmp    cl,0x19
c0013006:	77 3d                	ja     c0013045 <File::stat(unsigned long long*, bool*)+0x5d>
c0013008:	8b 0c 8d 00 d2 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2e00]
c001300f:	85 c9                	test   ecx,ecx
c0013011:	74 32                	je     c0013045 <File::stat(unsigned long long*, bool*)+0x5d>
c0013013:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013019:	85 c9                	test   ecx,ecx
c001301b:	74 28                	je     c0013045 <File::stat(unsigned long long*, bool*)+0x5d>
c001301d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001301f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013023:	74 13                	je     c0013038 <File::stat(unsigned long long*, bool*)+0x50>
c0013025:	83 ec 04             	sub    esp,0x4
c0013028:	56                   	push   esi
c0013029:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001302f:	51                   	push   ecx
c0013030:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013033:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013036:	eb 0a                	jmp    c0013042 <File::stat(unsigned long long*, bool*)+0x5a>
c0013038:	53                   	push   ebx
c0013039:	83 c2 0d             	add    edx,0xd
c001303c:	56                   	push   esi
c001303d:	52                   	push   edx
c001303e:	51                   	push   ecx
c001303f:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013042:	83 c4 10             	add    esp,0x10
c0013045:	5a                   	pop    edx
c0013046:	5b                   	pop    ebx
c0013047:	5e                   	pop    esi
c0013048:	c3                   	ret    

c0013049 <Fs::setcwd(Process*, char*)>:
c0013049:	55                   	push   ebp
c001304a:	57                   	push   edi
c001304b:	56                   	push   esi
c001304c:	53                   	push   ebx
c001304d:	81 ec 20 02 00 00    	sub    esp,0x220
c0013053:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c001305a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013060:	57                   	push   edi
c0013061:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013068:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001306c:	56                   	push   esi
c001306d:	e8 bc fa ff ff       	call   c0012b2e <Fs::standardiseFiles(char*, char const*, char const*)>
c0013072:	89 34 24             	mov    DWORD PTR [esp],esi
c0013075:	e8 2e d6 fe ff       	call   c00006a8 <strlen>
c001307a:	83 c4 10             	add    esp,0x10
c001307d:	83 f8 02             	cmp    eax,0x2
c0013080:	77 17                	ja     c0013099 <Fs::setcwd(Process*, char*)+0x50>
c0013082:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013087:	83 e8 41             	sub    eax,0x41
c001308a:	83 f8 19             	cmp    eax,0x19
c001308d:	76 24                	jbe    c00130b3 <Fs::setcwd(Process*, char*)+0x6a>
c001308f:	b8 03 00 00 00       	mov    eax,0x3
c0013094:	e9 e0 00 00 00       	jmp    c0013179 <Fs::setcwd(Process*, char*)+0x130>
c0013099:	83 ec 0c             	sub    esp,0xc
c001309c:	56                   	push   esi
c001309d:	e8 06 d6 fe ff       	call   c00006a8 <strlen>
c00130a2:	83 c4 10             	add    esp,0x10
c00130a5:	83 f8 03             	cmp    eax,0x3
c00130a8:	75 34                	jne    c00130de <Fs::setcwd(Process*, char*)+0x95>
c00130aa:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00130af:	75 2d                	jne    c00130de <Fs::setcwd(Process*, char*)+0x95>
c00130b1:	eb cf                	jmp    c0013082 <Fs::setcwd(Process*, char*)+0x39>
c00130b3:	8b 14 85 00 d2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2e00]
c00130ba:	b8 05 00 00 00       	mov    eax,0x5
c00130bf:	85 d2                	test   edx,edx
c00130c1:	0f 84 b2 00 00 00    	je     c0013179 <Fs::setcwd(Process*, char*)+0x130>
c00130c7:	b8 06 00 00 00       	mov    eax,0x6
c00130cc:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00130d3:	0f 85 92 00 00 00    	jne    c001316b <Fs::setcwd(Process*, char*)+0x122>
c00130d9:	e9 9b 00 00 00       	jmp    c0013179 <Fs::setcwd(Process*, char*)+0x130>
c00130de:	83 ec 0c             	sub    esp,0xc
c00130e1:	68 14 01 00 00       	push   0x114
c00130e6:	e8 ef c3 ff ff       	call   c000f4da <malloc>
c00130eb:	83 c4 0c             	add    esp,0xc
c00130ee:	89 c3                	mov    ebx,eax
c00130f0:	55                   	push   ebp
c00130f1:	56                   	push   esi
c00130f2:	50                   	push   eax
c00130f3:	e8 e0 fb ff ff       	call   c0012cd8 <File::File(char const*, Process*)>
c00130f8:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00130fd:	83 c4 0c             	add    esp,0xc
c0013100:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013104:	50                   	push   eax
c0013105:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013109:	50                   	push   eax
c001310a:	53                   	push   ebx
c001310b:	e8 d8 fe ff ff       	call   c0012fe8 <File::stat(unsigned long long*, bool*)>
c0013110:	83 c4 10             	add    esp,0x10
c0013113:	83 f8 02             	cmp    eax,0x2
c0013116:	74 04                	je     c001311c <Fs::setcwd(Process*, char*)+0xd3>
c0013118:	85 c0                	test   eax,eax
c001311a:	74 1c                	je     c0013138 <Fs::setcwd(Process*, char*)+0xef>
c001311c:	b8 01 00 00 00       	mov    eax,0x1
c0013121:	85 db                	test   ebx,ebx
c0013123:	74 54                	je     c0013179 <Fs::setcwd(Process*, char*)+0x130>
c0013125:	83 ec 0c             	sub    esp,0xc
c0013128:	8b 03                	mov    eax,DWORD PTR [ebx]
c001312a:	53                   	push   ebx
c001312b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001312e:	83 c4 10             	add    esp,0x10
c0013131:	b8 01 00 00 00       	mov    eax,0x1
c0013136:	eb 41                	jmp    c0013179 <Fs::setcwd(Process*, char*)+0x130>
c0013138:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001313d:	75 1c                	jne    c001315b <Fs::setcwd(Process*, char*)+0x112>
c001313f:	b8 02 00 00 00       	mov    eax,0x2
c0013144:	85 db                	test   ebx,ebx
c0013146:	74 31                	je     c0013179 <Fs::setcwd(Process*, char*)+0x130>
c0013148:	83 ec 0c             	sub    esp,0xc
c001314b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001314d:	53                   	push   ebx
c001314e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013151:	83 c4 10             	add    esp,0x10
c0013154:	b8 02 00 00 00       	mov    eax,0x2
c0013159:	eb 1e                	jmp    c0013179 <Fs::setcwd(Process*, char*)+0x130>
c001315b:	85 db                	test   ebx,ebx
c001315d:	74 0c                	je     c001316b <Fs::setcwd(Process*, char*)+0x122>
c001315f:	83 ec 0c             	sub    esp,0xc
c0013162:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013164:	53                   	push   ebx
c0013165:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013168:	83 c4 10             	add    esp,0x10
c001316b:	50                   	push   eax
c001316c:	50                   	push   eax
c001316d:	56                   	push   esi
c001316e:	57                   	push   edi
c001316f:	e8 b6 d5 fe ff       	call   c000072a <strcpy>
c0013174:	83 c4 10             	add    esp,0x10
c0013177:	31 c0                	xor    eax,eax
c0013179:	81 c4 1c 02 00 00    	add    esp,0x21c
c001317f:	5b                   	pop    ebx
c0013180:	5e                   	pop    esi
c0013181:	5f                   	pop    edi
c0013182:	5d                   	pop    ebp
c0013183:	c3                   	ret    

c0013184 <Directory::Directory(char const*, Process*)>:
c0013184:	83 ec 0c             	sub    esp,0xc
c0013187:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001318b:	83 ec 08             	sub    esp,0x8
c001318e:	6a 00                	push   0x0
c0013190:	50                   	push   eax
c0013191:	e8 b6 e1 ff ff       	call   c001134c <UnixFile::UnixFile(int)>
c0013196:	83 c4 10             	add    esp,0x10
c0013199:	ba 3c 95 02 c0       	mov    edx,0xc002953c
c001319e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131a2:	89 10                	mov    DWORD PTR [eax],edx
c00131a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131a8:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00131ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131b2:	83 c0 0d             	add    eax,0xd
c00131b5:	83 ec 04             	sub    esp,0x4
c00131b8:	52                   	push   edx
c00131b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131bd:	50                   	push   eax
c00131be:	e8 6b f9 ff ff       	call   c0012b2e <Fs::standardiseFiles(char*, char const*, char const*)>
c00131c3:	83 c4 10             	add    esp,0x10
c00131c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131ca:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00131cd:	8d 50 bf             	lea    edx,[eax-0x41]
c00131d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131d4:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00131da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131de:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00131e2:	90                   	nop
c00131e3:	83 c4 0c             	add    esp,0xc
c00131e6:	c3                   	ret    
c00131e7:	90                   	nop

c00131e8 <Directory::open()>:
c00131e8:	53                   	push   ebx
c00131e9:	b8 0b 00 00 00       	mov    eax,0xb
c00131ee:	83 ec 08             	sub    esp,0x8
c00131f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00131f5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00131fc:	80 fa 19             	cmp    dl,0x19
c00131ff:	77 3d                	ja     c001323e <Directory::open()+0x56>
c0013201:	8b 14 95 00 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e00]
c0013208:	85 d2                	test   edx,edx
c001320a:	74 32                	je     c001323e <Directory::open()+0x56>
c001320c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013212:	85 d2                	test   edx,edx
c0013214:	74 28                	je     c001323e <Directory::open()+0x56>
c0013216:	b8 06 00 00 00       	mov    eax,0x6
c001321b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001321f:	75 1d                	jne    c001323e <Directory::open()+0x56>
c0013221:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013227:	50                   	push   eax
c0013228:	8b 02                	mov    eax,DWORD PTR [edx]
c001322a:	51                   	push   ecx
c001322b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001322e:	51                   	push   ecx
c001322f:	52                   	push   edx
c0013230:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013233:	83 c4 10             	add    esp,0x10
c0013236:	85 c0                	test   eax,eax
c0013238:	75 04                	jne    c001323e <Directory::open()+0x56>
c001323a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001323e:	83 c4 08             	add    esp,0x8
c0013241:	5b                   	pop    ebx
c0013242:	c3                   	ret    
c0013243:	90                   	nop

c0013244 <Directory::close()>:
c0013244:	53                   	push   ebx
c0013245:	b8 0b 00 00 00       	mov    eax,0xb
c001324a:	83 ec 08             	sub    esp,0x8
c001324d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013251:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013258:	80 fa 19             	cmp    dl,0x19
c001325b:	77 41                	ja     c001329e <Directory::close()+0x5a>
c001325d:	8b 1c 95 00 d2 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2e00]
c0013264:	85 db                	test   ebx,ebx
c0013266:	74 36                	je     c001329e <Directory::close()+0x5a>
c0013268:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001326f:	74 2d                	je     c001329e <Directory::close()+0x5a>
c0013271:	b8 05 00 00 00       	mov    eax,0x5
c0013276:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001327a:	74 22                	je     c001329e <Directory::close()+0x5a>
c001327c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013280:	8b 04 95 00 d2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2e00]
c0013287:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001328d:	53                   	push   ebx
c001328e:	53                   	push   ebx
c001328f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013291:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013297:	50                   	push   eax
c0013298:	ff 52 20             	call   DWORD PTR [edx+0x20]
c001329b:	83 c4 10             	add    esp,0x10
c001329e:	83 c4 08             	add    esp,0x8
c00132a1:	5b                   	pop    ebx
c00132a2:	c3                   	ret    
c00132a3:	90                   	nop

c00132a4 <Directory::unlink()>:
c00132a4:	83 ec 0c             	sub    esp,0xc
c00132a7:	b8 0b 00 00 00       	mov    eax,0xb
c00132ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132b0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132b7:	80 f9 19             	cmp    cl,0x19
c00132ba:	77 2f                	ja     c00132eb <Directory::unlink()+0x47>
c00132bc:	8b 0c 8d 00 d2 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2e00]
c00132c3:	85 c9                	test   ecx,ecx
c00132c5:	74 24                	je     c00132eb <Directory::unlink()+0x47>
c00132c7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132cd:	85 c9                	test   ecx,ecx
c00132cf:	74 1a                	je     c00132eb <Directory::unlink()+0x47>
c00132d1:	b8 06 00 00 00       	mov    eax,0x6
c00132d6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00132da:	75 0f                	jne    c00132eb <Directory::unlink()+0x47>
c00132dc:	83 c2 0d             	add    edx,0xd
c00132df:	50                   	push   eax
c00132e0:	50                   	push   eax
c00132e1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132e3:	52                   	push   edx
c00132e4:	51                   	push   ecx
c00132e5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00132e8:	83 c4 10             	add    esp,0x10
c00132eb:	83 c4 0c             	add    esp,0xc
c00132ee:	c3                   	ret    
c00132ef:	90                   	nop

c00132f0 <Directory::rename(char const*)>:
c00132f0:	83 ec 0c             	sub    esp,0xc
c00132f3:	b8 0b 00 00 00       	mov    eax,0xb
c00132f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132fc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013303:	80 f9 19             	cmp    cl,0x19
c0013306:	77 32                	ja     c001333a <Directory::rename(char const*)+0x4a>
c0013308:	8b 0c 8d 00 d2 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2e00]
c001330f:	85 c9                	test   ecx,ecx
c0013311:	74 27                	je     c001333a <Directory::rename(char const*)+0x4a>
c0013313:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013319:	85 c9                	test   ecx,ecx
c001331b:	74 1d                	je     c001333a <Directory::rename(char const*)+0x4a>
c001331d:	b8 06 00 00 00       	mov    eax,0x6
c0013322:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013326:	75 12                	jne    c001333a <Directory::rename(char const*)+0x4a>
c0013328:	83 c2 0d             	add    edx,0xd
c001332b:	50                   	push   eax
c001332c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001332e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013332:	52                   	push   edx
c0013333:	51                   	push   ecx
c0013334:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013337:	83 c4 10             	add    esp,0x10
c001333a:	83 c4 0c             	add    esp,0xc
c001333d:	c3                   	ret    

c001333e <Directory::exists()>:
c001333e:	83 ec 0c             	sub    esp,0xc
c0013341:	31 c0                	xor    eax,eax
c0013343:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013347:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001334e:	80 f9 19             	cmp    cl,0x19
c0013351:	77 24                	ja     c0013377 <Directory::exists()+0x39>
c0013353:	8b 0c 8d 00 d2 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2e00]
c001335a:	85 c9                	test   ecx,ecx
c001335c:	74 19                	je     c0013377 <Directory::exists()+0x39>
c001335e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013364:	85 c9                	test   ecx,ecx
c0013366:	74 0f                	je     c0013377 <Directory::exists()+0x39>
c0013368:	83 c2 0d             	add    edx,0xd
c001336b:	50                   	push   eax
c001336c:	50                   	push   eax
c001336d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001336f:	52                   	push   edx
c0013370:	51                   	push   ecx
c0013371:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013374:	83 c4 10             	add    esp,0x10
c0013377:	83 c4 0c             	add    esp,0xc
c001337a:	c3                   	ret    
c001337b:	90                   	nop

c001337c <Directory::read(dirent*)>:
c001337c:	83 ec 1c             	sub    esp,0x1c
c001337f:	b8 0b 00 00 00       	mov    eax,0xb
c0013384:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013388:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001338f:	80 fa 19             	cmp    dl,0x19
c0013392:	77 30                	ja     c00133c4 <Directory::read(dirent*)+0x48>
c0013394:	8b 14 95 00 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e00]
c001339b:	85 d2                	test   edx,edx
c001339d:	74 25                	je     c00133c4 <Directory::read(dirent*)+0x48>
c001339f:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00133a6:	74 1c                	je     c00133c4 <Directory::read(dirent*)+0x48>
c00133a8:	83 ec 0c             	sub    esp,0xc
c00133ab:	8b 01                	mov    eax,DWORD PTR [ecx]
c00133ad:	8d 54 24 18          	lea    edx,[esp+0x18]
c00133b1:	52                   	push   edx
c00133b2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00133b6:	6a 00                	push   0x0
c00133b8:	68 10 01 00 00       	push   0x110
c00133bd:	51                   	push   ecx
c00133be:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00133c1:	83 c4 20             	add    esp,0x20
c00133c4:	83 c4 1c             	add    esp,0x1c
c00133c7:	c3                   	ret    

c00133c8 <Directory::create()>:
c00133c8:	83 ec 0c             	sub    esp,0xc
c00133cb:	b8 0b 00 00 00       	mov    eax,0xb
c00133d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133d4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00133db:	80 f9 19             	cmp    cl,0x19
c00133de:	77 2f                	ja     c001340f <Directory::create()+0x47>
c00133e0:	8b 0c 8d 00 d2 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2e00]
c00133e7:	85 c9                	test   ecx,ecx
c00133e9:	74 24                	je     c001340f <Directory::create()+0x47>
c00133eb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00133f1:	85 c9                	test   ecx,ecx
c00133f3:	74 1a                	je     c001340f <Directory::create()+0x47>
c00133f5:	b8 06 00 00 00       	mov    eax,0x6
c00133fa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00133fe:	75 0f                	jne    c001340f <Directory::create()+0x47>
c0013400:	83 c2 0d             	add    edx,0xd
c0013403:	50                   	push   eax
c0013404:	50                   	push   eax
c0013405:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013407:	52                   	push   edx
c0013408:	51                   	push   ecx
c0013409:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001340c:	83 c4 10             	add    esp,0x10
c001340f:	83 c4 0c             	add    esp,0xc
c0013412:	c3                   	ret    
c0013413:	90                   	nop

c0013414 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013414:	b8 0a 00 00 00       	mov    eax,0xa
c0013419:	c3                   	ret    

c001341a <Bus::Bus(char const*)>:
c001341a:	83 ec 0c             	sub    esp,0xc
c001341d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013421:	83 ec 08             	sub    esp,0x8
c0013424:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013428:	50                   	push   eax
c0013429:	e8 68 09 00 00       	call   c0013d96 <Device::Device(char const*)>
c001342e:	83 c4 10             	add    esp,0x10
c0013431:	ba 58 95 02 c0       	mov    edx,0xc0029558
c0013436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001343a:	89 10                	mov    DWORD PTR [eax],edx
c001343c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013440:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001344a:	90                   	nop
c001344b:	83 c4 0c             	add    esp,0xc
c001344e:	c3                   	ret    
c001344f:	90                   	nop

c0013450 <Bus::~Bus()>:
c0013450:	83 ec 0c             	sub    esp,0xc
c0013453:	ba 58 95 02 c0       	mov    edx,0xc0029558
c0013458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001345c:	89 10                	mov    DWORD PTR [eax],edx
c001345e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013462:	83 ec 0c             	sub    esp,0xc
c0013465:	50                   	push   eax
c0013466:	e8 0d 06 00 00       	call   c0013a78 <Device::~Device()>
c001346b:	83 c4 10             	add    esp,0x10
c001346e:	90                   	nop
c001346f:	83 c4 0c             	add    esp,0xc
c0013472:	c3                   	ret    
c0013473:	90                   	nop

c0013474 <Bus::~Bus()>:
c0013474:	83 ec 0c             	sub    esp,0xc
c0013477:	83 ec 0c             	sub    esp,0xc
c001347a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001347e:	e8 cd ff ff ff       	call   c0013450 <Bus::~Bus()>
c0013483:	83 c4 10             	add    esp,0x10
c0013486:	83 ec 08             	sub    esp,0x8
c0013489:	68 58 01 00 00       	push   0x158
c001348e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013492:	e8 08 f2 ff ff       	call   c001269f <operator delete(void*, unsigned long)>
c0013497:	83 c4 10             	add    esp,0x10
c001349a:	83 c4 0c             	add    esp,0xc
c001349d:	c3                   	ret    

c001349e <Buzzer::Buzzer(char const*)>:
c001349e:	83 ec 0c             	sub    esp,0xc
c00134a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134a5:	83 ec 08             	sub    esp,0x8
c00134a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134ac:	50                   	push   eax
c00134ad:	e8 e4 08 00 00       	call   c0013d96 <Device::Device(char const*)>
c00134b2:	83 c4 10             	add    esp,0x10
c00134b5:	ba 84 95 02 c0       	mov    edx,0xc0029584
c00134ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134be:	89 10                	mov    DWORD PTR [eax],edx
c00134c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134c4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00134ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134d2:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c00134dc:	90                   	nop
c00134dd:	83 c4 0c             	add    esp,0xc
c00134e0:	c3                   	ret    
c00134e1:	90                   	nop

c00134e2 <Buzzer::~Buzzer()>:
c00134e2:	83 ec 0c             	sub    esp,0xc
c00134e5:	ba 84 95 02 c0       	mov    edx,0xc0029584
c00134ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134ee:	89 10                	mov    DWORD PTR [eax],edx
c00134f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134f4:	83 ec 0c             	sub    esp,0xc
c00134f7:	50                   	push   eax
c00134f8:	e8 7b 05 00 00       	call   c0013a78 <Device::~Device()>
c00134fd:	83 c4 10             	add    esp,0x10
c0013500:	90                   	nop
c0013501:	83 c4 0c             	add    esp,0xc
c0013504:	c3                   	ret    
c0013505:	90                   	nop

c0013506 <Buzzer::~Buzzer()>:
c0013506:	83 ec 0c             	sub    esp,0xc
c0013509:	83 ec 0c             	sub    esp,0xc
c001350c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013510:	e8 cd ff ff ff       	call   c00134e2 <Buzzer::~Buzzer()>
c0013515:	83 c4 10             	add    esp,0x10
c0013518:	83 ec 08             	sub    esp,0x8
c001351b:	68 5c 01 00 00       	push   0x15c
c0013520:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013524:	e8 76 f1 ff ff       	call   c001269f <operator delete(void*, unsigned long)>
c0013529:	83 c4 10             	add    esp,0x10
c001352c:	83 c4 0c             	add    esp,0xc
c001352f:	c3                   	ret    

c0013530 <Buzzer::stop()>:
c0013530:	83 ec 14             	sub    esp,0x14
c0013533:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013537:	8b 10                	mov    edx,DWORD PTR [eax]
c0013539:	6a 00                	push   0x0
c001353b:	50                   	push   eax
c001353c:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001353f:	83 c4 1c             	add    esp,0x1c
c0013542:	c3                   	ret    

c0013543 <beepThread(void*)>:
c0013543:	53                   	push   ebx
c0013544:	83 ec 08             	sub    esp,0x8
c0013547:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001354b:	e8 98 99 00 00       	call   c001cee8 <unlockScheduler()>
c0013550:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013555:	52                   	push   edx
c0013556:	52                   	push   edx
c0013557:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c001355d:	52                   	push   edx
c001355e:	50                   	push   eax
c001355f:	e8 d2 9e 00 00       	call   c001d436 <nanoSleep(unsigned long long)>
c0013564:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013567:	e8 c4 ff ff ff       	call   c0013530 <Buzzer::stop()>
c001356c:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013574:	83 c4 18             	add    esp,0x18
c0013577:	5b                   	pop    ebx
c0013578:	e9 ff 9d 00 00       	jmp    c001d37c <blockTask(TaskState)>
c001357d:	90                   	nop

c001357e <Buzzer::beep(int, int, bool)>:
c001357e:	57                   	push   edi
c001357f:	56                   	push   esi
c0013580:	53                   	push   ebx
c0013581:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013585:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013589:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001358d:	52                   	push   edx
c001358e:	52                   	push   edx
c001358f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013591:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013595:	56                   	push   esi
c0013596:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013599:	83 c4 10             	add    esp,0x10
c001359c:	89 f8                	mov    eax,edi
c001359e:	84 c0                	test   al,al
c00135a0:	74 1f                	je     c00135c1 <Buzzer::beep(int, int, bool)+0x43>
c00135a2:	50                   	push   eax
c00135a3:	50                   	push   eax
c00135a4:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00135aa:	99                   	cdq    
c00135ab:	52                   	push   edx
c00135ac:	50                   	push   eax
c00135ad:	e8 84 9e 00 00       	call   c001d436 <nanoSleep(unsigned long long)>
c00135b2:	83 c4 10             	add    esp,0x10
c00135b5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00135b9:	5b                   	pop    ebx
c00135ba:	5e                   	pop    esi
c00135bb:	5f                   	pop    edi
c00135bc:	e9 6f ff ff ff       	jmp    c0013530 <Buzzer::stop()>
c00135c1:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00135c7:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c00135cc:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c00135d4:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00135d8:	c7 44 24 14 43 35 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013543
c00135e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00135e4:	5b                   	pop    ebx
c00135e5:	5e                   	pop    esi
c00135e6:	5f                   	pop    edi
c00135e7:	e9 2c 9a 00 00       	jmp    c001d018 <Process::createThread(void (*)(void*), void*, int)>

c00135ec <User::loadClockSettings(int)>:
c00135ec:	53                   	push   ebx
c00135ed:	83 ec 14             	sub    esp,0x14
c00135f0:	68 14 01 00 00       	push   0x114
c00135f5:	e8 e0 be ff ff       	call   c000f4da <malloc>
c00135fa:	83 c4 0c             	add    esp,0xc
c00135fd:	89 c3                	mov    ebx,eax
c00135ff:	ff 35 34 e1 02 c0    	push   DWORD PTR ds:0xc002e134
c0013605:	68 ac 95 02 c0       	push   0xc00295ac
c001360a:	50                   	push   eax
c001360b:	e8 c8 f6 ff ff       	call   c0012cd8 <File::File(char const*, Process*)>
c0013610:	58                   	pop    eax
c0013611:	5a                   	pop    edx
c0013612:	6a 01                	push   0x1
c0013614:	53                   	push   ebx
c0013615:	e8 22 f7 ff ff       	call   c0012d3c <File::open(FileOpenMode)>
c001361a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001361d:	e8 78 f7 ff ff       	call   c0012d9a <File::close()>
c0013622:	83 c4 10             	add    esp,0x10
c0013625:	85 db                	test   ebx,ebx
c0013627:	74 0f                	je     c0013638 <User::loadClockSettings(int)+0x4c>
c0013629:	8b 03                	mov    eax,DWORD PTR [ebx]
c001362b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001362f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013632:	83 c4 08             	add    esp,0x8
c0013635:	5b                   	pop    ebx
c0013636:	ff e0                	jmp    eax
c0013638:	83 c4 08             	add    esp,0x8
c001363b:	5b                   	pop    ebx
c001363c:	c3                   	ret    
c001363d:	90                   	nop

c001363e <Clock::Clock(char const*)>:
c001363e:	83 ec 0c             	sub    esp,0xc
c0013641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013645:	83 ec 08             	sub    esp,0x8
c0013648:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001364c:	50                   	push   eax
c001364d:	e8 44 07 00 00       	call   c0013d96 <Device::Device(char const*)>
c0013652:	83 c4 10             	add    esp,0x10
c0013655:	ba d4 95 02 c0       	mov    edx,0xc00295d4
c001365a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001365e:	89 10                	mov    DWORD PTR [eax],edx
c0013660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013664:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001366e:	90                   	nop
c001366f:	83 c4 0c             	add    esp,0xc
c0013672:	c3                   	ret    
c0013673:	90                   	nop

c0013674 <Clock::~Clock()>:
c0013674:	83 ec 0c             	sub    esp,0xc
c0013677:	ba d4 95 02 c0       	mov    edx,0xc00295d4
c001367c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013680:	89 10                	mov    DWORD PTR [eax],edx
c0013682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013686:	83 ec 0c             	sub    esp,0xc
c0013689:	50                   	push   eax
c001368a:	e8 e9 03 00 00       	call   c0013a78 <Device::~Device()>
c001368f:	83 c4 10             	add    esp,0x10
c0013692:	90                   	nop
c0013693:	83 c4 0c             	add    esp,0xc
c0013696:	c3                   	ret    
c0013697:	90                   	nop

c0013698 <Clock::~Clock()>:
c0013698:	83 ec 0c             	sub    esp,0xc
c001369b:	83 ec 0c             	sub    esp,0xc
c001369e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136a2:	e8 cd ff ff ff       	call   c0013674 <Clock::~Clock()>
c00136a7:	83 c4 10             	add    esp,0x10
c00136aa:	83 ec 08             	sub    esp,0x8
c00136ad:	68 58 01 00 00       	push   0x158
c00136b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136b6:	e8 e4 ef ff ff       	call   c001269f <operator delete(void*, unsigned long)>
c00136bb:	83 c4 10             	add    esp,0x10
c00136be:	83 c4 0c             	add    esp,0xc
c00136c1:	c3                   	ret    

c00136c2 <Clock::timeInSecondsLocal()>:
c00136c2:	53                   	push   ebx
c00136c3:	83 ec 14             	sub    esp,0x14
c00136c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00136ca:	8b 10                	mov    edx,DWORD PTR [eax]
c00136cc:	50                   	push   eax
c00136cd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00136d0:	0f b6 0d 70 cd 02 c0 	movzx  ecx,BYTE PTR ds:0xc002cd70
c00136d7:	03 0d 74 cd 02 c0    	add    ecx,DWORD PTR ds:0xc002cd74
c00136dd:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00136e3:	89 cb                	mov    ebx,ecx
c00136e5:	c1 fb 1f             	sar    ebx,0x1f
c00136e8:	01 c8                	add    eax,ecx
c00136ea:	11 da                	adc    edx,ebx
c00136ec:	83 c4 10             	add    esp,0x10
c00136ef:	31 c9                	xor    ecx,ecx
c00136f1:	80 3d 71 cd 02 c0 00 	cmp    BYTE PTR ds:0xc002cd71,0x0
c00136f8:	74 05                	je     c00136ff <Clock::timeInSecondsLocal()+0x3d>
c00136fa:	b9 08 07 00 00       	mov    ecx,0x708
c00136ff:	31 db                	xor    ebx,ebx
c0013701:	01 c8                	add    eax,ecx
c0013703:	11 da                	adc    edx,ebx
c0013705:	83 c4 08             	add    esp,0x8
c0013708:	5b                   	pop    ebx
c0013709:	c3                   	ret    

c001370a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001370a:	57                   	push   edi
c001370b:	56                   	push   esi
c001370c:	53                   	push   ebx
c001370d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013711:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013715:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013717:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001371b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001371e:	0f b6 05 70 cd 02 c0 	movzx  eax,BYTE PTR ds:0xc002cd70
c0013725:	03 05 74 cd 02 c0    	add    eax,DWORD PTR ds:0xc002cd74
c001372b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013731:	99                   	cdq    
c0013732:	29 c6                	sub    esi,eax
c0013734:	19 d7                	sbb    edi,edx
c0013736:	89 f0                	mov    eax,esi
c0013738:	89 fa                	mov    edx,edi
c001373a:	31 f6                	xor    esi,esi
c001373c:	80 3d 71 cd 02 c0 00 	cmp    BYTE PTR ds:0xc002cd71,0x0
c0013743:	74 05                	je     c001374a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013745:	be 08 07 00 00       	mov    esi,0x708
c001374a:	31 ff                	xor    edi,edi
c001374c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013750:	29 f0                	sub    eax,esi
c0013752:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013756:	19 fa                	sbb    edx,edi
c0013758:	89 d8                	mov    eax,ebx
c001375a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001375e:	5b                   	pop    ebx
c001375f:	5e                   	pop    esi
c0013760:	5f                   	pop    edi
c0013761:	ff e0                	jmp    eax

c0013763 <datetimeToSeconds(datetime_t)>:
c0013763:	55                   	push   ebp
c0013764:	57                   	push   edi
c0013765:	56                   	push   esi
c0013766:	53                   	push   ebx
c0013767:	83 ec 14             	sub    esp,0x14
c001376a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001376e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013772:	89 d3                	mov    ebx,edx
c0013774:	0f b6 c6             	movzx  eax,dh
c0013777:	c1 eb 10             	shr    ebx,0x10
c001377a:	48                   	dec    eax
c001377b:	66 81 eb 6c 07       	sub    bx,0x76c
c0013780:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013784:	0f b6 f5             	movzx  esi,ch
c0013787:	89 cf                	mov    edi,ecx
c0013789:	6b f6 3c             	imul   esi,esi,0x3c
c001378c:	c1 ef 10             	shr    edi,0x10
c001378f:	0f b6 c9             	movzx  ecx,cl
c0013792:	89 f8                	mov    eax,edi
c0013794:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001379a:	0f b6 f8             	movzx  edi,al
c001379d:	0f b6 d2             	movzx  edx,dl
c00137a0:	01 fe                	add    esi,edi
c00137a2:	01 f1                	add    ecx,esi
c00137a4:	0f b7 f3             	movzx  esi,bx
c00137a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00137ab:	c1 f9 1f             	sar    ecx,0x1f
c00137ae:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c00137b3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00137b7:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c00137bc:	8b 0c 8d 20 96 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd69e0]
c00137c3:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c00137c7:	76 29                	jbe    c00137f2 <datetimeToSeconds(datetime_t)+0x8f>
c00137c9:	f6 c3 03             	test   bl,0x3
c00137cc:	75 24                	jne    c00137f2 <datetimeToSeconds(datetime_t)+0x8f>
c00137ce:	31 d2                	xor    edx,edx
c00137d0:	bf 64 00 00 00       	mov    edi,0x64
c00137d5:	89 d8                	mov    eax,ebx
c00137d7:	66 f7 f7             	div    di
c00137da:	66 85 d2             	test   dx,dx
c00137dd:	75 12                	jne    c00137f1 <datetimeToSeconds(datetime_t)+0x8e>
c00137df:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c00137e5:	bf 90 01 00 00       	mov    edi,0x190
c00137ea:	99                   	cdq    
c00137eb:	f7 ff                	idiv   edi
c00137ed:	85 d2                	test   edx,edx
c00137ef:	75 01                	jne    c00137f2 <datetimeToSeconds(datetime_t)+0x8f>
c00137f1:	41                   	inc    ecx
c00137f2:	66 83 fb 46          	cmp    bx,0x46
c00137f6:	76 45                	jbe    c001383d <datetimeToSeconds(datetime_t)+0xda>
c00137f8:	bb 46 00 00 00       	mov    ebx,0x46
c00137fd:	bf 64 00 00 00       	mov    edi,0x64
c0013802:	bd 90 01 00 00       	mov    ebp,0x190
c0013807:	b8 6d 01 00 00       	mov    eax,0x16d
c001380c:	f6 c3 03             	test   bl,0x3
c001380f:	75 23                	jne    c0013834 <datetimeToSeconds(datetime_t)+0xd1>
c0013811:	89 d8                	mov    eax,ebx
c0013813:	99                   	cdq    
c0013814:	f7 ff                	idiv   edi
c0013816:	b8 6e 01 00 00       	mov    eax,0x16e
c001381b:	85 d2                	test   edx,edx
c001381d:	75 15                	jne    c0013834 <datetimeToSeconds(datetime_t)+0xd1>
c001381f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013825:	99                   	cdq    
c0013826:	f7 fd                	idiv   ebp
c0013828:	83 fa 01             	cmp    edx,0x1
c001382b:	19 c0                	sbb    eax,eax
c001382d:	f7 d0                	not    eax
c001382f:	05 6e 01 00 00       	add    eax,0x16e
c0013834:	01 c1                	add    ecx,eax
c0013836:	43                   	inc    ebx
c0013837:	39 f3                	cmp    ebx,esi
c0013839:	7c cc                	jl     c0013807 <datetimeToSeconds(datetime_t)+0xa4>
c001383b:	eb 35                	jmp    c0013872 <datetimeToSeconds(datetime_t)+0x10f>
c001383d:	74 33                	je     c0013872 <datetimeToSeconds(datetime_t)+0x10f>
c001383f:	b8 45 00 00 00       	mov    eax,0x45
c0013844:	89 c2                	mov    edx,eax
c0013846:	83 e2 03             	and    edx,0x3
c0013849:	39 f0                	cmp    eax,esi
c001384b:	7e 0f                	jle    c001385c <datetimeToSeconds(datetime_t)+0xf9>
c001384d:	83 fa 01             	cmp    edx,0x1
c0013850:	19 d2                	sbb    edx,edx
c0013852:	48                   	dec    eax
c0013853:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001385a:	eb e8                	jmp    c0013844 <datetimeToSeconds(datetime_t)+0xe1>
c001385c:	b8 6d 01 00 00       	mov    eax,0x16d
c0013861:	85 d2                	test   edx,edx
c0013863:	75 0b                	jne    c0013870 <datetimeToSeconds(datetime_t)+0x10d>
c0013865:	66 83 fb 01          	cmp    bx,0x1
c0013869:	19 c0                	sbb    eax,eax
c001386b:	05 6e 01 00 00       	add    eax,0x16e
c0013870:	29 c1                	sub    ecx,eax
c0013872:	b8 80 51 01 00       	mov    eax,0x15180
c0013877:	f7 e9                	imul   ecx
c0013879:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001387d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013881:	83 c4 14             	add    esp,0x14
c0013884:	5b                   	pop    ebx
c0013885:	5e                   	pop    esi
c0013886:	5f                   	pop    edi
c0013887:	5d                   	pop    ebp
c0013888:	c3                   	ret    
c0013889:	90                   	nop

c001388a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001388a:	57                   	push   edi
c001388b:	56                   	push   esi
c001388c:	53                   	push   ebx
c001388d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013891:	8b 06                	mov    eax,DWORD PTR [esi]
c0013893:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013896:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001389a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001389e:	e8 c0 fe ff ff       	call   c0013763 <datetimeToSeconds(datetime_t)>
c00138a3:	59                   	pop    ecx
c00138a4:	0f b6 0d 70 cd 02 c0 	movzx  ecx,BYTE PTR ds:0xc002cd70
c00138ab:	5b                   	pop    ebx
c00138ac:	03 0d 74 cd 02 c0    	add    ecx,DWORD PTR ds:0xc002cd74
c00138b2:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00138b8:	89 cb                	mov    ebx,ecx
c00138ba:	c1 fb 1f             	sar    ebx,0x1f
c00138bd:	29 c8                	sub    eax,ecx
c00138bf:	19 da                	sbb    edx,ebx
c00138c1:	31 c9                	xor    ecx,ecx
c00138c3:	80 3d 71 cd 02 c0 00 	cmp    BYTE PTR ds:0xc002cd71,0x0
c00138ca:	74 05                	je     c00138d1 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00138cc:	b9 08 07 00 00       	mov    ecx,0x708
c00138d1:	31 db                	xor    ebx,ebx
c00138d3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00138d7:	29 c8                	sub    eax,ecx
c00138d9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00138dd:	19 da                	sbb    edx,ebx
c00138df:	89 f8                	mov    eax,edi
c00138e1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00138e5:	5b                   	pop    ebx
c00138e6:	5e                   	pop    esi
c00138e7:	5f                   	pop    edi
c00138e8:	ff e0                	jmp    eax

c00138ea <secondsToDatetime(unsigned long long)>:
c00138ea:	55                   	push   ebp
c00138eb:	57                   	push   edi
c00138ec:	56                   	push   esi
c00138ed:	53                   	push   ebx
c00138ee:	83 ec 1c             	sub    esp,0x1c
c00138f1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00138f5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00138f9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00138fd:	6a 00                	push   0x0
c00138ff:	68 80 51 01 00       	push   0x15180
c0013904:	55                   	push   ebp
c0013905:	57                   	push   edi
c0013906:	e8 41 1c 01 00       	call   c002554c <__udivdi3>
c001390b:	83 c4 10             	add    esp,0x10
c001390e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013914:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013918:	6a 00                	push   0x0
c001391a:	68 80 51 01 00       	push   0x15180
c001391f:	55                   	push   ebp
c0013920:	57                   	push   edi
c0013921:	bf 10 0e 00 00       	mov    edi,0xe10
c0013926:	e8 21 1d 01 00       	call   c002564c <__umoddi3>
c001392b:	83 c4 10             	add    esp,0x10
c001392e:	99                   	cdq    
c001392f:	f7 ff                	idiv   edi
c0013931:	bf 3c 00 00 00       	mov    edi,0x3c
c0013936:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013939:	89 d0                	mov    eax,edx
c001393b:	99                   	cdq    
c001393c:	f7 ff                	idiv   edi
c001393e:	85 db                	test   ebx,ebx
c0013940:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013943:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013946:	79 11                	jns    c0013959 <secondsToDatetime(unsigned long long)+0x6f>
c0013948:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001394c:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013952:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013957:	eb 07                	jmp    c0013960 <secondsToDatetime(unsigned long long)+0x76>
c0013959:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001395e:	89 d8                	mov    eax,ebx
c0013960:	bf b4 05 00 00       	mov    edi,0x5b4
c0013965:	99                   	cdq    
c0013966:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001396b:	f7 f9                	idiv   ecx
c001396d:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013972:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013976:	31 d2                	xor    edx,edx
c0013978:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013980:	01 c3                	add    ebx,eax
c0013982:	89 d8                	mov    eax,ebx
c0013984:	f7 f1                	div    ecx
c0013986:	31 d2                	xor    edx,edx
c0013988:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001398b:	89 d8                	mov    eax,ebx
c001398d:	f7 f7                	div    edi
c001398f:	31 d2                	xor    edx,edx
c0013991:	29 c1                	sub    ecx,eax
c0013993:	89 d8                	mov    eax,ebx
c0013995:	f7 f5                	div    ebp
c0013997:	bd 6d 01 00 00       	mov    ebp,0x16d
c001399c:	29 c1                	sub    ecx,eax
c001399e:	31 d2                	xor    edx,edx
c00139a0:	89 c8                	mov    eax,ecx
c00139a2:	f7 f5                	div    ebp
c00139a4:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00139a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00139ad:	31 d2                	xor    edx,edx
c00139af:	89 c8                	mov    eax,ecx
c00139b1:	f7 f5                	div    ebp
c00139b3:	31 d2                	xor    edx,edx
c00139b5:	01 c3                	add    ebx,eax
c00139b7:	89 c8                	mov    eax,ecx
c00139b9:	f7 f7                	div    edi
c00139bb:	bf 99 00 00 00       	mov    edi,0x99
c00139c0:	29 c3                	sub    ebx,eax
c00139c2:	31 d2                	xor    edx,edx
c00139c4:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00139cc:	29 c3                	sub    ebx,eax
c00139ce:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00139d1:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00139d4:	bb 05 00 00 00       	mov    ebx,0x5
c00139d9:	83 c1 02             	add    ecx,0x2
c00139dc:	89 c8                	mov    eax,ecx
c00139de:	f7 f7                	div    edi
c00139e0:	31 d2                	xor    edx,edx
c00139e2:	89 c7                	mov    edi,eax
c00139e4:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00139ea:	83 c0 02             	add    eax,0x2
c00139ed:	f7 f3                	div    ebx
c00139ef:	89 eb                	mov    ebx,ebp
c00139f1:	29 c3                	sub    ebx,eax
c00139f3:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00139f9:	88 1e                	mov    BYTE PTR [esi],bl
c00139fb:	19 c0                	sbb    eax,eax
c00139fd:	31 d2                	xor    edx,edx
c00139ff:	83 e0 0c             	and    eax,0xc
c0013a02:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013a06:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013a0e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013a12:	83 f9 01             	cmp    ecx,0x1
c0013a15:	0f 96 c2             	setbe  dl
c0013a18:	41                   	inc    ecx
c0013a19:	01 d0                	add    eax,edx
c0013a1b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013a1e:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013a22:	83 c4 1c             	add    esp,0x1c
c0013a25:	89 f0                	mov    eax,esi
c0013a27:	5b                   	pop    ebx
c0013a28:	5e                   	pop    esi
c0013a29:	5f                   	pop    edi
c0013a2a:	5d                   	pop    ebp
c0013a2b:	c2 04 00             	ret    0x4

c0013a2e <Clock::timeInDatetimeLocal()>:
c0013a2e:	53                   	push   ebx
c0013a2f:	83 ec 14             	sub    esp,0x14
c0013a32:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a36:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013a3a:	e8 83 fc ff ff       	call   c00136c2 <Clock::timeInSecondsLocal()>
c0013a3f:	83 c4 0c             	add    esp,0xc
c0013a42:	52                   	push   edx
c0013a43:	50                   	push   eax
c0013a44:	53                   	push   ebx
c0013a45:	e8 a0 fe ff ff       	call   c00138ea <secondsToDatetime(unsigned long long)>
c0013a4a:	89 d8                	mov    eax,ebx
c0013a4c:	83 c4 14             	add    esp,0x14
c0013a4f:	5b                   	pop    ebx
c0013a50:	c2 04 00             	ret    0x4
c0013a53:	90                   	nop

c0013a54 <Device::hibernate()>:
c0013a54:	c3                   	ret    
c0013a55:	90                   	nop

c0013a56 <Device::wake()>:
c0013a56:	c3                   	ret    
c0013a57:	90                   	nop

c0013a58 <Device::detect()>:
c0013a58:	c3                   	ret    
c0013a59:	90                   	nop

c0013a5a <Device::disableLegacy()>:
c0013a5a:	c3                   	ret    
c0013a5b:	90                   	nop

c0013a5c <Device::powerSaving(PowerSavingLevel)>:
c0013a5c:	c3                   	ret    
c0013a5d:	90                   	nop

c0013a5e <DriverlessDevice::close(int, int, void*)>:
c0013a5e:	31 c0                	xor    eax,eax
c0013a60:	c3                   	ret    
c0013a61:	90                   	nop

c0013a62 <DriverlessDevice::detect()>:
c0013a62:	c3                   	ret    
c0013a63:	90                   	nop

c0013a64 <DriverlessDevice::open(int, int, void*)>:
c0013a64:	83 ec 18             	sub    esp,0x18
c0013a67:	68 50 96 02 c0       	push   0xc0029650
c0013a6c:	e8 60 5e 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c0013a71:	83 c8 ff             	or     eax,0xffffffff
c0013a74:	83 c4 1c             	add    esp,0x1c
c0013a77:	c3                   	ret    

c0013a78 <Device::~Device()>:
c0013a78:	ba 78 96 02 c0       	mov    edx,0xc0029678
c0013a7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a81:	89 10                	mov    DWORD PTR [eax],edx
c0013a83:	90                   	nop
c0013a84:	c3                   	ret    
c0013a85:	90                   	nop

c0013a86 <Device::~Device()>:
c0013a86:	83 ec 0c             	sub    esp,0xc
c0013a89:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013a8d:	e8 e6 ff ff ff       	call   c0013a78 <Device::~Device()>
c0013a92:	83 c4 04             	add    esp,0x4
c0013a95:	83 ec 08             	sub    esp,0x8
c0013a98:	68 58 01 00 00       	push   0x158
c0013a9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013aa1:	e8 f9 eb ff ff       	call   c001269f <operator delete(void*, unsigned long)>
c0013aa6:	83 c4 10             	add    esp,0x10
c0013aa9:	83 c4 0c             	add    esp,0xc
c0013aac:	c3                   	ret    
c0013aad:	90                   	nop

c0013aae <Device::findAndLoadDriver()>:
c0013aae:	c3                   	ret    
c0013aaf:	90                   	nop

c0013ab0 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013ab0:	57                   	push   edi
c0013ab1:	b9 09 00 00 00       	mov    ecx,0x9
c0013ab6:	56                   	push   esi
c0013ab7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013abb:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013abf:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013ac9:	81 c7 18 01 00 00    	add    edi,0x118
c0013acf:	fc                   	cld    
c0013ad0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013ad2:	5e                   	pop    esi
c0013ad3:	5f                   	pop    edi
c0013ad4:	c3                   	ret    
c0013ad5:	90                   	nop

c0013ad6 <Device::preOpenACPI(void*, char*, char*)>:
c0013ad6:	56                   	push   esi
c0013ad7:	53                   	push   ebx
c0013ad8:	83 ec 08             	sub    esp,0x8
c0013adb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013adf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013ae3:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013aed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013af1:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013af7:	6a 1e                	push   0x1e
c0013af9:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013aff:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013b03:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013b09:	50                   	push   eax
c0013b0a:	e8 46 cb fe ff       	call   c0000655 <memcpy>
c0013b0f:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013b13:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013b17:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013b1f:	83 c4 14             	add    esp,0x14
c0013b22:	5b                   	pop    ebx
c0013b23:	5e                   	pop    esi
c0013b24:	e9 2c cb fe ff       	jmp    c0000655 <memcpy>
c0013b29:	90                   	nop

c0013b2a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013b2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b2e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013b33:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013b3a:	75 0b                	jne    c0013b47 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013b3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b3e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b42:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013b45:	eb 1e                	jmp    c0013b65 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013b47:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c0013b4c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013b52:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013b58:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013b5a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b5e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b62:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013b65:	ff e0                	jmp    eax
c0013b67:	90                   	nop

c0013b68 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013b68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b6c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013b71:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013b78:	75 0b                	jne    c0013b85 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013b7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b7c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b80:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013b83:	eb 1e                	jmp    c0013ba3 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013b85:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c0013b8a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013b90:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013b96:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013b98:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b9c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013ba0:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013ba3:	ff e0                	jmp    eax
c0013ba5:	90                   	nop

c0013ba6 <Device::addChild(Device*)>:
c0013ba6:	53                   	push   ebx
c0013ba7:	83 ec 08             	sub    esp,0x8
c0013baa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013bae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bb2:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013bb8:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013bbe:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013bc0:	85 d2                	test   edx,edx
c0013bc2:	74 04                	je     c0013bc8 <Device::addChild(Device*)+0x22>
c0013bc4:	89 d3                	mov    ebx,edx
c0013bc6:	eb f6                	jmp    c0013bbe <Device::addChild(Device*)+0x18>
c0013bc8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013bcb:	83 ec 0c             	sub    esp,0xc
c0013bce:	6a 08                	push   0x8
c0013bd0:	e8 05 b9 ff ff       	call   c000f4da <malloc>
c0013bd5:	89 03                	mov    DWORD PTR [ebx],eax
c0013bd7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013bdd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013be4:	83 c4 18             	add    esp,0x18
c0013be7:	5b                   	pop    ebx
c0013be8:	c3                   	ret    
c0013be9:	90                   	nop

c0013bea <Device::removeAllChildren()>:
c0013bea:	56                   	push   esi
c0013beb:	53                   	push   ebx
c0013bec:	52                   	push   edx
c0013bed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013bf1:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013bf7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bfa:	74 17                	je     c0013c13 <Device::removeAllChildren()+0x29>
c0013bfc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013bff:	85 c0                	test   eax,eax
c0013c01:	74 0c                	je     c0013c0f <Device::removeAllChildren()+0x25>
c0013c03:	83 ec 0c             	sub    esp,0xc
c0013c06:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c08:	50                   	push   eax
c0013c09:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013c0c:	83 c4 10             	add    esp,0x10
c0013c0f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c11:	eb e4                	jmp    c0013bf7 <Device::removeAllChildren()+0xd>
c0013c13:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013c19:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013c1f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013c25:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013c2c:	58                   	pop    eax
c0013c2d:	5b                   	pop    ebx
c0013c2e:	5e                   	pop    esi
c0013c2f:	c3                   	ret    

c0013c30 <Device::hibernateAll()>:
c0013c30:	53                   	push   ebx
c0013c31:	83 ec 14             	sub    esp,0x14
c0013c34:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c38:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c3a:	53                   	push   ebx
c0013c3b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013c3e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c44:	83 c4 10             	add    esp,0x10
c0013c47:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c4a:	74 0f                	je     c0013c5b <Device::hibernateAll()+0x2b>
c0013c4c:	83 ec 0c             	sub    esp,0xc
c0013c4f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c52:	e8 d9 ff ff ff       	call   c0013c30 <Device::hibernateAll()>
c0013c57:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c59:	eb e9                	jmp    c0013c44 <Device::hibernateAll()+0x14>
c0013c5b:	83 c4 08             	add    esp,0x8
c0013c5e:	5b                   	pop    ebx
c0013c5f:	c3                   	ret    

c0013c60 <Device::wakeAll()>:
c0013c60:	53                   	push   ebx
c0013c61:	83 ec 14             	sub    esp,0x14
c0013c64:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c68:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c6a:	53                   	push   ebx
c0013c6b:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013c6e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c74:	83 c4 10             	add    esp,0x10
c0013c77:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c7a:	74 0f                	je     c0013c8b <Device::wakeAll()+0x2b>
c0013c7c:	83 ec 0c             	sub    esp,0xc
c0013c7f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c82:	e8 d9 ff ff ff       	call   c0013c60 <Device::wakeAll()>
c0013c87:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c89:	eb e9                	jmp    c0013c74 <Device::wakeAll()+0x14>
c0013c8b:	83 c4 08             	add    esp,0x8
c0013c8e:	5b                   	pop    ebx
c0013c8f:	c3                   	ret    

c0013c90 <Device::detectAll()>:
c0013c90:	53                   	push   ebx
c0013c91:	83 ec 14             	sub    esp,0x14
c0013c94:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c98:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c9a:	53                   	push   ebx
c0013c9b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013c9e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ca4:	83 c4 10             	add    esp,0x10
c0013ca7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013caa:	74 0f                	je     c0013cbb <Device::detectAll()+0x2b>
c0013cac:	83 ec 0c             	sub    esp,0xc
c0013caf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013cb2:	e8 d9 ff ff ff       	call   c0013c90 <Device::detectAll()>
c0013cb7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cb9:	eb e9                	jmp    c0013ca4 <Device::detectAll()+0x14>
c0013cbb:	83 c4 08             	add    esp,0x8
c0013cbe:	5b                   	pop    ebx
c0013cbf:	c3                   	ret    

c0013cc0 <Device::disableLegacyAll()>:
c0013cc0:	53                   	push   ebx
c0013cc1:	83 ec 14             	sub    esp,0x14
c0013cc4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013cc8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cca:	53                   	push   ebx
c0013ccb:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013cce:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013cd4:	83 c4 10             	add    esp,0x10
c0013cd7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013cda:	74 0f                	je     c0013ceb <Device::disableLegacyAll()+0x2b>
c0013cdc:	83 ec 0c             	sub    esp,0xc
c0013cdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ce2:	e8 d9 ff ff ff       	call   c0013cc0 <Device::disableLegacyAll()>
c0013ce7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ce9:	eb e9                	jmp    c0013cd4 <Device::disableLegacyAll()+0x14>
c0013ceb:	83 c4 08             	add    esp,0x8
c0013cee:	5b                   	pop    ebx
c0013cef:	c3                   	ret    

c0013cf0 <Device::loadDriversForAll()>:
c0013cf0:	53                   	push   ebx
c0013cf1:	83 ec 08             	sub    esp,0x8
c0013cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cf8:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013cfe:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013d00:	85 db                	test   ebx,ebx
c0013d02:	74 12                	je     c0013d16 <Device::loadDriversForAll()+0x26>
c0013d04:	83 ec 0c             	sub    esp,0xc
c0013d07:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013d0a:	e8 e1 ff ff ff       	call   c0013cf0 <Device::loadDriversForAll()>
c0013d0f:	83 c4 10             	add    esp,0x10
c0013d12:	89 d8                	mov    eax,ebx
c0013d14:	eb e8                	jmp    c0013cfe <Device::loadDriversForAll()+0xe>
c0013d16:	83 c4 08             	add    esp,0x8
c0013d19:	5b                   	pop    ebx
c0013d1a:	c3                   	ret    
c0013d1b:	90                   	nop

c0013d1c <Device::closeAll()>:
c0013d1c:	53                   	push   ebx
c0013d1d:	83 ec 08             	sub    esp,0x8
c0013d20:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d24:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d26:	6a 00                	push   0x0
c0013d28:	6a 00                	push   0x0
c0013d2a:	6a 00                	push   0x0
c0013d2c:	53                   	push   ebx
c0013d2d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d30:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d36:	83 c4 10             	add    esp,0x10
c0013d39:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d3c:	74 0f                	je     c0013d4d <Device::closeAll()+0x31>
c0013d3e:	83 ec 0c             	sub    esp,0xc
c0013d41:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d44:	e8 d3 ff ff ff       	call   c0013d1c <Device::closeAll()>
c0013d49:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d4b:	eb e9                	jmp    c0013d36 <Device::closeAll()+0x1a>
c0013d4d:	83 c4 08             	add    esp,0x8
c0013d50:	5b                   	pop    ebx
c0013d51:	c3                   	ret    

c0013d52 <Device::powerSavingAll(PowerSavingLevel)>:
c0013d52:	56                   	push   esi
c0013d53:	53                   	push   ebx
c0013d54:	83 ec 0c             	sub    esp,0xc
c0013d57:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d5b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013d5f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d61:	56                   	push   esi
c0013d62:	53                   	push   ebx
c0013d63:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013d66:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d6c:	83 c4 10             	add    esp,0x10
c0013d6f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d72:	74 0f                	je     c0013d83 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013d74:	52                   	push   edx
c0013d75:	52                   	push   edx
c0013d76:	56                   	push   esi
c0013d77:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d7a:	e8 d3 ff ff ff       	call   c0013d52 <Device::powerSavingAll(PowerSavingLevel)>
c0013d7f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d81:	eb e9                	jmp    c0013d6c <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013d83:	58                   	pop    eax
c0013d84:	5b                   	pop    ebx
c0013d85:	5e                   	pop    esi
c0013d86:	c3                   	ret    
c0013d87:	90                   	nop

c0013d88 <Device::setName(char const*)>:
c0013d88:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013d90:	e9 95 c9 fe ff       	jmp    c000072a <strcpy>
c0013d95:	90                   	nop

c0013d96 <Device::Device(char const*)>:
c0013d96:	83 ec 1c             	sub    esp,0x1c
c0013d99:	ba 78 96 02 c0       	mov    edx,0xc0029678
c0013d9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013da2:	89 10                	mov    DWORD PTR [eax],edx
c0013da4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013da8:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013db2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013db6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013dc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dc4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013dce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dd2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013ddc:	83 ec 08             	sub    esp,0x8
c0013ddf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013de3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013de7:	e8 9c ff ff ff       	call   c0013d88 <Device::setName(char const*)>
c0013dec:	83 c4 10             	add    esp,0x10
c0013def:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013df7:	83 ec 0c             	sub    esp,0xc
c0013dfa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013dfe:	e8 d7 b6 ff ff       	call   c000f4da <malloc>
c0013e03:	83 c4 10             	add    esp,0x10
c0013e06:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013e0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013e13:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013e17:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013e1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e21:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013e27:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013e2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e31:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013e37:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013e3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e42:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013e49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e4d:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013e54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e58:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013e62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e66:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013e70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e74:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013e7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e82:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013e8c:	90                   	nop
c0013e8d:	83 c4 1c             	add    esp,0x1c
c0013e90:	c3                   	ret    
c0013e91:	90                   	nop

c0013e92 <Device::getName()>:
c0013e92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e96:	05 d0 00 00 00       	add    eax,0xd0
c0013e9b:	c3                   	ret    

c0013e9c <DriverlessDevice::DriverlessDevice(char const*)>:
c0013e9c:	83 ec 0c             	sub    esp,0xc
c0013e9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ea3:	83 ec 08             	sub    esp,0x8
c0013ea6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013eaa:	50                   	push   eax
c0013eab:	e8 e6 fe ff ff       	call   c0013d96 <Device::Device(char const*)>
c0013eb0:	83 c4 10             	add    esp,0x10
c0013eb3:	ba a4 96 02 c0       	mov    edx,0xc00296a4
c0013eb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ebc:	89 10                	mov    DWORD PTR [eax],edx
c0013ebe:	90                   	nop
c0013ebf:	83 c4 0c             	add    esp,0xc
c0013ec2:	c3                   	ret    
c0013ec3:	90                   	nop

c0013ec4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013ec4:	57                   	push   edi
c0013ec5:	56                   	push   esi
c0013ec6:	53                   	push   ebx
c0013ec7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ecb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ecf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013ed3:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013ed9:	75 0c                	jne    c0013ee7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013edb:	52                   	push   edx
c0013edc:	52                   	push   edx
c0013edd:	53                   	push   ebx
c0013ede:	56                   	push   esi
c0013edf:	e8 a6 35 01 00       	call   c002748a <LinkedList<Device>::addElement(Device*)>
c0013ee4:	83 c4 10             	add    esp,0x10
c0013ee7:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013eed:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ef0:	74 12                	je     c0013f04 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013ef2:	50                   	push   eax
c0013ef3:	57                   	push   edi
c0013ef4:	56                   	push   esi
c0013ef5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ef8:	e8 c7 ff ff ff       	call   c0013ec4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013efd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013eff:	83 c4 10             	add    esp,0x10
c0013f02:	eb e9                	jmp    c0013eed <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013f04:	5b                   	pop    ebx
c0013f05:	5e                   	pop    esi
c0013f06:	5f                   	pop    edi
c0013f07:	c3                   	ret    

c0013f08 <getDevicesOfType(DeviceType)>:
c0013f08:	53                   	push   ebx
c0013f09:	83 ec 14             	sub    esp,0x14
c0013f0c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013f10:	53                   	push   ebx
c0013f11:	e8 50 36 01 00       	call   c0027566 <LinkedList<Device>::LinkedList()>
c0013f16:	83 c4 0c             	add    esp,0xc
c0013f19:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f1d:	53                   	push   ebx
c0013f1e:	ff 35 e8 cb 02 c0    	push   DWORD PTR ds:0xc002cbe8
c0013f24:	e8 9b ff ff ff       	call   c0013ec4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013f29:	89 d8                	mov    eax,ebx
c0013f2b:	83 c4 18             	add    esp,0x18
c0013f2e:	5b                   	pop    ebx
c0013f2f:	c2 04 00             	ret    0x4

c0013f32 <HardDiskController::HardDiskController(char const*)>:
c0013f32:	83 ec 0c             	sub    esp,0xc
c0013f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f39:	83 ec 08             	sub    esp,0x8
c0013f3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f40:	50                   	push   eax
c0013f41:	e8 50 fe ff ff       	call   c0013d96 <Device::Device(char const*)>
c0013f46:	83 c4 10             	add    esp,0x10
c0013f49:	ba d0 96 02 c0       	mov    edx,0xc00296d0
c0013f4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f52:	89 10                	mov    DWORD PTR [eax],edx
c0013f54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f58:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013f62:	90                   	nop
c0013f63:	83 c4 0c             	add    esp,0xc
c0013f66:	c3                   	ret    
c0013f67:	90                   	nop

c0013f68 <HardDiskController::~HardDiskController()>:
c0013f68:	83 ec 0c             	sub    esp,0xc
c0013f6b:	ba d0 96 02 c0       	mov    edx,0xc00296d0
c0013f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f74:	89 10                	mov    DWORD PTR [eax],edx
c0013f76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f7a:	83 ec 0c             	sub    esp,0xc
c0013f7d:	50                   	push   eax
c0013f7e:	e8 f5 fa ff ff       	call   c0013a78 <Device::~Device()>
c0013f83:	83 c4 10             	add    esp,0x10
c0013f86:	90                   	nop
c0013f87:	83 c4 0c             	add    esp,0xc
c0013f8a:	c3                   	ret    
c0013f8b:	90                   	nop

c0013f8c <HardDiskController::~HardDiskController()>:
c0013f8c:	83 ec 0c             	sub    esp,0xc
c0013f8f:	83 ec 0c             	sub    esp,0xc
c0013f92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f96:	e8 cd ff ff ff       	call   c0013f68 <HardDiskController::~HardDiskController()>
c0013f9b:	83 c4 10             	add    esp,0x10
c0013f9e:	83 ec 08             	sub    esp,0x8
c0013fa1:	68 58 01 00 00       	push   0x158
c0013fa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013faa:	e8 f0 e6 ff ff       	call   c001269f <operator delete(void*, unsigned long)>
c0013faf:	83 c4 10             	add    esp,0x10
c0013fb2:	83 c4 0c             	add    esp,0xc
c0013fb5:	c3                   	ret    

c0013fb6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013fb6:	83 ec 0c             	sub    esp,0xc
c0013fb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fbd:	83 ec 08             	sub    esp,0x8
c0013fc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fc4:	50                   	push   eax
c0013fc5:	e8 cc fd ff ff       	call   c0013d96 <Device::Device(char const*)>
c0013fca:	83 c4 10             	add    esp,0x10
c0013fcd:	ba fc 96 02 c0       	mov    edx,0xc00296fc
c0013fd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fd6:	89 10                	mov    DWORD PTR [eax],edx
c0013fd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fdc:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013fe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fe7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013fee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ff2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013ffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014000:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014004:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001400a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001400e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014018:	90                   	nop
c0014019:	83 c4 0c             	add    esp,0xc
c001401c:	c3                   	ret    
c001401d:	90                   	nop

c001401e <PhysicalDisk::startCache()>:
c001401e:	56                   	push   esi
c001401f:	53                   	push   ebx
c0014020:	83 ec 10             	sub    esp,0x10
c0014023:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014027:	6a 30                	push   0x30
c0014029:	e8 ac b4 ff ff       	call   c000f4da <malloc>
c001402e:	89 c6                	mov    esi,eax
c0014030:	58                   	pop    eax
c0014031:	5a                   	pop    edx
c0014032:	53                   	push   ebx
c0014033:	56                   	push   esi
c0014034:	e8 dd 25 00 00       	call   c0016616 <VCache::VCache(PhysicalDisk*)>
c0014039:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001403f:	83 c4 14             	add    esp,0x14
c0014042:	5b                   	pop    ebx
c0014043:	5e                   	pop    esi
c0014044:	c3                   	ret    
c0014045:	90                   	nop

c0014046 <PhysicalDisk::~PhysicalDisk()>:
c0014046:	83 ec 0c             	sub    esp,0xc
c0014049:	ba fc 96 02 c0       	mov    edx,0xc00296fc
c001404e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014052:	89 10                	mov    DWORD PTR [eax],edx
c0014054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014058:	83 ec 0c             	sub    esp,0xc
c001405b:	50                   	push   eax
c001405c:	e8 17 fa ff ff       	call   c0013a78 <Device::~Device()>
c0014061:	83 c4 10             	add    esp,0x10
c0014064:	90                   	nop
c0014065:	83 c4 0c             	add    esp,0xc
c0014068:	c3                   	ret    
c0014069:	90                   	nop

c001406a <PhysicalDisk::~PhysicalDisk()>:
c001406a:	83 ec 0c             	sub    esp,0xc
c001406d:	83 ec 0c             	sub    esp,0xc
c0014070:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014074:	e8 cd ff ff ff       	call   c0014046 <PhysicalDisk::~PhysicalDisk()>
c0014079:	83 c4 10             	add    esp,0x10
c001407c:	83 ec 08             	sub    esp,0x8
c001407f:	68 6c 01 00 00       	push   0x16c
c0014084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014088:	e8 12 e6 ff ff       	call   c001269f <operator delete(void*, unsigned long)>
c001408d:	83 c4 10             	add    esp,0x10
c0014090:	83 c4 0c             	add    esp,0xc
c0014093:	c3                   	ret    

c0014094 <FPU::FPU(char const*)>:
c0014094:	83 ec 0c             	sub    esp,0xc
c0014097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001409b:	83 ec 08             	sub    esp,0x8
c001409e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140a2:	50                   	push   eax
c00140a3:	e8 ee fc ff ff       	call   c0013d96 <Device::Device(char const*)>
c00140a8:	83 c4 10             	add    esp,0x10
c00140ab:	ba 3c 97 02 c0       	mov    edx,0xc002973c
c00140b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140b4:	89 10                	mov    DWORD PTR [eax],edx
c00140b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140ba:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00140c4:	90                   	nop
c00140c5:	83 c4 0c             	add    esp,0xc
c00140c8:	c3                   	ret    
c00140c9:	90                   	nop

c00140ca <FPU::~FPU()>:
c00140ca:	83 ec 0c             	sub    esp,0xc
c00140cd:	ba 3c 97 02 c0       	mov    edx,0xc002973c
c00140d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140d6:	89 10                	mov    DWORD PTR [eax],edx
c00140d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140dc:	83 ec 0c             	sub    esp,0xc
c00140df:	50                   	push   eax
c00140e0:	e8 93 f9 ff ff       	call   c0013a78 <Device::~Device()>
c00140e5:	83 c4 10             	add    esp,0x10
c00140e8:	90                   	nop
c00140e9:	83 c4 0c             	add    esp,0xc
c00140ec:	c3                   	ret    
c00140ed:	90                   	nop

c00140ee <FPU::~FPU()>:
c00140ee:	83 ec 0c             	sub    esp,0xc
c00140f1:	83 ec 0c             	sub    esp,0xc
c00140f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140f8:	e8 cd ff ff ff       	call   c00140ca <FPU::~FPU()>
c00140fd:	83 c4 10             	add    esp,0x10
c0014100:	83 ec 08             	sub    esp,0x8
c0014103:	68 58 01 00 00       	push   0x158
c0014108:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001410c:	e8 8e e5 ff ff       	call   c001269f <operator delete(void*, unsigned long)>
c0014111:	83 c4 10             	add    esp,0x10
c0014114:	83 c4 0c             	add    esp,0xc
c0014117:	c3                   	ret    

c0014118 <setupFPU()>:
c0014118:	53                   	push   ebx
c0014119:	83 ec 08             	sub    esp,0x8
c001411c:	8b 15 e8 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cbe8
c0014122:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014129:	74 19                	je     c0014144 <setupFPU()+0x2c>
c001412b:	83 ec 0c             	sub    esp,0xc
c001412e:	68 58 01 00 00       	push   0x158
c0014133:	e8 a2 b3 ff ff       	call   c000f4da <malloc>
c0014138:	89 c3                	mov    ebx,eax
c001413a:	89 04 24             	mov    DWORD PTR [esp],eax
c001413d:	e8 98 ff 00 00       	call   c00240da <AVX::AVX()>
c0014142:	eb 5b                	jmp    c001419f <setupFPU()+0x87>
c0014144:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001414a:	84 c0                	test   al,al
c001414c:	79 19                	jns    c0014167 <setupFPU()+0x4f>
c001414e:	83 ec 0c             	sub    esp,0xc
c0014151:	68 58 01 00 00       	push   0x158
c0014156:	e8 7f b3 ff ff       	call   c000f4da <malloc>
c001415b:	89 c3                	mov    ebx,eax
c001415d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014160:	e8 9b 00 01 00       	call   c0024200 <SSE::SSE()>
c0014165:	eb 38                	jmp    c001419f <setupFPU()+0x87>
c0014167:	a8 20                	test   al,0x20
c0014169:	74 19                	je     c0014184 <setupFPU()+0x6c>
c001416b:	83 ec 0c             	sub    esp,0xc
c001416e:	68 58 01 00 00       	push   0x158
c0014173:	e8 62 b3 ff ff       	call   c000f4da <malloc>
c0014178:	89 c3                	mov    ebx,eax
c001417a:	89 04 24             	mov    DWORD PTR [esp],eax
c001417d:	e8 e8 ff 00 00       	call   c002416a <MMX::MMX()>
c0014182:	eb 1b                	jmp    c001419f <setupFPU()+0x87>
c0014184:	a8 10                	test   al,0x10
c0014186:	74 1c                	je     c00141a4 <setupFPU()+0x8c>
c0014188:	83 ec 0c             	sub    esp,0xc
c001418b:	68 58 01 00 00       	push   0x158
c0014190:	e8 45 b3 ff ff       	call   c000f4da <malloc>
c0014195:	89 c3                	mov    ebx,eax
c0014197:	89 04 24             	mov    DWORD PTR [esp],eax
c001419a:	e8 ef 00 01 00       	call   c002428e <x87::x87()>
c001419f:	83 c4 10             	add    esp,0x10
c00141a2:	eb 24                	jmp    c00141c8 <setupFPU()+0xb0>
c00141a4:	83 e0 ef             	and    eax,0xffffffef
c00141a7:	83 ec 0c             	sub    esp,0xc
c00141aa:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00141b0:	68 28 97 02 c0       	push   0xc0029728
c00141b5:	e8 c5 e5 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c00141ba:	0f 20 c0             	mov    eax,cr0
c00141bd:	83 c8 04             	or     eax,0x4
c00141c0:	0f 22 c0             	mov    cr0,eax
c00141c3:	31 db                	xor    ebx,ebx
c00141c5:	83 c4 10             	add    esp,0x10
c00141c8:	89 d8                	mov    eax,ebx
c00141ca:	83 c4 08             	add    esp,0x8
c00141cd:	5b                   	pop    ebx
c00141ce:	c3                   	ret    
c00141cf:	90                   	nop

c00141d0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00141d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00141d4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00141d8:	c1 e0 04             	shl    eax,0x4
c00141db:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00141df:	8d 50 10             	lea    edx,[eax+0x10]
c00141e2:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00141e8:	74 08                	je     c00141f2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00141ea:	83 c0 04             	add    eax,0x4
c00141ed:	39 d0                	cmp    eax,edx
c00141ef:	75 f1                	jne    c00141e2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00141f1:	c3                   	ret    
c00141f2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00141fc:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014206:	eb e2                	jmp    c00141ea <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014208 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014208:	57                   	push   edi
c0014209:	31 c0                	xor    eax,eax
c001420b:	56                   	push   esi
c001420c:	53                   	push   ebx
c001420d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014211:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014215:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014219:	89 da                	mov    edx,ebx
c001421b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001421f:	c1 e2 04             	shl    edx,0x4
c0014222:	01 ca                	add    edx,ecx
c0014224:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001422c:	74 16                	je     c0014244 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c001422e:	40                   	inc    eax
c001422f:	83 f8 04             	cmp    eax,0x4
c0014232:	75 f0                	jne    c0014224 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014234:	c7 44 24 10 6c 97 02 c0 	mov    DWORD PTR [esp+0x10],0xc002976c
c001423c:	5b                   	pop    ebx
c001423d:	5e                   	pop    esi
c001423e:	5f                   	pop    edi
c001423f:	e9 8d 56 00 00       	jmp    c00198d1 <Krnl::panic(char const*)>
c0014244:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014247:	8d 04 81             	lea    eax,[ecx+eax*4]
c001424a:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014250:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014256:	5b                   	pop    ebx
c0014257:	5e                   	pop    esi
c0014258:	5f                   	pop    edi
c0014259:	c3                   	ret    

c001425a <doubleFault(regs*, void*)>:
c001425a:	55                   	push   ebp
c001425b:	89 e5                	mov    ebp,esp
c001425d:	83 ec 08             	sub    esp,0x8
c0014260:	83 ec 0c             	sub    esp,0xc
c0014263:	68 a7 97 02 c0       	push   0xc00297a7
c0014268:	e8 64 56 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c001426d:	83 c4 10             	add    esp,0x10
c0014270:	90                   	nop
c0014271:	c9                   	leave  
c0014272:	c3                   	ret    
c0014273:	90                   	nop

c0014274 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014274:	56                   	push   esi
c0014275:	53                   	push   ebx
c0014276:	50                   	push   eax
c0014277:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001427b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001427f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014284:	75 35                	jne    c00142bb <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014286:	8d 43 20             	lea    eax,[ebx+0x20]
c0014289:	31 d2                	xor    edx,edx
c001428b:	89 c1                	mov    ecx,eax
c001428d:	c1 e1 04             	shl    ecx,0x4
c0014290:	01 f1                	add    ecx,esi
c0014292:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c001429a:	74 3e                	je     c00142da <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c001429c:	42                   	inc    edx
c001429d:	83 fa 04             	cmp    edx,0x4
c00142a0:	75 f0                	jne    c0014292 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00142a2:	83 ec 0c             	sub    esp,0xc
c00142a5:	68 ec 97 02 c0       	push   0xc00297ec
c00142aa:	e8 22 56 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c00142af:	83 c4 10             	add    esp,0x10
c00142b2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00142b7:	5a                   	pop    edx
c00142b8:	5b                   	pop    ebx
c00142b9:	5e                   	pop    esi
c00142ba:	c3                   	ret    
c00142bb:	83 ec 0c             	sub    esp,0xc
c00142be:	56                   	push   esi
c00142bf:	e8 ce fb ff ff       	call   c0013e92 <Device::getName()>
c00142c4:	83 c4 10             	add    esp,0x10
c00142c7:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00142ca:	75 ba                	jne    c0014286 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00142cc:	83 fb 0f             	cmp    ebx,0xf
c00142cf:	7f 29                	jg     c00142fa <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00142d1:	0f b6 9b 40 be 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd41c0]
c00142d8:	eb ac                	jmp    c0014286 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00142da:	8d 04 82             	lea    eax,[edx+eax*4]
c00142dd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00142e1:	8d 04 86             	lea    eax,[esi+eax*4]
c00142e4:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00142ea:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00142ee:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00142f4:	89 d8                	mov    eax,ebx
c00142f6:	5a                   	pop    edx
c00142f7:	5b                   	pop    ebx
c00142f8:	5e                   	pop    esi
c00142f9:	c3                   	ret    
c00142fa:	83 ec 0c             	sub    esp,0xc
c00142fd:	68 b4 97 02 c0       	push   0xc00297b4
c0014302:	e8 ca 55 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c0014307:	83 c4 10             	add    esp,0x10
c001430a:	e9 77 ff ff ff       	jmp    c0014286 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001430f:	90                   	nop

c0014310 <InterruptController::clearAllHandlers(int, bool)>:
c0014310:	56                   	push   esi
c0014311:	53                   	push   ebx
c0014312:	52                   	push   edx
c0014313:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014317:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001431b:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014320:	75 61                	jne    c0014383 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014322:	8d 46 20             	lea    eax,[esi+0x20]
c0014325:	c1 e6 04             	shl    esi,0x4
c0014328:	c1 e0 04             	shl    eax,0x4
c001432b:	01 de                	add    esi,ebx
c001432d:	01 d8                	add    eax,ebx
c001432f:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014339:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014343:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001434d:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014357:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014361:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c001436b:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014375:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c001437f:	58                   	pop    eax
c0014380:	5b                   	pop    ebx
c0014381:	5e                   	pop    esi
c0014382:	c3                   	ret    
c0014383:	83 ec 0c             	sub    esp,0xc
c0014386:	53                   	push   ebx
c0014387:	e8 06 fb ff ff       	call   c0013e92 <Device::getName()>
c001438c:	83 c4 10             	add    esp,0x10
c001438f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014392:	75 8e                	jne    c0014322 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014394:	83 fe 0f             	cmp    esi,0xf
c0014397:	7f 09                	jg     c00143a2 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014399:	0f b6 b6 40 be 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd41c0]
c00143a0:	eb 80                	jmp    c0014322 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00143a2:	83 ec 0c             	sub    esp,0xc
c00143a5:	68 28 98 02 c0       	push   0xc0029828
c00143aa:	e8 22 55 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c00143af:	83 c4 10             	add    esp,0x10
c00143b2:	e9 6b ff ff ff       	jmp    c0014322 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00143b7:	90                   	nop

c00143b8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c00143b8:	56                   	push   esi
c00143b9:	53                   	push   ebx
c00143ba:	52                   	push   edx
c00143bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00143bf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00143c3:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00143c8:	75 3a                	jne    c0014404 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c00143ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143ce:	8d 50 20             	lea    edx,[eax+0x20]
c00143d1:	c1 e2 04             	shl    edx,0x4
c00143d4:	8d 04 16             	lea    eax,[esi+edx*1]
c00143d7:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c00143db:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c00143e1:	74 0b                	je     c00143ee <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c00143e3:	83 c0 04             	add    eax,0x4
c00143e6:	39 d0                	cmp    eax,edx
c00143e8:	75 f1                	jne    c00143db <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c00143ea:	58                   	pop    eax
c00143eb:	5b                   	pop    ebx
c00143ec:	5e                   	pop    esi
c00143ed:	c3                   	ret    
c00143ee:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00143f8:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014402:	eb df                	jmp    c00143e3 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014404:	83 ec 0c             	sub    esp,0xc
c0014407:	56                   	push   esi
c0014408:	e8 85 fa ff ff       	call   c0013e92 <Device::getName()>
c001440d:	83 c4 10             	add    esp,0x10
c0014410:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014413:	75 b5                	jne    c00143ca <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014415:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001441a:	7f 11                	jg     c001442d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c001441c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014420:	0f b6 80 40 be 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd41c0]
c0014427:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001442b:	eb 9d                	jmp    c00143ca <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001442d:	83 ec 0c             	sub    esp,0xc
c0014430:	68 28 98 02 c0       	push   0xc0029828
c0014435:	e8 97 54 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c001443a:	83 c4 10             	add    esp,0x10
c001443d:	eb 8b                	jmp    c00143ca <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c001443f <nmiHandler(regs*, void*)>:
c001443f:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c0014444:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014448:	e9 d9 a7 ff ff       	jmp    c000ec26 <Computer::handleNMI()>

c001444d <int_handler>:
c001444d:	55                   	push   ebp
c001444e:	57                   	push   edi
c001444f:	56                   	push   esi
c0014450:	53                   	push   ebx
c0014451:	83 ec 0c             	sub    esp,0xc
c0014454:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014458:	80 3d 20 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d720,0x0
c001445f:	74 0b                	je     c001446c <int_handler+0x1f>
c0014461:	fa                   	cli    
c0014462:	f4                   	hlt    
c0014463:	80 3d 20 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d720,0x0
c001446a:	75 f5                	jne    c0014461 <int_handler+0x14>
c001446c:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c0014471:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014474:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001447a:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014480:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014483:	83 f8 17             	cmp    eax,0x17
c0014486:	77 13                	ja     c001449b <int_handler+0x4e>
c0014488:	83 ec 08             	sub    esp,0x8
c001448b:	8b 17                	mov    edx,DWORD PTR [edi]
c001448d:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014490:	0f b6 c0             	movzx  eax,al
c0014493:	50                   	push   eax
c0014494:	57                   	push   edi
c0014495:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014498:	83 c4 10             	add    esp,0x10
c001449b:	83 c3 15             	add    ebx,0x15
c001449e:	c1 e3 04             	shl    ebx,0x4
c00144a1:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c00144a5:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c00144ac:	31 db                	xor    ebx,ebx
c00144ae:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c00144b2:	85 c0                	test   eax,eax
c00144b4:	74 13                	je     c00144c9 <int_handler+0x7c>
c00144b6:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00144b9:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c00144bd:	74 1c                	je     c00144db <int_handler+0x8e>
c00144bf:	83 ec 08             	sub    esp,0x8
c00144c2:	52                   	push   edx
c00144c3:	56                   	push   esi
c00144c4:	ff d0                	call   eax
c00144c6:	83 c4 10             	add    esp,0x10
c00144c9:	43                   	inc    ebx
c00144ca:	83 fb 04             	cmp    ebx,0x4
c00144cd:	75 df                	jne    c00144ae <int_handler+0x61>
c00144cf:	83 c4 0c             	add    esp,0xc
c00144d2:	31 c0                	xor    eax,eax
c00144d4:	5b                   	pop    ebx
c00144d5:	31 d2                	xor    edx,edx
c00144d7:	5e                   	pop    esi
c00144d8:	5f                   	pop    edi
c00144d9:	5d                   	pop    ebp
c00144da:	c3                   	ret    
c00144db:	83 ec 08             	sub    esp,0x8
c00144de:	52                   	push   edx
c00144df:	56                   	push   esi
c00144e0:	ff d0                	call   eax
c00144e2:	83 c4 10             	add    esp,0x10
c00144e5:	83 c4 0c             	add    esp,0xc
c00144e8:	5b                   	pop    ebx
c00144e9:	5e                   	pop    esi
c00144ea:	5f                   	pop    edi
c00144eb:	5d                   	pop    ebp
c00144ec:	c3                   	ret    
c00144ed:	90                   	nop

c00144ee <InterruptController::InterruptController(char const*)>:
c00144ee:	83 ec 1c             	sub    esp,0x1c
c00144f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144f5:	83 ec 08             	sub    esp,0x8
c00144f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144fc:	50                   	push   eax
c00144fd:	e8 94 f8 ff ff       	call   c0013d96 <Device::Device(char const*)>
c0014502:	83 c4 10             	add    esp,0x10
c0014505:	ba 5c 9a 02 c0       	mov    edx,0xc0029a5c
c001450a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001450e:	89 10                	mov    DWORD PTR [eax],edx
c0014510:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014514:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c001451e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014526:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c001452e:	7f 5e                	jg     c001458e <InterruptController::InterruptController(char const*)+0xa0>
c0014530:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014538:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c001453d:	7f 49                	jg     c0014588 <InterruptController::InterruptController(char const*)+0x9a>
c001453f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014543:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014547:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001454e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014552:	01 ca                	add    edx,ecx
c0014554:	83 c2 54             	add    edx,0x54
c0014557:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001455f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014563:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014567:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001456e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014572:	01 ca                	add    edx,ecx
c0014574:	81 c2 54 04 00 00    	add    edx,0x454
c001457a:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014582:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014586:	eb b0                	jmp    c0014538 <InterruptController::InterruptController(char const*)+0x4a>
c0014588:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001458c:	eb 98                	jmp    c0014526 <InterruptController::InterruptController(char const*)+0x38>
c001458e:	90                   	nop
c001458f:	83 c4 1c             	add    esp,0x1c
c0014592:	c3                   	ret    
c0014593:	90                   	nop

c0014594 <InterruptController::~InterruptController()>:
c0014594:	83 ec 0c             	sub    esp,0xc
c0014597:	ba 5c 9a 02 c0       	mov    edx,0xc0029a5c
c001459c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145a0:	89 10                	mov    DWORD PTR [eax],edx
c00145a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145a6:	83 ec 0c             	sub    esp,0xc
c00145a9:	50                   	push   eax
c00145aa:	e8 c9 f4 ff ff       	call   c0013a78 <Device::~Device()>
c00145af:	83 c4 10             	add    esp,0x10
c00145b2:	90                   	nop
c00145b3:	83 c4 0c             	add    esp,0xc
c00145b6:	c3                   	ret    
c00145b7:	90                   	nop

c00145b8 <InterruptController::~InterruptController()>:
c00145b8:	83 ec 0c             	sub    esp,0xc
c00145bb:	83 ec 0c             	sub    esp,0xc
c00145be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145c2:	e8 cd ff ff ff       	call   c0014594 <InterruptController::~InterruptController()>
c00145c7:	83 c4 10             	add    esp,0x10
c00145ca:	83 ec 08             	sub    esp,0x8
c00145cd:	68 58 21 00 00       	push   0x2158
c00145d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145d6:	e8 c4 e0 ff ff       	call   c001269f <operator delete(void*, unsigned long)>
c00145db:	83 c4 10             	add    esp,0x10
c00145de:	83 c4 0c             	add    esp,0xc
c00145e1:	c3                   	ret    

c00145e2 <displayDebugInfo(regs*)>:
c00145e2:	55                   	push   ebp
c00145e3:	57                   	push   edi
c00145e4:	56                   	push   esi
c00145e5:	53                   	push   ebx
c00145e6:	83 ec 24             	sub    esp,0x24
c00145e9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00145ed:	0f 20 c2             	mov    edx,cr0
c00145f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00145f4:	0f 20 d7             	mov    edi,cr2
c00145f7:	0f 20 de             	mov    esi,cr3
c00145fa:	0f 20 e5             	mov    ebp,cr4
c00145fd:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014600:	68 62 98 02 c0       	push   0xc0029862
c0014605:	e8 75 e1 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001460a:	58                   	pop    eax
c001460b:	5a                   	pop    edx
c001460c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001460f:	68 6d 98 02 c0       	push   0xc002986d
c0014614:	e8 66 e1 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0014619:	59                   	pop    ecx
c001461a:	58                   	pop    eax
c001461b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001461e:	68 78 98 02 c0       	push   0xc0029878
c0014623:	e8 57 e1 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0014628:	58                   	pop    eax
c0014629:	5a                   	pop    edx
c001462a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001462d:	68 83 98 02 c0       	push   0xc0029883
c0014632:	e8 48 e1 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0014637:	59                   	pop    ecx
c0014638:	58                   	pop    eax
c0014639:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001463c:	68 8e 98 02 c0       	push   0xc002988e
c0014641:	e8 39 e1 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0014646:	58                   	pop    eax
c0014647:	5a                   	pop    edx
c0014648:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c001464b:	68 99 98 02 c0       	push   0xc0029899
c0014650:	e8 2a e1 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0014655:	59                   	pop    ecx
c0014656:	58                   	pop    eax
c0014657:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001465a:	68 a4 98 02 c0       	push   0xc00298a4
c001465f:	e8 1b e1 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0014664:	58                   	pop    eax
c0014665:	5a                   	pop    edx
c0014666:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014669:	68 af 98 02 c0       	push   0xc00298af
c001466e:	e8 0c e1 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0014673:	59                   	pop    ecx
c0014674:	58                   	pop    eax
c0014675:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014678:	68 ba 98 02 c0       	push   0xc00298ba
c001467d:	e8 fd e0 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0014682:	58                   	pop    eax
c0014683:	5a                   	pop    edx
c0014684:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014687:	68 c9 98 02 c0       	push   0xc00298c9
c001468c:	e8 ee e0 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0014691:	59                   	pop    ecx
c0014692:	58                   	pop    eax
c0014693:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014696:	68 d4 98 02 c0       	push   0xc00298d4
c001469b:	e8 df e0 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c00146a0:	58                   	pop    eax
c00146a1:	5a                   	pop    edx
c00146a2:	57                   	push   edi
c00146a3:	68 df 98 02 c0       	push   0xc00298df
c00146a8:	e8 d2 e0 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c00146ad:	59                   	pop    ecx
c00146ae:	58                   	pop    eax
c00146af:	56                   	push   esi
c00146b0:	68 ea 98 02 c0       	push   0xc00298ea
c00146b5:	e8 c5 e0 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c00146ba:	58                   	pop    eax
c00146bb:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c00146c0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146c6:	e8 76 c2 ff ff       	call   c0010941 <setActiveTerminal(VgaText*)>
c00146cb:	58                   	pop    eax
c00146cc:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00146cf:	5a                   	pop    edx
c00146d0:	c1 e0 05             	shl    eax,0x5
c00146d3:	05 a0 bb 02 c0       	add    eax,0xc002bba0
c00146d8:	50                   	push   eax
c00146d9:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c00146de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146e4:	e8 77 c6 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c00146e9:	59                   	pop    ecx
c00146ea:	58                   	pop    eax
c00146eb:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c00146f0:	68 f5 98 02 c0       	push   0xc00298f5
c00146f5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146fb:	e8 60 c6 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c0014700:	58                   	pop    eax
c0014701:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014706:	5a                   	pop    edx
c0014707:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001470a:	83 c0 0c             	add    eax,0xc
c001470d:	50                   	push   eax
c001470e:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0014713:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014719:	e8 42 c6 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c001471e:	59                   	pop    ecx
c001471f:	58                   	pop    eax
c0014720:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0014725:	68 fe 98 02 c0       	push   0xc00298fe
c001472a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014730:	e8 2b c6 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c0014735:	58                   	pop    eax
c0014736:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c001473b:	5a                   	pop    edx
c001473c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001473f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014745:	e8 3c c6 ff ff       	call   c0010d86 <VgaText::putx(unsigned int)>
c001474a:	59                   	pop    ecx
c001474b:	58                   	pop    eax
c001474c:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0014751:	68 06 99 02 c0       	push   0xc0029906
c0014756:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001475c:	e8 ff c5 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c0014761:	58                   	pop    eax
c0014762:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0014767:	5a                   	pop    edx
c0014768:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001476b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014771:	e8 10 c6 ff ff       	call   c0010d86 <VgaText::putx(unsigned int)>
c0014776:	59                   	pop    ecx
c0014777:	58                   	pop    eax
c0014778:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c001477d:	68 0e 99 02 c0       	push   0xc002990e
c0014782:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014788:	e8 d3 c5 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c001478d:	58                   	pop    eax
c001478e:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0014793:	5a                   	pop    edx
c0014794:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014797:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001479d:	e8 e4 c5 ff ff       	call   c0010d86 <VgaText::putx(unsigned int)>
c00147a2:	59                   	pop    ecx
c00147a3:	58                   	pop    eax
c00147a4:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c00147a9:	68 16 99 02 c0       	push   0xc0029916
c00147ae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147b4:	e8 a7 c5 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c00147b9:	58                   	pop    eax
c00147ba:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c00147bf:	5a                   	pop    edx
c00147c0:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00147c3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147c9:	e8 b8 c5 ff ff       	call   c0010d86 <VgaText::putx(unsigned int)>
c00147ce:	59                   	pop    ecx
c00147cf:	58                   	pop    eax
c00147d0:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c00147d5:	68 1e 99 02 c0       	push   0xc002991e
c00147da:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147e0:	e8 7b c5 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c00147e5:	58                   	pop    eax
c00147e6:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c00147eb:	5a                   	pop    edx
c00147ec:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00147ef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147f5:	e8 8c c5 ff ff       	call   c0010d86 <VgaText::putx(unsigned int)>
c00147fa:	59                   	pop    ecx
c00147fb:	58                   	pop    eax
c00147fc:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0014801:	68 26 99 02 c0       	push   0xc0029926
c0014806:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001480c:	e8 4f c5 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c0014811:	58                   	pop    eax
c0014812:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0014817:	5a                   	pop    edx
c0014818:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c001481b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014821:	e8 60 c5 ff ff       	call   c0010d86 <VgaText::putx(unsigned int)>
c0014826:	59                   	pop    ecx
c0014827:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c001482c:	5b                   	pop    ebx
c001482d:	68 2e 99 02 c0       	push   0xc002992e
c0014832:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014838:	e8 23 c5 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c001483d:	58                   	pop    eax
c001483e:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0014843:	5a                   	pop    edx
c0014844:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014848:	52                   	push   edx
c0014849:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001484f:	e8 32 c5 ff ff       	call   c0010d86 <VgaText::putx(unsigned int)>
c0014854:	59                   	pop    ecx
c0014855:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c001485a:	5b                   	pop    ebx
c001485b:	68 37 99 02 c0       	push   0xc0029937
c0014860:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014866:	e8 f5 c4 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c001486b:	58                   	pop    eax
c001486c:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0014871:	5a                   	pop    edx
c0014872:	57                   	push   edi
c0014873:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014879:	e8 08 c5 ff ff       	call   c0010d86 <VgaText::putx(unsigned int)>
c001487e:	59                   	pop    ecx
c001487f:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0014884:	5b                   	pop    ebx
c0014885:	68 3f 99 02 c0       	push   0xc002993f
c001488a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014890:	e8 cb c4 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c0014895:	5f                   	pop    edi
c0014896:	58                   	pop    eax
c0014897:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c001489c:	56                   	push   esi
c001489d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148a3:	e8 de c4 ff ff       	call   c0010d86 <VgaText::putx(unsigned int)>
c00148a8:	58                   	pop    eax
c00148a9:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c00148ae:	5a                   	pop    edx
c00148af:	68 47 99 02 c0       	push   0xc0029947
c00148b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148ba:	e8 a1 c4 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c00148bf:	59                   	pop    ecx
c00148c0:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c00148c5:	5b                   	pop    ebx
c00148c6:	55                   	push   ebp
c00148c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148cd:	e8 b4 c4 ff ff       	call   c0010d86 <VgaText::putx(unsigned int)>
c00148d2:	5e                   	pop    esi
c00148d3:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c00148d8:	5f                   	pop    edi
c00148d9:	68 4f 99 02 c0       	push   0xc002994f
c00148de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148e4:	e8 77 c4 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c00148e9:	0f 21 c0             	mov    eax,db0
c00148ec:	5d                   	pop    ebp
c00148ed:	5a                   	pop    edx
c00148ee:	50                   	push   eax
c00148ef:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c00148f4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148fa:	e8 87 c4 ff ff       	call   c0010d86 <VgaText::putx(unsigned int)>
c00148ff:	59                   	pop    ecx
c0014900:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0014905:	5b                   	pop    ebx
c0014906:	68 58 99 02 c0       	push   0xc0029958
c001490b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014911:	e8 4a c4 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c0014916:	0f 21 c8             	mov    eax,db1
c0014919:	5e                   	pop    esi
c001491a:	5f                   	pop    edi
c001491b:	50                   	push   eax
c001491c:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0014921:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014927:	e8 5a c4 ff ff       	call   c0010d86 <VgaText::putx(unsigned int)>
c001492c:	5d                   	pop    ebp
c001492d:	58                   	pop    eax
c001492e:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0014933:	68 60 99 02 c0       	push   0xc0029960
c0014938:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001493e:	e8 1d c4 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c0014943:	0f 21 d0             	mov    eax,db2
c0014946:	5a                   	pop    edx
c0014947:	59                   	pop    ecx
c0014948:	50                   	push   eax
c0014949:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c001494e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014954:	e8 2d c4 ff ff       	call   c0010d86 <VgaText::putx(unsigned int)>
c0014959:	5b                   	pop    ebx
c001495a:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c001495f:	5e                   	pop    esi
c0014960:	68 68 99 02 c0       	push   0xc0029968
c0014965:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001496b:	e8 f0 c3 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c0014970:	0f 21 d8             	mov    eax,db3
c0014973:	5f                   	pop    edi
c0014974:	5d                   	pop    ebp
c0014975:	50                   	push   eax
c0014976:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c001497b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014981:	e8 00 c4 ff ff       	call   c0010d86 <VgaText::putx(unsigned int)>
c0014986:	58                   	pop    eax
c0014987:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c001498c:	5a                   	pop    edx
c001498d:	68 70 99 02 c0       	push   0xc0029970
c0014992:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014998:	e8 c3 c3 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c001499d:	0f 21 f0             	mov    eax,db6
c00149a0:	59                   	pop    ecx
c00149a1:	5b                   	pop    ebx
c00149a2:	50                   	push   eax
c00149a3:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c00149a8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149ae:	e8 d3 c3 ff ff       	call   c0010d86 <VgaText::putx(unsigned int)>
c00149b3:	5e                   	pop    esi
c00149b4:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c00149b9:	5f                   	pop    edi
c00149ba:	68 78 99 02 c0       	push   0xc0029978
c00149bf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149c5:	e8 96 c3 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c00149ca:	0f 21 f8             	mov    eax,db7
c00149cd:	5d                   	pop    ebp
c00149ce:	5a                   	pop    edx
c00149cf:	50                   	push   eax
c00149d0:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c00149d5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149db:	e8 a6 c3 ff ff       	call   c0010d86 <VgaText::putx(unsigned int)>
c00149e0:	fa                   	cli    
c00149e1:	f4                   	hlt    
c00149e2:	83 c4 10             	add    esp,0x10
c00149e5:	eb fe                	jmp    c00149e5 <displayDebugInfo(regs*)+0x403>

c00149e7 <x87EmulHandler(regs*, void*)>:
c00149e7:	53                   	push   ebx
c00149e8:	83 ec 14             	sub    esp,0x14
c00149eb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00149ef:	53                   	push   ebx
c00149f0:	e8 85 a1 00 00       	call   c001eb7a <Vm::x87Handler(regs*)>
c00149f5:	83 c4 10             	add    esp,0x10
c00149f8:	84 c0                	test   al,al
c00149fa:	74 05                	je     c0014a01 <x87EmulHandler(regs*, void*)+0x1a>
c00149fc:	83 c4 08             	add    esp,0x8
c00149ff:	5b                   	pop    ebx
c0014a00:	c3                   	ret    
c0014a01:	83 ec 0c             	sub    esp,0xc
c0014a04:	68 80 99 02 c0       	push   0xc0029980
c0014a09:	e8 71 dd ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0014a0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a11:	e8 cc fb ff ff       	call   c00145e2 <displayDebugInfo(regs*)>

c0014a16 <gpFault(regs*, void*)>:
c0014a16:	53                   	push   ebx
c0014a17:	83 ec 14             	sub    esp,0x14
c0014a1a:	c7 05 90 cd 02 c0 f7 de 01 c0 	mov    DWORD PTR ds:0xc002cd90,0xc001def7
c0014a24:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014a28:	53                   	push   ebx
c0014a29:	e8 c9 94 00 00       	call   c001def7 <Vm::faultHandler(regs*)>
c0014a2e:	83 c4 10             	add    esp,0x10
c0014a31:	84 c0                	test   al,al
c0014a33:	74 05                	je     c0014a3a <gpFault(regs*, void*)+0x24>
c0014a35:	83 c4 08             	add    esp,0x8
c0014a38:	5b                   	pop    ebx
c0014a39:	c3                   	ret    
c0014a3a:	83 ec 0c             	sub    esp,0xc
c0014a3d:	68 96 99 02 c0       	push   0xc0029996
c0014a42:	e8 38 dd ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0014a47:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a4a:	e8 93 fb ff ff       	call   c00145e2 <displayDebugInfo(regs*)>

c0014a4f <pgFault(regs*, void*)>:
c0014a4f:	83 ec 18             	sub    esp,0x18
c0014a52:	68 b1 99 02 c0       	push   0xc00299b1
c0014a57:	e8 23 dd ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0014a5c:	58                   	pop    eax
c0014a5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a61:	e8 7c fb ff ff       	call   c00145e2 <displayDebugInfo(regs*)>

c0014a66 <otherISRHandler(regs*, void*)>:
c0014a66:	53                   	push   ebx
c0014a67:	83 ec 0c             	sub    esp,0xc
c0014a6a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a6e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014a71:	50                   	push   eax
c0014a72:	50                   	push   eax
c0014a73:	68 be 99 02 c0       	push   0xc00299be
c0014a78:	e8 02 dd ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0014a7d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a80:	e8 5d fb ff ff       	call   c00145e2 <displayDebugInfo(regs*)>

c0014a85 <opcodeFault(regs*, void*)>:
c0014a85:	55                   	push   ebp
c0014a86:	89 e5                	mov    ebp,esp
c0014a88:	56                   	push   esi
c0014a89:	53                   	push   ebx
c0014a8a:	83 ec 40             	sub    esp,0x40
c0014a8d:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c0014a92:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014a98:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014a9e:	84 c0                	test   al,al
c0014aa0:	74 24                	je     c0014ac6 <opcodeFault(regs*, void*)+0x41>
c0014aa2:	83 ec 0c             	sub    esp,0xc
c0014aa5:	68 dc 99 02 c0       	push   0xc00299dc
c0014aaa:	e8 d0 dc ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0014aaf:	83 c4 10             	add    esp,0x10
c0014ab2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ab5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ab8:	8d 50 19             	lea    edx,[eax+0x19]
c0014abb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014abe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ac1:	e9 77 05 00 00       	jmp    c001503d <opcodeFault(regs*, void*)+0x5b8>
c0014ac6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ac9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014acc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014acf:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014ad3:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014ad7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ada:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014add:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014ae0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ae3:	8a 00                	mov    al,BYTE PTR [eax]
c0014ae5:	3c f0                	cmp    al,0xf0
c0014ae7:	75 17                	jne    c0014b00 <opcodeFault(regs*, void*)+0x7b>
c0014ae9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014aec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aef:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014af2:	8d 50 01             	lea    edx,[eax+0x1]
c0014af5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014af8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014afb:	e9 da 00 00 00       	jmp    c0014bda <opcodeFault(regs*, void*)+0x155>
c0014b00:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b03:	8a 00                	mov    al,BYTE PTR [eax]
c0014b05:	3c f2                	cmp    al,0xf2
c0014b07:	74 09                	je     c0014b12 <opcodeFault(regs*, void*)+0x8d>
c0014b09:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b0c:	8a 00                	mov    al,BYTE PTR [eax]
c0014b0e:	3c f3                	cmp    al,0xf3
c0014b10:	75 1b                	jne    c0014b2d <opcodeFault(regs*, void*)+0xa8>
c0014b12:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b16:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b1c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b1f:	8d 50 01             	lea    edx,[eax+0x1]
c0014b22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b25:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b28:	e9 ad 00 00 00       	jmp    c0014bda <opcodeFault(regs*, void*)+0x155>
c0014b2d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b30:	8a 00                	mov    al,BYTE PTR [eax]
c0014b32:	3c 66                	cmp    al,0x66
c0014b34:	75 1f                	jne    c0014b55 <opcodeFault(regs*, void*)+0xd0>
c0014b36:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b3a:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014b3e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b44:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b47:	8d 50 01             	lea    edx,[eax+0x1]
c0014b4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b4d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b50:	e9 85 00 00 00       	jmp    c0014bda <opcodeFault(regs*, void*)+0x155>
c0014b55:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b58:	8a 00                	mov    al,BYTE PTR [eax]
c0014b5a:	3c 67                	cmp    al,0x67
c0014b5c:	75 18                	jne    c0014b76 <opcodeFault(regs*, void*)+0xf1>
c0014b5e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b62:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b68:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b6b:	8d 50 01             	lea    edx,[eax+0x1]
c0014b6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b71:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b74:	eb 64                	jmp    c0014bda <opcodeFault(regs*, void*)+0x155>
c0014b76:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b79:	8a 00                	mov    al,BYTE PTR [eax]
c0014b7b:	3c 2e                	cmp    al,0x2e
c0014b7d:	74 09                	je     c0014b88 <opcodeFault(regs*, void*)+0x103>
c0014b7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b82:	8a 00                	mov    al,BYTE PTR [eax]
c0014b84:	3c 3e                	cmp    al,0x3e
c0014b86:	75 18                	jne    c0014ba0 <opcodeFault(regs*, void*)+0x11b>
c0014b88:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b8c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b92:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b95:	8d 50 01             	lea    edx,[eax+0x1]
c0014b98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b9b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b9e:	eb 3a                	jmp    c0014bda <opcodeFault(regs*, void*)+0x155>
c0014ba0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ba3:	8a 00                	mov    al,BYTE PTR [eax]
c0014ba5:	3c 36                	cmp    al,0x36
c0014ba7:	74 1b                	je     c0014bc4 <opcodeFault(regs*, void*)+0x13f>
c0014ba9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bac:	8a 00                	mov    al,BYTE PTR [eax]
c0014bae:	3c 26                	cmp    al,0x26
c0014bb0:	74 12                	je     c0014bc4 <opcodeFault(regs*, void*)+0x13f>
c0014bb2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bb5:	8a 00                	mov    al,BYTE PTR [eax]
c0014bb7:	3c 64                	cmp    al,0x64
c0014bb9:	74 09                	je     c0014bc4 <opcodeFault(regs*, void*)+0x13f>
c0014bbb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bbe:	8a 00                	mov    al,BYTE PTR [eax]
c0014bc0:	3c 65                	cmp    al,0x65
c0014bc2:	75 16                	jne    c0014bda <opcodeFault(regs*, void*)+0x155>
c0014bc4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014bc8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014bcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bce:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bd1:	8d 50 01             	lea    edx,[eax+0x1]
c0014bd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bd7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bda:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bdd:	8a 00                	mov    al,BYTE PTR [eax]
c0014bdf:	3c 0f                	cmp    al,0xf
c0014be1:	0f 85 ad 00 00 00    	jne    c0014c94 <opcodeFault(regs*, void*)+0x20f>
c0014be7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bea:	40                   	inc    eax
c0014beb:	8a 00                	mov    al,BYTE PTR [eax]
c0014bed:	3c c2                	cmp    al,0xc2
c0014bef:	74 0e                	je     c0014bff <opcodeFault(regs*, void*)+0x17a>
c0014bf1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bf4:	40                   	inc    eax
c0014bf5:	8a 00                	mov    al,BYTE PTR [eax]
c0014bf7:	3c c3                	cmp    al,0xc3
c0014bf9:	0f 85 95 00 00 00    	jne    c0014c94 <opcodeFault(regs*, void*)+0x20f>
c0014bff:	83 ec 0c             	sub    esp,0xc
c0014c02:	68 ff 99 02 c0       	push   0xc00299ff
c0014c07:	e8 73 db ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0014c0c:	83 c4 10             	add    esp,0x10
c0014c0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c12:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c15:	8d 50 01             	lea    edx,[eax+0x1]
c0014c18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c1b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c1e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c24:	8a 00                	mov    al,BYTE PTR [eax]
c0014c26:	8d 50 fe             	lea    edx,[eax-0x2]
c0014c29:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c2c:	88 10                	mov    BYTE PTR [eax],dl
c0014c2e:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014c31:	50                   	push   eax
c0014c32:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014c35:	50                   	push   eax
c0014c36:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014c39:	50                   	push   eax
c0014c3a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014c3d:	e8 c0 44 00 00       	call   c0019102 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014c42:	83 c4 10             	add    esp,0x10
c0014c45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c48:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c4b:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014c4e:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014c51:	01 d0                	add    eax,edx
c0014c53:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014c56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c59:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c5c:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014c5f:	48                   	dec    eax
c0014c60:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014c63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c66:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014c69:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c6f:	83 ec 04             	sub    esp,0x4
c0014c72:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014c75:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014c78:	50                   	push   eax
c0014c79:	e8 eb b4 fe ff       	call   c0000169 <voodooXADD>
c0014c7e:	83 c4 10             	add    esp,0x10
c0014c81:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014c84:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014c87:	01 c2                	add    edx,eax
c0014c89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c8c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c8f:	e9 a9 03 00 00       	jmp    c001503d <opcodeFault(regs*, void*)+0x5b8>
c0014c94:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c97:	8a 00                	mov    al,BYTE PTR [eax]
c0014c99:	3c 0f                	cmp    al,0xf
c0014c9b:	0f 85 8b 01 00 00    	jne    c0014e2c <opcodeFault(regs*, void*)+0x3a7>
c0014ca1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ca4:	40                   	inc    eax
c0014ca5:	8a 00                	mov    al,BYTE PTR [eax]
c0014ca7:	3c c7                	cmp    al,0xc7
c0014ca9:	0f 86 7d 01 00 00    	jbe    c0014e2c <opcodeFault(regs*, void*)+0x3a7>
c0014caf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cb2:	40                   	inc    eax
c0014cb3:	8a 00                	mov    al,BYTE PTR [eax]
c0014cb5:	3c cf                	cmp    al,0xcf
c0014cb7:	0f 87 6f 01 00 00    	ja     c0014e2c <opcodeFault(regs*, void*)+0x3a7>
c0014cbd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cc0:	40                   	inc    eax
c0014cc1:	8a 00                	mov    al,BYTE PTR [eax]
c0014cc3:	83 c0 38             	add    eax,0x38
c0014cc6:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014cc9:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014ccd:	75 0b                	jne    c0014cda <opcodeFault(regs*, void*)+0x255>
c0014ccf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cd2:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014cd5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cd8:	eb 75                	jmp    c0014d4f <opcodeFault(regs*, void*)+0x2ca>
c0014cda:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014cde:	75 0b                	jne    c0014ceb <opcodeFault(regs*, void*)+0x266>
c0014ce0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce3:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014ce6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ce9:	eb 64                	jmp    c0014d4f <opcodeFault(regs*, void*)+0x2ca>
c0014ceb:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014cef:	75 0b                	jne    c0014cfc <opcodeFault(regs*, void*)+0x277>
c0014cf1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014cf7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cfa:	eb 53                	jmp    c0014d4f <opcodeFault(regs*, void*)+0x2ca>
c0014cfc:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014d00:	75 0b                	jne    c0014d0d <opcodeFault(regs*, void*)+0x288>
c0014d02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d05:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014d08:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d0b:	eb 42                	jmp    c0014d4f <opcodeFault(regs*, void*)+0x2ca>
c0014d0d:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014d11:	75 0b                	jne    c0014d1e <opcodeFault(regs*, void*)+0x299>
c0014d13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d16:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014d19:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d1c:	eb 31                	jmp    c0014d4f <opcodeFault(regs*, void*)+0x2ca>
c0014d1e:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014d22:	75 0b                	jne    c0014d2f <opcodeFault(regs*, void*)+0x2aa>
c0014d24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d27:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014d2a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d2d:	eb 20                	jmp    c0014d4f <opcodeFault(regs*, void*)+0x2ca>
c0014d2f:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014d33:	75 0b                	jne    c0014d40 <opcodeFault(regs*, void*)+0x2bb>
c0014d35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d38:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014d3b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d3e:	eb 0f                	jmp    c0014d4f <opcodeFault(regs*, void*)+0x2ca>
c0014d40:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014d44:	75 09                	jne    c0014d4f <opcodeFault(regs*, void*)+0x2ca>
c0014d46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014d4c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d4f:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014d53:	74 10                	je     c0014d65 <opcodeFault(regs*, void*)+0x2e0>
c0014d55:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014d5c:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014d63:	eb 2d                	jmp    c0014d92 <opcodeFault(regs*, void*)+0x30d>
c0014d65:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d68:	c1 e0 18             	shl    eax,0x18
c0014d6b:	89 c2                	mov    edx,eax
c0014d6d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d70:	c1 e0 08             	shl    eax,0x8
c0014d73:	25 00 00 ff 00       	and    eax,0xff0000
c0014d78:	09 c2                	or     edx,eax
c0014d7a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d7d:	c1 e8 08             	shr    eax,0x8
c0014d80:	25 00 ff 00 00       	and    eax,0xff00
c0014d85:	09 c2                	or     edx,eax
c0014d87:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d8a:	c1 e8 18             	shr    eax,0x18
c0014d8d:	09 d0                	or     eax,edx
c0014d8f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d92:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014d96:	75 0b                	jne    c0014da3 <opcodeFault(regs*, void*)+0x31e>
c0014d98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d9b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d9e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014da1:	eb 75                	jmp    c0014e18 <opcodeFault(regs*, void*)+0x393>
c0014da3:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014da7:	75 0b                	jne    c0014db4 <opcodeFault(regs*, void*)+0x32f>
c0014da9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dac:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014daf:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014db2:	eb 64                	jmp    c0014e18 <opcodeFault(regs*, void*)+0x393>
c0014db4:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014db8:	75 0b                	jne    c0014dc5 <opcodeFault(regs*, void*)+0x340>
c0014dba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dbd:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014dc0:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014dc3:	eb 53                	jmp    c0014e18 <opcodeFault(regs*, void*)+0x393>
c0014dc5:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014dc9:	75 0b                	jne    c0014dd6 <opcodeFault(regs*, void*)+0x351>
c0014dcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dce:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014dd1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014dd4:	eb 42                	jmp    c0014e18 <opcodeFault(regs*, void*)+0x393>
c0014dd6:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014dda:	75 0b                	jne    c0014de7 <opcodeFault(regs*, void*)+0x362>
c0014ddc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ddf:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014de2:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014de5:	eb 31                	jmp    c0014e18 <opcodeFault(regs*, void*)+0x393>
c0014de7:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014deb:	75 0b                	jne    c0014df8 <opcodeFault(regs*, void*)+0x373>
c0014ded:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014df0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014df3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014df6:	eb 20                	jmp    c0014e18 <opcodeFault(regs*, void*)+0x393>
c0014df8:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014dfc:	75 0b                	jne    c0014e09 <opcodeFault(regs*, void*)+0x384>
c0014dfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e01:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e04:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014e07:	eb 0f                	jmp    c0014e18 <opcodeFault(regs*, void*)+0x393>
c0014e09:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014e0d:	75 09                	jne    c0014e18 <opcodeFault(regs*, void*)+0x393>
c0014e0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e12:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e15:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014e18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e1b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e1e:	8d 50 02             	lea    edx,[eax+0x2]
c0014e21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e24:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e27:	e9 11 02 00 00       	jmp    c001503d <opcodeFault(regs*, void*)+0x5b8>
c0014e2c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e2f:	8a 00                	mov    al,BYTE PTR [eax]
c0014e31:	3c 0f                	cmp    al,0xf
c0014e33:	0f 85 76 01 00 00    	jne    c0014faf <opcodeFault(regs*, void*)+0x52a>
c0014e39:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e3c:	40                   	inc    eax
c0014e3d:	8a 00                	mov    al,BYTE PTR [eax]
c0014e3f:	3c c7                	cmp    al,0xc7
c0014e41:	0f 85 68 01 00 00    	jne    c0014faf <opcodeFault(regs*, void*)+0x52a>
c0014e47:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e4d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e50:	8d 50 01             	lea    edx,[eax+0x1]
c0014e53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e56:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e59:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014e5c:	50                   	push   eax
c0014e5d:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014e60:	50                   	push   eax
c0014e61:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014e64:	50                   	push   eax
c0014e65:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014e68:	e8 95 42 00 00       	call   c0019102 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014e6d:	83 c4 10             	add    esp,0x10
c0014e70:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014e73:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014e76:	83 f0 01             	xor    eax,0x1
c0014e79:	84 c0                	test   al,al
c0014e7b:	0f 84 2e 01 00 00    	je     c0014faf <opcodeFault(regs*, void*)+0x52a>
c0014e81:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014e84:	3c 01                	cmp    al,0x1
c0014e86:	0f 85 23 01 00 00    	jne    c0014faf <opcodeFault(regs*, void*)+0x52a>
c0014e8c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014e8f:	83 f0 01             	xor    eax,0x1
c0014e92:	84 c0                	test   al,al
c0014e94:	0f 84 15 01 00 00    	je     c0014faf <opcodeFault(regs*, void*)+0x52a>
c0014e9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e9d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014ea0:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014ea3:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014eaa:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014ead:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014eb0:	89 c2                	mov    edx,eax
c0014eb2:	b8 00 00 00 00       	mov    eax,0x0
c0014eb7:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014eba:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014ebd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ec0:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014ec3:	ba 00 00 00 00       	mov    edx,0x0
c0014ec8:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014ecb:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014ece:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ed1:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014ed4:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014ed7:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014ede:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014ee1:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014ee4:	89 c2                	mov    edx,eax
c0014ee6:	b8 00 00 00 00       	mov    eax,0x0
c0014eeb:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014eee:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014ef1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014ef7:	ba 00 00 00 00       	mov    edx,0x0
c0014efc:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014eff:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014f02:	e8 df 7f 00 00       	call   c001cee6 <lockScheduler()>
c0014f07:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014f0a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014f0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f0f:	89 c1                	mov    ecx,eax
c0014f11:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014f14:	89 cb                	mov    ebx,ecx
c0014f16:	89 d0                	mov    eax,edx
c0014f18:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014f1b:	89 c6                	mov    esi,eax
c0014f1d:	89 f0                	mov    eax,esi
c0014f1f:	09 d8                	or     eax,ebx
c0014f21:	85 c0                	test   eax,eax
c0014f23:	75 21                	jne    c0014f46 <opcodeFault(regs*, void*)+0x4c1>
c0014f25:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014f28:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014f2b:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014f2e:	89 01                	mov    DWORD PTR [ecx],eax
c0014f30:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014f33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f36:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f39:	83 c8 40             	or     eax,0x40
c0014f3c:	89 c2                	mov    edx,eax
c0014f3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f41:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014f44:	eb 3e                	jmp    c0014f84 <opcodeFault(regs*, void*)+0x4ff>
c0014f46:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014f49:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014f4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f4e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014f51:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014f54:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f5a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014f5d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014f60:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014f63:	89 d0                	mov    eax,edx
c0014f65:	31 d2                	xor    edx,edx
c0014f67:	89 c3                	mov    ebx,eax
c0014f69:	89 d6                	mov    esi,edx
c0014f6b:	89 da                	mov    edx,ebx
c0014f6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f70:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014f73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f76:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f79:	83 e0 bf             	and    eax,0xffffffbf
c0014f7c:	89 c2                	mov    edx,eax
c0014f7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f81:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014f84:	e8 5f 7f 00 00       	call   c001cee8 <unlockScheduler()>
c0014f89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f8c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f8f:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014f92:	01 c2                	add    edx,eax
c0014f94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f97:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f9a:	83 ec 0c             	sub    esp,0xc
c0014f9d:	68 0e 9a 02 c0       	push   0xc0029a0e
c0014fa2:	e8 d8 d7 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0014fa7:	83 c4 10             	add    esp,0x10
c0014faa:	e9 8e 00 00 00       	jmp    c001503d <opcodeFault(regs*, void*)+0x5b8>
c0014faf:	83 ec 0c             	sub    esp,0xc
c0014fb2:	68 21 9a 02 c0       	push   0xc0029a21
c0014fb7:	e8 c3 d7 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0014fbc:	83 c4 10             	add    esp,0x10
c0014fbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc2:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014fcb:	c1 e0 04             	shl    eax,0x4
c0014fce:	01 d0                	add    eax,edx
c0014fd0:	83 c0 03             	add    eax,0x3
c0014fd3:	8a 00                	mov    al,BYTE PTR [eax]
c0014fd5:	0f b6 d8             	movzx  ebx,al
c0014fd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fdb:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014fde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014fe4:	c1 e0 04             	shl    eax,0x4
c0014fe7:	01 d0                	add    eax,edx
c0014fe9:	83 c0 02             	add    eax,0x2
c0014fec:	8a 00                	mov    al,BYTE PTR [eax]
c0014fee:	0f b6 c8             	movzx  ecx,al
c0014ff1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ff4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014ff7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ffa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ffd:	c1 e0 04             	shl    eax,0x4
c0015000:	01 d0                	add    eax,edx
c0015002:	40                   	inc    eax
c0015003:	8a 00                	mov    al,BYTE PTR [eax]
c0015005:	0f b6 d0             	movzx  edx,al
c0015008:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001500b:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001500e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015011:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015014:	c1 e0 04             	shl    eax,0x4
c0015017:	01 f0                	add    eax,esi
c0015019:	8a 00                	mov    al,BYTE PTR [eax]
c001501b:	0f b6 c0             	movzx  eax,al
c001501e:	83 ec 0c             	sub    esp,0xc
c0015021:	53                   	push   ebx
c0015022:	51                   	push   ecx
c0015023:	52                   	push   edx
c0015024:	50                   	push   eax
c0015025:	68 34 9a 02 c0       	push   0xc0029a34
c001502a:	e8 50 d7 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001502f:	83 c4 20             	add    esp,0x20
c0015032:	83 ec 0c             	sub    esp,0xc
c0015035:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015038:	e8 a5 f5 ff ff       	call   c00145e2 <displayDebugInfo(regs*)>
c001503d:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015040:	5b                   	pop    ebx
c0015041:	5e                   	pop    esi
c0015042:	5d                   	pop    ebp
c0015043:	c3                   	ret    

c0015044 <displayProgramFault(char const*)>:
c0015044:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015049:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001504c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015052:	85 c0                	test   eax,eax
c0015054:	74 15                	je     c001506b <displayProgramFault(char const*)+0x27>
c0015056:	83 ec 0c             	sub    esp,0xc
c0015059:	6a 04                	push   0x4
c001505b:	6a 0f                	push   0xf
c001505d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015061:	50                   	push   eax
c0015062:	e8 bb b9 ff ff       	call   c0010a22 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015067:	83 c4 1c             	add    esp,0x1c
c001506a:	c3                   	ret    
c001506b:	c3                   	ret    

c001506c <setupInterruptController()>:
c001506c:	55                   	push   ebp
c001506d:	89 e5                	mov    ebp,esp
c001506f:	53                   	push   ebx
c0015070:	83 ec 24             	sub    esp,0x24
c0015073:	b8 00 00 00 00       	mov    eax,0x0
c0015078:	85 c0                	test   eax,eax
c001507a:	0f 95 c0             	setne  al
c001507d:	84 c0                	test   al,al
c001507f:	74 5b                	je     c00150dc <setupInterruptController()+0x70>
c0015081:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015088:	83 ec 0c             	sub    esp,0xc
c001508b:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001508e:	e8 47 a4 ff ff       	call   c000f4da <malloc>
c0015093:	83 c4 10             	add    esp,0x10
c0015096:	89 c3                	mov    ebx,eax
c0015098:	83 ec 0c             	sub    esp,0xc
c001509b:	53                   	push   ebx
c001509c:	e8 2b f4 00 00       	call   c00244cc <APIC::APIC()>
c00150a1:	83 c4 10             	add    esp,0x10
c00150a4:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00150a7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00150aa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00150ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00150af:	83 c0 08             	add    eax,0x8
c00150b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00150b4:	6a 00                	push   0x0
c00150b6:	6a 00                	push   0x0
c00150b8:	6a 00                	push   0x0
c00150ba:	52                   	push   edx
c00150bb:	ff d0                	call   eax
c00150bd:	83 c4 10             	add    esp,0x10
c00150c0:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c00150c5:	83 ec 08             	sub    esp,0x8
c00150c8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00150cb:	50                   	push   eax
c00150cc:	e8 d5 ea ff ff       	call   c0013ba6 <Device::addChild(Device*)>
c00150d1:	83 c4 10             	add    esp,0x10
c00150d4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00150d7:	e9 52 03 00 00       	jmp    c001542e <setupInterruptController()+0x3c2>
c00150dc:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c00150e1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00150e7:	83 e0 01             	and    eax,0x1
c00150ea:	84 c0                	test   al,al
c00150ec:	0f 95 c0             	setne  al
c00150ef:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00150f2:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00150f9:	83 ec 0c             	sub    esp,0xc
c00150fc:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00150ff:	e8 d6 a3 ff ff       	call   c000f4da <malloc>
c0015104:	83 c4 10             	add    esp,0x10
c0015107:	89 c3                	mov    ebx,eax
c0015109:	83 ec 0c             	sub    esp,0xc
c001510c:	53                   	push   ebx
c001510d:	e8 12 f9 00 00       	call   c0024a24 <PIC::PIC()>
c0015112:	83 c4 10             	add    esp,0x10
c0015115:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015118:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001511b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001511e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015120:	83 c0 08             	add    eax,0x8
c0015123:	8b 00                	mov    eax,DWORD PTR [eax]
c0015125:	6a 00                	push   0x0
c0015127:	6a 00                	push   0x0
c0015129:	6a 00                	push   0x0
c001512b:	52                   	push   edx
c001512c:	ff d0                	call   eax
c001512e:	83 c4 10             	add    esp,0x10
c0015131:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015135:	74 73                	je     c00151aa <setupInterruptController()+0x13e>
c0015137:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001513a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001513d:	8b 00                	mov    eax,DWORD PTR [eax]
c001513f:	83 c0 0c             	add    eax,0xc
c0015142:	8b 00                	mov    eax,DWORD PTR [eax]
c0015144:	6a 00                	push   0x0
c0015146:	6a 00                	push   0x0
c0015148:	6a 00                	push   0x0
c001514a:	52                   	push   edx
c001514b:	ff d0                	call   eax
c001514d:	83 c4 10             	add    esp,0x10
c0015150:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015154:	74 15                	je     c001516b <setupInterruptController()+0xff>
c0015156:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015159:	8b 00                	mov    eax,DWORD PTR [eax]
c001515b:	83 c0 04             	add    eax,0x4
c001515e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015160:	83 ec 0c             	sub    esp,0xc
c0015163:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015166:	ff d0                	call   eax
c0015168:	83 c4 10             	add    esp,0x10
c001516b:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015172:	83 ec 0c             	sub    esp,0xc
c0015175:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015178:	e8 5d a3 ff ff       	call   c000f4da <malloc>
c001517d:	83 c4 10             	add    esp,0x10
c0015180:	89 c3                	mov    ebx,eax
c0015182:	83 ec 0c             	sub    esp,0xc
c0015185:	53                   	push   ebx
c0015186:	e8 41 f3 00 00       	call   c00244cc <APIC::APIC()>
c001518b:	83 c4 10             	add    esp,0x10
c001518e:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015191:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015194:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015197:	8b 00                	mov    eax,DWORD PTR [eax]
c0015199:	83 c0 08             	add    eax,0x8
c001519c:	8b 00                	mov    eax,DWORD PTR [eax]
c001519e:	6a 00                	push   0x0
c00151a0:	6a 00                	push   0x0
c00151a2:	6a 00                	push   0x0
c00151a4:	52                   	push   edx
c00151a5:	ff d0                	call   eax
c00151a7:	83 c4 10             	add    esp,0x10
c00151aa:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c00151af:	83 ec 08             	sub    esp,0x8
c00151b2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151b5:	50                   	push   eax
c00151b6:	e8 eb e9 ff ff       	call   c0013ba6 <Device::addChild(Device*)>
c00151bb:	83 c4 10             	add    esp,0x10
c00151be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00151c3:	83 c0 24             	add    eax,0x24
c00151c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00151c8:	6a 00                	push   0x0
c00151ca:	68 66 4a 01 c0       	push   0xc0014a66
c00151cf:	6a 00                	push   0x0
c00151d1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151d4:	ff d0                	call   eax
c00151d6:	83 c4 10             	add    esp,0x10
c00151d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00151de:	83 c0 24             	add    eax,0x24
c00151e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00151e3:	6a 00                	push   0x0
c00151e5:	68 66 4a 01 c0       	push   0xc0014a66
c00151ea:	6a 01                	push   0x1
c00151ec:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151ef:	ff d0                	call   eax
c00151f1:	83 c4 10             	add    esp,0x10
c00151f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00151f9:	83 c0 24             	add    eax,0x24
c00151fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00151fe:	6a 00                	push   0x0
c0015200:	68 3f 44 01 c0       	push   0xc001443f
c0015205:	6a 02                	push   0x2
c0015207:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001520a:	ff d0                	call   eax
c001520c:	83 c4 10             	add    esp,0x10
c001520f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015212:	8b 00                	mov    eax,DWORD PTR [eax]
c0015214:	83 c0 24             	add    eax,0x24
c0015217:	8b 00                	mov    eax,DWORD PTR [eax]
c0015219:	6a 00                	push   0x0
c001521b:	68 66 4a 01 c0       	push   0xc0014a66
c0015220:	6a 03                	push   0x3
c0015222:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015225:	ff d0                	call   eax
c0015227:	83 c4 10             	add    esp,0x10
c001522a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001522d:	8b 00                	mov    eax,DWORD PTR [eax]
c001522f:	83 c0 24             	add    eax,0x24
c0015232:	8b 00                	mov    eax,DWORD PTR [eax]
c0015234:	6a 00                	push   0x0
c0015236:	68 66 4a 01 c0       	push   0xc0014a66
c001523b:	6a 04                	push   0x4
c001523d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015240:	ff d0                	call   eax
c0015242:	83 c4 10             	add    esp,0x10
c0015245:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015248:	8b 00                	mov    eax,DWORD PTR [eax]
c001524a:	83 c0 24             	add    eax,0x24
c001524d:	8b 00                	mov    eax,DWORD PTR [eax]
c001524f:	6a 00                	push   0x0
c0015251:	68 66 4a 01 c0       	push   0xc0014a66
c0015256:	6a 05                	push   0x5
c0015258:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001525b:	ff d0                	call   eax
c001525d:	83 c4 10             	add    esp,0x10
c0015260:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015263:	8b 00                	mov    eax,DWORD PTR [eax]
c0015265:	83 c0 24             	add    eax,0x24
c0015268:	8b 00                	mov    eax,DWORD PTR [eax]
c001526a:	6a 00                	push   0x0
c001526c:	68 85 4a 01 c0       	push   0xc0014a85
c0015271:	6a 06                	push   0x6
c0015273:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015276:	ff d0                	call   eax
c0015278:	83 c4 10             	add    esp,0x10
c001527b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001527e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015280:	83 c0 24             	add    eax,0x24
c0015283:	8b 00                	mov    eax,DWORD PTR [eax]
c0015285:	6a 00                	push   0x0
c0015287:	68 e7 49 01 c0       	push   0xc00149e7
c001528c:	6a 07                	push   0x7
c001528e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015291:	ff d0                	call   eax
c0015293:	83 c4 10             	add    esp,0x10
c0015296:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015299:	8b 00                	mov    eax,DWORD PTR [eax]
c001529b:	83 c0 24             	add    eax,0x24
c001529e:	8b 00                	mov    eax,DWORD PTR [eax]
c00152a0:	6a 00                	push   0x0
c00152a2:	68 5a 42 01 c0       	push   0xc001425a
c00152a7:	6a 08                	push   0x8
c00152a9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152ac:	ff d0                	call   eax
c00152ae:	83 c4 10             	add    esp,0x10
c00152b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00152b6:	83 c0 24             	add    eax,0x24
c00152b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00152bb:	6a 00                	push   0x0
c00152bd:	68 66 4a 01 c0       	push   0xc0014a66
c00152c2:	6a 09                	push   0x9
c00152c4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152c7:	ff d0                	call   eax
c00152c9:	83 c4 10             	add    esp,0x10
c00152cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d1:	83 c0 24             	add    eax,0x24
c00152d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d6:	6a 00                	push   0x0
c00152d8:	68 66 4a 01 c0       	push   0xc0014a66
c00152dd:	6a 0a                	push   0xa
c00152df:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152e2:	ff d0                	call   eax
c00152e4:	83 c4 10             	add    esp,0x10
c00152e7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ec:	83 c0 24             	add    eax,0x24
c00152ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f1:	6a 00                	push   0x0
c00152f3:	68 66 4a 01 c0       	push   0xc0014a66
c00152f8:	6a 0b                	push   0xb
c00152fa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152fd:	ff d0                	call   eax
c00152ff:	83 c4 10             	add    esp,0x10
c0015302:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015305:	8b 00                	mov    eax,DWORD PTR [eax]
c0015307:	83 c0 24             	add    eax,0x24
c001530a:	8b 00                	mov    eax,DWORD PTR [eax]
c001530c:	6a 00                	push   0x0
c001530e:	68 66 4a 01 c0       	push   0xc0014a66
c0015313:	6a 0c                	push   0xc
c0015315:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015318:	ff d0                	call   eax
c001531a:	83 c4 10             	add    esp,0x10
c001531d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015320:	8b 00                	mov    eax,DWORD PTR [eax]
c0015322:	83 c0 24             	add    eax,0x24
c0015325:	8b 00                	mov    eax,DWORD PTR [eax]
c0015327:	6a 00                	push   0x0
c0015329:	68 16 4a 01 c0       	push   0xc0014a16
c001532e:	6a 0d                	push   0xd
c0015330:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015333:	ff d0                	call   eax
c0015335:	83 c4 10             	add    esp,0x10
c0015338:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001533b:	8b 00                	mov    eax,DWORD PTR [eax]
c001533d:	83 c0 24             	add    eax,0x24
c0015340:	8b 00                	mov    eax,DWORD PTR [eax]
c0015342:	6a 00                	push   0x0
c0015344:	68 4f 4a 01 c0       	push   0xc0014a4f
c0015349:	6a 0e                	push   0xe
c001534b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001534e:	ff d0                	call   eax
c0015350:	83 c4 10             	add    esp,0x10
c0015353:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015356:	8b 00                	mov    eax,DWORD PTR [eax]
c0015358:	83 c0 24             	add    eax,0x24
c001535b:	8b 00                	mov    eax,DWORD PTR [eax]
c001535d:	6a 00                	push   0x0
c001535f:	68 66 4a 01 c0       	push   0xc0014a66
c0015364:	6a 0f                	push   0xf
c0015366:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015369:	ff d0                	call   eax
c001536b:	83 c4 10             	add    esp,0x10
c001536e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015371:	8b 00                	mov    eax,DWORD PTR [eax]
c0015373:	83 c0 24             	add    eax,0x24
c0015376:	8b 00                	mov    eax,DWORD PTR [eax]
c0015378:	6a 00                	push   0x0
c001537a:	68 66 4a 01 c0       	push   0xc0014a66
c001537f:	6a 10                	push   0x10
c0015381:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015384:	ff d0                	call   eax
c0015386:	83 c4 10             	add    esp,0x10
c0015389:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001538c:	8b 00                	mov    eax,DWORD PTR [eax]
c001538e:	83 c0 24             	add    eax,0x24
c0015391:	8b 00                	mov    eax,DWORD PTR [eax]
c0015393:	6a 00                	push   0x0
c0015395:	68 66 4a 01 c0       	push   0xc0014a66
c001539a:	6a 11                	push   0x11
c001539c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001539f:	ff d0                	call   eax
c00153a1:	83 c4 10             	add    esp,0x10
c00153a4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a9:	83 c0 24             	add    eax,0x24
c00153ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ae:	6a 00                	push   0x0
c00153b0:	68 66 4a 01 c0       	push   0xc0014a66
c00153b5:	6a 12                	push   0x12
c00153b7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153ba:	ff d0                	call   eax
c00153bc:	83 c4 10             	add    esp,0x10
c00153bf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c4:	83 c0 24             	add    eax,0x24
c00153c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c9:	6a 00                	push   0x0
c00153cb:	68 66 4a 01 c0       	push   0xc0014a66
c00153d0:	6a 13                	push   0x13
c00153d2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153d5:	ff d0                	call   eax
c00153d7:	83 c4 10             	add    esp,0x10
c00153da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00153df:	83 c0 24             	add    eax,0x24
c00153e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e4:	6a 00                	push   0x0
c00153e6:	68 66 4a 01 c0       	push   0xc0014a66
c00153eb:	6a 14                	push   0x14
c00153ed:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153f0:	ff d0                	call   eax
c00153f2:	83 c4 10             	add    esp,0x10
c00153f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00153fa:	83 c0 24             	add    eax,0x24
c00153fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ff:	6a 00                	push   0x0
c0015401:	68 66 4a 01 c0       	push   0xc0014a66
c0015406:	6a 1e                	push   0x1e
c0015408:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001540b:	ff d0                	call   eax
c001540d:	83 c4 10             	add    esp,0x10
c0015410:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015413:	8b 00                	mov    eax,DWORD PTR [eax]
c0015415:	83 c0 24             	add    eax,0x24
c0015418:	8b 00                	mov    eax,DWORD PTR [eax]
c001541a:	6a 00                	push   0x0
c001541c:	68 7b b8 01 c0       	push   0xc001b87b
c0015421:	6a 60                	push   0x60
c0015423:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015426:	ff d0                	call   eax
c0015428:	83 c4 10             	add    esp,0x10
c001542b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001542e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015431:	c9                   	leave  
c0015432:	c3                   	ret    
c0015433:	90                   	nop

c0015434 <InterruptController::convertLegacyIRQNumber(int)>:
c0015434:	55                   	push   ebp
c0015435:	89 e5                	mov    ebp,esp
c0015437:	83 ec 08             	sub    esp,0x8
c001543a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001543d:	83 ec 0c             	sub    esp,0xc
c0015440:	50                   	push   eax
c0015441:	e8 4c ea ff ff       	call   c0013e92 <Device::getName()>
c0015446:	83 c4 10             	add    esp,0x10
c0015449:	8a 00                	mov    al,BYTE PTR [eax]
c001544b:	3c 41                	cmp    al,0x41
c001544d:	0f 94 c0             	sete   al
c0015450:	84 c0                	test   al,al
c0015452:	74 28                	je     c001547c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015454:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015458:	7f 12                	jg     c001546c <InterruptController::convertLegacyIRQNumber(int)+0x38>
c001545a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001545d:	05 40 be 02 c0       	add    eax,0xc002be40
c0015462:	8a 00                	mov    al,BYTE PTR [eax]
c0015464:	0f b6 c0             	movzx  eax,al
c0015467:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001546a:	eb 10                	jmp    c001547c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001546c:	83 ec 0c             	sub    esp,0xc
c001546f:	68 b4 97 02 c0       	push   0xc00297b4
c0015474:	e8 58 44 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c0015479:	83 c4 10             	add    esp,0x10
c001547c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001547f:	c9                   	leave  
c0015480:	c3                   	ret    
c0015481:	90                   	nop

c0015482 <startGUI(void*)>:
c0015482:	55                   	push   ebp
c0015483:	89 e5                	mov    ebp,esp
c0015485:	53                   	push   ebx
c0015486:	83 ec 04             	sub    esp,0x4
c0015489:	e8 5a 7a 00 00       	call   c001cee8 <unlockScheduler()>
c001548e:	8b 1d e8 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cbe8
c0015494:	83 ec 08             	sub    esp,0x8
c0015497:	6a 01                	push   0x1
c0015499:	68 9c 9a 02 c0       	push   0xc0029a9c
c001549e:	e8 cf 73 00 00       	call   c001c872 <Thr::loadDLL(char const*, bool)>
c00154a3:	83 c4 10             	add    esp,0x10
c00154a6:	83 ec 08             	sub    esp,0x8
c00154a9:	53                   	push   ebx
c00154aa:	50                   	push   eax
c00154ab:	e8 d1 75 00 00       	call   c001ca81 <Thr::executeDLL(unsigned long, void*)>
c00154b0:	83 c4 10             	add    esp,0x10
c00154b3:	8b 1d e8 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cbe8
c00154b9:	83 ec 08             	sub    esp,0x8
c00154bc:	6a 01                	push   0x1
c00154be:	68 b6 9a 02 c0       	push   0xc0029ab6
c00154c3:	e8 aa 73 00 00       	call   c001c872 <Thr::loadDLL(char const*, bool)>
c00154c8:	83 c4 10             	add    esp,0x10
c00154cb:	83 ec 08             	sub    esp,0x8
c00154ce:	53                   	push   ebx
c00154cf:	50                   	push   eax
c00154d0:	e8 ac 75 00 00       	call   c001ca81 <Thr::executeDLL(unsigned long, void*)>
c00154d5:	83 c4 10             	add    esp,0x10
c00154d8:	90                   	nop
c00154d9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00154dc:	c9                   	leave  
c00154dd:	c3                   	ret    

c00154de <startGUIVESA(void*)>:
c00154de:	55                   	push   ebp
c00154df:	89 e5                	mov    ebp,esp
c00154e1:	53                   	push   ebx
c00154e2:	83 ec 04             	sub    esp,0x4
c00154e5:	e8 fe 79 00 00       	call   c001cee8 <unlockScheduler()>
c00154ea:	8b 1d e8 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cbe8
c00154f0:	83 ec 08             	sub    esp,0x8
c00154f3:	6a 01                	push   0x1
c00154f5:	68 d0 9a 02 c0       	push   0xc0029ad0
c00154fa:	e8 73 73 00 00       	call   c001c872 <Thr::loadDLL(char const*, bool)>
c00154ff:	83 c4 10             	add    esp,0x10
c0015502:	83 ec 08             	sub    esp,0x8
c0015505:	53                   	push   ebx
c0015506:	50                   	push   eax
c0015507:	e8 75 75 00 00       	call   c001ca81 <Thr::executeDLL(unsigned long, void*)>
c001550c:	83 c4 10             	add    esp,0x10
c001550f:	8b 1d e8 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cbe8
c0015515:	83 ec 08             	sub    esp,0x8
c0015518:	6a 01                	push   0x1
c001551a:	68 b6 9a 02 c0       	push   0xc0029ab6
c001551f:	e8 4e 73 00 00       	call   c001c872 <Thr::loadDLL(char const*, bool)>
c0015524:	83 c4 10             	add    esp,0x10
c0015527:	83 ec 08             	sub    esp,0x8
c001552a:	53                   	push   ebx
c001552b:	50                   	push   eax
c001552c:	e8 50 75 00 00       	call   c001ca81 <Thr::executeDLL(unsigned long, void*)>
c0015531:	83 c4 10             	add    esp,0x10
c0015534:	90                   	nop
c0015535:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015538:	c9                   	leave  
c0015539:	c3                   	ret    

c001553a <sendKeyToTerminal(unsigned char)>:
c001553a:	55                   	push   ebp
c001553b:	89 e5                	mov    ebp,esp
c001553d:	83 ec 28             	sub    esp,0x28
c0015540:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015543:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015546:	a1 c4 cc 02 c0       	mov    eax,ds:0xc002ccc4
c001554b:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001554f:	83 ec 08             	sub    esp,0x8
c0015552:	52                   	push   edx
c0015553:	50                   	push   eax
c0015554:	e8 05 ba ff ff       	call   c0010f5e <VgaText::receiveKey(unsigned char)>
c0015559:	83 c4 10             	add    esp,0x10
c001555c:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015560:	75 41                	jne    c00155a3 <sendKeyToTerminal(unsigned char)+0x69>
c0015562:	e8 a6 79 00 00       	call   c001cf0d <lockStuff()>
c0015567:	a1 a0 cd 02 c0       	mov    eax,ds:0xc002cda0
c001556c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001556f:	c7 05 a0 cd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cda0,0x0
c0015579:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001557d:	74 1f                	je     c001559e <sendKeyToTerminal(unsigned char)+0x64>
c001557f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015582:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015585:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015588:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001558b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001558e:	83 ec 0c             	sub    esp,0xc
c0015591:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015594:	e8 65 7f 00 00       	call   c001d4fe <unblockTask(ThreadControlBlock*)>
c0015599:	83 c4 10             	add    esp,0x10
c001559c:	eb db                	jmp    c0015579 <sendKeyToTerminal(unsigned char)+0x3f>
c001559e:	e8 04 7d 00 00       	call   c001d2a7 <unlockStuff()>
c00155a3:	90                   	nop
c00155a4:	c9                   	leave  
c00155a5:	c3                   	ret    

c00155a6 <sendKeyboardToken(KeyboardToken)>:
c00155a6:	55                   	push   ebp
c00155a7:	89 e5                	mov    ebp,esp
c00155a9:	83 ec 18             	sub    esp,0x18
c00155ac:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00155af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b2:	0f b7 c0             	movzx  eax,ax
c00155b5:	83 f2 01             	xor    edx,0x1
c00155b8:	88 90 c0 cd 02 c0    	mov    BYTE PTR [eax-0x3ffd3240],dl
c00155be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c1:	66 3d 03 02          	cmp    ax,0x203
c00155c5:	75 07                	jne    c00155ce <sendKeyboardToken(KeyboardToken)+0x28>
c00155c7:	a0 c0 ce 02 c0       	mov    al,ds:0xc002cec0
c00155cc:	84 c0                	test   al,al
c00155ce:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00155d2:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00155d5:	a0 c8 d1 02 c0       	mov    al,ds:0xc002d1c8
c00155da:	38 c2                	cmp    dl,al
c00155dc:	74 1c                	je     c00155fa <sendKeyboardToken(KeyboardToken)+0x54>
c00155de:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00155e1:	a2 c8 d1 02 c0       	mov    ds:0xc002d1c8,al
c00155e6:	a0 c8 d1 02 c0       	mov    al,ds:0xc002d1c8
c00155eb:	0f b6 c0             	movzx  eax,al
c00155ee:	83 ec 0c             	sub    esp,0xc
c00155f1:	50                   	push   eax
c00155f2:	e8 c7 ab ff ff       	call   c00101be <setTerminalScrollLock(bool)>
c00155f7:	83 c4 10             	add    esp,0x10
c00155fa:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00155fd:	84 c0                	test   al,al
c00155ff:	0f 84 ae 00 00 00    	je     c00156b3 <sendKeyboardToken(KeyboardToken)+0x10d>
c0015605:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015608:	66 3d 10 03          	cmp    ax,0x310
c001560c:	75 06                	jne    c0015614 <sendKeyboardToken(KeyboardToken)+0x6e>
c001560e:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015614:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015617:	66 3d 11 03          	cmp    ax,0x311
c001561b:	75 06                	jne    c0015623 <sendKeyboardToken(KeyboardToken)+0x7d>
c001561d:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015623:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015626:	66 3d 12 03          	cmp    ax,0x312
c001562a:	75 06                	jne    c0015632 <sendKeyboardToken(KeyboardToken)+0x8c>
c001562c:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015632:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015635:	66 3d 13 03          	cmp    ax,0x313
c0015639:	75 06                	jne    c0015641 <sendKeyboardToken(KeyboardToken)+0x9b>
c001563b:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015641:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015644:	66 3d 14 03          	cmp    ax,0x314
c0015648:	75 06                	jne    c0015650 <sendKeyboardToken(KeyboardToken)+0xaa>
c001564a:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015650:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015653:	66 3d 15 03          	cmp    ax,0x315
c0015657:	75 06                	jne    c001565f <sendKeyboardToken(KeyboardToken)+0xb9>
c0015659:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001565f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015662:	66 3d 16 03          	cmp    ax,0x316
c0015666:	75 06                	jne    c001566e <sendKeyboardToken(KeyboardToken)+0xc8>
c0015668:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001566e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015671:	66 3d 17 03          	cmp    ax,0x317
c0015675:	75 06                	jne    c001567d <sendKeyboardToken(KeyboardToken)+0xd7>
c0015677:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001567d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015680:	66 3d 18 03          	cmp    ax,0x318
c0015684:	75 06                	jne    c001568c <sendKeyboardToken(KeyboardToken)+0xe6>
c0015686:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001568c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001568f:	66 3d 19 03          	cmp    ax,0x319
c0015693:	75 06                	jne    c001569b <sendKeyboardToken(KeyboardToken)+0xf5>
c0015695:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001569b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001569e:	66 3d 1a 03          	cmp    ax,0x31a
c00156a2:	0f 85 c9 00 00 00    	jne    c0015771 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00156a8:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00156ae:	e9 be 00 00 00       	jmp    c0015771 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00156b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b6:	66 3d 10 03          	cmp    ax,0x310
c00156ba:	75 0a                	jne    c00156c6 <sendKeyboardToken(KeyboardToken)+0x120>
c00156bc:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00156c2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c9:	66 3d 11 03          	cmp    ax,0x311
c00156cd:	75 0a                	jne    c00156d9 <sendKeyboardToken(KeyboardToken)+0x133>
c00156cf:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00156d5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156dc:	66 3d 12 03          	cmp    ax,0x312
c00156e0:	75 0a                	jne    c00156ec <sendKeyboardToken(KeyboardToken)+0x146>
c00156e2:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00156e8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ef:	66 3d 13 03          	cmp    ax,0x313
c00156f3:	75 0a                	jne    c00156ff <sendKeyboardToken(KeyboardToken)+0x159>
c00156f5:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00156fb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015702:	66 3d 14 03          	cmp    ax,0x314
c0015706:	75 0a                	jne    c0015712 <sendKeyboardToken(KeyboardToken)+0x16c>
c0015708:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001570e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015712:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015715:	66 3d 15 03          	cmp    ax,0x315
c0015719:	75 0a                	jne    c0015725 <sendKeyboardToken(KeyboardToken)+0x17f>
c001571b:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015721:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015725:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015728:	66 3d 16 03          	cmp    ax,0x316
c001572c:	75 0a                	jne    c0015738 <sendKeyboardToken(KeyboardToken)+0x192>
c001572e:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015734:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015738:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001573b:	66 3d 17 03          	cmp    ax,0x317
c001573f:	75 0a                	jne    c001574b <sendKeyboardToken(KeyboardToken)+0x1a5>
c0015741:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015747:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001574b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001574e:	66 3d 18 03          	cmp    ax,0x318
c0015752:	75 0a                	jne    c001575e <sendKeyboardToken(KeyboardToken)+0x1b8>
c0015754:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001575a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001575e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015761:	66 3d 19 03          	cmp    ax,0x319
c0015765:	75 0a                	jne    c0015771 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015767:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001576d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015771:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015774:	66 3d 00 02          	cmp    ax,0x200
c0015778:	75 2c                	jne    c00157a6 <sendKeyboardToken(KeyboardToken)+0x200>
c001577a:	a0 c0 d1 02 c0       	mov    al,ds:0xc002d1c0
c001577f:	83 f0 01             	xor    eax,0x1
c0015782:	84 c0                	test   al,al
c0015784:	74 20                	je     c00157a6 <sendKeyboardToken(KeyboardToken)+0x200>
c0015786:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c001578b:	6a 01                	push   0x1
c001578d:	6a 00                	push   0x0
c001578f:	68 82 54 01 c0       	push   0xc0015482
c0015794:	50                   	push   eax
c0015795:	e8 7e 78 00 00       	call   c001d018 <Process::createThread(void (*)(void*), void*, int)>
c001579a:	83 c4 10             	add    esp,0x10
c001579d:	c6 05 c0 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d1c0,0x1
c00157a4:	eb 33                	jmp    c00157d9 <sendKeyboardToken(KeyboardToken)+0x233>
c00157a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a9:	66 3d 01 02          	cmp    ax,0x201
c00157ad:	75 2a                	jne    c00157d9 <sendKeyboardToken(KeyboardToken)+0x233>
c00157af:	a0 c0 d1 02 c0       	mov    al,ds:0xc002d1c0
c00157b4:	83 f0 01             	xor    eax,0x1
c00157b7:	84 c0                	test   al,al
c00157b9:	74 1e                	je     c00157d9 <sendKeyboardToken(KeyboardToken)+0x233>
c00157bb:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c00157c0:	6a 01                	push   0x1
c00157c2:	6a 00                	push   0x0
c00157c4:	68 de 54 01 c0       	push   0xc00154de
c00157c9:	50                   	push   eax
c00157ca:	e8 49 78 00 00       	call   c001d018 <Process::createThread(void (*)(void*), void*, int)>
c00157cf:	83 c4 10             	add    esp,0x10
c00157d2:	c6 05 c0 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d1c0,0x1
c00157d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157dc:	66 3d 1d 03          	cmp    ax,0x31d
c00157e0:	75 06                	jne    c00157e8 <sendKeyboardToken(KeyboardToken)+0x242>
c00157e2:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00157e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157eb:	66 3d 1c 03          	cmp    ax,0x31c
c00157ef:	75 06                	jne    c00157f7 <sendKeyboardToken(KeyboardToken)+0x251>
c00157f1:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00157f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157fa:	66 3d 1b 03          	cmp    ax,0x31b
c00157fe:	75 06                	jne    c0015806 <sendKeyboardToken(KeyboardToken)+0x260>
c0015800:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015806:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015809:	66 3d 1e 03          	cmp    ax,0x31e
c001580d:	75 06                	jne    c0015815 <sendKeyboardToken(KeyboardToken)+0x26f>
c001580f:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015815:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015818:	66 3d 1f 03          	cmp    ax,0x31f
c001581c:	75 06                	jne    c0015824 <sendKeyboardToken(KeyboardToken)+0x27e>
c001581e:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015824:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015827:	66 3d 1a 03          	cmp    ax,0x31a
c001582b:	75 06                	jne    c0015833 <sendKeyboardToken(KeyboardToken)+0x28d>
c001582d:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015833:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015837:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001583a:	83 f0 01             	xor    eax,0x1
c001583d:	84 c0                	test   al,al
c001583f:	74 77                	je     c00158b8 <sendKeyboardToken(KeyboardToken)+0x312>
c0015841:	a0 c1 ce 02 c0       	mov    al,ds:0xc002cec1
c0015846:	84 c0                	test   al,al
c0015848:	74 41                	je     c001588b <sendKeyboardToken(KeyboardToken)+0x2e5>
c001584a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001584e:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015852:	74 2b                	je     c001587f <sendKeyboardToken(KeyboardToken)+0x2d9>
c0015854:	8b 15 c4 d1 02 c0    	mov    edx,DWORD PTR ds:0xc002d1c4
c001585a:	89 d0                	mov    eax,edx
c001585c:	c1 e0 02             	shl    eax,0x2
c001585f:	01 d0                	add    eax,edx
c0015861:	01 c0                	add    eax,eax
c0015863:	a3 c4 d1 02 c0       	mov    ds:0xc002d1c4,eax
c0015868:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001586b:	0f b7 c0             	movzx  eax,ax
c001586e:	8d 50 d0             	lea    edx,[eax-0x30]
c0015871:	a1 c4 d1 02 c0       	mov    eax,ds:0xc002d1c4
c0015876:	01 d0                	add    eax,edx
c0015878:	a3 c4 d1 02 c0       	mov    ds:0xc002d1c4,eax
c001587d:	eb 6d                	jmp    c00158ec <sendKeyboardToken(KeyboardToken)+0x346>
c001587f:	c7 05 c4 d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d1c4,0x0
c0015889:	eb 61                	jmp    c00158ec <sendKeyboardToken(KeyboardToken)+0x346>
c001588b:	a1 c4 d1 02 c0       	mov    eax,ds:0xc002d1c4
c0015890:	85 c0                	test   eax,eax
c0015892:	74 18                	je     c00158ac <sendKeyboardToken(KeyboardToken)+0x306>
c0015894:	a1 c4 d1 02 c0       	mov    eax,ds:0xc002d1c4
c0015899:	0f b6 c0             	movzx  eax,al
c001589c:	83 ec 0c             	sub    esp,0xc
c001589f:	50                   	push   eax
c00158a0:	e8 95 fc ff ff       	call   c001553a <sendKeyToTerminal(unsigned char)>
c00158a5:	83 c4 10             	add    esp,0x10
c00158a8:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00158ac:	c7 05 c4 d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d1c4,0x0
c00158b6:	eb 34                	jmp    c00158ec <sendKeyboardToken(KeyboardToken)+0x346>
c00158b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158bb:	66 3d 01 01          	cmp    ax,0x101
c00158bf:	75 2b                	jne    c00158ec <sendKeyboardToken(KeyboardToken)+0x346>
c00158c1:	a1 c4 d1 02 c0       	mov    eax,ds:0xc002d1c4
c00158c6:	85 c0                	test   eax,eax
c00158c8:	74 18                	je     c00158e2 <sendKeyboardToken(KeyboardToken)+0x33c>
c00158ca:	a1 c4 d1 02 c0       	mov    eax,ds:0xc002d1c4
c00158cf:	0f b6 c0             	movzx  eax,al
c00158d2:	83 ec 0c             	sub    esp,0xc
c00158d5:	50                   	push   eax
c00158d6:	e8 5f fc ff ff       	call   c001553a <sendKeyToTerminal(unsigned char)>
c00158db:	83 c4 10             	add    esp,0x10
c00158de:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00158e2:	c7 05 c4 d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d1c4,0x0
c00158ec:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00158ef:	83 f0 01             	xor    eax,0x1
c00158f2:	84 c0                	test   al,al
c00158f4:	74 4c                	je     c0015942 <sendKeyboardToken(KeyboardToken)+0x39c>
c00158f6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00158f9:	83 f0 01             	xor    eax,0x1
c00158fc:	84 c0                	test   al,al
c00158fe:	74 42                	je     c0015942 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015900:	a0 c0 ce 02 c0       	mov    al,ds:0xc002cec0
c0015905:	83 f0 01             	xor    eax,0x1
c0015908:	84 c0                	test   al,al
c001590a:	74 36                	je     c0015942 <sendKeyboardToken(KeyboardToken)+0x39c>
c001590c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001590f:	66 83 f8 1f          	cmp    ax,0x1f
c0015913:	76 09                	jbe    c001591e <sendKeyboardToken(KeyboardToken)+0x378>
c0015915:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015918:	66 83 f8 7e          	cmp    ax,0x7e
c001591c:	76 12                	jbe    c0015930 <sendKeyboardToken(KeyboardToken)+0x38a>
c001591e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015921:	66 83 f8 0a          	cmp    ax,0xa
c0015925:	74 09                	je     c0015930 <sendKeyboardToken(KeyboardToken)+0x38a>
c0015927:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001592a:	66 83 f8 08          	cmp    ax,0x8
c001592e:	75 12                	jne    c0015942 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015930:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015933:	0f b6 c0             	movzx  eax,al
c0015936:	83 ec 0c             	sub    esp,0xc
c0015939:	50                   	push   eax
c001593a:	e8 fb fb ff ff       	call   c001553a <sendKeyToTerminal(unsigned char)>
c001593f:	83 c4 10             	add    esp,0x10
c0015942:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015945:	83 f0 01             	xor    eax,0x1
c0015948:	84 c0                	test   al,al
c001594a:	74 4f                	je     c001599b <sendKeyboardToken(KeyboardToken)+0x3f5>
c001594c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001594f:	83 f0 01             	xor    eax,0x1
c0015952:	84 c0                	test   al,al
c0015954:	74 45                	je     c001599b <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015956:	a0 c0 ce 02 c0       	mov    al,ds:0xc002cec0
c001595b:	84 c0                	test   al,al
c001595d:	74 3c                	je     c001599b <sendKeyboardToken(KeyboardToken)+0x3f5>
c001595f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015962:	66 83 f8 3f          	cmp    ax,0x3f
c0015966:	76 33                	jbe    c001599b <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015968:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001596b:	66 83 f8 7f          	cmp    ax,0x7f
c001596f:	77 2a                	ja     c001599b <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015971:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015974:	88 c2                	mov    dl,al
c0015976:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015979:	66 83 f8 5f          	cmp    ax,0x5f
c001597d:	76 04                	jbe    c0015983 <sendKeyboardToken(KeyboardToken)+0x3dd>
c001597f:	b0 20                	mov    al,0x20
c0015981:	eb 02                	jmp    c0015985 <sendKeyboardToken(KeyboardToken)+0x3df>
c0015983:	b0 00                	mov    al,0x0
c0015985:	29 c2                	sub    edx,eax
c0015987:	88 d0                	mov    al,dl
c0015989:	83 e8 40             	sub    eax,0x40
c001598c:	0f b6 c0             	movzx  eax,al
c001598f:	83 ec 0c             	sub    esp,0xc
c0015992:	50                   	push   eax
c0015993:	e8 a2 fb ff ff       	call   c001553a <sendKeyToTerminal(unsigned char)>
c0015998:	83 c4 10             	add    esp,0x10
c001599b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001599e:	66 3d 00 03          	cmp    ax,0x300
c00159a2:	75 0f                	jne    c00159b3 <sendKeyboardToken(KeyboardToken)+0x40d>
c00159a4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00159a7:	83 f0 01             	xor    eax,0x1
c00159aa:	84 c0                	test   al,al
c00159ac:	74 05                	je     c00159b3 <sendKeyboardToken(KeyboardToken)+0x40d>
c00159ae:	e8 40 b0 ff ff       	call   c00109f3 <doTerminalCycle()>
c00159b3:	90                   	nop
c00159b4:	c9                   	leave  
c00159b5:	c3                   	ret    

c00159b6 <clearInternalKeybuffer(VgaText*)>:
c00159b6:	55                   	push   ebp
c00159b7:	89 e5                	mov    ebp,esp
c00159b9:	83 ec 08             	sub    esp,0x8
c00159bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159bf:	05 34 11 00 00       	add    eax,0x1134
c00159c4:	83 ec 0c             	sub    esp,0xc
c00159c7:	50                   	push   eax
c00159c8:	e8 db ac fe ff       	call   c00006a8 <strlen>
c00159cd:	83 c4 10             	add    esp,0x10
c00159d0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00159d3:	81 c2 34 11 00 00    	add    edx,0x1134
c00159d9:	83 ec 04             	sub    esp,0x4
c00159dc:	50                   	push   eax
c00159dd:	6a 00                	push   0x0
c00159df:	52                   	push   edx
c00159e0:	e8 a6 ac fe ff       	call   c000068b <memset>
c00159e5:	83 c4 10             	add    esp,0x10
c00159e8:	90                   	nop
c00159e9:	c9                   	leave  
c00159ea:	c3                   	ret    

c00159eb <readKeyboard(VgaText*, char*, unsigned long)>:
c00159eb:	55                   	push   ebp
c00159ec:	89 e5                	mov    ebp,esp
c00159ee:	83 ec 18             	sub    esp,0x18
c00159f1:	fb                   	sti    
c00159f2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00159f9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00159fd:	0f 84 8a 00 00 00    	je     c0015a8d <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0015a03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a06:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015a0c:	84 c0                	test   al,al
c0015a0e:	75 11                	jne    c0015a21 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0015a10:	e8 d1 74 00 00       	call   c001cee6 <lockScheduler()>
c0015a15:	e8 08 78 00 00       	call   c001d222 <schedule()>
c0015a1a:	e8 c9 74 00 00       	call   c001cee8 <unlockScheduler()>
c0015a1f:	eb e2                	jmp    c0015a03 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0015a21:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015a24:	8d 50 01             	lea    edx,[eax+0x1]
c0015a27:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015a2a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015a2d:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015a33:	88 10                	mov    BYTE PTR [eax],dl
c0015a35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a38:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015a3e:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015a41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a44:	05 34 11 00 00       	add    eax,0x1134
c0015a49:	83 ec 0c             	sub    esp,0xc
c0015a4c:	50                   	push   eax
c0015a4d:	e8 56 ac fe ff       	call   c00006a8 <strlen>
c0015a52:	83 c4 10             	add    esp,0x10
c0015a55:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015a58:	81 c2 34 11 00 00    	add    edx,0x1134
c0015a5e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015a61:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015a64:	81 c2 34 11 00 00    	add    edx,0x1134
c0015a6a:	83 ec 04             	sub    esp,0x4
c0015a6d:	50                   	push   eax
c0015a6e:	51                   	push   ecx
c0015a6f:	52                   	push   edx
c0015a70:	e8 a8 ab fe ff       	call   c000061d <memmove>
c0015a75:	83 c4 10             	add    esp,0x10
c0015a78:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015a7b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015a7e:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015a82:	0f 85 71 ff ff ff    	jne    c00159f9 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0015a88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a8b:	eb 03                	jmp    c0015a90 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0015a8d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a90:	c9                   	leave  
c0015a91:	c3                   	ret    

c0015a92 <Keyboard::Keyboard(char const*)>:
c0015a92:	83 ec 0c             	sub    esp,0xc
c0015a95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a99:	83 ec 08             	sub    esp,0x8
c0015a9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015aa0:	50                   	push   eax
c0015aa1:	e8 f0 e2 ff ff       	call   c0013d96 <Device::Device(char const*)>
c0015aa6:	83 c4 10             	add    esp,0x10
c0015aa9:	ba f4 9a 02 c0       	mov    edx,0xc0029af4
c0015aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ab2:	89 10                	mov    DWORD PTR [eax],edx
c0015ab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ab8:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015ac2:	c6 05 a4 cd 02 c0 01 	mov    BYTE PTR ds:0xc002cda4,0x1
c0015ac9:	90                   	nop
c0015aca:	83 c4 0c             	add    esp,0xc
c0015acd:	c3                   	ret    

c0015ace <Keyboard::~Keyboard()>:
c0015ace:	83 ec 0c             	sub    esp,0xc
c0015ad1:	ba f4 9a 02 c0       	mov    edx,0xc0029af4
c0015ad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ada:	89 10                	mov    DWORD PTR [eax],edx
c0015adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ae0:	83 ec 0c             	sub    esp,0xc
c0015ae3:	50                   	push   eax
c0015ae4:	e8 8f df ff ff       	call   c0013a78 <Device::~Device()>
c0015ae9:	83 c4 10             	add    esp,0x10
c0015aec:	90                   	nop
c0015aed:	83 c4 0c             	add    esp,0xc
c0015af0:	c3                   	ret    
c0015af1:	90                   	nop

c0015af2 <Keyboard::~Keyboard()>:
c0015af2:	83 ec 0c             	sub    esp,0xc
c0015af5:	83 ec 0c             	sub    esp,0xc
c0015af8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015afc:	e8 cd ff ff ff       	call   c0015ace <Keyboard::~Keyboard()>
c0015b01:	83 c4 10             	add    esp,0x10
c0015b04:	83 ec 08             	sub    esp,0x8
c0015b07:	68 5c 01 00 00       	push   0x15c
c0015b0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b10:	e8 8a cb ff ff       	call   c001269f <operator delete(void*, unsigned long)>
c0015b15:	83 c4 10             	add    esp,0x10
c0015b18:	83 c4 0c             	add    esp,0xc
c0015b1b:	c3                   	ret    

c0015b1c <LogicalDisk::close(int, int, void*)>:
c0015b1c:	83 c8 ff             	or     eax,0xffffffff
c0015b1f:	c3                   	ret    

c0015b20 <LogicalDisk::~LogicalDisk()>:
c0015b20:	83 ec 0c             	sub    esp,0xc
c0015b23:	ba a4 9b 02 c0       	mov    edx,0xc0029ba4
c0015b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b2c:	89 10                	mov    DWORD PTR [eax],edx
c0015b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b32:	83 ec 0c             	sub    esp,0xc
c0015b35:	50                   	push   eax
c0015b36:	e8 3d df ff ff       	call   c0013a78 <Device::~Device()>
c0015b3b:	83 c4 10             	add    esp,0x10
c0015b3e:	90                   	nop
c0015b3f:	83 c4 0c             	add    esp,0xc
c0015b42:	c3                   	ret    
c0015b43:	90                   	nop

c0015b44 <LogicalDisk::~LogicalDisk()>:
c0015b44:	83 ec 0c             	sub    esp,0xc
c0015b47:	83 ec 0c             	sub    esp,0xc
c0015b4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b4e:	e8 cd ff ff ff       	call   c0015b20 <LogicalDisk::~LogicalDisk()>
c0015b53:	83 c4 10             	add    esp,0x10
c0015b56:	83 ec 08             	sub    esp,0x8
c0015b59:	68 74 01 00 00       	push   0x174
c0015b5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b62:	e8 38 cb ff ff       	call   c001269f <operator delete(void*, unsigned long)>
c0015b67:	83 c4 10             	add    esp,0x10
c0015b6a:	83 c4 0c             	add    esp,0xc
c0015b6d:	c3                   	ret    

c0015b6e <LogicalDisk::open(int, int, void*)>:
c0015b6e:	83 ec 18             	sub    esp,0x18
c0015b71:	68 20 9b 02 c0       	push   0xc0029b20
c0015b76:	e8 56 3d 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c0015b7b:	83 c8 ff             	or     eax,0xffffffff
c0015b7e:	83 c4 1c             	add    esp,0x1c
c0015b81:	c3                   	ret    

c0015b82 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015b82:	53                   	push   ebx
c0015b83:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015b87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015b8b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b8f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015b95:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015b9b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015ba1:	77 10                	ja     c0015bb3 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015ba3:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015ba9:	89 d3                	mov    ebx,edx
c0015bab:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015bb1:	72 05                	jb     c0015bb8 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015bb3:	83 c8 ff             	or     eax,0xffffffff
c0015bb6:	89 c2                	mov    edx,eax
c0015bb8:	5b                   	pop    ebx
c0015bb9:	c3                   	ret    

c0015bba <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015bba:	56                   	push   esi
c0015bbb:	83 c8 ff             	or     eax,0xffffffff
c0015bbe:	53                   	push   ebx
c0015bbf:	89 c2                	mov    edx,eax
c0015bc1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015bc5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015bc9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015bcd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015bd3:	77 27                	ja     c0015bfc <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015bd5:	89 d8                	mov    eax,ebx
c0015bd7:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015bdd:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015be3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015be8:	89 c2                	mov    edx,eax
c0015bea:	73 10                	jae    c0015bfc <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015bec:	89 c8                	mov    eax,ecx
c0015bee:	89 da                	mov    edx,ebx
c0015bf0:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015bf6:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015bfc:	5b                   	pop    ebx
c0015bfd:	5e                   	pop    esi
c0015bfe:	c3                   	ret    
c0015bff:	90                   	nop

c0015c00 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015c00:	83 ec 1c             	sub    esp,0x1c
c0015c03:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015c07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015c0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c13:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015c17:	89 04 24             	mov    DWORD PTR [esp],eax
c0015c1a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015c22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c26:	83 ec 08             	sub    esp,0x8
c0015c29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c2d:	50                   	push   eax
c0015c2e:	e8 63 e1 ff ff       	call   c0013d96 <Device::Device(char const*)>
c0015c33:	83 c4 10             	add    esp,0x10
c0015c36:	ba a4 9b 02 c0       	mov    edx,0xc0029ba4
c0015c3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c3f:	89 10                	mov    DWORD PTR [eax],edx
c0015c41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c45:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015c4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c50:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015c57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c5b:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015c65:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015c69:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c6d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015c71:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015c77:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015c7d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015c81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015c84:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c88:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015c8e:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015c94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c98:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015c9c:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015ca2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ca6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015cb0:	90                   	nop
c0015cb1:	83 c4 1c             	add    esp,0x1c
c0015cb4:	c3                   	ret    
c0015cb5:	90                   	nop

c0015cb6 <LogicalDisk::assignDriveLetter()>:
c0015cb6:	55                   	push   ebp
c0015cb7:	57                   	push   edi
c0015cb8:	56                   	push   esi
c0015cb9:	53                   	push   ebx
c0015cba:	83 ec 14             	sub    esp,0x14
c0015cbd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015cc1:	8b 3d e0 d1 02 c0    	mov    edi,DWORD PTR ds:0xc002d1e0
c0015cc7:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015ccd:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015cd1:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015cd7:	8b 3d e4 d1 02 c0    	mov    edi,DWORD PTR ds:0xc002d1e4
c0015cdd:	3c 01                	cmp    al,0x1
c0015cdf:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015ce3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015ce7:	19 c0                	sbb    eax,eax
c0015ce9:	83 e0 02             	and    eax,0x2
c0015cec:	83 c0 41             	add    eax,0x41
c0015cef:	0f be e8             	movsx  ebp,al
c0015cf2:	3c 43                	cmp    al,0x43
c0015cf4:	75 10                	jne    c0015d06 <LogicalDisk::assignDriveLetter()+0x50>
c0015cf6:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015cfd:	75 5d                	jne    c0015d5c <LogicalDisk::assignDriveLetter()+0xa6>
c0015cff:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015d04:	75 56                	jne    c0015d5c <LogicalDisk::assignDriveLetter()+0xa6>
c0015d06:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015d09:	ba 01 00 00 00       	mov    edx,0x1
c0015d0e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015d12:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015d16:	d3 e2                	shl    edx,cl
c0015d18:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015d1c:	89 d7                	mov    edi,edx
c0015d1e:	89 d6                	mov    esi,edx
c0015d20:	c1 ff 1f             	sar    edi,0x1f
c0015d23:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015d27:	21 f9                	and    ecx,edi
c0015d29:	09 d1                	or     ecx,edx
c0015d2b:	75 2f                	jne    c0015d5c <LogicalDisk::assignDriveLetter()+0xa6>
c0015d2d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015d31:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015d35:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015d3b:	09 f2                	or     edx,esi
c0015d3d:	89 15 e0 d1 02 c0    	mov    DWORD PTR ds:0xc002d1e0,edx
c0015d43:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015d47:	09 fa                	or     edx,edi
c0015d49:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015d4d:	89 15 e4 d1 02 c0    	mov    DWORD PTR ds:0xc002d1e4,edx
c0015d53:	89 1c bd 00 d2 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2e00],ebx
c0015d5a:	eb 08                	jmp    c0015d64 <LogicalDisk::assignDriveLetter()+0xae>
c0015d5c:	45                   	inc    ebp
c0015d5d:	40                   	inc    eax
c0015d5e:	3c 5b                	cmp    al,0x5b
c0015d60:	75 90                	jne    c0015cf2 <LogicalDisk::assignDriveLetter()+0x3c>
c0015d62:	31 c0                	xor    eax,eax
c0015d64:	83 c4 14             	add    esp,0x14
c0015d67:	5b                   	pop    ebx
c0015d68:	5e                   	pop    esi
c0015d69:	5f                   	pop    edi
c0015d6a:	5d                   	pop    ebp
c0015d6b:	c3                   	ret    

c0015d6c <LogicalDisk::mount()>:
c0015d6c:	56                   	push   esi
c0015d6d:	53                   	push   ebx
c0015d6e:	51                   	push   ecx
c0015d6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d73:	8b 1d 68 cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cd68
c0015d79:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015d83:	85 db                	test   ebx,ebx
c0015d85:	74 50                	je     c0015dd7 <LogicalDisk::mount()+0x6b>
c0015d87:	e8 45 71 00 00       	call   c001ced1 <getIRQNestingLevel()>
c0015d8c:	52                   	push   edx
c0015d8d:	52                   	push   edx
c0015d8e:	50                   	push   eax
c0015d8f:	68 44 9b 02 c0       	push   0xc0029b44
c0015d94:	e8 e6 c9 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0015d99:	83 c4 0c             	add    esp,0xc
c0015d9c:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015da3:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015da5:	83 e8 41             	sub    eax,0x41
c0015da8:	50                   	push   eax
c0015da9:	56                   	push   esi
c0015daa:	53                   	push   ebx
c0015dab:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015dae:	83 c4 10             	add    esp,0x10
c0015db1:	84 c0                	test   al,al
c0015db3:	74 08                	je     c0015dbd <LogicalDisk::mount()+0x51>
c0015db5:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015dbb:	eb 1c                	jmp    c0015dd9 <LogicalDisk::mount()+0x6d>
c0015dbd:	e8 0f 71 00 00       	call   c001ced1 <getIRQNestingLevel()>
c0015dc2:	51                   	push   ecx
c0015dc3:	51                   	push   ecx
c0015dc4:	50                   	push   eax
c0015dc5:	68 5f 9b 02 c0       	push   0xc0029b5f
c0015dca:	e8 b0 c9 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0015dcf:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015dd2:	83 c4 10             	add    esp,0x10
c0015dd5:	eb ac                	jmp    c0015d83 <LogicalDisk::mount()+0x17>
c0015dd7:	31 c0                	xor    eax,eax
c0015dd9:	5a                   	pop    edx
c0015dda:	5b                   	pop    ebx
c0015ddb:	5e                   	pop    esi
c0015ddc:	c3                   	ret    
c0015ddd:	90                   	nop

c0015dde <LogicalDisk::unmount()>:
c0015dde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015de2:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015dec:	c3                   	ret    
c0015ded:	90                   	nop

c0015dee <LogicalDisk::unassignDriveLetter()>:
c0015dee:	57                   	push   edi
c0015def:	56                   	push   esi
c0015df0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015df4:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015dfb:	84 c9                	test   cl,cl
c0015dfd:	75 0f                	jne    c0015e0e <LogicalDisk::unassignDriveLetter()+0x20>
c0015dff:	c7 44 24 0c 7a 9b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029b7a
c0015e07:	5e                   	pop    esi
c0015e08:	5f                   	pop    edi
c0015e09:	e9 c3 3a 00 00       	jmp    c00198d1 <Krnl::panic(char const*)>
c0015e0e:	83 e9 41             	sub    ecx,0x41
c0015e11:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015e18:	b8 01 00 00 00       	mov    eax,0x1
c0015e1d:	c7 04 8d 00 d2 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd2e00],0x0
c0015e28:	d3 e0                	shl    eax,cl
c0015e2a:	89 c7                	mov    edi,eax
c0015e2c:	f7 d0                	not    eax
c0015e2e:	c1 ff 1f             	sar    edi,0x1f
c0015e31:	21 05 e0 d1 02 c0    	and    DWORD PTR ds:0xc002d1e0,eax
c0015e37:	89 fe                	mov    esi,edi
c0015e39:	f7 d6                	not    esi
c0015e3b:	21 35 e4 d1 02 c0    	and    DWORD PTR ds:0xc002d1e4,esi
c0015e41:	5e                   	pop    esi
c0015e42:	5f                   	pop    edi
c0015e43:	c3                   	ret    

c0015e44 <LogicalDisk::read(unsigned long long, int, void*)>:
c0015e44:	57                   	push   edi
c0015e45:	56                   	push   esi
c0015e46:	53                   	push   ebx
c0015e47:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015e4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015e4f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015e53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e57:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015e5d:	77 41                	ja     c0015ea0 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015e5f:	99                   	cdq    
c0015e60:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015e66:	01 c8                	add    eax,ecx
c0015e68:	11 da                	adc    edx,ebx
c0015e6a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015e70:	19 d7                	sbb    edi,edx
c0015e72:	72 33                	jb     c0015ea7 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015e74:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015e7a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015e80:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015e84:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015e88:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015e8e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015e94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015e98:	5b                   	pop    ebx
c0015e99:	5e                   	pop    esi
c0015e9a:	5f                   	pop    edi
c0015e9b:	e9 f8 09 00 00       	jmp    c0016898 <VCache::read(unsigned long long, int, void*)>
c0015ea0:	b8 05 00 00 00       	mov    eax,0x5
c0015ea5:	eb 05                	jmp    c0015eac <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015ea7:	b8 07 00 00 00       	mov    eax,0x7
c0015eac:	5b                   	pop    ebx
c0015ead:	5e                   	pop    esi
c0015eae:	5f                   	pop    edi
c0015eaf:	c3                   	ret    

c0015eb0 <LogicalDisk::write(unsigned long long, int, void*)>:
c0015eb0:	57                   	push   edi
c0015eb1:	56                   	push   esi
c0015eb2:	53                   	push   ebx
c0015eb3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015eb7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ebb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015ebf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ec3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015ec9:	77 41                	ja     c0015f0c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015ecb:	99                   	cdq    
c0015ecc:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015ed2:	01 c8                	add    eax,ecx
c0015ed4:	11 da                	adc    edx,ebx
c0015ed6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015edc:	19 d7                	sbb    edi,edx
c0015ede:	72 33                	jb     c0015f13 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015ee0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015ee6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015eec:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015ef0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015ef4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015efa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015f00:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015f04:	5b                   	pop    ebx
c0015f05:	5e                   	pop    esi
c0015f06:	5f                   	pop    edi
c0015f07:	e9 a8 08 00 00       	jmp    c00167b4 <VCache::write(unsigned long long, int, void*)>
c0015f0c:	b8 05 00 00 00       	mov    eax,0x5
c0015f11:	eb 05                	jmp    c0015f18 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015f13:	b8 07 00 00 00       	mov    eax,0x7
c0015f18:	5b                   	pop    ebx
c0015f19:	5e                   	pop    esi
c0015f1a:	5f                   	pop    edi
c0015f1b:	c3                   	ret    

c0015f1c <Mouse::Mouse(char const*)>:
c0015f1c:	83 ec 0c             	sub    esp,0xc
c0015f1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f23:	83 ec 08             	sub    esp,0x8
c0015f26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f2a:	50                   	push   eax
c0015f2b:	e8 66 de ff ff       	call   c0013d96 <Device::Device(char const*)>
c0015f30:	83 c4 10             	add    esp,0x10
c0015f33:	ba d0 9b 02 c0       	mov    edx,0xc0029bd0
c0015f38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f3c:	89 10                	mov    DWORD PTR [eax],edx
c0015f3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f42:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015f4c:	90                   	nop
c0015f4d:	83 c4 0c             	add    esp,0xc
c0015f50:	c3                   	ret    
c0015f51:	90                   	nop

c0015f52 <Mouse::~Mouse()>:
c0015f52:	83 ec 0c             	sub    esp,0xc
c0015f55:	ba d0 9b 02 c0       	mov    edx,0xc0029bd0
c0015f5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f5e:	89 10                	mov    DWORD PTR [eax],edx
c0015f60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f64:	83 ec 0c             	sub    esp,0xc
c0015f67:	50                   	push   eax
c0015f68:	e8 0b db ff ff       	call   c0013a78 <Device::~Device()>
c0015f6d:	83 c4 10             	add    esp,0x10
c0015f70:	90                   	nop
c0015f71:	83 c4 0c             	add    esp,0xc
c0015f74:	c3                   	ret    
c0015f75:	90                   	nop

c0015f76 <Mouse::~Mouse()>:
c0015f76:	83 ec 0c             	sub    esp,0xc
c0015f79:	83 ec 0c             	sub    esp,0xc
c0015f7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f80:	e8 cd ff ff ff       	call   c0015f52 <Mouse::~Mouse()>
c0015f85:	83 c4 10             	add    esp,0x10
c0015f88:	83 ec 08             	sub    esp,0x8
c0015f8b:	68 58 01 00 00       	push   0x158
c0015f90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f94:	e8 06 c7 ff ff       	call   c001269f <operator delete(void*, unsigned long)>
c0015f99:	83 c4 10             	add    esp,0x10
c0015f9c:	83 c4 0c             	add    esp,0xc
c0015f9f:	c3                   	ret    

c0015fa0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015fa0:	55                   	push   ebp
c0015fa1:	57                   	push   edi
c0015fa2:	56                   	push   esi
c0015fa3:	53                   	push   ebx
c0015fa4:	81 ec 28 01 00 00    	sub    esp,0x128
c0015faa:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015fb1:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015fb8:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0015fbf:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0015fc6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015fca:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015fce:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015fd5:	e8 b8 de ff ff       	call   c0013e92 <Device::getName()>
c0015fda:	5a                   	pop    edx
c0015fdb:	59                   	pop    ecx
c0015fdc:	50                   	push   eax
c0015fdd:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0015fe1:	55                   	push   ebp
c0015fe2:	e8 43 a7 fe ff       	call   c000072a <strcpy>
c0015fe7:	5b                   	pop    ebx
c0015fe8:	58                   	pop    eax
c0015fe9:	68 f4 9b 02 c0       	push   0xc0029bf4
c0015fee:	55                   	push   ebp
c0015fef:	e8 ed a7 fe ff       	call   c00007e1 <strcat>
c0015ff4:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0015ffb:	e8 da 94 ff ff       	call   c000f4da <malloc>
c0016000:	83 c4 0c             	add    esp,0xc
c0016003:	89 c3                	mov    ebx,eax
c0016005:	57                   	push   edi
c0016006:	56                   	push   esi
c0016007:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001600b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001600f:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016016:	55                   	push   ebp
c0016017:	50                   	push   eax
c0016018:	e8 e3 fb ff ff       	call   c0015c00 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001601d:	83 c4 14             	add    esp,0x14
c0016020:	53                   	push   ebx
c0016021:	e8 90 fc ff ff       	call   c0015cb6 <LogicalDisk::assignDriveLetter()>
c0016026:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016029:	e8 3e fd ff ff       	call   c0015d6c <LogicalDisk::mount()>
c001602e:	58                   	pop    eax
c001602f:	5a                   	pop    edx
c0016030:	53                   	push   ebx
c0016031:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016038:	e8 69 db ff ff       	call   c0013ba6 <Device::addChild(Device*)>
c001603d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016043:	5b                   	pop    ebx
c0016044:	5e                   	pop    esi
c0016045:	5f                   	pop    edi
c0016046:	5d                   	pop    ebp
c0016047:	c3                   	ret    

c0016048 <createPartitionsForDisk(PhysicalDisk*)>:
c0016048:	55                   	push   ebp
c0016049:	57                   	push   edi
c001604a:	56                   	push   esi
c001604b:	53                   	push   ebx
c001604c:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016052:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016059:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001605f:	3d 00 02 00 00       	cmp    eax,0x200
c0016064:	74 27                	je     c001608d <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016066:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001606c:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016072:	83 ec 10             	sub    esp,0x10
c0016075:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016079:	99                   	cdq    
c001607a:	c1 e6 0a             	shl    esi,0xa
c001607d:	52                   	push   edx
c001607e:	89 fd                	mov    ebp,edi
c0016080:	50                   	push   eax
c0016081:	55                   	push   ebp
c0016082:	56                   	push   esi
c0016083:	e8 c4 f4 00 00       	call   c002554c <__udivdi3>
c0016088:	e9 b1 00 00 00       	jmp    c001613e <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001608d:	83 ec 0c             	sub    esp,0xc
c0016090:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016092:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016096:	56                   	push   esi
c0016097:	6a 01                	push   0x1
c0016099:	6a 00                	push   0x0
c001609b:	6a 00                	push   0x0
c001609d:	53                   	push   ebx
c001609e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00160a1:	83 c4 20             	add    esp,0x20
c00160a4:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00160ac:	75 0a                	jne    c00160b8 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00160ae:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00160b6:	74 2c                	je     c00160e4 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00160b8:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00160be:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00160c4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00160ca:	83 ec 10             	sub    esp,0x10
c00160cd:	0f a4 c2 0a          	shld   edx,eax,0xa
c00160d1:	89 f7                	mov    edi,esi
c00160d3:	c1 e0 0a             	shl    eax,0xa
c00160d6:	c1 ff 1f             	sar    edi,0x1f
c00160d9:	57                   	push   edi
c00160da:	56                   	push   esi
c00160db:	52                   	push   edx
c00160dc:	50                   	push   eax
c00160dd:	e8 6a f4 00 00       	call   c002554c <__udivdi3>
c00160e2:	eb 5a                	jmp    c001613e <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00160e4:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00160eb:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00160f2:	83 e1 7f             	and    ecx,0x7f
c00160f5:	83 e0 7f             	and    eax,0x7f
c00160f8:	01 c1                	add    ecx,eax
c00160fa:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016101:	83 e0 7f             	and    eax,0x7f
c0016104:	01 c1                	add    ecx,eax
c0016106:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001610d:	83 e0 7f             	and    eax,0x7f
c0016110:	00 c1                	add    cl,al
c0016112:	74 41                	je     c0016155 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016114:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001611a:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016120:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016126:	83 ec 10             	sub    esp,0x10
c0016129:	0f a4 c2 0a          	shld   edx,eax,0xa
c001612d:	89 f7                	mov    edi,esi
c001612f:	c1 e0 0a             	shl    eax,0xa
c0016132:	c1 ff 1f             	sar    edi,0x1f
c0016135:	57                   	push   edi
c0016136:	56                   	push   esi
c0016137:	52                   	push   edx
c0016138:	50                   	push   eax
c0016139:	e8 0e f4 00 00       	call   c002554c <__udivdi3>
c001613e:	83 c4 14             	add    esp,0x14
c0016141:	52                   	push   edx
c0016142:	50                   	push   eax
c0016143:	6a 00                	push   0x0
c0016145:	6a 00                	push   0x0
c0016147:	53                   	push   ebx
c0016148:	e8 53 fe ff ff       	call   c0015fa0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001614d:	83 c4 20             	add    esp,0x20
c0016150:	e9 79 01 00 00       	jmp    c00162ce <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016155:	89 f0                	mov    eax,esi
c0016157:	31 f6                	xor    esi,esi
c0016159:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016160:	75 02                	jne    c0016164 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016162:	89 f1                	mov    ecx,esi
c0016164:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001616b:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016172:	c1 e2 08             	shl    edx,0x8
c0016175:	c1 e7 10             	shl    edi,0x10
c0016178:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016180:	09 fa                	or     edx,edi
c0016182:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001618a:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016191:	83 c0 10             	add    eax,0x10
c0016194:	09 fa                	or     edx,edi
c0016196:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c001619d:	c1 e7 18             	shl    edi,0x18
c00161a0:	09 fa                	or     edx,edi
c00161a2:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00161a9:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00161ad:	c1 e7 10             	shl    edi,0x10
c00161b0:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00161b7:	c1 e2 08             	shl    edx,0x8
c00161ba:	09 fa                	or     edx,edi
c00161bc:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00161c3:	09 fa                	or     edx,edi
c00161c5:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00161cc:	c1 e7 18             	shl    edi,0x18
c00161cf:	09 fa                	or     edx,edi
c00161d1:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00161d5:	46                   	inc    esi
c00161d6:	83 fe 04             	cmp    esi,0x4
c00161d9:	0f 85 7a ff ff ff    	jne    c0016159 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00161df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161e3:	83 f0 01             	xor    eax,0x1
c00161e6:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00161ea:	75 57                	jne    c0016243 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00161ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00161f0:	83 f0 01             	xor    eax,0x1
c00161f3:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00161f7:	75 4a                	jne    c0016243 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00161f9:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00161fd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016205:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001620d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016213:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016219:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001621f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016223:	89 f7                	mov    edi,esi
c0016225:	c1 e0 0a             	shl    eax,0xa
c0016228:	c1 ff 1f             	sar    edi,0x1f
c001622b:	57                   	push   edi
c001622c:	56                   	push   esi
c001622d:	52                   	push   edx
c001622e:	50                   	push   eax
c001622f:	e8 18 f3 00 00       	call   c002554c <__udivdi3>
c0016234:	83 c4 10             	add    esp,0x10
c0016237:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001623b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001623f:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016243:	84 c9                	test   cl,cl
c0016245:	74 53                	je     c001629a <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016247:	0f b6 c9             	movzx  ecx,cl
c001624a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001624e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016252:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016256:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001625a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001625e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016262:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016266:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001626a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001626e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016272:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016276:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001627a:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c001627e:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016282:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016286:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001628a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001628e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016292:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016296:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c001629a:	31 ed                	xor    ebp,ebp
c001629c:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00162a0:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00162a4:	89 f8                	mov    eax,edi
c00162a6:	09 f0                	or     eax,esi
c00162a8:	74 1e                	je     c00162c8 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00162aa:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00162ae:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00162b2:	89 d1                	mov    ecx,edx
c00162b4:	09 c1                	or     ecx,eax
c00162b6:	74 10                	je     c00162c8 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00162b8:	83 ec 0c             	sub    esp,0xc
c00162bb:	57                   	push   edi
c00162bc:	56                   	push   esi
c00162bd:	52                   	push   edx
c00162be:	50                   	push   eax
c00162bf:	53                   	push   ebx
c00162c0:	e8 db fc ff ff       	call   c0015fa0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00162c5:	83 c4 20             	add    esp,0x20
c00162c8:	45                   	inc    ebp
c00162c9:	83 fd 04             	cmp    ebp,0x4
c00162cc:	75 ce                	jne    c001629c <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00162ce:	81 c4 5c 02 00 00    	add    esp,0x25c
c00162d4:	5b                   	pop    ebx
c00162d5:	5e                   	pop    esi
c00162d6:	5f                   	pop    edi
c00162d7:	5d                   	pop    ebp
c00162d8:	c3                   	ret    
c00162d9:	90                   	nop

c00162da <Serial::Serial(char const*)>:
c00162da:	83 ec 0c             	sub    esp,0xc
c00162dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162e1:	83 ec 08             	sub    esp,0x8
c00162e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162e8:	50                   	push   eax
c00162e9:	e8 a8 da ff ff       	call   c0013d96 <Device::Device(char const*)>
c00162ee:	83 c4 10             	add    esp,0x10
c00162f1:	ba 08 9c 02 c0       	mov    edx,0xc0029c08
c00162f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162fa:	89 10                	mov    DWORD PTR [eax],edx
c00162fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016300:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001630a:	90                   	nop
c001630b:	83 c4 0c             	add    esp,0xc
c001630e:	c3                   	ret    
c001630f:	90                   	nop

c0016310 <Serial::~Serial()>:
c0016310:	83 ec 0c             	sub    esp,0xc
c0016313:	ba 08 9c 02 c0       	mov    edx,0xc0029c08
c0016318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001631c:	89 10                	mov    DWORD PTR [eax],edx
c001631e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016322:	83 ec 0c             	sub    esp,0xc
c0016325:	50                   	push   eax
c0016326:	e8 4d d7 ff ff       	call   c0013a78 <Device::~Device()>
c001632b:	83 c4 10             	add    esp,0x10
c001632e:	90                   	nop
c001632f:	83 c4 0c             	add    esp,0xc
c0016332:	c3                   	ret    
c0016333:	90                   	nop

c0016334 <Serial::~Serial()>:
c0016334:	83 ec 0c             	sub    esp,0xc
c0016337:	83 ec 0c             	sub    esp,0xc
c001633a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001633e:	e8 cd ff ff ff       	call   c0016310 <Serial::~Serial()>
c0016343:	83 c4 10             	add    esp,0x10
c0016346:	83 ec 08             	sub    esp,0x8
c0016349:	68 58 01 00 00       	push   0x158
c001634e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016352:	e8 48 c3 ff ff       	call   c001269f <operator delete(void*, unsigned long)>
c0016357:	83 c4 10             	add    esp,0x10
c001635a:	83 c4 0c             	add    esp,0xc
c001635d:	c3                   	ret    

c001635e <Timer::Timer(char const*)>:
c001635e:	83 ec 0c             	sub    esp,0xc
c0016361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016365:	83 ec 08             	sub    esp,0x8
c0016368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001636c:	50                   	push   eax
c001636d:	e8 24 da ff ff       	call   c0013d96 <Device::Device(char const*)>
c0016372:	83 c4 10             	add    esp,0x10
c0016375:	ba 4c 9c 02 c0       	mov    edx,0xc0029c4c
c001637a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001637e:	89 10                	mov    DWORD PTR [eax],edx
c0016380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016384:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c001638e:	90                   	nop
c001638f:	83 c4 0c             	add    esp,0xc
c0016392:	c3                   	ret    
c0016393:	90                   	nop

c0016394 <Timer::~Timer()>:
c0016394:	83 ec 0c             	sub    esp,0xc
c0016397:	ba 4c 9c 02 c0       	mov    edx,0xc0029c4c
c001639c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163a0:	89 10                	mov    DWORD PTR [eax],edx
c00163a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163a6:	83 ec 0c             	sub    esp,0xc
c00163a9:	50                   	push   eax
c00163aa:	e8 c9 d6 ff ff       	call   c0013a78 <Device::~Device()>
c00163af:	83 c4 10             	add    esp,0x10
c00163b2:	90                   	nop
c00163b3:	83 c4 0c             	add    esp,0xc
c00163b6:	c3                   	ret    
c00163b7:	90                   	nop

c00163b8 <Timer::~Timer()>:
c00163b8:	83 ec 0c             	sub    esp,0xc
c00163bb:	83 ec 0c             	sub    esp,0xc
c00163be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163c2:	e8 cd ff ff ff       	call   c0016394 <Timer::~Timer()>
c00163c7:	83 c4 10             	add    esp,0x10
c00163ca:	83 ec 08             	sub    esp,0x8
c00163cd:	68 5c 01 00 00       	push   0x15c
c00163d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163d6:	e8 c4 c2 ff ff       	call   c001269f <operator delete(void*, unsigned long)>
c00163db:	83 c4 10             	add    esp,0x10
c00163de:	83 c4 0c             	add    esp,0xc
c00163e1:	c3                   	ret    

c00163e2 <Timer::read()>:
c00163e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163e6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00163ec:	c3                   	ret    

c00163ed <timerHandler(unsigned long long)>:
c00163ed:	55                   	push   ebp
c00163ee:	57                   	push   edi
c00163ef:	56                   	push   esi
c00163f0:	53                   	push   ebx
c00163f1:	83 ec 0c             	sub    esp,0xc
c00163f4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00163f8:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00163fc:	01 35 70 d2 02 c0    	add    DWORD PTR ds:0xc002d270,esi
c0016402:	11 3d 74 d2 02 c0    	adc    DWORD PTR ds:0xc002d274,edi
c0016408:	80 3d ed cb 02 c0 00 	cmp    BYTE PTR ds:0xc002cbed,0x0
c001640f:	0f 84 07 01 00 00    	je     c001651c <timerHandler(unsigned long long)+0x12f>
c0016415:	e8 f3 6a 00 00       	call   c001cf0d <lockStuff()>
c001641a:	83 ec 0c             	sub    esp,0xc
c001641d:	68 1c e1 02 c0       	push   0xc002e11c
c0016422:	e8 97 11 01 00       	call   c00275be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016427:	c7 04 24 1c e1 02 c0 	mov    DWORD PTR [esp],0xc002e11c
c001642e:	89 c3                	mov    ebx,eax
c0016430:	e8 91 11 01 00       	call   c00275c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016435:	83 c4 10             	add    esp,0x10
c0016438:	84 c0                	test   al,al
c001643a:	74 60                	je     c001649c <timerHandler(unsigned long long)+0xaf>
c001643c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016442:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016445:	85 c0                	test   eax,eax
c0016447:	0f 85 91 00 00 00    	jne    c00164de <timerHandler(unsigned long long)+0xf1>
c001644d:	e9 be 00 00 00       	jmp    c0016510 <timerHandler(unsigned long long)+0x123>
c0016452:	83 ec 0c             	sub    esp,0xc
c0016455:	55                   	push   ebp
c0016456:	e8 a3 70 00 00       	call   c001d4fe <unblockTask(ThreadControlBlock*)>
c001645b:	83 c4 10             	add    esp,0x10
c001645e:	39 eb                	cmp    ebx,ebp
c0016460:	75 12                	jne    c0016474 <timerHandler(unsigned long long)+0x87>
c0016462:	83 ec 0c             	sub    esp,0xc
c0016465:	68 1c e1 02 c0       	push   0xc002e11c
c001646a:	e8 4f 11 01 00       	call   c00275be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001646f:	89 c3                	mov    ebx,eax
c0016471:	83 c4 10             	add    esp,0x10
c0016474:	83 ec 0c             	sub    esp,0xc
c0016477:	68 1c e1 02 c0       	push   0xc002e11c
c001647c:	e8 45 11 01 00       	call   c00275c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016481:	83 c4 10             	add    esp,0x10
c0016484:	84 c0                	test   al,al
c0016486:	75 b4                	jne    c001643c <timerHandler(unsigned long long)+0x4f>
c0016488:	83 ec 0c             	sub    esp,0xc
c001648b:	68 1c e1 02 c0       	push   0xc002e11c
c0016490:	e8 29 11 01 00       	call   c00275be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016495:	83 c4 10             	add    esp,0x10
c0016498:	39 d8                	cmp    eax,ebx
c001649a:	74 a0                	je     c001643c <timerHandler(unsigned long long)+0x4f>
c001649c:	83 ec 0c             	sub    esp,0xc
c001649f:	68 1c e1 02 c0       	push   0xc002e11c
c00164a4:	e8 15 11 01 00       	call   c00275be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00164a9:	c7 04 24 1c e1 02 c0 	mov    DWORD PTR [esp],0xc002e11c
c00164b0:	89 c5                	mov    ebp,eax
c00164b2:	e8 2b 11 01 00       	call   c00275e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00164b7:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c00164ba:	83 c4 10             	add    esp,0x10
c00164bd:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c00164c0:	39 15 70 d2 02 c0    	cmp    DWORD PTR ds:0xc002d270,edx
c00164c6:	a1 74 d2 02 c0       	mov    eax,ds:0xc002d274
c00164cb:	19 c8                	sbb    eax,ecx
c00164cd:	73 83                	jae    c0016452 <timerHandler(unsigned long long)+0x65>
c00164cf:	50                   	push   eax
c00164d0:	50                   	push   eax
c00164d1:	55                   	push   ebp
c00164d2:	68 1c e1 02 c0       	push   0xc002e11c
c00164d7:	e8 b4 11 01 00       	call   c0027690 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00164dc:	eb 93                	jmp    c0016471 <timerHandler(unsigned long long)+0x84>
c00164de:	80 3d ec cb 02 c0 00 	cmp    BYTE PTR ds:0xc002cbec,0x0
c00164e5:	74 29                	je     c0016510 <timerHandler(unsigned long long)+0x123>
c00164e7:	39 c6                	cmp    esi,eax
c00164e9:	bb 00 00 00 00       	mov    ebx,0x0
c00164ee:	19 df                	sbb    edi,ebx
c00164f0:	72 19                	jb     c001650b <timerHandler(unsigned long long)+0x11e>
c00164f2:	e8 ef 69 00 00       	call   c001cee6 <lockScheduler()>
c00164f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164fc:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00164ff:	e8 1e 6d 00 00       	call   c001d222 <schedule()>
c0016504:	e8 df 69 00 00       	call   c001cee8 <unlockScheduler()>
c0016509:	eb 05                	jmp    c0016510 <timerHandler(unsigned long long)+0x123>
c001650b:	29 f0                	sub    eax,esi
c001650d:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016510:	83 c4 0c             	add    esp,0xc
c0016513:	5b                   	pop    ebx
c0016514:	5e                   	pop    esi
c0016515:	5f                   	pop    edi
c0016516:	5d                   	pop    ebp
c0016517:	e9 8b 6d 00 00       	jmp    c001d2a7 <unlockStuff()>
c001651c:	83 c4 0c             	add    esp,0xc
c001651f:	5b                   	pop    ebx
c0016520:	5e                   	pop    esi
c0016521:	5f                   	pop    edi
c0016522:	5d                   	pop    ebp
c0016523:	c3                   	ret    

c0016524 <setupTimer(int)>:
c0016524:	57                   	push   edi
c0016525:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c001652a:	56                   	push   esi
c001652b:	53                   	push   ebx
c001652c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016530:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016536:	83 ec 0c             	sub    esp,0xc
c0016539:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001653f:	e8 4e d9 ff ff       	call   c0013e92 <Device::getName()>
c0016544:	83 c4 10             	add    esp,0x10
c0016547:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001654a:	0f 85 8d 00 00 00    	jne    c00165dd <setupTimer(int)+0xb9>
c0016550:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c0016555:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001655c:	74 7f                	je     c00165dd <setupTimer(int)+0xb9>
c001655e:	83 ec 0c             	sub    esp,0xc
c0016561:	68 5c 01 00 00       	push   0x15c
c0016566:	e8 6f 8f ff ff       	call   c000f4da <malloc>
c001656b:	89 04 24             	mov    DWORD PTR [esp],eax
c001656e:	89 c3                	mov    ebx,eax
c0016570:	e8 b9 eb 00 00       	call   c002512e <PIT::PIT()>
c0016575:	59                   	pop    ecx
c0016576:	5f                   	pop    edi
c0016577:	53                   	push   ebx
c0016578:	ff 35 e8 cb 02 c0    	push   DWORD PTR ds:0xc002cbe8
c001657e:	e8 23 d6 ff ff       	call   c0013ba6 <Device::addChild(Device*)>
c0016583:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016585:	6a 00                	push   0x0
c0016587:	6a 00                	push   0x0
c0016589:	56                   	push   esi
c001658a:	53                   	push   ebx
c001658b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001658e:	83 c4 14             	add    esp,0x14
c0016591:	68 60 01 00 00       	push   0x160
c0016596:	e8 3f 8f ff ff       	call   c000f4da <malloc>
c001659b:	89 04 24             	mov    DWORD PTR [esp],eax
c001659e:	89 c7                	mov    edi,eax
c00165a0:	e8 39 ea 00 00       	call   c0024fde <APICTimer::APICTimer()>
c00165a5:	6a 00                	push   0x0
c00165a7:	6a 00                	push   0x0
c00165a9:	56                   	push   esi
c00165aa:	57                   	push   edi
c00165ab:	e8 30 e9 00 00       	call   c0024ee0 <APICTimer::open(int, int, void*)>
c00165b0:	83 c4 20             	add    esp,0x20
c00165b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00165b5:	6a 00                	push   0x0
c00165b7:	6a 00                	push   0x0
c00165b9:	6a 00                	push   0x0
c00165bb:	53                   	push   ebx
c00165bc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00165bf:	58                   	pop    eax
c00165c0:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c00165c5:	5a                   	pop    edx
c00165c6:	57                   	push   edi
c00165c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00165cd:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00165d3:	e8 ce d5 ff ff       	call   c0013ba6 <Device::addChild(Device*)>
c00165d8:	83 c4 10             	add    esp,0x10
c00165db:	eb 33                	jmp    c0016610 <setupTimer(int)+0xec>
c00165dd:	83 ec 0c             	sub    esp,0xc
c00165e0:	68 5c 01 00 00       	push   0x15c
c00165e5:	e8 f0 8e ff ff       	call   c000f4da <malloc>
c00165ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00165ed:	89 c3                	mov    ebx,eax
c00165ef:	e8 3a eb 00 00       	call   c002512e <PIT::PIT()>
c00165f4:	58                   	pop    eax
c00165f5:	5a                   	pop    edx
c00165f6:	53                   	push   ebx
c00165f7:	ff 35 e8 cb 02 c0    	push   DWORD PTR ds:0xc002cbe8
c00165fd:	e8 a4 d5 ff ff       	call   c0013ba6 <Device::addChild(Device*)>
c0016602:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016604:	6a 00                	push   0x0
c0016606:	6a 00                	push   0x0
c0016608:	56                   	push   esi
c0016609:	53                   	push   ebx
c001660a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001660d:	83 c4 20             	add    esp,0x20
c0016610:	89 d8                	mov    eax,ebx
c0016612:	5b                   	pop    ebx
c0016613:	5e                   	pop    esi
c0016614:	5f                   	pop    edi
c0016615:	c3                   	ret    

c0016616 <VCache::VCache(PhysicalDisk*)>:
c0016616:	53                   	push   ebx
c0016617:	83 ec 18             	sub    esp,0x18
c001661a:	ba 7c 9c 02 c0       	mov    edx,0xc0029c7c
c001661f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016623:	89 10                	mov    DWORD PTR [eax],edx
c0016625:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016629:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016630:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016634:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001663b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001663f:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016646:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001664d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016651:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016658:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001665f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016663:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001666a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001666e:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016672:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001667a:	83 ec 0c             	sub    esp,0xc
c001667d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016681:	e8 54 8e ff ff       	call   c000f4da <malloc>
c0016686:	83 c4 10             	add    esp,0x10
c0016689:	89 c3                	mov    ebx,eax
c001668b:	83 ec 0c             	sub    esp,0xc
c001668e:	53                   	push   ebx
c001668f:	e8 72 69 00 00       	call   c001d006 <Mutex::Mutex()>
c0016694:	83 c4 10             	add    esp,0x10
c0016697:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001669b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001669e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166a2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00166a6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00166a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166ad:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00166b4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00166b8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00166be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166c2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00166c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00166c9:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00166cf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00166d5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00166d9:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00166dc:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00166df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166e3:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00166e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00166eb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00166f1:	c1 e0 06             	shl    eax,0x6
c00166f4:	83 ec 0c             	sub    esp,0xc
c00166f7:	50                   	push   eax
c00166f8:	e8 dd 8d ff ff       	call   c000f4da <malloc>
c00166fd:	83 c4 10             	add    esp,0x10
c0016700:	89 c2                	mov    edx,eax
c0016702:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016706:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016709:	90                   	nop
c001670a:	83 c4 18             	add    esp,0x18
c001670d:	5b                   	pop    ebx
c001670e:	c3                   	ret    
c001670f:	90                   	nop

c0016710 <VCache::writeWriteBuffer()>:
c0016710:	53                   	push   ebx
c0016711:	83 ec 14             	sub    esp,0x14
c0016714:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016718:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001671b:	8b 10                	mov    edx,DWORD PTR [eax]
c001671d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016720:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016723:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016726:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016729:	50                   	push   eax
c001672a:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001672d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016734:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001673b:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001673f:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016746:	83 c4 28             	add    esp,0x28
c0016749:	5b                   	pop    ebx
c001674a:	c3                   	ret    
c001674b:	90                   	nop

c001674c <VCache::~VCache()>:
c001674c:	83 ec 0c             	sub    esp,0xc
c001674f:	ba 7c 9c 02 c0       	mov    edx,0xc0029c7c
c0016754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016758:	89 10                	mov    DWORD PTR [eax],edx
c001675a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001675e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016761:	84 c0                	test   al,al
c0016763:	74 0f                	je     c0016774 <VCache::~VCache()+0x28>
c0016765:	83 ec 0c             	sub    esp,0xc
c0016768:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001676c:	e8 9f ff ff ff       	call   c0016710 <VCache::writeWriteBuffer()>
c0016771:	83 c4 10             	add    esp,0x10
c0016774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016778:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001677b:	83 ec 0c             	sub    esp,0xc
c001677e:	50                   	push   eax
c001677f:	e8 66 8d ff ff       	call   c000f4ea <free>
c0016784:	83 c4 10             	add    esp,0x10
c0016787:	90                   	nop
c0016788:	83 c4 0c             	add    esp,0xc
c001678b:	c3                   	ret    

c001678c <VCache::~VCache()>:
c001678c:	83 ec 0c             	sub    esp,0xc
c001678f:	83 ec 0c             	sub    esp,0xc
c0016792:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016796:	e8 b1 ff ff ff       	call   c001674c <VCache::~VCache()>
c001679b:	83 c4 10             	add    esp,0x10
c001679e:	83 ec 08             	sub    esp,0x8
c00167a1:	6a 30                	push   0x30
c00167a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167a7:	e8 f3 be ff ff       	call   c001269f <operator delete(void*, unsigned long)>
c00167ac:	83 c4 10             	add    esp,0x10
c00167af:	83 c4 0c             	add    esp,0xc
c00167b2:	c3                   	ret    
c00167b3:	90                   	nop

c00167b4 <VCache::write(unsigned long long, int, void*)>:
c00167b4:	55                   	push   ebp
c00167b5:	57                   	push   edi
c00167b6:	56                   	push   esi
c00167b7:	53                   	push   ebx
c00167b8:	83 ec 28             	sub    esp,0x28
c00167bb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00167bf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00167c3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00167c7:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00167cb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00167ce:	e8 95 6c 00 00       	call   c001d468 <Semaphore::acquire()>
c00167d3:	83 c4 10             	add    esp,0x10
c00167d6:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00167da:	74 66                	je     c0016842 <VCache::write(unsigned long long, int, void*)+0x8e>
c00167dc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00167df:	99                   	cdq    
c00167e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00167e4:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00167e7:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00167ea:	89 c1                	mov    ecx,eax
c00167ec:	89 d0                	mov    eax,edx
c00167ee:	31 f1                	xor    ecx,esi
c00167f0:	31 f8                	xor    eax,edi
c00167f2:	89 ca                	mov    edx,ecx
c00167f4:	09 c2                	or     edx,eax
c00167f6:	75 3e                	jne    c0016836 <VCache::write(unsigned long long, int, void*)+0x82>
c00167f8:	83 fd 01             	cmp    ebp,0x1
c00167fb:	75 39                	jne    c0016836 <VCache::write(unsigned long long, int, void*)+0x82>
c00167fd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016800:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016806:	51                   	push   ecx
c0016807:	50                   	push   eax
c0016808:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001680c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016810:	0f af c8             	imul   ecx,eax
c0016813:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0016816:	51                   	push   ecx
c0016817:	e8 39 9e fe ff       	call   c0000655 <memcpy>
c001681c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001681f:	83 c4 10             	add    esp,0x10
c0016822:	40                   	inc    eax
c0016823:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016826:	83 f8 40             	cmp    eax,0x40
c0016829:	75 57                	jne    c0016882 <VCache::write(unsigned long long, int, void*)+0xce>
c001682b:	83 ec 0c             	sub    esp,0xc
c001682e:	53                   	push   ebx
c001682f:	e8 dc fe ff ff       	call   c0016710 <VCache::writeWriteBuffer()>
c0016834:	eb 34                	jmp    c001686a <VCache::write(unsigned long long, int, void*)+0xb6>
c0016836:	83 ec 0c             	sub    esp,0xc
c0016839:	53                   	push   ebx
c001683a:	e8 d1 fe ff ff       	call   c0016710 <VCache::writeWriteBuffer()>
c001683f:	83 c4 10             	add    esp,0x10
c0016842:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016845:	83 fd 3f             	cmp    ebp,0x3f
c0016848:	7f 25                	jg     c001686f <VCache::write(unsigned long long, int, void*)+0xbb>
c001684a:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001684d:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016850:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016853:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016857:	52                   	push   edx
c0016858:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001685e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016862:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016865:	e8 eb 9d fe ff       	call   c0000655 <memcpy>
c001686a:	83 c4 10             	add    esp,0x10
c001686d:	eb 13                	jmp    c0016882 <VCache::write(unsigned long long, int, void*)+0xce>
c001686f:	83 ec 0c             	sub    esp,0xc
c0016872:	8b 10                	mov    edx,DWORD PTR [eax]
c0016874:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016878:	55                   	push   ebp
c0016879:	57                   	push   edi
c001687a:	56                   	push   esi
c001687b:	50                   	push   eax
c001687c:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001687f:	83 c4 20             	add    esp,0x20
c0016882:	83 ec 0c             	sub    esp,0xc
c0016885:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016888:	e8 89 71 00 00       	call   c001da16 <Semaphore::release()>
c001688d:	83 c4 2c             	add    esp,0x2c
c0016890:	31 c0                	xor    eax,eax
c0016892:	5b                   	pop    ebx
c0016893:	5e                   	pop    esi
c0016894:	5f                   	pop    edi
c0016895:	5d                   	pop    ebp
c0016896:	c3                   	ret    
c0016897:	90                   	nop

c0016898 <VCache::read(unsigned long long, int, void*)>:
c0016898:	57                   	push   edi
c0016899:	56                   	push   esi
c001689a:	53                   	push   ebx
c001689b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001689f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00168a3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00168a7:	83 ec 0c             	sub    esp,0xc
c00168aa:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00168ad:	e8 b6 6b 00 00       	call   c001d468 <Semaphore::acquire()>
c00168b2:	83 c4 10             	add    esp,0x10
c00168b5:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00168b9:	74 0c                	je     c00168c7 <VCache::read(unsigned long long, int, void*)+0x2f>
c00168bb:	83 ec 0c             	sub    esp,0xc
c00168be:	53                   	push   ebx
c00168bf:	e8 4c fe ff ff       	call   c0016710 <VCache::writeWriteBuffer()>
c00168c4:	83 c4 10             	add    esp,0x10
c00168c7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00168ca:	83 ec 0c             	sub    esp,0xc
c00168cd:	8b 10                	mov    edx,DWORD PTR [eax]
c00168cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00168d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00168d7:	57                   	push   edi
c00168d8:	56                   	push   esi
c00168d9:	50                   	push   eax
c00168da:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00168dd:	83 c4 14             	add    esp,0x14
c00168e0:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00168e3:	e8 2e 71 00 00       	call   c001da16 <Semaphore::release()>
c00168e8:	83 c4 10             	add    esp,0x10
c00168eb:	31 c0                	xor    eax,eax
c00168ed:	5b                   	pop    ebx
c00168ee:	5e                   	pop    esi
c00168ef:	5f                   	pop    edi
c00168f0:	c3                   	ret    
c00168f1:	90                   	nop

c00168f2 <Video::putrect(int, int, int, int, unsigned int)>:
c00168f2:	55                   	push   ebp
c00168f3:	57                   	push   edi
c00168f4:	56                   	push   esi
c00168f5:	53                   	push   ebx
c00168f6:	83 ec 1c             	sub    esp,0x1c
c00168f9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00168fd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016901:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016905:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016909:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001690d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016911:	01 df                	add    edi,ebx
c0016913:	39 fb                	cmp    ebx,edi
c0016915:	7d 1f                	jge    c0016936 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016917:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001691b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001691f:	7d 12                	jge    c0016933 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016921:	8b 16                	mov    edx,DWORD PTR [esi]
c0016923:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016927:	53                   	push   ebx
c0016928:	55                   	push   ebp
c0016929:	45                   	inc    ebp
c001692a:	56                   	push   esi
c001692b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001692e:	83 c4 10             	add    esp,0x10
c0016931:	eb e8                	jmp    c001691b <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016933:	43                   	inc    ebx
c0016934:	eb dd                	jmp    c0016913 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016936:	83 c4 1c             	add    esp,0x1c
c0016939:	5b                   	pop    ebx
c001693a:	5e                   	pop    esi
c001693b:	5f                   	pop    edi
c001693c:	5d                   	pop    ebp
c001693d:	c3                   	ret    

c001693e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001693e:	55                   	push   ebp
c001693f:	57                   	push   edi
c0016940:	31 ff                	xor    edi,edi
c0016942:	56                   	push   esi
c0016943:	53                   	push   ebx
c0016944:	83 ec 1c             	sub    esp,0x1c
c0016947:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001694b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001694f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016956:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001695b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001695f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016963:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016967:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001696a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001696e:	01 f9                	add    ecx,edi
c0016970:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016974:	7d 2f                	jge    c00169a5 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016976:	31 f6                	xor    esi,esi
c0016978:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001697c:	01 f2                	add    edx,esi
c001697e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016982:	7d 1a                	jge    c001699e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016984:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016987:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001698a:	46                   	inc    esi
c001698b:	51                   	push   ecx
c001698c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016990:	52                   	push   edx
c0016991:	55                   	push   ebp
c0016992:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016995:	83 c4 10             	add    esp,0x10
c0016998:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001699c:	eb da                	jmp    c0016978 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001699e:	47                   	inc    edi
c001699f:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00169a3:	eb c5                	jmp    c001696a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00169a5:	83 c4 1c             	add    esp,0x1c
c00169a8:	5b                   	pop    ebx
c00169a9:	5e                   	pop    esi
c00169aa:	5f                   	pop    edi
c00169ab:	5d                   	pop    ebp
c00169ac:	c3                   	ret    
c00169ad:	90                   	nop

c00169ae <Video::blit(unsigned int*, int, int, int, int)>:
c00169ae:	55                   	push   ebp
c00169af:	57                   	push   edi
c00169b0:	56                   	push   esi
c00169b1:	53                   	push   ebx
c00169b2:	83 ec 1c             	sub    esp,0x1c
c00169b5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00169b9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00169bd:	85 c0                	test   eax,eax
c00169bf:	79 02                	jns    c00169c3 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00169c1:	31 c0                	xor    eax,eax
c00169c3:	c1 e0 02             	shl    eax,0x2
c00169c6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00169ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00169ce:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00169d2:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00169d6:	39 d8                	cmp    eax,ebx
c00169d8:	7e 49                	jle    c0016a23 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00169da:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00169e0:	7c 41                	jl     c0016a23 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00169e2:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00169e6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00169ea:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00169ee:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00169f2:	39 f9                	cmp    ecx,edi
c00169f4:	7e 22                	jle    c0016a18 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00169f6:	83 c5 04             	add    ebp,0x4
c00169f9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00169ff:	7c 14                	jl     c0016a15 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016a01:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016a03:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016a06:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016a0a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016a0e:	56                   	push   esi
c0016a0f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016a12:	83 c4 10             	add    esp,0x10
c0016a15:	47                   	inc    edi
c0016a16:	eb d2                	jmp    c00169ea <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016a18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a1c:	43                   	inc    ebx
c0016a1d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016a21:	eb ab                	jmp    c00169ce <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016a23:	83 c4 1c             	add    esp,0x1c
c0016a26:	5b                   	pop    ebx
c0016a27:	5e                   	pop    esi
c0016a28:	5f                   	pop    edi
c0016a29:	5d                   	pop    ebp
c0016a2a:	c3                   	ret    
c0016a2b:	90                   	nop

c0016a2c <Video::clearScreen(unsigned int)>:
c0016a2c:	57                   	push   edi
c0016a2d:	56                   	push   esi
c0016a2e:	53                   	push   ebx
c0016a2f:	31 db                	xor    ebx,ebx
c0016a31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016a35:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016a3b:	7e 1f                	jle    c0016a5c <Video::clearScreen(unsigned int)+0x30>
c0016a3d:	31 ff                	xor    edi,edi
c0016a3f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016a45:	7e 12                	jle    c0016a59 <Video::clearScreen(unsigned int)+0x2d>
c0016a47:	8b 06                	mov    eax,DWORD PTR [esi]
c0016a49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016a4d:	53                   	push   ebx
c0016a4e:	57                   	push   edi
c0016a4f:	47                   	inc    edi
c0016a50:	56                   	push   esi
c0016a51:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016a54:	83 c4 10             	add    esp,0x10
c0016a57:	eb e6                	jmp    c0016a3f <Video::clearScreen(unsigned int)+0x13>
c0016a59:	43                   	inc    ebx
c0016a5a:	eb d9                	jmp    c0016a35 <Video::clearScreen(unsigned int)+0x9>
c0016a5c:	5b                   	pop    ebx
c0016a5d:	5e                   	pop    esi
c0016a5e:	5f                   	pop    edi
c0016a5f:	c3                   	ret    

c0016a60 <Video::putpixel(int, int, unsigned int)>:
c0016a60:	c7 44 24 04 84 9c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0029c84
c0016a68:	e9 64 2e 00 00       	jmp    c00198d1 <Krnl::panic(char const*)>
c0016a6d:	90                   	nop

c0016a6e <Video::Video(char const*)>:
c0016a6e:	83 ec 0c             	sub    esp,0xc
c0016a71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a75:	83 ec 08             	sub    esp,0x8
c0016a78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a7c:	50                   	push   eax
c0016a7d:	e8 14 d3 ff ff       	call   c0013d96 <Device::Device(char const*)>
c0016a82:	83 c4 10             	add    esp,0x10
c0016a85:	ba 08 9d 02 c0       	mov    edx,0xc0029d08
c0016a8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a8e:	89 10                	mov    DWORD PTR [eax],edx
c0016a90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a94:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016a9e:	90                   	nop
c0016a9f:	83 c4 0c             	add    esp,0xc
c0016aa2:	c3                   	ret    
c0016aa3:	90                   	nop

c0016aa4 <Video::~Video()>:
c0016aa4:	83 ec 0c             	sub    esp,0xc
c0016aa7:	ba 08 9d 02 c0       	mov    edx,0xc0029d08
c0016aac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ab0:	89 10                	mov    DWORD PTR [eax],edx
c0016ab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ab6:	83 ec 0c             	sub    esp,0xc
c0016ab9:	50                   	push   eax
c0016aba:	e8 b9 cf ff ff       	call   c0013a78 <Device::~Device()>
c0016abf:	83 c4 10             	add    esp,0x10
c0016ac2:	90                   	nop
c0016ac3:	83 c4 0c             	add    esp,0xc
c0016ac6:	c3                   	ret    
c0016ac7:	90                   	nop

c0016ac8 <Video::~Video()>:
c0016ac8:	83 ec 0c             	sub    esp,0xc
c0016acb:	83 ec 0c             	sub    esp,0xc
c0016ace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ad2:	e8 cd ff ff ff       	call   c0016aa4 <Video::~Video()>
c0016ad7:	83 c4 10             	add    esp,0x10
c0016ada:	83 ec 08             	sub    esp,0x8
c0016add:	68 64 01 00 00       	push   0x164
c0016ae2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ae6:	e8 b4 bb ff ff       	call   c001269f <operator delete(void*, unsigned long)>
c0016aeb:	83 c4 10             	add    esp,0x10
c0016aee:	83 c4 0c             	add    esp,0xc
c0016af1:	c3                   	ret    

c0016af2 <Video::isMonochrome()>:
c0016af2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016af6:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016afc:	c3                   	ret    
c0016afd:	90                   	nop

c0016afe <Video::getWidth()>:
c0016afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b02:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016b08:	c3                   	ret    
c0016b09:	90                   	nop

c0016b0a <Video::getHeight()>:
c0016b0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b0e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016b14:	c3                   	ret    
c0016b15:	90                   	nop

c0016b16 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016b16:	55                   	push   ebp
c0016b17:	57                   	push   edi
c0016b18:	56                   	push   esi
c0016b19:	53                   	push   ebx
c0016b1a:	83 ec 2c             	sub    esp,0x2c
c0016b1d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016b21:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016b25:	83 f8 01             	cmp    eax,0x1
c0016b28:	19 c9                	sbb    ecx,ecx
c0016b2a:	31 db                	xor    ebx,ebx
c0016b2c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016b30:	89 cd                	mov    ebp,ecx
c0016b32:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016b3a:	f7 d5                	not    ebp
c0016b3c:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016b42:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016b46:	01 d8                	add    eax,ebx
c0016b48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b4c:	56                   	push   esi
c0016b4d:	e8 b8 ff ff ff       	call   c0016b0a <Video::getHeight()>
c0016b52:	59                   	pop    ecx
c0016b53:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016b57:	7e 70                	jle    c0016bc9 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016b59:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016b5d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016b61:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016b64:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016b68:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016b6c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016b73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b77:	89 f8                	mov    eax,edi
c0016b79:	83 c0 20             	add    eax,0x20
c0016b7c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016b80:	56                   	push   esi
c0016b81:	e8 78 ff ff ff       	call   c0016afe <Video::getWidth()>
c0016b86:	5a                   	pop    edx
c0016b87:	39 c7                	cmp    edi,eax
c0016b89:	7d 34                	jge    c0016bbf <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016b8b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016b90:	74 05                	je     c0016b97 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016b92:	8b 06                	mov    eax,DWORD PTR [esi]
c0016b94:	55                   	push   ebp
c0016b95:	eb 0d                	jmp    c0016ba4 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016b97:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016b9c:	74 12                	je     c0016bb0 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016b9e:	8b 06                	mov    eax,DWORD PTR [esi]
c0016ba0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ba4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016ba8:	57                   	push   edi
c0016ba9:	56                   	push   esi
c0016baa:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016bad:	83 c4 10             	add    esp,0x10
c0016bb0:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016bb4:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016bb8:	47                   	inc    edi
c0016bb9:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016bbd:	75 c1                	jne    c0016b80 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016bbf:	43                   	inc    ebx
c0016bc0:	83 fb 20             	cmp    ebx,0x20
c0016bc3:	0f 85 79 ff ff ff    	jne    c0016b42 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016bc9:	83 c4 2c             	add    esp,0x2c
c0016bcc:	5b                   	pop    ebx
c0016bcd:	5e                   	pop    esi
c0016bce:	5f                   	pop    edi
c0016bcf:	5d                   	pop    ebp
c0016bd0:	c3                   	ret    
c0016bd1:	90                   	nop

c0016bd2 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016bd2:	55                   	push   ebp
c0016bd3:	57                   	push   edi
c0016bd4:	56                   	push   esi
c0016bd5:	53                   	push   ebx
c0016bd6:	83 ec 28             	sub    esp,0x28
c0016bd9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016bdd:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016be1:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0016be5:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016be9:	c1 e7 08             	shl    edi,0x8
c0016bec:	01 c7                	add    edi,eax
c0016bee:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016bf2:	c1 e0 08             	shl    eax,0x8
c0016bf5:	01 d0                	add    eax,edx
c0016bf7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016bfb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016bff:	0f af c7             	imul   eax,edi
c0016c02:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016c09:	50                   	push   eax
c0016c0a:	e8 cb 88 ff ff       	call   c000f4da <malloc>
c0016c0f:	83 c4 10             	add    esp,0x10
c0016c12:	89 c5                	mov    ebp,eax
c0016c14:	85 c0                	test   eax,eax
c0016c16:	75 15                	jne    c0016c2d <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0016c18:	83 ec 0c             	sub    esp,0xc
c0016c1b:	68 a5 9c 02 c0       	push   0xc0029ca5
c0016c20:	e8 5a bb ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0016c25:	83 c4 10             	add    esp,0x10
c0016c28:	e9 1c 01 00 00       	jmp    c0016d49 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016c2d:	be 12 00 00 00       	mov    esi,0x12
c0016c32:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016c36:	74 11                	je     c0016c49 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0016c38:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0016c3c:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0016c40:	c1 fe 03             	sar    esi,0x3
c0016c43:	0f af f0             	imul   esi,eax
c0016c46:	83 c6 12             	add    esi,0x12
c0016c49:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016c4d:	74 04                	je     c0016c53 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0016c4f:	85 ff                	test   edi,edi
c0016c51:	75 12                	jne    c0016c65 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0016c53:	83 ec 0c             	sub    esp,0xc
c0016c56:	68 bc 9c 02 c0       	push   0xc0029cbc
c0016c5b:	e8 1f bb ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0016c60:	e9 ce 00 00 00       	jmp    c0016d33 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0016c65:	52                   	push   edx
c0016c66:	52                   	push   edx
c0016c67:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0016c6b:	50                   	push   eax
c0016c6c:	68 d1 9c 02 c0       	push   0xc0029cd1
c0016c71:	e8 09 bb ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0016c76:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0016c7a:	83 c4 10             	add    esp,0x10
c0016c7d:	80 fa 02             	cmp    dl,0x2
c0016c80:	0f 85 98 00 00 00    	jne    c0016d1e <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0016c86:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016c8b:	75 10                	jne    c0016c9d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016c8d:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016c91:	75 0a                	jne    c0016c9d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016c93:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016c96:	83 e8 18             	sub    eax,0x18
c0016c99:	a8 f7                	test   al,0xf7
c0016c9b:	74 0a                	je     c0016ca7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0016c9d:	83 ec 0c             	sub    esp,0xc
c0016ca0:	68 de 9c 02 c0       	push   0xc0029cde
c0016ca5:	eb 7f                	jmp    c0016d26 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0016ca7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016caf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016cb7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016cbb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016cc3:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016cc7:	75 0c                	jne    c0016cd5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0016cc9:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0016cce:	c1 e0 18             	shl    eax,0x18
c0016cd1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016cd5:	41                   	inc    ecx
c0016cd6:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0016cdb:	c1 e2 10             	shl    edx,0x10
c0016cde:	89 d0                	mov    eax,edx
c0016ce0:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0016ce5:	c1 e2 08             	shl    edx,0x8
c0016ce8:	09 c2                	or     edx,eax
c0016cea:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0016cee:	09 c2                	or     edx,eax
c0016cf0:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0016cf4:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0016cf8:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016cfc:	c1 f8 03             	sar    eax,0x3
c0016cff:	01 c6                	add    esi,eax
c0016d01:	89 c8                	mov    eax,ecx
c0016d03:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016d07:	39 c7                	cmp    edi,eax
c0016d09:	7f b0                	jg     c0016cbb <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016d0b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016d0f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016d13:	39 14 24             	cmp    DWORD PTR [esp],edx
c0016d16:	7e 22                	jle    c0016d3a <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0016d18:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0016d1c:	eb 99                	jmp    c0016cb7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0016d1e:	50                   	push   eax
c0016d1f:	50                   	push   eax
c0016d20:	52                   	push   edx
c0016d21:	68 ec 9c 02 c0       	push   0xc0029cec
c0016d26:	e8 54 ba ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0016d2b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016d2e:	e8 b7 87 ff ff       	call   c000f4ea <free>
c0016d33:	83 c4 10             	add    esp,0x10
c0016d36:	31 ed                	xor    ebp,ebp
c0016d38:	eb 0f                	jmp    c0016d49 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016d3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016d3e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016d41:	89 38                	mov    DWORD PTR [eax],edi
c0016d43:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016d47:	89 08                	mov    DWORD PTR [eax],ecx
c0016d49:	83 c4 1c             	add    esp,0x1c
c0016d4c:	89 e8                	mov    eax,ebp
c0016d4e:	5b                   	pop    ebx
c0016d4f:	5e                   	pop    esi
c0016d50:	5f                   	pop    edi
c0016d51:	5d                   	pop    ebp
c0016d52:	c3                   	ret    
c0016d53:	90                   	nop

c0016d54 <Video::putTGA(int, int, unsigned char*, int)>:
c0016d54:	55                   	push   ebp
c0016d55:	57                   	push   edi
c0016d56:	56                   	push   esi
c0016d57:	53                   	push   ebx
c0016d58:	83 ec 28             	sub    esp,0x28
c0016d5b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016d5f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016d63:	50                   	push   eax
c0016d64:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016d68:	50                   	push   eax
c0016d69:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016d6d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016d71:	56                   	push   esi
c0016d72:	e8 5b fe ff ff       	call   c0016bd2 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0016d77:	83 c4 20             	add    esp,0x20
c0016d7a:	85 c0                	test   eax,eax
c0016d7c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016d80:	74 35                	je     c0016db7 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016d82:	89 c7                	mov    edi,eax
c0016d84:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016d88:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016d8c:	39 d8                	cmp    eax,ebx
c0016d8e:	7e 27                	jle    c0016db7 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016d90:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016d94:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016d98:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016d9c:	39 e8                	cmp    eax,ebp
c0016d9e:	7e 14                	jle    c0016db4 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0016da0:	8b 06                	mov    eax,DWORD PTR [esi]
c0016da2:	83 c7 04             	add    edi,0x4
c0016da5:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0016da8:	53                   	push   ebx
c0016da9:	55                   	push   ebp
c0016daa:	45                   	inc    ebp
c0016dab:	56                   	push   esi
c0016dac:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016daf:	83 c4 10             	add    esp,0x10
c0016db2:	eb e0                	jmp    c0016d94 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0016db4:	43                   	inc    ebx
c0016db5:	eb cd                	jmp    c0016d84 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0016db7:	83 c4 1c             	add    esp,0x1c
c0016dba:	5b                   	pop    ebx
c0016dbb:	5e                   	pop    esi
c0016dbc:	5f                   	pop    edi
c0016dbd:	5d                   	pop    ebp
c0016dbe:	c3                   	ret    
c0016dbf:	90                   	nop

c0016dc0 <ACPI::close(int, int, void*)>:
c0016dc0:	83 ec 1c             	sub    esp,0x1c
c0016dc3:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0016dcb:	74 0a                	je     c0016dd7 <ACPI::close(int, int, void*)+0x17>
c0016dcd:	b8 00 00 00 00       	mov    eax,0x0
c0016dd2:	e9 9a 00 00 00       	jmp    c0016e71 <ACPI::close(int, int, void*)+0xb1>
c0016dd7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016ddc:	75 37                	jne    c0016e15 <ACPI::close(int, int, void*)+0x55>
c0016dde:	83 ec 0c             	sub    esp,0xc
c0016de1:	68 48 9d 02 c0       	push   0xc0029d48
c0016de6:	e8 94 b9 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0016deb:	83 c4 10             	add    esp,0x10
c0016dee:	a1 88 d2 02 c0       	mov    eax,ds:0xc002d288
c0016df3:	85 c0                	test   eax,eax
c0016df5:	74 07                	je     c0016dfe <ACPI::close(int, int, void*)+0x3e>
c0016df7:	a1 88 d2 02 c0       	mov    eax,ds:0xc002d288
c0016dfc:	ff d0                	call   eax
c0016dfe:	83 ec 0c             	sub    esp,0xc
c0016e01:	68 1c 9e 02 c0       	push   0xc0029e1c
c0016e06:	e8 c6 2a 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c0016e0b:	83 c4 10             	add    esp,0x10
c0016e0e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016e13:	eb 5c                	jmp    c0016e71 <ACPI::close(int, int, void*)+0xb1>
c0016e15:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0016e1a:	75 50                	jne    c0016e6c <ACPI::close(int, int, void*)+0xac>
c0016e1c:	a1 84 d2 02 c0       	mov    eax,ds:0xc002d284
c0016e21:	85 c0                	test   eax,eax
c0016e23:	74 07                	je     c0016e2c <ACPI::close(int, int, void*)+0x6c>
c0016e25:	a1 84 d2 02 c0       	mov    eax,ds:0xc002d284
c0016e2a:	ff d0                	call   eax
c0016e2c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0016e31:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016e36:	83 e0 02             	and    eax,0x2
c0016e39:	74 1c                	je     c0016e57 <ACPI::close(int, int, void*)+0x97>
c0016e3b:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0016e42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e46:	89 c2                	mov    edx,eax
c0016e48:	ec                   	in     al,dx
c0016e49:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0016e4d:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0016e51:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016e55:	eb da                	jmp    c0016e31 <ACPI::close(int, int, void*)+0x71>
c0016e57:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0016e5e:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0016e63:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0016e67:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016e6b:	ee                   	out    dx,al
c0016e6c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016e71:	83 c4 1c             	add    esp,0x1c
c0016e74:	c3                   	ret    

c0016e75 <findRSDP()>:
c0016e75:	83 ec 1c             	sub    esp,0x1c
c0016e78:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c0016e7d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016e83:	83 e0 04             	and    eax,0x4
c0016e86:	84 c0                	test   al,al
c0016e88:	75 07                	jne    c0016e91 <findRSDP()+0x1c>
c0016e8a:	b8 00 00 00 00       	mov    eax,0x0
c0016e8f:	eb 6a                	jmp    c0016efb <findRSDP()+0x86>
c0016e91:	a1 30 cc 02 c0       	mov    eax,ds:0xc002cc30
c0016e96:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016e9b:	7f 1b                	jg     c0016eb8 <findRSDP()+0x43>
c0016e9d:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c0016ea2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016ea8:	83 e2 fb             	and    edx,0xfffffffb
c0016eab:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016eb1:	b8 00 00 00 00       	mov    eax,0x0
c0016eb6:	eb 43                	jmp    c0016efb <findRSDP()+0x86>
c0016eb8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0016ec0:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0016ec8:	77 2c                	ja     c0016ef6 <findRSDP()+0x81>
c0016eca:	83 ec 04             	sub    esp,0x4
c0016ecd:	6a 08                	push   0x8
c0016ecf:	68 55 9d 02 c0       	push   0xc0029d55
c0016ed4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ed8:	e8 15 97 fe ff       	call   c00005f2 <memcmp>
c0016edd:	83 c4 10             	add    esp,0x10
c0016ee0:	85 c0                	test   eax,eax
c0016ee2:	0f 94 c0             	sete   al
c0016ee5:	84 c0                	test   al,al
c0016ee7:	74 06                	je     c0016eef <findRSDP()+0x7a>
c0016ee9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016eed:	eb 0c                	jmp    c0016efb <findRSDP()+0x86>
c0016eef:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0016ef4:	eb ca                	jmp    c0016ec0 <findRSDP()+0x4b>
c0016ef6:	b8 00 00 00 00       	mov    eax,0x0
c0016efb:	83 c4 1c             	add    esp,0x1c
c0016efe:	c3                   	ret    

c0016eff <loadACPITables(unsigned char*)>:
c0016eff:	56                   	push   esi
c0016f00:	53                   	push   ebx
c0016f01:	83 ec 44             	sub    esp,0x44
c0016f04:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c0016f09:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016f0f:	83 e0 04             	and    eax,0x4
c0016f12:	84 c0                	test   al,al
c0016f14:	0f 84 05 02 00 00    	je     c001711f <loadACPITables(unsigned char*)+0x220>
c0016f1a:	a0 a0 d4 02 c0       	mov    al,ds:0xc002d4a0
c0016f1f:	84 c0                	test   al,al
c0016f21:	74 75                	je     c0016f98 <loadACPITables(unsigned char*)+0x99>
c0016f23:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f27:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016f2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f2f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016f32:	83 e8 24             	sub    eax,0x24
c0016f35:	c1 e8 03             	shr    eax,0x3
c0016f38:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016f3c:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0016f44:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f48:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0016f4c:	0f 8d b2 00 00 00    	jge    c0017004 <loadACPITables(unsigned char*)+0x105>
c0016f52:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f56:	83 c0 24             	add    eax,0x24
c0016f59:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016f5d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f61:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016f65:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f69:	c1 e0 03             	shl    eax,0x3
c0016f6c:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0016f70:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016f74:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0016f77:	8b 00                	mov    eax,DWORD PTR [eax]
c0016f79:	89 c1                	mov    ecx,eax
c0016f7b:	a1 8c d2 02 c0       	mov    eax,ds:0xc002d28c
c0016f80:	8d 50 01             	lea    edx,[eax+0x1]
c0016f83:	89 15 8c d2 02 c0    	mov    DWORD PTR ds:0xc002d28c,edx
c0016f89:	89 ca                	mov    edx,ecx
c0016f8b:	89 14 c5 a4 d2 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2d5c],edx
c0016f92:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0016f96:	eb ac                	jmp    c0016f44 <loadACPITables(unsigned char*)+0x45>
c0016f98:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f9c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016fa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016fa7:	83 e8 24             	sub    eax,0x24
c0016faa:	c1 e8 02             	shr    eax,0x2
c0016fad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016fb1:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0016fb9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016fbd:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0016fc1:	7d 41                	jge    c0017004 <loadACPITables(unsigned char*)+0x105>
c0016fc3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016fc7:	83 c0 24             	add    eax,0x24
c0016fca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016fce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016fd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016fd6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016fda:	c1 e0 02             	shl    eax,0x2
c0016fdd:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0016fe1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016fe5:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016fe7:	a1 8c d2 02 c0       	mov    eax,ds:0xc002d28c
c0016fec:	8d 50 01             	lea    edx,[eax+0x1]
c0016fef:	89 15 8c d2 02 c0    	mov    DWORD PTR ds:0xc002d28c,edx
c0016ff5:	89 ca                	mov    edx,ecx
c0016ff7:	89 14 c5 a4 d2 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2d5c],edx
c0016ffe:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017002:	eb b5                	jmp    c0016fb9 <loadACPITables(unsigned char*)+0xba>
c0017004:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c001700c:	a1 8c d2 02 c0       	mov    eax,ds:0xc002d28c
c0017011:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017015:	0f 8d 05 01 00 00    	jge    c0017120 <loadACPITables(unsigned char*)+0x221>
c001701b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001701f:	8b 04 c5 a4 d2 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd2d5c]
c0017026:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001702a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001702e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017036:	25 ff 0f 00 00       	and    eax,0xfff
c001703b:	89 c6                	mov    esi,eax
c001703d:	e8 dd a8 ff ff       	call   c001191f <Virt::getAKernelVAS()>
c0017042:	89 c3                	mov    ebx,eax
c0017044:	83 ec 0c             	sub    esp,0xc
c0017047:	6a 01                	push   0x1
c0017049:	e8 41 a7 ff ff       	call   c001178f <Virt::allocateKernelVirtualPages(int)>
c001704e:	83 c4 10             	add    esp,0x10
c0017051:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017055:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001705b:	83 ec 0c             	sub    esp,0xc
c001705e:	6a 01                	push   0x1
c0017060:	6a 01                	push   0x1
c0017062:	50                   	push   eax
c0017063:	52                   	push   edx
c0017064:	53                   	push   ebx
c0017065:	e8 e4 b0 ff ff       	call   c001214e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001706a:	83 c4 20             	add    esp,0x20
c001706d:	09 f0                	or     eax,esi
c001706f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017073:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017077:	c1 e0 03             	shl    eax,0x3
c001707a:	05 a0 d2 02 c0       	add    eax,0xc002d2a0
c001707f:	83 ec 04             	sub    esp,0x4
c0017082:	6a 04                	push   0x4
c0017084:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017088:	50                   	push   eax
c0017089:	e8 c7 95 fe ff       	call   c0000655 <memcpy>
c001708e:	83 c4 10             	add    esp,0x10
c0017091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017095:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017098:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001709c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00170a0:	05 00 10 00 00       	add    eax,0x1000
c00170a5:	c1 e8 0c             	shr    eax,0xc
c00170a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00170ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00170b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170b7:	25 ff 0f 00 00       	and    eax,0xfff
c00170bc:	89 c6                	mov    esi,eax
c00170be:	e8 5c a8 ff ff       	call   c001191f <Virt::getAKernelVAS()>
c00170c3:	89 c3                	mov    ebx,eax
c00170c5:	83 ec 0c             	sub    esp,0xc
c00170c8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00170cc:	e8 be a6 ff ff       	call   c001178f <Virt::allocateKernelVirtualPages(int)>
c00170d1:	83 c4 10             	add    esp,0x10
c00170d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00170d8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00170de:	83 ec 0c             	sub    esp,0xc
c00170e1:	6a 01                	push   0x1
c00170e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00170e7:	50                   	push   eax
c00170e8:	52                   	push   edx
c00170e9:	53                   	push   ebx
c00170ea:	e8 5f b0 ff ff       	call   c001214e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00170ef:	83 c4 20             	add    esp,0x20
c00170f2:	09 f0                	or     eax,esi
c00170f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00170f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00170fb:	83 ec 0c             	sub    esp,0xc
c00170fe:	50                   	push   eax
c00170ff:	e8 ef a9 ff ff       	call   c0011af3 <Virt::freeKernelVirtualPages(unsigned long)>
c0017104:	83 c4 10             	add    esp,0x10
c0017107:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001710b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001710f:	89 14 c5 a4 d2 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2d5c],edx
c0017116:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c001711a:	e9 ed fe ff ff       	jmp    c001700c <loadACPITables(unsigned char*)+0x10d>
c001711f:	90                   	nop
c0017120:	83 c4 44             	add    esp,0x44
c0017123:	5b                   	pop    ebx
c0017124:	5e                   	pop    esi
c0017125:	c3                   	ret    

c0017126 <findRSDT(unsigned char*)>:
c0017126:	56                   	push   esi
c0017127:	53                   	push   ebx
c0017128:	83 ec 44             	sub    esp,0x44
c001712b:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c0017130:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017136:	83 e0 04             	and    eax,0x4
c0017139:	84 c0                	test   al,al
c001713b:	75 0a                	jne    c0017147 <findRSDT(unsigned char*)+0x21>
c001713d:	b8 00 00 00 00       	mov    eax,0x0
c0017142:	e9 f7 00 00 00       	jmp    c001723e <findRSDT(unsigned char*)+0x118>
c0017147:	83 ec 04             	sub    esp,0x4
c001714a:	6a 24                	push   0x24
c001714c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017150:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017154:	50                   	push   eax
c0017155:	e8 fb 94 fe ff       	call   c0000655 <memcpy>
c001715a:	83 c4 10             	add    esp,0x10
c001715d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017161:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017165:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001716d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017171:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017175:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017179:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001717d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017181:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017185:	25 ff 0f 00 00       	and    eax,0xfff
c001718a:	89 c6                	mov    esi,eax
c001718c:	e8 8e a7 ff ff       	call   c001191f <Virt::getAKernelVAS()>
c0017191:	89 c3                	mov    ebx,eax
c0017193:	83 ec 0c             	sub    esp,0xc
c0017196:	6a 02                	push   0x2
c0017198:	e8 f2 a5 ff ff       	call   c001178f <Virt::allocateKernelVirtualPages(int)>
c001719d:	83 c4 10             	add    esp,0x10
c00171a0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00171a4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00171aa:	83 ec 0c             	sub    esp,0xc
c00171ad:	6a 01                	push   0x1
c00171af:	6a 02                	push   0x2
c00171b1:	50                   	push   eax
c00171b2:	52                   	push   edx
c00171b3:	53                   	push   ebx
c00171b4:	e8 95 af ff ff       	call   c001214e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00171b9:	83 c4 20             	add    esp,0x20
c00171bc:	09 f0                	or     eax,esi
c00171be:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00171c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00171c6:	25 ff 0f 00 00       	and    eax,0xfff
c00171cb:	89 c6                	mov    esi,eax
c00171cd:	e8 4d a7 ff ff       	call   c001191f <Virt::getAKernelVAS()>
c00171d2:	89 c3                	mov    ebx,eax
c00171d4:	83 ec 0c             	sub    esp,0xc
c00171d7:	6a 02                	push   0x2
c00171d9:	e8 b1 a5 ff ff       	call   c001178f <Virt::allocateKernelVirtualPages(int)>
c00171de:	83 c4 10             	add    esp,0x10
c00171e1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00171e5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00171eb:	83 ec 0c             	sub    esp,0xc
c00171ee:	6a 01                	push   0x1
c00171f0:	6a 02                	push   0x2
c00171f2:	50                   	push   eax
c00171f3:	52                   	push   edx
c00171f4:	53                   	push   ebx
c00171f5:	e8 54 af ff ff       	call   c001214e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00171fa:	83 c4 20             	add    esp,0x20
c00171fd:	09 f0                	or     eax,esi
c00171ff:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017203:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017208:	75 11                	jne    c001721b <findRSDT(unsigned char*)+0xf5>
c001720a:	c6 05 a0 d4 02 c0 00 	mov    BYTE PTR ds:0xc002d4a0,0x0
c0017211:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017215:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017219:	eb 1f                	jmp    c001723a <findRSDT(unsigned char*)+0x114>
c001721b:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017220:	75 11                	jne    c0017233 <findRSDT(unsigned char*)+0x10d>
c0017222:	c6 05 a0 d4 02 c0 01 	mov    BYTE PTR ds:0xc002d4a0,0x1
c0017229:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001722d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017231:	eb 07                	jmp    c001723a <findRSDT(unsigned char*)+0x114>
c0017233:	b8 00 00 00 00       	mov    eax,0x0
c0017238:	eb 04                	jmp    c001723e <findRSDT(unsigned char*)+0x118>
c001723a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001723e:	83 c4 44             	add    esp,0x44
c0017241:	5b                   	pop    ebx
c0017242:	5e                   	pop    esi
c0017243:	c3                   	ret    

c0017244 <findDataTable(unsigned char*, char*)>:
c0017244:	83 ec 1c             	sub    esp,0x1c
c0017247:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c001724c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017252:	83 e0 04             	and    eax,0x4
c0017255:	84 c0                	test   al,al
c0017257:	75 07                	jne    c0017260 <findDataTable(unsigned char*, char*)+0x1c>
c0017259:	b8 00 00 00 00       	mov    eax,0x0
c001725e:	eb 7c                	jmp    c00172dc <findDataTable(unsigned char*, char*)+0x98>
c0017260:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017268:	a1 8c d2 02 c0       	mov    eax,ds:0xc002d28c
c001726d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017271:	7d 3a                	jge    c00172ad <findDataTable(unsigned char*, char*)+0x69>
c0017273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017277:	c1 e0 03             	shl    eax,0x3
c001727a:	05 a0 d2 02 c0       	add    eax,0xc002d2a0
c001727f:	83 ec 04             	sub    esp,0x4
c0017282:	6a 04                	push   0x4
c0017284:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017288:	50                   	push   eax
c0017289:	e8 64 93 fe ff       	call   c00005f2 <memcmp>
c001728e:	83 c4 10             	add    esp,0x10
c0017291:	85 c0                	test   eax,eax
c0017293:	0f 94 c0             	sete   al
c0017296:	84 c0                	test   al,al
c0017298:	74 0d                	je     c00172a7 <findDataTable(unsigned char*, char*)+0x63>
c001729a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001729e:	8b 04 c5 a4 d2 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd2d5c]
c00172a5:	eb 35                	jmp    c00172dc <findDataTable(unsigned char*, char*)+0x98>
c00172a7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00172ab:	eb bb                	jmp    c0017268 <findDataTable(unsigned char*, char*)+0x24>
c00172ad:	a0 a0 d4 02 c0       	mov    al,ds:0xc002d4a0
c00172b2:	84 c0                	test   al,al
c00172b4:	74 07                	je     c00172bd <findDataTable(unsigned char*, char*)+0x79>
c00172b6:	b8 58 00 00 00       	mov    eax,0x58
c00172bb:	eb 05                	jmp    c00172c2 <findDataTable(unsigned char*, char*)+0x7e>
c00172bd:	b8 52 00 00 00       	mov    eax,0x52
c00172c2:	83 ec 04             	sub    esp,0x4
c00172c5:	50                   	push   eax
c00172c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00172ca:	68 40 9e 02 c0       	push   0xc0029e40
c00172cf:	e8 ab b4 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c00172d4:	83 c4 10             	add    esp,0x10
c00172d7:	b8 00 00 00 00       	mov    eax,0x0
c00172dc:	83 c4 1c             	add    esp,0x1c
c00172df:	c3                   	ret    

c00172e0 <scanMADT()>:
c00172e0:	53                   	push   ebx
c00172e1:	83 ec 38             	sub    esp,0x38
c00172e4:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c00172e9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00172ef:	83 e0 04             	and    eax,0x4
c00172f2:	84 c0                	test   al,al
c00172f4:	0f 84 63 04 00 00    	je     c001775d <scanMADT()+0x47d>
c00172fa:	e8 76 fb ff ff       	call   c0016e75 <findRSDP()>
c00172ff:	a3 ac d4 02 c0       	mov    ds:0xc002d4ac,eax
c0017304:	a1 ac d4 02 c0       	mov    eax,ds:0xc002d4ac
c0017309:	85 c0                	test   eax,eax
c001730b:	75 19                	jne    c0017326 <scanMADT()+0x46>
c001730d:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c0017312:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017318:	83 e2 fb             	and    edx,0xfffffffb
c001731b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017321:	e9 3b 04 00 00       	jmp    c0017761 <scanMADT()+0x481>
c0017326:	a1 ac d4 02 c0       	mov    eax,ds:0xc002d4ac
c001732b:	83 ec 0c             	sub    esp,0xc
c001732e:	50                   	push   eax
c001732f:	e8 f2 fd ff ff       	call   c0017126 <findRSDT(unsigned char*)>
c0017334:	83 c4 10             	add    esp,0x10
c0017337:	a3 a8 d4 02 c0       	mov    ds:0xc002d4a8,eax
c001733c:	a1 a8 d4 02 c0       	mov    eax,ds:0xc002d4a8
c0017341:	85 c0                	test   eax,eax
c0017343:	75 19                	jne    c001735e <scanMADT()+0x7e>
c0017345:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c001734a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017350:	83 e2 fb             	and    edx,0xfffffffb
c0017353:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017359:	e9 03 04 00 00       	jmp    c0017761 <scanMADT()+0x481>
c001735e:	a1 a8 d4 02 c0       	mov    eax,ds:0xc002d4a8
c0017363:	83 ec 0c             	sub    esp,0xc
c0017366:	50                   	push   eax
c0017367:	e8 93 fb ff ff       	call   c0016eff <loadACPITables(unsigned char*)>
c001736c:	83 c4 10             	add    esp,0x10
c001736f:	a1 a8 d4 02 c0       	mov    eax,ds:0xc002d4a8
c0017374:	83 ec 08             	sub    esp,0x8
c0017377:	68 5e 9d 02 c0       	push   0xc0029d5e
c001737c:	50                   	push   eax
c001737d:	e8 c2 fe ff ff       	call   c0017244 <findDataTable(unsigned char*, char*)>
c0017382:	83 c4 10             	add    esp,0x10
c0017385:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017389:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001738e:	75 19                	jne    c00173a9 <scanMADT()+0xc9>
c0017390:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c0017395:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001739b:	83 e2 fe             	and    edx,0xfffffffe
c001739e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00173a4:	e9 b8 03 00 00       	jmp    c0017761 <scanMADT()+0x481>
c00173a9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00173b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00173b8:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00173bc:	0f 87 9f 03 00 00    	ja     c0017761 <scanMADT()+0x481>
c00173c2:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00173ca:	0f 87 91 03 00 00    	ja     c0017761 <scanMADT()+0x481>
c00173d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173d4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00173d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173dc:	8d 50 01             	lea    edx,[eax+0x1]
c00173df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00173e3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00173e7:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00173eb:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00173ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173f3:	8d 50 01             	lea    edx,[eax+0x1]
c00173f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00173fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00173fe:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017402:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017406:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c001740b:	0f 86 4f 03 00 00    	jbe    c0017760 <scanMADT()+0x480>
c0017411:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017416:	75 57                	jne    c001746f <scanMADT()+0x18f>
c0017418:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001741c:	8d 50 01             	lea    edx,[eax+0x1]
c001741f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017423:	8a 15 a0 d6 02 c0    	mov    dl,BYTE PTR ds:0xc002d6a0
c0017429:	0f b6 d2             	movzx  edx,dl
c001742c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017430:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017434:	88 82 e0 d6 02 c0    	mov    BYTE PTR [edx-0x3ffd2920],al
c001743a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001743e:	8d 50 01             	lea    edx,[eax+0x1]
c0017441:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017445:	8a 15 a0 d6 02 c0    	mov    dl,BYTE PTR ds:0xc002d6a0
c001744b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001744e:	88 0d a0 d6 02 c0    	mov    BYTE PTR ds:0xc002d6a0,cl
c0017454:	0f b6 d2             	movzx  edx,dl
c0017457:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001745b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001745f:	88 82 c0 d6 02 c0    	mov    BYTE PTR [edx-0x3ffd2940],al
c0017465:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001746a:	e9 da 02 00 00       	jmp    c0017749 <scanMADT()+0x469>
c001746f:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017474:	0f 85 14 01 00 00    	jne    c001758e <scanMADT()+0x2ae>
c001747a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001747e:	8d 50 01             	lea    edx,[eax+0x1]
c0017481:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017485:	8a 15 60 d5 02 c0    	mov    dl,BYTE PTR ds:0xc002d560
c001748b:	0f b6 d2             	movzx  edx,dl
c001748e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017492:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017496:	88 82 80 d5 02 c0    	mov    BYTE PTR [edx-0x3ffd2a80],al
c001749c:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00174a0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00174a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174a8:	01 d0                	add    eax,edx
c00174aa:	83 c0 2c             	add    eax,0x2c
c00174ad:	8a 00                	mov    al,BYTE PTR [eax]
c00174af:	0f b6 d0             	movzx  edx,al
c00174b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174b6:	8d 48 01             	lea    ecx,[eax+0x1]
c00174b9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174bd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00174c1:	0f b6 c0             	movzx  eax,al
c00174c4:	c1 e0 08             	shl    eax,0x8
c00174c7:	89 d1                	mov    ecx,edx
c00174c9:	09 c1                	or     ecx,eax
c00174cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174cf:	8d 50 02             	lea    edx,[eax+0x2]
c00174d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174d6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00174da:	0f b6 c0             	movzx  eax,al
c00174dd:	c1 e0 10             	shl    eax,0x10
c00174e0:	09 c1                	or     ecx,eax
c00174e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174e6:	8d 50 03             	lea    edx,[eax+0x3]
c00174e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174ed:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00174f1:	0f b6 c0             	movzx  eax,al
c00174f4:	c1 e0 18             	shl    eax,0x18
c00174f7:	09 c1                	or     ecx,eax
c00174f9:	89 ca                	mov    edx,ecx
c00174fb:	a0 60 d5 02 c0       	mov    al,ds:0xc002d560
c0017500:	0f b6 c0             	movzx  eax,al
c0017503:	89 14 85 a0 d5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2a60],edx
c001750a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001750f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017513:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017517:	01 d0                	add    eax,edx
c0017519:	83 c0 2c             	add    eax,0x2c
c001751c:	8a 00                	mov    al,BYTE PTR [eax]
c001751e:	0f b6 d0             	movzx  edx,al
c0017521:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017525:	8d 48 01             	lea    ecx,[eax+0x1]
c0017528:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001752c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017530:	0f b6 c0             	movzx  eax,al
c0017533:	c1 e0 08             	shl    eax,0x8
c0017536:	89 d1                	mov    ecx,edx
c0017538:	09 c1                	or     ecx,eax
c001753a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001753e:	8d 50 02             	lea    edx,[eax+0x2]
c0017541:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017545:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017549:	0f b6 c0             	movzx  eax,al
c001754c:	c1 e0 10             	shl    eax,0x10
c001754f:	09 c1                	or     ecx,eax
c0017551:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017555:	8d 50 03             	lea    edx,[eax+0x3]
c0017558:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001755c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017560:	0f b6 c0             	movzx  eax,al
c0017563:	c1 e0 18             	shl    eax,0x18
c0017566:	09 c1                	or     ecx,eax
c0017568:	89 ca                	mov    edx,ecx
c001756a:	a0 60 d5 02 c0       	mov    al,ds:0xc002d560
c001756f:	0f b6 c0             	movzx  eax,al
c0017572:	89 14 85 20 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd29e0],edx
c0017579:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001757e:	a0 60 d5 02 c0       	mov    al,ds:0xc002d560
c0017583:	40                   	inc    eax
c0017584:	a2 60 d5 02 c0       	mov    ds:0xc002d560,al
c0017589:	e9 bb 01 00 00       	jmp    c0017749 <scanMADT()+0x469>
c001758e:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017593:	0f 85 e9 00 00 00    	jne    c0017682 <scanMADT()+0x3a2>
c0017599:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001759d:	8d 50 01             	lea    edx,[eax+0x1]
c00175a0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00175a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00175a8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00175ac:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00175b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175b4:	8d 50 01             	lea    edx,[eax+0x1]
c00175b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00175bb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00175bf:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00175c3:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00175c7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00175cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175cf:	01 d0                	add    eax,edx
c00175d1:	83 c0 2c             	add    eax,0x2c
c00175d4:	8a 00                	mov    al,BYTE PTR [eax]
c00175d6:	0f b6 d0             	movzx  edx,al
c00175d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175dd:	8d 48 01             	lea    ecx,[eax+0x1]
c00175e0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175e4:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00175e8:	0f b6 c0             	movzx  eax,al
c00175eb:	c1 e0 08             	shl    eax,0x8
c00175ee:	89 d1                	mov    ecx,edx
c00175f0:	09 c1                	or     ecx,eax
c00175f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175f6:	8d 50 02             	lea    edx,[eax+0x2]
c00175f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175fd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017601:	0f b6 c0             	movzx  eax,al
c0017604:	c1 e0 10             	shl    eax,0x10
c0017607:	09 c1                	or     ecx,eax
c0017609:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001760d:	8d 50 03             	lea    edx,[eax+0x3]
c0017610:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017614:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017618:	0f b6 c0             	movzx  eax,al
c001761b:	c1 e0 18             	shl    eax,0x18
c001761e:	09 c8                	or     eax,ecx
c0017620:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017624:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017629:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001762d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017631:	01 d0                	add    eax,edx
c0017633:	83 c0 2c             	add    eax,0x2c
c0017636:	8a 00                	mov    al,BYTE PTR [eax]
c0017638:	0f b6 c0             	movzx  eax,al
c001763b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001763f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017642:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017646:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001764a:	0f b6 d2             	movzx  edx,dl
c001764d:	c1 e2 08             	shl    edx,0x8
c0017650:	09 d0                	or     eax,edx
c0017652:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017657:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001765c:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017661:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017665:	88 90 40 be 02 c0    	mov    BYTE PTR [eax-0x3ffd41c0],dl
c001766b:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017670:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017675:	66 89 84 12 40 d5 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd2ac0],ax
c001767d:	e9 c7 00 00 00       	jmp    c0017749 <scanMADT()+0x469>
c0017682:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017687:	0f 85 b0 00 00 00    	jne    c001773d <scanMADT()+0x45d>
c001768d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017691:	8d 50 01             	lea    edx,[eax+0x1]
c0017694:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017698:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001769c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00176a0:	0f b6 c0             	movzx  eax,al
c00176a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00176a7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00176ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176af:	01 d0                	add    eax,edx
c00176b1:	83 c0 2c             	add    eax,0x2c
c00176b4:	8a 00                	mov    al,BYTE PTR [eax]
c00176b6:	0f b6 d0             	movzx  edx,al
c00176b9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176bd:	8d 48 01             	lea    ecx,[eax+0x1]
c00176c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00176c4:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00176c8:	0f b6 c0             	movzx  eax,al
c00176cb:	c1 e0 08             	shl    eax,0x8
c00176ce:	09 d0                	or     eax,edx
c00176d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00176d4:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00176d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176dd:	8d 50 01             	lea    edx,[eax+0x1]
c00176e0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00176e4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00176e8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00176ec:	0f b6 c0             	movzx  eax,al
c00176ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176f7:	c1 e0 08             	shl    eax,0x8
c00176fa:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00176fe:	89 c1                	mov    ecx,eax
c0017700:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017704:	c1 e0 18             	shl    eax,0x18
c0017707:	89 c3                	mov    ebx,eax
c0017709:	a1 b0 d4 02 c0       	mov    eax,ds:0xc002d4b0
c001770e:	8d 50 01             	lea    edx,[eax+0x1]
c0017711:	89 15 b0 d4 02 c0    	mov    DWORD PTR ds:0xc002d4b0,edx
c0017717:	09 d9                	or     ecx,ebx
c0017719:	89 ca                	mov    edx,ecx
c001771b:	89 14 85 c0 d4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2b40],edx
c0017722:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017726:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001772a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001772e:	68 70 9e 02 c0       	push   0xc0029e70
c0017733:	e8 47 b0 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0017738:	83 c4 10             	add    esp,0x10
c001773b:	eb 0c                	jmp    c0017749 <scanMADT()+0x469>
c001773d:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017742:	75 05                	jne    c0017749 <scanMADT()+0x469>
c0017744:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017749:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001774e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017752:	01 d0                	add    eax,edx
c0017754:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017758:	e9 54 fc ff ff       	jmp    c00173b1 <scanMADT()+0xd1>
c001775d:	90                   	nop
c001775e:	eb 01                	jmp    c0017761 <scanMADT()+0x481>
c0017760:	90                   	nop
c0017761:	83 c4 38             	add    esp,0x38
c0017764:	5b                   	pop    ebx
c0017765:	c3                   	ret    

c0017766 <ACPI::ACPI()>:
c0017766:	83 ec 0c             	sub    esp,0xc
c0017769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001776d:	83 ec 08             	sub    esp,0x8
c0017770:	68 63 9d 02 c0       	push   0xc0029d63
c0017775:	50                   	push   eax
c0017776:	e8 1b c6 ff ff       	call   c0013d96 <Device::Device(char const*)>
c001777b:	83 c4 10             	add    esp,0x10
c001777e:	ba 48 9f 02 c0       	mov    edx,0xc0029f48
c0017783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017787:	89 10                	mov    DWORD PTR [eax],edx
c0017789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001778d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017798:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c00177a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177a6:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c00177b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177b4:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c00177bb:	e8 20 fb ff ff       	call   c00172e0 <scanMADT()>
c00177c0:	90                   	nop
c00177c1:	83 c4 0c             	add    esp,0xc
c00177c4:	c3                   	ret    
c00177c5:	90                   	nop

c00177c6 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00177c6:	83 ec 2c             	sub    esp,0x2c
c00177c9:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00177cd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00177d1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00177d5:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00177d9:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00177de:	88 d0                	mov    al,dl
c00177e0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00177e4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00177e9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00177f1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177f5:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00177fb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00177ff:	0f 8d 97 00 00 00    	jge    c001789c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017805:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017809:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001780d:	83 c2 2a             	add    edx,0x2a
c0017810:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017814:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017819:	75 78                	jne    c0017893 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001781b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001781f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017823:	83 c2 2a             	add    edx,0x2a
c0017826:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001782a:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001782e:	75 63                	jne    c0017893 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017830:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017835:	74 3a                	je     c0017871 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017837:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001783b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001783f:	83 c2 2a             	add    edx,0x2a
c0017842:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017846:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001784a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001784d:	39 c2                	cmp    edx,eax
c001784f:	74 10                	je     c0017861 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017851:	83 ec 0c             	sub    esp,0xc
c0017854:	68 ac 9e 02 c0       	push   0xc0029eac
c0017859:	e8 73 20 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c001785e:	83 c4 10             	add    esp,0x10
c0017861:	83 ec 0c             	sub    esp,0xc
c0017864:	68 68 9d 02 c0       	push   0xc0029d68
c0017869:	e8 63 20 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c001786e:	83 c4 10             	add    esp,0x10
c0017871:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017875:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017879:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001787d:	83 c2 2a             	add    edx,0x2a
c0017880:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017884:	8b 02                	mov    eax,DWORD PTR [edx]
c0017886:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017889:	89 01                	mov    DWORD PTR [ecx],eax
c001788b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001788e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017893:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017897:	e9 55 ff ff ff       	jmp    c00177f1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c001789c:	90                   	nop
c001789d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00178a1:	83 c4 2c             	add    esp,0x2c
c00178a4:	c2 04 00             	ret    0x4
c00178a7:	90                   	nop

c00178a8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00178a8:	56                   	push   esi
c00178a9:	53                   	push   ebx
c00178aa:	83 ec 14             	sub    esp,0x14
c00178ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178b1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00178b5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00178b9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00178be:	88 c8                	mov    al,cl
c00178c0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00178c4:	88 d0                	mov    al,dl
c00178c6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00178ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178ce:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c00178d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178d8:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c00178de:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c00178e3:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00178e8:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00178ed:	83 ec 04             	sub    esp,0x4
c00178f0:	56                   	push   esi
c00178f1:	53                   	push   ebx
c00178f2:	51                   	push   ecx
c00178f3:	52                   	push   edx
c00178f4:	50                   	push   eax
c00178f5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00178f9:	68 dc 9e 02 c0       	push   0xc0029edc
c00178fe:	e8 7c ae ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0017903:	83 c4 20             	add    esp,0x20
c0017906:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001790a:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017910:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017914:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017917:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001791b:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001791f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017923:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017929:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001792d:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017930:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017934:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017939:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001793d:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017943:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017947:	8d 48 01             	lea    ecx,[eax+0x1]
c001794a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001794e:	83 c2 2a             	add    edx,0x2a
c0017951:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017955:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017959:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001795f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017963:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017966:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001796a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001796e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017972:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017978:	8d 50 01             	lea    edx,[eax+0x1]
c001797b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001797f:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0017985:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017989:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001798f:	3d 00 08 00 00       	cmp    eax,0x800
c0017994:	75 10                	jne    c00179a6 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0017996:	83 ec 0c             	sub    esp,0xc
c0017999:	68 77 9d 02 c0       	push   0xc0029d77
c001799e:	e8 2e 1f 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c00179a3:	83 c4 10             	add    esp,0x10
c00179a6:	90                   	nop
c00179a7:	83 c4 14             	add    esp,0x14
c00179aa:	5b                   	pop    ebx
c00179ab:	5e                   	pop    esi
c00179ac:	c3                   	ret    
c00179ad:	90                   	nop

c00179ae <ACPI::setScreenBrightnessLevel(void*, int)>:
c00179ae:	b8 00 00 00 00       	mov    eax,0x0
c00179b3:	c3                   	ret    

c00179b4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00179b4:	83 ec 1c             	sub    esp,0x1c
c00179b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00179bb:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00179be:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00179c2:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c00179c7:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00179cc:	83 ec 08             	sub    esp,0x8
c00179cf:	52                   	push   edx
c00179d0:	50                   	push   eax
c00179d1:	e8 1c 71 ff ff       	call   c000eaf2 <Computer::readCMOS(unsigned char)>
c00179d6:	83 c4 10             	add    esp,0x10
c00179d9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00179dd:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c00179e2:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00179e7:	83 ec 04             	sub    esp,0x4
c00179ea:	6a 01                	push   0x1
c00179ec:	52                   	push   edx
c00179ed:	50                   	push   eax
c00179ee:	e8 15 72 ff ff       	call   c000ec08 <Computer::writeCMOS(unsigned char, unsigned char)>
c00179f3:	83 c4 10             	add    esp,0x10
c00179f6:	90                   	nop
c00179f7:	83 c4 1c             	add    esp,0x1c
c00179fa:	c3                   	ret    
c00179fb:	90                   	nop

c00179fc <ACPI::open(int, int, void*)>:
c00179fc:	53                   	push   ebx
c00179fd:	83 ec 28             	sub    esp,0x28
c0017a00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a04:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0017a0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a0f:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0017a15:	84 c0                	test   al,al
c0017a17:	74 67                	je     c0017a80 <ACPI::open(int, int, void*)+0x84>
c0017a19:	c7 44 24 10 58 01 00 00 	mov    DWORD PTR [esp+0x10],0x158
c0017a21:	83 ec 0c             	sub    esp,0xc
c0017a24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a28:	e8 ad 7a ff ff       	call   c000f4da <malloc>
c0017a2d:	83 c4 10             	add    esp,0x10
c0017a30:	89 c3                	mov    ebx,eax
c0017a32:	83 ec 0c             	sub    esp,0xc
c0017a35:	53                   	push   ebx
c0017a36:	e8 af 9f 00 00       	call   c00219ea <PCI::PCI()>
c0017a3b:	83 c4 10             	add    esp,0x10
c0017a3e:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0017a42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a46:	83 ec 08             	sub    esp,0x8
c0017a49:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017a4d:	50                   	push   eax
c0017a4e:	e8 53 c1 ff ff       	call   c0013ba6 <Device::addChild(Device*)>
c0017a53:	83 c4 10             	add    esp,0x10
c0017a56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017a5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a5c:	83 c0 08             	add    eax,0x8
c0017a5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a61:	6a 00                	push   0x0
c0017a63:	6a 00                	push   0x0
c0017a65:	6a 00                	push   0x0
c0017a67:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017a6b:	ff d0                	call   eax
c0017a6d:	83 c4 10             	add    esp,0x10
c0017a70:	83 ec 0c             	sub    esp,0xc
c0017a73:	68 94 9d 02 c0       	push   0xc0029d94
c0017a78:	e8 02 ad ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0017a7d:	83 c4 10             	add    esp,0x10
c0017a80:	83 ec 0c             	sub    esp,0xc
c0017a83:	68 9f 9d 02 c0       	push   0xc0029d9f
c0017a88:	e8 25 43 00 00       	call   c001bdb2 <Thr::loadKernelSymbolTable(char const*)>
c0017a8d:	83 c4 10             	add    esp,0x10
c0017a90:	8b 1d e8 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cbe8
c0017a96:	83 ec 08             	sub    esp,0x8
c0017a99:	6a 01                	push   0x1
c0017a9b:	68 bd 9d 02 c0       	push   0xc0029dbd
c0017aa0:	e8 cd 4d 00 00       	call   c001c872 <Thr::loadDLL(char const*, bool)>
c0017aa5:	83 c4 10             	add    esp,0x10
c0017aa8:	83 ec 08             	sub    esp,0x8
c0017aab:	53                   	push   ebx
c0017aac:	50                   	push   eax
c0017aad:	e8 cf 4f 00 00       	call   c001ca81 <Thr::executeDLL(unsigned long, void*)>
c0017ab2:	83 c4 10             	add    esp,0x10
c0017ab5:	8b 1d e8 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cbe8
c0017abb:	83 ec 08             	sub    esp,0x8
c0017abe:	6a 01                	push   0x1
c0017ac0:	68 da 9d 02 c0       	push   0xc0029dda
c0017ac5:	e8 a8 4d 00 00       	call   c001c872 <Thr::loadDLL(char const*, bool)>
c0017aca:	83 c4 10             	add    esp,0x10
c0017acd:	83 ec 08             	sub    esp,0x8
c0017ad0:	53                   	push   ebx
c0017ad1:	50                   	push   eax
c0017ad2:	e8 aa 4f 00 00       	call   c001ca81 <Thr::executeDLL(unsigned long, void*)>
c0017ad7:	83 c4 10             	add    esp,0x10
c0017ada:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c0017adf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017ae5:	83 e0 04             	and    eax,0x4
c0017ae8:	84 c0                	test   al,al
c0017aea:	0f 84 d6 00 00 00    	je     c0017bc6 <ACPI::open(int, int, void*)+0x1ca>
c0017af0:	c7 44 24 0c 14 01 00 00 	mov    DWORD PTR [esp+0xc],0x114
c0017af8:	83 ec 0c             	sub    esp,0xc
c0017afb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017aff:	e8 d6 79 ff ff       	call   c000f4da <malloc>
c0017b04:	83 c4 10             	add    esp,0x10
c0017b07:	89 c3                	mov    ebx,eax
c0017b09:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0017b0e:	83 ec 04             	sub    esp,0x4
c0017b11:	50                   	push   eax
c0017b12:	68 f7 9d 02 c0       	push   0xc0029df7
c0017b17:	53                   	push   ebx
c0017b18:	e8 bb b1 ff ff       	call   c0012cd8 <File::File(char const*, Process*)>
c0017b1d:	83 c4 10             	add    esp,0x10
c0017b20:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0017b24:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017b29:	74 17                	je     c0017b42 <ACPI::open(int, int, void*)+0x146>
c0017b2b:	83 ec 0c             	sub    esp,0xc
c0017b2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017b32:	e8 73 b4 ff ff       	call   c0012faa <File::exists()>
c0017b37:	83 c4 10             	add    esp,0x10
c0017b3a:	84 c0                	test   al,al
c0017b3c:	74 04                	je     c0017b42 <ACPI::open(int, int, void*)+0x146>
c0017b3e:	b0 01                	mov    al,0x1
c0017b40:	eb 02                	jmp    c0017b44 <ACPI::open(int, int, void*)+0x148>
c0017b42:	b0 00                	mov    al,0x0
c0017b44:	84 c0                	test   al,al
c0017b46:	74 25                	je     c0017b6d <ACPI::open(int, int, void*)+0x171>
c0017b48:	8b 1d e8 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cbe8
c0017b4e:	83 ec 08             	sub    esp,0x8
c0017b51:	6a 01                	push   0x1
c0017b53:	68 f7 9d 02 c0       	push   0xc0029df7
c0017b58:	e8 15 4d 00 00       	call   c001c872 <Thr::loadDLL(char const*, bool)>
c0017b5d:	83 c4 10             	add    esp,0x10
c0017b60:	83 ec 08             	sub    esp,0x8
c0017b63:	53                   	push   ebx
c0017b64:	50                   	push   eax
c0017b65:	e8 17 4f 00 00       	call   c001ca81 <Thr::executeDLL(unsigned long, void*)>
c0017b6a:	83 c4 10             	add    esp,0x10
c0017b6d:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017b72:	74 1e                	je     c0017b92 <ACPI::open(int, int, void*)+0x196>
c0017b74:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017b79:	74 17                	je     c0017b92 <ACPI::open(int, int, void*)+0x196>
c0017b7b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017b7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b81:	83 c0 08             	add    eax,0x8
c0017b84:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b86:	83 ec 0c             	sub    esp,0xc
c0017b89:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017b8d:	ff d0                	call   eax
c0017b8f:	83 c4 10             	add    esp,0x10
c0017b92:	a1 a8 d4 02 c0       	mov    eax,ds:0xc002d4a8
c0017b97:	83 ec 08             	sub    esp,0x8
c0017b9a:	68 14 9e 02 c0       	push   0xc0029e14
c0017b9f:	50                   	push   eax
c0017ba0:	e8 9f f6 ff ff       	call   c0017244 <findDataTable(unsigned char*, char*)>
c0017ba5:	83 c4 10             	add    esp,0x10
c0017ba8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017bac:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017bb1:	74 13                	je     c0017bc6 <ACPI::open(int, int, void*)+0x1ca>
c0017bb3:	83 ec 08             	sub    esp,0x8
c0017bb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017bba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017bbe:	e8 f1 fd ff ff       	call   c00179b4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0017bc3:	83 c4 10             	add    esp,0x10
c0017bc6:	b8 00 00 00 00       	mov    eax,0x0
c0017bcb:	83 c4 28             	add    esp,0x28
c0017bce:	5b                   	pop    ebx
c0017bcf:	c3                   	ret    

c0017bd0 <ACPI::sleep()>:
c0017bd0:	83 ec 0c             	sub    esp,0xc
c0017bd3:	a1 80 d2 02 c0       	mov    eax,ds:0xc002d280
c0017bd8:	85 c0                	test   eax,eax
c0017bda:	74 07                	je     c0017be3 <ACPI::sleep()+0x13>
c0017bdc:	a1 80 d2 02 c0       	mov    eax,ds:0xc002d280
c0017be1:	ff d0                	call   eax
c0017be3:	90                   	nop
c0017be4:	83 c4 0c             	add    esp,0xc
c0017be7:	c3                   	ret    

c0017be8 <CPU::close(int, int, void*)>:
c0017be8:	31 c0                	xor    eax,eax
c0017bea:	c3                   	ret    
c0017beb:	90                   	nop

c0017bec <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0017bec:	55                   	push   ebp
c0017bed:	57                   	push   edi
c0017bee:	56                   	push   esi
c0017bef:	53                   	push   ebx
c0017bf0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017bf4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017bf8:	89 ce                	mov    esi,ecx
c0017bfa:	89 d5                	mov    ebp,edx
c0017bfc:	80 f9 04             	cmp    cl,0x4
c0017bff:	75 28                	jne    c0017c29 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0017c01:	8d 42 f9             	lea    eax,[edx-0x7]
c0017c04:	3c 03                	cmp    al,0x3
c0017c06:	0f 86 63 01 00 00    	jbe    c0017d6f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017c0c:	80 fa 03             	cmp    dl,0x3
c0017c0f:	0f 84 5a 01 00 00    	je     c0017d6f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017c15:	8d 7a f2             	lea    edi,[edx-0xe]
c0017c18:	b8 10 c0 02 c0       	mov    eax,0xc002c010
c0017c1d:	89 fb                	mov    ebx,edi
c0017c1f:	80 fb 01             	cmp    bl,0x1
c0017c22:	77 4e                	ja     c0017c72 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0017c24:	e9 52 01 00 00       	jmp    c0017d7b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c29:	80 f9 05             	cmp    cl,0x5
c0017c2c:	75 4d                	jne    c0017c7b <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0017c2e:	b8 20 c0 02 c0       	mov    eax,0xc002c020
c0017c33:	80 fa 03             	cmp    dl,0x3
c0017c36:	0f 86 3f 01 00 00    	jbe    c0017d7b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c3c:	8d 7a fa             	lea    edi,[edx-0x6]
c0017c3f:	b8 30 c0 02 c0       	mov    eax,0xc002c030
c0017c44:	89 fb                	mov    ebx,edi
c0017c46:	80 fb 01             	cmp    bl,0x1
c0017c49:	0f 86 2c 01 00 00    	jbe    c0017d7b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c4f:	b8 40 c0 02 c0       	mov    eax,0xc002c040
c0017c54:	80 fa 08             	cmp    dl,0x8
c0017c57:	0f 84 1e 01 00 00    	je     c0017d7b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c5d:	89 d7                	mov    edi,edx
c0017c5f:	b8 50 c0 02 c0       	mov    eax,0xc002c050
c0017c64:	83 e7 fb             	and    edi,0xfffffffb
c0017c67:	89 fb                	mov    ebx,edi
c0017c69:	80 fb 09             	cmp    bl,0x9
c0017c6c:	0f 84 09 01 00 00    	je     c0017d7b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c72:	31 c0                	xor    eax,eax
c0017c74:	89 eb                	mov    ebx,ebp
c0017c76:	0f b6 fb             	movzx  edi,bl
c0017c79:	eb 30                	jmp    c0017cab <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0017c7b:	31 c0                	xor    eax,eax
c0017c7d:	80 f9 06             	cmp    cl,0x6
c0017c80:	75 f2                	jne    c0017c74 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017c82:	80 fa 0a             	cmp    dl,0xa
c0017c85:	77 ed                	ja     c0017c74 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017c87:	bf de 05 00 00       	mov    edi,0x5de
c0017c8c:	0f a3 d7             	bt     edi,edx
c0017c8f:	73 e3                	jae    c0017c74 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017c91:	b8 60 c0 02 c0       	mov    eax,0xc002c060
c0017c96:	e9 e0 00 00 00       	jmp    c0017d7b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c9b:	39 c7                	cmp    edi,eax
c0017c9d:	0f 84 d3 00 00 00    	je     c0017d76 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017ca3:	40                   	inc    eax
c0017ca4:	3d d0 00 00 00       	cmp    eax,0xd0
c0017ca9:	74 09                	je     c0017cb4 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0017cab:	89 f3                	mov    ebx,esi
c0017cad:	80 fb 0f             	cmp    bl,0xf
c0017cb0:	75 f1                	jne    c0017ca3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0017cb2:	eb e7                	jmp    c0017c9b <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0017cb4:	80 f9 10             	cmp    cl,0x10
c0017cb7:	75 14                	jne    c0017ccd <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0017cb9:	8d 42 fc             	lea    eax,[edx-0x4]
c0017cbc:	83 e0 fb             	and    eax,0xfffffffb
c0017cbf:	3c 02                	cmp    al,0x2
c0017cc1:	76 34                	jbe    c0017cf7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0017cc3:	b8 5e a2 02 c0       	mov    eax,0xc002a25e
c0017cc8:	80 fa 02             	cmp    dl,0x2
c0017ccb:	eb 24                	jmp    c0017cf1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0017ccd:	80 f9 11             	cmp    cl,0x11
c0017cd0:	75 13                	jne    c0017ce5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0017cd2:	b8 5e a2 02 c0       	mov    eax,0xc002a25e
c0017cd7:	80 fa 03             	cmp    dl,0x3
c0017cda:	0f 85 9b 00 00 00    	jne    c0017d7b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017ce0:	e9 91 00 00 00       	jmp    c0017d76 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017ce5:	80 f9 12             	cmp    cl,0x12
c0017ce8:	75 14                	jne    c0017cfe <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0017cea:	b8 5e a2 02 c0       	mov    eax,0xc002a25e
c0017cef:	fe ca                	dec    dl
c0017cf1:	0f 85 84 00 00 00    	jne    c0017d7b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cf7:	b8 80 c0 02 c0       	mov    eax,0xc002c080
c0017cfc:	eb 7d                	jmp    c0017d7b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cfe:	80 f9 14             	cmp    cl,0x14
c0017d01:	75 12                	jne    c0017d15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0017d03:	4a                   	dec    edx
c0017d04:	b8 5e a2 02 c0       	mov    eax,0xc002a25e
c0017d09:	80 fa 01             	cmp    dl,0x1
c0017d0c:	77 6d                	ja     c0017d7b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d0e:	b8 90 c0 02 c0       	mov    eax,0xc002c090
c0017d13:	eb 66                	jmp    c0017d7b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d15:	80 f9 15             	cmp    cl,0x15
c0017d18:	75 31                	jne    c0017d4b <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0017d1a:	b8 a0 c0 02 c0       	mov    eax,0xc002c0a0
c0017d1f:	80 fa 01             	cmp    dl,0x1
c0017d22:	74 57                	je     c0017d7b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d24:	b8 5e a2 02 c0       	mov    eax,0xc002a25e
c0017d29:	80 fa 13             	cmp    dl,0x13
c0017d2c:	76 0c                	jbe    c0017d3a <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0017d2e:	80 fa 30             	cmp    dl,0x30
c0017d31:	75 48                	jne    c0017d7b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d33:	b8 c0 c0 02 c0       	mov    eax,0xc002c0c0
c0017d38:	eb 41                	jmp    c0017d7b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d3a:	b9 04 00 09 00       	mov    ecx,0x90004
c0017d3f:	0f a3 d1             	bt     ecx,edx
c0017d42:	73 37                	jae    c0017d7b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d44:	b8 b0 c0 02 c0       	mov    eax,0xc002c0b0
c0017d49:	eb 30                	jmp    c0017d7b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d4b:	b8 5e a2 02 c0       	mov    eax,0xc002a25e
c0017d50:	80 f9 16             	cmp    cl,0x16
c0017d53:	75 26                	jne    c0017d7b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d55:	b8 d0 c0 02 c0       	mov    eax,0xc002c0d0
c0017d5a:	84 d2                	test   dl,dl
c0017d5c:	74 1d                	je     c0017d7b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d5e:	b8 5e a2 02 c0       	mov    eax,0xc002a25e
c0017d63:	80 fa 30             	cmp    dl,0x30
c0017d66:	75 13                	jne    c0017d7b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d68:	b8 e0 c0 02 c0       	mov    eax,0xc002c0e0
c0017d6d:	eb 0c                	jmp    c0017d7b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d6f:	b8 00 c0 02 c0       	mov    eax,0xc002c000
c0017d74:	eb 05                	jmp    c0017d7b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d76:	b8 70 c0 02 c0       	mov    eax,0xc002c070
c0017d7b:	5b                   	pop    ebx
c0017d7c:	5e                   	pop    esi
c0017d7d:	5f                   	pop    edi
c0017d7e:	5d                   	pop    ebp
c0017d7f:	c3                   	ret    

c0017d80 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0017d80:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017d84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017d88:	80 f9 04             	cmp    cl,0x4
c0017d8b:	75 6b                	jne    c0017df8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0017d8d:	b8 60 be 02 c0       	mov    eax,0xc002be60
c0017d92:	80 fa 01             	cmp    dl,0x1
c0017d95:	0f 86 92 02 00 00    	jbe    c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d9b:	b8 70 be 02 c0       	mov    eax,0xc002be70
c0017da0:	80 fa 02             	cmp    dl,0x2
c0017da3:	0f 84 84 02 00 00    	je     c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017da9:	b8 80 be 02 c0       	mov    eax,0xc002be80
c0017dae:	80 fa 03             	cmp    dl,0x3
c0017db1:	0f 84 76 02 00 00    	je     c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017db7:	b8 90 be 02 c0       	mov    eax,0xc002be90
c0017dbc:	80 fa 04             	cmp    dl,0x4
c0017dbf:	0f 84 68 02 00 00    	je     c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dc5:	b8 a0 be 02 c0       	mov    eax,0xc002bea0
c0017dca:	80 fa 05             	cmp    dl,0x5
c0017dcd:	0f 84 5a 02 00 00    	je     c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dd3:	b8 80 be 02 c0       	mov    eax,0xc002be80
c0017dd8:	80 fa 07             	cmp    dl,0x7
c0017ddb:	0f 84 4c 02 00 00    	je     c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017de1:	83 ea 08             	sub    edx,0x8
c0017de4:	b8 5e a2 02 c0       	mov    eax,0xc002a25e
c0017de9:	80 fa 01             	cmp    dl,0x1
c0017dec:	0f 87 3b 02 00 00    	ja     c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017df2:	b8 b0 be 02 c0       	mov    eax,0xc002beb0
c0017df7:	c3                   	ret    
c0017df8:	80 f9 05             	cmp    cl,0x5
c0017dfb:	75 45                	jne    c0017e42 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0017dfd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0017e00:	b8 c0 be 02 c0       	mov    eax,0xc002bec0
c0017e05:	80 f9 02             	cmp    cl,0x2
c0017e08:	0f 86 1f 02 00 00    	jbe    c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e0e:	80 fa 04             	cmp    dl,0x4
c0017e11:	0f 84 f3 01 00 00    	je     c001800a <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0017e17:	80 fa 07             	cmp    dl,0x7
c0017e1a:	0f 84 0d 02 00 00    	je     c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e20:	b8 d0 be 02 c0       	mov    eax,0xc002bed0
c0017e25:	80 fa 08             	cmp    dl,0x8
c0017e28:	0f 84 ff 01 00 00    	je     c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e2e:	b8 5e a2 02 c0       	mov    eax,0xc002a25e
c0017e33:	80 fa 09             	cmp    dl,0x9
c0017e36:	0f 85 f1 01 00 00    	jne    c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e3c:	b8 e0 be 02 c0       	mov    eax,0xc002bee0
c0017e41:	c3                   	ret    
c0017e42:	80 f9 06             	cmp    cl,0x6
c0017e45:	0f 85 85 01 00 00    	jne    c0017fd0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0017e4b:	b8 f0 be 02 c0       	mov    eax,0xc002bef0
c0017e50:	80 fa 01             	cmp    dl,0x1
c0017e53:	0f 84 d4 01 00 00    	je     c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e59:	8d 42 fb             	lea    eax,[edx-0x5]
c0017e5c:	3c 01                	cmp    al,0x1
c0017e5e:	0f 86 ac 01 00 00    	jbe    c0018010 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017e64:	80 fa 03             	cmp    dl,0x3
c0017e67:	0f 84 a3 01 00 00    	je     c0018010 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017e6d:	8d 4a f9             	lea    ecx,[edx-0x7]
c0017e70:	b8 10 bf 02 c0       	mov    eax,0xc002bf10
c0017e75:	80 f9 01             	cmp    cl,0x1
c0017e78:	0f 86 af 01 00 00    	jbe    c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e7e:	80 fa 09             	cmp    dl,0x9
c0017e81:	0f 84 8f 01 00 00    	je     c0018016 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0017e87:	8d 4a f6             	lea    ecx,[edx-0xa]
c0017e8a:	80 f9 01             	cmp    cl,0x1
c0017e8d:	0f 86 9a 01 00 00    	jbe    c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e93:	b8 20 bf 02 c0       	mov    eax,0xc002bf20
c0017e98:	80 fa 0d             	cmp    dl,0xd
c0017e9b:	0f 84 8c 01 00 00    	je     c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ea1:	b8 30 bf 02 c0       	mov    eax,0xc002bf30
c0017ea6:	80 fa 0e             	cmp    dl,0xe
c0017ea9:	0f 84 7e 01 00 00    	je     c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017eaf:	b8 40 bf 02 c0       	mov    eax,0xc002bf40
c0017eb4:	80 fa 0f             	cmp    dl,0xf
c0017eb7:	0f 84 70 01 00 00    	je     c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ebd:	b8 20 bf 02 c0       	mov    eax,0xc002bf20
c0017ec2:	80 fa 15             	cmp    dl,0x15
c0017ec5:	0f 84 62 01 00 00    	je     c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ecb:	8d 4a ea             	lea    ecx,[edx-0x16]
c0017ece:	b8 40 bf 02 c0       	mov    eax,0xc002bf40
c0017ed3:	80 f9 01             	cmp    cl,0x1
c0017ed6:	0f 86 51 01 00 00    	jbe    c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017edc:	80 fa 1a             	cmp    dl,0x1a
c0017edf:	0f 84 37 01 00 00    	je     c001801c <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0017ee5:	80 fa 1c             	cmp    dl,0x1c
c0017ee8:	0f 84 34 01 00 00    	je     c0018022 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0017eee:	80 fa 1d             	cmp    dl,0x1d
c0017ef1:	0f 84 36 01 00 00    	je     c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ef7:	b8 70 bf 02 c0       	mov    eax,0xc002bf70
c0017efc:	80 fa 25             	cmp    dl,0x25
c0017eff:	0f 84 28 01 00 00    	je     c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f05:	8d 4a da             	lea    ecx,[edx-0x26]
c0017f08:	b8 60 bf 02 c0       	mov    eax,0xc002bf60
c0017f0d:	80 f9 01             	cmp    cl,0x1
c0017f10:	0f 86 17 01 00 00    	jbe    c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f16:	b8 80 bf 02 c0       	mov    eax,0xc002bf80
c0017f1b:	80 fa 2a             	cmp    dl,0x2a
c0017f1e:	0f 84 09 01 00 00    	je     c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f24:	b8 70 bf 02 c0       	mov    eax,0xc002bf70
c0017f29:	80 fa 2c             	cmp    dl,0x2c
c0017f2c:	0f 84 fb 00 00 00    	je     c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f32:	b8 80 bf 02 c0       	mov    eax,0xc002bf80
c0017f37:	80 fa 2d             	cmp    dl,0x2d
c0017f3a:	0f 84 ed 00 00 00    	je     c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f40:	b8 50 bf 02 c0       	mov    eax,0xc002bf50
c0017f45:	80 fa 2e             	cmp    dl,0x2e
c0017f48:	0f 84 df 00 00 00    	je     c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f4e:	b8 70 bf 02 c0       	mov    eax,0xc002bf70
c0017f53:	80 fa 2f             	cmp    dl,0x2f
c0017f56:	0f 84 d1 00 00 00    	je     c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f5c:	8d 4a cb             	lea    ecx,[edx-0x35]
c0017f5f:	b8 60 bf 02 c0       	mov    eax,0xc002bf60
c0017f64:	80 f9 01             	cmp    cl,0x1
c0017f67:	0f 86 c0 00 00 00    	jbe    c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f6d:	b8 90 bf 02 c0       	mov    eax,0xc002bf90
c0017f72:	80 fa 37             	cmp    dl,0x37
c0017f75:	0f 84 b2 00 00 00    	je     c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f7b:	b8 a0 bf 02 c0       	mov    eax,0xc002bfa0
c0017f80:	80 fa 3a             	cmp    dl,0x3a
c0017f83:	0f 84 a4 00 00 00    	je     c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f89:	b8 b0 bf 02 c0       	mov    eax,0xc002bfb0
c0017f8e:	80 fa 3c             	cmp    dl,0x3c
c0017f91:	0f 84 96 00 00 00    	je     c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f97:	b8 c0 bf 02 c0       	mov    eax,0xc002bfc0
c0017f9c:	80 fa 3d             	cmp    dl,0x3d
c0017f9f:	0f 84 88 00 00 00    	je     c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fa5:	b8 a0 bf 02 c0       	mov    eax,0xc002bfa0
c0017faa:	80 fa 3e             	cmp    dl,0x3e
c0017fad:	74 7e                	je     c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017faf:	8d 42 bb             	lea    eax,[edx-0x45]
c0017fb2:	3c 01                	cmp    al,0x1
c0017fb4:	76 72                	jbe    c0018028 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017fb6:	80 fa 3f             	cmp    dl,0x3f
c0017fb9:	74 6d                	je     c0018028 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017fbb:	80 fa 4a             	cmp    dl,0x4a
c0017fbe:	74 0a                	je     c0017fca <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0017fc0:	b8 5e a2 02 c0       	mov    eax,0xc002a25e
c0017fc5:	80 fa 4d             	cmp    dl,0x4d
c0017fc8:	75 63                	jne    c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fca:	b8 90 bf 02 c0       	mov    eax,0xc002bf90
c0017fcf:	c3                   	ret    
c0017fd0:	b8 5e a2 02 c0       	mov    eax,0xc002a25e
c0017fd5:	80 f9 0b             	cmp    cl,0xb
c0017fd8:	75 0a                	jne    c0017fe4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0017fda:	fe ca                	dec    dl
c0017fdc:	75 4f                	jne    c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fde:	b8 d0 bf 02 c0       	mov    eax,0xc002bfd0
c0017fe3:	c3                   	ret    
c0017fe4:	80 f9 0f             	cmp    cl,0xf
c0017fe7:	75 44                	jne    c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fe9:	b8 e0 bf 02 c0       	mov    eax,0xc002bfe0
c0017fee:	80 fa 02             	cmp    dl,0x2
c0017ff1:	76 3a                	jbe    c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ff3:	8d 42 fd             	lea    eax,[edx-0x3]
c0017ff6:	3c 01                	cmp    al,0x1
c0017ff8:	76 0a                	jbe    c0018004 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0017ffa:	b8 5e a2 02 c0       	mov    eax,0xc002a25e
c0017fff:	80 fa 06             	cmp    dl,0x6
c0018002:	75 29                	jne    c001802d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018004:	b8 f0 bf 02 c0       	mov    eax,0xc002bff0
c0018009:	c3                   	ret    
c001800a:	b8 d0 be 02 c0       	mov    eax,0xc002bed0
c001800f:	c3                   	ret    
c0018010:	b8 00 bf 02 c0       	mov    eax,0xc002bf00
c0018015:	c3                   	ret    
c0018016:	b8 20 bf 02 c0       	mov    eax,0xc002bf20
c001801b:	c3                   	ret    
c001801c:	b8 50 bf 02 c0       	mov    eax,0xc002bf50
c0018021:	c3                   	ret    
c0018022:	b8 60 bf 02 c0       	mov    eax,0xc002bf60
c0018027:	c3                   	ret    
c0018028:	b8 b0 bf 02 c0       	mov    eax,0xc002bfb0
c001802d:	c3                   	ret    

c001802e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001802e:	60                   	pusha  
c001802f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018033:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018037:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001803b:	9c                   	pushf  
c001803c:	fa                   	cli    
c001803d:	0f 09                	wbinvd 
c001803f:	0f 30                	wrmsr  
c0018041:	9d                   	popf   
c0018042:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018046:	89 02                	mov    DWORD PTR [edx],eax
c0018048:	61                   	popa   
c0018049:	c3                   	ret    

c001804a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001804a:	60                   	pusha  
c001804b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001804f:	9c                   	pushf  
c0018050:	fa                   	cli    
c0018051:	0f 09                	wbinvd 
c0018053:	31 c0                	xor    eax,eax
c0018055:	31 d2                	xor    edx,edx
c0018057:	0f 32                	rdmsr  
c0018059:	9d                   	popf   
c001805a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001805e:	89 02                	mov    DWORD PTR [edx],eax
c0018060:	61                   	popa   
c0018061:	c3                   	ret    

c0018062 <CPU::AMD_K6_writeback(int, int, int)>:
c0018062:	56                   	push   esi
c0018063:	53                   	push   ebx
c0018064:	83 ec 10             	sub    esp,0x10
c0018067:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001806b:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018070:	75 5d                	jne    c00180cf <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018072:	83 f8 08             	cmp    eax,0x8
c0018075:	75 09                	jne    c0018080 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018077:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001807c:	7e 13                	jle    c0018091 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001807e:	eb 30                	jmp    c00180b0 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018080:	83 f8 06             	cmp    eax,0x6
c0018083:	7c 4a                	jl     c00180cf <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018085:	83 f8 07             	cmp    eax,0x7
c0018088:	7e 07                	jle    c0018091 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001808a:	83 f8 09             	cmp    eax,0x9
c001808d:	74 21                	je     c00180b0 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001808f:	eb 3e                	jmp    c00180cf <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018091:	89 e6                	mov    esi,esp
c0018093:	8b 1d 24 cc 02 c0    	mov    ebx,DWORD PTR ds:0xc002cc24
c0018099:	56                   	push   esi
c001809a:	c1 eb 15             	shr    ebx,0x15
c001809d:	68 82 00 00 c0       	push   0xc0000082
c00180a2:	83 e3 7e             	and    ebx,0x7e
c00180a5:	e8 a0 ff ff ff       	call   c001804a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00180aa:	56                   	push   esi
c00180ab:	6a 00                	push   0x0
c00180ad:	53                   	push   ebx
c00180ae:	eb 12                	jmp    c00180c2 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00180b0:	89 e3                	mov    ebx,esp
c00180b2:	53                   	push   ebx
c00180b3:	68 82 00 00 c0       	push   0xc0000082
c00180b8:	e8 8d ff ff ff       	call   c001804a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00180bd:	53                   	push   ebx
c00180be:	6a 00                	push   0x0
c00180c0:	6a 00                	push   0x0
c00180c2:	68 82 00 00 c0       	push   0xc0000082
c00180c7:	e8 62 ff ff ff       	call   c001802e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00180cc:	83 c4 18             	add    esp,0x18
c00180cf:	83 c4 10             	add    esp,0x10
c00180d2:	5b                   	pop    ebx
c00180d3:	5e                   	pop    esi
c00180d4:	c3                   	ret    
c00180d5:	90                   	nop

c00180d6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00180d6:	55                   	push   ebp
c00180d7:	57                   	push   edi
c00180d8:	56                   	push   esi
c00180d9:	53                   	push   ebx
c00180da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180de:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00180e2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00180e6:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00180ea:	39 05 00 c1 02 c0    	cmp    DWORD PTR ds:0xc002c100,eax
c00180f0:	75 23                	jne    c0018115 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00180f2:	a1 0c d7 02 c0       	mov    eax,ds:0xc002d70c
c00180f7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00180fb:	89 06                	mov    DWORD PTR [esi],eax
c00180fd:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c0018102:	89 07                	mov    DWORD PTR [edi],eax
c0018104:	a1 04 d7 02 c0       	mov    eax,ds:0xc002d704
c0018109:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001810c:	a1 00 d7 02 c0       	mov    eax,ds:0xc002d700
c0018111:	89 02                	mov    DWORD PTR [edx],eax
c0018113:	eb 3f                	jmp    c0018154 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018115:	31 c9                	xor    ecx,ecx
c0018117:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001811b:	0f a2                	cpuid  
c001811d:	89 06                	mov    DWORD PTR [esi],eax
c001811f:	89 1f                	mov    DWORD PTR [edi],ebx
c0018121:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018125:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018128:	89 10                	mov    DWORD PTR [eax],edx
c001812a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001812e:	a3 00 c1 02 c0       	mov    ds:0xc002c100,eax
c0018133:	8b 06                	mov    eax,DWORD PTR [esi]
c0018135:	a3 0c d7 02 c0       	mov    ds:0xc002d70c,eax
c001813a:	8b 07                	mov    eax,DWORD PTR [edi]
c001813c:	a3 08 d7 02 c0       	mov    ds:0xc002d708,eax
c0018141:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018144:	a3 04 d7 02 c0       	mov    ds:0xc002d704,eax
c0018149:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001814d:	8b 00                	mov    eax,DWORD PTR [eax]
c001814f:	a3 00 d7 02 c0       	mov    ds:0xc002d700,eax
c0018154:	5b                   	pop    ebx
c0018155:	5e                   	pop    esi
c0018156:	5f                   	pop    edi
c0018157:	5d                   	pop    ebp
c0018158:	c3                   	ret    
c0018159:	90                   	nop

c001815a <CPU::cpuidCheckEDX(unsigned int)>:
c001815a:	83 ec 10             	sub    esp,0x10
c001815d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018161:	50                   	push   eax
c0018162:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018166:	50                   	push   eax
c0018167:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001816b:	50                   	push   eax
c001816c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018170:	50                   	push   eax
c0018171:	6a 01                	push   0x1
c0018173:	e8 5e ff ff ff       	call   c00180d6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018178:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001817c:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018180:	0f 95 c0             	setne  al
c0018183:	83 c4 24             	add    esp,0x24
c0018186:	c3                   	ret    
c0018187:	90                   	nop

c0018188 <CPU::cpuidCheckECX(unsigned int)>:
c0018188:	83 ec 10             	sub    esp,0x10
c001818b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001818f:	50                   	push   eax
c0018190:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018194:	50                   	push   eax
c0018195:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018199:	50                   	push   eax
c001819a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001819e:	50                   	push   eax
c001819f:	6a 01                	push   0x1
c00181a1:	e8 30 ff ff ff       	call   c00180d6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00181a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181aa:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00181ae:	0f 95 c0             	setne  al
c00181b1:	83 c4 24             	add    esp,0x24
c00181b4:	c3                   	ret    
c00181b5:	90                   	nop

c00181b6 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00181b6:	83 ec 10             	sub    esp,0x10
c00181b9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181bd:	50                   	push   eax
c00181be:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181c2:	50                   	push   eax
c00181c3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181c7:	50                   	push   eax
c00181c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181cc:	50                   	push   eax
c00181cd:	6a 07                	push   0x7
c00181cf:	e8 02 ff ff ff       	call   c00180d6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00181d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181d8:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00181dc:	0f 95 c0             	setne  al
c00181df:	83 c4 24             	add    esp,0x24
c00181e2:	c3                   	ret    
c00181e3:	90                   	nop

c00181e4 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00181e4:	83 ec 10             	sub    esp,0x10
c00181e7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181eb:	50                   	push   eax
c00181ec:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181f0:	50                   	push   eax
c00181f1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181f5:	50                   	push   eax
c00181f6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181fa:	50                   	push   eax
c00181fb:	6a 07                	push   0x7
c00181fd:	e8 d4 fe ff ff       	call   c00180d6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018202:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018206:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001820a:	0f 95 c0             	setne  al
c001820d:	83 c4 24             	add    esp,0x24
c0018210:	c3                   	ret    
c0018211:	90                   	nop

c0018212 <CPU::CPU()>:
c0018212:	83 ec 0c             	sub    esp,0xc
c0018215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018219:	83 ec 08             	sub    esp,0x8
c001821c:	68 5e a2 02 c0       	push   0xc002a25e
c0018221:	50                   	push   eax
c0018222:	e8 6f bb ff ff       	call   c0013d96 <Device::Device(char const*)>
c0018227:	83 c4 10             	add    esp,0x10
c001822a:	ba 38 a3 02 c0       	mov    edx,0xc002a338
c001822f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018233:	89 10                	mov    DWORD PTR [eax],edx
c0018235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018239:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018247:	05 78 01 00 00       	add    eax,0x178
c001824c:	83 ec 0c             	sub    esp,0xc
c001824f:	50                   	push   eax
c0018250:	e8 9d 6a ff ff       	call   c000ecf2 <GDT::GDT()>
c0018255:	83 c4 10             	add    esp,0x10
c0018258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001825c:	05 7c 09 00 00       	add    eax,0x97c
c0018261:	83 ec 0c             	sub    esp,0xc
c0018264:	50                   	push   eax
c0018265:	e8 ea 6c ff ff       	call   c000ef54 <IDT::IDT()>
c001826a:	83 c4 10             	add    esp,0x10
c001826d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018271:	05 7c 11 00 00       	add    eax,0x117c
c0018276:	83 ec 0c             	sub    esp,0xc
c0018279:	50                   	push   eax
c001827a:	e8 41 8e ff ff       	call   c00110c0 <TSS::TSS()>
c001827f:	83 c4 10             	add    esp,0x10
c0018282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018286:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c001828d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018291:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001829b:	90                   	nop
c001829c:	83 c4 0c             	add    esp,0xc
c001829f:	c3                   	ret    

c00182a0 <CPU::displayFeatures()>:
c00182a0:	53                   	push   ebx
c00182a1:	83 ec 10             	sub    esp,0x10
c00182a4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00182a8:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00182ae:	68 6c 9f 02 c0       	push   0xc0029f6c
c00182b3:	e8 c7 a4 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c00182b8:	59                   	pop    ecx
c00182b9:	58                   	pop    eax
c00182ba:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c00182c0:	50                   	push   eax
c00182c1:	68 7d 9f 02 c0       	push   0xc0029f7d
c00182c6:	e8 b4 a4 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c00182cb:	58                   	pop    eax
c00182cc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00182d2:	5a                   	pop    edx
c00182d3:	c1 e8 0e             	shr    eax,0xe
c00182d6:	0f b6 c0             	movzx  eax,al
c00182d9:	50                   	push   eax
c00182da:	68 8e 9f 02 c0       	push   0xc0029f8e
c00182df:	e8 9b a4 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c00182e4:	59                   	pop    ecx
c00182e5:	58                   	pop    eax
c00182e6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00182ec:	66 c1 e8 06          	shr    ax,0x6
c00182f0:	0f b6 c0             	movzx  eax,al
c00182f3:	50                   	push   eax
c00182f4:	68 9f 9f 02 c0       	push   0xc0029f9f
c00182f9:	e8 81 a4 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c00182fe:	c7 04 24 3b a4 02 c0 	mov    DWORD PTR [esp],0xc002a43b
c0018305:	e8 75 a4 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001830a:	83 c4 10             	add    esp,0x10
c001830d:	b8 0d 8b 02 c0       	mov    eax,0xc0028b0d
c0018312:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018319:	74 05                	je     c0018320 <CPU::displayFeatures()+0x80>
c001831b:	b8 09 8b 02 c0       	mov    eax,0xc0028b09
c0018320:	52                   	push   edx
c0018321:	52                   	push   edx
c0018322:	50                   	push   eax
c0018323:	68 b0 9f 02 c0       	push   0xc0029fb0
c0018328:	e8 52 a4 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001832d:	83 c4 10             	add    esp,0x10
c0018330:	b8 09 8b 02 c0       	mov    eax,0xc0028b09
c0018335:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c001833c:	78 05                	js     c0018343 <CPU::displayFeatures()+0xa3>
c001833e:	b8 0d 8b 02 c0       	mov    eax,0xc0028b0d
c0018343:	51                   	push   ecx
c0018344:	51                   	push   ecx
c0018345:	50                   	push   eax
c0018346:	68 c7 9f 02 c0       	push   0xc0029fc7
c001834b:	e8 2f a4 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0018350:	83 c4 10             	add    esp,0x10
c0018353:	b8 09 8b 02 c0       	mov    eax,0xc0028b09
c0018358:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c001835f:	75 05                	jne    c0018366 <CPU::displayFeatures()+0xc6>
c0018361:	b8 0d 8b 02 c0       	mov    eax,0xc0028b0d
c0018366:	52                   	push   edx
c0018367:	52                   	push   edx
c0018368:	50                   	push   eax
c0018369:	68 de 9f 02 c0       	push   0xc0029fde
c001836e:	e8 0c a4 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0018373:	83 c4 10             	add    esp,0x10
c0018376:	b8 09 8b 02 c0       	mov    eax,0xc0028b09
c001837b:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018382:	75 05                	jne    c0018389 <CPU::displayFeatures()+0xe9>
c0018384:	b8 0d 8b 02 c0       	mov    eax,0xc0028b0d
c0018389:	51                   	push   ecx
c001838a:	51                   	push   ecx
c001838b:	50                   	push   eax
c001838c:	68 f5 9f 02 c0       	push   0xc0029ff5
c0018391:	e8 e9 a3 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0018396:	83 c4 10             	add    esp,0x10
c0018399:	b8 09 8b 02 c0       	mov    eax,0xc0028b09
c001839e:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00183a5:	75 05                	jne    c00183ac <CPU::displayFeatures()+0x10c>
c00183a7:	b8 0d 8b 02 c0       	mov    eax,0xc0028b0d
c00183ac:	52                   	push   edx
c00183ad:	52                   	push   edx
c00183ae:	50                   	push   eax
c00183af:	68 0c a0 02 c0       	push   0xc002a00c
c00183b4:	e8 c6 a3 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c00183b9:	83 c4 10             	add    esp,0x10
c00183bc:	b8 09 8b 02 c0       	mov    eax,0xc0028b09
c00183c1:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00183c8:	75 05                	jne    c00183cf <CPU::displayFeatures()+0x12f>
c00183ca:	b8 0d 8b 02 c0       	mov    eax,0xc0028b0d
c00183cf:	51                   	push   ecx
c00183d0:	51                   	push   ecx
c00183d1:	50                   	push   eax
c00183d2:	68 23 a0 02 c0       	push   0xc002a023
c00183d7:	e8 a3 a3 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c00183dc:	83 c4 10             	add    esp,0x10
c00183df:	b8 09 8b 02 c0       	mov    eax,0xc0028b09
c00183e4:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00183eb:	75 05                	jne    c00183f2 <CPU::displayFeatures()+0x152>
c00183ed:	b8 0d 8b 02 c0       	mov    eax,0xc0028b0d
c00183f2:	52                   	push   edx
c00183f3:	52                   	push   edx
c00183f4:	50                   	push   eax
c00183f5:	68 3a a0 02 c0       	push   0xc002a03a
c00183fa:	e8 80 a3 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c00183ff:	83 c4 10             	add    esp,0x10
c0018402:	b8 09 8b 02 c0       	mov    eax,0xc0028b09
c0018407:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c001840e:	75 05                	jne    c0018415 <CPU::displayFeatures()+0x175>
c0018410:	b8 0d 8b 02 c0       	mov    eax,0xc0028b0d
c0018415:	51                   	push   ecx
c0018416:	51                   	push   ecx
c0018417:	50                   	push   eax
c0018418:	68 51 a0 02 c0       	push   0xc002a051
c001841d:	e8 5d a3 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0018422:	83 c4 10             	add    esp,0x10
c0018425:	b8 09 8b 02 c0       	mov    eax,0xc0028b09
c001842a:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018431:	75 05                	jne    c0018438 <CPU::displayFeatures()+0x198>
c0018433:	b8 0d 8b 02 c0       	mov    eax,0xc0028b0d
c0018438:	52                   	push   edx
c0018439:	52                   	push   edx
c001843a:	50                   	push   eax
c001843b:	68 68 a0 02 c0       	push   0xc002a068
c0018440:	e8 3a a3 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0018445:	83 c4 10             	add    esp,0x10
c0018448:	b8 09 8b 02 c0       	mov    eax,0xc0028b09
c001844d:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018454:	75 05                	jne    c001845b <CPU::displayFeatures()+0x1bb>
c0018456:	b8 0d 8b 02 c0       	mov    eax,0xc0028b0d
c001845b:	51                   	push   ecx
c001845c:	51                   	push   ecx
c001845d:	50                   	push   eax
c001845e:	68 7f a0 02 c0       	push   0xc002a07f
c0018463:	e8 17 a3 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0018468:	83 c4 10             	add    esp,0x10
c001846b:	b8 09 8b 02 c0       	mov    eax,0xc0028b09
c0018470:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018477:	75 05                	jne    c001847e <CPU::displayFeatures()+0x1de>
c0018479:	b8 0d 8b 02 c0       	mov    eax,0xc0028b0d
c001847e:	52                   	push   edx
c001847f:	52                   	push   edx
c0018480:	50                   	push   eax
c0018481:	68 96 a0 02 c0       	push   0xc002a096
c0018486:	e8 f4 a2 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001848b:	83 c4 10             	add    esp,0x10
c001848e:	b8 09 8b 02 c0       	mov    eax,0xc0028b09
c0018493:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c001849a:	75 05                	jne    c00184a1 <CPU::displayFeatures()+0x201>
c001849c:	b8 0d 8b 02 c0       	mov    eax,0xc0028b0d
c00184a1:	51                   	push   ecx
c00184a2:	51                   	push   ecx
c00184a3:	50                   	push   eax
c00184a4:	68 ad a0 02 c0       	push   0xc002a0ad
c00184a9:	e8 d1 a2 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c00184ae:	83 c4 10             	add    esp,0x10
c00184b1:	b8 09 8b 02 c0       	mov    eax,0xc0028b09
c00184b6:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c00184bd:	75 05                	jne    c00184c4 <CPU::displayFeatures()+0x224>
c00184bf:	b8 0d 8b 02 c0       	mov    eax,0xc0028b0d
c00184c4:	52                   	push   edx
c00184c5:	52                   	push   edx
c00184c6:	50                   	push   eax
c00184c7:	68 c4 a0 02 c0       	push   0xc002a0c4
c00184cc:	e8 ae a2 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c00184d1:	83 c4 10             	add    esp,0x10
c00184d4:	b8 09 8b 02 c0       	mov    eax,0xc0028b09
c00184d9:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00184e0:	78 05                	js     c00184e7 <CPU::displayFeatures()+0x247>
c00184e2:	b8 0d 8b 02 c0       	mov    eax,0xc0028b0d
c00184e7:	51                   	push   ecx
c00184e8:	51                   	push   ecx
c00184e9:	50                   	push   eax
c00184ea:	68 db a0 02 c0       	push   0xc002a0db
c00184ef:	e8 8b a2 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c00184f4:	83 c4 10             	add    esp,0x10
c00184f7:	b8 09 8b 02 c0       	mov    eax,0xc0028b09
c00184fc:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018503:	75 05                	jne    c001850a <CPU::displayFeatures()+0x26a>
c0018505:	b8 0d 8b 02 c0       	mov    eax,0xc0028b0d
c001850a:	52                   	push   edx
c001850b:	52                   	push   edx
c001850c:	50                   	push   eax
c001850d:	68 f2 a0 02 c0       	push   0xc002a0f2
c0018512:	e8 68 a2 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0018517:	83 c4 18             	add    esp,0x18
c001851a:	5b                   	pop    ebx
c001851b:	c3                   	ret    

c001851c <CPU::detectFeatures()>:
c001851c:	55                   	push   ebp
c001851d:	57                   	push   edi
c001851e:	56                   	push   esi
c001851f:	53                   	push   ebx
c0018520:	83 ec 50             	sub    esp,0x50
c0018523:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018527:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018531:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018538:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c001853e:	6a 0d                	push   0xd
c0018540:	6a 00                	push   0x0
c0018542:	57                   	push   edi
c0018543:	e8 43 81 fe ff       	call   c000068b <memset>
c0018548:	83 c4 10             	add    esp,0x10
c001854b:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c0018550:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018557:	0f 84 20 09 00 00    	je     c0018e7d <CPU::detectFeatures()+0x961>
c001855d:	83 ec 0c             	sub    esp,0xc
c0018560:	6a 10                	push   0x10
c0018562:	e8 f3 fb ff ff       	call   c001815a <CPU::cpuidCheckEDX(unsigned int)>
c0018567:	83 e0 01             	and    eax,0x1
c001856a:	8d 14 00             	lea    edx,[eax+eax*1]
c001856d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018573:	83 e0 fd             	and    eax,0xfffffffd
c0018576:	09 d0                	or     eax,edx
c0018578:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001857e:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018585:	e8 d0 fb ff ff       	call   c001815a <CPU::cpuidCheckEDX(unsigned int)>
c001858a:	83 e0 01             	and    eax,0x1
c001858d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018594:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001859a:	83 e0 fb             	and    eax,0xfffffffb
c001859d:	09 d0                	or     eax,edx
c001859f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00185a5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00185ac:	e8 a9 fb ff ff       	call   c001815a <CPU::cpuidCheckEDX(unsigned int)>
c00185b1:	83 e0 01             	and    eax,0x1
c00185b4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00185bb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00185c1:	83 e0 f7             	and    eax,0xfffffff7
c00185c4:	09 d0                	or     eax,edx
c00185c6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00185cc:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00185d3:	e8 82 fb ff ff       	call   c001815a <CPU::cpuidCheckEDX(unsigned int)>
c00185d8:	83 e0 01             	and    eax,0x1
c00185db:	c1 e0 04             	shl    eax,0x4
c00185de:	88 c2                	mov    dl,al
c00185e0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00185e6:	83 e0 ef             	and    eax,0xffffffef
c00185e9:	09 d0                	or     eax,edx
c00185eb:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00185f1:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00185f8:	e8 5d fb ff ff       	call   c001815a <CPU::cpuidCheckEDX(unsigned int)>
c00185fd:	83 e0 01             	and    eax,0x1
c0018600:	c1 e0 05             	shl    eax,0x5
c0018603:	88 c2                	mov    dl,al
c0018605:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001860b:	83 e0 df             	and    eax,0xffffffdf
c001860e:	09 d0                	or     eax,edx
c0018610:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018616:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001861d:	e8 38 fb ff ff       	call   c001815a <CPU::cpuidCheckEDX(unsigned int)>
c0018622:	83 e0 01             	and    eax,0x1
c0018625:	8d 14 00             	lea    edx,[eax+eax*1]
c0018628:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001862e:	83 e0 fd             	and    eax,0xfffffffd
c0018631:	09 d0                	or     eax,edx
c0018633:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018639:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018640:	e8 15 fb ff ff       	call   c001815a <CPU::cpuidCheckEDX(unsigned int)>
c0018645:	83 e0 01             	and    eax,0x1
c0018648:	c1 e0 06             	shl    eax,0x6
c001864b:	88 c2                	mov    dl,al
c001864d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018653:	83 e0 bf             	and    eax,0xffffffbf
c0018656:	09 d0                	or     eax,edx
c0018658:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001865e:	58                   	pop    eax
c001865f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018663:	56                   	push   esi
c0018664:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018668:	55                   	push   ebp
c0018669:	8d 44 24 28          	lea    eax,[esp+0x28]
c001866d:	50                   	push   eax
c001866e:	8d 54 24 28          	lea    edx,[esp+0x28]
c0018672:	52                   	push   edx
c0018673:	6a 00                	push   0x0
c0018675:	e8 5c fa ff ff       	call   c00180d6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001867a:	83 c4 1c             	add    esp,0x1c
c001867d:	6a 04                	push   0x4
c001867f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018683:	50                   	push   eax
c0018684:	57                   	push   edi
c0018685:	e8 cb 7f fe ff       	call   c0000655 <memcpy>
c001868a:	83 c4 0c             	add    esp,0xc
c001868d:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0018693:	6a 04                	push   0x4
c0018695:	56                   	push   esi
c0018696:	50                   	push   eax
c0018697:	e8 b9 7f fe ff       	call   c0000655 <memcpy>
c001869c:	83 c4 0c             	add    esp,0xc
c001869f:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00186a5:	6a 04                	push   0x4
c00186a7:	55                   	push   ebp
c00186a8:	50                   	push   eax
c00186a9:	e8 a7 7f fe ff       	call   c0000655 <memcpy>
c00186ae:	58                   	pop    eax
c00186af:	5a                   	pop    edx
c00186b0:	68 09 a1 02 c0       	push   0xc002a109
c00186b5:	57                   	push   edi
c00186b6:	e8 c0 80 fe ff       	call   c000077b <strcmp>
c00186bb:	83 c4 10             	add    esp,0x10
c00186be:	85 c0                	test   eax,eax
c00186c0:	75 0f                	jne    c00186d1 <CPU::detectFeatures()+0x1b5>
c00186c2:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00186cc:	e9 22 02 00 00       	jmp    c00188f3 <CPU::detectFeatures()+0x3d7>
c00186d1:	50                   	push   eax
c00186d2:	50                   	push   eax
c00186d3:	68 16 a1 02 c0       	push   0xc002a116
c00186d8:	57                   	push   edi
c00186d9:	e8 9d 80 fe ff       	call   c000077b <strcmp>
c00186de:	83 c4 10             	add    esp,0x10
c00186e1:	85 c0                	test   eax,eax
c00186e3:	74 dd                	je     c00186c2 <CPU::detectFeatures()+0x1a6>
c00186e5:	51                   	push   ecx
c00186e6:	51                   	push   ecx
c00186e7:	68 23 a1 02 c0       	push   0xc002a123
c00186ec:	57                   	push   edi
c00186ed:	e8 89 80 fe ff       	call   c000077b <strcmp>
c00186f2:	83 c4 10             	add    esp,0x10
c00186f5:	85 c0                	test   eax,eax
c00186f7:	74 2a                	je     c0018723 <CPU::detectFeatures()+0x207>
c00186f9:	52                   	push   edx
c00186fa:	52                   	push   edx
c00186fb:	68 30 a1 02 c0       	push   0xc002a130
c0018700:	57                   	push   edi
c0018701:	e8 75 80 fe ff       	call   c000077b <strcmp>
c0018706:	83 c4 10             	add    esp,0x10
c0018709:	85 c0                	test   eax,eax
c001870b:	74 16                	je     c0018723 <CPU::detectFeatures()+0x207>
c001870d:	50                   	push   eax
c001870e:	50                   	push   eax
c001870f:	68 3d a1 02 c0       	push   0xc002a13d
c0018714:	57                   	push   edi
c0018715:	e8 61 80 fe ff       	call   c000077b <strcmp>
c001871a:	83 c4 10             	add    esp,0x10
c001871d:	85 c0                	test   eax,eax
c001871f:	74 48                	je     c0018769 <CPU::detectFeatures()+0x24d>
c0018721:	eb 0f                	jmp    c0018732 <CPU::detectFeatures()+0x216>
c0018723:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001872d:	e9 c1 01 00 00       	jmp    c00188f3 <CPU::detectFeatures()+0x3d7>
c0018732:	50                   	push   eax
c0018733:	50                   	push   eax
c0018734:	68 4a a1 02 c0       	push   0xc002a14a
c0018739:	57                   	push   edi
c001873a:	e8 3c 80 fe ff       	call   c000077b <strcmp>
c001873f:	83 c4 10             	add    esp,0x10
c0018742:	85 c0                	test   eax,eax
c0018744:	74 23                	je     c0018769 <CPU::detectFeatures()+0x24d>
c0018746:	50                   	push   eax
c0018747:	50                   	push   eax
c0018748:	68 57 a1 02 c0       	push   0xc002a157
c001874d:	57                   	push   edi
c001874e:	e8 28 80 fe ff       	call   c000077b <strcmp>
c0018753:	83 c4 10             	add    esp,0x10
c0018756:	85 c0                	test   eax,eax
c0018758:	75 1e                	jne    c0018778 <CPU::detectFeatures()+0x25c>
c001875a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018764:	e9 8a 01 00 00       	jmp    c00188f3 <CPU::detectFeatures()+0x3d7>
c0018769:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018773:	e9 7b 01 00 00       	jmp    c00188f3 <CPU::detectFeatures()+0x3d7>
c0018778:	50                   	push   eax
c0018779:	50                   	push   eax
c001877a:	68 64 a1 02 c0       	push   0xc002a164
c001877f:	57                   	push   edi
c0018780:	e8 f6 7f fe ff       	call   c000077b <strcmp>
c0018785:	83 c4 10             	add    esp,0x10
c0018788:	85 c0                	test   eax,eax
c001878a:	75 0f                	jne    c001879b <CPU::detectFeatures()+0x27f>
c001878c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018796:	e9 58 01 00 00       	jmp    c00188f3 <CPU::detectFeatures()+0x3d7>
c001879b:	50                   	push   eax
c001879c:	50                   	push   eax
c001879d:	68 23 a1 02 c0       	push   0xc002a123
c00187a2:	57                   	push   edi
c00187a3:	e8 d3 7f fe ff       	call   c000077b <strcmp>
c00187a8:	83 c4 10             	add    esp,0x10
c00187ab:	85 c0                	test   eax,eax
c00187ad:	75 0f                	jne    c00187be <CPU::detectFeatures()+0x2a2>
c00187af:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00187b9:	e9 35 01 00 00       	jmp    c00188f3 <CPU::detectFeatures()+0x3d7>
c00187be:	50                   	push   eax
c00187bf:	50                   	push   eax
c00187c0:	68 71 a1 02 c0       	push   0xc002a171
c00187c5:	57                   	push   edi
c00187c6:	e8 b0 7f fe ff       	call   c000077b <strcmp>
c00187cb:	83 c4 10             	add    esp,0x10
c00187ce:	85 c0                	test   eax,eax
c00187d0:	75 0f                	jne    c00187e1 <CPU::detectFeatures()+0x2c5>
c00187d2:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00187dc:	e9 12 01 00 00       	jmp    c00188f3 <CPU::detectFeatures()+0x3d7>
c00187e1:	51                   	push   ecx
c00187e2:	51                   	push   ecx
c00187e3:	68 7e a1 02 c0       	push   0xc002a17e
c00187e8:	57                   	push   edi
c00187e9:	e8 8d 7f fe ff       	call   c000077b <strcmp>
c00187ee:	83 c4 10             	add    esp,0x10
c00187f1:	85 c0                	test   eax,eax
c00187f3:	75 0f                	jne    c0018804 <CPU::detectFeatures()+0x2e8>
c00187f5:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00187ff:	e9 ef 00 00 00       	jmp    c00188f3 <CPU::detectFeatures()+0x3d7>
c0018804:	52                   	push   edx
c0018805:	52                   	push   edx
c0018806:	68 8b a1 02 c0       	push   0xc002a18b
c001880b:	57                   	push   edi
c001880c:	e8 6a 7f fe ff       	call   c000077b <strcmp>
c0018811:	83 c4 10             	add    esp,0x10
c0018814:	85 c0                	test   eax,eax
c0018816:	75 0f                	jne    c0018827 <CPU::detectFeatures()+0x30b>
c0018818:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018822:	e9 cc 00 00 00       	jmp    c00188f3 <CPU::detectFeatures()+0x3d7>
c0018827:	50                   	push   eax
c0018828:	50                   	push   eax
c0018829:	68 98 a1 02 c0       	push   0xc002a198
c001882e:	57                   	push   edi
c001882f:	e8 47 7f fe ff       	call   c000077b <strcmp>
c0018834:	83 c4 10             	add    esp,0x10
c0018837:	85 c0                	test   eax,eax
c0018839:	75 0f                	jne    c001884a <CPU::detectFeatures()+0x32e>
c001883b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018845:	e9 a9 00 00 00       	jmp    c00188f3 <CPU::detectFeatures()+0x3d7>
c001884a:	50                   	push   eax
c001884b:	50                   	push   eax
c001884c:	68 a5 a1 02 c0       	push   0xc002a1a5
c0018851:	57                   	push   edi
c0018852:	e8 24 7f fe ff       	call   c000077b <strcmp>
c0018857:	83 c4 10             	add    esp,0x10
c001885a:	85 c0                	test   eax,eax
c001885c:	75 0f                	jne    c001886d <CPU::detectFeatures()+0x351>
c001885e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018868:	e9 86 00 00 00       	jmp    c00188f3 <CPU::detectFeatures()+0x3d7>
c001886d:	50                   	push   eax
c001886e:	50                   	push   eax
c001886f:	68 b2 a1 02 c0       	push   0xc002a1b2
c0018874:	57                   	push   edi
c0018875:	e8 01 7f fe ff       	call   c000077b <strcmp>
c001887a:	83 c4 10             	add    esp,0x10
c001887d:	85 c0                	test   eax,eax
c001887f:	75 0c                	jne    c001888d <CPU::detectFeatures()+0x371>
c0018881:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001888b:	eb 66                	jmp    c00188f3 <CPU::detectFeatures()+0x3d7>
c001888d:	50                   	push   eax
c001888e:	50                   	push   eax
c001888f:	68 bf a1 02 c0       	push   0xc002a1bf
c0018894:	57                   	push   edi
c0018895:	e8 e1 7e fe ff       	call   c000077b <strcmp>
c001889a:	83 c4 10             	add    esp,0x10
c001889d:	85 c0                	test   eax,eax
c001889f:	75 0c                	jne    c00188ad <CPU::detectFeatures()+0x391>
c00188a1:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00188ab:	eb 46                	jmp    c00188f3 <CPU::detectFeatures()+0x3d7>
c00188ad:	50                   	push   eax
c00188ae:	50                   	push   eax
c00188af:	68 cc a1 02 c0       	push   0xc002a1cc
c00188b4:	57                   	push   edi
c00188b5:	e8 c1 7e fe ff       	call   c000077b <strcmp>
c00188ba:	83 c4 10             	add    esp,0x10
c00188bd:	85 c0                	test   eax,eax
c00188bf:	74 e0                	je     c00188a1 <CPU::detectFeatures()+0x385>
c00188c1:	50                   	push   eax
c00188c2:	50                   	push   eax
c00188c3:	68 d9 a1 02 c0       	push   0xc002a1d9
c00188c8:	57                   	push   edi
c00188c9:	e8 ad 7e fe ff       	call   c000077b <strcmp>
c00188ce:	83 c4 10             	add    esp,0x10
c00188d1:	85 c0                	test   eax,eax
c00188d3:	74 cc                	je     c00188a1 <CPU::detectFeatures()+0x385>
c00188d5:	51                   	push   ecx
c00188d6:	51                   	push   ecx
c00188d7:	68 e6 a1 02 c0       	push   0xc002a1e6
c00188dc:	57                   	push   edi
c00188dd:	e8 99 7e fe ff       	call   c000077b <strcmp>
c00188e2:	83 c4 10             	add    esp,0x10
c00188e5:	85 c0                	test   eax,eax
c00188e7:	74 b8                	je     c00188a1 <CPU::detectFeatures()+0x385>
c00188e9:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00188f3:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00188f8:	0f 86 be 00 00 00    	jbe    c00189bc <CPU::detectFeatures()+0x4a0>
c00188fe:	83 ec 0c             	sub    esp,0xc
c0018901:	68 80 00 00 00       	push   0x80
c0018906:	e8 ab f8 ff ff       	call   c00181b6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001890b:	83 e0 01             	and    eax,0x1
c001890e:	c1 e0 06             	shl    eax,0x6
c0018911:	88 c2                	mov    dl,al
c0018913:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018919:	83 e0 bf             	and    eax,0xffffffbf
c001891c:	09 d0                	or     eax,edx
c001891e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018924:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001892b:	e8 86 f8 ff ff       	call   c00181b6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018930:	83 e0 01             	and    eax,0x1
c0018933:	c1 e0 04             	shl    eax,0x4
c0018936:	88 c2                	mov    dl,al
c0018938:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001893e:	83 e0 ef             	and    eax,0xffffffef
c0018941:	09 d0                	or     eax,edx
c0018943:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018949:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018950:	e8 61 f8 ff ff       	call   c00181b6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018955:	c1 e0 07             	shl    eax,0x7
c0018958:	88 c2                	mov    dl,al
c001895a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018960:	83 e0 7f             	and    eax,0x7f
c0018963:	09 d0                	or     eax,edx
c0018965:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001896b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018972:	e8 6d f8 ff ff       	call   c00181e4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018977:	83 e0 01             	and    eax,0x1
c001897a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018981:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018987:	83 e0 f7             	and    eax,0xfffffff7
c001898a:	09 d0                	or     eax,edx
c001898c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018992:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018999:	e8 46 f8 ff ff       	call   c00181e4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001899e:	83 c4 10             	add    esp,0x10
c00189a1:	83 e0 01             	and    eax,0x1
c00189a4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00189ab:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00189b1:	83 e0 fb             	and    eax,0xfffffffb
c00189b4:	09 d0                	or     eax,edx
c00189b6:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00189bc:	83 ec 0c             	sub    esp,0xc
c00189bf:	56                   	push   esi
c00189c0:	55                   	push   ebp
c00189c1:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00189c5:	57                   	push   edi
c00189c6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00189ca:	50                   	push   eax
c00189cb:	6a 01                	push   0x1
c00189cd:	e8 04 f7 ff ff       	call   c00180d6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00189d2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00189d6:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00189dc:	88 ca                	mov    dl,cl
c00189de:	83 e0 f0             	and    eax,0xfffffff0
c00189e1:	83 e2 0f             	and    edx,0xf
c00189e4:	09 d0                	or     eax,edx
c00189e6:	88 ca                	mov    dl,cl
c00189e8:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00189ee:	c0 ea 04             	shr    dl,0x4
c00189f1:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00189f5:	0f b6 c2             	movzx  eax,dl
c00189f8:	83 c4 20             	add    esp,0x20
c00189fb:	c1 e0 06             	shl    eax,0x6
c00189fe:	89 c5                	mov    ebp,eax
c0018a00:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018a06:	66 25 3f c0          	and    ax,0xc03f
c0018a0a:	09 e8                	or     eax,ebp
c0018a0c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018a13:	89 c8                	mov    eax,ecx
c0018a15:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0018a1b:	c1 e8 08             	shr    eax,0x8
c0018a1e:	83 e2 3f             	and    edx,0x3f
c0018a21:	83 e0 0f             	and    eax,0xf
c0018a24:	89 c5                	mov    ebp,eax
c0018a26:	c1 e5 06             	shl    ebp,0x6
c0018a29:	09 d5                	or     ebp,edx
c0018a2b:	89 ea                	mov    edx,ebp
c0018a2d:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018a33:	88 c2                	mov    dl,al
c0018a35:	c0 ea 02             	shr    dl,0x2
c0018a38:	89 d5                	mov    ebp,edx
c0018a3a:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0018a40:	83 e2 c0             	and    edx,0xffffffc0
c0018a43:	09 d5                	or     ebp,edx
c0018a45:	89 ea                	mov    edx,ebp
c0018a47:	89 cd                	mov    ebp,ecx
c0018a49:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018a4f:	c1 ed 0c             	shr    ebp,0xc
c0018a52:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0018a58:	83 e5 03             	and    ebp,0x3
c0018a5b:	83 e2 cf             	and    edx,0xffffffcf
c0018a5e:	c1 e5 04             	shl    ebp,0x4
c0018a61:	09 d5                	or     ebp,edx
c0018a63:	3c 06                	cmp    al,0x6
c0018a65:	89 ea                	mov    edx,ebp
c0018a67:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018a6d:	74 04                	je     c0018a73 <CPU::detectFeatures()+0x557>
c0018a6f:	3c 0f                	cmp    al,0xf
c0018a71:	75 5c                	jne    c0018acf <CPU::detectFeatures()+0x5b3>
c0018a73:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018a77:	89 cd                	mov    ebp,ecx
c0018a79:	c1 ed 10             	shr    ebp,0x10
c0018a7c:	c1 e5 04             	shl    ebp,0x4
c0018a7f:	09 ea                	or     edx,ebp
c0018a81:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018a87:	0f b6 d2             	movzx  edx,dl
c0018a8a:	66 81 e5 3f c0       	and    bp,0xc03f
c0018a8f:	c1 e2 06             	shl    edx,0x6
c0018a92:	09 ea                	or     edx,ebp
c0018a94:	3c 0f                	cmp    al,0xf
c0018a96:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018a9d:	75 30                	jne    c0018acf <CPU::detectFeatures()+0x5b3>
c0018a9f:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018aa5:	c1 e9 14             	shr    ecx,0x14
c0018aa8:	83 e0 3f             	and    eax,0x3f
c0018aab:	83 c1 0f             	add    ecx,0xf
c0018aae:	88 ca                	mov    dl,cl
c0018ab0:	c0 e9 02             	shr    cl,0x2
c0018ab3:	c1 e2 06             	shl    edx,0x6
c0018ab6:	09 d0                	or     eax,edx
c0018ab8:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018abe:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018ac4:	83 e0 c0             	and    eax,0xffffffc0
c0018ac7:	09 c1                	or     ecx,eax
c0018ac9:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018acf:	83 ec 0c             	sub    esp,0xc
c0018ad2:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018ad9:	56                   	push   esi
c0018ada:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ade:	50                   	push   eax
c0018adf:	57                   	push   edi
c0018ae0:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018ae4:	55                   	push   ebp
c0018ae5:	68 00 00 00 80       	push   0x80000000
c0018aea:	e8 e7 f5 ff ff       	call   c00180d6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018aef:	83 c4 20             	add    esp,0x20
c0018af2:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018afa:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018afe:	76 1e                	jbe    c0018b1e <CPU::detectFeatures()+0x602>
c0018b00:	83 ec 0c             	sub    esp,0xc
c0018b03:	56                   	push   esi
c0018b04:	50                   	push   eax
c0018b05:	57                   	push   edi
c0018b06:	55                   	push   ebp
c0018b07:	68 01 00 00 80       	push   0x80000001
c0018b0c:	e8 c5 f5 ff ff       	call   c00180d6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018b11:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018b1b:	83 c4 20             	add    esp,0x20
c0018b1e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018b24:	83 f8 01             	cmp    eax,0x1
c0018b27:	75 6f                	jne    c0018b98 <CPU::detectFeatures()+0x67c>
c0018b29:	51                   	push   ecx
c0018b2a:	51                   	push   ecx
c0018b2b:	68 f2 a1 02 c0       	push   0xc002a1f2
c0018b30:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018b34:	56                   	push   esi
c0018b35:	e8 f0 7b fe ff       	call   c000072a <strcpy>
c0018b3a:	5f                   	pop    edi
c0018b3b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b41:	5d                   	pop    ebp
c0018b42:	66 c1 e8 06          	shr    ax,0x6
c0018b46:	0f b6 c0             	movzx  eax,al
c0018b49:	50                   	push   eax
c0018b4a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b50:	c1 e8 0e             	shr    eax,0xe
c0018b53:	0f b6 c0             	movzx  eax,al
c0018b56:	50                   	push   eax
c0018b57:	e8 24 f2 ff ff       	call   c0017d80 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018b5c:	5a                   	pop    edx
c0018b5d:	59                   	pop    ecx
c0018b5e:	50                   	push   eax
c0018b5f:	56                   	push   esi
c0018b60:	e8 7c 7c fe ff       	call   c00007e1 <strcat>
c0018b65:	5f                   	pop    edi
c0018b66:	5d                   	pop    ebp
c0018b67:	56                   	push   esi
c0018b68:	53                   	push   ebx
c0018b69:	e8 1a b2 ff ff       	call   c0013d88 <Device::setName(char const*)>
c0018b6e:	58                   	pop    eax
c0018b6f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018b75:	5a                   	pop    edx
c0018b76:	68 f9 a1 02 c0       	push   0xc002a1f9
c0018b7b:	50                   	push   eax
c0018b7c:	e8 fa 7b fe ff       	call   c000077b <strcmp>
c0018b81:	83 c4 10             	add    esp,0x10
c0018b84:	85 c0                	test   eax,eax
c0018b86:	0f 85 71 03 00 00    	jne    c0018efd <CPU::detectFeatures()+0x9e1>
c0018b8c:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018b93:	e9 65 03 00 00       	jmp    c0018efd <CPU::detectFeatures()+0x9e1>
c0018b98:	83 f8 02             	cmp    eax,0x2
c0018b9b:	0f 85 b5 00 00 00    	jne    c0018c56 <CPU::detectFeatures()+0x73a>
c0018ba1:	57                   	push   edi
c0018ba2:	57                   	push   edi
c0018ba3:	68 0b a2 02 c0       	push   0xc002a20b
c0018ba8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018bac:	56                   	push   esi
c0018bad:	e8 78 7b fe ff       	call   c000072a <strcpy>
c0018bb2:	5d                   	pop    ebp
c0018bb3:	58                   	pop    eax
c0018bb4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018bba:	66 c1 e8 06          	shr    ax,0x6
c0018bbe:	0f b6 c0             	movzx  eax,al
c0018bc1:	50                   	push   eax
c0018bc2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018bc8:	c1 e8 0e             	shr    eax,0xe
c0018bcb:	0f b6 c0             	movzx  eax,al
c0018bce:	50                   	push   eax
c0018bcf:	e8 18 f0 ff ff       	call   c0017bec <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018bd4:	5a                   	pop    edx
c0018bd5:	59                   	pop    ecx
c0018bd6:	50                   	push   eax
c0018bd7:	56                   	push   esi
c0018bd8:	e8 04 7c fe ff       	call   c00007e1 <strcat>
c0018bdd:	5f                   	pop    edi
c0018bde:	5d                   	pop    ebp
c0018bdf:	56                   	push   esi
c0018be0:	53                   	push   ebx
c0018be1:	e8 a2 b1 ff ff       	call   c0013d88 <Device::setName(char const*)>
c0018be6:	58                   	pop    eax
c0018be7:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018bed:	5a                   	pop    edx
c0018bee:	68 10 a2 02 c0       	push   0xc002a210
c0018bf3:	50                   	push   eax
c0018bf4:	e8 82 7b fe ff       	call   c000077b <strcmp>
c0018bf9:	83 c4 10             	add    esp,0x10
c0018bfc:	85 c0                	test   eax,eax
c0018bfe:	75 20                	jne    c0018c20 <CPU::detectFeatures()+0x704>
c0018c00:	8b 15 e8 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cbe8
c0018c06:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018c0c:	a8 01                	test   al,0x1
c0018c0e:	74 10                	je     c0018c20 <CPU::detectFeatures()+0x704>
c0018c10:	83 e0 fe             	and    eax,0xfffffffe
c0018c13:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018c19:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018c20:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018c26:	c1 e8 0e             	shr    eax,0xe
c0018c29:	3c 05                	cmp    al,0x5
c0018c2b:	0f 85 cc 02 00 00    	jne    c0018efd <CPU::detectFeatures()+0x9e1>
c0018c31:	56                   	push   esi
c0018c32:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018c38:	83 e0 0f             	and    eax,0xf
c0018c3b:	50                   	push   eax
c0018c3c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018c42:	66 c1 e8 06          	shr    ax,0x6
c0018c46:	0f b6 c0             	movzx  eax,al
c0018c49:	50                   	push   eax
c0018c4a:	6a 05                	push   0x5
c0018c4c:	e8 11 f4 ff ff       	call   c0018062 <CPU::AMD_K6_writeback(int, int, int)>
c0018c51:	e9 1f 02 00 00       	jmp    c0018e75 <CPU::detectFeatures()+0x959>
c0018c56:	8d 50 fd             	lea    edx,[eax-0x3]
c0018c59:	83 fa 01             	cmp    edx,0x1
c0018c5c:	76 09                	jbe    c0018c67 <CPU::detectFeatures()+0x74b>
c0018c5e:	83 f8 06             	cmp    eax,0x6
c0018c61:	0f 85 91 01 00 00    	jne    c0018df8 <CPU::detectFeatures()+0x8dc>
c0018c67:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018c6d:	c1 ea 0e             	shr    edx,0xe
c0018c70:	80 fa 05             	cmp    dl,0x5
c0018c73:	75 7b                	jne    c0018cf0 <CPU::detectFeatures()+0x7d4>
c0018c75:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018c7b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018c80:	66 81 fa 00 01       	cmp    dx,0x100
c0018c85:	75 0c                	jne    c0018c93 <CPU::detectFeatures()+0x777>
c0018c87:	51                   	push   ecx
c0018c88:	51                   	push   ecx
c0018c89:	68 17 a2 02 c0       	push   0xc002a217
c0018c8e:	e9 dc 01 00 00       	jmp    c0018e6f <CPU::detectFeatures()+0x953>
c0018c93:	66 81 fa 00 02       	cmp    dx,0x200
c0018c98:	75 0c                	jne    c0018ca6 <CPU::detectFeatures()+0x78a>
c0018c9a:	52                   	push   edx
c0018c9b:	52                   	push   edx
c0018c9c:	68 2a a2 02 c0       	push   0xc002a22a
c0018ca1:	e9 c9 01 00 00       	jmp    c0018e6f <CPU::detectFeatures()+0x953>
c0018ca6:	66 81 fa 40 02       	cmp    dx,0x240
c0018cab:	75 0c                	jne    c0018cb9 <CPU::detectFeatures()+0x79d>
c0018cad:	50                   	push   eax
c0018cae:	50                   	push   eax
c0018caf:	68 3c a2 02 c0       	push   0xc002a23c
c0018cb4:	e9 b6 01 00 00       	jmp    c0018e6f <CPU::detectFeatures()+0x953>
c0018cb9:	83 f8 06             	cmp    eax,0x6
c0018cbc:	75 0c                	jne    c0018cca <CPU::detectFeatures()+0x7ae>
c0018cbe:	50                   	push   eax
c0018cbf:	50                   	push   eax
c0018cc0:	68 4e a2 02 c0       	push   0xc002a24e
c0018cc5:	e9 a5 01 00 00       	jmp    c0018e6f <CPU::detectFeatures()+0x953>
c0018cca:	83 f8 04             	cmp    eax,0x4
c0018ccd:	75 0c                	jne    c0018cdb <CPU::detectFeatures()+0x7bf>
c0018ccf:	50                   	push   eax
c0018cd0:	50                   	push   eax
c0018cd1:	68 5a a2 02 c0       	push   0xc002a25a
c0018cd6:	e9 94 01 00 00       	jmp    c0018e6f <CPU::detectFeatures()+0x953>
c0018cdb:	83 f8 03             	cmp    eax,0x3
c0018cde:	0f 85 19 02 00 00    	jne    c0018efd <CPU::detectFeatures()+0x9e1>
c0018ce4:	50                   	push   eax
c0018ce5:	50                   	push   eax
c0018ce6:	68 62 a2 02 c0       	push   0xc002a262
c0018ceb:	e9 7f 01 00 00       	jmp    c0018e6f <CPU::detectFeatures()+0x953>
c0018cf0:	80 fa 06             	cmp    dl,0x6
c0018cf3:	0f 85 db 00 00 00    	jne    c0018dd4 <CPU::detectFeatures()+0x8b8>
c0018cf9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018cff:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018d04:	66 81 fa 80 01       	cmp    dx,0x180
c0018d09:	75 0c                	jne    c0018d17 <CPU::detectFeatures()+0x7fb>
c0018d0b:	50                   	push   eax
c0018d0c:	50                   	push   eax
c0018d0d:	68 6d a2 02 c0       	push   0xc002a26d
c0018d12:	e9 58 01 00 00       	jmp    c0018e6f <CPU::detectFeatures()+0x953>
c0018d17:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0018d1d:	66 f7 c1 80 ff       	test   cx,0xff80
c0018d22:	75 0c                	jne    c0018d30 <CPU::detectFeatures()+0x814>
c0018d24:	50                   	push   eax
c0018d25:	50                   	push   eax
c0018d26:	68 7d a2 02 c0       	push   0xc002a27d
c0018d2b:	e9 3f 01 00 00       	jmp    c0018e6f <CPU::detectFeatures()+0x953>
c0018d30:	66 81 fa 40 02       	cmp    dx,0x240
c0018d35:	75 0c                	jne    c0018d43 <CPU::detectFeatures()+0x827>
c0018d37:	55                   	push   ebp
c0018d38:	55                   	push   ebp
c0018d39:	68 84 a2 02 c0       	push   0xc002a284
c0018d3e:	e9 2c 01 00 00       	jmp    c0018e6f <CPU::detectFeatures()+0x953>
c0018d43:	66 81 fa 80 02       	cmp    dx,0x280
c0018d48:	75 0c                	jne    c0018d56 <CPU::detectFeatures()+0x83a>
c0018d4a:	57                   	push   edi
c0018d4b:	57                   	push   edi
c0018d4c:	68 8d a2 02 c0       	push   0xc002a28d
c0018d51:	e9 19 01 00 00       	jmp    c0018e6f <CPU::detectFeatures()+0x953>
c0018d56:	66 81 fa 40 03       	cmp    dx,0x340
c0018d5b:	74 ed                	je     c0018d4a <CPU::detectFeatures()+0x82e>
c0018d5d:	66 81 fa c0 03       	cmp    dx,0x3c0
c0018d62:	75 0c                	jne    c0018d70 <CPU::detectFeatures()+0x854>
c0018d64:	56                   	push   esi
c0018d65:	56                   	push   esi
c0018d66:	68 94 a2 02 c0       	push   0xc002a294
c0018d6b:	e9 ff 00 00 00       	jmp    c0018e6f <CPU::detectFeatures()+0x953>
c0018d70:	83 f8 06             	cmp    eax,0x6
c0018d73:	0f 84 45 ff ff ff    	je     c0018cbe <CPU::detectFeatures()+0x7a2>
c0018d79:	83 f8 04             	cmp    eax,0x4
c0018d7c:	0f 84 4d ff ff ff    	je     c0018ccf <CPU::detectFeatures()+0x7b3>
c0018d82:	83 f8 03             	cmp    eax,0x3
c0018d85:	0f 85 72 01 00 00    	jne    c0018efd <CPU::detectFeatures()+0x9e1>
c0018d8b:	51                   	push   ecx
c0018d8c:	51                   	push   ecx
c0018d8d:	68 9d a2 02 c0       	push   0xc002a29d
c0018d92:	53                   	push   ebx
c0018d93:	e8 f0 af ff ff       	call   c0013d88 <Device::setName(char const*)>
c0018d98:	b1 c1                	mov    cl,0xc1
c0018d9a:	88 c8                	mov    al,cl
c0018d9c:	e6 22                	out    0x22,al
c0018d9e:	e4 23                	in     al,0x23
c0018da0:	88 c2                	mov    dl,al
c0018da2:	88 c8                	mov    al,cl
c0018da4:	e6 22                	out    0x22,al
c0018da6:	88 d0                	mov    al,dl
c0018da8:	83 c8 10             	or     eax,0x10
c0018dab:	e6 23                	out    0x23,al
c0018dad:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018db4:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018db7:	89 d0                	mov    eax,edx
c0018db9:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0018dbf:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0018dc3:	40                   	inc    eax
c0018dc4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0018dca:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018dcf:	e9 a1 00 00 00       	jmp    c0018e75 <CPU::detectFeatures()+0x959>
c0018dd4:	83 f8 06             	cmp    eax,0x6
c0018dd7:	0f 84 e1 fe ff ff    	je     c0018cbe <CPU::detectFeatures()+0x7a2>
c0018ddd:	83 f8 04             	cmp    eax,0x4
c0018de0:	0f 84 e9 fe ff ff    	je     c0018ccf <CPU::detectFeatures()+0x7b3>
c0018de6:	83 f8 03             	cmp    eax,0x3
c0018de9:	0f 85 0e 01 00 00    	jne    c0018efd <CPU::detectFeatures()+0x9e1>
c0018def:	52                   	push   edx
c0018df0:	52                   	push   edx
c0018df1:	68 a8 a2 02 c0       	push   0xc002a2a8
c0018df6:	eb 77                	jmp    c0018e6f <CPU::detectFeatures()+0x953>
c0018df8:	83 f8 07             	cmp    eax,0x7
c0018dfb:	75 09                	jne    c0018e06 <CPU::detectFeatures()+0x8ea>
c0018dfd:	50                   	push   eax
c0018dfe:	50                   	push   eax
c0018dff:	68 b2 a2 02 c0       	push   0xc002a2b2
c0018e04:	eb 69                	jmp    c0018e6f <CPU::detectFeatures()+0x953>
c0018e06:	83 f8 0a             	cmp    eax,0xa
c0018e09:	75 09                	jne    c0018e14 <CPU::detectFeatures()+0x8f8>
c0018e0b:	50                   	push   eax
c0018e0c:	50                   	push   eax
c0018e0d:	68 bd a2 02 c0       	push   0xc002a2bd
c0018e12:	eb 5b                	jmp    c0018e6f <CPU::detectFeatures()+0x953>
c0018e14:	83 f8 0b             	cmp    eax,0xb
c0018e17:	75 09                	jne    c0018e22 <CPU::detectFeatures()+0x906>
c0018e19:	50                   	push   eax
c0018e1a:	50                   	push   eax
c0018e1b:	68 c5 a2 02 c0       	push   0xc002a2c5
c0018e20:	eb 4d                	jmp    c0018e6f <CPU::detectFeatures()+0x953>
c0018e22:	83 f8 08             	cmp    eax,0x8
c0018e25:	75 09                	jne    c0018e30 <CPU::detectFeatures()+0x914>
c0018e27:	50                   	push   eax
c0018e28:	50                   	push   eax
c0018e29:	68 ce a2 02 c0       	push   0xc002a2ce
c0018e2e:	eb 3f                	jmp    c0018e6f <CPU::detectFeatures()+0x953>
c0018e30:	83 f8 09             	cmp    eax,0x9
c0018e33:	75 09                	jne    c0018e3e <CPU::detectFeatures()+0x922>
c0018e35:	50                   	push   eax
c0018e36:	50                   	push   eax
c0018e37:	68 d6 a2 02 c0       	push   0xc002a2d6
c0018e3c:	eb 31                	jmp    c0018e6f <CPU::detectFeatures()+0x953>
c0018e3e:	83 f8 05             	cmp    eax,0x5
c0018e41:	75 09                	jne    c0018e4c <CPU::detectFeatures()+0x930>
c0018e43:	50                   	push   eax
c0018e44:	50                   	push   eax
c0018e45:	68 de a2 02 c0       	push   0xc002a2de
c0018e4a:	eb 23                	jmp    c0018e6f <CPU::detectFeatures()+0x953>
c0018e4c:	83 f8 0c             	cmp    eax,0xc
c0018e4f:	75 09                	jne    c0018e5a <CPU::detectFeatures()+0x93e>
c0018e51:	55                   	push   ebp
c0018e52:	55                   	push   ebp
c0018e53:	68 ec a2 02 c0       	push   0xc002a2ec
c0018e58:	eb 15                	jmp    c0018e6f <CPU::detectFeatures()+0x953>
c0018e5a:	83 f8 0d             	cmp    eax,0xd
c0018e5d:	75 09                	jne    c0018e68 <CPU::detectFeatures()+0x94c>
c0018e5f:	57                   	push   edi
c0018e60:	57                   	push   edi
c0018e61:	68 f7 a2 02 c0       	push   0xc002a2f7
c0018e66:	eb 07                	jmp    c0018e6f <CPU::detectFeatures()+0x953>
c0018e68:	56                   	push   esi
c0018e69:	56                   	push   esi
c0018e6a:	68 0b a3 02 c0       	push   0xc002a30b
c0018e6f:	53                   	push   ebx
c0018e70:	e8 13 af ff ff       	call   c0013d88 <Device::setName(char const*)>
c0018e75:	83 c4 10             	add    esp,0x10
c0018e78:	e9 80 00 00 00       	jmp    c0018efd <CPU::detectFeatures()+0x9e1>
c0018e7d:	51                   	push   ecx
c0018e7e:	51                   	push   ecx
c0018e7f:	68 57 a1 02 c0       	push   0xc002a157
c0018e84:	57                   	push   edi
c0018e85:	e8 a0 78 fe ff       	call   c000072a <strcpy>
c0018e8a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018e94:	e8 ca 73 fe ff       	call   c0000263 <is486>
c0018e99:	83 c4 10             	add    esp,0x10
c0018e9c:	85 c0                	test   eax,eax
c0018e9e:	74 2b                	je     c0018ecb <CPU::detectFeatures()+0x9af>
c0018ea0:	52                   	push   edx
c0018ea1:	52                   	push   edx
c0018ea2:	68 17 a3 02 c0       	push   0xc002a317
c0018ea7:	53                   	push   ebx
c0018ea8:	e8 db ae ff ff       	call   c0013d88 <Device::setName(char const*)>
c0018ead:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018eb4:	0f 20 c0             	mov    eax,cr0
c0018eb7:	83 e0 14             	and    eax,0x14
c0018eba:	83 c4 10             	add    esp,0x10
c0018ebd:	83 f8 04             	cmp    eax,0x4
c0018ec0:	75 1f                	jne    c0018ee1 <CPU::detectFeatures()+0x9c5>
c0018ec2:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0018ec9:	eb 32                	jmp    c0018efd <CPU::detectFeatures()+0x9e1>
c0018ecb:	50                   	push   eax
c0018ecc:	50                   	push   eax
c0018ecd:	68 22 a3 02 c0       	push   0xc002a322
c0018ed2:	53                   	push   ebx
c0018ed3:	e8 b0 ae ff ff       	call   c0013d88 <Device::setName(char const*)>
c0018ed8:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0018edf:	eb d3                	jmp    c0018eb4 <CPU::detectFeatures()+0x998>
c0018ee1:	e8 58 73 fe ff       	call   c000023e <hasLegacyFPU>
c0018ee6:	83 e0 01             	and    eax,0x1
c0018ee9:	8d 14 00             	lea    edx,[eax+eax*1]
c0018eec:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018ef2:	83 e0 fd             	and    eax,0xfffffffd
c0018ef5:	09 d0                	or     eax,edx
c0018ef7:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018efd:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0018f04:	83 c4 4c             	add    esp,0x4c
c0018f07:	5b                   	pop    ebx
c0018f08:	5e                   	pop    esi
c0018f09:	5f                   	pop    edi
c0018f0a:	5d                   	pop    ebp
c0018f0b:	c3                   	ret    

c0018f0c <CPU::setupSMEP()>:
c0018f0c:	0f 20 e0             	mov    eax,cr4
c0018f0f:	0d 00 00 10 00       	or     eax,0x100000
c0018f14:	0f 22 e0             	mov    cr4,eax
c0018f17:	c3                   	ret    

c0018f18 <CPU::setupUMIP()>:
c0018f18:	0f 20 e0             	mov    eax,cr4
c0018f1b:	80 cc 08             	or     ah,0x8
c0018f1e:	0f 22 e0             	mov    cr4,eax
c0018f21:	c3                   	ret    

c0018f22 <CPU::setupTSC()>:
c0018f22:	0f 20 e0             	mov    eax,cr4
c0018f25:	83 c8 04             	or     eax,0x4
c0018f28:	0f 22 e0             	mov    cr4,eax
c0018f2b:	c3                   	ret    

c0018f2c <CPU::setupLargePages()>:
c0018f2c:	0f 20 e0             	mov    eax,cr4
c0018f2f:	83 c8 10             	or     eax,0x10
c0018f32:	0f 22 e0             	mov    cr4,eax
c0018f35:	c3                   	ret    

c0018f36 <CPU::setupPAT()>:
c0018f36:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c0018f3b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0018f42:	74 2c                	je     c0018f70 <CPU::setupPAT()+0x3a>
c0018f44:	53                   	push   ebx
c0018f45:	83 ec 10             	sub    esp,0x10
c0018f48:	68 77 02 00 00       	push   0x277
c0018f4d:	50                   	push   eax
c0018f4e:	e8 2f 5b ff ff       	call   c000ea82 <Computer::rdmsr(unsigned int)>
c0018f53:	83 e2 f8             	and    edx,0xfffffff8
c0018f56:	83 ca 01             	or     edx,0x1
c0018f59:	52                   	push   edx
c0018f5a:	50                   	push   eax
c0018f5b:	68 77 02 00 00       	push   0x277
c0018f60:	ff 35 e8 cb 02 c0    	push   DWORD PTR ds:0xc002cbe8
c0018f66:	e8 43 5b ff ff       	call   c000eaae <Computer::wrmsr(unsigned int, unsigned long long)>
c0018f6b:	83 c4 28             	add    esp,0x28
c0018f6e:	5b                   	pop    ebx
c0018f6f:	c3                   	ret    
c0018f70:	c3                   	ret    
c0018f71:	90                   	nop

c0018f72 <CPU::setupMTRR()>:
c0018f72:	c3                   	ret    
c0018f73:	90                   	nop

c0018f74 <CPU::setupGlobalPages()>:
c0018f74:	0f 20 e0             	mov    eax,cr4
c0018f77:	0c 80                	or     al,0x80
c0018f79:	0f 22 e0             	mov    cr4,eax
c0018f7c:	c3                   	ret    
c0018f7d:	90                   	nop

c0018f7e <CPU::allowUsermodeDataAccess()>:
c0018f7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f82:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018f89:	74 03                	je     c0018f8e <CPU::allowUsermodeDataAccess()+0x10>
c0018f8b:	0f 01 cb             	stac   
c0018f8e:	c3                   	ret    
c0018f8f:	90                   	nop

c0018f90 <CPU::prohibitUsermodeDataAccess()>:
c0018f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f94:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018f9b:	74 03                	je     c0018fa0 <CPU::prohibitUsermodeDataAccess()+0x10>
c0018f9d:	0f 01 ca             	clac   
c0018fa0:	c3                   	ret    
c0018fa1:	90                   	nop

c0018fa2 <CPU::setupSMAP()>:
c0018fa2:	0f 20 e0             	mov    eax,cr4
c0018fa5:	0d 00 00 20 00       	or     eax,0x200000
c0018faa:	0f 22 e0             	mov    cr4,eax
c0018fad:	eb e1                	jmp    c0018f90 <CPU::prohibitUsermodeDataAccess()>
c0018faf:	90                   	nop

c0018fb0 <CPU::setupFeatures()>:
c0018fb0:	83 ec 0c             	sub    esp,0xc
c0018fb3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018fb7:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0018fbe:	74 07                	je     c0018fc7 <CPU::setupFeatures()+0x17>
c0018fc0:	52                   	push   edx
c0018fc1:	e8 46 ff ff ff       	call   c0018f0c <CPU::setupSMEP()>
c0018fc6:	58                   	pop    eax
c0018fc7:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0018fce:	74 07                	je     c0018fd7 <CPU::setupFeatures()+0x27>
c0018fd0:	52                   	push   edx
c0018fd1:	e8 cc ff ff ff       	call   c0018fa2 <CPU::setupSMAP()>
c0018fd6:	58                   	pop    eax
c0018fd7:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0018fde:	74 07                	je     c0018fe7 <CPU::setupFeatures()+0x37>
c0018fe0:	52                   	push   edx
c0018fe1:	e8 32 ff ff ff       	call   c0018f18 <CPU::setupUMIP()>
c0018fe6:	58                   	pop    eax
c0018fe7:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0018fee:	74 07                	je     c0018ff7 <CPU::setupFeatures()+0x47>
c0018ff0:	52                   	push   edx
c0018ff1:	e8 2c ff ff ff       	call   c0018f22 <CPU::setupTSC()>
c0018ff6:	58                   	pop    eax
c0018ff7:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0018ffe:	74 07                	je     c0019007 <CPU::setupFeatures()+0x57>
c0019000:	52                   	push   edx
c0019001:	e8 26 ff ff ff       	call   c0018f2c <CPU::setupLargePages()>
c0019006:	59                   	pop    ecx
c0019007:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c001900e:	74 07                	je     c0019017 <CPU::setupFeatures()+0x67>
c0019010:	52                   	push   edx
c0019011:	e8 5e ff ff ff       	call   c0018f74 <CPU::setupGlobalPages()>
c0019016:	58                   	pop    eax
c0019017:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c001901e:	74 0c                	je     c001902c <CPU::setupFeatures()+0x7c>
c0019020:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019024:	83 c4 0c             	add    esp,0xc
c0019027:	e9 0a ff ff ff       	jmp    c0018f36 <CPU::setupPAT()>
c001902c:	83 c4 0c             	add    esp,0xc
c001902f:	c3                   	ret    

c0019030 <CPU::open(int, int, void*)>:
c0019030:	57                   	push   edi
c0019031:	56                   	push   esi
c0019032:	53                   	push   ebx
c0019033:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019037:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001903b:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019041:	83 ec 0c             	sub    esp,0xc
c0019044:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001904a:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019050:	50                   	push   eax
c0019051:	e8 18 5d ff ff       	call   c000ed6e <GDT::setup()>
c0019056:	83 c4 0c             	add    esp,0xc
c0019059:	6a 00                	push   0x0
c001905b:	68 ef be ad de       	push   0xdeadbeef
c0019060:	57                   	push   edi
c0019061:	e8 9a 80 ff ff       	call   c0011100 <TSS::setup(unsigned long, unsigned long)>
c0019066:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019069:	e8 72 80 ff ff       	call   c00110e0 <TSS::flush()>
c001906e:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019074:	89 04 24             	mov    DWORD PTR [esp],eax
c0019077:	e8 4e 5f ff ff       	call   c000efca <IDT::setup()>
c001907c:	b8 00 04 00 00       	mov    eax,0x400
c0019081:	0f 23 f8             	mov    db7,eax
c0019084:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001908e:	e8 ba 6a ff ff       	call   c000fb4d <Phys::allocatePage()>
c0019093:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019099:	89 30                	mov    DWORD PTR [eax],esi
c001909b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00190a1:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00190a4:	58                   	pop    eax
c00190a5:	5a                   	pop    edx
c00190a6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00190ac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00190b0:	e8 7d 90 ff ff       	call   c0012132 <VAS::setCPUSpecific(unsigned long)>
c00190b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00190b8:	e8 5f f4 ff ff       	call   c001851c <CPU::detectFeatures()>
c00190bd:	e8 aa bf ff ff       	call   c001506c <setupInterruptController()>
c00190c2:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00190c8:	a1 00 cc 02 c0       	mov    eax,ds:0xc002cc00
c00190cd:	83 e0 10             	and    eax,0x10
c00190d0:	83 f8 01             	cmp    eax,0x1
c00190d3:	19 c0                	sbb    eax,eax
c00190d5:	83 e0 46             	and    eax,0x46
c00190d8:	83 c0 1e             	add    eax,0x1e
c00190db:	89 04 24             	mov    DWORD PTR [esp],eax
c00190de:	e8 41 d4 ff ff       	call   c0016524 <setupTimer(int)>
c00190e3:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00190e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00190ec:	e8 bf fe ff ff       	call   c0018fb0 <CPU::setupFeatures()>
c00190f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00190f4:	e8 a7 f1 ff ff       	call   c00182a0 <CPU::displayFeatures()>
c00190f9:	83 c4 10             	add    esp,0x10
c00190fc:	31 c0                	xor    eax,eax
c00190fe:	5b                   	pop    ebx
c00190ff:	5e                   	pop    esi
c0019100:	5f                   	pop    edi
c0019101:	c3                   	ret    

c0019102 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019102:	57                   	push   edi
c0019103:	56                   	push   esi
c0019104:	53                   	push   ebx
c0019105:	51                   	push   ecx
c0019106:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001910a:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c001910d:	0f 02 c0             	lar    eax,ax
c0019110:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019113:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019117:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c001911a:	88 ca                	mov    dl,cl
c001911c:	c0 ea 06             	shr    dl,0x6
c001911f:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019123:	89 ca                	mov    edx,ecx
c0019125:	66 c1 ea 03          	shr    dx,0x3
c0019129:	83 e2 07             	and    edx,0x7
c001912c:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019131:	88 17                	mov    BYTE PTR [edi],dl
c0019133:	0f 84 a6 01 00 00    	je     c00192df <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019139:	83 e1 07             	and    ecx,0x7
c001913c:	80 f9 04             	cmp    cl,0x4
c001913f:	0f 84 98 00 00 00    	je     c00191dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019145:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001914a:	0f 95 c0             	setne  al
c001914d:	80 f9 05             	cmp    cl,0x5
c0019150:	0f 95 c2             	setne  dl
c0019153:	08 c2                	or     dl,al
c0019155:	74 79                	je     c00191d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019157:	84 c9                	test   cl,cl
c0019159:	75 05                	jne    c0019160 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c001915b:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001915e:	eb 3c                	jmp    c001919c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019160:	80 f9 01             	cmp    cl,0x1
c0019163:	75 05                	jne    c001916a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019165:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019168:	eb 32                	jmp    c001919c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001916a:	80 f9 02             	cmp    cl,0x2
c001916d:	75 05                	jne    c0019174 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c001916f:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019172:	eb 28                	jmp    c001919c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019174:	31 c0                	xor    eax,eax
c0019176:	80 f9 03             	cmp    cl,0x3
c0019179:	75 05                	jne    c0019180 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001917b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001917e:	eb 1c                	jmp    c001919c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019180:	80 f9 05             	cmp    cl,0x5
c0019183:	75 05                	jne    c001918a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019185:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019188:	eb 12                	jmp    c001919c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001918a:	80 f9 06             	cmp    cl,0x6
c001918d:	75 05                	jne    c0019194 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c001918f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019192:	eb 08                	jmp    c001919c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019194:	80 f9 07             	cmp    cl,0x7
c0019197:	75 03                	jne    c001919c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019199:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001919c:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00191a1:	75 10                	jne    c00191b3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00191a3:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00191a7:	b9 03 00 00 00       	mov    ecx,0x3
c00191ac:	01 d0                	add    eax,edx
c00191ae:	e9 37 01 00 00       	jmp    c00192ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00191b3:	b9 02 00 00 00       	mov    ecx,0x2
c00191b8:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00191bd:	0f 85 27 01 00 00    	jne    c00192ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00191c3:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00191c6:	b9 06 00 00 00       	mov    ecx,0x6
c00191cb:	e9 1a 01 00 00       	jmp    c00192ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00191d0:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00191d3:	b9 06 00 00 00       	mov    ecx,0x6
c00191d8:	e9 0f 01 00 00       	jmp    c00192ec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00191dd:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00191e0:	88 ca                	mov    dl,cl
c00191e2:	c0 ea 06             	shr    dl,0x6
c00191e5:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00191e9:	89 ca                	mov    edx,ecx
c00191eb:	66 c1 ea 03          	shr    dx,0x3
c00191ef:	83 e2 07             	and    edx,0x7
c00191f2:	80 e1 07             	and    cl,0x7
c00191f5:	75 05                	jne    c00191fc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00191f7:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00191fa:	eb 4c                	jmp    c0019248 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191fc:	80 f9 01             	cmp    cl,0x1
c00191ff:	75 05                	jne    c0019206 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019201:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019204:	eb 42                	jmp    c0019248 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019206:	80 f9 02             	cmp    cl,0x2
c0019209:	75 05                	jne    c0019210 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c001920b:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001920e:	eb 38                	jmp    c0019248 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019210:	80 f9 03             	cmp    cl,0x3
c0019213:	75 05                	jne    c001921a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019215:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019218:	eb 2e                	jmp    c0019248 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001921a:	80 f9 04             	cmp    cl,0x4
c001921d:	75 12                	jne    c0019231 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001921f:	f6 c4 60             	test   ah,0x60
c0019222:	75 08                	jne    c001922c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019224:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019227:	8d 78 14             	lea    edi,[eax+0x14]
c001922a:	eb 1c                	jmp    c0019248 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001922c:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001922f:	eb 17                	jmp    c0019248 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019231:	80 f9 05             	cmp    cl,0x5
c0019234:	75 05                	jne    c001923b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019236:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019239:	eb 0d                	jmp    c0019248 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001923b:	80 f9 06             	cmp    cl,0x6
c001923e:	75 05                	jne    c0019245 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019240:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019243:	eb 03                	jmp    c0019248 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019245:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019248:	84 d2                	test   dl,dl
c001924a:	75 05                	jne    c0019251 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001924c:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001924f:	eb 3c                	jmp    c001928d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019251:	80 fa 01             	cmp    dl,0x1
c0019254:	75 05                	jne    c001925b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019256:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019259:	eb 32                	jmp    c001928d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001925b:	80 fa 02             	cmp    dl,0x2
c001925e:	75 05                	jne    c0019265 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019260:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019263:	eb 28                	jmp    c001928d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019265:	80 fa 03             	cmp    dl,0x3
c0019268:	75 05                	jne    c001926f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001926a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001926d:	eb 1e                	jmp    c001928d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001926f:	31 c0                	xor    eax,eax
c0019271:	80 fa 04             	cmp    dl,0x4
c0019274:	74 17                	je     c001928d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019276:	80 fa 05             	cmp    dl,0x5
c0019279:	75 05                	jne    c0019280 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001927b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001927e:	eb 0d                	jmp    c001928d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019280:	80 fa 06             	cmp    dl,0x6
c0019283:	75 05                	jne    c001928a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019285:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019288:	eb 03                	jmp    c001928d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001928a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001928d:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019292:	0f 94 c2             	sete   dl
c0019295:	80 f9 05             	cmp    cl,0x5
c0019298:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001929c:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00192a1:	d3 e0                	shl    eax,cl
c00192a3:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00192a7:	74 0a                	je     c00192b3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00192a9:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00192ac:	b9 07 00 00 00       	mov    ecx,0x7
c00192b1:	eb 37                	jmp    c00192ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00192b3:	01 f8                	add    eax,edi
c00192b5:	b9 03 00 00 00       	mov    ecx,0x3
c00192ba:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00192bf:	74 2b                	je     c00192ec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00192c1:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00192c6:	75 0d                	jne    c00192d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00192c8:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00192cc:	01 c8                	add    eax,ecx
c00192ce:	b9 04 00 00 00       	mov    ecx,0x4
c00192d3:	eb 17                	jmp    c00192ec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00192d5:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00192d8:	b9 07 00 00 00       	mov    ecx,0x7
c00192dd:	eb 0d                	jmp    c00192ec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00192df:	b9 02 00 00 00       	mov    ecx,0x2
c00192e4:	b2 01                	mov    dl,0x1
c00192e6:	31 c0                	xor    eax,eax
c00192e8:	eb 02                	jmp    c00192ec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00192ea:	31 d2                	xor    edx,edx
c00192ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00192f0:	89 0b                	mov    DWORD PTR [ebx],ecx
c00192f2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00192f6:	88 11                	mov    BYTE PTR [ecx],dl
c00192f8:	5a                   	pop    edx
c00192f9:	5b                   	pop    ebx
c00192fa:	5e                   	pop    esi
c00192fb:	5f                   	pop    edi
c00192fc:	c3                   	ret    
c00192fd:	90                   	nop

c00192fe <EnvVarContainer::getEnv(char const*)>:
c00192fe:	57                   	push   edi
c00192ff:	56                   	push   esi
c0019300:	53                   	push   ebx
c0019301:	31 db                	xor    ebx,ebx
c0019303:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019307:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019309:	7e 2b                	jle    c0019336 <EnvVarContainer::getEnv(char const*)+0x38>
c001930b:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019312:	50                   	push   eax
c0019313:	50                   	push   eax
c0019314:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019317:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001931a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001931e:	e8 58 74 fe ff       	call   c000077b <strcmp>
c0019323:	83 c4 10             	add    esp,0x10
c0019326:	85 c0                	test   eax,eax
c0019328:	75 09                	jne    c0019333 <EnvVarContainer::getEnv(char const*)+0x35>
c001932a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001932d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019331:	eb 05                	jmp    c0019338 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019333:	43                   	inc    ebx
c0019334:	eb d1                	jmp    c0019307 <EnvVarContainer::getEnv(char const*)+0x9>
c0019336:	31 c0                	xor    eax,eax
c0019338:	5b                   	pop    ebx
c0019339:	5e                   	pop    esi
c001933a:	5f                   	pop    edi
c001933b:	c3                   	ret    

c001933c <EnvVarContainer::setEnv(char const*, char const*)>:
c001933c:	57                   	push   edi
c001933d:	56                   	push   esi
c001933e:	53                   	push   ebx
c001933f:	83 ec 1c             	sub    esp,0x1c
c0019342:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019346:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001934a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001934e:	57                   	push   edi
c001934f:	e8 54 73 fe ff       	call   c00006a8 <strlen>
c0019354:	40                   	inc    eax
c0019355:	89 04 24             	mov    DWORD PTR [esp],eax
c0019358:	e8 7d 61 ff ff       	call   c000f4da <malloc>
c001935d:	89 34 24             	mov    DWORD PTR [esp],esi
c0019360:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019364:	e8 3f 73 fe ff       	call   c00006a8 <strlen>
c0019369:	40                   	inc    eax
c001936a:	89 04 24             	mov    DWORD PTR [esp],eax
c001936d:	e8 68 61 ff ff       	call   c000f4da <malloc>
c0019372:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019375:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019379:	e8 2a 73 fe ff       	call   c00006a8 <strlen>
c001937e:	83 c4 0c             	add    esp,0xc
c0019381:	40                   	inc    eax
c0019382:	50                   	push   eax
c0019383:	6a 00                	push   0x0
c0019385:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019389:	e8 fd 72 fe ff       	call   c000068b <memset>
c001938e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019391:	e8 12 73 fe ff       	call   c00006a8 <strlen>
c0019396:	83 c4 0c             	add    esp,0xc
c0019399:	40                   	inc    eax
c001939a:	50                   	push   eax
c001939b:	57                   	push   edi
c001939c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00193a0:	e8 b0 72 fe ff       	call   c0000655 <memcpy>
c00193a5:	89 34 24             	mov    DWORD PTR [esp],esi
c00193a8:	e8 fb 72 fe ff       	call   c00006a8 <strlen>
c00193ad:	83 c4 0c             	add    esp,0xc
c00193b0:	40                   	inc    eax
c00193b1:	50                   	push   eax
c00193b2:	6a 00                	push   0x0
c00193b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00193b8:	e8 ce 72 fe ff       	call   c000068b <memset>
c00193bd:	89 34 24             	mov    DWORD PTR [esp],esi
c00193c0:	e8 e3 72 fe ff       	call   c00006a8 <strlen>
c00193c5:	83 c4 0c             	add    esp,0xc
c00193c8:	40                   	inc    eax
c00193c9:	50                   	push   eax
c00193ca:	56                   	push   esi
c00193cb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00193cf:	e8 81 72 fe ff       	call   c0000655 <memcpy>
c00193d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00193d6:	40                   	inc    eax
c00193d7:	89 03                	mov    DWORD PTR [ebx],eax
c00193d9:	c1 e0 03             	shl    eax,0x3
c00193dc:	5a                   	pop    edx
c00193dd:	59                   	pop    ecx
c00193de:	50                   	push   eax
c00193df:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00193e2:	e8 df 60 ff ff       	call   c000f4c6 <realloc>
c00193e7:	83 c4 0c             	add    esp,0xc
c00193ea:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00193ed:	6a 08                	push   0x8
c00193ef:	8d 54 24 10          	lea    edx,[esp+0x10]
c00193f3:	52                   	push   edx
c00193f4:	8b 13                	mov    edx,DWORD PTR [ebx]
c00193f6:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c00193fa:	50                   	push   eax
c00193fb:	e8 55 72 fe ff       	call   c0000655 <memcpy>
c0019400:	83 c4 20             	add    esp,0x20
c0019403:	5b                   	pop    ebx
c0019404:	5e                   	pop    esi
c0019405:	5f                   	pop    edi
c0019406:	c3                   	ret    
c0019407:	90                   	nop

c0019408 <EnvVarContainer::deleteEnv(char const*)>:
c0019408:	c3                   	ret    
c0019409:	90                   	nop

c001940a <EnvVarContainer::loadFrom(char const*, char const*)>:
c001940a:	55                   	push   ebp
c001940b:	57                   	push   edi
c001940c:	56                   	push   esi
c001940d:	53                   	push   ebx
c001940e:	81 ec 38 01 00 00    	sub    esp,0x138
c0019414:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001941b:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c0019422:	68 14 01 00 00       	push   0x114
c0019427:	e8 ae 60 ff ff       	call   c000f4da <malloc>
c001942c:	83 c4 0c             	add    esp,0xc
c001942f:	89 c7                	mov    edi,eax
c0019431:	ff 76 08             	push   DWORD PTR [esi+0x8]
c0019434:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001943b:	50                   	push   eax
c001943c:	e8 97 98 ff ff       	call   c0012cd8 <File::File(char const*, Process*)>
c0019441:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019444:	e8 61 9b ff ff       	call   c0012faa <File::exists()>
c0019449:	83 c4 10             	add    esp,0x10
c001944c:	84 c0                	test   al,al
c001944e:	75 31                	jne    c0019481 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019450:	51                   	push   ecx
c0019451:	51                   	push   ecx
c0019452:	6a 12                	push   0x12
c0019454:	57                   	push   edi
c0019455:	e8 e2 98 ff ff       	call   c0012d3c <File::open(FileOpenMode)>
c001945a:	8b 07                	mov    eax,DWORD PTR [edi]
c001945c:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001945f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019462:	e8 41 72 fe ff       	call   c00006a8 <strlen>
c0019467:	5a                   	pop    edx
c0019468:	31 d2                	xor    edx,edx
c001946a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001946e:	51                   	push   ecx
c001946f:	55                   	push   ebp
c0019470:	52                   	push   edx
c0019471:	50                   	push   eax
c0019472:	57                   	push   edi
c0019473:	ff d3                	call   ebx
c0019475:	83 c4 14             	add    esp,0x14
c0019478:	57                   	push   edi
c0019479:	e8 1c 99 ff ff       	call   c0012d9a <File::close()>
c001947e:	83 c4 10             	add    esp,0x10
c0019481:	31 db                	xor    ebx,ebx
c0019483:	50                   	push   eax
c0019484:	31 ed                	xor    ebp,ebp
c0019486:	68 00 01 00 00       	push   0x100
c001948b:	6a 00                	push   0x0
c001948d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019491:	50                   	push   eax
c0019492:	e8 f4 71 fe ff       	call   c000068b <memset>
c0019497:	58                   	pop    eax
c0019498:	5a                   	pop    edx
c0019499:	6a 01                	push   0x1
c001949b:	57                   	push   edi
c001949c:	e8 9b 98 ff ff       	call   c0012d3c <File::open(FileOpenMode)>
c00194a1:	83 c4 10             	add    esp,0x10
c00194a4:	83 ec 0c             	sub    esp,0xc
c00194a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00194a9:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00194ad:	51                   	push   ecx
c00194ae:	8d 54 24 23          	lea    edx,[esp+0x23]
c00194b2:	52                   	push   edx
c00194b3:	6a 00                	push   0x0
c00194b5:	6a 01                	push   0x1
c00194b7:	57                   	push   edi
c00194b8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00194bb:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00194bf:	83 c4 20             	add    esp,0x20
c00194c2:	3c 0d                	cmp    al,0xd
c00194c4:	0f 84 12 01 00 00    	je     c00195dc <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c00194ca:	85 db                	test   ebx,ebx
c00194cc:	0f 84 fd 00 00 00    	je     c00195cf <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00194d2:	3c 0a                	cmp    al,0xa
c00194d4:	74 13                	je     c00194e9 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c00194d6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00194db:	74 0c                	je     c00194e9 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c00194dd:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c00194e3:	0f 8e e6 00 00 00    	jle    c00195cf <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00194e9:	83 ec 0c             	sub    esp,0xc
c00194ec:	8d 53 01             	lea    edx,[ebx+0x1]
c00194ef:	29 dd                	sub    ebp,ebx
c00194f1:	52                   	push   edx
c00194f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00194f6:	e8 df 5f ff ff       	call   c000f4da <malloc>
c00194fb:	8d 4d 04             	lea    ecx,[ebp+0x4]
c00194fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019502:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0019505:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0019509:	e8 cc 5f ff ff       	call   c000f4da <malloc>
c001950e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019512:	83 c4 0c             	add    esp,0xc
c0019515:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019519:	52                   	push   edx
c001951a:	6a 00                	push   0x0
c001951c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019520:	e8 66 71 fe ff       	call   c000068b <memset>
c0019525:	83 c4 0c             	add    esp,0xc
c0019528:	53                   	push   ebx
c0019529:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001952d:	55                   	push   ebp
c001952e:	01 eb                	add    ebx,ebp
c0019530:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019534:	e8 1c 71 fe ff       	call   c0000655 <memcpy>
c0019539:	83 c4 0c             	add    esp,0xc
c001953c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019540:	51                   	push   ecx
c0019541:	6a 00                	push   0x0
c0019543:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019547:	e8 3f 71 fe ff       	call   c000068b <memset>
c001954c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001954f:	e8 54 71 fe ff       	call   c00006a8 <strlen>
c0019554:	83 c4 0c             	add    esp,0xc
c0019557:	50                   	push   eax
c0019558:	53                   	push   ebx
c0019559:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001955d:	e8 f3 70 fe ff       	call   c0000655 <memcpy>
c0019562:	5b                   	pop    ebx
c0019563:	58                   	pop    eax
c0019564:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019568:	68 5c a3 02 c0       	push   0xc002a35c
c001956d:	e8 0d 92 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0019572:	8b 06                	mov    eax,DWORD PTR [esi]
c0019574:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0019577:	40                   	inc    eax
c0019578:	83 c4 10             	add    esp,0x10
c001957b:	89 06                	mov    DWORD PTR [esi],eax
c001957d:	85 d2                	test   edx,edx
c001957f:	75 0c                	jne    c001958d <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c0019581:	83 ec 0c             	sub    esp,0xc
c0019584:	6a 08                	push   0x8
c0019586:	e8 4f 5f ff ff       	call   c000f4da <malloc>
c001958b:	eb 0c                	jmp    c0019599 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001958d:	c1 e0 03             	shl    eax,0x3
c0019590:	51                   	push   ecx
c0019591:	51                   	push   ecx
c0019592:	50                   	push   eax
c0019593:	52                   	push   edx
c0019594:	e8 2d 5f ff ff       	call   c000f4c6 <realloc>
c0019599:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001959c:	83 c4 10             	add    esp,0x10
c001959f:	31 db                	xor    ebx,ebx
c00195a1:	52                   	push   edx
c00195a2:	6a 08                	push   0x8
c00195a4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00195a8:	50                   	push   eax
c00195a9:	8b 16                	mov    edx,DWORD PTR [esi]
c00195ab:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00195ae:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c00195b2:	50                   	push   eax
c00195b3:	e8 9d 70 fe ff       	call   c0000655 <memcpy>
c00195b8:	83 c4 0c             	add    esp,0xc
c00195bb:	68 00 01 00 00       	push   0x100
c00195c0:	6a 00                	push   0x0
c00195c2:	55                   	push   ebp
c00195c3:	31 ed                	xor    ebp,ebp
c00195c5:	e8 c1 70 fe ff       	call   c000068b <memset>
c00195ca:	83 c4 10             	add    esp,0x10
c00195cd:	eb 0d                	jmp    c00195dc <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c00195cf:	3c 3d                	cmp    al,0x3d
c00195d1:	74 07                	je     c00195da <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c00195d3:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c00195d7:	45                   	inc    ebp
c00195d8:	eb 02                	jmp    c00195dc <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c00195da:	89 eb                	mov    ebx,ebp
c00195dc:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00195e1:	0f 85 bd fe ff ff    	jne    c00194a4 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c00195e7:	50                   	push   eax
c00195e8:	50                   	push   eax
c00195e9:	ff 36                	push   DWORD PTR [esi]
c00195eb:	68 6a a3 02 c0       	push   0xc002a36a
c00195f0:	e8 8a 91 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c00195f5:	81 c4 3c 01 00 00    	add    esp,0x13c
c00195fb:	5b                   	pop    ebx
c00195fc:	5e                   	pop    esi
c00195fd:	5f                   	pop    edi
c00195fe:	5d                   	pop    ebp
c00195ff:	c3                   	ret    

c0019600 <EnvVarContainer::__loadSystem()>:
c0019600:	83 ec 10             	sub    esp,0x10
c0019603:	68 20 c1 02 c0       	push   0xc002c120
c0019608:	68 95 a3 02 c0       	push   0xc002a395
c001960d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019611:	e8 f4 fd ff ff       	call   c001940a <EnvVarContainer::loadFrom(char const*, char const*)>
c0019616:	83 c4 1c             	add    esp,0x1c
c0019619:	c3                   	ret    

c001961a <EnvVarContainer::__loadUser()>:
c001961a:	c3                   	ret    
c001961b:	90                   	nop

c001961c <EnvVarContainer::EnvVarContainer(Process*)>:
c001961c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019620:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019626:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001962a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001962e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019635:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001963c:	90                   	nop
c001963d:	c3                   	ret    

c001963e <EnvVarContainer::~EnvVarContainer()>:
c001963e:	83 ec 0c             	sub    esp,0xc
c0019641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019645:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019648:	85 c0                	test   eax,eax
c001964a:	74 1d                	je     c0019669 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001964c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019650:	8b 00                	mov    eax,DWORD PTR [eax]
c0019652:	85 c0                	test   eax,eax
c0019654:	74 13                	je     c0019669 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001965a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001965d:	83 ec 0c             	sub    esp,0xc
c0019660:	50                   	push   eax
c0019661:	e8 84 5e ff ff       	call   c000f4ea <free>
c0019666:	83 c4 10             	add    esp,0x10
c0019669:	90                   	nop
c001966a:	83 c4 0c             	add    esp,0xc
c001966d:	c3                   	ret    

c001966e <Krnl::getEnv(Process*, char const*)>:
c001966e:	53                   	push   ebx
c001966f:	83 ec 08             	sub    esp,0x8
c0019672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019676:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001967a:	39 05 34 e1 02 c0    	cmp    DWORD PTR ds:0xc002e134,eax
c0019680:	74 04                	je     c0019686 <Krnl::getEnv(Process*, char const*)+0x18>
c0019682:	85 c0                	test   eax,eax
c0019684:	75 0b                	jne    c0019691 <Krnl::getEnv(Process*, char const*)+0x23>
c0019686:	a1 10 d7 02 c0       	mov    eax,ds:0xc002d710
c001968b:	85 c0                	test   eax,eax
c001968d:	75 19                	jne    c00196a8 <Krnl::getEnv(Process*, char const*)+0x3a>
c001968f:	eb 27                	jmp    c00196b8 <Krnl::getEnv(Process*, char const*)+0x4a>
c0019691:	52                   	push   edx
c0019692:	52                   	push   edx
c0019693:	53                   	push   ebx
c0019694:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001969a:	e8 5f fc ff ff       	call   c00192fe <EnvVarContainer::getEnv(char const*)>
c001969f:	83 c4 10             	add    esp,0x10
c00196a2:	85 c0                	test   eax,eax
c00196a4:	75 28                	jne    c00196ce <Krnl::getEnv(Process*, char const*)+0x60>
c00196a6:	eb de                	jmp    c0019686 <Krnl::getEnv(Process*, char const*)+0x18>
c00196a8:	52                   	push   edx
c00196a9:	52                   	push   edx
c00196aa:	53                   	push   ebx
c00196ab:	50                   	push   eax
c00196ac:	e8 4d fc ff ff       	call   c00192fe <EnvVarContainer::getEnv(char const*)>
c00196b1:	83 c4 10             	add    esp,0x10
c00196b4:	85 c0                	test   eax,eax
c00196b6:	75 16                	jne    c00196ce <Krnl::getEnv(Process*, char const*)+0x60>
c00196b8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00196bc:	a1 14 d7 02 c0       	mov    eax,ds:0xc002d714
c00196c1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00196c5:	83 c4 08             	add    esp,0x8
c00196c8:	5b                   	pop    ebx
c00196c9:	e9 30 fc ff ff       	jmp    c00192fe <EnvVarContainer::getEnv(char const*)>
c00196ce:	83 c4 08             	add    esp,0x8
c00196d1:	5b                   	pop    ebx
c00196d2:	c3                   	ret    

c00196d3 <Krnl::setEnvSystem(char const*, char const*)>:
c00196d3:	83 ec 10             	sub    esp,0x10
c00196d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196de:	ff 35 14 d7 02 c0    	push   DWORD PTR ds:0xc002d714
c00196e4:	e8 53 fc ff ff       	call   c001933c <EnvVarContainer::setEnv(char const*, char const*)>
c00196e9:	83 c4 1c             	add    esp,0x1c
c00196ec:	c3                   	ret    

c00196ed <Krnl::setEnvUser(char const*, char const*)>:
c00196ed:	a1 10 d7 02 c0       	mov    eax,ds:0xc002d710
c00196f2:	85 c0                	test   eax,eax
c00196f4:	74 15                	je     c001970b <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00196f6:	83 ec 10             	sub    esp,0x10
c00196f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019701:	50                   	push   eax
c0019702:	e8 35 fc ff ff       	call   c001933c <EnvVarContainer::setEnv(char const*, char const*)>
c0019707:	83 c4 1c             	add    esp,0x1c
c001970a:	c3                   	ret    
c001970b:	c3                   	ret    

c001970c <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001970c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019710:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019716:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001971a:	e9 1d fc ff ff       	jmp    c001933c <EnvVarContainer::setEnv(char const*, char const*)>

c001971f <Krnl::deleteEnvSystem(char const*)>:
c001971f:	c3                   	ret    

c0019720 <Krnl::deleteEnvUser(char const*)>:
c0019720:	c3                   	ret    

c0019721 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019721:	c3                   	ret    

c0019722 <Krnl::newProcessEnv(Process*)>:
c0019722:	83 ec 28             	sub    esp,0x28
c0019725:	6a 0c                	push   0xc
c0019727:	e8 ae 5d ff ff       	call   c000f4da <malloc>
c001972c:	5a                   	pop    edx
c001972d:	59                   	pop    ecx
c001972e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019732:	50                   	push   eax
c0019733:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019737:	e8 e0 fe ff ff       	call   c001961c <EnvVarContainer::EnvVarContainer(Process*)>
c001973c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019740:	83 c4 2c             	add    esp,0x2c
c0019743:	c3                   	ret    

c0019744 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019744:	56                   	push   esi
c0019745:	53                   	push   ebx
c0019746:	83 ec 10             	sub    esp,0x10
c0019749:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001974d:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c0019753:	6a 0c                	push   0xc
c0019755:	e8 80 5d ff ff       	call   c000f4da <malloc>
c001975a:	89 c3                	mov    ebx,eax
c001975c:	58                   	pop    eax
c001975d:	5a                   	pop    edx
c001975e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019762:	53                   	push   ebx
c0019763:	e8 b4 fe ff ff       	call   c001961c <EnvVarContainer::EnvVarContainer(Process*)>
c0019768:	8b 06                	mov    eax,DWORD PTR [esi]
c001976a:	89 03                	mov    DWORD PTR [ebx],eax
c001976c:	c1 e0 03             	shl    eax,0x3
c001976f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019772:	e8 63 5d ff ff       	call   c000f4da <malloc>
c0019777:	83 c4 0c             	add    esp,0xc
c001977a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001977d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001977f:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c0019786:	52                   	push   edx
c0019787:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001978a:	50                   	push   eax
c001978b:	e8 c5 6e fe ff       	call   c0000655 <memcpy>
c0019790:	89 d8                	mov    eax,ebx
c0019792:	83 c4 14             	add    esp,0x14
c0019795:	5b                   	pop    ebx
c0019796:	5e                   	pop    esi
c0019797:	c3                   	ret    

c0019798 <Krnl::loadSystemEnv()>:
c0019798:	53                   	push   ebx
c0019799:	83 ec 14             	sub    esp,0x14
c001979c:	6a 0c                	push   0xc
c001979e:	e8 37 5d ff ff       	call   c000f4da <malloc>
c00197a3:	89 c3                	mov    ebx,eax
c00197a5:	58                   	pop    eax
c00197a6:	5a                   	pop    edx
c00197a7:	ff 35 34 e1 02 c0    	push   DWORD PTR ds:0xc002e134
c00197ad:	53                   	push   ebx
c00197ae:	e8 69 fe ff ff       	call   c001961c <EnvVarContainer::EnvVarContainer(Process*)>
c00197b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00197b6:	89 1d 14 d7 02 c0    	mov    DWORD PTR ds:0xc002d714,ebx
c00197bc:	e8 3f fe ff ff       	call   c0019600 <EnvVarContainer::__loadSystem()>
c00197c1:	83 c4 18             	add    esp,0x18
c00197c4:	5b                   	pop    ebx
c00197c5:	c3                   	ret    

c00197c6 <Krnl::loadUserEnv()>:
c00197c6:	53                   	push   ebx
c00197c7:	83 ec 14             	sub    esp,0x14
c00197ca:	6a 0c                	push   0xc
c00197cc:	e8 09 5d ff ff       	call   c000f4da <malloc>
c00197d1:	89 c3                	mov    ebx,eax
c00197d3:	58                   	pop    eax
c00197d4:	5a                   	pop    edx
c00197d5:	ff 35 34 e1 02 c0    	push   DWORD PTR ds:0xc002e134
c00197db:	53                   	push   ebx
c00197dc:	e8 3b fe ff ff       	call   c001961c <EnvVarContainer::EnvVarContainer(Process*)>
c00197e1:	89 1d 10 d7 02 c0    	mov    DWORD PTR ds:0xc002d710,ebx
c00197e7:	83 c4 18             	add    esp,0x18
c00197ea:	5b                   	pop    ebx
c00197eb:	c3                   	ret    

c00197ec <Krnl::flushEnv()>:
c00197ec:	c3                   	ret    

c00197ed <Krnl::getProcessTotalEnvCount(Process*)>:
c00197ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00197f1:	8b 15 10 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d710
c00197f7:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c00197fd:	a1 14 d7 02 c0       	mov    eax,ds:0xc002d714
c0019802:	8b 00                	mov    eax,DWORD PTR [eax]
c0019804:	03 01                	add    eax,DWORD PTR [ecx]
c0019806:	85 d2                	test   edx,edx
c0019808:	74 02                	je     c001980c <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001980a:	03 02                	add    eax,DWORD PTR [edx]
c001980c:	c3                   	ret    

c001980d <Krnl::getProcessEnvPair(Process*, int)>:
c001980d:	57                   	push   edi
c001980e:	8b 0d 10 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d710
c0019814:	56                   	push   esi
c0019815:	85 c9                	test   ecx,ecx
c0019817:	53                   	push   ebx
c0019818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001981c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019820:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c0019826:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001982a:	8b 02                	mov    eax,DWORD PTR [edx]
c001982c:	75 47                	jne    c0019875 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001982e:	39 c3                	cmp    ebx,eax
c0019830:	7c 47                	jl     c0019879 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c0019832:	8b 15 14 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d714
c0019838:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001983a:	01 c1                	add    ecx,eax
c001983c:	39 d9                	cmp    ecx,ebx
c001983e:	7e 6c                	jle    c00198ac <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019840:	51                   	push   ecx
c0019841:	89 d9                	mov    ecx,ebx
c0019843:	29 c1                	sub    ecx,eax
c0019845:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019848:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001984c:	53                   	push   ebx
c001984d:	68 b7 a3 02 c0       	push   0xc002a3b7
c0019852:	e8 28 8f ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0019857:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001985d:	2b 18                	sub    ebx,DWORD PTR [eax]
c001985f:	a1 14 d7 02 c0       	mov    eax,ds:0xc002d714
c0019864:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019867:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001986b:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001986e:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019871:	89 06                	mov    DWORD PTR [esi],eax
c0019873:	eb 51                	jmp    c00198c6 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c0019875:	39 c3                	cmp    ebx,eax
c0019877:	7d 05                	jge    c001987e <Krnl::getProcessEnvPair(Process*, int)+0x71>
c0019879:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001987c:	eb 20                	jmp    c001989e <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001987e:	8b 39                	mov    edi,DWORD PTR [ecx]
c0019880:	8d 14 07             	lea    edx,[edi+eax*1]
c0019883:	39 da                	cmp    edx,ebx
c0019885:	7e 04                	jle    c001988b <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c0019887:	29 c3                	sub    ebx,eax
c0019889:	eb 10                	jmp    c001989b <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001988b:	8b 0d 14 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d714
c0019891:	03 11                	add    edx,DWORD PTR [ecx]
c0019893:	39 da                	cmp    edx,ebx
c0019895:	7e 15                	jle    c00198ac <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019897:	29 c3                	sub    ebx,eax
c0019899:	29 fb                	sub    ebx,edi
c001989b:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001989e:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c00198a2:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c00198a5:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00198a8:	89 06                	mov    DWORD PTR [esi],eax
c00198aa:	eb 1d                	jmp    c00198c9 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c00198ac:	83 ec 0c             	sub    esp,0xc
c00198af:	68 cb a3 02 c0       	push   0xc002a3cb
c00198b4:	e8 18 00 00 00       	call   c00198d1 <Krnl::panic(char const*)>
c00198b9:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00198bf:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c00198c6:	83 c4 10             	add    esp,0x10
c00198c9:	89 f0                	mov    eax,esi
c00198cb:	5b                   	pop    ebx
c00198cc:	5e                   	pop    esi
c00198cd:	5f                   	pop    edi
c00198ce:	c2 04 00             	ret    0x4

c00198d1 <Krnl::panic(char const*)>:
c00198d1:	55                   	push   ebp
c00198d2:	89 e5                	mov    ebp,esp
c00198d4:	53                   	push   ebx
c00198d5:	50                   	push   eax
c00198d6:	a1 1c d7 02 c0       	mov    eax,ds:0xc002d71c
c00198db:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00198de:	85 c0                	test   eax,eax
c00198e0:	74 02                	je     c00198e4 <Krnl::panic(char const*)+0x13>
c00198e2:	ff d0                	call   eax
c00198e4:	fa                   	cli    
c00198e5:	c6 05 20 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d720,0x1
c00198ec:	83 ec 08             	sub    esp,0x8
c00198ef:	c6 05 24 bb 02 c0 00 	mov    BYTE PTR ds:0xc002bb24,0x0
c00198f6:	53                   	push   ebx
c00198f7:	68 e5 a3 02 c0       	push   0xc002a3e5
c00198fc:	e8 7e 8e ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0019901:	58                   	pop    eax
c0019902:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0019907:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001990d:	e8 2f 70 ff ff       	call   c0010941 <setActiveTerminal(VgaText*)>
c0019912:	83 c4 0c             	add    esp,0xc
c0019915:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c001991a:	6a 01                	push   0x1
c001991c:	6a 0f                	push   0xf
c001991e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019924:	e8 49 6a ff ff       	call   c0010372 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019929:	5a                   	pop    edx
c001992a:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c001992f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019935:	e8 a8 72 ff ff       	call   c0010be2 <VgaText::clearScreen()>
c001993a:	59                   	pop    ecx
c001993b:	58                   	pop    eax
c001993c:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0019941:	68 fe a3 02 c0       	push   0xc002a3fe
c0019946:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001994c:	e8 0f 74 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c0019951:	58                   	pop    eax
c0019952:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0019957:	5a                   	pop    edx
c0019958:	68 a4 a4 02 c0       	push   0xc002a4a4
c001995d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019963:	e8 f8 73 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c0019968:	59                   	pop    ecx
c0019969:	58                   	pop    eax
c001996a:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c001996f:	68 1a a4 02 c0       	push   0xc002a41a
c0019974:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001997a:	e8 e1 73 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c001997f:	58                   	pop    eax
c0019980:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0019985:	5a                   	pop    edx
c0019986:	53                   	push   ebx
c0019987:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001998d:	e8 ce 73 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c0019992:	59                   	pop    ecx
c0019993:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0019998:	5b                   	pop    ebx
c0019999:	68 3a a4 02 c0       	push   0xc002a43a
c001999e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199a4:	e8 b7 73 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c00199a9:	58                   	pop    eax
c00199aa:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c00199af:	5a                   	pop    edx
c00199b0:	68 e0 a4 02 c0       	push   0xc002a4e0
c00199b5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199bb:	e8 a0 73 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c00199c0:	59                   	pop    ecx
c00199c1:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c00199c6:	5b                   	pop    ebx
c00199c7:	68 1a a4 02 c0       	push   0xc002a41a
c00199cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199d2:	e8 89 73 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c00199d7:	58                   	pop    eax
c00199d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00199dd:	5a                   	pop    edx
c00199de:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00199e1:	83 c0 0c             	add    eax,0xc
c00199e4:	50                   	push   eax
c00199e5:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c00199ea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199f0:	e8 6b 73 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c00199f5:	59                   	pop    ecx
c00199f6:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c00199fb:	5b                   	pop    ebx
c00199fc:	68 39 a4 02 c0       	push   0xc002a439
c0019a01:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a07:	e8 54 73 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c0019a0c:	58                   	pop    eax
c0019a0d:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0019a12:	5a                   	pop    edx
c0019a13:	68 0c a5 02 c0       	push   0xc002a50c
c0019a18:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a1e:	e8 3d 73 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c0019a23:	59                   	pop    ecx
c0019a24:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0019a29:	5b                   	pop    ebx
c0019a2a:	68 4c a5 02 c0       	push   0xc002a54c
c0019a2f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a35:	e8 26 73 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c0019a3a:	58                   	pop    eax
c0019a3b:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0019a40:	5a                   	pop    edx
c0019a41:	68 25 a4 02 c0       	push   0xc002a425
c0019a46:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a4c:	e8 0f 73 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c0019a51:	59                   	pop    ecx
c0019a52:	5b                   	pop    ebx
c0019a53:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019a56:	68 3d a4 02 c0       	push   0xc002a43d
c0019a5b:	e8 1f 8d ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0019a60:	58                   	pop    eax
c0019a61:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019a64:	5a                   	pop    edx
c0019a65:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019a68:	68 46 a4 02 c0       	push   0xc002a446
c0019a6d:	e8 0d 8d ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0019a72:	59                   	pop    ecx
c0019a73:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019a76:	5b                   	pop    ebx
c0019a77:	8b 00                	mov    eax,DWORD PTR [eax]
c0019a79:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019a7c:	68 4f a4 02 c0       	push   0xc002a44f
c0019a81:	e8 f9 8c ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0019a86:	58                   	pop    eax
c0019a87:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0019a8c:	5a                   	pop    edx
c0019a8d:	68 90 a5 02 c0       	push   0xc002a590
c0019a92:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a98:	e8 c3 72 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c0019a9d:	59                   	pop    ecx
c0019a9e:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0019aa3:	5b                   	pop    ebx
c0019aa4:	68 58 a4 02 c0       	push   0xc002a458
c0019aa9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019aaf:	e8 ac 72 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c0019ab4:	0f 20 c0             	mov    eax,cr0
c0019ab7:	5a                   	pop    edx
c0019ab8:	59                   	pop    ecx
c0019ab9:	50                   	push   eax
c0019aba:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0019abf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ac5:	e8 bc 72 ff ff       	call   c0010d86 <VgaText::putx(unsigned int)>
c0019aca:	5b                   	pop    ebx
c0019acb:	58                   	pop    eax
c0019acc:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0019ad1:	68 62 a4 02 c0       	push   0xc002a462
c0019ad6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019adc:	e8 7f 72 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c0019ae1:	0f 20 d0             	mov    eax,cr2
c0019ae4:	5a                   	pop    edx
c0019ae5:	59                   	pop    ecx
c0019ae6:	50                   	push   eax
c0019ae7:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0019aec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019af2:	e8 8f 72 ff ff       	call   c0010d86 <VgaText::putx(unsigned int)>
c0019af7:	5b                   	pop    ebx
c0019af8:	58                   	pop    eax
c0019af9:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0019afe:	68 6c a4 02 c0       	push   0xc002a46c
c0019b03:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b09:	e8 52 72 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c0019b0e:	0f 20 d8             	mov    eax,cr3
c0019b11:	5a                   	pop    edx
c0019b12:	59                   	pop    ecx
c0019b13:	50                   	push   eax
c0019b14:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0019b19:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b1f:	e8 62 72 ff ff       	call   c0010d86 <VgaText::putx(unsigned int)>
c0019b24:	5b                   	pop    ebx
c0019b25:	58                   	pop    eax
c0019b26:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0019b2b:	68 7f a4 02 c0       	push   0xc002a47f
c0019b30:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b36:	e8 25 72 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c0019b3b:	0f 20 e0             	mov    eax,cr4
c0019b3e:	5a                   	pop    edx
c0019b3f:	59                   	pop    ecx
c0019b40:	50                   	push   eax
c0019b41:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0019b46:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b4c:	e8 35 72 ff ff       	call   c0010d86 <VgaText::putx(unsigned int)>
c0019b51:	5b                   	pop    ebx
c0019b52:	58                   	pop    eax
c0019b53:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0019b58:	68 89 a4 02 c0       	push   0xc002a489
c0019b5d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b63:	e8 f8 71 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c0019b68:	5a                   	pop    edx
c0019b69:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0019b6e:	59                   	pop    ecx
c0019b6f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019b75:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019b78:	50                   	push   eax
c0019b79:	e8 08 72 ff ff       	call   c0010d86 <VgaText::putx(unsigned int)>
c0019b7e:	5b                   	pop    ebx
c0019b7f:	58                   	pop    eax
c0019b80:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0019b85:	68 a0 a4 02 c0       	push   0xc002a4a0
c0019b8a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b90:	e8 cb 71 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c0019b95:	5a                   	pop    edx
c0019b96:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0019b9b:	59                   	pop    ecx
c0019b9c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019ba2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019ba5:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019ba8:	50                   	push   eax
c0019ba9:	e8 d8 71 ff ff       	call   c0010d86 <VgaText::putx(unsigned int)>
c0019bae:	5b                   	pop    ebx
c0019baf:	58                   	pop    eax
c0019bb0:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0019bb5:	68 a0 a4 02 c0       	push   0xc002a4a0
c0019bba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019bc0:	e8 9b 71 ff ff       	call   c0010d60 <VgaText::puts(char const*)>
c0019bc5:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0019bca:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019bcd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019bd3:	8b 12                	mov    edx,DWORD PTR [edx]
c0019bd5:	59                   	pop    ecx
c0019bd6:	5b                   	pop    ebx
c0019bd7:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019bda:	50                   	push   eax
c0019bdb:	e8 a6 71 ff ff       	call   c0010d86 <VgaText::putx(unsigned int)>
c0019be0:	83 c4 10             	add    esp,0x10
c0019be3:	b2 fe                	mov    dl,0xfe
c0019be5:	e4 60                	in     al,0x60
c0019be7:	3c 1c                	cmp    al,0x1c
c0019be9:	74 04                	je     c0019bef <Krnl::panic(char const*)+0x31e>
c0019beb:	3c 5a                	cmp    al,0x5a
c0019bed:	75 f6                	jne    c0019be5 <Krnl::panic(char const*)+0x314>
c0019bef:	e4 64                	in     al,0x64
c0019bf1:	a8 02                	test   al,0x2
c0019bf3:	75 fa                	jne    c0019bef <Krnl::panic(char const*)+0x31e>
c0019bf5:	88 d0                	mov    al,dl
c0019bf7:	e6 64                	out    0x64,al
c0019bf9:	fa                   	cli    
c0019bfa:	f4                   	hlt    
c0019bfb:	eb e8                	jmp    c0019be5 <Krnl::panic(char const*)+0x314>

c0019bfd <Net::switchEndian16(unsigned short)>:
c0019bfd:	83 ec 04             	sub    esp,0x4
c0019c00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c04:	66 89 04 24          	mov    WORD PTR [esp],ax
c0019c08:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019c0c:	c1 f8 08             	sar    eax,0x8
c0019c0f:	89 c2                	mov    edx,eax
c0019c11:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019c15:	c1 e0 08             	shl    eax,0x8
c0019c18:	09 d0                	or     eax,edx
c0019c1a:	83 c4 04             	add    esp,0x4
c0019c1d:	c3                   	ret    

c0019c1e <Net::switchEndian32(unsigned int)>:
c0019c1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c22:	c1 e8 18             	shr    eax,0x18
c0019c25:	89 c2                	mov    edx,eax
c0019c27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c2b:	c1 e0 08             	shl    eax,0x8
c0019c2e:	25 00 00 ff 00       	and    eax,0xff0000
c0019c33:	09 c2                	or     edx,eax
c0019c35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c39:	c1 e8 08             	shr    eax,0x8
c0019c3c:	25 00 ff 00 00       	and    eax,0xff00
c0019c41:	09 c2                	or     edx,eax
c0019c43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c47:	c1 e0 18             	shl    eax,0x18
c0019c4a:	09 d0                	or     eax,edx
c0019c4c:	c3                   	ret    

c0019c4d <Net::crc32Calc(unsigned char*, int)>:
c0019c4d:	83 ec 10             	sub    esp,0x10
c0019c50:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019c55:	75 07                	jne    c0019c5e <Net::crc32Calc(unsigned char*, int)+0x11>
c0019c57:	b8 00 00 00 00       	mov    eax,0x0
c0019c5c:	eb 7c                	jmp    c0019cda <Net::crc32Calc(unsigned char*, int)+0x8d>
c0019c5e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0019c63:	7f 07                	jg     c0019c6c <Net::crc32Calc(unsigned char*, int)+0x1f>
c0019c65:	b8 00 00 00 00       	mov    eax,0x0
c0019c6a:	eb 6e                	jmp    c0019cda <Net::crc32Calc(unsigned char*, int)+0x8d>
c0019c6c:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0019c74:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019c7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c80:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0019c84:	7d 4e                	jge    c0019cd4 <Net::crc32Calc(unsigned char*, int)+0x87>
c0019c86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019c8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c8e:	01 d0                	add    eax,edx
c0019c90:	8a 00                	mov    al,BYTE PTR [eax]
c0019c92:	0f b6 c0             	movzx  eax,al
c0019c95:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0019c99:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019ca1:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0019ca6:	7f 26                	jg     c0019cce <Net::crc32Calc(unsigned char*, int)+0x81>
c0019ca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cac:	83 e0 01             	and    eax,0x1
c0019caf:	74 0d                	je     c0019cbe <Net::crc32Calc(unsigned char*, int)+0x71>
c0019cb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cb5:	d1 e8                	shr    eax,1
c0019cb7:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0019cbc:	eb 06                	jmp    c0019cc4 <Net::crc32Calc(unsigned char*, int)+0x77>
c0019cbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cc2:	d1 e8                	shr    eax,1
c0019cc4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019cc8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019ccc:	eb d3                	jmp    c0019ca1 <Net::crc32Calc(unsigned char*, int)+0x54>
c0019cce:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0019cd2:	eb a8                	jmp    c0019c7c <Net::crc32Calc(unsigned char*, int)+0x2f>
c0019cd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cd8:	f7 d0                	not    eax
c0019cda:	83 c4 10             	add    esp,0x10
c0019cdd:	c3                   	ret    

c0019cde <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0019cde:	83 ec 1c             	sub    esp,0x1c
c0019ce1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019ce5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019ce9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019cf1:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c0019cf6:	7f 14                	jg     c0019d0c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c0019cf8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019cfc:	8d 50 01             	lea    edx,[eax+0x1]
c0019cff:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019d03:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c0019d06:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019d0a:	eb e5                	jmp    c0019cf1 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c0019d0c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d10:	8d 50 01             	lea    edx,[eax+0x1]
c0019d13:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019d17:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0019d1a:	83 ec 04             	sub    esp,0x4
c0019d1d:	6a 06                	push   0x6
c0019d1f:	8d 44 24 36          	lea    eax,[esp+0x36]
c0019d23:	50                   	push   eax
c0019d24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019d28:	e8 28 69 fe ff       	call   c0000655 <memcpy>
c0019d2d:	83 c4 10             	add    esp,0x10
c0019d30:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c0019d35:	83 ec 04             	sub    esp,0x4
c0019d38:	6a 06                	push   0x6
c0019d3a:	8d 44 24 30          	lea    eax,[esp+0x30]
c0019d3e:	50                   	push   eax
c0019d3f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019d43:	e8 0d 69 fe ff       	call   c0000655 <memcpy>
c0019d48:	83 c4 10             	add    esp,0x10
c0019d4b:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c0019d50:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019d54:	0f b7 c0             	movzx  eax,ax
c0019d57:	c1 f8 08             	sar    eax,0x8
c0019d5a:	89 c1                	mov    ecx,eax
c0019d5c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d60:	8d 50 01             	lea    edx,[eax+0x1]
c0019d63:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019d67:	88 ca                	mov    dl,cl
c0019d69:	88 10                	mov    BYTE PTR [eax],dl
c0019d6b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019d6f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d73:	8d 48 01             	lea    ecx,[eax+0x1]
c0019d76:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0019d7a:	88 10                	mov    BYTE PTR [eax],dl
c0019d7c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0019d80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d84:	83 ec 04             	sub    esp,0x4
c0019d87:	52                   	push   edx
c0019d88:	50                   	push   eax
c0019d89:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019d8d:	e8 c3 68 fe ff       	call   c0000655 <memcpy>
c0019d92:	83 c4 10             	add    esp,0x10
c0019d95:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019d99:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0019d9d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019da1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0019da5:	83 ec 08             	sub    esp,0x8
c0019da8:	50                   	push   eax
c0019da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019dad:	e8 9b fe ff ff       	call   c0019c4d <Net::crc32Calc(unsigned char*, int)>
c0019db2:	83 c4 10             	add    esp,0x10
c0019db5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019db9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019dbd:	c1 e8 18             	shr    eax,0x18
c0019dc0:	89 c1                	mov    ecx,eax
c0019dc2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019dc6:	8d 50 01             	lea    edx,[eax+0x1]
c0019dc9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019dcd:	88 ca                	mov    dl,cl
c0019dcf:	88 10                	mov    BYTE PTR [eax],dl
c0019dd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019dd5:	c1 e8 10             	shr    eax,0x10
c0019dd8:	89 c1                	mov    ecx,eax
c0019dda:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019dde:	8d 50 01             	lea    edx,[eax+0x1]
c0019de1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019de5:	88 ca                	mov    dl,cl
c0019de7:	88 10                	mov    BYTE PTR [eax],dl
c0019de9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ded:	c1 e8 08             	shr    eax,0x8
c0019df0:	89 c1                	mov    ecx,eax
c0019df2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019df6:	8d 50 01             	lea    edx,[eax+0x1]
c0019df9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019dfd:	88 ca                	mov    dl,cl
c0019dff:	88 10                	mov    BYTE PTR [eax],dl
c0019e01:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019e05:	8d 50 01             	lea    edx,[eax+0x1]
c0019e08:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019e0c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019e10:	88 10                	mov    BYTE PTR [eax],dl
c0019e12:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019e16:	83 c4 1c             	add    esp,0x1c
c0019e19:	c3                   	ret    

c0019e1a <Net::unwrapEthernetFrame(unsigned char*, int)>:
c0019e1a:	83 ec 2c             	sub    esp,0x2c
c0019e1d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e21:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019e25:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c0019e2a:	83 ec 04             	sub    esp,0x4
c0019e2d:	6a 06                	push   0x6
c0019e2f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019e33:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019e37:	83 c0 0e             	add    eax,0xe
c0019e3a:	50                   	push   eax
c0019e3b:	e8 15 68 fe ff       	call   c0000655 <memcpy>
c0019e40:	83 c4 10             	add    esp,0x10
c0019e43:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c0019e48:	83 ec 04             	sub    esp,0x4
c0019e4b:	6a 06                	push   0x6
c0019e4d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019e51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019e55:	83 c0 08             	add    eax,0x8
c0019e58:	50                   	push   eax
c0019e59:	e8 f7 67 fe ff       	call   c0000655 <memcpy>
c0019e5e:	83 c4 10             	add    esp,0x10
c0019e61:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c0019e66:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e6a:	8d 50 01             	lea    edx,[eax+0x1]
c0019e6d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019e71:	8a 00                	mov    al,BYTE PTR [eax]
c0019e73:	0f b6 c0             	movzx  eax,al
c0019e76:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0019e7b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e7f:	8d 50 01             	lea    edx,[eax+0x1]
c0019e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019e86:	8a 00                	mov    al,BYTE PTR [eax]
c0019e88:	0f b6 c0             	movzx  eax,al
c0019e8b:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0019e90:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c0019e95:	c1 e0 08             	shl    eax,0x8
c0019e98:	89 c2                	mov    edx,eax
c0019e9a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019e9e:	09 d0                	or     eax,edx
c0019ea0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019ea4:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0019ea8:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c0019ead:	75 3a                	jne    c0019ee9 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c0019eaf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019eb3:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019eb6:	66 3d dc 05          	cmp    ax,0x5dc
c0019eba:	77 10                	ja     c0019ecc <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c0019ebc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019ec0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019ec3:	0f b7 c0             	movzx  eax,ax
c0019ec6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0019eca:	eb 1d                	jmp    c0019ee9 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c0019ecc:	83 ec 0c             	sub    esp,0xc
c0019ecf:	68 b8 a5 02 c0       	push   0xc002a5b8
c0019ed4:	e8 a6 88 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0019ed9:	83 c4 10             	add    esp,0x10
c0019edc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019ee0:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0019ee4:	e9 c0 00 00 00       	jmp    c0019fa9 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c0019ee9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019eed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ef3:	83 ec 04             	sub    esp,0x4
c0019ef6:	52                   	push   edx
c0019ef7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019efb:	50                   	push   eax
c0019efc:	e8 54 67 fe ff       	call   c0000655 <memcpy>
c0019f01:	83 c4 10             	add    esp,0x10
c0019f04:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019f08:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0019f0c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f10:	8d 50 01             	lea    edx,[eax+0x1]
c0019f13:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019f17:	8a 00                	mov    al,BYTE PTR [eax]
c0019f19:	0f b6 c0             	movzx  eax,al
c0019f1c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019f20:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f24:	8d 50 01             	lea    edx,[eax+0x1]
c0019f27:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019f2b:	8a 00                	mov    al,BYTE PTR [eax]
c0019f2d:	0f b6 c0             	movzx  eax,al
c0019f30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019f34:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f38:	8d 50 01             	lea    edx,[eax+0x1]
c0019f3b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019f3f:	8a 00                	mov    al,BYTE PTR [eax]
c0019f41:	0f b6 c0             	movzx  eax,al
c0019f44:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019f48:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f4c:	8d 50 01             	lea    edx,[eax+0x1]
c0019f4f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019f53:	8a 00                	mov    al,BYTE PTR [eax]
c0019f55:	0f b6 c0             	movzx  eax,al
c0019f58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019f60:	c1 e0 18             	shl    eax,0x18
c0019f63:	89 c2                	mov    edx,eax
c0019f65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f69:	c1 e0 10             	shl    eax,0x10
c0019f6c:	09 c2                	or     edx,eax
c0019f6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f72:	c1 e0 08             	shl    eax,0x8
c0019f75:	09 d0                	or     eax,edx
c0019f77:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0019f7b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019f7f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f83:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0019f87:	83 e8 04             	sub    eax,0x4
c0019f8a:	83 ec 08             	sub    esp,0x8
c0019f8d:	50                   	push   eax
c0019f8e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019f92:	e8 b6 fc ff ff       	call   c0019c4d <Net::crc32Calc(unsigned char*, int)>
c0019f97:	83 c4 10             	add    esp,0x10
c0019f9a:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019f9e:	0f 94 c2             	sete   dl
c0019fa1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019fa5:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0019fa8:	90                   	nop
c0019fa9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019fad:	83 c4 2c             	add    esp,0x2c
c0019fb0:	c2 04 00             	ret    0x4

c0019fb3 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0019fb3:	55                   	push   ebp
c0019fb4:	57                   	push   edi
c0019fb5:	56                   	push   esi
c0019fb6:	53                   	push   ebx
c0019fb7:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019fbd:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0019fc4:	8a 1e                	mov    bl,BYTE PTR [esi]
c0019fc6:	8d 6e 01             	lea    ebp,[esi+0x1]
c0019fc9:	80 fb 40             	cmp    bl,0x40
c0019fcc:	75 1b                	jne    c0019fe9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0019fce:	8a 16                	mov    dl,BYTE PTR [esi]
c0019fd0:	84 d2                	test   dl,dl
c0019fd2:	0f 84 f1 00 00 00    	je     c001a0c9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019fd8:	8d 46 01             	lea    eax,[esi+0x1]
c0019fdb:	80 fa 3a             	cmp    dl,0x3a
c0019fde:	74 04                	je     c0019fe4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0019fe0:	89 c6                	mov    esi,eax
c0019fe2:	eb ea                	jmp    c0019fce <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0019fe4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0019fe7:	89 c6                	mov    esi,eax
c0019fe9:	50                   	push   eax
c0019fea:	6a 40                	push   0x40
c0019fec:	6a 00                	push   0x0
c0019fee:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019ff2:	50                   	push   eax
c0019ff3:	e8 93 66 fe ff       	call   c000068b <memset>
c0019ff8:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0019fff:	31 c0                	xor    eax,eax
c001a001:	83 c4 10             	add    esp,0x10
c001a004:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a006:	84 c9                	test   cl,cl
c001a008:	0f 84 bb 00 00 00    	je     c001a0c9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a00e:	3d c7 00 00 00       	cmp    eax,0xc7
c001a013:	0f 8f b0 00 00 00    	jg     c001a0c9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a019:	80 f9 0a             	cmp    cl,0xa
c001a01c:	0f 85 98 00 00 00    	jne    c001a0ba <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a022:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a027:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a02b:	a8 df                	test   al,0xdf
c001a02d:	0f 94 c1             	sete   cl
c001a030:	3c 23                	cmp    al,0x23
c001a032:	0f 94 c2             	sete   dl
c001a035:	08 d1                	or     cl,dl
c001a037:	75 4a                	jne    c001a083 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a039:	8d 50 f7             	lea    edx,[eax-0x9]
c001a03c:	80 fa 01             	cmp    dl,0x1
c001a03f:	76 42                	jbe    c001a083 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a041:	3c 5b                	cmp    al,0x5b
c001a043:	75 42                	jne    c001a087 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a045:	80 fb 40             	cmp    bl,0x40
c001a048:	75 39                	jne    c001a083 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a04a:	83 ec 0c             	sub    esp,0xc
c001a04d:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a051:	52                   	push   edx
c001a052:	e8 51 66 fe ff       	call   c00006a8 <strlen>
c001a057:	83 c4 10             	add    esp,0x10
c001a05a:	83 f8 3f             	cmp    eax,0x3f
c001a05d:	77 6a                	ja     c001a0c9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a05f:	50                   	push   eax
c001a060:	50                   	push   eax
c001a061:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a065:	52                   	push   edx
c001a066:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a06a:	52                   	push   edx
c001a06b:	e8 ba 66 fe ff       	call   c000072a <strcpy>
c001a070:	58                   	pop    eax
c001a071:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a075:	52                   	push   edx
c001a076:	e8 2d 66 fe ff       	call   c00006a8 <strlen>
c001a07b:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a080:	83 c4 10             	add    esp,0x10
c001a083:	31 d2                	xor    edx,edx
c001a085:	eb 3a                	jmp    c001a0c1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a087:	80 fb 40             	cmp    bl,0x40
c001a08a:	74 06                	je     c001a092 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a08c:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a090:	eb 20                	jmp    c001a0b2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a092:	50                   	push   eax
c001a093:	50                   	push   eax
c001a094:	55                   	push   ebp
c001a095:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a099:	50                   	push   eax
c001a09a:	e8 dc 66 fe ff       	call   c000077b <strcmp>
c001a09f:	83 c4 10             	add    esp,0x10
c001a0a2:	85 c0                	test   eax,eax
c001a0a4:	75 dd                	jne    c001a083 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a0a6:	eb e4                	jmp    c001a08c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a0a8:	8d 50 01             	lea    edx,[eax+0x1]
c001a0ab:	80 f9 3d             	cmp    cl,0x3d
c001a0ae:	74 1d                	je     c001a0cd <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a0b0:	89 d0                	mov    eax,edx
c001a0b2:	8a 08                	mov    cl,BYTE PTR [eax]
c001a0b4:	84 c9                	test   cl,cl
c001a0b6:	75 f0                	jne    c001a0a8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a0b8:	eb 0f                	jmp    c001a0c9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a0ba:	8d 50 01             	lea    edx,[eax+0x1]
c001a0bd:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a0c1:	47                   	inc    edi
c001a0c2:	89 d0                	mov    eax,edx
c001a0c4:	e9 3b ff ff ff       	jmp    c001a004 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a0c9:	31 c0                	xor    eax,eax
c001a0cb:	eb 33                	jmp    c001a100 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a0cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a0d1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a0d4:	50                   	push   eax
c001a0d5:	50                   	push   eax
c001a0d6:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a0da:	50                   	push   eax
c001a0db:	56                   	push   esi
c001a0dc:	e8 9a 66 fe ff       	call   c000077b <strcmp>
c001a0e1:	83 c4 10             	add    esp,0x10
c001a0e4:	85 c0                	test   eax,eax
c001a0e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a0ea:	75 97                	jne    c001a083 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a0ec:	51                   	push   ecx
c001a0ed:	51                   	push   ecx
c001a0ee:	52                   	push   edx
c001a0ef:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a0f6:	e8 2f 66 fe ff       	call   c000072a <strcpy>
c001a0fb:	83 c4 10             	add    esp,0x10
c001a0fe:	b0 01                	mov    al,0x1
c001a100:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a106:	5b                   	pop    ebx
c001a107:	5e                   	pop    esi
c001a108:	5f                   	pop    edi
c001a109:	5d                   	pop    ebp
c001a10a:	c3                   	ret    

c001a10b <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a10b:	57                   	push   edi
c001a10c:	56                   	push   esi
c001a10d:	53                   	push   ebx
c001a10e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a114:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a11b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a122:	53                   	push   ebx
c001a123:	e8 80 65 fe ff       	call   c00006a8 <strlen>
c001a128:	89 34 24             	mov    DWORD PTR [esp],esi
c001a12b:	89 c7                	mov    edi,eax
c001a12d:	e8 76 65 fe ff       	call   c00006a8 <strlen>
c001a132:	83 c4 10             	add    esp,0x10
c001a135:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a139:	3d ff 00 00 00       	cmp    eax,0xff
c001a13e:	0f 87 d3 00 00 00    	ja     c001a217 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a144:	57                   	push   edi
c001a145:	57                   	push   edi
c001a146:	56                   	push   esi
c001a147:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a14b:	56                   	push   esi
c001a14c:	e8 d9 65 fe ff       	call   c000072a <strcpy>
c001a151:	58                   	pop    eax
c001a152:	5a                   	pop    edx
c001a153:	68 12 aa 02 c0       	push   0xc002aa12
c001a158:	56                   	push   esi
c001a159:	e8 83 66 fe ff       	call   c00007e1 <strcat>
c001a15e:	59                   	pop    ecx
c001a15f:	5f                   	pop    edi
c001a160:	53                   	push   ebx
c001a161:	56                   	push   esi
c001a162:	e8 7a 66 fe ff       	call   c00007e1 <strcat>
c001a167:	58                   	pop    eax
c001a168:	5a                   	pop    edx
c001a169:	68 04 a6 02 c0       	push   0xc002a604
c001a16e:	56                   	push   esi
c001a16f:	e8 6d 66 fe ff       	call   c00007e1 <strcat>
c001a174:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a17b:	e8 5a 53 ff ff       	call   c000f4da <malloc>
c001a180:	83 c4 0c             	add    esp,0xc
c001a183:	89 c3                	mov    ebx,eax
c001a185:	ff 35 34 e1 02 c0    	push   DWORD PTR ds:0xc002e134
c001a18b:	56                   	push   esi
c001a18c:	50                   	push   eax
c001a18d:	e8 46 8b ff ff       	call   c0012cd8 <File::File(char const*, Process*)>
c001a192:	83 c4 10             	add    esp,0x10
c001a195:	85 db                	test   ebx,ebx
c001a197:	74 7e                	je     c001a217 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a199:	51                   	push   ecx
c001a19a:	51                   	push   ecx
c001a19b:	6a 01                	push   0x1
c001a19d:	53                   	push   ebx
c001a19e:	e8 99 8b ff ff       	call   c0012d3c <File::open(FileOpenMode)>
c001a1a3:	83 c4 10             	add    esp,0x10
c001a1a6:	85 c0                	test   eax,eax
c001a1a8:	74 08                	je     c001a1b2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a1aa:	83 ec 0c             	sub    esp,0xc
c001a1ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a1af:	53                   	push   ebx
c001a1b0:	eb 5f                	jmp    c001a211 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a1b2:	52                   	push   edx
c001a1b3:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a1b7:	50                   	push   eax
c001a1b8:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a1bc:	50                   	push   eax
c001a1bd:	53                   	push   ebx
c001a1be:	e8 25 8e ff ff       	call   c0012fe8 <File::stat(unsigned long long*, bool*)>
c001a1c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a1c7:	83 c4 10             	add    esp,0x10
c001a1ca:	89 c1                	mov    ecx,eax
c001a1cc:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a1d0:	74 31                	je     c001a203 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a1d2:	83 ec 0c             	sub    esp,0xc
c001a1d5:	50                   	push   eax
c001a1d6:	e8 ff 52 ff ff       	call   c000f4da <malloc>
c001a1db:	89 c6                	mov    esi,eax
c001a1dd:	58                   	pop    eax
c001a1de:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a1e0:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a1e4:	52                   	push   edx
c001a1e5:	56                   	push   esi
c001a1e6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a1ea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a1ee:	53                   	push   ebx
c001a1ef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a1f2:	83 c4 20             	add    esp,0x20
c001a1f5:	85 c0                	test   eax,eax
c001a1f7:	75 0a                	jne    c001a203 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a1f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a1fd:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a201:	74 18                	je     c001a21b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a203:	83 ec 0c             	sub    esp,0xc
c001a206:	53                   	push   ebx
c001a207:	e8 8e 8b ff ff       	call   c0012d9a <File::close()>
c001a20c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a20e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a211:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a214:	83 c4 10             	add    esp,0x10
c001a217:	31 c0                	xor    eax,eax
c001a219:	eb 3b                	jmp    c001a256 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a21b:	83 ec 0c             	sub    esp,0xc
c001a21e:	53                   	push   ebx
c001a21f:	e8 76 8b ff ff       	call   c0012d9a <File::close()>
c001a224:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a226:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a229:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a22c:	83 c4 0c             	add    esp,0xc
c001a22f:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a236:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a23d:	56                   	push   esi
c001a23e:	e8 70 fd ff ff       	call   c0019fb3 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a243:	89 34 24             	mov    DWORD PTR [esp],esi
c001a246:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a24a:	e8 9b 52 ff ff       	call   c000f4ea <free>
c001a24f:	83 c4 10             	add    esp,0x10
c001a252:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a256:	81 c4 20 01 00 00    	add    esp,0x120
c001a25c:	5b                   	pop    ebx
c001a25d:	5e                   	pop    esi
c001a25e:	5f                   	pop    edi
c001a25f:	c3                   	ret    

c001a260 <Reg::getLine(char*, char*, char*)>:
c001a260:	57                   	push   edi
c001a261:	56                   	push   esi
c001a262:	53                   	push   ebx
c001a263:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a267:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a26b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a26f:	57                   	push   edi
c001a270:	56                   	push   esi
c001a271:	53                   	push   ebx
c001a272:	68 09 a6 02 c0       	push   0xc002a609
c001a277:	e8 8f fe ff ff       	call   c001a10b <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a27c:	83 c4 10             	add    esp,0x10
c001a27f:	84 c0                	test   al,al
c001a281:	75 10                	jne    c001a293 <Reg::getLine(char*, char*, char*)+0x33>
c001a283:	57                   	push   edi
c001a284:	56                   	push   esi
c001a285:	53                   	push   ebx
c001a286:	68 2e a6 02 c0       	push   0xc002a62e
c001a28b:	e8 7b fe ff ff       	call   c001a10b <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a290:	83 c4 10             	add    esp,0x10
c001a293:	5b                   	pop    ebx
c001a294:	5e                   	pop    esi
c001a295:	5f                   	pop    edi
c001a296:	c3                   	ret    

c001a297 <Reg::readInt(char*, char*, int*)>:
c001a297:	55                   	push   ebp
c001a298:	57                   	push   edi
c001a299:	56                   	push   esi
c001a29a:	53                   	push   ebx
c001a29b:	81 ec f0 00 00 00    	sub    esp,0xf0
c001a2a1:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a2a5:	57                   	push   edi
c001a2a6:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a2ad:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a2b4:	e8 a7 ff ff ff       	call   c001a260 <Reg::getLine(char*, char*, char*)>
c001a2b9:	83 c4 10             	add    esp,0x10
c001a2bc:	84 c0                	test   al,al
c001a2be:	0f 84 b3 00 00 00    	je     c001a377 <Reg::readInt(char*, char*, int*)+0xe0>
c001a2c4:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001a2c8:	80 fa 2b             	cmp    dl,0x2b
c001a2cb:	74 0c                	je     c001a2d9 <Reg::readInt(char*, char*, int*)+0x42>
c001a2cd:	80 fa 2d             	cmp    dl,0x2d
c001a2d0:	75 0e                	jne    c001a2e0 <Reg::readInt(char*, char*, int*)+0x49>
c001a2d2:	ba 01 00 00 00       	mov    edx,0x1
c001a2d7:	eb 0b                	jmp    c001a2e4 <Reg::readInt(char*, char*, int*)+0x4d>
c001a2d9:	ba 01 00 00 00       	mov    edx,0x1
c001a2de:	eb 02                	jmp    c001a2e2 <Reg::readInt(char*, char*, int*)+0x4b>
c001a2e0:	31 d2                	xor    edx,edx
c001a2e2:	31 c0                	xor    eax,eax
c001a2e4:	be 0a 00 00 00       	mov    esi,0xa
c001a2e9:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001a2ee:	75 20                	jne    c001a310 <Reg::readInt(char*, char*, int*)+0x79>
c001a2f0:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001a2f4:	80 f9 78             	cmp    cl,0x78
c001a2f7:	75 0a                	jne    c001a303 <Reg::readInt(char*, char*, int*)+0x6c>
c001a2f9:	83 c2 02             	add    edx,0x2
c001a2fc:	be 10 00 00 00       	mov    esi,0x10
c001a301:	eb 0d                	jmp    c001a310 <Reg::readInt(char*, char*, int*)+0x79>
c001a303:	80 f9 62             	cmp    cl,0x62
c001a306:	75 08                	jne    c001a310 <Reg::readInt(char*, char*, int*)+0x79>
c001a308:	83 c2 02             	add    edx,0x2
c001a30b:	be 02 00 00 00       	mov    esi,0x2
c001a310:	01 d7                	add    edi,edx
c001a312:	31 d2                	xor    edx,edx
c001a314:	8a 1f                	mov    bl,BYTE PTR [edi]
c001a316:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001a31a:	80 fb 0d             	cmp    bl,0xd
c001a31d:	0f 94 c3             	sete   bl
c001a320:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a325:	0f 94 c1             	sete   cl
c001a328:	08 cb                	or     bl,cl
c001a32a:	75 3a                	jne    c001a366 <Reg::readInt(char*, char*, int*)+0xcf>
c001a32c:	0f af d6             	imul   edx,esi
c001a32f:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001a334:	83 fe 10             	cmp    esi,0x10
c001a337:	75 26                	jne    c001a35f <Reg::readInt(char*, char*, int*)+0xc8>
c001a339:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a33d:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001a340:	89 e9                	mov    ecx,ebp
c001a342:	80 f9 05             	cmp    cl,0x5
c001a345:	77 06                	ja     c001a34d <Reg::readInt(char*, char*, int*)+0xb6>
c001a347:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001a34b:	eb 16                	jmp    c001a363 <Reg::readInt(char*, char*, int*)+0xcc>
c001a34d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a351:	83 e9 61             	sub    ecx,0x61
c001a354:	80 f9 05             	cmp    cl,0x5
c001a357:	77 06                	ja     c001a35f <Reg::readInt(char*, char*, int*)+0xc8>
c001a359:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001a35d:	eb 04                	jmp    c001a363 <Reg::readInt(char*, char*, int*)+0xcc>
c001a35f:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001a363:	47                   	inc    edi
c001a364:	eb ae                	jmp    c001a314 <Reg::readInt(char*, char*, int*)+0x7d>
c001a366:	84 c0                	test   al,al
c001a368:	74 02                	je     c001a36c <Reg::readInt(char*, char*, int*)+0xd5>
c001a36a:	f7 da                	neg    edx
c001a36c:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001a373:	89 10                	mov    DWORD PTR [eax],edx
c001a375:	88 d8                	mov    al,bl
c001a377:	81 c4 ec 00 00 00    	add    esp,0xec
c001a37d:	5b                   	pop    ebx
c001a37e:	5e                   	pop    esi
c001a37f:	5f                   	pop    edi
c001a380:	5d                   	pop    ebp
c001a381:	c3                   	ret    

c001a382 <Reg::readString(char*, char*, char*, int)>:
c001a382:	57                   	push   edi
c001a383:	56                   	push   esi
c001a384:	53                   	push   ebx
c001a385:	81 ec d4 00 00 00    	sub    esp,0xd4
c001a38b:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001a392:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a396:	57                   	push   edi
c001a397:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a39e:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a3a5:	e8 b6 fe ff ff       	call   c001a260 <Reg::getLine(char*, char*, char*)>
c001a3aa:	83 c4 10             	add    esp,0x10
c001a3ad:	89 c6                	mov    esi,eax
c001a3af:	84 c0                	test   al,al
c001a3b1:	74 44                	je     c001a3f7 <Reg::readString(char*, char*, char*, int)+0x75>
c001a3b3:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001a3ba:	31 c0                	xor    eax,eax
c001a3bc:	4a                   	dec    edx
c001a3bd:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001a3c0:	84 c9                	test   cl,cl
c001a3c2:	74 0f                	je     c001a3d3 <Reg::readString(char*, char*, char*, int)+0x51>
c001a3c4:	39 c2                	cmp    edx,eax
c001a3c6:	7e 0b                	jle    c001a3d3 <Reg::readString(char*, char*, char*, int)+0x51>
c001a3c8:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a3cb:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001a3d0:	40                   	inc    eax
c001a3d1:	eb ea                	jmp    c001a3bd <Reg::readString(char*, char*, char*, int)+0x3b>
c001a3d3:	83 ec 0c             	sub    esp,0xc
c001a3d6:	53                   	push   ebx
c001a3d7:	e8 cc 62 fe ff       	call   c00006a8 <strlen>
c001a3dc:	83 c4 10             	add    esp,0x10
c001a3df:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001a3e4:	75 11                	jne    c001a3f7 <Reg::readString(char*, char*, char*, int)+0x75>
c001a3e6:	83 ec 0c             	sub    esp,0xc
c001a3e9:	53                   	push   ebx
c001a3ea:	e8 b9 62 fe ff       	call   c00006a8 <strlen>
c001a3ef:	83 c4 10             	add    esp,0x10
c001a3f2:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a3f7:	81 c4 d0 00 00 00    	add    esp,0xd0
c001a3fd:	89 f0                	mov    eax,esi
c001a3ff:	5b                   	pop    ebx
c001a400:	5e                   	pop    esi
c001a401:	5f                   	pop    edi
c001a402:	c3                   	ret    

c001a403 <Reg::readBool(char*, char*, bool*)>:
c001a403:	83 ec 20             	sub    esp,0x20
c001a406:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a40a:	50                   	push   eax
c001a40b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a40f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a413:	e8 7f fe ff ff       	call   c001a297 <Reg::readInt(char*, char*, int*)>
c001a418:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a41d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a421:	0f 95 02             	setne  BYTE PTR [edx]
c001a424:	83 c4 2c             	add    esp,0x2c
c001a427:	c3                   	ret    

c001a428 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001a428:	53                   	push   ebx
c001a429:	83 ec 1c             	sub    esp,0x1c
c001a42c:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001a430:	8d 44 24 13          	lea    eax,[esp+0x13]
c001a434:	50                   	push   eax
c001a435:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a439:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a43d:	e8 c1 ff ff ff       	call   c001a403 <Reg::readBool(char*, char*, bool*)>
c001a442:	83 c4 10             	add    esp,0x10
c001a445:	84 c0                	test   al,al
c001a447:	74 04                	je     c001a44d <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001a449:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001a44d:	88 d8                	mov    al,bl
c001a44f:	83 c4 18             	add    esp,0x18
c001a452:	5b                   	pop    ebx
c001a453:	c3                   	ret    

c001a454 <Reg::readIntWithDefault(char*, char*, int)>:
c001a454:	53                   	push   ebx
c001a455:	83 ec 1c             	sub    esp,0x1c
c001a458:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a45c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a460:	50                   	push   eax
c001a461:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a465:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a469:	e8 29 fe ff ff       	call   c001a297 <Reg::readInt(char*, char*, int*)>
c001a46e:	83 c4 10             	add    esp,0x10
c001a471:	84 c0                	test   al,al
c001a473:	74 04                	je     c001a479 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001a475:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a479:	89 d8                	mov    eax,ebx
c001a47b:	83 c4 18             	add    esp,0x18
c001a47e:	5b                   	pop    ebx
c001a47f:	c3                   	ret    

c001a480 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001a480:	57                   	push   edi
c001a481:	56                   	push   esi
c001a482:	53                   	push   ebx
c001a483:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a487:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001a48b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a48f:	56                   	push   esi
c001a490:	53                   	push   ebx
c001a491:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a495:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a499:	e8 e4 fe ff ff       	call   c001a382 <Reg::readString(char*, char*, char*, int)>
c001a49e:	83 c4 10             	add    esp,0x10
c001a4a1:	84 c0                	test   al,al
c001a4a3:	75 1b                	jne    c001a4c0 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001a4a5:	50                   	push   eax
c001a4a6:	56                   	push   esi
c001a4a7:	4e                   	dec    esi
c001a4a8:	6a 00                	push   0x0
c001a4aa:	53                   	push   ebx
c001a4ab:	e8 db 61 fe ff       	call   c000068b <memset>
c001a4b0:	83 c4 0c             	add    esp,0xc
c001a4b3:	56                   	push   esi
c001a4b4:	57                   	push   edi
c001a4b5:	53                   	push   ebx
c001a4b6:	89 fb                	mov    ebx,edi
c001a4b8:	e8 98 61 fe ff       	call   c0000655 <memcpy>
c001a4bd:	83 c4 10             	add    esp,0x10
c001a4c0:	89 d8                	mov    eax,ebx
c001a4c2:	5b                   	pop    ebx
c001a4c3:	5e                   	pop    esi
c001a4c4:	5f                   	pop    edi
c001a4c5:	c3                   	ret    

c001a4c6 <Sys::exit(regs*)>:
c001a4c6:	83 ec 18             	sub    esp,0x18
c001a4c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a4cd:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a4d0:	e8 54 34 00 00       	call   c001d929 <terminateTask(int)>
c001a4d5:	83 c8 ff             	or     eax,0xffffffff
c001a4d8:	83 c4 1c             	add    esp,0x1c
c001a4db:	89 c2                	mov    edx,eax
c001a4dd:	c3                   	ret    

c001a4de <Sys::getCwd(regs*)>:
c001a4de:	83 ec 10             	sub    esp,0x10
c001a4e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a4e5:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001a4e8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a4eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a4f0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a4f3:	e8 e2 85 ff ff       	call   c0012ada <Fs::getcwd(Process*, char*, int)>
c001a4f8:	83 c4 1c             	add    esp,0x1c
c001a4fb:	99                   	cdq    
c001a4fc:	c3                   	ret    

c001a4fd <Sys::getPID(regs*)>:
c001a4fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a502:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a505:	8b 00                	mov    eax,DWORD PTR [eax]
c001a507:	99                   	cdq    
c001a508:	c3                   	ret    

c001a509 <Sys::loadDLL(regs*)>:
c001a509:	56                   	push   esi
c001a50a:	53                   	push   ebx
c001a50b:	31 d2                	xor    edx,edx
c001a50d:	51                   	push   ecx
c001a50e:	b8 01 00 00 00       	mov    eax,0x1
c001a513:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a517:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001a51b:	0f 84 8c 00 00 00    	je     c001a5ad <Sys::loadDLL(regs*)+0xa4>
c001a521:	83 ec 0c             	sub    esp,0xc
c001a524:	68 14 01 00 00       	push   0x114
c001a529:	e8 ac 4f ff ff       	call   c000f4da <malloc>
c001a52e:	83 c4 0c             	add    esp,0xc
c001a531:	89 c3                	mov    ebx,eax
c001a533:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a538:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a53b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a53e:	53                   	push   ebx
c001a53f:	e8 94 87 ff ff       	call   c0012cd8 <File::File(char const*, Process*)>
c001a544:	83 c4 10             	add    esp,0x10
c001a547:	31 d2                	xor    edx,edx
c001a549:	b8 02 00 00 00       	mov    eax,0x2
c001a54e:	85 db                	test   ebx,ebx
c001a550:	74 5b                	je     c001a5ad <Sys::loadDLL(regs*)+0xa4>
c001a552:	83 ec 0c             	sub    esp,0xc
c001a555:	53                   	push   ebx
c001a556:	e8 4f 8a ff ff       	call   c0012faa <File::exists()>
c001a55b:	83 c4 10             	add    esp,0x10
c001a55e:	84 c0                	test   al,al
c001a560:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a562:	75 11                	jne    c001a575 <Sys::loadDLL(regs*)+0x6c>
c001a564:	83 ec 0c             	sub    esp,0xc
c001a567:	53                   	push   ebx
c001a568:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a56b:	83 c4 10             	add    esp,0x10
c001a56e:	b8 03 00 00 00       	mov    eax,0x3
c001a573:	eb 36                	jmp    c001a5ab <Sys::loadDLL(regs*)+0xa2>
c001a575:	83 ec 0c             	sub    esp,0xc
c001a578:	53                   	push   ebx
c001a579:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a57c:	58                   	pop    eax
c001a57d:	5a                   	pop    edx
c001a57e:	6a 00                	push   0x0
c001a580:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a583:	e8 ea 22 00 00       	call   c001c872 <Thr::loadDLL(char const*, bool)>
c001a588:	83 c4 10             	add    esp,0x10
c001a58b:	89 c1                	mov    ecx,eax
c001a58d:	31 d2                	xor    edx,edx
c001a58f:	b8 04 00 00 00       	mov    eax,0x4
c001a594:	85 c9                	test   ecx,ecx
c001a596:	74 15                	je     c001a5ad <Sys::loadDLL(regs*)+0xa4>
c001a598:	53                   	push   ebx
c001a599:	53                   	push   ebx
c001a59a:	ff 35 e8 cb 02 c0    	push   DWORD PTR ds:0xc002cbe8
c001a5a0:	51                   	push   ecx
c001a5a1:	e8 db 24 00 00       	call   c001ca81 <Thr::executeDLL(unsigned long, void*)>
c001a5a6:	83 c4 10             	add    esp,0x10
c001a5a9:	31 c0                	xor    eax,eax
c001a5ab:	31 d2                	xor    edx,edx
c001a5ad:	59                   	pop    ecx
c001a5ae:	5b                   	pop    ebx
c001a5af:	5e                   	pop    esi
c001a5b0:	c3                   	ret    

c001a5b1 <Sys::read(regs*)>:
c001a5b1:	57                   	push   edi
c001a5b2:	56                   	push   esi
c001a5b3:	53                   	push   ebx
c001a5b4:	83 ec 10             	sub    esp,0x10
c001a5b7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a5bb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a5be:	83 f8 02             	cmp    eax,0x2
c001a5c1:	77 10                	ja     c001a5d3 <Sys::read(regs*)+0x22>
c001a5c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a5c8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a5cb:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a5d1:	eb 0e                	jmp    c001a5e1 <Sys::read(regs*)+0x30>
c001a5d3:	83 ec 0c             	sub    esp,0xc
c001a5d6:	50                   	push   eax
c001a5d7:	e8 5d 70 ff ff       	call   c0011639 <getFromFileDescriptor(int)>
c001a5dc:	83 c4 10             	add    esp,0x10
c001a5df:	89 c1                	mov    ecx,eax
c001a5e1:	83 c8 ff             	or     eax,0xffffffff
c001a5e4:	85 c9                	test   ecx,ecx
c001a5e6:	89 c2                	mov    edx,eax
c001a5e8:	74 28                	je     c001a612 <Sys::read(regs*)+0x61>
c001a5ea:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a5f2:	31 ff                	xor    edi,edi
c001a5f4:	83 ec 0c             	sub    esp,0xc
c001a5f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a5f9:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a5fd:	52                   	push   edx
c001a5fe:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a601:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a604:	57                   	push   edi
c001a605:	56                   	push   esi
c001a606:	51                   	push   ecx
c001a607:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a60a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a60e:	83 c4 20             	add    esp,0x20
c001a611:	99                   	cdq    
c001a612:	83 c4 10             	add    esp,0x10
c001a615:	5b                   	pop    ebx
c001a616:	5e                   	pop    esi
c001a617:	5f                   	pop    edi
c001a618:	c3                   	ret    

c001a619 <Sys::sbrk(regs*)>:
c001a619:	56                   	push   esi
c001a61a:	53                   	push   ebx
c001a61b:	50                   	push   eax
c001a61c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a621:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a625:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a628:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001a62b:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001a631:	85 db                	test   ebx,ebx
c001a633:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001a636:	74 02                	je     c001a63a <Sys::sbrk(regs*)+0x21>
c001a638:	79 06                	jns    c001a640 <Sys::sbrk(regs*)+0x27>
c001a63a:	89 f0                	mov    eax,esi
c001a63c:	31 d2                	xor    edx,edx
c001a63e:	eb 2a                	jmp    c001a66a <Sys::sbrk(regs*)+0x51>
c001a640:	83 c8 ff             	or     eax,0xffffffff
c001a643:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001a649:	89 c2                	mov    edx,eax
c001a64b:	77 1d                	ja     c001a66a <Sys::sbrk(regs*)+0x51>
c001a64d:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001a653:	50                   	push   eax
c001a654:	c1 ea 0c             	shr    edx,0xc
c001a657:	68 07 04 00 00       	push   0x407
c001a65c:	52                   	push   edx
c001a65d:	51                   	push   ecx
c001a65e:	e8 f7 78 ff ff       	call   c0011f5a <VAS::allocatePages(int, int)>
c001a663:	89 f0                	mov    eax,esi
c001a665:	31 d2                	xor    edx,edx
c001a667:	83 c4 10             	add    esp,0x10
c001a66a:	59                   	pop    ecx
c001a66b:	5b                   	pop    ebx
c001a66c:	5e                   	pop    esi
c001a66d:	c3                   	ret    

c001a66e <Sys::setCwd(regs*)>:
c001a66e:	83 ec 14             	sub    esp,0x14
c001a671:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a675:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a678:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a67d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a680:	e8 c4 89 ff ff       	call   c0013049 <Fs::setcwd(Process*, char*)>
c001a685:	83 c4 1c             	add    esp,0x1c
c001a688:	99                   	cdq    
c001a689:	c3                   	ret    

c001a68a <Sys::setTime(regs*)>:
c001a68a:	55                   	push   ebp
c001a68b:	31 d2                	xor    edx,edx
c001a68d:	57                   	push   edi
c001a68e:	bf 18 00 00 00       	mov    edi,0x18
c001a693:	56                   	push   esi
c001a694:	53                   	push   ebx
c001a695:	bb 3c 00 00 00       	mov    ebx,0x3c
c001a69a:	83 ec 30             	sub    esp,0x30
c001a69d:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001a6a1:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001a6a4:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001a6a7:	f7 f3                	div    ebx
c001a6a9:	89 d6                	mov    esi,edx
c001a6ab:	31 d2                	xor    edx,edx
c001a6ad:	f7 f3                	div    ebx
c001a6af:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001a6b2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a6b6:	bb 10 0e 00 00       	mov    ebx,0xe10
c001a6bb:	31 d2                	xor    edx,edx
c001a6bd:	f7 f3                	div    ebx
c001a6bf:	31 d2                	xor    edx,edx
c001a6c1:	bb 0c 00 00 00       	mov    ebx,0xc
c001a6c6:	f7 f7                	div    edi
c001a6c8:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001a6cb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001a6cf:	0f b7 cd             	movzx  ecx,bp
c001a6d2:	56                   	push   esi
c001a6d3:	89 c7                	mov    edi,eax
c001a6d5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001a6d9:	c1 e6 10             	shl    esi,0x10
c001a6dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6e0:	83 e7 1f             	and    edi,0x1f
c001a6e3:	51                   	push   ecx
c001a6e4:	47                   	inc    edi
c001a6e5:	c1 e8 05             	shr    eax,0x5
c001a6e8:	31 d2                	xor    edx,edx
c001a6ea:	f7 f3                	div    ebx
c001a6ec:	31 db                	xor    ebx,ebx
c001a6ee:	52                   	push   edx
c001a6ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001a6f3:	57                   	push   edi
c001a6f4:	68 49 a6 02 c0       	push   0xc002a649
c001a6f9:	e8 81 80 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001a6fe:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a702:	89 f8                	mov    eax,edi
c001a704:	31 c9                	xor    ecx,ecx
c001a706:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001a70a:	88 c1                	mov    cl,al
c001a70c:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001a712:	88 d5                	mov    ch,dl
c001a714:	c1 e0 10             	shl    eax,0x10
c001a717:	0f b7 d1             	movzx  edx,cx
c001a71a:	09 c2                	or     edx,eax
c001a71c:	89 d8                	mov    eax,ebx
c001a71e:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001a723:	09 f0                	or     eax,esi
c001a725:	89 c3                	mov    ebx,eax
c001a727:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001a72b:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001a72f:	83 c4 18             	add    esp,0x18
c001a732:	53                   	push   ebx
c001a733:	52                   	push   edx
c001a734:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a738:	8d 74 24 28          	lea    esi,[esp+0x28]
c001a73c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001a740:	e8 1e 90 ff ff       	call   c0013763 <datetimeToSeconds(datetime_t)>
c001a745:	83 c4 0c             	add    esp,0xc
c001a748:	52                   	push   edx
c001a749:	50                   	push   eax
c001a74a:	56                   	push   esi
c001a74b:	e8 9a 91 ff ff       	call   c00138ea <secondsToDatetime(unsigned long long)>
c001a750:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a754:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a758:	51                   	push   ecx
c001a759:	89 d6                	mov    esi,edx
c001a75b:	51                   	push   ecx
c001a75c:	c1 ee 10             	shr    esi,0x10
c001a75f:	89 f3                	mov    ebx,esi
c001a761:	0f b6 f3             	movzx  esi,bl
c001a764:	56                   	push   esi
c001a765:	0f b6 f6             	movzx  esi,dh
c001a768:	0f b6 d2             	movzx  edx,dl
c001a76b:	56                   	push   esi
c001a76c:	52                   	push   edx
c001a76d:	89 c2                	mov    edx,eax
c001a76f:	c1 ea 10             	shr    edx,0x10
c001a772:	52                   	push   edx
c001a773:	0f b6 d4             	movzx  edx,ah
c001a776:	0f b6 c0             	movzx  eax,al
c001a779:	52                   	push   edx
c001a77a:	50                   	push   eax
c001a77b:	68 65 a6 02 c0       	push   0xc002a665
c001a780:	e8 fa 7f ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001a785:	83 c4 2c             	add    esp,0x2c
c001a788:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c001a78d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001a791:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001a795:	53                   	push   ebx
c001a796:	51                   	push   ecx
c001a797:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001a79d:	e8 e8 90 ff ff       	call   c001388a <Clock::setTimeInDatetimeLocal(datetime_t)>
c001a7a2:	83 f0 01             	xor    eax,0x1
c001a7a5:	31 d2                	xor    edx,edx
c001a7a7:	0f b6 c0             	movzx  eax,al
c001a7aa:	83 c4 3c             	add    esp,0x3c
c001a7ad:	5b                   	pop    ebx
c001a7ae:	5e                   	pop    esi
c001a7af:	5f                   	pop    edi
c001a7b0:	5d                   	pop    ebp
c001a7b1:	c3                   	ret    

c001a7b2 <Sys::timezone(regs*)>:
c001a7b2:	53                   	push   ebx
c001a7b3:	83 ec 08             	sub    esp,0x8
c001a7b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a7ba:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001a7be:	75 17                	jne    c001a7d7 <Sys::timezone(regs*)+0x25>
c001a7c0:	83 ec 0c             	sub    esp,0xc
c001a7c3:	68 81 a6 02 c0       	push   0xc002a681
c001a7c8:	e8 b2 7f ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001a7cd:	83 c8 ff             	or     eax,0xffffffff
c001a7d0:	83 c4 10             	add    esp,0x10
c001a7d3:	89 c2                	mov    edx,eax
c001a7d5:	eb 20                	jmp    c001a7f7 <Sys::timezone(regs*)+0x45>
c001a7d7:	83 ec 0c             	sub    esp,0xc
c001a7da:	68 b9 a6 02 c0       	push   0xc002a6b9
c001a7df:	e8 9b 7f ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001a7e4:	58                   	pop    eax
c001a7e5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001a7e8:	e8 ff 8d ff ff       	call   c00135ec <User::loadClockSettings(int)>
c001a7ed:	83 c4 10             	add    esp,0x10
c001a7f0:	b8 01 00 00 00       	mov    eax,0x1
c001a7f5:	31 d2                	xor    edx,edx
c001a7f7:	83 c4 08             	add    esp,0x8
c001a7fa:	5b                   	pop    ebx
c001a7fb:	c3                   	ret    

c001a7fc <Sys::write(regs*)>:
c001a7fc:	57                   	push   edi
c001a7fd:	56                   	push   esi
c001a7fe:	53                   	push   ebx
c001a7ff:	83 ec 10             	sub    esp,0x10
c001a802:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a806:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a809:	83 f8 02             	cmp    eax,0x2
c001a80c:	77 10                	ja     c001a81e <Sys::write(regs*)+0x22>
c001a80e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a813:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a816:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a81c:	eb 0e                	jmp    c001a82c <Sys::write(regs*)+0x30>
c001a81e:	83 ec 0c             	sub    esp,0xc
c001a821:	50                   	push   eax
c001a822:	e8 12 6e ff ff       	call   c0011639 <getFromFileDescriptor(int)>
c001a827:	83 c4 10             	add    esp,0x10
c001a82a:	89 c1                	mov    ecx,eax
c001a82c:	83 c8 ff             	or     eax,0xffffffff
c001a82f:	85 c9                	test   ecx,ecx
c001a831:	89 c2                	mov    edx,eax
c001a833:	74 28                	je     c001a85d <Sys::write(regs*)+0x61>
c001a835:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a83d:	31 ff                	xor    edi,edi
c001a83f:	83 ec 0c             	sub    esp,0xc
c001a842:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a844:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a848:	52                   	push   edx
c001a849:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a84c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a84f:	57                   	push   edi
c001a850:	56                   	push   esi
c001a851:	51                   	push   ecx
c001a852:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a855:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a859:	83 c4 20             	add    esp,0x20
c001a85c:	99                   	cdq    
c001a85d:	83 c4 10             	add    esp,0x10
c001a860:	5b                   	pop    ebx
c001a861:	5e                   	pop    esi
c001a862:	5f                   	pop    edi
c001a863:	c3                   	ret    

c001a864 <Sys::yield(regs*)>:
c001a864:	57                   	push   edi
c001a865:	56                   	push   esi
c001a866:	53                   	push   ebx
c001a867:	e8 7a 26 00 00       	call   c001cee6 <lockScheduler()>
c001a86c:	e8 b1 29 00 00       	call   c001d222 <schedule()>
c001a871:	e8 72 26 00 00       	call   c001cee8 <unlockScheduler()>
c001a876:	8b 35 70 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d270
c001a87c:	8b 3d 74 d2 02 c0    	mov    edi,DWORD PTR ds:0xc002d274
c001a882:	89 f0                	mov    eax,esi
c001a884:	89 fb                	mov    ebx,edi
c001a886:	89 f1                	mov    ecx,esi
c001a888:	c1 e0 07             	shl    eax,0x7
c001a88b:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001a88f:	25 80 30 0f 00       	and    eax,0xf3080
c001a894:	c1 eb 17             	shr    ebx,0x17
c001a897:	31 c8                	xor    eax,ecx
c001a899:	89 da                	mov    edx,ebx
c001a89b:	5b                   	pop    ebx
c001a89c:	5e                   	pop    esi
c001a89d:	5f                   	pop    edi
c001a89e:	c3                   	ret    

c001a89f <sysCallSeekDir(regs*)>:
c001a89f:	31 c0                	xor    eax,eax
c001a8a1:	31 d2                	xor    edx,edx
c001a8a3:	c3                   	ret    

c001a8a4 <sysCallTellDir(regs*)>:
c001a8a4:	31 c0                	xor    eax,eax
c001a8a6:	31 d2                	xor    edx,edx
c001a8a8:	c3                   	ret    

c001a8a9 <sysCallVerify(regs*)>:
c001a8a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8ad:	31 d2                	xor    edx,edx
c001a8af:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a8b2:	c3                   	ret    

c001a8b3 <sysCallGetArgc(regs*)>:
c001a8b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a8b8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a8bb:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001a8c1:	99                   	cdq    
c001a8c2:	c3                   	ret    

c001a8c3 <sysFormatDisk(regs*)>:
c001a8c3:	56                   	push   esi
c001a8c4:	53                   	push   ebx
c001a8c5:	53                   	push   ebx
c001a8c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a8ca:	8b 1d 68 cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cd68
c001a8d0:	eb 25                	jmp    c001a8f7 <sysFormatDisk(regs*)+0x34>
c001a8d2:	83 ec 0c             	sub    esp,0xc
c001a8d5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a8d8:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a8da:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001a8dd:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001a8e0:	50                   	push   eax
c001a8e1:	ff 34 85 00 d2 02 c0 	push   DWORD PTR [eax*4-0x3ffd2e00]
c001a8e8:	53                   	push   ebx
c001a8e9:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001a8ec:	83 c4 20             	add    esp,0x20
c001a8ef:	83 f8 08             	cmp    eax,0x8
c001a8f2:	75 12                	jne    c001a906 <sysFormatDisk(regs*)+0x43>
c001a8f4:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001a8f7:	85 db                	test   ebx,ebx
c001a8f9:	75 d7                	jne    c001a8d2 <sysFormatDisk(regs*)+0xf>
c001a8fb:	59                   	pop    ecx
c001a8fc:	b8 03 00 00 00       	mov    eax,0x3
c001a901:	31 d2                	xor    edx,edx
c001a903:	5b                   	pop    ebx
c001a904:	5e                   	pop    esi
c001a905:	c3                   	ret    
c001a906:	85 c0                	test   eax,eax
c001a908:	74 1b                	je     c001a925 <sysFormatDisk(regs*)+0x62>
c001a90a:	83 f8 09             	cmp    eax,0x9
c001a90d:	74 0b                	je     c001a91a <sysFormatDisk(regs*)+0x57>
c001a90f:	59                   	pop    ecx
c001a910:	b8 02 00 00 00       	mov    eax,0x2
c001a915:	31 d2                	xor    edx,edx
c001a917:	5b                   	pop    ebx
c001a918:	5e                   	pop    esi
c001a919:	c3                   	ret    
c001a91a:	59                   	pop    ecx
c001a91b:	b8 01 00 00 00       	mov    eax,0x1
c001a920:	31 d2                	xor    edx,edx
c001a922:	5b                   	pop    ebx
c001a923:	5e                   	pop    esi
c001a924:	c3                   	ret    
c001a925:	59                   	pop    ecx
c001a926:	31 c0                	xor    eax,eax
c001a928:	31 d2                	xor    edx,edx
c001a92a:	5b                   	pop    ebx
c001a92b:	5e                   	pop    esi
c001a92c:	c3                   	ret    

c001a92d <sysSetDiskVolumeLabel(regs*)>:
c001a92d:	56                   	push   esi
c001a92e:	53                   	push   ebx
c001a92f:	53                   	push   ebx
c001a930:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a934:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001a937:	83 f8 19             	cmp    eax,0x19
c001a93a:	77 29                	ja     c001a965 <sysSetDiskVolumeLabel(regs*)+0x38>
c001a93c:	8b 0c 85 00 d2 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2e00]
c001a943:	85 c9                	test   ecx,ecx
c001a945:	74 1e                	je     c001a965 <sysSetDiskVolumeLabel(regs*)+0x38>
c001a947:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001a94a:	85 d2                	test   edx,edx
c001a94c:	74 17                	je     c001a965 <sysSetDiskVolumeLabel(regs*)+0x38>
c001a94e:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001a954:	8b 33                	mov    esi,DWORD PTR [ebx]
c001a956:	52                   	push   edx
c001a957:	50                   	push   eax
c001a958:	51                   	push   ecx
c001a959:	53                   	push   ebx
c001a95a:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001a95d:	83 c4 10             	add    esp,0x10
c001a960:	99                   	cdq    
c001a961:	59                   	pop    ecx
c001a962:	5b                   	pop    ebx
c001a963:	5e                   	pop    esi
c001a964:	c3                   	ret    
c001a965:	59                   	pop    ecx
c001a966:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001a96b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a970:	5b                   	pop    ebx
c001a971:	5e                   	pop    esi
c001a972:	c3                   	ret    

c001a973 <sysGetDiskVolumeLabel(regs*)>:
c001a973:	57                   	push   edi
c001a974:	56                   	push   esi
c001a975:	53                   	push   ebx
c001a976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a97a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001a97d:	83 fa 19             	cmp    edx,0x19
c001a980:	77 34                	ja     c001a9b6 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a982:	8b 0c 95 00 d2 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd2e00]
c001a989:	85 c9                	test   ecx,ecx
c001a98b:	74 29                	je     c001a9b6 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a98d:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001a990:	85 db                	test   ebx,ebx
c001a992:	74 22                	je     c001a9b6 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a994:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001a997:	85 c0                	test   eax,eax
c001a999:	74 1b                	je     c001a9b6 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a99b:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001a9a1:	83 ec 0c             	sub    esp,0xc
c001a9a4:	8b 3e                	mov    edi,DWORD PTR [esi]
c001a9a6:	50                   	push   eax
c001a9a7:	53                   	push   ebx
c001a9a8:	52                   	push   edx
c001a9a9:	51                   	push   ecx
c001a9aa:	56                   	push   esi
c001a9ab:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001a9ae:	83 c4 20             	add    esp,0x20
c001a9b1:	99                   	cdq    
c001a9b2:	5b                   	pop    ebx
c001a9b3:	5e                   	pop    esi
c001a9b4:	5f                   	pop    edi
c001a9b5:	c3                   	ret    
c001a9b6:	5b                   	pop    ebx
c001a9b7:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001a9bc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a9c1:	5e                   	pop    esi
c001a9c2:	5f                   	pop    edi
c001a9c3:	c3                   	ret    

c001a9c4 <sysShutdown(regs*)>:
c001a9c4:	83 ec 0c             	sub    esp,0xc
c001a9c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9cb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a9ce:	85 c0                	test   eax,eax
c001a9d0:	74 18                	je     c001a9ea <sysShutdown(regs*)+0x26>
c001a9d2:	83 f8 01             	cmp    eax,0x1
c001a9d5:	74 38                	je     c001aa0f <sysShutdown(regs*)+0x4b>
c001a9d7:	83 f8 02             	cmp    eax,0x2
c001a9da:	74 24                	je     c001aa00 <sysShutdown(regs*)+0x3c>
c001a9dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a9e1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a9e6:	83 c4 0c             	add    esp,0xc
c001a9e9:	c3                   	ret    
c001a9ea:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c001a9ef:	8b 10                	mov    edx,DWORD PTR [eax]
c001a9f1:	6a 00                	push   0x0
c001a9f3:	6a 00                	push   0x0
c001a9f5:	6a 00                	push   0x0
c001a9f7:	50                   	push   eax
c001a9f8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a9fb:	83 c4 10             	add    esp,0x10
c001a9fe:	eb dc                	jmp    c001a9dc <sysShutdown(regs*)+0x18>
c001aa00:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c001aa05:	8b 10                	mov    edx,DWORD PTR [eax]
c001aa07:	6a 00                	push   0x0
c001aa09:	6a 00                	push   0x0
c001aa0b:	6a 01                	push   0x1
c001aa0d:	eb e8                	jmp    c001a9f7 <sysShutdown(regs*)+0x33>
c001aa0f:	a1 80 d2 02 c0       	mov    eax,ds:0xc002d280
c001aa14:	85 c0                	test   eax,eax
c001aa16:	74 02                	je     c001aa1a <sysShutdown(regs*)+0x56>
c001aa18:	ff d0                	call   eax
c001aa1a:	31 c0                	xor    eax,eax
c001aa1c:	31 d2                	xor    edx,edx
c001aa1e:	83 c4 0c             	add    esp,0xc
c001aa21:	c3                   	ret    

c001aa22 <sysCallRealpath(regs*)>:
c001aa22:	83 ec 0c             	sub    esp,0xc
c001aa25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa29:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001aa2c:	85 d2                	test   edx,edx
c001aa2e:	74 07                	je     c001aa37 <sysCallRealpath(regs*)+0x15>
c001aa30:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001aa33:	85 c0                	test   eax,eax
c001aa35:	75 0b                	jne    c001aa42 <sysCallRealpath(regs*)+0x20>
c001aa37:	b8 01 00 00 00       	mov    eax,0x1
c001aa3c:	31 d2                	xor    edx,edx
c001aa3e:	83 c4 0c             	add    esp,0xc
c001aa41:	c3                   	ret    
c001aa42:	51                   	push   ecx
c001aa43:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001aa49:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001aa4c:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001aa52:	51                   	push   ecx
c001aa53:	52                   	push   edx
c001aa54:	50                   	push   eax
c001aa55:	e8 d4 80 ff ff       	call   c0012b2e <Fs::standardiseFiles(char*, char const*, char const*)>
c001aa5a:	83 c4 10             	add    esp,0x10
c001aa5d:	31 c0                	xor    eax,eax
c001aa5f:	31 d2                	xor    edx,edx
c001aa61:	83 c4 0c             	add    esp,0xc
c001aa64:	c3                   	ret    

c001aa65 <sysCallReadDir(regs*)>:
c001aa65:	53                   	push   ebx
c001aa66:	83 ec 18             	sub    esp,0x18
c001aa69:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aa6d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001aa70:	83 f8 02             	cmp    eax,0x2
c001aa73:	76 53                	jbe    c001aac8 <sysCallReadDir(regs*)+0x63>
c001aa75:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001aa78:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001aa7e:	77 4f                	ja     c001aacf <sysCallReadDir(regs*)+0x6a>
c001aa80:	83 ec 0c             	sub    esp,0xc
c001aa83:	50                   	push   eax
c001aa84:	e8 b0 6b ff ff       	call   c0011639 <getFromFileDescriptor(int)>
c001aa89:	83 c4 10             	add    esp,0x10
c001aa8c:	85 c0                	test   eax,eax
c001aa8e:	74 50                	je     c001aae0 <sysCallReadDir(regs*)+0x7b>
c001aa90:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa98:	83 ec 0c             	sub    esp,0xc
c001aa9b:	8b 10                	mov    edx,DWORD PTR [eax]
c001aa9d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001aaa1:	51                   	push   ecx
c001aaa2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001aaa5:	6a 00                	push   0x0
c001aaa7:	68 10 01 00 00       	push   0x110
c001aaac:	50                   	push   eax
c001aaad:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001aab0:	83 c4 20             	add    esp,0x20
c001aab3:	85 c0                	test   eax,eax
c001aab5:	74 38                	je     c001aaef <sysCallReadDir(regs*)+0x8a>
c001aab7:	83 f8 07             	cmp    eax,0x7
c001aaba:	74 0c                	je     c001aac8 <sysCallReadDir(regs*)+0x63>
c001aabc:	b8 02 00 00 00       	mov    eax,0x2
c001aac1:	31 d2                	xor    edx,edx
c001aac3:	83 c4 18             	add    esp,0x18
c001aac6:	5b                   	pop    ebx
c001aac7:	c3                   	ret    
c001aac8:	b8 01 00 00 00       	mov    eax,0x1
c001aacd:	eb f2                	jmp    c001aac1 <sysCallReadDir(regs*)+0x5c>
c001aacf:	83 ec 08             	sub    esp,0x8
c001aad2:	52                   	push   edx
c001aad3:	68 f8 a6 02 c0       	push   0xc002a6f8
c001aad8:	e8 a2 7c ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001aadd:	83 c4 10             	add    esp,0x10
c001aae0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001aae5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aaea:	83 c4 18             	add    esp,0x18
c001aaed:	5b                   	pop    ebx
c001aaee:	c3                   	ret    
c001aaef:	31 c0                	xor    eax,eax
c001aaf1:	eb ce                	jmp    c001aac1 <sysCallReadDir(regs*)+0x5c>

c001aaf3 <sysCallIsATTY(regs*)>:
c001aaf3:	83 ec 0c             	sub    esp,0xc
c001aaf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aafa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001aafd:	83 f8 02             	cmp    eax,0x2
c001ab00:	76 07                	jbe    c001ab09 <sysCallIsATTY(regs*)+0x16>
c001ab02:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001ab07:	75 26                	jne    c001ab2f <sysCallIsATTY(regs*)+0x3c>
c001ab09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab0e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ab11:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ab17:	85 c0                	test   eax,eax
c001ab19:	74 24                	je     c001ab3f <sysCallIsATTY(regs*)+0x4c>
c001ab1b:	83 ec 0c             	sub    esp,0xc
c001ab1e:	8b 10                	mov    edx,DWORD PTR [eax]
c001ab20:	50                   	push   eax
c001ab21:	ff 12                	call   DWORD PTR [edx]
c001ab23:	31 d2                	xor    edx,edx
c001ab25:	0f b6 c0             	movzx  eax,al
c001ab28:	83 c4 10             	add    esp,0x10
c001ab2b:	83 c4 0c             	add    esp,0xc
c001ab2e:	c3                   	ret    
c001ab2f:	83 ec 0c             	sub    esp,0xc
c001ab32:	50                   	push   eax
c001ab33:	e8 01 6b ff ff       	call   c0011639 <getFromFileDescriptor(int)>
c001ab38:	83 c4 10             	add    esp,0x10
c001ab3b:	85 c0                	test   eax,eax
c001ab3d:	75 dc                	jne    c001ab1b <sysCallIsATTY(regs*)+0x28>
c001ab3f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ab44:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ab49:	83 c4 0c             	add    esp,0xc
c001ab4c:	c3                   	ret    

c001ab4d <sysCallSeek(regs*)>:
c001ab4d:	53                   	push   ebx
c001ab4e:	83 ec 08             	sub    esp,0x8
c001ab51:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab55:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ab58:	83 f8 02             	cmp    eax,0x2
c001ab5b:	76 4a                	jbe    c001aba7 <sysCallSeek(regs*)+0x5a>
c001ab5d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ab62:	77 32                	ja     c001ab96 <sysCallSeek(regs*)+0x49>
c001ab64:	83 ec 0c             	sub    esp,0xc
c001ab67:	50                   	push   eax
c001ab68:	e8 cc 6a ff ff       	call   c0011639 <getFromFileDescriptor(int)>
c001ab6d:	83 c4 0c             	add    esp,0xc
c001ab70:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001ab73:	31 db                	xor    ebx,ebx
c001ab75:	53                   	push   ebx
c001ab76:	51                   	push   ecx
c001ab77:	50                   	push   eax
c001ab78:	e8 7d 82 ff ff       	call   c0012dfa <File::seek(unsigned long long)>
c001ab7d:	83 c4 10             	add    esp,0x10
c001ab80:	85 c0                	test   eax,eax
c001ab82:	0f 95 c0             	setne  al
c001ab85:	31 d2                	xor    edx,edx
c001ab87:	0f b6 c0             	movzx  eax,al
c001ab8a:	f7 d8                	neg    eax
c001ab8c:	83 d2 00             	adc    edx,0x0
c001ab8f:	83 c4 08             	add    esp,0x8
c001ab92:	f7 da                	neg    edx
c001ab94:	5b                   	pop    ebx
c001ab95:	c3                   	ret    
c001ab96:	83 ec 08             	sub    esp,0x8
c001ab99:	50                   	push   eax
c001ab9a:	68 67 a7 02 c0       	push   0xc002a767
c001ab9f:	e8 db 7b ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001aba4:	83 c4 10             	add    esp,0x10
c001aba7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001abac:	ba ff ff ff ff       	mov    edx,0xffffffff
c001abb1:	83 c4 08             	add    esp,0x8
c001abb4:	5b                   	pop    ebx
c001abb5:	c3                   	ret    

c001abb6 <sysCallTell(regs*)>:
c001abb6:	53                   	push   ebx
c001abb7:	83 ec 08             	sub    esp,0x8
c001abba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001abbe:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001abc1:	83 f8 02             	cmp    eax,0x2
c001abc4:	76 5e                	jbe    c001ac24 <sysCallTell(regs*)+0x6e>
c001abc6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001abcb:	77 2d                	ja     c001abfa <sysCallTell(regs*)+0x44>
c001abcd:	83 ec 0c             	sub    esp,0xc
c001abd0:	50                   	push   eax
c001abd1:	e8 63 6a ff ff       	call   c0011639 <getFromFileDescriptor(int)>
c001abd6:	5a                   	pop    edx
c001abd7:	59                   	pop    ecx
c001abd8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001abdb:	50                   	push   eax
c001abdc:	e8 6f 82 ff ff       	call   c0012e50 <File::tell(unsigned long long*)>
c001abe1:	83 c4 10             	add    esp,0x10
c001abe4:	85 c0                	test   eax,eax
c001abe6:	0f 95 c0             	setne  al
c001abe9:	31 d2                	xor    edx,edx
c001abeb:	0f b6 c0             	movzx  eax,al
c001abee:	f7 d8                	neg    eax
c001abf0:	83 d2 00             	adc    edx,0x0
c001abf3:	83 c4 08             	add    esp,0x8
c001abf6:	f7 da                	neg    edx
c001abf8:	5b                   	pop    ebx
c001abf9:	c3                   	ret    
c001abfa:	83 ec 08             	sub    esp,0x8
c001abfd:	50                   	push   eax
c001abfe:	68 81 a7 02 c0       	push   0xc002a781
c001ac03:	e8 77 7b ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001ac08:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ac0b:	83 c4 10             	add    esp,0x10
c001ac0e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ac14:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ac1b:	31 d2                	xor    edx,edx
c001ac1d:	31 c0                	xor    eax,eax
c001ac1f:	83 c4 08             	add    esp,0x8
c001ac22:	5b                   	pop    ebx
c001ac23:	c3                   	ret    
c001ac24:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ac29:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ac2e:	83 c4 08             	add    esp,0x8
c001ac31:	5b                   	pop    ebx
c001ac32:	c3                   	ret    

c001ac33 <sysCallSize(regs*)>:
c001ac33:	53                   	push   ebx
c001ac34:	83 ec 18             	sub    esp,0x18
c001ac37:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ac3b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ac3e:	83 f8 02             	cmp    eax,0x2
c001ac41:	76 64                	jbe    c001aca7 <sysCallSize(regs*)+0x74>
c001ac43:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ac48:	77 33                	ja     c001ac7d <sysCallSize(regs*)+0x4a>
c001ac4a:	83 ec 0c             	sub    esp,0xc
c001ac4d:	50                   	push   eax
c001ac4e:	e8 e6 69 ff ff       	call   c0011639 <getFromFileDescriptor(int)>
c001ac53:	83 c4 0c             	add    esp,0xc
c001ac56:	8d 54 24 13          	lea    edx,[esp+0x13]
c001ac5a:	52                   	push   edx
c001ac5b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ac5e:	50                   	push   eax
c001ac5f:	e8 84 83 ff ff       	call   c0012fe8 <File::stat(unsigned long long*, bool*)>
c001ac64:	83 c4 10             	add    esp,0x10
c001ac67:	85 c0                	test   eax,eax
c001ac69:	0f 95 c0             	setne  al
c001ac6c:	31 d2                	xor    edx,edx
c001ac6e:	0f b6 c0             	movzx  eax,al
c001ac71:	f7 d8                	neg    eax
c001ac73:	83 d2 00             	adc    edx,0x0
c001ac76:	83 c4 18             	add    esp,0x18
c001ac79:	f7 da                	neg    edx
c001ac7b:	5b                   	pop    ebx
c001ac7c:	c3                   	ret    
c001ac7d:	83 ec 08             	sub    esp,0x8
c001ac80:	50                   	push   eax
c001ac81:	68 9b a7 02 c0       	push   0xc002a79b
c001ac86:	e8 f4 7a ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001ac8b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ac8e:	83 c4 10             	add    esp,0x10
c001ac91:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ac97:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ac9e:	31 d2                	xor    edx,edx
c001aca0:	31 c0                	xor    eax,eax
c001aca2:	83 c4 18             	add    esp,0x18
c001aca5:	5b                   	pop    ebx
c001aca6:	c3                   	ret    
c001aca7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001acac:	ba ff ff ff ff       	mov    edx,0xffffffff
c001acb1:	83 c4 18             	add    esp,0x18
c001acb4:	5b                   	pop    ebx
c001acb5:	c3                   	ret    

c001acb6 <sysCallSizeFromFilename(regs*)>:
c001acb6:	57                   	push   edi
c001acb7:	56                   	push   esi
c001acb8:	53                   	push   ebx
c001acb9:	83 ec 20             	sub    esp,0x20
c001acbc:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001acc0:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001acc3:	83 fb 02             	cmp    ebx,0x2
c001acc6:	0f 86 99 00 00 00    	jbe    c001ad65 <sysCallSizeFromFilename(regs*)+0xaf>
c001accc:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001acd2:	77 65                	ja     c001ad39 <sysCallSizeFromFilename(regs*)+0x83>
c001acd4:	83 ec 0c             	sub    esp,0xc
c001acd7:	68 14 01 00 00       	push   0x114
c001acdc:	e8 f9 47 ff ff       	call   c000f4da <malloc>
c001ace1:	83 c4 0c             	add    esp,0xc
c001ace4:	89 c6                	mov    esi,eax
c001ace6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aceb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001acee:	53                   	push   ebx
c001acef:	56                   	push   esi
c001acf0:	e8 e3 7f ff ff       	call   c0012cd8 <File::File(char const*, Process*)>
c001acf5:	83 c4 0c             	add    esp,0xc
c001acf8:	8d 44 24 23          	lea    eax,[esp+0x23]
c001acfc:	50                   	push   eax
c001acfd:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001ad00:	56                   	push   esi
c001ad01:	e8 e2 82 ff ff       	call   c0012fe8 <File::stat(unsigned long long*, bool*)>
c001ad06:	83 c4 10             	add    esp,0x10
c001ad09:	85 f6                	test   esi,esi
c001ad0b:	74 14                	je     c001ad21 <sysCallSizeFromFilename(regs*)+0x6b>
c001ad0d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad11:	8b 16                	mov    edx,DWORD PTR [esi]
c001ad13:	83 ec 0c             	sub    esp,0xc
c001ad16:	56                   	push   esi
c001ad17:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ad1a:	83 c4 10             	add    esp,0x10
c001ad1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad21:	85 c0                	test   eax,eax
c001ad23:	0f 95 c0             	setne  al
c001ad26:	31 d2                	xor    edx,edx
c001ad28:	0f b6 c0             	movzx  eax,al
c001ad2b:	f7 d8                	neg    eax
c001ad2d:	83 d2 00             	adc    edx,0x0
c001ad30:	83 c4 20             	add    esp,0x20
c001ad33:	f7 da                	neg    edx
c001ad35:	5b                   	pop    ebx
c001ad36:	5e                   	pop    esi
c001ad37:	5f                   	pop    edi
c001ad38:	c3                   	ret    
c001ad39:	83 ec 08             	sub    esp,0x8
c001ad3c:	53                   	push   ebx
c001ad3d:	68 9b a7 02 c0       	push   0xc002a79b
c001ad42:	e8 38 7a ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001ad47:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001ad4a:	83 c4 10             	add    esp,0x10
c001ad4d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ad53:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ad5a:	31 d2                	xor    edx,edx
c001ad5c:	83 c4 20             	add    esp,0x20
c001ad5f:	31 c0                	xor    eax,eax
c001ad61:	5b                   	pop    ebx
c001ad62:	5e                   	pop    esi
c001ad63:	5f                   	pop    edi
c001ad64:	c3                   	ret    
c001ad65:	83 c4 20             	add    esp,0x20
c001ad68:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ad6d:	5b                   	pop    ebx
c001ad6e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ad73:	5e                   	pop    esi
c001ad74:	5f                   	pop    edi
c001ad75:	c3                   	ret    

c001ad76 <sysCallClose(regs*)>:
c001ad76:	53                   	push   ebx
c001ad77:	83 ec 08             	sub    esp,0x8
c001ad7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad7e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ad81:	83 f8 02             	cmp    eax,0x2
c001ad84:	76 50                	jbe    c001add6 <sysCallClose(regs*)+0x60>
c001ad86:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001ad8b:	74 58                	je     c001ade5 <sysCallClose(regs*)+0x6f>
c001ad8d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ad92:	74 60                	je     c001adf4 <sysCallClose(regs*)+0x7e>
c001ad94:	77 2f                	ja     c001adc5 <sysCallClose(regs*)+0x4f>
c001ad96:	83 ec 0c             	sub    esp,0xc
c001ad99:	50                   	push   eax
c001ad9a:	e8 9a 68 ff ff       	call   c0011639 <getFromFileDescriptor(int)>
c001ad9f:	89 c3                	mov    ebx,eax
c001ada1:	89 04 24             	mov    DWORD PTR [esp],eax
c001ada4:	e8 f1 7f ff ff       	call   c0012d9a <File::close()>
c001ada9:	83 c4 10             	add    esp,0x10
c001adac:	85 db                	test   ebx,ebx
c001adae:	74 0c                	je     c001adbc <sysCallClose(regs*)+0x46>
c001adb0:	83 ec 0c             	sub    esp,0xc
c001adb3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001adb5:	53                   	push   ebx
c001adb6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001adb9:	83 c4 10             	add    esp,0x10
c001adbc:	31 c0                	xor    eax,eax
c001adbe:	31 d2                	xor    edx,edx
c001adc0:	83 c4 08             	add    esp,0x8
c001adc3:	5b                   	pop    ebx
c001adc4:	c3                   	ret    
c001adc5:	83 ec 08             	sub    esp,0x8
c001adc8:	50                   	push   eax
c001adc9:	68 1c a7 02 c0       	push   0xc002a71c
c001adce:	e8 ac 79 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001add3:	83 c4 10             	add    esp,0x10
c001add6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001addb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ade0:	83 c4 08             	add    esp,0x8
c001ade3:	5b                   	pop    ebx
c001ade4:	c3                   	ret    
c001ade5:	83 ec 0c             	sub    esp,0xc
c001ade8:	68 b6 a7 02 c0       	push   0xc002a7b6
c001aded:	e8 8d 79 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001adf2:	eb c5                	jmp    c001adb9 <sysCallClose(regs*)+0x43>
c001adf4:	83 ec 0c             	sub    esp,0xc
c001adf7:	68 c4 a7 02 c0       	push   0xc002a7c4
c001adfc:	eb ef                	jmp    c001aded <sysCallClose(regs*)+0x77>

c001adfe <sysCallOpenDir(regs*)>:
c001adfe:	56                   	push   esi
c001adff:	53                   	push   ebx
c001ae00:	53                   	push   ebx
c001ae01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ae05:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001ae08:	85 f6                	test   esi,esi
c001ae0a:	74 59                	je     c001ae65 <sysCallOpenDir(regs*)+0x67>
c001ae0c:	83 ec 0c             	sub    esp,0xc
c001ae0f:	68 14 01 00 00       	push   0x114
c001ae14:	e8 c1 46 ff ff       	call   c000f4da <malloc>
c001ae19:	83 c4 0c             	add    esp,0xc
c001ae1c:	89 c6                	mov    esi,eax
c001ae1e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae23:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ae26:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ae29:	56                   	push   esi
c001ae2a:	e8 55 83 ff ff       	call   c0013184 <Directory::Directory(char const*, Process*)>
c001ae2f:	83 c4 10             	add    esp,0x10
c001ae32:	85 f6                	test   esi,esi
c001ae34:	74 2f                	je     c001ae65 <sysCallOpenDir(regs*)+0x67>
c001ae36:	83 ec 0c             	sub    esp,0xc
c001ae39:	56                   	push   esi
c001ae3a:	e8 a9 83 ff ff       	call   c00131e8 <Directory::open()>
c001ae3f:	83 c4 10             	add    esp,0x10
c001ae42:	85 c0                	test   eax,eax
c001ae44:	75 1f                	jne    c001ae65 <sysCallOpenDir(regs*)+0x67>
c001ae46:	83 ec 0c             	sub    esp,0xc
c001ae49:	56                   	push   esi
c001ae4a:	e8 f5 64 ff ff       	call   c0011344 <UnixFile::getFileDescriptor()>
c001ae4f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001ae52:	83 c4 10             	add    esp,0x10
c001ae55:	89 02                	mov    DWORD PTR [edx],eax
c001ae57:	c1 f8 1f             	sar    eax,0x1f
c001ae5a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ae5d:	31 c0                	xor    eax,eax
c001ae5f:	59                   	pop    ecx
c001ae60:	31 d2                	xor    edx,edx
c001ae62:	5b                   	pop    ebx
c001ae63:	5e                   	pop    esi
c001ae64:	c3                   	ret    
c001ae65:	59                   	pop    ecx
c001ae66:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ae6b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ae70:	5b                   	pop    ebx
c001ae71:	5e                   	pop    esi
c001ae72:	c3                   	ret    

c001ae73 <sysCallCloseDir(regs*)>:
c001ae73:	53                   	push   ebx
c001ae74:	83 ec 08             	sub    esp,0x8
c001ae77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae7b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ae7e:	83 f8 02             	cmp    eax,0x2
c001ae81:	76 47                	jbe    c001aeca <sysCallCloseDir(regs*)+0x57>
c001ae83:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ae88:	77 2f                	ja     c001aeb9 <sysCallCloseDir(regs*)+0x46>
c001ae8a:	83 ec 0c             	sub    esp,0xc
c001ae8d:	50                   	push   eax
c001ae8e:	e8 a6 67 ff ff       	call   c0011639 <getFromFileDescriptor(int)>
c001ae93:	89 c3                	mov    ebx,eax
c001ae95:	89 04 24             	mov    DWORD PTR [esp],eax
c001ae98:	e8 a7 83 ff ff       	call   c0013244 <Directory::close()>
c001ae9d:	83 c4 10             	add    esp,0x10
c001aea0:	85 db                	test   ebx,ebx
c001aea2:	74 0c                	je     c001aeb0 <sysCallCloseDir(regs*)+0x3d>
c001aea4:	83 ec 0c             	sub    esp,0xc
c001aea7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aea9:	53                   	push   ebx
c001aeaa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aead:	83 c4 10             	add    esp,0x10
c001aeb0:	31 c0                	xor    eax,eax
c001aeb2:	31 d2                	xor    edx,edx
c001aeb4:	83 c4 08             	add    esp,0x8
c001aeb7:	5b                   	pop    ebx
c001aeb8:	c3                   	ret    
c001aeb9:	83 ec 08             	sub    esp,0x8
c001aebc:	50                   	push   eax
c001aebd:	68 44 a7 02 c0       	push   0xc002a744
c001aec2:	e8 b8 78 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001aec7:	83 c4 10             	add    esp,0x10
c001aeca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001aecf:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aed4:	83 c4 08             	add    esp,0x8
c001aed7:	5b                   	pop    ebx
c001aed8:	c3                   	ret    

c001aed9 <sysCallMakeDir(regs*)>:
c001aed9:	56                   	push   esi
c001aeda:	53                   	push   ebx
c001aedb:	83 ec 10             	sub    esp,0x10
c001aede:	68 14 01 00 00       	push   0x114
c001aee3:	e8 f2 45 ff ff       	call   c000f4da <malloc>
c001aee8:	83 c4 0c             	add    esp,0xc
c001aeeb:	89 c3                	mov    ebx,eax
c001aeed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aef2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aef5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aef9:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001aefc:	53                   	push   ebx
c001aefd:	e8 82 82 ff ff       	call   c0013184 <Directory::Directory(char const*, Process*)>
c001af02:	83 c4 10             	add    esp,0x10
c001af05:	85 db                	test   ebx,ebx
c001af07:	74 32                	je     c001af3b <sysCallMakeDir(regs*)+0x62>
c001af09:	83 ec 0c             	sub    esp,0xc
c001af0c:	53                   	push   ebx
c001af0d:	e8 b6 84 ff ff       	call   c00133c8 <Directory::create()>
c001af12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af15:	89 c6                	mov    esi,eax
c001af17:	e8 28 83 ff ff       	call   c0013244 <Directory::close()>
c001af1c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af21:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af24:	83 c4 10             	add    esp,0x10
c001af27:	31 c0                	xor    eax,eax
c001af29:	59                   	pop    ecx
c001af2a:	85 f6                	test   esi,esi
c001af2c:	5b                   	pop    ebx
c001af2d:	0f 95 c0             	setne  al
c001af30:	5e                   	pop    esi
c001af31:	31 d2                	xor    edx,edx
c001af33:	f7 d8                	neg    eax
c001af35:	83 d2 00             	adc    edx,0x0
c001af38:	f7 da                	neg    edx
c001af3a:	c3                   	ret    
c001af3b:	59                   	pop    ecx
c001af3c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001af41:	ba ff ff ff ff       	mov    edx,0xffffffff
c001af46:	5b                   	pop    ebx
c001af47:	5e                   	pop    esi
c001af48:	c3                   	ret    

c001af49 <sysCallWait(regs*)>:
c001af49:	83 ec 10             	sub    esp,0x10
c001af4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af50:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001af53:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001af56:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001af59:	e8 3f 24 00 00       	call   c001d39d <waitTask(int, int*, int)>
c001af5e:	83 c4 1c             	add    esp,0x1c
c001af61:	99                   	cdq    
c001af62:	c3                   	ret    

c001af63 <sysCallNotImpl(regs*)>:
c001af63:	83 ec 18             	sub    esp,0x18
c001af66:	68 d2 a7 02 c0       	push   0xc002a7d2
c001af6b:	e8 61 e9 ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c001af70:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001af75:	ba ff ff ff ff       	mov    edx,0xffffffff
c001af7a:	83 c4 1c             	add    esp,0x1c
c001af7d:	c3                   	ret    

c001af7e <sysPanic(regs*)>:
c001af7e:	83 ec 18             	sub    esp,0x18
c001af81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af85:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001af88:	e8 44 e9 ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c001af8d:	c7 04 24 ec a7 02 c0 	mov    DWORD PTR [esp],0xc002a7ec
c001af94:	e8 38 e9 ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c001af99:	b8 01 00 00 00       	mov    eax,0x1
c001af9e:	31 d2                	xor    edx,edx
c001afa0:	83 c4 1c             	add    esp,0x1c
c001afa3:	c3                   	ret    

c001afa4 <sysCallRmdir(regs*)>:
c001afa4:	56                   	push   esi
c001afa5:	53                   	push   ebx
c001afa6:	83 ec 20             	sub    esp,0x20
c001afa9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001afad:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001afb0:	68 14 01 00 00       	push   0x114
c001afb5:	e8 20 45 ff ff       	call   c000f4da <malloc>
c001afba:	83 c4 0c             	add    esp,0xc
c001afbd:	89 c3                	mov    ebx,eax
c001afbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001afc4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001afc7:	56                   	push   esi
c001afc8:	53                   	push   ebx
c001afc9:	e8 0a 7d ff ff       	call   c0012cd8 <File::File(char const*, Process*)>
c001afce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001afd1:	e8 de 7e ff ff       	call   c0012eb4 <File::unlink()>
c001afd6:	83 c4 10             	add    esp,0x10
c001afd9:	85 db                	test   ebx,ebx
c001afdb:	74 14                	je     c001aff1 <sysCallRmdir(regs*)+0x4d>
c001afdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001afe1:	8b 13                	mov    edx,DWORD PTR [ebx]
c001afe3:	83 ec 0c             	sub    esp,0xc
c001afe6:	53                   	push   ebx
c001afe7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001afea:	83 c4 10             	add    esp,0x10
c001afed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aff1:	85 c0                	test   eax,eax
c001aff3:	0f 95 c0             	setne  al
c001aff6:	31 d2                	xor    edx,edx
c001aff8:	0f b6 c0             	movzx  eax,al
c001affb:	f7 d8                	neg    eax
c001affd:	83 d2 00             	adc    edx,0x0
c001b000:	83 c4 14             	add    esp,0x14
c001b003:	f7 da                	neg    edx
c001b005:	5b                   	pop    ebx
c001b006:	5e                   	pop    esi
c001b007:	c3                   	ret    

c001b008 <sysCallUnlink(regs*)>:
c001b008:	56                   	push   esi
c001b009:	53                   	push   ebx
c001b00a:	83 ec 20             	sub    esp,0x20
c001b00d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b011:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b014:	68 14 01 00 00       	push   0x114
c001b019:	e8 bc 44 ff ff       	call   c000f4da <malloc>
c001b01e:	83 c4 0c             	add    esp,0xc
c001b021:	89 c3                	mov    ebx,eax
c001b023:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b028:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b02b:	56                   	push   esi
c001b02c:	53                   	push   ebx
c001b02d:	e8 a6 7c ff ff       	call   c0012cd8 <File::File(char const*, Process*)>
c001b032:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b035:	e8 7a 7e ff ff       	call   c0012eb4 <File::unlink()>
c001b03a:	83 c4 10             	add    esp,0x10
c001b03d:	85 db                	test   ebx,ebx
c001b03f:	74 14                	je     c001b055 <sysCallUnlink(regs*)+0x4d>
c001b041:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b045:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b047:	83 ec 0c             	sub    esp,0xc
c001b04a:	53                   	push   ebx
c001b04b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b04e:	83 c4 10             	add    esp,0x10
c001b051:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b055:	85 c0                	test   eax,eax
c001b057:	0f 95 c0             	setne  al
c001b05a:	31 d2                	xor    edx,edx
c001b05c:	0f b6 c0             	movzx  eax,al
c001b05f:	f7 d8                	neg    eax
c001b061:	83 d2 00             	adc    edx,0x0
c001b064:	83 c4 14             	add    esp,0x14
c001b067:	f7 da                	neg    edx
c001b069:	5b                   	pop    ebx
c001b06a:	5e                   	pop    esi
c001b06b:	c3                   	ret    

c001b06c <sysCallGetArgv(regs*)>:
c001b06c:	83 ec 0c             	sub    esp,0xc
c001b06f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b073:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b076:	85 c0                	test   eax,eax
c001b078:	78 2b                	js     c001b0a5 <sysCallGetArgv(regs*)+0x39>
c001b07a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b080:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b083:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b089:	7d 1a                	jge    c001b0a5 <sysCallGetArgv(regs*)+0x39>
c001b08b:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b092:	85 c0                	test   eax,eax
c001b094:	74 17                	je     c001b0ad <sysCallGetArgv(regs*)+0x41>
c001b096:	83 ec 08             	sub    esp,0x8
c001b099:	50                   	push   eax
c001b09a:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b09d:	e8 88 56 fe ff       	call   c000072a <strcpy>
c001b0a2:	83 c4 10             	add    esp,0x10
c001b0a5:	31 c0                	xor    eax,eax
c001b0a7:	31 d2                	xor    edx,edx
c001b0a9:	83 c4 0c             	add    esp,0xc
c001b0ac:	c3                   	ret    
c001b0ad:	b8 01 00 00 00       	mov    eax,0x1
c001b0b2:	31 d2                	xor    edx,edx
c001b0b4:	83 c4 0c             	add    esp,0xc
c001b0b7:	c3                   	ret    

c001b0b8 <sysCallTTYName(regs*)>:
c001b0b8:	56                   	push   esi
c001b0b9:	53                   	push   ebx
c001b0ba:	53                   	push   ebx
c001b0bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b0bf:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b0c2:	85 c0                	test   eax,eax
c001b0c4:	74 5f                	je     c001b125 <sysCallTTYName(regs*)+0x6d>
c001b0c6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b0c9:	83 f8 02             	cmp    eax,0x2
c001b0cc:	77 3e                	ja     c001b10c <sysCallTTYName(regs*)+0x54>
c001b0ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0d3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b0d6:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b0dc:	85 db                	test   ebx,ebx
c001b0de:	74 45                	je     c001b125 <sysCallTTYName(regs*)+0x6d>
c001b0e0:	83 ec 0c             	sub    esp,0xc
c001b0e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b0e5:	53                   	push   ebx
c001b0e6:	ff 10                	call   DWORD PTR [eax]
c001b0e8:	83 c4 10             	add    esp,0x10
c001b0eb:	84 c0                	test   al,al
c001b0ed:	74 41                	je     c001b130 <sysCallTTYName(regs*)+0x78>
c001b0ef:	83 ec 08             	sub    esp,0x8
c001b0f2:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001b0f8:	53                   	push   ebx
c001b0f9:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b0fc:	e8 29 56 fe ff       	call   c000072a <strcpy>
c001b101:	83 c4 10             	add    esp,0x10
c001b104:	31 c0                	xor    eax,eax
c001b106:	59                   	pop    ecx
c001b107:	31 d2                	xor    edx,edx
c001b109:	5b                   	pop    ebx
c001b10a:	5e                   	pop    esi
c001b10b:	c3                   	ret    
c001b10c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b111:	74 bb                	je     c001b0ce <sysCallTTYName(regs*)+0x16>
c001b113:	83 ec 0c             	sub    esp,0xc
c001b116:	50                   	push   eax
c001b117:	e8 1d 65 ff ff       	call   c0011639 <getFromFileDescriptor(int)>
c001b11c:	83 c4 10             	add    esp,0x10
c001b11f:	89 c3                	mov    ebx,eax
c001b121:	85 db                	test   ebx,ebx
c001b123:	75 bb                	jne    c001b0e0 <sysCallTTYName(regs*)+0x28>
c001b125:	59                   	pop    ecx
c001b126:	b8 01 00 00 00       	mov    eax,0x1
c001b12b:	31 d2                	xor    edx,edx
c001b12d:	5b                   	pop    ebx
c001b12e:	5e                   	pop    esi
c001b12f:	c3                   	ret    
c001b130:	59                   	pop    ecx
c001b131:	b8 02 00 00 00       	mov    eax,0x2
c001b136:	31 d2                	xor    edx,edx
c001b138:	5b                   	pop    ebx
c001b139:	5e                   	pop    esi
c001b13a:	c3                   	ret    

c001b13b <sysCallUSleep(regs*)>:
c001b13b:	83 ec 14             	sub    esp,0x14
c001b13e:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b143:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b147:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b14e:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b151:	01 ca                	add    edx,ecx
c001b153:	52                   	push   edx
c001b154:	50                   	push   eax
c001b155:	e8 dc 22 00 00       	call   c001d436 <nanoSleep(unsigned long long)>
c001b15a:	31 c0                	xor    eax,eax
c001b15c:	31 d2                	xor    edx,edx
c001b15e:	83 c4 1c             	add    esp,0x1c
c001b161:	c3                   	ret    

c001b162 <sysCallSpawn(regs*)>:
c001b162:	56                   	push   esi
c001b163:	53                   	push   ebx
c001b164:	53                   	push   ebx
c001b165:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b169:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b16c:	85 f6                	test   esi,esi
c001b16e:	75 08                	jne    c001b178 <sysCallSpawn(regs*)+0x16>
c001b170:	59                   	pop    ecx
c001b171:	31 c0                	xor    eax,eax
c001b173:	31 d2                	xor    edx,edx
c001b175:	5b                   	pop    ebx
c001b176:	5e                   	pop    esi
c001b177:	c3                   	ret    
c001b178:	83 ec 0c             	sub    esp,0xc
c001b17b:	68 3f 07 00 00       	push   0x73f
c001b180:	e8 55 43 ff ff       	call   c000f4da <malloc>
c001b185:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b188:	89 c6                	mov    esi,eax
c001b18a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b18f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b192:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b195:	56                   	push   esi
c001b196:	e8 9b 19 00 00       	call   c001cb36 <Process::Process(char const*, Process*, char**)>
c001b19b:	83 c4 20             	add    esp,0x20
c001b19e:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b1a5:	75 c9                	jne    c001b170 <sysCallSpawn(regs*)+0xe>
c001b1a7:	83 ec 0c             	sub    esp,0xc
c001b1aa:	56                   	push   esi
c001b1ab:	e8 4c 1f 00 00       	call   c001d0fc <Process::createUserThread()>
c001b1b0:	8b 06                	mov    eax,DWORD PTR [esi]
c001b1b2:	83 c4 10             	add    esp,0x10
c001b1b5:	99                   	cdq    
c001b1b6:	59                   	pop    ecx
c001b1b7:	5b                   	pop    ebx
c001b1b8:	5e                   	pop    esi
c001b1b9:	c3                   	ret    

c001b1ba <sysCallGetEnv(regs*)>:
c001b1ba:	57                   	push   edi
c001b1bb:	56                   	push   esi
c001b1bc:	53                   	push   ebx
c001b1bd:	83 ec 1c             	sub    esp,0x1c
c001b1c0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b1c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1c9:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b1cc:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b1cf:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b1d2:	e8 16 e6 ff ff       	call   c00197ed <Krnl::getProcessTotalEnvCount(Process*)>
c001b1d7:	83 c4 10             	add    esp,0x10
c001b1da:	39 c7                	cmp    edi,eax
c001b1dc:	7c 14                	jl     c001b1f2 <sysCallGetEnv(regs*)+0x38>
c001b1de:	85 f6                	test   esi,esi
c001b1e0:	75 0b                	jne    c001b1ed <sysCallGetEnv(regs*)+0x33>
c001b1e2:	83 c4 10             	add    esp,0x10
c001b1e5:	31 c0                	xor    eax,eax
c001b1e7:	5b                   	pop    ebx
c001b1e8:	31 d2                	xor    edx,edx
c001b1ea:	5e                   	pop    esi
c001b1eb:	5f                   	pop    edi
c001b1ec:	c3                   	ret    
c001b1ed:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b1f0:	eb f0                	jmp    c001b1e2 <sysCallGetEnv(regs*)+0x28>
c001b1f2:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b1f6:	52                   	push   edx
c001b1f7:	57                   	push   edi
c001b1f8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b1fe:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b201:	50                   	push   eax
c001b202:	e8 06 e6 ff ff       	call   c001980d <Krnl::getProcessEnvPair(Process*, int)>
c001b207:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b20a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b20e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b212:	83 c4 0c             	add    esp,0xc
c001b215:	85 c9                	test   ecx,ecx
c001b217:	75 23                	jne    c001b23c <sysCallGetEnv(regs*)+0x82>
c001b219:	83 ec 0c             	sub    esp,0xc
c001b21c:	50                   	push   eax
c001b21d:	e8 86 54 fe ff       	call   c00006a8 <strlen>
c001b222:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b225:	89 c3                	mov    ebx,eax
c001b227:	e8 7c 54 fe ff       	call   c00006a8 <strlen>
c001b22c:	83 c4 10             	add    esp,0x10
c001b22f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b233:	83 c4 10             	add    esp,0x10
c001b236:	31 d2                	xor    edx,edx
c001b238:	5b                   	pop    ebx
c001b239:	5e                   	pop    esi
c001b23a:	5f                   	pop    edi
c001b23b:	c3                   	ret    
c001b23c:	83 ec 08             	sub    esp,0x8
c001b23f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b242:	50                   	push   eax
c001b243:	56                   	push   esi
c001b244:	e8 e1 54 fe ff       	call   c000072a <strcpy>
c001b249:	58                   	pop    eax
c001b24a:	5a                   	pop    edx
c001b24b:	68 fb a7 02 c0       	push   0xc002a7fb
c001b250:	56                   	push   esi
c001b251:	e8 8b 55 fe ff       	call   c00007e1 <strcat>
c001b256:	59                   	pop    ecx
c001b257:	5b                   	pop    ebx
c001b258:	57                   	push   edi
c001b259:	56                   	push   esi
c001b25a:	e8 82 55 fe ff       	call   c00007e1 <strcat>
c001b25f:	83 c4 10             	add    esp,0x10
c001b262:	e9 7b ff ff ff       	jmp    c001b1e2 <sysCallGetEnv(regs*)+0x28>

c001b267 <sysAppSettings(regs*)>:
c001b267:	53                   	push   ebx
c001b268:	83 ec 08             	sub    esp,0x8
c001b26b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b26f:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b272:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001b278:	25 e0 1f 00 00       	and    eax,0x1fe0
c001b27d:	66 3d c0 09          	cmp    ax,0x9c0
c001b281:	75 2f                	jne    c001b2b2 <sysAppSettings(regs*)+0x4b>
c001b283:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001b289:	83 e0 1f             	and    eax,0x1f
c001b28c:	3c 01                	cmp    al,0x1
c001b28e:	74 2e                	je     c001b2be <sysAppSettings(regs*)+0x57>
c001b290:	3c 07                	cmp    al,0x7
c001b292:	0f 84 bd 00 00 00    	je     c001b355 <sysAppSettings(regs*)+0xee>
c001b298:	84 c0                	test   al,al
c001b29a:	0f 84 dc 00 00 00    	je     c001b37c <sysAppSettings(regs*)+0x115>
c001b2a0:	3c 08                	cmp    al,0x8
c001b2a2:	74 6d                	je     c001b311 <sysAppSettings(regs*)+0xaa>
c001b2a4:	0f b6 c0             	movzx  eax,al
c001b2a7:	83 c4 08             	add    esp,0x8
c001b2aa:	05 e8 03 00 00       	add    eax,0x3e8
c001b2af:	5b                   	pop    ebx
c001b2b0:	99                   	cdq    
c001b2b1:	c3                   	ret    
c001b2b2:	b8 01 00 00 00       	mov    eax,0x1
c001b2b7:	31 d2                	xor    edx,edx
c001b2b9:	83 c4 08             	add    esp,0x8
c001b2bc:	5b                   	pop    ebx
c001b2bd:	c3                   	ret    
c001b2be:	51                   	push   ecx
c001b2bf:	68 00 01 00 00       	push   0x100
c001b2c4:	6a 00                	push   0x0
c001b2c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2cb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2ce:	83 c0 0c             	add    eax,0xc
c001b2d1:	50                   	push   eax
c001b2d2:	e8 b4 53 fe ff       	call   c000068b <memset>
c001b2d7:	83 c4 0c             	add    esp,0xc
c001b2da:	68 ff 00 00 00       	push   0xff
c001b2df:	53                   	push   ebx
c001b2e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2e8:	83 c0 0c             	add    eax,0xc
c001b2eb:	50                   	push   eax
c001b2ec:	e8 64 53 fe ff       	call   c0000655 <memcpy>
c001b2f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2f6:	5b                   	pop    ebx
c001b2f7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2fa:	5a                   	pop    edx
c001b2fb:	8d 50 0c             	lea    edx,[eax+0xc]
c001b2fe:	52                   	push   edx
c001b2ff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b305:	e8 aa 54 ff ff       	call   c00107b4 <VgaText::setTitle(char*)>
c001b30a:	83 c4 10             	add    esp,0x10
c001b30d:	31 c0                	xor    eax,eax
c001b30f:	eb a6                	jmp    c001b2b7 <sysAppSettings(regs*)+0x50>
c001b311:	83 ec 08             	sub    esp,0x8
c001b314:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b31a:	83 e0 0f             	and    eax,0xf
c001b31d:	50                   	push   eax
c001b31e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b323:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b326:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b32c:	e8 73 54 ff ff       	call   c00107a4 <VgaText::setTitleColour(VgaColour)>
c001b331:	58                   	pop    eax
c001b332:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b338:	5a                   	pop    edx
c001b339:	c1 e8 04             	shr    eax,0x4
c001b33c:	83 e0 0f             	and    eax,0xf
c001b33f:	50                   	push   eax
c001b340:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b345:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b348:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b34e:	e8 41 54 ff ff       	call   c0010794 <VgaText::setTitleTextColour(VgaColour)>
c001b353:	eb b5                	jmp    c001b30a <sysAppSettings(regs*)+0xa3>
c001b355:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b35a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b35d:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b363:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001b369:	c0 e8 06             	shr    al,0x6
c001b36c:	83 e0 01             	and    eax,0x1
c001b36f:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001b375:	31 c0                	xor    eax,eax
c001b377:	e9 3b ff ff ff       	jmp    c001b2b7 <sysAppSettings(regs*)+0x50>
c001b37c:	b8 02 00 00 00       	mov    eax,0x2
c001b381:	e9 31 ff ff ff       	jmp    c001b2b7 <sysAppSettings(regs*)+0x50>

c001b386 <sysSetFatAttrib(regs*)>:
c001b386:	57                   	push   edi
c001b387:	56                   	push   esi
c001b388:	53                   	push   ebx
c001b389:	83 ec 1c             	sub    esp,0x1c
c001b38c:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b390:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001b393:	68 14 01 00 00       	push   0x114
c001b398:	e8 3d 41 ff ff       	call   c000f4da <malloc>
c001b39d:	83 c4 0c             	add    esp,0xc
c001b3a0:	89 c3                	mov    ebx,eax
c001b3a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3a7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b3aa:	57                   	push   edi
c001b3ab:	53                   	push   ebx
c001b3ac:	e8 27 79 ff ff       	call   c0012cd8 <File::File(char const*, Process*)>
c001b3b1:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b3b4:	83 c4 0c             	add    esp,0xc
c001b3b7:	0f b6 d4             	movzx  edx,ah
c001b3ba:	0f b6 c0             	movzx  eax,al
c001b3bd:	52                   	push   edx
c001b3be:	50                   	push   eax
c001b3bf:	53                   	push   ebx
c001b3c0:	e8 89 7b ff ff       	call   c0012f4e <File::chfatattr(unsigned char, unsigned char)>
c001b3c5:	83 c4 10             	add    esp,0x10
c001b3c8:	85 db                	test   ebx,ebx
c001b3ca:	74 14                	je     c001b3e0 <sysSetFatAttrib(regs*)+0x5a>
c001b3cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b3d0:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b3d2:	83 ec 0c             	sub    esp,0xc
c001b3d5:	53                   	push   ebx
c001b3d6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b3d9:	83 c4 10             	add    esp,0x10
c001b3dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b3e0:	85 c0                	test   eax,eax
c001b3e2:	0f 95 c0             	setne  al
c001b3e5:	31 d2                	xor    edx,edx
c001b3e7:	0f b6 c0             	movzx  eax,al
c001b3ea:	f7 d8                	neg    eax
c001b3ec:	83 d2 00             	adc    edx,0x0
c001b3ef:	83 c4 10             	add    esp,0x10
c001b3f2:	f7 da                	neg    edx
c001b3f4:	5b                   	pop    ebx
c001b3f5:	5e                   	pop    esi
c001b3f6:	5f                   	pop    edi
c001b3f7:	c3                   	ret    

c001b3f8 <sysPipe(regs*)>:
c001b3f8:	57                   	push   edi
c001b3f9:	56                   	push   esi
c001b3fa:	53                   	push   ebx
c001b3fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3ff:	83 ec 0c             	sub    esp,0xc
c001b402:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001b405:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001b408:	6a 20                	push   0x20
c001b40a:	e8 cb 40 ff ff       	call   c000f4da <malloc>
c001b40f:	89 c3                	mov    ebx,eax
c001b411:	58                   	pop    eax
c001b412:	5a                   	pop    edx
c001b413:	68 00 50 00 00       	push   0x5000
c001b418:	53                   	push   ebx
c001b419:	e8 c6 4c ff ff       	call   c00100e4 <Pipe::Pipe(int)>
c001b41e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b421:	e8 1e 5f ff ff       	call   c0011344 <UnixFile::getFileDescriptor()>
c001b426:	89 07                	mov    DWORD PTR [edi],eax
c001b428:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b42b:	e8 14 5f ff ff       	call   c0011344 <UnixFile::getFileDescriptor()>
c001b430:	83 c4 10             	add    esp,0x10
c001b433:	89 06                	mov    DWORD PTR [esi],eax
c001b435:	31 d2                	xor    edx,edx
c001b437:	5b                   	pop    ebx
c001b438:	31 c0                	xor    eax,eax
c001b43a:	5e                   	pop    esi
c001b43b:	5f                   	pop    edi
c001b43c:	c3                   	ret    

c001b43d <sysGetUnixTime(regs*)>:
c001b43d:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c001b442:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b448:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b44c:	e9 71 82 ff ff       	jmp    c00136c2 <Clock::timeInSecondsLocal()>

c001b451 <string_ends_with(char const*, char const*)>:
c001b451:	57                   	push   edi
c001b452:	56                   	push   esi
c001b453:	53                   	push   ebx
c001b454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b458:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b45c:	83 ec 0c             	sub    esp,0xc
c001b45f:	53                   	push   ebx
c001b460:	e8 43 52 fe ff       	call   c00006a8 <strlen>
c001b465:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b468:	89 c6                	mov    esi,eax
c001b46a:	e8 39 52 fe ff       	call   c00006a8 <strlen>
c001b46f:	83 c4 10             	add    esp,0x10
c001b472:	39 c6                	cmp    esi,eax
c001b474:	7d 06                	jge    c001b47c <string_ends_with(char const*, char const*)+0x2b>
c001b476:	5b                   	pop    ebx
c001b477:	31 c0                	xor    eax,eax
c001b479:	5e                   	pop    esi
c001b47a:	5f                   	pop    edi
c001b47b:	c3                   	ret    
c001b47c:	83 ec 08             	sub    esp,0x8
c001b47f:	29 c6                	sub    esi,eax
c001b481:	57                   	push   edi
c001b482:	01 f3                	add    ebx,esi
c001b484:	53                   	push   ebx
c001b485:	e8 f1 52 fe ff       	call   c000077b <strcmp>
c001b48a:	83 c4 10             	add    esp,0x10
c001b48d:	85 c0                	test   eax,eax
c001b48f:	5b                   	pop    ebx
c001b490:	0f 94 c0             	sete   al
c001b493:	5e                   	pop    esi
c001b494:	0f b6 c0             	movzx  eax,al
c001b497:	5f                   	pop    edi
c001b498:	c3                   	ret    

c001b499 <sysCallOpen(regs*)>:
c001b499:	56                   	push   esi
c001b49a:	53                   	push   ebx
c001b49b:	81 ec 04 01 00 00    	sub    esp,0x104
c001b4a1:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001b4a8:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001b4ab:	85 c9                	test   ecx,ecx
c001b4ad:	0f 84 b3 00 00 00    	je     c001b566 <sysCallOpen(regs*)+0xcd>
c001b4b3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b4b6:	85 c0                	test   eax,eax
c001b4b8:	0f 84 a8 00 00 00    	je     c001b566 <sysCallOpen(regs*)+0xcd>
c001b4be:	52                   	push   edx
c001b4bf:	68 fd a7 02 c0       	push   0xc002a7fd
c001b4c4:	50                   	push   eax
c001b4c5:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b4c9:	56                   	push   esi
c001b4ca:	e8 5f 76 ff ff       	call   c0012b2e <Fs::standardiseFiles(char*, char const*, char const*)>
c001b4cf:	89 34 24             	mov    DWORD PTR [esp],esi
c001b4d2:	e8 d1 51 fe ff       	call   c00006a8 <strlen>
c001b4d7:	83 c4 10             	add    esp,0x10
c001b4da:	48                   	dec    eax
c001b4db:	74 1d                	je     c001b4fa <sysCallOpen(regs*)+0x61>
c001b4dd:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001b4e0:	eb 0f                	jmp    c001b4f1 <sysCallOpen(regs*)+0x58>
c001b4e2:	80 fa 3a             	cmp    dl,0x3a
c001b4e5:	74 0f                	je     c001b4f6 <sysCallOpen(regs*)+0x5d>
c001b4e7:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001b4eb:	48                   	dec    eax
c001b4ec:	74 0c                	je     c001b4fa <sysCallOpen(regs*)+0x61>
c001b4ee:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001b4f1:	80 fa 2e             	cmp    dl,0x2e
c001b4f4:	75 ec                	jne    c001b4e2 <sysCallOpen(regs*)+0x49>
c001b4f6:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001b4fa:	83 ec 08             	sub    esp,0x8
c001b4fd:	68 01 a8 02 c0       	push   0xc002a801
c001b502:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b505:	e8 47 ff ff ff       	call   c001b451 <string_ends_with(char const*, char const*)>
c001b50a:	83 c4 10             	add    esp,0x10
c001b50d:	85 c0                	test   eax,eax
c001b50f:	75 17                	jne    c001b528 <sysCallOpen(regs*)+0x8f>
c001b511:	83 ec 08             	sub    esp,0x8
c001b514:	68 22 a8 02 c0       	push   0xc002a822
c001b519:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b51c:	e8 30 ff ff ff       	call   c001b451 <string_ends_with(char const*, char const*)>
c001b521:	83 c4 10             	add    esp,0x10
c001b524:	85 c0                	test   eax,eax
c001b526:	74 51                	je     c001b579 <sysCallOpen(regs*)+0xe0>
c001b528:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b52b:	83 ec 08             	sub    esp,0x8
c001b52e:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001b534:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b53b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b53e:	ff 30                	push   DWORD PTR [eax]
c001b540:	68 06 a8 02 c0       	push   0xc002a806
c001b545:	e8 35 72 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001b54a:	c7 04 24 15 a8 02 c0 	mov    DWORD PTR [esp],0xc002a815
c001b551:	e8 29 72 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001b556:	83 c4 10             	add    esp,0x10
c001b559:	81 c4 04 01 00 00    	add    esp,0x104
c001b55f:	31 c0                	xor    eax,eax
c001b561:	31 d2                	xor    edx,edx
c001b563:	5b                   	pop    ebx
c001b564:	5e                   	pop    esi
c001b565:	c3                   	ret    
c001b566:	81 c4 04 01 00 00    	add    esp,0x104
c001b56c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b571:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b576:	5b                   	pop    ebx
c001b577:	5e                   	pop    esi
c001b578:	c3                   	ret    
c001b579:	83 ec 08             	sub    esp,0x8
c001b57c:	68 02 a8 02 c0       	push   0xc002a802
c001b581:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b584:	e8 f2 51 fe ff       	call   c000077b <strcmp>
c001b589:	83 c4 10             	add    esp,0x10
c001b58c:	85 c0                	test   eax,eax
c001b58e:	74 98                	je     c001b528 <sysCallOpen(regs*)+0x8f>
c001b590:	83 ec 08             	sub    esp,0x8
c001b593:	68 01 a8 02 c0       	push   0xc002a801
c001b598:	56                   	push   esi
c001b599:	e8 b3 fe ff ff       	call   c001b451 <string_ends_with(char const*, char const*)>
c001b59e:	83 c4 10             	add    esp,0x10
c001b5a1:	85 c0                	test   eax,eax
c001b5a3:	75 83                	jne    c001b528 <sysCallOpen(regs*)+0x8f>
c001b5a5:	83 ec 08             	sub    esp,0x8
c001b5a8:	68 27 a8 02 c0       	push   0xc002a827
c001b5ad:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b5b0:	e8 9c fe ff ff       	call   c001b451 <string_ends_with(char const*, char const*)>
c001b5b5:	83 c4 10             	add    esp,0x10
c001b5b8:	85 c0                	test   eax,eax
c001b5ba:	0f 85 d9 00 00 00    	jne    c001b699 <sysCallOpen(regs*)+0x200>
c001b5c0:	83 ec 08             	sub    esp,0x8
c001b5c3:	68 2c a8 02 c0       	push   0xc002a82c
c001b5c8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b5cb:	e8 81 fe ff ff       	call   c001b451 <string_ends_with(char const*, char const*)>
c001b5d0:	83 c4 10             	add    esp,0x10
c001b5d3:	85 c0                	test   eax,eax
c001b5d5:	0f 85 be 00 00 00    	jne    c001b699 <sysCallOpen(regs*)+0x200>
c001b5db:	83 ec 08             	sub    esp,0x8
c001b5de:	68 28 a8 02 c0       	push   0xc002a828
c001b5e3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b5e6:	e8 90 51 fe ff       	call   c000077b <strcmp>
c001b5eb:	83 c4 10             	add    esp,0x10
c001b5ee:	85 c0                	test   eax,eax
c001b5f0:	0f 84 a3 00 00 00    	je     c001b699 <sysCallOpen(regs*)+0x200>
c001b5f6:	83 ec 08             	sub    esp,0x8
c001b5f9:	68 27 a8 02 c0       	push   0xc002a827
c001b5fe:	56                   	push   esi
c001b5ff:	e8 4d fe ff ff       	call   c001b451 <string_ends_with(char const*, char const*)>
c001b604:	83 c4 10             	add    esp,0x10
c001b607:	85 c0                	test   eax,eax
c001b609:	0f 85 8a 00 00 00    	jne    c001b699 <sysCallOpen(regs*)+0x200>
c001b60f:	83 ec 0c             	sub    esp,0xc
c001b612:	68 14 01 00 00       	push   0x114
c001b617:	e8 be 3e ff ff       	call   c000f4da <malloc>
c001b61c:	83 c4 0c             	add    esp,0xc
c001b61f:	89 c6                	mov    esi,eax
c001b621:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b626:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b629:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b62c:	56                   	push   esi
c001b62d:	e8 a6 76 ff ff       	call   c0012cd8 <File::File(char const*, Process*)>
c001b632:	83 c4 10             	add    esp,0x10
c001b635:	85 f6                	test   esi,esi
c001b637:	0f 84 29 ff ff ff    	je     c001b566 <sysCallOpen(regs*)+0xcd>
c001b63d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b640:	0f b6 c2             	movzx  eax,dl
c001b643:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001b646:	89 d0                	mov    eax,edx
c001b648:	83 e0 01             	and    eax,0x1
c001b64b:	f6 c2 02             	test   dl,0x2
c001b64e:	74 03                	je     c001b653 <sysCallOpen(regs*)+0x1ba>
c001b650:	83 c8 02             	or     eax,0x2
c001b653:	f6 c2 04             	test   dl,0x4
c001b656:	74 03                	je     c001b65b <sysCallOpen(regs*)+0x1c2>
c001b658:	83 c8 04             	or     eax,0x4
c001b65b:	f6 c2 08             	test   dl,0x8
c001b65e:	74 03                	je     c001b663 <sysCallOpen(regs*)+0x1ca>
c001b660:	83 c8 0a             	or     eax,0xa
c001b663:	83 e2 10             	and    edx,0x10
c001b666:	74 03                	je     c001b66b <sysCallOpen(regs*)+0x1d2>
c001b668:	83 c8 12             	or     eax,0x12
c001b66b:	83 ec 08             	sub    esp,0x8
c001b66e:	50                   	push   eax
c001b66f:	56                   	push   esi
c001b670:	e8 c7 76 ff ff       	call   c0012d3c <File::open(FileOpenMode)>
c001b675:	83 c4 10             	add    esp,0x10
c001b678:	85 c0                	test   eax,eax
c001b67a:	0f 85 e6 fe ff ff    	jne    c001b566 <sysCallOpen(regs*)+0xcd>
c001b680:	83 ec 0c             	sub    esp,0xc
c001b683:	56                   	push   esi
c001b684:	e8 bb 5c ff ff       	call   c0011344 <UnixFile::getFileDescriptor()>
c001b689:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b68c:	89 02                	mov    DWORD PTR [edx],eax
c001b68e:	c1 f8 1f             	sar    eax,0x1f
c001b691:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b694:	e9 bd fe ff ff       	jmp    c001b556 <sysCallOpen(regs*)+0xbd>
c001b699:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b69c:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001b6a2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b6a9:	e9 ab fe ff ff       	jmp    c001b559 <sysCallOpen(regs*)+0xc0>

c001b6ae <Sys::loadSyscalls()>:
c001b6ae:	c7 05 40 d7 02 c0 64 a8 01 c0 	mov    DWORD PTR ds:0xc002d740,0xc001a864
c001b6b8:	c7 05 44 d7 02 c0 c6 a4 01 c0 	mov    DWORD PTR ds:0xc002d744,0xc001a4c6
c001b6c2:	c7 05 48 d7 02 c0 19 a6 01 c0 	mov    DWORD PTR ds:0xc002d748,0xc001a619
c001b6cc:	c7 05 4c d7 02 c0 fc a7 01 c0 	mov    DWORD PTR ds:0xc002d74c,0xc001a7fc
c001b6d6:	c7 05 50 d7 02 c0 b1 a5 01 c0 	mov    DWORD PTR ds:0xc002d750,0xc001a5b1
c001b6e0:	c7 05 54 d7 02 c0 fd a4 01 c0 	mov    DWORD PTR ds:0xc002d754,0xc001a4fd
c001b6ea:	c7 05 58 d7 02 c0 de a4 01 c0 	mov    DWORD PTR ds:0xc002d758,0xc001a4de
c001b6f4:	c7 05 5c d7 02 c0 6e a6 01 c0 	mov    DWORD PTR ds:0xc002d75c,0xc001a66e
c001b6fe:	c7 05 64 d7 02 c0 76 ad 01 c0 	mov    DWORD PTR ds:0xc002d764,0xc001ad76
c001b708:	c7 05 60 d7 02 c0 99 b4 01 c0 	mov    DWORD PTR ds:0xc002d760,0xc001b499
c001b712:	c7 05 68 d7 02 c0 fe ad 01 c0 	mov    DWORD PTR ds:0xc002d768,0xc001adfe
c001b71c:	c7 05 6c d7 02 c0 65 aa 01 c0 	mov    DWORD PTR ds:0xc002d76c,0xc001aa65
c001b726:	c7 05 70 d7 02 c0 9f a8 01 c0 	mov    DWORD PTR ds:0xc002d770,0xc001a89f
c001b730:	c7 05 74 d7 02 c0 a4 a8 01 c0 	mov    DWORD PTR ds:0xc002d774,0xc001a8a4
c001b73a:	c7 05 78 d7 02 c0 d9 ae 01 c0 	mov    DWORD PTR ds:0xc002d778,0xc001aed9
c001b744:	c7 05 7c d7 02 c0 73 ae 01 c0 	mov    DWORD PTR ds:0xc002d77c,0xc001ae73
c001b74e:	c7 05 80 d7 02 c0 4d ab 01 c0 	mov    DWORD PTR ds:0xc002d780,0xc001ab4d
c001b758:	c7 05 84 d7 02 c0 b6 ab 01 c0 	mov    DWORD PTR ds:0xc002d784,0xc001abb6
c001b762:	c7 05 88 d7 02 c0 33 ac 01 c0 	mov    DWORD PTR ds:0xc002d788,0xc001ac33
c001b76c:	c7 05 8c d7 02 c0 a9 a8 01 c0 	mov    DWORD PTR ds:0xc002d78c,0xc001a8a9
c001b776:	c7 05 90 d7 02 c0 49 af 01 c0 	mov    DWORD PTR ds:0xc002d790,0xc001af49
c001b780:	c7 05 94 d7 02 c0 63 af 01 c0 	mov    DWORD PTR ds:0xc002d794,0xc001af63
c001b78a:	c7 05 98 d7 02 c0 63 af 01 c0 	mov    DWORD PTR ds:0xc002d798,0xc001af63
c001b794:	c7 05 9c d7 02 c0 a4 af 01 c0 	mov    DWORD PTR ds:0xc002d79c,0xc001afa4
c001b79e:	c7 05 a0 d7 02 c0 08 b0 01 c0 	mov    DWORD PTR ds:0xc002d7a0,0xc001b008
c001b7a8:	c7 05 a4 d7 02 c0 b3 a8 01 c0 	mov    DWORD PTR ds:0xc002d7a4,0xc001a8b3
c001b7b2:	c7 05 a8 d7 02 c0 6c b0 01 c0 	mov    DWORD PTR ds:0xc002d7a8,0xc001b06c
c001b7bc:	c7 05 ac d7 02 c0 22 aa 01 c0 	mov    DWORD PTR ds:0xc002d7ac,0xc001aa22
c001b7c6:	c7 05 b0 d7 02 c0 b8 b0 01 c0 	mov    DWORD PTR ds:0xc002d7b0,0xc001b0b8
c001b7d0:	c7 05 b4 d7 02 c0 f3 aa 01 c0 	mov    DWORD PTR ds:0xc002d7b4,0xc001aaf3
c001b7da:	c7 05 b8 d7 02 c0 3b b1 01 c0 	mov    DWORD PTR ds:0xc002d7b8,0xc001b13b
c001b7e4:	c7 05 bc d7 02 c0 b6 ac 01 c0 	mov    DWORD PTR ds:0xc002d7bc,0xc001acb6
c001b7ee:	c7 05 c0 d7 02 c0 62 b1 01 c0 	mov    DWORD PTR ds:0xc002d7c0,0xc001b162
c001b7f8:	c7 05 c4 d7 02 c0 ba b1 01 c0 	mov    DWORD PTR ds:0xc002d7c4,0xc001b1ba
c001b802:	c7 05 c8 d7 02 c0 67 b2 01 c0 	mov    DWORD PTR ds:0xc002d7c8,0xc001b267
c001b80c:	c7 05 cc d7 02 c0 c3 a8 01 c0 	mov    DWORD PTR ds:0xc002d7cc,0xc001a8c3
c001b816:	c7 05 d0 d7 02 c0 2d a9 01 c0 	mov    DWORD PTR ds:0xc002d7d0,0xc001a92d
c001b820:	c7 05 d4 d7 02 c0 73 a9 01 c0 	mov    DWORD PTR ds:0xc002d7d4,0xc001a973
c001b82a:	c7 05 d8 d7 02 c0 86 b3 01 c0 	mov    DWORD PTR ds:0xc002d7d8,0xc001b386
c001b834:	c7 05 dc d7 02 c0 7e af 01 c0 	mov    DWORD PTR ds:0xc002d7dc,0xc001af7e
c001b83e:	c7 05 e0 d7 02 c0 c4 a9 01 c0 	mov    DWORD PTR ds:0xc002d7e0,0xc001a9c4
c001b848:	c7 05 e4 d7 02 c0 f8 b3 01 c0 	mov    DWORD PTR ds:0xc002d7e4,0xc001b3f8
c001b852:	c7 05 e8 d7 02 c0 3d b4 01 c0 	mov    DWORD PTR ds:0xc002d7e8,0xc001b43d
c001b85c:	c7 05 ec d7 02 c0 09 a5 01 c0 	mov    DWORD PTR ds:0xc002d7ec,0xc001a509
c001b866:	c7 05 f0 d7 02 c0 8a a6 01 c0 	mov    DWORD PTR ds:0xc002d7f0,0xc001a68a
c001b870:	c7 05 f4 d7 02 c0 b2 a7 01 c0 	mov    DWORD PTR ds:0xc002d7f4,0xc001a7b2
c001b87a:	c3                   	ret    

c001b87b <Sys::systemCall(regs*, void*)>:
c001b87b:	53                   	push   ebx
c001b87c:	83 ec 08             	sub    esp,0x8
c001b87f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b883:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001b886:	83 f8 7f             	cmp    eax,0x7f
c001b889:	77 16                	ja     c001b8a1 <Sys::systemCall(regs*, void*)+0x26>
c001b88b:	8b 14 85 40 d7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd28c0]
c001b892:	85 d2                	test   edx,edx
c001b894:	74 0b                	je     c001b8a1 <Sys::systemCall(regs*, void*)+0x26>
c001b896:	83 ec 0c             	sub    esp,0xc
c001b899:	53                   	push   ebx
c001b89a:	ff d2                	call   edx
c001b89c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001b89f:	eb 0d                	jmp    c001b8ae <Sys::systemCall(regs*, void*)+0x33>
c001b8a1:	52                   	push   edx
c001b8a2:	52                   	push   edx
c001b8a3:	50                   	push   eax
c001b8a4:	68 31 a8 02 c0       	push   0xc002a831
c001b8a9:	e8 d1 6e ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001b8ae:	83 c4 10             	add    esp,0x10
c001b8b1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b8b6:	31 d2                	xor    edx,edx
c001b8b8:	83 c4 08             	add    esp,0x8
c001b8bb:	5b                   	pop    ebx
c001b8bc:	c3                   	ret    

c001b8bd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001b8bd:	55                   	push   ebp
c001b8be:	89 e5                	mov    ebp,esp
c001b8c0:	57                   	push   edi
c001b8c1:	56                   	push   esi
c001b8c2:	53                   	push   ebx
c001b8c3:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001b8c9:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001b8cc:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001b8cf:	85 c0                	test   eax,eax
c001b8d1:	0f 95 c1             	setne  cl
c001b8d4:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001b8d8:	0f 94 c2             	sete   dl
c001b8db:	84 d1                	test   cl,dl
c001b8dd:	74 26                	je     c001b905 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001b8df:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001b8e6:	74 1d                	je     c001b905 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001b8e8:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001b8eb:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001b8f1:	89 d6                	mov    esi,edx
c001b8f3:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001b8f9:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001b8ff:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001b902:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001b905:	83 ec 0c             	sub    esp,0xc
c001b908:	05 ff 0f 00 00       	add    eax,0xfff
c001b90d:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001b910:	6a 01                	push   0x1
c001b912:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001b918:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001b91e:	e8 6c 5e ff ff       	call   c001178f <Virt::allocateKernelVirtualPages(int)>
c001b923:	83 c4 10             	add    esp,0x10
c001b926:	89 c6                	mov    esi,eax
c001b928:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001b92e:	0f 86 21 01 00 00    	jbe    c001ba55 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001b934:	c1 eb 0c             	shr    ebx,0xc
c001b937:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001b941:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001b947:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001b94a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b94d:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001b953:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001b956:	29 d8                	sub    eax,ebx
c001b958:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001b95e:	0f 83 f4 00 00 00    	jae    c001ba58 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001b964:	83 ec 0c             	sub    esp,0xc
c001b967:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001b96d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001b970:	3d 00 10 00 00       	cmp    eax,0x1000
c001b975:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001b977:	52                   	push   edx
c001b978:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001b97e:	52                   	push   edx
c001b97f:	76 05                	jbe    c001b986 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001b981:	b8 00 10 00 00       	mov    eax,0x1000
c001b986:	31 d2                	xor    edx,edx
c001b988:	52                   	push   edx
c001b989:	50                   	push   eax
c001b98a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001b98d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b990:	83 c4 20             	add    esp,0x20
c001b993:	85 c0                	test   eax,eax
c001b995:	74 1f                	je     c001b9b6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001b997:	51                   	push   ecx
c001b998:	51                   	push   ecx
c001b999:	50                   	push   eax
c001b99a:	68 45 a8 02 c0       	push   0xc002a845
c001b99f:	e8 db 6d ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001b9a4:	89 34 24             	mov    DWORD PTR [esp],esi
c001b9a7:	e8 47 61 ff ff       	call   c0011af3 <Virt::freeKernelVirtualPages(unsigned long)>
c001b9ac:	83 c4 10             	add    esp,0x10
c001b9af:	31 c0                	xor    eax,eax
c001b9b1:	e9 7c 01 00 00       	jmp    c001bb32 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001b9b6:	e8 2b 15 00 00       	call   c001cee6 <lockScheduler()>
c001b9bb:	e8 8d 41 ff ff       	call   c000fb4d <Phys::allocatePage()>
c001b9c0:	6a 07                	push   0x7
c001b9c2:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001b9c8:	56                   	push   esi
c001b9c9:	50                   	push   eax
c001b9ca:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b9d0:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001b9d3:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001b9d9:	e8 7c 64 ff ff       	call   c0011e5a <VAS::mapPage(unsigned long, unsigned long, int)>
c001b9de:	83 c4 0c             	add    esp,0xc
c001b9e1:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b9e7:	6a 00                	push   0x0
c001b9e9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b9ef:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001b9f2:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001b9f8:	e8 c7 62 ff ff       	call   c0011cc4 <VAS::mapOtherVASIn(bool, VAS*)>
c001b9fd:	58                   	pop    eax
c001b9fe:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001ba04:	5a                   	pop    edx
c001ba05:	68 07 04 00 00       	push   0x407
c001ba0a:	53                   	push   ebx
c001ba0b:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ba11:	50                   	push   eax
c001ba12:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001ba18:	6a 00                	push   0x0
c001ba1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba1f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba22:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ba28:	e8 e7 67 ff ff       	call   c0012214 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ba2d:	83 c4 1c             	add    esp,0x1c
c001ba30:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001ba36:	68 00 10 00 00       	push   0x1000
c001ba3b:	50                   	push   eax
c001ba3c:	56                   	push   esi
c001ba3d:	e8 13 4c fe ff       	call   c0000655 <memcpy>
c001ba42:	e8 a1 14 00 00       	call   c001cee8 <unlockScheduler()>
c001ba47:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001ba4d:	83 c4 10             	add    esp,0x10
c001ba50:	e9 f5 fe ff ff       	jmp    c001b94a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001ba55:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001ba58:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001ba62:	0f 86 bc 00 00 00    	jbe    c001bb24 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001ba68:	e8 79 14 00 00       	call   c001cee6 <lockScheduler()>
c001ba6d:	51                   	push   ecx
c001ba6e:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001ba74:	6a 00                	push   0x0
c001ba76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba7b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba7e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ba84:	e8 3b 62 ff ff       	call   c0011cc4 <VAS::mapOtherVASIn(bool, VAS*)>
c001ba89:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001ba8f:	83 c4 10             	add    esp,0x10
c001ba92:	c1 e8 0c             	shr    eax,0xc
c001ba95:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001ba9f:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001baa5:	e8 a3 40 ff ff       	call   c000fb4d <Phys::allocatePage()>
c001baaa:	6a 07                	push   0x7
c001baac:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001bab2:	56                   	push   esi
c001bab3:	50                   	push   eax
c001bab4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001baba:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001babd:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001bac3:	e8 92 63 ff ff       	call   c0011e5a <VAS::mapPage(unsigned long, unsigned long, int)>
c001bac8:	58                   	pop    eax
c001bac9:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001bacf:	5a                   	pop    edx
c001bad0:	68 07 04 00 00       	push   0x407
c001bad5:	53                   	push   ebx
c001bad6:	81 c3 00 10 00 00    	add    ebx,0x1000
c001badc:	50                   	push   eax
c001badd:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001bae3:	6a 00                	push   0x0
c001bae5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001baea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001baed:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001baf3:	e8 1c 67 ff ff       	call   c0012214 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001baf8:	83 c4 1c             	add    esp,0x1c
c001bafb:	68 00 10 00 00       	push   0x1000
c001bb00:	6a 00                	push   0x0
c001bb02:	56                   	push   esi
c001bb03:	e8 83 4b fe ff       	call   c000068b <memset>
c001bb08:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001bb0e:	83 c4 10             	add    esp,0x10
c001bb11:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001bb17:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001bb1d:	77 86                	ja     c001baa5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001bb1f:	e8 c4 13 00 00       	call   c001cee8 <unlockScheduler()>
c001bb24:	83 ec 0c             	sub    esp,0xc
c001bb27:	56                   	push   esi
c001bb28:	e8 c6 5f ff ff       	call   c0011af3 <Virt::freeKernelVirtualPages(unsigned long)>
c001bb2d:	83 c4 10             	add    esp,0x10
c001bb30:	b0 01                	mov    al,0x1
c001bb32:	8d 65 f4             	lea    esp,[ebp-0xc]
c001bb35:	5b                   	pop    ebx
c001bb36:	5e                   	pop    esi
c001bb37:	5f                   	pop    edi
c001bb38:	5d                   	pop    ebp
c001bb39:	c3                   	ret    

c001bb3a <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001bb3a:	55                   	push   ebp
c001bb3b:	57                   	push   edi
c001bb3c:	56                   	push   esi
c001bb3d:	53                   	push   ebx
c001bb3e:	83 ec 48             	sub    esp,0x48
c001bb41:	68 14 01 00 00       	push   0x114
c001bb46:	e8 8f 39 ff ff       	call   c000f4da <malloc>
c001bb4b:	83 c4 0c             	add    esp,0xc
c001bb4e:	89 c6                	mov    esi,eax
c001bb50:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001bb54:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001bb58:	50                   	push   eax
c001bb59:	e8 7a 71 ff ff       	call   c0012cd8 <File::File(char const*, Process*)>
c001bb5e:	58                   	pop    eax
c001bb5f:	5a                   	pop    edx
c001bb60:	6a 01                	push   0x1
c001bb62:	56                   	push   esi
c001bb63:	e8 d4 71 ff ff       	call   c0012d3c <File::open(FileOpenMode)>
c001bb68:	83 c4 10             	add    esp,0x10
c001bb6b:	85 c0                	test   eax,eax
c001bb6d:	0f 85 47 01 00 00    	jne    c001bcba <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bb73:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001bb7b:	83 ec 0c             	sub    esp,0xc
c001bb7e:	6a 34                	push   0x34
c001bb80:	e8 55 39 ff ff       	call   c000f4da <malloc>
c001bb85:	89 c3                	mov    ebx,eax
c001bb87:	58                   	pop    eax
c001bb88:	8b 06                	mov    eax,DWORD PTR [esi]
c001bb8a:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001bb8e:	57                   	push   edi
c001bb8f:	53                   	push   ebx
c001bb90:	6a 00                	push   0x0
c001bb92:	6a 34                	push   0x34
c001bb94:	56                   	push   esi
c001bb95:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bb98:	83 c4 20             	add    esp,0x20
c001bb9b:	85 c0                	test   eax,eax
c001bb9d:	0f 85 17 01 00 00    	jne    c001bcba <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bba3:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001bba9:	0f 85 0b 01 00 00    	jne    c001bcba <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bbaf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bbb2:	85 c0                	test   eax,eax
c001bbb4:	0f 84 00 01 00 00    	je     c001bcba <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bbba:	31 d2                	xor    edx,edx
c001bbbc:	55                   	push   ebp
c001bbbd:	52                   	push   edx
c001bbbe:	50                   	push   eax
c001bbbf:	56                   	push   esi
c001bbc0:	e8 35 72 ff ff       	call   c0012dfa <File::seek(unsigned long long)>
c001bbc5:	83 c4 10             	add    esp,0x10
c001bbc8:	85 c0                	test   eax,eax
c001bbca:	0f 85 ea 00 00 00    	jne    c001bcba <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bbd0:	83 ec 0c             	sub    esp,0xc
c001bbd3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001bbd6:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001bbda:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bbde:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001bbe2:	0f af c2             	imul   eax,edx
c001bbe5:	50                   	push   eax
c001bbe6:	e8 ef 38 ff ff       	call   c000f4da <malloc>
c001bbeb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001bbed:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bbf1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bbf4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bbf8:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001bbfc:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001bc00:	0f af c2             	imul   eax,edx
c001bc03:	99                   	cdq    
c001bc04:	52                   	push   edx
c001bc05:	50                   	push   eax
c001bc06:	56                   	push   esi
c001bc07:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bc0a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001bc0d:	83 c4 20             	add    esp,0x20
c001bc10:	85 c0                	test   eax,eax
c001bc12:	0f 84 a2 00 00 00    	je     c001bcba <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bc18:	31 d2                	xor    edx,edx
c001bc1a:	51                   	push   ecx
c001bc1b:	52                   	push   edx
c001bc1c:	50                   	push   eax
c001bc1d:	56                   	push   esi
c001bc1e:	e8 d7 71 ff ff       	call   c0012dfa <File::seek(unsigned long long)>
c001bc23:	83 c4 10             	add    esp,0x10
c001bc26:	85 c0                	test   eax,eax
c001bc28:	0f 85 8c 00 00 00    	jne    c001bcba <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bc2e:	83 ec 0c             	sub    esp,0xc
c001bc31:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001bc35:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001bc39:	31 ed                	xor    ebp,ebp
c001bc3b:	0f af c2             	imul   eax,edx
c001bc3e:	50                   	push   eax
c001bc3f:	e8 96 38 ff ff       	call   c000f4da <malloc>
c001bc44:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001bc46:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bc4a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bc4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bc51:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001bc55:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001bc59:	0f af c2             	imul   eax,edx
c001bc5c:	99                   	cdq    
c001bc5d:	52                   	push   edx
c001bc5e:	50                   	push   eax
c001bc5f:	56                   	push   esi
c001bc60:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bc63:	83 c4 20             	add    esp,0x20
c001bc66:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bc6e:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001bc72:	0f 86 80 00 00 00    	jbe    c001bcf8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001bc78:	0f b7 fd             	movzx  edi,bp
c001bc7b:	c1 e7 05             	shl    edi,0x5
c001bc7e:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001bc82:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001bc85:	75 6b                	jne    c001bcf2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001bc87:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001bc8a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bc8e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001bc91:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bc95:	52                   	push   edx
c001bc96:	31 d2                	xor    edx,edx
c001bc98:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001bc9b:	52                   	push   edx
c001bc9c:	50                   	push   eax
c001bc9d:	56                   	push   esi
c001bc9e:	e8 57 71 ff ff       	call   c0012dfa <File::seek(unsigned long long)>
c001bca3:	83 c4 10             	add    esp,0x10
c001bca6:	85 c0                	test   eax,eax
c001bca8:	74 17                	je     c001bcc1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001bcaa:	83 ec 0c             	sub    esp,0xc
c001bcad:	68 70 a8 02 c0       	push   0xc002a870
c001bcb2:	e8 c8 6a ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001bcb7:	83 c4 10             	add    esp,0x10
c001bcba:	31 c0                	xor    eax,eax
c001bcbc:	e9 87 00 00 00       	jmp    c001bd48 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001bcc1:	83 ec 0c             	sub    esp,0xc
c001bcc4:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001bcc7:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001bcca:	50                   	push   eax
c001bccb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bccf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bcd3:	56                   	push   esi
c001bcd4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001bcd8:	e8 e0 fb ff ff       	call   c001b8bd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001bcdd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bce1:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001bce5:	83 c4 20             	add    esp,0x20
c001bce8:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001bcec:	73 04                	jae    c001bcf2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001bcee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bcf2:	45                   	inc    ebp
c001bcf3:	e9 76 ff ff ff       	jmp    c001bc6e <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001bcf8:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001bcfc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bd00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bd04:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001bd0a:	83 ec 0c             	sub    esp,0xc
c001bd0d:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001bd13:	25 00 f0 ff ff       	and    eax,0xfffff000
c001bd18:	05 00 10 00 00       	add    eax,0x1000
c001bd1d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bd20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bd24:	e8 c1 37 ff ff       	call   c000f4ea <free>
c001bd29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd2c:	e8 b9 37 ff ff       	call   c000f4ea <free>
c001bd31:	58                   	pop    eax
c001bd32:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bd36:	e8 af 37 ff ff       	call   c000f4ea <free>
c001bd3b:	89 34 24             	mov    DWORD PTR [esp],esi
c001bd3e:	e8 57 70 ff ff       	call   c0012d9a <File::close()>
c001bd43:	83 c4 10             	add    esp,0x10
c001bd46:	b0 01                	mov    al,0x1
c001bd48:	83 c4 3c             	add    esp,0x3c
c001bd4b:	5b                   	pop    ebx
c001bd4c:	5e                   	pop    esi
c001bd4d:	5f                   	pop    edi
c001bd4e:	5d                   	pop    ebp
c001bd4f:	c3                   	ret    

c001bd50 <Thr::runtimeReferenceHelper()>:
c001bd50:	83 ec 18             	sub    esp,0x18
c001bd53:	68 78 a8 02 c0       	push   0xc002a878
c001bd58:	e8 22 6a ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001bd5d:	fa                   	cli    
c001bd5e:	83 c4 10             	add    esp,0x10
c001bd61:	eb fe                	jmp    c001bd61 <Thr::runtimeReferenceHelper()+0x11>

c001bd63 <Thr::getAddressOfKernelSymbol(char const*)>:
c001bd63:	57                   	push   edi
c001bd64:	56                   	push   esi
c001bd65:	53                   	push   ebx
c001bd66:	31 db                	xor    ebx,ebx
c001bd68:	39 1d e0 e0 02 c0    	cmp    DWORD PTR ds:0xc002e0e0,ebx
c001bd6e:	7e 3c                	jle    c001bdac <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001bd70:	8b 34 9d 60 e0 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd1fa0]
c001bd77:	31 ff                	xor    edi,edi
c001bd79:	39 3c 9d 60 df 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd20a0],edi
c001bd80:	7e 27                	jle    c001bda9 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001bd82:	50                   	push   eax
c001bd83:	50                   	push   eax
c001bd84:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bd88:	8b 06                	mov    eax,DWORD PTR [esi]
c001bd8a:	03 04 9d e0 df 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd2020]
c001bd91:	50                   	push   eax
c001bd92:	e8 e4 49 fe ff       	call   c000077b <strcmp>
c001bd97:	83 c4 10             	add    esp,0x10
c001bd9a:	85 c0                	test   eax,eax
c001bd9c:	75 05                	jne    c001bda3 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001bd9e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001bda1:	eb 0b                	jmp    c001bdae <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001bda3:	83 c6 10             	add    esi,0x10
c001bda6:	47                   	inc    edi
c001bda7:	eb d0                	jmp    c001bd79 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001bda9:	43                   	inc    ebx
c001bdaa:	eb bc                	jmp    c001bd68 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001bdac:	31 c0                	xor    eax,eax
c001bdae:	5b                   	pop    ebx
c001bdaf:	5e                   	pop    esi
c001bdb0:	5f                   	pop    edi
c001bdb1:	c3                   	ret    

c001bdb2 <Thr::loadKernelSymbolTable(char const*)>:
c001bdb2:	55                   	push   ebp
c001bdb3:	57                   	push   edi
c001bdb4:	56                   	push   esi
c001bdb5:	53                   	push   ebx
c001bdb6:	83 ec 68             	sub    esp,0x68
c001bdb9:	8b 35 34 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e134
c001bdbf:	68 14 01 00 00       	push   0x114
c001bdc4:	e8 11 37 ff ff       	call   c000f4da <malloc>
c001bdc9:	83 c4 0c             	add    esp,0xc
c001bdcc:	89 c3                	mov    ebx,eax
c001bdce:	56                   	push   esi
c001bdcf:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001bdd3:	50                   	push   eax
c001bdd4:	e8 ff 6e ff ff       	call   c0012cd8 <File::File(char const*, Process*)>
c001bdd9:	5e                   	pop    esi
c001bdda:	5f                   	pop    edi
c001bddb:	6a 01                	push   0x1
c001bddd:	53                   	push   ebx
c001bdde:	e8 59 6f ff ff       	call   c0012d3c <File::open(FileOpenMode)>
c001bde3:	83 c4 10             	add    esp,0x10
c001bde6:	31 d2                	xor    edx,edx
c001bde8:	85 c0                	test   eax,eax
c001bdea:	0f 85 74 02 00 00    	jne    c001c064 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001bdf0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001bdf8:	83 ec 0c             	sub    esp,0xc
c001bdfb:	6a 34                	push   0x34
c001bdfd:	e8 d8 36 ff ff       	call   c000f4da <malloc>
c001be02:	59                   	pop    ecx
c001be03:	89 c7                	mov    edi,eax
c001be05:	8d 74 24 34          	lea    esi,[esp+0x34]
c001be09:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be0b:	56                   	push   esi
c001be0c:	57                   	push   edi
c001be0d:	6a 00                	push   0x0
c001be0f:	6a 34                	push   0x34
c001be11:	53                   	push   ebx
c001be12:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001be15:	83 c4 20             	add    esp,0x20
c001be18:	85 c0                	test   eax,eax
c001be1a:	74 17                	je     c001be33 <Thr::loadKernelSymbolTable(char const*)+0x81>
c001be1c:	83 ec 0c             	sub    esp,0xc
c001be1f:	68 9a a8 02 c0       	push   0xc002a89a
c001be24:	e8 a8 da ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c001be29:	83 c4 10             	add    esp,0x10
c001be2c:	31 d2                	xor    edx,edx
c001be2e:	e9 31 02 00 00       	jmp    c001c064 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001be33:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001be39:	75 e1                	jne    c001be1c <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001be3b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001be3e:	85 c0                	test   eax,eax
c001be40:	74 da                	je     c001be1c <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001be42:	52                   	push   edx
c001be43:	31 d2                	xor    edx,edx
c001be45:	52                   	push   edx
c001be46:	50                   	push   eax
c001be47:	53                   	push   ebx
c001be48:	e8 ad 6f ff ff       	call   c0012dfa <File::seek(unsigned long long)>
c001be4d:	83 c4 10             	add    esp,0x10
c001be50:	85 c0                	test   eax,eax
c001be52:	75 c8                	jne    c001be1c <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001be54:	83 ec 0c             	sub    esp,0xc
c001be57:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001be5b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001be5f:	31 ed                	xor    ebp,ebp
c001be61:	0f af c2             	imul   eax,edx
c001be64:	50                   	push   eax
c001be65:	e8 70 36 ff ff       	call   c000f4da <malloc>
c001be6a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001be6c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001be70:	89 34 24             	mov    DWORD PTR [esp],esi
c001be73:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001be77:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001be7b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001be7f:	0f af c2             	imul   eax,edx
c001be82:	99                   	cdq    
c001be83:	52                   	push   edx
c001be84:	50                   	push   eax
c001be85:	53                   	push   ebx
c001be86:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001be89:	83 c4 20             	add    esp,0x20
c001be8c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001be94:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001be9c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bea4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001beac:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001beb0:	0f 86 aa 00 00 00    	jbe    c001bf60 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001beb6:	0f b7 f5             	movzx  esi,bp
c001beb9:	6b f6 28             	imul   esi,esi,0x28
c001bebc:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001bec0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001bec3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bec7:	50                   	push   eax
c001bec8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001becc:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001bed0:	8b 16                	mov    edx,DWORD PTR [esi]
c001bed2:	6b c0 28             	imul   eax,eax,0x28
c001bed5:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001bed9:	89 d0                	mov    eax,edx
c001bedb:	31 d2                	xor    edx,edx
c001bedd:	52                   	push   edx
c001bede:	50                   	push   eax
c001bedf:	53                   	push   ebx
c001bee0:	e8 15 6f ff ff       	call   c0012dfa <File::seek(unsigned long long)>
c001bee5:	83 c4 0c             	add    esp,0xc
c001bee8:	6a 20                	push   0x20
c001beea:	6a 00                	push   0x0
c001beec:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001bef0:	52                   	push   edx
c001bef1:	e8 95 47 fe ff       	call   c000068b <memset>
c001bef6:	58                   	pop    eax
c001bef7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bef9:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001befd:	51                   	push   ecx
c001befe:	8d 54 24 40          	lea    edx,[esp+0x40]
c001bf02:	52                   	push   edx
c001bf03:	6a 00                	push   0x0
c001bf05:	6a 1f                	push   0x1f
c001bf07:	53                   	push   ebx
c001bf08:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bf0b:	83 c4 18             	add    esp,0x18
c001bf0e:	68 b1 a8 02 c0       	push   0xc002a8b1
c001bf13:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001bf17:	52                   	push   edx
c001bf18:	e8 5e 48 fe ff       	call   c000077b <strcmp>
c001bf1d:	83 c4 10             	add    esp,0x10
c001bf20:	85 c0                	test   eax,eax
c001bf22:	75 0f                	jne    c001bf33 <Thr::loadKernelSymbolTable(char const*)+0x181>
c001bf24:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001bf27:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bf2b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bf2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf33:	50                   	push   eax
c001bf34:	50                   	push   eax
c001bf35:	68 b9 a8 02 c0       	push   0xc002a8b9
c001bf3a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001bf3e:	50                   	push   eax
c001bf3f:	e8 37 48 fe ff       	call   c000077b <strcmp>
c001bf44:	83 c4 10             	add    esp,0x10
c001bf47:	85 c0                	test   eax,eax
c001bf49:	75 0f                	jne    c001bf5a <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001bf4b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001bf4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bf52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bf56:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bf5a:	45                   	inc    ebp
c001bf5b:	e9 4c ff ff ff       	jmp    c001beac <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001bf60:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bf65:	75 10                	jne    c001bf77 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001bf67:	83 ec 0c             	sub    esp,0xc
c001bf6a:	68 c1 a8 02 c0       	push   0xc002a8c1
c001bf6f:	e8 5d d9 ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c001bf74:	83 c4 10             	add    esp,0x10
c001bf77:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001bf7c:	75 10                	jne    c001bf8e <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001bf7e:	83 ec 0c             	sub    esp,0xc
c001bf81:	68 c1 a8 02 c0       	push   0xc002a8c1
c001bf86:	e8 46 d9 ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c001bf8b:	83 c4 10             	add    esp,0x10
c001bf8e:	31 d2                	xor    edx,edx
c001bf90:	50                   	push   eax
c001bf91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf95:	52                   	push   edx
c001bf96:	50                   	push   eax
c001bf97:	53                   	push   ebx
c001bf98:	e8 5d 6e ff ff       	call   c0012dfa <File::seek(unsigned long long)>
c001bf9d:	5a                   	pop    edx
c001bf9e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bfa2:	e8 33 35 ff ff       	call   c000f4da <malloc>
c001bfa7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bfab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bfaf:	31 c9                	xor    ecx,ecx
c001bfb1:	5e                   	pop    esi
c001bfb2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bfb4:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001bfb8:	55                   	push   ebp
c001bfb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bfbd:	51                   	push   ecx
c001bfbe:	52                   	push   edx
c001bfbf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001bfc3:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001bfc7:	53                   	push   ebx
c001bfc8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bfcb:	83 c4 14             	add    esp,0x14
c001bfce:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bfd2:	e8 03 35 ff ff       	call   c000f4da <malloc>
c001bfd7:	89 c6                	mov    esi,eax
c001bfd9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bfdb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bfde:	56                   	push   esi
c001bfdf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bfe3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bfe7:	51                   	push   ecx
c001bfe8:	52                   	push   edx
c001bfe9:	53                   	push   ebx
c001bfea:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bfed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bff1:	8b 15 e0 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e0e0
c001bff7:	83 c4 1c             	add    esp,0x1c
c001bffa:	c1 e8 04             	shr    eax,0x4
c001bffd:	89 04 95 60 df 02 c0 	mov    DWORD PTR [edx*4-0x3ffd20a0],eax
c001c004:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c008:	31 d2                	xor    edx,edx
c001c00a:	52                   	push   edx
c001c00b:	50                   	push   eax
c001c00c:	53                   	push   ebx
c001c00d:	e8 e8 6d ff ff       	call   c0012dfa <File::seek(unsigned long long)>
c001c012:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c014:	31 d2                	xor    edx,edx
c001c016:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c019:	56                   	push   esi
c001c01a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c01e:	52                   	push   edx
c001c01f:	50                   	push   eax
c001c020:	53                   	push   ebx
c001c021:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c024:	83 c4 14             	add    esp,0x14
c001c027:	53                   	push   ebx
c001c028:	e8 6d 6d ff ff       	call   c0012d9a <File::close()>
c001c02d:	5d                   	pop    ebp
c001c02e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c032:	e8 b3 34 ff ff       	call   c000f4ea <free>
c001c037:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c03a:	e8 ab 34 ff ff       	call   c000f4ea <free>
c001c03f:	a1 e0 e0 02 c0       	mov    eax,ds:0xc002e0e0
c001c044:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c048:	8d 50 01             	lea    edx,[eax+0x1]
c001c04b:	89 0c 85 60 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1fa0],ecx
c001c052:	89 15 e0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0e0,edx
c001c058:	89 34 85 e0 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2020],esi
c001c05f:	83 c4 10             	add    esp,0x10
c001c062:	b2 01                	mov    dl,0x1
c001c064:	83 c4 5c             	add    esp,0x5c
c001c067:	88 d0                	mov    al,dl
c001c069:	5b                   	pop    ebx
c001c06a:	5e                   	pop    esi
c001c06b:	5f                   	pop    edi
c001c06c:	5d                   	pop    ebp
c001c06d:	c3                   	ret    

c001c06e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c06e:	55                   	push   ebp
c001c06f:	57                   	push   edi
c001c070:	56                   	push   esi
c001c071:	53                   	push   ebx
c001c072:	81 ec 68 03 00 00    	sub    esp,0x368
c001c078:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c07f:	8b 1d 34 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e134
c001c085:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001c089:	68 14 01 00 00       	push   0x114
c001c08e:	e8 47 34 ff ff       	call   c000f4da <malloc>
c001c093:	83 c4 0c             	add    esp,0xc
c001c096:	89 c5                	mov    ebp,eax
c001c098:	53                   	push   ebx
c001c099:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c0a0:	50                   	push   eax
c001c0a1:	e8 32 6c ff ff       	call   c0012cd8 <File::File(char const*, Process*)>
c001c0a6:	58                   	pop    eax
c001c0a7:	5a                   	pop    edx
c001c0a8:	6a 01                	push   0x1
c001c0aa:	55                   	push   ebp
c001c0ab:	e8 8c 6c ff ff       	call   c0012d3c <File::open(FileOpenMode)>
c001c0b0:	83 c4 10             	add    esp,0x10
c001c0b3:	85 c0                	test   eax,eax
c001c0b5:	0f 85 f2 06 00 00    	jne    c001c7ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001c0bb:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c0c3:	83 ec 0c             	sub    esp,0xc
c001c0c6:	6a 34                	push   0x34
c001c0c8:	e8 0d 34 ff ff       	call   c000f4da <malloc>
c001c0cd:	89 c7                	mov    edi,eax
c001c0cf:	58                   	pop    eax
c001c0d0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c0d3:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c0d7:	53                   	push   ebx
c001c0d8:	57                   	push   edi
c001c0d9:	6a 00                	push   0x0
c001c0db:	6a 34                	push   0x34
c001c0dd:	55                   	push   ebp
c001c0de:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c0e1:	83 c4 20             	add    esp,0x20
c001c0e4:	85 c0                	test   eax,eax
c001c0e6:	0f 85 c1 06 00 00    	jne    c001c7ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001c0ec:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c0f2:	0f 85 b5 06 00 00    	jne    c001c7ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001c0f8:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c0fb:	85 c0                	test   eax,eax
c001c0fd:	0f 84 aa 06 00 00    	je     c001c7ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001c103:	31 d2                	xor    edx,edx
c001c105:	56                   	push   esi
c001c106:	52                   	push   edx
c001c107:	50                   	push   eax
c001c108:	55                   	push   ebp
c001c109:	e8 ec 6c ff ff       	call   c0012dfa <File::seek(unsigned long long)>
c001c10e:	83 c4 10             	add    esp,0x10
c001c111:	85 c0                	test   eax,eax
c001c113:	0f 85 94 06 00 00    	jne    c001c7ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001c119:	83 ec 0c             	sub    esp,0xc
c001c11c:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c11f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c123:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001c127:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c12b:	0f af c2             	imul   eax,edx
c001c12e:	50                   	push   eax
c001c12f:	e8 a6 33 ff ff       	call   c000f4da <malloc>
c001c134:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c137:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c13b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c13e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c142:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c146:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c14a:	0f af c2             	imul   eax,edx
c001c14d:	99                   	cdq    
c001c14e:	52                   	push   edx
c001c14f:	50                   	push   eax
c001c150:	55                   	push   ebp
c001c151:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c154:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c157:	83 c4 20             	add    esp,0x20
c001c15a:	85 c0                	test   eax,eax
c001c15c:	0f 84 4b 06 00 00    	je     c001c7ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001c162:	31 d2                	xor    edx,edx
c001c164:	51                   	push   ecx
c001c165:	52                   	push   edx
c001c166:	50                   	push   eax
c001c167:	55                   	push   ebp
c001c168:	e8 8d 6c ff ff       	call   c0012dfa <File::seek(unsigned long long)>
c001c16d:	83 c4 10             	add    esp,0x10
c001c170:	85 c0                	test   eax,eax
c001c172:	0f 85 35 06 00 00    	jne    c001c7ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001c178:	83 ec 0c             	sub    esp,0xc
c001c17b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c17f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c183:	31 f6                	xor    esi,esi
c001c185:	0f af c2             	imul   eax,edx
c001c188:	50                   	push   eax
c001c189:	e8 4c 33 ff ff       	call   c000f4da <malloc>
c001c18e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c191:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001c195:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c198:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c19c:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c1a0:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c1a4:	0f af c2             	imul   eax,edx
c001c1a7:	99                   	cdq    
c001c1a8:	52                   	push   edx
c001c1a9:	50                   	push   eax
c001c1aa:	55                   	push   ebp
c001c1ab:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c1ae:	83 c4 20             	add    esp,0x20
c001c1b1:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c1b5:	0f 86 8a 00 00 00    	jbe    c001c245 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c1bb:	0f b7 de             	movzx  ebx,si
c001c1be:	c1 e3 05             	shl    ebx,0x5
c001c1c1:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c001c1c5:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c1c8:	75 75                	jne    c001c23f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c1ca:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c1cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c1d1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c1d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c1d8:	52                   	push   edx
c001c1d9:	31 d2                	xor    edx,edx
c001c1db:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c1de:	52                   	push   edx
c001c1df:	50                   	push   eax
c001c1e0:	55                   	push   ebp
c001c1e1:	e8 14 6c ff ff       	call   c0012dfa <File::seek(unsigned long long)>
c001c1e6:	83 c4 10             	add    esp,0x10
c001c1e9:	85 c0                	test   eax,eax
c001c1eb:	0f 85 bc 05 00 00    	jne    c001c7ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001c1f1:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c1f8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c1fb:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001c1ff:	31 d2                	xor    edx,edx
c001c201:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c205:	83 ec 0c             	sub    esp,0xc
c001c208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c20c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c213:	50                   	push   eax
c001c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c218:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c21c:	52                   	push   edx
c001c21d:	50                   	push   eax
c001c21e:	55                   	push   ebp
c001c21f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c222:	83 c4 1c             	add    esp,0x1c
c001c225:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c228:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001c22b:	50                   	push   eax
c001c22c:	6a 00                	push   0x0
c001c22e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c232:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001c236:	50                   	push   eax
c001c237:	e8 4f 44 fe ff       	call   c000068b <memset>
c001c23c:	83 c4 10             	add    esp,0x10
c001c23f:	46                   	inc    esi
c001c240:	e9 6c ff ff ff       	jmp    c001c1b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001c245:	31 db                	xor    ebx,ebx
c001c247:	50                   	push   eax
c001c248:	68 00 01 00 00       	push   0x100
c001c24d:	6a 00                	push   0x0
c001c24f:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c253:	50                   	push   eax
c001c254:	e8 32 44 fe ff       	call   c000068b <memset>
c001c259:	83 c4 0c             	add    esp,0xc
c001c25c:	68 00 01 00 00       	push   0x100
c001c261:	6a 00                	push   0x0
c001c263:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001c26a:	50                   	push   eax
c001c26b:	e8 1b 44 fe ff       	call   c000068b <memset>
c001c270:	83 c4 10             	add    esp,0x10
c001c273:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c27b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c283:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c28b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c293:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c29b:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001c29f:	0f 86 30 01 00 00    	jbe    c001c3d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001c2a5:	0f b7 f3             	movzx  esi,bx
c001c2a8:	6b f6 28             	imul   esi,esi,0x28
c001c2ab:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001c2af:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c2b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c2b6:	50                   	push   eax
c001c2b7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c2bb:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001c2bf:	8b 06                	mov    eax,DWORD PTR [esi]
c001c2c1:	6b d2 28             	imul   edx,edx,0x28
c001c2c4:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001c2c8:	31 d2                	xor    edx,edx
c001c2ca:	52                   	push   edx
c001c2cb:	50                   	push   eax
c001c2cc:	55                   	push   ebp
c001c2cd:	e8 28 6b ff ff       	call   c0012dfa <File::seek(unsigned long long)>
c001c2d2:	83 c4 0c             	add    esp,0xc
c001c2d5:	6a 20                	push   0x20
c001c2d7:	6a 00                	push   0x0
c001c2d9:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c2e0:	51                   	push   ecx
c001c2e1:	e8 a5 43 fe ff       	call   c000068b <memset>
c001c2e6:	58                   	pop    eax
c001c2e7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c2ea:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c2ee:	52                   	push   edx
c001c2ef:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001c2f6:	51                   	push   ecx
c001c2f7:	6a 00                	push   0x0
c001c2f9:	6a 1f                	push   0x1f
c001c2fb:	55                   	push   ebp
c001c2fc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c2ff:	83 c4 1c             	add    esp,0x1c
c001c302:	6a 09                	push   0x9
c001c304:	68 db a8 02 c0       	push   0xc002a8db
c001c309:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c310:	51                   	push   ecx
c001c311:	e8 dc 42 fe ff       	call   c00005f2 <memcmp>
c001c316:	83 c4 10             	add    esp,0x10
c001c319:	85 c0                	test   eax,eax
c001c31b:	75 21                	jne    c001c33e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001c31d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c321:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001c325:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c329:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c32d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c330:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001c337:	89 c8                	mov    eax,ecx
c001c339:	40                   	inc    eax
c001c33a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c33e:	50                   	push   eax
c001c33f:	6a 09                	push   0x9
c001c341:	68 e5 a8 02 c0       	push   0xc002a8e5
c001c346:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c34d:	50                   	push   eax
c001c34e:	e8 9f 42 fe ff       	call   c00005f2 <memcmp>
c001c353:	83 c4 10             	add    esp,0x10
c001c356:	85 c0                	test   eax,eax
c001c358:	75 21                	jne    c001c37b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001c35a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c35e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001c362:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c366:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c36a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c36d:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001c374:	89 c8                	mov    eax,ecx
c001c376:	40                   	inc    eax
c001c377:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c37b:	50                   	push   eax
c001c37c:	50                   	push   eax
c001c37d:	68 b1 a8 02 c0       	push   0xc002a8b1
c001c382:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c389:	50                   	push   eax
c001c38a:	e8 ec 43 fe ff       	call   c000077b <strcmp>
c001c38f:	83 c4 10             	add    esp,0x10
c001c392:	85 c0                	test   eax,eax
c001c394:	75 0f                	jne    c001c3a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001c396:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c399:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c39d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c3a5:	50                   	push   eax
c001c3a6:	50                   	push   eax
c001c3a7:	68 b9 a8 02 c0       	push   0xc002a8b9
c001c3ac:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c3b3:	50                   	push   eax
c001c3b4:	e8 c2 43 fe ff       	call   c000077b <strcmp>
c001c3b9:	83 c4 10             	add    esp,0x10
c001c3bc:	85 c0                	test   eax,eax
c001c3be:	75 0f                	jne    c001c3cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001c3c0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c3c3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c3c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c3cf:	43                   	inc    ebx
c001c3d0:	e9 c6 fe ff ff       	jmp    c001c29b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001c3d5:	31 d2                	xor    edx,edx
c001c3d7:	50                   	push   eax
c001c3d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c3dc:	52                   	push   edx
c001c3dd:	50                   	push   eax
c001c3de:	55                   	push   ebp
c001c3df:	e8 16 6a ff ff       	call   c0012dfa <File::seek(unsigned long long)>
c001c3e4:	5a                   	pop    edx
c001c3e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3e9:	e8 ec 30 ff ff       	call   c000f4da <malloc>
c001c3ee:	31 d2                	xor    edx,edx
c001c3f0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001c3f4:	59                   	pop    ecx
c001c3f5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c3f8:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c3fc:	53                   	push   ebx
c001c3fd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c401:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c405:	52                   	push   edx
c001c406:	50                   	push   eax
c001c407:	55                   	push   ebp
c001c408:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c40b:	83 c4 14             	add    esp,0x14
c001c40e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c412:	e8 c3 30 ff ff       	call   c000f4da <malloc>
c001c417:	31 d2                	xor    edx,edx
c001c419:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c41d:	83 c4 0c             	add    esp,0xc
c001c420:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c424:	52                   	push   edx
c001c425:	50                   	push   eax
c001c426:	55                   	push   ebp
c001c427:	e8 ce 69 ff ff       	call   c0012dfa <File::seek(unsigned long long)>
c001c42c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c42f:	31 d2                	xor    edx,edx
c001c431:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c434:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c438:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c43c:	52                   	push   edx
c001c43d:	50                   	push   eax
c001c43e:	55                   	push   ebp
c001c43f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c442:	83 c4 20             	add    esp,0x20
c001c445:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c44d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c451:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001c455:	0f 84 56 03 00 00    	je     c001c7b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x743>
c001c45b:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001c462:	31 d2                	xor    edx,edx
c001c464:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c468:	c1 e8 03             	shr    eax,0x3
c001c46b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001c46f:	50                   	push   eax
c001c470:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c474:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001c478:	52                   	push   edx
c001c479:	50                   	push   eax
c001c47a:	55                   	push   ebp
c001c47b:	e8 7a 69 ff ff       	call   c0012dfa <File::seek(unsigned long long)>
c001c480:	58                   	pop    eax
c001c481:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c485:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001c48c:	e8 49 30 ff ff       	call   c000f4da <malloc>
c001c491:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c494:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c498:	31 d2                	xor    edx,edx
c001c49a:	58                   	pop    eax
c001c49b:	8d 44 24 58          	lea    eax,[esp+0x58]
c001c49f:	50                   	push   eax
c001c4a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c4a4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c4a8:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001c4af:	52                   	push   edx
c001c4b0:	50                   	push   eax
c001c4b1:	55                   	push   ebp
c001c4b2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c4b5:	83 c4 20             	add    esp,0x20
c001c4b8:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c4c0:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001c4c4:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001c4c8:	0f 8d c7 02 00 00    	jge    c001c795 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x727>
c001c4ce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c4d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c4d6:	31 db                	xor    ebx,ebx
c001c4d8:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001c4db:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c4df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c4e3:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001c4e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c4eb:	c1 e8 08             	shr    eax,0x8
c001c4ee:	89 c6                	mov    esi,eax
c001c4f0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c4f4:	c1 e6 04             	shl    esi,0x4
c001c4f7:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001c4fb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c4fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c502:	85 c0                	test   eax,eax
c001c504:	0f 85 17 01 00 00    	jne    c001c621 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c50a:	83 ec 0c             	sub    esp,0xc
c001c50d:	b3 01                	mov    bl,0x1
c001c50f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c513:	03 06                	add    eax,DWORD PTR [esi]
c001c515:	50                   	push   eax
c001c516:	e8 48 f8 ff ff       	call   c001bd63 <Thr::getAddressOfKernelSymbol(char const*)>
c001c51b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c51f:	83 c4 10             	add    esp,0x10
c001c522:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001c527:	0f 85 f4 00 00 00    	jne    c001c621 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c52d:	50                   	push   eax
c001c52e:	50                   	push   eax
c001c52f:	68 ef a8 02 c0       	push   0xc002a8ef
c001c534:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c538:	03 06                	add    eax,DWORD PTR [esi]
c001c53a:	50                   	push   eax
c001c53b:	e8 3b 42 fe ff       	call   c000077b <strcmp>
c001c540:	83 c4 10             	add    esp,0x10
c001c543:	85 c0                	test   eax,eax
c001c545:	75 0a                	jne    c001c551 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x4e3>
c001c547:	b8 4c 55 02 c0       	mov    eax,0xc002554c
c001c54c:	e9 ca 00 00 00       	jmp    c001c61b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c551:	50                   	push   eax
c001c552:	50                   	push   eax
c001c553:	68 f9 a8 02 c0       	push   0xc002a8f9
c001c558:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c55c:	03 06                	add    eax,DWORD PTR [esi]
c001c55e:	50                   	push   eax
c001c55f:	e8 17 42 fe ff       	call   c000077b <strcmp>
c001c564:	83 c4 10             	add    esp,0x10
c001c567:	85 c0                	test   eax,eax
c001c569:	75 0a                	jne    c001c575 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x507>
c001c56b:	b8 80 52 02 c0       	mov    eax,0xc0025280
c001c570:	e9 a6 00 00 00       	jmp    c001c61b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c575:	53                   	push   ebx
c001c576:	53                   	push   ebx
c001c577:	68 02 a9 02 c0       	push   0xc002a902
c001c57c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c580:	03 06                	add    eax,DWORD PTR [esi]
c001c582:	50                   	push   eax
c001c583:	e8 f3 41 fe ff       	call   c000077b <strcmp>
c001c588:	83 c4 10             	add    esp,0x10
c001c58b:	85 c0                	test   eax,eax
c001c58d:	75 0a                	jne    c001c599 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52b>
c001c58f:	b8 4c 56 02 c0       	mov    eax,0xc002564c
c001c594:	e9 82 00 00 00       	jmp    c001c61b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c599:	51                   	push   ecx
c001c59a:	51                   	push   ecx
c001c59b:	68 0c a9 02 c0       	push   0xc002a90c
c001c5a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c5a4:	03 06                	add    eax,DWORD PTR [esi]
c001c5a6:	50                   	push   eax
c001c5a7:	e8 cf 41 fe ff       	call   c000077b <strcmp>
c001c5ac:	83 c4 10             	add    esp,0x10
c001c5af:	85 c0                	test   eax,eax
c001c5b1:	74 63                	je     c001c616 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a8>
c001c5b3:	50                   	push   eax
c001c5b4:	50                   	push   eax
c001c5b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c5b9:	03 06                	add    eax,DWORD PTR [esi]
c001c5bb:	50                   	push   eax
c001c5bc:	68 15 a9 02 c0       	push   0xc002a915
c001c5c1:	e8 b9 61 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001c5c6:	58                   	pop    eax
c001c5c7:	5a                   	pop    edx
c001c5c8:	68 2f a9 02 c0       	push   0xc002a92f
c001c5cd:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c001c5d4:	53                   	push   ebx
c001c5d5:	e8 50 41 fe ff       	call   c000072a <strcpy>
c001c5da:	59                   	pop    ecx
c001c5db:	58                   	pop    eax
c001c5dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c5e0:	03 06                	add    eax,DWORD PTR [esi]
c001c5e2:	50                   	push   eax
c001c5e3:	53                   	push   ebx
c001c5e4:	e8 f8 41 fe ff       	call   c00007e1 <strcat>
c001c5e9:	58                   	pop    eax
c001c5ea:	5a                   	pop    edx
c001c5eb:	68 c5 a9 02 c0       	push   0xc002a9c5
c001c5f0:	53                   	push   ebx
c001c5f1:	e8 eb 41 fe ff       	call   c00007e1 <strcat>
c001c5f6:	83 c4 10             	add    esp,0x10
c001c5f9:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c5fe:	0f 84 4b 01 00 00    	je     c001c74f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c604:	83 ec 0c             	sub    esp,0xc
c001c607:	53                   	push   ebx
c001c608:	e8 c4 d2 ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c001c60d:	83 c4 10             	add    esp,0x10
c001c610:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001c614:	eb 0b                	jmp    c001c621 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c616:	b8 cc 53 02 c0       	mov    eax,0xc00253cc
c001c61b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c61f:	b3 01                	mov    bl,0x1
c001c621:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001c626:	0f 85 80 00 00 00    	jne    c001c6ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c001c62c:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001c633:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c637:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001c63b:	01 ce                	add    esi,ecx
c001c63d:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001c645:	8b 06                	mov    eax,DWORD PTR [esi]
c001c647:	0f 94 c2             	sete   dl
c001c64a:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001c652:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001c657:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001c65b:	84 db                	test   bl,bl
c001c65d:	74 31                	je     c001c690 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x622>
c001c65f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001c663:	01 c3                	add    ebx,eax
c001c665:	84 d2                	test   dl,dl
c001c667:	75 0a                	jne    c001c673 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x605>
c001c669:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c66d:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c671:	76 32                	jbe    c001c6a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c673:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c678:	0f 84 d1 00 00 00    	je     c001c74f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c67e:	83 ec 0c             	sub    esp,0xc
c001c681:	68 46 a9 02 c0       	push   0xc002a946
c001c686:	e8 46 d2 ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c001c68b:	83 c4 10             	add    esp,0x10
c001c68e:	eb 15                	jmp    c001c6a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c690:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001c693:	84 d2                	test   dl,dl
c001c695:	75 0e                	jne    c001c6a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c697:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c69b:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c69f:	77 04                	ja     c001c6a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c6a1:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001c6a5:	89 1e                	mov    DWORD PTR [esi],ebx
c001c6a7:	e9 e0 00 00 00       	jmp    c001c78c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c6ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001c6b1:	75 6e                	jne    c001c721 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b3>
c001c6b3:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001c6ba:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001c6be:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001c6c2:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001c6ca:	74 17                	je     c001c6e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001c6cc:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001c6d4:	74 0d                	je     c001c6e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001c6d6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c6da:	83 e8 04             	sub    eax,0x4
c001c6dd:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c6e1:	76 17                	jbe    c001c6fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68c>
c001c6e3:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c6e8:	74 65                	je     c001c74f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c6ea:	83 ec 0c             	sub    esp,0xc
c001c6ed:	68 62 a9 02 c0       	push   0xc002a962
c001c6f2:	e8 da d1 ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c001c6f7:	83 c4 10             	add    esp,0x10
c001c6fa:	8b 16                	mov    edx,DWORD PTR [esi]
c001c6fc:	84 db                	test   bl,bl
c001c6fe:	74 13                	je     c001c713 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c001c700:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c704:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001c70b:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001c70f:	01 d0                	add    eax,edx
c001c711:	eb 06                	jmp    c001c719 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c001c713:	89 d0                	mov    eax,edx
c001c715:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001c719:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001c71d:	89 06                	mov    DWORD PTR [esi],eax
c001c71f:	eb 6b                	jmp    c001c78c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c721:	50                   	push   eax
c001c722:	50                   	push   eax
c001c723:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001c728:	50                   	push   eax
c001c729:	68 7e a9 02 c0       	push   0xc002a97e
c001c72e:	e8 4c 60 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001c733:	83 c4 10             	add    esp,0x10
c001c736:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c73b:	74 12                	je     c001c74f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c73d:	83 ec 0c             	sub    esp,0xc
c001c740:	68 89 a9 02 c0       	push   0xc002a989
c001c745:	e8 87 d1 ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c001c74a:	83 c4 10             	add    esp,0x10
c001c74d:	eb 3d                	jmp    c001c78c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c74f:	83 ec 0c             	sub    esp,0xc
c001c752:	55                   	push   ebp
c001c753:	e8 42 66 ff ff       	call   c0012d9a <File::close()>
c001c758:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c75b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c75e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c761:	59                   	pop    ecx
c001c762:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c766:	e8 7f 2d ff ff       	call   c000f4ea <free>
c001c76b:	5b                   	pop    ebx
c001c76c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c770:	e8 75 2d ff ff       	call   c000f4ea <free>
c001c775:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c778:	e8 6d 2d ff ff       	call   c000f4ea <free>
c001c77d:	5e                   	pop    esi
c001c77e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c782:	e8 63 2d ff ff       	call   c000f4ea <free>
c001c787:	83 c4 10             	add    esp,0x10
c001c78a:	eb 21                	jmp    c001c7ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001c78c:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001c790:	e9 2b fd ff ff       	jmp    c001c4c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001c795:	83 ec 0c             	sub    esp,0xc
c001c798:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c79c:	e8 49 2d ff ff       	call   c000f4ea <free>
c001c7a1:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001c7a5:	83 c4 10             	add    esp,0x10
c001c7a8:	e9 a0 fc ff ff       	jmp    c001c44d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001c7ad:	31 c0                	xor    eax,eax
c001c7af:	eb 33                	jmp    c001c7e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x776>
c001c7b1:	83 ec 0c             	sub    esp,0xc
c001c7b4:	55                   	push   ebp
c001c7b5:	e8 e0 65 ff ff       	call   c0012d9a <File::close()>
c001c7ba:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c7bd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c7c0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c7c3:	58                   	pop    eax
c001c7c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c7c8:	e8 1d 2d ff ff       	call   c000f4ea <free>
c001c7cd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c7d0:	e8 15 2d ff ff       	call   c000f4ea <free>
c001c7d5:	5a                   	pop    edx
c001c7d6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c7da:	e8 0b 2d ff ff       	call   c000f4ea <free>
c001c7df:	83 c4 10             	add    esp,0x10
c001c7e2:	b0 01                	mov    al,0x1
c001c7e4:	81 c4 5c 03 00 00    	add    esp,0x35c
c001c7ea:	5b                   	pop    ebx
c001c7eb:	5e                   	pop    esi
c001c7ec:	5f                   	pop    edi
c001c7ed:	5d                   	pop    ebp
c001c7ee:	c3                   	ret    

c001c7ef <Thr::getDriverBaseFromAddress(unsigned long)>:
c001c7ef:	56                   	push   esi
c001c7f0:	31 d2                	xor    edx,edx
c001c7f2:	53                   	push   ebx
c001c7f3:	8b 1d 40 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d940
c001c7f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c7fd:	39 d3                	cmp    ebx,edx
c001c7ff:	7e 1b                	jle    c001c81c <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001c801:	8b 04 95 60 db 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd24a0]
c001c808:	39 c8                	cmp    eax,ecx
c001c80a:	77 0d                	ja     c001c819 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001c80c:	8b 34 95 60 d9 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd26a0]
c001c813:	01 c6                	add    esi,eax
c001c815:	39 ce                	cmp    esi,ecx
c001c817:	77 05                	ja     c001c81e <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001c819:	42                   	inc    edx
c001c81a:	eb e1                	jmp    c001c7fd <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001c81c:	31 c0                	xor    eax,eax
c001c81e:	5b                   	pop    ebx
c001c81f:	5e                   	pop    esi
c001c820:	c3                   	ret    

c001c821 <Thr::getDriverNameFromAddress(unsigned long)>:
c001c821:	53                   	push   ebx
c001c822:	31 c0                	xor    eax,eax
c001c824:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c828:	8b 1d 40 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d940
c001c82e:	39 c3                	cmp    ebx,eax
c001c830:	7e 22                	jle    c001c854 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001c832:	8b 14 85 60 db 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd24a0]
c001c839:	39 ca                	cmp    edx,ecx
c001c83b:	77 14                	ja     c001c851 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001c83d:	03 14 85 60 d9 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd26a0]
c001c844:	39 ca                	cmp    edx,ecx
c001c846:	76 09                	jbe    c001c851 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001c848:	8b 04 85 60 dd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd22a0]
c001c84f:	eb 05                	jmp    c001c856 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001c851:	40                   	inc    eax
c001c852:	eb da                	jmp    c001c82e <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001c854:	31 c0                	xor    eax,eax
c001c856:	5b                   	pop    ebx
c001c857:	c3                   	ret    

c001c858 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001c858:	53                   	push   ebx
c001c859:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001c85d:	53                   	push   ebx
c001c85e:	e8 8c ff ff ff       	call   c001c7ef <Thr::getDriverBaseFromAddress(unsigned long)>
c001c863:	5a                   	pop    edx
c001c864:	31 d2                	xor    edx,edx
c001c866:	85 c0                	test   eax,eax
c001c868:	74 04                	je     c001c86e <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001c86a:	89 da                	mov    edx,ebx
c001c86c:	29 c2                	sub    edx,eax
c001c86e:	89 d0                	mov    eax,edx
c001c870:	5b                   	pop    ebx
c001c871:	c3                   	ret    

c001c872 <Thr::loadDLL(char const*, bool)>:
c001c872:	55                   	push   ebp
c001c873:	57                   	push   edi
c001c874:	56                   	push   esi
c001c875:	53                   	push   ebx
c001c876:	81 ec 34 01 00 00    	sub    esp,0x134
c001c87c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001c883:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001c88a:	56                   	push   esi
c001c88b:	68 a1 a9 02 c0       	push   0xc002a9a1
c001c890:	e8 ea 5e ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001c895:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001c89c:	e8 39 2c ff ff       	call   c000f4da <malloc>
c001c8a1:	83 c4 0c             	add    esp,0xc
c001c8a4:	89 c3                	mov    ebx,eax
c001c8a6:	ff 35 34 e1 02 c0    	push   DWORD PTR ds:0xc002e134
c001c8ac:	56                   	push   esi
c001c8ad:	50                   	push   eax
c001c8ae:	e8 25 64 ff ff       	call   c0012cd8 <File::File(char const*, Process*)>
c001c8b3:	83 c4 10             	add    esp,0x10
c001c8b6:	85 db                	test   ebx,ebx
c001c8b8:	75 3c                	jne    c001c8f6 <Thr::loadDLL(char const*, bool)+0x84>
c001c8ba:	89 e8                	mov    eax,ebp
c001c8bc:	84 c0                	test   al,al
c001c8be:	0f 84 b0 01 00 00    	je     c001ca74 <Thr::loadDLL(char const*, bool)+0x202>
c001c8c4:	50                   	push   eax
c001c8c5:	50                   	push   eax
c001c8c6:	68 b2 a9 02 c0       	push   0xc002a9b2
c001c8cb:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001c8cf:	57                   	push   edi
c001c8d0:	e8 55 3e fe ff       	call   c000072a <strcpy>
c001c8d5:	58                   	pop    eax
c001c8d6:	5a                   	pop    edx
c001c8d7:	56                   	push   esi
c001c8d8:	57                   	push   edi
c001c8d9:	e8 03 3f fe ff       	call   c00007e1 <strcat>
c001c8de:	59                   	pop    ecx
c001c8df:	58                   	pop    eax
c001c8e0:	68 c5 a9 02 c0       	push   0xc002a9c5
c001c8e5:	57                   	push   edi
c001c8e6:	e8 f6 3e fe ff       	call   c00007e1 <strcat>
c001c8eb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c8ee:	e8 de cf ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c001c8f3:	83 c4 10             	add    esp,0x10
c001c8f6:	50                   	push   eax
c001c8f7:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001c8fb:	50                   	push   eax
c001c8fc:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c900:	50                   	push   eax
c001c901:	53                   	push   ebx
c001c902:	e8 e1 66 ff ff       	call   c0012fe8 <File::stat(unsigned long long*, bool*)>
c001c907:	83 c4 10             	add    esp,0x10
c001c90a:	85 db                	test   ebx,ebx
c001c90c:	74 0c                	je     c001c91a <Thr::loadDLL(char const*, bool)+0xa8>
c001c90e:	83 ec 0c             	sub    esp,0xc
c001c911:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c913:	53                   	push   ebx
c001c914:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c917:	83 c4 10             	add    esp,0x10
c001c91a:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001c91f:	75 0a                	jne    c001c92b <Thr::loadDLL(char const*, bool)+0xb9>
c001c921:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c925:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001c929:	75 3c                	jne    c001c967 <Thr::loadDLL(char const*, bool)+0xf5>
c001c92b:	89 e8                	mov    eax,ebp
c001c92d:	84 c0                	test   al,al
c001c92f:	0f 84 3d 01 00 00    	je     c001ca72 <Thr::loadDLL(char const*, bool)+0x200>
c001c935:	50                   	push   eax
c001c936:	50                   	push   eax
c001c937:	68 b2 a9 02 c0       	push   0xc002a9b2
c001c93c:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001c940:	53                   	push   ebx
c001c941:	e8 e4 3d fe ff       	call   c000072a <strcpy>
c001c946:	58                   	pop    eax
c001c947:	5a                   	pop    edx
c001c948:	56                   	push   esi
c001c949:	53                   	push   ebx
c001c94a:	e8 92 3e fe ff       	call   c00007e1 <strcat>
c001c94f:	59                   	pop    ecx
c001c950:	5f                   	pop    edi
c001c951:	68 c5 a9 02 c0       	push   0xc002a9c5
c001c956:	53                   	push   ebx
c001c957:	e8 85 3e fe ff       	call   c00007e1 <strcat>
c001c95c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c95f:	e8 6d cf ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c001c964:	83 c4 10             	add    esp,0x10
c001c967:	e8 b3 4f ff ff       	call   c001191f <Virt::getAKernelVAS()>
c001c96c:	51                   	push   ecx
c001c96d:	6a 03                	push   0x3
c001c96f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c973:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c977:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001c97d:	83 d3 00             	adc    ebx,0x0
c001c980:	89 ca                	mov    edx,ecx
c001c982:	89 d1                	mov    ecx,edx
c001c984:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001c988:	51                   	push   ecx
c001c989:	50                   	push   eax
c001c98a:	e8 cb 55 ff ff       	call   c0011f5a <VAS::allocatePages(int, int)>
c001c98f:	89 34 24             	mov    DWORD PTR [esp],esi
c001c992:	89 c3                	mov    ebx,eax
c001c994:	e8 0f 3d fe ff       	call   c00006a8 <strlen>
c001c999:	8b 3d 40 d9 02 c0    	mov    edi,DWORD PTR ds:0xc002d940
c001c99f:	40                   	inc    eax
c001c9a0:	89 04 24             	mov    DWORD PTR [esp],eax
c001c9a3:	e8 32 2b ff ff       	call   c000f4da <malloc>
c001c9a8:	89 04 bd 60 dd 02 c0 	mov    DWORD PTR [edi*4-0x3ffd22a0],eax
c001c9af:	5f                   	pop    edi
c001c9b0:	58                   	pop    eax
c001c9b1:	a1 40 d9 02 c0       	mov    eax,ds:0xc002d940
c001c9b6:	56                   	push   esi
c001c9b7:	ff 34 85 60 dd 02 c0 	push   DWORD PTR [eax*4-0x3ffd22a0]
c001c9be:	e8 67 3d fe ff       	call   c000072a <strcpy>
c001c9c3:	a1 40 d9 02 c0       	mov    eax,ds:0xc002d940
c001c9c8:	8d 50 01             	lea    edx,[eax+0x1]
c001c9cb:	89 1c 85 60 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd24a0],ebx
c001c9d2:	89 15 40 d9 02 c0    	mov    DWORD PTR ds:0xc002d940,edx
c001c9d8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c9dc:	83 c4 0c             	add    esp,0xc
c001c9df:	89 14 85 60 d9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd26a0],edx
c001c9e6:	6a 01                	push   0x1
c001c9e8:	53                   	push   ebx
c001c9e9:	56                   	push   esi
c001c9ea:	e8 7f f6 ff ff       	call   c001c06e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001c9ef:	83 c4 10             	add    esp,0x10
c001c9f2:	89 c7                	mov    edi,eax
c001c9f4:	fe c8                	dec    al
c001c9f6:	74 16                	je     c001ca0e <Thr::loadDLL(char const*, bool)+0x19c>
c001c9f8:	89 e8                	mov    eax,ebp
c001c9fa:	84 c0                	test   al,al
c001c9fc:	74 10                	je     c001ca0e <Thr::loadDLL(char const*, bool)+0x19c>
c001c9fe:	83 ec 0c             	sub    esp,0xc
c001ca01:	68 c7 a9 02 c0       	push   0xc002a9c7
c001ca06:	e8 c6 ce ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c001ca0b:	83 c4 10             	add    esp,0x10
c001ca0e:	31 f6                	xor    esi,esi
c001ca10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ca14:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ca18:	05 ff 0f 00 00       	add    eax,0xfff
c001ca1d:	83 d2 00             	adc    edx,0x0
c001ca20:	0f ac d0 0c          	shrd   eax,edx,0xc
c001ca24:	c1 ea 0c             	shr    edx,0xc
c001ca27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ca2b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ca2f:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001ca33:	ba 00 00 00 00       	mov    edx,0x0
c001ca38:	89 d0                	mov    eax,edx
c001ca3a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001ca3e:	73 2c                	jae    c001ca6c <Thr::loadDLL(char const*, bool)+0x1fa>
c001ca40:	e8 da 4e ff ff       	call   c001191f <Virt::getAKernelVAS()>
c001ca45:	89 f5                	mov    ebp,esi
c001ca47:	c1 e5 0c             	shl    ebp,0xc
c001ca4a:	52                   	push   edx
c001ca4b:	01 dd                	add    ebp,ebx
c001ca4d:	52                   	push   edx
c001ca4e:	55                   	push   ebp
c001ca4f:	50                   	push   eax
c001ca50:	e8 7f 50 ff ff       	call   c0011ad4 <VAS::getPageTableEntry(unsigned long)>
c001ca55:	83 c4 10             	add    esp,0x10
c001ca58:	f6 00 60             	test   BYTE PTR [eax],0x60
c001ca5b:	75 0c                	jne    c001ca69 <Thr::loadDLL(char const*, bool)+0x1f7>
c001ca5d:	83 ec 0c             	sub    esp,0xc
c001ca60:	55                   	push   ebp
c001ca61:	e8 5d 30 ff ff       	call   c000fac3 <Phys::freePage(unsigned long)>
c001ca66:	83 c4 10             	add    esp,0x10
c001ca69:	46                   	inc    esi
c001ca6a:	eb a4                	jmp    c001ca10 <Thr::loadDLL(char const*, bool)+0x19e>
c001ca6c:	89 f8                	mov    eax,edi
c001ca6e:	84 c0                	test   al,al
c001ca70:	75 02                	jne    c001ca74 <Thr::loadDLL(char const*, bool)+0x202>
c001ca72:	31 db                	xor    ebx,ebx
c001ca74:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ca7a:	89 d8                	mov    eax,ebx
c001ca7c:	5b                   	pop    ebx
c001ca7d:	5e                   	pop    esi
c001ca7e:	5f                   	pop    edi
c001ca7f:	5d                   	pop    ebp
c001ca80:	c3                   	ret    

c001ca81 <Thr::executeDLL(unsigned long, void*)>:
c001ca81:	56                   	push   esi
c001ca82:	53                   	push   ebx
c001ca83:	51                   	push   ecx
c001ca84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ca88:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ca8c:	85 db                	test   ebx,ebx
c001ca8e:	75 10                	jne    c001caa0 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001ca90:	83 ec 0c             	sub    esp,0xc
c001ca93:	68 e6 a9 02 c0       	push   0xc002a9e6
c001ca98:	e8 34 ce ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c001ca9d:	83 c4 10             	add    esp,0x10
c001caa0:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001caa4:	89 d8                	mov    eax,ebx
c001caa6:	5a                   	pop    edx
c001caa7:	5b                   	pop    ebx
c001caa8:	5e                   	pop    esi
c001caa9:	ff e0                	jmp    eax
c001caab:	90                   	nop

c001caac <changeTSS>:
c001caac:	83 ec 14             	sub    esp,0x14
c001caaf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cab4:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001cab7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001cabc:	c1 e2 15             	shl    edx,0x15
c001cabf:	29 d0                	sub    eax,edx
c001cac1:	50                   	push   eax
c001cac2:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c001cac7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cacd:	05 7c 11 00 00       	add    eax,0x117c
c001cad2:	50                   	push   eax
c001cad3:	e8 f6 45 ff ff       	call   c00110ce <TSS::setESP(unsigned long)>
c001cad8:	83 c4 1c             	add    esp,0x1c
c001cadb:	c3                   	ret    

c001cadc <Process::addArgs(char**)>:
c001cadc:	57                   	push   edi
c001cadd:	56                   	push   esi
c001cade:	53                   	push   ebx
c001cadf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cae3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cae7:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001caf1:	85 ff                	test   edi,edi
c001caf3:	74 3d                	je     c001cb32 <Process::addArgs(char**)+0x56>
c001caf5:	8b 07                	mov    eax,DWORD PTR [edi]
c001caf7:	85 c0                	test   eax,eax
c001caf9:	74 37                	je     c001cb32 <Process::addArgs(char**)+0x56>
c001cafb:	31 db                	xor    ebx,ebx
c001cafd:	83 ec 0c             	sub    esp,0xc
c001cb00:	50                   	push   eax
c001cb01:	e8 a2 3b fe ff       	call   c00006a8 <strlen>
c001cb06:	40                   	inc    eax
c001cb07:	89 04 24             	mov    DWORD PTR [esp],eax
c001cb0a:	e8 cb 29 ff ff       	call   c000f4da <malloc>
c001cb0f:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001cb16:	5a                   	pop    edx
c001cb17:	59                   	pop    ecx
c001cb18:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001cb1b:	43                   	inc    ebx
c001cb1c:	50                   	push   eax
c001cb1d:	e8 08 3c fe ff       	call   c000072a <strcpy>
c001cb22:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001cb28:	83 c4 10             	add    esp,0x10
c001cb2b:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001cb2e:	85 c0                	test   eax,eax
c001cb30:	75 cb                	jne    c001cafd <Process::addArgs(char**)+0x21>
c001cb32:	5b                   	pop    ebx
c001cb33:	5e                   	pop    esi
c001cb34:	5f                   	pop    edi
c001cb35:	c3                   	ret    

c001cb36 <Process::Process(char const*, Process*, char**)>:
c001cb36:	56                   	push   esi
c001cb37:	53                   	push   ebx
c001cb38:	83 ec 14             	sub    esp,0x14
c001cb3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb3f:	05 0c 02 00 00       	add    eax,0x20c
c001cb44:	bb 07 00 00 00       	mov    ebx,0x7
c001cb49:	89 c6                	mov    esi,eax
c001cb4b:	85 db                	test   ebx,ebx
c001cb4d:	78 12                	js     c001cb61 <Process::Process(char const*, Process*, char**)+0x2b>
c001cb4f:	83 ec 0c             	sub    esp,0xc
c001cb52:	56                   	push   esi
c001cb53:	e8 aa ac 00 00       	call   c0027802 <ThreadControlBlock::ThreadControlBlock()>
c001cb58:	83 c4 10             	add    esp,0x10
c001cb5b:	83 c6 63             	add    esi,0x63
c001cb5e:	4b                   	dec    ebx
c001cb5f:	eb ea                	jmp    c001cb4b <Process::Process(char const*, Process*, char**)+0x15>
c001cb61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb65:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001cb6c:	83 ec 0c             	sub    esp,0xc
c001cb6f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb73:	e8 aa cb ff ff       	call   c0019722 <Krnl::newProcessEnv(Process*)>
c001cb78:	83 c4 10             	add    esp,0x10
c001cb7b:	89 c2                	mov    edx,eax
c001cb7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb81:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001cb87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb8b:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001cb94:	a1 70 c1 02 c0       	mov    eax,ds:0xc002c170
c001cb99:	8d 50 01             	lea    edx,[eax+0x1]
c001cb9c:	89 15 70 c1 02 c0    	mov    DWORD PTR ds:0xc002c170,edx
c001cba2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cba6:	89 02                	mov    DWORD PTR [edx],eax
c001cba8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001cbb0:	83 ec 0c             	sub    esp,0xc
c001cbb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cbb7:	e8 1e 29 ff ff       	call   c000f4da <malloc>
c001cbbc:	83 c4 10             	add    esp,0x10
c001cbbf:	89 c3                	mov    ebx,eax
c001cbc1:	83 ec 08             	sub    esp,0x8
c001cbc4:	6a 00                	push   0x0
c001cbc6:	53                   	push   ebx
c001cbc7:	e8 36 57 ff ff       	call   c0012302 <VAS::VAS(bool)>
c001cbcc:	83 c4 10             	add    esp,0x10
c001cbcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cbd3:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001cbd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cbdd:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001cbe7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cbeb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cbef:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001cbf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cbf9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cbff:	85 c0                	test   eax,eax
c001cc01:	74 42                	je     c001cc45 <Process::Process(char const*, Process*, char**)+0x10f>
c001cc03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc07:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cc0d:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001cc13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc17:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001cc1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc21:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cc27:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001cc2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc31:	05 0c 01 00 00       	add    eax,0x10c
c001cc36:	83 ec 08             	sub    esp,0x8
c001cc39:	52                   	push   edx
c001cc3a:	50                   	push   eax
c001cc3b:	e8 ea 3a fe ff       	call   c000072a <strcpy>
c001cc40:	83 c4 10             	add    esp,0x10
c001cc43:	eb 63                	jmp    c001cca8 <Process::Process(char const*, Process*, char**)+0x172>
c001cc45:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001cc4d:	83 ec 0c             	sub    esp,0xc
c001cc50:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cc54:	e8 81 28 ff ff       	call   c000f4da <malloc>
c001cc59:	83 c4 10             	add    esp,0x10
c001cc5c:	89 c3                	mov    ebx,eax
c001cc5e:	83 ec 08             	sub    esp,0x8
c001cc61:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc65:	53                   	push   ebx
c001cc66:	e8 61 41 ff ff       	call   c0010dcc <VgaText::VgaText(char const*)>
c001cc6b:	83 c4 10             	add    esp,0x10
c001cc6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc72:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001cc78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc7c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001cc82:	83 ec 0c             	sub    esp,0xc
c001cc85:	50                   	push   eax
c001cc86:	e8 34 35 ff ff       	call   c00101bf <addToTerminalCycle(VgaText*)>
c001cc8b:	83 c4 10             	add    esp,0x10
c001cc8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc92:	05 0c 01 00 00       	add    eax,0x10c
c001cc97:	83 ec 08             	sub    esp,0x8
c001cc9a:	68 10 aa 02 c0       	push   0xc002aa10
c001cc9f:	50                   	push   eax
c001cca0:	e8 85 3a fe ff       	call   c000072a <strcpy>
c001cca5:	83 c4 10             	add    esp,0x10
c001cca8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ccac:	83 c0 0c             	add    eax,0xc
c001ccaf:	83 ec 08             	sub    esp,0x8
c001ccb2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ccb6:	50                   	push   eax
c001ccb7:	e8 6e 3a fe ff       	call   c000072a <strcpy>
c001ccbc:	83 c4 10             	add    esp,0x10
c001ccbf:	83 ec 08             	sub    esp,0x8
c001ccc2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ccc6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ccca:	e8 0d fe ff ff       	call   c001cadc <Process::addArgs(char**)>
c001cccf:	83 c4 10             	add    esp,0x10
c001ccd2:	83 ec 08             	sub    esp,0x8
c001ccd5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ccd9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ccdd:	e8 58 ee ff ff       	call   c001bb3a <Thr::loadProgramIntoMemory(Process*, char const*)>
c001cce2:	83 c4 10             	add    esp,0x10
c001cce5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cce9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001cced:	83 f0 01             	xor    eax,0x1
c001ccf0:	88 c2                	mov    dl,al
c001ccf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ccf6:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001ccfc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001cd01:	83 ec 08             	sub    esp,0x8
c001cd04:	50                   	push   eax
c001cd05:	68 0c ab 02 c0       	push   0xc002ab0c
c001cd0a:	e8 70 5a ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001cd0f:	83 c4 10             	add    esp,0x10
c001cd12:	90                   	nop
c001cd13:	83 c4 14             	add    esp,0x14
c001cd16:	5b                   	pop    ebx
c001cd17:	5e                   	pop    esi
c001cd18:	c3                   	ret    
c001cd19:	90                   	nop

c001cd1a <Process::Process(bool, char const*, Process*, char**)>:
c001cd1a:	56                   	push   esi
c001cd1b:	53                   	push   ebx
c001cd1c:	83 ec 24             	sub    esp,0x24
c001cd1f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cd23:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cd27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cd2b:	05 0c 02 00 00       	add    eax,0x20c
c001cd30:	bb 07 00 00 00       	mov    ebx,0x7
c001cd35:	89 c6                	mov    esi,eax
c001cd37:	85 db                	test   ebx,ebx
c001cd39:	78 12                	js     c001cd4d <Process::Process(bool, char const*, Process*, char**)+0x33>
c001cd3b:	83 ec 0c             	sub    esp,0xc
c001cd3e:	56                   	push   esi
c001cd3f:	e8 be aa 00 00       	call   c0027802 <ThreadControlBlock::ThreadControlBlock()>
c001cd44:	83 c4 10             	add    esp,0x10
c001cd47:	83 c6 63             	add    esi,0x63
c001cd4a:	4b                   	dec    ebx
c001cd4b:	eb ea                	jmp    c001cd37 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001cd4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cd51:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001cd58:	83 ec 0c             	sub    esp,0xc
c001cd5b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd5f:	e8 be c9 ff ff       	call   c0019722 <Krnl::newProcessEnv(Process*)>
c001cd64:	83 c4 10             	add    esp,0x10
c001cd67:	89 c2                	mov    edx,eax
c001cd69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cd6d:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001cd73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cd77:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001cd80:	a1 70 c1 02 c0       	mov    eax,ds:0xc002c170
c001cd85:	8d 50 01             	lea    edx,[eax+0x1]
c001cd88:	89 15 70 c1 02 c0    	mov    DWORD PTR ds:0xc002c170,edx
c001cd8e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cd92:	89 02                	mov    DWORD PTR [edx],eax
c001cd94:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001cd9c:	83 ec 0c             	sub    esp,0xc
c001cd9f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cda3:	e8 32 27 ff ff       	call   c000f4da <malloc>
c001cda8:	83 c4 10             	add    esp,0x10
c001cdab:	89 c3                	mov    ebx,eax
c001cdad:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cdb2:	83 ec 08             	sub    esp,0x8
c001cdb5:	50                   	push   eax
c001cdb6:	53                   	push   ebx
c001cdb7:	e8 46 55 ff ff       	call   c0012302 <VAS::VAS(bool)>
c001cdbc:	83 c4 10             	add    esp,0x10
c001cdbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cdc3:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001cdc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cdcd:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001cdd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cddb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cddf:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001cde5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cde9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cdef:	85 c0                	test   eax,eax
c001cdf1:	74 42                	je     c001ce35 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001cdf3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cdf7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cdfd:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ce03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ce07:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001ce0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ce11:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ce17:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001ce1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ce21:	05 0c 01 00 00       	add    eax,0x10c
c001ce26:	83 ec 08             	sub    esp,0x8
c001ce29:	52                   	push   edx
c001ce2a:	50                   	push   eax
c001ce2b:	e8 fa 38 fe ff       	call   c000072a <strcpy>
c001ce30:	83 c4 10             	add    esp,0x10
c001ce33:	eb 63                	jmp    c001ce98 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001ce35:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001ce3d:	83 ec 0c             	sub    esp,0xc
c001ce40:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ce44:	e8 91 26 ff ff       	call   c000f4da <malloc>
c001ce49:	83 c4 10             	add    esp,0x10
c001ce4c:	89 c3                	mov    ebx,eax
c001ce4e:	83 ec 08             	sub    esp,0x8
c001ce51:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ce55:	53                   	push   ebx
c001ce56:	e8 71 3f ff ff       	call   c0010dcc <VgaText::VgaText(char const*)>
c001ce5b:	83 c4 10             	add    esp,0x10
c001ce5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ce62:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001ce68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ce6c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ce72:	83 ec 0c             	sub    esp,0xc
c001ce75:	50                   	push   eax
c001ce76:	e8 44 33 ff ff       	call   c00101bf <addToTerminalCycle(VgaText*)>
c001ce7b:	83 c4 10             	add    esp,0x10
c001ce7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ce82:	05 0c 01 00 00       	add    eax,0x10c
c001ce87:	83 ec 08             	sub    esp,0x8
c001ce8a:	68 10 aa 02 c0       	push   0xc002aa10
c001ce8f:	50                   	push   eax
c001ce90:	e8 95 38 fe ff       	call   c000072a <strcpy>
c001ce95:	83 c4 10             	add    esp,0x10
c001ce98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ce9c:	83 c0 0c             	add    eax,0xc
c001ce9f:	83 ec 08             	sub    esp,0x8
c001cea2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001cea6:	50                   	push   eax
c001cea7:	e8 7e 38 fe ff       	call   c000072a <strcpy>
c001ceac:	83 c4 10             	add    esp,0x10
c001ceaf:	83 ec 08             	sub    esp,0x8
c001ceb2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ceb6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ceba:	e8 1d fc ff ff       	call   c001cadc <Process::addArgs(char**)>
c001cebf:	83 c4 10             	add    esp,0x10
c001cec2:	90                   	nop
c001cec3:	83 c4 24             	add    esp,0x24
c001cec6:	5b                   	pop    ebx
c001cec7:	5e                   	pop    esi
c001cec8:	c3                   	ret    

c001cec9 <disableIRQs()>:
c001cec9:	fa                   	cli    
c001ceca:	ff 05 0c e1 02 c0    	inc    DWORD PTR ds:0xc002e10c
c001ced0:	c3                   	ret    

c001ced1 <getIRQNestingLevel()>:
c001ced1:	a1 0c e1 02 c0       	mov    eax,ds:0xc002e10c
c001ced6:	c3                   	ret    

c001ced7 <enableIRQs()>:
c001ced7:	a1 0c e1 02 c0       	mov    eax,ds:0xc002e10c
c001cedc:	48                   	dec    eax
c001cedd:	a3 0c e1 02 c0       	mov    ds:0xc002e10c,eax
c001cee2:	75 01                	jne    c001cee5 <enableIRQs()+0xe>
c001cee4:	fb                   	sti    
c001cee5:	c3                   	ret    

c001cee6 <lockScheduler()>:
c001cee6:	eb e1                	jmp    c001cec9 <disableIRQs()>

c001cee8 <unlockScheduler()>:
c001cee8:	eb ed                	jmp    c001ced7 <enableIRQs()>

c001ceea <userModeEntryPoint(void*)>:
c001ceea:	83 ec 0c             	sub    esp,0xc
c001ceed:	e8 f6 ff ff ff       	call   c001cee8 <unlockScheduler()>
c001cef2:	fb                   	sti    
c001cef3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cef8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cefb:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001cf01:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cf05:	83 c4 0c             	add    esp,0xc
c001cf08:	e9 d2 33 fe ff       	jmp    c00002df <goToUsermode>

c001cf0d <lockStuff()>:
c001cf0d:	e8 b7 ff ff ff       	call   c001cec9 <disableIRQs()>
c001cf12:	ff 05 08 e1 02 c0    	inc    DWORD PTR ds:0xc002e108
c001cf18:	c3                   	ret    

c001cf19 <taskStartupFunction>:
c001cf19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cf1e:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001cf21:	c3                   	ret    

c001cf22 <updateTimeUsed()>:
c001cf22:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c001cf27:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cf2d:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001cf34:	74 50                	je     c001cf86 <updateTimeUsed()+0x64>
c001cf36:	57                   	push   edi
c001cf37:	56                   	push   esi
c001cf38:	53                   	push   ebx
c001cf39:	0f 31                	rdtsc  
c001cf3b:	89 c1                	mov    ecx,eax
c001cf3d:	a3 48 e1 02 c0       	mov    ds:0xc002e148,eax
c001cf42:	2b 0d 38 e1 02 c0    	sub    ecx,DWORD PTR ds:0xc002e138
c001cf48:	89 d3                	mov    ebx,edx
c001cf4a:	89 0d 40 e1 02 c0    	mov    DWORD PTR ds:0xc002e140,ecx
c001cf50:	1b 1d 3c e1 02 c0    	sbb    ebx,DWORD PTR ds:0xc002e13c
c001cf56:	a3 38 e1 02 c0       	mov    ds:0xc002e138,eax
c001cf5b:	89 1d 44 e1 02 c0    	mov    DWORD PTR ds:0xc002e144,ebx
c001cf61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cf66:	89 15 4c e1 02 c0    	mov    DWORD PTR ds:0xc002e14c,edx
c001cf6c:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001cf6f:	89 15 3c e1 02 c0    	mov    DWORD PTR ds:0xc002e13c,edx
c001cf75:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001cf78:	01 f1                	add    ecx,esi
c001cf7a:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001cf7d:	11 fb                	adc    ebx,edi
c001cf7f:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001cf82:	5b                   	pop    ebx
c001cf83:	5e                   	pop    esi
c001cf84:	5f                   	pop    edi
c001cf85:	c3                   	ret    
c001cf86:	c3                   	ret    

c001cf87 <switchToThread(ThreadControlBlock*)>:
c001cf87:	53                   	push   ebx
c001cf88:	83 ec 08             	sub    esp,0x8
c001cf8b:	a1 08 e1 02 c0       	mov    eax,ds:0xc002e108
c001cf90:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cf94:	85 c0                	test   eax,eax
c001cf96:	75 30                	jne    c001cfc8 <switchToThread(ThreadControlBlock*)+0x41>
c001cf98:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001cf9b:	3c ff                	cmp    al,0xff
c001cf9d:	74 25                	je     c001cfc4 <switchToThread(ThreadControlBlock*)+0x3d>
c001cf9f:	0f b6 d0             	movzx  edx,al
c001cfa2:	b8 84 03 00 00       	mov    eax,0x384
c001cfa7:	29 d0                	sub    eax,edx
c001cfa9:	c1 e0 10             	shl    eax,0x10
c001cfac:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001cfaf:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001cfb2:	e8 6b ff ff ff       	call   c001cf22 <updateTimeUsed()>
c001cfb7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001cfbb:	83 c4 08             	add    esp,0x8
c001cfbe:	5b                   	pop    ebx
c001cfbf:	e9 53 33 fe ff       	jmp    c0000317 <switchToThreadASM>
c001cfc4:	31 c0                	xor    eax,eax
c001cfc6:	eb e7                	jmp    c001cfaf <switchToThread(ThreadControlBlock*)+0x28>
c001cfc8:	c7 05 04 e1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002e104,0x1
c001cfd2:	83 c4 08             	add    esp,0x8
c001cfd5:	5b                   	pop    ebx
c001cfd6:	c3                   	ret    
c001cfd7:	90                   	nop

c001cfd8 <Semaphore::Semaphore(int)>:
c001cfd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cfdc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cfe0:	89 10                	mov    DWORD PTR [eax],edx
c001cfe2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cfe6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001cfed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cff1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cff8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cffc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d003:	90                   	nop
c001d004:	c3                   	ret    
c001d005:	90                   	nop

c001d006 <Mutex::Mutex()>:
c001d006:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d00a:	6a 01                	push   0x1
c001d00c:	50                   	push   eax
c001d00d:	e8 c6 ff ff ff       	call   c001cfd8 <Semaphore::Semaphore(int)>
c001d012:	83 c4 08             	add    esp,0x8
c001d015:	90                   	nop
c001d016:	c3                   	ret    
c001d017:	90                   	nop

c001d018 <Process::createThread(void (*)(void*), void*, int)>:
c001d018:	55                   	push   ebp
c001d019:	31 c9                	xor    ecx,ecx
c001d01b:	57                   	push   edi
c001d01c:	56                   	push   esi
c001d01d:	53                   	push   ebx
c001d01e:	83 ec 1c             	sub    esp,0x1c
c001d021:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d025:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d02c:	89 f2                	mov    edx,esi
c001d02e:	0f b7 c2             	movzx  eax,dx
c001d031:	83 e2 01             	and    edx,0x1
c001d034:	74 14                	je     c001d04a <Process::createThread(void (*)(void*), void*, int)+0x32>
c001d036:	d1 f8                	sar    eax,1
c001d038:	41                   	inc    ecx
c001d039:	89 c2                	mov    edx,eax
c001d03b:	83 f9 10             	cmp    ecx,0x10
c001d03e:	75 ee                	jne    c001d02e <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d040:	83 c4 1c             	add    esp,0x1c
c001d043:	31 c0                	xor    eax,eax
c001d045:	5b                   	pop    ebx
c001d046:	5e                   	pop    esi
c001d047:	5f                   	pop    edi
c001d048:	5d                   	pop    ebp
c001d049:	c3                   	ret    
c001d04a:	83 ec 08             	sub    esp,0x8
c001d04d:	b8 01 00 00 00       	mov    eax,0x1
c001d052:	d3 e0                	shl    eax,cl
c001d054:	09 c6                	or     esi,eax
c001d056:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d05c:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d063:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001d066:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d069:	01 ce                	add    esi,ecx
c001d06b:	89 f0                	mov    eax,esi
c001d06d:	c1 e0 05             	shl    eax,0x5
c001d070:	01 c6                	add    esi,eax
c001d072:	8d 04 33             	lea    eax,[ebx+esi*1]
c001d075:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001d07b:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d081:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001d085:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d08b:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001d091:	89 ca                	mov    edx,ecx
c001d093:	f7 da                	neg    edx
c001d095:	c1 e2 15             	shl    edx,0x15
c001d098:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001d09e:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001d0a4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001d0a8:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d0b2:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d0b8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d0bc:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001d0c2:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d0cc:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d0d6:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001d0dd:	50                   	push   eax
c001d0de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d0e2:	68 28 e1 02 c0       	push   0xc002e128
c001d0e7:	e8 a4 a5 00 00       	call   c0027690 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d0ec:	83 c4 10             	add    esp,0x10
c001d0ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0f3:	83 c4 1c             	add    esp,0x1c
c001d0f6:	5b                   	pop    ebx
c001d0f7:	5e                   	pop    esi
c001d0f8:	5f                   	pop    edi
c001d0f9:	5d                   	pop    ebp
c001d0fa:	c3                   	ret    
c001d0fb:	90                   	nop

c001d0fc <Process::createUserThread()>:
c001d0fc:	83 ec 0c             	sub    esp,0xc
c001d0ff:	68 80 00 00 00       	push   0x80
c001d104:	6a 00                	push   0x0
c001d106:	68 ea ce 01 c0       	push   0xc001ceea
c001d10b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d10f:	e8 04 ff ff ff       	call   c001d018 <Process::createThread(void (*)(void*), void*, int)>
c001d114:	83 c4 1c             	add    esp,0x1c
c001d117:	c3                   	ret    

c001d118 <setupMultitasking(void (*)())>:
c001d118:	56                   	push   esi
c001d119:	53                   	push   ebx
c001d11a:	53                   	push   ebx
c001d11b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d11f:	eb 10                	jmp    c001d131 <setupMultitasking(void (*)())+0x19>
c001d121:	83 ec 0c             	sub    esp,0xc
c001d124:	68 28 e1 02 c0       	push   0xc002e128
c001d129:	e8 b4 a4 00 00       	call   c00275e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d12e:	83 c4 10             	add    esp,0x10
c001d131:	83 ec 0c             	sub    esp,0xc
c001d134:	68 28 e1 02 c0       	push   0xc002e128
c001d139:	e8 88 a4 00 00       	call   c00275c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d13e:	83 c4 10             	add    esp,0x10
c001d141:	84 c0                	test   al,al
c001d143:	74 dc                	je     c001d121 <setupMultitasking(void (*)())+0x9>
c001d145:	83 ec 0c             	sub    esp,0xc
c001d148:	68 3f 07 00 00       	push   0x73f
c001d14d:	e8 88 23 ff ff       	call   c000f4da <malloc>
c001d152:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d159:	89 c3                	mov    ebx,eax
c001d15b:	6a 00                	push   0x0
c001d15d:	68 14 aa 02 c0       	push   0xc002aa14
c001d162:	6a 01                	push   0x1
c001d164:	50                   	push   eax
c001d165:	e8 b0 fb ff ff       	call   c001cd1a <Process::Process(bool, char const*, Process*, char**)>
c001d16a:	83 c4 18             	add    esp,0x18
c001d16d:	89 1d 34 e1 02 c0    	mov    DWORD PTR ds:0xc002e134,ebx
c001d173:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d179:	68 34 ab 02 c0       	push   0xc002ab34
c001d17e:	e8 fc 55 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001d183:	58                   	pop    eax
c001d184:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d18a:	e8 b2 37 ff ff       	call   c0010941 <setActiveTerminal(VgaText*)>
c001d18f:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d197:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d19d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d1a0:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d1aa:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d1b0:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d1b6:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d1c0:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d1ca:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d1d4:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d1da:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d1e0:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d1ea:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d1f0:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d1fa:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d200:	5a                   	pop    edx
c001d201:	59                   	pop    ecx
c001d202:	68 10 aa 02 c0       	push   0xc002aa10
c001d207:	50                   	push   eax
c001d208:	e8 1d 35 fe ff       	call   c000072a <strcpy>
c001d20d:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d214:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d218:	83 c4 14             	add    esp,0x14
c001d21b:	5b                   	pop    ebx
c001d21c:	5e                   	pop    esi
c001d21d:	e9 e7 30 fe ff       	jmp    c0000309 <switchToThreadASMFirstTime>

c001d222 <schedule()>:
c001d222:	a1 08 e1 02 c0       	mov    eax,ds:0xc002e108
c001d227:	85 c0                	test   eax,eax
c001d229:	74 0b                	je     c001d236 <schedule()+0x14>
c001d22b:	c7 05 04 e1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002e104,0x1
c001d235:	c3                   	ret    
c001d236:	53                   	push   ebx
c001d237:	83 ec 14             	sub    esp,0x14
c001d23a:	68 28 e1 02 c0       	push   0xc002e128
c001d23f:	e8 82 a3 00 00       	call   c00275c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d244:	83 c4 10             	add    esp,0x10
c001d247:	84 c0                	test   al,al
c001d249:	75 38                	jne    c001d283 <schedule()+0x61>
c001d24b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d250:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d253:	4a                   	dec    edx
c001d254:	74 32                	je     c001d288 <schedule()+0x66>
c001d256:	83 ec 0c             	sub    esp,0xc
c001d259:	68 28 e1 02 c0       	push   0xc002e128
c001d25e:	e8 5b a3 00 00       	call   c00275be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d263:	c7 04 24 28 e1 02 c0 	mov    DWORD PTR [esp],0xc002e128
c001d26a:	89 c3                	mov    ebx,eax
c001d26c:	e8 71 a3 00 00       	call   c00275e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d271:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d278:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d27b:	e8 07 fd ff ff       	call   c001cf87 <switchToThread(ThreadControlBlock*)>
c001d280:	83 c4 10             	add    esp,0x10
c001d283:	83 c4 08             	add    esp,0x8
c001d286:	5b                   	pop    ebx
c001d287:	c3                   	ret    
c001d288:	83 ec 08             	sub    esp,0x8
c001d28b:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d292:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d298:	68 28 e1 02 c0       	push   0xc002e128
c001d29d:	e8 ee a3 00 00       	call   c0027690 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d2a2:	83 c4 10             	add    esp,0x10
c001d2a5:	eb af                	jmp    c001d256 <schedule()+0x34>

c001d2a7 <unlockStuff()>:
c001d2a7:	a1 08 e1 02 c0       	mov    eax,ds:0xc002e108
c001d2ac:	48                   	dec    eax
c001d2ad:	a3 08 e1 02 c0       	mov    ds:0xc002e108,eax
c001d2b2:	75 09                	jne    c001d2bd <unlockStuff()+0x16>
c001d2b4:	a1 04 e1 02 c0       	mov    eax,ds:0xc002e104
c001d2b9:	85 c0                	test   eax,eax
c001d2bb:	75 05                	jne    c001d2c2 <unlockStuff()+0x1b>
c001d2bd:	e9 15 fc ff ff       	jmp    c001ced7 <enableIRQs()>
c001d2c2:	83 ec 0c             	sub    esp,0xc
c001d2c5:	c7 05 04 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e104,0x0
c001d2cf:	e8 4e ff ff ff       	call   c001d222 <schedule()>
c001d2d4:	83 c4 0c             	add    esp,0xc
c001d2d7:	e9 fb fb ff ff       	jmp    c001ced7 <enableIRQs()>

c001d2dc <Semaphore::tryAcquire()>:
c001d2dc:	83 ec 0c             	sub    esp,0xc
c001d2df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2e3:	e8 25 fc ff ff       	call   c001cf0d <lockStuff()>
c001d2e8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d2eb:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d2ed:	7c 0b                	jl     c001d2fa <Semaphore::tryAcquire()+0x1e>
c001d2ef:	e8 b3 ff ff ff       	call   c001d2a7 <unlockStuff()>
c001d2f4:	31 c0                	xor    eax,eax
c001d2f6:	83 c4 0c             	add    esp,0xc
c001d2f9:	c3                   	ret    
c001d2fa:	42                   	inc    edx
c001d2fb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d2fe:	e8 a4 ff ff ff       	call   c001d2a7 <unlockStuff()>
c001d303:	b0 01                	mov    al,0x1
c001d305:	83 c4 0c             	add    esp,0xc
c001d308:	c3                   	ret    
c001d309:	90                   	nop

c001d30a <Semaphore::assertLocked(char const*)>:
c001d30a:	83 ec 0c             	sub    esp,0xc
c001d30d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d311:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d315:	e8 f3 fb ff ff       	call   c001cf0d <lockStuff()>
c001d31a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d31c:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001d31f:	7c 05                	jl     c001d326 <Semaphore::assertLocked(char const*)+0x1c>
c001d321:	83 c4 0c             	add    esp,0xc
c001d324:	eb 81                	jmp    c001d2a7 <unlockStuff()>
c001d326:	83 ec 0c             	sub    esp,0xc
c001d329:	52                   	push   edx
c001d32a:	e8 a2 c5 ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c001d32f:	83 c4 10             	add    esp,0x10
c001d332:	83 c4 0c             	add    esp,0xc
c001d335:	e9 6d ff ff ff       	jmp    c001d2a7 <unlockStuff()>

c001d33a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001d33a:	83 ec 0c             	sub    esp,0xc
c001d33d:	e8 8f fb ff ff       	call   c001ced1 <getIRQNestingLevel()>
c001d342:	83 ec 08             	sub    esp,0x8
c001d345:	50                   	push   eax
c001d346:	68 68 ab 02 c0       	push   0xc002ab68
c001d34b:	e8 2f 54 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001d350:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d354:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d359:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d35c:	e8 c1 fe ff ff       	call   c001d222 <schedule()>
c001d361:	e8 82 fb ff ff       	call   c001cee8 <unlockScheduler()>
c001d366:	e8 66 fb ff ff       	call   c001ced1 <getIRQNestingLevel()>
c001d36b:	5a                   	pop    edx
c001d36c:	59                   	pop    ecx
c001d36d:	50                   	push   eax
c001d36e:	68 9c ab 02 c0       	push   0xc002ab9c
c001d373:	e8 07 54 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001d378:	83 c4 1c             	add    esp,0x1c
c001d37b:	c3                   	ret    

c001d37c <blockTask(TaskState)>:
c001d37c:	83 ec 0c             	sub    esp,0xc
c001d37f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d383:	e8 5e fb ff ff       	call   c001cee6 <lockScheduler()>
c001d388:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d38d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d390:	e8 8d fe ff ff       	call   c001d222 <schedule()>
c001d395:	83 c4 0c             	add    esp,0xc
c001d398:	e9 4b fb ff ff       	jmp    c001cee8 <unlockScheduler()>

c001d39d <waitTask(int, int*, int)>:
c001d39d:	83 ec 18             	sub    esp,0x18
c001d3a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d3a5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d3a9:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001d3ac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d3b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d3b5:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001d3b8:	6a 07                	push   0x7
c001d3ba:	e8 bd ff ff ff       	call   c001d37c <blockTask(TaskState)>
c001d3bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d3c4:	83 c4 10             	add    esp,0x10
c001d3c7:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001d3ca:	85 d2                	test   edx,edx
c001d3cc:	74 0a                	je     c001d3d8 <waitTask(int, int*, int)+0x3b>
c001d3ce:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001d3d1:	89 02                	mov    DWORD PTR [edx],eax
c001d3d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d3d8:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001d3db:	83 c4 0c             	add    esp,0xc
c001d3de:	c3                   	ret    

c001d3df <nanoSleepUntil(unsigned long long)>:
c001d3df:	83 ec 0c             	sub    esp,0xc
c001d3e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d3ea:	3b 05 70 d2 02 c0    	cmp    eax,DWORD PTR ds:0xc002d270
c001d3f0:	89 d1                	mov    ecx,edx
c001d3f2:	1b 0d 74 d2 02 c0    	sbb    ecx,DWORD PTR ds:0xc002d274
c001d3f8:	73 04                	jae    c001d3fe <nanoSleepUntil(unsigned long long)+0x1f>
c001d3fa:	83 c4 0c             	add    esp,0xc
c001d3fd:	c3                   	ret    
c001d3fe:	e8 0a fb ff ff       	call   c001cf0d <lockStuff()>
c001d403:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d409:	83 ec 08             	sub    esp,0x8
c001d40c:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001d40f:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001d412:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d418:	68 1c e1 02 c0       	push   0xc002e11c
c001d41d:	e8 6e a2 00 00       	call   c0027690 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d422:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001d429:	e8 4e ff ff ff       	call   c001d37c <blockTask(TaskState)>
c001d42e:	83 c4 1c             	add    esp,0x1c
c001d431:	e9 71 fe ff ff       	jmp    c001d2a7 <unlockStuff()>

c001d436 <nanoSleep(unsigned long long)>:
c001d436:	a1 70 d2 02 c0       	mov    eax,ds:0xc002d270
c001d43b:	8b 15 74 d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d274
c001d441:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001d445:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001d449:	eb 94                	jmp    c001d3df <nanoSleepUntil(unsigned long long)>

c001d44b <sleep(unsigned long long)>:
c001d44b:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001d453:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001d458:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001d45c:	01 ca                	add    edx,ecx
c001d45e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d462:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d466:	eb ce                	jmp    c001d436 <nanoSleep(unsigned long long)>

c001d468 <Semaphore::acquire()>:
c001d468:	83 ec 0c             	sub    esp,0xc
c001d46b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d46f:	e8 99 fa ff ff       	call   c001cf0d <lockStuff()>
c001d474:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d477:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d479:	7d 0c                	jge    c001d487 <Semaphore::acquire()+0x1f>
c001d47b:	42                   	inc    edx
c001d47c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d47f:	83 c4 0c             	add    esp,0xc
c001d482:	e9 20 fe ff ff       	jmp    c001d2a7 <unlockStuff()>
c001d487:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d48d:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001d494:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d497:	85 d2                	test   edx,edx
c001d499:	74 2a                	je     c001d4c5 <Semaphore::acquire()+0x5d>
c001d49b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001d49e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d4a4:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001d4a7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d4ad:	83 ec 0c             	sub    esp,0xc
c001d4b0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d4b3:	6a 05                	push   0x5
c001d4b5:	e8 c2 fe ff ff       	call   c001d37c <blockTask(TaskState)>
c001d4ba:	83 c4 10             	add    esp,0x10
c001d4bd:	83 c4 0c             	add    esp,0xc
c001d4c0:	e9 e2 fd ff ff       	jmp    c001d2a7 <unlockStuff()>
c001d4c5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d4cb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d4ce:	eb d7                	jmp    c001d4a7 <Semaphore::acquire()+0x3f>

c001d4d0 <taskReturned>:
c001d4d0:	83 ec 18             	sub    esp,0x18
c001d4d3:	68 d0 ab 02 c0       	push   0xc002abd0
c001d4d8:	e8 f4 c3 ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c001d4dd:	83 c4 10             	add    esp,0x10
c001d4e0:	83 ec 0c             	sub    esp,0xc
c001d4e3:	6a 02                	push   0x2
c001d4e5:	e8 92 fe ff ff       	call   c001d37c <blockTask(TaskState)>
c001d4ea:	e8 f7 f9 ff ff       	call   c001cee6 <lockScheduler()>
c001d4ef:	e8 2e fd ff ff       	call   c001d222 <schedule()>
c001d4f4:	e8 ef f9 ff ff       	call   c001cee8 <unlockScheduler()>
c001d4f9:	83 c4 10             	add    esp,0x10
c001d4fc:	eb e2                	jmp    c001d4e0 <taskReturned+0x10>

c001d4fe <unblockTask(ThreadControlBlock*)>:
c001d4fe:	53                   	push   ebx
c001d4ff:	83 ec 08             	sub    esp,0x8
c001d502:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d506:	e8 db f9 ff ff       	call   c001cee6 <lockScheduler()>
c001d50b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d50e:	85 c0                	test   eax,eax
c001d510:	74 5c                	je     c001d56e <unblockTask(ThreadControlBlock*)+0x70>
c001d512:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d515:	48                   	dec    eax
c001d516:	74 31                	je     c001d549 <unblockTask(ThreadControlBlock*)+0x4b>
c001d518:	83 ec 0c             	sub    esp,0xc
c001d51b:	68 28 e1 02 c0       	push   0xc002e128
c001d520:	e8 99 a0 00 00       	call   c00275be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d525:	83 c4 10             	add    esp,0x10
c001d528:	85 c0                	test   eax,eax
c001d52a:	75 17                	jne    c001d543 <unblockTask(ThreadControlBlock*)+0x45>
c001d52c:	eb 65                	jmp    c001d593 <unblockTask(ThreadControlBlock*)+0x95>
c001d52e:	83 ec 08             	sub    esp,0x8
c001d531:	50                   	push   eax
c001d532:	68 28 e1 02 c0       	push   0xc002e128
c001d537:	e8 5c a3 00 00       	call   c0027898 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001d53c:	83 c4 10             	add    esp,0x10
c001d53f:	85 c0                	test   eax,eax
c001d541:	74 50                	je     c001d593 <unblockTask(ThreadControlBlock*)+0x95>
c001d543:	39 c3                	cmp    ebx,eax
c001d545:	75 e7                	jne    c001d52e <unblockTask(ThreadControlBlock*)+0x30>
c001d547:	eb 1c                	jmp    c001d565 <unblockTask(ThreadControlBlock*)+0x67>
c001d549:	83 ec 0c             	sub    esp,0xc
c001d54c:	68 c0 ac 02 c0       	push   0xc002acc0
c001d551:	e8 29 52 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001d556:	c7 04 24 4c ac 02 c0 	mov    DWORD PTR [esp],0xc002ac4c
c001d55d:	e8 1d 52 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001d562:	83 c4 10             	add    esp,0x10
c001d565:	83 c4 08             	add    esp,0x8
c001d568:	5b                   	pop    ebx
c001d569:	e9 7a f9 ff ff       	jmp    c001cee8 <unlockScheduler()>
c001d56e:	83 ec 0c             	sub    esp,0xc
c001d571:	68 04 ac 02 c0       	push   0xc002ac04
c001d576:	e8 04 52 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001d57b:	c7 04 24 4c ac 02 c0 	mov    DWORD PTR [esp],0xc002ac4c
c001d582:	e8 f8 51 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001d587:	83 c4 10             	add    esp,0x10
c001d58a:	83 c4 08             	add    esp,0x8
c001d58d:	5b                   	pop    ebx
c001d58e:	e9 55 f9 ff ff       	jmp    c001cee8 <unlockScheduler()>
c001d593:	83 ec 08             	sub    esp,0x8
c001d596:	53                   	push   ebx
c001d597:	68 28 e1 02 c0       	push   0xc002e128
c001d59c:	e8 ef a0 00 00       	call   c0027690 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d5a1:	83 c4 10             	add    esp,0x10
c001d5a4:	83 c4 08             	add    esp,0x8
c001d5a7:	5b                   	pop    ebx
c001d5a8:	e9 3b f9 ff ff       	jmp    c001cee8 <unlockScheduler()>

c001d5ad <cleanupTerminatedTask(ThreadControlBlock*)>:
c001d5ad:	55                   	push   ebp
c001d5ae:	57                   	push   edi
c001d5af:	56                   	push   esi
c001d5b0:	53                   	push   ebx
c001d5b1:	83 ec 1c             	sub    esp,0x1c
c001d5b4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d5b8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d5bb:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001d5c1:	85 ff                	test   edi,edi
c001d5c3:	7e 20                	jle    c001d5e5 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001d5c5:	31 f6                	xor    esi,esi
c001d5c7:	83 ec 0c             	sub    esp,0xc
c001d5ca:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001d5d1:	46                   	inc    esi
c001d5d2:	e8 13 1f ff ff       	call   c000f4ea <free>
c001d5d7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d5da:	83 c4 10             	add    esp,0x10
c001d5dd:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001d5e3:	7f e2                	jg     c001d5c7 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001d5e5:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d5ef:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001d5f4:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001d5f7:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001d5fa:	d3 c0                	rol    eax,cl
c001d5fc:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001d603:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d606:	89 f7                	mov    edi,esi
c001d608:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001d610:	0f 85 74 01 00 00    	jne    c001d78a <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001d616:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001d61c:	85 ed                	test   ebp,ebp
c001d61e:	74 1b                	je     c001d63b <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001d620:	83 ec 0c             	sub    esp,0xc
c001d623:	55                   	push   ebp
c001d624:	e8 15 c0 ff ff       	call   c001963e <EnvVarContainer::~EnvVarContainer()>
c001d629:	59                   	pop    ecx
c001d62a:	5e                   	pop    esi
c001d62b:	6a 0c                	push   0xc
c001d62d:	55                   	push   ebp
c001d62e:	e8 6c 50 ff ff       	call   c001269f <operator delete(void*, unsigned long)>
c001d633:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d636:	83 c4 10             	add    esp,0x10
c001d639:	89 f7                	mov    edi,esi
c001d63b:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d641:	85 c0                	test   eax,eax
c001d643:	0f 84 aa 00 00 00    	je     c001d6f3 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d649:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001d64c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d650:	31 c9                	xor    ecx,ecx
c001d652:	eb 10                	jmp    c001d664 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001d654:	41                   	inc    ecx
c001d655:	83 f9 10             	cmp    ecx,0x10
c001d658:	0f 84 95 00 00 00    	je     c001d6f3 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d65e:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d664:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001d66b:	d3 fa                	sar    edx,cl
c001d66d:	83 e2 01             	and    edx,0x1
c001d670:	74 e2                	je     c001d654 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d672:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d675:	01 ca                	add    edx,ecx
c001d677:	89 d5                	mov    ebp,edx
c001d679:	c1 e5 05             	shl    ebp,0x5
c001d67c:	01 ea                	add    edx,ebp
c001d67e:	01 d0                	add    eax,edx
c001d680:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001d686:	83 fd 07             	cmp    ebp,0x7
c001d689:	75 c9                	jne    c001d654 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d68b:	05 40 02 00 00       	add    eax,0x240
c001d690:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001d693:	83 fd ff             	cmp    ebp,0xffffffff
c001d696:	0f 8c 08 01 00 00    	jl     c001d7a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001d69c:	0f 84 b9 01 00 00    	je     c001d85b <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001d6a2:	85 ed                	test   ebp,ebp
c001d6a4:	0f 84 a0 01 00 00    	je     c001d84a <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001d6aa:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001d6ac:	75 a6                	jne    c001d654 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d6ae:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d6b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d6b8:	01 d0                	add    eax,edx
c001d6ba:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001d6be:	83 ec 0c             	sub    esp,0xc
c001d6c1:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001d6c7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d6ca:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d6d0:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001d6d7:	50                   	push   eax
c001d6d8:	e8 21 fe ff ff       	call   c001d4fe <unblockTask(ThreadControlBlock*)>
c001d6dd:	83 c4 10             	add    esp,0x10
c001d6e0:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d6e3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d6e7:	89 f7                	mov    edi,esi
c001d6e9:	41                   	inc    ecx
c001d6ea:	83 f9 10             	cmp    ecx,0x10
c001d6ed:	0f 85 6b ff ff ff    	jne    c001d65e <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001d6f3:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001d6f9:	85 c0                	test   eax,eax
c001d6fb:	74 5d                	je     c001d75a <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001d6fd:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001d703:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001d709:	74 4f                	je     c001d75a <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001d70b:	83 ec 0c             	sub    esp,0xc
c001d70e:	68 28 e1 02 c0       	push   0xc002e128
c001d713:	e8 a6 9e 00 00       	call   c00275be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d718:	c7 04 24 28 e1 02 c0 	mov    DWORD PTR [esp],0xc002e128
c001d71f:	89 c7                	mov    edi,eax
c001d721:	e8 a0 9e 00 00       	call   c00275c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d726:	83 c4 10             	add    esp,0x10
c001d729:	84 c0                	test   al,al
c001d72b:	0f 84 e4 00 00 00    	je     c001d815 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001d731:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d734:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d73a:	85 d2                	test   edx,edx
c001d73c:	74 0f                	je     c001d74d <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001d73e:	83 ec 0c             	sub    esp,0xc
c001d741:	8b 02                	mov    eax,DWORD PTR [edx]
c001d743:	52                   	push   edx
c001d744:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d747:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d74a:	83 c4 10             	add    esp,0x10
c001d74d:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001d757:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001d75a:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001d760:	85 db                	test   ebx,ebx
c001d762:	74 16                	je     c001d77a <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001d764:	83 ec 0c             	sub    esp,0xc
c001d767:	53                   	push   ebx
c001d768:	e8 81 45 ff ff       	call   c0011cee <VAS::~VAS()>
c001d76d:	58                   	pop    eax
c001d76e:	5a                   	pop    edx
c001d76f:	6a 10                	push   0x10
c001d771:	53                   	push   ebx
c001d772:	e8 28 4f ff ff       	call   c001269f <operator delete(void*, unsigned long)>
c001d777:	83 c4 10             	add    esp,0x10
c001d77a:	83 ec 0c             	sub    esp,0xc
c001d77d:	68 1b aa 02 c0       	push   0xc002aa1b
c001d782:	e8 f8 4f ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001d787:	83 c4 10             	add    esp,0x10
c001d78a:	83 ec 08             	sub    esp,0x8
c001d78d:	68 3f 07 00 00       	push   0x73f
c001d792:	68 29 aa 02 c0       	push   0xc002aa29
c001d797:	e8 e3 4f ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001d79c:	83 c4 2c             	add    esp,0x2c
c001d79f:	5b                   	pop    ebx
c001d7a0:	5e                   	pop    esi
c001d7a1:	5f                   	pop    edi
c001d7a2:	5d                   	pop    ebp
c001d7a3:	c3                   	ret    
c001d7a4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d7a8:	83 ec 0c             	sub    esp,0xc
c001d7ab:	68 04 ad 02 c0       	push   0xc002ad04
c001d7b0:	e8 1c c1 ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c001d7b5:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d7b8:	83 c4 10             	add    esp,0x10
c001d7bb:	89 f7                	mov    edi,esi
c001d7bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d7c1:	e9 8e fe ff ff       	jmp    c001d654 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d7c6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d7cc:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001d7d2:	75 1c                	jne    c001d7f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d7d4:	83 ec 0c             	sub    esp,0xc
c001d7d7:	68 6c ad 02 c0       	push   0xc002ad6c
c001d7dc:	e8 9e 4f ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001d7e1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001d7e8:	e8 8f fb ff ff       	call   c001d37c <blockTask(TaskState)>
c001d7ed:	83 c4 10             	add    esp,0x10
c001d7f0:	83 ec 08             	sub    esp,0x8
c001d7f3:	56                   	push   esi
c001d7f4:	68 28 e1 02 c0       	push   0xc002e128
c001d7f9:	e8 92 9e 00 00       	call   c0027690 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d7fe:	c7 04 24 28 e1 02 c0 	mov    DWORD PTR [esp],0xc002e128
c001d805:	e8 b4 9d 00 00       	call   c00275be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d80a:	83 c4 10             	add    esp,0x10
c001d80d:	39 f8                	cmp    eax,edi
c001d80f:	0f 84 1c ff ff ff    	je     c001d731 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001d815:	83 ec 0c             	sub    esp,0xc
c001d818:	68 28 e1 02 c0       	push   0xc002e128
c001d81d:	e8 9c 9d 00 00       	call   c00275be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d822:	c7 04 24 28 e1 02 c0 	mov    DWORD PTR [esp],0xc002e128
c001d829:	89 c6                	mov    esi,eax
c001d82b:	e8 b2 9d 00 00       	call   c00275e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d830:	83 c4 10             	add    esp,0x10
c001d833:	39 f3                	cmp    ebx,esi
c001d835:	74 b9                	je     c001d7f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d837:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001d83a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d83d:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001d843:	75 ab                	jne    c001d7f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d845:	e9 7c ff ff ff       	jmp    c001d7c6 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001d84a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d84e:	83 ec 0c             	sub    esp,0xc
c001d851:	68 38 ad 02 c0       	push   0xc002ad38
c001d856:	e9 55 ff ff ff       	jmp    c001d7b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001d85b:	8b 36                	mov    esi,DWORD PTR [esi]
c001d85d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d861:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001d864:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d867:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001d86d:	01 d7                	add    edi,edx
c001d86f:	89 f8                	mov    eax,edi
c001d871:	e9 44 fe ff ff       	jmp    c001d6ba <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001d876 <cleanerTaskFunction(void*)>:
c001d876:	53                   	push   ebx
c001d877:	83 ec 08             	sub    esp,0x8
c001d87a:	e8 69 f6 ff ff       	call   c001cee8 <unlockScheduler()>
c001d87f:	e8 62 f6 ff ff       	call   c001cee6 <lockScheduler()>
c001d884:	80 3d ec e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e0ec,0x0
c001d88b:	0f 85 8e 00 00 00    	jne    c001d91f <cleanerTaskFunction(void*)+0xa9>
c001d891:	83 ec 0c             	sub    esp,0xc
c001d894:	6a 02                	push   0x2
c001d896:	e8 9f fa ff ff       	call   c001d33a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001d89b:	83 c4 10             	add    esp,0x10
c001d89e:	c6 05 ec e0 02 c0 00 	mov    BYTE PTR ds:0xc002e0ec,0x0
c001d8a5:	e8 63 f6 ff ff       	call   c001cf0d <lockStuff()>
c001d8aa:	e8 37 f6 ff ff       	call   c001cee6 <lockScheduler()>
c001d8af:	83 ec 0c             	sub    esp,0xc
c001d8b2:	68 10 e1 02 c0       	push   0xc002e110
c001d8b7:	e8 0a 9d 00 00       	call   c00275c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d8bc:	83 c4 10             	add    esp,0x10
c001d8bf:	84 c0                	test   al,al
c001d8c1:	75 40                	jne    c001d903 <cleanerTaskFunction(void*)+0x8d>
c001d8c3:	83 ec 0c             	sub    esp,0xc
c001d8c6:	68 10 e1 02 c0       	push   0xc002e110
c001d8cb:	e8 ee 9c 00 00       	call   c00275be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d8d0:	c7 04 24 10 e1 02 c0 	mov    DWORD PTR [esp],0xc002e110
c001d8d7:	89 c3                	mov    ebx,eax
c001d8d9:	e8 04 9d 00 00       	call   c00275e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d8de:	c7 04 24 3f aa 02 c0 	mov    DWORD PTR [esp],0xc002aa3f
c001d8e5:	e8 95 4e ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001d8ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d8ed:	e8 bb fc ff ff       	call   c001d5ad <cleanupTerminatedTask(ThreadControlBlock*)>
c001d8f2:	c7 04 24 58 aa 02 c0 	mov    DWORD PTR [esp],0xc002aa58
c001d8f9:	e8 81 4e ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001d8fe:	83 c4 10             	add    esp,0x10
c001d901:	eb ac                	jmp    c001d8af <cleanerTaskFunction(void*)+0x39>
c001d903:	e8 e0 f5 ff ff       	call   c001cee8 <unlockScheduler()>
c001d908:	e8 9a f9 ff ff       	call   c001d2a7 <unlockStuff()>
c001d90d:	e8 d4 f5 ff ff       	call   c001cee6 <lockScheduler()>
c001d912:	80 3d ec e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e0ec,0x0
c001d919:	0f 84 72 ff ff ff    	je     c001d891 <cleanerTaskFunction(void*)+0x1b>
c001d91f:	e8 c4 f5 ff ff       	call   c001cee8 <unlockScheduler()>
c001d924:	e9 75 ff ff ff       	jmp    c001d89e <cleanerTaskFunction(void*)+0x28>

c001d929 <terminateTask(int)>:
c001d929:	83 ec 14             	sub    esp,0x14
c001d92c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d931:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d934:	83 c0 0c             	add    eax,0xc
c001d937:	50                   	push   eax
c001d938:	68 94 ad 02 c0       	push   0xc002ad94
c001d93d:	e8 3d 4e ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001d942:	e8 c6 f5 ff ff       	call   c001cf0d <lockStuff()>
c001d947:	e8 9a f5 ff ff       	call   c001cee6 <lockScheduler()>
c001d94c:	c7 04 24 6b aa 02 c0 	mov    DWORD PTR [esp],0xc002aa6b
c001d953:	e8 27 4e ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001d958:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d95c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d961:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001d964:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d969:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001d96c:	5a                   	pop    edx
c001d96d:	59                   	pop    ecx
c001d96e:	50                   	push   eax
c001d96f:	68 10 e1 02 c0       	push   0xc002e110
c001d974:	e8 17 9d 00 00       	call   c0027690 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d979:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d97e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001d985:	c7 04 24 85 aa 02 c0 	mov    DWORD PTR [esp],0xc002aa85
c001d98c:	e8 ee 4d ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001d991:	83 c4 10             	add    esp,0x10
c001d994:	a1 e8 e0 02 c0       	mov    eax,ds:0xc002e0e8
c001d999:	85 c0                	test   eax,eax
c001d99b:	74 5a                	je     c001d9f7 <terminateTask(int)+0xce>
c001d99d:	83 ec 0c             	sub    esp,0xc
c001d9a0:	68 9f aa 02 c0       	push   0xc002aa9f
c001d9a5:	e8 d5 4d ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001d9aa:	58                   	pop    eax
c001d9ab:	c6 05 ec e0 02 c0 01 	mov    BYTE PTR ds:0xc002e0ec,0x1
c001d9b2:	ff 35 e8 e0 02 c0    	push   DWORD PTR ds:0xc002e0e8
c001d9b8:	e8 41 fb ff ff       	call   c001d4fe <unblockTask(ThreadControlBlock*)>
c001d9bd:	c7 04 24 b9 aa 02 c0 	mov    DWORD PTR [esp],0xc002aab9
c001d9c4:	e8 b6 4d ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001d9c9:	83 c4 10             	add    esp,0x10
c001d9cc:	e8 17 f5 ff ff       	call   c001cee8 <unlockScheduler()>
c001d9d1:	e8 d1 f8 ff ff       	call   c001d2a7 <unlockStuff()>
c001d9d6:	83 ec 0c             	sub    esp,0xc
c001d9d9:	68 f1 aa 02 c0       	push   0xc002aaf1
c001d9de:	e8 9c 4d ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001d9e3:	83 c4 10             	add    esp,0x10
c001d9e6:	e8 fb f4 ff ff       	call   c001cee6 <lockScheduler()>
c001d9eb:	e8 32 f8 ff ff       	call   c001d222 <schedule()>
c001d9f0:	e8 f3 f4 ff ff       	call   c001cee8 <unlockScheduler()>
c001d9f5:	eb ef                	jmp    c001d9e6 <terminateTask(int)+0xbd>
c001d9f7:	83 ec 0c             	sub    esp,0xc
c001d9fa:	68 d3 aa 02 c0       	push   0xc002aad3
c001d9ff:	e8 7b 4d ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001da04:	83 c4 10             	add    esp,0x10
c001da07:	eb c3                	jmp    c001d9cc <terminateTask(int)+0xa3>

c001da09 <Thr::terminateFromIRQ(int)>:
c001da09:	83 ec 18             	sub    esp,0x18
c001da0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001da10:	e8 14 ff ff ff       	call   c001d929 <terminateTask(int)>
c001da15:	90                   	nop

c001da16 <Semaphore::release()>:
c001da16:	83 ec 0c             	sub    esp,0xc
c001da19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da1d:	e8 eb f4 ff ff       	call   c001cf0d <lockStuff()>
c001da22:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001da25:	85 d2                	test   edx,edx
c001da27:	74 1a                	je     c001da43 <Semaphore::release()+0x2d>
c001da29:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001da2c:	83 ec 0c             	sub    esp,0xc
c001da2f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001da32:	52                   	push   edx
c001da33:	e8 c6 fa ff ff       	call   c001d4fe <unblockTask(ThreadControlBlock*)>
c001da38:	83 c4 10             	add    esp,0x10
c001da3b:	83 c4 0c             	add    esp,0xc
c001da3e:	e9 64 f8 ff ff       	jmp    c001d2a7 <unlockStuff()>
c001da43:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001da46:	83 c4 0c             	add    esp,0xc
c001da49:	e9 59 f8 ff ff       	jmp    c001d2a7 <unlockStuff()>

c001da4e <__static_initialization_and_destruction_0(int, int)>:
c001da4e:	83 ec 0c             	sub    esp,0xc
c001da51:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001da56:	0f 85 88 00 00 00    	jne    c001dae4 <__static_initialization_and_destruction_0(int, int)+0x96>
c001da5c:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001da64:	75 7e                	jne    c001dae4 <__static_initialization_and_destruction_0(int, int)+0x96>
c001da66:	83 ec 0c             	sub    esp,0xc
c001da69:	68 28 e1 02 c0       	push   0xc002e128
c001da6e:	e8 cd 9d 00 00       	call   c0027840 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001da73:	83 c4 10             	add    esp,0x10
c001da76:	83 ec 04             	sub    esp,0x4
c001da79:	68 04 bb 02 c0       	push   0xc002bb04
c001da7e:	68 28 e1 02 c0       	push   0xc002e128
c001da83:	68 00 78 02 c0       	push   0xc0027800
c001da88:	e8 8c 4b ff ff       	call   c0012619 <__cxa_atexit>
c001da8d:	83 c4 10             	add    esp,0x10
c001da90:	83 ec 0c             	sub    esp,0xc
c001da93:	68 1c e1 02 c0       	push   0xc002e11c
c001da98:	e8 a3 9d 00 00       	call   c0027840 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001da9d:	83 c4 10             	add    esp,0x10
c001daa0:	83 ec 04             	sub    esp,0x4
c001daa3:	68 04 bb 02 c0       	push   0xc002bb04
c001daa8:	68 1c e1 02 c0       	push   0xc002e11c
c001daad:	68 00 78 02 c0       	push   0xc0027800
c001dab2:	e8 62 4b ff ff       	call   c0012619 <__cxa_atexit>
c001dab7:	83 c4 10             	add    esp,0x10
c001daba:	83 ec 0c             	sub    esp,0xc
c001dabd:	68 10 e1 02 c0       	push   0xc002e110
c001dac2:	e8 79 9d 00 00       	call   c0027840 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001dac7:	83 c4 10             	add    esp,0x10
c001daca:	83 ec 04             	sub    esp,0x4
c001dacd:	68 04 bb 02 c0       	push   0xc002bb04
c001dad2:	68 10 e1 02 c0       	push   0xc002e110
c001dad7:	68 00 78 02 c0       	push   0xc0027800
c001dadc:	e8 38 4b ff ff       	call   c0012619 <__cxa_atexit>
c001dae1:	83 c4 10             	add    esp,0x10
c001dae4:	90                   	nop
c001dae5:	83 c4 0c             	add    esp,0xc
c001dae8:	c3                   	ret    

c001dae9 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001dae9:	83 ec 0c             	sub    esp,0xc
c001daec:	83 ec 08             	sub    esp,0x8
c001daef:	68 ff ff 00 00       	push   0xffff
c001daf4:	6a 01                	push   0x1
c001daf6:	e8 53 ff ff ff       	call   c001da4e <__static_initialization_and_destruction_0(int, int)>
c001dafb:	83 c4 10             	add    esp,0x10
c001dafe:	83 c4 0c             	add    esp,0xc
c001db01:	c3                   	ret    

c001db02 <Vm::inbv(unsigned short)>:
c001db02:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001db06:	66 81 fa fe fe       	cmp    dx,0xfefe
c001db0b:	75 06                	jne    c001db13 <Vm::inbv(unsigned short)+0x11>
c001db0d:	a0 6c e1 02 c0       	mov    al,ds:0xc002e16c
c001db12:	c3                   	ret    
c001db13:	ec                   	in     al,dx
c001db14:	c3                   	ret    

c001db15 <Vm::outbv(unsigned short, unsigned char)>:
c001db15:	53                   	push   ebx
c001db16:	83 ec 08             	sub    esp,0x8
c001db19:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db1d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001db21:	66 81 fa fe fe       	cmp    dx,0xfefe
c001db26:	75 38                	jne    c001db60 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001db28:	0f b6 c3             	movzx  eax,bl
c001db2b:	51                   	push   ecx
c001db2c:	51                   	push   ecx
c001db2d:	50                   	push   eax
c001db2e:	68 b3 ad 02 c0       	push   0xc002adb3
c001db33:	e8 47 4c ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001db38:	8b 15 6c e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e16c
c001db3e:	83 c4 10             	add    esp,0x10
c001db41:	8d 42 01             	lea    eax,[edx+0x1]
c001db44:	88 9a 80 e1 02 c0    	mov    BYTE PTR [edx-0x3ffd1e80],bl
c001db4a:	a3 6c e1 02 c0       	mov    ds:0xc002e16c,eax
c001db4f:	83 f8 20             	cmp    eax,0x20
c001db52:	75 0f                	jne    c001db63 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001db54:	c7 05 6c e1 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002e16c,0x1f
c001db5e:	eb 03                	jmp    c001db63 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001db60:	88 d8                	mov    al,bl
c001db62:	ee                   	out    dx,al
c001db63:	83 c4 08             	add    esp,0x8
c001db66:	5b                   	pop    ebx
c001db67:	c3                   	ret    

c001db68 <Vm::realToLinear(unsigned short, unsigned short)>:
c001db68:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001db6d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001db72:	c1 e0 04             	shl    eax,0x4
c001db75:	01 d0                	add    eax,edx
c001db77:	c3                   	ret    

c001db78 <Vm::getSegment(unsigned int)>:
c001db78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db7c:	c1 e8 10             	shr    eax,0x10
c001db7f:	c3                   	ret    

c001db80 <Vm::getOffset(unsigned int)>:
c001db80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db84:	c3                   	ret    

c001db85 <Vm::mainloop2()>:
c001db85:	83 ec 0c             	sub    esp,0xc
c001db88:	e8 59 f3 ff ff       	call   c001cee6 <lockScheduler()>
c001db8d:	83 ec 0c             	sub    esp,0xc
c001db90:	c6 05 65 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e165,0x1
c001db97:	6a 02                	push   0x2
c001db99:	e8 9c f7 ff ff       	call   c001d33a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001db9e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dba3:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001dba7:	52                   	push   edx
c001dba8:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001dbac:	52                   	push   edx
c001dbad:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001dbb1:	52                   	push   edx
c001dbb2:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001dbb6:	50                   	push   eax
c001dbb7:	e8 f3 26 fe ff       	call   c00002af <goToVM86>
c001dbbc:	83 c4 2c             	add    esp,0x2c
c001dbbf:	c3                   	ret    

c001dbc0 <Vm::mainVm8086Loop(void*)>:
c001dbc0:	83 ec 0c             	sub    esp,0xc
c001dbc3:	e8 20 f3 ff ff       	call   c001cee8 <unlockScheduler()>
c001dbc8:	83 c4 0c             	add    esp,0xc
c001dbcb:	eb b8                	jmp    c001db85 <Vm::mainloop2()>

c001dbcd <Vm::mainloop3(unsigned long)>:
c001dbcd:	53                   	push   ebx
c001dbce:	83 ec 08             	sub    esp,0x8
c001dbd1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dbd5:	e8 0c f3 ff ff       	call   c001cee6 <lockScheduler()>
c001dbda:	83 ec 0c             	sub    esp,0xc
c001dbdd:	89 1d 60 e1 02 c0    	mov    DWORD PTR ds:0xc002e160,ebx
c001dbe3:	6a 02                	push   0x2
c001dbe5:	c6 05 64 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e164,0x1
c001dbec:	e8 49 f7 ff ff       	call   c001d33a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001dbf1:	83 c4 18             	add    esp,0x18
c001dbf4:	5b                   	pop    ebx
c001dbf5:	eb 8e                	jmp    c001db85 <Vm::mainloop2()>

c001dbf7 <Vm::initialise8086()>:
c001dbf7:	83 ec 0c             	sub    esp,0xc
c001dbfa:	68 80 00 00 00       	push   0x80
c001dbff:	6a 00                	push   0x0
c001dc01:	68 c0 db 01 c0       	push   0xc001dbc0
c001dc06:	ff 35 34 e1 02 c0    	push   DWORD PTR ds:0xc002e134
c001dc0c:	e8 07 f4 ff ff       	call   c001d018 <Process::createThread(void (*)(void*), void*, int)>
c001dc11:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001dc18:	a3 68 e1 02 c0       	mov    ds:0xc002e168,eax
c001dc1d:	68 00 01 00 00       	push   0x100
c001dc22:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c001dc27:	6a 00                	push   0x0
c001dc29:	6a 00                	push   0x0
c001dc2b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001dc31:	e8 18 45 ff ff       	call   c001214e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001dc36:	83 c4 2c             	add    esp,0x2c
c001dc39:	c3                   	ret    

c001dc3a <Vm::finish8086()>:
c001dc3a:	53                   	push   ebx
c001dc3b:	83 ec 08             	sub    esp,0x8
c001dc3e:	e8 a3 f2 ff ff       	call   c001cee6 <lockScheduler()>
c001dc43:	80 3d 64 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e164,0x0
c001dc4a:	75 0c                	jne    c001dc58 <Vm::finish8086()+0x1e>
c001dc4c:	e8 d1 f5 ff ff       	call   c001d222 <schedule()>
c001dc51:	e8 92 f2 ff ff       	call   c001cee8 <unlockScheduler()>
c001dc56:	eb e6                	jmp    c001dc3e <Vm::finish8086()+0x4>
c001dc58:	83 ec 0c             	sub    esp,0xc
c001dc5b:	8b 1d 60 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e160
c001dc61:	ff 35 68 e1 02 c0    	push   DWORD PTR ds:0xc002e168
c001dc67:	c6 05 64 e1 02 c0 00 	mov    BYTE PTR ds:0xc002e164,0x0
c001dc6e:	e8 8b f8 ff ff       	call   c001d4fe <unblockTask(ThreadControlBlock*)>
c001dc73:	e8 70 f2 ff ff       	call   c001cee8 <unlockScheduler()>
c001dc78:	89 d8                	mov    eax,ebx
c001dc7a:	83 c4 18             	add    esp,0x18
c001dc7d:	5b                   	pop    ebx
c001dc7e:	c3                   	ret    

c001dc7f <Vm::getOutput8086(unsigned char*)>:
c001dc7f:	83 ec 10             	sub    esp,0x10
c001dc82:	ff 35 6c e1 02 c0    	push   DWORD PTR ds:0xc002e16c
c001dc88:	68 80 e1 02 c0       	push   0xc002e180
c001dc8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc91:	e8 bf 29 fe ff       	call   c0000655 <memcpy>
c001dc96:	a1 6c e1 02 c0       	mov    eax,ds:0xc002e16c
c001dc9b:	c7 05 6c e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e16c,0x0
c001dca5:	83 c4 1c             	add    esp,0x1c
c001dca8:	c3                   	ret    

c001dca9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001dca9:	55                   	push   ebp
c001dcaa:	57                   	push   edi
c001dcab:	56                   	push   esi
c001dcac:	53                   	push   ebx
c001dcad:	83 ec 2c             	sub    esp,0x2c
c001dcb0:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001dcb4:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001dcb8:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001dcbc:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001dcc0:	e8 21 f2 ff ff       	call   c001cee6 <lockScheduler()>
c001dcc5:	a0 65 e1 02 c0       	mov    al,ds:0xc002e165
c001dcca:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dcce:	84 c0                	test   al,al
c001dcd0:	75 0c                	jne    c001dcde <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001dcd2:	e8 4b f5 ff ff       	call   c001d222 <schedule()>
c001dcd7:	e8 0c f2 ff ff       	call   c001cee8 <unlockScheduler()>
c001dcdc:	eb e2                	jmp    c001dcc0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001dcde:	a1 68 e1 02 c0       	mov    eax,ds:0xc002e168
c001dce3:	c7 05 6c e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e16c,0x0
c001dced:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001dcf1:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001dcf5:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001dcf9:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001dcfd:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001dd01:	50                   	push   eax
c001dd02:	6a 20                	push   0x20
c001dd04:	6a 00                	push   0x0
c001dd06:	68 80 e1 02 c0       	push   0xc002e180
c001dd0b:	e8 7b 29 fe ff       	call   c000068b <memset>
c001dd10:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001dd17:	e8 be 17 ff ff       	call   c000f4da <malloc>
c001dd1c:	83 c4 0c             	add    esp,0xc
c001dd1f:	89 c7                	mov    edi,eax
c001dd21:	ff 35 34 e1 02 c0    	push   DWORD PTR ds:0xc002e134
c001dd27:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dd2b:	50                   	push   eax
c001dd2c:	e8 a7 4f ff ff       	call   c0012cd8 <File::File(char const*, Process*)>
c001dd31:	83 c4 10             	add    esp,0x10
c001dd34:	85 ff                	test   edi,edi
c001dd36:	75 0a                	jne    c001dd42 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001dd38:	83 ec 0c             	sub    esp,0xc
c001dd3b:	68 cf ad 02 c0       	push   0xc002adcf
c001dd40:	eb 27                	jmp    c001dd69 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001dd42:	50                   	push   eax
c001dd43:	8d 44 24 17          	lea    eax,[esp+0x17]
c001dd47:	50                   	push   eax
c001dd48:	8d 44 24 20          	lea    eax,[esp+0x20]
c001dd4c:	50                   	push   eax
c001dd4d:	57                   	push   edi
c001dd4e:	e8 95 52 ff ff       	call   c0012fe8 <File::stat(unsigned long long*, bool*)>
c001dd53:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001dd58:	83 c4 10             	add    esp,0x10
c001dd5b:	89 e8                	mov    eax,ebp
c001dd5d:	84 c0                	test   al,al
c001dd5f:	74 19                	je     c001dd7a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001dd61:	83 ec 0c             	sub    esp,0xc
c001dd64:	68 e3 ad 02 c0       	push   0xc002ade3
c001dd69:	e8 63 bb ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c001dd6e:	31 ed                	xor    ebp,ebp
c001dd70:	e8 73 f1 ff ff       	call   c001cee8 <unlockScheduler()>
c001dd75:	83 c4 10             	add    esp,0x10
c001dd78:	eb 75                	jmp    c001ddef <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001dd7a:	50                   	push   eax
c001dd7b:	50                   	push   eax
c001dd7c:	6a 01                	push   0x1
c001dd7e:	57                   	push   edi
c001dd7f:	e8 b8 4f ff ff       	call   c0012d3c <File::open(FileOpenMode)>
c001dd84:	83 c4 10             	add    esp,0x10
c001dd87:	85 c0                	test   eax,eax
c001dd89:	74 17                	je     c001dda2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001dd8b:	83 ec 0c             	sub    esp,0xc
c001dd8e:	68 fc ad 02 c0       	push   0xc002adfc
c001dd93:	e8 39 bb ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c001dd98:	e8 4b f1 ff ff       	call   c001cee8 <unlockScheduler()>
c001dd9d:	83 c4 10             	add    esp,0x10
c001dda0:	eb 4d                	jmp    c001ddef <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001dda2:	0f b7 f6             	movzx  esi,si
c001dda5:	50                   	push   eax
c001dda6:	0f b7 db             	movzx  ebx,bx
c001dda9:	50                   	push   eax
c001ddaa:	56                   	push   esi
c001ddab:	53                   	push   ebx
c001ddac:	e8 b7 fd ff ff       	call   c001db68 <Vm::realToLinear(unsigned short, unsigned short)>
c001ddb1:	5a                   	pop    edx
c001ddb2:	8b 17                	mov    edx,DWORD PTR [edi]
c001ddb4:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ddb8:	51                   	push   ecx
c001ddb9:	50                   	push   eax
c001ddba:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ddbe:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ddc2:	57                   	push   edi
c001ddc3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ddc6:	83 c4 14             	add    esp,0x14
c001ddc9:	57                   	push   edi
c001ddca:	e8 cb 4f ff ff       	call   c0012d9a <File::close()>
c001ddcf:	c6 05 65 e1 02 c0 00 	mov    BYTE PTR ds:0xc002e165,0x0
c001ddd6:	e8 0d f1 ff ff       	call   c001cee8 <unlockScheduler()>
c001dddb:	59                   	pop    ecx
c001dddc:	ff 35 68 e1 02 c0    	push   DWORD PTR ds:0xc002e168
c001dde2:	e8 17 f7 ff ff       	call   c001d4fe <unblockTask(ThreadControlBlock*)>
c001dde7:	83 c4 10             	add    esp,0x10
c001ddea:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ddef:	83 c4 2c             	add    esp,0x2c
c001ddf2:	89 e8                	mov    eax,ebp
c001ddf4:	5b                   	pop    ebx
c001ddf5:	5e                   	pop    esi
c001ddf6:	5f                   	pop    edi
c001ddf7:	5d                   	pop    ebp
c001ddf8:	c3                   	ret    

c001ddf9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ddf9:	57                   	push   edi
c001ddfa:	56                   	push   esi
c001ddfb:	53                   	push   ebx
c001ddfc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001de00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de04:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001de08:	83 e8 06             	sub    eax,0x6
c001de0b:	0f b7 c0             	movzx  eax,ax
c001de0e:	50                   	push   eax
c001de0f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001de14:	50                   	push   eax
c001de15:	e8 4e fd ff ff       	call   c001db68 <Vm::realToLinear(unsigned short, unsigned short)>
c001de1a:	5a                   	pop    edx
c001de1b:	5e                   	pop    esi
c001de1c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001de1f:	8d 56 fa             	lea    edx,[esi-0x6]
c001de22:	81 e2 ff ff 00 00    	and    edx,0xffff
c001de28:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001de2b:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001de2e:	83 c2 02             	add    edx,0x2
c001de31:	66 89 10             	mov    WORD PTR [eax],dx
c001de34:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001de37:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001de3b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001de3e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001de42:	89 d6                	mov    esi,edx
c001de44:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001de4a:	66 81 e6 ff fd       	and    si,0xfdff
c001de4f:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001de53:	74 07                	je     c001de5c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001de55:	89 d6                	mov    esi,edx
c001de57:	66 81 ce 00 02       	or     si,0x200
c001de5c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001de60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de65:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001de69:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001de71:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001de74:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001de7c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001de7f:	5b                   	pop    ebx
c001de80:	5e                   	pop    esi
c001de81:	5f                   	pop    edi
c001de82:	c3                   	ret    

c001de83 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001de83:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001de88:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001de8d:	c1 e0 04             	shl    eax,0x4
c001de90:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001de93:	c3                   	ret    

c001de94 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001de94:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001de99:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001de9e:	c1 e0 04             	shl    eax,0x4
c001dea1:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001dea5:	c3                   	ret    

c001dea6 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001dea6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001deab:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001deb0:	c1 e0 04             	shl    eax,0x4
c001deb3:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001deb6:	c3                   	ret    

c001deb7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001deb7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001debc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dec1:	c1 e0 04             	shl    eax,0x4
c001dec4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dec8:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001decb:	c3                   	ret    

c001decc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001decc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ded1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ded6:	c1 e0 04             	shl    eax,0x4
c001ded9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dedd:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001dee1:	c3                   	ret    

c001dee2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001dee2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dee7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001deec:	c1 e0 04             	shl    eax,0x4
c001deef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001def3:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001def6:	c3                   	ret    

c001def7 <Vm::faultHandler(regs*)>:
c001def7:	55                   	push   ebp
c001def8:	57                   	push   edi
c001def9:	56                   	push   esi
c001defa:	53                   	push   ebx
c001defb:	83 ec 1c             	sub    esp,0x1c
c001defe:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001df02:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001df05:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001df08:	0f b7 c1             	movzx  eax,cx
c001df0b:	50                   	push   eax
c001df0c:	0f b7 c3             	movzx  eax,bx
c001df0f:	c1 e3 04             	shl    ebx,0x4
c001df12:	50                   	push   eax
c001df13:	e8 50 fc ff ff       	call   c001db68 <Vm::realToLinear(unsigned short, unsigned short)>
c001df18:	5a                   	pop    edx
c001df19:	89 c5                	mov    ebp,eax
c001df1b:	5e                   	pop    esi
c001df1c:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001df20:	50                   	push   eax
c001df21:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001df25:	50                   	push   eax
c001df26:	e8 3d fc ff ff       	call   c001db68 <Vm::realToLinear(unsigned short, unsigned short)>
c001df2b:	01 cb                	add    ebx,ecx
c001df2d:	89 c6                	mov    esi,eax
c001df2f:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001df33:	50                   	push   eax
c001df34:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001df38:	50                   	push   eax
c001df39:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001df3d:	50                   	push   eax
c001df3e:	55                   	push   ebp
c001df3f:	53                   	push   ebx
c001df40:	b3 06                	mov    bl,0x6
c001df42:	68 15 ae 02 c0       	push   0xc002ae15
c001df47:	e8 33 48 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001df4c:	83 c4 20             	add    esp,0x20
c001df4f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001df54:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001df59:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001df5d:	3c 9d                	cmp    al,0x9d
c001df5f:	0f 84 d7 02 00 00    	je     c001e23c <Vm::faultHandler(regs*)+0x345>
c001df65:	0f 87 a3 00 00 00    	ja     c001e00e <Vm::faultHandler(regs*)+0x117>
c001df6b:	3c 66                	cmp    al,0x66
c001df6d:	0f 84 15 02 00 00    	je     c001e188 <Vm::faultHandler(regs*)+0x291>
c001df73:	77 5f                	ja     c001dfd4 <Vm::faultHandler(regs*)+0xdd>
c001df75:	3c 36                	cmp    al,0x36
c001df77:	0f 84 f1 01 00 00    	je     c001e16e <Vm::faultHandler(regs*)+0x277>
c001df7d:	77 28                	ja     c001dfa7 <Vm::faultHandler(regs*)+0xb0>
c001df7f:	3c 26                	cmp    al,0x26
c001df81:	0f 84 99 01 00 00    	je     c001e120 <Vm::faultHandler(regs*)+0x229>
c001df87:	3c 2e                	cmp    al,0x2e
c001df89:	0f 85 3b 07 00 00    	jne    c001e6ca <Vm::faultHandler(regs*)+0x7d3>
c001df8f:	83 ec 0c             	sub    esp,0xc
c001df92:	31 db                	xor    ebx,ebx
c001df94:	68 2a ae 02 c0       	push   0xc002ae2a
c001df99:	e8 e1 47 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001df9e:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dfa1:	83 c4 10             	add    esp,0x10
c001dfa4:	45                   	inc    ebp
c001dfa5:	eb b2                	jmp    c001df59 <Vm::faultHandler(regs*)+0x62>
c001dfa7:	3c 64                	cmp    al,0x64
c001dfa9:	0f 84 8b 01 00 00    	je     c001e13a <Vm::faultHandler(regs*)+0x243>
c001dfaf:	0f 87 9f 01 00 00    	ja     c001e154 <Vm::faultHandler(regs*)+0x25d>
c001dfb5:	3c 3e                	cmp    al,0x3e
c001dfb7:	0f 85 0d 07 00 00    	jne    c001e6ca <Vm::faultHandler(regs*)+0x7d3>
c001dfbd:	83 ec 0c             	sub    esp,0xc
c001dfc0:	b3 01                	mov    bl,0x1
c001dfc2:	68 2e ae 02 c0       	push   0xc002ae2e
c001dfc7:	e8 b3 47 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001dfcc:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dfcf:	83 c4 10             	add    esp,0x10
c001dfd2:	eb d0                	jmp    c001dfa4 <Vm::faultHandler(regs*)+0xad>
c001dfd4:	3c 6d                	cmp    al,0x6d
c001dfd6:	0f 84 af 03 00 00    	je     c001e38b <Vm::faultHandler(regs*)+0x494>
c001dfdc:	77 15                	ja     c001dff3 <Vm::faultHandler(regs*)+0xfc>
c001dfde:	3c 67                	cmp    al,0x67
c001dfe0:	0f 84 bf 01 00 00    	je     c001e1a5 <Vm::faultHandler(regs*)+0x2ae>
c001dfe6:	3c 6c                	cmp    al,0x6c
c001dfe8:	0f 84 3f 03 00 00    	je     c001e32d <Vm::faultHandler(regs*)+0x436>
c001dfee:	e9 d7 06 00 00       	jmp    c001e6ca <Vm::faultHandler(regs*)+0x7d3>
c001dff3:	3c 6f                	cmp    al,0x6f
c001dff5:	0f 84 a4 04 00 00    	je     c001e49f <Vm::faultHandler(regs*)+0x5a8>
c001dffb:	0f 82 11 04 00 00    	jb     c001e412 <Vm::faultHandler(regs*)+0x51b>
c001e001:	3c 9c                	cmp    al,0x9c
c001e003:	0f 84 ba 01 00 00    	je     c001e1c3 <Vm::faultHandler(regs*)+0x2cc>
c001e009:	e9 bc 06 00 00       	jmp    c001e6ca <Vm::faultHandler(regs*)+0x7d3>
c001e00e:	3c ec                	cmp    al,0xec
c001e010:	0f 84 24 06 00 00    	je     c001e63a <Vm::faultHandler(regs*)+0x743>
c001e016:	0f 87 93 00 00 00    	ja     c001e0af <Vm::faultHandler(regs*)+0x1b8>
c001e01c:	3c e4                	cmp    al,0xe4
c001e01e:	0f 84 5c 05 00 00    	je     c001e580 <Vm::faultHandler(regs*)+0x689>
c001e024:	77 6a                	ja     c001e090 <Vm::faultHandler(regs*)+0x199>
c001e026:	3c cd                	cmp    al,0xcd
c001e028:	0f 84 7e 02 00 00    	je     c001e2ac <Vm::faultHandler(regs*)+0x3b5>
c001e02e:	3c cf                	cmp    al,0xcf
c001e030:	0f 85 94 06 00 00    	jne    c001e6ca <Vm::faultHandler(regs*)+0x7d3>
c001e036:	83 ec 0c             	sub    esp,0xc
c001e039:	68 72 ae 02 c0       	push   0xc002ae72
c001e03e:	e8 3c 47 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001e043:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001e046:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001e049:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001e04d:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001e050:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001e054:	0d 00 02 02 00       	or     eax,0x20200
c001e059:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e05c:	56                   	push   esi
c001e05d:	53                   	push   ebx
c001e05e:	52                   	push   edx
c001e05f:	68 78 ae 02 c0       	push   0xc002ae78
c001e064:	e8 16 47 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001e069:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001e06d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e073:	66 c1 e8 09          	shr    ax,0x9
c001e077:	83 e0 01             	and    eax,0x1
c001e07a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e07d:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e080:	83 c0 06             	add    eax,0x6
c001e083:	25 ff ff 00 00       	and    eax,0xffff
c001e088:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e08b:	e9 95 02 00 00       	jmp    c001e325 <Vm::faultHandler(regs*)+0x42e>
c001e090:	3c e6                	cmp    al,0xe6
c001e092:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001e096:	0f 84 4e 05 00 00    	je     c001e5ea <Vm::faultHandler(regs*)+0x6f3>
c001e09c:	0f 82 0a 05 00 00    	jb     c001e5ac <Vm::faultHandler(regs*)+0x6b5>
c001e0a2:	3c e7                	cmp    al,0xe7
c001e0a4:	0f 84 69 05 00 00    	je     c001e613 <Vm::faultHandler(regs*)+0x71c>
c001e0aa:	e9 1b 06 00 00       	jmp    c001e6ca <Vm::faultHandler(regs*)+0x7d3>
c001e0af:	3c ef                	cmp    al,0xef
c001e0b1:	0f 84 e6 05 00 00    	je     c001e69d <Vm::faultHandler(regs*)+0x7a6>
c001e0b7:	77 37                	ja     c001e0f0 <Vm::faultHandler(regs*)+0x1f9>
c001e0b9:	3c ed                	cmp    al,0xed
c001e0bb:	0f 84 a3 05 00 00    	je     c001e664 <Vm::faultHandler(regs*)+0x76d>
c001e0c1:	3c ee                	cmp    al,0xee
c001e0c3:	0f 85 01 06 00 00    	jne    c001e6ca <Vm::faultHandler(regs*)+0x7d3>
c001e0c9:	52                   	push   edx
c001e0ca:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e0cd:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e0d0:	68 13 af 02 c0       	push   0xc002af13
c001e0d5:	e8 a5 46 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001e0da:	59                   	pop    ecx
c001e0db:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001e0df:	5b                   	pop    ebx
c001e0e0:	50                   	push   eax
c001e0e1:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e0e5:	50                   	push   eax
c001e0e6:	e8 2a fa ff ff       	call   c001db15 <Vm::outbv(unsigned short, unsigned char)>
c001e0eb:	e9 a5 05 00 00       	jmp    c001e695 <Vm::faultHandler(regs*)+0x79e>
c001e0f0:	3c fa                	cmp    al,0xfa
c001e0f2:	0f 84 f7 01 00 00    	je     c001e2ef <Vm::faultHandler(regs*)+0x3f8>
c001e0f8:	3c fb                	cmp    al,0xfb
c001e0fa:	0f 84 0a 02 00 00    	je     c001e30a <Vm::faultHandler(regs*)+0x413>
c001e100:	3c f3                	cmp    al,0xf3
c001e102:	0f 85 c2 05 00 00    	jne    c001e6ca <Vm::faultHandler(regs*)+0x7d3>
c001e108:	83 ec 0c             	sub    esp,0xc
c001e10b:	68 4b ae 02 c0       	push   0xc002ae4b
c001e110:	e8 6a 46 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001e115:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e118:	83 c4 10             	add    esp,0x10
c001e11b:	e9 84 fe ff ff       	jmp    c001dfa4 <Vm::faultHandler(regs*)+0xad>
c001e120:	83 ec 0c             	sub    esp,0xc
c001e123:	b3 02                	mov    bl,0x2
c001e125:	68 26 ae 02 c0       	push   0xc002ae26
c001e12a:	e8 50 46 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001e12f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e132:	83 c4 10             	add    esp,0x10
c001e135:	e9 6a fe ff ff       	jmp    c001dfa4 <Vm::faultHandler(regs*)+0xad>
c001e13a:	83 ec 0c             	sub    esp,0xc
c001e13d:	b3 03                	mov    bl,0x3
c001e13f:	68 32 ae 02 c0       	push   0xc002ae32
c001e144:	e8 36 46 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001e149:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e14c:	83 c4 10             	add    esp,0x10
c001e14f:	e9 50 fe ff ff       	jmp    c001dfa4 <Vm::faultHandler(regs*)+0xad>
c001e154:	83 ec 0c             	sub    esp,0xc
c001e157:	b3 04                	mov    bl,0x4
c001e159:	68 36 ae 02 c0       	push   0xc002ae36
c001e15e:	e8 1c 46 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001e163:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e166:	83 c4 10             	add    esp,0x10
c001e169:	e9 36 fe ff ff       	jmp    c001dfa4 <Vm::faultHandler(regs*)+0xad>
c001e16e:	83 ec 0c             	sub    esp,0xc
c001e171:	b3 05                	mov    bl,0x5
c001e173:	68 3a ae 02 c0       	push   0xc002ae3a
c001e178:	e8 02 46 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001e17d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e180:	83 c4 10             	add    esp,0x10
c001e183:	e9 1c fe ff ff       	jmp    c001dfa4 <Vm::faultHandler(regs*)+0xad>
c001e188:	83 ec 0c             	sub    esp,0xc
c001e18b:	68 3e ae 02 c0       	push   0xc002ae3e
c001e190:	e8 ea 45 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001e195:	83 c4 10             	add    esp,0x10
c001e198:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e19b:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001e1a0:	e9 ff fd ff ff       	jmp    c001dfa4 <Vm::faultHandler(regs*)+0xad>
c001e1a5:	50                   	push   eax
c001e1a6:	50                   	push   eax
c001e1a7:	6a 01                	push   0x1
c001e1a9:	68 43 ae 02 c0       	push   0xc002ae43
c001e1ae:	e8 cc 45 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001e1b3:	83 c4 10             	add    esp,0x10
c001e1b6:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e1b9:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001e1be:	e9 e1 fd ff ff       	jmp    c001dfa4 <Vm::faultHandler(regs*)+0xad>
c001e1c3:	83 ec 0c             	sub    esp,0xc
c001e1c6:	68 51 ae 02 c0       	push   0xc002ae51
c001e1cb:	e8 af 45 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001e1d0:	83 c4 10             	add    esp,0x10
c001e1d3:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001e1d6:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e1db:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001e1de:	74 2f                	je     c001e20f <Vm::faultHandler(regs*)+0x318>
c001e1e0:	83 ea 04             	sub    edx,0x4
c001e1e3:	25 ff 0d 00 00       	and    eax,0xdff
c001e1e8:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e1ee:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e1f1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e1f4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e1fa:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e1fe:	0f 84 bf 04 00 00    	je     c001e6c3 <Vm::faultHandler(regs*)+0x7cc>
c001e204:	80 cc 02             	or     ah,0x2
c001e207:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e20a:	e9 b4 04 00 00       	jmp    c001e6c3 <Vm::faultHandler(regs*)+0x7cc>
c001e20f:	83 ea 02             	sub    edx,0x2
c001e212:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e218:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e21b:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e21f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e225:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e229:	74 05                	je     c001e230 <Vm::faultHandler(regs*)+0x339>
c001e22b:	80 cc 02             	or     ah,0x2
c001e22e:	eb 03                	jmp    c001e233 <Vm::faultHandler(regs*)+0x33c>
c001e230:	80 e4 fd             	and    ah,0xfd
c001e233:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e237:	e9 87 04 00 00       	jmp    c001e6c3 <Vm::faultHandler(regs*)+0x7cc>
c001e23c:	83 ec 0c             	sub    esp,0xc
c001e23f:	68 58 ae 02 c0       	push   0xc002ae58
c001e244:	e8 36 45 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001e249:	83 c4 10             	add    esp,0x10
c001e24c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e251:	74 28                	je     c001e27b <Vm::faultHandler(regs*)+0x384>
c001e253:	8b 06                	mov    eax,DWORD PTR [esi]
c001e255:	25 ff 0d 00 00       	and    eax,0xdff
c001e25a:	0d 00 02 02 00       	or     eax,0x20200
c001e25f:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e262:	8b 06                	mov    eax,DWORD PTR [esi]
c001e264:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e26a:	c1 e8 09             	shr    eax,0x9
c001e26d:	83 e0 01             	and    eax,0x1
c001e270:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e273:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e276:	83 c0 04             	add    eax,0x4
c001e279:	eb 24                	jmp    c001e29f <Vm::faultHandler(regs*)+0x3a8>
c001e27b:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001e27e:	0d 00 02 02 00       	or     eax,0x20200
c001e283:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e286:	66 8b 06             	mov    ax,WORD PTR [esi]
c001e289:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e28f:	66 c1 e8 09          	shr    ax,0x9
c001e293:	83 e0 01             	and    eax,0x1
c001e296:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e299:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e29c:	83 c0 02             	add    eax,0x2
c001e29f:	25 ff ff 00 00       	and    eax,0xffff
c001e2a4:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e2a7:	e9 17 04 00 00       	jmp    c001e6c3 <Vm::faultHandler(regs*)+0x7cc>
c001e2ac:	53                   	push   ebx
c001e2ad:	53                   	push   ebx
c001e2ae:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e2b2:	50                   	push   eax
c001e2b3:	68 5e ae 02 c0       	push   0xc002ae5e
c001e2b8:	e8 c2 44 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001e2bd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e2c1:	83 c4 10             	add    esp,0x10
c001e2c4:	3c ee                	cmp    al,0xee
c001e2c6:	75 10                	jne    c001e2d8 <Vm::faultHandler(regs*)+0x3e1>
c001e2c8:	83 ec 0c             	sub    esp,0xc
c001e2cb:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e2ce:	e8 fa f8 ff ff       	call   c001dbcd <Vm::mainloop3(unsigned long)>
c001e2d3:	e9 c0 03 00 00       	jmp    c001e698 <Vm::faultHandler(regs*)+0x7a1>
c001e2d8:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001e2dc:	83 ec 0c             	sub    esp,0xc
c001e2df:	53                   	push   ebx
c001e2e0:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001e2e4:	53                   	push   ebx
c001e2e5:	55                   	push   ebp
c001e2e6:	50                   	push   eax
c001e2e7:	57                   	push   edi
c001e2e8:	e8 0c fb ff ff       	call   c001ddf9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001e2ed:	eb 36                	jmp    c001e325 <Vm::faultHandler(regs*)+0x42e>
c001e2ef:	83 ec 0c             	sub    esp,0xc
c001e2f2:	68 68 ae 02 c0       	push   0xc002ae68
c001e2f7:	e8 83 44 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001e2fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e301:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e305:	e9 8b 03 00 00       	jmp    c001e695 <Vm::faultHandler(regs*)+0x79e>
c001e30a:	83 ec 0c             	sub    esp,0xc
c001e30d:	68 6d ae 02 c0       	push   0xc002ae6d
c001e312:	e8 68 44 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001e317:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e31c:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001e320:	e9 70 03 00 00       	jmp    c001e695 <Vm::faultHandler(regs*)+0x79e>
c001e325:	83 c4 20             	add    esp,0x20
c001e328:	e9 99 03 00 00       	jmp    c001e6c6 <Vm::faultHandler(regs*)+0x7cf>
c001e32d:	83 ec 0c             	sub    esp,0xc
c001e330:	68 ab ae 02 c0       	push   0xc002aeab
c001e335:	e8 45 44 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001e33a:	83 c4 10             	add    esp,0x10
c001e33d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e340:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e345:	74 0d                	je     c001e354 <Vm::faultHandler(regs*)+0x45d>
c001e347:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e34e:	0f 87 9e 01 00 00    	ja     c001e4f2 <Vm::faultHandler(regs*)+0x5fb>
c001e354:	83 ec 0c             	sub    esp,0xc
c001e357:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e35b:	0f b7 db             	movzx  ebx,bx
c001e35e:	50                   	push   eax
c001e35f:	e8 9e f7 ff ff       	call   c001db02 <Vm::inbv(unsigned short)>
c001e364:	83 c4 0c             	add    esp,0xc
c001e367:	0f b6 c0             	movzx  eax,al
c001e36a:	50                   	push   eax
c001e36b:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001e36f:	50                   	push   eax
c001e370:	53                   	push   ebx
c001e371:	e8 41 fb ff ff       	call   c001deb7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001e376:	83 c4 10             	add    esp,0x10
c001e379:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e37c:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e380:	74 03                	je     c001e385 <Vm::faultHandler(regs*)+0x48e>
c001e382:	48                   	dec    eax
c001e383:	eb 01                	jmp    c001e386 <Vm::faultHandler(regs*)+0x48f>
c001e385:	40                   	inc    eax
c001e386:	0f b7 c0             	movzx  eax,ax
c001e389:	eb 7f                	jmp    c001e40a <Vm::faultHandler(regs*)+0x513>
c001e38b:	83 ec 0c             	sub    esp,0xc
c001e38e:	68 dd ae 02 c0       	push   0xc002aedd
c001e393:	e8 e7 43 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001e398:	83 c4 10             	add    esp,0x10
c001e39b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e39e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e3a3:	74 0d                	je     c001e3b2 <Vm::faultHandler(regs*)+0x4bb>
c001e3a5:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e3ac:	0f 87 40 01 00 00    	ja     c001e4f2 <Vm::faultHandler(regs*)+0x5fb>
c001e3b2:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e3b5:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001e3b9:	0f b7 db             	movzx  ebx,bx
c001e3bc:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e3c1:	74 20                	je     c001e3e3 <Vm::faultHandler(regs*)+0x4ec>
c001e3c3:	ed                   	in     eax,dx
c001e3c4:	51                   	push   ecx
c001e3c5:	50                   	push   eax
c001e3c6:	56                   	push   esi
c001e3c7:	53                   	push   ebx
c001e3c8:	e8 15 fb ff ff       	call   c001dee2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001e3cd:	83 c4 10             	add    esp,0x10
c001e3d0:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e3d3:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e3d7:	74 05                	je     c001e3de <Vm::faultHandler(regs*)+0x4e7>
c001e3d9:	83 e8 04             	sub    eax,0x4
c001e3dc:	eb 27                	jmp    c001e405 <Vm::faultHandler(regs*)+0x50e>
c001e3de:	83 c0 04             	add    eax,0x4
c001e3e1:	eb 22                	jmp    c001e405 <Vm::faultHandler(regs*)+0x50e>
c001e3e3:	66 ed                	in     ax,dx
c001e3e5:	0f b7 c0             	movzx  eax,ax
c001e3e8:	52                   	push   edx
c001e3e9:	50                   	push   eax
c001e3ea:	56                   	push   esi
c001e3eb:	53                   	push   ebx
c001e3ec:	e8 db fa ff ff       	call   c001decc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001e3f1:	83 c4 10             	add    esp,0x10
c001e3f4:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e3f7:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e3fb:	74 05                	je     c001e402 <Vm::faultHandler(regs*)+0x50b>
c001e3fd:	83 e8 02             	sub    eax,0x2
c001e400:	eb 03                	jmp    c001e405 <Vm::faultHandler(regs*)+0x50e>
c001e402:	83 c0 02             	add    eax,0x2
c001e405:	25 ff ff 00 00       	and    eax,0xffff
c001e40a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001e40d:	e9 b1 02 00 00       	jmp    c001e6c3 <Vm::faultHandler(regs*)+0x7cc>
c001e412:	83 ec 0c             	sub    esp,0xc
c001e415:	4b                   	dec    ebx
c001e416:	68 e3 ae 02 c0       	push   0xc002aee3
c001e41b:	e8 5f 43 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001e420:	83 c4 10             	add    esp,0x10
c001e423:	80 fb 05             	cmp    bl,0x5
c001e426:	77 0a                	ja     c001e432 <Vm::faultHandler(regs*)+0x53b>
c001e428:	0f b6 db             	movzx  ebx,bl
c001e42b:	ff 24 9d 54 af 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd50ac]
c001e432:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e436:	eb 1b                	jmp    c001e453 <Vm::faultHandler(regs*)+0x55c>
c001e438:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e43c:	eb 15                	jmp    c001e453 <Vm::faultHandler(regs*)+0x55c>
c001e43e:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e442:	eb 0f                	jmp    c001e453 <Vm::faultHandler(regs*)+0x55c>
c001e444:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e448:	eb 09                	jmp    c001e453 <Vm::faultHandler(regs*)+0x55c>
c001e44a:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e44d:	eb 04                	jmp    c001e453 <Vm::faultHandler(regs*)+0x55c>
c001e44f:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e453:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e458:	74 0d                	je     c001e467 <Vm::faultHandler(regs*)+0x570>
c001e45a:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001e461:	0f 87 8b 00 00 00    	ja     c001e4f2 <Vm::faultHandler(regs*)+0x5fb>
c001e467:	53                   	push   ebx
c001e468:	53                   	push   ebx
c001e469:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001e46d:	52                   	push   edx
c001e46e:	50                   	push   eax
c001e46f:	e8 0f fa ff ff       	call   c001de83 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001e474:	5e                   	pop    esi
c001e475:	0f b6 c0             	movzx  eax,al
c001e478:	5d                   	pop    ebp
c001e479:	50                   	push   eax
c001e47a:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e47e:	50                   	push   eax
c001e47f:	e8 91 f6 ff ff       	call   c001db15 <Vm::outbv(unsigned short, unsigned char)>
c001e484:	83 c4 10             	add    esp,0x10
c001e487:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001e48a:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e48e:	74 03                	je     c001e493 <Vm::faultHandler(regs*)+0x59c>
c001e490:	48                   	dec    eax
c001e491:	eb 01                	jmp    c001e494 <Vm::faultHandler(regs*)+0x59d>
c001e493:	40                   	inc    eax
c001e494:	0f b7 c0             	movzx  eax,ax
c001e497:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001e49a:	e9 24 02 00 00       	jmp    c001e6c3 <Vm::faultHandler(regs*)+0x7cc>
c001e49f:	83 ec 0c             	sub    esp,0xc
c001e4a2:	4b                   	dec    ebx
c001e4a3:	68 e3 ae 02 c0       	push   0xc002aee3
c001e4a8:	e8 d2 42 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001e4ad:	83 c4 10             	add    esp,0x10
c001e4b0:	80 fb 05             	cmp    bl,0x5
c001e4b3:	77 0a                	ja     c001e4bf <Vm::faultHandler(regs*)+0x5c8>
c001e4b5:	0f b6 db             	movzx  ebx,bl
c001e4b8:	ff 24 9d 6c af 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd5094]
c001e4bf:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e4c3:	eb 1b                	jmp    c001e4e0 <Vm::faultHandler(regs*)+0x5e9>
c001e4c5:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e4c9:	eb 15                	jmp    c001e4e0 <Vm::faultHandler(regs*)+0x5e9>
c001e4cb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e4cf:	eb 0f                	jmp    c001e4e0 <Vm::faultHandler(regs*)+0x5e9>
c001e4d1:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e4d5:	eb 09                	jmp    c001e4e0 <Vm::faultHandler(regs*)+0x5e9>
c001e4d7:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e4da:	eb 04                	jmp    c001e4e0 <Vm::faultHandler(regs*)+0x5e9>
c001e4dc:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e4e0:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001e4e3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e4e8:	74 39                	je     c001e523 <Vm::faultHandler(regs*)+0x62c>
c001e4ea:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001e4f0:	76 31                	jbe    c001e523 <Vm::faultHandler(regs*)+0x62c>
c001e4f2:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e4f6:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e4fa:	51                   	push   ecx
c001e4fb:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e4ff:	51                   	push   ecx
c001e500:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e504:	51                   	push   ecx
c001e505:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e509:	51                   	push   ecx
c001e50a:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e50e:	52                   	push   edx
c001e50f:	50                   	push   eax
c001e510:	50                   	push   eax
c001e511:	68 b0 ae 02 c0       	push   0xc002aeb0
c001e516:	e8 64 42 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001e51b:	83 c4 20             	add    esp,0x20
c001e51e:	e9 fb 01 00 00       	jmp    c001e71e <Vm::faultHandler(regs*)+0x827>
c001e523:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001e526:	0f b7 d3             	movzx  edx,bx
c001e529:	81 e6 00 04 00 00    	and    esi,0x400
c001e52f:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001e532:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e537:	74 1d                	je     c001e556 <Vm::faultHandler(regs*)+0x65f>
c001e539:	51                   	push   ecx
c001e53a:	51                   	push   ecx
c001e53b:	52                   	push   edx
c001e53c:	50                   	push   eax
c001e53d:	e8 64 f9 ff ff       	call   c001dea6 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001e542:	83 c4 10             	add    esp,0x10
c001e545:	89 ea                	mov    edx,ebp
c001e547:	ef                   	out    dx,eax
c001e548:	85 f6                	test   esi,esi
c001e54a:	74 05                	je     c001e551 <Vm::faultHandler(regs*)+0x65a>
c001e54c:	83 eb 04             	sub    ebx,0x4
c001e54f:	eb 21                	jmp    c001e572 <Vm::faultHandler(regs*)+0x67b>
c001e551:	83 c3 04             	add    ebx,0x4
c001e554:	eb 1c                	jmp    c001e572 <Vm::faultHandler(regs*)+0x67b>
c001e556:	51                   	push   ecx
c001e557:	51                   	push   ecx
c001e558:	52                   	push   edx
c001e559:	50                   	push   eax
c001e55a:	e8 35 f9 ff ff       	call   c001de94 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001e55f:	83 c4 10             	add    esp,0x10
c001e562:	89 ea                	mov    edx,ebp
c001e564:	66 ef                	out    dx,ax
c001e566:	85 f6                	test   esi,esi
c001e568:	74 05                	je     c001e56f <Vm::faultHandler(regs*)+0x678>
c001e56a:	83 eb 02             	sub    ebx,0x2
c001e56d:	eb 03                	jmp    c001e572 <Vm::faultHandler(regs*)+0x67b>
c001e56f:	83 c3 02             	add    ebx,0x2
c001e572:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001e578:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001e57b:	e9 43 01 00 00       	jmp    c001e6c3 <Vm::faultHandler(regs*)+0x7cc>
c001e580:	53                   	push   ebx
c001e581:	53                   	push   ebx
c001e582:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e586:	50                   	push   eax
c001e587:	68 e9 ae 02 c0       	push   0xc002aee9
c001e58c:	e8 ee 41 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001e591:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e598:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e59c:	89 04 24             	mov    DWORD PTR [esp],eax
c001e59f:	e8 5e f5 ff ff       	call   c001db02 <Vm::inbv(unsigned short)>
c001e5a4:	0f b6 c0             	movzx  eax,al
c001e5a7:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e5aa:	eb 5e                	jmp    c001e60a <Vm::faultHandler(regs*)+0x713>
c001e5ac:	51                   	push   ecx
c001e5ad:	51                   	push   ecx
c001e5ae:	53                   	push   ebx
c001e5af:	68 ef ae 02 c0       	push   0xc002aeef
c001e5b4:	e8 c6 41 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001e5b9:	83 c4 10             	add    esp,0x10
c001e5bc:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e5c1:	74 07                	je     c001e5ca <Vm::faultHandler(regs*)+0x6d3>
c001e5c3:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e5c7:	ed                   	in     eax,dx
c001e5c8:	eb 14                	jmp    c001e5de <Vm::faultHandler(regs*)+0x6e7>
c001e5ca:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001e5cd:	66 31 db             	xor    bx,bx
c001e5d0:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001e5d3:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e5d7:	66 ed                	in     ax,dx
c001e5d9:	0f b7 c0             	movzx  eax,ax
c001e5dc:	09 d8                	or     eax,ebx
c001e5de:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e5e1:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e5e5:	e9 dc 00 00 00       	jmp    c001e6c6 <Vm::faultHandler(regs*)+0x7cf>
c001e5ea:	50                   	push   eax
c001e5eb:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e5ee:	53                   	push   ebx
c001e5ef:	68 f5 ae 02 c0       	push   0xc002aef5
c001e5f4:	e8 86 41 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001e5f9:	58                   	pop    eax
c001e5fa:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001e5fe:	5a                   	pop    edx
c001e5ff:	50                   	push   eax
c001e600:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e604:	50                   	push   eax
c001e605:	e8 0b f5 ff ff       	call   c001db15 <Vm::outbv(unsigned short, unsigned char)>
c001e60a:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e60e:	e9 85 00 00 00       	jmp    c001e698 <Vm::faultHandler(regs*)+0x7a1>
c001e613:	50                   	push   eax
c001e614:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e617:	53                   	push   ebx
c001e618:	68 fe ae 02 c0       	push   0xc002aefe
c001e61d:	e8 5d 41 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001e622:	83 c4 10             	add    esp,0x10
c001e625:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e629:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e62e:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e631:	74 03                	je     c001e636 <Vm::faultHandler(regs*)+0x73f>
c001e633:	ef                   	out    dx,eax
c001e634:	eb ab                	jmp    c001e5e1 <Vm::faultHandler(regs*)+0x6ea>
c001e636:	66 ef                	out    dx,ax
c001e638:	eb a7                	jmp    c001e5e1 <Vm::faultHandler(regs*)+0x6ea>
c001e63a:	55                   	push   ebp
c001e63b:	55                   	push   ebp
c001e63c:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e63f:	68 07 af 02 c0       	push   0xc002af07
c001e644:	e8 36 41 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001e649:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e650:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e654:	89 04 24             	mov    DWORD PTR [esp],eax
c001e657:	e8 a6 f4 ff ff       	call   c001db02 <Vm::inbv(unsigned short)>
c001e65c:	0f b6 c0             	movzx  eax,al
c001e65f:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e662:	eb 31                	jmp    c001e695 <Vm::faultHandler(regs*)+0x79e>
c001e664:	56                   	push   esi
c001e665:	56                   	push   esi
c001e666:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e669:	68 0d af 02 c0       	push   0xc002af0d
c001e66e:	e8 0c 41 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001e673:	83 c4 10             	add    esp,0x10
c001e676:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e679:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e67e:	74 03                	je     c001e683 <Vm::faultHandler(regs*)+0x78c>
c001e680:	ed                   	in     eax,dx
c001e681:	eb 0d                	jmp    c001e690 <Vm::faultHandler(regs*)+0x799>
c001e683:	66 ed                	in     ax,dx
c001e685:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001e688:	0f b7 c0             	movzx  eax,ax
c001e68b:	66 31 d2             	xor    dx,dx
c001e68e:	09 d0                	or     eax,edx
c001e690:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e693:	eb 2e                	jmp    c001e6c3 <Vm::faultHandler(regs*)+0x7cc>
c001e695:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e698:	83 c4 10             	add    esp,0x10
c001e69b:	eb 29                	jmp    c001e6c6 <Vm::faultHandler(regs*)+0x7cf>
c001e69d:	50                   	push   eax
c001e69e:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e6a1:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e6a4:	68 1c af 02 c0       	push   0xc002af1c
c001e6a9:	e8 d1 40 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001e6ae:	83 c4 10             	add    esp,0x10
c001e6b1:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e6b4:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e6b9:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e6bc:	74 03                	je     c001e6c1 <Vm::faultHandler(regs*)+0x7ca>
c001e6be:	ef                   	out    dx,eax
c001e6bf:	eb 02                	jmp    c001e6c3 <Vm::faultHandler(regs*)+0x7cc>
c001e6c1:	66 ef                	out    dx,ax
c001e6c3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e6c6:	b0 01                	mov    al,0x1
c001e6c8:	eb 56                	jmp    c001e720 <Vm::faultHandler(regs*)+0x829>
c001e6ca:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e6ce:	51                   	push   ecx
c001e6cf:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e6d3:	51                   	push   ecx
c001e6d4:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e6d8:	51                   	push   ecx
c001e6d9:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e6dd:	51                   	push   ecx
c001e6de:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e6e2:	52                   	push   edx
c001e6e3:	50                   	push   eax
c001e6e4:	50                   	push   eax
c001e6e5:	68 25 af 02 c0       	push   0xc002af25
c001e6ea:	e8 90 40 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001e6ef:	83 c4 20             	add    esp,0x20
c001e6f2:	83 ec 0c             	sub    esp,0xc
c001e6f5:	6a 60                	push   0x60
c001e6f7:	e8 06 f4 ff ff       	call   c001db02 <Vm::inbv(unsigned short)>
c001e6fc:	83 c4 10             	add    esp,0x10
c001e6ff:	3c 1c                	cmp    al,0x1c
c001e701:	74 04                	je     c001e707 <Vm::faultHandler(regs*)+0x810>
c001e703:	3c 5a                	cmp    al,0x5a
c001e705:	75 eb                	jne    c001e6f2 <Vm::faultHandler(regs*)+0x7fb>
c001e707:	3c 1c                	cmp    al,0x1c
c001e709:	74 04                	je     c001e70f <Vm::faultHandler(regs*)+0x818>
c001e70b:	3c 5a                	cmp    al,0x5a
c001e70d:	75 0f                	jne    c001e71e <Vm::faultHandler(regs*)+0x827>
c001e70f:	83 ec 0c             	sub    esp,0xc
c001e712:	6a 60                	push   0x60
c001e714:	e8 e9 f3 ff ff       	call   c001db02 <Vm::inbv(unsigned short)>
c001e719:	83 c4 10             	add    esp,0x10
c001e71c:	eb e9                	jmp    c001e707 <Vm::faultHandler(regs*)+0x810>
c001e71e:	31 c0                	xor    eax,eax
c001e720:	83 c4 1c             	add    esp,0x1c
c001e723:	5b                   	pop    ebx
c001e724:	5e                   	pop    esi
c001e725:	5f                   	pop    edi
c001e726:	5d                   	pop    ebp
c001e727:	c3                   	ret    

c001e728 <Vm::fpuInternalTo32(unsigned long long)>:
c001e728:	57                   	push   edi
c001e729:	56                   	push   esi
c001e72a:	53                   	push   ebx
c001e72b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e72f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e733:	89 d6                	mov    esi,edx
c001e735:	89 d7                	mov    edi,edx
c001e737:	89 c1                	mov    ecx,eax
c001e739:	c1 ef 14             	shr    edi,0x14
c001e73c:	89 d3                	mov    ebx,edx
c001e73e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001e744:	31 d2                	xor    edx,edx
c001e746:	89 f8                	mov    eax,edi
c001e748:	81 e6 00 00 00 80    	and    esi,0x80000000
c001e74e:	bf ff 00 00 00       	mov    edi,0xff
c001e753:	05 80 fc ff ff       	add    eax,0xfffffc80
c001e758:	83 d2 ff             	adc    edx,0xffffffff
c001e75b:	39 c7                	cmp    edi,eax
c001e75d:	bf 00 00 00 00       	mov    edi,0x0
c001e762:	19 d7                	sbb    edi,edx
c001e764:	72 15                	jb     c001e77b <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001e766:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001e76a:	c1 e0 17             	shl    eax,0x17
c001e76d:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001e773:	09 f1                	or     ecx,esi
c001e775:	09 c1                	or     ecx,eax
c001e777:	89 cf                	mov    edi,ecx
c001e779:	eb 02                	jmp    c001e77d <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001e77b:	31 ff                	xor    edi,edi
c001e77d:	89 f8                	mov    eax,edi
c001e77f:	5b                   	pop    ebx
c001e780:	5e                   	pop    esi
c001e781:	5f                   	pop    edi
c001e782:	c3                   	ret    

c001e783 <Vm::fpuInternalTo64(unsigned long long)>:
c001e783:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e787:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e78b:	c3                   	ret    

c001e78c <Vm::fpu32ToInternal(unsigned int)>:
c001e78c:	57                   	push   edi
c001e78d:	31 ff                	xor    edi,edi
c001e78f:	56                   	push   esi
c001e790:	53                   	push   ebx
c001e791:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e795:	89 cb                	mov    ebx,ecx
c001e797:	89 ce                	mov    esi,ecx
c001e799:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001e79f:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001e7a5:	c1 e9 17             	shr    ecx,0x17
c001e7a8:	89 f0                	mov    eax,esi
c001e7aa:	0f b6 d1             	movzx  edx,cl
c001e7ad:	81 c2 80 03 00 00    	add    edx,0x380
c001e7b3:	89 d1                	mov    ecx,edx
c001e7b5:	89 fa                	mov    edx,edi
c001e7b7:	c1 e1 14             	shl    ecx,0x14
c001e7ba:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001e7be:	c1 e0 1d             	shl    eax,0x1d
c001e7c1:	89 d7                	mov    edi,edx
c001e7c3:	89 c6                	mov    esi,eax
c001e7c5:	89 ca                	mov    edx,ecx
c001e7c7:	89 f0                	mov    eax,esi
c001e7c9:	09 fa                	or     edx,edi
c001e7cb:	09 da                	or     edx,ebx
c001e7cd:	5b                   	pop    ebx
c001e7ce:	5e                   	pop    esi
c001e7cf:	5f                   	pop    edi
c001e7d0:	c3                   	ret    

c001e7d1 <Vm::fpu64ToInternal(unsigned long long)>:
c001e7d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e7d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e7d9:	c3                   	ret    

c001e7da <Vm::fpuFloatToLong(unsigned long long)>:
c001e7da:	57                   	push   edi
c001e7db:	31 c0                	xor    eax,eax
c001e7dd:	56                   	push   esi
c001e7de:	31 d2                	xor    edx,edx
c001e7e0:	53                   	push   ebx
c001e7e1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e7e5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e7e9:	89 d9                	mov    ecx,ebx
c001e7eb:	c1 e9 14             	shr    ecx,0x14
c001e7ee:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001e7f4:	89 cf                	mov    edi,ecx
c001e7f6:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001e7fc:	78 33                	js     c001e831 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001e7fe:	89 d9                	mov    ecx,ebx
c001e800:	89 f0                	mov    eax,esi
c001e802:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001e808:	81 c9 00 00 10 00    	or     ecx,0x100000
c001e80e:	89 ca                	mov    edx,ecx
c001e810:	b9 34 00 00 00       	mov    ecx,0x34
c001e815:	29 f9                	sub    ecx,edi
c001e817:	0f ad d0             	shrd   eax,edx,cl
c001e81a:	d3 fa                	sar    edx,cl
c001e81c:	f6 c1 20             	test   cl,0x20
c001e81f:	74 05                	je     c001e826 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001e821:	89 d0                	mov    eax,edx
c001e823:	c1 fa 1f             	sar    edx,0x1f
c001e826:	85 db                	test   ebx,ebx
c001e828:	79 07                	jns    c001e831 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001e82a:	f7 d8                	neg    eax
c001e82c:	83 d2 00             	adc    edx,0x0
c001e82f:	f7 da                	neg    edx
c001e831:	5b                   	pop    ebx
c001e832:	5e                   	pop    esi
c001e833:	5f                   	pop    edi
c001e834:	c3                   	ret    

c001e835 <Vm::fpuULongToFloat(unsigned long long)>:
c001e835:	57                   	push   edi
c001e836:	31 c9                	xor    ecx,ecx
c001e838:	56                   	push   esi
c001e839:	53                   	push   ebx
c001e83a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e83e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001e842:	0f ba e7 14          	bt     edi,0x14
c001e846:	72 07                	jb     c001e84f <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001e848:	01 f6                	add    esi,esi
c001e84a:	11 ff                	adc    edi,edi
c001e84c:	41                   	inc    ecx
c001e84d:	eb f3                	jmp    c001e842 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001e84f:	89 fa                	mov    edx,edi
c001e851:	89 f0                	mov    eax,esi
c001e853:	bb 33 04 00 00       	mov    ebx,0x433
c001e858:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001e85e:	29 cb                	sub    ebx,ecx
c001e860:	89 d9                	mov    ecx,ebx
c001e862:	5b                   	pop    ebx
c001e863:	c1 e1 14             	shl    ecx,0x14
c001e866:	5e                   	pop    esi
c001e867:	09 ca                	or     edx,ecx
c001e869:	5f                   	pop    edi
c001e86a:	c3                   	ret    

c001e86b <Vm::fpuLongToFloat(long long)>:
c001e86b:	56                   	push   esi
c001e86c:	31 c0                	xor    eax,eax
c001e86e:	53                   	push   ebx
c001e86f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e873:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e877:	39 c8                	cmp    eax,ecx
c001e879:	19 d8                	sbb    eax,ebx
c001e87b:	7d 04                	jge    c001e881 <Vm::fpuLongToFloat(long long)+0x16>
c001e87d:	31 f6                	xor    esi,esi
c001e87f:	eb 0c                	jmp    c001e88d <Vm::fpuLongToFloat(long long)+0x22>
c001e881:	f7 d9                	neg    ecx
c001e883:	be 01 00 00 00       	mov    esi,0x1
c001e888:	83 d3 00             	adc    ebx,0x0
c001e88b:	f7 db                	neg    ebx
c001e88d:	31 c0                	xor    eax,eax
c001e88f:	0f ba e3 14          	bt     ebx,0x14
c001e893:	72 07                	jb     c001e89c <Vm::fpuLongToFloat(long long)+0x31>
c001e895:	01 c9                	add    ecx,ecx
c001e897:	11 db                	adc    ebx,ebx
c001e899:	40                   	inc    eax
c001e89a:	eb f3                	jmp    c001e88f <Vm::fpuLongToFloat(long long)+0x24>
c001e89c:	ba 33 04 00 00       	mov    edx,0x433
c001e8a1:	29 c2                	sub    edx,eax
c001e8a3:	89 c8                	mov    eax,ecx
c001e8a5:	c1 e2 14             	shl    edx,0x14
c001e8a8:	89 d9                	mov    ecx,ebx
c001e8aa:	89 f3                	mov    ebx,esi
c001e8ac:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001e8b2:	09 ca                	or     edx,ecx
c001e8b4:	84 db                	test   bl,bl
c001e8b6:	74 06                	je     c001e8be <Vm::fpuLongToFloat(long long)+0x53>
c001e8b8:	81 ca 00 00 00 80    	or     edx,0x80000000
c001e8be:	5b                   	pop    ebx
c001e8bf:	5e                   	pop    esi
c001e8c0:	c3                   	ret    

c001e8c1 <Vm::fpuGet0()>:
c001e8c1:	31 c0                	xor    eax,eax
c001e8c3:	31 d2                	xor    edx,edx
c001e8c5:	c3                   	ret    

c001e8c6 <Vm::fpuGet1()>:
c001e8c6:	b8 01 00 00 00       	mov    eax,0x1
c001e8cb:	31 d2                	xor    edx,edx
c001e8cd:	c3                   	ret    

c001e8ce <Vm::fpuGetPi()>:
c001e8ce:	b8 03 00 00 00       	mov    eax,0x3
c001e8d3:	31 d2                	xor    edx,edx
c001e8d5:	c3                   	ret    

c001e8d6 <Vm::fpuGetLog2E()>:
c001e8d6:	83 ec 18             	sub    esp,0x18
c001e8d9:	68 84 af 02 c0       	push   0xc002af84
c001e8de:	e8 ee af ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c001e8e3:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e8e8:	31 d2                	xor    edx,edx
c001e8ea:	83 c4 1c             	add    esp,0x1c
c001e8ed:	c3                   	ret    

c001e8ee <Vm::fpuGetLogE2()>:
c001e8ee:	83 ec 18             	sub    esp,0x18
c001e8f1:	68 90 af 02 c0       	push   0xc002af90
c001e8f6:	e8 d6 af ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c001e8fb:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e900:	31 d2                	xor    edx,edx
c001e902:	83 c4 1c             	add    esp,0x1c
c001e905:	c3                   	ret    

c001e906 <Vm::fpuGetLog210()>:
c001e906:	83 ec 18             	sub    esp,0x18
c001e909:	68 9c af 02 c0       	push   0xc002af9c
c001e90e:	e8 be af ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c001e913:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e918:	31 d2                	xor    edx,edx
c001e91a:	83 c4 1c             	add    esp,0x1c
c001e91d:	c3                   	ret    

c001e91e <Vm::fpuGetLog102()>:
c001e91e:	83 ec 18             	sub    esp,0x18
c001e921:	68 a9 af 02 c0       	push   0xc002afa9
c001e926:	e8 a6 af ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c001e92b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e930:	31 d2                	xor    edx,edx
c001e932:	83 c4 1c             	add    esp,0x1c
c001e935:	c3                   	ret    

c001e936 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001e936:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e93a:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001e93e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e942:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001e946:	0f 92 c0             	setb   al
c001e949:	c3                   	ret    

c001e94a <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001e94a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e94e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e952:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001e956:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001e95a:	09 c2                	or     edx,eax
c001e95c:	0f 94 c0             	sete   al
c001e95f:	c3                   	ret    

c001e960 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001e960:	57                   	push   edi
c001e961:	56                   	push   esi
c001e962:	53                   	push   ebx
c001e963:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e967:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e96b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001e96f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001e973:	57                   	push   edi
c001e974:	56                   	push   esi
c001e975:	53                   	push   ebx
c001e976:	51                   	push   ecx
c001e977:	e8 ce ff ff ff       	call   c001e94a <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001e97c:	83 c4 10             	add    esp,0x10
c001e97f:	88 c2                	mov    dl,al
c001e981:	31 c0                	xor    eax,eax
c001e983:	84 d2                	test   dl,dl
c001e985:	75 0c                	jne    c001e993 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001e987:	57                   	push   edi
c001e988:	56                   	push   esi
c001e989:	53                   	push   ebx
c001e98a:	51                   	push   ecx
c001e98b:	e8 a6 ff ff ff       	call   c001e936 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001e990:	83 c4 10             	add    esp,0x10
c001e993:	83 e0 01             	and    eax,0x1
c001e996:	5b                   	pop    ebx
c001e997:	88 c1                	mov    cl,al
c001e999:	83 e2 01             	and    edx,0x1
c001e99c:	a0 a1 e1 02 c0       	mov    al,ds:0xc002e1a1
c001e9a1:	c1 e2 06             	shl    edx,0x6
c001e9a4:	83 e0 ba             	and    eax,0xffffffba
c001e9a7:	5e                   	pop    esi
c001e9a8:	09 c8                	or     eax,ecx
c001e9aa:	5f                   	pop    edi
c001e9ab:	09 d0                	or     eax,edx
c001e9ad:	a2 a1 e1 02 c0       	mov    ds:0xc002e1a1,al
c001e9b2:	c3                   	ret    

c001e9b3 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001e9b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e9b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e9bb:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001e9bf:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001e9c3:	c3                   	ret    

c001e9c4 <Vm::fpuAbs(unsigned long long)>:
c001e9c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e9cc:	c3                   	ret    

c001e9cd <Vm::fpuChs(unsigned long long)>:
c001e9cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e9d5:	f7 d8                	neg    eax
c001e9d7:	83 d2 00             	adc    edx,0x0
c001e9da:	f7 da                	neg    edx
c001e9dc:	c3                   	ret    

c001e9dd <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001e9dd:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001e9e1:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001e9e6:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001e9ea:	eb c7                	jmp    c001e9b3 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001e9ec <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001e9ec:	53                   	push   ebx
c001e9ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e9f1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e9f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e9f9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e9fd:	0f af ca             	imul   ecx,edx
c001ea00:	0f af d8             	imul   ebx,eax
c001ea03:	f7 e2                	mul    edx
c001ea05:	01 d9                	add    ecx,ebx
c001ea07:	5b                   	pop    ebx
c001ea08:	01 ca                	add    edx,ecx
c001ea0a:	c3                   	ret    

c001ea0b <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001ea0b:	83 ec 0c             	sub    esp,0xc
c001ea0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea1e:	e8 29 6b 00 00       	call   c002554c <__udivdi3>
c001ea23:	83 c4 1c             	add    esp,0x1c
c001ea26:	c3                   	ret    

c001ea27 <Vm::fpuSquare(unsigned long long)>:
c001ea27:	50                   	push   eax
c001ea28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ea2c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ea30:	52                   	push   edx
c001ea31:	50                   	push   eax
c001ea32:	52                   	push   edx
c001ea33:	50                   	push   eax
c001ea34:	e8 b3 ff ff ff       	call   c001e9ec <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ea39:	83 c4 14             	add    esp,0x14
c001ea3c:	c3                   	ret    

c001ea3d <Vm::fpuGetReg(int)>:
c001ea3d:	83 ec 0c             	sub    esp,0xc
c001ea40:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001ea45:	76 10                	jbe    c001ea57 <Vm::fpuGetReg(int)+0x1a>
c001ea47:	83 ec 0c             	sub    esp,0xc
c001ea4a:	68 b6 af 02 c0       	push   0xc002afb6
c001ea4f:	e8 7d ae ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c001ea54:	83 c4 10             	add    esp,0x10
c001ea57:	a0 a1 e1 02 c0       	mov    al,ds:0xc002e1a1
c001ea5c:	b9 08 00 00 00       	mov    ecx,0x8
c001ea61:	c0 e8 03             	shr    al,0x3
c001ea64:	83 e0 07             	and    eax,0x7
c001ea67:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ea6b:	99                   	cdq    
c001ea6c:	f7 f9                	idiv   ecx
c001ea6e:	8b 04 d5 a4 e1 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd1e5c]
c001ea75:	8b 14 d5 a8 e1 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd1e58]
c001ea7c:	83 c4 0c             	add    esp,0xc
c001ea7f:	c3                   	ret    

c001ea80 <Vm::fpuSetReg(int, unsigned long long)>:
c001ea80:	57                   	push   edi
c001ea81:	56                   	push   esi
c001ea82:	52                   	push   edx
c001ea83:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ea87:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ea8b:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001ea90:	76 10                	jbe    c001eaa2 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001ea92:	83 ec 0c             	sub    esp,0xc
c001ea95:	68 c9 af 02 c0       	push   0xc002afc9
c001ea9a:	e8 32 ae ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c001ea9f:	83 c4 10             	add    esp,0x10
c001eaa2:	a0 a1 e1 02 c0       	mov    al,ds:0xc002e1a1
c001eaa7:	b9 08 00 00 00       	mov    ecx,0x8
c001eaac:	c0 e8 03             	shr    al,0x3
c001eaaf:	83 e0 07             	and    eax,0x7
c001eab2:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001eab6:	99                   	cdq    
c001eab7:	f7 f9                	idiv   ecx
c001eab9:	89 34 d5 a4 e1 02 c0 	mov    DWORD PTR [edx*8-0x3ffd1e5c],esi
c001eac0:	89 3c d5 a8 e1 02 c0 	mov    DWORD PTR [edx*8-0x3ffd1e58],edi
c001eac7:	58                   	pop    eax
c001eac8:	5e                   	pop    esi
c001eac9:	5f                   	pop    edi
c001eaca:	c3                   	ret    

c001eacb <Vm::fpuPush(unsigned long long)>:
c001eacb:	a0 a1 e1 02 c0       	mov    al,ds:0xc002e1a1
c001ead0:	c0 e8 03             	shr    al,0x3
c001ead3:	83 e0 07             	and    eax,0x7
c001ead6:	83 c0 07             	add    eax,0x7
c001ead9:	88 c2                	mov    dl,al
c001eadb:	83 e0 07             	and    eax,0x7
c001eade:	83 e2 07             	and    edx,0x7
c001eae1:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001eae8:	8a 15 a1 e1 02 c0    	mov    dl,BYTE PTR ds:0xc002e1a1
c001eaee:	83 e2 c7             	and    edx,0xffffffc7
c001eaf1:	09 ca                	or     edx,ecx
c001eaf3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001eaf7:	88 15 a1 e1 02 c0    	mov    BYTE PTR ds:0xc002e1a1,dl
c001eafd:	89 0c c5 a8 e1 02 c0 	mov    DWORD PTR [eax*8-0x3ffd1e58],ecx
c001eb04:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001eb08:	89 14 c5 a4 e1 02 c0 	mov    DWORD PTR [eax*8-0x3ffd1e5c],edx
c001eb0f:	a1 e4 e1 02 c0       	mov    eax,ds:0xc002e1e4
c001eb14:	83 f8 08             	cmp    eax,0x8
c001eb17:	75 08                	jne    c001eb21 <Vm::fpuPush(unsigned long long)+0x56>
c001eb19:	80 0d a0 e1 02 c0 40 	or     BYTE PTR ds:0xc002e1a0,0x40
c001eb20:	c3                   	ret    
c001eb21:	40                   	inc    eax
c001eb22:	a3 e4 e1 02 c0       	mov    ds:0xc002e1e4,eax
c001eb27:	c3                   	ret    

c001eb28 <Vm::fpuPop()>:
c001eb28:	8a 0d a1 e1 02 c0    	mov    cl,BYTE PTR ds:0xc002e1a1
c001eb2e:	53                   	push   ebx
c001eb2f:	c0 e9 03             	shr    cl,0x3
c001eb32:	8a 1d a1 e1 02 c0    	mov    bl,BYTE PTR ds:0xc002e1a1
c001eb38:	83 e1 07             	and    ecx,0x7
c001eb3b:	83 e3 c7             	and    ebx,0xffffffc7
c001eb3e:	8b 04 cd a4 e1 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd1e5c]
c001eb45:	8b 14 cd a8 e1 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd1e58]
c001eb4c:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001eb53:	83 e1 38             	and    ecx,0x38
c001eb56:	09 d9                	or     ecx,ebx
c001eb58:	88 0d a1 e1 02 c0    	mov    BYTE PTR ds:0xc002e1a1,cl
c001eb5e:	8b 0d e4 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e1e4
c001eb64:	85 c9                	test   ecx,ecx
c001eb66:	74 09                	je     c001eb71 <Vm::fpuPop()+0x49>
c001eb68:	49                   	dec    ecx
c001eb69:	89 0d e4 e1 02 c0    	mov    DWORD PTR ds:0xc002e1e4,ecx
c001eb6f:	eb 07                	jmp    c001eb78 <Vm::fpuPop()+0x50>
c001eb71:	80 0d a0 e1 02 c0 40 	or     BYTE PTR ds:0xc002e1a0,0x40
c001eb78:	5b                   	pop    ebx
c001eb79:	c3                   	ret    

c001eb7a <Vm::x87Handler(regs*)>:
c001eb7a:	55                   	push   ebp
c001eb7b:	57                   	push   edi
c001eb7c:	56                   	push   esi
c001eb7d:	53                   	push   ebx
c001eb7e:	83 ec 1c             	sub    esp,0x1c
c001eb81:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001eb85:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001eb8a:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001eb8d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001eb95:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001eb99:	50                   	push   eax
c001eb9a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001eb9e:	50                   	push   eax
c001eb9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001eba3:	50                   	push   eax
c001eba4:	53                   	push   ebx
c001eba5:	e8 58 a5 ff ff       	call   c0019102 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001ebaa:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001ebad:	83 c4 10             	add    esp,0x10
c001ebb0:	89 c6                	mov    esi,eax
c001ebb2:	80 fa d9             	cmp    dl,0xd9
c001ebb5:	0f 85 52 01 00 00    	jne    c001ed0d <Vm::x87Handler(regs*)+0x193>
c001ebbb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ebbf:	8d 50 20             	lea    edx,[eax+0x20]
c001ebc2:	80 fa 0e             	cmp    dl,0xe
c001ebc5:	0f 87 86 00 00 00    	ja     c001ec51 <Vm::x87Handler(regs*)+0xd7>
c001ebcb:	0f b6 d2             	movzx  edx,dl
c001ebce:	ff 24 95 dc af 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5024]
c001ebd5:	e8 e7 fc ff ff       	call   c001e8c1 <Vm::fpuGet0()>
c001ebda:	eb 05                	jmp    c001ebe1 <Vm::x87Handler(regs*)+0x67>
c001ebdc:	e8 e5 fc ff ff       	call   c001e8c6 <Vm::fpuGet1()>
c001ebe1:	57                   	push   edi
c001ebe2:	57                   	push   edi
c001ebe3:	52                   	push   edx
c001ebe4:	50                   	push   eax
c001ebe5:	e8 e1 fe ff ff       	call   c001eacb <Vm::fpuPush(unsigned long long)>
c001ebea:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ebee:	83 c4 10             	add    esp,0x10
c001ebf1:	b0 01                	mov    al,0x1
c001ebf3:	e9 e3 09 00 00       	jmp    c001f5db <Vm::x87Handler(regs*)+0xa61>
c001ebf8:	83 ec 0c             	sub    esp,0xc
c001ebfb:	6a 00                	push   0x0
c001ebfd:	e8 3b fe ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001ec02:	59                   	pop    ecx
c001ec03:	5e                   	pop    esi
c001ec04:	52                   	push   edx
c001ec05:	50                   	push   eax
c001ec06:	e8 c2 fd ff ff       	call   c001e9cd <Vm::fpuChs(unsigned long long)>
c001ec0b:	eb 13                	jmp    c001ec20 <Vm::x87Handler(regs*)+0xa6>
c001ec0d:	83 ec 0c             	sub    esp,0xc
c001ec10:	6a 00                	push   0x0
c001ec12:	e8 26 fe ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001ec17:	5f                   	pop    edi
c001ec18:	5d                   	pop    ebp
c001ec19:	52                   	push   edx
c001ec1a:	50                   	push   eax
c001ec1b:	e8 a4 fd ff ff       	call   c001e9c4 <Vm::fpuAbs(unsigned long long)>
c001ec20:	83 c4 0c             	add    esp,0xc
c001ec23:	52                   	push   edx
c001ec24:	50                   	push   eax
c001ec25:	6a 00                	push   0x0
c001ec27:	e8 54 fe ff ff       	call   c001ea80 <Vm::fpuSetReg(int, unsigned long long)>
c001ec2c:	eb bc                	jmp    c001ebea <Vm::x87Handler(regs*)+0x70>
c001ec2e:	e8 d3 fc ff ff       	call   c001e906 <Vm::fpuGetLog210()>
c001ec33:	eb ac                	jmp    c001ebe1 <Vm::x87Handler(regs*)+0x67>
c001ec35:	e8 9c fc ff ff       	call   c001e8d6 <Vm::fpuGetLog2E()>
c001ec3a:	eb a5                	jmp    c001ebe1 <Vm::x87Handler(regs*)+0x67>
c001ec3c:	e8 8d fc ff ff       	call   c001e8ce <Vm::fpuGetPi()>
c001ec41:	eb 9e                	jmp    c001ebe1 <Vm::x87Handler(regs*)+0x67>
c001ec43:	e8 d6 fc ff ff       	call   c001e91e <Vm::fpuGetLog102()>
c001ec48:	eb 97                	jmp    c001ebe1 <Vm::x87Handler(regs*)+0x67>
c001ec4a:	e8 9f fc ff ff       	call   c001e8ee <Vm::fpuGetLogE2()>
c001ec4f:	eb 90                	jmp    c001ebe1 <Vm::x87Handler(regs*)+0x67>
c001ec51:	8d 50 40             	lea    edx,[eax+0x40]
c001ec54:	80 fa 07             	cmp    dl,0x7
c001ec57:	77 15                	ja     c001ec6e <Vm::x87Handler(regs*)+0xf4>
c001ec59:	83 ec 0c             	sub    esp,0xc
c001ec5c:	2d c0 00 00 00       	sub    eax,0xc0
c001ec61:	50                   	push   eax
c001ec62:	e8 d6 fd ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001ec67:	59                   	pop    ecx
c001ec68:	5e                   	pop    esi
c001ec69:	e9 75 ff ff ff       	jmp    c001ebe3 <Vm::x87Handler(regs*)+0x69>
c001ec6e:	8d 50 38             	lea    edx,[eax+0x38]
c001ec71:	80 fa 07             	cmp    dl,0x7
c001ec74:	77 3c                	ja     c001ecb2 <Vm::x87Handler(regs*)+0x138>
c001ec76:	83 ec 0c             	sub    esp,0xc
c001ec79:	2d c8 00 00 00       	sub    eax,0xc8
c001ec7e:	50                   	push   eax
c001ec7f:	e8 b9 fd ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001ec84:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ec8b:	89 c6                	mov    esi,eax
c001ec8d:	89 d7                	mov    edi,edx
c001ec8f:	e8 a9 fd ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001ec94:	83 c4 0c             	add    esp,0xc
c001ec97:	52                   	push   edx
c001ec98:	50                   	push   eax
c001ec99:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ec9d:	2d c8 00 00 00       	sub    eax,0xc8
c001eca2:	50                   	push   eax
c001eca3:	e8 d8 fd ff ff       	call   c001ea80 <Vm::fpuSetReg(int, unsigned long long)>
c001eca8:	83 c4 0c             	add    esp,0xc
c001ecab:	57                   	push   edi
c001ecac:	56                   	push   esi
c001ecad:	e9 73 ff ff ff       	jmp    c001ec25 <Vm::x87Handler(regs*)+0xab>
c001ecb2:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ecb6:	84 d2                	test   dl,dl
c001ecb8:	75 0f                	jne    c001ecc9 <Vm::x87Handler(regs*)+0x14f>
c001ecba:	83 ec 0c             	sub    esp,0xc
c001ecbd:	ff 36                	push   DWORD PTR [esi]
c001ecbf:	e8 c8 fa ff ff       	call   c001e78c <Vm::fpu32ToInternal(unsigned int)>
c001ecc4:	e9 bf 00 00 00       	jmp    c001ed88 <Vm::x87Handler(regs*)+0x20e>
c001ecc9:	80 fa 03             	cmp    dl,0x3
c001eccc:	75 13                	jne    c001ece1 <Vm::x87Handler(regs*)+0x167>
c001ecce:	e8 55 fe ff ff       	call   c001eb28 <Vm::fpuPop()>
c001ecd3:	55                   	push   ebp
c001ecd4:	55                   	push   ebp
c001ecd5:	52                   	push   edx
c001ecd6:	50                   	push   eax
c001ecd7:	e8 4c fa ff ff       	call   c001e728 <Vm::fpuInternalTo32(unsigned long long)>
c001ecdc:	e9 88 00 00 00       	jmp    c001ed69 <Vm::x87Handler(regs*)+0x1ef>
c001ece1:	80 fa 05             	cmp    dl,0x5
c001ece4:	75 0e                	jne    c001ecf4 <Vm::x87Handler(regs*)+0x17a>
c001ece6:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ece9:	66 a3 a2 e1 02 c0    	mov    ds:0xc002e1a2,ax
c001ecef:	e9 df 00 00 00       	jmp    c001edd3 <Vm::x87Handler(regs*)+0x259>
c001ecf4:	31 c0                	xor    eax,eax
c001ecf6:	80 fa 07             	cmp    dl,0x7
c001ecf9:	0f 85 dc 08 00 00    	jne    c001f5db <Vm::x87Handler(regs*)+0xa61>
c001ecff:	66 a1 a2 e1 02 c0    	mov    ax,ds:0xc002e1a2
c001ed05:	66 89 06             	mov    WORD PTR [esi],ax
c001ed08:	e9 c6 00 00 00       	jmp    c001edd3 <Vm::x87Handler(regs*)+0x259>
c001ed0d:	80 fa d8             	cmp    dl,0xd8
c001ed10:	0f 84 c9 00 00 00    	je     c001eddf <Vm::x87Handler(regs*)+0x265>
c001ed16:	80 fa dc             	cmp    dl,0xdc
c001ed19:	0f 84 0d 02 00 00    	je     c001ef2c <Vm::x87Handler(regs*)+0x3b2>
c001ed1f:	80 fa de             	cmp    dl,0xde
c001ed22:	0f 84 cd 02 00 00    	je     c001eff5 <Vm::x87Handler(regs*)+0x47b>
c001ed28:	80 fa dd             	cmp    dl,0xdd
c001ed2b:	0f 84 5f 04 00 00    	je     c001f190 <Vm::x87Handler(regs*)+0x616>
c001ed31:	80 fa da             	cmp    dl,0xda
c001ed34:	0f 84 24 05 00 00    	je     c001f25e <Vm::x87Handler(regs*)+0x6e4>
c001ed3a:	80 fa df             	cmp    dl,0xdf
c001ed3d:	0f 84 68 05 00 00    	je     c001f2ab <Vm::x87Handler(regs*)+0x731>
c001ed43:	31 c0                	xor    eax,eax
c001ed45:	80 fa db             	cmp    dl,0xdb
c001ed48:	0f 85 8d 08 00 00    	jne    c001f5db <Vm::x87Handler(regs*)+0xa61>
c001ed4e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ed52:	80 fa 03             	cmp    dl,0x3
c001ed55:	0f 85 70 06 00 00    	jne    c001f3cb <Vm::x87Handler(regs*)+0x851>
c001ed5b:	e8 c8 fd ff ff       	call   c001eb28 <Vm::fpuPop()>
c001ed60:	55                   	push   ebp
c001ed61:	55                   	push   ebp
c001ed62:	52                   	push   edx
c001ed63:	50                   	push   eax
c001ed64:	e8 71 fa ff ff       	call   c001e7da <Vm::fpuFloatToLong(unsigned long long)>
c001ed69:	83 c4 10             	add    esp,0x10
c001ed6c:	89 06                	mov    DWORD PTR [esi],eax
c001ed6e:	eb 63                	jmp    c001edd3 <Vm::x87Handler(regs*)+0x259>
c001ed70:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ed74:	84 d2                	test   dl,dl
c001ed76:	0f 85 e6 05 00 00    	jne    c001f362 <Vm::x87Handler(regs*)+0x7e8>
c001ed7c:	57                   	push   edi
c001ed7d:	57                   	push   edi
c001ed7e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ed81:	ff 36                	push   DWORD PTR [esi]
c001ed83:	e8 49 fa ff ff       	call   c001e7d1 <Vm::fpu64ToInternal(unsigned long long)>
c001ed88:	5e                   	pop    esi
c001ed89:	5f                   	pop    edi
c001ed8a:	52                   	push   edx
c001ed8b:	50                   	push   eax
c001ed8c:	e8 3a fd ff ff       	call   c001eacb <Vm::fpuPush(unsigned long long)>
c001ed91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ed95:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ed98:	e9 51 fe ff ff       	jmp    c001ebee <Vm::x87Handler(regs*)+0x74>
c001ed9d:	80 fa 03             	cmp    dl,0x3
c001eda0:	0f 85 d7 06 00 00    	jne    c001f47d <Vm::x87Handler(regs*)+0x903>
c001eda6:	57                   	push   edi
c001eda7:	57                   	push   edi
c001eda8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001edab:	ff 36                	push   DWORD PTR [esi]
c001edad:	e8 1f fa ff ff       	call   c001e7d1 <Vm::fpu64ToInternal(unsigned long long)>
c001edb2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001edb9:	89 c6                	mov    esi,eax
c001edbb:	89 d7                	mov    edi,edx
c001edbd:	e8 7b fc ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001edc2:	57                   	push   edi
c001edc3:	56                   	push   esi
c001edc4:	52                   	push   edx
c001edc5:	50                   	push   eax
c001edc6:	e8 95 fb ff ff       	call   c001e960 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001edcb:	83 c4 20             	add    esp,0x20
c001edce:	e8 55 fd ff ff       	call   c001eb28 <Vm::fpuPop()>
c001edd3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001edd7:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001edda:	e9 12 fe ff ff       	jmp    c001ebf1 <Vm::x87Handler(regs*)+0x77>
c001eddf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ede3:	8d 50 40             	lea    edx,[eax+0x40]
c001ede6:	80 fa 07             	cmp    dl,0x7
c001ede9:	77 29                	ja     c001ee14 <Vm::x87Handler(regs*)+0x29a>
c001edeb:	83 ec 0c             	sub    esp,0xc
c001edee:	2d c0 00 00 00       	sub    eax,0xc0
c001edf3:	50                   	push   eax
c001edf4:	e8 44 fc ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001edf9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ee00:	89 c6                	mov    esi,eax
c001ee02:	89 d7                	mov    edi,edx
c001ee04:	e8 34 fc ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001ee09:	57                   	push   edi
c001ee0a:	56                   	push   esi
c001ee0b:	52                   	push   edx
c001ee0c:	50                   	push   eax
c001ee0d:	e8 a1 fb ff ff       	call   c001e9b3 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ee12:	eb 2f                	jmp    c001ee43 <Vm::x87Handler(regs*)+0x2c9>
c001ee14:	8d 50 38             	lea    edx,[eax+0x38]
c001ee17:	80 fa 07             	cmp    dl,0x7
c001ee1a:	77 2f                	ja     c001ee4b <Vm::x87Handler(regs*)+0x2d1>
c001ee1c:	83 ec 0c             	sub    esp,0xc
c001ee1f:	2d c8 00 00 00       	sub    eax,0xc8
c001ee24:	50                   	push   eax
c001ee25:	e8 13 fc ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001ee2a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ee31:	89 c6                	mov    esi,eax
c001ee33:	89 d7                	mov    edi,edx
c001ee35:	e8 03 fc ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001ee3a:	57                   	push   edi
c001ee3b:	56                   	push   esi
c001ee3c:	52                   	push   edx
c001ee3d:	50                   	push   eax
c001ee3e:	e8 a9 fb ff ff       	call   c001e9ec <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ee43:	83 c4 1c             	add    esp,0x1c
c001ee46:	e9 d8 fd ff ff       	jmp    c001ec23 <Vm::x87Handler(regs*)+0xa9>
c001ee4b:	8d 50 30             	lea    edx,[eax+0x30]
c001ee4e:	80 fa 07             	cmp    dl,0x7
c001ee51:	77 0d                	ja     c001ee60 <Vm::x87Handler(regs*)+0x2e6>
c001ee53:	83 ec 0c             	sub    esp,0xc
c001ee56:	2d d0 00 00 00       	sub    eax,0xd0
c001ee5b:	e9 99 03 00 00       	jmp    c001f1f9 <Vm::x87Handler(regs*)+0x67f>
c001ee60:	8d 50 28             	lea    edx,[eax+0x28]
c001ee63:	80 fa 07             	cmp    dl,0x7
c001ee66:	77 0d                	ja     c001ee75 <Vm::x87Handler(regs*)+0x2fb>
c001ee68:	83 ec 0c             	sub    esp,0xc
c001ee6b:	2d d8 00 00 00       	sub    eax,0xd8
c001ee70:	e9 c0 03 00 00       	jmp    c001f235 <Vm::x87Handler(regs*)+0x6bb>
c001ee75:	8d 50 20             	lea    edx,[eax+0x20]
c001ee78:	80 fa 07             	cmp    dl,0x7
c001ee7b:	77 1b                	ja     c001ee98 <Vm::x87Handler(regs*)+0x31e>
c001ee7d:	83 ec 0c             	sub    esp,0xc
c001ee80:	2d e0 00 00 00       	sub    eax,0xe0
c001ee85:	50                   	push   eax
c001ee86:	e8 b2 fb ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001ee8b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ee92:	89 c6                	mov    esi,eax
c001ee94:	89 d7                	mov    edi,edx
c001ee96:	eb 22                	jmp    c001eeba <Vm::x87Handler(regs*)+0x340>
c001ee98:	8d 50 18             	lea    edx,[eax+0x18]
c001ee9b:	80 fa 07             	cmp    dl,0x7
c001ee9e:	77 2d                	ja     c001eecd <Vm::x87Handler(regs*)+0x353>
c001eea0:	83 ec 0c             	sub    esp,0xc
c001eea3:	6a 00                	push   0x0
c001eea5:	e8 93 fb ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001eeaa:	89 c6                	mov    esi,eax
c001eeac:	89 d7                	mov    edi,edx
c001eeae:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eeb2:	2d e8 00 00 00       	sub    eax,0xe8
c001eeb7:	89 04 24             	mov    DWORD PTR [esp],eax
c001eeba:	e8 7e fb ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001eebf:	57                   	push   edi
c001eec0:	56                   	push   esi
c001eec1:	52                   	push   edx
c001eec2:	50                   	push   eax
c001eec3:	e8 15 fb ff ff       	call   c001e9dd <Vm::fpuSub(unsigned long long, unsigned long long)>
c001eec8:	e9 76 ff ff ff       	jmp    c001ee43 <Vm::x87Handler(regs*)+0x2c9>
c001eecd:	8d 50 10             	lea    edx,[eax+0x10]
c001eed0:	80 fa 07             	cmp    dl,0x7
c001eed3:	77 1b                	ja     c001eef0 <Vm::x87Handler(regs*)+0x376>
c001eed5:	83 ec 0c             	sub    esp,0xc
c001eed8:	2d f0 00 00 00       	sub    eax,0xf0
c001eedd:	50                   	push   eax
c001eede:	e8 5a fb ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001eee3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eeea:	89 c6                	mov    esi,eax
c001eeec:	89 d7                	mov    edi,edx
c001eeee:	eb 22                	jmp    c001ef12 <Vm::x87Handler(regs*)+0x398>
c001eef0:	3c f7                	cmp    al,0xf7
c001eef2:	0f 86 d1 03 00 00    	jbe    c001f2c9 <Vm::x87Handler(regs*)+0x74f>
c001eef8:	83 ec 0c             	sub    esp,0xc
c001eefb:	6a 00                	push   0x0
c001eefd:	e8 3b fb ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001ef02:	89 c6                	mov    esi,eax
c001ef04:	89 d7                	mov    edi,edx
c001ef06:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef0a:	2d f8 00 00 00       	sub    eax,0xf8
c001ef0f:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef12:	e8 26 fb ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001ef17:	57                   	push   edi
c001ef18:	56                   	push   esi
c001ef19:	52                   	push   edx
c001ef1a:	50                   	push   eax
c001ef1b:	e8 eb fa ff ff       	call   c001ea0b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ef20:	83 c4 1c             	add    esp,0x1c
c001ef23:	52                   	push   edx
c001ef24:	50                   	push   eax
c001ef25:	6a 00                	push   0x0
c001ef27:	e9 51 02 00 00       	jmp    c001f17d <Vm::x87Handler(regs*)+0x603>
c001ef2c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef30:	8d 50 40             	lea    edx,[eax+0x40]
c001ef33:	80 fa 07             	cmp    dl,0x7
c001ef36:	77 37                	ja     c001ef6f <Vm::x87Handler(regs*)+0x3f5>
c001ef38:	83 ec 0c             	sub    esp,0xc
c001ef3b:	2d c0 00 00 00       	sub    eax,0xc0
c001ef40:	50                   	push   eax
c001ef41:	e8 f7 fa ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001ef46:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ef4d:	89 c6                	mov    esi,eax
c001ef4f:	89 d7                	mov    edi,edx
c001ef51:	e8 e7 fa ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001ef56:	57                   	push   edi
c001ef57:	56                   	push   esi
c001ef58:	52                   	push   edx
c001ef59:	50                   	push   eax
c001ef5a:	e8 54 fa ff ff       	call   c001e9b3 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ef5f:	83 c4 1c             	add    esp,0x1c
c001ef62:	52                   	push   edx
c001ef63:	50                   	push   eax
c001ef64:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef68:	2d c0 00 00 00       	sub    eax,0xc0
c001ef6d:	eb 3d                	jmp    c001efac <Vm::x87Handler(regs*)+0x432>
c001ef6f:	8d 50 38             	lea    edx,[eax+0x38]
c001ef72:	80 fa 07             	cmp    dl,0x7
c001ef75:	77 3b                	ja     c001efb2 <Vm::x87Handler(regs*)+0x438>
c001ef77:	83 ec 0c             	sub    esp,0xc
c001ef7a:	2d c8 00 00 00       	sub    eax,0xc8
c001ef7f:	50                   	push   eax
c001ef80:	e8 b8 fa ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001ef85:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ef8c:	89 c6                	mov    esi,eax
c001ef8e:	89 d7                	mov    edi,edx
c001ef90:	e8 a8 fa ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001ef95:	57                   	push   edi
c001ef96:	56                   	push   esi
c001ef97:	52                   	push   edx
c001ef98:	50                   	push   eax
c001ef99:	e8 4e fa ff ff       	call   c001e9ec <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ef9e:	83 c4 1c             	add    esp,0x1c
c001efa1:	52                   	push   edx
c001efa2:	50                   	push   eax
c001efa3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001efa7:	2d c8 00 00 00       	sub    eax,0xc8
c001efac:	50                   	push   eax
c001efad:	e9 75 fc ff ff       	jmp    c001ec27 <Vm::x87Handler(regs*)+0xad>
c001efb2:	83 c0 18             	add    eax,0x18
c001efb5:	3c 07                	cmp    al,0x7
c001efb7:	0f 87 3b 04 00 00    	ja     c001f3f8 <Vm::x87Handler(regs*)+0x87e>
c001efbd:	83 ec 0c             	sub    esp,0xc
c001efc0:	6a 00                	push   0x0
c001efc2:	e8 76 fa ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001efc7:	89 c6                	mov    esi,eax
c001efc9:	89 d7                	mov    edi,edx
c001efcb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001efcf:	2d e8 00 00 00       	sub    eax,0xe8
c001efd4:	89 04 24             	mov    DWORD PTR [esp],eax
c001efd7:	e8 61 fa ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001efdc:	57                   	push   edi
c001efdd:	56                   	push   esi
c001efde:	52                   	push   edx
c001efdf:	50                   	push   eax
c001efe0:	e8 f8 f9 ff ff       	call   c001e9dd <Vm::fpuSub(unsigned long long, unsigned long long)>
c001efe5:	83 c4 1c             	add    esp,0x1c
c001efe8:	52                   	push   edx
c001efe9:	50                   	push   eax
c001efea:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001efee:	2d e8 00 00 00       	sub    eax,0xe8
c001eff3:	eb b7                	jmp    c001efac <Vm::x87Handler(regs*)+0x432>
c001eff5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eff9:	8d 50 40             	lea    edx,[eax+0x40]
c001effc:	80 fa 07             	cmp    dl,0x7
c001efff:	77 3a                	ja     c001f03b <Vm::x87Handler(regs*)+0x4c1>
c001f001:	83 ec 0c             	sub    esp,0xc
c001f004:	2d c0 00 00 00       	sub    eax,0xc0
c001f009:	50                   	push   eax
c001f00a:	e8 2e fa ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001f00f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f016:	89 c6                	mov    esi,eax
c001f018:	89 d7                	mov    edi,edx
c001f01a:	e8 1e fa ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001f01f:	57                   	push   edi
c001f020:	56                   	push   esi
c001f021:	52                   	push   edx
c001f022:	50                   	push   eax
c001f023:	e8 8b f9 ff ff       	call   c001e9b3 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f028:	83 c4 1c             	add    esp,0x1c
c001f02b:	52                   	push   edx
c001f02c:	50                   	push   eax
c001f02d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f031:	2d c0 00 00 00       	sub    eax,0xc0
c001f036:	e9 9e 01 00 00       	jmp    c001f1d9 <Vm::x87Handler(regs*)+0x65f>
c001f03b:	8d 50 20             	lea    edx,[eax+0x20]
c001f03e:	80 fa 07             	cmp    dl,0x7
c001f041:	77 3a                	ja     c001f07d <Vm::x87Handler(regs*)+0x503>
c001f043:	83 ec 0c             	sub    esp,0xc
c001f046:	2d e0 00 00 00       	sub    eax,0xe0
c001f04b:	50                   	push   eax
c001f04c:	e8 ec f9 ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001f051:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f058:	89 c6                	mov    esi,eax
c001f05a:	89 d7                	mov    edi,edx
c001f05c:	e8 dc f9 ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001f061:	57                   	push   edi
c001f062:	56                   	push   esi
c001f063:	52                   	push   edx
c001f064:	50                   	push   eax
c001f065:	e8 73 f9 ff ff       	call   c001e9dd <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f06a:	83 c4 1c             	add    esp,0x1c
c001f06d:	52                   	push   edx
c001f06e:	50                   	push   eax
c001f06f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f073:	2d e0 00 00 00       	sub    eax,0xe0
c001f078:	e9 5c 01 00 00       	jmp    c001f1d9 <Vm::x87Handler(regs*)+0x65f>
c001f07d:	8d 50 18             	lea    edx,[eax+0x18]
c001f080:	80 fa 07             	cmp    dl,0x7
c001f083:	77 3b                	ja     c001f0c0 <Vm::x87Handler(regs*)+0x546>
c001f085:	83 ec 0c             	sub    esp,0xc
c001f088:	6a 00                	push   0x0
c001f08a:	e8 ae f9 ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001f08f:	89 c6                	mov    esi,eax
c001f091:	89 d7                	mov    edi,edx
c001f093:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f097:	2d e8 00 00 00       	sub    eax,0xe8
c001f09c:	89 04 24             	mov    DWORD PTR [esp],eax
c001f09f:	e8 99 f9 ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001f0a4:	57                   	push   edi
c001f0a5:	56                   	push   esi
c001f0a6:	52                   	push   edx
c001f0a7:	50                   	push   eax
c001f0a8:	e8 30 f9 ff ff       	call   c001e9dd <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f0ad:	83 c4 1c             	add    esp,0x1c
c001f0b0:	52                   	push   edx
c001f0b1:	50                   	push   eax
c001f0b2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f0b6:	2d e8 00 00 00       	sub    eax,0xe8
c001f0bb:	e9 19 01 00 00       	jmp    c001f1d9 <Vm::x87Handler(regs*)+0x65f>
c001f0c0:	8d 50 38             	lea    edx,[eax+0x38]
c001f0c3:	80 fa 07             	cmp    dl,0x7
c001f0c6:	77 37                	ja     c001f0ff <Vm::x87Handler(regs*)+0x585>
c001f0c8:	83 ec 0c             	sub    esp,0xc
c001f0cb:	2d c8 00 00 00       	sub    eax,0xc8
c001f0d0:	50                   	push   eax
c001f0d1:	e8 67 f9 ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001f0d6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f0dd:	89 c6                	mov    esi,eax
c001f0df:	89 d7                	mov    edi,edx
c001f0e1:	e8 57 f9 ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001f0e6:	57                   	push   edi
c001f0e7:	56                   	push   esi
c001f0e8:	52                   	push   edx
c001f0e9:	50                   	push   eax
c001f0ea:	e8 fd f8 ff ff       	call   c001e9ec <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f0ef:	83 c4 1c             	add    esp,0x1c
c001f0f2:	52                   	push   edx
c001f0f3:	50                   	push   eax
c001f0f4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f0f8:	2d c8 00 00 00       	sub    eax,0xc8
c001f0fd:	eb 7d                	jmp    c001f17c <Vm::x87Handler(regs*)+0x602>
c001f0ff:	3c f7                	cmp    al,0xf7
c001f101:	76 38                	jbe    c001f13b <Vm::x87Handler(regs*)+0x5c1>
c001f103:	83 ec 0c             	sub    esp,0xc
c001f106:	6a 00                	push   0x0
c001f108:	e8 30 f9 ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001f10d:	89 c6                	mov    esi,eax
c001f10f:	89 d7                	mov    edi,edx
c001f111:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f115:	2d f8 00 00 00       	sub    eax,0xf8
c001f11a:	89 04 24             	mov    DWORD PTR [esp],eax
c001f11d:	e8 1b f9 ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001f122:	57                   	push   edi
c001f123:	56                   	push   esi
c001f124:	52                   	push   edx
c001f125:	50                   	push   eax
c001f126:	e8 e0 f8 ff ff       	call   c001ea0b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f12b:	83 c4 1c             	add    esp,0x1c
c001f12e:	52                   	push   edx
c001f12f:	50                   	push   eax
c001f130:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f134:	2d f8 00 00 00       	sub    eax,0xf8
c001f139:	eb 41                	jmp    c001f17c <Vm::x87Handler(regs*)+0x602>
c001f13b:	8d 50 10             	lea    edx,[eax+0x10]
c001f13e:	80 fa 07             	cmp    dl,0x7
c001f141:	0f 87 5a 01 00 00    	ja     c001f2a1 <Vm::x87Handler(regs*)+0x727>
c001f147:	83 ec 0c             	sub    esp,0xc
c001f14a:	2d f0 00 00 00       	sub    eax,0xf0
c001f14f:	50                   	push   eax
c001f150:	e8 e8 f8 ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001f155:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f15c:	89 c6                	mov    esi,eax
c001f15e:	89 d7                	mov    edi,edx
c001f160:	e8 d8 f8 ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001f165:	57                   	push   edi
c001f166:	56                   	push   esi
c001f167:	52                   	push   edx
c001f168:	50                   	push   eax
c001f169:	e8 9d f8 ff ff       	call   c001ea0b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f16e:	83 c4 1c             	add    esp,0x1c
c001f171:	52                   	push   edx
c001f172:	50                   	push   eax
c001f173:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f177:	2d f0 00 00 00       	sub    eax,0xf0
c001f17c:	50                   	push   eax
c001f17d:	e8 fe f8 ff ff       	call   c001ea80 <Vm::fpuSetReg(int, unsigned long long)>
c001f182:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f186:	e8 9d f9 ff ff       	call   c001eb28 <Vm::fpuPop()>
c001f18b:	e9 5e fa ff ff       	jmp    c001ebee <Vm::x87Handler(regs*)+0x74>
c001f190:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f194:	8d 50 30             	lea    edx,[eax+0x30]
c001f197:	80 fa 07             	cmp    dl,0x7
c001f19a:	77 1d                	ja     c001f1b9 <Vm::x87Handler(regs*)+0x63f>
c001f19c:	83 ec 0c             	sub    esp,0xc
c001f19f:	6a 00                	push   0x0
c001f1a1:	e8 97 f8 ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001f1a6:	83 c4 0c             	add    esp,0xc
c001f1a9:	52                   	push   edx
c001f1aa:	50                   	push   eax
c001f1ab:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1af:	2d d0 00 00 00       	sub    eax,0xd0
c001f1b4:	e9 f3 fd ff ff       	jmp    c001efac <Vm::x87Handler(regs*)+0x432>
c001f1b9:	8d 50 28             	lea    edx,[eax+0x28]
c001f1bc:	80 fa 07             	cmp    dl,0x7
c001f1bf:	77 28                	ja     c001f1e9 <Vm::x87Handler(regs*)+0x66f>
c001f1c1:	83 ec 0c             	sub    esp,0xc
c001f1c4:	6a 00                	push   0x0
c001f1c6:	e8 72 f8 ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001f1cb:	83 c4 0c             	add    esp,0xc
c001f1ce:	52                   	push   edx
c001f1cf:	50                   	push   eax
c001f1d0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1d4:	2d d8 00 00 00       	sub    eax,0xd8
c001f1d9:	50                   	push   eax
c001f1da:	e8 a1 f8 ff ff       	call   c001ea80 <Vm::fpuSetReg(int, unsigned long long)>
c001f1df:	e8 44 f9 ff ff       	call   c001eb28 <Vm::fpuPop()>
c001f1e4:	e9 01 fa ff ff       	jmp    c001ebea <Vm::x87Handler(regs*)+0x70>
c001f1e9:	8d 50 20             	lea    edx,[eax+0x20]
c001f1ec:	80 fa 07             	cmp    dl,0x7
c001f1ef:	77 30                	ja     c001f221 <Vm::x87Handler(regs*)+0x6a7>
c001f1f1:	83 ec 0c             	sub    esp,0xc
c001f1f4:	2d e0 00 00 00       	sub    eax,0xe0
c001f1f9:	50                   	push   eax
c001f1fa:	e8 3e f8 ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001f1ff:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f206:	89 c6                	mov    esi,eax
c001f208:	89 d7                	mov    edi,edx
c001f20a:	e8 2e f8 ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001f20f:	57                   	push   edi
c001f210:	56                   	push   esi
c001f211:	52                   	push   edx
c001f212:	50                   	push   eax
c001f213:	e8 48 f7 ff ff       	call   c001e960 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f218:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f21c:	e9 54 02 00 00       	jmp    c001f475 <Vm::x87Handler(regs*)+0x8fb>
c001f221:	8d 50 18             	lea    edx,[eax+0x18]
c001f224:	80 fa 07             	cmp    dl,0x7
c001f227:	0f 87 43 fb ff ff    	ja     c001ed70 <Vm::x87Handler(regs*)+0x1f6>
c001f22d:	83 ec 0c             	sub    esp,0xc
c001f230:	2d e8 00 00 00       	sub    eax,0xe8
c001f235:	50                   	push   eax
c001f236:	e8 02 f8 ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001f23b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f242:	89 c6                	mov    esi,eax
c001f244:	89 d7                	mov    edi,edx
c001f246:	e8 f2 f7 ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001f24b:	57                   	push   edi
c001f24c:	56                   	push   esi
c001f24d:	52                   	push   edx
c001f24e:	50                   	push   eax
c001f24f:	e8 0c f7 ff ff       	call   c001e960 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f254:	83 c4 20             	add    esp,0x20
c001f257:	e8 cc f8 ff ff       	call   c001eb28 <Vm::fpuPop()>
c001f25c:	eb 62                	jmp    c001f2c0 <Vm::x87Handler(regs*)+0x746>
c001f25e:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001f262:	0f 85 0f 01 00 00    	jne    c001f377 <Vm::x87Handler(regs*)+0x7fd>
c001f268:	83 ec 0c             	sub    esp,0xc
c001f26b:	6a 01                	push   0x1
c001f26d:	e8 cb f7 ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001f272:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f279:	89 c6                	mov    esi,eax
c001f27b:	89 d7                	mov    edi,edx
c001f27d:	e8 bb f7 ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001f282:	57                   	push   edi
c001f283:	56                   	push   esi
c001f284:	52                   	push   edx
c001f285:	50                   	push   eax
c001f286:	e8 d5 f6 ff ff       	call   c001e960 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f28b:	83 c4 20             	add    esp,0x20
c001f28e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f292:	e8 91 f8 ff ff       	call   c001eb28 <Vm::fpuPop()>
c001f297:	e8 8c f8 ff ff       	call   c001eb28 <Vm::fpuPop()>
c001f29c:	e9 50 f9 ff ff       	jmp    c001ebf1 <Vm::x87Handler(regs*)+0x77>
c001f2a1:	3c d9                	cmp    al,0xd9
c001f2a3:	0f 85 b5 02 00 00    	jne    c001f55e <Vm::x87Handler(regs*)+0x9e4>
c001f2a9:	eb bd                	jmp    c001f268 <Vm::x87Handler(regs*)+0x6ee>
c001f2ab:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001f2af:	0f 85 ea 02 00 00    	jne    c001f59f <Vm::x87Handler(regs*)+0xa25>
c001f2b5:	0f b7 05 a0 e1 02 c0 	movzx  eax,WORD PTR ds:0xc002e1a0
c001f2bc:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001f2c0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f2c4:	e9 28 f9 ff ff       	jmp    c001ebf1 <Vm::x87Handler(regs*)+0x77>
c001f2c9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f2cd:	84 d2                	test   dl,dl
c001f2cf:	75 0f                	jne    c001f2e0 <Vm::x87Handler(regs*)+0x766>
c001f2d1:	83 ec 0c             	sub    esp,0xc
c001f2d4:	ff 36                	push   DWORD PTR [esi]
c001f2d6:	e8 b1 f4 ff ff       	call   c001e78c <Vm::fpu32ToInternal(unsigned int)>
c001f2db:	e9 2c 01 00 00       	jmp    c001f40c <Vm::x87Handler(regs*)+0x892>
c001f2e0:	80 fa 01             	cmp    dl,0x1
c001f2e3:	75 0f                	jne    c001f2f4 <Vm::x87Handler(regs*)+0x77a>
c001f2e5:	83 ec 0c             	sub    esp,0xc
c001f2e8:	ff 36                	push   DWORD PTR [esi]
c001f2ea:	e8 9d f4 ff ff       	call   c001e78c <Vm::fpu32ToInternal(unsigned int)>
c001f2ef:	e9 81 02 00 00       	jmp    c001f575 <Vm::x87Handler(regs*)+0x9fb>
c001f2f4:	80 fa 04             	cmp    dl,0x4
c001f2f7:	75 0f                	jne    c001f308 <Vm::x87Handler(regs*)+0x78e>
c001f2f9:	83 ec 0c             	sub    esp,0xc
c001f2fc:	ff 36                	push   DWORD PTR [esi]
c001f2fe:	e8 89 f4 ff ff       	call   c001e78c <Vm::fpu32ToInternal(unsigned int)>
c001f303:	e9 86 01 00 00       	jmp    c001f48e <Vm::x87Handler(regs*)+0x914>
c001f308:	80 fa 05             	cmp    dl,0x5
c001f30b:	75 1b                	jne    c001f328 <Vm::x87Handler(regs*)+0x7ae>
c001f30d:	83 ec 0c             	sub    esp,0xc
c001f310:	6a 00                	push   0x0
c001f312:	e8 26 f7 ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001f317:	89 c7                	mov    edi,eax
c001f319:	89 d5                	mov    ebp,edx
c001f31b:	58                   	pop    eax
c001f31c:	ff 36                	push   DWORD PTR [esi]
c001f31e:	e8 69 f4 ff ff       	call   c001e78c <Vm::fpu32ToInternal(unsigned int)>
c001f323:	e9 a3 01 00 00       	jmp    c001f4cb <Vm::x87Handler(regs*)+0x951>
c001f328:	80 fa 06             	cmp    dl,0x6
c001f32b:	75 0f                	jne    c001f33c <Vm::x87Handler(regs*)+0x7c2>
c001f32d:	83 ec 0c             	sub    esp,0xc
c001f330:	ff 36                	push   DWORD PTR [esi]
c001f332:	e8 55 f4 ff ff       	call   c001e78c <Vm::fpu32ToInternal(unsigned int)>
c001f337:	e9 ae 01 00 00       	jmp    c001f4ea <Vm::x87Handler(regs*)+0x970>
c001f33c:	31 c0                	xor    eax,eax
c001f33e:	80 fa 07             	cmp    dl,0x7
c001f341:	0f 85 94 02 00 00    	jne    c001f5db <Vm::x87Handler(regs*)+0xa61>
c001f347:	83 ec 0c             	sub    esp,0xc
c001f34a:	6a 00                	push   0x0
c001f34c:	e8 ec f6 ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001f351:	89 c7                	mov    edi,eax
c001f353:	89 d5                	mov    ebp,edx
c001f355:	58                   	pop    eax
c001f356:	ff 36                	push   DWORD PTR [esi]
c001f358:	e8 2f f4 ff ff       	call   c001e78c <Vm::fpu32ToInternal(unsigned int)>
c001f35d:	e9 cb 01 00 00       	jmp    c001f52d <Vm::x87Handler(regs*)+0x9b3>
c001f362:	80 fa 03             	cmp    dl,0x3
c001f365:	0f 85 d3 01 00 00    	jne    c001f53e <Vm::x87Handler(regs*)+0x9c4>
c001f36b:	e8 b8 f7 ff ff       	call   c001eb28 <Vm::fpuPop()>
c001f370:	51                   	push   ecx
c001f371:	51                   	push   ecx
c001f372:	e9 de 01 00 00       	jmp    c001f555 <Vm::x87Handler(regs*)+0x9db>
c001f377:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f37b:	80 fa 01             	cmp    dl,0x1
c001f37e:	75 09                	jne    c001f389 <Vm::x87Handler(regs*)+0x80f>
c001f380:	57                   	push   edi
c001f381:	57                   	push   edi
c001f382:	8b 06                	mov    eax,DWORD PTR [esi]
c001f384:	e9 e3 01 00 00       	jmp    c001f56c <Vm::x87Handler(regs*)+0x9f2>
c001f389:	80 fa 04             	cmp    dl,0x4
c001f38c:	75 12                	jne    c001f3a0 <Vm::x87Handler(regs*)+0x826>
c001f38e:	31 d2                	xor    edx,edx
c001f390:	51                   	push   ecx
c001f391:	51                   	push   ecx
c001f392:	8b 06                	mov    eax,DWORD PTR [esi]
c001f394:	52                   	push   edx
c001f395:	50                   	push   eax
c001f396:	e8 d0 f4 ff ff       	call   c001e86b <Vm::fpuLongToFloat(long long)>
c001f39b:	e9 ee 00 00 00       	jmp    c001f48e <Vm::x87Handler(regs*)+0x914>
c001f3a0:	31 c0                	xor    eax,eax
c001f3a2:	80 fa 07             	cmp    dl,0x7
c001f3a5:	0f 85 30 02 00 00    	jne    c001f5db <Vm::x87Handler(regs*)+0xa61>
c001f3ab:	83 ec 0c             	sub    esp,0xc
c001f3ae:	6a 00                	push   0x0
c001f3b0:	e8 88 f6 ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001f3b5:	89 c7                	mov    edi,eax
c001f3b7:	89 d5                	mov    ebp,edx
c001f3b9:	58                   	pop    eax
c001f3ba:	8b 06                	mov    eax,DWORD PTR [esi]
c001f3bc:	5a                   	pop    edx
c001f3bd:	31 d2                	xor    edx,edx
c001f3bf:	52                   	push   edx
c001f3c0:	50                   	push   eax
c001f3c1:	e8 a5 f4 ff ff       	call   c001e86b <Vm::fpuLongToFloat(long long)>
c001f3c6:	e9 62 01 00 00       	jmp    c001f52d <Vm::x87Handler(regs*)+0x9b3>
c001f3cb:	84 d2                	test   dl,dl
c001f3cd:	75 0d                	jne    c001f3dc <Vm::x87Handler(regs*)+0x862>
c001f3cf:	31 d2                	xor    edx,edx
c001f3d1:	55                   	push   ebp
c001f3d2:	55                   	push   ebp
c001f3d3:	8b 06                	mov    eax,DWORD PTR [esi]
c001f3d5:	52                   	push   edx
c001f3d6:	50                   	push   eax
c001f3d7:	e9 d3 01 00 00       	jmp    c001f5af <Vm::x87Handler(regs*)+0xa35>
c001f3dc:	31 c0                	xor    eax,eax
c001f3de:	80 fa 02             	cmp    dl,0x2
c001f3e1:	0f 85 f4 01 00 00    	jne    c001f5db <Vm::x87Handler(regs*)+0xa61>
c001f3e7:	83 ec 0c             	sub    esp,0xc
c001f3ea:	6a 00                	push   0x0
c001f3ec:	e8 4c f6 ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001f3f1:	59                   	pop    ecx
c001f3f2:	5f                   	pop    edi
c001f3f3:	e9 6a f9 ff ff       	jmp    c001ed62 <Vm::x87Handler(regs*)+0x1e8>
c001f3f8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f3fc:	84 d2                	test   dl,dl
c001f3fe:	75 2a                	jne    c001f42a <Vm::x87Handler(regs*)+0x8b0>
c001f400:	50                   	push   eax
c001f401:	50                   	push   eax
c001f402:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f405:	ff 36                	push   DWORD PTR [esi]
c001f407:	e8 c5 f3 ff ff       	call   c001e7d1 <Vm::fpu64ToInternal(unsigned long long)>
c001f40c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f413:	89 c6                	mov    esi,eax
c001f415:	89 d7                	mov    edi,edx
c001f417:	e8 21 f6 ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001f41c:	57                   	push   edi
c001f41d:	56                   	push   esi
c001f41e:	52                   	push   edx
c001f41f:	50                   	push   eax
c001f420:	e8 8e f5 ff ff       	call   c001e9b3 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f425:	e9 64 01 00 00       	jmp    c001f58e <Vm::x87Handler(regs*)+0xa14>
c001f42a:	80 fa 01             	cmp    dl,0x1
c001f42d:	75 11                	jne    c001f440 <Vm::x87Handler(regs*)+0x8c6>
c001f42f:	50                   	push   eax
c001f430:	50                   	push   eax
c001f431:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f434:	ff 36                	push   DWORD PTR [esi]
c001f436:	e8 96 f3 ff ff       	call   c001e7d1 <Vm::fpu64ToInternal(unsigned long long)>
c001f43b:	e9 35 01 00 00       	jmp    c001f575 <Vm::x87Handler(regs*)+0x9fb>
c001f440:	80 fa 02             	cmp    dl,0x2
c001f443:	0f 85 54 f9 ff ff    	jne    c001ed9d <Vm::x87Handler(regs*)+0x223>
c001f449:	55                   	push   ebp
c001f44a:	55                   	push   ebp
c001f44b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f44e:	ff 36                	push   DWORD PTR [esi]
c001f450:	e8 7c f3 ff ff       	call   c001e7d1 <Vm::fpu64ToInternal(unsigned long long)>
c001f455:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f45c:	89 c6                	mov    esi,eax
c001f45e:	89 d7                	mov    edi,edx
c001f460:	e8 d8 f5 ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001f465:	57                   	push   edi
c001f466:	56                   	push   esi
c001f467:	52                   	push   edx
c001f468:	50                   	push   eax
c001f469:	e8 f2 f4 ff ff       	call   c001e960 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f46e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001f472:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f475:	83 c4 20             	add    esp,0x20
c001f478:	e9 74 f7 ff ff       	jmp    c001ebf1 <Vm::x87Handler(regs*)+0x77>
c001f47d:	80 fa 04             	cmp    dl,0x4
c001f480:	75 2a                	jne    c001f4ac <Vm::x87Handler(regs*)+0x932>
c001f482:	51                   	push   ecx
c001f483:	51                   	push   ecx
c001f484:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f487:	ff 36                	push   DWORD PTR [esi]
c001f489:	e8 43 f3 ff ff       	call   c001e7d1 <Vm::fpu64ToInternal(unsigned long long)>
c001f48e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f495:	89 c6                	mov    esi,eax
c001f497:	89 d7                	mov    edi,edx
c001f499:	e8 9f f5 ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001f49e:	57                   	push   edi
c001f49f:	56                   	push   esi
c001f4a0:	52                   	push   edx
c001f4a1:	50                   	push   eax
c001f4a2:	e8 36 f5 ff ff       	call   c001e9dd <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f4a7:	e9 e2 00 00 00       	jmp    c001f58e <Vm::x87Handler(regs*)+0xa14>
c001f4ac:	80 fa 05             	cmp    dl,0x5
c001f4af:	75 28                	jne    c001f4d9 <Vm::x87Handler(regs*)+0x95f>
c001f4b1:	83 ec 0c             	sub    esp,0xc
c001f4b4:	6a 00                	push   0x0
c001f4b6:	e8 82 f5 ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001f4bb:	89 c7                	mov    edi,eax
c001f4bd:	89 d5                	mov    ebp,edx
c001f4bf:	58                   	pop    eax
c001f4c0:	5a                   	pop    edx
c001f4c1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f4c4:	ff 36                	push   DWORD PTR [esi]
c001f4c6:	e8 06 f3 ff ff       	call   c001e7d1 <Vm::fpu64ToInternal(unsigned long long)>
c001f4cb:	83 c4 10             	add    esp,0x10
c001f4ce:	55                   	push   ebp
c001f4cf:	57                   	push   edi
c001f4d0:	52                   	push   edx
c001f4d1:	50                   	push   eax
c001f4d2:	e8 06 f5 ff ff       	call   c001e9dd <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f4d7:	eb 60                	jmp    c001f539 <Vm::x87Handler(regs*)+0x9bf>
c001f4d9:	80 fa 06             	cmp    dl,0x6
c001f4dc:	75 2a                	jne    c001f508 <Vm::x87Handler(regs*)+0x98e>
c001f4de:	51                   	push   ecx
c001f4df:	51                   	push   ecx
c001f4e0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f4e3:	ff 36                	push   DWORD PTR [esi]
c001f4e5:	e8 e7 f2 ff ff       	call   c001e7d1 <Vm::fpu64ToInternal(unsigned long long)>
c001f4ea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f4f1:	89 c6                	mov    esi,eax
c001f4f3:	89 d7                	mov    edi,edx
c001f4f5:	e8 43 f5 ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001f4fa:	57                   	push   edi
c001f4fb:	56                   	push   esi
c001f4fc:	52                   	push   edx
c001f4fd:	50                   	push   eax
c001f4fe:	e8 08 f5 ff ff       	call   c001ea0b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f503:	e9 86 00 00 00       	jmp    c001f58e <Vm::x87Handler(regs*)+0xa14>
c001f508:	31 c0                	xor    eax,eax
c001f50a:	80 fa 07             	cmp    dl,0x7
c001f50d:	0f 85 c8 00 00 00    	jne    c001f5db <Vm::x87Handler(regs*)+0xa61>
c001f513:	83 ec 0c             	sub    esp,0xc
c001f516:	6a 00                	push   0x0
c001f518:	e8 20 f5 ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001f51d:	89 c7                	mov    edi,eax
c001f51f:	89 d5                	mov    ebp,edx
c001f521:	58                   	pop    eax
c001f522:	5a                   	pop    edx
c001f523:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f526:	ff 36                	push   DWORD PTR [esi]
c001f528:	e8 a4 f2 ff ff       	call   c001e7d1 <Vm::fpu64ToInternal(unsigned long long)>
c001f52d:	83 c4 10             	add    esp,0x10
c001f530:	55                   	push   ebp
c001f531:	57                   	push   edi
c001f532:	52                   	push   edx
c001f533:	50                   	push   eax
c001f534:	e8 d2 f4 ff ff       	call   c001ea0b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f539:	83 c4 0c             	add    esp,0xc
c001f53c:	eb 53                	jmp    c001f591 <Vm::x87Handler(regs*)+0xa17>
c001f53e:	31 c0                	xor    eax,eax
c001f540:	80 fa 02             	cmp    dl,0x2
c001f543:	0f 85 92 00 00 00    	jne    c001f5db <Vm::x87Handler(regs*)+0xa61>
c001f549:	83 ec 0c             	sub    esp,0xc
c001f54c:	6a 00                	push   0x0
c001f54e:	e8 ea f4 ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001f553:	59                   	pop    ecx
c001f554:	5f                   	pop    edi
c001f555:	52                   	push   edx
c001f556:	50                   	push   eax
c001f557:	e8 27 f2 ff ff       	call   c001e783 <Vm::fpuInternalTo64(unsigned long long)>
c001f55c:	eb 70                	jmp    c001f5ce <Vm::x87Handler(regs*)+0xa54>
c001f55e:	31 c0                	xor    eax,eax
c001f560:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001f565:	75 74                	jne    c001f5db <Vm::x87Handler(regs*)+0xa61>
c001f567:	50                   	push   eax
c001f568:	50                   	push   eax
c001f569:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f56c:	31 d2                	xor    edx,edx
c001f56e:	52                   	push   edx
c001f56f:	50                   	push   eax
c001f570:	e8 f6 f2 ff ff       	call   c001e86b <Vm::fpuLongToFloat(long long)>
c001f575:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f57c:	89 c6                	mov    esi,eax
c001f57e:	89 d7                	mov    edi,edx
c001f580:	e8 b8 f4 ff ff       	call   c001ea3d <Vm::fpuGetReg(int)>
c001f585:	57                   	push   edi
c001f586:	56                   	push   esi
c001f587:	52                   	push   edx
c001f588:	50                   	push   eax
c001f589:	e8 5e f4 ff ff       	call   c001e9ec <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f58e:	83 c4 1c             	add    esp,0x1c
c001f591:	52                   	push   edx
c001f592:	50                   	push   eax
c001f593:	6a 00                	push   0x0
c001f595:	e8 e6 f4 ff ff       	call   c001ea80 <Vm::fpuSetReg(int, unsigned long long)>
c001f59a:	e9 f2 f7 ff ff       	jmp    c001ed91 <Vm::x87Handler(regs*)+0x217>
c001f59f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f5a3:	80 fa 05             	cmp    dl,0x5
c001f5a6:	75 11                	jne    c001f5b9 <Vm::x87Handler(regs*)+0xa3f>
c001f5a8:	55                   	push   ebp
c001f5a9:	55                   	push   ebp
c001f5aa:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f5ad:	ff 36                	push   DWORD PTR [esi]
c001f5af:	e8 81 f2 ff ff       	call   c001e835 <Vm::fpuULongToFloat(unsigned long long)>
c001f5b4:	e9 cf f7 ff ff       	jmp    c001ed88 <Vm::x87Handler(regs*)+0x20e>
c001f5b9:	31 c0                	xor    eax,eax
c001f5bb:	80 fa 07             	cmp    dl,0x7
c001f5be:	75 1b                	jne    c001f5db <Vm::x87Handler(regs*)+0xa61>
c001f5c0:	e8 63 f5 ff ff       	call   c001eb28 <Vm::fpuPop()>
c001f5c5:	51                   	push   ecx
c001f5c6:	51                   	push   ecx
c001f5c7:	52                   	push   edx
c001f5c8:	50                   	push   eax
c001f5c9:	e8 0c f2 ff ff       	call   c001e7da <Vm::fpuFloatToLong(unsigned long long)>
c001f5ce:	83 c4 10             	add    esp,0x10
c001f5d1:	89 06                	mov    DWORD PTR [esi],eax
c001f5d3:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001f5d6:	e9 f8 f7 ff ff       	jmp    c001edd3 <Vm::x87Handler(regs*)+0x259>
c001f5db:	83 c4 1c             	add    esp,0x1c
c001f5de:	5b                   	pop    ebx
c001f5df:	5e                   	pop    esi
c001f5e0:	5f                   	pop    edi
c001f5e1:	5d                   	pop    ebp
c001f5e2:	c3                   	ret    

c001f5e3 <__static_initialization_and_destruction_0(int, int)>:
c001f5e3:	83 ec 0c             	sub    esp,0xc
c001f5e6:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001f5eb:	75 1a                	jne    c001f607 <__static_initialization_and_destruction_0(int, int)+0x24>
c001f5ed:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001f5f5:	75 10                	jne    c001f607 <__static_initialization_and_destruction_0(int, int)+0x24>
c001f5f7:	83 ec 0c             	sub    esp,0xc
c001f5fa:	68 a0 e1 02 c0       	push   0xc002e1a0
c001f5ff:	e8 9c 82 00 00       	call   c00278a0 <Vm::_FPUState::_FPUState()>
c001f604:	83 c4 10             	add    esp,0x10
c001f607:	90                   	nop
c001f608:	83 c4 0c             	add    esp,0xc
c001f60b:	c3                   	ret    

c001f60c <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001f60c:	83 ec 0c             	sub    esp,0xc
c001f60f:	83 ec 08             	sub    esp,0x8
c001f612:	68 ff ff 00 00       	push   0xffff
c001f617:	6a 01                	push   0x1
c001f619:	e8 c5 ff ff ff       	call   c001f5e3 <__static_initialization_and_destruction_0(int, int)>
c001f61e:	83 c4 10             	add    esp,0x10
c001f621:	83 c4 0c             	add    esp,0xc
c001f624:	c3                   	ret    
c001f625:	90                   	nop

c001f626 <FAT::getName()>:
c001f626:	b8 18 b0 02 c0       	mov    eax,0xc002b018
c001f62b:	c3                   	ret    

c001f62c <FAT::tell(void*, unsigned long long*)>:
c001f62c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f631:	75 06                	jne    c001f639 <FAT::tell(void*, unsigned long long*)+0xd>
c001f633:	b8 04 00 00 00       	mov    eax,0x4
c001f638:	c3                   	ret    
c001f639:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f63e:	75 06                	jne    c001f646 <FAT::tell(void*, unsigned long long*)+0x1a>
c001f640:	b8 04 00 00 00       	mov    eax,0x4
c001f645:	c3                   	ret    
c001f646:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f64a:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001f64d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001f650:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f654:	89 01                	mov    DWORD PTR [ecx],eax
c001f656:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f659:	b8 00 00 00 00       	mov    eax,0x0
c001f65e:	c3                   	ret    
c001f65f:	90                   	nop

c001f660 <FAT::stat(void*, unsigned long long*)>:
c001f660:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f665:	75 06                	jne    c001f66d <FAT::stat(void*, unsigned long long*)+0xd>
c001f667:	b8 04 00 00 00       	mov    eax,0x4
c001f66c:	c3                   	ret    
c001f66d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f672:	75 06                	jne    c001f67a <FAT::stat(void*, unsigned long long*)+0x1a>
c001f674:	b8 04 00 00 00       	mov    eax,0x4
c001f679:	c3                   	ret    
c001f67a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f67e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001f681:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f684:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f688:	89 01                	mov    DWORD PTR [ecx],eax
c001f68a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f68d:	b8 00 00 00 00       	mov    eax,0x0
c001f692:	c3                   	ret    
c001f693:	90                   	nop

c001f694 <FAT::~FAT()>:
c001f694:	83 ec 0c             	sub    esp,0xc
c001f697:	ba 9c b0 02 c0       	mov    edx,0xc002b09c
c001f69c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6a0:	89 10                	mov    DWORD PTR [eax],edx
c001f6a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6a6:	83 ec 0c             	sub    esp,0xc
c001f6a9:	50                   	push   eax
c001f6aa:	e8 f9 33 ff ff       	call   c0012aa8 <Filesystem::~Filesystem()>
c001f6af:	83 c4 10             	add    esp,0x10
c001f6b2:	90                   	nop
c001f6b3:	83 c4 0c             	add    esp,0xc
c001f6b6:	c3                   	ret    
c001f6b7:	90                   	nop

c001f6b8 <FAT::~FAT()>:
c001f6b8:	83 ec 0c             	sub    esp,0xc
c001f6bb:	83 ec 0c             	sub    esp,0xc
c001f6be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f6c2:	e8 cd ff ff ff       	call   c001f694 <FAT::~FAT()>
c001f6c7:	83 c4 10             	add    esp,0x10
c001f6ca:	83 ec 08             	sub    esp,0x8
c001f6cd:	6a 08                	push   0x8
c001f6cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f6d3:	e8 c7 2f ff ff       	call   c001269f <operator delete(void*, unsigned long)>
c001f6d8:	83 c4 10             	add    esp,0x10
c001f6db:	83 c4 0c             	add    esp,0xc
c001f6de:	c3                   	ret    
c001f6df:	90                   	nop

c001f6e0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001f6e0:	83 ec 1c             	sub    esp,0x1c
c001f6e3:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001f6ea:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001f6ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f6f3:	8b 04 85 20 e2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1de0]
c001f6fa:	83 f8 ff             	cmp    eax,0xffffffff
c001f6fd:	75 34                	jne    c001f733 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001f6ff:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f703:	88 c2                	mov    dl,al
c001f705:	a1 00 e2 02 c0       	mov    eax,ds:0xc002e200
c001f70a:	01 d0                	add    eax,edx
c001f70c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f710:	8b 15 00 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e200
c001f716:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f71a:	89 14 85 20 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1de0],edx
c001f721:	a1 00 e2 02 c0       	mov    eax,ds:0xc002e200
c001f726:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001f72a:	89 14 85 a0 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1d60],edx
c001f731:	eb 17                	jmp    c001f74a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001f733:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f737:	88 c2                	mov    dl,al
c001f739:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f73d:	8b 04 85 20 e2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1de0]
c001f744:	01 d0                	add    eax,edx
c001f746:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f74a:	83 ec 04             	sub    esp,0x4
c001f74d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f751:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f755:	8d 44 24 15          	lea    eax,[esp+0x15]
c001f759:	50                   	push   eax
c001f75a:	e8 89 73 fe ff       	call   c0006ae8 <f_getlabel>
c001f75f:	83 c4 10             	add    esp,0x10
c001f762:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f766:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f76b:	75 07                	jne    c001f774 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001f76d:	b8 00 00 00 00       	mov    eax,0x0
c001f772:	eb 05                	jmp    c001f779 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001f774:	b8 01 00 00 00       	mov    eax,0x1
c001f779:	83 c4 1c             	add    esp,0x1c
c001f77c:	c3                   	ret    
c001f77d:	90                   	nop

c001f77e <FAT::setlabel(LogicalDisk*, int, char*)>:
c001f77e:	57                   	push   edi
c001f77f:	83 ec 58             	sub    esp,0x58
c001f782:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001f78a:	8d 54 24 10          	lea    edx,[esp+0x10]
c001f78e:	b9 0f 00 00 00       	mov    ecx,0xf
c001f793:	b8 00 00 00 00       	mov    eax,0x0
c001f798:	fc                   	cld    
c001f799:	89 d7                	mov    edi,edx
c001f79b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f79d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f7a1:	8b 04 85 20 e2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1de0]
c001f7a8:	83 f8 ff             	cmp    eax,0xffffffff
c001f7ab:	75 34                	jne    c001f7e1 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001f7ad:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f7b1:	88 c2                	mov    dl,al
c001f7b3:	a1 00 e2 02 c0       	mov    eax,ds:0xc002e200
c001f7b8:	01 d0                	add    eax,edx
c001f7ba:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f7be:	8b 15 00 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e200
c001f7c4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f7c8:	89 14 85 20 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1de0],edx
c001f7cf:	a1 00 e2 02 c0       	mov    eax,ds:0xc002e200
c001f7d4:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001f7d8:	89 14 85 a0 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1d60],edx
c001f7df:	eb 17                	jmp    c001f7f8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001f7e1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f7e5:	88 c2                	mov    dl,al
c001f7e7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f7eb:	8b 04 85 20 e2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1de0]
c001f7f2:	01 d0                	add    eax,edx
c001f7f4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f7f8:	83 ec 08             	sub    esp,0x8
c001f7fb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001f7ff:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f803:	50                   	push   eax
c001f804:	e8 d8 0f fe ff       	call   c00007e1 <strcat>
c001f809:	83 c4 10             	add    esp,0x10
c001f80c:	83 ec 0c             	sub    esp,0xc
c001f80f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f813:	50                   	push   eax
c001f814:	e8 bd 74 fe ff       	call   c0006cd6 <f_setlabel>
c001f819:	83 c4 10             	add    esp,0x10
c001f81c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f820:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001f825:	75 07                	jne    c001f82e <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001f827:	b8 00 00 00 00       	mov    eax,0x0
c001f82c:	eb 05                	jmp    c001f833 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001f82e:	b8 01 00 00 00       	mov    eax,0x1
c001f833:	83 c4 58             	add    esp,0x58
c001f836:	5f                   	pop    edi
c001f837:	c3                   	ret    

c001f838 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001f838:	83 ec 2c             	sub    esp,0x2c
c001f83b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001f843:	83 ec 08             	sub    esp,0x8
c001f846:	68 3c b0 02 c0       	push   0xc002b03c
c001f84b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f84f:	e8 27 0f fe ff       	call   c000077b <strcmp>
c001f854:	83 c4 10             	add    esp,0x10
c001f857:	85 c0                	test   eax,eax
c001f859:	0f 94 c0             	sete   al
c001f85c:	84 c0                	test   al,al
c001f85e:	74 0d                	je     c001f86d <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001f860:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f868:	e9 a6 00 00 00       	jmp    c001f913 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f86d:	83 ec 08             	sub    esp,0x8
c001f870:	68 2e b0 02 c0       	push   0xc002b02e
c001f875:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f879:	e8 fd 0e fe ff       	call   c000077b <strcmp>
c001f87e:	83 c4 10             	add    esp,0x10
c001f881:	85 c0                	test   eax,eax
c001f883:	0f 94 c0             	sete   al
c001f886:	84 c0                	test   al,al
c001f888:	74 0a                	je     c001f894 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001f88a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f892:	eb 7f                	jmp    c001f913 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f894:	83 ec 08             	sub    esp,0x8
c001f897:	68 34 b0 02 c0       	push   0xc002b034
c001f89c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f8a0:	e8 d6 0e fe ff       	call   c000077b <strcmp>
c001f8a5:	83 c4 10             	add    esp,0x10
c001f8a8:	85 c0                	test   eax,eax
c001f8aa:	0f 94 c0             	sete   al
c001f8ad:	84 c0                	test   al,al
c001f8af:	74 0a                	je     c001f8bb <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001f8b1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f8b9:	eb 58                	jmp    c001f913 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f8bb:	83 ec 08             	sub    esp,0x8
c001f8be:	68 ac 7f 02 c0       	push   0xc0027fac
c001f8c3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f8c7:	e8 af 0e fe ff       	call   c000077b <strcmp>
c001f8cc:	83 c4 10             	add    esp,0x10
c001f8cf:	85 c0                	test   eax,eax
c001f8d1:	0f 94 c0             	sete   al
c001f8d4:	84 c0                	test   al,al
c001f8d6:	74 0a                	je     c001f8e2 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001f8d8:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001f8e0:	eb 31                	jmp    c001f913 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f8e2:	83 ec 08             	sub    esp,0x8
c001f8e5:	68 3a b0 02 c0       	push   0xc002b03a
c001f8ea:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f8ee:	e8 88 0e fe ff       	call   c000077b <strcmp>
c001f8f3:	83 c4 10             	add    esp,0x10
c001f8f6:	85 c0                	test   eax,eax
c001f8f8:	0f 94 c0             	sete   al
c001f8fb:	84 c0                	test   al,al
c001f8fd:	74 0a                	je     c001f909 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001f8ff:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001f907:	eb 0a                	jmp    c001f913 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f909:	b8 08 00 00 00       	mov    eax,0x8
c001f90e:	e9 04 01 00 00       	jmp    c001fa17 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f913:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001f91a:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001f91f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f923:	8b 04 85 20 e2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1de0]
c001f92a:	83 f8 ff             	cmp    eax,0xffffffff
c001f92d:	75 34                	jne    c001f963 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001f92f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001f933:	88 c2                	mov    dl,al
c001f935:	a1 00 e2 02 c0       	mov    eax,ds:0xc002e200
c001f93a:	01 d0                	add    eax,edx
c001f93c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001f940:	8b 15 00 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e200
c001f946:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f94a:	89 14 85 20 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1de0],edx
c001f951:	a1 00 e2 02 c0       	mov    eax,ds:0xc002e200
c001f956:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001f95a:	89 14 85 a0 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1d60],edx
c001f961:	eb 17                	jmp    c001f97a <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001f963:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001f967:	88 c2                	mov    dl,al
c001f969:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f96d:	8b 04 85 20 e2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1de0]
c001f974:	01 d0                	add    eax,edx
c001f976:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001f97a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f97e:	88 04 24             	mov    BYTE PTR [esp],al
c001f981:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001f985:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f989:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001f991:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001f996:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f99e:	83 ec 0c             	sub    esp,0xc
c001f9a1:	68 00 20 00 00       	push   0x2000
c001f9a6:	e8 2f fb fe ff       	call   c000f4da <malloc>
c001f9ab:	83 c4 10             	add    esp,0x10
c001f9ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f9b2:	68 00 20 00 00       	push   0x2000
c001f9b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9bb:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f9bf:	50                   	push   eax
c001f9c0:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001f9c4:	50                   	push   eax
c001f9c5:	e8 57 77 fe ff       	call   c0007121 <f_mkfs>
c001f9ca:	83 c4 10             	add    esp,0x10
c001f9cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f9d1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f9d6:	75 07                	jne    c001f9df <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001f9d8:	b8 00 00 00 00       	mov    eax,0x0
c001f9dd:	eb 38                	jmp    c001fa17 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f9df:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001f9e4:	75 17                	jne    c001f9fd <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001f9e6:	83 ec 0c             	sub    esp,0xc
c001f9e9:	68 6c b0 02 c0       	push   0xc002b06c
c001f9ee:	e8 8c 2d ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001f9f3:	83 c4 10             	add    esp,0x10
c001f9f6:	b8 09 00 00 00       	mov    eax,0x9
c001f9fb:	eb 1a                	jmp    c001fa17 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f9fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fa01:	83 ec 08             	sub    esp,0x8
c001fa04:	50                   	push   eax
c001fa05:	68 40 b0 02 c0       	push   0xc002b040
c001fa0a:	e8 70 2d ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c001fa0f:	83 c4 10             	add    esp,0x10
c001fa12:	b8 01 00 00 00       	mov    eax,0x1
c001fa17:	83 c4 2c             	add    esp,0x2c
c001fa1a:	c3                   	ret    
c001fa1b:	90                   	nop

c001fa1c <FAT::tryMount(LogicalDisk*, int)>:
c001fa1c:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001fa22:	a1 00 e2 02 c0       	mov    eax,ds:0xc002e200
c001fa27:	83 f8 14             	cmp    eax,0x14
c001fa2a:	75 17                	jne    c001fa43 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001fa2c:	83 ec 0c             	sub    esp,0xc
c001fa2f:	68 52 b0 02 c0       	push   0xc002b052
c001fa34:	e8 98 9e ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c001fa39:	83 c4 10             	add    esp,0x10
c001fa3c:	b0 00                	mov    al,0x0
c001fa3e:	e9 d7 01 00 00       	jmp    c001fc1a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fa43:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001fa4a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001fa50:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001fa56:	3d 00 02 00 00       	cmp    eax,0x200
c001fa5b:	74 07                	je     c001fa64 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001fa5d:	b0 00                	mov    al,0x0
c001fa5f:	e9 b6 01 00 00       	jmp    c001fc1a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fa64:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001fa6c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001fa73:	8b 04 85 20 e2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1de0]
c001fa7a:	83 f8 ff             	cmp    eax,0xffffffff
c001fa7d:	74 07                	je     c001fa86 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001fa7f:	b0 01                	mov    al,0x1
c001fa81:	e9 94 01 00 00       	jmp    c001fc1a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fa86:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001fa90:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001fa98:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001fa9f:	88 c2                	mov    dl,al
c001faa1:	a1 00 e2 02 c0       	mov    eax,ds:0xc002e200
c001faa6:	01 d0                	add    eax,edx
c001faa8:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001faaf:	8b 15 00 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e200
c001fab5:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001fabc:	89 14 85 20 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1de0],edx
c001fac3:	a1 00 e2 02 c0       	mov    eax,ds:0xc002e200
c001fac8:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001facf:	89 14 85 a0 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1d60],edx
c001fad6:	83 ec 0c             	sub    esp,0xc
c001fad9:	68 54 02 00 00       	push   0x254
c001fade:	e8 f7 f9 fe ff       	call   c000f4da <malloc>
c001fae3:	83 c4 10             	add    esp,0x10
c001fae6:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001faed:	83 ec 04             	sub    esp,0x4
c001faf0:	6a 00                	push   0x0
c001faf2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001faf9:	50                   	push   eax
c001fafa:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001fb01:	e8 d9 51 fe ff       	call   c0004cdf <f_mount>
c001fb06:	83 c4 10             	add    esp,0x10
c001fb09:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001fb10:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001fb18:	74 19                	je     c001fb33 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001fb1a:	83 ec 0c             	sub    esp,0xc
c001fb1d:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001fb24:	e8 d1 f9 fe ff       	call   c000f4fa <rfree>
c001fb29:	83 c4 10             	add    esp,0x10
c001fb2c:	b0 00                	mov    al,0x0
c001fb2e:	e9 e7 00 00 00       	jmp    c001fc1a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fb33:	83 ec 04             	sub    esp,0x4
c001fb36:	68 00 01 00 00       	push   0x100
c001fb3b:	6a 00                	push   0x0
c001fb3d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001fb44:	50                   	push   eax
c001fb45:	e8 41 0b fe ff       	call   c000068b <memset>
c001fb4a:	83 c4 10             	add    esp,0x10
c001fb4d:	83 ec 08             	sub    esp,0x8
c001fb50:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001fb57:	50                   	push   eax
c001fb58:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001fb5f:	50                   	push   eax
c001fb60:	e8 7c 0c fe ff       	call   c00007e1 <strcat>
c001fb65:	83 c4 10             	add    esp,0x10
c001fb68:	83 ec 08             	sub    esp,0x8
c001fb6b:	68 60 b0 02 c0       	push   0xc002b060
c001fb70:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001fb77:	50                   	push   eax
c001fb78:	e8 64 0c fe ff       	call   c00007e1 <strcat>
c001fb7d:	83 c4 10             	add    esp,0x10
c001fb80:	83 ec 04             	sub    esp,0x4
c001fb83:	6a 01                	push   0x1
c001fb85:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001fb8c:	50                   	push   eax
c001fb8d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fb91:	50                   	push   eax
c001fb92:	e8 aa 51 fe ff       	call   c0004d41 <f_open>
c001fb97:	83 c4 10             	add    esp,0x10
c001fb9a:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001fba1:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001fba8:	85 c0                	test   eax,eax
c001fbaa:	74 0a                	je     c001fbb6 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001fbac:	78 2d                	js     c001fbdb <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001fbae:	83 e8 04             	sub    eax,0x4
c001fbb1:	83 f8 01             	cmp    eax,0x1
c001fbb4:	77 25                	ja     c001fbdb <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001fbb6:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001fbbe:	83 ec 0c             	sub    esp,0xc
c001fbc1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fbc5:	50                   	push   eax
c001fbc6:	e8 c8 5c fe ff       	call   c0005893 <f_close>
c001fbcb:	83 c4 10             	add    esp,0x10
c001fbce:	90                   	nop
c001fbcf:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001fbd7:	74 3a                	je     c001fc13 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001fbd9:	eb 2d                	jmp    c001fc08 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001fbdb:	83 ec 0c             	sub    esp,0xc
c001fbde:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001fbe5:	e8 10 f9 fe ff       	call   c000f4fa <rfree>
c001fbea:	83 c4 10             	add    esp,0x10
c001fbed:	83 ec 04             	sub    esp,0x4
c001fbf0:	6a 00                	push   0x0
c001fbf2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001fbf9:	50                   	push   eax
c001fbfa:	6a 00                	push   0x0
c001fbfc:	e8 de 50 fe ff       	call   c0004cdf <f_mount>
c001fc01:	83 c4 10             	add    esp,0x10
c001fc04:	b0 00                	mov    al,0x0
c001fc06:	eb 12                	jmp    c001fc1a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fc08:	a1 00 e2 02 c0       	mov    eax,ds:0xc002e200
c001fc0d:	40                   	inc    eax
c001fc0e:	a3 00 e2 02 c0       	mov    ds:0xc002e200,eax
c001fc13:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001fc1a:	81 c4 6c 03 00 00    	add    esp,0x36c
c001fc20:	c3                   	ret    
c001fc21:	90                   	nop

c001fc22 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001fc22:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001fc28:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001fc30:	74 0a                	je     c001fc3c <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001fc32:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001fc3a:	75 0a                	jne    c001fc46 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001fc3c:	b8 04 00 00 00       	mov    eax,0x4
c001fc41:	e9 db 00 00 00       	jmp    c001fd21 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fc46:	83 ec 08             	sub    esp,0x8
c001fc49:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001fc50:	50                   	push   eax
c001fc51:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001fc58:	e8 40 62 fe ff       	call   c0005e9d <f_readdir>
c001fc5d:	83 c4 10             	add    esp,0x10
c001fc60:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001fc67:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001fc6d:	83 ec 0c             	sub    esp,0xc
c001fc70:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001fc77:	83 c0 1a             	add    eax,0x1a
c001fc7a:	50                   	push   eax
c001fc7b:	e8 28 0a fe ff       	call   c00006a8 <strlen>
c001fc80:	83 c4 10             	add    esp,0x10
c001fc83:	ba 00 00 00 00       	mov    edx,0x0
c001fc88:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fc8c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001fc90:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001fc97:	0f b6 c0             	movzx  eax,al
c001fc9a:	83 e0 10             	and    eax,0x10
c001fc9d:	74 07                	je     c001fca6 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001fc9f:	b8 02 00 00 00       	mov    eax,0x2
c001fca4:	eb 05                	jmp    c001fcab <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001fca6:	b8 01 00 00 00       	mov    eax,0x1
c001fcab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fcaf:	83 ec 08             	sub    esp,0x8
c001fcb2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001fcb9:	83 c0 1a             	add    eax,0x1a
c001fcbc:	50                   	push   eax
c001fcbd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fcc1:	83 c0 10             	add    eax,0x10
c001fcc4:	50                   	push   eax
c001fcc5:	e8 60 0a fe ff       	call   c000072a <strcpy>
c001fcca:	83 c4 10             	add    esp,0x10
c001fccd:	83 ec 04             	sub    esp,0x4
c001fcd0:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001fcd7:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fcdb:	50                   	push   eax
c001fcdc:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001fce3:	e8 6d 09 fe ff       	call   c0000655 <memcpy>
c001fce8:	83 c4 10             	add    esp,0x10
c001fceb:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001fcf2:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001fcf8:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001fcff:	84 c0                	test   al,al
c001fd01:	75 07                	jne    c001fd0a <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001fd03:	b8 07 00 00 00       	mov    eax,0x7
c001fd08:	eb 17                	jmp    c001fd21 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fd0a:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001fd11:	85 c0                	test   eax,eax
c001fd13:	75 07                	jne    c001fd1c <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001fd15:	b8 00 00 00 00       	mov    eax,0x0
c001fd1a:	eb 05                	jmp    c001fd21 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fd1c:	b8 01 00 00 00       	mov    eax,0x1
c001fd21:	81 c4 3c 02 00 00    	add    esp,0x23c
c001fd27:	c3                   	ret    

c001fd28 <FAT::read(void*, unsigned long, void*, int*)>:
c001fd28:	83 ec 1c             	sub    esp,0x1c
c001fd2b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fd30:	74 07                	je     c001fd39 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001fd32:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001fd37:	75 07                	jne    c001fd40 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001fd39:	b8 04 00 00 00       	mov    eax,0x4
c001fd3e:	eb 3d                	jmp    c001fd7d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001fd40:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fd44:	50                   	push   eax
c001fd45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fd49:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fd4d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fd51:	e8 27 54 fe ff       	call   c000517d <f_read>
c001fd56:	83 c4 10             	add    esp,0x10
c001fd59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fd5d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fd61:	89 c2                	mov    edx,eax
c001fd63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fd67:	89 10                	mov    DWORD PTR [eax],edx
c001fd69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fd6d:	85 c0                	test   eax,eax
c001fd6f:	75 07                	jne    c001fd78 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001fd71:	b8 00 00 00 00       	mov    eax,0x0
c001fd76:	eb 05                	jmp    c001fd7d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001fd78:	b8 01 00 00 00       	mov    eax,0x1
c001fd7d:	83 c4 1c             	add    esp,0x1c
c001fd80:	c3                   	ret    
c001fd81:	90                   	nop

c001fd82 <FAT::write(void*, unsigned long, void*, int*)>:
c001fd82:	83 ec 1c             	sub    esp,0x1c
c001fd85:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fd8a:	74 07                	je     c001fd93 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001fd8c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001fd91:	75 07                	jne    c001fd9a <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001fd93:	b8 04 00 00 00       	mov    eax,0x4
c001fd98:	eb 3d                	jmp    c001fdd7 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001fd9a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fd9e:	50                   	push   eax
c001fd9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fda3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fda7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fdab:	e8 4d 56 fe ff       	call   c00053fd <f_write>
c001fdb0:	83 c4 10             	add    esp,0x10
c001fdb3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fdb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fdbb:	89 c2                	mov    edx,eax
c001fdbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fdc1:	89 10                	mov    DWORD PTR [eax],edx
c001fdc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fdc7:	85 c0                	test   eax,eax
c001fdc9:	75 07                	jne    c001fdd2 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001fdcb:	b8 00 00 00 00       	mov    eax,0x0
c001fdd0:	eb 05                	jmp    c001fdd7 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001fdd2:	b8 01 00 00 00       	mov    eax,0x1
c001fdd7:	83 c4 1c             	add    esp,0x1c
c001fdda:	c3                   	ret    
c001fddb:	90                   	nop

c001fddc <FAT::close(void*)>:
c001fddc:	83 ec 1c             	sub    esp,0x1c
c001fddf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fde4:	75 07                	jne    c001fded <FAT::close(void*)+0x11>
c001fde6:	b8 04 00 00 00       	mov    eax,0x4
c001fdeb:	eb 36                	jmp    c001fe23 <FAT::close(void*)+0x47>
c001fded:	83 ec 0c             	sub    esp,0xc
c001fdf0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fdf4:	e8 9a 5a fe ff       	call   c0005893 <f_close>
c001fdf9:	83 c4 10             	add    esp,0x10
c001fdfc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fe00:	83 ec 0c             	sub    esp,0xc
c001fe03:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fe07:	e8 de f6 fe ff       	call   c000f4ea <free>
c001fe0c:	83 c4 10             	add    esp,0x10
c001fe0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe13:	85 c0                	test   eax,eax
c001fe15:	75 07                	jne    c001fe1e <FAT::close(void*)+0x42>
c001fe17:	b8 00 00 00 00       	mov    eax,0x0
c001fe1c:	eb 05                	jmp    c001fe23 <FAT::close(void*)+0x47>
c001fe1e:	b8 01 00 00 00       	mov    eax,0x1
c001fe23:	83 c4 1c             	add    esp,0x1c
c001fe26:	c3                   	ret    
c001fe27:	90                   	nop

c001fe28 <FAT::closeDir(void*)>:
c001fe28:	83 ec 1c             	sub    esp,0x1c
c001fe2b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fe30:	75 07                	jne    c001fe39 <FAT::closeDir(void*)+0x11>
c001fe32:	b8 04 00 00 00       	mov    eax,0x4
c001fe37:	eb 36                	jmp    c001fe6f <FAT::closeDir(void*)+0x47>
c001fe39:	83 ec 0c             	sub    esp,0xc
c001fe3c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fe40:	e8 36 60 fe ff       	call   c0005e7b <f_closedir>
c001fe45:	83 c4 10             	add    esp,0x10
c001fe48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fe4c:	83 ec 0c             	sub    esp,0xc
c001fe4f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fe53:	e8 92 f6 fe ff       	call   c000f4ea <free>
c001fe58:	83 c4 10             	add    esp,0x10
c001fe5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe5f:	85 c0                	test   eax,eax
c001fe61:	75 07                	jne    c001fe6a <FAT::closeDir(void*)+0x42>
c001fe63:	b8 00 00 00 00       	mov    eax,0x0
c001fe68:	eb 05                	jmp    c001fe6f <FAT::closeDir(void*)+0x47>
c001fe6a:	b8 01 00 00 00       	mov    eax,0x1
c001fe6f:	83 c4 1c             	add    esp,0x1c
c001fe72:	c3                   	ret    
c001fe73:	90                   	nop

c001fe74 <FAT::seek(void*, unsigned long long)>:
c001fe74:	83 ec 2c             	sub    esp,0x2c
c001fe77:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fe7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fe7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001fe83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fe87:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001fe8c:	75 07                	jne    c001fe95 <FAT::seek(void*, unsigned long long)+0x21>
c001fe8e:	b8 04 00 00 00       	mov    eax,0x4
c001fe93:	eb 2f                	jmp    c001fec4 <FAT::seek(void*, unsigned long long)+0x50>
c001fe95:	83 ec 04             	sub    esp,0x4
c001fe98:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fe9c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fea0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001fea4:	e8 19 5a fe ff       	call   c00058c2 <f_lseek>
c001fea9:	83 c4 10             	add    esp,0x10
c001feac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001feb0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001feb4:	85 c0                	test   eax,eax
c001feb6:	75 07                	jne    c001febf <FAT::seek(void*, unsigned long long)+0x4b>
c001feb8:	b8 00 00 00 00       	mov    eax,0x0
c001febd:	eb 05                	jmp    c001fec4 <FAT::seek(void*, unsigned long long)+0x50>
c001febf:	b8 01 00 00 00       	mov    eax,0x1
c001fec4:	83 c4 2c             	add    esp,0x2c
c001fec7:	c3                   	ret    

c001fec8 <fatWrapperReadDisk>:
c001fec8:	83 ec 1c             	sub    esp,0x1c
c001fecb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fecf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fed3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fed7:	89 04 24             	mov    DWORD PTR [esp],eax
c001feda:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fede:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fee2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fee7:	8b 04 85 00 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2e00]
c001feee:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fef2:	83 ec 0c             	sub    esp,0xc
c001fef5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fef9:	52                   	push   edx
c001fefa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fefe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ff02:	50                   	push   eax
c001ff03:	e8 3c 5f ff ff       	call   c0015e44 <LogicalDisk::read(unsigned long long, int, void*)>
c001ff08:	83 c4 20             	add    esp,0x20
c001ff0b:	83 c4 1c             	add    esp,0x1c
c001ff0e:	c3                   	ret    

c001ff0f <fatWrapperWriteDisk>:
c001ff0f:	83 ec 1c             	sub    esp,0x1c
c001ff12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff16:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ff1a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ff1e:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff21:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ff25:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ff29:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ff2e:	8b 04 85 00 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2e00]
c001ff35:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ff39:	83 ec 0c             	sub    esp,0xc
c001ff3c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ff40:	52                   	push   edx
c001ff41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ff45:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ff49:	50                   	push   eax
c001ff4a:	e8 61 5f ff ff       	call   c0015eb0 <LogicalDisk::write(unsigned long long, int, void*)>
c001ff4f:	83 c4 20             	add    esp,0x20
c001ff52:	83 c4 1c             	add    esp,0x1c
c001ff55:	c3                   	ret    

c001ff56 <fatWrapperIoctl>:
c001ff56:	53                   	push   ebx
c001ff57:	83 ec 28             	sub    esp,0x28
c001ff5a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ff5e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ff62:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001ff66:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ff6a:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001ff6f:	75 31                	jne    c001ffa2 <fatWrapperIoctl+0x4c>
c001ff71:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ff75:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ff79:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ff7e:	8b 04 85 00 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2e00]
c001ff85:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001ff8b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ff91:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ff95:	66 89 02             	mov    WORD PTR [edx],ax
c001ff98:	b8 00 00 00 00       	mov    eax,0x0
c001ff9d:	e9 b2 00 00 00       	jmp    c0020054 <fatWrapperIoctl+0xfe>
c001ffa2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001ffa7:	75 6a                	jne    c0020013 <fatWrapperIoctl+0xbd>
c001ffa9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ffad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ffb1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ffb6:	8b 04 85 00 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2e00]
c001ffbd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001ffc3:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001ffc9:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001ffcf:	89 c8                	mov    eax,ecx
c001ffd1:	89 da                	mov    edx,ebx
c001ffd3:	0f a4 c2 0a          	shld   edx,eax,0xa
c001ffd7:	c1 e0 0a             	shl    eax,0xa
c001ffda:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001ffdf:	8b 0c 8d 00 d2 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2e00]
c001ffe6:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001ffec:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001fff2:	89 cb                	mov    ebx,ecx
c001fff4:	c1 fb 1f             	sar    ebx,0x1f
c001fff7:	53                   	push   ebx
c001fff8:	51                   	push   ecx
c001fff9:	52                   	push   edx
c001fffa:	50                   	push   eax
c001fffb:	e8 4c 55 00 00       	call   c002554c <__udivdi3>
c0020000:	83 c4 10             	add    esp,0x10
c0020003:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020007:	89 01                	mov    DWORD PTR [ecx],eax
c0020009:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002000c:	b8 00 00 00 00       	mov    eax,0x0
c0020011:	eb 41                	jmp    c0020054 <fatWrapperIoctl+0xfe>
c0020013:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020018:	75 07                	jne    c0020021 <fatWrapperIoctl+0xcb>
c002001a:	b8 00 00 00 00       	mov    eax,0x0
c002001f:	eb 33                	jmp    c0020054 <fatWrapperIoctl+0xfe>
c0020021:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020026:	75 19                	jne    c0020041 <fatWrapperIoctl+0xeb>
c0020028:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002002c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020030:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020034:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002003a:	b8 00 00 00 00       	mov    eax,0x0
c002003f:	eb 13                	jmp    c0020054 <fatWrapperIoctl+0xfe>
c0020041:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020046:	75 07                	jne    c002004f <fatWrapperIoctl+0xf9>
c0020048:	b8 00 00 00 00       	mov    eax,0x0
c002004d:	eb 05                	jmp    c0020054 <fatWrapperIoctl+0xfe>
c002004f:	b8 04 00 00 00       	mov    eax,0x4
c0020054:	83 c4 28             	add    esp,0x28
c0020057:	5b                   	pop    ebx
c0020058:	c3                   	ret    
c0020059:	90                   	nop

c002005a <FAT::FAT()>:
c002005a:	83 ec 1c             	sub    esp,0x1c
c002005d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020061:	83 ec 0c             	sub    esp,0xc
c0020064:	50                   	push   eax
c0020065:	e8 1a 2a ff ff       	call   c0012a84 <Filesystem::Filesystem()>
c002006a:	83 c4 10             	add    esp,0x10
c002006d:	ba 9c b0 02 c0       	mov    edx,0xc002b09c
c0020072:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020076:	89 10                	mov    DWORD PTR [eax],edx
c0020078:	c7 05 00 e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e200,0x0
c0020082:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002008a:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c002008f:	7f 15                	jg     c00200a6 <FAT::FAT()+0x4c>
c0020091:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020095:	c7 04 85 20 e2 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd1de0],0xffffffff
c00200a0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00200a4:	eb e4                	jmp    c002008a <FAT::FAT()+0x30>
c00200a6:	90                   	nop
c00200a7:	83 c4 1c             	add    esp,0x1c
c00200aa:	c3                   	ret    
c00200ab:	90                   	nop

c00200ac <FAT::fixFilepath(char*)>:
c00200ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00200b0:	8a 00                	mov    al,BYTE PTR [eax]
c00200b2:	3c 40                	cmp    al,0x40
c00200b4:	7e 2c                	jle    c00200e2 <FAT::fixFilepath(char*)+0x36>
c00200b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00200ba:	8a 00                	mov    al,BYTE PTR [eax]
c00200bc:	83 e8 41             	sub    eax,0x41
c00200bf:	88 c2                	mov    dl,al
c00200c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00200c5:	88 10                	mov    BYTE PTR [eax],dl
c00200c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00200cb:	8a 00                	mov    al,BYTE PTR [eax]
c00200cd:	0f be c0             	movsx  eax,al
c00200d0:	8b 04 85 20 e2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1de0]
c00200d7:	83 c0 30             	add    eax,0x30
c00200da:	88 c2                	mov    dl,al
c00200dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00200e0:	88 10                	mov    BYTE PTR [eax],dl
c00200e2:	90                   	nop
c00200e3:	c3                   	ret    

c00200e4 <FAT::open(char const*, void**, FileOpenMode)>:
c00200e4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00200ea:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00200f2:	74 0a                	je     c00200fe <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00200f4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00200fc:	75 0a                	jne    c0020108 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00200fe:	b8 04 00 00 00       	mov    eax,0x4
c0020103:	e9 fd 00 00 00       	jmp    c0020205 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020108:	83 ec 08             	sub    esp,0x8
c002010b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020112:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020116:	50                   	push   eax
c0020117:	e8 0e 06 fe ff       	call   c000072a <strcpy>
c002011c:	83 c4 10             	add    esp,0x10
c002011f:	83 ec 08             	sub    esp,0x8
c0020122:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020126:	50                   	push   eax
c0020127:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002012e:	e8 79 ff ff ff       	call   c00200ac <FAT::fixFilepath(char*)>
c0020133:	83 c4 10             	add    esp,0x10
c0020136:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c002013e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020145:	83 e0 01             	and    eax,0x1
c0020148:	74 08                	je     c0020152 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c002014a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020152:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020159:	83 e0 04             	and    eax,0x4
c002015c:	74 10                	je     c002016e <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c002015e:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020166:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002016e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020175:	83 e0 02             	and    eax,0x2
c0020178:	74 08                	je     c0020182 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c002017a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020182:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020189:	83 e0 08             	and    eax,0x8
c002018c:	74 08                	je     c0020196 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c002018e:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020196:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002019d:	83 e0 10             	and    eax,0x10
c00201a0:	74 08                	je     c00201aa <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00201a2:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00201aa:	83 ec 0c             	sub    esp,0xc
c00201ad:	68 50 02 00 00       	push   0x250
c00201b2:	e8 23 f3 fe ff       	call   c000f4da <malloc>
c00201b7:	83 c4 10             	add    esp,0x10
c00201ba:	89 c2                	mov    edx,eax
c00201bc:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00201c3:	89 10                	mov    DWORD PTR [eax],edx
c00201c5:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00201cd:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00201d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00201d6:	83 ec 04             	sub    esp,0x4
c00201d9:	52                   	push   edx
c00201da:	8d 54 24 10          	lea    edx,[esp+0x10]
c00201de:	52                   	push   edx
c00201df:	50                   	push   eax
c00201e0:	e8 5c 4b fe ff       	call   c0004d41 <f_open>
c00201e5:	83 c4 10             	add    esp,0x10
c00201e8:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00201ef:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00201f7:	74 07                	je     c0020200 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00201f9:	b8 01 00 00 00       	mov    eax,0x1
c00201fe:	eb 05                	jmp    c0020205 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020200:	b8 00 00 00 00       	mov    eax,0x0
c0020205:	81 c4 1c 01 00 00    	add    esp,0x11c
c002020b:	c3                   	ret    

c002020c <FAT::openDir(char const*, void**)>:
c002020c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020212:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002021a:	74 0a                	je     c0020226 <FAT::openDir(char const*, void**)+0x1a>
c002021c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020224:	75 07                	jne    c002022d <FAT::openDir(char const*, void**)+0x21>
c0020226:	b8 04 00 00 00       	mov    eax,0x4
c002022b:	eb 7d                	jmp    c00202aa <FAT::openDir(char const*, void**)+0x9e>
c002022d:	83 ec 08             	sub    esp,0x8
c0020230:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020237:	8d 44 24 18          	lea    eax,[esp+0x18]
c002023b:	50                   	push   eax
c002023c:	e8 e9 04 fe ff       	call   c000072a <strcpy>
c0020241:	83 c4 10             	add    esp,0x10
c0020244:	83 ec 08             	sub    esp,0x8
c0020247:	8d 44 24 14          	lea    eax,[esp+0x14]
c002024b:	50                   	push   eax
c002024c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020253:	e8 54 fe ff ff       	call   c00200ac <FAT::fixFilepath(char*)>
c0020258:	83 c4 10             	add    esp,0x10
c002025b:	83 ec 0c             	sub    esp,0xc
c002025e:	6a 4c                	push   0x4c
c0020260:	e8 75 f2 fe ff       	call   c000f4da <malloc>
c0020265:	83 c4 10             	add    esp,0x10
c0020268:	89 c2                	mov    edx,eax
c002026a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020271:	89 10                	mov    DWORD PTR [eax],edx
c0020273:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002027a:	8b 00                	mov    eax,DWORD PTR [eax]
c002027c:	83 ec 08             	sub    esp,0x8
c002027f:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020283:	52                   	push   edx
c0020284:	50                   	push   eax
c0020285:	e8 ef 5a fe ff       	call   c0005d79 <f_opendir>
c002028a:	83 c4 10             	add    esp,0x10
c002028d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020294:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c002029c:	74 07                	je     c00202a5 <FAT::openDir(char const*, void**)+0x99>
c002029e:	b8 01 00 00 00       	mov    eax,0x1
c00202a3:	eb 05                	jmp    c00202aa <FAT::openDir(char const*, void**)+0x9e>
c00202a5:	b8 00 00 00 00       	mov    eax,0x0
c00202aa:	81 c4 1c 01 00 00    	add    esp,0x11c
c00202b0:	c3                   	ret    
c00202b1:	90                   	nop

c00202b2 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00202b2:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00202b8:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00202c0:	75 0a                	jne    c00202cc <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00202c2:	b8 04 00 00 00       	mov    eax,0x4
c00202c7:	e9 c9 00 00 00       	jmp    c0020395 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00202cc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00202d4:	75 0a                	jne    c00202e0 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00202d6:	b8 04 00 00 00       	mov    eax,0x4
c00202db:	e9 b5 00 00 00       	jmp    c0020395 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00202e0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00202e8:	75 0a                	jne    c00202f4 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00202ea:	b8 04 00 00 00       	mov    eax,0x4
c00202ef:	e9 a1 00 00 00       	jmp    c0020395 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00202f4:	83 ec 08             	sub    esp,0x8
c00202f7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00202fe:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020305:	50                   	push   eax
c0020306:	e8 1f 04 fe ff       	call   c000072a <strcpy>
c002030b:	83 c4 10             	add    esp,0x10
c002030e:	83 ec 08             	sub    esp,0x8
c0020311:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020318:	50                   	push   eax
c0020319:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020320:	e8 87 fd ff ff       	call   c00200ac <FAT::fixFilepath(char*)>
c0020325:	83 c4 10             	add    esp,0x10
c0020328:	83 ec 08             	sub    esp,0x8
c002032b:	8d 44 24 08          	lea    eax,[esp+0x8]
c002032f:	50                   	push   eax
c0020330:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020337:	50                   	push   eax
c0020338:	e8 fb 5b fe ff       	call   c0005f38 <f_stat>
c002033d:	83 c4 10             	add    esp,0x10
c0020340:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020347:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002034e:	85 c0                	test   eax,eax
c0020350:	74 07                	je     c0020359 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020352:	83 f8 04             	cmp    eax,0x4
c0020355:	74 32                	je     c0020389 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020357:	eb 37                	jmp    c0020390 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020359:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002035d:	0f b6 c0             	movzx  eax,al
c0020360:	83 e0 10             	and    eax,0x10
c0020363:	0f 95 c2             	setne  dl
c0020366:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c002036d:	88 10                	mov    BYTE PTR [eax],dl
c002036f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020372:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020376:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c002037d:	89 01                	mov    DWORD PTR [ecx],eax
c002037f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020382:	b8 00 00 00 00       	mov    eax,0x0
c0020387:	eb 0c                	jmp    c0020395 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020389:	b8 02 00 00 00       	mov    eax,0x2
c002038e:	eb 05                	jmp    c0020395 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020390:	b8 01 00 00 00       	mov    eax,0x1
c0020395:	81 c4 2c 02 00 00    	add    esp,0x22c
c002039b:	c3                   	ret    

c002039c <FAT::unlink(char const*)>:
c002039c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00203a2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00203aa:	75 07                	jne    c00203b3 <FAT::unlink(char const*)+0x17>
c00203ac:	b8 04 00 00 00       	mov    eax,0x4
c00203b1:	eb 5c                	jmp    c002040f <FAT::unlink(char const*)+0x73>
c00203b3:	83 ec 08             	sub    esp,0x8
c00203b6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00203bd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00203c1:	50                   	push   eax
c00203c2:	e8 63 03 fe ff       	call   c000072a <strcpy>
c00203c7:	83 c4 10             	add    esp,0x10
c00203ca:	83 ec 08             	sub    esp,0x8
c00203cd:	8d 44 24 14          	lea    eax,[esp+0x14]
c00203d1:	50                   	push   eax
c00203d2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00203d9:	e8 ce fc ff ff       	call   c00200ac <FAT::fixFilepath(char*)>
c00203de:	83 c4 10             	add    esp,0x10
c00203e1:	83 ec 0c             	sub    esp,0xc
c00203e4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00203e8:	50                   	push   eax
c00203e9:	e8 9c 5e fe ff       	call   c000628a <f_unlink>
c00203ee:	83 c4 10             	add    esp,0x10
c00203f1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00203f8:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00203ff:	85 c0                	test   eax,eax
c0020401:	75 07                	jne    c002040a <FAT::unlink(char const*)+0x6e>
c0020403:	b8 00 00 00 00       	mov    eax,0x0
c0020408:	eb 05                	jmp    c002040f <FAT::unlink(char const*)+0x73>
c002040a:	b8 01 00 00 00       	mov    eax,0x1
c002040f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020415:	c3                   	ret    

c0020416 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020416:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002041c:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020423:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c002042a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002042e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020432:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c002043a:	75 0a                	jne    c0020446 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c002043c:	b8 04 00 00 00       	mov    eax,0x4
c0020441:	e9 1c 01 00 00       	jmp    c0020562 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020446:	83 ec 08             	sub    esp,0x8
c0020449:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020450:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020454:	50                   	push   eax
c0020455:	e8 d0 02 fe ff       	call   c000072a <strcpy>
c002045a:	83 c4 10             	add    esp,0x10
c002045d:	83 ec 08             	sub    esp,0x8
c0020460:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020464:	50                   	push   eax
c0020465:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002046c:	e8 3b fc ff ff       	call   c00200ac <FAT::fixFilepath(char*)>
c0020471:	83 c4 10             	add    esp,0x10
c0020474:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c002047c:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020484:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020489:	83 e0 01             	and    eax,0x1
c002048c:	74 08                	je     c0020496 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c002048e:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020496:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002049b:	83 e0 02             	and    eax,0x2
c002049e:	74 08                	je     c00204a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c00204a0:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00204a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00204ad:	83 e0 04             	and    eax,0x4
c00204b0:	74 08                	je     c00204ba <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00204b2:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00204ba:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00204bf:	83 e0 08             	and    eax,0x8
c00204c2:	74 08                	je     c00204cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c00204c4:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00204cc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00204d1:	83 e0 01             	and    eax,0x1
c00204d4:	74 08                	je     c00204de <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00204d6:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00204de:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00204e3:	83 e0 02             	and    eax,0x2
c00204e6:	74 08                	je     c00204f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00204e8:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00204f0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00204f5:	83 e0 04             	and    eax,0x4
c00204f8:	74 08                	je     c0020502 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00204fa:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020502:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020507:	83 e0 08             	and    eax,0x8
c002050a:	74 08                	je     c0020514 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c002050c:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020514:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c002051b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020522:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c002052a:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020532:	83 ec 04             	sub    esp,0x4
c0020535:	52                   	push   edx
c0020536:	50                   	push   eax
c0020537:	8d 44 24 24          	lea    eax,[esp+0x24]
c002053b:	50                   	push   eax
c002053c:	e8 eb 63 fe ff       	call   c000692c <f_chmod>
c0020541:	83 c4 10             	add    esp,0x10
c0020544:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c002054b:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020552:	85 c0                	test   eax,eax
c0020554:	75 07                	jne    c002055d <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020556:	b8 00 00 00 00       	mov    eax,0x0
c002055b:	eb 05                	jmp    c0020562 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002055d:	b8 01 00 00 00       	mov    eax,0x1
c0020562:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020568:	c3                   	ret    
c0020569:	90                   	nop

c002056a <FAT::rename(char const*, char const*)>:
c002056a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020570:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020578:	74 0a                	je     c0020584 <FAT::rename(char const*, char const*)+0x1a>
c002057a:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020582:	75 0a                	jne    c002058e <FAT::rename(char const*, char const*)+0x24>
c0020584:	b8 04 00 00 00       	mov    eax,0x4
c0020589:	e9 98 00 00 00       	jmp    c0020626 <FAT::rename(char const*, char const*)+0xbc>
c002058e:	83 ec 08             	sub    esp,0x8
c0020591:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020598:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002059f:	50                   	push   eax
c00205a0:	e8 85 01 fe ff       	call   c000072a <strcpy>
c00205a5:	83 c4 10             	add    esp,0x10
c00205a8:	83 ec 08             	sub    esp,0x8
c00205ab:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00205b2:	50                   	push   eax
c00205b3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00205ba:	e8 ed fa ff ff       	call   c00200ac <FAT::fixFilepath(char*)>
c00205bf:	83 c4 10             	add    esp,0x10
c00205c2:	83 ec 08             	sub    esp,0x8
c00205c5:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00205cc:	8d 44 24 18          	lea    eax,[esp+0x18]
c00205d0:	50                   	push   eax
c00205d1:	e8 54 01 fe ff       	call   c000072a <strcpy>
c00205d6:	83 c4 10             	add    esp,0x10
c00205d9:	83 ec 08             	sub    esp,0x8
c00205dc:	8d 44 24 14          	lea    eax,[esp+0x14]
c00205e0:	50                   	push   eax
c00205e1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00205e8:	e8 bf fa ff ff       	call   c00200ac <FAT::fixFilepath(char*)>
c00205ed:	83 c4 10             	add    esp,0x10
c00205f0:	83 ec 08             	sub    esp,0x8
c00205f3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00205f7:	50                   	push   eax
c00205f8:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00205ff:	50                   	push   eax
c0020600:	e8 34 60 fe ff       	call   c0006639 <f_rename>
c0020605:	83 c4 10             	add    esp,0x10
c0020608:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c002060f:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020616:	85 c0                	test   eax,eax
c0020618:	75 07                	jne    c0020621 <FAT::rename(char const*, char const*)+0xb7>
c002061a:	b8 00 00 00 00       	mov    eax,0x0
c002061f:	eb 05                	jmp    c0020626 <FAT::rename(char const*, char const*)+0xbc>
c0020621:	b8 01 00 00 00       	mov    eax,0x1
c0020626:	81 c4 1c 02 00 00    	add    esp,0x21c
c002062c:	c3                   	ret    
c002062d:	90                   	nop

c002062e <FAT::mkdir(char const*)>:
c002062e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020634:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002063c:	75 07                	jne    c0020645 <FAT::mkdir(char const*)+0x17>
c002063e:	b8 04 00 00 00       	mov    eax,0x4
c0020643:	eb 5c                	jmp    c00206a1 <FAT::mkdir(char const*)+0x73>
c0020645:	83 ec 08             	sub    esp,0x8
c0020648:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002064f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020653:	50                   	push   eax
c0020654:	e8 d1 00 fe ff       	call   c000072a <strcpy>
c0020659:	83 c4 10             	add    esp,0x10
c002065c:	83 ec 08             	sub    esp,0x8
c002065f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020663:	50                   	push   eax
c0020664:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002066b:	e8 3c fa ff ff       	call   c00200ac <FAT::fixFilepath(char*)>
c0020670:	83 c4 10             	add    esp,0x10
c0020673:	83 ec 0c             	sub    esp,0xc
c0020676:	8d 44 24 18          	lea    eax,[esp+0x18]
c002067a:	50                   	push   eax
c002067b:	e8 8d 5d fe ff       	call   c000640d <f_mkdir>
c0020680:	83 c4 10             	add    esp,0x10
c0020683:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002068a:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020691:	85 c0                	test   eax,eax
c0020693:	75 07                	jne    c002069c <FAT::mkdir(char const*)+0x6e>
c0020695:	b8 00 00 00 00       	mov    eax,0x0
c002069a:	eb 05                	jmp    c00206a1 <FAT::mkdir(char const*)+0x73>
c002069c:	b8 01 00 00 00       	mov    eax,0x1
c00206a1:	81 c4 1c 01 00 00    	add    esp,0x11c
c00206a7:	c3                   	ret    

c00206a8 <FAT::exists(char const*)>:
c00206a8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00206ae:	83 ec 08             	sub    esp,0x8
c00206b1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00206b8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00206bc:	50                   	push   eax
c00206bd:	e8 68 00 fe ff       	call   c000072a <strcpy>
c00206c2:	83 c4 10             	add    esp,0x10
c00206c5:	83 ec 08             	sub    esp,0x8
c00206c8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00206cc:	50                   	push   eax
c00206cd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00206d4:	e8 d3 f9 ff ff       	call   c00200ac <FAT::fixFilepath(char*)>
c00206d9:	83 c4 10             	add    esp,0x10
c00206dc:	83 ec 08             	sub    esp,0x8
c00206df:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c00206e6:	50                   	push   eax
c00206e7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00206eb:	50                   	push   eax
c00206ec:	e8 47 58 fe ff       	call   c0005f38 <f_stat>
c00206f1:	83 c4 10             	add    esp,0x10
c00206f4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00206fb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020702:	85 c0                	test   eax,eax
c0020704:	75 04                	jne    c002070a <FAT::exists(char const*)+0x62>
c0020706:	b0 01                	mov    al,0x1
c0020708:	eb 02                	jmp    c002070c <FAT::exists(char const*)+0x64>
c002070a:	b0 00                	mov    al,0x0
c002070c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020712:	c3                   	ret    
c0020713:	90                   	nop

c0020714 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020714:	b8 08 00 00 00       	mov    eax,0x8
c0020719:	c3                   	ret    

c002071a <ISO9660::seek(void*, unsigned long long)>:
c002071a:	53                   	push   ebx
c002071b:	b8 04 00 00 00       	mov    eax,0x4
c0020720:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020724:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020728:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002072c:	85 d2                	test   edx,edx
c002072e:	74 17                	je     c0020747 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020730:	89 c8                	mov    eax,ecx
c0020732:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0020735:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0020738:	b8 01 00 00 00       	mov    eax,0x1
c002073d:	73 08                	jae    c0020747 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002073f:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0020742:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0020745:	31 c0                	xor    eax,eax
c0020747:	5b                   	pop    ebx
c0020748:	c3                   	ret    
c0020749:	90                   	nop

c002074a <ISO9660::tell(void*, unsigned long long*)>:
c002074a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002074e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020752:	85 d2                	test   edx,edx
c0020754:	74 12                	je     c0020768 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020756:	85 c0                	test   eax,eax
c0020758:	74 0e                	je     c0020768 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002075a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002075d:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0020760:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020763:	89 10                	mov    DWORD PTR [eax],edx
c0020765:	31 c0                	xor    eax,eax
c0020767:	c3                   	ret    
c0020768:	b8 04 00 00 00       	mov    eax,0x4
c002076d:	c3                   	ret    

c002076e <ISO9660::getName()>:
c002076e:	b8 f8 b0 02 c0       	mov    eax,0xc002b0f8
c0020773:	c3                   	ret    

c0020774 <ISO9660::stat(void*, unsigned long long*)>:
c0020774:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020778:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002077c:	85 d2                	test   edx,edx
c002077e:	74 12                	je     c0020792 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020780:	85 c0                	test   eax,eax
c0020782:	74 0e                	je     c0020792 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020784:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0020787:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c002078a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002078d:	89 10                	mov    DWORD PTR [eax],edx
c002078f:	31 c0                	xor    eax,eax
c0020791:	c3                   	ret    
c0020792:	b8 04 00 00 00       	mov    eax,0x4
c0020797:	c3                   	ret    

c0020798 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0020798:	b8 01 00 00 00       	mov    eax,0x1
c002079d:	c3                   	ret    

c002079e <ISO9660::unlink(char const*)>:
c002079e:	b8 01 00 00 00       	mov    eax,0x1
c00207a3:	c3                   	ret    

c00207a4 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00207a4:	b8 01 00 00 00       	mov    eax,0x1
c00207a9:	c3                   	ret    

c00207aa <ISO9660::rename(char const*, char const*)>:
c00207aa:	b8 01 00 00 00       	mov    eax,0x1
c00207af:	c3                   	ret    

c00207b0 <ISO9660::mkdir(char const*)>:
c00207b0:	b8 01 00 00 00       	mov    eax,0x1
c00207b5:	c3                   	ret    

c00207b6 <ISO9660::close(void*)>:
c00207b6:	83 ec 0c             	sub    esp,0xc
c00207b9:	b8 04 00 00 00       	mov    eax,0x4
c00207be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00207c2:	85 d2                	test   edx,edx
c00207c4:	74 0e                	je     c00207d4 <ISO9660::close(void*)+0x1e>
c00207c6:	83 ec 0c             	sub    esp,0xc
c00207c9:	52                   	push   edx
c00207ca:	e8 1b ed fe ff       	call   c000f4ea <free>
c00207cf:	83 c4 10             	add    esp,0x10
c00207d2:	31 c0                	xor    eax,eax
c00207d4:	83 c4 0c             	add    esp,0xc
c00207d7:	c3                   	ret    

c00207d8 <ISO9660::closeDir(void*)>:
c00207d8:	83 ec 0c             	sub    esp,0xc
c00207db:	b8 04 00 00 00       	mov    eax,0x4
c00207e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00207e4:	85 d2                	test   edx,edx
c00207e6:	74 0e                	je     c00207f6 <ISO9660::closeDir(void*)+0x1e>
c00207e8:	83 ec 0c             	sub    esp,0xc
c00207eb:	52                   	push   edx
c00207ec:	e8 f9 ec fe ff       	call   c000f4ea <free>
c00207f1:	83 c4 10             	add    esp,0x10
c00207f4:	31 c0                	xor    eax,eax
c00207f6:	83 c4 0c             	add    esp,0xc
c00207f9:	c3                   	ret    

c00207fa <ISO9660::~ISO9660()>:
c00207fa:	83 ec 0c             	sub    esp,0xc
c00207fd:	ba 5c b1 02 c0       	mov    edx,0xc002b15c
c0020802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020806:	89 10                	mov    DWORD PTR [eax],edx
c0020808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002080c:	83 ec 0c             	sub    esp,0xc
c002080f:	50                   	push   eax
c0020810:	e8 93 22 ff ff       	call   c0012aa8 <Filesystem::~Filesystem()>
c0020815:	83 c4 10             	add    esp,0x10
c0020818:	90                   	nop
c0020819:	83 c4 0c             	add    esp,0xc
c002081c:	c3                   	ret    
c002081d:	90                   	nop

c002081e <ISO9660::~ISO9660()>:
c002081e:	83 ec 0c             	sub    esp,0xc
c0020821:	83 ec 0c             	sub    esp,0xc
c0020824:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020828:	e8 cd ff ff ff       	call   c00207fa <ISO9660::~ISO9660()>
c002082d:	83 c4 10             	add    esp,0x10
c0020830:	83 ec 08             	sub    esp,0x8
c0020833:	6a 08                	push   0x8
c0020835:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020839:	e8 61 1e ff ff       	call   c001269f <operator delete(void*, unsigned long)>
c002083e:	83 c4 10             	add    esp,0x10
c0020841:	83 c4 0c             	add    esp,0xc
c0020844:	c3                   	ret    

c0020845 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0020845:	55                   	push   ebp
c0020846:	31 c9                	xor    ecx,ecx
c0020848:	57                   	push   edi
c0020849:	56                   	push   esi
c002084a:	53                   	push   ebx
c002084b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c002084f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0020853:	89 eb                	mov    ebx,ebp
c0020855:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0020859:	39 ce                	cmp    esi,ecx
c002085b:	7e 17                	jle    c0020874 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c002085d:	31 d2                	xor    edx,edx
c002085f:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0020863:	7d 13                	jge    c0020878 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0020865:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020869:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002086c:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c002086f:	75 0d                	jne    c002087e <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0020871:	42                   	inc    edx
c0020872:	eb eb                	jmp    c002085f <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0020874:	31 c0                	xor    eax,eax
c0020876:	eb 0a                	jmp    c0020882 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020878:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c002087c:	eb 04                	jmp    c0020882 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002087e:	41                   	inc    ecx
c002087f:	43                   	inc    ebx
c0020880:	eb d7                	jmp    c0020859 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0020882:	5b                   	pop    ebx
c0020883:	5e                   	pop    esi
c0020884:	5f                   	pop    edi
c0020885:	5d                   	pop    ebp
c0020886:	c3                   	ret    

c0020887 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0020887:	56                   	push   esi
c0020888:	53                   	push   ebx
c0020889:	52                   	push   edx
c002088a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002088e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0020892:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020896:	39 0d 00 e3 02 c0    	cmp    DWORD PTR ds:0xc002e300,ecx
c002089c:	75 08                	jne    c00208a6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c002089e:	38 05 74 c1 02 c0    	cmp    BYTE PTR ds:0xc002c174,al
c00208a4:	74 2b                	je     c00208d1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c00208a6:	83 ec 0c             	sub    esp,0xc
c00208a9:	a2 74 c1 02 c0       	mov    ds:0xc002c174,al
c00208ae:	68 20 e3 02 c0       	push   0xc002e320
c00208b3:	0f be c0             	movsx  eax,al
c00208b6:	6a 01                	push   0x1
c00208b8:	89 0d 00 e3 02 c0    	mov    DWORD PTR ds:0xc002e300,ecx
c00208be:	31 db                	xor    ebx,ebx
c00208c0:	53                   	push   ebx
c00208c1:	51                   	push   ecx
c00208c2:	ff 34 85 fc d0 02 c0 	push   DWORD PTR [eax*4-0x3ffd2f04]
c00208c9:	e8 76 55 ff ff       	call   c0015e44 <LogicalDisk::read(unsigned long long, int, void*)>
c00208ce:	83 c4 20             	add    esp,0x20
c00208d1:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c00208d9:	c7 44 24 14 20 e3 02 c0 	mov    DWORD PTR [esp+0x14],0xc002e320
c00208e1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00208e5:	58                   	pop    eax
c00208e6:	5b                   	pop    ebx
c00208e7:	5e                   	pop    esi
c00208e8:	e9 68 fd fd ff       	jmp    c0000655 <memcpy>
c00208ed:	90                   	nop

c00208ee <ISO9660::tryMount(LogicalDisk*, int)>:
c00208ee:	81 ec 10 08 00 00    	sub    esp,0x810
c00208f4:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00208fb:	83 c0 41             	add    eax,0x41
c00208fe:	0f be c0             	movsx  eax,al
c0020901:	50                   	push   eax
c0020902:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020906:	50                   	push   eax
c0020907:	6a 10                	push   0x10
c0020909:	e8 79 ff ff ff       	call   c0020887 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002090e:	83 c4 10             	add    esp,0x10
c0020911:	31 c0                	xor    eax,eax
c0020913:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0020918:	75 1d                	jne    c0020937 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002091a:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c002091f:	75 16                	jne    c0020937 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020921:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0020926:	75 0f                	jne    c0020937 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020928:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c002092d:	75 08                	jne    c0020937 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002092f:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0020934:	0f 94 c0             	sete   al
c0020937:	81 c4 0c 08 00 00    	add    esp,0x80c
c002093d:	c3                   	ret    

c002093e <ISO9660::read(void*, unsigned long, void*, int*)>:
c002093e:	55                   	push   ebp
c002093f:	57                   	push   edi
c0020940:	56                   	push   esi
c0020941:	53                   	push   ebx
c0020942:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0020948:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c002094f:	85 ed                	test   ebp,ebp
c0020951:	0f 84 d6 01 00 00    	je     c0020b2d <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0020957:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c002095f:	0f 84 c8 01 00 00    	je     c0020b2d <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0020965:	b8 01 00 00 00       	mov    eax,0x1
c002096a:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002096e:	0f 85 be 01 00 00    	jne    c0020b32 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0020974:	31 d2                	xor    edx,edx
c0020976:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002097d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020980:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0020983:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020987:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c002098a:	89 04 24             	mov    DWORD PTR [esp],eax
c002098d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020991:	01 f0                	add    eax,esi
c0020993:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0020996:	11 fa                	adc    edx,edi
c0020998:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c002099c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00209a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00209a4:	19 d1                	sbb    ecx,edx
c00209a6:	72 0a                	jb     c00209b2 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c00209a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00209ac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00209b0:	eb 13                	jmp    c00209c5 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00209b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00209ba:	29 f0                	sub    eax,esi
c00209bc:	19 fa                	sbb    edx,edi
c00209be:	89 04 24             	mov    DWORD PTR [esp],eax
c00209c1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00209c5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00209c8:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00209cb:	0f a4 c2 0b          	shld   edx,eax,0xb
c00209cf:	51                   	push   ecx
c00209d0:	c1 e0 0b             	shl    eax,0xb
c00209d3:	01 c6                	add    esi,eax
c00209d5:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00209d9:	11 d7                	adc    edi,edx
c00209db:	50                   	push   eax
c00209dc:	89 fa                	mov    edx,edi
c00209de:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00209e2:	89 f0                	mov    eax,esi
c00209e4:	53                   	push   ebx
c00209e5:	0f ac d0 0b          	shrd   eax,edx,0xb
c00209e9:	50                   	push   eax
c00209ea:	e8 98 fe ff ff       	call   c0020887 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00209ef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00209f3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00209f6:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00209fa:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0020a00:	83 c4 10             	add    esp,0x10
c0020a03:	b8 00 08 00 00       	mov    eax,0x800
c0020a08:	29 d0                	sub    eax,edx
c0020a0a:	39 c1                	cmp    ecx,eax
c0020a0c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0020a10:	83 d9 00             	sbb    ecx,0x0
c0020a13:	7d 1c                	jge    c0020a31 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0020a15:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0020a1a:	75 12                	jne    c0020a2e <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0020a1c:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020a23:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020a29:	e9 fb 00 00 00       	jmp    c0020b29 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0020a2e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020a31:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0020a34:	31 d2                	xor    edx,edx
c0020a36:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0020a3a:	39 c2                	cmp    edx,eax
c0020a3c:	7d 14                	jge    c0020a52 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0020a3e:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0020a45:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020a49:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0020a4c:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0020a4f:	42                   	inc    edx
c0020a50:	eb e8                	jmp    c0020a3a <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0020a52:	89 c3                	mov    ebx,eax
c0020a54:	85 c0                	test   eax,eax
c0020a56:	79 02                	jns    c0020a5a <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0020a58:	31 db                	xor    ebx,ebx
c0020a5a:	99                   	cdq    
c0020a5b:	01 c3                	add    ebx,eax
c0020a5d:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0020a64:	01 c6                	add    esi,eax
c0020a66:	11 d7                	adc    edi,edx
c0020a68:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0020a6c:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0020a70:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0020a73:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0020a77:	29 c6                	sub    esi,eax
c0020a79:	19 d7                	sbb    edi,edx
c0020a7b:	89 34 24             	mov    DWORD PTR [esp],esi
c0020a7e:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0020a82:	b8 ff 07 00 00       	mov    eax,0x7ff
c0020a87:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0020a8a:	b8 00 00 00 00       	mov    eax,0x0
c0020a8f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0020a93:	7d 3e                	jge    c0020ad3 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0020a95:	52                   	push   edx
c0020a96:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0020a9a:	50                   	push   eax
c0020a9b:	53                   	push   ebx
c0020a9c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0020aa4:	0f ac d0 0b          	shrd   eax,edx,0xb
c0020aa8:	50                   	push   eax
c0020aa9:	e8 d9 fd ff ff       	call   c0020887 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020aae:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0020ab6:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0020abb:	81 c3 00 08 00 00    	add    ebx,0x800
c0020ac1:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0020ac9:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0020ace:	83 c4 10             	add    esp,0x10
c0020ad1:	eb af                	jmp    c0020a82 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0020ad3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020ad7:	0b 04 24             	or     eax,DWORD PTR [esp]
c0020ada:	74 32                	je     c0020b0e <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0020adc:	50                   	push   eax
c0020add:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0020ae1:	50                   	push   eax
c0020ae2:	8d 44 24 28          	lea    eax,[esp+0x28]
c0020ae6:	50                   	push   eax
c0020ae7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0020aeb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0020aef:	0f ac fe 0b          	shrd   esi,edi,0xb
c0020af3:	56                   	push   esi
c0020af4:	e8 8e fd ff ff       	call   c0020887 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020af9:	83 c4 0c             	add    esp,0xc
c0020afc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0020b00:	8d 44 24 28          	lea    eax,[esp+0x28]
c0020b04:	50                   	push   eax
c0020b05:	53                   	push   ebx
c0020b06:	e8 4a fb fd ff       	call   c0000655 <memcpy>
c0020b0b:	83 c4 10             	add    esp,0x10
c0020b0e:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020b15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020b19:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020b1d:	89 38                	mov    DWORD PTR [eax],edi
c0020b1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020b23:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0020b26:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0020b29:	31 c0                	xor    eax,eax
c0020b2b:	eb 05                	jmp    c0020b32 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0020b2d:	b8 04 00 00 00       	mov    eax,0x4
c0020b32:	81 c4 2c 08 00 00    	add    esp,0x82c
c0020b38:	5b                   	pop    ebx
c0020b39:	5e                   	pop    esi
c0020b3a:	5f                   	pop    edi
c0020b3b:	5d                   	pop    ebp
c0020b3c:	c3                   	ret    
c0020b3d:	90                   	nop

c0020b3e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0020b3e:	55                   	push   ebp
c0020b3f:	57                   	push   edi
c0020b40:	56                   	push   esi
c0020b41:	53                   	push   ebx
c0020b42:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0020b48:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0020b4f:	85 f6                	test   esi,esi
c0020b51:	0f 84 64 02 00 00    	je     c0020dbb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0020b57:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0020b5f:	0f 84 56 02 00 00    	je     c0020dbb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0020b65:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0020b68:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0020b6b:	75 0a                	jne    c0020b77 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0020b6d:	b8 07 00 00 00       	mov    eax,0x7
c0020b72:	e9 49 02 00 00       	jmp    c0020dc0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0020b77:	50                   	push   eax
c0020b78:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0020b7c:	50                   	push   eax
c0020b7d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0020b84:	53                   	push   ebx
c0020b85:	8b 06                	mov    eax,DWORD PTR [esi]
c0020b87:	c1 e0 0b             	shl    eax,0xb
c0020b8a:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0020b8d:	c1 e8 0b             	shr    eax,0xb
c0020b90:	50                   	push   eax
c0020b91:	e8 f1 fc ff ff       	call   c0020887 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020b96:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020b99:	83 c4 10             	add    esp,0x10
c0020b9c:	89 c1                	mov    ecx,eax
c0020b9e:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0020ba1:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0020ba7:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0020baa:	84 db                	test   bl,bl
c0020bac:	0f 85 90 00 00 00    	jne    c0020c42 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0020bb2:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0020bb8:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020bbe:	29 c7                	sub    edi,eax
c0020bc0:	89 fb                	mov    ebx,edi
c0020bc2:	c1 fb 1f             	sar    ebx,0x1f
c0020bc5:	01 f8                	add    eax,edi
c0020bc7:	11 da                	adc    edx,ebx
c0020bc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020bcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020bd1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0020bd4:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0020bd7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0020bda:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020bdd:	89 04 24             	mov    DWORD PTR [esp],eax
c0020be0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020be4:	89 d8                	mov    eax,ebx
c0020be6:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0020be9:	ba 00 00 00 00       	mov    edx,0x0
c0020bee:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0020bf2:	b8 00 00 00 00       	mov    eax,0x0
c0020bf7:	73 0b                	jae    c0020c04 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0020bf9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020bfc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020c00:	29 f8                	sub    eax,edi
c0020c02:	19 da                	sbb    edx,ebx
c0020c04:	89 d3                	mov    ebx,edx
c0020c06:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0020c09:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0020c0c:	09 c3                	or     ebx,eax
c0020c0e:	0f 84 59 ff ff ff    	je     c0020b6d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0020c14:	55                   	push   ebp
c0020c15:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0020c19:	50                   	push   eax
c0020c1a:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0020c21:	53                   	push   ebx
c0020c22:	8b 06                	mov    eax,DWORD PTR [esi]
c0020c24:	c1 e0 0b             	shl    eax,0xb
c0020c27:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0020c2b:	c1 e8 0b             	shr    eax,0xb
c0020c2e:	50                   	push   eax
c0020c2f:	e8 53 fc ff ff       	call   c0020887 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020c34:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020c37:	83 c4 10             	add    esp,0x10
c0020c3a:	25 ff 07 00 00       	and    eax,0x7ff
c0020c3f:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0020c42:	57                   	push   edi
c0020c43:	6a 28                	push   0x28
c0020c45:	6a 00                	push   0x0
c0020c47:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020c4b:	50                   	push   eax
c0020c4c:	e8 3a fa fd ff       	call   c000068b <memset>
c0020c51:	31 d2                	xor    edx,edx
c0020c53:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0020c56:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020c5c:	89 f8                	mov    eax,edi
c0020c5e:	83 c0 21             	add    eax,0x21
c0020c61:	83 d2 00             	adc    edx,0x0
c0020c64:	89 c7                	mov    edi,eax
c0020c66:	89 d5                	mov    ebp,edx
c0020c68:	83 c4 10             	add    esp,0x10
c0020c6b:	31 c9                	xor    ecx,ecx
c0020c6d:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0020c74:	83 f9 28             	cmp    ecx,0x28
c0020c77:	88 04 24             	mov    BYTE PTR [esp],al
c0020c7a:	0f 94 c2             	sete   dl
c0020c7d:	88 d0                	mov    al,dl
c0020c7f:	ba ff 07 00 00       	mov    edx,0x7ff
c0020c84:	39 fa                	cmp    edx,edi
c0020c86:	ba 00 00 00 00       	mov    edx,0x0
c0020c8b:	19 ea                	sbb    edx,ebp
c0020c8d:	0f 92 c2             	setb   dl
c0020c90:	09 c2                	or     edx,eax
c0020c92:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0020c96:	0f 94 c0             	sete   al
c0020c99:	08 d0                	or     al,dl
c0020c9b:	75 16                	jne    c0020cb3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020c9d:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0020ca1:	74 10                	je     c0020cb3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020ca3:	8a 04 24             	mov    al,BYTE PTR [esp]
c0020ca6:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0020caa:	41                   	inc    ecx
c0020cab:	83 c7 01             	add    edi,0x1
c0020cae:	83 d5 00             	adc    ebp,0x0
c0020cb1:	eb ba                	jmp    c0020c6d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0020cb3:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0020cba:	83 ec 0c             	sub    esp,0xc
c0020cbd:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0020cc1:	57                   	push   edi
c0020cc2:	e8 e1 f9 fd ff       	call   c00006a8 <strlen>
c0020cc7:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0020ccf:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0020cd3:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0020cda:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020cdd:	5a                   	pop    edx
c0020cde:	25 ff 07 00 00       	and    eax,0x7ff
c0020ce3:	01 c8                	add    eax,ecx
c0020ce5:	59                   	pop    ecx
c0020ce6:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0020cec:	83 e0 02             	and    eax,0x2
c0020cef:	3c 01                	cmp    al,0x1
c0020cf1:	19 c0                	sbb    eax,eax
c0020cf3:	83 c0 02             	add    eax,0x2
c0020cf6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0020cfa:	57                   	push   edi
c0020cfb:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0020cff:	50                   	push   eax
c0020d00:	e8 25 fa fd ff       	call   c000072a <strcpy>
c0020d05:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0020d09:	83 c4 10             	add    esp,0x10
c0020d0c:	84 c0                	test   al,al
c0020d0e:	75 21                	jne    c0020d31 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0020d10:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0020d18:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020d20:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0020d28:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0020d2f:	eb 28                	jmp    c0020d59 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020d31:	fe c8                	dec    al
c0020d33:	75 24                	jne    c0020d59 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020d35:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0020d3d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020d45:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0020d4d:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0020d54:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0020d59:	0f b6 fb             	movzx  edi,bl
c0020d5c:	31 db                	xor    ebx,ebx
c0020d5e:	50                   	push   eax
c0020d5f:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0020d66:	8d 44 24 48          	lea    eax,[esp+0x48]
c0020d6a:	50                   	push   eax
c0020d6b:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0020d72:	e8 de f8 fd ff       	call   c0000655 <memcpy>
c0020d77:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0020d7e:	89 f9                	mov    ecx,edi
c0020d80:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020d86:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0020d89:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0020d8c:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0020d8f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020d92:	83 c4 10             	add    esp,0x10
c0020d95:	39 c7                	cmp    edi,eax
c0020d97:	89 df                	mov    edi,ebx
c0020d99:	19 d7                	sbb    edi,edx
c0020d9b:	72 10                	jb     c0020dad <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0020d9d:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0020da4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0020dab:	eb 0a                	jmp    c0020db7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0020dad:	29 c8                	sub    eax,ecx
c0020daf:	19 da                	sbb    edx,ebx
c0020db1:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0020db4:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0020db7:	31 c0                	xor    eax,eax
c0020db9:	eb 05                	jmp    c0020dc0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0020dbb:	b8 04 00 00 00       	mov    eax,0x4
c0020dc0:	81 c4 5c 09 00 00    	add    esp,0x95c
c0020dc6:	5b                   	pop    ebx
c0020dc7:	5e                   	pop    esi
c0020dc8:	5f                   	pop    edi
c0020dc9:	5d                   	pop    ebp
c0020dca:	c3                   	ret    

c0020dcb <readRoot(unsigned int*, unsigned int*, char)>:
c0020dcb:	81 ec 40 08 00 00    	sub    esp,0x840
c0020dd1:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0020dd9:	50                   	push   eax
c0020dda:	8d 44 24 38          	lea    eax,[esp+0x38]
c0020dde:	50                   	push   eax
c0020ddf:	6a 10                	push   0x10
c0020de1:	e8 a1 fa ff ff       	call   c0020887 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020de6:	83 c4 0c             	add    esp,0xc
c0020de9:	6a 22                	push   0x22
c0020deb:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0020df2:	50                   	push   eax
c0020df3:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020df7:	50                   	push   eax
c0020df8:	e8 58 f8 fd ff       	call   c0000655 <memcpy>
c0020dfd:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020e04:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0020e08:	89 10                	mov    DWORD PTR [eax],edx
c0020e0a:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0020e11:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020e15:	89 10                	mov    DWORD PTR [eax],edx
c0020e17:	b0 01                	mov    al,0x1
c0020e19:	81 c4 4c 08 00 00    	add    esp,0x84c
c0020e1f:	c3                   	ret    

c0020e20 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0020e20:	55                   	push   ebp
c0020e21:	57                   	push   edi
c0020e22:	56                   	push   esi
c0020e23:	53                   	push   ebx
c0020e24:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020e2a:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0020e31:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0020e38:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e3c:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0020e40:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0020e44:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e48:	75 03                	jne    c0020e4d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0020e4a:	83 c3 02             	add    ebx,0x2
c0020e4d:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0020e50:	75 03                	jne    c0020e55 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0020e52:	43                   	inc    ebx
c0020e53:	eb f8                	jmp    c0020e4d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0020e55:	51                   	push   ecx
c0020e56:	68 00 01 00 00       	push   0x100
c0020e5b:	6a 00                	push   0x0
c0020e5d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020e61:	50                   	push   eax
c0020e62:	e8 24 f8 fd ff       	call   c000068b <memset>
c0020e67:	83 c4 10             	add    esp,0x10
c0020e6a:	31 d2                	xor    edx,edx
c0020e6c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0020e6f:	84 c0                	test   al,al
c0020e71:	74 21                	je     c0020e94 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0020e73:	3c 2f                	cmp    al,0x2f
c0020e75:	75 0b                	jne    c0020e82 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0020e77:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0020e7b:	bd 01 00 00 00       	mov    ebp,0x1
c0020e80:	eb 14                	jmp    c0020e96 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0020e82:	8d 48 9f             	lea    ecx,[eax-0x61]
c0020e85:	80 f9 19             	cmp    cl,0x19
c0020e88:	77 03                	ja     c0020e8d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0020e8a:	83 e8 20             	sub    eax,0x20
c0020e8d:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0020e91:	42                   	inc    edx
c0020e92:	eb d8                	jmp    c0020e6c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0020e94:	31 ed                	xor    ebp,ebp
c0020e96:	83 ec 0c             	sub    esp,0xc
c0020e99:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0020ea0:	e8 35 e6 fe ff       	call   c000f4da <malloc>
c0020ea5:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0020eac:	89 c6                	mov    esi,eax
c0020eae:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0020eb4:	c1 ef 0b             	shr    edi,0xb
c0020eb7:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0020ebe:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0020ec2:	83 c4 10             	add    esp,0x10
c0020ec5:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0020eca:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020ece:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0020ed5:	74 28                	je     c0020eff <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0020ed7:	52                   	push   edx
c0020ed8:	57                   	push   edi
c0020ed9:	50                   	push   eax
c0020eda:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020ede:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0020ee5:	e8 9d f9 ff ff       	call   c0020887 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020eea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020eee:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0020ef5:	05 00 08 00 00       	add    eax,0x800
c0020efa:	83 c4 10             	add    esp,0x10
c0020efd:	eb cb                	jmp    c0020eca <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0020eff:	83 ec 0c             	sub    esp,0xc
c0020f02:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0020f06:	57                   	push   edi
c0020f07:	e8 9c f7 fd ff       	call   c00006a8 <strlen>
c0020f0c:	50                   	push   eax
c0020f0d:	57                   	push   edi
c0020f0e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0020f15:	56                   	push   esi
c0020f16:	e8 2a f9 ff ff       	call   c0020845 <__memmem(unsigned char*, int, unsigned char*, int)>
c0020f1b:	83 c4 20             	add    esp,0x20
c0020f1e:	85 c0                	test   eax,eax
c0020f20:	75 13                	jne    c0020f35 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0020f22:	83 ec 0c             	sub    esp,0xc
c0020f25:	56                   	push   esi
c0020f26:	e8 bf e5 fe ff       	call   c000f4ea <free>
c0020f2b:	83 c4 10             	add    esp,0x10
c0020f2e:	31 c0                	xor    eax,eax
c0020f30:	e9 b3 00 00 00       	jmp    c0020fe8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0020f35:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0020f39:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0020f3d:	c1 e7 08             	shl    edi,0x8
c0020f40:	c1 e2 10             	shl    edx,0x10
c0020f43:	09 d7                	or     edi,edx
c0020f45:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0020f49:	09 d7                	or     edi,edx
c0020f4b:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0020f4f:	c1 e2 18             	shl    edx,0x18
c0020f52:	09 d7                	or     edi,edx
c0020f54:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0020f58:	89 d1                	mov    ecx,edx
c0020f5a:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0020f5e:	c1 e1 08             	shl    ecx,0x8
c0020f61:	c1 e2 10             	shl    edx,0x10
c0020f64:	09 ca                	or     edx,ecx
c0020f66:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0020f6a:	09 ca                	or     edx,ecx
c0020f6c:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0020f70:	c1 e1 18             	shl    ecx,0x18
c0020f73:	09 ca                	or     edx,ecx
c0020f75:	89 e9                	mov    ecx,ebp
c0020f77:	84 c9                	test   cl,cl
c0020f79:	74 3c                	je     c0020fb7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0020f7b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020f7f:	83 ec 0c             	sub    esp,0xc
c0020f82:	56                   	push   esi
c0020f83:	e8 62 e5 fe ff       	call   c000f4ea <free>
c0020f88:	83 c4 0c             	add    esp,0xc
c0020f8b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020f92:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0020f97:	50                   	push   eax
c0020f98:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020f9f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020fa6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020faa:	52                   	push   edx
c0020fab:	57                   	push   edi
c0020fac:	53                   	push   ebx
c0020fad:	e8 6e fe ff ff       	call   c0020e20 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0020fb2:	83 c4 20             	add    esp,0x20
c0020fb5:	eb 31                	jmp    c0020fe8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0020fb7:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0020fba:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0020fc1:	d0 e8                	shr    al,1
c0020fc3:	89 3b                	mov    DWORD PTR [ebx],edi
c0020fc5:	83 e0 01             	and    eax,0x1
c0020fc8:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0020fcf:	83 ec 0c             	sub    esp,0xc
c0020fd2:	89 13                	mov    DWORD PTR [ebx],edx
c0020fd4:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0020fdb:	89 03                	mov    DWORD PTR [ebx],eax
c0020fdd:	56                   	push   esi
c0020fde:	e8 07 e5 fe ff       	call   c000f4ea <free>
c0020fe3:	83 c4 10             	add    esp,0x10
c0020fe6:	b0 01                	mov    al,0x1
c0020fe8:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020fee:	5b                   	pop    ebx
c0020fef:	5e                   	pop    esi
c0020ff0:	5f                   	pop    edi
c0020ff1:	5d                   	pop    ebp
c0020ff2:	c3                   	ret    

c0020ff3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0020ff3:	55                   	push   ebp
c0020ff4:	57                   	push   edi
c0020ff5:	56                   	push   esi
c0020ff6:	53                   	push   ebx
c0020ff7:	83 ec 20             	sub    esp,0x20
c0020ffa:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020ffe:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021002:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021006:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002100e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021016:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c002101b:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021021:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021027:	57                   	push   edi
c0021028:	8d 44 24 14          	lea    eax,[esp+0x14]
c002102c:	50                   	push   eax
c002102d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021031:	50                   	push   eax
c0021032:	e8 94 fd ff ff       	call   c0020dcb <readRoot(unsigned int*, unsigned int*, char)>
c0021037:	5a                   	pop    edx
c0021038:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002103c:	e8 67 f6 fd ff       	call   c00006a8 <strlen>
c0021041:	83 c4 10             	add    esp,0x10
c0021044:	83 f8 03             	cmp    eax,0x3
c0021047:	77 17                	ja     c0021060 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002104d:	89 03                	mov    DWORD PTR [ebx],eax
c002104f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021053:	89 06                	mov    DWORD PTR [esi],eax
c0021055:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c002105c:	b0 01                	mov    al,0x1
c002105e:	eb 19                	jmp    c0021079 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021060:	50                   	push   eax
c0021061:	55                   	push   ebp
c0021062:	57                   	push   edi
c0021063:	56                   	push   esi
c0021064:	53                   	push   ebx
c0021065:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021069:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002106d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021071:	e8 aa fd ff ff       	call   c0020e20 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021076:	83 c4 20             	add    esp,0x20
c0021079:	83 c4 1c             	add    esp,0x1c
c002107c:	5b                   	pop    ebx
c002107d:	5e                   	pop    esi
c002107e:	5f                   	pop    edi
c002107f:	5d                   	pop    ebp
c0021080:	c3                   	ret    
c0021081:	90                   	nop

c0021082 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021082:	57                   	push   edi
c0021083:	56                   	push   esi
c0021084:	53                   	push   ebx
c0021085:	83 ec 10             	sub    esp,0x10
c0021088:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002108c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021090:	85 ff                	test   edi,edi
c0021092:	0f 84 9d 00 00 00    	je     c0021135 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021098:	85 f6                	test   esi,esi
c002109a:	0f 84 95 00 00 00    	je     c0021135 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00210a0:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00210a5:	74 17                	je     c00210be <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c00210a7:	83 ec 0c             	sub    esp,0xc
c00210aa:	68 13 b1 02 c0       	push   0xc002b113
c00210af:	e8 cb 16 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c00210b4:	83 c4 10             	add    esp,0x10
c00210b7:	b8 03 00 00 00       	mov    eax,0x3
c00210bc:	eb 7c                	jmp    c002113a <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00210be:	83 ec 0c             	sub    esp,0xc
c00210c1:	6a 1c                	push   0x1c
c00210c3:	e8 12 e4 fe ff       	call   c000f4da <malloc>
c00210c8:	89 07                	mov    DWORD PTR [edi],eax
c00210ca:	89 c3                	mov    ebx,eax
c00210cc:	58                   	pop    eax
c00210cd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00210d1:	50                   	push   eax
c00210d2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00210d5:	50                   	push   eax
c00210d6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00210da:	50                   	push   eax
c00210db:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00210df:	50                   	push   eax
c00210e0:	56                   	push   esi
c00210e1:	e8 0d ff ff ff       	call   c0020ff3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00210e6:	83 c4 20             	add    esp,0x20
c00210e9:	84 c0                	test   al,al
c00210eb:	74 07                	je     c00210f4 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c00210ed:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00210f2:	74 0b                	je     c00210ff <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c00210f4:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00210f8:	b8 01 00 00 00       	mov    eax,0x1
c00210fd:	eb 3b                	jmp    c002113a <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00210ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021103:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021107:	89 03                	mov    DWORD PTR [ebx],eax
c0021109:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021114:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002111b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021125:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002112c:	8a 06                	mov    al,BYTE PTR [esi]
c002112e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021131:	31 c0                	xor    eax,eax
c0021133:	eb 05                	jmp    c002113a <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021135:	b8 04 00 00 00       	mov    eax,0x4
c002113a:	83 c4 10             	add    esp,0x10
c002113d:	5b                   	pop    ebx
c002113e:	5e                   	pop    esi
c002113f:	5f                   	pop    edi
c0021140:	c3                   	ret    
c0021141:	90                   	nop

c0021142 <ISO9660::exists(char const*)>:
c0021142:	83 ec 28             	sub    esp,0x28
c0021145:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021149:	8d 54 24 18          	lea    edx,[esp+0x18]
c002114d:	52                   	push   edx
c002114e:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021151:	52                   	push   edx
c0021152:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021156:	52                   	push   edx
c0021157:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002115b:	52                   	push   edx
c002115c:	50                   	push   eax
c002115d:	e8 91 fe ff ff       	call   c0020ff3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021162:	83 c4 3c             	add    esp,0x3c
c0021165:	c3                   	ret    

c0021166 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021166:	56                   	push   esi
c0021167:	53                   	push   ebx
c0021168:	83 ec 14             	sub    esp,0x14
c002116b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002116f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021173:	85 db                	test   ebx,ebx
c0021175:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021179:	0f 94 c2             	sete   dl
c002117c:	85 f6                	test   esi,esi
c002117e:	0f 94 c0             	sete   al
c0021181:	08 c2                	or     dl,al
c0021183:	75 68                	jne    c00211ed <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021185:	85 c9                	test   ecx,ecx
c0021187:	74 64                	je     c00211ed <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021189:	83 ec 0c             	sub    esp,0xc
c002118c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002118f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021193:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021199:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00211a0:	50                   	push   eax
c00211a1:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00211a4:	50                   	push   eax
c00211a5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00211a9:	50                   	push   eax
c00211aa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00211ae:	50                   	push   eax
c00211af:	51                   	push   ecx
c00211b0:	e8 3e fe ff ff       	call   c0020ff3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00211b5:	83 c4 20             	add    esp,0x20
c00211b8:	ba 01 00 00 00       	mov    edx,0x1
c00211bd:	84 c0                	test   al,al
c00211bf:	74 31                	je     c00211f2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00211c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00211c5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00211cc:	89 03                	mov    DWORD PTR [ebx],eax
c00211ce:	ba 00 00 00 00       	mov    edx,0x0
c00211d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00211d7:	85 c0                	test   eax,eax
c00211d9:	0f 95 06             	setne  BYTE PTR [esi]
c00211dc:	74 14                	je     c00211f2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00211de:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00211e4:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00211eb:	eb 05                	jmp    c00211f2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00211ed:	ba 04 00 00 00       	mov    edx,0x4
c00211f2:	83 c4 14             	add    esp,0x14
c00211f5:	89 d0                	mov    eax,edx
c00211f7:	5b                   	pop    ebx
c00211f8:	5e                   	pop    esi
c00211f9:	c3                   	ret    

c00211fa <ISO9660::openDir(char const*, void**)>:
c00211fa:	57                   	push   edi
c00211fb:	56                   	push   esi
c00211fc:	53                   	push   ebx
c00211fd:	83 ec 10             	sub    esp,0x10
c0021200:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021204:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021208:	85 ff                	test   edi,edi
c002120a:	0f 84 95 00 00 00    	je     c00212a5 <ISO9660::openDir(char const*, void**)+0xab>
c0021210:	85 f6                	test   esi,esi
c0021212:	0f 84 8d 00 00 00    	je     c00212a5 <ISO9660::openDir(char const*, void**)+0xab>
c0021218:	83 ec 0c             	sub    esp,0xc
c002121b:	6a 1c                	push   0x1c
c002121d:	e8 b8 e2 fe ff       	call   c000f4da <malloc>
c0021222:	89 07                	mov    DWORD PTR [edi],eax
c0021224:	89 c3                	mov    ebx,eax
c0021226:	59                   	pop    ecx
c0021227:	8d 44 24 18          	lea    eax,[esp+0x18]
c002122b:	50                   	push   eax
c002122c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002122f:	50                   	push   eax
c0021230:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021234:	50                   	push   eax
c0021235:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021239:	50                   	push   eax
c002123a:	56                   	push   esi
c002123b:	e8 b3 fd ff ff       	call   c0020ff3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021240:	83 c4 20             	add    esp,0x20
c0021243:	84 c0                	test   al,al
c0021245:	74 07                	je     c002124e <ISO9660::openDir(char const*, void**)+0x54>
c0021247:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002124c:	75 21                	jne    c002126f <ISO9660::openDir(char const*, void**)+0x75>
c002124e:	0f b6 c0             	movzx  eax,al
c0021251:	52                   	push   edx
c0021252:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021256:	50                   	push   eax
c0021257:	68 39 b1 02 c0       	push   0xc002b139
c002125c:	e8 1e 15 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0021261:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021265:	83 c4 10             	add    esp,0x10
c0021268:	b8 01 00 00 00       	mov    eax,0x1
c002126d:	eb 3b                	jmp    c00212aa <ISO9660::openDir(char const*, void**)+0xb0>
c002126f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021273:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021277:	89 03                	mov    DWORD PTR [ebx],eax
c0021279:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021280:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021284:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002128b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021292:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021295:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002129c:	8a 06                	mov    al,BYTE PTR [esi]
c002129e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00212a1:	31 c0                	xor    eax,eax
c00212a3:	eb 05                	jmp    c00212aa <ISO9660::openDir(char const*, void**)+0xb0>
c00212a5:	b8 04 00 00 00       	mov    eax,0x4
c00212aa:	83 c4 10             	add    esp,0x10
c00212ad:	5b                   	pop    ebx
c00212ae:	5e                   	pop    esi
c00212af:	5f                   	pop    edi
c00212b0:	c3                   	ret    
c00212b1:	90                   	nop

c00212b2 <ISO9660::ISO9660()>:
c00212b2:	83 ec 0c             	sub    esp,0xc
c00212b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212b9:	83 ec 0c             	sub    esp,0xc
c00212bc:	50                   	push   eax
c00212bd:	e8 c2 17 ff ff       	call   c0012a84 <Filesystem::Filesystem()>
c00212c2:	83 c4 10             	add    esp,0x10
c00212c5:	ba 5c b1 02 c0       	mov    edx,0xc002b15c
c00212ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212ce:	89 10                	mov    DWORD PTR [eax],edx
c00212d0:	90                   	nop
c00212d1:	83 c4 0c             	add    esp,0xc
c00212d4:	c3                   	ret    
c00212d5:	90                   	nop

c00212d6 <SoundChannel::~SoundChannel()>:
c00212d6:	83 ec 0c             	sub    esp,0xc
c00212d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212dd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00212e0:	83 ec 0c             	sub    esp,0xc
c00212e3:	50                   	push   eax
c00212e4:	e8 01 e2 fe ff       	call   c000f4ea <free>
c00212e9:	83 c4 10             	add    esp,0x10
c00212ec:	90                   	nop
c00212ed:	83 c4 0c             	add    esp,0xc
c00212f0:	c3                   	ret    
c00212f1:	90                   	nop

c00212f2 <SoundChannel::setSpeed(float)>:
c00212f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00212fa:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00212fd:	c3                   	ret    

c00212fe <SoundChannel::getSpeed()>:
c00212fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021302:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0021305:	c3                   	ret    

c0021306 <SoundChannel::setVolume(int)>:
c0021306:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002130a:	83 f8 64             	cmp    eax,0x64
c002130d:	7e 05                	jle    c0021314 <SoundChannel::setVolume(int)+0xe>
c002130f:	b8 64 00 00 00       	mov    eax,0x64
c0021314:	85 c0                	test   eax,eax
c0021316:	79 02                	jns    c002131a <SoundChannel::setVolume(int)+0x14>
c0021318:	31 c0                	xor    eax,eax
c002131a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002131e:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0021321:	c3                   	ret    

c0021322 <SoundChannel::getVolume()>:
c0021322:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021326:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0021329:	c3                   	ret    

c002132a <SoundChannel::pause()>:
c002132a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002132e:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0021332:	c3                   	ret    
c0021333:	90                   	nop

c0021334 <SoundChannel::SoundChannel(int, int, int, int)>:
c0021334:	83 ec 1c             	sub    esp,0x1c
c0021337:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002133b:	e8 ea ff ff ff       	call   c002132a <SoundChannel::pause()>
c0021340:	83 c4 04             	add    esp,0x4
c0021343:	6a 50                	push   0x50
c0021345:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021349:	e8 b8 ff ff ff       	call   c0021306 <SoundChannel::setVolume(int)>
c002134e:	83 c4 08             	add    esp,0x8
c0021351:	a1 d4 b1 02 c0       	mov    eax,ds:0xc002b1d4
c0021356:	50                   	push   eax
c0021357:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002135b:	e8 92 ff ff ff       	call   c00212f2 <SoundChannel::setSpeed(float)>
c0021360:	83 c4 08             	add    esp,0x8
c0021363:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021367:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002136b:	89 10                	mov    DWORD PTR [eax],edx
c002136d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021371:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021375:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021378:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002137c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021380:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021383:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021388:	75 23                	jne    c00213ad <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c002138a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002138e:	8b 10                	mov    edx,DWORD PTR [eax]
c0021390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021394:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021397:	0f af c2             	imul   eax,edx
c002139a:	85 c0                	test   eax,eax
c002139c:	79 03                	jns    c00213a1 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c002139e:	83 c0 03             	add    eax,0x3
c00213a1:	c1 f8 02             	sar    eax,0x2
c00213a4:	05 a0 0f 00 00       	add    eax,0xfa0
c00213a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00213ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00213b1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00213b5:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00213b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00213bc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00213c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00213c7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00213ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00213d2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00213d5:	c1 e0 02             	shl    eax,0x2
c00213d8:	83 ec 0c             	sub    esp,0xc
c00213db:	50                   	push   eax
c00213dc:	e8 f9 e0 fe ff       	call   c000f4da <malloc>
c00213e1:	83 c4 10             	add    esp,0x10
c00213e4:	89 c2                	mov    edx,eax
c00213e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00213ea:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00213ed:	83 ec 04             	sub    esp,0x4
c00213f0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00213f4:	50                   	push   eax
c00213f5:	6a 01                	push   0x1
c00213f7:	6a 04                	push   0x4
c00213f9:	e8 51 75 fe ff       	call   c000894f <src_new>
c00213fe:	83 c4 10             	add    esp,0x10
c0021401:	89 c2                	mov    edx,eax
c0021403:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021407:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002140a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002140e:	85 c0                	test   eax,eax
c0021410:	74 10                	je     c0021422 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0021412:	83 ec 0c             	sub    esp,0xc
c0021415:	68 b8 b1 02 c0       	push   0xc002b1b8
c002141a:	e8 b2 84 ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c002141f:	83 c4 10             	add    esp,0x10
c0021422:	a0 20 ef 02 c0       	mov    al,ds:0xc002ef20
c0021427:	83 f0 01             	xor    eax,0x1
c002142a:	84 c0                	test   al,al
c002142c:	74 57                	je     c0021485 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c002142e:	a1 d8 b1 02 c0       	mov    eax,ds:0xc002b1d8
c0021433:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021437:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002143f:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021447:	7f 35                	jg     c002147e <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0021449:	83 ec 0c             	sub    esp,0xc
c002144c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021450:	e8 22 4a 00 00       	call   c0025e77 <__floatsisf>
c0021455:	83 c4 10             	add    esp,0x10
c0021458:	8b 15 d8 b1 02 c0    	mov    edx,DWORD PTR ds:0xc002b1d8
c002145e:	83 ec 08             	sub    esp,0x8
c0021461:	52                   	push   edx
c0021462:	50                   	push   eax
c0021463:	e8 21 46 00 00       	call   c0025a89 <__mulsf3>
c0021468:	83 c4 10             	add    esp,0x10
c002146b:	89 c2                	mov    edx,eax
c002146d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021471:	89 14 85 20 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd14e0],edx
c0021478:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002147c:	eb c1                	jmp    c002143f <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c002147e:	c6 05 20 ef 02 c0 01 	mov    BYTE PTR ds:0xc002ef20,0x1
c0021485:	90                   	nop
c0021486:	83 c4 1c             	add    esp,0x1c
c0021489:	c3                   	ret    

c002148a <SoundChannel::play()>:
c002148a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002148e:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0021492:	c3                   	ret    
c0021493:	90                   	nop

c0021494 <SoundChannel::paused()>:
c0021494:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021498:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c002149b:	c3                   	ret    

c002149c <SoundChannel::getSampleRate()>:
c002149c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00214a2:	c3                   	ret    
c00214a3:	90                   	nop

c00214a4 <SoundChannel::getBits()>:
c00214a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00214ab:	c3                   	ret    

c00214ac <SoundChannel::getBufferUsed()>:
c00214ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214b0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00214b3:	c3                   	ret    

c00214b4 <SoundChannel::getBufferSize()>:
c00214b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214b8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00214bb:	c3                   	ret    

c00214bc <SoundChannel::unbuffer(float*, int, int)>:
c00214bc:	56                   	push   esi
c00214bd:	53                   	push   ebx
c00214be:	83 ec 40             	sub    esp,0x40
c00214c1:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00214c5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00214c8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00214cc:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00214cf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00214d3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00214d7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00214db:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00214df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00214e3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00214e7:	e8 8b 49 00 00       	call   c0025e77 <__floatsisf>
c00214ec:	5a                   	pop    edx
c00214ed:	89 c6                	mov    esi,eax
c00214ef:	ff 33                	push   DWORD PTR [ebx]
c00214f1:	e8 81 49 00 00       	call   c0025e77 <__floatsisf>
c00214f6:	59                   	pop    ecx
c00214f7:	5a                   	pop    edx
c00214f8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00214fb:	50                   	push   eax
c00214fc:	e8 88 45 00 00       	call   c0025a89 <__mulsf3>
c0021501:	59                   	pop    ecx
c0021502:	5a                   	pop    edx
c0021503:	50                   	push   eax
c0021504:	56                   	push   esi
c0021505:	e8 42 47 00 00       	call   c0025c4c <__divsf3>
c002150a:	89 04 24             	mov    DWORD PTR [esp],eax
c002150d:	e8 35 5c 00 00       	call   c0027147 <__extendsfdf2>
c0021512:	59                   	pop    ecx
c0021513:	5e                   	pop    esi
c0021514:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021518:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002151c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021524:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021528:	50                   	push   eax
c0021529:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c002152c:	e8 13 70 fe ff       	call   c0008544 <src_process>
c0021531:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021535:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021538:	83 c4 0c             	add    esp,0xc
c002153b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002153e:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021541:	29 d0                	sub    eax,edx
c0021543:	c1 e0 02             	shl    eax,0x2
c0021546:	50                   	push   eax
c0021547:	8d 04 91             	lea    eax,[ecx+edx*4]
c002154a:	50                   	push   eax
c002154b:	51                   	push   ecx
c002154c:	e8 cc f0 fd ff       	call   c000061d <memmove>
c0021551:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021555:	83 c4 44             	add    esp,0x44
c0021558:	5b                   	pop    ebx
c0021559:	5e                   	pop    esi
c002155a:	c3                   	ret    
c002155b:	90                   	nop

c002155c <SoundChannel::buffer8(unsigned char*, int)>:
c002155c:	55                   	push   ebp
c002155d:	57                   	push   edi
c002155e:	56                   	push   esi
c002155f:	53                   	push   ebx
c0021560:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021564:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021568:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002156b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002156f:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021572:	74 7a                	je     c00215ee <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021574:	85 ff                	test   edi,edi
c0021576:	7e 76                	jle    c00215ee <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021578:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c002157c:	8d 70 01             	lea    esi,[eax+0x1]
c002157f:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021582:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021585:	8b 1c 9d 20 eb 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd14e0]
c002158c:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002158f:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021592:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021595:	74 5e                	je     c00215f5 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021597:	83 ff 01             	cmp    edi,0x1
c002159a:	74 4b                	je     c00215e7 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c002159c:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00215a0:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00215a3:	8d 70 01             	lea    esi,[eax+0x1]
c00215a6:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00215a9:	8b 1c 9d 20 eb 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd14e0]
c00215b0:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00215b3:	b8 02 00 00 00       	mov    eax,0x2
c00215b8:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00215bb:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00215be:	75 23                	jne    c00215e3 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00215c0:	eb 27                	jmp    c00215e9 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00215c2:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00215c7:	8d 71 01             	lea    esi,[ecx+0x1]
c00215ca:	40                   	inc    eax
c00215cb:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00215ce:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00215d1:	8b 1c 9d 20 eb 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd14e0]
c00215d8:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00215db:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00215de:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00215e1:	74 06                	je     c00215e9 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00215e3:	39 c7                	cmp    edi,eax
c00215e5:	75 db                	jne    c00215c2 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c00215e7:	89 f8                	mov    eax,edi
c00215e9:	5b                   	pop    ebx
c00215ea:	5e                   	pop    esi
c00215eb:	5f                   	pop    edi
c00215ec:	5d                   	pop    ebp
c00215ed:	c3                   	ret    
c00215ee:	5b                   	pop    ebx
c00215ef:	31 c0                	xor    eax,eax
c00215f1:	5e                   	pop    esi
c00215f2:	5f                   	pop    edi
c00215f3:	5d                   	pop    ebp
c00215f4:	c3                   	ret    
c00215f5:	b8 01 00 00 00       	mov    eax,0x1
c00215fa:	eb ed                	jmp    c00215e9 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00215fc <SoundDevice::SoundDevice(char const*)>:
c00215fc:	83 ec 1c             	sub    esp,0x1c
c00215ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021603:	83 ec 08             	sub    esp,0x8
c0021606:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002160a:	50                   	push   eax
c002160b:	e8 86 27 ff ff       	call   c0013d96 <Device::Device(char const*)>
c0021610:	83 c4 10             	add    esp,0x10
c0021613:	ba e4 b1 02 c0       	mov    edx,0xc002b1e4
c0021618:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002161c:	89 10                	mov    DWORD PTR [eax],edx
c002161e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021622:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c002162c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021630:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c002163a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021642:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021647:	7f 19                	jg     c0021662 <SoundDevice::SoundDevice(char const*)+0x66>
c0021649:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002164d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021651:	83 c2 54             	add    edx,0x54
c0021654:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c002165c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021660:	eb e0                	jmp    c0021642 <SoundDevice::SoundDevice(char const*)+0x46>
c0021662:	90                   	nop
c0021663:	83 c4 1c             	add    esp,0x1c
c0021666:	c3                   	ret    
c0021667:	90                   	nop

c0021668 <SoundDevice::~SoundDevice()>:
c0021668:	53                   	push   ebx
c0021669:	83 ec 18             	sub    esp,0x18
c002166c:	ba e4 b1 02 c0       	mov    edx,0xc002b1e4
c0021671:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021675:	89 10                	mov    DWORD PTR [eax],edx
c0021677:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002167f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021684:	7f 46                	jg     c00216cc <SoundDevice::~SoundDevice()+0x64>
c0021686:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002168a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002168e:	83 c2 54             	add    edx,0x54
c0021691:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021695:	85 c0                	test   eax,eax
c0021697:	74 2d                	je     c00216c6 <SoundDevice::~SoundDevice()+0x5e>
c0021699:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002169d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00216a1:	83 c2 54             	add    edx,0x54
c00216a4:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c00216a8:	85 db                	test   ebx,ebx
c00216aa:	74 1a                	je     c00216c6 <SoundDevice::~SoundDevice()+0x5e>
c00216ac:	83 ec 0c             	sub    esp,0xc
c00216af:	53                   	push   ebx
c00216b0:	e8 21 fc ff ff       	call   c00212d6 <SoundChannel::~SoundChannel()>
c00216b5:	83 c4 10             	add    esp,0x10
c00216b8:	83 ec 08             	sub    esp,0x8
c00216bb:	6a 2c                	push   0x2c
c00216bd:	53                   	push   ebx
c00216be:	e8 dc 0f ff ff       	call   c001269f <operator delete(void*, unsigned long)>
c00216c3:	83 c4 10             	add    esp,0x10
c00216c6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00216ca:	eb b3                	jmp    c002167f <SoundDevice::~SoundDevice()+0x17>
c00216cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00216d0:	83 ec 0c             	sub    esp,0xc
c00216d3:	50                   	push   eax
c00216d4:	e8 9f 23 ff ff       	call   c0013a78 <Device::~Device()>
c00216d9:	83 c4 10             	add    esp,0x10
c00216dc:	90                   	nop
c00216dd:	83 c4 18             	add    esp,0x18
c00216e0:	5b                   	pop    ebx
c00216e1:	c3                   	ret    

c00216e2 <SoundDevice::~SoundDevice()>:
c00216e2:	83 ec 0c             	sub    esp,0xc
c00216e5:	83 ec 0c             	sub    esp,0xc
c00216e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216ec:	e8 77 ff ff ff       	call   c0021668 <SoundDevice::~SoundDevice()>
c00216f1:	83 c4 10             	add    esp,0x10
c00216f4:	83 ec 08             	sub    esp,0x8
c00216f7:	68 e4 01 00 00       	push   0x1e4
c00216fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021700:	e8 9a 0f ff ff       	call   c001269f <operator delete(void*, unsigned long)>
c0021705:	83 c4 10             	add    esp,0x10
c0021708:	83 c4 0c             	add    esp,0xc
c002170b:	c3                   	ret    

c002170c <SoundDevice::getFreeChannelNum()>:
c002170c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021710:	31 c0                	xor    eax,eax
c0021712:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c002171a:	74 09                	je     c0021725 <SoundDevice::getFreeChannelNum()+0x19>
c002171c:	40                   	inc    eax
c002171d:	83 f8 20             	cmp    eax,0x20
c0021720:	75 f0                	jne    c0021712 <SoundDevice::getFreeChannelNum()+0x6>
c0021722:	83 c8 ff             	or     eax,0xffffffff
c0021725:	c3                   	ret    

c0021726 <SoundDevice::addChannel(SoundChannel*)>:
c0021726:	56                   	push   esi
c0021727:	53                   	push   ebx
c0021728:	51                   	push   ecx
c0021729:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002172d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021731:	53                   	push   ebx
c0021732:	e8 d5 ff ff ff       	call   c002170c <SoundDevice::getFreeChannelNum()>
c0021737:	5a                   	pop    edx
c0021738:	83 f8 ff             	cmp    eax,0xffffffff
c002173b:	74 51                	je     c002178e <SoundDevice::addChannel(SoundChannel*)+0x68>
c002173d:	85 f6                	test   esi,esi
c002173f:	74 4d                	je     c002178e <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021741:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0021748:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c002174f:	75 30                	jne    c0021781 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0021751:	83 ec 0c             	sub    esp,0xc
c0021754:	56                   	push   esi
c0021755:	e8 42 fd ff ff       	call   c002149c <SoundChannel::getSampleRate()>
c002175a:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0021760:	89 34 24             	mov    DWORD PTR [esp],esi
c0021763:	e8 3c fd ff ff       	call   c00214a4 <SoundChannel::getBits()>
c0021768:	83 c4 0c             	add    esp,0xc
c002176b:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0021771:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021773:	50                   	push   eax
c0021774:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002177a:	53                   	push   ebx
c002177b:	ff 52 28             	call   DWORD PTR [edx+0x28]
c002177e:	83 c4 10             	add    esp,0x10
c0021781:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0021787:	b8 01 00 00 00       	mov    eax,0x1
c002178c:	eb 03                	jmp    c0021791 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c002178e:	83 c8 ff             	or     eax,0xffffffff
c0021791:	5a                   	pop    edx
c0021792:	5b                   	pop    ebx
c0021793:	5e                   	pop    esi
c0021794:	c3                   	ret    
c0021795:	90                   	nop

c0021796 <SoundDevice::removeChannel(int)>:
c0021796:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002179a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002179e:	83 fa 1f             	cmp    edx,0x1f
c00217a1:	77 23                	ja     c00217c6 <SoundDevice::removeChannel(int)+0x30>
c00217a3:	8d 14 90             	lea    edx,[eax+edx*4]
c00217a6:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00217ad:	74 17                	je     c00217c6 <SoundDevice::removeChannel(int)+0x30>
c00217af:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00217b9:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00217bf:	75 05                	jne    c00217c6 <SoundDevice::removeChannel(int)+0x30>
c00217c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00217c3:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c00217c6:	c3                   	ret    
c00217c7:	90                   	nop

c00217c8 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00217c8:	57                   	push   edi
c00217c9:	56                   	push   esi
c00217ca:	53                   	push   ebx
c00217cb:	31 db                	xor    ebx,ebx
c00217cd:	83 ec 10             	sub    esp,0x10
c00217d0:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00217d4:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00217d8:	0f 8d cb 00 00 00    	jge    c00218a9 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00217de:	83 ec 0c             	sub    esp,0xc
c00217e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00217e5:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00217e8:	e8 5a 59 00 00       	call   c0027147 <__extendsfdf2>
c00217ed:	83 c4 10             	add    esp,0x10
c00217f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00217f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00217f8:	68 00 00 f0 3f       	push   0x3ff00000
c00217fd:	6a 00                	push   0x0
c00217ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021803:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021807:	e8 c7 48 00 00       	call   c00260d3 <__adddf3>
c002180c:	83 c4 10             	add    esp,0x10
c002180f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021813:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021817:	68 00 00 e0 3f       	push   0x3fe00000
c002181c:	6a 00                	push   0x0
c002181e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021822:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021826:	e8 25 4f 00 00       	call   c0026750 <__muldf3>
c002182b:	83 c4 10             	add    esp,0x10
c002182e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021832:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021836:	68 00 00 60 40       	push   0x40600000
c002183b:	6a 00                	push   0x0
c002183d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021841:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021845:	e8 06 4f 00 00       	call   c0026750 <__muldf3>
c002184a:	59                   	pop    ecx
c002184b:	5f                   	pop    edi
c002184c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021850:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0021854:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021858:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002185c:	e8 c2 57 00 00       	call   c0027023 <__truncdfsf2>
c0021861:	5a                   	pop    edx
c0021862:	89 c7                	mov    edi,eax
c0021864:	59                   	pop    ecx
c0021865:	68 00 00 fe 42       	push   0x42fe0000
c002186a:	50                   	push   eax
c002186b:	e8 5d 48 00 00       	call   c00260cd <__gesf2>
c0021870:	83 c4 10             	add    esp,0x10
c0021873:	85 c0                	test   eax,eax
c0021875:	78 06                	js     c002187d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0021877:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c002187b:	eb 26                	jmp    c00218a3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002187d:	50                   	push   eax
c002187e:	50                   	push   eax
c002187f:	6a 00                	push   0x0
c0021881:	57                   	push   edi
c0021882:	e8 4a 48 00 00       	call   c00260d1 <__lesf2>
c0021887:	83 c4 10             	add    esp,0x10
c002188a:	85 c0                	test   eax,eax
c002188c:	7f 06                	jg     c0021894 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c002188e:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0021892:	eb 0f                	jmp    c00218a3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0021894:	83 ec 0c             	sub    esp,0xc
c0021897:	57                   	push   edi
c0021898:	e8 3f 59 00 00       	call   c00271dc <lrintf>
c002189d:	83 c4 10             	add    esp,0x10
c00218a0:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00218a3:	43                   	inc    ebx
c00218a4:	e9 2b ff ff ff       	jmp    c00217d4 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00218a9:	83 c4 10             	add    esp,0x10
c00218ac:	5b                   	pop    ebx
c00218ad:	5e                   	pop    esi
c00218ae:	5f                   	pop    edi
c00218af:	c3                   	ret    

c00218b0 <SoundDevice::getAudio(int, float*, float*)>:
c00218b0:	55                   	push   ebp
c00218b1:	57                   	push   edi
c00218b2:	56                   	push   esi
c00218b3:	53                   	push   ebx
c00218b4:	31 db                	xor    ebx,ebx
c00218b6:	83 ec 20             	sub    esp,0x20
c00218b9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00218bd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00218c1:	c1 e0 02             	shl    eax,0x2
c00218c4:	50                   	push   eax
c00218c5:	6a 00                	push   0x0
c00218c7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00218cb:	e8 bb ed fd ff       	call   c000068b <memset>
c00218d0:	83 c4 10             	add    esp,0x10
c00218d3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00218d7:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c00218de:	85 c0                	test   eax,eax
c00218e0:	0f 84 d7 00 00 00    	je     c00219bd <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00218e6:	83 ec 0c             	sub    esp,0xc
c00218e9:	50                   	push   eax
c00218ea:	e8 a5 fb ff ff       	call   c0021494 <SoundChannel::paused()>
c00218ef:	83 c4 10             	add    esp,0x10
c00218f2:	84 c0                	test   al,al
c00218f4:	0f 85 c3 00 00 00    	jne    c00219bd <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00218fa:	83 ec 0c             	sub    esp,0xc
c00218fd:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021904:	e8 19 fa ff ff       	call   c0021322 <SoundChannel::getVolume()>
c0021909:	83 c4 10             	add    esp,0x10
c002190c:	85 c0                	test   eax,eax
c002190e:	0f 84 a9 00 00 00    	je     c00219bd <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021914:	83 ec 0c             	sub    esp,0xc
c0021917:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002191e:	e8 ff f9 ff ff       	call   c0021322 <SoundChannel::getVolume()>
c0021923:	83 ec 0c             	sub    esp,0xc
c0021926:	50                   	push   eax
c0021927:	e8 4b 45 00 00       	call   c0025e77 <__floatsisf>
c002192c:	59                   	pop    ecx
c002192d:	5d                   	pop    ebp
c002192e:	31 ed                	xor    ebp,ebp
c0021930:	68 00 00 c8 42       	push   0x42c80000
c0021935:	50                   	push   eax
c0021936:	e8 11 43 00 00       	call   c0025c4c <__divsf3>
c002193b:	83 c4 10             	add    esp,0x10
c002193e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021942:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0021946:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c002194c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0021950:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021957:	e8 60 fb ff ff       	call   c00214bc <SoundChannel::unbuffer(float*, int, int)>
c002195c:	83 c4 20             	add    esp,0x20
c002195f:	89 c1                	mov    ecx,eax
c0021961:	39 cd                	cmp    ebp,ecx
c0021963:	7d 52                	jge    c00219b7 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0021965:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0021969:	50                   	push   eax
c002196a:	50                   	push   eax
c002196b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002196f:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0021972:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021976:	e8 0e 41 00 00       	call   c0025a89 <__mulsf3>
c002197b:	5a                   	pop    edx
c002197c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021980:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0021986:	e8 ec 44 00 00       	call   c0025e77 <__floatsisf>
c002198b:	59                   	pop    ecx
c002198c:	5a                   	pop    edx
c002198d:	50                   	push   eax
c002198e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021992:	e8 b5 42 00 00       	call   c0025c4c <__divsf3>
c0021997:	59                   	pop    ecx
c0021998:	5a                   	pop    edx
c0021999:	50                   	push   eax
c002199a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002199e:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00219a1:	e8 c0 3d 00 00       	call   c0025766 <__addsf3>
c00219a6:	83 c4 10             	add    esp,0x10
c00219a9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00219ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00219b1:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c00219b4:	45                   	inc    ebp
c00219b5:	eb aa                	jmp    c0021961 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c00219b7:	39 cf                	cmp    edi,ecx
c00219b9:	7e 02                	jle    c00219bd <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00219bb:	89 cf                	mov    edi,ecx
c00219bd:	43                   	inc    ebx
c00219be:	83 fb 20             	cmp    ebx,0x20
c00219c1:	0f 85 10 ff ff ff    	jne    c00218d7 <SoundDevice::getAudio(int, float*, float*)+0x27>
c00219c7:	83 c4 1c             	add    esp,0x1c
c00219ca:	89 f8                	mov    eax,edi
c00219cc:	5b                   	pop    ebx
c00219cd:	5e                   	pop    esi
c00219ce:	5f                   	pop    edi
c00219cf:	5d                   	pop    ebp
c00219d0:	c3                   	ret    
c00219d1:	90                   	nop

c00219d2 <PCI::open(int, int, void*)>:
c00219d2:	83 ec 18             	sub    esp,0x18
c00219d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00219d9:	8b 10                	mov    edx,DWORD PTR [eax]
c00219db:	50                   	push   eax
c00219dc:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00219df:	31 c0                	xor    eax,eax
c00219e1:	83 c4 1c             	add    esp,0x1c
c00219e4:	c3                   	ret    
c00219e5:	90                   	nop

c00219e6 <PCI::close(int, int, void*)>:
c00219e6:	31 c0                	xor    eax,eax
c00219e8:	c3                   	ret    
c00219e9:	90                   	nop

c00219ea <PCI::PCI()>:
c00219ea:	83 ec 0c             	sub    esp,0xc
c00219ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219f1:	83 ec 08             	sub    esp,0x8
c00219f4:	68 14 b2 02 c0       	push   0xc002b214
c00219f9:	50                   	push   eax
c00219fa:	e8 1b 1a ff ff       	call   c001341a <Bus::Bus(char const*)>
c00219ff:	83 c4 10             	add    esp,0x10
c0021a02:	ba 80 b2 02 c0       	mov    edx,0xc002b280
c0021a07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a0b:	89 10                	mov    DWORD PTR [eax],edx
c0021a0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a11:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021a17:	0f b6 d0             	movzx  edx,al
c0021a1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a1e:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0021a25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a29:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021a2f:	0f b6 d0             	movzx  edx,al
c0021a32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a36:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0021a3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a3f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021a45:	8d 50 01             	lea    edx,[eax+0x1]
c0021a48:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021a4c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021a52:	0f b6 d0             	movzx  edx,al
c0021a55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a59:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021a5d:	83 c9 c0             	or     ecx,0xffffffc0
c0021a60:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021a64:	90                   	nop
c0021a65:	83 c4 0c             	add    esp,0xc
c0021a68:	c3                   	ret    
c0021a69:	90                   	nop

c0021a6a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0021a6a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021a6e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021a73:	89 ca                	mov    edx,ecx
c0021a75:	c1 e0 10             	shl    eax,0x10
c0021a78:	81 e2 fc 00 00 00    	and    edx,0xfc
c0021a7e:	09 d0                	or     eax,edx
c0021a80:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0021a85:	c1 e2 08             	shl    edx,0x8
c0021a88:	09 d0                	or     eax,edx
c0021a8a:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0021a8f:	c1 e2 0b             	shl    edx,0xb
c0021a92:	09 d0                	or     eax,edx
c0021a94:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021a99:	0d 00 00 00 80       	or     eax,0x80000000
c0021a9e:	ef                   	out    dx,eax
c0021a9f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021aa4:	ed                   	in     eax,dx
c0021aa5:	83 e1 02             	and    ecx,0x2
c0021aa8:	0f b6 c9             	movzx  ecx,cl
c0021aab:	c1 e1 03             	shl    ecx,0x3
c0021aae:	d3 e8                	shr    eax,cl
c0021ab0:	c3                   	ret    
c0021ab1:	90                   	nop

c0021ab2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0021ab2:	6a 00                	push   0x0
c0021ab4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021ab9:	50                   	push   eax
c0021aba:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021abf:	50                   	push   eax
c0021ac0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021ac5:	50                   	push   eax
c0021ac6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021aca:	e8 9b ff ff ff       	call   c0021a6a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021acf:	83 c4 14             	add    esp,0x14
c0021ad2:	c3                   	ret    
c0021ad3:	90                   	nop

c0021ad4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0021ad4:	6a 0e                	push   0xe
c0021ad6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021adb:	50                   	push   eax
c0021adc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021ae1:	50                   	push   eax
c0021ae2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021ae7:	50                   	push   eax
c0021ae8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021aec:	e8 79 ff ff ff       	call   c0021a6a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021af1:	83 c4 14             	add    esp,0x14
c0021af4:	0f b6 c0             	movzx  eax,al
c0021af7:	c3                   	ret    

c0021af8 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0021af8:	55                   	push   ebp
c0021af9:	57                   	push   edi
c0021afa:	56                   	push   esi
c0021afb:	53                   	push   ebx
c0021afc:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0021b01:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0021b06:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0021b0b:	6a 0a                	push   0xa
c0021b0d:	56                   	push   esi
c0021b0e:	55                   	push   ebp
c0021b0f:	57                   	push   edi
c0021b10:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021b14:	e8 51 ff ff ff       	call   c0021a6a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021b19:	6a 0a                	push   0xa
c0021b1b:	89 c3                	mov    ebx,eax
c0021b1d:	56                   	push   esi
c0021b1e:	0f b6 db             	movzx  ebx,bl
c0021b21:	55                   	push   ebp
c0021b22:	57                   	push   edi
c0021b23:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021b27:	e8 3e ff ff ff       	call   c0021a6a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021b2c:	83 c4 28             	add    esp,0x28
c0021b2f:	25 00 ff 00 00       	and    eax,0xff00
c0021b34:	09 d8                	or     eax,ebx
c0021b36:	5b                   	pop    ebx
c0021b37:	5e                   	pop    esi
c0021b38:	5f                   	pop    edi
c0021b39:	5d                   	pop    ebp
c0021b3a:	c3                   	ret    
c0021b3b:	90                   	nop

c0021b3c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0021b3c:	6a 08                	push   0x8
c0021b3e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021b43:	50                   	push   eax
c0021b44:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021b49:	50                   	push   eax
c0021b4a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021b4f:	50                   	push   eax
c0021b50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021b54:	e8 11 ff ff ff       	call   c0021a6a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021b59:	83 c4 14             	add    esp,0x14
c0021b5c:	0f b6 c4             	movzx  eax,ah
c0021b5f:	c3                   	ret    

c0021b60 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0021b60:	6a 08                	push   0x8
c0021b62:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021b67:	50                   	push   eax
c0021b68:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021b6d:	50                   	push   eax
c0021b6e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021b73:	50                   	push   eax
c0021b74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021b78:	e8 ed fe ff ff       	call   c0021a6a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021b7d:	83 c4 14             	add    esp,0x14
c0021b80:	c3                   	ret    
c0021b81:	90                   	nop

c0021b82 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0021b82:	6a 3c                	push   0x3c
c0021b84:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021b89:	50                   	push   eax
c0021b8a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021b8f:	50                   	push   eax
c0021b90:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021b95:	50                   	push   eax
c0021b96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021b9a:	e8 cb fe ff ff       	call   c0021a6a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021b9f:	83 c4 14             	add    esp,0x14
c0021ba2:	c3                   	ret    
c0021ba3:	90                   	nop

c0021ba4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0021ba4:	6a 18                	push   0x18
c0021ba6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021bab:	50                   	push   eax
c0021bac:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021bb1:	50                   	push   eax
c0021bb2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021bb7:	50                   	push   eax
c0021bb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021bbc:	e8 a9 fe ff ff       	call   c0021a6a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021bc1:	83 c4 14             	add    esp,0x14
c0021bc4:	0f b6 c4             	movzx  eax,ah
c0021bc7:	c3                   	ret    

c0021bc8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0021bc8:	55                   	push   ebp
c0021bc9:	57                   	push   edi
c0021bca:	56                   	push   esi
c0021bcb:	53                   	push   ebx
c0021bcc:	50                   	push   eax
c0021bcd:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0021bd1:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0021bd6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0021bdb:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0021be0:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0021be7:	8d 43 12             	lea    eax,[ebx+0x12]
c0021bea:	83 c3 10             	add    ebx,0x10
c0021bed:	0f b6 c0             	movzx  eax,al
c0021bf0:	0f b6 db             	movzx  ebx,bl
c0021bf3:	50                   	push   eax
c0021bf4:	51                   	push   ecx
c0021bf5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021bf9:	57                   	push   edi
c0021bfa:	55                   	push   ebp
c0021bfb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021bff:	e8 66 fe ff ff       	call   c0021a6a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021c04:	53                   	push   ebx
c0021c05:	89 c6                	mov    esi,eax
c0021c07:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021c0b:	c1 e6 10             	shl    esi,0x10
c0021c0e:	51                   	push   ecx
c0021c0f:	57                   	push   edi
c0021c10:	55                   	push   ebp
c0021c11:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021c15:	e8 50 fe ff ff       	call   c0021a6a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021c1a:	83 c4 2c             	add    esp,0x2c
c0021c1d:	0f b7 c0             	movzx  eax,ax
c0021c20:	5b                   	pop    ebx
c0021c21:	09 f0                	or     eax,esi
c0021c23:	5e                   	pop    esi
c0021c24:	5f                   	pop    edi
c0021c25:	5d                   	pop    ebp
c0021c26:	c3                   	ret    
c0021c27:	90                   	nop

c0021c28 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0021c28:	53                   	push   ebx
c0021c29:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021c2e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0021c33:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021c37:	c1 e1 10             	shl    ecx,0x10
c0021c3a:	25 fc 00 00 00       	and    eax,0xfc
c0021c3f:	09 c1                	or     ecx,eax
c0021c41:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021c46:	c1 e0 08             	shl    eax,0x8
c0021c49:	09 c1                	or     ecx,eax
c0021c4b:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0021c50:	c1 e0 0b             	shl    eax,0xb
c0021c53:	09 c1                	or     ecx,eax
c0021c55:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0021c5b:	89 c8                	mov    eax,ecx
c0021c5d:	ef                   	out    dx,eax
c0021c5e:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021c63:	ed                   	in     eax,dx
c0021c64:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0021c69:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0021c6e:	74 0a                	je     c0021c7a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0021c70:	0f b7 d8             	movzx  ebx,ax
c0021c73:	89 d0                	mov    eax,edx
c0021c75:	c1 e0 10             	shl    eax,0x10
c0021c78:	eb 05                	jmp    c0021c7f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0021c7a:	66 31 c0             	xor    ax,ax
c0021c7d:	89 d3                	mov    ebx,edx
c0021c7f:	09 c3                	or     ebx,eax
c0021c81:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021c86:	89 c8                	mov    eax,ecx
c0021c88:	ef                   	out    dx,eax
c0021c89:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021c8e:	89 d8                	mov    eax,ebx
c0021c90:	ef                   	out    dx,eax
c0021c91:	5b                   	pop    ebx
c0021c92:	c3                   	ret    
c0021c93:	90                   	nop

c0021c94 <PCI::checkBus(unsigned char)>:
c0021c94:	56                   	push   esi
c0021c95:	53                   	push   ebx
c0021c96:	31 db                	xor    ebx,ebx
c0021c98:	51                   	push   ecx
c0021c99:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0021c9e:	52                   	push   edx
c0021c9f:	53                   	push   ebx
c0021ca0:	43                   	inc    ebx
c0021ca1:	56                   	push   esi
c0021ca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ca6:	e8 2b 03 00 00       	call   c0021fd6 <PCI::checkDevice(unsigned char, unsigned char)>
c0021cab:	83 c4 10             	add    esp,0x10
c0021cae:	83 fb 20             	cmp    ebx,0x20
c0021cb1:	75 eb                	jne    c0021c9e <PCI::checkBus(unsigned char)+0xa>
c0021cb3:	58                   	pop    eax
c0021cb4:	5b                   	pop    ebx
c0021cb5:	5e                   	pop    esi
c0021cb6:	c3                   	ret    
c0021cb7:	90                   	nop

c0021cb8 <PCI::foundDevice(PCIDeviceInfo)>:
c0021cb8:	55                   	push   ebp
c0021cb9:	57                   	push   edi
c0021cba:	56                   	push   esi
c0021cbb:	53                   	push   ebx
c0021cbc:	83 ec 1c             	sub    esp,0x1c
c0021cbf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021cc3:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0021cc9:	0f 84 52 01 00 00    	je     c0021e21 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0021ccf:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0021cd3:	66 81 f9 06 04       	cmp    cx,0x406
c0021cd8:	75 2c                	jne    c0021d06 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0021cda:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0021cdf:	50                   	push   eax
c0021ce0:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0021ce5:	50                   	push   eax
c0021ce6:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0021ceb:	50                   	push   eax
c0021cec:	56                   	push   esi
c0021ced:	e8 b2 fe ff ff       	call   c0021ba4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0021cf2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0021cf6:	0f b6 c0             	movzx  eax,al
c0021cf9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0021cfd:	83 c4 2c             	add    esp,0x2c
c0021d00:	5b                   	pop    ebx
c0021d01:	5e                   	pop    esi
c0021d02:	5f                   	pop    edi
c0021d03:	5d                   	pop    ebp
c0021d04:	eb 8e                	jmp    c0021c94 <PCI::checkBus(unsigned char)>
c0021d06:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021d0a:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0021d10:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021d14:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0021d18:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0021d1c:	88 d3                	mov    bl,dl
c0021d1e:	85 c0                	test   eax,eax
c0021d20:	74 33                	je     c0021d55 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0021d22:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0021d25:	85 d2                	test   edx,edx
c0021d27:	74 28                	je     c0021d51 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021d29:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0021d2f:	31 ef                	xor    edi,ebp
c0021d31:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0021d37:	75 18                	jne    c0021d51 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021d39:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021d3d:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0021d43:	75 0c                	jne    c0021d51 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021d45:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0021d4b:	0f 84 d0 00 00 00    	je     c0021e21 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0021d51:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d53:	eb c9                	jmp    c0021d1e <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0021d55:	66 81 f9 01 06       	cmp    cx,0x601
c0021d5a:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0021d5e:	75 19                	jne    c0021d79 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0021d60:	83 ec 0c             	sub    esp,0xc
c0021d63:	68 64 01 00 00       	push   0x164
c0021d68:	e8 6d d7 fe ff       	call   c000f4da <malloc>
c0021d6d:	89 c5                	mov    ebp,eax
c0021d6f:	89 04 24             	mov    DWORD PTR [esp],eax
c0021d72:	e8 95 0f 00 00       	call   c0022d0c <SATABus::SATABus()>
c0021d77:	eb 1e                	jmp    c0021d97 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0021d79:	66 81 f9 01 01       	cmp    cx,0x101
c0021d7e:	75 60                	jne    c0021de0 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0021d80:	83 ec 0c             	sub    esp,0xc
c0021d83:	68 70 02 00 00       	push   0x270
c0021d88:	e8 4d d7 fe ff       	call   c000f4da <malloc>
c0021d8d:	89 c5                	mov    ebp,eax
c0021d8f:	89 04 24             	mov    DWORD PTR [esp],eax
c0021d92:	e8 03 03 00 00       	call   c002209a <IDE::IDE()>
c0021d97:	58                   	pop    eax
c0021d98:	5a                   	pop    edx
c0021d99:	55                   	push   ebp
c0021d9a:	56                   	push   esi
c0021d9b:	e8 06 1e ff ff       	call   c0013ba6 <Device::addChild(Device*)>
c0021da0:	83 ec 1c             	sub    esp,0x1c
c0021da3:	b9 09 00 00 00       	mov    ecx,0x9
c0021da8:	fc                   	cld    
c0021da9:	89 e7                	mov    edi,esp
c0021dab:	89 de                	mov    esi,ebx
c0021dad:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021daf:	55                   	push   ebp
c0021db0:	e8 fb 1c ff ff       	call   c0013ab0 <Device::preOpenPCI(PCIDeviceInfo)>
c0021db5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021db8:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0021dbc:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0021dc4:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0021dcc:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0021dd4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021dd7:	83 c4 4c             	add    esp,0x4c
c0021dda:	5b                   	pop    ebx
c0021ddb:	5e                   	pop    esi
c0021ddc:	5f                   	pop    edi
c0021ddd:	5d                   	pop    ebp
c0021dde:	ff e0                	jmp    eax
c0021de0:	83 ec 0c             	sub    esp,0xc
c0021de3:	68 58 01 00 00       	push   0x158
c0021de8:	e8 ed d6 fe ff       	call   c000f4da <malloc>
c0021ded:	89 c5                	mov    ebp,eax
c0021def:	58                   	pop    eax
c0021df0:	5a                   	pop    edx
c0021df1:	68 1c b2 02 c0       	push   0xc002b21c
c0021df6:	55                   	push   ebp
c0021df7:	e8 a0 20 ff ff       	call   c0013e9c <DriverlessDevice::DriverlessDevice(char const*)>
c0021dfc:	59                   	pop    ecx
c0021dfd:	5f                   	pop    edi
c0021dfe:	55                   	push   ebp
c0021dff:	56                   	push   esi
c0021e00:	e8 a1 1d ff ff       	call   c0013ba6 <Device::addChild(Device*)>
c0021e05:	b9 09 00 00 00       	mov    ecx,0x9
c0021e0a:	fc                   	cld    
c0021e0b:	89 df                	mov    edi,ebx
c0021e0d:	89 de                	mov    esi,ebx
c0021e0f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021e11:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0021e15:	83 c4 2c             	add    esp,0x2c
c0021e18:	5b                   	pop    ebx
c0021e19:	5e                   	pop    esi
c0021e1a:	5f                   	pop    edi
c0021e1b:	5d                   	pop    ebp
c0021e1c:	e9 8f 1c ff ff       	jmp    c0013ab0 <Device::preOpenPCI(PCIDeviceInfo)>
c0021e21:	83 c4 1c             	add    esp,0x1c
c0021e24:	5b                   	pop    ebx
c0021e25:	5e                   	pop    esi
c0021e26:	5f                   	pop    edi
c0021e27:	5d                   	pop    ebp
c0021e28:	c3                   	ret    
c0021e29:	90                   	nop

c0021e2a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0021e2a:	55                   	push   ebp
c0021e2b:	57                   	push   edi
c0021e2c:	56                   	push   esi
c0021e2d:	53                   	push   ebx
c0021e2e:	83 ec 5c             	sub    esp,0x5c
c0021e31:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0021e35:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021e39:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0021e3d:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0021e42:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021e46:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0021e4a:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0021e4f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021e53:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0021e58:	6a 0c                	push   0xc
c0021e5a:	55                   	push   ebp
c0021e5b:	53                   	push   ebx
c0021e5c:	57                   	push   edi
c0021e5d:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0021e64:	e8 01 fc ff ff       	call   c0021a6a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021e69:	55                   	push   ebp
c0021e6a:	53                   	push   ebx
c0021e6b:	57                   	push   edi
c0021e6c:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0021e73:	e8 80 fc ff ff       	call   c0021af8 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0021e78:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0021e7d:	83 c4 24             	add    esp,0x24
c0021e80:	55                   	push   ebp
c0021e81:	53                   	push   ebx
c0021e82:	57                   	push   edi
c0021e83:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0021e87:	e8 f6 fc ff ff       	call   c0021b82 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0021e8c:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0021e90:	6a 3c                	push   0x3c
c0021e92:	55                   	push   ebp
c0021e93:	53                   	push   ebx
c0021e94:	57                   	push   edi
c0021e95:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0021e9c:	e8 c9 fb ff ff       	call   c0021a6a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021ea1:	0f b6 c4             	movzx  eax,ah
c0021ea4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021ea8:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0021eac:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0021eb0:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c0021eb5:	83 c4 24             	add    esp,0x24
c0021eb8:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0021ebe:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c0021ec5:	74 6c                	je     c0021f33 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0021ec7:	31 f6                	xor    esi,esi
c0021ec9:	8b 15 e8 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cbe8
c0021ecf:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0021ed5:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c0021edb:	7e 56                	jle    c0021f33 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0021edd:	8d 14 f2             	lea    edx,[edx+esi*8]
c0021ee0:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0021ee7:	39 cb                	cmp    ebx,ecx
c0021ee9:	75 45                	jne    c0021f30 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0021eeb:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0021ef2:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0021ef6:	75 38                	jne    c0021f30 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0021ef8:	83 ec 0c             	sub    esp,0xc
c0021efb:	68 36 b2 02 c0       	push   0xc002b236
c0021f00:	e8 7a 08 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0021f05:	8b 15 e8 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cbe8
c0021f0b:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0021f11:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0021f19:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0021f1d:	52                   	push   edx
c0021f1e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f22:	53                   	push   ebx
c0021f23:	68 5b b2 02 c0       	push   0xc002b25b
c0021f28:	e8 52 08 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0021f2d:	83 c4 20             	add    esp,0x20
c0021f30:	46                   	inc    esi
c0021f31:	eb 96                	jmp    c0021ec9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0021f33:	31 d2                	xor    edx,edx
c0021f35:	83 ec 0c             	sub    esp,0xc
c0021f38:	55                   	push   ebp
c0021f39:	53                   	push   ebx
c0021f3a:	57                   	push   edi
c0021f3b:	52                   	push   edx
c0021f3c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0021f40:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021f47:	e8 7c fc ff ff       	call   c0021bc8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021f4c:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0021f50:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021f54:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0021f58:	42                   	inc    edx
c0021f59:	83 c4 20             	add    esp,0x20
c0021f5c:	83 fa 06             	cmp    edx,0x6
c0021f5f:	75 d4                	jne    c0021f35 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0021f61:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021f65:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0021f69:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0021f6d:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0021f71:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0021f75:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0021f79:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0021f7e:	86 e0                	xchg   al,ah
c0021f80:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0021f85:	55                   	push   ebp
c0021f86:	53                   	push   ebx
c0021f87:	57                   	push   edi
c0021f88:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0021f8c:	e8 ab fb ff ff       	call   c0021b3c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0021f91:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0021f95:	55                   	push   ebp
c0021f96:	53                   	push   ebx
c0021f97:	57                   	push   edi
c0021f98:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021f9f:	e8 0e fb ff ff       	call   c0021ab2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021fa4:	83 ec 0c             	sub    esp,0xc
c0021fa7:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0021fac:	b9 09 00 00 00       	mov    ecx,0x9
c0021fb1:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0021fb5:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0021fb9:	fc                   	cld    
c0021fba:	89 e7                	mov    edi,esp
c0021fbc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021fbe:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0021fc5:	e8 ee fc ff ff       	call   c0021cb8 <PCI::foundDevice(PCIDeviceInfo)>
c0021fca:	81 c4 8c 00 00 00    	add    esp,0x8c
c0021fd0:	5b                   	pop    ebx
c0021fd1:	5e                   	pop    esi
c0021fd2:	5f                   	pop    edi
c0021fd3:	5d                   	pop    ebp
c0021fd4:	c3                   	ret    
c0021fd5:	90                   	nop

c0021fd6 <PCI::checkDevice(unsigned char, unsigned char)>:
c0021fd6:	55                   	push   ebp
c0021fd7:	57                   	push   edi
c0021fd8:	56                   	push   esi
c0021fd9:	53                   	push   ebx
c0021fda:	83 ec 0c             	sub    esp,0xc
c0021fdd:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0021fe1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0021fe6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0021feb:	6a 00                	push   0x0
c0021fed:	56                   	push   esi
c0021fee:	57                   	push   edi
c0021fef:	55                   	push   ebp
c0021ff0:	e8 bd fa ff ff       	call   c0021ab2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021ff5:	6a 00                	push   0x0
c0021ff7:	56                   	push   esi
c0021ff8:	57                   	push   edi
c0021ff9:	55                   	push   ebp
c0021ffa:	e8 2b fe ff ff       	call   c0021e2a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0021fff:	83 c4 20             	add    esp,0x20
c0022002:	6a 00                	push   0x0
c0022004:	56                   	push   esi
c0022005:	57                   	push   edi
c0022006:	55                   	push   ebp
c0022007:	e8 c8 fa ff ff       	call   c0021ad4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002200c:	83 c4 10             	add    esp,0x10
c002200f:	84 c0                	test   al,al
c0022011:	79 27                	jns    c002203a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022013:	bb 01 00 00 00       	mov    ebx,0x1
c0022018:	53                   	push   ebx
c0022019:	56                   	push   esi
c002201a:	57                   	push   edi
c002201b:	55                   	push   ebp
c002201c:	e8 91 fa ff ff       	call   c0021ab2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022021:	83 c4 10             	add    esp,0x10
c0022024:	66 40                	inc    ax
c0022026:	74 0c                	je     c0022034 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022028:	53                   	push   ebx
c0022029:	56                   	push   esi
c002202a:	57                   	push   edi
c002202b:	55                   	push   ebp
c002202c:	e8 f9 fd ff ff       	call   c0021e2a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022031:	83 c4 10             	add    esp,0x10
c0022034:	43                   	inc    ebx
c0022035:	83 fb 08             	cmp    ebx,0x8
c0022038:	75 de                	jne    c0022018 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002203a:	83 c4 0c             	add    esp,0xc
c002203d:	5b                   	pop    ebx
c002203e:	5e                   	pop    esi
c002203f:	5f                   	pop    edi
c0022040:	5d                   	pop    ebp
c0022041:	c3                   	ret    

c0022042 <PCI::detect()>:
c0022042:	56                   	push   esi
c0022043:	53                   	push   ebx
c0022044:	53                   	push   ebx
c0022045:	31 db                	xor    ebx,ebx
c0022047:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002204b:	6a 00                	push   0x0
c002204d:	6a 00                	push   0x0
c002204f:	6a 00                	push   0x0
c0022051:	56                   	push   esi
c0022052:	e8 7d fa ff ff       	call   c0021ad4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022057:	83 c4 10             	add    esp,0x10
c002205a:	a8 80                	test   al,0x80
c002205c:	75 21                	jne    c002207f <PCI::detect()+0x3d>
c002205e:	51                   	push   ecx
c002205f:	51                   	push   ecx
c0022060:	6a 00                	push   0x0
c0022062:	56                   	push   esi
c0022063:	e8 2c fc ff ff       	call   c0021c94 <PCI::checkBus(unsigned char)>
c0022068:	83 c4 10             	add    esp,0x10
c002206b:	eb 24                	jmp    c0022091 <PCI::detect()+0x4f>
c002206d:	52                   	push   edx
c002206e:	52                   	push   edx
c002206f:	53                   	push   ebx
c0022070:	43                   	inc    ebx
c0022071:	56                   	push   esi
c0022072:	e8 1d fc ff ff       	call   c0021c94 <PCI::checkBus(unsigned char)>
c0022077:	83 c4 10             	add    esp,0x10
c002207a:	83 fb 08             	cmp    ebx,0x8
c002207d:	74 12                	je     c0022091 <PCI::detect()+0x4f>
c002207f:	53                   	push   ebx
c0022080:	6a 00                	push   0x0
c0022082:	6a 00                	push   0x0
c0022084:	56                   	push   esi
c0022085:	e8 28 fa ff ff       	call   c0021ab2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002208a:	83 c4 10             	add    esp,0x10
c002208d:	66 40                	inc    ax
c002208f:	74 dc                	je     c002206d <PCI::detect()+0x2b>
c0022091:	58                   	pop    eax
c0022092:	5b                   	pop    ebx
c0022093:	5e                   	pop    esi
c0022094:	c3                   	ret    
c0022095:	90                   	nop

c0022096 <IDE::close(int, int, void*)>:
c0022096:	83 c8 ff             	or     eax,0xffffffff
c0022099:	c3                   	ret    

c002209a <IDE::IDE()>:
c002209a:	83 ec 0c             	sub    esp,0xc
c002209d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220a1:	83 ec 08             	sub    esp,0x8
c00220a4:	68 a4 b2 02 c0       	push   0xc002b2a4
c00220a9:	50                   	push   eax
c00220aa:	e8 83 1e ff ff       	call   c0013f32 <HardDiskController::HardDiskController(char const*)>
c00220af:	83 c4 10             	add    esp,0x10
c00220b2:	ba e4 b4 02 c0       	mov    edx,0xc002b4e4
c00220b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220bb:	89 10                	mov    DWORD PTR [eax],edx
c00220bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220c1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00220c8:	90                   	nop
c00220c9:	83 c4 0c             	add    esp,0xc
c00220cc:	c3                   	ret    
c00220cd:	90                   	nop

c00220ce <IDE::prepareInterrupt(unsigned char)>:
c00220ce:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00220d3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00220d7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00220df:	c3                   	ret    

c00220e0 <selectDrive(unsigned char, unsigned char)>:
c00220e0:	c3                   	ret    
c00220e1:	90                   	nop

c00220e2 <IDE::getBase(unsigned char)>:
c00220e2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00220e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220eb:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00220f3:	c3                   	ret    

c00220f4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00220f4:	55                   	push   ebp
c00220f5:	57                   	push   edi
c00220f6:	56                   	push   esi
c00220f7:	53                   	push   ebx
c00220f8:	83 ec 1c             	sub    esp,0x1c
c00220fb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00220ff:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022103:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022106:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002210a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002210e:	80 f9 03             	cmp    cl,0x3
c0022111:	77 51                	ja     c0022164 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022113:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022117:	0f b6 f2             	movzx  esi,dl
c002211a:	0f b6 db             	movzx  ebx,bl
c002211d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022120:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022124:	83 ca 80             	or     edx,0xffffff80
c0022127:	0f b6 d2             	movzx  edx,dl
c002212a:	52                   	push   edx
c002212b:	6a 0c                	push   0xc
c002212d:	56                   	push   esi
c002212e:	57                   	push   edi
c002212f:	e8 c0 ff ff ff       	call   c00220f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022134:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022139:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002213d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022141:	ee                   	out    dx,al
c0022142:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022147:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002214b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002214f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022153:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002215b:	83 c4 2c             	add    esp,0x2c
c002215e:	5b                   	pop    ebx
c002215f:	5e                   	pop    esi
c0022160:	5f                   	pop    edi
c0022161:	5d                   	pop    ebp
c0022162:	eb 90                	jmp    c00220f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022164:	80 fb 07             	cmp    bl,0x7
c0022167:	77 12                	ja     c002217b <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022169:	0f b6 d2             	movzx  edx,dl
c002216c:	0f b6 db             	movzx  ebx,bl
c002216f:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022177:	89 da                	mov    edx,ebx
c0022179:	eb 2f                	jmp    c00221aa <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002217b:	80 fb 0d             	cmp    bl,0xd
c002217e:	77 13                	ja     c0022193 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022180:	0f b6 d2             	movzx  edx,dl
c0022183:	0f b6 db             	movzx  ebx,bl
c0022186:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002218d:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022191:	eb 17                	jmp    c00221aa <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022193:	80 fb 15             	cmp    bl,0x15
c0022196:	77 13                	ja     c00221ab <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022198:	0f b6 d2             	movzx  edx,dl
c002219b:	0f b6 db             	movzx  ebx,bl
c002219e:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00221a6:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00221aa:	ee                   	out    dx,al
c00221ab:	83 c4 1c             	add    esp,0x1c
c00221ae:	5b                   	pop    ebx
c00221af:	5e                   	pop    esi
c00221b0:	5f                   	pop    edi
c00221b1:	5d                   	pop    ebp
c00221b2:	c3                   	ret    
c00221b3:	90                   	nop

c00221b4 <IDE::read(unsigned char, unsigned char)>:
c00221b4:	55                   	push   ebp
c00221b5:	57                   	push   edi
c00221b6:	56                   	push   esi
c00221b7:	53                   	push   ebx
c00221b8:	83 ec 1c             	sub    esp,0x1c
c00221bb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00221bf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00221c3:	8d 43 f8             	lea    eax,[ebx-0x8]
c00221c6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00221ca:	3c 03                	cmp    al,0x3
c00221cc:	77 43                	ja     c0022211 <IDE::read(unsigned char, unsigned char)+0x5d>
c00221ce:	0f b6 f2             	movzx  esi,dl
c00221d1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00221d4:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00221d8:	83 c8 80             	or     eax,0xffffff80
c00221db:	0f b6 c0             	movzx  eax,al
c00221de:	50                   	push   eax
c00221df:	6a 0c                	push   0xc
c00221e1:	56                   	push   esi
c00221e2:	57                   	push   edi
c00221e3:	e8 0c ff ff ff       	call   c00220f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00221e8:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00221ed:	0f b6 c3             	movzx  eax,bl
c00221f0:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00221f4:	ec                   	in     al,dx
c00221f5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00221f9:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00221fe:	52                   	push   edx
c00221ff:	6a 0c                	push   0xc
c0022201:	56                   	push   esi
c0022202:	57                   	push   edi
c0022203:	e8 ec fe ff ff       	call   c00220f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022208:	83 c4 20             	add    esp,0x20
c002220b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002220f:	eb 49                	jmp    c002225a <IDE::read(unsigned char, unsigned char)+0xa6>
c0022211:	80 fb 07             	cmp    bl,0x7
c0022214:	77 12                	ja     c0022228 <IDE::read(unsigned char, unsigned char)+0x74>
c0022216:	0f b6 d2             	movzx  edx,dl
c0022219:	0f b6 c3             	movzx  eax,bl
c002221c:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0022224:	89 c2                	mov    edx,eax
c0022226:	eb 31                	jmp    c0022259 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022228:	80 fb 0d             	cmp    bl,0xd
c002222b:	77 13                	ja     c0022240 <IDE::read(unsigned char, unsigned char)+0x8c>
c002222d:	0f b6 d2             	movzx  edx,dl
c0022230:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0022237:	0f b6 d3             	movzx  edx,bl
c002223a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002223e:	eb 19                	jmp    c0022259 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022240:	31 c0                	xor    eax,eax
c0022242:	80 fb 15             	cmp    bl,0x15
c0022245:	77 13                	ja     c002225a <IDE::read(unsigned char, unsigned char)+0xa6>
c0022247:	0f b6 d2             	movzx  edx,dl
c002224a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0022252:	0f b6 d3             	movzx  edx,bl
c0022255:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0022259:	ec                   	in     al,dx
c002225a:	83 c4 1c             	add    esp,0x1c
c002225d:	5b                   	pop    ebx
c002225e:	5e                   	pop    esi
c002225f:	5f                   	pop    edi
c0022260:	5d                   	pop    ebp
c0022261:	c3                   	ret    

c0022262 <IDE::waitInterrupt(unsigned char)>:
c0022262:	55                   	push   ebp
c0022263:	57                   	push   edi
c0022264:	56                   	push   esi
c0022265:	53                   	push   ebx
c0022266:	31 db                	xor    ebx,ebx
c0022268:	83 ec 0c             	sub    esp,0xc
c002226b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002226f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0022274:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002227c:	89 e8                	mov    eax,ebp
c002227e:	84 c0                	test   al,al
c0022280:	75 34                	jne    c00222b6 <IDE::waitInterrupt(unsigned char)+0x54>
c0022282:	52                   	push   edx
c0022283:	6a 0c                	push   0xc
c0022285:	56                   	push   esi
c0022286:	57                   	push   edi
c0022287:	e8 28 ff ff ff       	call   c00221b4 <IDE::read(unsigned char, unsigned char)>
c002228c:	83 c4 10             	add    esp,0x10
c002228f:	a8 01                	test   al,0x1
c0022291:	75 2b                	jne    c00222be <IDE::waitInterrupt(unsigned char)+0x5c>
c0022293:	f6 c3 04             	test   bl,0x4
c0022296:	75 16                	jne    c00222ae <IDE::waitInterrupt(unsigned char)+0x4c>
c0022298:	83 fb 32             	cmp    ebx,0x32
c002229b:	7e 11                	jle    c00222ae <IDE::waitInterrupt(unsigned char)+0x4c>
c002229d:	50                   	push   eax
c002229e:	50                   	push   eax
c002229f:	6a 00                	push   0x0
c00222a1:	68 80 96 98 00       	push   0x989680
c00222a6:	e8 8b b1 ff ff       	call   c001d436 <nanoSleep(unsigned long long)>
c00222ab:	83 c4 10             	add    esp,0x10
c00222ae:	83 fb 3c             	cmp    ebx,0x3c
c00222b1:	74 0b                	je     c00222be <IDE::waitInterrupt(unsigned char)+0x5c>
c00222b3:	43                   	inc    ebx
c00222b4:	eb be                	jmp    c0022274 <IDE::waitInterrupt(unsigned char)+0x12>
c00222b6:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00222be:	83 c4 0c             	add    esp,0xc
c00222c1:	89 e8                	mov    eax,ebp
c00222c3:	5b                   	pop    ebx
c00222c4:	5e                   	pop    esi
c00222c5:	5f                   	pop    edi
c00222c6:	5d                   	pop    ebp
c00222c7:	c3                   	ret    

c00222c8 <ideChannel0IRQHandler(regs*, void*)>:
c00222c8:	83 ec 10             	sub    esp,0x10
c00222cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00222cf:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00222d6:	6a 07                	push   0x7
c00222d8:	6a 00                	push   0x0
c00222da:	50                   	push   eax
c00222db:	e8 d4 fe ff ff       	call   c00221b4 <IDE::read(unsigned char, unsigned char)>
c00222e0:	83 c4 1c             	add    esp,0x1c
c00222e3:	c3                   	ret    

c00222e4 <ideChannel1IRQHandler(regs*, void*)>:
c00222e4:	83 ec 10             	sub    esp,0x10
c00222e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00222eb:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00222f2:	6a 07                	push   0x7
c00222f4:	6a 01                	push   0x1
c00222f6:	50                   	push   eax
c00222f7:	e8 b8 fe ff ff       	call   c00221b4 <IDE::read(unsigned char, unsigned char)>
c00222fc:	83 c4 1c             	add    esp,0x1c
c00222ff:	c3                   	ret    

c0022300 <IDE::enableIRQs(unsigned char, bool)>:
c0022300:	57                   	push   edi
c0022301:	56                   	push   esi
c0022302:	be 04 00 00 00       	mov    esi,0x4
c0022307:	53                   	push   ebx
c0022308:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002230d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022311:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0022316:	0f 94 c0             	sete   al
c0022319:	d1 e0                	shl    eax,1
c002231b:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0022322:	0f b6 c0             	movzx  eax,al
c0022325:	50                   	push   eax
c0022326:	6a 0c                	push   0xc
c0022328:	57                   	push   edi
c0022329:	53                   	push   ebx
c002232a:	e8 c5 fd ff ff       	call   c00220f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002232f:	83 c4 10             	add    esp,0x10
c0022332:	50                   	push   eax
c0022333:	6a 0c                	push   0xc
c0022335:	57                   	push   edi
c0022336:	53                   	push   ebx
c0022337:	e8 78 fe ff ff       	call   c00221b4 <IDE::read(unsigned char, unsigned char)>
c002233c:	83 c4 10             	add    esp,0x10
c002233f:	4e                   	dec    esi
c0022340:	75 f0                	jne    c0022332 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0022342:	5b                   	pop    ebx
c0022343:	5e                   	pop    esi
c0022344:	5f                   	pop    edi
c0022345:	c3                   	ret    

c0022346 <IDE::open(int, int, void*)>:
c0022346:	55                   	push   ebp
c0022347:	57                   	push   edi
c0022348:	56                   	push   esi
c0022349:	53                   	push   ebx
c002234a:	83 ec 1c             	sub    esp,0x1c
c002234d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0022351:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002235a:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0022363:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002236a:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0022371:	0f 85 b0 02 00 00    	jne    c0022627 <IDE::open(int, int, void*)+0x2e1>
c0022377:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002237d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0022381:	83 e0 7f             	and    eax,0x7f
c0022384:	3c 05                	cmp    al,0x5
c0022386:	74 04                	je     c002238c <IDE::open(int, int, void*)+0x46>
c0022388:	3c 0f                	cmp    al,0xf
c002238a:	75 32                	jne    c00223be <IDE::open(int, int, void*)+0x78>
c002238c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0022392:	83 e0 fc             	and    eax,0xfffffffc
c0022395:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002239c:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00223a2:	83 e0 fc             	and    eax,0xfffffffc
c00223a5:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00223ac:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00223b2:	83 e0 fc             	and    eax,0xfffffffc
c00223b5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00223bc:	eb 14                	jmp    c00223d2 <IDE::open(int, int, void*)+0x8c>
c00223be:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00223c8:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00223d2:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00223d9:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00223e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00223e4:	89 c6                	mov    esi,eax
c00223e6:	bf f8 0c 00 00       	mov    edi,0xcf8
c00223eb:	c1 e6 10             	shl    esi,0x10
c00223ee:	89 e8                	mov    eax,ebp
c00223f0:	89 fa                	mov    edx,edi
c00223f2:	c1 e0 0b             	shl    eax,0xb
c00223f5:	09 f0                	or     eax,esi
c00223f7:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00223fe:	c1 e6 08             	shl    esi,0x8
c0022401:	09 c6                	or     esi,eax
c0022403:	89 f0                	mov    eax,esi
c0022405:	0d 08 00 00 80       	or     eax,0x80000008
c002240a:	ef                   	out    dx,eax
c002240b:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0022410:	89 ca                	mov    edx,ecx
c0022412:	ed                   	in     eax,dx
c0022413:	c1 e8 10             	shr    eax,0x10
c0022416:	3d ff ff 00 00       	cmp    eax,0xffff
c002241b:	0f 84 f5 00 00 00    	je     c0022516 <IDE::open(int, int, void*)+0x1d0>
c0022421:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0022427:	89 fa                	mov    edx,edi
c0022429:	89 f0                	mov    eax,esi
c002242b:	ef                   	out    dx,eax
c002242c:	b0 fe                	mov    al,0xfe
c002242e:	89 ca                	mov    edx,ecx
c0022430:	ee                   	out    dx,al
c0022431:	89 f0                	mov    eax,esi
c0022433:	89 fa                	mov    edx,edi
c0022435:	ef                   	out    dx,eax
c0022436:	89 ca                	mov    edx,ecx
c0022438:	ed                   	in     eax,dx
c0022439:	3c fe                	cmp    al,0xfe
c002243b:	0f 85 a9 00 00 00    	jne    c00224ea <IDE::open(int, int, void*)+0x1a4>
c0022441:	8b 15 e8 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cbe8
c0022447:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c002244e:	74 33                	je     c0022483 <IDE::open(int, int, void*)+0x13d>
c0022450:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0022456:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002245a:	40                   	inc    eax
c002245b:	83 ec 0c             	sub    esp,0xc
c002245e:	0f b6 c0             	movzx  eax,al
c0022461:	50                   	push   eax
c0022462:	55                   	push   ebp
c0022463:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022467:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c002246d:	51                   	push   ecx
c002246e:	e8 53 53 ff ff       	call   c00177c6 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0022473:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0022478:	83 c4 1c             	add    esp,0x1c
c002247b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0022481:	eb 0a                	jmp    c002248d <IDE::open(int, int, void*)+0x147>
c0022483:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002248d:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0022494:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002249b:	c1 e1 10             	shl    ecx,0x10
c002249e:	c1 e0 08             	shl    eax,0x8
c00224a1:	bf f8 0c 00 00       	mov    edi,0xcf8
c00224a6:	09 c1                	or     ecx,eax
c00224a8:	89 fa                	mov    edx,edi
c00224aa:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00224b1:	c1 e0 0b             	shl    eax,0xb
c00224b4:	09 c1                	or     ecx,eax
c00224b6:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00224bc:	89 c8                	mov    eax,ecx
c00224be:	ef                   	out    dx,eax
c00224bf:	be fc 0c 00 00       	mov    esi,0xcfc
c00224c4:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00224ca:	89 f2                	mov    edx,esi
c00224cc:	ee                   	out    dx,al
c00224cd:	89 c8                	mov    eax,ecx
c00224cf:	89 fa                	mov    edx,edi
c00224d1:	ef                   	out    dx,eax
c00224d2:	89 f2                	mov    edx,esi
c00224d4:	ed                   	in     eax,dx
c00224d5:	0f b6 c0             	movzx  eax,al
c00224d8:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00224de:	74 46                	je     c0022526 <IDE::open(int, int, void*)+0x1e0>
c00224e0:	83 ec 0c             	sub    esp,0xc
c00224e3:	68 bc b2 02 c0       	push   0xc002b2bc
c00224e8:	eb 34                	jmp    c002251e <IDE::open(int, int, void*)+0x1d8>
c00224ea:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00224f3:	75 17                	jne    c002250c <IDE::open(int, int, void*)+0x1c6>
c00224f5:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00224fa:	74 07                	je     c0022503 <IDE::open(int, int, void*)+0x1bd>
c00224fc:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0022501:	75 09                	jne    c002250c <IDE::open(int, int, void*)+0x1c6>
c0022503:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002250a:	eb 1a                	jmp    c0022526 <IDE::open(int, int, void*)+0x1e0>
c002250c:	83 ec 0c             	sub    esp,0xc
c002250f:	68 c4 b2 02 c0       	push   0xc002b2c4
c0022514:	eb 08                	jmp    c002251e <IDE::open(int, int, void*)+0x1d8>
c0022516:	83 ec 0c             	sub    esp,0xc
c0022519:	68 f5 b2 02 c0       	push   0xc002b2f5
c002251e:	e8 ae 73 ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c0022523:	83 c4 10             	add    esp,0x10
c0022526:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c002252d:	79 1a                	jns    c0022549 <IDE::open(int, int, void*)+0x203>
c002252f:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0022535:	83 e0 fc             	and    eax,0xfffffffc
c0022538:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002253f:	83 c0 08             	add    eax,0x8
c0022542:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0022549:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002254f:	89 c2                	mov    edx,eax
c0022551:	83 e2 0f             	and    edx,0xf
c0022554:	66 83 fa 08          	cmp    dx,0x8
c0022558:	75 0a                	jne    c0022564 <IDE::open(int, int, void*)+0x21e>
c002255a:	83 e8 02             	sub    eax,0x2
c002255d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022564:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002256a:	89 c2                	mov    edx,eax
c002256c:	83 e2 0f             	and    edx,0xf
c002256f:	66 83 fa 08          	cmp    dx,0x8
c0022573:	75 0a                	jne    c002257f <IDE::open(int, int, void*)+0x239>
c0022575:	83 e8 02             	sub    eax,0x2
c0022578:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002257f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0022586:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002258d:	89 d0                	mov    eax,edx
c002258f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022592:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022596:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002259a:	8d 4a 01             	lea    ecx,[edx+0x1]
c002259d:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00225a2:	0f b6 c9             	movzx  ecx,cl
c00225a5:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00225ac:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00225af:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00225b3:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00225b7:	8d 50 02             	lea    edx,[eax+0x2]
c00225ba:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00225bf:	0f b6 d2             	movzx  edx,dl
c00225c2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00225c8:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00225cb:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00225cf:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00225d3:	8d 48 03             	lea    ecx,[eax+0x3]
c00225d6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00225db:	0f b6 c9             	movzx  ecx,cl
c00225de:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00225e4:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00225e7:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00225eb:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00225ef:	8d 50 04             	lea    edx,[eax+0x4]
c00225f2:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00225f8:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00225fd:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0022604:	66 85 f6             	test   si,si
c0022607:	74 3e                	je     c0022647 <IDE::open(int, int, void*)+0x301>
c0022609:	0f b6 d2             	movzx  edx,dl
c002260c:	83 c0 05             	add    eax,0x5
c002260f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022612:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022616:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002261a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0022620:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022625:	eb 20                	jmp    c0022647 <IDE::open(int, int, void*)+0x301>
c0022627:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022631:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002263b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0022642:	e9 02 ff ff ff       	jmp    c0022549 <IDE::open(int, int, void*)+0x203>
c0022647:	52                   	push   edx
c0022648:	52                   	push   edx
c0022649:	6a 00                	push   0x0
c002264b:	53                   	push   ebx
c002264c:	e8 7d fa ff ff       	call   c00220ce <IDE::prepareInterrupt(unsigned char)>
c0022651:	59                   	pop    ecx
c0022652:	5e                   	pop    esi
c0022653:	6a 01                	push   0x1
c0022655:	53                   	push   ebx
c0022656:	e8 73 fa ff ff       	call   c00220ce <IDE::prepareInterrupt(unsigned char)>
c002265b:	83 c4 0c             	add    esp,0xc
c002265e:	6a 00                	push   0x0
c0022660:	6a 00                	push   0x0
c0022662:	53                   	push   ebx
c0022663:	e8 98 fc ff ff       	call   c0022300 <IDE::enableIRQs(unsigned char, bool)>
c0022668:	83 c4 0c             	add    esp,0xc
c002266b:	6a 00                	push   0x0
c002266d:	6a 01                	push   0x1
c002266f:	53                   	push   ebx
c0022670:	e8 8b fc ff ff       	call   c0022300 <IDE::enableIRQs(unsigned char, bool)>
c0022675:	83 c4 10             	add    esp,0x10
c0022678:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002267f:	74 40                	je     c00226c1 <IDE::open(int, int, void*)+0x37b>
c0022681:	83 ec 0c             	sub    esp,0xc
c0022684:	68 1f b3 02 c0       	push   0xc002b31f
c0022689:	e8 f1 00 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c002268e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022691:	6a 01                	push   0x1
c0022693:	68 c8 22 02 c0       	push   0xc00222c8
c0022698:	6a 0e                	push   0xe
c002269a:	53                   	push   ebx
c002269b:	e8 8a 14 ff ff       	call   c0013b2a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00226a0:	83 c4 14             	add    esp,0x14
c00226a3:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00226a9:	53                   	push   ebx
c00226aa:	6a 01                	push   0x1
c00226ac:	68 e4 22 02 c0       	push   0xc00222e4
c00226b1:	6a 0f                	push   0xf
c00226b3:	53                   	push   ebx
c00226b4:	e8 71 14 ff ff       	call   c0013b2a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00226b9:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00226bf:	eb 4a                	jmp    c002270b <IDE::open(int, int, void*)+0x3c5>
c00226c1:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00226cb:	50                   	push   eax
c00226cc:	6a 0f                	push   0xf
c00226ce:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00226d4:	68 3b b3 02 c0       	push   0xc002b33b
c00226d9:	e8 a1 00 ff ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c00226de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00226e1:	6a 00                	push   0x0
c00226e3:	68 c8 22 02 c0       	push   0xc00222c8
c00226e8:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00226ee:	53                   	push   ebx
c00226ef:	e8 36 14 ff ff       	call   c0013b2a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00226f4:	83 c4 14             	add    esp,0x14
c00226f7:	53                   	push   ebx
c00226f8:	6a 00                	push   0x0
c00226fa:	68 e4 22 02 c0       	push   0xc00222e4
c00226ff:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0022705:	53                   	push   ebx
c0022706:	e8 1f 14 ff ff       	call   c0013b2a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002270b:	8b 03                	mov    eax,DWORD PTR [ebx]
c002270d:	83 c4 20             	add    esp,0x20
c0022710:	83 ec 0c             	sub    esp,0xc
c0022713:	53                   	push   ebx
c0022714:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0022717:	83 c4 0c             	add    esp,0xc
c002271a:	6a 07                	push   0x7
c002271c:	6a 00                	push   0x0
c002271e:	53                   	push   ebx
c002271f:	e8 90 fa ff ff       	call   c00221b4 <IDE::read(unsigned char, unsigned char)>
c0022724:	83 c4 0c             	add    esp,0xc
c0022727:	6a 07                	push   0x7
c0022729:	6a 01                	push   0x1
c002272b:	53                   	push   ebx
c002272c:	e8 83 fa ff ff       	call   c00221b4 <IDE::read(unsigned char, unsigned char)>
c0022731:	83 c4 0c             	add    esp,0xc
c0022734:	6a 01                	push   0x1
c0022736:	6a 00                	push   0x0
c0022738:	53                   	push   ebx
c0022739:	e8 c2 fb ff ff       	call   c0022300 <IDE::enableIRQs(unsigned char, bool)>
c002273e:	83 c4 0c             	add    esp,0xc
c0022741:	6a 01                	push   0x1
c0022743:	6a 01                	push   0x1
c0022745:	53                   	push   ebx
c0022746:	e8 b5 fb ff ff       	call   c0022300 <IDE::enableIRQs(unsigned char, bool)>
c002274b:	83 c4 2c             	add    esp,0x2c
c002274e:	31 c0                	xor    eax,eax
c0022750:	5b                   	pop    ebx
c0022751:	5e                   	pop    esi
c0022752:	5f                   	pop    edi
c0022753:	5d                   	pop    ebp
c0022754:	c3                   	ret    
c0022755:	90                   	nop

c0022756 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0022756:	55                   	push   ebp
c0022757:	57                   	push   edi
c0022758:	56                   	push   esi
c0022759:	53                   	push   ebx
c002275a:	83 ec 1c             	sub    esp,0x1c
c002275d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022761:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022765:	8d 50 f8             	lea    edx,[eax-0x8]
c0022768:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002276c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0022770:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0022774:	80 fa 03             	cmp    dl,0x3
c0022777:	77 5d                	ja     c00227d6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0022779:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002277d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022781:	0f b6 db             	movzx  ebx,bl
c0022784:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0022787:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c002278b:	83 ca 80             	or     edx,0xffffff80
c002278e:	0f b6 d2             	movzx  edx,dl
c0022791:	52                   	push   edx
c0022792:	6a 0c                	push   0xc
c0022794:	53                   	push   ebx
c0022795:	56                   	push   esi
c0022796:	e8 59 f9 ff ff       	call   c00220f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002279b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00227a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00227a4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00227a8:	0f b6 c0             	movzx  eax,al
c00227ab:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00227af:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00227b1:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00227b6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00227ba:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00227be:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00227c2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00227ca:	83 c4 2c             	add    esp,0x2c
c00227cd:	5b                   	pop    ebx
c00227ce:	5e                   	pop    esi
c00227cf:	5f                   	pop    edi
c00227d0:	5d                   	pop    ebp
c00227d1:	e9 1e f9 ff ff       	jmp    c00220f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00227d6:	3c 07                	cmp    al,0x7
c00227d8:	77 10                	ja     c00227ea <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00227da:	0f b6 db             	movzx  ebx,bl
c00227dd:	0f b6 d0             	movzx  edx,al
c00227e0:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00227e8:	eb 2d                	jmp    c0022817 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00227ea:	3c 0d                	cmp    al,0xd
c00227ec:	77 13                	ja     c0022801 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00227ee:	0f b6 db             	movzx  ebx,bl
c00227f1:	0f b6 c0             	movzx  eax,al
c00227f4:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00227fb:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00227ff:	eb 16                	jmp    c0022817 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022801:	3c 15                	cmp    al,0x15
c0022803:	77 14                	ja     c0022819 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0022805:	0f b6 db             	movzx  ebx,bl
c0022808:	0f b6 c0             	movzx  eax,al
c002280b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0022813:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0022817:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022819:	83 c4 1c             	add    esp,0x1c
c002281c:	5b                   	pop    ebx
c002281d:	5e                   	pop    esi
c002281e:	5f                   	pop    edi
c002281f:	5d                   	pop    ebp
c0022820:	c3                   	ret    
c0022821:	90                   	nop

c0022822 <IDE::detect()>:
c0022822:	55                   	push   ebp
c0022823:	57                   	push   edi
c0022824:	56                   	push   esi
c0022825:	53                   	push   ebx
c0022826:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002282c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0022833:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002283a:	0f 85 be 02 00 00    	jne    c0022afe <IDE::detect()+0x2dc>
c0022840:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0022847:	31 f6                	xor    esi,esi
c0022849:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0022851:	31 ed                	xor    ebp,ebp
c0022853:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022857:	c1 e0 06             	shl    eax,0x6
c002285a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0022862:	89 e8                	mov    eax,ebp
c0022864:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0022868:	c1 e0 04             	shl    eax,0x4
c002286b:	83 c8 a0             	or     eax,0xffffffa0
c002286e:	0f b6 c0             	movzx  eax,al
c0022871:	50                   	push   eax
c0022872:	6a 06                	push   0x6
c0022874:	56                   	push   esi
c0022875:	53                   	push   ebx
c0022876:	e8 79 f8 ff ff       	call   c00220f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002287b:	83 c4 0c             	add    esp,0xc
c002287e:	6a 0c                	push   0xc
c0022880:	56                   	push   esi
c0022881:	53                   	push   ebx
c0022882:	e8 2d f9 ff ff       	call   c00221b4 <IDE::read(unsigned char, unsigned char)>
c0022887:	83 c4 0c             	add    esp,0xc
c002288a:	6a 0c                	push   0xc
c002288c:	56                   	push   esi
c002288d:	53                   	push   ebx
c002288e:	e8 21 f9 ff ff       	call   c00221b4 <IDE::read(unsigned char, unsigned char)>
c0022893:	83 c4 0c             	add    esp,0xc
c0022896:	6a 0c                	push   0xc
c0022898:	56                   	push   esi
c0022899:	53                   	push   ebx
c002289a:	e8 15 f9 ff ff       	call   c00221b4 <IDE::read(unsigned char, unsigned char)>
c002289f:	83 c4 0c             	add    esp,0xc
c00228a2:	6a 0c                	push   0xc
c00228a4:	56                   	push   esi
c00228a5:	53                   	push   ebx
c00228a6:	e8 09 f9 ff ff       	call   c00221b4 <IDE::read(unsigned char, unsigned char)>
c00228ab:	68 ec 00 00 00       	push   0xec
c00228b0:	6a 07                	push   0x7
c00228b2:	56                   	push   esi
c00228b3:	53                   	push   ebx
c00228b4:	e8 3b f8 ff ff       	call   c00220f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00228b9:	83 c4 1c             	add    esp,0x1c
c00228bc:	6a 0c                	push   0xc
c00228be:	56                   	push   esi
c00228bf:	53                   	push   ebx
c00228c0:	e8 ef f8 ff ff       	call   c00221b4 <IDE::read(unsigned char, unsigned char)>
c00228c5:	83 c4 0c             	add    esp,0xc
c00228c8:	6a 0c                	push   0xc
c00228ca:	56                   	push   esi
c00228cb:	53                   	push   ebx
c00228cc:	e8 e3 f8 ff ff       	call   c00221b4 <IDE::read(unsigned char, unsigned char)>
c00228d1:	83 c4 0c             	add    esp,0xc
c00228d4:	6a 0c                	push   0xc
c00228d6:	56                   	push   esi
c00228d7:	53                   	push   ebx
c00228d8:	e8 d7 f8 ff ff       	call   c00221b4 <IDE::read(unsigned char, unsigned char)>
c00228dd:	83 c4 0c             	add    esp,0xc
c00228e0:	6a 0c                	push   0xc
c00228e2:	56                   	push   esi
c00228e3:	53                   	push   ebx
c00228e4:	e8 cb f8 ff ff       	call   c00221b4 <IDE::read(unsigned char, unsigned char)>
c00228e9:	83 c4 0c             	add    esp,0xc
c00228ec:	6a 0c                	push   0xc
c00228ee:	56                   	push   esi
c00228ef:	53                   	push   ebx
c00228f0:	e8 bf f8 ff ff       	call   c00221b4 <IDE::read(unsigned char, unsigned char)>
c00228f5:	83 c4 10             	add    esp,0x10
c00228f8:	84 c0                	test   al,al
c00228fa:	0f 84 8b 01 00 00    	je     c0022a8b <IDE::detect()+0x269>
c0022900:	31 ff                	xor    edi,edi
c0022902:	50                   	push   eax
c0022903:	6a 0c                	push   0xc
c0022905:	56                   	push   esi
c0022906:	53                   	push   ebx
c0022907:	e8 a8 f8 ff ff       	call   c00221b4 <IDE::read(unsigned char, unsigned char)>
c002290c:	83 c4 10             	add    esp,0x10
c002290f:	a8 01                	test   al,0x1
c0022911:	0f 85 8e 01 00 00    	jne    c0022aa5 <IDE::detect()+0x283>
c0022917:	84 c0                	test   al,al
c0022919:	78 04                	js     c002291f <IDE::detect()+0xfd>
c002291b:	a8 08                	test   al,0x8
c002291d:	75 27                	jne    c0022946 <IDE::detect()+0x124>
c002291f:	47                   	inc    edi
c0022920:	81 ff 17 01 00 00    	cmp    edi,0x117
c0022926:	7e da                	jle    c0022902 <IDE::detect()+0xe0>
c0022928:	50                   	push   eax
c0022929:	50                   	push   eax
c002292a:	6a 00                	push   0x0
c002292c:	68 40 4b 4c 00       	push   0x4c4b40
c0022931:	e8 00 ab ff ff       	call   c001d436 <nanoSleep(unsigned long long)>
c0022936:	83 c4 10             	add    esp,0x10
c0022939:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002293f:	75 c1                	jne    c0022902 <IDE::detect()+0xe0>
c0022941:	e9 5f 01 00 00       	jmp    c0022aa5 <IDE::detect()+0x283>
c0022946:	31 c9                	xor    ecx,ecx
c0022948:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002294c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0022950:	83 ec 0c             	sub    esp,0xc
c0022953:	68 80 00 00 00       	push   0x80
c0022958:	57                   	push   edi
c0022959:	6a 00                	push   0x0
c002295b:	56                   	push   esi
c002295c:	53                   	push   ebx
c002295d:	e8 f4 fd ff ff       	call   c0022756 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0022962:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0022967:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002296b:	89 d1                	mov    ecx,edx
c002296d:	c1 e0 06             	shl    eax,0x6
c0022970:	01 d8                	add    eax,ebx
c0022972:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0022979:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0022980:	89 f2                	mov    edx,esi
c0022982:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0022988:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002298c:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0022992:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022996:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002299d:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00229a5:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00229ac:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00229b4:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00229ba:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00229c1:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00229c7:	8d 54 24 58          	lea    edx,[esp+0x58]
c00229cb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00229cf:	83 c4 20             	add    esp,0x20
c00229d2:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00229d5:	83 c0 02             	add    eax,0x2
c00229d8:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00229de:	83 c7 02             	add    edi,0x2
c00229e1:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00229e4:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00229ea:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00229ee:	75 e2                	jne    c00229d2 <IDE::detect()+0x1b0>
c00229f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229f4:	c1 e0 06             	shl    eax,0x6
c00229f7:	01 d8                	add    eax,ebx
c00229f9:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00229ff:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0022a06:	66 c1 ea 09          	shr    dx,0x9
c0022a0a:	83 e2 01             	and    edx,0x1
c0022a0d:	84 c9                	test   cl,cl
c0022a0f:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0022a15:	75 2f                	jne    c0022a46 <IDE::detect()+0x224>
c0022a17:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0022a1d:	85 c0                	test   eax,eax
c0022a1f:	74 66                	je     c0022a87 <IDE::detect()+0x265>
c0022a21:	50                   	push   eax
c0022a22:	55                   	push   ebp
c0022a23:	56                   	push   esi
c0022a24:	68 57 b3 02 c0       	push   0xc002b357
c0022a29:	e8 51 fd fe ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0022a2e:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0022a35:	e8 a0 ca fe ff       	call   c000f4da <malloc>
c0022a3a:	89 c7                	mov    edi,eax
c0022a3c:	89 04 24             	mov    DWORD PTR [esp],eax
c0022a3f:	e8 62 06 00 00       	call   c00230a6 <ATA::ATA()>
c0022a44:	eb 28                	jmp    c0022a6e <IDE::detect()+0x24c>
c0022a46:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0022a4c:	55                   	push   ebp
c0022a4d:	56                   	push   esi
c0022a4e:	68 86 b3 02 c0       	push   0xc002b386
c0022a53:	e8 27 fd fe ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0022a58:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0022a5f:	e8 76 ca fe ff       	call   c000f4da <malloc>
c0022a64:	89 c7                	mov    edi,eax
c0022a66:	89 04 24             	mov    DWORD PTR [esp],eax
c0022a69:	e8 68 0c 00 00       	call   c00236d6 <ATAPI::ATAPI()>
c0022a6e:	5a                   	pop    edx
c0022a6f:	59                   	pop    ecx
c0022a70:	57                   	push   edi
c0022a71:	53                   	push   ebx
c0022a72:	e8 2f 11 ff ff       	call   c0013ba6 <Device::addChild(Device*)>
c0022a77:	8b 07                	mov    eax,DWORD PTR [edi]
c0022a79:	53                   	push   ebx
c0022a7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022a7e:	6a 00                	push   0x0
c0022a80:	57                   	push   edi
c0022a81:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022a84:	83 c4 20             	add    esp,0x20
c0022a87:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0022a8b:	4d                   	dec    ebp
c0022a8c:	74 0a                	je     c0022a98 <IDE::detect()+0x276>
c0022a8e:	bd 01 00 00 00       	mov    ebp,0x1
c0022a93:	e9 bb fd ff ff       	jmp    c0022853 <IDE::detect()+0x31>
c0022a98:	4e                   	dec    esi
c0022a99:	74 63                	je     c0022afe <IDE::detect()+0x2dc>
c0022a9b:	be 01 00 00 00       	mov    esi,0x1
c0022aa0:	e9 ac fd ff ff       	jmp    c0022851 <IDE::detect()+0x2f>
c0022aa5:	50                   	push   eax
c0022aa6:	6a 04                	push   0x4
c0022aa8:	56                   	push   esi
c0022aa9:	53                   	push   ebx
c0022aaa:	e8 05 f7 ff ff       	call   c00221b4 <IDE::read(unsigned char, unsigned char)>
c0022aaf:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022ab3:	83 c4 0c             	add    esp,0xc
c0022ab6:	6a 05                	push   0x5
c0022ab8:	56                   	push   esi
c0022ab9:	53                   	push   ebx
c0022aba:	e8 f5 f6 ff ff       	call   c00221b4 <IDE::read(unsigned char, unsigned char)>
c0022abf:	83 c4 10             	add    esp,0x10
c0022ac2:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0022ac6:	80 fa 14             	cmp    dl,0x14
c0022ac9:	75 04                	jne    c0022acf <IDE::detect()+0x2ad>
c0022acb:	3c eb                	cmp    al,0xeb
c0022acd:	eb 07                	jmp    c0022ad6 <IDE::detect()+0x2b4>
c0022acf:	3c 96                	cmp    al,0x96
c0022ad1:	75 b8                	jne    c0022a8b <IDE::detect()+0x269>
c0022ad3:	80 fa 69             	cmp    dl,0x69
c0022ad6:	75 b3                	jne    c0022a8b <IDE::detect()+0x269>
c0022ad8:	68 a1 00 00 00       	push   0xa1
c0022add:	6a 07                	push   0x7
c0022adf:	56                   	push   esi
c0022ae0:	53                   	push   ebx
c0022ae1:	e8 0e f6 ff ff       	call   c00220f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022ae6:	5f                   	pop    edi
c0022ae7:	58                   	pop    eax
c0022ae8:	6a 00                	push   0x0
c0022aea:	68 40 42 0f 00       	push   0xf4240
c0022aef:	e8 42 a9 ff ff       	call   c001d436 <nanoSleep(unsigned long long)>
c0022af4:	83 c4 10             	add    esp,0x10
c0022af7:	b1 01                	mov    cl,0x1
c0022af9:	e9 4a fe ff ff       	jmp    c0022948 <IDE::detect()+0x126>
c0022afe:	81 c4 1c 02 00 00    	add    esp,0x21c
c0022b04:	5b                   	pop    ebx
c0022b05:	5e                   	pop    esi
c0022b06:	5f                   	pop    edi
c0022b07:	5d                   	pop    ebp
c0022b08:	c3                   	ret    
c0022b09:	90                   	nop

c0022b0a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0022b0a:	55                   	push   ebp
c0022b0b:	57                   	push   edi
c0022b0c:	56                   	push   esi
c0022b0d:	53                   	push   ebx
c0022b0e:	83 ec 1c             	sub    esp,0x1c
c0022b11:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022b15:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022b19:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022b1d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0022b21:	88 c3                	mov    bl,al
c0022b23:	84 c0                	test   al,al
c0022b25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022b29:	0f 84 67 01 00 00    	je     c0022c96 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0022b2f:	83 ec 0c             	sub    esp,0xc
c0022b32:	68 b7 b3 02 c0       	push   0xc002b3b7
c0022b37:	e8 43 fc fe ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0022b3c:	83 c4 10             	add    esp,0x10
c0022b3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022b43:	3c 01                	cmp    al,0x1
c0022b45:	75 17                	jne    c0022b5e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0022b47:	83 ec 0c             	sub    esp,0xc
c0022b4a:	b3 13                	mov    bl,0x13
c0022b4c:	68 c3 b3 02 c0       	push   0xc002b3c3
c0022b51:	e8 29 fc fe ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0022b56:	83 c4 10             	add    esp,0x10
c0022b59:	e9 25 01 00 00       	jmp    c0022c83 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022b5e:	3c 02                	cmp    al,0x2
c0022b60:	0f 85 ef 00 00 00    	jne    c0022c55 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0022b66:	d1 e6                	shl    esi,1
c0022b68:	09 ee                	or     esi,ebp
c0022b6a:	52                   	push   edx
c0022b6b:	89 f0                	mov    eax,esi
c0022b6d:	6a 01                	push   0x1
c0022b6f:	0f b6 f0             	movzx  esi,al
c0022b72:	c1 e6 06             	shl    esi,0x6
c0022b75:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0022b7d:	50                   	push   eax
c0022b7e:	57                   	push   edi
c0022b7f:	e8 30 f6 ff ff       	call   c00221b4 <IDE::read(unsigned char, unsigned char)>
c0022b84:	83 c4 10             	add    esp,0x10
c0022b87:	89 c6                	mov    esi,eax
c0022b89:	a8 01                	test   al,0x1
c0022b8b:	74 12                	je     c0022b9f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0022b8d:	83 ec 0c             	sub    esp,0xc
c0022b90:	b3 07                	mov    bl,0x7
c0022b92:	68 d8 b3 02 c0       	push   0xc002b3d8
c0022b97:	e8 e3 fb fe ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0022b9c:	83 c4 10             	add    esp,0x10
c0022b9f:	f7 c6 02 00 00 00    	test   esi,0x2
c0022ba5:	74 12                	je     c0022bb9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0022ba7:	83 ec 0c             	sub    esp,0xc
c0022baa:	b3 03                	mov    bl,0x3
c0022bac:	68 f6 b3 02 c0       	push   0xc002b3f6
c0022bb1:	e8 c9 fb fe ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0022bb6:	83 c4 10             	add    esp,0x10
c0022bb9:	f7 c6 04 00 00 00    	test   esi,0x4
c0022bbf:	74 12                	je     c0022bd3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0022bc1:	83 ec 0c             	sub    esp,0xc
c0022bc4:	b3 14                	mov    bl,0x14
c0022bc6:	68 16 b4 02 c0       	push   0xc002b416
c0022bcb:	e8 af fb fe ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0022bd0:	83 c4 10             	add    esp,0x10
c0022bd3:	f7 c6 08 00 00 00    	test   esi,0x8
c0022bd9:	74 12                	je     c0022bed <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0022bdb:	83 ec 0c             	sub    esp,0xc
c0022bde:	b3 03                	mov    bl,0x3
c0022be0:	68 f6 b3 02 c0       	push   0xc002b3f6
c0022be5:	e8 95 fb fe ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0022bea:	83 c4 10             	add    esp,0x10
c0022bed:	f7 c6 10 00 00 00    	test   esi,0x10
c0022bf3:	74 12                	je     c0022c07 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0022bf5:	83 ec 0c             	sub    esp,0xc
c0022bf8:	b3 15                	mov    bl,0x15
c0022bfa:	68 2e b4 02 c0       	push   0xc002b42e
c0022bff:	e8 7b fb fe ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0022c04:	83 c4 10             	add    esp,0x10
c0022c07:	f7 c6 20 00 00 00    	test   esi,0x20
c0022c0d:	74 12                	je     c0022c21 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0022c0f:	83 ec 0c             	sub    esp,0xc
c0022c12:	b3 03                	mov    bl,0x3
c0022c14:	68 f6 b3 02 c0       	push   0xc002b3f6
c0022c19:	e8 61 fb fe ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0022c1e:	83 c4 10             	add    esp,0x10
c0022c21:	f7 c6 40 00 00 00    	test   esi,0x40
c0022c27:	74 12                	je     c0022c3b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0022c29:	83 ec 0c             	sub    esp,0xc
c0022c2c:	b3 16                	mov    bl,0x16
c0022c2e:	68 48 b4 02 c0       	push   0xc002b448
c0022c33:	e8 47 fb fe ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0022c38:	83 c4 10             	add    esp,0x10
c0022c3b:	89 f0                	mov    eax,esi
c0022c3d:	84 c0                	test   al,al
c0022c3f:	79 42                	jns    c0022c83 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022c41:	83 ec 0c             	sub    esp,0xc
c0022c44:	b3 0d                	mov    bl,0xd
c0022c46:	68 69 b4 02 c0       	push   0xc002b469
c0022c4b:	e8 2f fb fe ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0022c50:	83 c4 10             	add    esp,0x10
c0022c53:	eb 2e                	jmp    c0022c83 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022c55:	3c 03                	cmp    al,0x3
c0022c57:	75 14                	jne    c0022c6d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0022c59:	83 ec 0c             	sub    esp,0xc
c0022c5c:	b3 17                	mov    bl,0x17
c0022c5e:	68 7d b4 02 c0       	push   0xc002b47d
c0022c63:	e8 17 fb fe ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0022c68:	83 c4 10             	add    esp,0x10
c0022c6b:	eb 16                	jmp    c0022c83 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022c6d:	3c 04                	cmp    al,0x4
c0022c6f:	75 12                	jne    c0022c83 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022c71:	83 ec 0c             	sub    esp,0xc
c0022c74:	b3 08                	mov    bl,0x8
c0022c76:	68 93 b4 02 c0       	push   0xc002b493
c0022c7b:	e8 ff fa fe ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0022c80:	83 c4 10             	add    esp,0x10
c0022c83:	50                   	push   eax
c0022c84:	50                   	push   eax
c0022c85:	0f b6 c3             	movzx  eax,bl
c0022c88:	50                   	push   eax
c0022c89:	68 ab b4 02 c0       	push   0xc002b4ab
c0022c8e:	e8 ec fa fe ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0022c93:	83 c4 10             	add    esp,0x10
c0022c96:	83 c4 1c             	add    esp,0x1c
c0022c99:	88 d8                	mov    al,bl
c0022c9b:	5b                   	pop    ebx
c0022c9c:	5e                   	pop    esi
c0022c9d:	5f                   	pop    edi
c0022c9e:	5d                   	pop    ebp
c0022c9f:	c3                   	ret    

c0022ca0 <IDE::polling(unsigned char, unsigned int)>:
c0022ca0:	57                   	push   edi
c0022ca1:	56                   	push   esi
c0022ca2:	53                   	push   ebx
c0022ca3:	bb 04 00 00 00       	mov    ebx,0x4
c0022ca8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0022cac:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022cb1:	52                   	push   edx
c0022cb2:	6a 0c                	push   0xc
c0022cb4:	56                   	push   esi
c0022cb5:	57                   	push   edi
c0022cb6:	e8 f9 f4 ff ff       	call   c00221b4 <IDE::read(unsigned char, unsigned char)>
c0022cbb:	83 c4 10             	add    esp,0x10
c0022cbe:	4b                   	dec    ebx
c0022cbf:	75 f0                	jne    c0022cb1 <IDE::polling(unsigned char, unsigned int)+0x11>
c0022cc1:	bb a0 86 01 00       	mov    ebx,0x186a0
c0022cc6:	50                   	push   eax
c0022cc7:	6a 0c                	push   0xc
c0022cc9:	56                   	push   esi
c0022cca:	57                   	push   edi
c0022ccb:	e8 e4 f4 ff ff       	call   c00221b4 <IDE::read(unsigned char, unsigned char)>
c0022cd0:	83 c4 10             	add    esp,0x10
c0022cd3:	a8 01                	test   al,0x1
c0022cd5:	74 12                	je     c0022ce9 <IDE::polling(unsigned char, unsigned int)+0x49>
c0022cd7:	83 ec 0c             	sub    esp,0xc
c0022cda:	68 c5 b4 02 c0       	push   0xc002b4c5
c0022cdf:	e8 9b fa fe ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0022ce4:	83 c4 10             	add    esp,0x10
c0022ce7:	eb 17                	jmp    c0022d00 <IDE::polling(unsigned char, unsigned int)+0x60>
c0022ce9:	a8 20                	test   al,0x20
c0022ceb:	75 0f                	jne    c0022cfc <IDE::polling(unsigned char, unsigned int)+0x5c>
c0022ced:	4b                   	dec    ebx
c0022cee:	74 10                	je     c0022d00 <IDE::polling(unsigned char, unsigned int)+0x60>
c0022cf0:	84 c0                	test   al,al
c0022cf2:	78 d2                	js     c0022cc6 <IDE::polling(unsigned char, unsigned int)+0x26>
c0022cf4:	a8 08                	test   al,0x8
c0022cf6:	74 ce                	je     c0022cc6 <IDE::polling(unsigned char, unsigned int)+0x26>
c0022cf8:	31 c0                	xor    eax,eax
c0022cfa:	eb 06                	jmp    c0022d02 <IDE::polling(unsigned char, unsigned int)+0x62>
c0022cfc:	b0 01                	mov    al,0x1
c0022cfe:	eb 02                	jmp    c0022d02 <IDE::polling(unsigned char, unsigned int)+0x62>
c0022d00:	b0 02                	mov    al,0x2
c0022d02:	5b                   	pop    ebx
c0022d03:	5e                   	pop    esi
c0022d04:	5f                   	pop    edi
c0022d05:	c3                   	ret    

c0022d06 <SATABus::close(int, int, void*)>:
c0022d06:	31 c0                	xor    eax,eax
c0022d08:	c3                   	ret    
c0022d09:	90                   	nop

c0022d0a <SATABus::detect()>:
c0022d0a:	c3                   	ret    
c0022d0b:	90                   	nop

c0022d0c <SATABus::SATABus()>:
c0022d0c:	83 ec 0c             	sub    esp,0xc
c0022d0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d13:	83 ec 08             	sub    esp,0x8
c0022d16:	68 08 b5 02 c0       	push   0xc002b508
c0022d1b:	50                   	push   eax
c0022d1c:	e8 11 12 ff ff       	call   c0013f32 <HardDiskController::HardDiskController(char const*)>
c0022d21:	83 c4 10             	add    esp,0x10
c0022d24:	ba c4 b5 02 c0       	mov    edx,0xc002b5c4
c0022d29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d2d:	89 10                	mov    DWORD PTR [eax],edx
c0022d2f:	83 ec 0c             	sub    esp,0xc
c0022d32:	6a 50                	push   0x50
c0022d34:	e8 dc ce fe ff       	call   c000fc15 <Phys::allocateContiguousPages(int)>
c0022d39:	83 c4 10             	add    esp,0x10
c0022d3c:	89 c2                	mov    edx,eax
c0022d3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d42:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022d48:	83 ec 0c             	sub    esp,0xc
c0022d4b:	6a 50                	push   0x50
c0022d4d:	e8 3d ea fe ff       	call   c001178f <Virt::allocateKernelVirtualPages(int)>
c0022d52:	83 c4 10             	add    esp,0x10
c0022d55:	89 c2                	mov    edx,eax
c0022d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d5b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022d61:	e8 b9 eb fe ff       	call   c001191f <Virt::getAKernelVAS()>
c0022d66:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022d6a:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0022d70:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022d74:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022d7a:	83 ec 0c             	sub    esp,0xc
c0022d7d:	6a 03                	push   0x3
c0022d7f:	6a 50                	push   0x50
c0022d81:	51                   	push   ecx
c0022d82:	52                   	push   edx
c0022d83:	50                   	push   eax
c0022d84:	e8 c5 f3 fe ff       	call   c001214e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0022d89:	83 c4 20             	add    esp,0x20
c0022d8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d90:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0022d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d9a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022da0:	83 ec 04             	sub    esp,0x4
c0022da3:	52                   	push   edx
c0022da4:	50                   	push   eax
c0022da5:	68 2c b5 02 c0       	push   0xc002b52c
c0022daa:	e8 d0 f9 fe ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0022daf:	83 c4 10             	add    esp,0x10
c0022db2:	90                   	nop
c0022db3:	83 c4 0c             	add    esp,0xc
c0022db6:	c3                   	ret    
c0022db7:	90                   	nop

c0022db8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0022db8:	83 ec 0c             	sub    esp,0xc
c0022dbb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022dbf:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0022dc2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0022dc5:	09 c2                	or     edx,eax
c0022dc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dcb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022dd1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0022dd3:	31 c0                	xor    eax,eax
c0022dd5:	c1 e9 08             	shr    ecx,0x8
c0022dd8:	83 e1 0f             	and    ecx,0xf
c0022ddb:	39 c8                	cmp    eax,ecx
c0022ddd:	74 0a                	je     c0022de9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0022ddf:	f6 c2 01             	test   dl,0x1
c0022de2:	74 18                	je     c0022dfc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0022de4:	d1 ea                	shr    edx,1
c0022de6:	40                   	inc    eax
c0022de7:	eb f2                	jmp    c0022ddb <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0022de9:	83 ec 0c             	sub    esp,0xc
c0022dec:	68 50 b5 02 c0       	push   0xc002b550
c0022df1:	e8 db 6a ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c0022df6:	83 c4 10             	add    esp,0x10
c0022df9:	83 c8 ff             	or     eax,0xffffffff
c0022dfc:	83 c4 0c             	add    esp,0xc
c0022dff:	c3                   	ret    

c0022e00 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0022e00:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022e04:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0022e07:	89 c2                	mov    edx,eax
c0022e09:	c1 ea 08             	shr    edx,0x8
c0022e0c:	83 e2 0f             	and    edx,0xf
c0022e0f:	fe ca                	dec    dl
c0022e11:	75 31                	jne    c0022e44 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0022e13:	83 e0 0f             	and    eax,0xf
c0022e16:	3c 03                	cmp    al,0x3
c0022e18:	75 2a                	jne    c0022e44 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0022e1a:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0022e1d:	b8 02 00 00 00       	mov    eax,0x2
c0022e22:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0022e28:	74 1c                	je     c0022e46 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022e2a:	b8 04 00 00 00       	mov    eax,0x4
c0022e2f:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0022e35:	74 0f                	je     c0022e46 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022e37:	31 c0                	xor    eax,eax
c0022e39:	83 fa 03             	cmp    edx,0x3
c0022e3c:	0f 94 c0             	sete   al
c0022e3f:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0022e43:	c3                   	ret    
c0022e44:	31 c0                	xor    eax,eax
c0022e46:	c3                   	ret    
c0022e47:	90                   	nop

c0022e48 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0022e48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022e4c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022e4f:	0f ba e2 0f          	bt     edx,0xf
c0022e53:	72 f7                	jb     c0022e4c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0022e55:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022e58:	83 ca 10             	or     edx,0x10
c0022e5b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022e5e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022e61:	83 ca 01             	or     edx,0x1
c0022e64:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022e67:	c3                   	ret    

c0022e68 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0022e68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022e6c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022e6f:	83 e2 fe             	and    edx,0xfffffffe
c0022e72:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022e75:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022e78:	83 e2 ef             	and    edx,0xffffffef
c0022e7b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022e7e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022e81:	0f ba e2 0e          	bt     edx,0xe
c0022e85:	72 f7                	jb     c0022e7e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0022e87:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022e8a:	0f ba e2 0f          	bt     edx,0xf
c0022e8e:	72 ee                	jb     c0022e7e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0022e90:	c3                   	ret    
c0022e91:	90                   	nop

c0022e92 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0022e92:	55                   	push   ebp
c0022e93:	57                   	push   edi
c0022e94:	56                   	push   esi
c0022e95:	53                   	push   ebx
c0022e96:	83 ec 1c             	sub    esp,0x1c
c0022e99:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022e9d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022ea1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022ea5:	53                   	push   ebx
c0022ea6:	89 fd                	mov    ebp,edi
c0022ea8:	56                   	push   esi
c0022ea9:	c1 e5 0a             	shl    ebp,0xa
c0022eac:	e8 b7 ff ff ff       	call   c0022e68 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0022eb1:	83 ec 0c             	sub    esp,0xc
c0022eb4:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0022eba:	01 e8                	add    eax,ebp
c0022ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0022ebe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022ec0:	68 00 04 00 00       	push   0x400
c0022ec5:	6a 00                	push   0x0
c0022ec7:	50                   	push   eax
c0022ec8:	e8 be d7 fd ff       	call   c000068b <memset>
c0022ecd:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0022ed3:	89 fa                	mov    edx,edi
c0022ed5:	01 e8                	add    eax,ebp
c0022ed7:	c1 e7 0d             	shl    edi,0xd
c0022eda:	89 03                	mov    DWORD PTR [ebx],eax
c0022edc:	c1 e2 08             	shl    edx,0x8
c0022edf:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022ee6:	81 c2 00 80 00 00    	add    edx,0x8000
c0022eec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0022ef0:	89 d0                	mov    eax,edx
c0022ef2:	83 c4 1c             	add    esp,0x1c
c0022ef5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0022efb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022efe:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0022f01:	68 00 01 00 00       	push   0x100
c0022f06:	6a 00                	push   0x0
c0022f08:	50                   	push   eax
c0022f09:	e8 7d d7 fd ff       	call   c000068b <memset>
c0022f0e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022f12:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0022f18:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0022f1e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022f22:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0022f25:	83 c4 10             	add    esp,0x10
c0022f28:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022f2f:	31 ff                	xor    edi,edi
c0022f31:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0022f37:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0022f3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022f41:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0022f47:	83 c5 20             	add    ebp,0x20
c0022f4a:	01 f8                	add    eax,edi
c0022f4c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022f4f:	52                   	push   edx
c0022f50:	68 00 01 00 00       	push   0x100
c0022f55:	6a 00                	push   0x0
c0022f57:	50                   	push   eax
c0022f58:	e8 2e d7 fd ff       	call   c000068b <memset>
c0022f5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022f61:	83 c4 10             	add    esp,0x10
c0022f64:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0022f6a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0022f71:	01 f8                	add    eax,edi
c0022f73:	81 c7 00 01 00 00    	add    edi,0x100
c0022f79:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022f7c:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0022f82:	75 b3                	jne    c0022f37 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0022f84:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0022f88:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0022f8c:	83 c4 1c             	add    esp,0x1c
c0022f8f:	5b                   	pop    ebx
c0022f90:	5e                   	pop    esi
c0022f91:	5f                   	pop    edi
c0022f92:	5d                   	pop    ebp
c0022f93:	e9 b0 fe ff ff       	jmp    c0022e48 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0022f98 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0022f98:	55                   	push   ebp
c0022f99:	57                   	push   edi
c0022f9a:	56                   	push   esi
c0022f9b:	53                   	push   ebx
c0022f9c:	31 db                	xor    ebx,ebx
c0022f9e:	83 ec 0c             	sub    esp,0xc
c0022fa1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022fa5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0022fa9:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0022fac:	f7 c7 01 00 00 00    	test   edi,0x1
c0022fb2:	0f 84 94 00 00 00    	je     c002304c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c0022fb8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022fbc:	89 d8                	mov    eax,ebx
c0022fbe:	c1 e0 07             	shl    eax,0x7
c0022fc1:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0022fc8:	55                   	push   ebp
c0022fc9:	56                   	push   esi
c0022fca:	e8 31 fe ff ff       	call   c0022e00 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0022fcf:	59                   	pop    ecx
c0022fd0:	83 f8 01             	cmp    eax,0x1
c0022fd3:	5a                   	pop    edx
c0022fd4:	75 47                	jne    c002301d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x85>
c0022fd6:	51                   	push   ecx
c0022fd7:	51                   	push   ecx
c0022fd8:	53                   	push   ebx
c0022fd9:	68 75 b5 02 c0       	push   0xc002b575
c0022fde:	e8 9c f7 fe ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0022fe3:	83 c4 0c             	add    esp,0xc
c0022fe6:	53                   	push   ebx
c0022fe7:	55                   	push   ebp
c0022fe8:	56                   	push   esi
c0022fe9:	e8 a4 fe ff ff       	call   c0022e92 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0022fee:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0022ff5:	e8 e0 c4 fe ff       	call   c000f4da <malloc>
c0022ffa:	89 04 24             	mov    DWORD PTR [esp],eax
c0022ffd:	89 c5                	mov    ebp,eax
c0022fff:	e8 de 0c 00 00       	call   c0023ce2 <SATA::SATA()>
c0023004:	58                   	pop    eax
c0023005:	5a                   	pop    edx
c0023006:	55                   	push   ebp
c0023007:	56                   	push   esi
c0023008:	e8 99 0b ff ff       	call   c0013ba6 <Device::addChild(Device*)>
c002300d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023010:	56                   	push   esi
c0023011:	6a 00                	push   0x0
c0023013:	53                   	push   ebx
c0023014:	55                   	push   ebp
c0023015:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023018:	83 c4 20             	add    esp,0x20
c002301b:	eb 2f                	jmp    c002304c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c002301d:	83 f8 04             	cmp    eax,0x4
c0023020:	75 1a                	jne    c002303c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa4>
c0023022:	52                   	push   edx
c0023023:	52                   	push   edx
c0023024:	53                   	push   ebx
c0023025:	68 8c b5 02 c0       	push   0xc002b58c
c002302a:	e8 50 f7 fe ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c002302f:	83 c4 0c             	add    esp,0xc
c0023032:	53                   	push   ebx
c0023033:	55                   	push   ebp
c0023034:	56                   	push   esi
c0023035:	e8 58 fe ff ff       	call   c0022e92 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002303a:	eb 0d                	jmp    c0023049 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb1>
c002303c:	50                   	push   eax
c002303d:	50                   	push   eax
c002303e:	53                   	push   ebx
c002303f:	68 a5 b5 02 c0       	push   0xc002b5a5
c0023044:	e8 36 f7 fe ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0023049:	83 c4 10             	add    esp,0x10
c002304c:	d1 ef                	shr    edi,1
c002304e:	43                   	inc    ebx
c002304f:	83 fb 20             	cmp    ebx,0x20
c0023052:	0f 85 54 ff ff ff    	jne    c0022fac <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023058:	83 c4 0c             	add    esp,0xc
c002305b:	5b                   	pop    ebx
c002305c:	5e                   	pop    esi
c002305d:	5f                   	pop    edi
c002305e:	5d                   	pop    ebp
c002305f:	c3                   	ret    

c0023060 <SATABus::open(int, int, void*)>:
c0023060:	83 ec 14             	sub    esp,0x14
c0023063:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023067:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c002306d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023073:	52                   	push   edx
c0023074:	50                   	push   eax
c0023075:	e8 1e ff ff ff       	call   c0022f98 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002307a:	31 c0                	xor    eax,eax
c002307c:	83 c4 1c             	add    esp,0x1c
c002307f:	c3                   	ret    

c0023080 <ATA::close(int, int, void*)>:
c0023080:	83 ec 0c             	sub    esp,0xc
c0023083:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023087:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002308d:	85 c0                	test   eax,eax
c002308f:	74 0c                	je     c002309d <ATA::close(int, int, void*)+0x1d>
c0023091:	83 ec 0c             	sub    esp,0xc
c0023094:	8b 10                	mov    edx,DWORD PTR [eax]
c0023096:	50                   	push   eax
c0023097:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002309a:	83 c4 10             	add    esp,0x10
c002309d:	31 c0                	xor    eax,eax
c002309f:	83 c4 0c             	add    esp,0xc
c00230a2:	c3                   	ret    
c00230a3:	90                   	nop

c00230a4 <ATA::powerSaving(PowerSavingLevel)>:
c00230a4:	c3                   	ret    
c00230a5:	90                   	nop

c00230a6 <ATA::ATA()>:
c00230a6:	83 ec 0c             	sub    esp,0xc
c00230a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230ad:	83 ec 04             	sub    esp,0x4
c00230b0:	68 00 02 00 00       	push   0x200
c00230b5:	68 b8 b6 02 c0       	push   0xc002b6b8
c00230ba:	50                   	push   eax
c00230bb:	e8 f6 0e ff ff       	call   c0013fb6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00230c0:	83 c4 10             	add    esp,0x10
c00230c3:	ba 04 b6 02 c0       	mov    edx,0xc002b604
c00230c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230cc:	89 10                	mov    DWORD PTR [eax],edx
c00230ce:	90                   	nop
c00230cf:	83 c4 0c             	add    esp,0xc
c00230d2:	c3                   	ret    
c00230d3:	90                   	nop

c00230d4 <ATA::flush(bool)>:
c00230d4:	53                   	push   ebx
c00230d5:	83 ec 08             	sub    esp,0x8
c00230d8:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00230dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00230e1:	19 c0                	sbb    eax,eax
c00230e3:	83 e0 fd             	and    eax,0xfffffffd
c00230e6:	05 ea 00 00 00       	add    eax,0xea
c00230eb:	50                   	push   eax
c00230ec:	6a 07                	push   0x7
c00230ee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00230f5:	50                   	push   eax
c00230f6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00230fc:	e8 f3 ef ff ff       	call   c00220f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023101:	83 c4 0c             	add    esp,0xc
c0023104:	6a 00                	push   0x0
c0023106:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002310d:	50                   	push   eax
c002310e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023114:	e8 87 fb ff ff       	call   c0022ca0 <IDE::polling(unsigned char, unsigned int)>
c0023119:	83 c4 18             	add    esp,0x18
c002311c:	5b                   	pop    ebx
c002311d:	c3                   	ret    

c002311e <ATA::readyForCommand()>:
c002311e:	56                   	push   esi
c002311f:	53                   	push   ebx
c0023120:	31 db                	xor    ebx,ebx
c0023122:	50                   	push   eax
c0023123:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023127:	50                   	push   eax
c0023128:	6a 0c                	push   0xc
c002312a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023131:	50                   	push   eax
c0023132:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023138:	e8 77 f0 ff ff       	call   c00221b4 <IDE::read(unsigned char, unsigned char)>
c002313d:	83 c4 10             	add    esp,0x10
c0023140:	a8 88                	test   al,0x88
c0023142:	74 23                	je     c0023167 <ATA::readyForCommand()+0x49>
c0023144:	43                   	inc    ebx
c0023145:	83 fb 63             	cmp    ebx,0x63
c0023148:	7e dd                	jle    c0023127 <ATA::readyForCommand()+0x9>
c002314a:	51                   	push   ecx
c002314b:	51                   	push   ecx
c002314c:	6a 00                	push   0x0
c002314e:	68 40 42 0f 00       	push   0xf4240
c0023153:	e8 de a2 ff ff       	call   c001d436 <nanoSleep(unsigned long long)>
c0023158:	83 c4 10             	add    esp,0x10
c002315b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023161:	75 c4                	jne    c0023127 <ATA::readyForCommand()+0x9>
c0023163:	31 c0                	xor    eax,eax
c0023165:	eb 02                	jmp    c0023169 <ATA::readyForCommand()+0x4b>
c0023167:	b0 01                	mov    al,0x1
c0023169:	5a                   	pop    edx
c002316a:	5b                   	pop    ebx
c002316b:	5e                   	pop    esi
c002316c:	c3                   	ret    
c002316d:	90                   	nop

c002316e <ATA::access(unsigned long long, int, void*, bool)>:
c002316e:	55                   	push   ebp
c002316f:	57                   	push   edi
c0023170:	56                   	push   esi
c0023171:	53                   	push   ebx
c0023172:	83 ec 2c             	sub    esp,0x2c
c0023175:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023179:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002317d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023181:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023185:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023189:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002318d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023191:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023197:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002319b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00231a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00231a5:	c1 e0 06             	shl    eax,0x6
c00231a8:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00231b0:	74 5d                	je     c002320f <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00231b2:	89 fa                	mov    edx,edi
c00231b4:	89 f0                	mov    eax,esi
c00231b6:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00231ba:	c1 ea 1c             	shr    edx,0x1c
c00231bd:	89 d1                	mov    ecx,edx
c00231bf:	09 c1                	or     ecx,eax
c00231c1:	74 25                	je     c00231e8 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00231c3:	31 ed                	xor    ebp,ebp
c00231c5:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00231cc:	89 fa                	mov    edx,edi
c00231ce:	89 f0                	mov    eax,esi
c00231d0:	0f ad d0             	shrd   eax,edx,cl
c00231d3:	d3 ea                	shr    edx,cl
c00231d5:	f6 c1 20             	test   cl,0x20
c00231d8:	74 02                	je     c00231dc <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00231da:	89 d0                	mov    eax,edx
c00231dc:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00231e0:	45                   	inc    ebp
c00231e1:	83 fd 06             	cmp    ebp,0x6
c00231e4:	75 df                	jne    c00231c5 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00231e6:	eb 76                	jmp    c002325e <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00231e8:	89 f0                	mov    eax,esi
c00231ea:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00231ef:	89 fa                	mov    edx,edi
c00231f1:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00231f8:	0f ac d0 10          	shrd   eax,edx,0x10
c00231fc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023201:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023205:	c1 ee 18             	shr    esi,0x18
c0023208:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002320d:	eb 56                	jmp    c0023265 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002320f:	6a 00                	push   0x0
c0023211:	6a 3f                	push   0x3f
c0023213:	57                   	push   edi
c0023214:	56                   	push   esi
c0023215:	e8 32 24 00 00       	call   c002564c <__umoddi3>
c002321a:	83 c4 10             	add    esp,0x10
c002321d:	40                   	inc    eax
c002321e:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023222:	6a 00                	push   0x0
c0023224:	68 f0 03 00 00       	push   0x3f0
c0023229:	57                   	push   edi
c002322a:	56                   	push   esi
c002322b:	e8 1c 23 00 00       	call   c002554c <__udivdi3>
c0023230:	83 c4 10             	add    esp,0x10
c0023233:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023238:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002323f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023244:	6a 00                	push   0x0
c0023246:	6a 3f                	push   0x3f
c0023248:	57                   	push   edi
c0023249:	56                   	push   esi
c002324a:	e8 fd 22 00 00       	call   c002554c <__udivdi3>
c002324f:	83 c4 10             	add    esp,0x10
c0023252:	89 c6                	mov    esi,eax
c0023254:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023259:	83 e6 0f             	and    esi,0xf
c002325c:	eb 07                	jmp    c0023265 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002325e:	31 f6                	xor    esi,esi
c0023260:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023265:	bf 01 00 00 00       	mov    edi,0x1
c002326a:	50                   	push   eax
c002326b:	6a 00                	push   0x0
c002326d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023274:	50                   	push   eax
c0023275:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023279:	e8 82 f0 ff ff       	call   c0022300 <IDE::enableIRQs(unsigned char, bool)>
c002327e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023281:	e8 98 fe ff ff       	call   c002311e <ATA::readyForCommand()>
c0023286:	83 c4 10             	add    esp,0x10
c0023289:	84 c0                	test   al,al
c002328b:	0f 84 50 02 00 00    	je     c00234e1 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0023291:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023297:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002329d:	c1 e0 04             	shl    eax,0x4
c00232a0:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00232a7:	09 c6                	or     esi,eax
c00232a9:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00232ae:	75 05                	jne    c00232b5 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00232b0:	83 ce a0             	or     esi,0xffffffa0
c00232b3:	eb 03                	jmp    c00232b8 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00232b5:	83 ce e0             	or     esi,0xffffffe0
c00232b8:	89 f0                	mov    eax,esi
c00232ba:	0f b6 f0             	movzx  esi,al
c00232bd:	56                   	push   esi
c00232be:	6a 06                	push   0x6
c00232c0:	51                   	push   ecx
c00232c1:	52                   	push   edx
c00232c2:	e8 2d ee ff ff       	call   c00220f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00232c7:	83 c4 10             	add    esp,0x10
c00232ca:	6a 00                	push   0x0
c00232cc:	6a 01                	push   0x1
c00232ce:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00232d5:	50                   	push   eax
c00232d6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00232dc:	e8 13 ee ff ff       	call   c00220f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00232e1:	83 c4 10             	add    esp,0x10
c00232e4:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00232e9:	75 6e                	jne    c0023359 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00232eb:	6a 00                	push   0x0
c00232ed:	6a 08                	push   0x8
c00232ef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00232f6:	50                   	push   eax
c00232f7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00232fd:	e8 f2 ed ff ff       	call   c00220f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023302:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023307:	50                   	push   eax
c0023308:	6a 09                	push   0x9
c002330a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023311:	50                   	push   eax
c0023312:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023318:	e8 d7 ed ff ff       	call   c00220f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002331d:	83 c4 20             	add    esp,0x20
c0023320:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0023325:	50                   	push   eax
c0023326:	6a 0a                	push   0xa
c0023328:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002332f:	50                   	push   eax
c0023330:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023336:	e8 b9 ed ff ff       	call   c00220f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002333b:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0023340:	50                   	push   eax
c0023341:	6a 0b                	push   0xb
c0023343:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002334a:	50                   	push   eax
c002334b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023351:	e8 9e ed ff ff       	call   c00220f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023356:	83 c4 20             	add    esp,0x20
c0023359:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002335e:	50                   	push   eax
c002335f:	6a 02                	push   0x2
c0023361:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023368:	50                   	push   eax
c0023369:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002336f:	e8 80 ed ff ff       	call   c00220f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023374:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0023379:	50                   	push   eax
c002337a:	6a 03                	push   0x3
c002337c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023383:	50                   	push   eax
c0023384:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002338a:	e8 65 ed ff ff       	call   c00220f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002338f:	83 c4 20             	add    esp,0x20
c0023392:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0023397:	50                   	push   eax
c0023398:	6a 04                	push   0x4
c002339a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00233a1:	50                   	push   eax
c00233a2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00233a8:	e8 47 ed ff ff       	call   c00220f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00233ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00233b2:	50                   	push   eax
c00233b3:	6a 05                	push   0x5
c00233b5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00233bc:	50                   	push   eax
c00233bd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00233c3:	e8 2c ed ff ff       	call   c00220f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00233c8:	83 c4 20             	add    esp,0x20
c00233cb:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00233d0:	0f 94 c0             	sete   al
c00233d3:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00233d8:	74 09                	je     c00233e3 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00233da:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00233e1:	eb 07                	jmp    c00233ea <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00233e3:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00233ea:	0f b6 c0             	movzx  eax,al
c00233ed:	50                   	push   eax
c00233ee:	6a 07                	push   0x7
c00233f0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00233f7:	50                   	push   eax
c00233f8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00233fe:	e8 f1 ec ff ff       	call   c00220f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023403:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0023407:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002340b:	83 c4 10             	add    esp,0x10
c002340e:	85 f6                	test   esi,esi
c0023410:	0f 84 ac 00 00 00    	je     c00234c2 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c0023416:	50                   	push   eax
c0023417:	6a 01                	push   0x1
c0023419:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023420:	50                   	push   eax
c0023421:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023427:	e8 74 f8 ff ff       	call   c0022ca0 <IDE::polling(unsigned char, unsigned int)>
c002342c:	83 c4 10             	add    esp,0x10
c002342f:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0023435:	84 c0                	test   al,al
c0023437:	74 20                	je     c0023459 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c0023439:	0f b6 f8             	movzx  edi,al
c002343c:	0f b6 d2             	movzx  edx,dl
c002343f:	57                   	push   edi
c0023440:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0023447:	50                   	push   eax
c0023448:	52                   	push   edx
c0023449:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002344f:	e8 b6 f6 ff ff       	call   c0022b0a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023454:	e9 85 00 00 00       	jmp    c00234de <ATA::access(unsigned long long, int, void*, bool)+0x370>
c0023459:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002345e:	74 41                	je     c00234a1 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c0023460:	31 c9                	xor    ecx,ecx
c0023462:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c0023466:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002346a:	50                   	push   eax
c002346b:	50                   	push   eax
c002346c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023473:	50                   	push   eax
c0023474:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002347a:	e8 63 ec ff ff       	call   c00220e2 <IDE::getBase(unsigned char)>
c002347f:	89 c2                	mov    edx,eax
c0023481:	89 e8                	mov    eax,ebp
c0023483:	66 ef                	out    dx,ax
c0023485:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023489:	83 c4 10             	add    esp,0x10
c002348c:	41                   	inc    ecx
c002348d:	81 f9 00 01 00 00    	cmp    ecx,0x100
c0023493:	75 cd                	jne    c0023462 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c0023495:	4e                   	dec    esi
c0023496:	81 c7 00 02 00 00    	add    edi,0x200
c002349c:	e9 6d ff ff ff       	jmp    c002340e <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c00234a1:	0f b6 d2             	movzx  edx,dl
c00234a4:	51                   	push   ecx
c00234a5:	51                   	push   ecx
c00234a6:	52                   	push   edx
c00234a7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00234ad:	e8 30 ec ff ff       	call   c00220e2 <IDE::getBase(unsigned char)>
c00234b2:	b9 00 01 00 00       	mov    ecx,0x100
c00234b7:	89 c2                	mov    edx,eax
c00234b9:	fc                   	cld    
c00234ba:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00234bd:	83 c4 10             	add    esp,0x10
c00234c0:	eb d3                	jmp    c0023495 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c00234c2:	31 ff                	xor    edi,edi
c00234c4:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00234c9:	74 16                	je     c00234e1 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c00234cb:	50                   	push   eax
c00234cc:	50                   	push   eax
c00234cd:	31 c0                	xor    eax,eax
c00234cf:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00234d4:	0f 94 c0             	sete   al
c00234d7:	50                   	push   eax
c00234d8:	53                   	push   ebx
c00234d9:	e8 f6 fb ff ff       	call   c00230d4 <ATA::flush(bool)>
c00234de:	83 c4 10             	add    esp,0x10
c00234e1:	83 c4 2c             	add    esp,0x2c
c00234e4:	89 f8                	mov    eax,edi
c00234e6:	5b                   	pop    ebx
c00234e7:	5e                   	pop    esi
c00234e8:	5f                   	pop    edi
c00234e9:	5d                   	pop    ebp
c00234ea:	c3                   	ret    
c00234eb:	90                   	nop

c00234ec <ATA::read(unsigned long long, int, void*)>:
c00234ec:	57                   	push   edi
c00234ed:	b8 04 00 00 00       	mov    eax,0x4
c00234f2:	56                   	push   esi
c00234f3:	53                   	push   ebx
c00234f4:	83 ec 10             	sub    esp,0x10
c00234f7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00234fb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00234ff:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023502:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023506:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002350a:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023510:	77 3b                	ja     c002354d <ATA::read(unsigned long long, int, void*)+0x61>
c0023512:	b8 06 00 00 00       	mov    eax,0x6
c0023517:	85 d2                	test   edx,edx
c0023519:	74 32                	je     c002354d <ATA::read(unsigned long long, int, void*)+0x61>
c002351b:	50                   	push   eax
c002351c:	50                   	push   eax
c002351d:	6a 00                	push   0x0
c002351f:	52                   	push   edx
c0023520:	53                   	push   ebx
c0023521:	57                   	push   edi
c0023522:	56                   	push   esi
c0023523:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023527:	e8 42 fc ff ff       	call   c002316e <ATA::access(unsigned long long, int, void*, bool)>
c002352c:	83 c4 20             	add    esp,0x20
c002352f:	85 c0                	test   eax,eax
c0023531:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023535:	75 11                	jne    c0023548 <ATA::read(unsigned long long, int, void*)+0x5c>
c0023537:	01 1d 28 ef 02 c0    	add    DWORD PTR ds:0xc002ef28,ebx
c002353d:	e8 a2 d0 fe ff       	call   c00105e4 <VgaText::updateDiskUsage()>
c0023542:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023546:	eb 05                	jmp    c002354d <ATA::read(unsigned long long, int, void*)+0x61>
c0023548:	b8 01 00 00 00       	mov    eax,0x1
c002354d:	83 c4 10             	add    esp,0x10
c0023550:	5b                   	pop    ebx
c0023551:	5e                   	pop    esi
c0023552:	5f                   	pop    edi
c0023553:	c3                   	ret    

c0023554 <ATA::write(unsigned long long, int, void*)>:
c0023554:	57                   	push   edi
c0023555:	b8 04 00 00 00       	mov    eax,0x4
c002355a:	56                   	push   esi
c002355b:	53                   	push   ebx
c002355c:	83 ec 10             	sub    esp,0x10
c002355f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023563:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023567:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002356a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002356e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023572:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023578:	77 3b                	ja     c00235b5 <ATA::write(unsigned long long, int, void*)+0x61>
c002357a:	b8 06 00 00 00       	mov    eax,0x6
c002357f:	85 d2                	test   edx,edx
c0023581:	74 32                	je     c00235b5 <ATA::write(unsigned long long, int, void*)+0x61>
c0023583:	50                   	push   eax
c0023584:	50                   	push   eax
c0023585:	6a 01                	push   0x1
c0023587:	52                   	push   edx
c0023588:	53                   	push   ebx
c0023589:	57                   	push   edi
c002358a:	56                   	push   esi
c002358b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002358f:	e8 da fb ff ff       	call   c002316e <ATA::access(unsigned long long, int, void*, bool)>
c0023594:	83 c4 20             	add    esp,0x20
c0023597:	85 c0                	test   eax,eax
c0023599:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002359d:	75 11                	jne    c00235b0 <ATA::write(unsigned long long, int, void*)+0x5c>
c002359f:	01 1d 24 ef 02 c0    	add    DWORD PTR ds:0xc002ef24,ebx
c00235a5:	e8 3a d0 fe ff       	call   c00105e4 <VgaText::updateDiskUsage()>
c00235aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00235ae:	eb 05                	jmp    c00235b5 <ATA::write(unsigned long long, int, void*)+0x61>
c00235b0:	b8 01 00 00 00       	mov    eax,0x1
c00235b5:	83 c4 10             	add    esp,0x10
c00235b8:	5b                   	pop    ebx
c00235b9:	5e                   	pop    esi
c00235ba:	5f                   	pop    edi
c00235bb:	c3                   	ret    

c00235bc <ATA::detectCHS()>:
c00235bc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00235c0:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00235c6:	c1 e0 06             	shl    eax,0x6
c00235c9:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00235cf:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00235d9:	c7 44 24 04 e8 b5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b5e8
c00235e1:	e9 eb 62 ff ff       	jmp    c00198d1 <Krnl::panic(char const*)>

c00235e6 <ATA::open(int, int, void*)>:
c00235e6:	53                   	push   ebx
c00235e7:	83 ec 08             	sub    esp,0x8
c00235ea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00235ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00235f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00235f6:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00235fc:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0023602:	c1 e0 06             	shl    eax,0x6
c0023605:	01 d0                	add    eax,edx
c0023607:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002360e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0023614:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002361b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0023625:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002362b:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0023632:	75 0c                	jne    c0023640 <ATA::open(int, int, void*)+0x5a>
c0023634:	83 ec 0c             	sub    esp,0xc
c0023637:	53                   	push   ebx
c0023638:	e8 7f ff ff ff       	call   c00235bc <ATA::detectCHS()>
c002363d:	83 c4 10             	add    esp,0x10
c0023640:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023646:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002364c:	c1 e0 06             	shl    eax,0x6
c002364f:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0023656:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0023660:	d1 e8                	shr    eax,1
c0023662:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0023668:	6a 04                	push   0x4
c002366a:	6a 0c                	push   0xc
c002366c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023673:	50                   	push   eax
c0023674:	52                   	push   edx
c0023675:	e8 7a ea ff ff       	call   c00220f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002367a:	90                   	nop
c002367b:	90                   	nop
c002367c:	6a 00                	push   0x0
c002367e:	6a 0c                	push   0xc
c0023680:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023687:	50                   	push   eax
c0023688:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002368e:	e8 61 ea ff ff       	call   c00220f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023693:	83 c4 14             	add    esp,0x14
c0023696:	53                   	push   ebx
c0023697:	e8 82 09 ff ff       	call   c001401e <PhysicalDisk::startCache()>
c002369c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002369f:	e8 a4 29 ff ff       	call   c0016048 <createPartitionsForDisk(PhysicalDisk*)>
c00236a4:	31 c0                	xor    eax,eax
c00236a6:	83 c4 18             	add    esp,0x18
c00236a9:	5b                   	pop    ebx
c00236aa:	c3                   	ret    
c00236ab:	90                   	nop

c00236ac <ATAPI::write(unsigned long long, int, void*)>:
c00236ac:	b8 03 00 00 00       	mov    eax,0x3
c00236b1:	c3                   	ret    

c00236b2 <ATAPI::close(int, int, void*)>:
c00236b2:	83 ec 0c             	sub    esp,0xc
c00236b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236b9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00236bf:	85 c0                	test   eax,eax
c00236c1:	74 0c                	je     c00236cf <ATAPI::close(int, int, void*)+0x1d>
c00236c3:	83 ec 0c             	sub    esp,0xc
c00236c6:	8b 10                	mov    edx,DWORD PTR [eax]
c00236c8:	50                   	push   eax
c00236c9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00236cc:	83 c4 10             	add    esp,0x10
c00236cf:	31 c0                	xor    eax,eax
c00236d1:	83 c4 0c             	add    esp,0xc
c00236d4:	c3                   	ret    
c00236d5:	90                   	nop

c00236d6 <ATAPI::ATAPI()>:
c00236d6:	83 ec 0c             	sub    esp,0xc
c00236d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236dd:	83 ec 04             	sub    esp,0x4
c00236e0:	68 00 08 00 00       	push   0x800
c00236e5:	68 30 b6 02 c0       	push   0xc002b630
c00236ea:	50                   	push   eax
c00236eb:	e8 c6 08 ff ff       	call   c0013fb6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00236f0:	83 c4 10             	add    esp,0x10
c00236f3:	ba 70 b6 02 c0       	mov    edx,0xc002b670
c00236f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236fc:	89 10                	mov    DWORD PTR [eax],edx
c00236fe:	90                   	nop
c00236ff:	83 c4 0c             	add    esp,0xc
c0023702:	c3                   	ret    
c0023703:	90                   	nop

c0023704 <ATAPI::readyForCommand()>:
c0023704:	56                   	push   esi
c0023705:	53                   	push   ebx
c0023706:	31 db                	xor    ebx,ebx
c0023708:	50                   	push   eax
c0023709:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002370d:	50                   	push   eax
c002370e:	6a 0c                	push   0xc
c0023710:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023717:	50                   	push   eax
c0023718:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002371e:	e8 91 ea ff ff       	call   c00221b4 <IDE::read(unsigned char, unsigned char)>
c0023723:	83 c4 10             	add    esp,0x10
c0023726:	a8 88                	test   al,0x88
c0023728:	74 23                	je     c002374d <ATAPI::readyForCommand()+0x49>
c002372a:	43                   	inc    ebx
c002372b:	83 fb 63             	cmp    ebx,0x63
c002372e:	7e dd                	jle    c002370d <ATAPI::readyForCommand()+0x9>
c0023730:	51                   	push   ecx
c0023731:	51                   	push   ecx
c0023732:	6a 00                	push   0x0
c0023734:	68 40 42 0f 00       	push   0xf4240
c0023739:	e8 f8 9c ff ff       	call   c001d436 <nanoSleep(unsigned long long)>
c002373e:	83 c4 10             	add    esp,0x10
c0023741:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023747:	75 c4                	jne    c002370d <ATAPI::readyForCommand()+0x9>
c0023749:	31 c0                	xor    eax,eax
c002374b:	eb 02                	jmp    c002374f <ATAPI::readyForCommand()+0x4b>
c002374d:	b0 01                	mov    al,0x1
c002374f:	5a                   	pop    edx
c0023750:	5b                   	pop    ebx
c0023751:	5e                   	pop    esi
c0023752:	c3                   	ret    
c0023753:	90                   	nop

c0023754 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0023754:	55                   	push   ebp
c0023755:	57                   	push   edi
c0023756:	56                   	push   esi
c0023757:	53                   	push   ebx
c0023758:	83 ec 20             	sub    esp,0x20
c002375b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002375f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0023763:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0023767:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002376b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002376f:	6a 01                	push   0x1
c0023771:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023778:	50                   	push   eax
c0023779:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002377f:	e8 7c eb ff ff       	call   c0022300 <IDE::enableIRQs(unsigned char, bool)>
c0023784:	5e                   	pop    esi
c0023785:	58                   	pop    eax
c0023786:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002378d:	50                   	push   eax
c002378e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023794:	e8 35 e9 ff ff       	call   c00220ce <IDE::prepareInterrupt(unsigned char)>
c0023799:	89 3c 24             	mov    DWORD PTR [esp],edi
c002379c:	e8 63 ff ff ff       	call   c0023704 <ATAPI::readyForCommand()>
c00237a1:	83 c4 10             	add    esp,0x10
c00237a4:	84 c0                	test   al,al
c00237a6:	75 0a                	jne    c00237b2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00237a8:	bb 01 00 00 00       	mov    ebx,0x1
c00237ad:	e9 57 02 00 00       	jmp    c0023a09 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00237b2:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00237b8:	c1 e0 04             	shl    eax,0x4
c00237bb:	0f b6 c0             	movzx  eax,al
c00237be:	50                   	push   eax
c00237bf:	6a 06                	push   0x6
c00237c1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00237c8:	50                   	push   eax
c00237c9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00237cf:	e8 20 e9 ff ff       	call   c00220f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237d4:	6a 00                	push   0x0
c00237d6:	6a 01                	push   0x1
c00237d8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00237df:	50                   	push   eax
c00237e0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00237e6:	e8 09 e9 ff ff       	call   c00220f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237eb:	83 c4 20             	add    esp,0x20
c00237ee:	0f b6 c3             	movzx  eax,bl
c00237f1:	0f b6 df             	movzx  ebx,bh
c00237f4:	50                   	push   eax
c00237f5:	6a 04                	push   0x4
c00237f7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00237fe:	50                   	push   eax
c00237ff:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023805:	e8 ea e8 ff ff       	call   c00220f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002380a:	53                   	push   ebx
c002380b:	6a 05                	push   0x5
c002380d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023814:	50                   	push   eax
c0023815:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002381b:	e8 d4 e8 ff ff       	call   c00220f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023820:	83 c4 20             	add    esp,0x20
c0023823:	68 a0 00 00 00       	push   0xa0
c0023828:	6a 07                	push   0x7
c002382a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023831:	50                   	push   eax
c0023832:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023838:	e8 b7 e8 ff ff       	call   c00220f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002383d:	83 c4 0c             	add    esp,0xc
c0023840:	6a 01                	push   0x1
c0023842:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023849:	50                   	push   eax
c002384a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023850:	e8 4b f4 ff ff       	call   c0022ca0 <IDE::polling(unsigned char, unsigned int)>
c0023855:	83 c4 10             	add    esp,0x10
c0023858:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c002385e:	84 c0                	test   al,al
c0023860:	74 23                	je     c0023885 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0023862:	0f b6 d8             	movzx  ebx,al
c0023865:	0f b6 d2             	movzx  edx,dl
c0023868:	53                   	push   ebx
c0023869:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0023870:	50                   	push   eax
c0023871:	52                   	push   edx
c0023872:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023878:	e8 8d f2 ff ff       	call   c0022b0a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002387d:	83 c4 10             	add    esp,0x10
c0023880:	e9 84 01 00 00       	jmp    c0023a09 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023885:	0f b6 d2             	movzx  edx,dl
c0023888:	53                   	push   ebx
c0023889:	53                   	push   ebx
c002388a:	52                   	push   edx
c002388b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023891:	e8 4c e8 ff ff       	call   c00220e2 <IDE::getBase(unsigned char)>
c0023896:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002389a:	b9 06 00 00 00       	mov    ecx,0x6
c002389f:	89 c2                	mov    edx,eax
c00238a1:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00238a4:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00238a8:	83 c4 10             	add    esp,0x10
c00238ab:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00238b1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00238b8:	85 db                	test   ebx,ebx
c00238ba:	0f 84 ec 00 00 00    	je     c00239ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00238c0:	51                   	push   ecx
c00238c1:	51                   	push   ecx
c00238c2:	52                   	push   edx
c00238c3:	50                   	push   eax
c00238c4:	e8 99 e9 ff ff       	call   c0022262 <IDE::waitInterrupt(unsigned char)>
c00238c9:	83 c4 10             	add    esp,0x10
c00238cc:	84 c0                	test   al,al
c00238ce:	0f 84 d4 fe ff ff    	je     c00237a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00238d4:	56                   	push   esi
c00238d5:	56                   	push   esi
c00238d6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00238dd:	50                   	push   eax
c00238de:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00238e4:	e8 e5 e7 ff ff       	call   c00220ce <IDE::prepareInterrupt(unsigned char)>
c00238e9:	83 c4 0c             	add    esp,0xc
c00238ec:	6a 04                	push   0x4
c00238ee:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00238f5:	50                   	push   eax
c00238f6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00238fc:	e8 b3 e8 ff ff       	call   c00221b4 <IDE::read(unsigned char, unsigned char)>
c0023901:	83 c4 0c             	add    esp,0xc
c0023904:	89 c6                	mov    esi,eax
c0023906:	6a 05                	push   0x5
c0023908:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002390f:	50                   	push   eax
c0023910:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023916:	e8 99 e8 ff ff       	call   c00221b4 <IDE::read(unsigned char, unsigned char)>
c002391b:	89 f1                	mov    ecx,esi
c002391d:	0f b6 c0             	movzx  eax,al
c0023920:	0f b6 f1             	movzx  esi,cl
c0023923:	c1 e0 08             	shl    eax,0x8
c0023926:	09 c6                	or     esi,eax
c0023928:	d1 fe                	sar    esi,1
c002392a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002392e:	83 c4 10             	add    esp,0x10
c0023931:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0023936:	74 41                	je     c0023979 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0023938:	31 c9                	xor    ecx,ecx
c002393a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023940:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023947:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002394b:	75 0a                	jne    c0023957 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002394d:	01 c9                	add    ecx,ecx
c002394f:	01 cd                	add    ebp,ecx
c0023951:	4b                   	dec    ebx
c0023952:	e9 54 ff ff ff       	jmp    c00238ab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0023957:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002395c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023960:	51                   	push   ecx
c0023961:	51                   	push   ecx
c0023962:	52                   	push   edx
c0023963:	50                   	push   eax
c0023964:	e8 79 e7 ff ff       	call   c00220e2 <IDE::getBase(unsigned char)>
c0023969:	89 c2                	mov    edx,eax
c002396b:	89 f0                	mov    eax,esi
c002396d:	66 ef                	out    dx,ax
c002396f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023973:	83 c4 10             	add    esp,0x10
c0023976:	41                   	inc    ecx
c0023977:	eb c1                	jmp    c002393a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0023979:	31 f6                	xor    esi,esi
c002397b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023981:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023988:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002398c:	75 06                	jne    c0023994 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c002398e:	01 f6                	add    esi,esi
c0023990:	01 f5                	add    ebp,esi
c0023992:	eb bd                	jmp    c0023951 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0023994:	51                   	push   ecx
c0023995:	51                   	push   ecx
c0023996:	52                   	push   edx
c0023997:	50                   	push   eax
c0023998:	e8 45 e7 ff ff       	call   c00220e2 <IDE::getBase(unsigned char)>
c002399d:	89 c2                	mov    edx,eax
c002399f:	66 ed                	in     ax,dx
c00239a1:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00239a6:	83 c4 10             	add    esp,0x10
c00239a9:	46                   	inc    esi
c00239aa:	eb cf                	jmp    c002397b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00239ac:	51                   	push   ecx
c00239ad:	51                   	push   ecx
c00239ae:	52                   	push   edx
c00239af:	50                   	push   eax
c00239b0:	e8 ad e8 ff ff       	call   c0022262 <IDE::waitInterrupt(unsigned char)>
c00239b5:	83 c4 10             	add    esp,0x10
c00239b8:	84 c0                	test   al,al
c00239ba:	0f 84 e8 fd ff ff    	je     c00237a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00239c0:	bb a0 86 01 00       	mov    ebx,0x186a0
c00239c5:	52                   	push   edx
c00239c6:	52                   	push   edx
c00239c7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00239ce:	50                   	push   eax
c00239cf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00239d5:	e8 f4 e6 ff ff       	call   c00220ce <IDE::prepareInterrupt(unsigned char)>
c00239da:	83 c4 10             	add    esp,0x10
c00239dd:	50                   	push   eax
c00239de:	50                   	push   eax
c00239df:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00239e6:	50                   	push   eax
c00239e7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00239ed:	e8 f0 e6 ff ff       	call   c00220e2 <IDE::getBase(unsigned char)>
c00239f2:	8d 50 07             	lea    edx,[eax+0x7]
c00239f5:	ec                   	in     al,dx
c00239f6:	83 c4 10             	add    esp,0x10
c00239f9:	a8 88                	test   al,0x88
c00239fb:	74 0a                	je     c0023a07 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00239fd:	4b                   	dec    ebx
c00239fe:	75 dd                	jne    c00239dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0023a00:	bb 02 00 00 00       	mov    ebx,0x2
c0023a05:	eb 02                	jmp    c0023a09 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023a07:	31 db                	xor    ebx,ebx
c0023a09:	83 c4 1c             	add    esp,0x1c
c0023a0c:	89 d8                	mov    eax,ebx
c0023a0e:	5b                   	pop    ebx
c0023a0f:	5e                   	pop    esi
c0023a10:	5f                   	pop    edi
c0023a11:	5d                   	pop    ebp
c0023a12:	c3                   	ret    
c0023a13:	90                   	nop

c0023a14 <ATAPI::diskRemoved()>:
c0023a14:	83 ec 18             	sub    esp,0x18
c0023a17:	68 3b b6 02 c0       	push   0xc002b63b
c0023a1c:	e8 5e ed fe ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0023a21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023a25:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0023a2c:	83 c4 1c             	add    esp,0x1c
c0023a2f:	c3                   	ret    

c0023a30 <ATAPI::eject()>:
c0023a30:	57                   	push   edi
c0023a31:	b9 03 00 00 00       	mov    ecx,0x3
c0023a36:	53                   	push   ebx
c0023a37:	83 ec 14             	sub    esp,0x14
c0023a3a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0023a3e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023a42:	fc                   	cld    
c0023a43:	31 c0                	xor    eax,eax
c0023a45:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023a47:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0023a4c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0023a51:	50                   	push   eax
c0023a52:	50                   	push   eax
c0023a53:	6a 00                	push   0x0
c0023a55:	6a 00                	push   0x0
c0023a57:	6a 00                	push   0x0
c0023a59:	6a 02                	push   0x2
c0023a5b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023a5f:	50                   	push   eax
c0023a60:	53                   	push   ebx
c0023a61:	e8 ee fc ff ff       	call   c0023754 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023a66:	83 c4 14             	add    esp,0x14
c0023a69:	53                   	push   ebx
c0023a6a:	e8 a5 ff ff ff       	call   c0023a14 <ATAPI::diskRemoved()>
c0023a6f:	83 c4 24             	add    esp,0x24
c0023a72:	5b                   	pop    ebx
c0023a73:	5f                   	pop    edi
c0023a74:	c3                   	ret    
c0023a75:	90                   	nop

c0023a76 <ATAPI::diskInserted()>:
c0023a76:	53                   	push   ebx
c0023a77:	83 ec 14             	sub    esp,0x14
c0023a7a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023a7e:	68 51 b6 02 c0       	push   0xc002b651
c0023a83:	e8 f7 ec fe ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0023a88:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0023a8f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023a92:	e8 87 05 ff ff       	call   c001401e <PhysicalDisk::startCache()>
c0023a97:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0023a9b:	83 c4 18             	add    esp,0x18
c0023a9e:	5b                   	pop    ebx
c0023a9f:	e9 a4 25 ff ff       	jmp    c0016048 <createPartitionsForDisk(PhysicalDisk*)>

c0023aa4 <ATAPI::detectMedia()>:
c0023aa4:	56                   	push   esi
c0023aa5:	53                   	push   ebx
c0023aa6:	83 ec 28             	sub    esp,0x28
c0023aa9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023aad:	6a 0c                	push   0xc
c0023aaf:	6a 00                	push   0x0
c0023ab1:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0023ab5:	56                   	push   esi
c0023ab6:	e8 d0 cb fd ff       	call   c000068b <memset>
c0023abb:	58                   	pop    eax
c0023abc:	5a                   	pop    edx
c0023abd:	6a 00                	push   0x0
c0023abf:	6a 00                	push   0x0
c0023ac1:	6a 00                	push   0x0
c0023ac3:	6a 00                	push   0x0
c0023ac5:	56                   	push   esi
c0023ac6:	53                   	push   ebx
c0023ac7:	e8 88 fc ff ff       	call   c0023754 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023acc:	83 c4 1c             	add    esp,0x1c
c0023acf:	6a 0c                	push   0xc
c0023ad1:	6a 00                	push   0x0
c0023ad3:	56                   	push   esi
c0023ad4:	e8 b2 cb fd ff       	call   c000068b <memset>
c0023ad9:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0023ade:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0023ae3:	59                   	pop    ecx
c0023ae4:	58                   	pop    eax
c0023ae5:	6a 01                	push   0x1
c0023ae7:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0023aeb:	50                   	push   eax
c0023aec:	6a 00                	push   0x0
c0023aee:	6a 12                	push   0x12
c0023af0:	56                   	push   esi
c0023af1:	53                   	push   ebx
c0023af2:	e8 5d fc ff ff       	call   c0023754 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023af7:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0023afb:	83 c4 20             	add    esp,0x20
c0023afe:	83 e0 7f             	and    eax,0x7f
c0023b01:	3c 70                	cmp    al,0x70
c0023b03:	74 15                	je     c0023b1a <ATAPI::detectMedia()+0x76>
c0023b05:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023b0c:	75 0c                	jne    c0023b1a <ATAPI::detectMedia()+0x76>
c0023b0e:	83 ec 0c             	sub    esp,0xc
c0023b11:	53                   	push   ebx
c0023b12:	e8 5f ff ff ff       	call   c0023a76 <ATAPI::diskInserted()>
c0023b17:	83 c4 10             	add    esp,0x10
c0023b1a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0023b1e:	83 e0 0f             	and    eax,0xf
c0023b21:	3c 02                	cmp    al,0x2
c0023b23:	75 1b                	jne    c0023b40 <ATAPI::detectMedia()+0x9c>
c0023b25:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0023b2a:	75 2d                	jne    c0023b59 <ATAPI::detectMedia()+0xb5>
c0023b2c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023b33:	74 24                	je     c0023b59 <ATAPI::detectMedia()+0xb5>
c0023b35:	83 ec 0c             	sub    esp,0xc
c0023b38:	53                   	push   ebx
c0023b39:	e8 d6 fe ff ff       	call   c0023a14 <ATAPI::diskRemoved()>
c0023b3e:	eb 16                	jmp    c0023b56 <ATAPI::detectMedia()+0xb2>
c0023b40:	84 c0                	test   al,al
c0023b42:	75 15                	jne    c0023b59 <ATAPI::detectMedia()+0xb5>
c0023b44:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023b4b:	75 0c                	jne    c0023b59 <ATAPI::detectMedia()+0xb5>
c0023b4d:	83 ec 0c             	sub    esp,0xc
c0023b50:	53                   	push   ebx
c0023b51:	e8 20 ff ff ff       	call   c0023a76 <ATAPI::diskInserted()>
c0023b56:	83 c4 10             	add    esp,0x10
c0023b59:	83 c4 24             	add    esp,0x24
c0023b5c:	5b                   	pop    ebx
c0023b5d:	5e                   	pop    esi
c0023b5e:	c3                   	ret    
c0023b5f:	90                   	nop

c0023b60 <ATAPI::open(int, int, void*)>:
c0023b60:	53                   	push   ebx
c0023b61:	83 ec 08             	sub    esp,0x8
c0023b64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023b68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023b6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023b70:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0023b76:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0023b7c:	c1 e0 06             	shl    eax,0x6
c0023b7f:	01 d0                	add    eax,edx
c0023b81:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0023b88:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0023b8e:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0023b95:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0023b9f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0023ba5:	6a 04                	push   0x4
c0023ba7:	6a 0c                	push   0xc
c0023ba9:	51                   	push   ecx
c0023baa:	52                   	push   edx
c0023bab:	e8 44 e5 ff ff       	call   c00220f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023bb0:	90                   	nop
c0023bb1:	90                   	nop
c0023bb2:	6a 00                	push   0x0
c0023bb4:	6a 0c                	push   0xc
c0023bb6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023bbd:	50                   	push   eax
c0023bbe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023bc4:	e8 2b e5 ff ff       	call   c00220f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023bc9:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0023bd0:	83 c4 14             	add    esp,0x14
c0023bd3:	53                   	push   ebx
c0023bd4:	e8 cb fe ff ff       	call   c0023aa4 <ATAPI::detectMedia()>
c0023bd9:	31 c0                	xor    eax,eax
c0023bdb:	83 c4 18             	add    esp,0x18
c0023bde:	5b                   	pop    ebx
c0023bdf:	c3                   	ret    

c0023be0 <ATAPI::read(unsigned long long, int, void*)>:
c0023be0:	55                   	push   ebp
c0023be1:	57                   	push   edi
c0023be2:	56                   	push   esi
c0023be3:	53                   	push   ebx
c0023be4:	83 ec 1c             	sub    esp,0x1c
c0023be7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023beb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023bef:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0023bf3:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023bfa:	74 41                	je     c0023c3d <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0023bfc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023c00:	b9 03 00 00 00       	mov    ecx,0x3
c0023c05:	fc                   	cld    
c0023c06:	31 c0                	xor    eax,eax
c0023c08:	86 fb                	xchg   bl,bh
c0023c0a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023c0c:	c1 c3 10             	rol    ebx,0x10
c0023c0f:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0023c14:	89 e8                	mov    eax,ebp
c0023c16:	86 fb                	xchg   bl,bh
c0023c18:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0023c1c:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0023c20:	50                   	push   eax
c0023c21:	50                   	push   eax
c0023c22:	55                   	push   ebp
c0023c23:	c1 e5 0b             	shl    ebp,0xb
c0023c26:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0023c2a:	6a 00                	push   0x0
c0023c2c:	55                   	push   ebp
c0023c2d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023c31:	50                   	push   eax
c0023c32:	56                   	push   esi
c0023c33:	e8 1c fb ff ff       	call   c0023754 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023c38:	83 c4 20             	add    esp,0x20
c0023c3b:	eb 1a                	jmp    c0023c57 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0023c3d:	83 ec 0c             	sub    esp,0xc
c0023c40:	56                   	push   esi
c0023c41:	e8 5e fe ff ff       	call   c0023aa4 <ATAPI::detectMedia()>
c0023c46:	83 c4 10             	add    esp,0x10
c0023c49:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023c50:	75 aa                	jne    c0023bfc <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0023c52:	b8 02 00 00 00       	mov    eax,0x2
c0023c57:	83 c4 1c             	add    esp,0x1c
c0023c5a:	5b                   	pop    ebx
c0023c5b:	5e                   	pop    esi
c0023c5c:	5f                   	pop    edi
c0023c5d:	5d                   	pop    ebp
c0023c5e:	c3                   	ret    
c0023c5f:	90                   	nop

c0023c60 <SATA::close(int, int, void*)>:
c0023c60:	83 ec 0c             	sub    esp,0xc
c0023c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c67:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023c6d:	85 c0                	test   eax,eax
c0023c6f:	74 0c                	je     c0023c7d <SATA::close(int, int, void*)+0x1d>
c0023c71:	83 ec 0c             	sub    esp,0xc
c0023c74:	8b 10                	mov    edx,DWORD PTR [eax]
c0023c76:	50                   	push   eax
c0023c77:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023c7a:	83 c4 10             	add    esp,0x10
c0023c7d:	31 c0                	xor    eax,eax
c0023c7f:	83 c4 0c             	add    esp,0xc
c0023c82:	c3                   	ret    
c0023c83:	90                   	nop

c0023c84 <SATA::powerSaving(PowerSavingLevel)>:
c0023c84:	c3                   	ret    
c0023c85:	90                   	nop

c0023c86 <SATA::open(int, int, void*)>:
c0023c86:	53                   	push   ebx
c0023c87:	83 ec 14             	sub    esp,0x14
c0023c8a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023c8e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0023c92:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0023c9c:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0023ca2:	c7 83 60 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x160],0x0
c0023cac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023cb0:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0023cba:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0023cc0:	68 9c b6 02 c0       	push   0xc002b69c
c0023cc5:	e8 b5 ea fe ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0023cca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023ccd:	e8 4c 03 ff ff       	call   c001401e <PhysicalDisk::startCache()>
c0023cd2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023cd5:	e8 6e 23 ff ff       	call   c0016048 <createPartitionsForDisk(PhysicalDisk*)>
c0023cda:	31 c0                	xor    eax,eax
c0023cdc:	83 c4 18             	add    esp,0x18
c0023cdf:	5b                   	pop    ebx
c0023ce0:	c3                   	ret    
c0023ce1:	90                   	nop

c0023ce2 <SATA::SATA()>:
c0023ce2:	83 ec 0c             	sub    esp,0xc
c0023ce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ce9:	83 ec 04             	sub    esp,0x4
c0023cec:	68 00 02 00 00       	push   0x200
c0023cf1:	68 b7 b6 02 c0       	push   0xc002b6b7
c0023cf6:	50                   	push   eax
c0023cf7:	e8 ba 02 ff ff       	call   c0013fb6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023cfc:	83 c4 10             	add    esp,0x10
c0023cff:	ba 94 b7 02 c0       	mov    edx,0xc002b794
c0023d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d08:	89 10                	mov    DWORD PTR [eax],edx
c0023d0a:	90                   	nop
c0023d0b:	83 c4 0c             	add    esp,0xc
c0023d0e:	c3                   	ret    
c0023d0f:	90                   	nop

c0023d10 <SATA::access(unsigned long long, int, void*, bool)>:
c0023d10:	55                   	push   ebp
c0023d11:	57                   	push   edi
c0023d12:	56                   	push   esi
c0023d13:	53                   	push   ebx
c0023d14:	81 ec 2c 04 00 00    	sub    esp,0x42c
c0023d1a:	8b 84 24 48 04 00 00 	mov    eax,DWORD PTR [esp+0x448]
c0023d21:	8b bc 24 4c 04 00 00 	mov    edi,DWORD PTR [esp+0x44c]
c0023d28:	8b 9c 24 40 04 00 00 	mov    ebx,DWORD PTR [esp+0x440]
c0023d2f:	8b b4 24 44 04 00 00 	mov    esi,DWORD PTR [esp+0x444]
c0023d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023d3a:	83 ff 08             	cmp    edi,0x8
c0023d3d:	7e 10                	jle    c0023d4f <SATA::access(unsigned long long, int, void*, bool)+0x3f>
c0023d3f:	83 ec 0c             	sub    esp,0xc
c0023d42:	68 c7 b6 02 c0       	push   0xc002b6c7
c0023d47:	e8 85 5b ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c0023d4c:	83 c4 10             	add    esp,0x10
c0023d4f:	51                   	push   ecx
c0023d50:	68 00 02 00 00       	push   0x200
c0023d55:	68 ee 00 00 00       	push   0xee
c0023d5a:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0023d5e:	55                   	push   ebp
c0023d5f:	e8 27 c9 fd ff       	call   c000068b <memset>
c0023d64:	83 c4 0c             	add    esp,0xc
c0023d67:	68 00 02 00 00       	push   0x200
c0023d6c:	68 ee 00 00 00       	push   0xee
c0023d71:	8d 84 24 2c 02 00 00 	lea    eax,[esp+0x22c]
c0023d78:	50                   	push   eax
c0023d79:	e8 0d c9 fd ff       	call   c000068b <memset>
c0023d7e:	55                   	push   ebp
c0023d7f:	57                   	push   edi
c0023d80:	56                   	push   esi
c0023d81:	68 f9 b6 02 c0       	push   0xc002b6f9
c0023d86:	e8 f4 e9 fe ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0023d8b:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0023d91:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023d97:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023d9b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023da1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0023da5:	c1 e0 07             	shl    eax,0x7
c0023da8:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
c0023dac:	83 c4 18             	add    esp,0x18
c0023daf:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0023db9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023dbd:	8d 50 02             	lea    edx,[eax+0x2]
c0023dc0:	c1 e2 07             	shl    edx,0x7
c0023dc3:	03 54 24 14          	add    edx,DWORD PTR [esp+0x14]
c0023dc7:	52                   	push   edx
c0023dc8:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023dcc:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0023dd2:	e8 e1 ef ff ff       	call   c0022db8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0023dd7:	89 c1                	mov    ecx,eax
c0023dd9:	58                   	pop    eax
c0023dda:	5a                   	pop    edx
c0023ddb:	51                   	push   ecx
c0023ddc:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0023de0:	68 2e b7 02 c0       	push   0xc002b72e
c0023de5:	e8 95 e9 fe ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0023dea:	83 c4 10             	add    esp,0x10
c0023ded:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023df1:	83 f9 ff             	cmp    ecx,0xffffffff
c0023df4:	0f 84 9a 01 00 00    	je     c0023f94 <SATA::access(unsigned long long, int, void*, bool)+0x284>
c0023dfa:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0023e00:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023e04:	8b 12                	mov    edx,DWORD PTR [edx]
c0023e06:	2b 90 5c 01 00 00    	sub    edx,DWORD PTR [eax+0x15c]
c0023e0c:	03 90 58 01 00 00    	add    edx,DWORD PTR [eax+0x158]
c0023e12:	89 c8                	mov    eax,ecx
c0023e14:	c1 e0 05             	shl    eax,0x5
c0023e17:	01 c2                	add    edx,eax
c0023e19:	8a 02                	mov    al,BYTE PTR [edx]
c0023e1b:	83 e0 a0             	and    eax,0xffffffa0
c0023e1e:	83 c8 05             	or     eax,0x5
c0023e21:	88 02                	mov    BYTE PTR [edx],al
c0023e23:	8d 47 ff             	lea    eax,[edi-0x1]
c0023e26:	c1 f8 04             	sar    eax,0x4
c0023e29:	40                   	inc    eax
c0023e2a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0023e2e:	0f b7 c0             	movzx  eax,ax
c0023e31:	8b 9b 70 01 00 00    	mov    ebx,DWORD PTR [ebx+0x170]
c0023e37:	83 c0 08             	add    eax,0x8
c0023e3a:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c0023e40:	c1 e0 04             	shl    eax,0x4
c0023e43:	2b 8b 5c 01 00 00    	sub    ecx,DWORD PTR [ebx+0x15c]
c0023e49:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
c0023e4c:	01 cb                	add    ebx,ecx
c0023e4e:	52                   	push   edx
c0023e4f:	50                   	push   eax
c0023e50:	6a 00                	push   0x0
c0023e52:	53                   	push   ebx
c0023e53:	e8 33 c8 fd ff       	call   c000068b <memset>
c0023e58:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0023e5e:	83 c4 10             	add    esp,0x10
c0023e61:	89 ab 80 00 00 00    	mov    DWORD PTR [ebx+0x80],ebp
c0023e67:	25 00 00 c0 7f       	and    eax,0x7fc00000
c0023e6c:	8d ac 24 20 02 00 00 	lea    ebp,[esp+0x220]
c0023e73:	0d ff 01 00 80       	or     eax,0x800001ff
c0023e78:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023e7c:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0023e82:	b8 01 00 00 00       	mov    eax,0x1
c0023e87:	89 c2                	mov    edx,eax
c0023e89:	c1 e2 04             	shl    edx,0x4
c0023e8c:	89 ac 13 80 00 00 00 	mov    DWORD PTR [ebx+edx*1+0x80],ebp
c0023e93:	8d 50 08             	lea    edx,[eax+0x8]
c0023e96:	40                   	inc    eax
c0023e97:	c1 e2 04             	shl    edx,0x4
c0023e9a:	81 64 13 0c 00 00 c0 7f 	and    DWORD PTR [ebx+edx*1+0xc],0x7fc00000
c0023ea2:	83 f8 10             	cmp    eax,0x10
c0023ea5:	75 e0                	jne    c0023e87 <SATA::access(unsigned long long, int, void*, bool)+0x177>
c0023ea7:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0023eaa:	c6 43 02 25          	mov    BYTE PTR [ebx+0x2],0x25
c0023eae:	66 25 00 7f          	and    ax,0x7f00
c0023eb2:	66 89 73 04          	mov    WORD PTR [ebx+0x4],si
c0023eb6:	66 0d 27 80          	or     ax,0x8027
c0023eba:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0023ebe:	66 89 03             	mov    WORD PTR [ebx],ax
c0023ec1:	66 89 7b 0c          	mov    WORD PTR [ebx+0xc],di
c0023ec5:	89 f0                	mov    eax,esi
c0023ec7:	31 d2                	xor    edx,edx
c0023ec9:	c1 e8 10             	shr    eax,0x10
c0023ecc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0023ecf:	89 f0                	mov    eax,esi
c0023ed1:	c1 e8 18             	shr    eax,0x18
c0023ed4:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0023ed7:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0023edb:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0023ede:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023ee2:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0023ee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ee9:	c1 e0 07             	shl    eax,0x7
c0023eec:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0023ef0:	8b 98 20 01 00 00    	mov    ebx,DWORD PTR [eax+0x120]
c0023ef6:	80 e3 88             	and    bl,0x88
c0023ef9:	74 0b                	je     c0023f06 <SATA::access(unsigned long long, int, void*, bool)+0x1f6>
c0023efb:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0023f01:	74 0b                	je     c0023f0e <SATA::access(unsigned long long, int, void*, bool)+0x1fe>
c0023f03:	42                   	inc    edx
c0023f04:	eb ea                	jmp    c0023ef0 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c0023f06:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0023f0c:	75 0a                	jne    c0023f18 <SATA::access(unsigned long long, int, void*, bool)+0x208>
c0023f0e:	83 ec 0c             	sub    esp,0xc
c0023f11:	68 37 b7 02 c0       	push   0xc002b737
c0023f16:	eb 60                	jmp    c0023f78 <SATA::access(unsigned long long, int, void*, bool)+0x268>
c0023f18:	be 01 00 00 00       	mov    esi,0x1
c0023f1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023f21:	d3 e6                	shl    esi,cl
c0023f23:	c1 e3 07             	shl    ebx,0x7
c0023f26:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c0023f2c:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0023f30:	83 ec 0c             	sub    esp,0xc
c0023f33:	68 45 b7 02 c0       	push   0xc002b745
c0023f38:	e8 42 e8 fe ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0023f3d:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c0023f43:	83 c4 10             	add    esp,0x10
c0023f46:	85 c6                	test   esi,eax
c0023f48:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c0023f4e:	74 1a                	je     c0023f6a <SATA::access(unsigned long long, int, void*, bool)+0x25a>
c0023f50:	0f ba e0 1e          	bt     eax,0x1e
c0023f54:	73 da                	jae    c0023f30 <SATA::access(unsigned long long, int, void*, bool)+0x220>
c0023f56:	83 ec 0c             	sub    esp,0xc
c0023f59:	68 52 b7 02 c0       	push   0xc002b752
c0023f5e:	e8 6e 59 ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c0023f63:	83 c4 10             	add    esp,0x10
c0023f66:	31 c0                	xor    eax,eax
c0023f68:	eb 2f                	jmp    c0023f99 <SATA::access(unsigned long long, int, void*, bool)+0x289>
c0023f6a:	0f ba e0 1e          	bt     eax,0x1e
c0023f6e:	73 12                	jae    c0023f82 <SATA::access(unsigned long long, int, void*, bool)+0x272>
c0023f70:	83 ec 0c             	sub    esp,0xc
c0023f73:	68 52 b7 02 c0       	push   0xc002b752
c0023f78:	e8 54 59 ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c0023f7d:	83 c4 10             	add    esp,0x10
c0023f80:	eb 12                	jmp    c0023f94 <SATA::access(unsigned long long, int, void*, bool)+0x284>
c0023f82:	83 ec 0c             	sub    esp,0xc
c0023f85:	68 63 b7 02 c0       	push   0xc002b763
c0023f8a:	e8 42 59 ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c0023f8f:	83 c4 10             	add    esp,0x10
c0023f92:	eb fe                	jmp    c0023f92 <SATA::access(unsigned long long, int, void*, bool)+0x282>
c0023f94:	b8 01 00 00 00       	mov    eax,0x1
c0023f99:	81 c4 2c 04 00 00    	add    esp,0x42c
c0023f9f:	5b                   	pop    ebx
c0023fa0:	5e                   	pop    esi
c0023fa1:	5f                   	pop    edi
c0023fa2:	5d                   	pop    ebp
c0023fa3:	c3                   	ret    

c0023fa4 <SATA::read(unsigned long long, int, void*)>:
c0023fa4:	57                   	push   edi
c0023fa5:	b8 04 00 00 00       	mov    eax,0x4
c0023faa:	56                   	push   esi
c0023fab:	53                   	push   ebx
c0023fac:	83 ec 10             	sub    esp,0x10
c0023faf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023fb3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023fb7:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023fba:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023fbe:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023fc2:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023fc8:	77 3b                	ja     c0024005 <SATA::read(unsigned long long, int, void*)+0x61>
c0023fca:	b8 06 00 00 00       	mov    eax,0x6
c0023fcf:	85 d2                	test   edx,edx
c0023fd1:	74 32                	je     c0024005 <SATA::read(unsigned long long, int, void*)+0x61>
c0023fd3:	50                   	push   eax
c0023fd4:	50                   	push   eax
c0023fd5:	6a 00                	push   0x0
c0023fd7:	52                   	push   edx
c0023fd8:	53                   	push   ebx
c0023fd9:	57                   	push   edi
c0023fda:	56                   	push   esi
c0023fdb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023fdf:	e8 2c fd ff ff       	call   c0023d10 <SATA::access(unsigned long long, int, void*, bool)>
c0023fe4:	83 c4 20             	add    esp,0x20
c0023fe7:	85 c0                	test   eax,eax
c0023fe9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023fed:	75 11                	jne    c0024000 <SATA::read(unsigned long long, int, void*)+0x5c>
c0023fef:	01 1d 28 ef 02 c0    	add    DWORD PTR ds:0xc002ef28,ebx
c0023ff5:	e8 ea c5 fe ff       	call   c00105e4 <VgaText::updateDiskUsage()>
c0023ffa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023ffe:	eb 05                	jmp    c0024005 <SATA::read(unsigned long long, int, void*)+0x61>
c0024000:	b8 01 00 00 00       	mov    eax,0x1
c0024005:	83 c4 10             	add    esp,0x10
c0024008:	5b                   	pop    ebx
c0024009:	5e                   	pop    esi
c002400a:	5f                   	pop    edi
c002400b:	c3                   	ret    

c002400c <SATA::write(unsigned long long, int, void*)>:
c002400c:	57                   	push   edi
c002400d:	b8 04 00 00 00       	mov    eax,0x4
c0024012:	56                   	push   esi
c0024013:	53                   	push   ebx
c0024014:	83 ec 10             	sub    esp,0x10
c0024017:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002401b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002401f:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024022:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024026:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002402a:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024030:	77 3b                	ja     c002406d <SATA::write(unsigned long long, int, void*)+0x61>
c0024032:	b8 06 00 00 00       	mov    eax,0x6
c0024037:	85 d2                	test   edx,edx
c0024039:	74 32                	je     c002406d <SATA::write(unsigned long long, int, void*)+0x61>
c002403b:	50                   	push   eax
c002403c:	50                   	push   eax
c002403d:	6a 01                	push   0x1
c002403f:	52                   	push   edx
c0024040:	53                   	push   ebx
c0024041:	57                   	push   edi
c0024042:	56                   	push   esi
c0024043:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024047:	e8 c4 fc ff ff       	call   c0023d10 <SATA::access(unsigned long long, int, void*, bool)>
c002404c:	83 c4 20             	add    esp,0x20
c002404f:	85 c0                	test   eax,eax
c0024051:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024055:	75 11                	jne    c0024068 <SATA::write(unsigned long long, int, void*)+0x5c>
c0024057:	01 1d 24 ef 02 c0    	add    DWORD PTR ds:0xc002ef24,ebx
c002405d:	e8 82 c5 fe ff       	call   c00105e4 <VgaText::updateDiskUsage()>
c0024062:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024066:	eb 05                	jmp    c002406d <SATA::write(unsigned long long, int, void*)+0x61>
c0024068:	b8 01 00 00 00       	mov    eax,0x1
c002406d:	83 c4 10             	add    esp,0x10
c0024070:	5b                   	pop    ebx
c0024071:	5e                   	pop    esi
c0024072:	5f                   	pop    edi
c0024073:	c3                   	ret    

c0024074 <AVX::open(int, int, void*)>:
c0024074:	83 ec 0c             	sub    esp,0xc
c0024077:	e8 3c 11 00 00       	call   c00251b8 <avxInit>
c002407c:	b8 00 00 00 00       	mov    eax,0x0
c0024081:	83 c4 0c             	add    esp,0xc
c0024084:	c3                   	ret    
c0024085:	90                   	nop

c0024086 <AVX::close(int, int, void*)>:
c0024086:	83 ec 0c             	sub    esp,0xc
c0024089:	e8 2b 11 00 00       	call   c00251b9 <avxClose>
c002408e:	b8 00 00 00 00       	mov    eax,0x0
c0024093:	83 c4 0c             	add    esp,0xc
c0024096:	c3                   	ret    
c0024097:	90                   	nop

c0024098 <AVX::available()>:
c0024098:	83 ec 0c             	sub    esp,0xc
c002409b:	e8 10 11 00 00       	call   c00251b0 <avxDetect>
c00240a0:	85 c0                	test   eax,eax
c00240a2:	0f 95 c0             	setne  al
c00240a5:	83 c4 0c             	add    esp,0xc
c00240a8:	c3                   	ret    
c00240a9:	90                   	nop

c00240aa <AVX::save(void*)>:
c00240aa:	83 ec 0c             	sub    esp,0xc
c00240ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00240b1:	83 ec 0c             	sub    esp,0xc
c00240b4:	50                   	push   eax
c00240b5:	e8 fc 10 00 00       	call   c00251b6 <avxSave>
c00240ba:	83 c4 10             	add    esp,0x10
c00240bd:	90                   	nop
c00240be:	83 c4 0c             	add    esp,0xc
c00240c1:	c3                   	ret    

c00240c2 <AVX::load(void*)>:
c00240c2:	83 ec 0c             	sub    esp,0xc
c00240c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00240c9:	83 ec 0c             	sub    esp,0xc
c00240cc:	50                   	push   eax
c00240cd:	e8 e5 10 00 00       	call   c00251b7 <avxLoad>
c00240d2:	83 c4 10             	add    esp,0x10
c00240d5:	90                   	nop
c00240d6:	83 c4 0c             	add    esp,0xc
c00240d9:	c3                   	ret    

c00240da <AVX::AVX()>:
c00240da:	83 ec 0c             	sub    esp,0xc
c00240dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240e1:	83 ec 08             	sub    esp,0x8
c00240e4:	68 c0 b7 02 c0       	push   0xc002b7c0
c00240e9:	50                   	push   eax
c00240ea:	e8 a5 ff fe ff       	call   c0014094 <FPU::FPU(char const*)>
c00240ef:	83 c4 10             	add    esp,0x10
c00240f2:	ba d0 b7 02 c0       	mov    edx,0xc002b7d0
c00240f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240fb:	89 10                	mov    DWORD PTR [eax],edx
c00240fd:	90                   	nop
c00240fe:	83 c4 0c             	add    esp,0xc
c0024101:	c3                   	ret    

c0024102 <MMX::available()>:
c0024102:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c0024107:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002410d:	83 e0 20             	and    eax,0x20
c0024110:	84 c0                	test   al,al
c0024112:	0f 95 c0             	setne  al
c0024115:	c3                   	ret    

c0024116 <MMX::open(int, int, void*)>:
c0024116:	83 ec 0c             	sub    esp,0xc
c0024119:	e8 1e 11 00 00       	call   c002523c <x87Init>
c002411e:	b8 00 00 00 00       	mov    eax,0x0
c0024123:	83 c4 0c             	add    esp,0xc
c0024126:	c3                   	ret    
c0024127:	90                   	nop

c0024128 <MMX::close(int, int, void*)>:
c0024128:	83 ec 0c             	sub    esp,0xc
c002412b:	e8 26 11 00 00       	call   c0025256 <x87Close>
c0024130:	b8 00 00 00 00       	mov    eax,0x0
c0024135:	83 c4 0c             	add    esp,0xc
c0024138:	c3                   	ret    
c0024139:	90                   	nop

c002413a <MMX::save(void*)>:
c002413a:	83 ec 0c             	sub    esp,0xc
c002413d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024141:	83 ec 0c             	sub    esp,0xc
c0024144:	50                   	push   eax
c0024145:	e8 e7 10 00 00       	call   c0025231 <x87Save>
c002414a:	83 c4 10             	add    esp,0x10
c002414d:	90                   	nop
c002414e:	83 c4 0c             	add    esp,0xc
c0024151:	c3                   	ret    

c0024152 <MMX::load(void*)>:
c0024152:	83 ec 0c             	sub    esp,0xc
c0024155:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024159:	83 ec 0c             	sub    esp,0xc
c002415c:	50                   	push   eax
c002415d:	e8 d5 10 00 00       	call   c0025237 <x87Load>
c0024162:	83 c4 10             	add    esp,0x10
c0024165:	90                   	nop
c0024166:	83 c4 0c             	add    esp,0xc
c0024169:	c3                   	ret    

c002416a <MMX::MMX()>:
c002416a:	83 ec 0c             	sub    esp,0xc
c002416d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024171:	83 ec 08             	sub    esp,0x8
c0024174:	68 00 b8 02 c0       	push   0xc002b800
c0024179:	50                   	push   eax
c002417a:	e8 15 ff fe ff       	call   c0014094 <FPU::FPU(char const*)>
c002417f:	83 c4 10             	add    esp,0x10
c0024182:	ba 10 b8 02 c0       	mov    edx,0xc002b810
c0024187:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002418b:	89 10                	mov    DWORD PTR [eax],edx
c002418d:	90                   	nop
c002418e:	83 c4 0c             	add    esp,0xc
c0024191:	c3                   	ret    

c0024192 <SSE::open(int, int, void*)>:
c0024192:	83 ec 0c             	sub    esp,0xc
c0024195:	e8 5a 10 00 00       	call   c00251f4 <sseInit>
c002419a:	b8 00 00 00 00       	mov    eax,0x0
c002419f:	83 c4 0c             	add    esp,0xc
c00241a2:	c3                   	ret    
c00241a3:	90                   	nop

c00241a4 <SSE::close(int, int, void*)>:
c00241a4:	83 ec 0c             	sub    esp,0xc
c00241a7:	e8 58 10 00 00       	call   c0025204 <sseClose>
c00241ac:	b8 00 00 00 00       	mov    eax,0x0
c00241b1:	83 c4 0c             	add    esp,0xc
c00241b4:	c3                   	ret    
c00241b5:	90                   	nop

c00241b6 <SSE::available()>:
c00241b6:	83 ec 1c             	sub    esp,0x1c
c00241b9:	e8 12 10 00 00       	call   c00251d0 <absolutelyNoChanceInHell>
c00241be:	85 c0                	test   eax,eax
c00241c0:	0f 95 c0             	setne  al
c00241c3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00241c7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00241cb:	83 c4 1c             	add    esp,0x1c
c00241ce:	c3                   	ret    
c00241cf:	90                   	nop

c00241d0 <SSE::save(void*)>:
c00241d0:	83 ec 0c             	sub    esp,0xc
c00241d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00241d7:	83 ec 0c             	sub    esp,0xc
c00241da:	50                   	push   eax
c00241db:	e8 08 10 00 00       	call   c00251e8 <sseSave>
c00241e0:	83 c4 10             	add    esp,0x10
c00241e3:	90                   	nop
c00241e4:	83 c4 0c             	add    esp,0xc
c00241e7:	c3                   	ret    

c00241e8 <SSE::load(void*)>:
c00241e8:	83 ec 0c             	sub    esp,0xc
c00241eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00241ef:	83 ec 0c             	sub    esp,0xc
c00241f2:	50                   	push   eax
c00241f3:	e8 f6 0f 00 00       	call   c00251ee <sseLoad>
c00241f8:	83 c4 10             	add    esp,0x10
c00241fb:	90                   	nop
c00241fc:	83 c4 0c             	add    esp,0xc
c00241ff:	c3                   	ret    

c0024200 <SSE::SSE()>:
c0024200:	83 ec 0c             	sub    esp,0xc
c0024203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024207:	83 ec 08             	sub    esp,0x8
c002420a:	68 40 b8 02 c0       	push   0xc002b840
c002420f:	50                   	push   eax
c0024210:	e8 7f fe fe ff       	call   c0014094 <FPU::FPU(char const*)>
c0024215:	83 c4 10             	add    esp,0x10
c0024218:	ba 50 b8 02 c0       	mov    edx,0xc002b850
c002421d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024221:	89 10                	mov    DWORD PTR [eax],edx
c0024223:	90                   	nop
c0024224:	83 c4 0c             	add    esp,0xc
c0024227:	c3                   	ret    

c0024228 <x87::open(int, int, void*)>:
c0024228:	83 ec 0c             	sub    esp,0xc
c002422b:	e8 0c 10 00 00       	call   c002523c <x87Init>
c0024230:	b8 00 00 00 00       	mov    eax,0x0
c0024235:	83 c4 0c             	add    esp,0xc
c0024238:	c3                   	ret    
c0024239:	90                   	nop

c002423a <x87::close(int, int, void*)>:
c002423a:	83 ec 0c             	sub    esp,0xc
c002423d:	e8 14 10 00 00       	call   c0025256 <x87Close>
c0024242:	b8 00 00 00 00       	mov    eax,0x0
c0024247:	83 c4 0c             	add    esp,0xc
c002424a:	c3                   	ret    
c002424b:	90                   	nop

c002424c <x87::available()>:
c002424c:	83 ec 0c             	sub    esp,0xc
c002424f:	e8 c2 0f 00 00       	call   c0025216 <x87Detect>
c0024254:	85 c0                	test   eax,eax
c0024256:	0f 95 c0             	setne  al
c0024259:	83 c4 0c             	add    esp,0xc
c002425c:	c3                   	ret    
c002425d:	90                   	nop

c002425e <x87::save(void*)>:
c002425e:	83 ec 0c             	sub    esp,0xc
c0024261:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024265:	83 ec 0c             	sub    esp,0xc
c0024268:	50                   	push   eax
c0024269:	e8 c3 0f 00 00       	call   c0025231 <x87Save>
c002426e:	83 c4 10             	add    esp,0x10
c0024271:	90                   	nop
c0024272:	83 c4 0c             	add    esp,0xc
c0024275:	c3                   	ret    

c0024276 <x87::load(void*)>:
c0024276:	83 ec 0c             	sub    esp,0xc
c0024279:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002427d:	83 ec 0c             	sub    esp,0xc
c0024280:	50                   	push   eax
c0024281:	e8 b1 0f 00 00       	call   c0025237 <x87Load>
c0024286:	83 c4 10             	add    esp,0x10
c0024289:	90                   	nop
c002428a:	83 c4 0c             	add    esp,0xc
c002428d:	c3                   	ret    

c002428e <x87::x87()>:
c002428e:	83 ec 0c             	sub    esp,0xc
c0024291:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024295:	83 ec 08             	sub    esp,0x8
c0024298:	68 80 b8 02 c0       	push   0xc002b880
c002429d:	50                   	push   eax
c002429e:	e8 f1 fd fe ff       	call   c0014094 <FPU::FPU(char const*)>
c00242a3:	83 c4 10             	add    esp,0x10
c00242a6:	ba 90 b8 02 c0       	mov    edx,0xc002b890
c00242ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00242af:	89 10                	mov    DWORD PTR [eax],edx
c00242b1:	90                   	nop
c00242b2:	83 c4 0c             	add    esp,0xc
c00242b5:	c3                   	ret    

c00242b6 <APIC::disable()>:
c00242b6:	90                   	nop
c00242b7:	c3                   	ret    

c00242b8 <APIC::close(int, int, void*)>:
c00242b8:	55                   	push   ebp
c00242b9:	89 e5                	mov    ebp,esp
c00242bb:	83 ec 08             	sub    esp,0x8
c00242be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00242c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00242c3:	83 c0 3c             	add    eax,0x3c
c00242c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00242c8:	83 ec 0c             	sub    esp,0xc
c00242cb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00242ce:	ff d0                	call   eax
c00242d0:	83 c4 10             	add    esp,0x10
c00242d3:	b8 00 00 00 00       	mov    eax,0x0
c00242d8:	c9                   	leave  
c00242d9:	c3                   	ret    

c00242da <IOAPIC::close(int, int, void*)>:
c00242da:	b8 00 00 00 00       	mov    eax,0x0
c00242df:	c3                   	ret    

c00242e0 <APIC::io_wait()>:
c00242e0:	eb 00                	jmp    c00242e2 <APIC::io_wait()+0x2>
c00242e2:	eb 00                	jmp    c00242e4 <APIC::io_wait()+0x4>
c00242e4:	90                   	nop
c00242e5:	c3                   	ret    

c00242e6 <APIC::getBase()>:
c00242e6:	55                   	push   ebp
c00242e7:	89 e5                	mov    ebp,esp
c00242e9:	83 ec 18             	sub    esp,0x18
c00242ec:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c00242f1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00242f7:	83 e0 08             	and    eax,0x8
c00242fa:	84 c0                	test   al,al
c00242fc:	75 07                	jne    c0024305 <APIC::getBase()+0x1f>
c00242fe:	b8 00 00 00 00       	mov    eax,0x0
c0024303:	eb 21                	jmp    c0024326 <APIC::getBase()+0x40>
c0024305:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c002430a:	83 ec 08             	sub    esp,0x8
c002430d:	6a 1b                	push   0x1b
c002430f:	50                   	push   eax
c0024310:	e8 6d a7 fe ff       	call   c000ea82 <Computer::rdmsr(unsigned int)>
c0024315:	83 c4 10             	add    esp,0x10
c0024318:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002431b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002431e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024321:	25 00 f0 ff ff       	and    eax,0xfffff000
c0024326:	c9                   	leave  
c0024327:	c3                   	ret    

c0024328 <APIC::eoi(unsigned char)>:
c0024328:	55                   	push   ebp
c0024329:	89 e5                	mov    ebp,esp
c002432b:	83 ec 28             	sub    esp,0x28
c002432e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024331:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0024334:	83 ec 0c             	sub    esp,0xc
c0024337:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002433a:	e8 a7 ff ff ff       	call   c00242e6 <APIC::getBase()>
c002433f:	83 c4 10             	add    esp,0x10
c0024342:	05 b0 00 00 00       	add    eax,0xb0
c0024347:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002434a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002434d:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0024353:	90                   	nop
c0024354:	c9                   	leave  
c0024355:	c3                   	ret    

c0024356 <APIC::open(int, int, void*)>:
c0024356:	55                   	push   ebp
c0024357:	89 e5                	mov    ebp,esp
c0024359:	57                   	push   edi
c002435a:	56                   	push   esi
c002435b:	53                   	push   ebx
c002435c:	83 ec 2c             	sub    esp,0x2c
c002435f:	83 ec 0c             	sub    esp,0xc
c0024362:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024365:	e8 7c ff ff ff       	call   c00242e6 <APIC::getBase()>
c002436a:	83 c4 10             	add    esp,0x10
c002436d:	89 c2                	mov    edx,eax
c002436f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024372:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024378:	0f b6 f8             	movzx  edi,al
c002437b:	89 d0                	mov    eax,edx
c002437d:	ba 00 00 00 00       	mov    edx,0x0
c0024382:	89 c1                	mov    ecx,eax
c0024384:	80 e5 ff             	and    ch,0xff
c0024387:	89 cb                	mov    ebx,ecx
c0024389:	0f b6 f2             	movzx  esi,dl
c002438c:	89 d8                	mov    eax,ebx
c002438e:	89 f2                	mov    edx,esi
c0024390:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024393:	8d 5f 08             	lea    ebx,[edi+0x8]
c0024396:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002439a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002439e:	83 e0 00             	and    eax,0x0
c00243a1:	09 d0                	or     eax,edx
c00243a3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00243a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00243aa:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00243b0:	8d 50 01             	lea    edx,[eax+0x1]
c00243b3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00243b6:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00243bc:	0f b6 d0             	movzx  edx,al
c00243bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00243c2:	83 c2 08             	add    edx,0x8
c00243c5:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00243c9:	0f b6 c9             	movzx  ecx,cl
c00243cc:	81 c9 00 00 01 00    	or     ecx,0x10000
c00243d2:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00243d6:	83 ec 0c             	sub    esp,0xc
c00243d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00243dc:	e8 05 ff ff ff       	call   c00242e6 <APIC::getBase()>
c00243e1:	83 c4 10             	add    esp,0x10
c00243e4:	05 f0 00 00 00       	add    eax,0xf0
c00243e9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00243ec:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00243ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00243f1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00243f4:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00243fb:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0024402:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024405:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024408:	89 10                	mov    DWORD PTR [eax],edx
c002440a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0024411:	a1 b0 d4 02 c0       	mov    eax,ds:0xc002d4b0
c0024416:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0024419:	7d 7c                	jge    c0024497 <APIC::open(int, int, void*)+0x141>
c002441b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002441e:	8b 04 85 c0 d4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2b40]
c0024425:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0024428:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002442b:	8b 04 85 c0 d4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2b40]
c0024432:	c1 e8 08             	shr    eax,0x8
c0024435:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0024439:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002443c:	8b 04 85 c0 d4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2b40]
c0024443:	c1 e8 18             	shr    eax,0x18
c0024446:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0024449:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002444d:	75 40                	jne    c002448f <APIC::open(int, int, void*)+0x139>
c002444f:	83 ec 0c             	sub    esp,0xc
c0024452:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024455:	e8 8c fe ff ff       	call   c00242e6 <APIC::getBase()>
c002445a:	83 c4 10             	add    esp,0x10
c002445d:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0024461:	75 07                	jne    c002446a <APIC::open(int, int, void*)+0x114>
c0024463:	ba 60 03 00 00       	mov    edx,0x360
c0024468:	eb 05                	jmp    c002446f <APIC::open(int, int, void*)+0x119>
c002446a:	ba 50 03 00 00       	mov    edx,0x350
c002446f:	01 d0                	add    eax,edx
c0024471:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0024474:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0024477:	8b 00                	mov    eax,DWORD PTR [eax]
c0024479:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002447c:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0024483:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0024487:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002448a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002448d:	89 10                	mov    DWORD PTR [eax],edx
c002448f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0024492:	e9 7a ff ff ff       	jmp    c0024411 <APIC::open(int, int, void*)+0xbb>
c0024497:	b8 00 00 00 00       	mov    eax,0x0
c002449c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002449f:	5b                   	pop    ebx
c00244a0:	5e                   	pop    esi
c00244a1:	5f                   	pop    edi
c00244a2:	5d                   	pop    ebp
c00244a3:	c3                   	ret    

c00244a4 <IOAPIC::IOAPIC()>:
c00244a4:	83 ec 0c             	sub    esp,0xc
c00244a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244ab:	83 ec 08             	sub    esp,0x8
c00244ae:	68 c0 b8 02 c0       	push   0xc002b8c0
c00244b3:	50                   	push   eax
c00244b4:	e8 dd f8 fe ff       	call   c0013d96 <Device::Device(char const*)>
c00244b9:	83 c4 10             	add    esp,0x10
c00244bc:	ba e8 b9 02 c0       	mov    edx,0xc002b9e8
c00244c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244c5:	89 10                	mov    DWORD PTR [eax],edx
c00244c7:	90                   	nop
c00244c8:	83 c4 0c             	add    esp,0xc
c00244cb:	c3                   	ret    

c00244cc <APIC::APIC()>:
c00244cc:	53                   	push   ebx
c00244cd:	83 ec 18             	sub    esp,0x18
c00244d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00244d4:	83 ec 08             	sub    esp,0x8
c00244d7:	68 c8 b8 02 c0       	push   0xc002b8c8
c00244dc:	50                   	push   eax
c00244dd:	e8 0c 00 ff ff       	call   c00144ee <InterruptController::InterruptController(char const*)>
c00244e2:	83 c4 10             	add    esp,0x10
c00244e5:	ba a0 b9 02 c0       	mov    edx,0xc002b9a0
c00244ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00244ee:	89 10                	mov    DWORD PTR [eax],edx
c00244f0:	a0 80 ef 02 c0       	mov    al,ds:0xc002ef80
c00244f5:	83 f0 01             	xor    eax,0x1
c00244f8:	84 c0                	test   al,al
c00244fa:	0f 84 a1 00 00 00    	je     c00245a1 <APIC::APIC()+0xd5>
c0024500:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0024505:	a0 60 d5 02 c0       	mov    al,ds:0xc002d560
c002450a:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002450e:	0f 83 86 00 00 00    	jae    c002459a <APIC::APIC()+0xce>
c0024514:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002451c:	83 ec 0c             	sub    esp,0xc
c002451f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024523:	e8 b2 af fe ff       	call   c000f4da <malloc>
c0024528:	83 c4 10             	add    esp,0x10
c002452b:	89 c3                	mov    ebx,eax
c002452d:	83 ec 0c             	sub    esp,0xc
c0024530:	53                   	push   ebx
c0024531:	e8 6e ff ff ff       	call   c00244a4 <IOAPIC::IOAPIC()>
c0024536:	83 c4 10             	add    esp,0x10
c0024539:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002453d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0024542:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0024546:	89 14 85 60 ef 02 c0 	mov    DWORD PTR [eax*4-0x3ffd10a0],edx
c002454d:	a1 40 ef 02 c0       	mov    eax,ds:0xc002ef40
c0024552:	40                   	inc    eax
c0024553:	a3 40 ef 02 c0       	mov    ds:0xc002ef40,eax
c0024558:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c002455d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0024563:	83 ec 08             	sub    esp,0x8
c0024566:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002456a:	50                   	push   eax
c002456b:	e8 36 f6 fe ff       	call   c0013ba6 <Device::addChild(Device*)>
c0024570:	83 c4 10             	add    esp,0x10
c0024573:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024577:	8b 00                	mov    eax,DWORD PTR [eax]
c0024579:	83 c0 08             	add    eax,0x8
c002457c:	8b 00                	mov    eax,DWORD PTR [eax]
c002457e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0024583:	6a 00                	push   0x0
c0024585:	6a 00                	push   0x0
c0024587:	52                   	push   edx
c0024588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002458c:	ff d0                	call   eax
c002458e:	83 c4 10             	add    esp,0x10
c0024591:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0024595:	e9 6b ff ff ff       	jmp    c0024505 <APIC::APIC()+0x39>
c002459a:	c6 05 80 ef 02 c0 01 	mov    BYTE PTR ds:0xc002ef80,0x1
c00245a1:	90                   	nop
c00245a2:	83 c4 18             	add    esp,0x18
c00245a5:	5b                   	pop    ebx
c00245a6:	c3                   	ret    
c00245a7:	90                   	nop

c00245a8 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00245a8:	55                   	push   ebp
c00245a9:	89 e5                	mov    ebp,esp
c00245ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00245ae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00245b4:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00245b7:	72 1d                	jb     c00245d6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00245b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00245bc:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00245c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00245c5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00245cb:	01 d0                	add    eax,edx
c00245cd:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00245d0:	73 04                	jae    c00245d6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00245d2:	b0 01                	mov    al,0x1
c00245d4:	eb 02                	jmp    c00245d8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00245d6:	b0 00                	mov    al,0x0
c00245d8:	5d                   	pop    ebp
c00245d9:	c3                   	ret    

c00245da <IOAPIC::read(int)>:
c00245da:	55                   	push   ebp
c00245db:	89 e5                	mov    ebp,esp
c00245dd:	83 ec 10             	sub    esp,0x10
c00245e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00245e3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00245e9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00245ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00245ef:	0f b6 d0             	movzx  edx,al
c00245f2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00245f5:	89 10                	mov    DWORD PTR [eax],edx
c00245f7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00245fa:	83 c0 10             	add    eax,0x10
c00245fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00245ff:	c9                   	leave  
c0024600:	c3                   	ret    
c0024601:	90                   	nop

c0024602 <IOAPIC::open(int, int, void*)>:
c0024602:	55                   	push   ebp
c0024603:	89 e5                	mov    ebp,esp
c0024605:	57                   	push   edi
c0024606:	56                   	push   esi
c0024607:	53                   	push   ebx
c0024608:	83 ec 0c             	sub    esp,0xc
c002460b:	83 ec 0c             	sub    esp,0xc
c002460e:	68 f3 b8 02 c0       	push   0xc002b8f3
c0024613:	e8 67 e1 fe ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0024618:	83 c4 10             	add    esp,0x10
c002461b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002461e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024621:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024627:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002462a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024630:	8b 14 85 a0 d5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2a60]
c0024637:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002463a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024640:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024643:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024649:	8b 14 85 20 d6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd29e0]
c0024650:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024653:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024659:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002465c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0024662:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024665:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002466b:	0f b6 f8             	movzx  edi,al
c002466e:	89 d0                	mov    eax,edx
c0024670:	ba 00 00 00 00       	mov    edx,0x0
c0024675:	89 c1                	mov    ecx,eax
c0024677:	80 e5 ff             	and    ch,0xff
c002467a:	89 cb                	mov    ebx,ecx
c002467c:	0f b6 f2             	movzx  esi,dl
c002467f:	89 d8                	mov    eax,ebx
c0024681:	89 f2                	mov    edx,esi
c0024683:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024686:	8d 5f 08             	lea    ebx,[edi+0x8]
c0024689:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002468d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024691:	83 e0 00             	and    eax,0x0
c0024694:	09 d0                	or     eax,edx
c0024696:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002469a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002469d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00246a3:	8d 50 01             	lea    edx,[eax+0x1]
c00246a6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00246a9:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00246af:	0f b6 d0             	movzx  edx,al
c00246b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00246b5:	83 c2 08             	add    edx,0x8
c00246b8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00246bc:	0f b6 c9             	movzx  ecx,cl
c00246bf:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00246c5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00246c9:	83 ec 08             	sub    esp,0x8
c00246cc:	6a 01                	push   0x1
c00246ce:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00246d1:	e8 04 ff ff ff       	call   c00245da <IOAPIC::read(int)>
c00246d6:	83 c4 10             	add    esp,0x10
c00246d9:	c1 f8 10             	sar    eax,0x10
c00246dc:	0f b6 c0             	movzx  eax,al
c00246df:	8d 50 01             	lea    edx,[eax+0x1]
c00246e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00246e5:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00246eb:	b8 00 00 00 00       	mov    eax,0x0
c00246f0:	8d 65 f4             	lea    esp,[ebp-0xc]
c00246f3:	5b                   	pop    ebx
c00246f4:	5e                   	pop    esi
c00246f5:	5f                   	pop    edi
c00246f6:	5d                   	pop    ebp
c00246f7:	c3                   	ret    

c00246f8 <IOAPIC::write(int, int)>:
c00246f8:	55                   	push   ebp
c00246f9:	89 e5                	mov    ebp,esp
c00246fb:	83 ec 10             	sub    esp,0x10
c00246fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024701:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024707:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002470a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002470d:	0f b6 d0             	movzx  edx,al
c0024710:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024713:	89 10                	mov    DWORD PTR [eax],edx
c0024715:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024718:	8d 50 10             	lea    edx,[eax+0x10]
c002471b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002471e:	89 02                	mov    DWORD PTR [edx],eax
c0024720:	90                   	nop
c0024721:	c9                   	leave  
c0024722:	c3                   	ret    
c0024723:	90                   	nop

c0024724 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0024724:	55                   	push   ebp
c0024725:	89 e5                	mov    ebp,esp
c0024727:	53                   	push   ebx
c0024728:	83 ec 2c             	sub    esp,0x2c
c002472b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002472e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0024731:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0024734:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0024737:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002473a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002473d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0024740:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0024743:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024746:	88 d8                	mov    al,bl
c0024748:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002474b:	88 c8                	mov    al,cl
c002474d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0024750:	88 d0                	mov    al,dl
c0024752:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0024755:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0024759:	83 c0 08             	add    eax,0x8
c002475c:	01 c0                	add    eax,eax
c002475e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0024761:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0024765:	83 c0 08             	add    eax,0x8
c0024768:	01 c0                	add    eax,eax
c002476a:	40                   	inc    eax
c002476b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002476e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024771:	50                   	push   eax
c0024772:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024775:	e8 60 fe ff ff       	call   c00245da <IOAPIC::read(int)>
c002477a:	83 c4 08             	add    esp,0x8
c002477d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024780:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0024787:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002478a:	c1 e0 18             	shl    eax,0x18
c002478d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0024790:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024793:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024796:	52                   	push   edx
c0024797:	50                   	push   eax
c0024798:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002479b:	e8 58 ff ff ff       	call   c00246f8 <IOAPIC::write(int, int)>
c00247a0:	83 c4 0c             	add    esp,0xc
c00247a3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00247a6:	50                   	push   eax
c00247a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00247aa:	e8 2b fe ff ff       	call   c00245da <IOAPIC::read(int)>
c00247af:	83 c4 08             	add    esp,0x8
c00247b2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00247b5:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00247bc:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00247c3:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00247ca:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00247ce:	74 09                	je     c00247d9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00247d0:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00247d7:	eb 07                	jmp    c00247e0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00247d9:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00247e0:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00247e4:	74 09                	je     c00247ef <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00247e6:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00247ed:	eb 07                	jmp    c00247f6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00247ef:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00247f6:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00247fd:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0024801:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0024804:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0024807:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002480a:	52                   	push   edx
c002480b:	50                   	push   eax
c002480c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002480f:	e8 e4 fe ff ff       	call   c00246f8 <IOAPIC::write(int, int)>
c0024814:	83 c4 0c             	add    esp,0xc
c0024817:	90                   	nop
c0024818:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002481b:	c9                   	leave  
c002481c:	c3                   	ret    
c002481d:	90                   	nop

c002481e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c002481e:	55                   	push   ebp
c002481f:	89 e5                	mov    ebp,esp
c0024821:	57                   	push   edi
c0024822:	56                   	push   esi
c0024823:	53                   	push   ebx
c0024824:	83 ec 2c             	sub    esp,0x2c
c0024827:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002482a:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002482d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0024831:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0024835:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0024839:	74 5a                	je     c0024895 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002483b:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c002483f:	7f 44                	jg     c0024885 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0024841:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024844:	05 40 be 02 c0       	add    eax,0xc002be40
c0024849:	8a 00                	mov    al,BYTE PTR [eax]
c002484b:	0f b6 c0             	movzx  eax,al
c002484e:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0024851:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024854:	66 8b 84 00 40 d5 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd2ac0]
c002485c:	0f b7 c0             	movzx  eax,ax
c002485f:	83 e0 02             	and    eax,0x2
c0024862:	85 c0                	test   eax,eax
c0024864:	74 04                	je     c002486a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0024866:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c002486a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002486d:	66 8b 84 00 40 d5 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd2ac0]
c0024875:	0f b7 c0             	movzx  eax,ax
c0024878:	83 e0 08             	and    eax,0x8
c002487b:	85 c0                	test   eax,eax
c002487d:	74 16                	je     c0024895 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002487f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0024883:	eb 10                	jmp    c0024895 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0024885:	83 ec 0c             	sub    esp,0xc
c0024888:	68 04 b9 02 c0       	push   0xc002b904
c002488d:	e8 3f 50 ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c0024892:	83 c4 10             	add    esp,0x10
c0024895:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0024899:	a1 40 ef 02 c0       	mov    eax,ds:0xc002ef40
c002489e:	83 ec 08             	sub    esp,0x8
c00248a1:	50                   	push   eax
c00248a2:	68 3c b9 02 c0       	push   0xc002b93c
c00248a7:	e8 d3 de fe ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c00248ac:	83 c4 10             	add    esp,0x10
c00248af:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00248b6:	a1 40 ef 02 c0       	mov    eax,ds:0xc002ef40
c00248bb:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00248be:	7d 67                	jge    c0024927 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00248c0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00248c3:	8b 04 85 60 ef 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd10a0]
c00248ca:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00248cd:	83 ec 08             	sub    esp,0x8
c00248d0:	52                   	push   edx
c00248d1:	50                   	push   eax
c00248d2:	e8 d1 fc ff ff       	call   c00245a8 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00248d7:	83 c4 10             	add    esp,0x10
c00248da:	84 c0                	test   al,al
c00248dc:	74 44                	je     c0024922 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00248de:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00248e1:	8b 1c 85 60 ef 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd10a0]
c00248e8:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00248ec:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00248ef:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00248f3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00248f6:	83 c0 20             	add    eax,0x20
c00248f9:	0f b6 f0             	movzx  esi,al
c00248fc:	b8 00 00 00 00       	mov    eax,0x0
c0024901:	99                   	cdq    
c0024902:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024905:	0f b6 c9             	movzx  ecx,cl
c0024908:	83 ec 04             	sub    esp,0x4
c002490b:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002490e:	57                   	push   edi
c002490f:	56                   	push   esi
c0024910:	52                   	push   edx
c0024911:	50                   	push   eax
c0024912:	51                   	push   ecx
c0024913:	53                   	push   ebx
c0024914:	e8 0b fe ff ff       	call   c0024724 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0024919:	83 c4 20             	add    esp,0x20
c002491c:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0024920:	eb 05                	jmp    c0024927 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0024922:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0024925:	eb 8f                	jmp    c00248b6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0024927:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c002492a:	83 f0 01             	xor    eax,0x1
c002492d:	84 c0                	test   al,al
c002492f:	74 10                	je     c0024941 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0024931:	83 ec 0c             	sub    esp,0xc
c0024934:	68 53 b9 02 c0       	push   0xc002b953
c0024939:	e8 93 4f ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c002493e:	83 c4 10             	add    esp,0x10
c0024941:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0024945:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c002494c:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0024950:	7f 65                	jg     c00249b7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0024952:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024955:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024958:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002495f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024962:	01 ca                	add    edx,ecx
c0024964:	83 c2 54             	add    edx,0x54
c0024967:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c002496b:	85 c0                	test   eax,eax
c002496d:	75 43                	jne    c00249b2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c002496f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024972:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024975:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002497c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002497f:	01 ca                	add    edx,ecx
c0024981:	8d 4a 54             	lea    ecx,[edx+0x54]
c0024984:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0024987:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002498b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002498e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024991:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0024998:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002499b:	01 ca                	add    edx,ecx
c002499d:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00249a3:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00249a6:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00249aa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00249ad:	83 e8 20             	sub    eax,0x20
c00249b0:	eb 1a                	jmp    c00249cc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00249b2:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00249b5:	eb 95                	jmp    c002494c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00249b7:	83 ec 0c             	sub    esp,0xc
c00249ba:	68 60 b9 02 c0       	push   0xc002b960
c00249bf:	e8 0d 4f ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c00249c4:	83 c4 10             	add    esp,0x10
c00249c7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00249cc:	8d 65 f4             	lea    esp,[ebp-0xc]
c00249cf:	5b                   	pop    ebx
c00249d0:	5e                   	pop    esi
c00249d1:	5f                   	pop    edi
c00249d2:	5d                   	pop    ebp
c00249d3:	c3                   	ret    

c00249d4 <PIC::disable()>:
c00249d4:	55                   	push   ebp
c00249d5:	89 e5                	mov    ebp,esp
c00249d7:	83 ec 10             	sub    esp,0x10
c00249da:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00249e0:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00249e4:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00249e7:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00249eb:	ee                   	out    dx,al
c00249ec:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00249f2:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00249f6:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00249f9:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00249fd:	ee                   	out    dx,al
c00249fe:	90                   	nop
c00249ff:	c9                   	leave  
c0024a00:	c3                   	ret    
c0024a01:	90                   	nop

c0024a02 <PIC::close(int, int, void*)>:
c0024a02:	55                   	push   ebp
c0024a03:	89 e5                	mov    ebp,esp
c0024a05:	83 ec 08             	sub    esp,0x8
c0024a08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024a0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0024a0d:	83 c0 3c             	add    eax,0x3c
c0024a10:	8b 00                	mov    eax,DWORD PTR [eax]
c0024a12:	83 ec 0c             	sub    esp,0xc
c0024a15:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024a18:	ff d0                	call   eax
c0024a1a:	83 c4 10             	add    esp,0x10
c0024a1d:	b8 00 00 00 00       	mov    eax,0x0
c0024a22:	c9                   	leave  
c0024a23:	c3                   	ret    

c0024a24 <PIC::PIC()>:
c0024a24:	83 ec 0c             	sub    esp,0xc
c0024a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a2b:	83 ec 08             	sub    esp,0x8
c0024a2e:	68 0c ba 02 c0       	push   0xc002ba0c
c0024a33:	50                   	push   eax
c0024a34:	e8 b5 fa fe ff       	call   c00144ee <InterruptController::InterruptController(char const*)>
c0024a39:	83 c4 10             	add    esp,0x10
c0024a3c:	ba 38 ba 02 c0       	mov    edx,0xc002ba38
c0024a41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a45:	89 10                	mov    DWORD PTR [eax],edx
c0024a47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a4b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024a51:	0f b6 d0             	movzx  edx,al
c0024a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a58:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0024a5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a63:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024a69:	0f b6 d0             	movzx  edx,al
c0024a6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a70:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0024a75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a79:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024a7f:	8d 50 01             	lea    edx,[eax+0x1]
c0024a82:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024a86:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0024a8c:	0f b6 d0             	movzx  edx,al
c0024a8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a93:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0024a97:	83 e1 3f             	and    ecx,0x3f
c0024a9a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0024a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024aa2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024aa8:	0f b6 d0             	movzx  edx,al
c0024aab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024aaf:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0024ab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024aba:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024ac0:	0f b6 d0             	movzx  edx,al
c0024ac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ac7:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0024acc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ad0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024ad6:	8d 50 01             	lea    edx,[eax+0x1]
c0024ad9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024add:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0024ae3:	0f b6 d0             	movzx  edx,al
c0024ae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024aea:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0024aee:	83 e1 3f             	and    ecx,0x3f
c0024af1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0024af5:	90                   	nop
c0024af6:	83 c4 0c             	add    esp,0xc
c0024af9:	c3                   	ret    

c0024afa <PIC::ioWait()>:
c0024afa:	eb 00                	jmp    c0024afc <PIC::ioWait()+0x2>
c0024afc:	eb 00                	jmp    c0024afe <PIC::ioWait()+0x4>
c0024afe:	90                   	nop
c0024aff:	c3                   	ret    

c0024b00 <PIC::getIRQReg(int)>:
c0024b00:	55                   	push   ebp
c0024b01:	89 e5                	mov    ebp,esp
c0024b03:	83 ec 10             	sub    esp,0x10
c0024b06:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024b09:	0f b6 c0             	movzx  eax,al
c0024b0c:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0024b12:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0024b15:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024b18:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024b1c:	ee                   	out    dx,al
c0024b1d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024b20:	0f b6 c0             	movzx  eax,al
c0024b23:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0024b29:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0024b2c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024b2f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024b33:	ee                   	out    dx,al
c0024b34:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0024b3a:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0024b3e:	89 c2                	mov    edx,eax
c0024b40:	ec                   	in     al,dx
c0024b41:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0024b44:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024b47:	0f b6 c0             	movzx  eax,al
c0024b4a:	c1 e0 08             	shl    eax,0x8
c0024b4d:	89 c1                	mov    ecx,eax
c0024b4f:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0024b55:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0024b59:	89 c2                	mov    edx,eax
c0024b5b:	ec                   	in     al,dx
c0024b5c:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0024b5f:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0024b62:	0f b6 c0             	movzx  eax,al
c0024b65:	09 c8                	or     eax,ecx
c0024b67:	c9                   	leave  
c0024b68:	c3                   	ret    
c0024b69:	90                   	nop

c0024b6a <PIC::eoi(unsigned char)>:
c0024b6a:	55                   	push   ebp
c0024b6b:	89 e5                	mov    ebp,esp
c0024b6d:	83 ec 14             	sub    esp,0x14
c0024b70:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024b73:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0024b76:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0024b7a:	75 1e                	jne    c0024b9a <PIC::eoi(unsigned char)+0x30>
c0024b7c:	6a 0b                	push   0xb
c0024b7e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b81:	e8 7a ff ff ff       	call   c0024b00 <PIC::getIRQReg(int)>
c0024b86:	83 c4 08             	add    esp,0x8
c0024b89:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0024b8d:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0024b91:	25 80 00 00 00       	and    eax,0x80
c0024b96:	85 c0                	test   eax,eax
c0024b98:	74 5f                	je     c0024bf9 <PIC::eoi(unsigned char)+0x8f>
c0024b9a:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0024b9e:	75 2d                	jne    c0024bcd <PIC::eoi(unsigned char)+0x63>
c0024ba0:	6a 0b                	push   0xb
c0024ba2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024ba5:	e8 56 ff ff ff       	call   c0024b00 <PIC::getIRQReg(int)>
c0024baa:	83 c4 08             	add    esp,0x8
c0024bad:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0024bb1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024bb4:	66 85 c0             	test   ax,ax
c0024bb7:	78 14                	js     c0024bcd <PIC::eoi(unsigned char)+0x63>
c0024bb9:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0024bbf:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0024bc3:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024bc6:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0024bca:	ee                   	out    dx,al
c0024bcb:	eb 2d                	jmp    c0024bfa <PIC::eoi(unsigned char)+0x90>
c0024bcd:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0024bd1:	76 12                	jbe    c0024be5 <PIC::eoi(unsigned char)+0x7b>
c0024bd3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0024bd9:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0024bdd:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024be0:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024be4:	ee                   	out    dx,al
c0024be5:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0024beb:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0024bef:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024bf2:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024bf6:	ee                   	out    dx,al
c0024bf7:	eb 01                	jmp    c0024bfa <PIC::eoi(unsigned char)+0x90>
c0024bf9:	90                   	nop
c0024bfa:	c9                   	leave  
c0024bfb:	c3                   	ret    

c0024bfc <PIC::remap()>:
c0024bfc:	55                   	push   ebp
c0024bfd:	89 e5                	mov    ebp,esp
c0024bff:	83 ec 48             	sub    esp,0x48
c0024c02:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0024c09:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0024c10:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0024c16:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0024c19:	89 c2                	mov    edx,eax
c0024c1b:	ec                   	in     al,dx
c0024c1c:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0024c1f:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0024c22:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0024c25:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0024c2b:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0024c2e:	89 c2                	mov    edx,eax
c0024c30:	ec                   	in     al,dx
c0024c31:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0024c34:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0024c37:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0024c3a:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0024c40:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0024c44:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0024c47:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0024c4a:	ee                   	out    dx,al
c0024c4b:	83 ec 0c             	sub    esp,0xc
c0024c4e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024c51:	e8 a4 fe ff ff       	call   c0024afa <PIC::ioWait()>
c0024c56:	83 c4 10             	add    esp,0x10
c0024c59:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0024c5f:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0024c63:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0024c66:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0024c69:	ee                   	out    dx,al
c0024c6a:	83 ec 0c             	sub    esp,0xc
c0024c6d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024c70:	e8 85 fe ff ff       	call   c0024afa <PIC::ioWait()>
c0024c75:	83 c4 10             	add    esp,0x10
c0024c78:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0024c7b:	0f b6 c0             	movzx  eax,al
c0024c7e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0024c84:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0024c87:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0024c8a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0024c8d:	ee                   	out    dx,al
c0024c8e:	83 ec 0c             	sub    esp,0xc
c0024c91:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024c94:	e8 61 fe ff ff       	call   c0024afa <PIC::ioWait()>
c0024c99:	83 c4 10             	add    esp,0x10
c0024c9c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024c9f:	0f b6 c0             	movzx  eax,al
c0024ca2:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0024ca8:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0024cab:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0024cae:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0024cb1:	ee                   	out    dx,al
c0024cb2:	83 ec 0c             	sub    esp,0xc
c0024cb5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024cb8:	e8 3d fe ff ff       	call   c0024afa <PIC::ioWait()>
c0024cbd:	83 c4 10             	add    esp,0x10
c0024cc0:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0024cc6:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0024cca:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0024ccd:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0024cd0:	ee                   	out    dx,al
c0024cd1:	83 ec 0c             	sub    esp,0xc
c0024cd4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024cd7:	e8 1e fe ff ff       	call   c0024afa <PIC::ioWait()>
c0024cdc:	83 c4 10             	add    esp,0x10
c0024cdf:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0024ce5:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0024ce9:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0024cec:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024cef:	ee                   	out    dx,al
c0024cf0:	83 ec 0c             	sub    esp,0xc
c0024cf3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024cf6:	e8 ff fd ff ff       	call   c0024afa <PIC::ioWait()>
c0024cfb:	83 c4 10             	add    esp,0x10
c0024cfe:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0024d04:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0024d08:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0024d0b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0024d0e:	ee                   	out    dx,al
c0024d0f:	83 ec 0c             	sub    esp,0xc
c0024d12:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024d15:	e8 e0 fd ff ff       	call   c0024afa <PIC::ioWait()>
c0024d1a:	83 c4 10             	add    esp,0x10
c0024d1d:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0024d23:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0024d27:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0024d2a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0024d2d:	ee                   	out    dx,al
c0024d2e:	83 ec 0c             	sub    esp,0xc
c0024d31:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024d34:	e8 c1 fd ff ff       	call   c0024afa <PIC::ioWait()>
c0024d39:	83 c4 10             	add    esp,0x10
c0024d3c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0024d40:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0024d46:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0024d49:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0024d4c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024d4f:	ee                   	out    dx,al
c0024d50:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0024d54:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0024d5a:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0024d5d:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0024d60:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0024d63:	ee                   	out    dx,al
c0024d64:	90                   	nop
c0024d65:	c9                   	leave  
c0024d66:	c3                   	ret    
c0024d67:	90                   	nop

c0024d68 <PIC::open(int, int, void*)>:
c0024d68:	55                   	push   ebp
c0024d69:	89 e5                	mov    ebp,esp
c0024d6b:	83 ec 18             	sub    esp,0x18
c0024d6e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0024d74:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0024d78:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024d7b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024d7f:	ee                   	out    dx,al
c0024d80:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0024d86:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0024d8a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024d8d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024d91:	ee                   	out    dx,al
c0024d92:	83 ec 0c             	sub    esp,0xc
c0024d95:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024d98:	e8 5f fe ff ff       	call   c0024bfc <PIC::remap()>
c0024d9d:	83 c4 10             	add    esp,0x10
c0024da0:	b8 00 00 00 00       	mov    eax,0x0
c0024da5:	c9                   	leave  
c0024da6:	c3                   	ret    
c0024da7:	90                   	nop

c0024da8 <APICTimer::close(int, int, void*)>:
c0024da8:	b8 00 00 00 00       	mov    eax,0x0
c0024dad:	c3                   	ret    

c0024dae <apicTimerHandler(regs*, void*)>:
c0024dae:	83 ec 0c             	sub    esp,0xc
c0024db1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024db5:	8b 00                	mov    eax,DWORD PTR [eax]
c0024db7:	99                   	cdq    
c0024db8:	52                   	push   edx
c0024db9:	50                   	push   eax
c0024dba:	6a 00                	push   0x0
c0024dbc:	68 00 ca 9a 3b       	push   0x3b9aca00
c0024dc1:	e8 86 07 00 00       	call   c002554c <__udivdi3>
c0024dc6:	83 c4 10             	add    esp,0x10
c0024dc9:	83 ec 08             	sub    esp,0x8
c0024dcc:	52                   	push   edx
c0024dcd:	50                   	push   eax
c0024dce:	e8 1a 16 ff ff       	call   c00163ed <timerHandler(unsigned long long)>
c0024dd3:	83 c4 10             	add    esp,0x10
c0024dd6:	90                   	nop
c0024dd7:	83 c4 0c             	add    esp,0xc
c0024dda:	c3                   	ret    
c0024ddb:	90                   	nop

c0024ddc <APICTimer::write(int)>:
c0024ddc:	53                   	push   ebx
c0024ddd:	83 ec 28             	sub    esp,0x28
c0024de0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024de4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0024de8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024dee:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c0024df3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024df9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0024dff:	83 ec 0c             	sub    esp,0xc
c0024e02:	50                   	push   eax
c0024e03:	e8 de f4 ff ff       	call   c00242e6 <APIC::getBase()>
c0024e08:	83 c4 10             	add    esp,0x10
c0024e0b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024e0f:	a1 70 d2 02 c0       	mov    eax,ds:0xc002d270
c0024e14:	8b 15 74 d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d274
c0024e1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024e1e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0024e22:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024e26:	05 e0 03 00 00       	add    eax,0x3e0
c0024e2b:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0024e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024e35:	05 80 03 00 00       	add    eax,0x380
c0024e3a:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0024e40:	fb                   	sti    
c0024e41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e45:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0024e49:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0024e4e:	83 d2 00             	adc    edx,0x0
c0024e51:	89 c1                	mov    ecx,eax
c0024e53:	89 d3                	mov    ebx,edx
c0024e55:	a1 70 d2 02 c0       	mov    eax,ds:0xc002d270
c0024e5a:	8b 15 74 d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d274
c0024e60:	39 c8                	cmp    eax,ecx
c0024e62:	89 d0                	mov    eax,edx
c0024e64:	19 d8                	sbb    eax,ebx
c0024e66:	73 02                	jae    c0024e6a <APICTimer::write(int)+0x8e>
c0024e68:	eb d7                	jmp    c0024e41 <APICTimer::write(int)+0x65>
c0024e6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024e6e:	05 20 03 00 00       	add    eax,0x320
c0024e73:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0024e79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024e7d:	05 90 03 00 00       	add    eax,0x390
c0024e82:	8b 00                	mov    eax,DWORD PTR [eax]
c0024e84:	f7 d0                	not    eax
c0024e86:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024e8a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024e8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024e92:	ba 00 00 00 00       	mov    edx,0x0
c0024e97:	f7 f3                	div    ebx
c0024e99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024e9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024ea1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024ea7:	0d 00 00 02 00       	or     eax,0x20000
c0024eac:	89 c2                	mov    edx,eax
c0024eae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024eb2:	05 20 03 00 00       	add    eax,0x320
c0024eb7:	89 10                	mov    DWORD PTR [eax],edx
c0024eb9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024ebd:	05 e0 03 00 00       	add    eax,0x3e0
c0024ec2:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0024ec8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024ecc:	05 80 03 00 00       	add    eax,0x380
c0024ed1:	89 c2                	mov    edx,eax
c0024ed3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024ed7:	89 02                	mov    DWORD PTR [edx],eax
c0024ed9:	90                   	nop
c0024eda:	83 c4 28             	add    esp,0x28
c0024edd:	5b                   	pop    ebx
c0024ede:	c3                   	ret    
c0024edf:	90                   	nop

c0024ee0 <APICTimer::open(int, int, void*)>:
c0024ee0:	57                   	push   edi
c0024ee1:	56                   	push   esi
c0024ee2:	53                   	push   ebx
c0024ee3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ee7:	8b 00                	mov    eax,DWORD PTR [eax]
c0024ee9:	83 c0 24             	add    eax,0x24
c0024eec:	8b 00                	mov    eax,DWORD PTR [eax]
c0024eee:	83 ec 08             	sub    esp,0x8
c0024ef1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024ef5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024ef9:	ff d0                	call   eax
c0024efb:	83 c4 10             	add    esp,0x10
c0024efe:	a1 e8 cb 02 c0       	mov    eax,ds:0xc002cbe8
c0024f03:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024f09:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0024f0f:	83 ec 0c             	sub    esp,0xc
c0024f12:	50                   	push   eax
c0024f13:	e8 ce f3 ff ff       	call   c00242e6 <APIC::getBase()>
c0024f18:	83 c4 10             	add    esp,0x10
c0024f1b:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0024f21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f25:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024f2b:	0f b6 f8             	movzx  edi,al
c0024f2e:	89 d0                	mov    eax,edx
c0024f30:	ba 00 00 00 00       	mov    edx,0x0
c0024f35:	89 c1                	mov    ecx,eax
c0024f37:	80 e5 ff             	and    ch,0xff
c0024f3a:	89 cb                	mov    ebx,ecx
c0024f3c:	0f b6 f2             	movzx  esi,dl
c0024f3f:	89 d8                	mov    eax,ebx
c0024f41:	89 f2                	mov    edx,esi
c0024f43:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024f47:	8d 5f 08             	lea    ebx,[edi+0x8]
c0024f4a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0024f4e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024f52:	83 e0 00             	and    eax,0x0
c0024f55:	09 d0                	or     eax,edx
c0024f57:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024f5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f5f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024f65:	8d 50 01             	lea    edx,[eax+0x1]
c0024f68:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024f6c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024f72:	0f b6 d0             	movzx  edx,al
c0024f75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f79:	83 c2 08             	add    edx,0x8
c0024f7c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024f80:	0f b6 c9             	movzx  ecx,cl
c0024f83:	81 c9 00 00 01 00    	or     ecx,0x10000
c0024f89:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024f8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f91:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0024f95:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024f9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f9f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024fa3:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0024fa9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024fad:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0024fb3:	83 ec 0c             	sub    esp,0xc
c0024fb6:	51                   	push   ecx
c0024fb7:	6a 01                	push   0x1
c0024fb9:	68 ae 4d 02 c0       	push   0xc0024dae
c0024fbe:	52                   	push   edx
c0024fbf:	50                   	push   eax
c0024fc0:	e8 65 eb fe ff       	call   c0013b2a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024fc5:	83 c4 20             	add    esp,0x20
c0024fc8:	89 c2                	mov    edx,eax
c0024fca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fce:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0024fd4:	b8 00 00 00 00       	mov    eax,0x0
c0024fd9:	5b                   	pop    ebx
c0024fda:	5e                   	pop    esi
c0024fdb:	5f                   	pop    edi
c0024fdc:	c3                   	ret    
c0024fdd:	90                   	nop

c0024fde <APICTimer::APICTimer()>:
c0024fde:	83 ec 0c             	sub    esp,0xc
c0024fe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fe5:	83 ec 08             	sub    esp,0x8
c0024fe8:	68 78 ba 02 c0       	push   0xc002ba78
c0024fed:	50                   	push   eax
c0024fee:	e8 6b 13 ff ff       	call   c001635e <Timer::Timer(char const*)>
c0024ff3:	83 c4 10             	add    esp,0x10
c0024ff6:	ba 8c ba 02 c0       	mov    edx,0xc002ba8c
c0024ffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fff:	89 10                	mov    DWORD PTR [eax],edx
c0025001:	90                   	nop
c0025002:	83 c4 0c             	add    esp,0xc
c0025005:	c3                   	ret    

c0025006 <PIT::write(int)>:
c0025006:	83 ec 10             	sub    esp,0x10
c0025009:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002500d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025011:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025017:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002501b:	a3 84 ef 02 c0       	mov    ds:0xc002ef84,eax
c0025020:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0025025:	99                   	cdq    
c0025026:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002502a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002502e:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0025035:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002503a:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002503e:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0025043:	ee                   	out    dx,al
c0025044:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025048:	0f b6 c0             	movzx  eax,al
c002504b:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0025052:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0025056:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002505a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002505f:	ee                   	out    dx,al
c0025060:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025064:	c1 f8 08             	sar    eax,0x8
c0025067:	0f b6 c0             	movzx  eax,al
c002506a:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0025071:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0025075:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0025079:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002507e:	ee                   	out    dx,al
c002507f:	90                   	nop
c0025080:	83 c4 10             	add    esp,0x10
c0025083:	c3                   	ret    

c0025084 <pitHandler(regs*, void*)>:
c0025084:	83 ec 0c             	sub    esp,0xc
c0025087:	a1 84 ef 02 c0       	mov    eax,ds:0xc002ef84
c002508c:	99                   	cdq    
c002508d:	52                   	push   edx
c002508e:	50                   	push   eax
c002508f:	6a 00                	push   0x0
c0025091:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025096:	e8 b1 04 00 00       	call   c002554c <__udivdi3>
c002509b:	83 c4 10             	add    esp,0x10
c002509e:	83 ec 08             	sub    esp,0x8
c00250a1:	52                   	push   edx
c00250a2:	50                   	push   eax
c00250a3:	e8 45 13 ff ff       	call   c00163ed <timerHandler(unsigned long long)>
c00250a8:	83 c4 10             	add    esp,0x10
c00250ab:	90                   	nop
c00250ac:	83 c4 0c             	add    esp,0xc
c00250af:	c3                   	ret    

c00250b0 <PIT::open(int, int, void*)>:
c00250b0:	83 ec 0c             	sub    esp,0xc
c00250b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00250b9:	83 c0 24             	add    eax,0x24
c00250bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00250be:	83 ec 08             	sub    esp,0x8
c00250c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00250c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00250c9:	ff d0                	call   eax
c00250cb:	83 c4 10             	add    esp,0x10
c00250ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250d2:	83 ec 0c             	sub    esp,0xc
c00250d5:	6a 00                	push   0x0
c00250d7:	6a 01                	push   0x1
c00250d9:	68 84 50 02 c0       	push   0xc0025084
c00250de:	6a 00                	push   0x0
c00250e0:	50                   	push   eax
c00250e1:	e8 44 ea fe ff       	call   c0013b2a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00250e6:	83 c4 20             	add    esp,0x20
c00250e9:	89 c2                	mov    edx,eax
c00250eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250ef:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00250f5:	b8 00 00 00 00       	mov    eax,0x0
c00250fa:	83 c4 0c             	add    esp,0xc
c00250fd:	c3                   	ret    

c00250fe <PIT::close(int, int, void*)>:
c00250fe:	83 ec 0c             	sub    esp,0xc
c0025101:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025105:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002510f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025113:	6a 01                	push   0x1
c0025115:	68 84 50 02 c0       	push   0xc0025084
c002511a:	6a 00                	push   0x0
c002511c:	50                   	push   eax
c002511d:	e8 46 ea fe ff       	call   c0013b68 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0025122:	83 c4 10             	add    esp,0x10
c0025125:	b8 00 00 00 00       	mov    eax,0x0
c002512a:	83 c4 0c             	add    esp,0xc
c002512d:	c3                   	ret    

c002512e <PIT::PIT()>:
c002512e:	83 ec 0c             	sub    esp,0xc
c0025131:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025135:	83 ec 08             	sub    esp,0x8
c0025138:	68 b4 ba 02 c0       	push   0xc002bab4
c002513d:	50                   	push   eax
c002513e:	e8 1b 12 ff ff       	call   c001635e <Timer::Timer(char const*)>
c0025143:	83 c4 10             	add    esp,0x10
c0025146:	ba dc ba 02 c0       	mov    edx,0xc002badc
c002514b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002514f:	89 10                	mov    DWORD PTR [eax],edx
c0025151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025155:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002515b:	0f b6 d0             	movzx  edx,al
c002515e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025162:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0025169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002516d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025173:	0f b6 d0             	movzx  edx,al
c0025176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002517a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002517f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025183:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025189:	8d 50 01             	lea    edx,[eax+0x1]
c002518c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025190:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025196:	0f b6 d0             	movzx  edx,al
c0025199:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002519d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00251a1:	83 e1 3f             	and    ecx,0x3f
c00251a4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00251a8:	90                   	nop
c00251a9:	83 c4 0c             	add    esp,0xc
c00251ac:	c3                   	ret    
c00251ad:	66 90                	xchg   ax,ax
c00251af:	90                   	nop

c00251b0 <avxDetect>:
c00251b0:	b8 00 00 00 00       	mov    eax,0x0
c00251b5:	c3                   	ret    

c00251b6 <avxSave>:
c00251b6:	c3                   	ret    

c00251b7 <avxLoad>:
c00251b7:	c3                   	ret    

c00251b8 <avxInit>:
c00251b8:	c3                   	ret    

c00251b9 <avxClose>:
c00251b9:	c3                   	ret    

c00251ba <wouldSheSayYes>:
c00251ba:	c3                   	ret    
c00251bb:	49                   	dec    ecx
c00251bc:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00251c0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00251c4:	75 20                	jne    c00251e6 <sseDetect.noSSE+0x1>
c00251c6:	4e                   	dec    esi
c00251c7:	79 61                	jns    c002522a <x87Detect+0x14>
c00251c9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00251ce:	66 90                	xchg   ax,ax

c00251d0 <absolutelyNoChanceInHell>:
c00251d0:	b8 01 00 00 00       	mov    eax,0x1
c00251d5:	0f a2                	cpuid  
c00251d7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00251dd:	74 06                	je     c00251e5 <sseDetect.noSSE>
c00251df:	b8 01 00 00 00       	mov    eax,0x1
c00251e4:	c3                   	ret    

c00251e5 <sseDetect.noSSE>:
c00251e5:	31 c0                	xor    eax,eax
c00251e7:	c3                   	ret    

c00251e8 <sseSave>:
c00251e8:	0f ae 44 24 08       	fxsave [esp+0x8]
c00251ed:	c3                   	ret    

c00251ee <sseLoad>:
c00251ee:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c00251f3:	c3                   	ret    

c00251f4 <sseInit>:
c00251f4:	e8 43 00 00 00       	call   c002523c <x87Init>
c00251f9:	0f 20 e0             	mov    eax,cr4
c00251fc:	66 0d 00 06          	or     ax,0x600
c0025200:	0f 22 e0             	mov    cr4,eax
c0025203:	c3                   	ret    

c0025204 <sseClose>:
c0025204:	c3                   	ret    
c0025205:	66 90                	xchg   ax,ax
c0025207:	66 90                	xchg   ax,ax
c0025209:	66 90                	xchg   ax,ax
c002520b:	66 90                	xchg   ax,ax
c002520d:	66 90                	xchg   ax,ax
c002520f:	90                   	nop

c0025210 <value_37F>:
c0025210:	7f 03                	jg     c0025215 <value_37A+0x1>

c0025212 <value_37E>:
c0025212:	7e 03                	jle    c0025217 <x87Detect+0x1>

c0025214 <value_37A>:
c0025214:	7a 03                	jp     c0025219 <x87Detect+0x3>

c0025216 <x87Detect>:
c0025216:	b8 01 00 00 00       	mov    eax,0x1
c002521b:	0f a2                	cpuid  
c002521d:	f7 c2 01 00 00 00    	test   edx,0x1
c0025223:	74 06                	je     c002522b <x87Detect.nox87>
c0025225:	b8 01 00 00 00       	mov    eax,0x1
c002522a:	c3                   	ret    

c002522b <x87Detect.nox87>:
c002522b:	b8 00 00 00 00       	mov    eax,0x0
c0025230:	c3                   	ret    

c0025231 <x87Save>:
c0025231:	9b dd 74 24 08       	fsave  [esp+0x8]
c0025236:	c3                   	ret    

c0025237 <x87Load>:
c0025237:	dd 64 24 08          	frstor [esp+0x8]
c002523b:	c3                   	ret    

c002523c <x87Init>:
c002523c:	9b db e3             	finit  
c002523f:	0f 20 c0             	mov    eax,cr0
c0025242:	66 25 fb ff          	and    ax,0xfffb
c0025246:	66 0d 22 00          	or     ax,0x22
c002524a:	0f 22 c0             	mov    cr0,eax
c002524d:	0f 06                	clts   
c002524f:	d9 2d 14 52 02 c0    	fldcw  WORD PTR ds:0xc0025214
c0025255:	c3                   	ret    

c0025256 <x87Close>:
c0025256:	c3                   	ret    
c0025257:	90                   	nop

c0025258 <__do_global_ctors_aux>:
c0025258:	a1 4c 7d 02 c0       	mov    eax,ds:0xc0027d4c
c002525d:	83 f8 ff             	cmp    eax,0xffffffff
c0025260:	74 1a                	je     c002527c <__do_global_ctors_aux+0x24>
c0025262:	55                   	push   ebp
c0025263:	89 e5                	mov    ebp,esp
c0025265:	53                   	push   ebx
c0025266:	52                   	push   edx
c0025267:	bb 4c 7d 02 c0       	mov    ebx,0xc0027d4c
c002526c:	ff d0                	call   eax
c002526e:	83 eb 04             	sub    ebx,0x4
c0025271:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025273:	83 f8 ff             	cmp    eax,0xffffffff
c0025276:	75 f4                	jne    c002526c <__do_global_ctors_aux+0x14>
c0025278:	58                   	pop    eax
c0025279:	5b                   	pop    ebx
c002527a:	5d                   	pop    ebp
c002527b:	c3                   	ret    
c002527c:	c3                   	ret    
c002527d:	66 90                	xchg   ax,ax
c002527f:	90                   	nop

c0025280 <__divdi3>:
c0025280:	55                   	push   ebp
c0025281:	57                   	push   edi
c0025282:	56                   	push   esi
c0025283:	53                   	push   ebx
c0025284:	83 ec 1c             	sub    esp,0x1c
c0025287:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002528b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002528f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0025292:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0025296:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002529a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002529e:	85 db                	test   ebx,ebx
c00252a0:	0f 88 8e 00 00 00    	js     c0025334 <__divdi3+0xb4>
c00252a6:	89 dd                	mov    ebp,ebx
c00252a8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00252b0:	89 d3                	mov    ebx,edx
c00252b2:	85 d2                	test   edx,edx
c00252b4:	79 0d                	jns    c00252c3 <__divdi3+0x43>
c00252b6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00252ba:	f7 d8                	neg    eax
c00252bc:	83 d2 00             	adc    edx,0x0
c00252bf:	f7 da                	neg    edx
c00252c1:	89 d3                	mov    ebx,edx
c00252c3:	89 c7                	mov    edi,eax
c00252c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00252c8:	85 db                	test   ebx,ebx
c00252ca:	75 48                	jne    c0025314 <__divdi3+0x94>
c00252cc:	39 ef                	cmp    edi,ebp
c00252ce:	76 24                	jbe    c00252f4 <__divdi3+0x74>
c00252d0:	89 ea                	mov    edx,ebp
c00252d2:	f7 f7                	div    edi
c00252d4:	89 c1                	mov    ecx,eax
c00252d6:	31 f6                	xor    esi,esi
c00252d8:	89 c8                	mov    eax,ecx
c00252da:	89 f2                	mov    edx,esi
c00252dc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00252e0:	85 c9                	test   ecx,ecx
c00252e2:	74 07                	je     c00252eb <__divdi3+0x6b>
c00252e4:	f7 d8                	neg    eax
c00252e6:	83 d2 00             	adc    edx,0x0
c00252e9:	f7 da                	neg    edx
c00252eb:	83 c4 1c             	add    esp,0x1c
c00252ee:	5b                   	pop    ebx
c00252ef:	5e                   	pop    esi
c00252f0:	5f                   	pop    edi
c00252f1:	5d                   	pop    ebp
c00252f2:	c3                   	ret    
c00252f3:	90                   	nop
c00252f4:	85 ff                	test   edi,edi
c00252f6:	75 0b                	jne    c0025303 <__divdi3+0x83>
c00252f8:	b8 01 00 00 00       	mov    eax,0x1
c00252fd:	31 d2                	xor    edx,edx
c00252ff:	f7 f3                	div    ebx
c0025301:	89 c7                	mov    edi,eax
c0025303:	31 d2                	xor    edx,edx
c0025305:	89 e8                	mov    eax,ebp
c0025307:	f7 f7                	div    edi
c0025309:	89 c6                	mov    esi,eax
c002530b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002530e:	f7 f7                	div    edi
c0025310:	89 c1                	mov    ecx,eax
c0025312:	eb c4                	jmp    c00252d8 <__divdi3+0x58>
c0025314:	39 eb                	cmp    ebx,ebp
c0025316:	77 3c                	ja     c0025354 <__divdi3+0xd4>
c0025318:	0f bd f3             	bsr    esi,ebx
c002531b:	83 f6 1f             	xor    esi,0x1f
c002531e:	75 40                	jne    c0025360 <__divdi3+0xe0>
c0025320:	39 eb                	cmp    ebx,ebp
c0025322:	72 09                	jb     c002532d <__divdi3+0xad>
c0025324:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0025327:	0f 87 97 00 00 00    	ja     c00253c4 <__divdi3+0x144>
c002532d:	b9 01 00 00 00       	mov    ecx,0x1
c0025332:	eb a4                	jmp    c00252d8 <__divdi3+0x58>
c0025334:	f7 d9                	neg    ecx
c0025336:	83 d3 00             	adc    ebx,0x0
c0025339:	f7 db                	neg    ebx
c002533b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002533e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0025342:	89 dd                	mov    ebp,ebx
c0025344:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002534c:	e9 5f ff ff ff       	jmp    c00252b0 <__divdi3+0x30>
c0025351:	8d 76 00             	lea    esi,[esi+0x0]
c0025354:	31 f6                	xor    esi,esi
c0025356:	31 c9                	xor    ecx,ecx
c0025358:	e9 7b ff ff ff       	jmp    c00252d8 <__divdi3+0x58>
c002535d:	8d 76 00             	lea    esi,[esi+0x0]
c0025360:	b8 20 00 00 00       	mov    eax,0x20
c0025365:	29 f0                	sub    eax,esi
c0025367:	89 f1                	mov    ecx,esi
c0025369:	d3 e3                	shl    ebx,cl
c002536b:	89 fa                	mov    edx,edi
c002536d:	88 c1                	mov    cl,al
c002536f:	d3 ea                	shr    edx,cl
c0025371:	09 da                	or     edx,ebx
c0025373:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025377:	89 f1                	mov    ecx,esi
c0025379:	d3 e7                	shl    edi,cl
c002537b:	89 eb                	mov    ebx,ebp
c002537d:	88 c1                	mov    cl,al
c002537f:	d3 eb                	shr    ebx,cl
c0025381:	89 f1                	mov    ecx,esi
c0025383:	d3 e5                	shl    ebp,cl
c0025385:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0025388:	88 c1                	mov    cl,al
c002538a:	d3 ea                	shr    edx,cl
c002538c:	09 d5                	or     ebp,edx
c002538e:	89 e8                	mov    eax,ebp
c0025390:	89 da                	mov    edx,ebx
c0025392:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0025396:	89 d3                	mov    ebx,edx
c0025398:	89 c5                	mov    ebp,eax
c002539a:	f7 e7                	mul    edi
c002539c:	39 d3                	cmp    ebx,edx
c002539e:	72 18                	jb     c00253b8 <__divdi3+0x138>
c00253a0:	74 0a                	je     c00253ac <__divdi3+0x12c>
c00253a2:	89 e9                	mov    ecx,ebp
c00253a4:	31 f6                	xor    esi,esi
c00253a6:	e9 2d ff ff ff       	jmp    c00252d8 <__divdi3+0x58>
c00253ab:	90                   	nop
c00253ac:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00253af:	89 f1                	mov    ecx,esi
c00253b1:	d3 e7                	shl    edi,cl
c00253b3:	39 c7                	cmp    edi,eax
c00253b5:	73 eb                	jae    c00253a2 <__divdi3+0x122>
c00253b7:	90                   	nop
c00253b8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00253bb:	31 f6                	xor    esi,esi
c00253bd:	e9 16 ff ff ff       	jmp    c00252d8 <__divdi3+0x58>
c00253c2:	66 90                	xchg   ax,ax
c00253c4:	31 c9                	xor    ecx,ecx
c00253c6:	e9 0d ff ff ff       	jmp    c00252d8 <__divdi3+0x58>
c00253cb:	90                   	nop

c00253cc <__moddi3>:
c00253cc:	55                   	push   ebp
c00253cd:	57                   	push   edi
c00253ce:	56                   	push   esi
c00253cf:	53                   	push   ebx
c00253d0:	83 ec 2c             	sub    esp,0x2c
c00253d3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00253d7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00253db:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00253df:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00253e3:	85 db                	test   ebx,ebx
c00253e5:	0f 88 85 00 00 00    	js     c0025470 <__moddi3+0xa4>
c00253eb:	89 de                	mov    esi,ebx
c00253ed:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00253f5:	89 d7                	mov    edi,edx
c00253f7:	85 d2                	test   edx,edx
c00253f9:	79 09                	jns    c0025404 <__moddi3+0x38>
c00253fb:	f7 d8                	neg    eax
c00253fd:	83 d2 00             	adc    edx,0x0
c0025400:	f7 da                	neg    edx
c0025402:	89 d7                	mov    edi,edx
c0025404:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025408:	89 cd                	mov    ebp,ecx
c002540a:	85 ff                	test   edi,edi
c002540c:	75 52                	jne    c0025460 <__moddi3+0x94>
c002540e:	89 c3                	mov    ebx,eax
c0025410:	39 f0                	cmp    eax,esi
c0025412:	76 24                	jbe    c0025438 <__moddi3+0x6c>
c0025414:	89 c8                	mov    eax,ecx
c0025416:	89 f2                	mov    edx,esi
c0025418:	f7 f3                	div    ebx
c002541a:	89 d6                	mov    esi,edx
c002541c:	89 f0                	mov    eax,esi
c002541e:	31 d2                	xor    edx,edx
c0025420:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025424:	85 c9                	test   ecx,ecx
c0025426:	74 07                	je     c002542f <__moddi3+0x63>
c0025428:	f7 d8                	neg    eax
c002542a:	83 d2 00             	adc    edx,0x0
c002542d:	f7 da                	neg    edx
c002542f:	83 c4 2c             	add    esp,0x2c
c0025432:	5b                   	pop    ebx
c0025433:	5e                   	pop    esi
c0025434:	5f                   	pop    edi
c0025435:	5d                   	pop    ebp
c0025436:	c3                   	ret    
c0025437:	90                   	nop
c0025438:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002543c:	85 db                	test   ebx,ebx
c002543e:	75 0d                	jne    c002544d <__moddi3+0x81>
c0025440:	b8 01 00 00 00       	mov    eax,0x1
c0025445:	31 d2                	xor    edx,edx
c0025447:	f7 f7                	div    edi
c0025449:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002544d:	89 f0                	mov    eax,esi
c002544f:	31 d2                	xor    edx,edx
c0025451:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0025455:	f7 f7                	div    edi
c0025457:	89 e8                	mov    eax,ebp
c0025459:	f7 f7                	div    edi
c002545b:	89 d6                	mov    esi,edx
c002545d:	eb bd                	jmp    c002541c <__moddi3+0x50>
c002545f:	90                   	nop
c0025460:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0025464:	39 f7                	cmp    edi,esi
c0025466:	76 20                	jbe    c0025488 <__moddi3+0xbc>
c0025468:	89 c8                	mov    eax,ecx
c002546a:	89 f2                	mov    edx,esi
c002546c:	eb b2                	jmp    c0025420 <__moddi3+0x54>
c002546e:	66 90                	xchg   ax,ax
c0025470:	f7 d9                	neg    ecx
c0025472:	83 d3 00             	adc    ebx,0x0
c0025475:	f7 db                	neg    ebx
c0025477:	89 de                	mov    esi,ebx
c0025479:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0025481:	e9 6f ff ff ff       	jmp    c00253f5 <__moddi3+0x29>
c0025486:	66 90                	xchg   ax,ax
c0025488:	0f bd c7             	bsr    eax,edi
c002548b:	83 f0 1f             	xor    eax,0x1f
c002548e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025492:	75 24                	jne    c00254b8 <__moddi3+0xec>
c0025494:	39 f7                	cmp    edi,esi
c0025496:	72 06                	jb     c002549e <__moddi3+0xd2>
c0025498:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002549c:	77 0c                	ja     c00254aa <__moddi3+0xde>
c002549e:	89 e9                	mov    ecx,ebp
c00254a0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00254a4:	19 fe                	sbb    esi,edi
c00254a6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00254aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254ae:	89 f2                	mov    edx,esi
c00254b0:	e9 6b ff ff ff       	jmp    c0025420 <__moddi3+0x54>
c00254b5:	8d 76 00             	lea    esi,[esi+0x0]
c00254b8:	b8 20 00 00 00       	mov    eax,0x20
c00254bd:	89 c2                	mov    edx,eax
c00254bf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00254c3:	29 da                	sub    edx,ebx
c00254c5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00254c9:	88 d9                	mov    cl,bl
c00254cb:	d3 e7                	shl    edi,cl
c00254cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00254d1:	88 d1                	mov    cl,dl
c00254d3:	d3 e8                	shr    eax,cl
c00254d5:	09 c7                	or     edi,eax
c00254d7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00254db:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00254df:	89 d8                	mov    eax,ebx
c00254e1:	88 d9                	mov    cl,bl
c00254e3:	d3 e7                	shl    edi,cl
c00254e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00254e9:	89 f3                	mov    ebx,esi
c00254eb:	88 d1                	mov    cl,dl
c00254ed:	d3 eb                	shr    ebx,cl
c00254ef:	89 c7                	mov    edi,eax
c00254f1:	88 c1                	mov    cl,al
c00254f3:	d3 e6                	shl    esi,cl
c00254f5:	89 e8                	mov    eax,ebp
c00254f7:	88 d1                	mov    cl,dl
c00254f9:	d3 e8                	shr    eax,cl
c00254fb:	09 f0                	or     eax,esi
c00254fd:	89 f9                	mov    ecx,edi
c00254ff:	d3 e5                	shl    ebp,cl
c0025501:	89 da                	mov    edx,ebx
c0025503:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0025507:	89 d3                	mov    ebx,edx
c0025509:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002550d:	89 c6                	mov    esi,eax
c002550f:	89 d1                	mov    ecx,edx
c0025511:	39 d3                	cmp    ebx,edx
c0025513:	72 27                	jb     c002553c <__moddi3+0x170>
c0025515:	74 21                	je     c0025538 <__moddi3+0x16c>
c0025517:	29 f5                	sub    ebp,esi
c0025519:	19 cb                	sbb    ebx,ecx
c002551b:	89 de                	mov    esi,ebx
c002551d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0025521:	d3 e6                	shl    esi,cl
c0025523:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0025527:	89 f9                	mov    ecx,edi
c0025529:	d3 ed                	shr    ebp,cl
c002552b:	09 ee                	or     esi,ebp
c002552d:	89 f0                	mov    eax,esi
c002552f:	d3 eb                	shr    ebx,cl
c0025531:	89 da                	mov    edx,ebx
c0025533:	e9 e8 fe ff ff       	jmp    c0025420 <__moddi3+0x54>
c0025538:	39 c5                	cmp    ebp,eax
c002553a:	73 db                	jae    c0025517 <__moddi3+0x14b>
c002553c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0025540:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0025544:	89 d1                	mov    ecx,edx
c0025546:	89 c6                	mov    esi,eax
c0025548:	eb cd                	jmp    c0025517 <__moddi3+0x14b>
c002554a:	66 90                	xchg   ax,ax

c002554c <__udivdi3>:
c002554c:	55                   	push   ebp
c002554d:	57                   	push   edi
c002554e:	56                   	push   esi
c002554f:	53                   	push   ebx
c0025550:	83 ec 1c             	sub    esp,0x1c
c0025553:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025557:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002555b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002555f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0025563:	85 d2                	test   edx,edx
c0025565:	75 41                	jne    c00255a8 <__udivdi3+0x5c>
c0025567:	39 f7                	cmp    edi,esi
c0025569:	76 15                	jbe    c0025580 <__udivdi3+0x34>
c002556b:	89 e8                	mov    eax,ebp
c002556d:	89 f2                	mov    edx,esi
c002556f:	f7 f7                	div    edi
c0025571:	31 db                	xor    ebx,ebx
c0025573:	89 da                	mov    edx,ebx
c0025575:	83 c4 1c             	add    esp,0x1c
c0025578:	5b                   	pop    ebx
c0025579:	5e                   	pop    esi
c002557a:	5f                   	pop    edi
c002557b:	5d                   	pop    ebp
c002557c:	c3                   	ret    
c002557d:	8d 76 00             	lea    esi,[esi+0x0]
c0025580:	89 f9                	mov    ecx,edi
c0025582:	85 ff                	test   edi,edi
c0025584:	75 0b                	jne    c0025591 <__udivdi3+0x45>
c0025586:	b8 01 00 00 00       	mov    eax,0x1
c002558b:	31 d2                	xor    edx,edx
c002558d:	f7 f7                	div    edi
c002558f:	89 c1                	mov    ecx,eax
c0025591:	31 d2                	xor    edx,edx
c0025593:	89 f0                	mov    eax,esi
c0025595:	f7 f1                	div    ecx
c0025597:	89 c3                	mov    ebx,eax
c0025599:	89 e8                	mov    eax,ebp
c002559b:	f7 f1                	div    ecx
c002559d:	89 da                	mov    edx,ebx
c002559f:	83 c4 1c             	add    esp,0x1c
c00255a2:	5b                   	pop    ebx
c00255a3:	5e                   	pop    esi
c00255a4:	5f                   	pop    edi
c00255a5:	5d                   	pop    ebp
c00255a6:	c3                   	ret    
c00255a7:	90                   	nop
c00255a8:	39 f2                	cmp    edx,esi
c00255aa:	77 1c                	ja     c00255c8 <__udivdi3+0x7c>
c00255ac:	0f bd da             	bsr    ebx,edx
c00255af:	83 f3 1f             	xor    ebx,0x1f
c00255b2:	75 24                	jne    c00255d8 <__udivdi3+0x8c>
c00255b4:	39 f2                	cmp    edx,esi
c00255b6:	72 08                	jb     c00255c0 <__udivdi3+0x74>
c00255b8:	39 ef                	cmp    edi,ebp
c00255ba:	0f 87 84 00 00 00    	ja     c0025644 <__udivdi3+0xf8>
c00255c0:	b8 01 00 00 00       	mov    eax,0x1
c00255c5:	eb ac                	jmp    c0025573 <__udivdi3+0x27>
c00255c7:	90                   	nop
c00255c8:	31 db                	xor    ebx,ebx
c00255ca:	31 c0                	xor    eax,eax
c00255cc:	89 da                	mov    edx,ebx
c00255ce:	83 c4 1c             	add    esp,0x1c
c00255d1:	5b                   	pop    ebx
c00255d2:	5e                   	pop    esi
c00255d3:	5f                   	pop    edi
c00255d4:	5d                   	pop    ebp
c00255d5:	c3                   	ret    
c00255d6:	66 90                	xchg   ax,ax
c00255d8:	b8 20 00 00 00       	mov    eax,0x20
c00255dd:	29 d8                	sub    eax,ebx
c00255df:	88 d9                	mov    cl,bl
c00255e1:	d3 e2                	shl    edx,cl
c00255e3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00255e7:	89 fa                	mov    edx,edi
c00255e9:	88 c1                	mov    cl,al
c00255eb:	d3 ea                	shr    edx,cl
c00255ed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00255f1:	09 d1                	or     ecx,edx
c00255f3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00255f7:	88 d9                	mov    cl,bl
c00255f9:	d3 e7                	shl    edi,cl
c00255fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00255ff:	89 f7                	mov    edi,esi
c0025601:	88 c1                	mov    cl,al
c0025603:	d3 ef                	shr    edi,cl
c0025605:	88 d9                	mov    cl,bl
c0025607:	d3 e6                	shl    esi,cl
c0025609:	89 ea                	mov    edx,ebp
c002560b:	88 c1                	mov    cl,al
c002560d:	d3 ea                	shr    edx,cl
c002560f:	09 d6                	or     esi,edx
c0025611:	89 f0                	mov    eax,esi
c0025613:	89 fa                	mov    edx,edi
c0025615:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0025619:	89 d7                	mov    edi,edx
c002561b:	89 c6                	mov    esi,eax
c002561d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0025621:	39 d7                	cmp    edi,edx
c0025623:	72 13                	jb     c0025638 <__udivdi3+0xec>
c0025625:	74 09                	je     c0025630 <__udivdi3+0xe4>
c0025627:	89 f0                	mov    eax,esi
c0025629:	31 db                	xor    ebx,ebx
c002562b:	e9 43 ff ff ff       	jmp    c0025573 <__udivdi3+0x27>
c0025630:	88 d9                	mov    cl,bl
c0025632:	d3 e5                	shl    ebp,cl
c0025634:	39 c5                	cmp    ebp,eax
c0025636:	73 ef                	jae    c0025627 <__udivdi3+0xdb>
c0025638:	8d 46 ff             	lea    eax,[esi-0x1]
c002563b:	31 db                	xor    ebx,ebx
c002563d:	e9 31 ff ff ff       	jmp    c0025573 <__udivdi3+0x27>
c0025642:	66 90                	xchg   ax,ax
c0025644:	31 c0                	xor    eax,eax
c0025646:	e9 28 ff ff ff       	jmp    c0025573 <__udivdi3+0x27>
c002564b:	90                   	nop

c002564c <__umoddi3>:
c002564c:	55                   	push   ebp
c002564d:	57                   	push   edi
c002564e:	56                   	push   esi
c002564f:	53                   	push   ebx
c0025650:	83 ec 1c             	sub    esp,0x1c
c0025653:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0025657:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002565b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002565f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0025663:	89 da                	mov    edx,ebx
c0025665:	85 c0                	test   eax,eax
c0025667:	75 37                	jne    c00256a0 <__umoddi3+0x54>
c0025669:	39 df                	cmp    edi,ebx
c002566b:	76 13                	jbe    c0025680 <__umoddi3+0x34>
c002566d:	89 f0                	mov    eax,esi
c002566f:	f7 f7                	div    edi
c0025671:	89 d0                	mov    eax,edx
c0025673:	31 d2                	xor    edx,edx
c0025675:	83 c4 1c             	add    esp,0x1c
c0025678:	5b                   	pop    ebx
c0025679:	5e                   	pop    esi
c002567a:	5f                   	pop    edi
c002567b:	5d                   	pop    ebp
c002567c:	c3                   	ret    
c002567d:	8d 76 00             	lea    esi,[esi+0x0]
c0025680:	89 fd                	mov    ebp,edi
c0025682:	85 ff                	test   edi,edi
c0025684:	75 0b                	jne    c0025691 <__umoddi3+0x45>
c0025686:	b8 01 00 00 00       	mov    eax,0x1
c002568b:	31 d2                	xor    edx,edx
c002568d:	f7 f7                	div    edi
c002568f:	89 c5                	mov    ebp,eax
c0025691:	89 d8                	mov    eax,ebx
c0025693:	31 d2                	xor    edx,edx
c0025695:	f7 f5                	div    ebp
c0025697:	89 f0                	mov    eax,esi
c0025699:	f7 f5                	div    ebp
c002569b:	89 d0                	mov    eax,edx
c002569d:	eb d4                	jmp    c0025673 <__umoddi3+0x27>
c002569f:	90                   	nop
c00256a0:	89 f1                	mov    ecx,esi
c00256a2:	39 d8                	cmp    eax,ebx
c00256a4:	76 0a                	jbe    c00256b0 <__umoddi3+0x64>
c00256a6:	89 f0                	mov    eax,esi
c00256a8:	83 c4 1c             	add    esp,0x1c
c00256ab:	5b                   	pop    ebx
c00256ac:	5e                   	pop    esi
c00256ad:	5f                   	pop    edi
c00256ae:	5d                   	pop    ebp
c00256af:	c3                   	ret    
c00256b0:	0f bd e8             	bsr    ebp,eax
c00256b3:	83 f5 1f             	xor    ebp,0x1f
c00256b6:	75 1c                	jne    c00256d4 <__umoddi3+0x88>
c00256b8:	39 d8                	cmp    eax,ebx
c00256ba:	72 04                	jb     c00256c0 <__umoddi3+0x74>
c00256bc:	39 f7                	cmp    edi,esi
c00256be:	77 08                	ja     c00256c8 <__umoddi3+0x7c>
c00256c0:	89 da                	mov    edx,ebx
c00256c2:	29 fe                	sub    esi,edi
c00256c4:	19 c2                	sbb    edx,eax
c00256c6:	89 f1                	mov    ecx,esi
c00256c8:	89 c8                	mov    eax,ecx
c00256ca:	83 c4 1c             	add    esp,0x1c
c00256cd:	5b                   	pop    ebx
c00256ce:	5e                   	pop    esi
c00256cf:	5f                   	pop    edi
c00256d0:	5d                   	pop    ebp
c00256d1:	c3                   	ret    
c00256d2:	66 90                	xchg   ax,ax
c00256d4:	ba 20 00 00 00       	mov    edx,0x20
c00256d9:	29 ea                	sub    edx,ebp
c00256db:	89 e9                	mov    ecx,ebp
c00256dd:	d3 e0                	shl    eax,cl
c00256df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00256e3:	89 f8                	mov    eax,edi
c00256e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00256e9:	88 d1                	mov    cl,dl
c00256eb:	d3 e8                	shr    eax,cl
c00256ed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00256f1:	09 c1                	or     ecx,eax
c00256f3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00256f7:	89 e9                	mov    ecx,ebp
c00256f9:	d3 e7                	shl    edi,cl
c00256fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00256ff:	89 d8                	mov    eax,ebx
c0025701:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025705:	88 d1                	mov    cl,dl
c0025707:	d3 e8                	shr    eax,cl
c0025709:	89 c7                	mov    edi,eax
c002570b:	89 e9                	mov    ecx,ebp
c002570d:	d3 e3                	shl    ebx,cl
c002570f:	89 f0                	mov    eax,esi
c0025711:	88 d1                	mov    cl,dl
c0025713:	d3 e8                	shr    eax,cl
c0025715:	09 d8                	or     eax,ebx
c0025717:	89 e9                	mov    ecx,ebp
c0025719:	d3 e6                	shl    esi,cl
c002571b:	89 f3                	mov    ebx,esi
c002571d:	89 fa                	mov    edx,edi
c002571f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0025723:	89 d1                	mov    ecx,edx
c0025725:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0025729:	89 c6                	mov    esi,eax
c002572b:	89 d7                	mov    edi,edx
c002572d:	39 d1                	cmp    ecx,edx
c002572f:	72 27                	jb     c0025758 <__umoddi3+0x10c>
c0025731:	74 21                	je     c0025754 <__umoddi3+0x108>
c0025733:	89 ca                	mov    edx,ecx
c0025735:	29 f3                	sub    ebx,esi
c0025737:	19 fa                	sbb    edx,edi
c0025739:	89 d0                	mov    eax,edx
c002573b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002573f:	d3 e0                	shl    eax,cl
c0025741:	89 e9                	mov    ecx,ebp
c0025743:	d3 eb                	shr    ebx,cl
c0025745:	09 d8                	or     eax,ebx
c0025747:	d3 ea                	shr    edx,cl
c0025749:	83 c4 1c             	add    esp,0x1c
c002574c:	5b                   	pop    ebx
c002574d:	5e                   	pop    esi
c002574e:	5f                   	pop    edi
c002574f:	5d                   	pop    ebp
c0025750:	c3                   	ret    
c0025751:	8d 76 00             	lea    esi,[esi+0x0]
c0025754:	39 c3                	cmp    ebx,eax
c0025756:	73 db                	jae    c0025733 <__umoddi3+0xe7>
c0025758:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002575c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0025760:	89 d7                	mov    edi,edx
c0025762:	89 c6                	mov    esi,eax
c0025764:	eb cd                	jmp    c0025733 <__umoddi3+0xe7>

c0025766 <__addsf3>:
c0025766:	55                   	push   ebp
c0025767:	89 e5                	mov    ebp,esp
c0025769:	57                   	push   edi
c002576a:	56                   	push   esi
c002576b:	53                   	push   ebx
c002576c:	83 ec 08             	sub    esp,0x8
c002576f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0025772:	89 fa                	mov    edx,edi
c0025774:	89 f8                	mov    eax,edi
c0025776:	c1 f8 17             	sar    eax,0x17
c0025779:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002577c:	c1 e2 08             	shl    edx,0x8
c002577f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0025785:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025788:	89 de                	mov    esi,ebx
c002578a:	c1 fe 17             	sar    esi,0x17
c002578d:	c1 e3 08             	shl    ebx,0x8
c0025790:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025796:	31 f0                	xor    eax,esi
c0025798:	0f 88 3b 01 00 00    	js     c00258d9 <__addsf3+0x173>
c002579e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00257a1:	29 f1                	sub    ecx,esi
c00257a3:	85 c9                	test   ecx,ecx
c00257a5:	7e 54                	jle    c00257fb <__addsf3+0x95>
c00257a7:	89 f0                	mov    eax,esi
c00257a9:	84 c0                	test   al,al
c00257ab:	75 10                	jne    c00257bd <__addsf3+0x57>
c00257ad:	85 db                	test   ebx,ebx
c00257af:	0f 84 aa 02 00 00    	je     c0025a5f <__addsf3+0x2f9>
c00257b5:	49                   	dec    ecx
c00257b6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00257b9:	74 38                	je     c00257f3 <__addsf3+0x8d>
c00257bb:	eb 13                	jmp    c00257d0 <__addsf3+0x6a>
c00257bd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00257c0:	f7 d0                	not    eax
c00257c2:	84 c0                	test   al,al
c00257c4:	0f 84 95 02 00 00    	je     c0025a5f <__addsf3+0x2f9>
c00257ca:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00257d0:	83 f9 1f             	cmp    ecx,0x1f
c00257d3:	0f 8f 86 02 00 00    	jg     c0025a5f <__addsf3+0x2f9>
c00257d9:	89 de                	mov    esi,ebx
c00257db:	d3 ee                	shr    esi,cl
c00257dd:	b8 20 00 00 00       	mov    eax,0x20
c00257e2:	29 c8                	sub    eax,ecx
c00257e4:	89 c1                	mov    ecx,eax
c00257e6:	d3 e3                	shl    ebx,cl
c00257e8:	31 c0                	xor    eax,eax
c00257ea:	85 db                	test   ebx,ebx
c00257ec:	0f 95 c0             	setne  al
c00257ef:	09 f0                	or     eax,esi
c00257f1:	01 d0                	add    eax,edx
c00257f3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00257f6:	e9 b6 00 00 00       	jmp    c00258b1 <__addsf3+0x14b>
c00257fb:	74 5c                	je     c0025859 <__addsf3+0xf3>
c00257fd:	89 f1                	mov    ecx,esi
c00257ff:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0025802:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025805:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0025809:	75 14                	jne    c002581f <__addsf3+0xb9>
c002580b:	85 d2                	test   edx,edx
c002580d:	0f 84 4c 02 00 00    	je     c0025a5f <__addsf3+0x2f9>
c0025813:	49                   	dec    ecx
c0025814:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0025817:	0f 84 94 00 00 00    	je     c00258b1 <__addsf3+0x14b>
c002581d:	eb 12                	jmp    c0025831 <__addsf3+0xcb>
c002581f:	89 f0                	mov    eax,esi
c0025821:	f7 d0                	not    eax
c0025823:	84 c0                	test   al,al
c0025825:	0f 84 34 02 00 00    	je     c0025a5f <__addsf3+0x2f9>
c002582b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025831:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025834:	83 f9 1f             	cmp    ecx,0x1f
c0025837:	0f 8f 22 02 00 00    	jg     c0025a5f <__addsf3+0x2f9>
c002583d:	89 d7                	mov    edi,edx
c002583f:	d3 ef                	shr    edi,cl
c0025841:	b8 20 00 00 00       	mov    eax,0x20
c0025846:	29 c8                	sub    eax,ecx
c0025848:	89 c1                	mov    ecx,eax
c002584a:	d3 e2                	shl    edx,cl
c002584c:	31 c0                	xor    eax,eax
c002584e:	85 d2                	test   edx,edx
c0025850:	0f 95 c0             	setne  al
c0025853:	09 f8                	or     eax,edi
c0025855:	01 d8                	add    eax,ebx
c0025857:	eb 58                	jmp    c00258b1 <__addsf3+0x14b>
c0025859:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002585c:	8d 70 01             	lea    esi,[eax+0x1]
c002585f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0025865:	75 32                	jne    c0025899 <__addsf3+0x133>
c0025867:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c002586b:	75 1f                	jne    c002588c <__addsf3+0x126>
c002586d:	85 d2                	test   edx,edx
c002586f:	0f 84 e0 01 00 00    	je     c0025a55 <__addsf3+0x2ef>
c0025875:	85 db                	test   ebx,ebx
c0025877:	0f 84 e2 01 00 00    	je     c0025a5f <__addsf3+0x2f9>
c002587d:	89 d0                	mov    eax,edx
c002587f:	01 d8                	add    eax,ebx
c0025881:	0f 89 a9 01 00 00    	jns    c0025a30 <__addsf3+0x2ca>
c0025887:	e9 9d 01 00 00       	jmp    c0025a29 <__addsf3+0x2c3>
c002588c:	85 d2                	test   edx,edx
c002588e:	0f 85 cb 01 00 00    	jne    c0025a5f <__addsf3+0x2f9>
c0025894:	e9 bc 01 00 00       	jmp    c0025a55 <__addsf3+0x2ef>
c0025899:	31 c0                	xor    eax,eax
c002589b:	89 f1                	mov    ecx,esi
c002589d:	f7 d1                	not    ecx
c002589f:	84 c9                	test   cl,cl
c00258a1:	0f 84 90 01 00 00    	je     c0025a37 <__addsf3+0x2d1>
c00258a7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00258aa:	d1 e8                	shr    eax,1
c00258ac:	e9 86 01 00 00       	jmp    c0025a37 <__addsf3+0x2d1>
c00258b1:	85 c0                	test   eax,eax
c00258b3:	0f 89 7e 01 00 00    	jns    c0025a37 <__addsf3+0x2d1>
c00258b9:	46                   	inc    esi
c00258ba:	89 f2                	mov    edx,esi
c00258bc:	f7 d2                	not    edx
c00258be:	84 d2                	test   dl,dl
c00258c0:	0f 84 6f 01 00 00    	je     c0025a35 <__addsf3+0x2cf>
c00258c6:	89 c2                	mov    edx,eax
c00258c8:	83 e2 01             	and    edx,0x1
c00258cb:	d1 e8                	shr    eax,1
c00258cd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00258d2:	09 d0                	or     eax,edx
c00258d4:	e9 5e 01 00 00       	jmp    c0025a37 <__addsf3+0x2d1>
c00258d9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c00258dd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00258e0:	89 f0                	mov    eax,esi
c00258e2:	0f b6 c0             	movzx  eax,al
c00258e5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00258e8:	29 c1                	sub    ecx,eax
c00258ea:	85 c9                	test   ecx,ecx
c00258ec:	7e 55                	jle    c0025943 <__addsf3+0x1dd>
c00258ee:	85 c0                	test   eax,eax
c00258f0:	75 11                	jne    c0025903 <__addsf3+0x19d>
c00258f2:	85 db                	test   ebx,ebx
c00258f4:	0f 84 65 01 00 00    	je     c0025a5f <__addsf3+0x2f9>
c00258fa:	49                   	dec    ecx
c00258fb:	75 19                	jne    c0025916 <__addsf3+0x1b0>
c00258fd:	89 d0                	mov    eax,edx
c00258ff:	29 d8                	sub    eax,ebx
c0025901:	eb 38                	jmp    c002593b <__addsf3+0x1d5>
c0025903:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025906:	f7 d0                	not    eax
c0025908:	84 c0                	test   al,al
c002590a:	0f 84 4f 01 00 00    	je     c0025a5f <__addsf3+0x2f9>
c0025910:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025916:	83 f9 1f             	cmp    ecx,0x1f
c0025919:	0f 8f 40 01 00 00    	jg     c0025a5f <__addsf3+0x2f9>
c002591f:	89 de                	mov    esi,ebx
c0025921:	d3 ee                	shr    esi,cl
c0025923:	b8 20 00 00 00       	mov    eax,0x20
c0025928:	29 c8                	sub    eax,ecx
c002592a:	89 c1                	mov    ecx,eax
c002592c:	d3 e3                	shl    ebx,cl
c002592e:	31 c0                	xor    eax,eax
c0025930:	85 db                	test   ebx,ebx
c0025932:	0f 95 c0             	setne  al
c0025935:	09 f0                	or     eax,esi
c0025937:	29 c2                	sub    edx,eax
c0025939:	89 d0                	mov    eax,edx
c002593b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002593e:	e9 af 00 00 00       	jmp    c00259f2 <__addsf3+0x28c>
c0025943:	74 5c                	je     c00259a1 <__addsf3+0x23b>
c0025945:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0025948:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002594b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002594f:	75 14                	jne    c0025965 <__addsf3+0x1ff>
c0025951:	85 d2                	test   edx,edx
c0025953:	0f 84 06 01 00 00    	je     c0025a5f <__addsf3+0x2f9>
c0025959:	48                   	dec    eax
c002595a:	75 1b                	jne    c0025977 <__addsf3+0x211>
c002595c:	89 d8                	mov    eax,ebx
c002595e:	29 d0                	sub    eax,edx
c0025960:	e9 8d 00 00 00       	jmp    c00259f2 <__addsf3+0x28c>
c0025965:	89 f1                	mov    ecx,esi
c0025967:	f7 d1                	not    ecx
c0025969:	84 c9                	test   cl,cl
c002596b:	0f 84 ee 00 00 00    	je     c0025a5f <__addsf3+0x2f9>
c0025971:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025977:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002597a:	83 f8 1f             	cmp    eax,0x1f
c002597d:	0f 8f dc 00 00 00    	jg     c0025a5f <__addsf3+0x2f9>
c0025983:	89 d7                	mov    edi,edx
c0025985:	88 c1                	mov    cl,al
c0025987:	d3 ef                	shr    edi,cl
c0025989:	b9 20 00 00 00       	mov    ecx,0x20
c002598e:	29 c1                	sub    ecx,eax
c0025990:	d3 e2                	shl    edx,cl
c0025992:	31 c0                	xor    eax,eax
c0025994:	85 d2                	test   edx,edx
c0025996:	0f 95 c0             	setne  al
c0025999:	09 f8                	or     eax,edi
c002599b:	29 c3                	sub    ebx,eax
c002599d:	89 d8                	mov    eax,ebx
c002599f:	eb 51                	jmp    c00259f2 <__addsf3+0x28c>
c00259a1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00259a4:	40                   	inc    eax
c00259a5:	a8 fe                	test   al,0xfe
c00259a7:	75 3d                	jne    c00259e6 <__addsf3+0x280>
c00259a9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00259ad:	0f 85 a7 00 00 00    	jne    c0025a5a <__addsf3+0x2f4>
c00259b3:	85 d2                	test   edx,edx
c00259b5:	75 12                	jne    c00259c9 <__addsf3+0x263>
c00259b7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00259ba:	85 db                	test   ebx,ebx
c00259bc:	0f 85 9d 00 00 00    	jne    c0025a5f <__addsf3+0x2f9>
c00259c2:	31 ff                	xor    edi,edi
c00259c4:	e9 96 00 00 00       	jmp    c0025a5f <__addsf3+0x2f9>
c00259c9:	85 db                	test   ebx,ebx
c00259cb:	0f 84 8e 00 00 00    	je     c0025a5f <__addsf3+0x2f9>
c00259d1:	89 d0                	mov    eax,edx
c00259d3:	29 d8                	sub    eax,ebx
c00259d5:	79 06                	jns    c00259dd <__addsf3+0x277>
c00259d7:	89 d8                	mov    eax,ebx
c00259d9:	29 d0                	sub    eax,edx
c00259db:	eb 5a                	jmp    c0025a37 <__addsf3+0x2d1>
c00259dd:	bf 00 00 00 00       	mov    edi,0x0
c00259e2:	74 7b                	je     c0025a5f <__addsf3+0x2f9>
c00259e4:	eb 4a                	jmp    c0025a30 <__addsf3+0x2ca>
c00259e6:	89 d0                	mov    eax,edx
c00259e8:	29 d8                	sub    eax,ebx
c00259ea:	79 12                	jns    c00259fe <__addsf3+0x298>
c00259ec:	89 d8                	mov    eax,ebx
c00259ee:	29 d0                	sub    eax,edx
c00259f0:	eb 09                	jmp    c00259fb <__addsf3+0x295>
c00259f2:	85 c0                	test   eax,eax
c00259f4:	79 41                	jns    c0025a37 <__addsf3+0x2d1>
c00259f6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00259fb:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c00259fe:	31 f6                	xor    esi,esi
c0025a00:	85 c0                	test   eax,eax
c0025a02:	74 33                	je     c0025a37 <__addsf3+0x2d1>
c0025a04:	0f bd c8             	bsr    ecx,eax
c0025a07:	83 f1 1f             	xor    ecx,0x1f
c0025a0a:	d3 e0                	shl    eax,cl
c0025a0c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0025a10:	39 ca                	cmp    edx,ecx
c0025a12:	7f 10                	jg     c0025a24 <__addsf3+0x2be>
c0025a14:	29 d1                	sub    ecx,edx
c0025a16:	41                   	inc    ecx
c0025a17:	d3 e8                	shr    eax,cl
c0025a19:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025a1c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0025a22:	eb 13                	jmp    c0025a37 <__addsf3+0x2d1>
c0025a24:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025a27:	29 ce                	sub    esi,ecx
c0025a29:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025a2e:	eb 07                	jmp    c0025a37 <__addsf3+0x2d1>
c0025a30:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025a33:	eb 02                	jmp    c0025a37 <__addsf3+0x2d1>
c0025a35:	31 c0                	xor    eax,eax
c0025a37:	89 c2                	mov    edx,eax
c0025a39:	c1 ea 08             	shr    edx,0x8
c0025a3c:	a8 7f                	test   al,0x7f
c0025a3e:	0f 95 c1             	setne  cl
c0025a41:	09 d1                	or     ecx,edx
c0025a43:	83 e1 01             	and    ecx,0x1
c0025a46:	c1 e8 07             	shr    eax,0x7
c0025a49:	21 c8                	and    eax,ecx
c0025a4b:	c1 e6 17             	shl    esi,0x17
c0025a4e:	09 d6                	or     esi,edx
c0025a50:	8d 3c 30             	lea    edi,[eax+esi*1]
c0025a53:	eb 0a                	jmp    c0025a5f <__addsf3+0x2f9>
c0025a55:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025a58:	eb 05                	jmp    c0025a5f <__addsf3+0x2f9>
c0025a5a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0025a5f:	89 f8                	mov    eax,edi
c0025a61:	5a                   	pop    edx
c0025a62:	59                   	pop    ecx
c0025a63:	5b                   	pop    ebx
c0025a64:	5e                   	pop    esi
c0025a65:	5f                   	pop    edi
c0025a66:	5d                   	pop    ebp
c0025a67:	c3                   	ret    

c0025a68 <__subsf3>:
c0025a68:	55                   	push   ebp
c0025a69:	89 e5                	mov    ebp,esp
c0025a6b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a6e:	05 00 00 00 80       	add    eax,0x80000000
c0025a73:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025a76:	5d                   	pop    ebp
c0025a77:	e9 ea fc ff ff       	jmp    c0025766 <__addsf3>

c0025a7c <__negsf2>:
c0025a7c:	55                   	push   ebp
c0025a7d:	89 e5                	mov    ebp,esp
c0025a7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a82:	05 00 00 00 80       	add    eax,0x80000000
c0025a87:	5d                   	pop    ebp
c0025a88:	c3                   	ret    

c0025a89 <__mulsf3>:
c0025a89:	55                   	push   ebp
c0025a8a:	89 e5                	mov    ebp,esp
c0025a8c:	57                   	push   edi
c0025a8d:	56                   	push   esi
c0025a8e:	53                   	push   ebx
c0025a8f:	83 ec 1c             	sub    esp,0x1c
c0025a92:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0025a95:	89 f0                	mov    eax,esi
c0025a97:	89 f1                	mov    ecx,esi
c0025a99:	c1 f9 17             	sar    ecx,0x17
c0025a9c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0025a9f:	c1 e0 08             	shl    eax,0x8
c0025aa2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025aa7:	89 c1                	mov    ecx,eax
c0025aa9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025aac:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025aaf:	89 c7                	mov    edi,eax
c0025ab1:	c1 ff 17             	sar    edi,0x17
c0025ab4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025ab8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025abb:	89 f8                	mov    eax,edi
c0025abd:	0f b6 c0             	movzx  eax,al
c0025ac0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0025ac3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0025ac7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025aca:	42                   	inc    edx
c0025acb:	80 e2 fe             	and    dl,0xfe
c0025ace:	75 7b                	jne    c0025b4b <__mulsf3+0xc2>
c0025ad0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025ad4:	74 54                	je     c0025b2a <__mulsf3+0xa1>
c0025ad6:	85 c9                	test   ecx,ecx
c0025ad8:	0f 85 64 01 00 00    	jne    c0025c42 <__mulsf3+0x1b9>
c0025ade:	8d 57 01             	lea    edx,[edi+0x1]
c0025ae1:	80 e2 fe             	and    dl,0xfe
c0025ae4:	75 1f                	jne    c0025b05 <__mulsf3+0x7c>
c0025ae6:	85 c0                	test   eax,eax
c0025ae8:	b8 00 00 00 00       	mov    eax,0x0
c0025aed:	74 29                	je     c0025b18 <__mulsf3+0x8f>
c0025aef:	53                   	push   ebx
c0025af0:	53                   	push   ebx
c0025af1:	50                   	push   eax
c0025af2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025af5:	e8 96 05 00 00       	call   c0026090 <__nesf2>
c0025afa:	83 c4 10             	add    esp,0x10
c0025afd:	85 c0                	test   eax,eax
c0025aff:	0f 85 3a 01 00 00    	jne    c0025c3f <__mulsf3+0x1b6>
c0025b05:	85 ff                	test   edi,edi
c0025b07:	0f 89 35 01 00 00    	jns    c0025c42 <__mulsf3+0x1b9>
c0025b0d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0025b13:	e9 2a 01 00 00       	jmp    c0025c42 <__mulsf3+0x1b9>
c0025b18:	51                   	push   ecx
c0025b19:	51                   	push   ecx
c0025b1a:	50                   	push   eax
c0025b1b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025b1e:	e8 6d 05 00 00       	call   c0026090 <__nesf2>
c0025b23:	83 c4 10             	add    esp,0x10
c0025b26:	85 c0                	test   eax,eax
c0025b28:	eb 15                	jmp    c0025b3f <__mulsf3+0xb6>
c0025b2a:	85 c9                	test   ecx,ecx
c0025b2c:	74 0b                	je     c0025b39 <__mulsf3+0xb0>
c0025b2e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0025b31:	01 c9                	add    ecx,ecx
c0025b33:	78 16                	js     c0025b4b <__mulsf3+0xc2>
c0025b35:	89 d3                	mov    ebx,edx
c0025b37:	eb f5                	jmp    c0025b2e <__mulsf3+0xa5>
c0025b39:	89 f8                	mov    eax,edi
c0025b3b:	f7 d0                	not    eax
c0025b3d:	84 c0                	test   al,al
c0025b3f:	75 c4                	jne    c0025b05 <__mulsf3+0x7c>
c0025b41:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0025b46:	e9 f7 00 00 00       	jmp    c0025c42 <__mulsf3+0x1b9>
c0025b4b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0025b4e:	c1 e6 08             	shl    esi,0x8
c0025b51:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0025b57:	8d 57 01             	lea    edx,[edi+0x1]
c0025b5a:	80 e2 fe             	and    dl,0xfe
c0025b5d:	75 63                	jne    c0025bc2 <__mulsf3+0x139>
c0025b5f:	85 c0                	test   eax,eax
c0025b61:	74 2f                	je     c0025b92 <__mulsf3+0x109>
c0025b63:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0025b67:	0f 89 d2 00 00 00    	jns    c0025c3f <__mulsf3+0x1b6>
c0025b6d:	52                   	push   edx
c0025b6e:	52                   	push   edx
c0025b6f:	6a 00                	push   0x0
c0025b71:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025b74:	e8 dc 04 00 00       	call   c0026055 <__eqsf2>
c0025b79:	83 c4 10             	add    esp,0x10
c0025b7c:	85 c0                	test   eax,eax
c0025b7e:	0f 85 bb 00 00 00    	jne    c0025c3f <__mulsf3+0x1b6>
c0025b84:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b87:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0025b8d:	e9 b0 00 00 00       	jmp    c0025c42 <__mulsf3+0x1b9>
c0025b92:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0025b95:	50                   	push   eax
c0025b96:	50                   	push   eax
c0025b97:	6a 00                	push   0x0
c0025b99:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025b9c:	e8 b4 04 00 00       	call   c0026055 <__eqsf2>
c0025ba1:	83 c4 10             	add    esp,0x10
c0025ba4:	85 c0                	test   eax,eax
c0025ba6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025ba9:	75 0c                	jne    c0025bb7 <__mulsf3+0x12e>
c0025bab:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0025baf:	0f 89 8a 00 00 00    	jns    c0025c3f <__mulsf3+0x1b6>
c0025bb5:	eb cd                	jmp    c0025b84 <__mulsf3+0xfb>
c0025bb7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0025bba:	01 f6                	add    esi,esi
c0025bbc:	78 04                	js     c0025bc2 <__mulsf3+0x139>
c0025bbe:	89 c3                	mov    ebx,eax
c0025bc0:	eb f5                	jmp    c0025bb7 <__mulsf3+0x12e>
c0025bc2:	89 c8                	mov    eax,ecx
c0025bc4:	0d 00 00 00 80       	or     eax,0x80000000
c0025bc9:	81 ce 00 00 00 80    	or     esi,0x80000000
c0025bcf:	f7 e6                	mul    esi
c0025bd1:	85 c0                	test   eax,eax
c0025bd3:	0f 95 c0             	setne  al
c0025bd6:	0f b6 c0             	movzx  eax,al
c0025bd9:	09 c2                	or     edx,eax
c0025bdb:	78 03                	js     c0025be0 <__mulsf3+0x157>
c0025bdd:	01 d2                	add    edx,edx
c0025bdf:	4b                   	dec    ebx
c0025be0:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0025be6:	7f 22                	jg     c0025c0a <__mulsf3+0x181>
c0025be8:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025bee:	85 db                	test   ebx,ebx
c0025bf0:	7f 23                	jg     c0025c15 <__mulsf3+0x18c>
c0025bf2:	83 fb e9             	cmp    ebx,0xffffffe9
c0025bf5:	7c 1a                	jl     c0025c11 <__mulsf3+0x188>
c0025bf7:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025bfd:	b9 01 00 00 00       	mov    ecx,0x1
c0025c02:	29 d9                	sub    ecx,ebx
c0025c04:	d3 ea                	shr    edx,cl
c0025c06:	31 db                	xor    ebx,ebx
c0025c08:	eb 0b                	jmp    c0025c15 <__mulsf3+0x18c>
c0025c0a:	bb ff 00 00 00       	mov    ebx,0xff
c0025c0f:	eb 02                	jmp    c0025c13 <__mulsf3+0x18a>
c0025c11:	31 db                	xor    ebx,ebx
c0025c13:	31 d2                	xor    edx,edx
c0025c15:	89 d0                	mov    eax,edx
c0025c17:	c1 e8 08             	shr    eax,0x8
c0025c1a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0025c1d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0025c23:	09 fb                	or     ebx,edi
c0025c25:	c1 e3 17             	shl    ebx,0x17
c0025c28:	09 c3                	or     ebx,eax
c0025c2a:	f6 c2 7f             	test   dl,0x7f
c0025c2d:	0f 95 c1             	setne  cl
c0025c30:	09 c8                	or     eax,ecx
c0025c32:	83 e0 01             	and    eax,0x1
c0025c35:	c1 ea 07             	shr    edx,0x7
c0025c38:	21 c2                	and    edx,eax
c0025c3a:	8d 34 13             	lea    esi,[ebx+edx*1]
c0025c3d:	eb 03                	jmp    c0025c42 <__mulsf3+0x1b9>
c0025c3f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0025c42:	89 f0                	mov    eax,esi
c0025c44:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025c47:	5b                   	pop    ebx
c0025c48:	5e                   	pop    esi
c0025c49:	5f                   	pop    edi
c0025c4a:	5d                   	pop    ebp
c0025c4b:	c3                   	ret    

c0025c4c <__divsf3>:
c0025c4c:	55                   	push   ebp
c0025c4d:	89 e5                	mov    ebp,esp
c0025c4f:	57                   	push   edi
c0025c50:	56                   	push   esi
c0025c51:	53                   	push   ebx
c0025c52:	83 ec 1c             	sub    esp,0x1c
c0025c55:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0025c58:	89 d8                	mov    eax,ebx
c0025c5a:	89 d9                	mov    ecx,ebx
c0025c5c:	c1 f9 17             	sar    ecx,0x17
c0025c5f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0025c62:	c1 e0 08             	shl    eax,0x8
c0025c65:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025c6a:	89 c1                	mov    ecx,eax
c0025c6c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c6f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025c72:	89 c7                	mov    edi,eax
c0025c74:	c1 ff 17             	sar    edi,0x17
c0025c77:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025c7b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025c7e:	89 f8                	mov    eax,edi
c0025c80:	0f b6 c0             	movzx  eax,al
c0025c83:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025c86:	29 c6                	sub    esi,eax
c0025c88:	83 c6 7f             	add    esi,0x7f
c0025c8b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025c8e:	42                   	inc    edx
c0025c8f:	80 e2 fe             	and    dl,0xfe
c0025c92:	0f 85 9c 00 00 00    	jne    c0025d34 <__divsf3+0xe8>
c0025c98:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025c9c:	74 33                	je     c0025cd1 <__divsf3+0x85>
c0025c9e:	85 c9                	test   ecx,ecx
c0025ca0:	0f 85 c7 01 00 00    	jne    c0025e6d <__divsf3+0x221>
c0025ca6:	8d 57 01             	lea    edx,[edi+0x1]
c0025ca9:	80 e2 fe             	and    dl,0xfe
c0025cac:	75 2f                	jne    c0025cdd <__divsf3+0x91>
c0025cae:	85 c0                	test   eax,eax
c0025cb0:	74 2b                	je     c0025cdd <__divsf3+0x91>
c0025cb2:	51                   	push   ecx
c0025cb3:	51                   	push   ecx
c0025cb4:	6a 00                	push   0x0
c0025cb6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025cb9:	e8 d2 03 00 00       	call   c0026090 <__nesf2>
c0025cbe:	83 c4 10             	add    esp,0x10
c0025cc1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025cc4:	85 c0                	test   eax,eax
c0025cc6:	0f 85 a1 01 00 00    	jne    c0025e6d <__divsf3+0x221>
c0025ccc:	e9 92 01 00 00       	jmp    c0025e63 <__divsf3+0x217>
c0025cd1:	85 c9                	test   ecx,ecx
c0025cd3:	75 1b                	jne    c0025cf0 <__divsf3+0xa4>
c0025cd5:	8d 57 01             	lea    edx,[edi+0x1]
c0025cd8:	80 e2 fe             	and    dl,0xfe
c0025cdb:	74 1e                	je     c0025cfb <__divsf3+0xaf>
c0025cdd:	85 ff                	test   edi,edi
c0025cdf:	0f 89 88 01 00 00    	jns    c0025e6d <__divsf3+0x221>
c0025ce5:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0025ceb:	e9 7d 01 00 00       	jmp    c0025e6d <__divsf3+0x221>
c0025cf0:	8d 56 ff             	lea    edx,[esi-0x1]
c0025cf3:	01 c9                	add    ecx,ecx
c0025cf5:	78 3d                	js     c0025d34 <__divsf3+0xe8>
c0025cf7:	89 d6                	mov    esi,edx
c0025cf9:	eb f5                	jmp    c0025cf0 <__divsf3+0xa4>
c0025cfb:	85 c0                	test   eax,eax
c0025cfd:	b8 00 00 00 00       	mov    eax,0x0
c0025d02:	74 18                	je     c0025d1c <__divsf3+0xd0>
c0025d04:	52                   	push   edx
c0025d05:	52                   	push   edx
c0025d06:	50                   	push   eax
c0025d07:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025d0a:	e8 81 03 00 00       	call   c0026090 <__nesf2>
c0025d0f:	83 c4 10             	add    esp,0x10
c0025d12:	85 c0                	test   eax,eax
c0025d14:	0f 85 50 01 00 00    	jne    c0025e6a <__divsf3+0x21e>
c0025d1a:	eb c1                	jmp    c0025cdd <__divsf3+0x91>
c0025d1c:	56                   	push   esi
c0025d1d:	56                   	push   esi
c0025d1e:	50                   	push   eax
c0025d1f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025d22:	e8 69 03 00 00       	call   c0026090 <__nesf2>
c0025d27:	83 c4 10             	add    esp,0x10
c0025d2a:	85 c0                	test   eax,eax
c0025d2c:	0f 84 31 01 00 00    	je     c0025e63 <__divsf3+0x217>
c0025d32:	eb a9                	jmp    c0025cdd <__divsf3+0x91>
c0025d34:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0025d37:	c1 e3 08             	shl    ebx,0x8
c0025d3a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025d40:	8d 57 01             	lea    edx,[edi+0x1]
c0025d43:	80 e2 fe             	and    dl,0xfe
c0025d46:	75 71                	jne    c0025db9 <__divsf3+0x16d>
c0025d48:	85 c0                	test   eax,eax
c0025d4a:	ba 00 00 00 00       	mov    edx,0x0
c0025d4f:	74 2f                	je     c0025d80 <__divsf3+0x134>
c0025d51:	51                   	push   ecx
c0025d52:	51                   	push   ecx
c0025d53:	52                   	push   edx
c0025d54:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025d57:	e8 f9 02 00 00       	call   c0026055 <__eqsf2>
c0025d5c:	83 c4 10             	add    esp,0x10
c0025d5f:	85 c0                	test   eax,eax
c0025d61:	0f 85 03 01 00 00    	jne    c0025e6a <__divsf3+0x21e>
c0025d67:	31 d2                	xor    edx,edx
c0025d69:	89 d3                	mov    ebx,edx
c0025d6b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025d6e:	31 f8                	xor    eax,edi
c0025d70:	0f 89 f7 00 00 00    	jns    c0025e6d <__divsf3+0x221>
c0025d76:	bb 00 00 00 80       	mov    ebx,0x80000000
c0025d7b:	e9 ed 00 00 00       	jmp    c0025e6d <__divsf3+0x221>
c0025d80:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0025d83:	50                   	push   eax
c0025d84:	50                   	push   eax
c0025d85:	52                   	push   edx
c0025d86:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025d89:	e8 c7 02 00 00       	call   c0026055 <__eqsf2>
c0025d8e:	83 c4 10             	add    esp,0x10
c0025d91:	85 c0                	test   eax,eax
c0025d93:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025d96:	75 16                	jne    c0025dae <__divsf3+0x162>
c0025d98:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025d9b:	31 fb                	xor    ebx,edi
c0025d9d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0025da3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0025da9:	e9 bf 00 00 00       	jmp    c0025e6d <__divsf3+0x221>
c0025dae:	8d 46 01             	lea    eax,[esi+0x1]
c0025db1:	01 db                	add    ebx,ebx
c0025db3:	78 04                	js     c0025db9 <__divsf3+0x16d>
c0025db5:	89 c6                	mov    esi,eax
c0025db7:	eb f5                	jmp    c0025dae <__divsf3+0x162>
c0025db9:	89 c8                	mov    eax,ecx
c0025dbb:	0d 00 00 00 80       	or     eax,0x80000000
c0025dc0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025dc6:	31 d2                	xor    edx,edx
c0025dc8:	39 d8                	cmp    eax,ebx
c0025dca:	72 07                	jb     c0025dd3 <__divsf3+0x187>
c0025dcc:	29 d8                	sub    eax,ebx
c0025dce:	ba 01 00 00 00       	mov    edx,0x1
c0025dd3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0025dda:	01 d2                	add    edx,edx
c0025ddc:	89 c1                	mov    ecx,eax
c0025dde:	01 c0                	add    eax,eax
c0025de0:	85 c9                	test   ecx,ecx
c0025de2:	78 04                	js     c0025de8 <__divsf3+0x19c>
c0025de4:	39 c3                	cmp    ebx,eax
c0025de6:	77 05                	ja     c0025ded <__divsf3+0x1a1>
c0025de8:	29 d8                	sub    eax,ebx
c0025dea:	83 ca 01             	or     edx,0x1
c0025ded:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0025df0:	75 e8                	jne    c0025dda <__divsf3+0x18e>
c0025df2:	85 c0                	test   eax,eax
c0025df4:	0f 95 c0             	setne  al
c0025df7:	0f b6 c0             	movzx  eax,al
c0025dfa:	c1 e2 06             	shl    edx,0x6
c0025dfd:	09 c2                	or     edx,eax
c0025dff:	78 03                	js     c0025e04 <__divsf3+0x1b8>
c0025e01:	01 d2                	add    edx,edx
c0025e03:	4e                   	dec    esi
c0025e04:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025e0a:	7f 22                	jg     c0025e2e <__divsf3+0x1e2>
c0025e0c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025e12:	85 f6                	test   esi,esi
c0025e14:	7f 23                	jg     c0025e39 <__divsf3+0x1ed>
c0025e16:	83 fe e9             	cmp    esi,0xffffffe9
c0025e19:	7c 1a                	jl     c0025e35 <__divsf3+0x1e9>
c0025e1b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025e21:	b9 01 00 00 00       	mov    ecx,0x1
c0025e26:	29 f1                	sub    ecx,esi
c0025e28:	d3 ea                	shr    edx,cl
c0025e2a:	31 f6                	xor    esi,esi
c0025e2c:	eb 0b                	jmp    c0025e39 <__divsf3+0x1ed>
c0025e2e:	be ff 00 00 00       	mov    esi,0xff
c0025e33:	eb 02                	jmp    c0025e37 <__divsf3+0x1eb>
c0025e35:	31 f6                	xor    esi,esi
c0025e37:	31 d2                	xor    edx,edx
c0025e39:	89 d0                	mov    eax,edx
c0025e3b:	c1 e8 08             	shr    eax,0x8
c0025e3e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0025e41:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0025e47:	09 fe                	or     esi,edi
c0025e49:	c1 e6 17             	shl    esi,0x17
c0025e4c:	09 c6                	or     esi,eax
c0025e4e:	f6 c2 7f             	test   dl,0x7f
c0025e51:	0f 95 c1             	setne  cl
c0025e54:	09 c8                	or     eax,ecx
c0025e56:	83 e0 01             	and    eax,0x1
c0025e59:	c1 ea 07             	shr    edx,0x7
c0025e5c:	21 c2                	and    edx,eax
c0025e5e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0025e61:	eb 0a                	jmp    c0025e6d <__divsf3+0x221>
c0025e63:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0025e68:	eb 03                	jmp    c0025e6d <__divsf3+0x221>
c0025e6a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025e6d:	89 d8                	mov    eax,ebx
c0025e6f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025e72:	5b                   	pop    ebx
c0025e73:	5e                   	pop    esi
c0025e74:	5f                   	pop    edi
c0025e75:	5d                   	pop    ebp
c0025e76:	c3                   	ret    

c0025e77 <__floatsisf>:
c0025e77:	55                   	push   ebp
c0025e78:	89 e5                	mov    ebp,esp
c0025e7a:	53                   	push   ebx
c0025e7b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025e7e:	85 d2                	test   edx,edx
c0025e80:	7e 2b                	jle    c0025ead <__floatsisf+0x36>
c0025e82:	0f bd ca             	bsr    ecx,edx
c0025e85:	83 f1 1f             	xor    ecx,0x1f
c0025e88:	d3 e2                	shl    edx,cl
c0025e8a:	89 d0                	mov    eax,edx
c0025e8c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025e91:	89 c3                	mov    ebx,eax
c0025e93:	c1 eb 08             	shr    ebx,0x8
c0025e96:	80 e2 7f             	and    dl,0x7f
c0025e99:	0f 95 c2             	setne  dl
c0025e9c:	09 da                	or     edx,ebx
c0025e9e:	83 e2 01             	and    edx,0x1
c0025ea1:	c1 e8 07             	shr    eax,0x7
c0025ea4:	21 c2                	and    edx,eax
c0025ea6:	b8 9e 00 00 00       	mov    eax,0x9e
c0025eab:	eb 32                	jmp    c0025edf <__floatsisf+0x68>
c0025ead:	b8 00 00 00 00       	mov    eax,0x0
c0025eb2:	74 34                	je     c0025ee8 <__floatsisf+0x71>
c0025eb4:	f7 da                	neg    edx
c0025eb6:	0f bd ca             	bsr    ecx,edx
c0025eb9:	83 f1 1f             	xor    ecx,0x1f
c0025ebc:	d3 e2                	shl    edx,cl
c0025ebe:	89 d0                	mov    eax,edx
c0025ec0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025ec5:	89 c3                	mov    ebx,eax
c0025ec7:	c1 eb 08             	shr    ebx,0x8
c0025eca:	80 e2 7f             	and    dl,0x7f
c0025ecd:	0f 95 c2             	setne  dl
c0025ed0:	09 da                	or     edx,ebx
c0025ed2:	83 e2 01             	and    edx,0x1
c0025ed5:	c1 e8 07             	shr    eax,0x7
c0025ed8:	21 c2                	and    edx,eax
c0025eda:	b8 9e 01 00 00       	mov    eax,0x19e
c0025edf:	29 c8                	sub    eax,ecx
c0025ee1:	c1 e0 17             	shl    eax,0x17
c0025ee4:	09 d8                	or     eax,ebx
c0025ee6:	01 d0                	add    eax,edx
c0025ee8:	5b                   	pop    ebx
c0025ee9:	5d                   	pop    ebp
c0025eea:	c3                   	ret    

c0025eeb <__floatunsisf>:
c0025eeb:	55                   	push   ebp
c0025eec:	89 e5                	mov    ebp,esp
c0025eee:	53                   	push   ebx
c0025eef:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025ef2:	31 c0                	xor    eax,eax
c0025ef4:	85 d2                	test   edx,edx
c0025ef6:	74 32                	je     c0025f2a <__floatunsisf+0x3f>
c0025ef8:	0f bd ca             	bsr    ecx,edx
c0025efb:	83 f1 1f             	xor    ecx,0x1f
c0025efe:	d3 e2                	shl    edx,cl
c0025f00:	89 d0                	mov    eax,edx
c0025f02:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025f07:	89 c3                	mov    ebx,eax
c0025f09:	c1 eb 08             	shr    ebx,0x8
c0025f0c:	80 e2 7f             	and    dl,0x7f
c0025f0f:	0f 95 c2             	setne  dl
c0025f12:	09 da                	or     edx,ebx
c0025f14:	83 e2 01             	and    edx,0x1
c0025f17:	c1 e8 07             	shr    eax,0x7
c0025f1a:	21 c2                	and    edx,eax
c0025f1c:	b8 9e 00 00 00       	mov    eax,0x9e
c0025f21:	29 c8                	sub    eax,ecx
c0025f23:	c1 e0 17             	shl    eax,0x17
c0025f26:	09 d8                	or     eax,ebx
c0025f28:	01 d0                	add    eax,edx
c0025f2a:	5b                   	pop    ebx
c0025f2b:	5d                   	pop    ebp
c0025f2c:	c3                   	ret    

c0025f2d <__fixsfsi>:
c0025f2d:	55                   	push   ebp
c0025f2e:	89 e5                	mov    ebp,esp
c0025f30:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025f33:	89 d1                	mov    ecx,edx
c0025f35:	c1 e1 08             	shl    ecx,0x8
c0025f38:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0025f3e:	c1 fa 17             	sar    edx,0x17
c0025f41:	78 1c                	js     c0025f5f <__fixsfsi+0x32>
c0025f43:	83 ea 7f             	sub    edx,0x7f
c0025f46:	31 c0                	xor    eax,eax
c0025f48:	83 fa 1e             	cmp    edx,0x1e
c0025f4b:	77 40                	ja     c0025f8d <__fixsfsi+0x60>
c0025f4d:	89 c8                	mov    eax,ecx
c0025f4f:	0d 00 00 00 80       	or     eax,0x80000000
c0025f54:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025f59:	29 d1                	sub    ecx,edx
c0025f5b:	d3 e8                	shr    eax,cl
c0025f5d:	eb 2e                	jmp    c0025f8d <__fixsfsi+0x60>
c0025f5f:	31 c0                	xor    eax,eax
c0025f61:	81 c2 81 00 00 00    	add    edx,0x81
c0025f67:	78 24                	js     c0025f8d <__fixsfsi+0x60>
c0025f69:	83 fa 1e             	cmp    edx,0x1e
c0025f6c:	7e 09                	jle    c0025f77 <__fixsfsi+0x4a>
c0025f6e:	83 fa 1f             	cmp    edx,0x1f
c0025f71:	75 18                	jne    c0025f8b <__fixsfsi+0x5e>
c0025f73:	85 c9                	test   ecx,ecx
c0025f75:	75 14                	jne    c0025f8b <__fixsfsi+0x5e>
c0025f77:	89 c8                	mov    eax,ecx
c0025f79:	0d 00 00 00 80       	or     eax,0x80000000
c0025f7e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025f83:	29 d1                	sub    ecx,edx
c0025f85:	d3 e8                	shr    eax,cl
c0025f87:	f7 d8                	neg    eax
c0025f89:	eb 02                	jmp    c0025f8d <__fixsfsi+0x60>
c0025f8b:	31 c0                	xor    eax,eax
c0025f8d:	5d                   	pop    ebp
c0025f8e:	c3                   	ret    

c0025f8f <__fixunssfsi>:
c0025f8f:	55                   	push   ebp
c0025f90:	89 e5                	mov    ebp,esp
c0025f92:	53                   	push   ebx
c0025f93:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025f96:	89 d3                	mov    ebx,edx
c0025f98:	c1 fb 17             	sar    ebx,0x17
c0025f9b:	83 eb 7f             	sub    ebx,0x7f
c0025f9e:	31 c0                	xor    eax,eax
c0025fa0:	83 fb 1f             	cmp    ebx,0x1f
c0025fa3:	77 18                	ja     c0025fbd <__fixunssfsi+0x2e>
c0025fa5:	89 d0                	mov    eax,edx
c0025fa7:	c1 e0 08             	shl    eax,0x8
c0025faa:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025faf:	0d 00 00 00 80       	or     eax,0x80000000
c0025fb4:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025fb9:	29 d9                	sub    ecx,ebx
c0025fbb:	d3 e8                	shr    eax,cl
c0025fbd:	5b                   	pop    ebx
c0025fbe:	5d                   	pop    ebp
c0025fbf:	c3                   	ret    

c0025fc0 <__cmpsf2>:
c0025fc0:	55                   	push   ebp
c0025fc1:	89 e5                	mov    ebp,esp
c0025fc3:	57                   	push   edi
c0025fc4:	56                   	push   esi
c0025fc5:	53                   	push   ebx
c0025fc6:	83 ec 24             	sub    esp,0x24
c0025fc9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025fcc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fcf:	e8 4f 10 00 00       	call   c0027023 <__truncdfsf2>
c0025fd4:	5a                   	pop    edx
c0025fd5:	59                   	pop    ecx
c0025fd6:	89 c3                	mov    ebx,eax
c0025fd8:	c1 e8 17             	shr    eax,0x17
c0025fdb:	0f b6 f0             	movzx  esi,al
c0025fde:	89 d8                	mov    eax,ebx
c0025fe0:	c1 e8 1f             	shr    eax,0x1f
c0025fe3:	31 c6                	xor    esi,eax
c0025fe5:	c1 e3 08             	shl    ebx,0x8
c0025fe8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0025feb:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0025fee:	e8 30 10 00 00       	call   c0027023 <__truncdfsf2>
c0025ff3:	83 c4 10             	add    esp,0x10
c0025ff6:	89 c1                	mov    ecx,eax
c0025ff8:	c1 e9 17             	shr    ecx,0x17
c0025ffb:	0f b6 c9             	movzx  ecx,cl
c0025ffe:	89 c7                	mov    edi,eax
c0026000:	c1 ef 1f             	shr    edi,0x1f
c0026003:	89 ca                	mov    edx,ecx
c0026005:	31 fa                	xor    edx,edi
c0026007:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002600a:	c1 e0 08             	shl    eax,0x8
c002600d:	89 c2                	mov    edx,eax
c002600f:	89 d8                	mov    eax,ebx
c0026011:	09 d0                	or     eax,edx
c0026013:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026018:	09 f0                	or     eax,esi
c002601a:	75 08                	jne    c0026024 <__cmpsf2+0x64>
c002601c:	31 c0                	xor    eax,eax
c002601e:	39 f9                	cmp    ecx,edi
c0026020:	75 0c                	jne    c002602e <__cmpsf2+0x6e>
c0026022:	eb 29                	jmp    c002604d <__cmpsf2+0x8d>
c0026024:	b8 01 00 00 00       	mov    eax,0x1
c0026029:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002602c:	7f 1f                	jg     c002604d <__cmpsf2+0x8d>
c002602e:	83 c8 ff             	or     eax,0xffffffff
c0026031:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0026034:	7c 17                	jl     c002604d <__cmpsf2+0x8d>
c0026036:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002603c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026042:	b8 01 00 00 00       	mov    eax,0x1
c0026047:	39 d3                	cmp    ebx,edx
c0026049:	77 02                	ja     c002604d <__cmpsf2+0x8d>
c002604b:	19 c0                	sbb    eax,eax
c002604d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026050:	5b                   	pop    ebx
c0026051:	5e                   	pop    esi
c0026052:	5f                   	pop    edi
c0026053:	5d                   	pop    ebp
c0026054:	c3                   	ret    

c0026055 <__eqsf2>:
c0026055:	55                   	push   ebp
c0026056:	89 e5                	mov    ebp,esp
c0026058:	83 ec 24             	sub    esp,0x24
c002605b:	6a 01                	push   0x1
c002605d:	83 ec 0c             	sub    esp,0xc
c0026060:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026063:	e8 df 10 00 00       	call   c0027147 <__extendsfdf2>
c0026068:	83 c4 10             	add    esp,0x10
c002606b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002606e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026071:	52                   	push   edx
c0026072:	50                   	push   eax
c0026073:	50                   	push   eax
c0026074:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026077:	e8 cb 10 00 00       	call   c0027147 <__extendsfdf2>
c002607c:	59                   	pop    ecx
c002607d:	59                   	pop    ecx
c002607e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026081:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026084:	52                   	push   edx
c0026085:	50                   	push   eax
c0026086:	e8 35 ff ff ff       	call   c0025fc0 <__cmpsf2>
c002608b:	83 c4 20             	add    esp,0x20
c002608e:	c9                   	leave  
c002608f:	c3                   	ret    

c0026090 <__nesf2>:
c0026090:	eb c3                	jmp    c0026055 <__eqsf2>

c0026092 <__gtsf2>:
c0026092:	55                   	push   ebp
c0026093:	89 e5                	mov    ebp,esp
c0026095:	83 ec 24             	sub    esp,0x24
c0026098:	6a ff                	push   0xffffffff
c002609a:	83 ec 0c             	sub    esp,0xc
c002609d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00260a0:	e8 a2 10 00 00       	call   c0027147 <__extendsfdf2>
c00260a5:	83 c4 10             	add    esp,0x10
c00260a8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00260ab:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00260ae:	52                   	push   edx
c00260af:	50                   	push   eax
c00260b0:	50                   	push   eax
c00260b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260b4:	e8 8e 10 00 00       	call   c0027147 <__extendsfdf2>
c00260b9:	59                   	pop    ecx
c00260ba:	59                   	pop    ecx
c00260bb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00260be:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00260c1:	52                   	push   edx
c00260c2:	50                   	push   eax
c00260c3:	e8 f8 fe ff ff       	call   c0025fc0 <__cmpsf2>
c00260c8:	83 c4 20             	add    esp,0x20
c00260cb:	c9                   	leave  
c00260cc:	c3                   	ret    

c00260cd <__gesf2>:
c00260cd:	eb c3                	jmp    c0026092 <__gtsf2>

c00260cf <__ltsf2>:
c00260cf:	eb 84                	jmp    c0026055 <__eqsf2>

c00260d1 <__lesf2>:
c00260d1:	eb 82                	jmp    c0026055 <__eqsf2>

c00260d3 <__adddf3>:
c00260d3:	55                   	push   ebp
c00260d4:	89 e5                	mov    ebp,esp
c00260d6:	57                   	push   edi
c00260d7:	56                   	push   esi
c00260d8:	53                   	push   ebx
c00260d9:	83 ec 24             	sub    esp,0x24
c00260dc:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00260df:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00260e2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00260e5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00260e8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00260eb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00260ee:	89 c8                	mov    eax,ecx
c00260f0:	89 ce                	mov    esi,ecx
c00260f2:	c1 fe 14             	sar    esi,0x14
c00260f5:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00260f8:	89 fb                	mov    ebx,edi
c00260fa:	89 fa                	mov    edx,edi
c00260fc:	c1 e2 0b             	shl    edx,0xb
c00260ff:	c1 e0 0b             	shl    eax,0xb
c0026102:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026107:	c1 eb 15             	shr    ebx,0x15
c002610a:	09 d8                	or     eax,ebx
c002610c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002610f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0026112:	c1 fe 14             	sar    esi,0x14
c0026115:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0026118:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002611b:	89 f3                	mov    ebx,esi
c002611d:	c1 e3 0b             	shl    ebx,0xb
c0026120:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0026123:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026126:	c1 e3 0b             	shl    ebx,0xb
c0026129:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002612f:	c1 ee 15             	shr    esi,0x15
c0026132:	09 f3                	or     ebx,esi
c0026134:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0026137:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002613a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002613d:	0f 88 5f 02 00 00    	js     c00263a2 <__adddf3+0x2cf>
c0026143:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026146:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0026149:	85 db                	test   ebx,ebx
c002614b:	0f 8e c7 00 00 00    	jle    c0026218 <__adddf3+0x145>
c0026151:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0026158:	75 1a                	jne    c0026174 <__adddf3+0xa1>
c002615a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002615d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0026160:	0f 84 b2 05 00 00    	je     c0026718 <__adddf3+0x645>
c0026166:	4b                   	dec    ebx
c0026167:	75 23                	jne    c002618c <__adddf3+0xb9>
c0026169:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002616c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002616f:	e9 99 00 00 00       	jmp    c002620d <__adddf3+0x13a>
c0026174:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026177:	f7 d6                	not    esi
c0026179:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002617f:	0f 84 93 05 00 00    	je     c0026718 <__adddf3+0x645>
c0026185:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002618c:	83 fb 1f             	cmp    ebx,0x1f
c002618f:	7e 42                	jle    c00261d3 <__adddf3+0x100>
c0026191:	83 fb 3f             	cmp    ebx,0x3f
c0026194:	0f 8f 7e 05 00 00    	jg     c0026718 <__adddf3+0x645>
c002619a:	83 e3 1f             	and    ebx,0x1f
c002619d:	89 d9                	mov    ecx,ebx
c002619f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00261a2:	d3 ef                	shr    edi,cl
c00261a4:	31 db                	xor    ebx,ebx
c00261a6:	85 c9                	test   ecx,ecx
c00261a8:	74 15                	je     c00261bf <__adddf3+0xec>
c00261aa:	be 20 00 00 00       	mov    esi,0x20
c00261af:	29 ce                	sub    esi,ecx
c00261b1:	89 f1                	mov    ecx,esi
c00261b3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00261b6:	d3 e6                	shl    esi,cl
c00261b8:	31 db                	xor    ebx,ebx
c00261ba:	85 f6                	test   esi,esi
c00261bc:	0f 95 c3             	setne  bl
c00261bf:	31 c9                	xor    ecx,ecx
c00261c1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00261c5:	0f 95 c1             	setne  cl
c00261c8:	09 cf                	or     edi,ecx
c00261ca:	09 fb                	or     ebx,edi
c00261cc:	01 da                	add    edx,ebx
c00261ce:	83 d0 00             	adc    eax,0x0
c00261d1:	eb 3a                	jmp    c002620d <__adddf3+0x13a>
c00261d3:	bf 20 00 00 00       	mov    edi,0x20
c00261d8:	29 df                	sub    edi,ebx
c00261da:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00261dd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00261e0:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00261e3:	d3 e6                	shl    esi,cl
c00261e5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00261e8:	88 d9                	mov    cl,bl
c00261ea:	d3 ef                	shr    edi,cl
c00261ec:	09 fe                	or     esi,edi
c00261ee:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00261f1:	88 d9                	mov    cl,bl
c00261f3:	d3 ef                	shr    edi,cl
c00261f5:	89 fb                	mov    ebx,edi
c00261f7:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00261fa:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00261fd:	d3 e7                	shl    edi,cl
c00261ff:	85 ff                	test   edi,edi
c0026201:	0f 95 c1             	setne  cl
c0026204:	0f b6 c9             	movzx  ecx,cl
c0026207:	09 ce                	or     esi,ecx
c0026209:	01 f2                	add    edx,esi
c002620b:	11 d8                	adc    eax,ebx
c002620d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026210:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026213:	e9 52 01 00 00       	jmp    c002636a <__adddf3+0x297>
c0026218:	0f 84 d5 00 00 00    	je     c00262f3 <__adddf3+0x220>
c002621e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026221:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0026224:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026227:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002622a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0026231:	75 20                	jne    c0026253 <__adddf3+0x180>
c0026233:	89 d6                	mov    esi,edx
c0026235:	09 c6                	or     esi,eax
c0026237:	0f 84 db 04 00 00    	je     c0026718 <__adddf3+0x645>
c002623d:	4b                   	dec    ebx
c002623e:	75 29                	jne    c0026269 <__adddf3+0x196>
c0026240:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026243:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026246:	01 d1                	add    ecx,edx
c0026248:	11 c6                	adc    esi,eax
c002624a:	89 f0                	mov    eax,esi
c002624c:	89 ca                	mov    edx,ecx
c002624e:	e9 17 01 00 00       	jmp    c002636a <__adddf3+0x297>
c0026253:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026256:	f7 d6                	not    esi
c0026258:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002625e:	0f 84 b4 04 00 00    	je     c0026718 <__adddf3+0x645>
c0026264:	0d 00 00 00 80       	or     eax,0x80000000
c0026269:	83 fb 1f             	cmp    ebx,0x1f
c002626c:	7e 48                	jle    c00262b6 <__adddf3+0x1e3>
c002626e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026271:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026274:	83 fb 3f             	cmp    ebx,0x3f
c0026277:	0f 8f 9b 04 00 00    	jg     c0026718 <__adddf3+0x645>
c002627d:	83 e3 1f             	and    ebx,0x1f
c0026280:	89 d9                	mov    ecx,ebx
c0026282:	89 c7                	mov    edi,eax
c0026284:	d3 ef                	shr    edi,cl
c0026286:	31 db                	xor    ebx,ebx
c0026288:	85 c9                	test   ecx,ecx
c002628a:	74 12                	je     c002629e <__adddf3+0x1cb>
c002628c:	be 20 00 00 00       	mov    esi,0x20
c0026291:	29 ce                	sub    esi,ecx
c0026293:	89 f1                	mov    ecx,esi
c0026295:	d3 e0                	shl    eax,cl
c0026297:	31 db                	xor    ebx,ebx
c0026299:	85 c0                	test   eax,eax
c002629b:	0f 95 c3             	setne  bl
c002629e:	31 c0                	xor    eax,eax
c00262a0:	85 d2                	test   edx,edx
c00262a2:	0f 95 c0             	setne  al
c00262a5:	09 c7                	or     edi,eax
c00262a7:	09 fb                	or     ebx,edi
c00262a9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00262ac:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00262af:	01 da                	add    edx,ebx
c00262b1:	83 d6 00             	adc    esi,0x0
c00262b4:	eb 39                	jmp    c00262ef <__adddf3+0x21c>
c00262b6:	be 20 00 00 00       	mov    esi,0x20
c00262bb:	29 de                	sub    esi,ebx
c00262bd:	89 c7                	mov    edi,eax
c00262bf:	89 f1                	mov    ecx,esi
c00262c1:	d3 e7                	shl    edi,cl
c00262c3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00262c6:	89 d7                	mov    edi,edx
c00262c8:	88 d9                	mov    cl,bl
c00262ca:	d3 ef                	shr    edi,cl
c00262cc:	89 f9                	mov    ecx,edi
c00262ce:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00262d1:	09 cf                	or     edi,ecx
c00262d3:	88 d9                	mov    cl,bl
c00262d5:	d3 e8                	shr    eax,cl
c00262d7:	89 f1                	mov    ecx,esi
c00262d9:	d3 e2                	shl    edx,cl
c00262db:	85 d2                	test   edx,edx
c00262dd:	0f 95 c2             	setne  dl
c00262e0:	0f b6 d2             	movzx  edx,dl
c00262e3:	09 d7                	or     edi,edx
c00262e5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00262e8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00262eb:	01 fa                	add    edx,edi
c00262ed:	11 c6                	adc    esi,eax
c00262ef:	89 f0                	mov    eax,esi
c00262f1:	eb 77                	jmp    c002636a <__adddf3+0x297>
c00262f3:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00262f6:	46                   	inc    esi
c00262f7:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00262fa:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0026300:	75 41                	jne    c0026343 <__adddf3+0x270>
c0026302:	89 d3                	mov    ebx,edx
c0026304:	09 c3                	or     ebx,eax
c0026306:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002630d:	75 27                	jne    c0026336 <__adddf3+0x263>
c002630f:	85 db                	test   ebx,ebx
c0026311:	0f 84 fb 03 00 00    	je     c0026712 <__adddf3+0x63f>
c0026317:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002631a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002631d:	0f 84 f5 03 00 00    	je     c0026718 <__adddf3+0x645>
c0026323:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026326:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026329:	85 c0                	test   eax,eax
c002632b:	0f 89 91 03 00 00    	jns    c00266c2 <__adddf3+0x5ef>
c0026331:	e9 85 03 00 00       	jmp    c00266bb <__adddf3+0x5e8>
c0026336:	85 db                	test   ebx,ebx
c0026338:	0f 85 da 03 00 00    	jne    c0026718 <__adddf3+0x645>
c002633e:	e9 cf 03 00 00       	jmp    c0026712 <__adddf3+0x63f>
c0026343:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026346:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026349:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002634c:	f7 d1                	not    ecx
c002634e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0026354:	0f 84 70 03 00 00    	je     c00266ca <__adddf3+0x5f7>
c002635a:	d1 ea                	shr    edx,1
c002635c:	89 c1                	mov    ecx,eax
c002635e:	c1 e1 1f             	shl    ecx,0x1f
c0026361:	09 ca                	or     edx,ecx
c0026363:	d1 e8                	shr    eax,1
c0026365:	e9 6f 03 00 00       	jmp    c00266d9 <__adddf3+0x606>
c002636a:	85 c0                	test   eax,eax
c002636c:	0f 89 67 03 00 00    	jns    c00266d9 <__adddf3+0x606>
c0026372:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0026375:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026378:	f7 d1                	not    ecx
c002637a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0026380:	0f 84 44 03 00 00    	je     c00266ca <__adddf3+0x5f7>
c0026386:	89 d1                	mov    ecx,edx
c0026388:	d1 e9                	shr    ecx,1
c002638a:	83 e2 01             	and    edx,0x1
c002638d:	09 ca                	or     edx,ecx
c002638f:	89 c1                	mov    ecx,eax
c0026391:	c1 e1 1f             	shl    ecx,0x1f
c0026394:	09 ca                	or     edx,ecx
c0026396:	d1 e8                	shr    eax,1
c0026398:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002639d:	e9 37 03 00 00       	jmp    c00266d9 <__adddf3+0x606>
c00263a2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00263a5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00263ab:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00263ae:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00263b1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00263b7:	29 de                	sub    esi,ebx
c00263b9:	85 f6                	test   esi,esi
c00263bb:	0f 8e bd 00 00 00    	jle    c002647e <__adddf3+0x3ab>
c00263c1:	85 db                	test   ebx,ebx
c00263c3:	75 17                	jne    c00263dc <__adddf3+0x309>
c00263c5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00263c8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00263cb:	0f 84 47 03 00 00    	je     c0026718 <__adddf3+0x645>
c00263d1:	4e                   	dec    esi
c00263d2:	75 20                	jne    c00263f4 <__adddf3+0x321>
c00263d4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00263d7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00263da:	eb 5b                	jmp    c0026437 <__adddf3+0x364>
c00263dc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00263df:	f7 d3                	not    ebx
c00263e1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00263e7:	0f 84 2b 03 00 00    	je     c0026718 <__adddf3+0x645>
c00263ed:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00263f4:	83 fe 1f             	cmp    esi,0x1f
c00263f7:	7e 49                	jle    c0026442 <__adddf3+0x36f>
c00263f9:	83 fe 3f             	cmp    esi,0x3f
c00263fc:	0f 8f 16 03 00 00    	jg     c0026718 <__adddf3+0x645>
c0026402:	83 e6 1f             	and    esi,0x1f
c0026405:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026408:	89 f1                	mov    ecx,esi
c002640a:	d3 ef                	shr    edi,cl
c002640c:	31 db                	xor    ebx,ebx
c002640e:	85 f6                	test   esi,esi
c0026410:	74 13                	je     c0026425 <__adddf3+0x352>
c0026412:	b9 20 00 00 00       	mov    ecx,0x20
c0026417:	29 f1                	sub    ecx,esi
c0026419:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002641c:	d3 e6                	shl    esi,cl
c002641e:	31 db                	xor    ebx,ebx
c0026420:	85 f6                	test   esi,esi
c0026422:	0f 95 c3             	setne  bl
c0026425:	31 c9                	xor    ecx,ecx
c0026427:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002642b:	0f 95 c1             	setne  cl
c002642e:	09 cf                	or     edi,ecx
c0026430:	09 fb                	or     ebx,edi
c0026432:	29 da                	sub    edx,ebx
c0026434:	83 d8 00             	sbb    eax,0x0
c0026437:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002643a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002643d:	e9 aa 01 00 00       	jmp    c00265ec <__adddf3+0x519>
c0026442:	bf 20 00 00 00       	mov    edi,0x20
c0026447:	29 f7                	sub    edi,esi
c0026449:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002644c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002644f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026452:	d3 e3                	shl    ebx,cl
c0026454:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026457:	89 f1                	mov    ecx,esi
c0026459:	d3 ef                	shr    edi,cl
c002645b:	09 fb                	or     ebx,edi
c002645d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026460:	89 f1                	mov    ecx,esi
c0026462:	d3 ef                	shr    edi,cl
c0026464:	89 fe                	mov    esi,edi
c0026466:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026469:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002646c:	d3 e7                	shl    edi,cl
c002646e:	85 ff                	test   edi,edi
c0026470:	0f 95 c1             	setne  cl
c0026473:	0f b6 c9             	movzx  ecx,cl
c0026476:	09 cb                	or     ebx,ecx
c0026478:	29 da                	sub    edx,ebx
c002647a:	19 f0                	sbb    eax,esi
c002647c:	eb b9                	jmp    c0026437 <__adddf3+0x364>
c002647e:	0f 84 cd 00 00 00    	je     c0026551 <__adddf3+0x47e>
c0026484:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0026487:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002648a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002648d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026491:	75 1b                	jne    c00264ae <__adddf3+0x3db>
c0026493:	89 d6                	mov    esi,edx
c0026495:	09 c6                	or     esi,eax
c0026497:	0f 84 7b 02 00 00    	je     c0026718 <__adddf3+0x645>
c002649d:	4b                   	dec    ebx
c002649e:	75 24                	jne    c00264c4 <__adddf3+0x3f1>
c00264a0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00264a3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00264a6:	29 d1                	sub    ecx,edx
c00264a8:	19 c6                	sbb    esi,eax
c00264aa:	89 ca                	mov    edx,ecx
c00264ac:	eb 61                	jmp    c002650f <__adddf3+0x43c>
c00264ae:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00264b1:	f7 d6                	not    esi
c00264b3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00264b9:	0f 84 59 02 00 00    	je     c0026718 <__adddf3+0x645>
c00264bf:	0d 00 00 00 80       	or     eax,0x80000000
c00264c4:	83 fb 1f             	cmp    ebx,0x1f
c00264c7:	7e 4d                	jle    c0026516 <__adddf3+0x443>
c00264c9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00264cc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00264cf:	83 fb 3f             	cmp    ebx,0x3f
c00264d2:	0f 8f 40 02 00 00    	jg     c0026718 <__adddf3+0x645>
c00264d8:	83 e3 1f             	and    ebx,0x1f
c00264db:	89 d9                	mov    ecx,ebx
c00264dd:	89 c7                	mov    edi,eax
c00264df:	d3 ef                	shr    edi,cl
c00264e1:	31 db                	xor    ebx,ebx
c00264e3:	85 c9                	test   ecx,ecx
c00264e5:	74 12                	je     c00264f9 <__adddf3+0x426>
c00264e7:	be 20 00 00 00       	mov    esi,0x20
c00264ec:	29 ce                	sub    esi,ecx
c00264ee:	89 f1                	mov    ecx,esi
c00264f0:	d3 e0                	shl    eax,cl
c00264f2:	31 db                	xor    ebx,ebx
c00264f4:	85 c0                	test   eax,eax
c00264f6:	0f 95 c3             	setne  bl
c00264f9:	31 c0                	xor    eax,eax
c00264fb:	85 d2                	test   edx,edx
c00264fd:	0f 95 c0             	setne  al
c0026500:	09 c7                	or     edi,eax
c0026502:	09 fb                	or     ebx,edi
c0026504:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026507:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002650a:	29 da                	sub    edx,ebx
c002650c:	83 de 00             	sbb    esi,0x0
c002650f:	89 f0                	mov    eax,esi
c0026511:	e9 d6 00 00 00       	jmp    c00265ec <__adddf3+0x519>
c0026516:	be 20 00 00 00       	mov    esi,0x20
c002651b:	29 de                	sub    esi,ebx
c002651d:	89 c7                	mov    edi,eax
c002651f:	89 f1                	mov    ecx,esi
c0026521:	d3 e7                	shl    edi,cl
c0026523:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0026526:	89 d7                	mov    edi,edx
c0026528:	88 d9                	mov    cl,bl
c002652a:	d3 ef                	shr    edi,cl
c002652c:	89 f9                	mov    ecx,edi
c002652e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026531:	09 cf                	or     edi,ecx
c0026533:	88 d9                	mov    cl,bl
c0026535:	d3 e8                	shr    eax,cl
c0026537:	89 f1                	mov    ecx,esi
c0026539:	d3 e2                	shl    edx,cl
c002653b:	85 d2                	test   edx,edx
c002653d:	0f 95 c2             	setne  dl
c0026540:	0f b6 d2             	movzx  edx,dl
c0026543:	09 d7                	or     edi,edx
c0026545:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026548:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002654b:	29 fa                	sub    edx,edi
c002654d:	19 c6                	sbb    esi,eax
c002654f:	eb be                	jmp    c002650f <__adddf3+0x43c>
c0026551:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026554:	8d 5e 01             	lea    ebx,[esi+0x1]
c0026557:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002655d:	75 6a                	jne    c00265c9 <__adddf3+0x4f6>
c002655f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026563:	75 58                	jne    c00265bd <__adddf3+0x4ea>
c0026565:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026568:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002656b:	89 d6                	mov    esi,edx
c002656d:	09 c6                	or     esi,eax
c002656f:	75 17                	jne    c0026588 <__adddf3+0x4b5>
c0026571:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026574:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026577:	85 db                	test   ebx,ebx
c0026579:	0f 85 99 01 00 00    	jne    c0026718 <__adddf3+0x645>
c002657f:	31 ff                	xor    edi,edi
c0026581:	31 c9                	xor    ecx,ecx
c0026583:	e9 90 01 00 00       	jmp    c0026718 <__adddf3+0x645>
c0026588:	85 db                	test   ebx,ebx
c002658a:	0f 84 88 01 00 00    	je     c0026718 <__adddf3+0x645>
c0026590:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0026593:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0026596:	85 c0                	test   eax,eax
c0026598:	79 10                	jns    c00265aa <__adddf3+0x4d7>
c002659a:	31 c9                	xor    ecx,ecx
c002659c:	f7 da                	neg    edx
c002659e:	0f 95 c1             	setne  cl
c00265a1:	01 c8                	add    eax,ecx
c00265a3:	f7 d8                	neg    eax
c00265a5:	e9 2f 01 00 00       	jmp    c00266d9 <__adddf3+0x606>
c00265aa:	31 ff                	xor    edi,edi
c00265ac:	31 c9                	xor    ecx,ecx
c00265ae:	89 c3                	mov    ebx,eax
c00265b0:	09 d3                	or     ebx,edx
c00265b2:	0f 84 60 01 00 00    	je     c0026718 <__adddf3+0x645>
c00265b8:	e9 05 01 00 00       	jmp    c00266c2 <__adddf3+0x5ef>
c00265bd:	31 ff                	xor    edi,edi
c00265bf:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00265c4:	e9 4f 01 00 00       	jmp    c0026718 <__adddf3+0x645>
c00265c9:	89 c1                	mov    ecx,eax
c00265cb:	89 d0                	mov    eax,edx
c00265cd:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00265d0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00265d3:	89 ca                	mov    edx,ecx
c00265d5:	85 c9                	test   ecx,ecx
c00265d7:	79 2c                	jns    c0026605 <__adddf3+0x532>
c00265d9:	31 c9                	xor    ecx,ecx
c00265db:	f7 d8                	neg    eax
c00265dd:	0f 95 c1             	setne  cl
c00265e0:	01 ca                	add    edx,ecx
c00265e2:	f7 da                	neg    edx
c00265e4:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00265e7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00265ea:	eb 19                	jmp    c0026605 <__adddf3+0x532>
c00265ec:	85 c0                	test   eax,eax
c00265ee:	0f 89 e5 00 00 00    	jns    c00266d9 <__adddf3+0x606>
c00265f4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00265f9:	89 c1                	mov    ecx,eax
c00265fb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00265fe:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0026601:	89 d0                	mov    eax,edx
c0026603:	89 ca                	mov    edx,ecx
c0026605:	85 d2                	test   edx,edx
c0026607:	74 59                	je     c0026662 <__adddf3+0x58f>
c0026609:	0f bd da             	bsr    ebx,edx
c002660c:	83 f3 1f             	xor    ebx,0x1f
c002660f:	88 d9                	mov    cl,bl
c0026611:	d3 e2                	shl    edx,cl
c0026613:	bf 20 00 00 00       	mov    edi,0x20
c0026618:	89 f9                	mov    ecx,edi
c002661a:	29 d9                	sub    ecx,ebx
c002661c:	89 c6                	mov    esi,eax
c002661e:	d3 ee                	shr    esi,cl
c0026620:	09 d6                	or     esi,edx
c0026622:	88 d9                	mov    cl,bl
c0026624:	d3 e0                	shl    eax,cl
c0026626:	89 c2                	mov    edx,eax
c0026628:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002662b:	25 ff 07 00 00       	and    eax,0x7ff
c0026630:	39 d8                	cmp    eax,ebx
c0026632:	7f 22                	jg     c0026656 <__adddf3+0x583>
c0026634:	29 c3                	sub    ebx,eax
c0026636:	43                   	inc    ebx
c0026637:	88 d9                	mov    cl,bl
c0026639:	d3 ea                	shr    edx,cl
c002663b:	29 df                	sub    edi,ebx
c002663d:	89 f9                	mov    ecx,edi
c002663f:	89 f0                	mov    eax,esi
c0026641:	d3 e0                	shl    eax,cl
c0026643:	09 c2                	or     edx,eax
c0026645:	89 f0                	mov    eax,esi
c0026647:	88 d9                	mov    cl,bl
c0026649:	d3 e8                	shr    eax,cl
c002664b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002664e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0026654:	eb 6f                	jmp    c00266c5 <__adddf3+0x5f2>
c0026656:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026659:	29 d8                	sub    eax,ebx
c002665b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002665e:	89 f0                	mov    eax,esi
c0026660:	eb 59                	jmp    c00266bb <__adddf3+0x5e8>
c0026662:	85 c0                	test   eax,eax
c0026664:	74 6a                	je     c00266d0 <__adddf3+0x5fd>
c0026666:	0f bd c8             	bsr    ecx,eax
c0026669:	83 f1 1f             	xor    ecx,0x1f
c002666c:	d3 e0                	shl    eax,cl
c002666e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026671:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026677:	83 c1 20             	add    ecx,0x20
c002667a:	39 cb                	cmp    ebx,ecx
c002667c:	7f 35                	jg     c00266b3 <__adddf3+0x5e0>
c002667e:	29 d9                	sub    ecx,ebx
c0026680:	8d 71 01             	lea    esi,[ecx+0x1]
c0026683:	83 fe 1f             	cmp    esi,0x1f
c0026686:	7e 09                	jle    c0026691 <__adddf3+0x5be>
c0026688:	83 e9 1f             	sub    ecx,0x1f
c002668b:	d3 e8                	shr    eax,cl
c002668d:	89 c3                	mov    ebx,eax
c002668f:	eb 11                	jmp    c00266a2 <__adddf3+0x5cf>
c0026691:	b9 20 00 00 00       	mov    ecx,0x20
c0026696:	29 f1                	sub    ecx,esi
c0026698:	89 c3                	mov    ebx,eax
c002669a:	d3 e3                	shl    ebx,cl
c002669c:	89 f1                	mov    ecx,esi
c002669e:	d3 e8                	shr    eax,cl
c00266a0:	89 c2                	mov    edx,eax
c00266a2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00266a5:	25 00 f8 ff ff       	and    eax,0xfffff800
c00266aa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00266ad:	89 d0                	mov    eax,edx
c00266af:	89 da                	mov    edx,ebx
c00266b1:	eb 26                	jmp    c00266d9 <__adddf3+0x606>
c00266b3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00266b6:	29 cf                	sub    edi,ecx
c00266b8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00266bb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00266c0:	eb 17                	jmp    c00266d9 <__adddf3+0x606>
c00266c2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00266c5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00266c8:	eb 0f                	jmp    c00266d9 <__adddf3+0x606>
c00266ca:	31 d2                	xor    edx,edx
c00266cc:	31 c0                	xor    eax,eax
c00266ce:	eb 09                	jmp    c00266d9 <__adddf3+0x606>
c00266d0:	89 c2                	mov    edx,eax
c00266d2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00266d9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00266dc:	c1 e1 14             	shl    ecx,0x14
c00266df:	89 c3                	mov    ebx,eax
c00266e1:	c1 eb 0b             	shr    ebx,0xb
c00266e4:	09 d9                	or     ecx,ebx
c00266e6:	89 d3                	mov    ebx,edx
c00266e8:	c1 eb 0b             	shr    ebx,0xb
c00266eb:	c1 e0 15             	shl    eax,0x15
c00266ee:	09 d8                	or     eax,ebx
c00266f0:	89 c7                	mov    edi,eax
c00266f2:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00266f8:	0f 95 c0             	setne  al
c00266fb:	89 c6                	mov    esi,eax
c00266fd:	09 f3                	or     ebx,esi
c00266ff:	83 e3 01             	and    ebx,0x1
c0026702:	c1 ea 0a             	shr    edx,0xa
c0026705:	21 da                	and    edx,ebx
c0026707:	89 f8                	mov    eax,edi
c0026709:	01 d0                	add    eax,edx
c002670b:	83 d1 00             	adc    ecx,0x0
c002670e:	89 c7                	mov    edi,eax
c0026710:	eb 06                	jmp    c0026718 <__adddf3+0x645>
c0026712:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026715:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026718:	89 f8                	mov    eax,edi
c002671a:	89 ca                	mov    edx,ecx
c002671c:	83 c4 24             	add    esp,0x24
c002671f:	5b                   	pop    ebx
c0026720:	5e                   	pop    esi
c0026721:	5f                   	pop    edi
c0026722:	5d                   	pop    ebp
c0026723:	c3                   	ret    

c0026724 <__subdf3>:
c0026724:	55                   	push   ebp
c0026725:	89 e5                	mov    ebp,esp
c0026727:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002672a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002672d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0026733:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0026736:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0026739:	5d                   	pop    ebp
c002673a:	e9 94 f9 ff ff       	jmp    c00260d3 <__adddf3>

c002673f <__negdf2>:
c002673f:	55                   	push   ebp
c0026740:	89 e5                	mov    ebp,esp
c0026742:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026745:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026748:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002674e:	5d                   	pop    ebp
c002674f:	c3                   	ret    

c0026750 <__muldf3>:
c0026750:	55                   	push   ebp
c0026751:	89 e5                	mov    ebp,esp
c0026753:	57                   	push   edi
c0026754:	56                   	push   esi
c0026755:	53                   	push   ebx
c0026756:	83 ec 24             	sub    esp,0x24
c0026759:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002675c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002675f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026762:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026765:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0026768:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002676b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002676e:	89 c8                	mov    eax,ecx
c0026770:	c1 f8 14             	sar    eax,0x14
c0026773:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026776:	89 f8                	mov    eax,edi
c0026778:	89 fb                	mov    ebx,edi
c002677a:	c1 e3 0b             	shl    ebx,0xb
c002677d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0026780:	c1 e1 0b             	shl    ecx,0xb
c0026783:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026789:	c1 e8 15             	shr    eax,0x15
c002678c:	09 c1                	or     ecx,eax
c002678e:	89 d6                	mov    esi,edx
c0026790:	89 d0                	mov    eax,edx
c0026792:	c1 f8 14             	sar    eax,0x14
c0026795:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0026798:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002679b:	89 c3                	mov    ebx,eax
c002679d:	c1 e3 0b             	shl    ebx,0xb
c00267a0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00267a3:	c1 e6 0b             	shl    esi,0xb
c00267a6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00267ac:	c1 e8 15             	shr    eax,0x15
c00267af:	09 c6                	or     esi,eax
c00267b1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00267b4:	25 ff 07 00 00       	and    eax,0x7ff
c00267b9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00267bc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00267bf:	25 ff 07 00 00       	and    eax,0x7ff
c00267c4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00267c7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00267ca:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00267cd:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00267d4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00267d7:	40                   	inc    eax
c00267d8:	a9 fe 07 00 00       	test   eax,0x7fe
c00267dd:	0f 85 8d 00 00 00    	jne    c0026870 <__muldf3+0x120>
c00267e3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00267e6:	09 c8                	or     eax,ecx
c00267e8:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00267ec:	74 44                	je     c0026832 <__muldf3+0xe2>
c00267ee:	85 c0                	test   eax,eax
c00267f0:	0f 85 31 02 00 00    	jne    c0026a27 <__muldf3+0x2d7>
c00267f6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00267f9:	40                   	inc    eax
c00267fa:	a9 fe 07 00 00       	test   eax,0x7fe
c00267ff:	75 13                	jne    c0026814 <__muldf3+0xc4>
c0026801:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026804:	09 f1                	or     ecx,esi
c0026806:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002680a:	74 22                	je     c002682e <__muldf3+0xde>
c002680c:	85 c9                	test   ecx,ecx
c002680e:	0f 85 0d 02 00 00    	jne    c0026a21 <__muldf3+0x2d1>
c0026814:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0026818:	0f 89 09 02 00 00    	jns    c0026a27 <__muldf3+0x2d7>
c002681e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026821:	05 00 00 00 80       	add    eax,0x80000000
c0026826:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026829:	e9 f9 01 00 00       	jmp    c0026a27 <__muldf3+0x2d7>
c002682e:	85 c9                	test   ecx,ecx
c0026830:	eb 2e                	jmp    c0026860 <__muldf3+0x110>
c0026832:	85 c0                	test   eax,eax
c0026834:	74 20                	je     c0026856 <__muldf3+0x106>
c0026836:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0026839:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002683c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002683f:	c1 ef 1f             	shr    edi,0x1f
c0026842:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0026845:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0026848:	8d 43 ff             	lea    eax,[ebx-0x1]
c002684b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002684e:	09 f9                	or     ecx,edi
c0026850:	78 1e                	js     c0026870 <__muldf3+0x120>
c0026852:	89 c3                	mov    ebx,eax
c0026854:	eb e0                	jmp    c0026836 <__muldf3+0xe6>
c0026856:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026859:	f7 d0                	not    eax
c002685b:	a9 ff 07 00 00       	test   eax,0x7ff
c0026860:	75 b2                	jne    c0026814 <__muldf3+0xc4>
c0026862:	31 ff                	xor    edi,edi
c0026864:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c002686b:	e9 b7 01 00 00       	jmp    c0026a27 <__muldf3+0x2d7>
c0026870:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026873:	40                   	inc    eax
c0026874:	a9 fe 07 00 00       	test   eax,0x7fe
c0026879:	75 57                	jne    c00268d2 <__muldf3+0x182>
c002687b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002687e:	09 f0                	or     eax,esi
c0026880:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026884:	74 23                	je     c00268a9 <__muldf3+0x159>
c0026886:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c002688a:	0f 89 91 01 00 00    	jns    c0026a21 <__muldf3+0x2d1>
c0026890:	85 c0                	test   eax,eax
c0026892:	0f 85 89 01 00 00    	jne    c0026a21 <__muldf3+0x2d1>
c0026898:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002689b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00268a1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00268a4:	e9 7e 01 00 00       	jmp    c0026a27 <__muldf3+0x2d7>
c00268a9:	85 c0                	test   eax,eax
c00268ab:	75 0c                	jne    c00268b9 <__muldf3+0x169>
c00268ad:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00268b1:	0f 89 6a 01 00 00    	jns    c0026a21 <__muldf3+0x2d1>
c00268b7:	eb df                	jmp    c0026898 <__muldf3+0x148>
c00268b9:	01 f6                	add    esi,esi
c00268bb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00268be:	c1 ea 1f             	shr    edx,0x1f
c00268c1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00268c4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00268c7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00268ca:	09 d6                	or     esi,edx
c00268cc:	78 04                	js     c00268d2 <__muldf3+0x182>
c00268ce:	89 c3                	mov    ebx,eax
c00268d0:	eb e7                	jmp    c00268b9 <__muldf3+0x169>
c00268d2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00268d8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00268de:	89 c8                	mov    eax,ecx
c00268e0:	f7 e6                	mul    esi
c00268e2:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00268e5:	89 c7                	mov    edi,eax
c00268e7:	89 c8                	mov    eax,ecx
c00268e9:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00268ec:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00268ef:	89 c1                	mov    ecx,eax
c00268f1:	89 f0                	mov    eax,esi
c00268f3:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c00268f6:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00268f9:	89 c6                	mov    esi,eax
c00268fb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00268fe:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0026901:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0026904:	31 c0                	xor    eax,eax
c0026906:	01 f1                	add    ecx,esi
c0026908:	0f 92 c0             	setb   al
c002690b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c002690e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0026911:	83 d6 00             	adc    esi,0x0
c0026914:	01 c7                	add    edi,eax
c0026916:	83 d6 00             	adc    esi,0x0
c0026919:	01 ca                	add    edx,ecx
c002691b:	0f 92 c1             	setb   cl
c002691e:	0f b6 c9             	movzx  ecx,cl
c0026921:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0026924:	83 d6 00             	adc    esi,0x0
c0026927:	01 cf                	add    edi,ecx
c0026929:	83 d6 00             	adc    esi,0x0
c002692c:	31 c9                	xor    ecx,ecx
c002692e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0026931:	0f 95 c1             	setne  cl
c0026934:	09 cf                	or     edi,ecx
c0026936:	85 f6                	test   esi,esi
c0026938:	78 0c                	js     c0026946 <__muldf3+0x1f6>
c002693a:	01 f6                	add    esi,esi
c002693c:	89 f8                	mov    eax,edi
c002693e:	c1 e8 1f             	shr    eax,0x1f
c0026941:	09 c6                	or     esi,eax
c0026943:	01 ff                	add    edi,edi
c0026945:	4b                   	dec    ebx
c0026946:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c002694c:	0f 8f 85 00 00 00    	jg     c00269d7 <__muldf3+0x287>
c0026952:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0026958:	85 db                	test   ebx,ebx
c002695a:	0f 8f 84 00 00 00    	jg     c00269e4 <__muldf3+0x294>
c0026960:	83 fb cc             	cmp    ebx,0xffffffcc
c0026963:	7c 79                	jl     c00269de <__muldf3+0x28e>
c0026965:	ba 01 00 00 00       	mov    edx,0x1
c002696a:	29 da                	sub    edx,ebx
c002696c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026972:	83 fa 1f             	cmp    edx,0x1f
c0026975:	7e 30                	jle    c00269a7 <__muldf3+0x257>
c0026977:	83 fa 20             	cmp    edx,0x20
c002697a:	75 0b                	jne    c0026987 <__muldf3+0x237>
c002697c:	31 c0                	xor    eax,eax
c002697e:	85 ff                	test   edi,edi
c0026980:	0f 95 c0             	setne  al
c0026983:	89 c7                	mov    edi,eax
c0026985:	eb 1a                	jmp    c00269a1 <__muldf3+0x251>
c0026987:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c002698a:	89 f0                	mov    eax,esi
c002698c:	d3 e0                	shl    eax,cl
c002698e:	09 f8                	or     eax,edi
c0026990:	0f 95 c0             	setne  al
c0026993:	0f b6 c0             	movzx  eax,al
c0026996:	89 c7                	mov    edi,eax
c0026998:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002699d:	29 d9                	sub    ecx,ebx
c002699f:	d3 ee                	shr    esi,cl
c00269a1:	09 f7                	or     edi,esi
c00269a3:	31 db                	xor    ebx,ebx
c00269a5:	eb 3b                	jmp    c00269e2 <__muldf3+0x292>
c00269a7:	83 c3 1f             	add    ebx,0x1f
c00269aa:	89 f0                	mov    eax,esi
c00269ac:	88 d9                	mov    cl,bl
c00269ae:	d3 e0                	shl    eax,cl
c00269b0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00269b3:	89 f8                	mov    eax,edi
c00269b5:	88 d1                	mov    cl,dl
c00269b7:	d3 e8                	shr    eax,cl
c00269b9:	89 c1                	mov    ecx,eax
c00269bb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00269be:	09 c8                	or     eax,ecx
c00269c0:	88 d9                	mov    cl,bl
c00269c2:	d3 e7                	shl    edi,cl
c00269c4:	31 db                	xor    ebx,ebx
c00269c6:	85 ff                	test   edi,edi
c00269c8:	0f 95 c3             	setne  bl
c00269cb:	89 df                	mov    edi,ebx
c00269cd:	09 c7                	or     edi,eax
c00269cf:	88 d1                	mov    cl,dl
c00269d1:	d3 ee                	shr    esi,cl
c00269d3:	31 db                	xor    ebx,ebx
c00269d5:	eb 0d                	jmp    c00269e4 <__muldf3+0x294>
c00269d7:	bb ff 07 00 00       	mov    ebx,0x7ff
c00269dc:	eb 02                	jmp    c00269e0 <__muldf3+0x290>
c00269de:	31 db                	xor    ebx,ebx
c00269e0:	31 ff                	xor    edi,edi
c00269e2:	31 f6                	xor    esi,esi
c00269e4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00269e7:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c00269ea:	25 00 f8 ff ff       	and    eax,0xfffff800
c00269ef:	09 c3                	or     ebx,eax
c00269f1:	c1 e3 14             	shl    ebx,0x14
c00269f4:	89 f0                	mov    eax,esi
c00269f6:	c1 e8 0b             	shr    eax,0xb
c00269f9:	09 c3                	or     ebx,eax
c00269fb:	89 f8                	mov    eax,edi
c00269fd:	c1 e8 0b             	shr    eax,0xb
c0026a00:	c1 e6 15             	shl    esi,0x15
c0026a03:	09 c6                	or     esi,eax
c0026a05:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0026a0b:	0f 95 c1             	setne  cl
c0026a0e:	09 c8                	or     eax,ecx
c0026a10:	83 e0 01             	and    eax,0x1
c0026a13:	c1 ef 0a             	shr    edi,0xa
c0026a16:	21 c7                	and    edi,eax
c0026a18:	01 f7                	add    edi,esi
c0026a1a:	83 d3 00             	adc    ebx,0x0
c0026a1d:	89 da                	mov    edx,ebx
c0026a1f:	eb 03                	jmp    c0026a24 <__muldf3+0x2d4>
c0026a21:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0026a24:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0026a27:	89 f8                	mov    eax,edi
c0026a29:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026a2c:	83 c4 24             	add    esp,0x24
c0026a2f:	5b                   	pop    ebx
c0026a30:	5e                   	pop    esi
c0026a31:	5f                   	pop    edi
c0026a32:	5d                   	pop    ebp
c0026a33:	c3                   	ret    

c0026a34 <__divdf3>:
c0026a34:	55                   	push   ebp
c0026a35:	89 e5                	mov    ebp,esp
c0026a37:	57                   	push   edi
c0026a38:	56                   	push   esi
c0026a39:	53                   	push   ebx
c0026a3a:	83 ec 2c             	sub    esp,0x2c
c0026a3d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026a40:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026a43:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026a46:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0026a49:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026a4c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026a4f:	89 ce                	mov    esi,ecx
c0026a51:	89 c8                	mov    eax,ecx
c0026a53:	c1 f8 14             	sar    eax,0x14
c0026a56:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026a59:	89 f8                	mov    eax,edi
c0026a5b:	89 fb                	mov    ebx,edi
c0026a5d:	c1 e3 0b             	shl    ebx,0xb
c0026a60:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0026a63:	c1 e6 0b             	shl    esi,0xb
c0026a66:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0026a6c:	c1 e8 15             	shr    eax,0x15
c0026a6f:	09 c6                	or     esi,eax
c0026a71:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0026a74:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026a77:	89 c2                	mov    edx,eax
c0026a79:	c1 fa 14             	sar    edx,0x14
c0026a7c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0026a7f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0026a82:	89 de                	mov    esi,ebx
c0026a84:	c1 e6 0b             	shl    esi,0xb
c0026a87:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0026a8a:	c1 e0 0b             	shl    eax,0xb
c0026a8d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026a92:	c1 eb 15             	shr    ebx,0x15
c0026a95:	09 d8                	or     eax,ebx
c0026a97:	89 c2                	mov    edx,eax
c0026a99:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026a9c:	25 ff 07 00 00       	and    eax,0x7ff
c0026aa1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0026aa4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026aa7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026aad:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0026ab0:	29 d8                	sub    eax,ebx
c0026ab2:	05 ff 03 00 00       	add    eax,0x3ff
c0026ab7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026aba:	46                   	inc    esi
c0026abb:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0026ac1:	0f 85 a5 00 00 00    	jne    c0026b6c <__divdf3+0x138>
c0026ac7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026aca:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0026acd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0026ad1:	74 2a                	je     c0026afd <__divdf3+0xc9>
c0026ad3:	85 f6                	test   esi,esi
c0026ad5:	0f 85 cc 02 00 00    	jne    c0026da7 <__divdf3+0x373>
c0026adb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026ade:	40                   	inc    eax
c0026adf:	a9 fe 07 00 00       	test   eax,0x7fe
c0026ae4:	75 26                	jne    c0026b0c <__divdf3+0xd8>
c0026ae6:	85 db                	test   ebx,ebx
c0026ae8:	74 22                	je     c0026b0c <__divdf3+0xd8>
c0026aea:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0026aed:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026af0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026af3:	09 d0                	or     eax,edx
c0026af5:	0f 85 ac 02 00 00    	jne    c0026da7 <__divdf3+0x373>
c0026afb:	eb 63                	jmp    c0026b60 <__divdf3+0x12c>
c0026afd:	85 f6                	test   esi,esi
c0026aff:	75 22                	jne    c0026b23 <__divdf3+0xef>
c0026b01:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026b04:	40                   	inc    eax
c0026b05:	a9 fe 07 00 00       	test   eax,0x7fe
c0026b0a:	74 36                	je     c0026b42 <__divdf3+0x10e>
c0026b0c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026b10:	0f 89 91 02 00 00    	jns    c0026da7 <__divdf3+0x373>
c0026b16:	89 f8                	mov    eax,edi
c0026b18:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0026b1e:	e9 80 02 00 00       	jmp    c0026da3 <__divdf3+0x36f>
c0026b23:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026b26:	01 f6                	add    esi,esi
c0026b28:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026b2b:	c1 ef 1f             	shr    edi,0x1f
c0026b2e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026b31:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0026b34:	8d 48 ff             	lea    ecx,[eax-0x1]
c0026b37:	09 f7                	or     edi,esi
c0026b39:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0026b3c:	78 2e                	js     c0026b6c <__divdf3+0x138>
c0026b3e:	89 c8                	mov    eax,ecx
c0026b40:	eb e1                	jmp    c0026b23 <__divdf3+0xef>
c0026b42:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026b45:	09 d0                	or     eax,edx
c0026b47:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0026b4b:	74 0f                	je     c0026b5c <__divdf3+0x128>
c0026b4d:	85 c0                	test   eax,eax
c0026b4f:	74 bb                	je     c0026b0c <__divdf3+0xd8>
c0026b51:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0026b54:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026b57:	e9 4b 02 00 00       	jmp    c0026da7 <__divdf3+0x373>
c0026b5c:	85 c0                	test   eax,eax
c0026b5e:	75 ac                	jne    c0026b0c <__divdf3+0xd8>
c0026b60:	31 ff                	xor    edi,edi
c0026b62:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0026b67:	e9 3b 02 00 00       	jmp    c0026da7 <__divdf3+0x373>
c0026b6c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026b6f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0026b72:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0026b78:	75 6b                	jne    c0026be5 <__divdf3+0x1b1>
c0026b7a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026b7d:	09 d6                	or     esi,edx
c0026b7f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0026b83:	74 28                	je     c0026bad <__divdf3+0x179>
c0026b85:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0026b88:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026b8b:	85 f6                	test   esi,esi
c0026b8d:	0f 85 14 02 00 00    	jne    c0026da7 <__divdf3+0x373>
c0026b93:	31 ff                	xor    edi,edi
c0026b95:	31 c9                	xor    ecx,ecx
c0026b97:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026b9a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0026b9d:	0f 89 04 02 00 00    	jns    c0026da7 <__divdf3+0x373>
c0026ba3:	b9 00 00 00 80       	mov    ecx,0x80000000
c0026ba8:	e9 fa 01 00 00       	jmp    c0026da7 <__divdf3+0x373>
c0026bad:	85 f6                	test   esi,esi
c0026baf:	75 1b                	jne    c0026bcc <__divdf3+0x198>
c0026bb1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026bb4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0026bb7:	25 00 00 00 80       	and    eax,0x80000000
c0026bbc:	31 c9                	xor    ecx,ecx
c0026bbe:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0026bc3:	89 cf                	mov    edi,ecx
c0026bc5:	89 c1                	mov    ecx,eax
c0026bc7:	e9 db 01 00 00       	jmp    c0026da7 <__divdf3+0x373>
c0026bcc:	01 d2                	add    edx,edx
c0026bce:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026bd1:	c1 eb 1f             	shr    ebx,0x1f
c0026bd4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026bd7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0026bda:	8d 48 01             	lea    ecx,[eax+0x1]
c0026bdd:	09 da                	or     edx,ebx
c0026bdf:	78 04                	js     c0026be5 <__divdf3+0x1b1>
c0026be1:	89 c8                	mov    eax,ecx
c0026be3:	eb e7                	jmp    c0026bcc <__divdf3+0x198>
c0026be5:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026be8:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026bee:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026bf4:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0026bf7:	39 d6                	cmp    esi,edx
c0026bf9:	77 0d                	ja     c0026c08 <__divdf3+0x1d4>
c0026bfb:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026bfe:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0026c01:	72 1b                	jb     c0026c1e <__divdf3+0x1ea>
c0026c03:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0026c06:	75 16                	jne    c0026c1e <__divdf3+0x1ea>
c0026c08:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026c0b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026c0e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0026c11:	83 de 00             	sbb    esi,0x0
c0026c14:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0026c17:	ba 01 00 00 00       	mov    edx,0x1
c0026c1c:	eb 02                	jmp    c0026c20 <__divdf3+0x1ec>
c0026c1e:	31 d2                	xor    edx,edx
c0026c20:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0026c27:	31 ff                	xor    edi,edi
c0026c29:	01 ff                	add    edi,edi
c0026c2b:	89 d1                	mov    ecx,edx
c0026c2d:	c1 e9 1f             	shr    ecx,0x1f
c0026c30:	09 cf                	or     edi,ecx
c0026c32:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0026c35:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0026c38:	89 da                	mov    edx,ebx
c0026c3a:	89 f3                	mov    ebx,esi
c0026c3c:	8d 34 36             	lea    esi,[esi+esi*1]
c0026c3f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026c42:	c1 e9 1f             	shr    ecx,0x1f
c0026c45:	09 ce                	or     esi,ecx
c0026c47:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026c4a:	01 c9                	add    ecx,ecx
c0026c4c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0026c4f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0026c52:	85 db                	test   ebx,ebx
c0026c54:	78 29                	js     c0026c7f <__divdf3+0x24b>
c0026c56:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0026c59:	72 07                	jb     c0026c62 <__divdf3+0x22e>
c0026c5b:	75 3c                	jne    c0026c99 <__divdf3+0x265>
c0026c5d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026c60:	77 37                	ja     c0026c99 <__divdf3+0x265>
c0026c62:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026c65:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0026c68:	31 d2                	xor    edx,edx
c0026c6a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0026c6d:	0f 97 c2             	seta   dl
c0026c70:	29 d6                	sub    esi,edx
c0026c72:	89 d9                	mov    ecx,ebx
c0026c74:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0026c77:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0026c7a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026c7d:	eb 17                	jmp    c0026c96 <__divdf3+0x262>
c0026c7f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026c82:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026c85:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026c88:	0f 97 c1             	seta   cl
c0026c8b:	0f b6 c9             	movzx  ecx,cl
c0026c8e:	29 ce                	sub    esi,ecx
c0026c90:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0026c93:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0026c96:	83 ca 01             	or     edx,0x1
c0026c99:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0026c9c:	75 8b                	jne    c0026c29 <__divdf3+0x1f5>
c0026c9e:	c1 e7 09             	shl    edi,0x9
c0026ca1:	89 d1                	mov    ecx,edx
c0026ca3:	c1 e9 17             	shr    ecx,0x17
c0026ca6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026ca9:	09 f3                	or     ebx,esi
c0026cab:	0f 95 c3             	setne  bl
c0026cae:	0f b6 db             	movzx  ebx,bl
c0026cb1:	c1 e2 09             	shl    edx,0x9
c0026cb4:	09 d3                	or     ebx,edx
c0026cb6:	89 ca                	mov    edx,ecx
c0026cb8:	09 fa                	or     edx,edi
c0026cba:	78 0c                	js     c0026cc8 <__divdf3+0x294>
c0026cbc:	01 d2                	add    edx,edx
c0026cbe:	89 d9                	mov    ecx,ebx
c0026cc0:	c1 e9 1f             	shr    ecx,0x1f
c0026cc3:	09 ca                	or     edx,ecx
c0026cc5:	01 db                	add    ebx,ebx
c0026cc7:	48                   	dec    eax
c0026cc8:	3d fe 07 00 00       	cmp    eax,0x7fe
c0026ccd:	0f 8f 83 00 00 00    	jg     c0026d56 <__divdf3+0x322>
c0026cd3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026cd9:	85 c0                	test   eax,eax
c0026cdb:	0f 8f 82 00 00 00    	jg     c0026d63 <__divdf3+0x32f>
c0026ce1:	83 f8 cc             	cmp    eax,0xffffffcc
c0026ce4:	7c 77                	jl     c0026d5d <__divdf3+0x329>
c0026ce6:	be 01 00 00 00       	mov    esi,0x1
c0026ceb:	29 c6                	sub    esi,eax
c0026ced:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026cf3:	83 fe 1f             	cmp    esi,0x1f
c0026cf6:	7e 2f                	jle    c0026d27 <__divdf3+0x2f3>
c0026cf8:	83 fe 20             	cmp    esi,0x20
c0026cfb:	75 0a                	jne    c0026d07 <__divdf3+0x2d3>
c0026cfd:	85 db                	test   ebx,ebx
c0026cff:	0f 95 c3             	setne  bl
c0026d02:	0f b6 db             	movzx  ebx,bl
c0026d05:	eb 1a                	jmp    c0026d21 <__divdf3+0x2ed>
c0026d07:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0026d0a:	89 d7                	mov    edi,edx
c0026d0c:	d3 e7                	shl    edi,cl
c0026d0e:	89 f9                	mov    ecx,edi
c0026d10:	09 d9                	or     ecx,ebx
c0026d12:	0f 95 c3             	setne  bl
c0026d15:	0f b6 db             	movzx  ebx,bl
c0026d18:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0026d1d:	29 c1                	sub    ecx,eax
c0026d1f:	d3 ea                	shr    edx,cl
c0026d21:	09 d3                	or     ebx,edx
c0026d23:	31 c0                	xor    eax,eax
c0026d25:	eb 3a                	jmp    c0026d61 <__divdf3+0x32d>
c0026d27:	83 c0 1f             	add    eax,0x1f
c0026d2a:	89 d7                	mov    edi,edx
c0026d2c:	88 c1                	mov    cl,al
c0026d2e:	d3 e7                	shl    edi,cl
c0026d30:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026d33:	89 df                	mov    edi,ebx
c0026d35:	89 f1                	mov    ecx,esi
c0026d37:	d3 ef                	shr    edi,cl
c0026d39:	89 f9                	mov    ecx,edi
c0026d3b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026d3e:	09 cf                	or     edi,ecx
c0026d40:	88 c1                	mov    cl,al
c0026d42:	d3 e3                	shl    ebx,cl
c0026d44:	85 db                	test   ebx,ebx
c0026d46:	0f 95 c3             	setne  bl
c0026d49:	0f b6 db             	movzx  ebx,bl
c0026d4c:	09 fb                	or     ebx,edi
c0026d4e:	89 f1                	mov    ecx,esi
c0026d50:	d3 ea                	shr    edx,cl
c0026d52:	31 c0                	xor    eax,eax
c0026d54:	eb 0d                	jmp    c0026d63 <__divdf3+0x32f>
c0026d56:	b8 ff 07 00 00       	mov    eax,0x7ff
c0026d5b:	eb 02                	jmp    c0026d5f <__divdf3+0x32b>
c0026d5d:	31 c0                	xor    eax,eax
c0026d5f:	31 db                	xor    ebx,ebx
c0026d61:	31 d2                	xor    edx,edx
c0026d63:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0026d66:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0026d69:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0026d6f:	09 c8                	or     eax,ecx
c0026d71:	c1 e0 14             	shl    eax,0x14
c0026d74:	89 d1                	mov    ecx,edx
c0026d76:	c1 e9 0b             	shr    ecx,0xb
c0026d79:	09 c8                	or     eax,ecx
c0026d7b:	89 c6                	mov    esi,eax
c0026d7d:	89 d9                	mov    ecx,ebx
c0026d7f:	c1 e9 0b             	shr    ecx,0xb
c0026d82:	c1 e2 15             	shl    edx,0x15
c0026d85:	09 ca                	or     edx,ecx
c0026d87:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0026d8d:	0f 95 c0             	setne  al
c0026d90:	09 c1                	or     ecx,eax
c0026d92:	83 e1 01             	and    ecx,0x1
c0026d95:	c1 eb 0a             	shr    ebx,0xa
c0026d98:	21 cb                	and    ebx,ecx
c0026d9a:	01 d3                	add    ebx,edx
c0026d9c:	89 d8                	mov    eax,ebx
c0026d9e:	83 d6 00             	adc    esi,0x0
c0026da1:	89 f2                	mov    edx,esi
c0026da3:	89 c7                	mov    edi,eax
c0026da5:	89 d1                	mov    ecx,edx
c0026da7:	89 f8                	mov    eax,edi
c0026da9:	89 ca                	mov    edx,ecx
c0026dab:	83 c4 2c             	add    esp,0x2c
c0026dae:	5b                   	pop    ebx
c0026daf:	5e                   	pop    esi
c0026db0:	5f                   	pop    edi
c0026db1:	5d                   	pop    ebp
c0026db2:	c3                   	ret    

c0026db3 <__floatsidf>:
c0026db3:	55                   	push   ebp
c0026db4:	89 e5                	mov    ebp,esp
c0026db6:	56                   	push   esi
c0026db7:	53                   	push   ebx
c0026db8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026dbb:	85 db                	test   ebx,ebx
c0026dbd:	7e 15                	jle    c0026dd4 <__floatsidf+0x21>
c0026dbf:	0f bd cb             	bsr    ecx,ebx
c0026dc2:	83 f1 1f             	xor    ecx,0x1f
c0026dc5:	d3 e3                	shl    ebx,cl
c0026dc7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026dcd:	b8 1e 04 00 00       	mov    eax,0x41e
c0026dd2:	eb 21                	jmp    c0026df5 <__floatsidf+0x42>
c0026dd4:	b8 00 00 00 00       	mov    eax,0x0
c0026dd9:	ba 00 00 00 00       	mov    edx,0x0
c0026dde:	74 2a                	je     c0026e0a <__floatsidf+0x57>
c0026de0:	f7 db                	neg    ebx
c0026de2:	0f bd cb             	bsr    ecx,ebx
c0026de5:	83 f1 1f             	xor    ecx,0x1f
c0026de8:	d3 e3                	shl    ebx,cl
c0026dea:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026df0:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0026df5:	29 c8                	sub    eax,ecx
c0026df7:	c1 e0 14             	shl    eax,0x14
c0026dfa:	89 c1                	mov    ecx,eax
c0026dfc:	89 de                	mov    esi,ebx
c0026dfe:	c1 ee 0b             	shr    esi,0xb
c0026e01:	09 f1                	or     ecx,esi
c0026e03:	89 ca                	mov    edx,ecx
c0026e05:	c1 e3 15             	shl    ebx,0x15
c0026e08:	89 d8                	mov    eax,ebx
c0026e0a:	5b                   	pop    ebx
c0026e0b:	5e                   	pop    esi
c0026e0c:	5d                   	pop    ebp
c0026e0d:	c3                   	ret    

c0026e0e <__floatunsidf>:
c0026e0e:	55                   	push   ebp
c0026e0f:	89 e5                	mov    ebp,esp
c0026e11:	56                   	push   esi
c0026e12:	53                   	push   ebx
c0026e13:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026e16:	85 db                	test   ebx,ebx
c0026e18:	74 2a                	je     c0026e44 <__floatunsidf+0x36>
c0026e1a:	0f bd cb             	bsr    ecx,ebx
c0026e1d:	83 f1 1f             	xor    ecx,0x1f
c0026e20:	d3 e3                	shl    ebx,cl
c0026e22:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026e28:	b8 1e 04 00 00       	mov    eax,0x41e
c0026e2d:	29 c8                	sub    eax,ecx
c0026e2f:	c1 e0 14             	shl    eax,0x14
c0026e32:	89 c1                	mov    ecx,eax
c0026e34:	89 de                	mov    esi,ebx
c0026e36:	c1 ee 0b             	shr    esi,0xb
c0026e39:	09 f1                	or     ecx,esi
c0026e3b:	89 ca                	mov    edx,ecx
c0026e3d:	c1 e3 15             	shl    ebx,0x15
c0026e40:	89 d8                	mov    eax,ebx
c0026e42:	eb 04                	jmp    c0026e48 <__floatunsidf+0x3a>
c0026e44:	31 c0                	xor    eax,eax
c0026e46:	31 d2                	xor    edx,edx
c0026e48:	5b                   	pop    ebx
c0026e49:	5e                   	pop    esi
c0026e4a:	5d                   	pop    ebp
c0026e4b:	c3                   	ret    

c0026e4c <__fixdfsi>:
c0026e4c:	55                   	push   ebp
c0026e4d:	89 e5                	mov    ebp,esp
c0026e4f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026e52:	89 d1                	mov    ecx,edx
c0026e54:	c1 e1 0b             	shl    ecx,0xb
c0026e57:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026e5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026e60:	c1 e8 15             	shr    eax,0x15
c0026e63:	09 c1                	or     ecx,eax
c0026e65:	c1 fa 14             	sar    edx,0x14
c0026e68:	78 1f                	js     c0026e89 <__fixdfsi+0x3d>
c0026e6a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0026e70:	31 c0                	xor    eax,eax
c0026e72:	83 fa 1e             	cmp    edx,0x1e
c0026e75:	77 40                	ja     c0026eb7 <__fixdfsi+0x6b>
c0026e77:	89 c8                	mov    eax,ecx
c0026e79:	0d 00 00 00 80       	or     eax,0x80000000
c0026e7e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026e83:	29 d1                	sub    ecx,edx
c0026e85:	d3 e8                	shr    eax,cl
c0026e87:	eb 2e                	jmp    c0026eb7 <__fixdfsi+0x6b>
c0026e89:	31 c0                	xor    eax,eax
c0026e8b:	81 c2 01 04 00 00    	add    edx,0x401
c0026e91:	78 24                	js     c0026eb7 <__fixdfsi+0x6b>
c0026e93:	83 fa 1e             	cmp    edx,0x1e
c0026e96:	7e 09                	jle    c0026ea1 <__fixdfsi+0x55>
c0026e98:	83 fa 1f             	cmp    edx,0x1f
c0026e9b:	75 18                	jne    c0026eb5 <__fixdfsi+0x69>
c0026e9d:	85 c9                	test   ecx,ecx
c0026e9f:	75 14                	jne    c0026eb5 <__fixdfsi+0x69>
c0026ea1:	89 c8                	mov    eax,ecx
c0026ea3:	0d 00 00 00 80       	or     eax,0x80000000
c0026ea8:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026ead:	29 d1                	sub    ecx,edx
c0026eaf:	d3 e8                	shr    eax,cl
c0026eb1:	f7 d8                	neg    eax
c0026eb3:	eb 02                	jmp    c0026eb7 <__fixdfsi+0x6b>
c0026eb5:	31 c0                	xor    eax,eax
c0026eb7:	5d                   	pop    ebp
c0026eb8:	c3                   	ret    

c0026eb9 <__fixunsdfsi>:
c0026eb9:	55                   	push   ebp
c0026eba:	89 e5                	mov    ebp,esp
c0026ebc:	53                   	push   ebx
c0026ebd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026ec0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026ec3:	89 d3                	mov    ebx,edx
c0026ec5:	c1 fb 14             	sar    ebx,0x14
c0026ec8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0026ece:	31 c0                	xor    eax,eax
c0026ed0:	83 fb 1f             	cmp    ebx,0x1f
c0026ed3:	77 1d                	ja     c0026ef2 <__fixunsdfsi+0x39>
c0026ed5:	89 d0                	mov    eax,edx
c0026ed7:	c1 e0 0b             	shl    eax,0xb
c0026eda:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026edf:	c1 e9 15             	shr    ecx,0x15
c0026ee2:	09 c8                	or     eax,ecx
c0026ee4:	0d 00 00 00 80       	or     eax,0x80000000
c0026ee9:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026eee:	29 d9                	sub    ecx,ebx
c0026ef0:	d3 e8                	shr    eax,cl
c0026ef2:	5b                   	pop    ebx
c0026ef3:	5d                   	pop    ebp
c0026ef4:	c3                   	ret    

c0026ef5 <__cmpdf2>:
c0026ef5:	55                   	push   ebp
c0026ef6:	89 e5                	mov    ebp,esp
c0026ef8:	57                   	push   edi
c0026ef9:	56                   	push   esi
c0026efa:	53                   	push   ebx
c0026efb:	83 ec 0c             	sub    esp,0xc
c0026efe:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0026f01:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026f04:	89 ca                	mov    edx,ecx
c0026f06:	c1 ea 14             	shr    edx,0x14
c0026f09:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0026f0f:	89 cb                	mov    ebx,ecx
c0026f11:	c1 fb 1f             	sar    ebx,0x1f
c0026f14:	31 da                	xor    edx,ebx
c0026f16:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026f19:	89 df                	mov    edi,ebx
c0026f1b:	c1 e7 0b             	shl    edi,0xb
c0026f1e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026f21:	c1 e1 0b             	shl    ecx,0xb
c0026f24:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026f2a:	c1 eb 15             	shr    ebx,0x15
c0026f2d:	09 d9                	or     ecx,ebx
c0026f2f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0026f32:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0026f35:	89 ce                	mov    esi,ecx
c0026f37:	c1 ee 14             	shr    esi,0x14
c0026f3a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026f40:	89 cb                	mov    ebx,ecx
c0026f42:	c1 fb 1f             	sar    ebx,0x1f
c0026f45:	31 de                	xor    esi,ebx
c0026f47:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0026f4a:	89 df                	mov    edi,ebx
c0026f4c:	c1 e7 0b             	shl    edi,0xb
c0026f4f:	c1 e1 0b             	shl    ecx,0xb
c0026f52:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026f58:	c1 eb 15             	shr    ebx,0x15
c0026f5b:	09 d9                	or     ecx,ebx
c0026f5d:	89 d3                	mov    ebx,edx
c0026f5f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0026f65:	43                   	inc    ebx
c0026f66:	83 fb 01             	cmp    ebx,0x1
c0026f69:	77 08                	ja     c0026f73 <__cmpdf2+0x7e>
c0026f6b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026f6e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0026f71:	75 68                	jne    c0026fdb <__cmpdf2+0xe6>
c0026f73:	89 f3                	mov    ebx,esi
c0026f75:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0026f7b:	43                   	inc    ebx
c0026f7c:	83 fb 01             	cmp    ebx,0x1
c0026f7f:	77 06                	ja     c0026f87 <__cmpdf2+0x92>
c0026f81:	89 fb                	mov    ebx,edi
c0026f83:	09 cb                	or     ebx,ecx
c0026f85:	75 54                	jne    c0026fdb <__cmpdf2+0xe6>
c0026f87:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026f8a:	09 f8                	or     eax,edi
c0026f8c:	09 c8                	or     eax,ecx
c0026f8e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0026f91:	75 12                	jne    c0026fa5 <__cmpdf2+0xb0>
c0026f93:	8d 42 01             	lea    eax,[edx+0x1]
c0026f96:	83 f8 01             	cmp    eax,0x1
c0026f99:	77 0a                	ja     c0026fa5 <__cmpdf2+0xb0>
c0026f9b:	8d 5e 01             	lea    ebx,[esi+0x1]
c0026f9e:	31 c0                	xor    eax,eax
c0026fa0:	83 fb 01             	cmp    ebx,0x1
c0026fa3:	76 36                	jbe    c0026fdb <__cmpdf2+0xe6>
c0026fa5:	b8 01 00 00 00       	mov    eax,0x1
c0026faa:	39 f2                	cmp    edx,esi
c0026fac:	7f 2d                	jg     c0026fdb <__cmpdf2+0xe6>
c0026fae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026fb3:	7c 26                	jl     c0026fdb <__cmpdf2+0xe6>
c0026fb5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026fb8:	77 07                	ja     c0026fc1 <__cmpdf2+0xcc>
c0026fba:	72 16                	jb     c0026fd2 <__cmpdf2+0xdd>
c0026fbc:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0026fbf:	76 0a                	jbe    c0026fcb <__cmpdf2+0xd6>
c0026fc1:	89 d0                	mov    eax,edx
c0026fc3:	c1 f8 1f             	sar    eax,0x1f
c0026fc6:	83 c8 01             	or     eax,0x1
c0026fc9:	eb 10                	jmp    c0026fdb <__cmpdf2+0xe6>
c0026fcb:	b8 00 00 00 00       	mov    eax,0x0
c0026fd0:	73 09                	jae    c0026fdb <__cmpdf2+0xe6>
c0026fd2:	89 d0                	mov    eax,edx
c0026fd4:	c1 f8 1f             	sar    eax,0x1f
c0026fd7:	83 e0 02             	and    eax,0x2
c0026fda:	48                   	dec    eax
c0026fdb:	83 c4 0c             	add    esp,0xc
c0026fde:	5b                   	pop    ebx
c0026fdf:	5e                   	pop    esi
c0026fe0:	5f                   	pop    edi
c0026fe1:	5d                   	pop    ebp
c0026fe2:	c3                   	ret    

c0026fe3 <__eqdf2>:
c0026fe3:	55                   	push   ebp
c0026fe4:	89 e5                	mov    ebp,esp
c0026fe6:	50                   	push   eax
c0026fe7:	6a 01                	push   0x1
c0026fe9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026fec:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026fef:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ff2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026ff5:	e8 fb fe ff ff       	call   c0026ef5 <__cmpdf2>
c0026ffa:	83 c4 18             	add    esp,0x18
c0026ffd:	c9                   	leave  
c0026ffe:	c3                   	ret    

c0026fff <__nedf2>:
c0026fff:	eb e2                	jmp    c0026fe3 <__eqdf2>

c0027001 <__gtdf2>:
c0027001:	55                   	push   ebp
c0027002:	89 e5                	mov    ebp,esp
c0027004:	50                   	push   eax
c0027005:	6a ff                	push   0xffffffff
c0027007:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002700a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002700d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027010:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027013:	e8 dd fe ff ff       	call   c0026ef5 <__cmpdf2>
c0027018:	83 c4 18             	add    esp,0x18
c002701b:	c9                   	leave  
c002701c:	c3                   	ret    

c002701d <__gedf2>:
c002701d:	eb e2                	jmp    c0027001 <__gtdf2>

c002701f <__ltdf2>:
c002701f:	eb c2                	jmp    c0026fe3 <__eqdf2>

c0027021 <__ledf2>:
c0027021:	eb c0                	jmp    c0026fe3 <__eqdf2>

c0027023 <__truncdfsf2>:
c0027023:	55                   	push   ebp
c0027024:	89 e5                	mov    ebp,esp
c0027026:	57                   	push   edi
c0027027:	56                   	push   esi
c0027028:	53                   	push   ebx
c0027029:	83 ec 0c             	sub    esp,0xc
c002702c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002702f:	89 d1                	mov    ecx,edx
c0027031:	c1 f9 14             	sar    ecx,0x14
c0027034:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027037:	89 df                	mov    edi,ebx
c0027039:	c1 e7 0b             	shl    edi,0xb
c002703c:	89 d0                	mov    eax,edx
c002703e:	c1 e0 0b             	shl    eax,0xb
c0027041:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027046:	c1 eb 15             	shr    ebx,0x15
c0027049:	09 d8                	or     eax,ebx
c002704b:	89 cb                	mov    ebx,ecx
c002704d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027053:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0027059:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002705f:	0f 86 9e 00 00 00    	jbe    c0027103 <__truncdfsf2+0xe0>
c0027065:	85 db                	test   ebx,ebx
c0027067:	75 0a                	jne    c0027073 <__truncdfsf2+0x50>
c0027069:	c1 fa 17             	sar    edx,0x17
c002706c:	30 d2                	xor    dl,dl
c002706e:	e9 84 00 00 00       	jmp    c00270f7 <__truncdfsf2+0xd4>
c0027073:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0027079:	83 fe 83             	cmp    esi,0xffffff83
c002707c:	7d 4b                	jge    c00270c9 <__truncdfsf2+0xa6>
c002707e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0027083:	29 f1                	sub    ecx,esi
c0027085:	83 f9 1f             	cmp    ecx,0x1f
c0027088:	7f 6b                	jg     c00270f5 <__truncdfsf2+0xd2>
c002708a:	0d 00 00 00 80       	or     eax,0x80000000
c002708f:	89 c3                	mov    ebx,eax
c0027091:	d3 eb                	shr    ebx,cl
c0027093:	be 01 00 00 00       	mov    esi,0x1
c0027098:	d3 e6                	shl    esi,cl
c002709a:	4e                   	dec    esi
c002709b:	21 f0                	and    eax,esi
c002709d:	09 f8                	or     eax,edi
c002709f:	0f 95 c0             	setne  al
c00270a2:	0f b6 c0             	movzx  eax,al
c00270a5:	09 c3                	or     ebx,eax
c00270a7:	89 d9                	mov    ecx,ebx
c00270a9:	c1 e9 08             	shr    ecx,0x8
c00270ac:	f6 c3 7f             	test   bl,0x7f
c00270af:	0f 95 c0             	setne  al
c00270b2:	09 c8                	or     eax,ecx
c00270b4:	83 e0 01             	and    eax,0x1
c00270b7:	c1 eb 07             	shr    ebx,0x7
c00270ba:	21 c3                	and    ebx,eax
c00270bc:	81 e2 00 00 00 80    	and    edx,0x80000000
c00270c2:	09 d1                	or     ecx,edx
c00270c4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00270c7:	eb 76                	jmp    c002713f <__truncdfsf2+0x11c>
c00270c9:	83 c6 80             	add    esi,0xffffff80
c00270cc:	7e 1d                	jle    c00270eb <__truncdfsf2+0xc8>
c00270ce:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00270d4:	75 0b                	jne    c00270e1 <__truncdfsf2+0xbe>
c00270d6:	09 f8                	or     eax,edi
c00270d8:	74 09                	je     c00270e3 <__truncdfsf2+0xc0>
c00270da:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00270df:	eb 02                	jmp    c00270e3 <__truncdfsf2+0xc0>
c00270e1:	31 c0                	xor    eax,eax
c00270e3:	c1 fa 17             	sar    edx,0x17
c00270e6:	80 ca ff             	or     dl,0xff
c00270e9:	eb 0e                	jmp    c00270f9 <__truncdfsf2+0xd6>
c00270eb:	c1 fa 1f             	sar    edx,0x1f
c00270ee:	c1 e2 08             	shl    edx,0x8
c00270f1:	09 ca                	or     edx,ecx
c00270f3:	eb 04                	jmp    c00270f9 <__truncdfsf2+0xd6>
c00270f5:	31 d2                	xor    edx,edx
c00270f7:	31 c0                	xor    eax,eax
c00270f9:	c1 e2 17             	shl    edx,0x17
c00270fc:	c1 e8 08             	shr    eax,0x8
c00270ff:	09 d0                	or     eax,edx
c0027101:	eb 3c                	jmp    c002713f <__truncdfsf2+0x11c>
c0027103:	81 e9 80 03 00 00    	sub    ecx,0x380
c0027109:	89 ca                	mov    edx,ecx
c002710b:	c1 fa 0b             	sar    edx,0xb
c002710e:	c1 e2 08             	shl    edx,0x8
c0027111:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027114:	31 db                	xor    ebx,ebx
c0027116:	85 ff                	test   edi,edi
c0027118:	0f 95 c3             	setne  bl
c002711b:	09 d8                	or     eax,ebx
c002711d:	89 c3                	mov    ebx,eax
c002711f:	c1 eb 08             	shr    ebx,0x8
c0027122:	a8 7f                	test   al,0x7f
c0027124:	0f 95 c2             	setne  dl
c0027127:	89 d6                	mov    esi,edx
c0027129:	09 de                	or     esi,ebx
c002712b:	83 e6 01             	and    esi,0x1
c002712e:	c1 e8 07             	shr    eax,0x7
c0027131:	21 f0                	and    eax,esi
c0027133:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027136:	09 ca                	or     edx,ecx
c0027138:	c1 e2 17             	shl    edx,0x17
c002713b:	09 da                	or     edx,ebx
c002713d:	01 d0                	add    eax,edx
c002713f:	83 c4 0c             	add    esp,0xc
c0027142:	5b                   	pop    ebx
c0027143:	5e                   	pop    esi
c0027144:	5f                   	pop    edi
c0027145:	5d                   	pop    ebp
c0027146:	c3                   	ret    

c0027147 <__extendsfdf2>:
c0027147:	55                   	push   ebp
c0027148:	89 e5                	mov    ebp,esp
c002714a:	57                   	push   edi
c002714b:	56                   	push   esi
c002714c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002714f:	89 d1                	mov    ecx,edx
c0027151:	c1 f9 17             	sar    ecx,0x17
c0027154:	c1 e2 08             	shl    edx,0x8
c0027157:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002715d:	89 c8                	mov    eax,ecx
c002715f:	80 e4 f8             	and    ah,0xf8
c0027162:	8d 71 01             	lea    esi,[ecx+0x1]
c0027165:	81 e6 fe 00 00 00    	and    esi,0xfe
c002716b:	75 27                	jne    c0027194 <__extendsfdf2+0x4d>
c002716d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0027173:	75 18                	jne    c002718d <__extendsfdf2+0x46>
c0027175:	85 d2                	test   edx,edx
c0027177:	74 20                	je     c0027199 <__extendsfdf2+0x52>
c0027179:	41                   	inc    ecx
c002717a:	01 d2                	add    edx,edx
c002717c:	79 fb                	jns    c0027179 <__extendsfdf2+0x32>
c002717e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027184:	29 c8                	sub    eax,ecx
c0027186:	05 81 03 00 00       	add    eax,0x381
c002718b:	eb 0c                	jmp    c0027199 <__extendsfdf2+0x52>
c002718d:	05 00 07 00 00       	add    eax,0x700
c0027192:	eb 05                	jmp    c0027199 <__extendsfdf2+0x52>
c0027194:	05 80 03 00 00       	add    eax,0x380
c0027199:	c1 e0 14             	shl    eax,0x14
c002719c:	89 c1                	mov    ecx,eax
c002719e:	89 d0                	mov    eax,edx
c00271a0:	c1 e8 0b             	shr    eax,0xb
c00271a3:	09 c1                	or     ecx,eax
c00271a5:	c1 e2 15             	shl    edx,0x15
c00271a8:	89 d0                	mov    eax,edx
c00271aa:	89 ca                	mov    edx,ecx
c00271ac:	5e                   	pop    esi
c00271ad:	5f                   	pop    edi
c00271ae:	5d                   	pop    ebp
c00271af:	c3                   	ret    

c00271b0 <fabs>:
c00271b0:	83 ec 0c             	sub    esp,0xc
c00271b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00271ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00271be:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00271c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00271c7:	dd 04 24             	fld    QWORD PTR [esp]
c00271ca:	83 c4 0c             	add    esp,0xc
c00271cd:	c3                   	ret    
c00271ce:	66 90                	xchg   ax,ax

c00271d0 <lrint>:
c00271d0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00271d4:	83 ec 04             	sub    esp,0x4
c00271d7:	db 1c 24             	fistp  DWORD PTR [esp]
c00271da:	58                   	pop    eax
c00271db:	c3                   	ret    

c00271dc <lrintf>:
c00271dc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00271e0:	83 ec 04             	sub    esp,0x4
c00271e3:	db 1c 24             	fistp  DWORD PTR [esp]
c00271e6:	58                   	pop    eax
c00271e7:	c3                   	ret    

Disassembly of section .init:

c00271e8 <_init>:
c00271e8:	55                   	push   ebp
c00271e9:	89 e5                	mov    ebp,esp
c00271eb:	e8 28 8f fd ff       	call   c0000118 <frame_dummy>
c00271f0:	e8 63 e0 ff ff       	call   c0025258 <__do_global_ctors_aux>
c00271f5:	5d                   	pop    ebp
c00271f6:	c3                   	ret    

Disassembly of section .fini:

c00271f7 <_fini>:
c00271f7:	55                   	push   ebp
c00271f8:	89 e5                	mov    ebp,esp
c00271fa:	e8 a9 8e fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00271ff:	5d                   	pop    ebp
c0027200:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0027202 <Computer::~Computer()>:
c0027202:	83 ec 0c             	sub    esp,0xc
c0027205:	ba a0 8c 02 c0       	mov    edx,0xc0028ca0
c002720a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002720e:	89 10                	mov    DWORD PTR [eax],edx
c0027210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027214:	83 ec 0c             	sub    esp,0xc
c0027217:	50                   	push   eax
c0027218:	e8 5b c8 fe ff       	call   c0013a78 <Device::~Device()>
c002721d:	83 c4 10             	add    esp,0x10
c0027220:	90                   	nop
c0027221:	83 c4 0c             	add    esp,0xc
c0027224:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0027226 <Computer::~Computer()>:
c0027226:	83 ec 0c             	sub    esp,0xc
c0027229:	83 ec 0c             	sub    esp,0xc
c002722c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027230:	e8 cd ff ff ff       	call   c0027202 <Computer::~Computer()>
c0027235:	83 c4 10             	add    esp,0x10
c0027238:	83 ec 08             	sub    esp,0x8
c002723b:	68 ec 01 00 00       	push   0x1ec
c0027240:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027244:	e8 56 b4 fe ff       	call   c001269f <operator delete(void*, unsigned long)>
c0027249:	83 c4 10             	add    esp,0x10
c002724c:	83 c4 0c             	add    esp,0xc
c002724f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0027250 <idleCommon()>:
c0027250:	83 ec 0c             	sub    esp,0xc
c0027253:	e8 8e 5c ff ff       	call   c001cee6 <lockScheduler()>
c0027258:	e8 c5 5f ff ff       	call   c001d222 <schedule()>
c002725d:	83 c4 0c             	add    esp,0xc
c0027260:	e9 83 5c ff ff       	jmp    c001cee8 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0027266 <LinkedList<UnixFile>::~LinkedList()>:
c0027266:	90                   	nop
c0027267:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0027268 <LinkedList<UnixFile>::LinkedList()>:
c0027268:	83 ec 0c             	sub    esp,0xc
c002726b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002726f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027275:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027279:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027284:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002728b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002728f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027299:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00272a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272a4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00272ab:	83 ec 0c             	sub    esp,0xc
c00272ae:	68 16 8f 02 c0       	push   0xc0028f16
c00272b3:	e8 c7 b4 fe ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c00272b8:	83 c4 10             	add    esp,0x10
c00272bb:	90                   	nop
c00272bc:	83 c4 0c             	add    esp,0xc
c00272bf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00272c0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00272c0:	83 ec 0c             	sub    esp,0xc
c00272c3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00272c8:	75 10                	jne    c00272da <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00272ca:	83 ec 0c             	sub    esp,0xc
c00272cd:	68 30 8f 02 c0       	push   0xc0028f30
c00272d2:	e8 fa 25 ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c00272d7:	83 c4 10             	add    esp,0x10
c00272da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272de:	8b 00                	mov    eax,DWORD PTR [eax]
c00272e0:	85 c0                	test   eax,eax
c00272e2:	74 34                	je     c0027318 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00272e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00272eb:	85 c0                	test   eax,eax
c00272ed:	74 29                	je     c0027318 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00272ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00272f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00272fa:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00272fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027301:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027305:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002730c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002730f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027316:	eb 65                	jmp    c002737d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002731c:	8b 00                	mov    eax,DWORD PTR [eax]
c002731e:	85 c0                	test   eax,eax
c0027320:	75 4b                	jne    c002736d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0027322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027326:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027329:	85 c0                	test   eax,eax
c002732b:	75 40                	jne    c002736d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002732d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027331:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027335:	89 10                	mov    DWORD PTR [eax],edx
c0027337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002733b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002733f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027346:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027349:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027354:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027357:	85 c0                	test   eax,eax
c0027359:	74 22                	je     c002737d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002735b:	83 ec 0c             	sub    esp,0xc
c002735e:	68 52 8f 02 c0       	push   0xc0028f52
c0027363:	e8 69 25 ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c0027368:	83 c4 10             	add    esp,0x10
c002736b:	eb 10                	jmp    c002737d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002736d:	83 ec 0c             	sub    esp,0xc
c0027370:	68 5c 8f 02 c0       	push   0xc0028f5c
c0027375:	e8 57 25 ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c002737a:	83 c4 10             	add    esp,0x10
c002737d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027381:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027384:	8d 50 01             	lea    edx,[eax+0x1]
c0027387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002738b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002738e:	90                   	nop
c002738f:	83 c4 0c             	add    esp,0xc
c0027392:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0027394 <LinkedList<UnixFile>::getFirstElement()>:
c0027394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027398:	8b 00                	mov    eax,DWORD PTR [eax]
c002739a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002739c <LinkedList<UnixFile>::removeFirst()>:
c002739c:	83 ec 0c             	sub    esp,0xc
c002739f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00273a5:	85 c0                	test   eax,eax
c00273a7:	75 12                	jne    c00273bb <LinkedList<UnixFile>::removeFirst()+0x1f>
c00273a9:	83 ec 0c             	sub    esp,0xc
c00273ac:	68 68 8f 02 c0       	push   0xc0028f68
c00273b1:	e8 1b 25 ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c00273b6:	83 c4 10             	add    esp,0x10
c00273b9:	eb 7e                	jmp    c0027439 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00273bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00273c2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00273c5:	85 c0                	test   eax,eax
c00273c7:	74 10                	je     c00273d9 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00273c9:	83 ec 0c             	sub    esp,0xc
c00273cc:	68 b3 8f 02 c0       	push   0xc0028fb3
c00273d1:	e8 fb 24 ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c00273d6:	83 c4 10             	add    esp,0x10
c00273d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00273df:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00273e2:	85 c0                	test   eax,eax
c00273e4:	75 33                	jne    c0027419 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00273e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00273f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00273fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027402:	83 f8 01             	cmp    eax,0x1
c0027405:	74 21                	je     c0027428 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027407:	83 ec 0c             	sub    esp,0xc
c002740a:	68 8c 8f 02 c0       	push   0xc0028f8c
c002740f:	e8 bd 24 ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c0027414:	83 c4 10             	add    esp,0x10
c0027417:	eb 0f                	jmp    c0027428 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027419:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002741d:	8b 00                	mov    eax,DWORD PTR [eax]
c002741f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0027422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027426:	89 10                	mov    DWORD PTR [eax],edx
c0027428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002742c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002742f:	8d 50 ff             	lea    edx,[eax-0x1]
c0027432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027436:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027439:	83 c4 0c             	add    esp,0xc
c002743c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002743e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002743e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027442:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027445:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0027446 <DriverlessDevice::~DriverlessDevice()>:
c0027446:	ba a4 96 02 c0       	mov    edx,0xc00296a4
c002744b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002744f:	89 10                	mov    DWORD PTR [eax],edx
c0027451:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027455:	50                   	push   eax
c0027456:	e8 1d c6 fe ff       	call   c0013a78 <Device::~Device()>
c002745b:	83 c4 04             	add    esp,0x4
c002745e:	90                   	nop
c002745f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0027460 <DriverlessDevice::~DriverlessDevice()>:
c0027460:	83 ec 0c             	sub    esp,0xc
c0027463:	83 ec 0c             	sub    esp,0xc
c0027466:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002746a:	e8 d7 ff ff ff       	call   c0027446 <DriverlessDevice::~DriverlessDevice()>
c002746f:	83 c4 10             	add    esp,0x10
c0027472:	83 ec 08             	sub    esp,0x8
c0027475:	68 58 01 00 00       	push   0x158
c002747a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002747e:	e8 1c b2 fe ff       	call   c001269f <operator delete(void*, unsigned long)>
c0027483:	83 c4 10             	add    esp,0x10
c0027486:	83 c4 0c             	add    esp,0xc
c0027489:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002748a <LinkedList<Device>::addElement(Device*)>:
c002748a:	83 ec 0c             	sub    esp,0xc
c002748d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027492:	75 10                	jne    c00274a4 <LinkedList<Device>::addElement(Device*)+0x1a>
c0027494:	83 ec 0c             	sub    esp,0xc
c0027497:	68 30 8f 02 c0       	push   0xc0028f30
c002749c:	e8 30 24 ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c00274a1:	83 c4 10             	add    esp,0x10
c00274a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00274aa:	85 c0                	test   eax,eax
c00274ac:	74 3a                	je     c00274e8 <LinkedList<Device>::addElement(Device*)+0x5e>
c00274ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00274b5:	85 c0                	test   eax,eax
c00274b7:	74 2f                	je     c00274e8 <LinkedList<Device>::addElement(Device*)+0x5e>
c00274b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274bd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00274c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00274c4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00274ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00274d2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00274d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00274dc:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00274e6:	eb 68                	jmp    c0027550 <LinkedList<Device>::addElement(Device*)+0xc6>
c00274e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00274ee:	85 c0                	test   eax,eax
c00274f0:	75 4e                	jne    c0027540 <LinkedList<Device>::addElement(Device*)+0xb6>
c00274f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00274f9:	85 c0                	test   eax,eax
c00274fb:	75 43                	jne    c0027540 <LinkedList<Device>::addElement(Device*)+0xb6>
c00274fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027501:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027505:	89 10                	mov    DWORD PTR [eax],edx
c0027507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002750b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002750f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027516:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027519:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0027523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027527:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002752a:	85 c0                	test   eax,eax
c002752c:	74 22                	je     c0027550 <LinkedList<Device>::addElement(Device*)+0xc6>
c002752e:	83 ec 0c             	sub    esp,0xc
c0027531:	68 52 8f 02 c0       	push   0xc0028f52
c0027536:	e8 96 23 ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c002753b:	83 c4 10             	add    esp,0x10
c002753e:	eb 10                	jmp    c0027550 <LinkedList<Device>::addElement(Device*)+0xc6>
c0027540:	83 ec 0c             	sub    esp,0xc
c0027543:	68 5c 8f 02 c0       	push   0xc0028f5c
c0027548:	e8 84 23 ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c002754d:	83 c4 10             	add    esp,0x10
c0027550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027554:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027557:	8d 50 01             	lea    edx,[eax+0x1]
c002755a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002755e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027561:	90                   	nop
c0027562:	83 c4 0c             	add    esp,0xc
c0027565:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0027566 <LinkedList<Device>::LinkedList()>:
c0027566:	83 ec 0c             	sub    esp,0xc
c0027569:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002756d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027577:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002757e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027582:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027589:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002758d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027597:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002759e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275a2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00275a9:	83 ec 0c             	sub    esp,0xc
c00275ac:	68 16 8f 02 c0       	push   0xc0028f16
c00275b1:	e8 c9 b1 fe ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c00275b6:	83 c4 10             	add    esp,0x10
c00275b9:	90                   	nop
c00275ba:	83 c4 0c             	add    esp,0xc
c00275bd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00275be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00275be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00275c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00275c4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00275c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00275c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00275ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00275cc:	85 c0                	test   eax,eax
c00275ce:	75 0e                	jne    c00275de <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00275d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00275d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00275d7:	85 c0                	test   eax,eax
c00275d9:	75 03                	jne    c00275de <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00275db:	b0 01                	mov    al,0x1
c00275dd:	c3                   	ret    
c00275de:	b0 00                	mov    al,0x0
c00275e0:	90                   	nop
c00275e1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00275e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00275e2:	83 ec 0c             	sub    esp,0xc
c00275e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00275eb:	85 c0                	test   eax,eax
c00275ed:	75 15                	jne    c0027604 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00275ef:	83 ec 0c             	sub    esp,0xc
c00275f2:	68 68 8f 02 c0       	push   0xc0028f68
c00275f7:	e8 d5 22 ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c00275fc:	83 c4 10             	add    esp,0x10
c00275ff:	e9 88 00 00 00       	jmp    c002768c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0027604:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027608:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002760b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002760e:	85 c0                	test   eax,eax
c0027610:	0f 95 c0             	setne  al
c0027613:	84 c0                	test   al,al
c0027615:	74 10                	je     c0027627 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0027617:	83 ec 0c             	sub    esp,0xc
c002761a:	68 b3 8f 02 c0       	push   0xc0028fb3
c002761f:	e8 ad 22 ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c0027624:	83 c4 10             	add    esp,0x10
c0027627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002762b:	8b 00                	mov    eax,DWORD PTR [eax]
c002762d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0027630:	85 c0                	test   eax,eax
c0027632:	0f 94 c0             	sete   al
c0027635:	84 c0                	test   al,al
c0027637:	74 33                	je     c002766c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0027639:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002763d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027647:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002764e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027652:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027655:	83 f8 01             	cmp    eax,0x1
c0027658:	74 21                	je     c002767b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002765a:	83 ec 0c             	sub    esp,0xc
c002765d:	68 8c 8f 02 c0       	push   0xc0028f8c
c0027662:	e8 6a 22 ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c0027667:	83 c4 10             	add    esp,0x10
c002766a:	eb 0f                	jmp    c002767b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002766c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027670:	8b 00                	mov    eax,DWORD PTR [eax]
c0027672:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0027675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027679:	89 10                	mov    DWORD PTR [eax],edx
c002767b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002767f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027682:	8d 50 ff             	lea    edx,[eax-0x1]
c0027685:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027689:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002768c:	83 c4 0c             	add    esp,0xc
c002768f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0027690 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0027690:	83 ec 0c             	sub    esp,0xc
c0027693:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027698:	75 10                	jne    c00276aa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002769a:	83 ec 0c             	sub    esp,0xc
c002769d:	68 30 8f 02 c0       	push   0xc0028f30
c00276a2:	e8 2a 22 ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c00276a7:	83 c4 10             	add    esp,0x10
c00276aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00276b0:	85 c0                	test   eax,eax
c00276b2:	74 34                	je     c00276e8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00276b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00276bb:	85 c0                	test   eax,eax
c00276bd:	74 29                	je     c00276e8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00276bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276c3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00276c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00276ca:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00276cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00276d5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00276d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00276df:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00276e6:	eb 65                	jmp    c002774d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00276e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00276ee:	85 c0                	test   eax,eax
c00276f0:	75 4b                	jne    c002773d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00276f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00276f9:	85 c0                	test   eax,eax
c00276fb:	75 40                	jne    c002773d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00276fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027701:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027705:	89 10                	mov    DWORD PTR [eax],edx
c0027707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002770b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002770f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027716:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027719:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0027720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027724:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027727:	85 c0                	test   eax,eax
c0027729:	74 22                	je     c002774d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002772b:	83 ec 0c             	sub    esp,0xc
c002772e:	68 52 8f 02 c0       	push   0xc0028f52
c0027733:	e8 99 21 ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c0027738:	83 c4 10             	add    esp,0x10
c002773b:	eb 10                	jmp    c002774d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002773d:	83 ec 0c             	sub    esp,0xc
c0027740:	68 5c 8f 02 c0       	push   0xc0028f5c
c0027745:	e8 87 21 ff ff       	call   c00198d1 <Krnl::panic(char const*)>
c002774a:	83 c4 10             	add    esp,0x10
c002774d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027751:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027754:	8d 50 01             	lea    edx,[eax+0x1]
c0027757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002775b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002775e:	90                   	nop
c002775f:	83 c4 0c             	add    esp,0xc
c0027762:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0027764 <ACPI::~ACPI()>:
c0027764:	83 ec 0c             	sub    esp,0xc
c0027767:	ba 48 9f 02 c0       	mov    edx,0xc0029f48
c002776c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027770:	89 10                	mov    DWORD PTR [eax],edx
c0027772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027776:	83 ec 0c             	sub    esp,0xc
c0027779:	50                   	push   eax
c002777a:	e8 f9 c2 fe ff       	call   c0013a78 <Device::~Device()>
c002777f:	83 c4 10             	add    esp,0x10
c0027782:	90                   	nop
c0027783:	83 c4 0c             	add    esp,0xc
c0027786:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0027788 <ACPI::~ACPI()>:
c0027788:	83 ec 0c             	sub    esp,0xc
c002778b:	83 ec 0c             	sub    esp,0xc
c002778e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027792:	e8 cd ff ff ff       	call   c0027764 <ACPI::~ACPI()>
c0027797:	83 c4 10             	add    esp,0x10
c002779a:	83 ec 08             	sub    esp,0x8
c002779d:	68 68 22 00 00       	push   0x2268
c00277a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00277a6:	e8 f4 ae fe ff       	call   c001269f <operator delete(void*, unsigned long)>
c00277ab:	83 c4 10             	add    esp,0x10
c00277ae:	83 c4 0c             	add    esp,0xc
c00277b1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00277b2 <CPU::~CPU()>:
c00277b2:	83 ec 0c             	sub    esp,0xc
c00277b5:	ba 38 a3 02 c0       	mov    edx,0xc002a338
c00277ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277be:	89 10                	mov    DWORD PTR [eax],edx
c00277c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277c4:	83 ec 0c             	sub    esp,0xc
c00277c7:	50                   	push   eax
c00277c8:	e8 ab c2 fe ff       	call   c0013a78 <Device::~Device()>
c00277cd:	83 c4 10             	add    esp,0x10
c00277d0:	90                   	nop
c00277d1:	83 c4 0c             	add    esp,0xc
c00277d4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00277d6 <CPU::~CPU()>:
c00277d6:	83 ec 0c             	sub    esp,0xc
c00277d9:	83 ec 0c             	sub    esp,0xc
c00277dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00277e0:	e8 cd ff ff ff       	call   c00277b2 <CPU::~CPU()>
c00277e5:	83 c4 10             	add    esp,0x10
c00277e8:	83 ec 08             	sub    esp,0x8
c00277eb:	68 98 11 00 00       	push   0x1198
c00277f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00277f4:	e8 a6 ae fe ff       	call   c001269f <operator delete(void*, unsigned long)>
c00277f9:	83 c4 10             	add    esp,0x10
c00277fc:	83 c4 0c             	add    esp,0xc
c00277ff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0027800 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0027800:	90                   	nop
c0027801:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0027802 <ThreadControlBlock::ThreadControlBlock()>:
c0027802:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027806:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002780d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027811:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0027818:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002781c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0027823:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027827:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002782e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027832:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0027836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002783a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c002783e:	90                   	nop
c002783f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0027840 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0027840:	83 ec 0c             	sub    esp,0xc
c0027843:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027847:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002784d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027851:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002785c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027867:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002786d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027871:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002787c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027883:	83 ec 0c             	sub    esp,0xc
c0027886:	68 16 8f 02 c0       	push   0xc0028f16
c002788b:	e8 ef ae fe ff       	call   c001277f <Dbg::kprintf(char const*, ...)>
c0027890:	83 c4 10             	add    esp,0x10
c0027893:	90                   	nop
c0027894:	83 c4 0c             	add    esp,0xc
c0027897:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0027898 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0027898:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002789c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002789f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00278a0 <Vm::_FPUState::_FPUState()>:
c00278a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00278a4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00278ab:	90                   	nop
c00278ac:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00278ae <PCI::~PCI()>:
c00278ae:	83 ec 0c             	sub    esp,0xc
c00278b1:	ba 80 b2 02 c0       	mov    edx,0xc002b280
c00278b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278ba:	89 10                	mov    DWORD PTR [eax],edx
c00278bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278c0:	83 ec 0c             	sub    esp,0xc
c00278c3:	50                   	push   eax
c00278c4:	e8 87 bb fe ff       	call   c0013450 <Bus::~Bus()>
c00278c9:	83 c4 10             	add    esp,0x10
c00278cc:	90                   	nop
c00278cd:	83 c4 0c             	add    esp,0xc
c00278d0:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00278d2 <PCI::~PCI()>:
c00278d2:	83 ec 0c             	sub    esp,0xc
c00278d5:	83 ec 0c             	sub    esp,0xc
c00278d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00278dc:	e8 cd ff ff ff       	call   c00278ae <PCI::~PCI()>
c00278e1:	83 c4 10             	add    esp,0x10
c00278e4:	83 ec 08             	sub    esp,0x8
c00278e7:	68 58 01 00 00       	push   0x158
c00278ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00278f0:	e8 aa ad fe ff       	call   c001269f <operator delete(void*, unsigned long)>
c00278f5:	83 c4 10             	add    esp,0x10
c00278f8:	83 c4 0c             	add    esp,0xc
c00278fb:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00278fc <IDE::~IDE()>:
c00278fc:	83 ec 0c             	sub    esp,0xc
c00278ff:	ba e4 b4 02 c0       	mov    edx,0xc002b4e4
c0027904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027908:	89 10                	mov    DWORD PTR [eax],edx
c002790a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002790e:	83 ec 0c             	sub    esp,0xc
c0027911:	50                   	push   eax
c0027912:	e8 51 c6 fe ff       	call   c0013f68 <HardDiskController::~HardDiskController()>
c0027917:	83 c4 10             	add    esp,0x10
c002791a:	90                   	nop
c002791b:	83 c4 0c             	add    esp,0xc
c002791e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0027920 <IDE::~IDE()>:
c0027920:	83 ec 0c             	sub    esp,0xc
c0027923:	83 ec 0c             	sub    esp,0xc
c0027926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002792a:	e8 cd ff ff ff       	call   c00278fc <IDE::~IDE()>
c002792f:	83 c4 10             	add    esp,0x10
c0027932:	83 ec 08             	sub    esp,0x8
c0027935:	68 70 02 00 00       	push   0x270
c002793a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002793e:	e8 5c ad fe ff       	call   c001269f <operator delete(void*, unsigned long)>
c0027943:	83 c4 10             	add    esp,0x10
c0027946:	83 c4 0c             	add    esp,0xc
c0027949:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002794a <SATABus::~SATABus()>:
c002794a:	83 ec 0c             	sub    esp,0xc
c002794d:	ba c4 b5 02 c0       	mov    edx,0xc002b5c4
c0027952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027956:	89 10                	mov    DWORD PTR [eax],edx
c0027958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002795c:	83 ec 0c             	sub    esp,0xc
c002795f:	50                   	push   eax
c0027960:	e8 03 c6 fe ff       	call   c0013f68 <HardDiskController::~HardDiskController()>
c0027965:	83 c4 10             	add    esp,0x10
c0027968:	90                   	nop
c0027969:	83 c4 0c             	add    esp,0xc
c002796c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002796e <SATABus::~SATABus()>:
c002796e:	83 ec 0c             	sub    esp,0xc
c0027971:	83 ec 0c             	sub    esp,0xc
c0027974:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027978:	e8 cd ff ff ff       	call   c002794a <SATABus::~SATABus()>
c002797d:	83 c4 10             	add    esp,0x10
c0027980:	83 ec 08             	sub    esp,0x8
c0027983:	68 64 01 00 00       	push   0x164
c0027988:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002798c:	e8 0e ad fe ff       	call   c001269f <operator delete(void*, unsigned long)>
c0027991:	83 c4 10             	add    esp,0x10
c0027994:	83 c4 0c             	add    esp,0xc
c0027997:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0027998 <ATA::~ATA()>:
c0027998:	83 ec 0c             	sub    esp,0xc
c002799b:	ba 04 b6 02 c0       	mov    edx,0xc002b604
c00279a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279a4:	89 10                	mov    DWORD PTR [eax],edx
c00279a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279aa:	83 ec 0c             	sub    esp,0xc
c00279ad:	50                   	push   eax
c00279ae:	e8 93 c6 fe ff       	call   c0014046 <PhysicalDisk::~PhysicalDisk()>
c00279b3:	83 c4 10             	add    esp,0x10
c00279b6:	90                   	nop
c00279b7:	83 c4 0c             	add    esp,0xc
c00279ba:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00279bc <ATA::~ATA()>:
c00279bc:	83 ec 0c             	sub    esp,0xc
c00279bf:	83 ec 0c             	sub    esp,0xc
c00279c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00279c6:	e8 cd ff ff ff       	call   c0027998 <ATA::~ATA()>
c00279cb:	83 c4 10             	add    esp,0x10
c00279ce:	83 ec 08             	sub    esp,0x8
c00279d1:	68 7c 01 00 00       	push   0x17c
c00279d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00279da:	e8 c0 ac fe ff       	call   c001269f <operator delete(void*, unsigned long)>
c00279df:	83 c4 10             	add    esp,0x10
c00279e2:	83 c4 0c             	add    esp,0xc
c00279e5:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00279e6 <ATAPI::~ATAPI()>:
c00279e6:	83 ec 0c             	sub    esp,0xc
c00279e9:	ba 70 b6 02 c0       	mov    edx,0xc002b670
c00279ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279f2:	89 10                	mov    DWORD PTR [eax],edx
c00279f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279f8:	83 ec 0c             	sub    esp,0xc
c00279fb:	50                   	push   eax
c00279fc:	e8 45 c6 fe ff       	call   c0014046 <PhysicalDisk::~PhysicalDisk()>
c0027a01:	83 c4 10             	add    esp,0x10
c0027a04:	90                   	nop
c0027a05:	83 c4 0c             	add    esp,0xc
c0027a08:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0027a0a <ATAPI::~ATAPI()>:
c0027a0a:	83 ec 0c             	sub    esp,0xc
c0027a0d:	83 ec 0c             	sub    esp,0xc
c0027a10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a14:	e8 cd ff ff ff       	call   c00279e6 <ATAPI::~ATAPI()>
c0027a19:	83 c4 10             	add    esp,0x10
c0027a1c:	83 ec 08             	sub    esp,0x8
c0027a1f:	68 80 01 00 00       	push   0x180
c0027a24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a28:	e8 72 ac fe ff       	call   c001269f <operator delete(void*, unsigned long)>
c0027a2d:	83 c4 10             	add    esp,0x10
c0027a30:	83 c4 0c             	add    esp,0xc
c0027a33:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0027a34 <SATA::~SATA()>:
c0027a34:	83 ec 0c             	sub    esp,0xc
c0027a37:	ba 94 b7 02 c0       	mov    edx,0xc002b794
c0027a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a40:	89 10                	mov    DWORD PTR [eax],edx
c0027a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a46:	83 ec 0c             	sub    esp,0xc
c0027a49:	50                   	push   eax
c0027a4a:	e8 f7 c5 fe ff       	call   c0014046 <PhysicalDisk::~PhysicalDisk()>
c0027a4f:	83 c4 10             	add    esp,0x10
c0027a52:	90                   	nop
c0027a53:	83 c4 0c             	add    esp,0xc
c0027a56:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0027a58 <SATA::~SATA()>:
c0027a58:	83 ec 0c             	sub    esp,0xc
c0027a5b:	83 ec 0c             	sub    esp,0xc
c0027a5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a62:	e8 cd ff ff ff       	call   c0027a34 <SATA::~SATA()>
c0027a67:	83 c4 10             	add    esp,0x10
c0027a6a:	83 ec 08             	sub    esp,0x8
c0027a6d:	68 74 01 00 00       	push   0x174
c0027a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a76:	e8 24 ac fe ff       	call   c001269f <operator delete(void*, unsigned long)>
c0027a7b:	83 c4 10             	add    esp,0x10
c0027a7e:	83 c4 0c             	add    esp,0xc
c0027a81:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0027a82 <AVX::~AVX()>:
c0027a82:	83 ec 0c             	sub    esp,0xc
c0027a85:	ba d0 b7 02 c0       	mov    edx,0xc002b7d0
c0027a8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a8e:	89 10                	mov    DWORD PTR [eax],edx
c0027a90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a94:	83 ec 0c             	sub    esp,0xc
c0027a97:	50                   	push   eax
c0027a98:	e8 2d c6 fe ff       	call   c00140ca <FPU::~FPU()>
c0027a9d:	83 c4 10             	add    esp,0x10
c0027aa0:	90                   	nop
c0027aa1:	83 c4 0c             	add    esp,0xc
c0027aa4:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0027aa6 <AVX::~AVX()>:
c0027aa6:	83 ec 0c             	sub    esp,0xc
c0027aa9:	83 ec 0c             	sub    esp,0xc
c0027aac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027ab0:	e8 cd ff ff ff       	call   c0027a82 <AVX::~AVX()>
c0027ab5:	83 c4 10             	add    esp,0x10
c0027ab8:	83 ec 08             	sub    esp,0x8
c0027abb:	68 58 01 00 00       	push   0x158
c0027ac0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027ac4:	e8 d6 ab fe ff       	call   c001269f <operator delete(void*, unsigned long)>
c0027ac9:	83 c4 10             	add    esp,0x10
c0027acc:	83 c4 0c             	add    esp,0xc
c0027acf:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0027ad0 <MMX::~MMX()>:
c0027ad0:	83 ec 0c             	sub    esp,0xc
c0027ad3:	ba 10 b8 02 c0       	mov    edx,0xc002b810
c0027ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027adc:	89 10                	mov    DWORD PTR [eax],edx
c0027ade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ae2:	83 ec 0c             	sub    esp,0xc
c0027ae5:	50                   	push   eax
c0027ae6:	e8 df c5 fe ff       	call   c00140ca <FPU::~FPU()>
c0027aeb:	83 c4 10             	add    esp,0x10
c0027aee:	90                   	nop
c0027aef:	83 c4 0c             	add    esp,0xc
c0027af2:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0027af4 <MMX::~MMX()>:
c0027af4:	83 ec 0c             	sub    esp,0xc
c0027af7:	83 ec 0c             	sub    esp,0xc
c0027afa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027afe:	e8 cd ff ff ff       	call   c0027ad0 <MMX::~MMX()>
c0027b03:	83 c4 10             	add    esp,0x10
c0027b06:	83 ec 08             	sub    esp,0x8
c0027b09:	68 58 01 00 00       	push   0x158
c0027b0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b12:	e8 88 ab fe ff       	call   c001269f <operator delete(void*, unsigned long)>
c0027b17:	83 c4 10             	add    esp,0x10
c0027b1a:	83 c4 0c             	add    esp,0xc
c0027b1d:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0027b1e <SSE::~SSE()>:
c0027b1e:	83 ec 0c             	sub    esp,0xc
c0027b21:	ba 50 b8 02 c0       	mov    edx,0xc002b850
c0027b26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b2a:	89 10                	mov    DWORD PTR [eax],edx
c0027b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b30:	83 ec 0c             	sub    esp,0xc
c0027b33:	50                   	push   eax
c0027b34:	e8 91 c5 fe ff       	call   c00140ca <FPU::~FPU()>
c0027b39:	83 c4 10             	add    esp,0x10
c0027b3c:	90                   	nop
c0027b3d:	83 c4 0c             	add    esp,0xc
c0027b40:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0027b42 <SSE::~SSE()>:
c0027b42:	83 ec 0c             	sub    esp,0xc
c0027b45:	83 ec 0c             	sub    esp,0xc
c0027b48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b4c:	e8 cd ff ff ff       	call   c0027b1e <SSE::~SSE()>
c0027b51:	83 c4 10             	add    esp,0x10
c0027b54:	83 ec 08             	sub    esp,0x8
c0027b57:	68 58 01 00 00       	push   0x158
c0027b5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b60:	e8 3a ab fe ff       	call   c001269f <operator delete(void*, unsigned long)>
c0027b65:	83 c4 10             	add    esp,0x10
c0027b68:	83 c4 0c             	add    esp,0xc
c0027b6b:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0027b6c <x87::~x87()>:
c0027b6c:	83 ec 0c             	sub    esp,0xc
c0027b6f:	ba 90 b8 02 c0       	mov    edx,0xc002b890
c0027b74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b78:	89 10                	mov    DWORD PTR [eax],edx
c0027b7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b7e:	83 ec 0c             	sub    esp,0xc
c0027b81:	50                   	push   eax
c0027b82:	e8 43 c5 fe ff       	call   c00140ca <FPU::~FPU()>
c0027b87:	83 c4 10             	add    esp,0x10
c0027b8a:	90                   	nop
c0027b8b:	83 c4 0c             	add    esp,0xc
c0027b8e:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0027b90 <x87::~x87()>:
c0027b90:	83 ec 0c             	sub    esp,0xc
c0027b93:	83 ec 0c             	sub    esp,0xc
c0027b96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b9a:	e8 cd ff ff ff       	call   c0027b6c <x87::~x87()>
c0027b9f:	83 c4 10             	add    esp,0x10
c0027ba2:	83 ec 08             	sub    esp,0x8
c0027ba5:	68 58 01 00 00       	push   0x158
c0027baa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027bae:	e8 ec aa fe ff       	call   c001269f <operator delete(void*, unsigned long)>
c0027bb3:	83 c4 10             	add    esp,0x10
c0027bb6:	83 c4 0c             	add    esp,0xc
c0027bb9:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0027bba <IOAPIC::~IOAPIC()>:
c0027bba:	83 ec 0c             	sub    esp,0xc
c0027bbd:	ba e8 b9 02 c0       	mov    edx,0xc002b9e8
c0027bc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027bc6:	89 10                	mov    DWORD PTR [eax],edx
c0027bc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027bcc:	83 ec 0c             	sub    esp,0xc
c0027bcf:	50                   	push   eax
c0027bd0:	e8 a3 be fe ff       	call   c0013a78 <Device::~Device()>
c0027bd5:	83 c4 10             	add    esp,0x10
c0027bd8:	90                   	nop
c0027bd9:	83 c4 0c             	add    esp,0xc
c0027bdc:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0027bde <IOAPIC::~IOAPIC()>:
c0027bde:	83 ec 0c             	sub    esp,0xc
c0027be1:	83 ec 0c             	sub    esp,0xc
c0027be4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027be8:	e8 cd ff ff ff       	call   c0027bba <IOAPIC::~IOAPIC()>
c0027bed:	83 c4 10             	add    esp,0x10
c0027bf0:	83 ec 08             	sub    esp,0x8
c0027bf3:	68 68 01 00 00       	push   0x168
c0027bf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027bfc:	e8 9e aa fe ff       	call   c001269f <operator delete(void*, unsigned long)>
c0027c01:	83 c4 10             	add    esp,0x10
c0027c04:	83 c4 0c             	add    esp,0xc
c0027c07:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0027c08 <APIC::~APIC()>:
c0027c08:	83 ec 0c             	sub    esp,0xc
c0027c0b:	ba a0 b9 02 c0       	mov    edx,0xc002b9a0
c0027c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c14:	89 10                	mov    DWORD PTR [eax],edx
c0027c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c1a:	83 ec 0c             	sub    esp,0xc
c0027c1d:	50                   	push   eax
c0027c1e:	e8 71 c9 fe ff       	call   c0014594 <InterruptController::~InterruptController()>
c0027c23:	83 c4 10             	add    esp,0x10
c0027c26:	90                   	nop
c0027c27:	83 c4 0c             	add    esp,0xc
c0027c2a:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0027c2c <APIC::~APIC()>:
c0027c2c:	83 ec 0c             	sub    esp,0xc
c0027c2f:	83 ec 0c             	sub    esp,0xc
c0027c32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c36:	e8 cd ff ff ff       	call   c0027c08 <APIC::~APIC()>
c0027c3b:	83 c4 10             	add    esp,0x10
c0027c3e:	83 ec 08             	sub    esp,0x8
c0027c41:	68 58 21 00 00       	push   0x2158
c0027c46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c4a:	e8 50 aa fe ff       	call   c001269f <operator delete(void*, unsigned long)>
c0027c4f:	83 c4 10             	add    esp,0x10
c0027c52:	83 c4 0c             	add    esp,0xc
c0027c55:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0027c56 <PIC::~PIC()>:
c0027c56:	83 ec 0c             	sub    esp,0xc
c0027c59:	ba 38 ba 02 c0       	mov    edx,0xc002ba38
c0027c5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c62:	89 10                	mov    DWORD PTR [eax],edx
c0027c64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c68:	83 ec 0c             	sub    esp,0xc
c0027c6b:	50                   	push   eax
c0027c6c:	e8 23 c9 fe ff       	call   c0014594 <InterruptController::~InterruptController()>
c0027c71:	83 c4 10             	add    esp,0x10
c0027c74:	90                   	nop
c0027c75:	83 c4 0c             	add    esp,0xc
c0027c78:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0027c7a <PIC::~PIC()>:
c0027c7a:	83 ec 0c             	sub    esp,0xc
c0027c7d:	83 ec 0c             	sub    esp,0xc
c0027c80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c84:	e8 cd ff ff ff       	call   c0027c56 <PIC::~PIC()>
c0027c89:	83 c4 10             	add    esp,0x10
c0027c8c:	83 ec 08             	sub    esp,0x8
c0027c8f:	68 58 21 00 00       	push   0x2158
c0027c94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c98:	e8 02 aa fe ff       	call   c001269f <operator delete(void*, unsigned long)>
c0027c9d:	83 c4 10             	add    esp,0x10
c0027ca0:	83 c4 0c             	add    esp,0xc
c0027ca3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0027ca4 <APICTimer::~APICTimer()>:
c0027ca4:	83 ec 0c             	sub    esp,0xc
c0027ca7:	ba 8c ba 02 c0       	mov    edx,0xc002ba8c
c0027cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027cb0:	89 10                	mov    DWORD PTR [eax],edx
c0027cb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027cb6:	83 ec 0c             	sub    esp,0xc
c0027cb9:	50                   	push   eax
c0027cba:	e8 d5 e6 fe ff       	call   c0016394 <Timer::~Timer()>
c0027cbf:	83 c4 10             	add    esp,0x10
c0027cc2:	90                   	nop
c0027cc3:	83 c4 0c             	add    esp,0xc
c0027cc6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0027cc8 <APICTimer::~APICTimer()>:
c0027cc8:	83 ec 0c             	sub    esp,0xc
c0027ccb:	83 ec 0c             	sub    esp,0xc
c0027cce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027cd2:	e8 cd ff ff ff       	call   c0027ca4 <APICTimer::~APICTimer()>
c0027cd7:	83 c4 10             	add    esp,0x10
c0027cda:	83 ec 08             	sub    esp,0x8
c0027cdd:	68 60 01 00 00       	push   0x160
c0027ce2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027ce6:	e8 b4 a9 fe ff       	call   c001269f <operator delete(void*, unsigned long)>
c0027ceb:	83 c4 10             	add    esp,0x10
c0027cee:	83 c4 0c             	add    esp,0xc
c0027cf1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0027cf2 <PIT::~PIT()>:
c0027cf2:	83 ec 0c             	sub    esp,0xc
c0027cf5:	ba dc ba 02 c0       	mov    edx,0xc002badc
c0027cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027cfe:	89 10                	mov    DWORD PTR [eax],edx
c0027d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d04:	83 ec 0c             	sub    esp,0xc
c0027d07:	50                   	push   eax
c0027d08:	e8 87 e6 fe ff       	call   c0016394 <Timer::~Timer()>
c0027d0d:	83 c4 10             	add    esp,0x10
c0027d10:	90                   	nop
c0027d11:	83 c4 0c             	add    esp,0xc
c0027d14:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0027d16 <PIT::~PIT()>:
c0027d16:	83 ec 0c             	sub    esp,0xc
c0027d19:	83 ec 0c             	sub    esp,0xc
c0027d1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027d20:	e8 cd ff ff ff       	call   c0027cf2 <PIT::~PIT()>
c0027d25:	83 c4 10             	add    esp,0x10
c0027d28:	83 ec 08             	sub    esp,0x8
c0027d2b:	68 5c 01 00 00       	push   0x15c
c0027d30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027d34:	e8 66 a9 fe ff       	call   c001269f <operator delete(void*, unsigned long)>
c0027d39:	83 c4 10             	add    esp,0x10
c0027d3c:	83 c4 0c             	add    esp,0xc
c0027d3f:	c3                   	ret    
